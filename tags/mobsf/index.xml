<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>MobSF on SBK Site</title><link>https://bernie6401.github.io/tags/mobsf/</link><description>Recent content in MobSF on SBK Site</description><generator>Hugo</generator><language>en-us</language><atom:link href="https://bernie6401.github.io/tags/mobsf/index.xml" rel="self" type="application/rss+xml"/><item><title>Drozer/MobSF Installation</title><link>https://bernie6401.github.io/docs/tools/others/android-related/installation/drozer_mobsf-installation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/tools/others/android-related/installation/drozer_mobsf-installation/</guid><description>&lt;h1 id="drozermobsf-installation">
 Drozer/MobSF Installation
 &lt;a class="anchor" href="#drozermobsf-installation">#&lt;/a>
&lt;/h1>
&lt;h2 id="installation---drozer">
 Installation - Drozer
 &lt;a class="anchor" href="#installation---drozer">#&lt;/a>
&lt;/h2>
&lt;p>我是參考&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>的說明，但其實參考官網的也可以，我是用docker裝&lt;/p>
&lt;ol>
&lt;li>Download drozer-agent &amp;amp; Install - &lt;a href="https://github.com/WithSecureLabs/drozer-agent/releases">Download&lt;/a>
這是要安裝在手機測試端的類似一個server的概念，而我們的電腦端也要安裝類似的東西(有好幾種方式，我是用Docker)，讓電腦和手機可以互通
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ adb install drozer-agent.apk
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>Start a Session
打開agent app會發現右下角有一個Off，點擊後會變成On，代表這個agent已經準備好要和電腦這邊的server連接
![Screenshot_20240603-131808](&lt;a href="https://hackmd.io/_uploads/SkPEfC9NC.png">https://hackmd.io/_uploads/SkPEfC9NC.png&lt;/a> =200x)&lt;/li>
&lt;li>設定電腦的Port轉發到Android的某個Port
根據&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>的說明，以及官網的要求，我們必須要把電腦31415這個port的封包轉發到手機端的31415這個port
&lt;blockquote>
&lt;p>Android 的 adb forward 通訊埠轉發的功能，adb forward 的功能是轉發 PC 電腦上某個埠號 (port) 資料到 Android 裝置的某個埠號 (port)，例如：下列 adb forward 指令就是將 PC 端的 port 10000 收到的資料，轉發給到 Android Device 的 port 20000&lt;/p>&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ adb forward tcp:31415 tcp:31415
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>Install PC Drozer Client
看到以下畫面就代表成功了
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ docker run -it --add-host host.docker.internal:host-gateway withsecurelabs/drozer console connect --server host.docker.internal
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Selecting ff762fc058e91df3 &lt;span style="color:#f92672">(&lt;/span>Google Pixel 6a 13&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .. ..:.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ..o.. .r..
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ..a.. . ....... . ..nd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ro..idsnemesisand..pr
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .otectorandroidsneme.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .,sisandprotectorandroids+.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ..nemesisandprotectorandroidsn:.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .emesisandprotectorandroidsnemes..
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ..isandp,..,rotecyayandro,..,idsnem.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .isisandp..rotectorandroid..snemisis.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ,andprotectorandroidsnemisisandprotec.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .torandroidsnemesisandprotectorandroid.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .snemisisandprotectorandroidsnemesisan:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .dprotectorandroidsnemesisandprotector.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drozer Console &lt;span style="color:#f92672">(&lt;/span>v3.0.2&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>dz&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;h2 id="installation---mobsf">
 Installation - MobSF
 &lt;a class="anchor" href="#installation---mobsf">#&lt;/a>
&lt;/h2>
&lt;p>可以直接使用&lt;a href="https://mobsf.live/">線上的工具&lt;/a>，也可以用docker架在自己的電腦&lt;/p></description></item><item><title>Test Sieve by MobSF</title><link>https://bernie6401.github.io/docs/tools/others/android-related/mobsf/test-sieve-by-mobsf/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/tools/others/android-related/mobsf/test-sieve-by-mobsf/</guid><description>&lt;h1 id="test-sieve-by-mobsf">
 Test Sieve by MobSF
 &lt;a class="anchor" href="#test-sieve-by-mobsf">#&lt;/a>
&lt;/h1>
&lt;p>這個工具真的很完整，而且蠻萬用的，光是靜態分析就很詳細&lt;/p>
&lt;h2 id="static-analysis">
 Static Analysis
 &lt;a class="anchor" href="#static-analysis">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>Overview
一開始就告訴測試者有多少的東西被export，和Drozer分析的一樣
&lt;img src="https://hackmd.io/_uploads/H1oU-p3E0.png" alt="圖片" />&lt;/li>
&lt;li>Application Permission
MobSF還可以分析實際寫的code並且查看哪邊有Permission相關的威脅，在Code Analysis的地方有重複的提到External Read/Write的漏洞
&lt;img src="https://hackmd.io/_uploads/SJW6fTnV0.png" alt="圖片" />&lt;/li>
&lt;li>Manifest Analysis
這一段就很像Drozer做attack surface後的結果，也就是activity/service/broadcast receiver/content providers exported + is debuggable
&lt;ul>
&lt;li>Activity Exported
&lt;img src="https://hackmd.io/_uploads/HJZw4ahVC.png" alt="圖片" />
&lt;img src="https://hackmd.io/_uploads/HJhO4p2EA.png" alt="圖片" />&lt;/li>
&lt;li>Service Exported
&lt;img src="https://hackmd.io/_uploads/r1msNa3VR.png" alt="圖片" />
&lt;img src="https://hackmd.io/_uploads/rJXTNpnER.png" alt="圖片" />&lt;/li>
&lt;li>Content Providers Exported
&lt;img src="https://hackmd.io/_uploads/BkrR4a3NC.png" alt="圖片" />
&lt;img src="https://hackmd.io/_uploads/B1GJHa24C.png" alt="圖片" />
在Code Analysis的地方有重複的提到這個漏洞&lt;/li>
&lt;li>Debuggable
&lt;img src="https://hackmd.io/_uploads/SyObSpn4A.png" alt="圖片" />
在Code Analysis的地方有重複的提到這個漏洞&lt;/li>
&lt;li>其他
&lt;ul>
&lt;li>版本過低
&lt;img src="https://hackmd.io/_uploads/SyVkL63VC.png" alt="圖片" />&lt;/li>
&lt;li>Backupable
&lt;img src="https://hackmd.io/_uploads/B1LSvpn4A.png" alt="圖片" />&lt;/li>
&lt;li>和最近的CVE PoC分析
這個功能蠻好的，例如下圖，這三個漏洞都是去分析&lt;code>FileSelectActivity&lt;/code>/&lt;code>MainLoginActivity&lt;/code>/&lt;code>PWList&lt;/code>得出可能會有StrandHogg 2.0 或StrandHogg的問題，關於StrandHogg 2.0 的說明可以看&lt;a href="https://www.twcert.org.tw/tw/cp-104-3636-6072b-1.html">twcert的文章&lt;/a>，簡單來說這個惡意軟體的效果是常駐在各個正常執行的軟體背後，並且竊取一些機敏資料
&lt;img src="https://hackmd.io/_uploads/HJf0IpnN0.png" alt="圖片" />
&lt;img src="https://hackmd.io/_uploads/S16AL634R.png" alt="圖片" />
&lt;img src="https://hackmd.io/_uploads/H12kva34C.png" alt="圖片" />
&lt;blockquote>
&lt;p>StrandHogg 2.0 的運作原理，和去年發現的 StrandHogg 相當類似，都可在感染後將自己隱藏在正常的軟體身後；當用戶開啟正常軟體時，真正執行的並不是這個正常版的軟體，而是植入了惡意軟體程式碼的「分身」。
新版 StrandHogg 2.0 除了上述的類似功能外，還能讓惡意軟體偽裝成任意的 Android App；先前的版本只能偽裝成 TaskAffinity 這支 App，甚至能在用戶點按開啟任何 App 時立刻偽裝成該 App。&lt;/p></description></item></channel></rss>