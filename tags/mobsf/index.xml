<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>MobSF :: Tag :: SBK Hugo Site</title><link>https://bernie6401.github.io/tags/mobsf/index.html</link><description/><generator>Hugo</generator><language>en-us</language><atom:link href="https://bernie6401.github.io/tags/mobsf/index.xml" rel="self" type="application/rss+xml"/><item><title>Drozer/MobSF Installation</title><link>https://bernie6401.github.io/tools/others/android-related/installation/drozer_mobsf-installation/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/tools/others/android-related/installation/drozer_mobsf-installation/index.html</guid><description>Drozer/MobSF Installation Installation - Drozer 我是參考1的說明，但其實參考官網的也可以，我是用docker裝
Download drozer-agent &amp; Install - Download 這是要安裝在手機測試端的類似一個server的概念，而我們的電腦端也要安裝類似的東西(有好幾種方式，我是用Docker)，讓電腦和手機可以互通 $ adb install drozer-agent.apk Start a Session 打開agent app會發現右下角有一個Off，點擊後會變成On，代表這個agent已經準備好要和電腦這邊的server連接 ![Screenshot_20240603-131808](https://hackmd.io/_uploads/SkPEfC9NC.png =200x) 設定電腦的Port轉發到Android的某個Port 根據2的說明，以及官網的要求，我們必須要把電腦31415這個port的封包轉發到手機端的31415這個port Android 的 adb forward 通訊埠轉發的功能，adb forward 的功能是轉發 PC 電腦上某個埠號 (port) 資料到 Android 裝置的某個埠號 (port)，例如：下列 adb forward 指令就是將 PC 端的 port 10000 收到的資料，轉發給到 Android Device 的 port 20000
$ adb forward tcp:31415 tcp:31415 Install PC Drozer Client 看到以下畫面就代表成功了 $ docker run -it --add-host host.docker.internal:host-gateway withsecurelabs/drozer console connect --server host.docker.internal Selecting ff762fc058e91df3 (Google Pixel 6a 13) .. ..:. ..o.. .r.. ..a.. . ....... . ..nd ro..idsnemesisand..pr .otectorandroidsneme. .,sisandprotectorandroids+. ..nemesisandprotectorandroidsn:. .emesisandprotectorandroidsnemes.. ..isandp,..,rotecyayandro,..,idsnem. .isisandp..rotectorandroid..snemisis. ,andprotectorandroidsnemisisandprotec. .torandroidsnemesisandprotectorandroid. .snemisisandprotectorandroidsnemesisan: .dprotectorandroidsnemesisandprotector. drozer Console (v3.0.2) dz> Installation - MobSF 可以直接使用線上的工具，也可以用docker架在自己的電腦</description></item><item><title>Test Sieve by MobSF</title><link>https://bernie6401.github.io/tools/others/android-related/mobsf/test-sieve-by-mobsf/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/tools/others/android-related/mobsf/test-sieve-by-mobsf/index.html</guid><description>Test Sieve by MobSF 這個工具真的很完整，而且蠻萬用的，光是靜態分析就很詳細
Static Analysis Overview 一開始就告訴測試者有多少的東西被export，和Drozer分析的一樣 Application Permission MobSF還可以分析實際寫的code並且查看哪邊有Permission相關的威脅，在Code Analysis的地方有重複的提到External Read/Write的漏洞 Manifest Analysis 這一段就很像Drozer做attack surface後的結果，也就是activity/service/broadcast receiver/content providers exported + is debuggable Activity Exported Service Exported Content Providers Exported 在Code Analysis的地方有重複的提到這個漏洞 Debuggable 在Code Analysis的地方有重複的提到這個漏洞 其他 版本過低 Backupable 和最近的CVE PoC分析 這個功能蠻好的，例如下圖，這三個漏洞都是去分析FileSelectActivity/MainLoginActivity/PWList得出可能會有StrandHogg 2.0 或StrandHogg的問題，關於StrandHogg 2.0 的說明可以看twcert的文章，簡單來說這個惡意軟體的效果是常駐在各個正常執行的軟體背後，並且竊取一些機敏資料 StrandHogg 2.0 的運作原理，和去年發現的 StrandHogg 相當類似，都可在感染後將自己隱藏在正常的軟體身後；當用戶開啟正常軟體時，真正執行的並不是這個正常版的軟體，而是植入了惡意軟體程式碼的「分身」。 新版 StrandHogg 2.0 除了上述的類似功能外，還能讓惡意軟體偽裝成任意的 Android App；先前的版本只能偽裝成 TaskAffinity 這支 App，甚至能在用戶點按開啟任何 App 時立刻偽裝成該 App。</description></item></channel></rss>