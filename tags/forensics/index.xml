<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Forensics :: Tag :: SBK Hugo Site</title><link>https://bernie6401.github.io/tags/forensics/index.html</link><description/><generator>Hugo</generator><language>en-us</language><atom:link href="https://bernie6401.github.io/tags/forensics/index.xml" rel="self" type="application/rss+xml"/><item><title>Forensics Cheat Sheet</title><link>https://bernie6401.github.io/tools/ctf/forensics-cheat-sheet/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/tools/ctf/forensics-cheat-sheet/index.html</guid><description>Forensics Cheat Sheet Windows Where SOFTWARE: root/Windows/System32/config/SOFTWARE SYSTEM: root/Windows/System32/config/SYSTEM NTUSER.DAT: root/Users/{username}/NTUSER.DAT $MFT: root/$MFT SOFTWARE Information 原本電腦OS的基本資訊(Build Number/Product Name/): SOFTWARE/Microsoft/Windows NT/CurrentVersion 檢查SID: SOFTWARE/Microsoft/Windows NT/CurrentVersion/ProfileList 查看登入: SOFTWARE/Microsoft/Windows NT/CurrentVersion/Winlogon StartUp Run: SOFTWARE/Microsoft/Windows/CurrentVersion/Run NTUSER.DAT(每個使用者都不一樣) UserAssit: root/SOFTWARE/Microsoft/Windows/CurrentVersion/Explorer/UserAssist Recent Docs: root/SOFTWARE/Microsoft/Windows/CurrentVersion/Explorer/RecentDocs System Information 電腦名稱: SYSTEM/ControlSet001/Control/ComputerName/ComputerName 電腦IP/DHCP相關資訊: SYSTEM/ControlSet001/Services/Tcpip/Parameters/Interfaces/ 時區: SYSTEM/ControlSet001/Control/TimeZoneInformation USB資訊: SYSTEM/ControlSet001/Enum/USBSTOR/ CPU架構: SYSTEM/ControlSet001/Control/Session Manager/Environment/ Database Chrome History: ./Users/{username}/AppData/Local/Google/Chrome/User Data/Default/History Firefox History: ./Users/{username}/AppData/Roaming/Mozilla/Firefox/Profiles/{random}.default-release/places.sqlite Skype Chat History: ./Users/{username}/AppData/Roaming/Skype/{account name} Taskbar ./Users/{username}/AppData/Roaming/Microsoft/Internet Explorer/Quick Launch/User Pinned/TaskBar mac-OS plist $ sudo apt install libplist-utils -y $ plistutil -i {plist file} -o {output file} System Version: ./root/System/Library/CoreServices/SystemVersion.plist Browser Bookmark ./root/Users/{username}/Library/Safari/Bookmarks.plist Password information ./root/private/var/db/dslocal/nodes/Default/users/{username}.plist The process responsible for connecting iPhones/iPads with MacOS is lockdown ./root/private/var/db/dslocal/nodes/Default/users/_usbmux.plist Spotlight(這個不需要透過plistutil就可以直接cat) ./root/Users/{username}/Library/Application Support/com.apple.spotlight/com.apple.spotlight.Shortcuts Event Log 短期檔案系統變更儲存在.fseventsd中，必須使用mac_apt這個工具幫忙parse(FSEVENTS) ./root/.fseventsd/ ScreenTime: 一樣要透過mac_apt幫忙parse(SCREENTIME)，記得要把RMAdminStore-Local.sqlite-wal這個檔案和RMAdminStore-Local.sqlite放在一起執行 ./root/private/var/folders/bf/{random strings}/0/com.apple.ScreenTimeAgent/Store/RMAdminStore-Local.sqlite Database Note ./root/Users/{username}/Library/Group Containers/group.com.apple.notes Quarantined Events ./root/Users/{username}/Library/Preferences/com.apple.LaunchServices.QuarantineEventsV2 Messages ./root/Users/{username}/Library/Messages/chat.db Volatilitys 主要的CheatSheet ldrmodules: 更進階的dlllist，可以顯示被隱藏的dll，以及dll的狀態 $ ./volatility_2.6_win64_standalone.exe -f {image name} --profile {profile name} ldrmodules --pid {pid} 如果要dump被injected過的process: $ ./volatility_2.6_win64_standalone.exe -f {image name} --profile {profile name} malfind --pid {pid} --dump-dir={output folder} dump hash $ ./volatility_2.6_win64_standalone.exe -f {image name} --profile {profile name} hashdump > ntlm.hash 如果是要找到某個東西的timestamp，可以考慮直接用timeliner這個plubin，主要的功能是就是建立記憶體中的各種痕跡資訊的時間線 $ ./volatility_2.6_win64_standalone.exe -f {image name} --profile {profile name} timeliner 查看網路連線紀錄 $ ./volatility_2.6_win64_standalone.exe -f {image name} --profile {profile name} netscan 在memory中用yarascan去search不同的pattern $ ./volatility_2.6_win64_standalone.exe -f {image name} --profile {profile name} yarascan -Y "example strings" console中的command紀錄 $ ./volatility_2.6_win64_standalone.exe -f {image name} --profile {profile name} consoles 查看iexplorer的紀錄 $ ./volatility_2.6_win64_standalone.exe -f {image name} --profile {profile name} iehistory</description></item><item><title>TaiwanHolyHigh - Windows Forensics - $MFT Background</title><link>https://bernie6401.github.io/security/course/tai.holyhigh/windows-os-forensics/taiwanholyhigh---windows-forensics---mft-background/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/course/tai.holyhigh/windows-os-forensics/taiwanholyhigh---windows-forensics---mft-background/index.html</guid><description>TaiwanHolyHigh - Windows Forensics - $MFT Background :::spoiler TOC [TOC] ::: :::info 以下引用若無特別說明皆來自於講師的上課簡報 :::
Background $在windows代表系統檔案 $MFT(Master File Table): FAT(File Allocation Table): Fat 檔案系統，簡稱 File Allocation Table，是微軟和 Caldera 開發組為 Windows 電腦開發的檔案系統 雖然它主要是電腦磁區類型，但在過去幾年中它已作為主要檔案系統格式用於各種手機裝置中。此外，由於它是一個 8 位檔案系統，因此簇數會隨著磁碟容量的增加而增加。 FAT12 - 12 位 FAT16 - 16 位 FAT32 - 32 位 我們還應該澄清，FAT 檔案系統從 1977 年開始使用，但 FAT32 是在 1996 年引入的
BIOS(Basic Input Output System) POST(Power On Self Test) POST自檢測過程大致為：加電－CPU－ROM－BIOS－System Clock－DMA－64KB RAM－IRQ－顯卡等。檢測顯卡以前的過程稱過關鍵部件測試，如果關鍵部件有問題，計算機會處於掛起狀態，習慣上稱為核心故障。另一類故障稱為非關鍵性故障，檢測完顯卡後，計算機將對64KB以上內存、I／O口、軟硬盤驅動器、鍵盤、即插即用設備、CMOS設置等進行檢測，並在屏幕上顯示各種信息和出錯報告。在正常情況下，POST過程進行得非常快，我們幾乎無法感覺到這個過程。 POST自檢測代碼含義是什麼？ 當系統檢測到相應的錯誤時，會以兩種方式進行報告，即在屏幕上顯示出錯信息或以報警聲響次數的方式來指出檢測到的故障。
MBR(Master Boot Record) MBR 代表主開機記錄。它是一小段代碼，負責在您的電腦上加載作業系統。 MBR 還包含有關硬碟上的分割區及佈局的資訊。如果您曾經安裝過作業系統，您可能會看到詢問您是否要以 MBR 或 GPT 模式安裝它的提示。這是指硬碟上使用的分割區類型。</description></item><item><title>TaiwanHolyHigh - Windows Forensics - $MFT Resident / Non-Resident File</title><link>https://bernie6401.github.io/security/course/tai.holyhigh/windows-os-forensics/taiwanholyhigh---windows-forensics---mft-resident-_-non-resident-file/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/course/tai.holyhigh/windows-os-forensics/taiwanholyhigh---windows-forensics---mft-resident-_-non-resident-file/index.html</guid><description>TaiwanHolyHigh - Windows Forensics - $MFT Resident / Non-Resident File :::spoiler TOC [TOC] :::
Background $MFT儲存的內容
==Status== ==$MFT Record==(File Identify/Location) ==Timestamp== Standard Info Filename ==Resident== 特性如下: $SO\ne 0$: 意思就是resident file的前面一定有其他檔案，而他一定不會是$MFT的開頭 No File Slack: 沒有檔案暫存區，意味著他會住在一個剛剛好的大小的房間中 Physical Size = Logical Size: 這個就和前一個有相關，logical size就是實際住進去房間的檔案大小，而physical size就是飯店給予我們房間的大小，所以$physical_size\ge logical_size$ 如果resident file因為駭客的攻擊(injection/trojan/backdoor…)使得檔案大小變大，而失去原本resident file的身分，則該檔案就會被搬出目前的地方，就算之後檔案大小變回來，還是無法再住回原本的地方，這就是攻擊方所遺留的攻擊痕跡 如何判斷?如果檔名後面接的是18 00 00 00 01 00就是resident file，例如： :::spoiler 範例 ::: 或者是看18 00 00 00 10 00的前面第二個byte(就是non-resident flag)，是00代表不是non-resident file，反之就是 :::spoiler flag範例 ::: 檔案大小 18 00 00 00 10 00後面接著的四個bytes就是檔案大小$\to$換成10禁制就對了，另外如果此檔案是resident file，則檔案大小後面除了固定的18 00 00 00以外，後面還會有該檔案原本的file signature，以此為例就是89 50 4E 47也就是png的magical header :::spoiler flag範例 此範例就是02 02$\to$514 bytes ::: ==non-Resident File== 如果是non-resident file，檔名的後面一點會接的是80 00 00 00 48 00 00 00，再後面就是non-resident flag 另外，檔案的大小會在flag往後數40個bytes的地方，以底下範例來說就是F6 09 00 00 Lab - Resident File Lab - Offset 43208704(d) 先找檔名，後面會跟著18 00 00 00 01 00，前面會有non-resident flag(前面第二個byte)，再後面會跟著檔案大小D0 01，再後面一點會跟著原本這個file的signature</description></item><item><title>TaiwanHolyHigh - Windows Forensics - $MFT 基本實作</title><link>https://bernie6401.github.io/security/course/tai.holyhigh/windows-os-forensics/taiwanholyhigh---windows-forensics---mft-%E5%9F%BA%E6%9C%AC%E5%AF%A6%E4%BD%9C/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/course/tai.holyhigh/windows-os-forensics/taiwanholyhigh---windows-forensics---mft-%E5%9F%BA%E6%9C%AC%E5%AF%A6%E4%BD%9C/index.html</guid><description>TaiwanHolyHigh - Windows Forensics - $MFT 基本實作 :::spoiler TOC [TOC] ::: :::info 以下引用若無特別說明皆來自於講師的上課簡報 :::
Background $MFT儲存的內容 ==Status==: SO=22, LE=2，也就是目前此檔案的狀態，分為以下四種 0000: Delete File 0100: File 0200: Delete Folder 0300: Folder ==$MFT Record==(File Identify/Location): SO=44, LE=4，也就是此檔案在record在$MFT的位置在哪邊 ==Timestamp== Standard Info: SO=80, LE=32(Creat+Modified+$MFT Modified+Access)，很容易就可以更改，如果要更改，可以參考New Filetime這個工具 Filename: SO=184, LE=32(Creat+Modified+$MFT Modified+Access) 很難被更改(但還是可以更改) ==Resident / non-Resident File== 下一篇詳細說明 :::info 以下三個練習都是Resident File :::
Lab - Offset 43110400(d) $MFT長度一段就是1024 Bytes，我把結束的位址減掉開頭的位置就知道了，或是可以直接用HxD底下看長度(0x400) >>> 0x291D400-0x291D000 1024 從上圖也可以看到magical word就是FILE0$\to$46 49 4C 45 30 Overview(從上到下)</description></item><item><title>TaiwanHolyHigh - Windows Forensics - Background</title><link>https://bernie6401.github.io/security/course/tai.holyhigh/windows-os-forensics/taiwanholyhigh---windows-forensics---background/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/course/tai.holyhigh/windows-os-forensics/taiwanholyhigh---windows-forensics---background/index.html</guid><description>TaiwanHolyHigh - Windows Forensics - Background [TOC]
Background ==資安事件的流程== Prepare 建立Infra 購買ISO(e.g. ISO 27001) SPA(資安健診) Predict Threat Intelligence(威脅情資) Recon(情蒐) Monitor(監控) 搜尋Pattern Identify(識別): 有興趣可以看這一篇論文筆記DeepCase SOC(資安監控中心) IDS: 入侵偵測系統（Intrusion Detection System，IDS）是用來偵測資訊系統或網路上潛在的惡意破壞活動 IPS: IThelp - Active Defense Audit: AD常常遇到 EDR Code Review Prevent: 防禦攻擊 Firewall(Layer 4 - Transport) WAF(Layer 7 - Application) DLP(資料外洩防護) Incident Profile: 這個項目比較能夠得到一些惡意的行為，而該行為一定脫離不了下面三點 Purpose/Payload(有可能是Data, Source, 或金錢等等) Path(透過甚麼途徑達成目的，有可能是USB, 社交工程, 0-day) Behavior(建立帳戶/開service/與C&amp;C連線等等) Incident Response Restore(主動) Recovery(被動) Isolate Deter: 主動式的阻絕 Inside Outside(就是找外援通常是執法單位) law enforcement(執法單位) Forensics Triage: 做分流的動作 揮發性資料(RAM…) Network Process System Artifacts(registry/log/temp…) Duplicate(Image): 製作證據的映像檔$\to$非揮發性的資料 RAW Image Evidence File Forensics Analysis 已知項目(Known) Keyword Hash Baseline Recovery Signature Sorting Artifact LNK Prefetch SPL Thumbnail Registry(非揮發性) Log Recycle Bin ==網路攻擊鍊(Cyber Kill Chain)== 詳細資料: TeamT5 - Cyber Kill Chain</description></item><item><title>TaiwanHolyHigh - Windows Forensics - LNK Lab</title><link>https://bernie6401.github.io/security/course/tai.holyhigh/windows-os-forensics/taiwanholyhigh---windows-forensics---lnk-lab/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/course/tai.holyhigh/windows-os-forensics/taiwanholyhigh---windows-forensics---lnk-lab/index.html</guid><description>TaiwanHolyHigh - Windows Forensics - LNK Lab [TOC]
:::info 以下引用若無特別說明皆來自於講師的上課簡報 :::
Background What is .LNK? LNK 檔為 Windows 系統中，執行程式或開啟檔案後會留存的捷徑檔，該檔案內會有相當多的資訊
Where is .LNK? 預設 LNK 檔案會放在使用者目錄下，可透過以下指令檢視：$ dir c:\Users\{username}\*.lnk /b /s :::spoiler 執行結果
$ dir c:\Users\Bernie\*.lnk /b /s c:\Users\Bernie\AppData\Local\Microsoft\Windows\WinX\Group1\1 - Desktop.lnk c:\Users\Bernie\AppData\Local\Microsoft\Windows\WinX\Group2\1 - Run.lnk c:\Users\Bernie\AppData\Local\Microsoft\Windows\WinX\Group2\2 - Search.lnk c:\Users\Bernie\AppData\Local\Microsoft\Windows\WinX\Group2\3 - Windows Explorer.lnk c:\Users\Bernie\AppData\Local\Microsoft\Windows\WinX\Group2\4 - Control Panel.lnk c:\Users\Bernie\AppData\Local\Microsoft\Windows\WinX\Group2\5 - Task Manager.lnk c:\Users\Bernie\AppData\Local\Microsoft\Windows\WinX\Group3\01a - Windows PowerShell.lnk c:\Users\Bernie\AppData\Local\Microsoft\Windows\WinX\Group3\02a - Windows PowerShell.lnk c:\Users\Bernie\AppData\Local\Microsoft\Windows\WinX\Group3\03 - Computer Management.lnk c:\Users\Bernie\AppData\Local\Microsoft\Windows\WinX\Group3\04 - Disk Management.lnk c:\Users\Bernie\AppData\Local\Microsoft\Windows\WinX\Group3\04-1 - NetworkStatus.lnk c:\Users\Bernie\AppData\Local\Microsoft\Windows\WinX\Group3\05 - Device Manager.lnk c:\Users\Bernie\AppData\Local\Microsoft\Windows\WinX\Group3\06 - SystemAbout.lnk c:\Users\Bernie\AppData\Local\Microsoft\Windows\WinX\Group3\07 - Event Viewer.lnk c:\Users\Bernie\AppData\Local\Microsoft\Windows\WinX\Group3\08 - PowerAndSleep.lnk c:\Users\Bernie\AppData\Local\Microsoft\Windows\WinX\Group3\09 - Mobility Center.lnk c:\Users\Bernie\AppData\Local\Microsoft\Windows\WinX\Group3\10 - AppsAndFeatures.lnk c:\Users\Bernie\AppData\Roaming\Microsoft\Internet Explorer\Quick Launch\Chromium.lnk c:\Users\Bernie\AppData\Roaming\Microsoft\Internet Explorer\Quick Launch\File Shredder.lnk c:\Users\Bernie\AppData\Roaming\Microsoft\Internet Explorer\Quick Launch\Google Chrome.lnk c:\Users\Bernie\AppData\Roaming\Microsoft\Internet Explorer\Quick Launch\Microsoft Edge.lnk c:\Users\Bernie\AppData\Roaming\Microsoft\Internet Explorer\Quick Launch\Oracle VM VirtualBox.lnk c:\Users\Bernie\AppData\Roaming\Microsoft\Internet Explorer\Quick Launch\Shows Desktop.lnk c:\Users\Bernie\AppData\Roaming\Microsoft\Internet Explorer\Quick Launch\Window Switcher.lnk c:\Users\Bernie\AppData\Roaming\Microsoft\Internet Explorer\Quick Launch\User Pinned\TaskBar\AnyDesk.lnk c:\Users\Bernie\AppData\Roaming\Microsoft\Internet Explorer\Quick Launch\User Pinned\TaskBar\Discord.lnk c:\Users\Bernie\AppData\Roaming\Microsoft\Internet Explorer\Quick Launch\User Pinned\TaskBar\Excel.lnk c:\Users\Bernie\AppData\Roaming\Microsoft\Internet Explorer\Quick Launch\User Pinned\TaskBar\File Explorer.lnk c:\Users\Bernie\AppData\Roaming\Microsoft\Internet Explorer\Quick Launch\User Pinned\TaskBar\Firefox.lnk c:\Users\Bernie\AppData\Roaming\Microsoft\Internet Explorer\Quick Launch\User Pinned\TaskBar\LINE (2).lnk c:\Users\Bernie\AppData\Roaming\Microsoft\Internet Explorer\Quick Launch\User Pinned\TaskBar\PowerPoint.lnk c:\Users\Bernie\AppData\Roaming\Microsoft\Internet Explorer\Quick Launch\User Pinned\TaskBar\Sublime Text 3.lnk c:\Users\Bernie\AppData\Roaming\Microsoft\Internet Explorer\Quick Launch\User Pinned\TaskBar\Task Manager.lnk c:\Users\Bernie\AppData\Roaming\Microsoft\Internet Explorer\Quick Launch\User Pinned\TaskBar\The Interactive Disassembler (2).lnk c:\Users\Bernie\AppData\Roaming\Microsoft\Internet Explorer\Quick Launch\User Pinned\TaskBar\The Interactive Disassembler.lnk c:\Users\Bernie\AppData\Roaming\Microsoft\Internet Explorer\Quick Launch\User Pinned\TaskBar\Visual Studio Code.lnk c:\Users\Bernie\AppData\Roaming\Microsoft\Internet Explorer\Quick Launch\User Pinned\TaskBar\VMware Workstation Pro.lnk c:\Users\Bernie\AppData\Roaming\Microsoft\Internet Explorer\Quick Launch\User Pinned\TaskBar\Word.lnk c:\Users\Bernie\Desktop\Test-Dragon.lnk c:\Users\Bernie\Links\Desktop.lnk c:\Users\Bernie\Links\Downloads.lnk c:\Users\Bernie\OneDrive\Personal Vault.lnk ::: Lab 可以先到這邊下載lnk_parser_cmd.exe</description></item><item><title>TaiwanHolyHigh - Windows Forensics - Windows Artifacts</title><link>https://bernie6401.github.io/security/course/tai.holyhigh/windows-os-forensics/taiwanholyhigh---windows-forensics---windows-artifacts/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/course/tai.holyhigh/windows-os-forensics/taiwanholyhigh---windows-forensics---windows-artifacts/index.html</guid><description>TaiwanHolyHigh - Windows Forensics - Windows Artifacts [TOC]
:::info 以下引用若無特別說明皆來自於講師的上課簡報 :::
Artifacts Background 使用者操作 Windows 作業系統時會在系統中留下或產生許多行為紀錄，稱之為 Artifacts
Artifacts種類 特定路徑或資料夾: Program Files/Program Data Download Temp$\to$這在玩分析memory中很常出現 電腦特定檔案: LNK Email$\to$這在玩分析memory中也很常出現 系統還原檔(VSS, volume shadow copy): 站在藍隊的角度可以藉此知道受害者的遭到入侵的一些證據；站在紅隊的角度可以藉此撈到一些受害者的基敏資料 Artifacts分析面向 檔案Metadata: Timestamp(一般檔案的MAC time至少有兩個, Modify/Access/Create Time)可以藉此知道檔案的異動時間 應用程式: 記憶體: volatility可以針對某個PID dump出執行該process的memory，也是常見的技巧 Prefetch File 一般位於C槽windows文件夾下（C:\Windows\Prefetch），主要是用來存放系統已訪問的文件預讀信息；一開始創建此文件夾主要是為了加快系統的啟動過程。
使用者的操作行為 Audit(AD很常碰到的event ID: 4662…) Volatility的console可以看到駭客的command Volatility的malfind可以看到惡意注入的payload… 網路行為 Volatility的netscan Most Recently Used(MRU) Background 就是泛指各種windows存取使用者最近access過的檔案、路徑或網路位置，是一種行為，攻防兩端都會注意的地方
Overview 攻擊者會留下的足跡: .lnk, Jump List, User Assist Registry, Prefetch，如果攻擊者想要植入惡意程式，鑑識可以從以上四個地方看出這個intention Jump List就有點像是一個shortcut，可以跳到某個地方執行或開啟something</description></item><item><title>TaiwanHolyHigh - Windows Forensics - Windows檔案系統與還原</title><link>https://bernie6401.github.io/security/course/tai.holyhigh/windows-os-forensics/taiwanholyhigh---windows-forensics---windows%E6%AA%94%E6%A1%88%E7%B3%BB%E7%B5%B1%E8%88%87%E9%82%84%E5%8E%9F/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/course/tai.holyhigh/windows-os-forensics/taiwanholyhigh---windows-forensics---windows%E6%AA%94%E6%A1%88%E7%B3%BB%E7%B5%B1%E8%88%87%E9%82%84%E5%8E%9F/index.html</guid><description>TaiwanHolyHigh - Windows Forensics - Windows檔案系統與還原 :::spoiler TOC [TOC] :::
Background What is cluster or sector?
基本磁碟結構 磁碟儲存最小單位為sector，每一個sector包含了512bytes的資訊內容。但用sector當單位來儲存效率會很差，一般不會以一個sector當作存取檔案的單位，而是以cluster為一基本檔案單位，每一個cluster是架構在sector的2次方倍數上。假定連續的8個sector所構成一個cluster，其大小就為512×8=4096bytes(4K)，如此在存取資料時會以8個sector連續讀取而提升了相對效率。但並不是讓單位cluster越大越好，因為cluster越大相對的可能會浪費許多磁碟空間，例如設定以4K為一個cluster而要儲存的檔案內容只有1K，但這個小檔案還是佔用掉一個cluster的空間，其他3K就浪費掉了。所在考慮cluster的規劃時，需要同時考慮到檔案讀取的效能與檔案大小是否會浪費硬碟空間。
File Slack 舉例來說如果一個檔案A，大小是4個sector(2048 bytes)，現在將其刪除後又存入一個檔案B在同一位置，但其大小只有1.5個sector(768 bytes)，則後面沒有被填滿的2.5個sector事實上還殘留檔案A的一些資訊，尚未填滿的該sector(Ram Slack)+完整的兩個sector(Disk/Residual Slack)就是file slack
會有一點小複雜，反正file slack就是一個完整cluster(如果按照中FAT16來格式化128MB來說就是4個sectors)沒有被填滿的部分就對了，而ran slack或是disk(residual) slack只是在區分這些沒有被填滿的區塊而已
==比較表格==
稍微解釋一下為甚麼FAT16是單一cluster的sector數量比較多，因為按照他自己的定義，最大的cluster數量不能超過65526，也就是說如果硬碟的容量變大，單一cluster所除下來的sector數量就越多，舉例: 若一張記憶卡的大小是128MB$\to$134217728 bytes，單一cluster最少需要4個sectors $$ 134217728/512/65526\approx 4 $$ 所以如果記憶卡大小是512MB$\to$，536870912 bytes，單一cluster最少需要16個sectors $$ 536870912/512/65526\approx 16 $$ 當然，這樣的空間使用率是很差的，因為一個cluster就意味著一間總統套房，若所有的檔案不分大小都住進總統套房，就會造成很多浪費，或甚至是有很多file slack產生，試想如果像512MB一樣，一個cluster有16個sector，代表該總統套房可以容納$16*512=8192 bytes$，如果電腦中都是小檔案居多(1kB之類的)，那有很多空間就會浪費掉，但對於鑑識來說遺留的東西越多越能夠還原很多真相
以攻擊者或一般使用者來說，如何達到真正的毀屍滅跡?
Encryption: 工具veracrypt File Wipe: 工具file shredder Partition Wipe: 工具 Windows Format Fast: 快速格式化 Non-Fast: 完整格式化 差別就是 儲存檔案的時候， 除了在儲存區寫入檔案資料以外，也會在開頭一個小區塊的"檔案表"輸入相關資訊;快速格式化是只把開頭的檔案表重寫，真正儲存檔案資訊的部份則沒有更動，但是系統讀到檔案表顯示是"空白"，就會把這張片子當成是空片，就不管儲存區有沒有資料，直接覆蓋過去；換句話說，若是檔案表有標明某區存有某資料，則儲存時就會跳過這區不覆蓋 完整格式化會對格式化的區域進行讀寫測試，就是確定壞軌。快速格式化沒有</description></item></channel></rss>