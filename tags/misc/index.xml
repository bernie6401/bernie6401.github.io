<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Misc :: Tag :: SBK Hugo Site</title><link>https://bernie6401.github.io/tags/misc/index.html</link><description/><generator>Hugo</generator><language>en-us</language><atom:link href="https://bernie6401.github.io/tags/misc/index.xml" rel="self" type="application/rss+xml"/><item><title>Adworld - 3-1</title><link>https://bernie6401.github.io/security/practice/adworld/misc/adworld---3-1/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/adworld/misc/adworld---3-1/index.html</guid><description>Adworld - 3-1 Recon 這一題很簡單，和之前幾題有點像
用file看一下給的檔案是一個.rar壓縮檔，改個副檔名後解壓縮出現另外一個檔案 再用file看一下是一個pcapng檔案，用wireshark分析 用一些基本的技巧(Follow TCP Stream/Extract Object…)看tcp stream，會發現一個bash的command紀錄，有一個python enc/dec flow，和一串base64的string，除此之外還可以用extract object把一些file dump下來，發現是另外一個加密的flag.rar檔案，我們的任務就是要從這個pcapng檔案中把加密的密碼找出來 用python腳本解密base64 string，會輸出b'passwd={No_One_Can_Decrypt_Me}\x00\x00' 解密壓縮檔flag就出來了 Exploit Write Byte Data
from base64 import b64decode import zipfile f = open('./basezip.txt', 'r').read().split(',')[-1] f1 = open('./cipher.zip', 'wb') f1.write(b64decode(f)) print(bytes.fromhex(b64decode(f).hex()).decode('cp437')) f1.close() Decrypt Part
from Crypto.Cipher import AES import base64 IV = b'QWERTYUIOPASDFGH' str1 = '19aaFYsQQKr+hVX6hl2smAUQ5a767TsULEUebWSajEo=' def decrypt(encrypted): aes = AES.new(IV, AES.MODE_CBC, IV) return aes.decrypt(encrypted) def encrypt(message): length = 16 count = len(message) padding = length - (count % length) message = message + '\0' * padding aes = AES.new(IV, AES.MODE_CBC, IV) return aes.encrypt(message) str = 'this is a test' example = decrypt(base64.b64decode(str1)) print(example) Reference 【攻防世界AD】Misc进阶区：3-1</description></item><item><title>Adworld - miao~</title><link>https://bernie6401.github.io/security/practice/adworld/misc/adworld---miao~/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/adworld/misc/adworld---miao~/index.html</guid><description>Adworld - miao~ Recon 這題也是看了別人的WP1和官解
Exploit 用foremost搜索或救援檔案(神奇的解法，一開始完全想不到)
$ foremost -v miao\~.jpg Foremost version 1.5.7 by Jesse Kornblum, Kris Kendall, and Nick Mikus Audit File Foremost started at Sat Jul 15 15:21:29 2023 Invocation: foremost -v miao~.jpg Output directory: /home/sbk6401/CTF/Adworld/Misc/miao~/output Configuration file: /etc/foremost.conf Processing: miao~.jpg |------------------------------------------------------------------ File: miao~.jpg Start: Sat Jul 15 15:21:29 2023 Length: 1 MB (1242752 bytes) Num Name (bs=512) Size File Offset Comment 0: 00000000.jpg 55 KB 0 1: 00000111.wav 1 MB 57212 *| Finish: Sat Jul 15 15:21:29 2023 2 FILES EXTRACTED jpg:= 1 rif:= 1 ------------------------------------------------------------------ Foremost finished at Sat Jul 15 15:21:29 2023 可以看到抓到其中有一個.wav檔案</description></item><item><title>Adworld - Misc文件類型</title><link>https://bernie6401.github.io/security/practice/adworld/misc/adworld---misc%E6%96%87%E4%BB%B6%E9%A1%9E%E5%9E%8B/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/adworld/misc/adworld---misc%E6%96%87%E4%BB%B6%E9%A1%9E%E5%9E%8B/index.html</guid><description>Adworld - Misc文件類型 Source Code 3436455341425F554573444242514141 41414941416C64434658714F7737634B 4141414143594141414149414141415A 6D78685A7935306548524C79306C4D72 7A5A49536B303253457778546B6B304D 6A5130546A593353445531534573784E 544D3054374A494E552B7A7241554155 45734241685141464141414141674143 56304956656F374474776F414141414A 674141414167414A4141414141414141 414167414141414141414141475A7359 57637564486830436741674141414141 41414241426741477845666B39697132 41456245522B54324B725941514A462B 34725971746742554573464267414141 41414241414541576741414145344141 4141414141 Recon 這一題有一點通靈，沒有很喜歡
首先給的cipher很明顯是ascii的hex 轉換過後也很明顯是base64 在轉換過後，只有底線後面的部分要轉換成hex 如果把東西print出來的話會看到flag.txt的字樣，感覺上是一個file的byte code，到file signature去看會發現magic header是一個zip file，uncompress之後就會發現flag.txt Exploit import base64 ciphercipher = bytes.fromhex(cipher).decode('utf-8').split("_")[1] cipher = base64.b64decode(cipher + "==") f = open("./cipher.zip", "wb") f.write(cipher) f.close() import zipfile with zipfile.ZipFile('./cipher.zip', 'r') as zip_ref: zip_ref.extractall('./') f = open('./flag.txt', 'r').read() print(f) $ python exp.py flag{0bec0ad3da2113c70e50fd5617b8e7f9} Reference XCTF-MISC-Misc文件類型</description></item><item><title>Adworld - pure_color</title><link>https://bernie6401.github.io/security/practice/adworld/misc/adworld---pure_color/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/adworld/misc/adworld---pure_color/index.html</guid><description>Adworld - pure_color tags: Adworld CTF Misc Challenge: https://adworld.xctf.org.cn/challenges/details?hash=f216ffab-e01d-46b8-9d4d-d91ab5229eed_2&amp;task_category_id=1
Background 【Day21】隱寫技術 Steganography 图片隐写查看神器stegsolve使用方法 zardus/ctf-tools - stegsolve
Exploit - Basic Steganography</description></item><item><title>Adworld - 心儀的公司</title><link>https://bernie6401.github.io/security/practice/adworld/misc/adworld---%E5%BF%83%E5%84%80%E7%9A%84%E5%85%AC%E5%8F%B8/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/adworld/misc/adworld---%E5%BF%83%E5%84%80%E7%9A%84%E5%85%AC%E5%8F%B8/index.html</guid><description>Adworld - 心儀的公司 tags: Adworld CTF Misc Challenge: https://adworld.xctf.org.cn/challenges/details?hash=ed5d10bf-be47-4e61-b04e-3a9ccb73ff95_2&amp;task_category_id=1
Exploit $ strings webshell.pcapng | grep "{" ... fl4g:{ftop_Is_Waiting_4_y} Reference 心仪的公司writeup 【CTF视频合辑】MISC-流量分析题大集合(第一辑)</description></item><item><title>Adworld - 適合作為桌面</title><link>https://bernie6401.github.io/security/practice/adworld/misc/adworld---%E9%81%A9%E5%90%88%E4%BD%9C%E7%82%BA%E6%A1%8C%E9%9D%A2/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/adworld/misc/adworld---%E9%81%A9%E5%90%88%E4%BD%9C%E7%82%BA%E6%A1%8C%E9%9D%A2/index.html</guid><description>Adworld - 適合作為桌面 tags: Adworld CTF Misc Challenge: 適合作為桌面
Background Day8 Python基礎-pyc是什麼
Exploit Analyze Steganography QR Code Reader
t seems a byte code of a file.
HxD It can be disassembled by pyc tools.
pyc disassemble :::spoiler
def flag(): str = [ 102, 108, 97, 103, 123, 51, 56, 97, 53, 55, 48, 51, 50, 48, 56, 53, 52, 52, 49, 101, 55, 125, ] flag = "" for i in str: flag += chr(i) print flag :::</description></item><item><title>Background</title><link>https://bernie6401.github.io/security/practice/nisra/misc/nisra---%E7%9C%8B%E4%B8%8D%E8%A6%8B%E7%9A%84%E5%9C%B0%E6%96%B9/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/nisra/misc/nisra---%E7%9C%8B%E4%B8%8D%E8%A6%8B%E7%9A%84%E5%9C%B0%E6%96%B9/index.html</guid><description>NISRA - 看不見的地方 Background advanced-potion-making:two::+1:
Recon 這題出的不錯，我用了所有方法都沒看到甚麼奇怪的東西，除了pngcheck
$ pngcheck flag.png flag.png CRC error in chunk IHDR (computed 68ff0ded, expected 8c5880da) ERROR: flag.png 代表檔案可能有一些問題 原圖： Exploit - Recover PNG File 參考UP主的腳本，可以直接寫出長寬
import zlib import struct import sys filename = sys.argv[1] with open(filename, 'rb') as f: all_b = f.read() crc32key = int(all_b[29:33].hex(),16) data = bytearray(all_b[12:29]) n = 4095 for w in range(n): width = bytearray(struct.pack('>i', w)) for h in range(n): height = bytearray(struct.pack('>i', h)) for x in range(4): data[x+4] = width[x] data[x+8] = height[x] crc32result = zlib.crc32(data) if crc32result == crc32key: print("寬為：{}(hex), {}(int)".format(width.hex(), int(width.hex(), 16))) print("高為：{}(hex), {}(int)".format(height.hex(), int(height.hex(), 16))) exit(0) $ python exp.py flag.png 寬為：00000258(hex), 600(int) 高為：00000148(hex), 328(int) 可以看得出來高的數值不一樣</description></item><item><title>CrewCTF - Attaaaaack 1-13</title><link>https://bernie6401.github.io/security/practice/crewctf/misc/crewctf---attaaaaack-1-13/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/crewctf/misc/crewctf---attaaaaack-1-13/index.html</guid><description>CrewCTF - Attaaaaack 1-13 :::spoiler TOC [TOC] :::
One of our employees at the company complained about suspicious behavior on the machine, our IR team took a memory dump from the machine and we need to investigate it.
==Attaaaaack 1== Q1. What is the best profile for the the machine?
Exploit $ volatility_2.6_win64_standalone.exe -f memdump.raw imageinfo Volatility Foundation Volatility Framework 2.6 INFO : volatility.debug : Determining profile based on KDBG search... Suggested Profile(s) : Win7SP1x86_23418, Win7SP0x86, Win7SP1x86 AS Layer1 : IA32PagedMemoryPae (Kernel AS) AS Layer2 : FileAddressSpace (D:\NTU\CTF\CrewCTF\Misc\Attaaaaack\memdump.raw) PAE type : PAE DTB : 0x185000L KDBG : 0x82b7ab78L Number of Processors : 1 Image Type (Service Pack) : 1 KPCR for CPU 0 : 0x80b96000L KUSER_SHARED_DATA : 0xffdf0000L Image date and time : 2023-02-20 19:10:54 UTC+0000 Image local date and time : 2023-02-20 21:10:54 +0200 Flag: crew{Win7SP1x86_23418}</description></item><item><title>CrewCTF - Encrypt10n(Part 1)</title><link>https://bernie6401.github.io/security/practice/crewctf/misc/crewctf---encrypt10npart-1/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/crewctf/misc/crewctf---encrypt10npart-1/index.html</guid><description>CrewCTF - Encrypt10n(Part 1) Background Volatility 3
Recon Description: We made a memory dump on the criminal machine after entering the crime scene. Our investigator thought he was using encryption software to hide the secret. can you help me to detect it? Q1 : crew{password} 這種類型之前沒碰過，所以看了別人的WP學一下1 首先他有提到他有用加密的技術隱藏secret，所以我們的目的就是要找到password Exploit - Memory Forensics 先找到運行的OS version或其他軟硬體資訊 $ python ../../Software/CTF/Misc/volatility/vol.py -f dump.raw imageinfo Volatility Foundation Volatility Framework 2.6.1 INFO : volatility.debug : Determining profile based on KDBG search... Suggested Profile(s) : Win7SP1x86_23418, Win7SP0x86, Win7SP1x86_24000, Win7SP1x86 AS Layer1 : IA32PagedMemoryPae (Kernel AS) AS Layer2 : FileAddressSpace (/mnt/d/Download/Trash/dump.raw) PAE type : PAE DTB : 0x185000L KDBG : 0x82b3db78L Number of Processors : 1 Image Type (Service Pack) : 1 KPCR for CPU 0 : 0x839a5000L KUSER_SHARED_DATA : 0xffdf0000L Image date and time : 2023-02-16 12:03:16 UTC+0000 Image local date and time : 2023-02-16 14:03:16 +0200 重點: Suggested Profile(s) : Win7SP1x86_23418, Win7SP0x86, Win7SP1x86_24000, Win7SP1x86 列出當時系統正在運行的process $ python ../../Software/CTF/Misc/volatility/vol.py -f dump.raw pslist --profile=Win7SP0x86 Volatility Foundation Volatility Framework 2.6.1 Offset(V) Name PID PPID Thds Hnds Sess Wow64 Start Exit ---------- -------------------- ------ ------ ------ -------- ------ ------ ------------------------------ ------------------------------ 0x8413a938 System 4 0 88 520 ------ 0 2023-02-16 12:00:48 UTC+0000 0x84e481c8 smss.exe 252 4 2 29 ------ 0 2023-02-16 12:00:49 UTC+0000 0x84cae358 csrss.exe 340 324 8 550 0 0 2023-02-16 12:00:53 UTC+0000 0x844ea030 wininit.exe 392 324 3 77 0 0 2023-02-16 12:00:54 UTC+0000 0x84ef5030 csrss.exe 400 384 9 223 1 0 2023-02-16 12:00:54 UTC+0000 0x8573dd20 winlogon.exe 456 384 6 114 1 0 2023-02-16 12:00:54 UTC+0000 0x85749868 services.exe 496 392 8 228 0 0 2023-02-16 12:00:54 UTC+0000 0x85763030 lsass.exe 508 392 7 578 0 0 2023-02-16 12:00:55 UTC+0000 0x85764030 lsm.exe 516 392 10 149 0 0 2023-02-16 12:00:55 UTC+0000 0x857bd510 svchost.exe 624 496 11 362 0 0 2023-02-16 12:00:56 UTC+0000 0x85809510 svchost.exe 704 496 7 298 0 0 2023-02-16 12:00:56 UTC+0000 0x85859920 svchost.exe 784 496 23 510 0 0 2023-02-16 12:00:56 UTC+0000 0x8586da80 svchost.exe 832 496 15 265 0 0 2023-02-16 12:00:57 UTC+0000 0x85872bb0 svchost.exe 856 496 22 731 0 0 2023-02-16 12:00:57 UTC+0000 0x85875460 svchost.exe 880 496 47 1013 0 0 2023-02-16 12:00:57 UTC+0000 0x8588f370 audiodg.exe 960 784 6 132 0 0 2023-02-16 12:00:57 UTC+0000 0x858c2420 svchost.exe 1092 496 18 389 0 0 2023-02-16 12:00:58 UTC+0000 0x857d6030 spoolsv.exe 1288 496 15 270 0 0 2023-02-16 12:00:59 UTC+0000 0x857d1030 dwm.exe 1296 832 6 114 1 0 2023-02-16 12:00:59 UTC+0000 0x857c7030 svchost.exe 1324 496 21 310 0 0 2023-02-16 12:00:59 UTC+0000 0x857a5d20 explorer.exe 1384 1276 33 923 1 0 2023-02-16 12:00:59 UTC+0000 0x857c4d20 taskhost.exe 1400 496 10 197 1 0 2023-02-16 12:00:59 UTC+0000 0x85837898 svchost.exe 1560 496 11 146 0 0 2023-02-16 12:01:00 UTC+0000 0x841d1030 VGAuthService. 1720 496 4 85 0 0 2023-02-16 12:01:01 UTC+0000 0x841d7118 vmtoolsd.exe 1736 1384 10 181 1 0 2023-02-16 12:01:02 UTC+0000 0x85856030 vm3dservice.ex 1836 496 5 60 0 0 2023-02-16 12:01:03 UTC+0000 0x85857d20 vmtoolsd.exe 1856 496 14 291 0 0 2023-02-16 12:01:03 UTC+0000 0x841e5678 vm3dservice.ex 1880 1836 3 44 1 0 2023-02-16 12:01:03 UTC+0000 0x85a26030 svchost.exe 384 496 8 93 0 0 2023-02-16 12:01:05 UTC+0000 0x85a6e5d0 dllhost.exe 876 496 21 191 0 0 2023-02-16 12:01:05 UTC+0000 0x85941c28 dllhost.exe 1744 496 18 200 0 0 2023-02-16 12:01:05 UTC+0000 0x85ab6260 msdtc.exe 1128 496 15 154 0 0 2023-02-16 12:01:06 UTC+0000 0x85ac8b00 WmiPrvSE.exe 232 624 10 193 0 0 2023-02-16 12:01:06 UTC+0000 0x841f4470 SearchIndexer. 2148 496 14 604 0 0 2023-02-16 12:01:08 UTC+0000 0x85b2a030 VSSVC.exe 2276 496 7 118 0 0 2023-02-16 12:01:11 UTC+0000 0x85b80cb8 SearchProtocol 2372 2148 9 284 0 0 2023-02-16 12:01:13 UTC+0000 0x85b855f8 SearchFilterHo 2392 2148 6 104 0 0 2023-02-16 12:01:13 UTC+0000 0x85b97d20 svchost.exe 2480 496 15 232 0 0 2023-02-16 12:01:15 UTC+0000 0x85bc5398 wmpnetwk.exe 2632 496 11 212 0 0 2023-02-16 12:01:16 UTC+0000 0x85bba030 WmiPrvSE.exe 2860 624 15 319 0 0 2023-02-16 12:01:25 UTC+0000 0x85c53030 WmiApSrv.exe 3004 496 6 112 0 0 2023-02-16 12:01:30 UTC+0000 0x85c596c0 TrueCrypt.exe 3196 1384 2 67 1 0 2023-02-16 12:02:07 UTC+0000 0x84d54d20 sppsvc.exe 3736 496 6 154 0 0 2023-02-16 12:03:05 UTC+0000 0x84d567f0 svchost.exe 3776 496 15 353 0 0 2023-02-16 12:03:05 UTC+0000 0x844fcd20 DumpIt.exe 4072 1384 2 38 1 0 2023-02-16 12:03:14 UTC+0000 0x844ba6e0 conhost.exe 4080 400 2 51 1 0 2023-02-16 12:03:14 UTC+0000 重點：0x85c596c0 TrueCrypt.exe 3196 1384 2 67 1 0 2023-02-16 12:02:07 UTC+0000 TrueCrypt - Wiki TrueCrypt是一款已停止開發的動態（On-the-fly）磁碟加密軟體，支援Windows、macOS和Linux作業系統。它可在單個檔案和磁碟分割區中建立加密區，也可以加密整個作業系統，解密後使用者即可像普通分割區一樣使用其中的檔案。TrueCrypt支援使用密碼、金鑰檔案作為解密憑據。</description></item><item><title>CrewCTF - Encrypt10n(Part 2)</title><link>https://bernie6401.github.io/security/practice/crewctf/misc/crewctf---encrypt10npart-2/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/crewctf/misc/crewctf---encrypt10npart-2/index.html</guid><description>CrewCTF - Encrypt10n(Part 2) Background How To Open A TrueCrypt Container Using cryptsetup
$ sudo cryptsetup --type tcrypt open container-to-mount container-name
什麽是塊設備，什麽是字符設備？有什麽區別？
Recon 這一題應該是沿用part 1得到的密碼進行解密
Exploit 用cryptsetup1先進行解密
$ sudo cryptsetup --type tcrypt open flag flag_decrypt Enter passphrase for flag: 則輸出的結果就是一個container儲存在/dev/mapper，可以看到它是一個block device
$ ll /dev/mapper total 0 drwxr-xr-x 2 root root 80 Jul 12 21:44 . drwxr-xr-x 11 root root 3140 Jul 12 21:44 .. crw------- 1 root root 10, 236 Jul 11 23:06 control brw-rw---- 1 root disk 252, 3 Jul 12 21:44 flag_dec 再來就要把這個container掛起來，要掛起來才能讀取裡面的資料</description></item><item><title>Misc Cheat Sheet</title><link>https://bernie6401.github.io/tools/ctf/misc-cheat-sheet/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/tools/ctf/misc-cheat-sheet/index.html</guid><description>Misc Cheat Sheet Online Tools Encode &amp; Decode Free Online Barcode Reader QR Code Barcode Reader Online Encoding 獸語 Check file info $ binwalk [-e] [filename] # or binwalk --dd=".*" [filename] $ exiftool [filename] $ pngcheck [filename] $ stat [filename] $ file [filename] $ binwalk -e 的範例可以參考Deadface - Electric Steel Steganography text: zsteg(just for bmp and png files), Quick Crypto file: steghide(sudo apt-get install steghide)($ steghide extract -sf atbash.jpg) 進階的steghide$\to$stegseek $ wget https://github.com/RickdeJager/stegseek/releases/download/v0.6/stegseek_0.6-1.deb $ sudo apt install ./stegseek_0.6-1.deb -y $ stegseek [stegofile.jpg] [wordlist.txt] Disk Analysis Foremost: 針對所支援的檔案結構去進行資料搜尋與救援 $ foremost -v {filename} Sleuth kit/Autopsy FTK Imager Logontracer: Just use GUI to present event log traced on windows $ python logontracer.py -r -o 8000 -u neo4j -p neo4j -s localhost Memory Forensics 建議直接使用windown protable version會比較穩定而且不需要處理環境的問題 Volatility - Cheat Sheet Volatility 3 :::spoiler Set up &amp; How2Use Windows Volatility 3 Problems &amp; Solutions Windows Set up Tutorials $ git clone https://github.com/volatilityfoundation/volatility3 $ cd volatility3 $ pip install -r requirement.txt $ python vol.py -f &lt;path to memory image> plugin_name plugin_option $ python vol.py -h # For help ::: Volatility 2 :::spoiler Set up &amp; How2Use Windows Set up Tutorials $ conda create --name py27 python=2.7 $ conda activate py27 $ git clone https://github.com/volatilityfoundation/volatility $ cd volatility $ pip install pycrypto $ pip install distorm3 $ python vol.py -f &lt;path to memory image> plugin_name plugin_option $ python vol.py -h # For help ::: Package Wireshark cheat sheet nmap: $ sudo apt-get install nmap ntpdc $ sudo apt-get install ntpdc tcpflow $ sudo tcpflow -r {pcap file} Brute Force Password for WPA/Wifi based: aircrack-ng, Wifite for system user: John the Ripper Sound hide files: MP3stego $ ./encode -E hidden_text.txt -P pass svega.wav svega_stego.mp3 $ ./decode -X -P pass svega_stego.mp3 sound to image: How to convert a SSTV audio file to images using QSSTV - en How to convert a SSTV audio file to images using QSSTV - zh-cn hide message: silenteye Mail PST Viewer eml Viewer ThunderBird Client Overall All stego decrypt tools All stego encrypt tools ctf tool Other people’s note</description></item><item><title>NISRA - Hidden?</title><link>https://bernie6401.github.io/security/practice/nisra/misc/nisra---hidden_/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/nisra/misc/nisra---hidden_/index.html</guid><description>NISRA - Hidden? Background advanced-potion-making:two::+1:
Recon 這一題也是蠻巧妙的，用pngcheck可以看到檔案有問題
$ pngcheck haha.png haha.png additional data after IEND chunk ERROR: haha.png Exploit - Recover + Unzip Recover PNG File 先找文件尾（00 00 00 00 49 45 4E 44 AE 42 60 82） 發現後續還有其他bytes，用list signature追查後面是甚麼， 發現應該是個zip file，所以獨立出來後解壓縮
Unzip 解壓縮後有一些文件，從裡面撈了一下flag就在./word/document.xml中 Flag: NISRA{Oop5!_yoU_fOuNd_1t}</description></item><item><title>NISRA 2023 Enlightened - Jack的flag</title><link>https://bernie6401.github.io/security/practice/nisra/misc/nisra-2023-enlightened---jack%E7%9A%84flag/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/nisra/misc/nisra-2023-enlightened---jack%E7%9A%84flag/index.html</guid><description>NISRA 2023 Enlightened - Jack的flag Background Microsoft Word Forensics
Recon 這是第一次寫到有關word的隱寫，蠻特別的就紀錄一下，但看得出來應該是考古古古古古古題了ㄅ
Exploit 有兩種方法
強制解壓縮 直接把副檔名改成.zip，然後用解壓縮軟體解壓縮，接著就可以在Final-Jack\word\document.xml中可以找到flag 把隱藏設定打開 直接在word中的檔案/選項/顯示/隱藏文字的方塊打勾，就可以直接在下面看到flag了 Flag: NISRA{Word'$_h1Dden_7eXT_reVEaLed}</description></item><item><title>NISRA 2023 Enlightened - Magic Function</title><link>https://bernie6401.github.io/security/practice/nisra/misc/nisra-2023-enlightened---magic-function/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/nisra/misc/nisra-2023-enlightened---magic-function/index.html</guid><description>NISRA 2023 Enlightened - Magic Function Background Magic Function of Python
Source Code class Test(): def __init__(self, email='test@nisra.net'): self.info = 'test' self.email = email class Secret(): flag = open("./NISRA-Enlightened-2023/flag.txt", "r").read().strip() if __name__ == '__main__': email = input('Your email: ') if email: test = Test(email) else: test = Test() msg = ('this is for {test.info}, please contact ' + email + '.').format(test=test) print(msg) Recon 這一題真的很有趣，但也是算通靈的奇淫怪招，仔細看了一下直覺應該是跟format string有關係，比賽的時候的確有想到，但我當時想的payload有點偏掉了，當時的payload是: {test.email}.format(test=Test(Secret().flag))，也就是先傳入Secret().flag給Test這個class，然後再利用format傳入給
Exploit $ echo "{test.__init__.__globals__[Secret].flag}" | nc chall2.nisra.net 43001 Your email: this is for test, please contact NISRA{Ma9ic_pY3h0n_!!???}. Flag: NISRA{Ma9ic_pY3h0n_!!???}</description></item><item><title>NISRA 2023 Enlightened - Pixel</title><link>https://bernie6401.github.io/security/practice/nisra/misc/nisra-2023-enlightened---pixel/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/nisra/misc/nisra-2023-enlightened---pixel/index.html</guid><description>NISRA 2023 Enlightened - Pixel Source Code Recon 這一題真的很難，應該說有想過，不過很麻煩就是了，每一個色塊都有一組RGB的數值，然後只要把它轉換成ASCII，再把每一個字元串起來，就會是一組base64的code，轉換之後就拿到一組ciphertext，接著就丟到cyberchef看看一般的工具可不可以解，最後是用rot13解出來，除了最一開始的地方需要一點通靈之外，其他都很簡單，但…寫script頗麻煩
Exploit from PIL import Image from base64 import b64decode img = Image.open("./NISRA-Enlightened-2023/Misc/Final-Pixel.png") pixels = [] for row in range(8):	# 8 rows for col in range(8):	# 8 columns r, g, b = img.getpixel((row * 64 + 1, col * 64 + 1))	# each grid: 64 x 64 if r == 255 and g == 255 and b == 255: break else: pixels.append((chr(r), chr(g), chr(b))) if r == 255 and g == 255 and b == 255: break flag = "" print(pixels) for r, g, b in pixels: flag += r + g + b print(flag) print(b64decode(flag.encode())) $ python exp.py [('c', '3', 'l'), ('u', 'd', 'D'), ('o', 'g', 'Q'), ('V', 'Z', 'G'), ('R', 'U', '5'), ('7', 'T', 'l'), ('9', 'l', 'T'), ('m', 'Y', '3'), ('U', 'k', 'V'), ('f', 'N', 'k'), ('U', '0', 'Q'), ('1', 'U', 'x'), ('U', 'F', '9'), ('l', 'U', 'm'), ('N', 'F', 'U'), ('m', 'Z', 'S'), ('Q', 'W', 'c'), ('k', 'X', '0'), ('5', 'f', 'R'), ('2', 'o', 'w'), ('L', 'V', 'E'), ('x', 'W', 'j'), ('N', 'h', 'Z'), ('j', 'E', 'w'), ('Y', 'T', 'Q'), ('x', 'X', '2'), ('N', '2', 'c'), ('G', 'd', 'o'), ('R', 'X', 'J'), ('f', 'T', 'm'), ('Z', 'f', 'N'), ('F', '9', 'l'), ('U', 'n', 'B'), ('H', 'b', 'm'), ('E', '2', 'S'), ('D', 'F', 'O'), ('R', 'V', '9'), ('a', 'b', 'j'), ('d', 'l', 'd'), ('m', 't', 'f'), ('Y', 'm', 'V'), ('f', 'd', 'G'), ('V', 'W', 'c'), ('V', '9', 'i'), ('U', '1', '9'), ('G', 'Z', 'E'), ('h', 'A', 'Z'), ('V', 'J', 'f'), ('Q', '1', 'Z'), ('L', 'c', 'n'), ('l', 'm', 'f'), ('Q', '=', '=')] c3ludDogQVZGRU57Tl9lTmY3UkVfNkU0Q1UxUF9lUmNFUmZSQWckX05fR2owLVExWjNhZjEwYTQxX2N2cGdoRXJfTmZfNF9lUnBHbmE2SDFORV9abjdldmtfYmVfdGVWcV9iU19GZEhAZVJfQ1ZLcnlmfQ== b'synt: AVFEN{N_eNf7RE_6E4CU1P_eRcERfRAg$_N_Gj0-Q1Z3af10a41_cvpghEr_Nf_4_eRpGna6H1NE_Zn7evk_be_teVq_bS_FdH@eR_CVKryf}' Flag: NISRA{A_rAs7ER_6R4PH1C_rEpREsENt$_A_Tw0-D1M3ns10n41_pictuRe_As_4_rEcTan6U1AR_Ma7rix_or_grId_oF_SqU@rE_PIXels}</description></item><item><title>PicoCTF - `tunn3l v1s10n`</title><link>https://bernie6401.github.io/security/practice/picoctf/misc/image-stego/picoctf---tunn3l-v1s10n/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/misc/image-stego/picoctf---tunn3l-v1s10n/index.html</guid><description>PicoCTF - tunn3l v1s10n tags: PicoCTF CTF Misc Challenge: tunn3l v1s10n
Background [筆記] BMP點陣圖格式說明
Exploit - Recover file Analyze $ exiftool tunn3l_v1s10n ExifTool Version Number : 11.88 File Name : tunn3l_v1s10n Directory : . File Size : 2.8 MB File Modification Date/Time : 2023:02:17 04:11:33+08:00 File Access Date/Time : 2023:02:17 04:12:37+08:00 File Inode Change Date/Time : 2023:02:17 04:11:35+08:00 File Permissions : rw-r--r-- File Type : BMP File Type Extension : bmp MIME Type : image/bmp BMP Version : Unknown (53434) Image Width : 1134 Image Height : 306 Planes : 1 Bit Depth : 24 Compression : None Image Length : 2893400 Pixels Per Meter X : 5669 Pixels Per Meter Y : 5669 Num Colors : Use BitDepth Num Important Colors : All Red Mask : 0x27171a23 Green Mask : 0x20291b1e Blue Mask : 0x1e212a1d Alpha Mask : 0x311a1d26 Color Space : Unknown (,5%() Rendering Intent : Unknown (826103054) Image Size : 1134x306 Megapixels : 0.347 It seems a bmp file and check the file signature of the 2 bytes is 42 4D :heavy_check_mark: Check file headers According to BMP_file_format and BMP點陣圖格式說明 :heavy_check_mark:size: 8E 26 2C 00 $\to$ 0x2C268E $\to$ 2893454 bytes :heavy_check_mark:reserved1: 00 00 :heavy_check_mark:reserved2: 00 00 :negative_squared_cross_mark:offset: BA D0 00 00 $\to$ 0xD0BA $\to$ 53434 means it’ll read the bitmap data from offset 53434 bytes. But actually, the data of bitmap is just connect with the header. So, we just need to shift 14 bytes for file header + 40 bytes for info header = 54 bytes $\to$ 0x36 We can peek the data first… It said notaflag{sorry}, means we need to recover other parts.</description></item><item><title>PicoCTF - `Wireshark doo dooo do doo...`</title><link>https://bernie6401.github.io/security/practice/picoctf/misc/flow/picoctf---wireshark-doo-dooo-do-doo.../index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/misc/flow/picoctf---wireshark-doo-dooo-do-doo.../index.html</guid><description>PicoCTF - Wireshark doo dooo do doo... tags: PicoCTF CTF Misc Challenge: https://play.picoctf.org/practice/challenge/115?category=4&amp;page=1
Exploit - strings + rot13 $ strings shark1.pcapng | grep "{" ... Gur synt vf cvpbPGS{c33xno00_1_f33_h_qrnqorrs} ... Obviously a encrypted flag $\to$ use rot13 flag: picoCTF{p33kab00_1_s33_u_deadbeef}</description></item><item><title>PicoCTF - advanced-potion-making</title><link>https://bernie6401.github.io/security/practice/picoctf/misc/image-stego/picoctf---advanced-potion-making/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/misc/image-stego/picoctf---advanced-potion-making/index.html</guid><description>PicoCTF - advanced-potion-making tags: PicoCTF CTF Misc Challenge: advanced-potion-making
Background PNG文件格式详解 隐写分析(2) PNG图片隐写
Exploit - Recover + StegSolve Modify the file signature and length to the right value. 89 50 42 11 0D 0A 1A 0A 00 12 13 14 49 48 44 52 $\to$ 89 50 4E 47 0D 0A 1A 0A 00 00 00 0D 49 48 44 52</description></item><item><title>PicoCTF - c0rrupt</title><link>https://bernie6401.github.io/security/practice/picoctf/misc/image-stego/picoctf---c0rrupt/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/misc/image-stego/picoctf---c0rrupt/index.html</guid><description>PicoCTF - c0rrupt tags: PicoCTF CTF Misc Challenge: c0rrupt
Background advanced-potion-making:two::+1:
Exploit - Recover PNG file Analyze Header 89 65 4E 34 0D 0A B0 AA $\to$ 89 50 4E 47 0D 0A 1A 0A
IHDR 43 22 44 52 $\to$ 49 48 44 52 Then use pngcheck to analyze the file. It said the header still have some error.
$ pngcheck mystery mystery CRC error in chunk pHYs (computed 38d82c82, expected 495224f0) ERROR: mystery Revise pHYs You can open an arbitrary png file and observe pHYs part.</description></item><item><title>PicoCTF - Disk, disk, sleuth! II</title><link>https://bernie6401.github.io/security/practice/picoctf/misc/disk/picoctf---disk-disk-sleuth-ii/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/misc/disk/picoctf---disk-disk-sleuth-ii/index.html</guid><description>PicoCTF - Disk, disk, sleuth! II tags: PicoCTF CTF Misc Challenge: Disk, disk, sleuth! II
Description &amp; Hint All we know is the file with the flag is named down-at-the-bottom.txt… Disk image: dds2-alpine.flag.img.gz Hint 1: The sleuthkit has some great tools for this challenge as well. Hint 2: Sleuthkit docs here are so helpful: TSK Tool Overview Hint 3: This disk can also be booted with qemu!
Background Linux安装、使用Sleuth kit/Autopsy
Exploit - Use Autopsy Tool to analyze In root folder. :::spoiler flag</description></item><item><title>PicoCTF - Eavesdrop</title><link>https://bernie6401.github.io/security/practice/picoctf/misc/flow/picoctf---eavesdrop/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/misc/flow/picoctf---eavesdrop/index.html</guid><description>PicoCTF - Eavesdrop Recon 這一題是有關eavesdropping，代表有一個中間人監聽了所有conversation，先用一些基本的手段看一下整體的pcap packets(strings searching/IO Graphs/Statistic/Extract Default Protocol File…)，但是如果跟一下tcp的packets，可以發現傳輸兩方的對話紀錄，包括傳輸資料的加密方式等等，所以我們就可以直接把傳輸資料解密得到flag
Exploit - Extract File &amp; Decrypt Follow TCP Packets Hey, how do you decrypt this file again? You're serious? Yeah, I'm serious *sigh* openssl des3 -d -salt -in file.des3 -out file.txt -k supersecretpassword123 Ok, great, thanks. Let's use Discord next time, it's more secure. C'mon, no one knows we use this program like this! Whatever. Hey. Yeah? Could you transfer the file to me again? Oh great. Ok, over 9002? Yeah, listening. Sent it Got it. You're unbelievable 從以上對話紀錄可以知道他們在9002 port有傳輸資料，並且解密的command是openssl des3 -d -salt -in file.des3 -out file.txt -k supersecretpassword123 Extract File 我們可以增加兩個column專門顯示source/destination port 然後找到port 9002的地方，可以發現No.57有附帶資料，把這筆資料另存起來 Note: 儲存資料到file.des3的時候，內容必須要是Salted__9BæÄ'÷b4Ó[ÐNXämn±'-ärGsðÏú :›çk¿«@Û=6 Note2: 也可以用tcpflow的方式把資料download下來 $ sudo tcpflow -r {pcap file} Decrypt File $ openssl des3 -d -salt -in file.des3 -out file.txt -k supersecretpassword123 *** WARNING : deprecated key derivation used. Using -iter or -pbkdf2 would be better. Flag: picoCTF{nc_73115_411_dd54ab67}</description></item><item><title>PicoCTF - File types</title><link>https://bernie6401.github.io/security/practice/picoctf/misc/general/picoctf---file-types/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/misc/general/picoctf---file-types/index.html</guid><description>PicoCTF - File types tags: PicoCTF CTF Misc Challenge: File types
Background For Shell Script Linux MD5 Linux egrep命令 Shell test 命令
-f 文件名: 如果文件存在且为普通文件则为真
How to modify $PATH touch - time stamp What is $$ in bash?
For Compress Command Linux 備份檔案操作 cpio 指令教學與範例 bzip2 command in Linux Gzip Command in Linux Lzip Manual lz4 manual lzma manual lzop(1) - Linux man page
Source code :::spoiler Flag.pdf
#!/bin/sh # This is a shell archive (produced by GNU sharutils 4.15.2). # To extract the files from this archive, save it to some FILE, remove # everything before the '#!/bin/sh' line above, then type 'sh FILE'. # lock_dir=_sh00046 # Made on 2022-03-15 06:50 UTC by &lt;root@e8647f66bc56>. # Source directory was '/app'. # # Existing files will *not* be overwritten, unless '-c' is specified. # # This shar contains: # length mode name # ------ ---------- ------------------------------------------ # 1092 -rw-r--r-- flag # MD5SUM=${MD5SUM-md5sum} f=`${MD5SUM} --version | egrep '^md5sum .*(core|text)utils'` test -n "${f}" &amp;&amp; md5check=true || md5check=false ${md5check} || \ echo 'Note: not verifying md5sums. Consider installing GNU coreutils.' if test "X$1" = "X-c" then keep_file='' else keep_file=true fi echo=echo save_IFS="${IFS}" IFS="${IFS}:" gettext_dir= locale_dir= set_echo=false for dir in $PATH do if test -f $dir/gettext \ &amp;&amp; ($dir/gettext --version >/dev/null 2>&amp;1) then case `$dir/gettext --version 2>&amp;1 | sed 1q` in *GNU*) gettext_dir=$dir set_echo=true break ;; esac fi done if ${set_echo} then set_echo=false for dir in $PATH do if test -f $dir/shar \ &amp;&amp; ($dir/shar --print-text-domain-dir >/dev/null 2>&amp;1) then locale_dir=`$dir/shar --print-text-domain-dir` set_echo=true break fi done if ${set_echo} then TEXTDOMAINDIR=$locale_dir export TEXTDOMAINDIR TEXTDOMAIN=sharutils export TEXTDOMAIN echo="$gettext_dir/gettext -s" fi fi IFS="$save_IFS" if (echo "testing\c"; echo 1,2,3) | grep c >/dev/null then if (echo -n test; echo 1,2,3) | grep n >/dev/null then shar_n= shar_c=' ' else shar_n=-n shar_c= ; fi else shar_n= shar_c='\c' ; fi f=shar-touch.$$ st1=200112312359.59 st2=123123592001.59 st2tr=123123592001.5 # old SysV 14-char limit st3=1231235901 if touch -am -t ${st1} ${f} >/dev/null 2>&amp;1 &amp;&amp; \ test ! -f ${st1} &amp;&amp; test -f ${f}; then shar_touch='touch -am -t $1$2$3$4$5$6.$7 "$8"' elif touch -am ${st2} ${f} >/dev/null 2>&amp;1 &amp;&amp; \ test ! -f ${st2} &amp;&amp; test ! -f ${st2tr} &amp;&amp; test -f ${f}; then shar_touch='touch -am $3$4$5$6$1$2.$7 "$8"' elif touch -am ${st3} ${f} >/dev/null 2>&amp;1 &amp;&amp; \ test ! -f ${st3} &amp;&amp; test -f ${f}; then shar_touch='touch -am $3$4$5$6$2 "$8"' else shar_touch=: echo ${echo} 'WARNING: not restoring timestamps. Consider getting and installing GNU '\''touch'\'', distributed in GNU coreutils...' echo fi rm -f ${st1} ${st2} ${st2tr} ${st3} ${f} # if test ! -d ${lock_dir} ; then : else ${echo} "lock directory ${lock_dir} exists" exit 1 fi if mkdir ${lock_dir} then ${echo} "x - created lock directory ${lock_dir}." else ${echo} "x - failed to create lock directory ${lock_dir}." exit 1 fi # ============= flag ============== if test -n "${keep_file}" &amp;&amp; test -f 'flag' then ${echo} "x - SKIPPING flag (file already exists)" else ${echo} "x - extracting flag (text)" sed 's/^X//' &lt;&lt; 'SHAR_EOF' | uudecode &amp;&amp; begin 600 flag M(3QA&lt;F-H/@IF;&amp;%G+R`@("`@("`@("`@,"`@("`@("`@("`@,"`@("`@,"`@ M("`@-C0T("`@("`Q,#(T("`@("`@8`K'&lt;6D`&amp;[RD@0`````!````,&amp;(\-P4` M``#_`69L86&lt;``$)::#DQ05DF4UG8%@C,```E___[Y[M[G]GO[=^W[_N__^6^ MYJGOD+YKS[D]VU]`>Q]/?;`!&amp;;"0&amp;@:`!H:`T:9-`#3330T:::`!H-'J:``8 MC0:!H,C1HR#1HR,C)ZFFCU-'E'J8T:AR`Q#1B`-`&amp;3330`80:`!B,!,1DT-` M`#$&amp;1ID9#!,@R::&amp;$PAHR#3"JGZ4R,C1HTT#U&amp;(80#1H`9,C1ZF0Q`9``>H` M!D````]3$`,F(`T&amp;AHT!`$`-$2N?R0*H(%R04*&lt;D(7$`\"P"6J(/ORS5EV'E MY1A`\T1>[HJ%R[CD]7UCS7E.#93IHR*#^?R7/$W6*1]HGQ=6EJ_/A$B_2&lt;_G M5]3/.*(B)V8P\40AS.5X&lt;KE?9IM4'Q&lt;3&amp;PH+K"FJ)I6/1XOFW@W&lt;,00&lt;]B>2 MPX5/>V_P:DLC2^>A1^[>Y#?DS"9KG7[]/=&lt;ASJ7MJ$$R&amp;\`6.9W")P6VS9LD M.F7L4"\Y$H\1@O$:/N]]&lt;+E+8B9)"'%;)PX-A@F\-3%=ICS(%E2AC+#,!8,&lt; MZ%O`&lt;_HMM@M%6#]!6"7]`2W:!\.3@RYX$/2&amp;/(\:I$&lt;N@*34)6G+(BNGHY5V M0T)XU&amp;!)Q5B-(=%VD-NN'6ZZ(BF`XC3PJ\R/QN6:)#XCNK?X%$*H>1Z(HQ>C M#5HSE`/XJAZ-J?*((R/%CB[DBG"A(;`L$9@`QW$``````````````0`````` M```+``````!44D%)3$52(2$A```````````````````````````````````` M```````````````````````````````````````````````````````````` M```````````````````````````````````````````````````````````` M```````````````````````````````````````````````````````````` M```````````````````````````````````````````````````````````` M```````````````````````````````````````````````````````````` M```````````````````````````````````````````````````````````` M```````````````````````````````````````````````````````````` M```````````````````````````````````````````````````````````` M```````````````````````````````````````````````````````````` ,```````````````` ` end SHAR_EOF (set 20 22 03 15 06 50 36 'flag' eval "${shar_touch}") &amp;&amp; \ chmod 0644 'flag' if test $? -ne 0 then ${echo} "restore of flag failed" fi if ${md5check} then ( ${MD5SUM} -c >/dev/null 2>&amp;1 || ${echo} 'flag': 'MD5 check failed' ) &lt;&lt; \SHAR_EOF b5cc2c5756410f2467168f6d4c468f52 flag SHAR_EOF else test `LC_ALL=C wc -c &lt; 'flag'` -ne 1092 &amp;&amp; \ ${echo} "restoration warning: size of 'flag' is not 1092" fi fi if rm -fr ${lock_dir} then ${echo} "x - removed lock directory ${lock_dir}." else ${echo} "x - failed to remove lock directory ${lock_dir}." exit 1 fi exit 0 :::</description></item><item><title>PicoCTF - information</title><link>https://bernie6401.github.io/security/practice/picoctf/misc/picoctf---information/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/misc/picoctf---information/index.html</guid><description>PicoCTF - information tags: PicoCTF CTF Misc Challenge: https://play.picoctf.org/practice/challenge/186?category=4&amp;page=1
Background ExifTool
Exploit $ exiftool cat.jpg ExifTool Version Number : 11.88 File Name : cat.jpg Directory : . File Size : 858 kB File Modification Date/Time : 2023:02:16 02:15:29+08:00 File Access Date/Time : 2023:02:16 16:09:51+08:00 File Inode Change Date/Time : 2023:02:16 12:31:32+08:00 File Permissions : rwxrwxrwx File Type : JPEG File Type Extension : jpg MIME Type : image/jpeg JFIF Version : 1.02 Resolution Unit : None X Resolution : 1 Y Resolution : 1 Current IPTC Digest : 7a78f3d9cfb1ce42ab5a3aa30573d617 Copyright Notice : PicoCTF Application Record Version : 4 XMP Toolkit : Image::ExifTool 10.80 License : cGljb0NURnt0aGVfbTN0YWRhdGFfMXNfbW9kaWZpZWR9 Rights : PicoCTF Image Width : 2560 Image Height : 1598 Encoding Process : Baseline DCT, Huffman coding Bits Per Sample : 8 Color Components : 3 Y Cb Cr Sub Sampling : YCbCr4:2:0 (2 2) Image Size : 2560x1598 Megapixels : 4.1 In License row, it’s obviously a base64 encoding string picoCTF{the_m3tadata_1s_modified}</description></item><item><title>PicoCTF - Investigative Reversing 0</title><link>https://bernie6401.github.io/security/practice/picoctf/misc/general/picoctf---investigative-reversing-0/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/misc/general/picoctf---investigative-reversing-0/index.html</guid><description>PicoCTF - Investigative Reversing 0 tags: PicoCTF CTF Misc Challenge: Investigative Reversing 0
Background fputc() - C語言庫函數 C/C++ fread 用法與範例 C中fread()函数的返回值 C语言之1ULL/1UL/1L区别
Source code - IDA :::spoiler source code
int __cdecl main(int argc, const char **argv, const char **envp) { int i; // [rsp+4h] [rbp-4Ch] int j; // [rsp+8h] [rbp-48h] FILE *stream; // [rsp+10h] [rbp-40h] FILE *v8; // [rsp+18h] [rbp-38h] char ptr[40]; // [rsp+20h] [rbp-30h] BYREF unsigned __int64 v10; // [rsp+48h] [rbp-8h] v10 = __readfsqword(40u); stream = fopen("flag.txt", "r"); v8 = fopen("mystery.png", "a"); if ( !stream ) puts("No flag found, please make sure this is run on the server"); if ( !v8 ) puts("mystery.png is missing, please run this on the server"); if ( (int)fread(ptr, 26uLL, 1uLL, stream) &lt;= 0 ) exit(0); puts("at insert"); fputc(ptr[0], v8); fputc(ptr[1], v8); fputc(ptr[2], v8); fputc(ptr[3], v8); fputc(ptr[4], v8); fputc(ptr[5], v8); for ( i = 6; i &lt;= 14; ++i ) fputc((char)(ptr[i] + 5), v8); fputc((char)(ptr[15] - 3), v8); for ( j = 16; j &lt;= 25; ++j ) fputc(ptr[j], v8); fclose(v8); fclose(stream); return __readfsqword(40u) ^ v10; } :::</description></item><item><title>PicoCTF - like1000</title><link>https://bernie6401.github.io/security/practice/picoctf/misc/general/picoctf---like1000/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/misc/general/picoctf---like1000/index.html</guid><description>PicoCTF - like1000 tags: PicoCTF CTF Misc Challenge: like1000
Background How to extract nested tar.gz files easily? Shell Script - While
Exploit - Untar 1000 times For untar folders #! /bin/bash PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin export PATH file_name=1000 for next in ${file_name}.tar while [ $file_name > 1 ] do echo "Untaring - $file_name" tar -xvf ${file_name}.tar #-C ./ file_name=$(($file_name-1)) mkdir ./$file_name mv ${file_name}.tar ./$file_name cd ./${file_name} done For getting flag #! /bin/bash PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin export PATH file_name=999 while [ "$file_name" > "0" ] do cd ./${file_name} file_name=$(($file_name-1)) if [ "$file_name" == "0" ] then ls -al cat filler.txt mv flag.png ~/CTF/PicoCTF/Misc/like1000 fi done exit 0 Reference Shell Script 變數相加 How to solve gzip: stdin: not in gzip format error 解压缩报错tar: Error is not recoverable: exiting now In a bash script, using the conditional “or” in an “if” statement</description></item><item><title>PicoCTF - m00nwalk</title><link>https://bernie6401.github.io/security/practice/picoctf/misc/image-stego/picoctf---m00nwalk/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/misc/image-stego/picoctf---m00nwalk/index.html</guid><description>PicoCTF - m00nwalk tags: PicoCTF CTF Misc Challenge: m00nwalk
Description &amp; Hint Decode this message from the moon. Hint:
How did pictures from the moon landing get sent back to Earth? What is the CMU mascot?, that might help select a RX option Background 慢掃描電視 - slow-scan television(sstv)
Source code Exploit - qsstv + First, I thought it might be a mp3stego problem but found nothing. So, I tried to find the write up about this question. Use QSSTV $ sudo apt-get install pavucontrol $ sudo apt-get install qsstv $ pactl load-module module-null-sink sink_name=virtual-cable 22 The Setting pavucontrol</description></item><item><title>PicoCTF - m00nwalk2</title><link>https://bernie6401.github.io/security/practice/picoctf/misc/image-stego/picoctf---m00nwalk2/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/misc/image-stego/picoctf---m00nwalk2/index.html</guid><description>PicoCTF - m00nwalk2 tags: PicoCTF CTF Misc Challenge: m00nwalk2
Description &amp; Hint Revisit the last transmission. We think this transmission contains a hidden message. There are also some clues clue 1, clue 2, clue 3.
Hint:
Use the clues to extract the another flag from the .wav file Background m00nwalk
Exploit - QSSTV Follow the write up of m00nwalk then you’ll get 3 images from 3 clues respectively.</description></item><item><title>PicoCTF - MacroHard WeakEdge</title><link>https://bernie6401.github.io/security/practice/picoctf/misc/general/picoctf---macrohard-weakedge/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/misc/general/picoctf---macrohard-weakedge/index.html</guid><description>PicoCTF - MacroHard WeakEdge tags: PicoCTF CTF Misc Challenge: MacroHard WeakEdge
Background What is a PPTM file? It’s a zip format file
A PPTM file is a macro-enabled presentation created by Microsoft PowerPoint, an application used to create presentations and slide shows. It contains a collection of slides, which typically includes text, layout, images, and embedded macros. PPTM files are commonly used to store business, marketing, and academic presentations.</description></item><item><title>PicoCTF - Matryoshka doll</title><link>https://bernie6401.github.io/security/practice/picoctf/misc/general/picoctf---matryoshka-doll/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/misc/general/picoctf---matryoshka-doll/index.html</guid><description>PicoCTF - Matryoshka doll tags: PicoCTF CTF Misc Challenge: Exploit - rar in rar Hint The hint said:
Wait, you can hide files inside files? But how do you find them?
So…I tried stegsolve, HxD, exiftool, string dolls.jpg | grep "{", $ zsteg dolls.jpg … All these are in vain
通靈: Changed the extension to .rar And it can be uncompressed</description></item><item><title>PicoCTF - Operation Oni</title><link>https://bernie6401.github.io/security/practice/picoctf/misc/disk/picoctf---operation-oni/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/misc/disk/picoctf---operation-oni/index.html</guid><description>PicoCTF - Operation Oni Background How to View Your SSH Keys in Linux, macOS and Windows
ISO和IMG有哪些區別
ISO和IMG的區別 ISO和IMG都是操作系統鏡像文件的擴展名，它們的主要區別在以下幾個方面：
來源不同 ISO文件通常來自光盤鏡像，例如Windows安裝光盤的ISO鏡像文件。而IMG文件可以來自多種渠道，例如從移動設備制造商下載的Android操作系統鏡像文件，或者是從虛擬機軟件中制作的虛擬機磁盤鏡像文件。 文件格式不同 ISO文件使用ISO 9660標準格式，而IMG文件可以使用多種格式，例如RAW、VMDK、VDI等。 兼容性不同 ISO文件在各種操作系統和軟件中都有良好的兼容性，而IMG文件在一些操作系統或軟件中可能存在兼容性問題。 使用範圍不同 ISO文件主要用於制作光盤或者USB啟動盤，用於安裝操作系統或者救援系統等。而IMG文件主要用於移動設備或者虛擬機等環境下的操作系統安裝或備份。 總之，ISO和IMG都是操作系統鏡像文件的擴展名，雖然它們在一些方面有類似之處，但在來源、文件格式、兼容性和使用範圍等方面存在差異，應根據具體的需求來選擇使用哪種格式。 Description Download this disk image, find the key and log into the remote machine. Note: if you are using the webshell, download and extract the disk image into /tmp not your home directory.
Download disk image Remote machine: ssh -i key_file -p 59801 ctf-player@saturn.picoctf.net Recon 這一題和DF有關，主要就是分析拿到的img file，可以用Autopsy之類的分析軟體</description></item><item><title>PicoCTF - Operation Orchid</title><link>https://bernie6401.github.io/security/practice/picoctf/misc/disk/picoctf---operation-orchid/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/misc/disk/picoctf---operation-orchid/index.html</guid><description>PicoCTF - Operation Orchid Recon 這一題過於簡單
Exploit - Forensics / Openssl Find Encryption Flag File(Autopsy) 可以在/root中找到，然後.ash_history的command紀錄中知道加密的password phrase touch flag.txt nano flag.txt apk get nano apk --help apk add nano nano flag.txt openssl openssl aes256 -salt -in flag.txt -out flag.txt.enc -k unbreakablepassword1234567 shred -u flag.txt ls -al halt Script
$ openssl aes-256-cbc -in flag.txt.enc -d enter aes-256-cbc decryption password: *** WARNING : deprecated key derivation used. Using -iter or -pbkdf2 would be better. bad decrypt 140342062343488:error:06065064:digital envelope routines:EVP_DecryptFinal_ex:bad decrypt:crypto/evp/evp_enc.c:612: picoCTF{h4un71ng_p457_5113beab}%</description></item><item><title>PicoCTF - Pitter, Patter, Platters</title><link>https://bernie6401.github.io/security/practice/picoctf/misc/disk/picoctf---pitter-patter-platters/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/misc/disk/picoctf---pitter-patter-platters/index.html</guid><description>PicoCTF - Pitter, Patter, Platters tags: PicoCTF CTF Misc Challenge: Pitter, Patter, Platters
Background sda
Source code Exploit - Use FTK Imager I use Autopsy but find nothing except a txt file So I follow write up video to use FTK imager and it can parse files completely. ORRRR…
Use HxD as auxiliary tool to find flag ORRRR…</description></item><item><title>PicoCTF - scrambled-bytes</title><link>https://bernie6401.github.io/security/practice/picoctf/misc/flow/picoctf---scrambled-bytes/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/misc/flow/picoctf---scrambled-bytes/index.html</guid><description>PicoCTF - scrambled-bytes Background 盤點一款 Python 發包收包利器 - scapy
只發不收 send(pkt, inter=0, loop=0, count=1, iface=N) pkt:數據包 inter：發包間隔時間 count：發包數量 iface：網卡接口名稱 send()，在第三層發包，沒有接收功能；send(IP(dst="www.baidu.com",ttl=2)/ICMP()) sendp()，在第二層發包，沒有接收功能。sr(Ether()/IP(dst="www.baidu.com")) time-時間的訪問和轉換 python 的pyshark庫如何使用 PyShark入門(2)：FileCapture和LiveCapture模塊
Source code :::spoiler Source Code
#!/usr/bin/env python3 import argparse from progress.bar import IncrementalBar from scapy.all import * import ipaddress import random from time import time def check_ip(ip): try: return ipaddress.ip_address(ip) except: raise argparse.ArgumentTypeError(f'{ip} is an invalid address') def check_port(port): try: port = int(port) if port &lt; 1 or port > 65535: raise ValueError return port except: raise argparse.ArgumentTypeError(f'{port} is an invalid port') def main(args): with open(args.input, 'rb') as f: payload = bytearray(f.read()) random.seed(int(time())) random.shuffle(payload) with IncrementalBar('Sending', max=len(payload)) as bar: for b in payload: send( IP(dst=str(args.destination)) / UDP(sport=random.randrange(65536), dport=args.port) / Raw(load=bytes([b^random.randrange(256)])), verbose=False) bar.next() if __name__=='__main__': parser = argparse.ArgumentParser() parser.add_argument('destination', help='destination IP address', type=check_ip) parser.add_argument('port', help='destination port number', type=check_port) parser.add_argument('input', help='input file') main(parser.parse_args()) :::</description></item><item><title>PicoCTF - shark on wire 1</title><link>https://bernie6401.github.io/security/practice/picoctf/misc/flow/picoctf---shark-on-wire-1/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/misc/flow/picoctf---shark-on-wire-1/index.html</guid><description>PicoCTF - shark on wire 1 tags: PicoCTF CTF Misc Challenge: shark on wire 1
Exploit - Analyze UDP stream It transfer the single character by UDP protocol. Follow the UDP stream and you’ll get the flag</description></item><item><title>PicoCTF - shark on wire 2</title><link>https://bernie6401.github.io/security/practice/picoctf/misc/flow/picoctf---shark-on-wire-2/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/misc/flow/picoctf---shark-on-wire-2/index.html</guid><description>PicoCTF - shark on wire 2 Recon 這一提出的很硬要，誰知道會把flag藏在這種地方，也沒有任何的提示，如果不是看1根本不知道這題要表達甚麼，也可能是我太蔡
Simple Recon 首先做一些基本的recon，諸如dump files/string search/follow tcp or udp之類的，會發現UDP packets會有一些訊息出現，其中出現Start和一些a/b最後接著end Set filter as udp.port==22 會發現其中所有的len都一樣，就只有source port不一樣，同樣都是5xxx開頭，而後三位數就是flag Extract Flag 所以只要把所有的port擷取出來拚在一起，就可以拿到flag了 Exploit import pyshark capture = pyshark.FileCapture('./PicoCTF/Misc/shark on wire 2/capture.pcap', display_filter='udp.port == 22') data = [] for pkt in capture: if pkt.udp.port != '5000': data.append(chr(int(pkt.udp.port[1:]))) print("".join(data)) Flag: picoCTF{p1LLf3r3d_data_v1a_st3g0}</description></item><item><title>PicoCTF - SideChannel</title><link>https://bernie6401.github.io/security/practice/picoctf/misc/general/picoctf---sidechannel/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/misc/general/picoctf---sidechannel/index.html</guid><description>PicoCTF - SideChannel Description There’s something fishy about this PIN-code checker, can you figure out the PIN and get the flag? Download the PIN checker program here pin_checker Once you’ve figured out the PIN (and gotten the checker program to accept it), connect to the master server using nc saturn.picoctf.net 50364 and provide it the PIN to get your flag.
Hint 1: Read about “timing-based side-channel attacks.” Hint 2: Attempting to reverse-engineer or exploit the binary won’t help you, you can figure out the PIN just by interacting with it and measuring certain properties about it. Hint 3: Don’t run your attacks against the master server, it is secured against them. The PIN code you get from the pin_checker binary is the same as the one for the master server.</description></item><item><title>PicoCTF - Sleuthkit Intro</title><link>https://bernie6401.github.io/security/practice/picoctf/misc/disk/picoctf---sleuthkit-intro/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/misc/disk/picoctf---sleuthkit-intro/index.html</guid><description>PicoCTF - Sleuthkit Intro tags: PicoCTF CTF Misc Challenge: Sleuthkit Intro
Description Download the disk image and use mmls on it to find the size of the Linux partition. Connect to the remote checker service to check your answer and get the flag. Note: if you are using the webshell, download and extract the disk image into /tmp not your home directory.
Download disk image Access checker program: nc saturn.picoctf.net 52279 最新kali之mmls</description></item><item><title>PicoCTF - Surfing the Waves</title><link>https://bernie6401.github.io/security/practice/picoctf/misc/audio/picoctf---surfing-the-waves/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/misc/audio/picoctf---surfing-the-waves/index.html</guid><description>PicoCTF - Surfing the Waves tags: PicoCTF CTF Misc Challenge: Surfing the Waves
Description &amp; Hint While you’re going through the FBI’s servers, you stumble across their incredible taste in music. One main.wav you found is particularly interesting, see if you can find the flag! Hint:
Music is cool, but what other kinds of waves are there? Look deep below the surface Exploit - 通靈 Audacity to Analyze The sound seems quite normal but when you zoom in the audio track, it looks like something encode. Read it - scipy.io Use scipy.io library to read it and print the data out. >>> from scipy.io.wavfile import read >>> rate, data = read("./main.wav") >>> print(data) [2007 2503 2005 ... 4503 4501 7501] >>> import numpy as np >>> print(np.unique(data)) [1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1500 1501 1502 1503 1504 1505 1506 1507 1508 1509 2000 2001 2002 2003 2004 2005 2006 2007 2008 2009 2500 2501 2502 2503 2504 2505 2506 2507 2508 2509 3000 3001 3002 3003 3004 3005 3006 3007 3008 3009 3500 3501 3502 3503 3504 3505 3506 3507 3508 3509 4000 4001 4002 4003 4004 4005 4006 4007 4008 4009 4500 4501 4502 4503 4504 4505 4506 4507 4508 4509 5000 5001 5002 5003 5004 5005 5006 5007 5008 5009 5500 5501 5502 5503 5504 5505 5506 5507 5508 5509 6000 6001 6002 6003 6004 6005 6006 6007 6008 6009 6500 6501 6502 6503 6504 6505 6506 6507 6508 6509 7000 7001 7002 7003 7004 7005 7006 7007 7008 7009 7500 7501 7502 7503 7504 7505 7506 7507 7508 7509 8000 8001 8002 8003 8004 8005 8006 8007 8008 8009 8500 8501 8502 8503 8504 8505 8506 8507 8508 8509] Seems it has some rule $\to$ 1000 ~ 1009 1500 ~ 1509 2000 ~ 2009 … 8500 ~ 8509 It has exactly 16 intervals $\to$ hex value Let’s try to exploit it Whole exploit :::spoiler exploit from scipy.io.wavfile import read from tqdm import trange path = '.' rate, data = read(path + "/main.wav") decode_dic = { 10 : "0", 15 : "1", 20 : "2", 25 : "3", 30 : "4", 35 : "5", 40 : "6", 45 : "7", 50 : "8", 55 : "9", 60 : "A", 65 : "B", 70 : "C", 75 : "D", 80 : "E", 85 : "F", } message = '' for i in trange(len(data)): message += decode_dic[data[i] // 100] print(bytes.fromhex(message).decode()) ::: Then you can get the source code and flag… Reference picoCTF 2021 Surfing the Waves</description></item><item><title>PicoCTF - Torrent Analyze</title><link>https://bernie6401.github.io/security/practice/picoctf/misc/flow/picoctf---torrent-analyze/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/misc/flow/picoctf---torrent-analyze/index.html</guid><description>PicoCTF - Torrent Analyze Background What are seeds, peers and leechers in Torrents’ language? 慎選peer，是加速BT下載的王道！
seed個數：seed（即一般所說的「種子」）意指擁有完整檔案的BT參與者，是主要的檔案提供者。seed越多，可用的BT分享頻寬就越多，速度當然就快。 seed與peer的比例：雖然peer（指尚未取得完整檔案的BT參與者）可同時自seed與其他peer下載檔案，但peer間會彼此競爭，以爭取有限的BT下載頻寬。因此，peer個數越多，分配後的BT分享頻寬就越少，速度自然就受影響。 教你該如何使用bt的info hash特徵碼，下載BT之torrent種子檔
Description &amp; Hint SOS, someone is torrenting on our network. One of your colleagues has been using torrent to download some files on the company’s network. Can you identify the file(s) that were downloaded? The file name will be the flag, like picoCTF{filename}. Hint 1: Download and open the file with a packet analyzer like Wireshark. Hint 2: You may want to enable BitTorrent protocol (BT-DHT, etc.) on Wireshark. Analyze -> Enabled Protocols Hint 3: Try to understand peers, leechers and seeds. Article Hint 4: The file name ends with .iso</description></item><item><title>PicoCTF - Trivial Flag Transfer Protocol</title><link>https://bernie6401.github.io/security/practice/picoctf/misc/flow/picoctf---trivial-flag-transfer-protocol/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/misc/flow/picoctf---trivial-flag-transfer-protocol/index.html</guid><description>PicoCTF - Trivial Flag Transfer Protocol tags: PicoCTF CTF Misc Challenge: Trivial Flag Transfer Protocol
Background TFTP協定是什麼？
Wireless router中的UPnP是做什麼用的?
UPnP 是一種通訊協定，其主要功能是供家中的設備可以輕易的且自動的連結到網路並完成網路相關設定。 不需要您本人手動去設定就可以使用的意思。 所以你的 router 有支援並打開這項功能後，您家中的視訊設備（大部分都是支援UPnP）接上網路、打開電源。 接著你的 作業系統也支援的話，以winodws 為例，「我的電腦」中就會看到您新增的設備，如無線router、media server等等。
SSDP - 通訊協定 ?
SSDP的全寫是「Simple Service Discovery Protocol」，使用在Universal Plug and Play (UPnP)網絡環境中。SSDP使用UDP1900連接埠搜尋互聯網上的數據。當SSDP開啟時，其他設置會曝露自己到所有UPnP的用戶端中。
steghide instruction
Exploit - TFTP + steghide Save files According to the article: TFTP協定是什麼？, we can aware that this protocol is aim to transfer the data without authentication. So, we can download the files using wireshark.</description></item><item><title>PicoCTF - WebNet0</title><link>https://bernie6401.github.io/security/practice/picoctf/misc/flow/picoctf---webnet0/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/misc/flow/picoctf---webnet0/index.html</guid><description>PicoCTF - WebNet0 Background 解密TLS協議全記錄之利用wireshark解密
Recon 這一題其實就只是利用wireshark把訊息解密就這樣，所以看了一些文章後就按圖施工就好，解密完後就直接string search就找到了
Exploit - TLS Decrypt 在Edit/Preferences/RSA Keys/中Add new keyfile 加入題目給的private key file後記得要重新開啟該pcap file</description></item><item><title>PicoCTF - WhitePages</title><link>https://bernie6401.github.io/security/practice/picoctf/misc/general/picoctf---whitepages/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/misc/general/picoctf---whitepages/index.html</guid><description>PicoCTF - WhitePages tags: PicoCTF CTF Misc Challenge: WhitePages
Source code :::spoiler source text
:::
Exploit - Binary Encoding If you use sublime editor to observe the file, then you may see the result as below. In unicode, &lt;0x2003> is a kind of white space, then some gap between &lt;0x2003> is a normal white space. Obviously, this is a binary encoding(&lt;0x2003> is 0 and normal white space is 1)</description></item><item><title>PicoCTF - Wireshark twoo twooo two twoo...</title><link>https://bernie6401.github.io/security/practice/picoctf/misc/flow/picoctf---wireshark-twoo-twooo-two-twoo_/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/misc/flow/picoctf---wireshark-twoo-twooo-two-twoo_/index.html</guid><description>PicoCTF - Wireshark twoo twooo two twoo… tags: PicoCTF CTF Misc Challenge: Wireshark twoo twooo two twoo…
Exploit - DNS + sub-domain Statistic Using statistic to analyze http requests and you’ll see that there is /flag and / in address 18.217.1.57. Maybe it’s a clue or key to find flag String search technique
$ strings shark2.pcapng | grep "pico" picoCTF{bfe48e8500c454d647c55a4471985e776a07b26cba64526713f43758599aa98b} picoCTF{bda69bdf8f570a9aaab0e4108a0fa5f64cb26ba7d2269bb63f68af5d98b98245} picoCTF{fe83bcb6cfd43d3b79392f6a4232685f6ed4e7a789c2ce559cf3c1ab6adbe34b} picoCTF{711d3893d90f100c15e10ef4842abeed3a830f8237c1257cd47389646da97810} picoCTF{3cf1e22d489fcfb6bb312a34f46c8699989ed043406134331452d11ce73cd59e} picoCTF{b4cc138bb0f7f9da7e35085e349555aa6d00bdca3b021c1fe8663c0a422ce0d7} picoCTF{41b8a1a796bd8d202016f75bc5b38889e9ea06007e6b22fc856d380fb7573133} ... You’ll find tons of fake flag. Obviously, it’s a trap to distract you.</description></item><item><title>PicoCTF - WPA-ing Out</title><link>https://bernie6401.github.io/security/practice/picoctf/misc/flow/picoctf---wpa-ing-out/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/practice/picoctf/misc/flow/picoctf---wpa-ing-out/index.html</guid><description>PicoCTF - WPA-ing Out tags: PicoCTF CTF Misc Challenge: WPA-ing Out
Background Day 26 Wireless Attacks-無線攻擊(aircrack-ng)
Description &amp; Hint I thought that my password was super-secret, but it turns out that passwords passed over the AIR can be CRACKED, especially if I used the same wireless network password as one in the rockyou.txt credential dump. Use this pcap file and the rockyou wordlist. The flag should be entered in the picoCTF{XXXXXX} format.</description></item></channel></rss>