<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Malware Reverse Engineering and Analysis on SBK Hugo Site</title><link>https://bernie6401.github.io/tags/malware-reverse-engineering-and-analysis/</link><description>Recent content in Malware Reverse Engineering and Analysis on SBK Hugo Site</description><generator>Hugo</generator><language>en-us</language><atom:link href="https://bernie6401.github.io/tags/malware-reverse-engineering-and-analysis/index.xml" rel="self" type="application/rss+xml"/><item><title>NTU Malware Reverse Final Project Notes</title><link>https://bernie6401.github.io/security/course/ntu-mr/ntu-malware-reverse-final-project-notes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/course/ntu-mr/ntu-malware-reverse-final-project-notes/</guid><description>&lt;h1 id="ntu-malware-reverse-final-project-notes">
 NTU Malware Reverse Final Project Notes
 &lt;a class="anchor" href="#ntu-malware-reverse-final-project-notes">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntu_mr-malware-reverse-engineering-and-analysis">
 tags: &lt;code>NTU_MR&lt;/code> &lt;code>Malware Reverse Engineering and Analysis&lt;/code>
 &lt;a class="anchor" href="#tags-ntu_mr-malware-reverse-engineering-and-analysis">#&lt;/a>
&lt;/h6>
&lt;h2 id="deep-learning-at-the-shallow-end-malware-classification-for-non-domain-experts">
 Deep learning at the shallow end Malware classification for non-domain experts
 &lt;a class="anchor" href="#deep-learning-at-the-shallow-end-malware-classification-for-non-domain-experts">#&lt;/a>
&lt;/h2>
&lt;h3 id="how-to-reproduce">
 How to reproduce?
 &lt;a class="anchor" href="#how-to-reproduce">#&lt;/a>
&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>Construct Environment
The whole construction step can see &lt;a href="https://hackmd.io/@cwl0429/install_tf_guide">安裝 tensorflow 及 cuda cudnn 心得&lt;/a>.
Refer to &lt;a href="https://www.tensorflow.org/install/source_windows#gpu">documentation for tensorflow&lt;/a>, I choose the library shown as below&amp;hellip;&lt;/p>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th style="text-align: center">Object&lt;/th>
 &lt;th style="text-align: center">CUDA&lt;/th>
 &lt;th style="text-align: center">cuDNN&lt;/th>
 &lt;th style="text-align: center">Python&lt;/th>
 &lt;th style="text-align: center">GPU Driver Version&lt;/th>
 &lt;th style="text-align: center">tensorflow&lt;/th>
 &lt;th style="text-align: center">tensorflow-gpu&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td style="text-align: center">Version&lt;/td>
 &lt;td style="text-align: center">11.2&lt;/td>
 &lt;td style="text-align: center">8.1&lt;/td>
 &lt;td style="text-align: center">3.6.13&lt;/td>
 &lt;td style="text-align: center">526.98&lt;/td>
 &lt;td style="text-align: center">2.6.2&lt;/td>
 &lt;td style="text-align: center">2.6.0&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;p>Then refer to &lt;a href="https://docs.nvidia.com/deeplearning/cudnn/install-guide/index.html#install-windows">NVIDIA CUDNN DOCUMENTATION&lt;/a>, just use &lt;code>zlibwapi.dll&lt;/code> provided by this page directly. This compressed folder is for &lt;code>x64&lt;/code> processor.
Notice that, &lt;strong>&lt;font color=#FF0000>DO NOT USE &lt;a href="http://www.winimage.com/zLibDll/">this page&lt;/a> and &lt;a href="https://www.dll-files.com/zlibwapi.dll.html">this page&lt;/a>&lt;/font>&lt;/strong>. These are for &lt;code>x86&lt;/code> processor.&lt;/p></description></item><item><title>NTU Malware Reverse HW 1 write up</title><link>https://bernie6401.github.io/security/course/ntu-mr/ntu-malware-reverse-hw-1-write-up/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/course/ntu-mr/ntu-malware-reverse-hw-1-write-up/</guid><description>&lt;h1 id="ntu-malware-reverse-hw-1-write-up">
 NTU Malware Reverse HW 1 write up
 &lt;a class="anchor" href="#ntu-malware-reverse-hw-1-write-up">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntu_mr-malware-reverse-engineering-and-analysis-ntu">
 tags: &lt;code>NTU_MR&lt;/code> &lt;code>Malware Reverse Engineering and Analysis&lt;/code> &lt;code>NTU&lt;/code>
 &lt;a class="anchor" href="#tags-ntu_mr-malware-reverse-engineering-and-analysis-ntu">#&lt;/a>
&lt;/h6>
&lt;p>[TOC]&lt;/p>
&lt;h2 id="task-1">
 Task 1
 &lt;a class="anchor" href="#task-1">#&lt;/a>
&lt;/h2>
&lt;h3 id="analyze-the-lab06-01exe">
 Analyze the &lt;code>Lab06-01.exe&lt;/code>
 &lt;a class="anchor" href="#analyze-the-lab06-01exe">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>What is the major code construct found in the only subroutine called by main?
Ans: It has only an if statement in the main function.
&lt;img src="https://imgur.com/JZiz0BC.png" alt="" />&lt;/p>
&lt;/li>
&lt;li>
&lt;p>What is the subroutine located at 0x40105F?
Ans: It’s just a &lt;code>printf&lt;/code> function. At the beginning, I can not recognize this code block do exactly until I analyze the program behavior by using string side bar to search the specific string in the code.&lt;/p></description></item><item><title>NTU Malware Reverse HW 2 write up</title><link>https://bernie6401.github.io/security/course/ntu-mr/ntu-malware-reverse-hw-2-write-up/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/course/ntu-mr/ntu-malware-reverse-hw-2-write-up/</guid><description>&lt;h1 id="ntu-malware-reverse-hw-2-write-up">
 NTU Malware Reverse HW 2 write up
 &lt;a class="anchor" href="#ntu-malware-reverse-hw-2-write-up">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntu_mr-malware-reverse-engineering-and-analysis-ntu">
 tags: &lt;code>NTU_MR&lt;/code> &lt;code>Malware Reverse Engineering and Analysis&lt;/code> &lt;code>NTU&lt;/code>
 &lt;a class="anchor" href="#tags-ntu_mr-malware-reverse-engineering-and-analysis-ntu">#&lt;/a>
&lt;/h6>
&lt;p>[TOC]&lt;/p>
&lt;h2 id="task-1">
 Task 1
 &lt;a class="anchor" href="#task-1">#&lt;/a>
&lt;/h2>
&lt;p>執行勒索病毒&lt;code>Dharma&lt;/code>與Process monitor並截圖&lt;code>Dharma&lt;/code>的Process Tree，並分析說明每個Process行為
&lt;img src="https://imgur.com/vzb9g9O.png" alt="" />
Ans:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>Conhost.exe&lt;/code>: It’s defined by Microsoft and is normally legal and safe. Working on &lt;code>Win7&lt;/code>, &lt;code>Win8&lt;/code>, and &lt;code>Win10&lt;/code>. The main function of this PE file is to let Command Prompt and Windows File Explorer can interact. The other function is to support users who can drag the file or folder to the command prompt directly. Most of the time, it’s a safe file that even repeats execution many times. However, in some circumstances, the viruses will pretend a &lt;code>conhost.exe&lt;/code> file to use massive memory or store it in the wrong folder.[1]
&lt;img src="https://imgur.com/xQayXgX.png" alt="" />&lt;/p></description></item><item><title>NTU Malware Reverse HW 3 write up</title><link>https://bernie6401.github.io/security/course/ntu-mr/ntu-malware-reverse-hw-3-write-up/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/course/ntu-mr/ntu-malware-reverse-hw-3-write-up/</guid><description>&lt;h1 id="ntu-malware-reverse-hw-3-write-up">
 NTU Malware Reverse HW 3 write up
 &lt;a class="anchor" href="#ntu-malware-reverse-hw-3-write-up">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntu_mr-malware-reverse-engineering-and-analysis">
 tags: &lt;code>NTU_MR&lt;/code> &lt;code>Malware Reverse Engineering and Analysis&lt;/code>
 &lt;a class="anchor" href="#tags-ntu_mr-malware-reverse-engineering-and-analysis">#&lt;/a>
&lt;/h6>
&lt;p>[TOC]&lt;/p>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Name&lt;/th>
 &lt;th>何秉學&lt;/th>
 &lt;th>StuID&lt;/th>
 &lt;th>R11921A16&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;/tbody>
&lt;/table>
&lt;h2 id="task-1-lab-15-01exe">
 Task 1: &lt;code>Lab 15-01.exe&lt;/code>
 &lt;a class="anchor" href="#task-1-lab-15-01exe">#&lt;/a>
&lt;/h2>
&lt;h3 id="observation">
 Observation
 &lt;a class="anchor" href="#observation">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>When I execute the file, it print out a message: &lt;code>Son, I am disappoint.&lt;/code> Refer to the description below, I must enter some parameter that match the secret code.&lt;/p>
&lt;blockquote>
&lt;p>Analyze the sample found in the file &lt;code>Lab15-01.exe&lt;/code>. This is a command-line program that takes an argument and prints &lt;code>Good Job!&lt;/code> if the argument matches a secret code.&lt;/p></description></item><item><title>NTU Malware Reverse Lab 1 write up</title><link>https://bernie6401.github.io/security/course/ntu-mr/ntu-malware-reverse-lab-1-write-up/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/course/ntu-mr/ntu-malware-reverse-lab-1-write-up/</guid><description>&lt;h1 id="ntu-malware-reverse-lab-1-write-up">
 NTU Malware Reverse Lab 1 write up
 &lt;a class="anchor" href="#ntu-malware-reverse-lab-1-write-up">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntu_mr-malware-reverse-engineering-and-analysis-ntu">
 tags: &lt;code>NTU_MR&lt;/code> &lt;code>Malware Reverse Engineering and Analysis&lt;/code> &lt;code>NTU&lt;/code>
 &lt;a class="anchor" href="#tags-ntu_mr-malware-reverse-engineering-and-analysis-ntu">#&lt;/a>
&lt;/h6>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Name&lt;/th>
 &lt;th>何秉學&lt;/th>
 &lt;th>StuID&lt;/th>
 &lt;th>R11921A16&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;/tbody>
&lt;/table>
&lt;h2 id="wannacry">
 WannaCry
 &lt;a class="anchor" href="#wannacry">#&lt;/a>
&lt;/h2>
&lt;h3 id="change-variable-and-data-type">
 Change variable and data type
 &lt;a class="anchor" href="#change-variable-and-data-type">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>Follow the video and replace most of the variable that ghidra did not recognize and retype them also.&lt;/li>
&lt;li>According to the video, you must search the entry point function(local_6c = FUN_00408140();) first and replace the signature by &lt;a href="https://learn.microsoft.com/zh-tw/windows/win32/learnwin32/winmain--the-application-entry-point">here&lt;/a>&lt;/li>
&lt;li>Then click into WinMain function and you&amp;rsquo;ll see a strange url at the beginning of the top. Try to rename and retype it as char*.&lt;/li>
&lt;li>Ghidra can not recognize &lt;a href="https://learn.microsoft.com/en-us/windows/win32/api/wininet/nf-wininet-internetopena">InternetOpenA&lt;/a>, and &lt;a href="https://learn.microsoft.com/en-us/windows/win32/api/wininet/nf-wininet-internetopenurla">InternetOpenUrlA&lt;/a>. But you can found that ghidra cannot recognize hinternet datatype as well. So, we must create new datatype in Datt Type Manager.&lt;/li>
&lt;li>And in write_1831_to_tasksche.exe function, the first if-statement has 4 variable that ghidra can&amp;rsquo;t recognize, including createProcessA, _createFileA, _writeFile, _closeHandle. So, you&amp;rsquo;re not only rename them but retype them for the following statement for each of them.(Ghidra has all type of them but it just can not recognize.)&lt;/li>
&lt;li>When you have 1831.bin file(you can follow Analyze part at 5-th and 6-th section), useing &lt;strong>Defined String&lt;/strong> window to check out some function including unzip_something function.&lt;/li>
&lt;li>Scroll down the &lt;strong>Defined String&lt;/strong>, you&amp;rsquo;ll see string &lt;strong>13AM4VW2dhxYgXeQepoHkHSQuy6NgaEb94&lt;/strong> at 0x0040f488. Then in assembly code, there&amp;rsquo;re 3 similar function be called at the sametime. We called it bitcoin_something function.&lt;/li>
&lt;/ul>
&lt;h3 id="analyze">
 Analyze
 &lt;a class="anchor" href="#analyze">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>For the first part to analyze, you can check out for loop after strange_url variable. It does this loop for 14 times and copy strange_url to strange_url_copy by andding 4.&lt;/li>
&lt;li>Next, you can find an if statement at the below. Check this out carefully, it the internet request failed, it&amp;rsquo;ll access wannacry_real_entry() function.&lt;/li>
&lt;li>Enter to wannacry_real_entry function, you&amp;rsquo;ll see another if statement to examine your argument input. If you keyin less than 1 argument, it&amp;rsquo;ll execute no_argument_handler function and start create_wannacry_service function.&lt;/li>
&lt;li>Checking wannacry program in second function of no_argument_handler function by assembly language, you&amp;rsquo;ll find there&amp;rsquo;re two sprintf structure are not correct in the middle paragraph. Because, there&amp;rsquo;re two more argument should be pushed in stack but not be recognized by ghidra, including s_tasksche.exe_0043136c and 0x00407dea and s_WINDOWS_00431367 at 0x00407df2. So, we have to override this line signature and add the remaining argument back to sprinf.
&lt;img src="https://imgur.com/HE2vWWo.png" alt="2 arguments did not be recognized" />&lt;/li>
&lt;li>So, let&amp;rsquo;s take a look at this flow chart of what happened so far &lt;img src="https://imgur.com/JtLrxwf.png" alt="flow chart of first stage" />&lt;/li>
&lt;li>Then I used another VM(Ubuntu) to command wrestool to analyze wannacry file and output another file named 1831.bin. Using ghidra to analyze this file. Then do the same thing as above that what we do to analyze wannacry file such as change WinMain signature or renamee variable or retype variable, etc.&lt;/li>
&lt;li>While you&amp;rsquo;re analyzing in WinMain function, you&amp;rsquo;ll see a strange variable &amp;amp;_Str2_0040f538 which store &amp;lsquo;/i&amp;rsquo; characters. You can just press &amp;lsquo;c&amp;rsquo; in assembly code to show &amp;lsquo;\i&amp;rsquo;.&lt;/li>
&lt;li>Next, scroll down this file, you&amp;rsquo;ll see a strange swprintf parameter called _Count_0040f40c. Then select all addr type data and right click mouse and select &lt;strong>clear with option&lt;/strong>. You&amp;rsquo;ll see many unicode strings. Finally, right click DAT_0040f40c and choose Data/TerminatedUnicode.&lt;/li>
&lt;li>Finally, you can check this figure to know the whole operation flow &lt;img src="https://imgur.com/P00ObJZ.png" alt="whole flow chart of wannacry" />&lt;/li>
&lt;/ul>
&lt;p>1.1 What is the &amp;lsquo;killswitch&amp;rsquo; string?
Ans: &lt;a href="http://www.iuqerfsodp">http://www.iuqerfsodp&lt;/a>9ifjaposdfj
1.2 What is the unzip password? (as show in below)
Ans: WNcry@2o17&lt;/p></description></item><item><title>NTU Malware Reverse Lab 2 write up</title><link>https://bernie6401.github.io/security/course/ntu-mr/ntu-malware-reverse-lab-2-write-up/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/course/ntu-mr/ntu-malware-reverse-lab-2-write-up/</guid><description>&lt;h1 id="ntu-malware-reverse-lab-2-write-up">
 NTU Malware Reverse Lab 2 write up
 &lt;a class="anchor" href="#ntu-malware-reverse-lab-2-write-up">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntu_mr-malware-reverse-engineering-and-analysis-ntu">
 tags: &lt;code>NTU_MR&lt;/code> &lt;code>Malware Reverse Engineering and Analysis&lt;/code> &lt;code>NTU&lt;/code>
 &lt;a class="anchor" href="#tags-ntu_mr-malware-reverse-engineering-and-analysis-ntu">#&lt;/a>
&lt;/h6>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Name&lt;/th>
 &lt;th>何秉學&lt;/th>
 &lt;th>StuID&lt;/th>
 &lt;th>R11921A16&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;/tbody>
&lt;/table>
&lt;h2 id="analyze-the-malware-1-found-in-the-file-lab13-02zip---lab13-02exe-generate-yourself-write-ups-with-screenshots-and-answer-the-follow-questions-">
 Analyze the malware 1 found in the file Lab13-02.zip -&amp;gt; Lab13-02.exe, generate &amp;lsquo;yourself&amp;rsquo; write ups (with screenshots) and answer the follow questions :
 &lt;a class="anchor" href="#analyze-the-malware-1-found-in-the-file-lab13-02zip---lab13-02exe-generate-yourself-write-ups-with-screenshots-and-answer-the-follow-questions-">#&lt;/a>
&lt;/h2>
&lt;p>1.1 Using dynamic analysis, determine what this malware creates.
Ans:&lt;/p>
&lt;ul>
&lt;li>According to &lt;a href="https://blog.csdn.net/m1287578441/article/details/125185048">reference&lt;/a>, you can also use procmon(Process Monitor) to monitor the whole progress after executing this file. The progress of first iteration is shown as below
&lt;img src="https://imgur.com/tCr29ps.png" alt="result from process monitor" />
Then use PEiD to check if the file has shell or not. And refer to the result as below, it seems has not shell, so that we can use IDA directly.
&lt;img src="https://imgur.com/Bpcnm1c.png" alt="result from PEiD" />&lt;/li>
&lt;li>I used IDA to analyze this executable file and observe that it&amp;rsquo;ll execute sub_401851 function every 10 seconds. And when I execute it in VM, it&amp;rsquo;ll create a temp file name temp00XXXXXX.
&lt;pre tabindex="0">&lt;code class="language-cpp=" data-lang="cpp=">int __cdecl main(int argc, const char **argv, const char **envp)
{
 while ( 1 )
 {
 Sleep(5000u);
 sub_401851();
 Sleep(5000u);
 }
}
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ul>
&lt;p>1.2 Use static techniques such as an xor search, FindCrypt2, KANAL, and the IDA Entropy Plugin to look for potential encoding. What do you find?&lt;strong>(Install findcrypt and IDA Entropy plugin can refer to Appendix 1, 2)&lt;/strong>
Ans:&lt;/p></description></item><item><title>NTU Malware Reverse Lab 3 write up</title><link>https://bernie6401.github.io/security/course/ntu-mr/ntu-malware-reverse-lab-3-write-up/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/course/ntu-mr/ntu-malware-reverse-lab-3-write-up/</guid><description>&lt;h1 id="ntu-malware-reverse-lab-3-write-up">
 NTU Malware Reverse Lab 3 write up
 &lt;a class="anchor" href="#ntu-malware-reverse-lab-3-write-up">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntu_mr-malware-reverse-engineering-and-analysis-ntu">
 tags: &lt;code>NTU_MR&lt;/code> &lt;code>Malware Reverse Engineering and Analysis&lt;/code> &lt;code>NTU&lt;/code>
 &lt;a class="anchor" href="#tags-ntu_mr-malware-reverse-engineering-and-analysis-ntu">#&lt;/a>
&lt;/h6>
&lt;p>[TOC]&lt;/p>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Name&lt;/th>
 &lt;th>何秉學&lt;/th>
 &lt;th>StuID&lt;/th>
 &lt;th>R11921A16&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;/tbody>
&lt;/table>
&lt;h2 id="review-packing-and-unpacking">
 Review Packing and Unpacking
 &lt;a class="anchor" href="#review-packing-and-unpacking">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>How does packing and unpacking work?
作者會把原本的code section和data section，放在UPX1，並且用unpacking stub(裡面存放解殼的程式)，把UPX1的內容一點一點的還原回UPX0(也就是空區段)，並跳回正常程式的執行進入點(original entry point, &lt;code>OEP&lt;/code>)，最後跳回去的動作叫做&lt;code>Tail Jump&lt;/code>或&lt;code>Long Jump&lt;/code>，另外，多長的jump才是長，可能要依照經驗值判斷，或是直接跳過去後分析程式在幹嘛
&lt;img src="https://imgur.com/TdhA1Tz.png" alt="" />&lt;/li>
&lt;li>實際上執行脫殼的時候，除了&lt;code>OEP&lt;/code>的重建外，還需要重建&lt;code>Imports&lt;/code>，這兩者都處理好後才算是脫殼完成&lt;/li>
&lt;li>當分析脫殼執行到如下圖這樣的情況時，就離終點不遠了，也就是&lt;code>jmp&lt;/code>的地址離目前的程式很遠，且之後的程式有很多空指令或垃圾&lt;code>byte&lt;/code>，&lt;font color="FF0000">&lt;strong>此為&lt;code>UXP&lt;/code>殼的特徵&lt;/strong>&lt;/font>
&lt;img src="https://imgur.com/KUbYRWa.png" alt="" />&lt;/li>
&lt;li>可以用&lt;code>PEiD&lt;/code>這個工具(或是用&lt;code>Entropy&lt;/code>之類的，但是不一定準確)判斷樣本有沒有加殼，或是加了甚麼殼，上圖是沒有加殼的一般程式，下圖是加了&lt;code>UPX&lt;/code>的加殼程式
&lt;img src="https://imgur.com/T0sFBc6.png" alt="" />
&lt;img src="https://imgur.com/9hDQtVr.png" alt="" />&lt;/li>
&lt;li>若是要處理&lt;code>Import Table Reconstruction&lt;/code>，可以用&lt;code>OllyDump&lt;/code>、&lt;code>ImpRec&lt;/code>或是&lt;code>Scylla&lt;/code>這些工具來進行，在&lt;code>Practice&lt;/code>中是用&lt;code>Scylla&lt;/code>演示(且可以搭配&lt;code>x32dbg&lt;/code>或&lt;code>x64dbg&lt;/code>進行)&lt;/li>
&lt;li>老師有說在&lt;code>Long Jump&lt;/code>之前會搭配&lt;code>pop&lt;/code> instruction，這可能可以當作解析&lt;code>OEP&lt;/code>的線索&lt;/li>
&lt;li>&lt;code>Tail Jump&lt;/code>，不一定是用&lt;code>jmp&lt;/code>，也可以是&lt;code>call&lt;/code> instruction；另外，跳轉的地址也不一定是一個明確的地址，也可能用暫存器存起來，這部分可以注意一下&lt;/li>
&lt;/ul>
&lt;h2 id="practice---upx_exerciseexe">
 Practice - &lt;code>upx_exercise.exe&lt;/code>
 &lt;a class="anchor" href="#practice---upx_exerciseexe">#&lt;/a>
&lt;/h2>
&lt;h3 id="observation">
 Observation
 &lt;a class="anchor" href="#observation">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>First things first, we can observe the file by executing it directly. Obviously, you should enter correct &lt;code>CTF&lt;/code> key by analyzing.
&lt;img src="https://imgur.com/RcXtqnV.png" alt="" />&lt;/li>
&lt;/ul>
&lt;h3 id="unpacking">
 Unpacking
 &lt;a class="anchor" href="#unpacking">#&lt;/a>
&lt;/h3>
&lt;h4 id="static-analysis---ida-pro">
 Static analysis - &lt;code>IDA Pro&lt;/code>
 &lt;a class="anchor" href="#static-analysis---ida-pro">#&lt;/a>
&lt;/h4>
&lt;ul>
&lt;li>You are not allowed to disassembly by doing nothing, because it was packed by &lt;code>UPX&lt;/code>. Therefore, our objective is to unpack it and try to analyze it original code to get the &lt;code>CTF Flag&lt;/code>.
&lt;img src="https://imgur.com/CkqgK9U.png" alt="" />&lt;/li>
&lt;/ul>
&lt;h4 id="dynamic-analysis---x32dbg">
 Dynamic analysis - &lt;code>x32dbg&lt;/code>
 &lt;a class="anchor" href="#dynamic-analysis---x32dbg">#&lt;/a>
&lt;/h4>
&lt;ul>
&lt;li>In &lt;code>UPX-based&lt;/code> packing, it has a feature that in order to not let the data be flushed during unpacking, it must store all data to the stack by using &lt;font color="FF0000">&lt;code>pushad&lt;/code>&lt;/font> instruction.
&lt;img src="https://imgur.com/lgZWxPL.png" alt="" />&lt;/li>
&lt;li>Then, you&amp;rsquo;ll see a lot of &lt;code>jmp&lt;/code> instruction to unpack the original code.
&lt;img src="https://imgur.com/W0Bj1dq.png" alt="" />&lt;/li>
&lt;li>Scrolling down the code, you&amp;rsquo;ll see a &lt;font color="FF0000">&lt;code>popad&lt;/code>&lt;/font> instruction at &lt;code>0x0134AEDE&lt;/code> , a &lt;font color="FF0000">&lt;code>jmp&lt;/code>&lt;/font> instruction at &lt;code>0x010EAEEC&lt;/code>, and a lots of &lt;code>null&lt;/code> instruction which all three are satisfied all features that &lt;code>UPX-based&lt;/code> packing method has.
It&amp;rsquo;ll restore all data that stored in stack and jump to &lt;code>upx_exercise.134244D&lt;/code>.
&lt;img src="https://imgur.com/vRJFQdU.png" alt="" />&lt;/li>
&lt;li>Set the break-point and press &lt;code>run&lt;/code> button in &lt;code>x32dbg&lt;/code>, then press &lt;code>step into&lt;/code> button to observe the code.&lt;/li>
&lt;li>Now, the code has already unpacked, then we can use &lt;font color="FF0000">&lt;strong>&lt;code>Scylla&lt;/code>&lt;/strong>&lt;/font> to do &lt;code>Import Reconstruction&lt;/code>.
&lt;img src="https://imgur.com/Tjn207G.png" alt="" />
&lt;img src="https://imgur.com/YBbISuc.png" alt="" />&lt;/li>
&lt;li>Press &lt;code>IAT Autosearch&lt;/code>(Import Address Table) button to search and then press &lt;code>Get Imports&lt;/code> button. Finally, you will get all imports that this file used, and &lt;code>Scylla&lt;/code> will help you to rebuild it.
&lt;img src="https://imgur.com/yUzV49b.png" alt="" />
Press &lt;code>Dump&lt;/code> button to get &lt;code>IAT&lt;/code> file.
&lt;img src="https://imgur.com/6RkqgO4.png" alt="" />&lt;/li>
&lt;li>Press &lt;code>Fix Dump&lt;/code> and choose the file what we dump to reconnect the &lt;code>IAT&lt;/code> and this file. You&amp;rsquo;ll see the log said &lt;code>Import Rebuild success&lt;/code> and you&amp;rsquo;ll get a new file named &lt;code>upx_exercise_dump_SCY.exe&lt;/code> that repaired by &lt;code>Scylla&lt;/code>.
&lt;img src="https://imgur.com/CIJEKcY.png" alt="" />&lt;/li>
&lt;/ul>
&lt;h3 id="analyze">
 Analyze
 &lt;a class="anchor" href="#analyze">#&lt;/a>
&lt;/h3>
&lt;h4 id="re-static-analysis---ida-pro">
 Re-static analysis - &lt;code>IDA Pro&lt;/code>
 &lt;a class="anchor" href="#re-static-analysis---ida-pro">#&lt;/a>
&lt;/h4>
&lt;ul>
&lt;li>Used &lt;code>IDA&lt;/code> to reanalyze the unpacking file.&lt;/li>
&lt;li>Used string searching to find the string &lt;code>nope&lt;/code> that appear in your &lt;code>cmd&lt;/code>.
&lt;img src="https://imgur.com/OeInenc.png" alt="" />&lt;/li>
&lt;li>Used cross reference to find which part has used it.
&lt;img src="https://imgur.com/o7xwDFE.png" alt="" />
&lt;img src="https://imgur.com/zvQqq0u.png" alt="" />&lt;/li>
&lt;li>The main part is shown as below
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sub_E01EB0(std&lt;span style="color:#f92672">::&lt;/span>cin, &lt;span style="color:#f92672">&amp;amp;&lt;/span>Memory);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>LOBYTE(v116) &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>MEMORY[&lt;span style="color:#ae81ff">0&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>v96 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0xFCC1D3C4&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>v97 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0xD8D2C8DE&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>v98 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0xD8D3E8E0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>v99 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0xD8C2EFB0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>v100 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0xC2ECB3C1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>v101 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0xB3EBE1D8&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>v102 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0xD5F3D8BE&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>v103 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0xB3EFD8DE&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>v104 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0xF5C2E3D5&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>v105 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0xFAD6D6D8&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>v64 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>HIBYTE(v95) &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>v65 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>v93 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">while&lt;/span> ( v65 &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">40&lt;/span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v66 &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>)&lt;span style="color:#f92672">&amp;amp;&lt;/span>Memory;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( v111 &lt;span style="color:#f92672">&amp;gt;=&lt;/span> &lt;span style="color:#ae81ff">16&lt;/span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v66 &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>)Memory;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v67 &lt;span style="color:#f92672">=&lt;/span> v66[v65] &lt;span style="color:#f92672">^&lt;/span> &lt;span style="color:#ae81ff">0x87&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v68 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">*&lt;/span>((&lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">__int8&lt;/span> &lt;span style="color:#f92672">*&lt;/span>)&lt;span style="color:#f92672">&amp;amp;&lt;/span>v96 &lt;span style="color:#f92672">+&lt;/span> v65);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v94 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( v67 &lt;span style="color:#f92672">!=&lt;/span> v68 )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v64 &lt;span style="color:#f92672">=&lt;/span> v94;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> HIBYTE(v95) &lt;span style="color:#f92672">=&lt;/span> v64;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v93 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">++&lt;/span>v65;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>v69 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Congratz?!&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> ( &lt;span style="color:#f92672">!&lt;/span>v64 )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v69 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Nope!&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>From &lt;code>v96&lt;/code> to &lt;code>v105&lt;/code>, it stored 40 bytes and it seems do something in while loop 40 times. In addition, &lt;code>v67 = v66[v65] ^ 0x87;&lt;/code> this line used &lt;code>xor&lt;/code> instruction that seems a encrypt part. And then it compared &lt;code>&amp;amp;v96 + v65&lt;/code> and &lt;code>v67&lt;/code> that encrypt the string what you input.&lt;/li>
&lt;li>If all the strings you input after process &lt;code>xor&lt;/code> to &lt;code>0x87&lt;/code> are strictly the same with &lt;code>v96&lt;/code> to &lt;code>v105&lt;/code>, then it&amp;rsquo;ll print &lt;code>Congratz?!&lt;/code>, otherwise, print &lt;code>Nope&lt;/code>.&lt;/li>
&lt;li>Used &lt;a href="https://xor.pw/#">online_xor&lt;/a> to get &lt;code>v96&lt;/code> to &lt;code>v105&lt;/code> encrypted strings.
&lt;img src="https://imgur.com/5CkTwXn.png" alt="" />
And then used &lt;a href="">online_hex2ascii&lt;/a> to get the &lt;code>CTF Flag&lt;/code>.
&lt;img src="https://imgur.com/BHA0PDT.png" alt="" />&lt;/li>
&lt;li>The answer is &lt;font color="FF0000">&lt;code>**CTF{YOU_goT_7hE_F4kE_fl49_tRY_h4RdEr_QQ}**&lt;/code>&lt;/font>, though it is not a real answer.
&lt;ul>
&lt;li>Note that, the demo from TA is finished, therefore, I still don&amp;rsquo;t know the real flag is.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="homework---upx_revilexe">
 Homework - &lt;code>upx_Revil.exe&lt;/code>
 &lt;a class="anchor" href="#homework---upx_revilexe">#&lt;/a>
&lt;/h2>
&lt;h3 id="static-analysis-observation">
 Static Analysis Observation
 &lt;a class="anchor" href="#static-analysis-observation">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>Use &lt;code>IDA&lt;/code> to analyze this sample and obviously packed sample
&lt;img src="https://imgur.com/uzVMd5r.png" alt="" />&lt;/li>
&lt;li>Use the skill above then you can answer the question easily.&lt;/li>
&lt;/ul>
&lt;h2 id="homework---custom_packer_revilexe">
 Homework - &lt;code>custom_packer_Revil.exe&lt;/code>
 &lt;a class="anchor" href="#homework---custom_packer_revilexe">#&lt;/a>
&lt;/h2>
&lt;h3 id="static-analysis-observation---detectiteasy">
 Static Analysis Observation - &lt;code>DetectItEasy&lt;/code>
 &lt;a class="anchor" href="#static-analysis-observation---detectiteasy">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>Though I used the tool, &lt;code>DetectItEasy&lt;/code> to check if this sample was packed or not, the answer is not quite explicit.
&lt;img src="https://imgur.com/Efv46o8.png" alt="" />&lt;/p></description></item></channel></rss>