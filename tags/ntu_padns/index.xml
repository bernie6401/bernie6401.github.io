<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>NTU_PADNS :: Tag :: SBK Hugo Site</title><link>https://bernie6401.github.io/tags/ntu_padns/index.html</link><description/><generator>Hugo</generator><language>en-us</language><atom:link href="https://bernie6401.github.io/tags/ntu_padns/index.xml" rel="self" type="application/rss+xml"/><item><title>A&amp;D of Network Security - Lab 12</title><link>https://bernie6401.github.io/security/course/ntu-padns/ad-of-network-security---lab-12/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/course/ntu-padns/ad-of-network-security---lab-12/index.html</guid><description>A&amp;D of Network Security - Lab 12 tags: Practicum of A&amp;D of NS NTU Video NTU PADNS Lecture 12
Background What is _mbscmp?
int _mbscmp( const unsigned char *string1, const unsigned char *string2 ); Return Value
&lt;0 string1 is less than string2 =0 string1 is identical to string2 >0 string1 is greater than string2
Recon Static - IDA Pro :::spoiler Main Source Code
int __cdecl main(int argc, const char **argv, const char **envp) { char v4; // [esp+10h] [ebp-181Ch] char v5; // [esp+410h] [ebp-141Ch] char v6; // [esp+810h] [ebp-101Ch] char v7; // [esp+C10h] [ebp-C1Ch] CHAR v8; // [esp+1024h] [ebp-808h] CHAR ServiceName; // [esp+1428h] [ebp-404h] const char *v10; // [esp+1828h] [ebp-4h] if ( argc == 1 ) { if ( !sub_401000() ) sub_402410(); sub_402360(); } else { v10 = argv[argc - 1]; if ( !sub_402510(v10) ) sub_402410(); if ( _mbscmp((const unsigned __int8 *)argv[1], &amp;byte_40C170) ) { if ( _mbscmp((const unsigned __int8 *)argv[1], &amp;byte_40C16C) ) { if ( _mbscmp((const unsigned __int8 *)argv[1], &amp;byte_40C168) ) { if ( _mbscmp((const unsigned __int8 *)argv[1], aCc) ) sub_402410(); if ( argc != 3 ) sub_402410(); if ( !sub_401280(&amp;v5, 1024, &amp;v6, 1024, &amp;v4, 1024, &amp;v7) ) sub_402E7E(aKSHSPSPerS, &amp;v5); } else { if ( argc != 7 ) sub_402410(); sub_401070(argv[2], argv[3], argv[4], argv[5]); } } else if ( argc == 3 ) { if ( sub_4025B0(&amp;v8) ) return -1; sub_402900(&amp;v8); } else { if ( argc != 4 ) sub_402410(); sub_402900(argv[2]); } } else if ( argc == 3 ) { if ( sub_4025B0(&amp;ServiceName) ) return -1; sub_402600(&amp;ServiceName); } else { if ( argc != 4 ) sub_402410(); sub_402600(argv[2]); } } return 0; } :::</description></item><item><title>A&amp;D of Network Security - Lab 13</title><link>https://bernie6401.github.io/security/course/ntu-padns/ad-of-network-security---lab-13/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/course/ntu-padns/ad-of-network-security---lab-13/index.html</guid><description>A&amp;D of Network Security - Lab 13 tags: Practicum of A&amp;D of NS NTU Metasploit with Bluekeep Vulnerability (CVE-2019-0708) Setting up environment Open Windows 7 and Kali-Linux with localhost only mode :::spoiler Screenshot :::
Then we can note that the IP of these two machines are different: :::spoiler Screenshot</description></item><item><title>A&amp;D of Network Security - Lab 14</title><link>https://bernie6401.github.io/security/course/ntu-padns/ad-of-network-security---lab-14/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/course/ntu-padns/ad-of-network-security---lab-14/index.html</guid><description>A&amp;D of Network Security - Lab 14 tags: Practicum of A&amp;D of NS NTU Video Class Description Lab Implementation
Background snort Rule :::spoiler Rule Screenshot Format Action Option Option - Payload ::: Lab Lab 1: Packet sniffer Mode show出 sniff ICMP封包的結果 Payload:</description></item><item><title>A&amp;D of Network Security - Lab 2</title><link>https://bernie6401.github.io/security/course/ntu-padns/ad-of-network-security---lab-2/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/course/ntu-padns/ad-of-network-security---lab-2/index.html</guid><description>A&amp;D of Network Security - Lab 2 tags: Practicum of A&amp;D of NS NTU Lab Cheat Sheet(Cisco Packet Tracer) Setting VLAN :::spoiler Switch
Switch>enable Switch#configure Configuring from terminal, memory, or network [terminal]? Enter configuration commands, one per line. End with CNTL/Z. Switch(config)#vlan 10 Switch(config-vlan)#name green Switch(config-vlan)#vlan 20 Switch(config-vlan)#name yellow Switch(config-vlan)# Switch# %SYS-5-CONFIG_I: Configured from console by console Switch#show vlan VLAN Name Status Ports ---- -------------------------------- --------- ------------------------------- 1 default active Fa0/5, Fa0/6, Fa0/7, Fa0/8 Fa0/9, Fa0/10, Fa0/11, Fa0/12 Fa0/13, Fa0/14, Fa0/15, Fa0/16 Fa0/17, Fa0/18, Fa0/19, Fa0/20 Fa0/21, Fa0/22, Fa0/23, Fa0/24 Gig0/1, Gig0/2 10 green active 20 yellow active ... ::: :::spoiler Switch相對應的Interface</description></item><item><title>A&amp;D of Network Security - Lab 3</title><link>https://bernie6401.github.io/security/course/ntu-padns/ad-of-network-security---lab-3/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/course/ntu-padns/ad-of-network-security---lab-3/index.html</guid><description>A&amp;D of Network Security - Lab 3 tags: Practicum of A&amp;D of NS NTU Background Network setting type in virtual box Ping two machine in internal mode :::spoiler Detailed Process
Clone another VM Setting Network Configuration Setting 2 VMs’ network config as above. Note that, must check MAC address is different, promiscuous mode is Allow All and the adapter is the same.</description></item><item><title>A&amp;D of Network Security - Lab 4(ARP &amp; DNS SPOOFING)</title><link>https://bernie6401.github.io/security/course/ntu-padns/ad-of-network-security---lab-4arp--dns-spoofing/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/course/ntu-padns/ad-of-network-security---lab-4arp--dns-spoofing/index.html</guid><description>A&amp;D of Network Security - Lab 4(ARP &amp; DNS SPOOFING) tags: Practicum of A&amp;D of NS NTU Background ARP Spoofing at 1:15:00
ARP SPOOFING Setting 2 VMs’ network interface as Bridged adapter :::danger You supposed to use your own network instead of public network :::
Checking IP And check the victim gateway by nmap</description></item><item><title>A&amp;D of Network Security - Lab 7</title><link>https://bernie6401.github.io/security/course/ntu-padns/ad-of-network-security---lab-7/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/course/ntu-padns/ad-of-network-security---lab-7/index.html</guid><description>A&amp;D of Network Security - Lab 7 tags: Practicum of A&amp;D of NS NTU Background What is foremost and How to use it?
RSA CTF Exercise - RSA Given
p = 9648423029010515676590551740010426534945737639235739800643989352039852507298491399561035009163427050370107570733633350911691280297777160200625281665378483 q = 11874843837980297032092405848653656852760910154543380907650040190704283358909208578251063047732443992230647903887510065547947313543299303261986053486569407 e = 65537 c = 83208298995174604174773590298203639360540024871256126892889661345742403314929861939100492666605647316646576486526217457006376842280869728581726746401583705899941768214138742259689334840735633553053887641847651173776251820293087212885670180367406807406765923638973161375817392737747832762751690104423869019034 Then I can use decrypt function to fetch plaintext. Flag(hex): 12058e43d9e0c22559c19774 :::spoiler source code
from Crypto.Util.number import long_to_bytes, inverse, bytes_to_long p = 9648423029010515676590551740010426534945737639235739800643989352039852507298491399561035009163427050370107570733633350911691280297777160200625281665378483 q = 11874843837980297032092405848653656852760910154543380907650040190704283358909208578251063047732443992230647903887510065547947313543299303261986053486569407 e = 65537 c = 83208298995174604174773590298203639360540024871256126892889661345742403314929861939100492666605647316646576486526217457006376842280869728581726746401583705899941768214138742259689334840735633553053887641847651173776251820293087212885670180367406807406765923638973161375817392737747832762751690104423869019034 n = p * q phi = (q-1)*(p-1) d = inverse(e, phi) print(long_to_bytes(pow(c,d,n)).hex()) :::</description></item><item><title>A&amp;D of Network Security Note</title><link>https://bernie6401.github.io/security/course/ntu-padns/ad-of-network-security-note/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/security/course/ntu-padns/ad-of-network-security-note/index.html</guid><description>A&amp;D of Network Security Note tags: Practicum of A&amp;D of NS NTU Background :::spoiler IP / 遮罩 / 閘道 三者的關係
用日常生活中的例子來比喻，IP 就好比在社區中的門牌地址，如果是要找同社區(一樣遮罩範圍的)，就只要透過社區廣播喊一聲。如果找不到人，表示在社區外，就要出社區大門(閘道)去外面問
所以遮罩設定錯誤，代表硬把兩個不同社區的給劃在一起，但是實際上遞送封包就會找不到 (明明住光復國宅結果你跟郵差說光復國宅跟孟竹國宅都在一區)
閘道設定錯誤則是連大門都搞錯了，這樣蓮社區都出不去，自然網路也無法連線 :::
:::spoiler [網路] 淺談 ARP (Address Resolution Protocol) 運作原理
在乙太網路上，資料的傳遞必須要有實體位址 (MAC Address)，Layer 2 設備會驗證 Frame 的實體位址，不是找它的一律捨棄，但設備一開機總不可能就有所有設備的實體位址吧？所以就需要 ARP 協定來協助取得各個設備的實體位址
ARP 是利用乙太網路的廣播功能所設計出來的位址解析協定，它的主要特性是它的位址對應關係是動態的，以查詢的方式來獲得 I P位址 (IP Address) 和實體位址 (MAC Address / Physical Address) 的對應關係。
只要是 Layer 3 的設備都一定會有 ARP Cache，並且會在 ARP 快取內建立 ARP 表格 (ARP Table) 用來記錄 IP 位址和實體位址的對應關係。這個 Table 會依據自身的存活時間遞減而消失，以確保資料的正確性。</description></item></channel></rss>