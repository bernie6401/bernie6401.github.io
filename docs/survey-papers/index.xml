<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>SBK Hugo Site</title><link>https://bernie6401.github.io/docs/survey-papers/</link><description>Recent content on SBK Hugo Site</description><generator>Hugo</generator><language>en-us</language><atom:link href="https://bernie6401.github.io/docs/survey-papers/index.xml" rel="self" type="application/rss+xml"/><item><title>A MITM Based Penetration Test Efficiency Improvement Approach for Traffic-Encrypted Mobile Apps of Power Industry</title><link>https://bernie6401.github.io/docs/survey-papers/android-+-security/a-mitm-based-penetration-test-efficiency-improvement-approach-for-traffic-encrypted-mobile-apps-of-power-industry/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/survey-papers/android-+-security/a-mitm-based-penetration-test-efficiency-improvement-approach-for-traffic-encrypted-mobile-apps-of-power-industry/</guid><description>&lt;h1 id="a-mitm-based-penetration-test-efficiency-improvement-approach-for-traffic-encrypted-mobile-applications-of-power-industry">
 A MITM Based Penetration Test Efficiency Improvement Approach for Traffic-Encrypted Mobile Applications of Power Industry
 &lt;a class="anchor" href="#a-mitm-based-penetration-test-efficiency-improvement-approach-for-traffic-encrypted-mobile-applications-of-power-industry">#&lt;/a>
&lt;/h1>
&lt;p>:::info
Zhang, L., Wang, B., Shen, Q., Song, Y., Guo, N., &amp;amp; Xie, L. (2021, April). A MITM Based Penetration Test Efficiency Improvement Approach for Traffic-Encrypted Mobile Applications of Power Industry. In 2021 IEEE 6th International Conference on Computer and Communication Systems (ICCCS) (pp. 743-747). IEEE.
:::
這一篇蠻有趣的，和我想要做的東西幾乎一樣，不過他論文闡述的重點不一樣，但也還是給我一些之後需要注意的地方，&lt;/p>
&lt;h2 id="introduction">
 Introduction
 &lt;a class="anchor" href="#introduction">#&lt;/a>
&lt;/h2>
&lt;p>他是站在電力相關的Android App的角度去審視如果利用MITM Based做到滲透測試要怎麼做，以及和傳統的方式相比可以減少多少時間、效率提升多少。但其實內文和電力幾乎一點關係也沒有，代換成其他的App也可以，如果我們要利用MITM Based做到Penetration Testing，就必須要手動克服中間會加密的問題，所以他就試圖提出一個==3-Layers Proxy Based==的東西(如下圖)
&lt;img src="https://hackmd.io/_uploads/B1TUn8oGA.png" alt="圖片" />
從上圖可知，手機到Web Server中間總共有三層的Proxy，第一和第三層都是MITM Proxy，主要是負責訊息的加解密，而中間的那一層就可以很彈性的替換成各式各樣的自動化測試工具或腳本，例如Burp Suite或是SQLMAP之類的
:::info
這個架構會需要三層其實是因為他所測試的App，不只是傳輸的那一層會被SSL加密，而在傳送的封包body還會再加密一次，所以需要三層，不然照理來說，一層的MITM Proxy就可以解決SSL加解密的問題，不需要用到三層那麼多，而且也不需要深入探索他用的是哪一套加解密演算法，因為傳輸層的演算法都一樣才對，這是和學長討論出來的結果
:::&lt;/p></description></item><item><title>A Mitmproxy-based Dynamic Vulnerability Detection System For Android Applications</title><link>https://bernie6401.github.io/docs/survey-papers/android-+-security/a-mitmproxy-based-dynamic-vulnerability-detection-system-for-android-applications/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/survey-papers/android-+-security/a-mitmproxy-based-dynamic-vulnerability-detection-system-for-android-applications/</guid><description>&lt;h1 id="a-mitmproxy-based-dynamic-vulnerability-detection-system-for-android-applications">
 A Mitmproxy-based Dynamic Vulnerability Detection System For Android Applications
 &lt;a class="anchor" href="#a-mitmproxy-based-dynamic-vulnerability-detection-system-for-android-applications">#&lt;/a>
&lt;/h1>
&lt;p>:::info
Lv, X., Peng, T., Tang, J., He, R., Hu, X., Jiang, M., &amp;hellip; &amp;amp; Cao, W. (2022, December). A Mitmproxy-based Dynamic Vulnerability Detection System For Android Applications. In 2022 18th International Conference on Mobility, Sensing and Networking (MSN) (pp. 408-416). IEEE.
:::
這一篇也和我想做的主題有一點關聯，他是利用MITMProxy-based達到偵測應用程式在做Hotfix時，有沒有Code Injection(dex injection)的問題。&lt;/p>
&lt;h2 id="introduction">
 Introduction
 &lt;a class="anchor" href="#introduction">#&lt;/a>
&lt;/h2>
&lt;p>現在有很多的App都會實現Hotfix這項技術，也就是不斷電更新，傳統的App更新方式為廠商發佈新的版本後，使用者需要重新卸載再安裝新的版本，但現在有了Hotfix的技術，使用者在沒有感知的情況下就會自動完成更新，如下圖所述，當然在更新之前會進行驗證Hash、SSL憑證和簽章，但如果沒有簽章呢?是不是就可以被MITM篡改Hash和進行Code Injection，這一篇文章就是在自動化的檢測這件事情的可行性
&lt;img src="https://hackmd.io/_uploads/SkTTS9hGA.png" alt="圖片" />&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>Hotfix的流程
按照論文中的說明，利用hotfix更新patch的方式當然不是直接從server傳過來到client端，而是會把dex file打包成.jar或是.zip的patch package，然後放在某個地方。從server那邊會送出一個json file，裡面有一個URL Key會紀錄這個打包好的patch package在哪裡，然後client端自行去下載會來進行patch&lt;/li>
&lt;li>Android的簽章
在Android系統安全中有3個主要的技術: Permission Management, Signature Authentication, 以及Sandbox Mechanism，現在主要探討的問題就是在簽章的技術底下。Android的數位簽章總共會包含三個東西: MANIFEST.MF, CERT.SF, CERT.RSA
&lt;ul>
&lt;li>MANIFEST.MF
是一個Digest File也就是存所有更新的打包檔案的Hash Value&lt;/li>
&lt;li>CERT.SF
是一個Signature File，他會用SHA1計算MANIFEST.MF中的所有東西再用Base64進行Encode&lt;/li>
&lt;li>CERT.RSA
存放Public Key+加密演算法是哪一個+用自己的Private Key加密CERT.SF中的所有東西的結果
綜上所述，如果一個廠商在進行Hotfix更新時，被MITM Hijack，那MANIFEST.MF和CERT.SF可以被換掉，但CERT.RSA這個檔案，因為沒有廠商的私鑰，故無法替換&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="proposed-method">
 Proposed Method
 &lt;a class="anchor" href="#proposed-method">#&lt;/a>
&lt;/h2>
&lt;p>&lt;img src="https://hackmd.io/_uploads/B1Ti653GA.png" alt="圖片" />&lt;/p></description></item><item><title>Cross-site Scripting Attacks on Android Hybrid Applications</title><link>https://bernie6401.github.io/docs/survey-papers/android-+-security/cross-site-scripting-attacks-on-android-hybrid-applications/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/survey-papers/android-+-security/cross-site-scripting-attacks-on-android-hybrid-applications/</guid><description>&lt;h1 id="cross-site-scripting-attacks-on-android-hybrid-applications">
 Cross-site Scripting Attacks on Android Hybrid Applications
 &lt;a class="anchor" href="#cross-site-scripting-attacks-on-android-hybrid-applications">#&lt;/a>
&lt;/h1>
&lt;p>:::info
Bao, W., Yao, W., Zong, M., &amp;amp; Wang, D. (2017, March). Cross-site scripting attacks on android hybrid applications. In Proceedings of the 2017 International Conference on Cryptography, Security and Privacy (pp. 56-61).
:::&lt;/p>
&lt;p>這一篇論文雖然很舊了，但還是蠻有趣的&lt;/p>
&lt;h2 id="introduction">
 Introduction
 &lt;a class="anchor" href="#introduction">#&lt;/a>
&lt;/h2>
&lt;p>他在講的是現在市面上的App通常會用一些像是Apache Cordova(早期叫做PhoneGap)這類型的Hybrid框架製作一款App，但是PhoneGap的做法是利用WebView渲染畫面，因此就勢必會出現XSS相關的攻擊，這一篇論文就是在探討如何達成攻擊，以及受害範圍有多廣&lt;/p>
&lt;ul>
&lt;li>Gartner 的一份報告稱，Hybrid App在基於 HTML5 的 Web App和本機 App之間提供了平衡，到 2016 年，將在超過 50% 的行動 App中使用&lt;/li>
&lt;li>為了美化 UI 並在 JavaScript 程式碼中使用行動裝置的原生功能，Hybrid App必須包含第三方元件，而且它們的程式碼可能不可靠。&lt;/li>
&lt;li>在本文的其餘部分，我們首先對WebView和PhoneGap框架的漏洞進行深入分析。 然後根據我們日常生活中行動應用的使用場景，建立了XSS攻擊混合應用的一般流程。 攻擊結果表明，對Hybrid App的 XSS 攻擊可能會對使用者的行動裝置造成更大的破壞性結果。&lt;/li>
&lt;/ul>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>What is PhoneGap?
&lt;img src="https://hackmd.io/_uploads/rJsdoZWX0.png" alt="圖片" />
上圖顯示了PhoneGap App的架構以及如何和device component互動，當Hybrid App的某個功能需要使用 PhoneGap API 時， App可以使用 JavaScript 程式碼呼叫 API，然後 App中的特殊層將 PhoneGap API 呼叫轉換為適合幕後特定功能的device API。&lt;/li>
&lt;/ul>
&lt;h2 id="proposed-method">
 Proposed Method
 &lt;a class="anchor" href="#proposed-method">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>How XSS attack success on PhoneGap&amp;rsquo;s App?
&lt;img src="https://hackmd.io/_uploads/SyPtsW-7R.png" alt="圖片" />
有兩種方是可以達成這個攻擊
&lt;ul>
&lt;li>首先從上圖可以知道，外部的資料有很多種型態，可能是一般文字、QRcode、藍牙等等媒介，而當傳送的資料出現malicious code的時候，PhoneGap Interface的App就會接收這些有問題的資料，並且直接被WebView所render，此時attacker就可以直接根據傳送的payload達到竊取機敏資料的目的
&lt;blockquote>
&lt;p>在使用者的幫助下注入程式碼。 當使用者開啟將行動裝置連接到外界的通道時，將提供存取權限以允許來自另一個裝置的攻擊。 惡意程式碼是透過在不知不覺中與另一個裝置互動來注入的，然後按照與第一個裝置類似的流程來實現攻擊。&lt;/p></description></item><item><title>DEEPCASE Semi-Supervised Contextual Analysis of Security Events - Notes</title><link>https://bernie6401.github.io/docs/survey-papers/ml-dl-+-security/deepcase-semi-supervised-contextual-analysis-of-security-events---notes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/survey-papers/ml-dl-+-security/deepcase-semi-supervised-contextual-analysis-of-security-events---notes/</guid><description>&lt;h1 id="deepcase-semi-supervised-contextual-analysis-of-security-events---notes">
 DEEPCASE Semi-Supervised Contextual Analysis of Security Events - Notes
 &lt;a class="anchor" href="#deepcase-semi-supervised-contextual-analysis-of-security-events---notes">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-meeting-paper-ntu">
 tags: &lt;code>Meeting Paper&lt;/code> &lt;code>NTU&lt;/code>
 &lt;a class="anchor" href="#tags-meeting-paper-ntu">#&lt;/a>
&lt;/h6>
&lt;p>:::info
Van Ede, T., Aghakhani, H., Spahn, N., Bortolameotti, R., Cova, M., Continella, A., &amp;hellip; &amp;amp; Vigna, G. (2022, May). Deepcase: Semi-supervised contextual analysis of security events. In 2022 IEEE Symposium on Security and Privacy (SP) (pp. 522-539). IEEE.
:::&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://ithelp.ithome.com.tw/articles/10202297">What is NSM(Network Security Monitors)?&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>NSM主要目的是偵測、找出入侵者，提高能見度。它建立在「我們一定會被攻擊，而且最終防禦一定會被突破」的思惟上。假設意志堅決的駭客最終打穿我們辛苦建立的防禦，但只要能在入侵者進一步破壞、感染系統前偵測、做出回應，讓入侵者無法達到目的，便能阻擋這波攻擊&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>NSM不是等接收IDS/IPS等等資安設備觸發警示後才開始收集，而是平時便預先主動收集資料，提供NSM平台審視、分析，強化可見度，主動找出入侵軌跡&lt;/p>&lt;/blockquote>
&lt;hr>
&lt;p>&lt;a href="https://www.ithome.com.tw/tech/28712">What is IDS(Intrusion Detection Systems)?&lt;/a>&lt;/p></description></item><item><title>DeepLog: Anomaly Detection and Diagnosis from System Logs through Deep Learning</title><link>https://bernie6401.github.io/docs/survey-papers/ml-dl-+-security/deeplog_-anomaly-detection-and-diagnosis-from-system-logs-through-deep-learning/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/survey-papers/ml-dl-+-security/deeplog_-anomaly-detection-and-diagnosis-from-system-logs-through-deep-learning/</guid><description>&lt;h1 id="deeplog-anomaly-detection-and-diagnosis-from-system-logs-through-deep-learning">
 DeepLog: Anomaly Detection and Diagnosis from System Logs through Deep Learning
 &lt;a class="anchor" href="#deeplog-anomaly-detection-and-diagnosis-from-system-logs-through-deep-learning">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-meeting-paper-ntu">
 tags: &lt;code>Meeting Paper&lt;/code> &lt;code>NTU&lt;/code>
 &lt;a class="anchor" href="#tags-meeting-paper-ntu">#&lt;/a>
&lt;/h6>
&lt;p>:::info
Du, M., Li, F., Zheng, G., &amp;amp; Srikumar, V. (2017, October). Deeplog: Anomaly detection and diagnosis from system logs through deep learning. In Proceedings of the 2017 ACM SIGSAC conference on computer and communications security (pp. 1285-1298).
:::&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>Model - Log Parser
&lt;a href="https://web.ntnu.edu.tw/~algo/Subsequence2.html">Longest Common Subsequence(LCS)&lt;/a>
&lt;a href="https://www.redhat.com/zh-tw/topics/openstack">認識 OpenStack&lt;/a>&lt;/p>
&lt;hr>
&lt;p>Some attack
&lt;a href="https://wooyun.js.org/drops/Blind%20Return%20Oriented%20Programming%20%28BROP%29%20Attack%20-%20%E6%94%BB%E5%87%BB%E5%8E%9F%E7%90%86.html">Blind Return Oriented Programming(BROP)&lt;/a>&lt;/p></description></item><item><title>EIFFeL: Ensuring Integrity For Federated Learning - Notes</title><link>https://bernie6401.github.io/docs/survey-papers/federated-learning/eiffel_-ensuring-integrity-for-federated-learning---notes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/survey-papers/federated-learning/eiffel_-ensuring-integrity-for-federated-learning---notes/</guid><description>&lt;h1 id="eiffel-ensuring-integrity-for-federated-learning---notes">
 EIFFeL: Ensuring Integrity For Federated Learning - Notes
 &lt;a class="anchor" href="#eiffel-ensuring-integrity-for-federated-learning---notes">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-meeting-paper-ntu">
 tags: &lt;code>Meeting Paper&lt;/code> &lt;code>NTU&lt;/code>
 &lt;a class="anchor" href="#tags-meeting-paper-ntu">#&lt;/a>
&lt;/h6>
&lt;p>:::info
Roy Chowdhury, A., Guo, C., Jha, S., &amp;amp; van der Maaten, L. (2022, November). Eiffel: Ensuring integrity for federated learning. In Proceedings of the 2022 ACM SIGSAC Conference on Computer and Communications Security (pp. 2535-2549).
:::&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://medium.com/%E6%A9%9F%E5%99%A8%E5%AD%B8%E7%BF%92%E7%9F%A5%E8%AD%98%E6%AD%B7%E7%A8%8B/%E8%81%AF%E9%82%A6%E5%AD%B8%E7%BF%92%E7%9A%84%E7%B0%A1%E5%96%AE%E4%BB%8B%E7%B4%B9-776924277d13">聯邦學習的簡單介紹&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>聯邦學習的流程大致上可以分成4步驟：&lt;/p>
&lt;ul>
&lt;li>確定架構(拓樸) Formulate topology&lt;/li>
&lt;li>梯度計算 Gradient compute&lt;/li>
&lt;li>資訊交換 Information exchange&lt;/li>
&lt;li>模型聚合 model aggregation&lt;/li>
&lt;/ul>&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/83786131">What is Secure Aggregation?&lt;/a>&lt;/p></description></item><item><title>Exploiting ML ALG for Efficient Detection and Prevention of JS-XSS Attacks in Android Based Hybrid Applications</title><link>https://bernie6401.github.io/docs/survey-papers/android-+-security/exploiting-ml-alg-for-efficient-detection-and-prevention-of-js-xss-attacks-in-android-based-hybrid-applications/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/survey-papers/android-+-security/exploiting-ml-alg-for-efficient-detection-and-prevention-of-js-xss-attacks-in-android-based-hybrid-applications/</guid><description>&lt;h1 id="exploiting-ml-algorithms-for-efficient-detection-and-prevention-of-javascript-xss-attacks-in-android-based-hybrid-applications">
 Exploiting ML algorithms for Efficient Detection and Prevention of JavaScript-XSS Attacks in Android Based Hybrid Applications
 &lt;a class="anchor" href="#exploiting-ml-algorithms-for-efficient-detection-and-prevention-of-javascript-xss-attacks-in-android-based-hybrid-applications">#&lt;/a>
&lt;/h1>
&lt;p>:::info
Khalid, U., Abdullah, M., &amp;amp; Inayat, K. (2020). Exploiting ML algorithms for Efficient Detection and Prevention of JavaScript-XSS Attacks in Android Based Hybrid Applications. arXiv preprint arXiv:2006.07350.
:::
這一篇論文對於我的研究只有一點點用，大概補足了一些我對Android的XSS漏洞的認識。主要是在利用一些feature，訓練出能夠檢測有無XSS攻擊的模型&lt;/p>
&lt;h2 id="introduction">
 Introduction
 &lt;a class="anchor" href="#introduction">#&lt;/a>
&lt;/h2>
&lt;p>首先，很多的手機App中都會使用WebView這個Component，也就是能夠直接嵌入一個mini browser在App中而不需要另外開啟外部的Browser才能瀏覽網頁，所以JS語言就能夠和Java語言互動，問題在於當從 JavaScript 呼叫 Java 時，攻擊者會將惡意 JavaScript 程式碼儲存在網頁中，當網頁在應用程式中開啟時，然後在 WebView 中註冊一個物件。 首先，攻擊者透過 JavaScript 存取該對象，並透過該對象存取該應用程式的本機方法，攻擊者可以透過觸發本機方法內的重要內建函數輕鬆取得不同的智慧型手機資源。&lt;/p>
&lt;h2 id="contribution">
 Contribution
 &lt;a class="anchor" href="#contribution">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>自行創建一個Dataset，並且從500個不同的Apps中extract出7個不同的feature&lt;/li>
&lt;li>訓練7種不同的ML 模型: Evolutionary-Support Vector Machine (E-SVM), Neural Network, Naive Bayes, Support Vector Machine(SVM), Bagging, Random Forest and J48&lt;/li>
&lt;li>根據實驗結果給出F1-Score和執行時間，結果顯示Random Forest是最好的模型&lt;/li>
&lt;/ul>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>WebView
這個component的存在理由如上所述，其中會用到幾的API:
&lt;pre tabindex="0">&lt;code>setJavaScriptEnabled API
addJavascriptInterface API
loadUrl API
&lt;/code>&lt;/pre>第一個是enable可以使用JS，第二個是註冊Java物件，第三個就是實際把網頁load進來&lt;/li>
&lt;li>Sandbox
&lt;img src="https://hackmd.io/_uploads/r1C5aaRMC.png" alt="圖片" />
如上圖，一般來說webview的瀏覽是會經過sandbox，確保可以控制web browser的access，讓他和本地資源不會共享；網頁和網頁之間要隔離，而網頁和主系統之間也會隔離&lt;/li>
&lt;li>Bypassing sandbox mechanism
&lt;img src="https://hackmd.io/_uploads/BkBYapCGC.png" alt="圖片" />
從上圖可以看出，儘管WebView中存在沙箱安全機制來保護行動裝置本地資源免受JavaScript攻擊，但WebView本身借助WebView提供的API繞過了沙箱機制。 這創建了一條路徑，JavaScript 可以輕鬆地與本機 Java 通訊。 並且攻擊者可以觸發Java的不同類別方法發動XSS攻擊，透過原生Java程式碼存取行動裝置的重要功能包括本機資源。&lt;/li>
&lt;li>哪些類型的易受攻擊的 API 可以透過 Java 物件觸發？
作者有整理出來一個表如下:
&lt;img src="https://hackmd.io/_uploads/SJmIkA0zA.png" alt="圖片" />&lt;/li>
&lt;/ul>
&lt;h2 id="proposed-method">
 Proposed Method
 &lt;a class="anchor" href="#proposed-method">#&lt;/a>
&lt;/h2>
&lt;p>現在的重點是要如何分辨一個App他啟動了webview之後，是否會造成XSS攻擊，作者提出了由四個Level組成的偵測框架以及三個Layers的預防框架&lt;/p></description></item><item><title>Fastbot: A Multi-Agent Model-Based Test Generation System</title><link>https://bernie6401.github.io/docs/survey-papers/android-+-security/gui-testing/fastbot_-a-multi-agent-model-based-test-generation-system/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/survey-papers/android-+-security/gui-testing/fastbot_-a-multi-agent-model-based-test-generation-system/</guid><description>&lt;h1 id="fastbot-a-multi-agent-model-based-test-generation-system">
 Fastbot: A Multi-Agent Model-Based Test Generation System
 &lt;a class="anchor" href="#fastbot-a-multi-agent-model-based-test-generation-system">#&lt;/a>
&lt;/h1>
&lt;p>:::info
Cai, T., Zhang, Z., &amp;amp; Yang, P. (2020, October). Fastbot: A multi-agent model-based test generation system Beijing Bytedance Network Technology Co., Ltd. In Proceedings of the IEEE/ACM 1st International Conference on Automation of Software Test (pp. 93-96).
:::
參考資料: &lt;a href="https://mp.weixin.qq.com/s/QhzqBFZygkIS6C69__smyQ">https://mp.weixin.qq.com/s/QhzqBFZygkIS6C69__smyQ&lt;/a>
&lt;img src="https://hackmd.io/_uploads/BkAnq965Jg.png" alt="image" />&lt;/p></description></item><item><title>Fastbot2: Reusable Automated Model-based GUI Testing for Android Enhanced by Reinforcement Learning</title><link>https://bernie6401.github.io/docs/survey-papers/android-+-security/gui-testing/fastbot2_-reusable-automated-model-based-gui-testing-for-android-enhanced-by-reinforcement-learning/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/survey-papers/android-+-security/gui-testing/fastbot2_-reusable-automated-model-based-gui-testing-for-android-enhanced-by-reinforcement-learning/</guid><description>&lt;h1 id="fastbot2-reusable-automated-model-based-gui-testing-for-android-enhanced-by-reinforcement-learning">
 Fastbot2: Reusable Automated Model-based GUI Testing for Android Enhanced by Reinforcement Learning
 &lt;a class="anchor" href="#fastbot2-reusable-automated-model-based-gui-testing-for-android-enhanced-by-reinforcement-learning">#&lt;/a>
&lt;/h1>
&lt;p>:::info
Lv, Z., Peng, C., Zhang, Z., Su, T., Liu, K., &amp;amp; Yang, P. (2022, October). Fastbot2: Reusable automated model-based gui testing for android enhanced by reinforcement learning. In Proceedings of the 37th IEEE/ACM International Conference on Automated Software Engineering (pp. 1-5).
:::
參考資料: &lt;a href="https://github.com/bytedance/Fastbot_Android/blob/main/handbook-cn.md">https://github.com/bytedance/Fastbot_Android/blob/main/handbook-cn.md&lt;/a>
&lt;img src="https://hackmd.io/_uploads/SJFpdcp51x.png" alt="image" />&lt;/p>
&lt;h2 id="動機與貢獻">
 動機與貢獻
 &lt;a class="anchor" href="#%e5%8b%95%e6%a9%9f%e8%88%87%e8%b2%a2%e7%8d%bb">#&lt;/a>
&lt;/h2>
&lt;p>現有的GUI testing都是無法重複使用之前測試的結果，但fastbot2可以(特別是event-activity transitions)。有兩個貢獻&lt;/p>
&lt;ol>
&lt;li>提出reusable automated model-based GUI testing technique，並且利用reinforcement learning進行增強，以滿足持續測試的實際需求&lt;/li>
&lt;li>Fastbot2 優於最先進的技術。它也已成功部署在位元組跳動的 CI 流程中，並因其改善應用程式品質的能力而獲得了積極的回饋&lt;/li>
&lt;/ol>
&lt;h2 id="主要流程">
 主要流程
 &lt;a class="anchor" href="#%e4%b8%bb%e8%a6%81%e6%b5%81%e7%a8%8b">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>其實很簡單，就是2個東西合併，一個是可以儲存過往測試的流程中，event和activity之間的關係(transitions)，該機率模型就是在記憶每一次的測試round中，獲得的一些knowledge，比方說哪一個哪些event會跑到哪個activity之類的；&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>旨在根據曾經探索的頁面的情況，對當前的備選組件進行挑選，從中選出最有可能觸發未曾探索過的頁面的組件，也就更有可能提升測試結果的 Activity 覆蓋率&lt;/p></description></item><item><title>FedML-HE - An Efficient Homomorphic-Encryption-Based Privacy-Preserving Federated Learning System - Notes</title><link>https://bernie6401.github.io/docs/survey-papers/federated-learning/fedml-he---an-efficient-homomorphic-encryption-based-privacy-preserving-federated-learning-system---notes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/survey-papers/federated-learning/fedml-he---an-efficient-homomorphic-encryption-based-privacy-preserving-federated-learning-system---notes/</guid><description>&lt;h1 id="fedml-he---an-efficient-homomorphic-encryption-based-privacy-preserving-federated-learning-system---notes">
 FedML-HE - An Efficient Homomorphic-Encryption-Based Privacy-Preserving Federated Learning System - Notes
 &lt;a class="anchor" href="#fedml-he---an-efficient-homomorphic-encryption-based-privacy-preserving-federated-learning-system---notes">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-meeting-paper-ntu">
 tags: &lt;code>Meeting Paper&lt;/code> &lt;code>NTU&lt;/code>
 &lt;a class="anchor" href="#tags-meeting-paper-ntu">#&lt;/a>
&lt;/h6>
&lt;p>:::info
Jin, W., Yao, Y., Han, S., Joe-Wong, C., Ravi, S., Avestimehr, S., &amp;amp; He, C. (2023). FedML-HE: An Efficient Homomorphic-Encryption-Based Privacy-Preserving Federated Learning System. arXiv preprint arXiv:2303.10837.
:::
[TOC]&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;h3 id="聯邦學習攻擊方式">
 &lt;a href="https://ithelp.ithome.com.tw/articles/10302263?sc=iThelpR">聯邦學習：攻擊方式&lt;/a>
 &lt;a class="anchor" href="#%e8%81%af%e9%82%a6%e5%ad%b8%e7%bf%92%e6%94%bb%e6%93%8a%e6%96%b9%e5%bc%8f">#&lt;/a>
&lt;/h3>
&lt;p>:::spoiler&lt;/p>
&lt;blockquote>
&lt;p>成員推理攻擊
攻擊者試圖確定某些資料是否是訓練的一部分與模型反轉攻擊一樣，攻擊者利用返回的分類分數來創建多個這些 影子 模型，模型與受攻擊的原始模型具有相似的分類邊界。
給定一個 黑盒 機器學習模型和一個資料記錄，確定該記錄是否用作模型的訓練資料集的一部分，被證明是可能的，具有極高的準確性。
因此，僅對在給定輸入上返回模型輸出的黑盒 API 進行簡單的查詢訪問，就可能洩露有關模型訓練所依據的各個資料記錄的大量訊息。
推理攻擊的準確性隨著類別數量的增加而增加。
:::&lt;/p>&lt;/blockquote>
&lt;hr>
&lt;h3 id="what-is-multi-party-computation-mpc">
 &lt;a href="https://www.eettaiwan.com/20220609nt21-multi-party-computation/">What is Multi Party Computation (MPC)?&lt;/a>
 &lt;a class="anchor" href="#what-is-multi-party-computation-mpc">#&lt;/a>
&lt;/h3>
&lt;p>:::spoiler&lt;/p></description></item><item><title>How to Securely Collaborate on Data: Decentralized Threshold HE and Secure Key Update - Notes</title><link>https://bernie6401.github.io/docs/survey-papers/crypto/how-to-securely-collaborate-on-data_-decentralized-threshold-he-and-secure-key-update---notes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/survey-papers/crypto/how-to-securely-collaborate-on-data_-decentralized-threshold-he-and-secure-key-update---notes/</guid><description>&lt;h1 id="how-to-securely-collaborate-on-data-decentralized-threshold-he-and-secure-key-update---notes">
 How to Securely Collaborate on Data: Decentralized Threshold HE and Secure Key Update - Notes
 &lt;a class="anchor" href="#how-to-securely-collaborate-on-data-decentralized-threshold-he-and-secure-key-update---notes">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-meeting-paper-ntu">
 tags: &lt;code>Meeting Paper&lt;/code> &lt;code>NTU&lt;/code>
 &lt;a class="anchor" href="#tags-meeting-paper-ntu">#&lt;/a>
&lt;/h6>
&lt;p>:::info
Kim, E., Jeong, J., Yoon, H., Kim, Y., Cho, J., &amp;amp; Cheon, J. H. (2020). How to securely collaborate on data: Decentralized threshold he and secure key update. IEEE Access, 8, 191319-191329.
:::
[TOC]&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;h3 id="threshold-homomorphic-encryption---閾值同態加密在隱私計算中的應用">
 &lt;a href="https://www.cnblogs.com/pam-sh/p/16446840.html">Threshold Homomorphic Encryption - 閾值同態加密在隱私計算中的應用&lt;/a>
 &lt;a class="anchor" href="#threshold-homomorphic-encryption---%e9%96%be%e5%80%bc%e5%90%8c%e6%85%8b%e5%8a%a0%e5%af%86%e5%9c%a8%e9%9a%b1%e7%a7%81%e8%a8%88%e7%ae%97%e4%b8%ad%e7%9a%84%e6%87%89%e7%94%a8">#&lt;/a>
&lt;/h3>
&lt;p>:::spoiler&lt;/p>
&lt;blockquote>
&lt;ol>
&lt;li>單密鑰同態加密
只有一個私鑰，且不同公鑰加密的密文無法相互計算。&lt;/li>
&lt;li>閾值同態加密（多密鑰加密）
支持多個私鑰，不同公鑰加密的密文可以互相計算。&lt;/li>
&lt;/ol>
&lt;h4 id="問題">
 問題
 &lt;a class="anchor" href="#%e5%95%8f%e9%a1%8c">#&lt;/a>
&lt;/h4>
&lt;ol>
&lt;li>多方聯合計算最安全的途徑是各自生成、保存公私鑰,但由於算法限制,不同公鑰加密的信息無法進行相互計算,導致隱私計算無法進行&lt;/li>
&lt;li>假設多方使用一套公私鑰,雖然計算可以順利進行,但系統安全性會大大下降,系統中只要有一方被成功攻擊,私鑰就會泄露。&lt;/li>
&lt;li>假設多方使用一套公私鑰,則無法決定由哪個參與方生成公私鑰&lt;/li>
&lt;/ol>
&lt;h4 id="solution---threshold-homomorphic-encryption">
 Solution - Threshold Homomorphic Encryption
 &lt;a class="anchor" href="#solution---threshold-homomorphic-encryption">#&lt;/a>
&lt;/h4>
&lt;p>由於單密鑰同態加密在實際應用中存在諸多關於密鑰使用、管理的問題,閾值同態加密(多密鑰同態加密)應運而生。簡單來說,閾值同態加密算法中存在多個私鑰、一個(或多個公鑰,使用該公鑰系統加密的密文之間可以相互計算,並且只有當參與解密的私鑰數量達到一定閾值時,才能成功解密密文,所以這種多密鑰同態加密算法又被稱為閾值同態加密&lt;/p></description></item><item><title>Identifying vulnerabilities of SSL/TLS certificate verification in Android apps with static and dynamic analysis</title><link>https://bernie6401.github.io/docs/survey-papers/android-+-security/identifying-vulnerabilities-of-ssl_tls-certificate-verification-in-android-apps-with-static-and-dynamic-analysis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/survey-papers/android-+-security/identifying-vulnerabilities-of-ssl_tls-certificate-verification-in-android-apps-with-static-and-dynamic-analysis/</guid><description>&lt;h1 id="identifying-vulnerabilities-of-ssl_tls-certificate-verification-in-android-apps-with-static-and-dynamic-analysis">
 Identifying vulnerabilities of SSL_TLS certificate verification in Android apps with static and dynamic analysis
 &lt;a class="anchor" href="#identifying-vulnerabilities-of-ssl_tls-certificate-verification-in-android-apps-with-static-and-dynamic-analysis">#&lt;/a>
&lt;/h1>
&lt;p>:::info
Wang, Y., Xu, G., Liu, X., Mao, W., Si, C., Pedrycz, W., &amp;amp; Wang, W. (2020). Identifying vulnerabilities of SSL/TLS certificate verification in Android apps with static and dynamic analysis. Journal of Systems and Software, 167, 110609.
:::
這一篇論文對我要做的東西非常類似，雖然本質上不一樣但有很多的觀點以及解決方式是可以參照的&lt;/p>
&lt;h2 id="introduction">
 Introduction
 &lt;a class="anchor" href="#introduction">#&lt;/a>
&lt;/h2>
&lt;p>這篇文章探討了在Android應用程式中SSL/TLS憑證驗證的弱點，並提出了一種名為DCDroid的工具來偵測這些弱點。作者結合靜態和動態分析，分析了來自Google Play和360app的2213個應用程式，發現其中有20.65%可能存在弱點。透過DCDroid在兩部Android智慧手機上執行這些應用程式，最終確認了11.07%的應用程式對MITM和釣魚攻擊存在真正的弱點。&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>SSL/TLS and Android
一般來說，正確的驗證憑證的步驟為&lt;/p>
&lt;ol>
&lt;li>在憑證鏈中的所有憑證有無過期&lt;/li>
&lt;li>憑證或憑證鏈中的根憑證由客戶端的憑證授權單位（CA）簽署&lt;/li>
&lt;li>證書中的網域名稱與所連接的伺服器的網域名稱相符&lt;/li>
&lt;/ol>
&lt;p>但是基於一些原因(例如: 使用self-signed certificate/伺服器的root憑證不在手機的CA list中/糾正某些第三方庫的不安全實作)導致開發者會自行實做一個憑證驗證的方法，而這時候就有可能會產生一些漏洞發生，例如:
:::warning&lt;/p></description></item><item><title>Local Model Poisoning Attacks to Byzantine-Robust Federated Learning - Notes</title><link>https://bernie6401.github.io/docs/survey-papers/federated-learning/local-model-poisoning-attacks-to-byzantine-robust-federated-learning---notes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/survey-papers/federated-learning/local-model-poisoning-attacks-to-byzantine-robust-federated-learning---notes/</guid><description>&lt;h1 id="local-model-poisoning-attacks-to-byzantine-robust-federated-learning---notes">
 Local Model Poisoning Attacks to Byzantine-Robust Federated Learning - Notes
 &lt;a class="anchor" href="#local-model-poisoning-attacks-to-byzantine-robust-federated-learning---notes">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-meeting-paper-ntu">
 tags: &lt;code>Meeting Paper&lt;/code> &lt;code>NTU&lt;/code>
 &lt;a class="anchor" href="#tags-meeting-paper-ntu">#&lt;/a>
&lt;/h6>
&lt;p>:::info
Fang, M., Cao, X., Jia, J., &amp;amp; Gong, N. (2020). Local model poisoning attacks to {Byzantine-Robust} federated learning. In 29th USENIX security symposium (USENIX Security 20) (pp. 1605-1622).
:::&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;h3 id="what-is-non-iid">
 &lt;a href="https://www.zhihu.com/question/395555567">What is Non-IID?&lt;/a>
 &lt;a class="anchor" href="#what-is-non-iid">#&lt;/a>
&lt;/h3>
&lt;blockquote>
&lt;p>首先：什麽是獨立同分布？&lt;/p>
&lt;ul>
&lt;li>同分布：所有items均來自同一種概率分布； e.g. 你丟骰子，每次丟骰子到任何一個數字的概率都是1/6，是相等概率。或者說，在概率空間里面，你不論進行幾次抽樣實驗，他們都服從同樣一個分布。&lt;/li>
&lt;li>獨立：這些sample items全部都是獨立事件； e.g. 每次抽樣之間沒有關系，不會相互影響。比如你在隨便丟骰子，每次拋到的數字是幾就是幾，是獨立的。但如果我要求你要兩次拋到的數字和大於等於9，第一次和第二次拋就不獨立，因為他們相互關聯。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;ul>
&lt;li>非獨立：有些數據處理的順序不夠隨機。比如有些按時間和其他一些標準來排序的數據會出現相關的情況，違反非獨立的原則。&lt;/li>
&lt;li>非同分布：數據因所處在不同的分區而出現不同的分布。&lt;/li>
&lt;li>Non-IID其實有三種：不獨立但同分布，獨立不同分布，不獨立也不同分布。&lt;/li>
&lt;/ul>&lt;/blockquote>
&lt;h3 id="實用拜占庭容錯機制理解">
 &lt;a href="https://zhuanlan.zhihu.com/p/217827966">實用拜占庭容錯機制理解&lt;/a>
 &lt;a class="anchor" href="#%e5%af%a6%e7%94%a8%e6%8b%9c%e5%8d%a0%e5%ba%ad%e5%ae%b9%e9%8c%af%e6%a9%9f%e5%88%b6%e7%90%86%e8%a7%a3">#&lt;/a>
&lt;/h3>
&lt;blockquote>
&lt;p>拜占庭將軍問題是一個協議問題，拜占庭帝國軍隊的將軍們必須全體一致的決定是否攻擊某一支敵軍。問題是這些將軍在地理上是分隔開來的，並且將軍中存在叛徒。叛徒可以任意行動以達到以下目標：欺騙某些將軍采取進攻行動；促成一個不是所有將軍都同意的決定，如當將軍們不希望進攻時促成進攻行動；或者迷惑某些將軍，使他們無法做出決定。如果叛徒達到了這些目的之一，則任何攻擊行動的結果都是注定要失敗的，只有完全達成一致的努力才能獲得勝利。&lt;/p></description></item><item><title>Pentest Tools Survey</title><link>https://bernie6401.github.io/docs/survey-papers/android-+-security/tool/pentest-tools-survey/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/survey-papers/android-+-security/tool/pentest-tools-survey/</guid><description>&lt;h1 id="mobile-application-security-penetration-testing-based-on-owasp">
 Mobile Application Security Penetration Testing Based on OWASP
 &lt;a class="anchor" href="#mobile-application-security-penetration-testing-based-on-owasp">#&lt;/a>
&lt;/h1>
&lt;p>:::info
Alanda, A., Satria, D., Mooduto, H. A., &amp;amp; Kurniawan, B. (2020, May). Mobile application security penetration testing based on OWASP. In IOP Conference Series: Materials Science and Engineering (Vol. 846, No. 1, p. 012036). IOP Publishing.
:::&lt;/p>
&lt;h2 id="introduction">
 Introduction
 &lt;a class="anchor" href="#introduction">#&lt;/a>
&lt;/h2>
&lt;p>研究針對Android行動應用程式安全性進行滲透測試,主要基於OWASP(開放式Web應用程式安全專案)的10大行動應用程式弱點。測試結果顯示,有80%的測試應用程式存在OWASP Mobile Top 10所列出的弱點，研究提供了各種弱點的測試方法與結果分析,並給出相應的安全修復建議,以增強Android行動應用程式的安全性。&lt;/p>
&lt;h1 id="以-andorid-實驗案例探討-owasp-行動裝置應用程式之十大威脅">
 以 Andorid 實驗案例探討 OWASP 行動裝置應用程式之十大威脅
 &lt;a class="anchor" href="#%e4%bb%a5-andorid-%e5%af%a6%e9%a9%97%e6%a1%88%e4%be%8b%e6%8e%a2%e8%a8%8e-owasp-%e8%a1%8c%e5%8b%95%e8%a3%9d%e7%bd%ae%e6%87%89%e7%94%a8%e7%a8%8b%e5%bc%8f%e4%b9%8b%e5%8d%81%e5%a4%a7%e5%a8%81%e8%84%85">#&lt;/a>
&lt;/h1>
&lt;p>:::info
許振銘, &amp;amp; 許登凱. (2014). 以 Andorid 實驗案例探討 OWASP 行動裝置應用程式之十大威脅. Communications of the CCISA, 20(2), 77-96.
:::&lt;/p></description></item><item><title>The State of Ethereum Smart Contracts Security: Vulnerabilities, Countermeasures, and Tool Support - Notes</title><link>https://bernie6401.github.io/docs/survey-papers/digital-currency/the-state-of-ethereum-smart-contracts-security_-vulnerabilities-countermeasures-and-tool-support---notes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/survey-papers/digital-currency/the-state-of-ethereum-smart-contracts-security_-vulnerabilities-countermeasures-and-tool-support---notes/</guid><description>&lt;h1 id="the-state-of-ethereum-smart-contracts-security-vulnerabilities-countermeasures-and-tool-support---notes">
 The State of Ethereum Smart Contracts Security: Vulnerabilities, Countermeasures, and Tool Support - Notes
 &lt;a class="anchor" href="#the-state-of-ethereum-smart-contracts-security-vulnerabilities-countermeasures-and-tool-support---notes">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-meeting-paper-ntu-seminar">
 tags: &lt;code>Meeting Paper&lt;/code> &lt;code>NTU&lt;/code> &lt;code>Seminar&lt;/code>
 &lt;a class="anchor" href="#tags-meeting-paper-ntu-seminar">#&lt;/a>
&lt;/h6>
&lt;p>:::info
Zhou, H., Milani Fard, A., &amp;amp; Makanju, A. (2022). The state of ethereum smart contracts security: Vulnerabilities, countermeasures, and tool support. Journal of Cybersecurity and Privacy, 2(2), 358-378.
:::&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler &lt;a href="https://rich01.com/what-is-ether-ethereum/">以太幣(Ether) VS 以太坊(Ethereum)&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>以太坊是一個區塊鏈平台，而以太幣是裡面所使用的貨幣，智能合約的運算費用、區塊鏈上的交易手續費、礦工挖礦的獎勵等，都會用以太幣支付。&lt;/p>
&lt;p>以太坊目的是打造一個「去中心化的世界電腦」，執行的方式是透過區塊鏈技術，實現去中心化智能合約平台，以太坊和比特幣一樣具有可挖礦的公鏈系統，但多了智能合約、Dapp的技術。
:::
:::spoiler &lt;a href="https://rich01.com/what-is-smart-contract/">What is Smart Contract?&lt;/a>
智能合約是一種將雙方的協議條款，並用代碼形式在區塊鏈上運行，儲存在一個公共資料庫中，不能被更改。&lt;/p>
&lt;p>智能合約中發生的交易是由區塊鏈處理的，這意味著它們可以在沒有第三者的情況下自動執行，只有當協議中的條件得到滿足時，交易才會發生，是完全去中心化的交易。&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;h2 id="智能合約-vs-傳統合約">
 智能合約 VS 傳統合約
 &lt;a class="anchor" href="#%e6%99%ba%e8%83%bd%e5%90%88%e7%b4%84-vs-%e5%82%b3%e7%b5%b1%e5%90%88%e7%b4%84">#&lt;/a>
&lt;/h2>
&lt;p>&lt;img src="https://rich01.com/wp-content/uploads/20210917180100_80.jpg" alt="" />&lt;/p></description></item><item><title>Uncovering Intent based Leak of Sensitive Data in Android Framework</title><link>https://bernie6401.github.io/docs/survey-papers/android-+-security/uncovering-intent-based-leak-of-sensitive-data-in-android-framework/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/survey-papers/android-+-security/uncovering-intent-based-leak-of-sensitive-data-in-android-framework/</guid><description>&lt;h1 id="uncovering-intent-based-leak-of-sensitive-data-in-android-framework">
 Uncovering Intent based Leak of Sensitive Data in Android Framework
 &lt;a class="anchor" href="#uncovering-intent-based-leak-of-sensitive-data-in-android-framework">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-meeting-paper-ntu">
 tags: &lt;code>Meeting Paper&lt;/code> &lt;code>NTU&lt;/code>
 &lt;a class="anchor" href="#tags-meeting-paper-ntu">#&lt;/a>
&lt;/h6>
&lt;p>:::info
Zhou, H., Luo, X., Wang, H., &amp;amp; Cai, H. (2022, November). Uncovering Intent based Leak of Sensitive Data in Android Framework. In Proceedings of the 2022 ACM SIGSAC Conference on Computer and Communications Security (pp. 3239-3252).
:::&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler &lt;a href="https://ironglion.com/archives/334">[Android] Activity基本介紹&lt;/a>&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>
&lt;p>什麼是Activity?
Activity是App中，提供畫面的一個元件，
例如：使用Google地圖App時，顯示地圖的那個畫面。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>只有Activity可以顯示畫面嗎？
不是，除了Activity以外還有其他元件可以顯示畫面，
例如：Dialog，但每一個App至少要有一個Activity，但這有個例外，如果這個App不提供介面的話也是可以不用有Activity的。&lt;/p>
&lt;/li>
&lt;/ul>&lt;/blockquote>
&lt;hr>
&lt;blockquote>
&lt;p>Activity其他注意事項&lt;/p>
&lt;ul>
&lt;li>兩個Activity傳遞資訊是透過Intent
&lt;pre tabindex="0">&lt;code class="language-kotlin!" data-lang="kotlin!">Intent intent = new Intent(this, TwoActivity.class);
startActivity(intent);
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>Intent 能傳遞的資訊大小要小於512k&lt;/li>
&lt;li>每一個Activity都要在AndroidManifest中聲明
&lt;pre tabindex="0">&lt;code class="language-kotlin!" data-lang="kotlin!">&amp;lt;manifest ... &amp;gt;
 &amp;lt;application ... &amp;gt;
 &amp;lt;activity android:name=&amp;#34;.MainActivity&amp;#34; /&amp;gt;
 ...
 &amp;lt;/application ... &amp;gt;
 ...
&amp;lt;/manifest &amp;gt;
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ul>&lt;/blockquote>
&lt;p>:::&lt;/p></description></item><item><title>Understanding Real-world Threats to Deep Learning Models in Android Apps</title><link>https://bernie6401.github.io/docs/survey-papers/android-+-security/understanding-real-world-threats-to-deep-learning-models-in-android-apps/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/survey-papers/android-+-security/understanding-real-world-threats-to-deep-learning-models-in-android-apps/</guid><description>&lt;h1 id="understanding-real-world-threats-to-deep-learning-models-in-android-apps">
 Understanding Real-world Threats to Deep Learning Models in Android Apps
 &lt;a class="anchor" href="#understanding-real-world-threats-to-deep-learning-models-in-android-apps">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-meeting-paper-ntu">
 tags: &lt;code>Meeting Paper&lt;/code> &lt;code>NTU&lt;/code>
 &lt;a class="anchor" href="#tags-meeting-paper-ntu">#&lt;/a>
&lt;/h6>
&lt;p>:::info
Deng, Z., Chen, K., Meng, G., Zhang, X., Xu, K., &amp;amp; Cheng, Y. (2022, November). Understanding real-world threats to deep learning models in android apps. In Proceedings of the 2022 ACM SIGSAC Conference on Computer and Communications Security (pp. 785-799).
:::&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler &lt;a href="https://medium.com/trustableai/%E9%87%9D%E5%B0%8D%E6%A9%9F%E5%99%A8%E5%AD%B8%E7%BF%92%E7%9A%84%E6%83%A1%E6%84%8F%E8%B3%87%E6%96%99%E6%94%BB%E6%93%8A-%E4%B8%80-e94987742767">What is Adversarial Example? - 運用對抗例攻擊深度學習模型&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>所謂對抗例，是一種刻意製造的、讓機器學習模型判斷錯誤的輸入資料。最早是 Szegedy et al（2013）發現對於用 ImageNet、AlexNet 等資料集訓練出來的影像辨識模型，常常只需要輸入端的微小的變動，就可以讓輸出結果有大幅度的改變。例如取一張卡車的照片，可以被模型正確辨識，但只要改變影像中的少數像素，就可以讓模型辨識錯誤，而且前後對影像的改變非常少，對肉眼而言根本分不出差異。
:::&lt;/p></description></item><item><title>VAPTAi: A Threat Model for Vulnerability Assessment and Pentesting of Android and iOS Mobile Banking Apps</title><link>https://bernie6401.github.io/docs/survey-papers/android-+-security/vaptai_-a-threat-model-for-vulnerability-assessment-and-pentesting-of-android-and-ios-mobile-banking-apps/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/survey-papers/android-+-security/vaptai_-a-threat-model-for-vulnerability-assessment-and-pentesting-of-android-and-ios-mobile-banking-apps/</guid><description>&lt;h1 id="vaptai-a-threat-model-for-vulnerability-assessment-and-penetration-testing-of-android-and-ios-mobile-banking-apps">
 VAPTAi: A Threat Model for Vulnerability Assessment and Penetration Testing of Android and iOS Mobile Banking Apps
 &lt;a class="anchor" href="#vaptai-a-threat-model-for-vulnerability-assessment-and-penetration-testing-of-android-and-ios-mobile-banking-apps">#&lt;/a>
&lt;/h1>
&lt;p>:::info
Bojjagani, S., &amp;amp; Sastry, V. N. (2017, October). VAPTAi: a threat model for vulnerability assessment and penetration testing of android and iOS mobile banking apps. In 2017 IEEE 3rd international conference on collaboration and internet computing (CIC) (pp. 77-86). IEEE.
:::&lt;/p>
&lt;h2 id="introduction">
 Introduction
 &lt;a class="anchor" href="#introduction">#&lt;/a>
&lt;/h2>
&lt;p>隨著移動設備的使用急速增加，Mobile Banking Application(MBA)也備受黑客和惡意使用者的目標。這些MBA存儲、傳輸和存取敏感和機密資訊，因此必須優先確保其安全性。本文提出了一個威脅模型，以系統性地測試和分析行動銀行應用程式，檢測和緩解應用程式級和通信級別的漏洞。作者對5個Android和3個iOS的MBA進行了安全測試，發現了許多未知漏洞，並展示了MBA易受中間人攻擊的情況。部分MBA使用簡單的HTTP協議傳輸用戶數據，未考慮安全要求。多數情況下，MBA無條件接受偽造或自簽名的證書，導致SSL/TLS中間人攻擊。&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;h2 id="proposed-method">
 Proposed Method
 &lt;a class="anchor" href="#proposed-method">#&lt;/a>
&lt;/h2>
&lt;p>&lt;img src="https://hackmd.io/_uploads/Syab2Ut40.png" alt="圖片" />&lt;/p></description></item><item><title>WIGHT: Wired Ghost Touch Attack on Capacitive Touchscreens</title><link>https://bernie6401.github.io/docs/survey-papers/android-+-security/wight_-wired-ghost-touch-attack-on-capacitive-touchscreens/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/survey-papers/android-+-security/wight_-wired-ghost-touch-attack-on-capacitive-touchscreens/</guid><description>&lt;h1 id="wight-wired-ghost-touch-attack-on-capacitive-touchscreens">
 WIGHT: Wired Ghost Touch Attack on Capacitive Touchscreens
 &lt;a class="anchor" href="#wight-wired-ghost-touch-attack-on-capacitive-touchscreens">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-meeting-paper-ntu">
 tags: &lt;code>Meeting Paper&lt;/code> &lt;code>NTU&lt;/code>
 &lt;a class="anchor" href="#tags-meeting-paper-ntu">#&lt;/a>
&lt;/h6>
&lt;p>:::info
Jiang, Y., Ji, X., Wang, K., Yan, C., Mitev, R., Sadeghi, A. R., &amp;amp; Xu, W. (2022, May). Wight: Wired ghost touch attack on capacitive touchscreens. In 2022 IEEE Symposium on Security and Privacy (SP) (pp. 984-1001). IEEE.
:::&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://www.google.com/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=&amp;amp;cad=rja&amp;amp;uact=8&amp;amp;ved=2ahUKEwj40bHli7P-AhUNQ94KHUdYAAMQFnoECAsQAQ&amp;amp;url=https%3A%2F%2Fzh-tw.ios-data-recovery.com%2Fandroid-ghost-touch-fix%2F&amp;amp;usg=AOvVaw2qVDJ2tKU-pVUgcDFAodNY">What is ghost touch?&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://youtu.be/YlN7rFg7cps">What is common-mode signal and differential-mode signal - 高中電子學_運算放大器_2. 運算放大器之特性與參數_2.3 運算放大器的動態特性參數 1_支裕文&lt;/a>
&lt;img src="https://i.imgur.com/AlHU0Uh.png" alt="" />&lt;/p></description></item><item><title>有關Pentest但貢獻很爛的三篇論文</title><link>https://bernie6401.github.io/docs/survey-papers/android-+-security/tool/%E6%9C%89%E9%97%9Cpentest%E4%BD%86%E8%B2%A2%E7%8D%BB%E5%BE%88%E7%88%9B%E7%9A%84%E4%B8%89%E7%AF%87%E8%AB%96%E6%96%87/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/survey-papers/android-+-security/tool/%E6%9C%89%E9%97%9Cpentest%E4%BD%86%E8%B2%A2%E7%8D%BB%E5%BE%88%E7%88%9B%E7%9A%84%E4%B8%89%E7%AF%87%E8%AB%96%E6%96%87/</guid><description>&lt;h1 id="risk-analysis-and-android-application-penetration-testing-based-on-owasp-2016">
 Risk analysis and Android application penetration testing based on OWASP 2016
 &lt;a class="anchor" href="#risk-analysis-and-android-application-penetration-testing-based-on-owasp-2016">#&lt;/a>
&lt;/h1>
&lt;p>:::info
Borja, T., Benalcázar, M. E., Valdivieso Caraguay, Á. L., &amp;amp; Barona López, L. I. (2021). Risk analysis and Android application penetration testing based on OWASP 2016. In Information Technology and Systems: ICITS 2021, Volume 1 (pp. 461-478). Springer International Publishing.
:::&lt;/p>
&lt;h2 id="introduction">
 Introduction
 &lt;a class="anchor" href="#introduction">#&lt;/a>
&lt;/h2>
&lt;p>嚴格來說，這一篇不是完全沒用，但真的貢獻超級低，他基本上就是照著之前寫過的&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>流程和動機甚至實驗方法做而已，最後再加上自己的一些見解(也就是所謂的風險評估矩陣和針對每一個Risk寫出自己的建議或是mitigation)，就這樣沒了，詳細對比如下
![圖片](&lt;a href="https://hackmd.io/_uploads/r1eR14KBA.png">https://hackmd.io/_uploads/r1eR14KBA.png&lt;/a> =400x)
Reference 8就是&lt;sup id="fnref1:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/p>
&lt;h2 id="proposed-method">
 Proposed Method
 &lt;a class="anchor" href="#proposed-method">#&lt;/a>
&lt;/h2>
&lt;p>作者自行創立一個Score Scale如下
&lt;img src="https://hackmd.io/_uploads/HJf8g4KrR.png" alt="圖片1" />
總共有四個向度，前三個向度相加取平均後*最後一個向度就是該Risk的分數，
&lt;img src="https://hackmd.io/_uploads/SJsclVKr0.png" alt="圖片2" />
實驗後的級距分野如下
![圖片](&lt;a href="https://hackmd.io/_uploads/HJlAg4tBR.png">https://hackmd.io/_uploads/HJlAg4tBR.png&lt;/a> =300x)&lt;/p></description></item></channel></rss>