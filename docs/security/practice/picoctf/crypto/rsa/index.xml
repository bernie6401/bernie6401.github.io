<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>SBK Site</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/crypto/rsa/</link><description>Recent content on SBK Site</description><generator>Hugo</generator><language>en-us</language><atom:link href="https://bernie6401.github.io/docs/security/practice/picoctf/crypto/rsa/index.xml" rel="self" type="application/rss+xml"/><item><title>PicoCTF - corrupt-key-1</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/crypto/rsa/picoctf---corrupt-key-1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/crypto/rsa/picoctf---corrupt-key-1/</guid><description>&lt;h1 id="picoctf---corrupt-key-1">
 PicoCTF - corrupt-key-1
 &lt;a class="anchor" href="#picoctf---corrupt-key-1">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-crypto">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Crypto&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-crypto">#&lt;/a>
&lt;/h6>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>private.key
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>-----BEGIN RSA PRIVATE KEY-----
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>MIICXAIBAAKBgQC4yxzKmbasQYdsGIRXMqXL/Idd80bukALOYIUItfz2tgpax3Iq
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>LWTvdOFEOjOOcKc+Y6MD86ya3xmFlWmfbp8wwAnSGcfZjE7IQgNhCDQCnHlWfvwI
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>9mtLw/Vkv7VxVGoGt+SPs1u5zOqaLNRDSfgpJCB436ZNUlknv9VdCZwCTwIDAQAB
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>AoGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACQQDnAFaP9Qa9WJKv
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>klkhJeBsvpvUXf6v6TGjM8E0YwI9TwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>AAAAAAAAAkEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJBAAAAAAAAAAAAAAAAAAAAAAAAAAAA
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACQAAA
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>AAAAAAAAAAAAAAAAAAACQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&lt;span style="color:#f92672">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-----END RSA PRIVATE KEY-----
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>msg.enc
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>71dc d160 9ac4 a05c d14f 04a9 b43c 2aa3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>83d2 a8d6 749b b978 75d5 437a a944 45f2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">4073&lt;/span> f605 ef1c &lt;span style="color:#ae81ff">5657&lt;/span> 8d0e 7a2d f3be b5c1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">7741&lt;/span> &lt;span style="color:#ae81ff">8476&lt;/span> 0b3d 44fc b97e &lt;span style="color:#ae81ff">6631&lt;/span> b6fe &lt;span style="color:#ae81ff">2487&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">6258&lt;/span> d445 a7d7 4c7c e3cc 00ec f925 f442
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>c91d 10c9 cefb 9ca6 9c88 da3c 9d26 6c96
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">9033&lt;/span> 63d5 6a13 7b64 1fc3 &lt;span style="color:#ae81ff">8709&lt;/span> &lt;span style="color:#ae81ff">2416&lt;/span> f7fb
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>eb4c 4c94 cc8e 157f cc0e d122 159c 27d5
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>可見private.key的內文被corrupted了，必須要修復才能夠解密ciphertext，但看來看去也找不到相關的write up，或是修復的方法，從&lt;a href="https://connor-mccartney.github.io/cryptography/rsa/corrupt-key-1-picoMini">連結&lt;/a>這篇write up也看不懂如何修復，雖然他有附上code，但是很多error也無法debug(主要是看不懂)，總而言之我們的目標就是找出$p$為何&lt;/p></description></item><item><title>PicoCTF - Dachshund Attacks</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/crypto/rsa/picoctf---dachshund-attacks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/crypto/rsa/picoctf---dachshund-attacks/</guid><description>&lt;h1 id="picoctf---dachshund-attacks">
 PicoCTF - Dachshund Attacks
 &lt;a class="anchor" href="#picoctf---dachshund-attacks">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-crypto">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Crypto&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-crypto">#&lt;/a>
&lt;/h6>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>How about if the private key is too small? Refer &lt;a href="https://ctf-wiki.org/crypto/asymmetric/rsa/d_attacks/rsa_extending_wiener/">Extending Wiener’s Attack &lt;/a>&lt;/p>
&lt;h2 id="exploit---small-private-key">
 Exploit - Small Private Key
 &lt;a class="anchor" href="#exploit---small-private-key">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>git clone &lt;a href="https://github.com/pablocelayes/rsa-wiener-attack">https://github.com/pablocelayes/rsa-wiener-attack&lt;/a>
Put the exploit file in this repo.&lt;/li>
&lt;li>Whole Exploit
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> pwn &lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#f92672">*&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> Crypto.Util.number &lt;span style="color:#f92672">import&lt;/span> long_to_bytes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> ContinuedFractions&lt;span style="color:#f92672">,&lt;/span> Arithmetic
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>context&lt;span style="color:#f92672">.&lt;/span>arch &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;amd64&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>r &lt;span style="color:#f92672">=&lt;/span> remote(&lt;span style="color:#e6db74">&amp;#34;mercury.picoctf.net&amp;#34;&lt;/span>, &lt;span style="color:#ae81ff">37455&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">wiener_hack&lt;/span>(e, n):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># firstly git clone https://github.com/pablocelayes/rsa-wiener-attack.git !&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> frac &lt;span style="color:#f92672">=&lt;/span> ContinuedFractions&lt;span style="color:#f92672">.&lt;/span>rational_to_contfrac(e, n)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> convergents &lt;span style="color:#f92672">=&lt;/span> ContinuedFractions&lt;span style="color:#f92672">.&lt;/span>convergents_from_contfrac(frac)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (k, d) &lt;span style="color:#f92672">in&lt;/span> convergents:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> k &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">and&lt;/span> (e &lt;span style="color:#f92672">*&lt;/span> d &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>) &lt;span style="color:#f92672">%&lt;/span> k &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> phi &lt;span style="color:#f92672">=&lt;/span> (e &lt;span style="color:#f92672">*&lt;/span> d &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>) &lt;span style="color:#f92672">//&lt;/span> k
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> s &lt;span style="color:#f92672">=&lt;/span> n &lt;span style="color:#f92672">-&lt;/span> phi &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> discr &lt;span style="color:#f92672">=&lt;/span> s &lt;span style="color:#f92672">*&lt;/span> s &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span> &lt;span style="color:#f92672">*&lt;/span> n
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (discr &lt;span style="color:#f92672">&amp;gt;=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> t &lt;span style="color:#f92672">=&lt;/span> Arithmetic&lt;span style="color:#f92672">.&lt;/span>is_perfect_square(discr)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> t &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">and&lt;/span> (s &lt;span style="color:#f92672">+&lt;/span> t) &lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;Hacked!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> d
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">False&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>r&lt;span style="color:#f92672">.&lt;/span>recvline()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>e &lt;span style="color:#f92672">=&lt;/span> int(str(r&lt;span style="color:#f92672">.&lt;/span>recvline()&lt;span style="color:#f92672">.&lt;/span>strip()&lt;span style="color:#f92672">.&lt;/span>decode())&lt;span style="color:#f92672">.&lt;/span>split(&lt;span style="color:#e6db74">&amp;#34; &amp;#34;&lt;/span>)[&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>n &lt;span style="color:#f92672">=&lt;/span> int(str(r&lt;span style="color:#f92672">.&lt;/span>recvline()&lt;span style="color:#f92672">.&lt;/span>strip()&lt;span style="color:#f92672">.&lt;/span>decode())&lt;span style="color:#f92672">.&lt;/span>split(&lt;span style="color:#e6db74">&amp;#34; &amp;#34;&lt;/span>)[&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>c &lt;span style="color:#f92672">=&lt;/span> int(str(r&lt;span style="color:#f92672">.&lt;/span>recvline()&lt;span style="color:#f92672">.&lt;/span>strip()&lt;span style="color:#f92672">.&lt;/span>decode())&lt;span style="color:#f92672">.&lt;/span>split(&lt;span style="color:#e6db74">&amp;#34; &amp;#34;&lt;/span>)[&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>d &lt;span style="color:#f92672">=&lt;/span> wiener_hack(e, n)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(long_to_bytes(pow(c, d, n)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>r&lt;span style="color:#f92672">.&lt;/span>interactive()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;h2 id="reference">
 Reference
 &lt;a class="anchor" href="#reference">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/76228394">CTF_RSA解密学习指南(三) - 低解密指数攻击&lt;/a>&lt;/p></description></item><item><title>PicoCTF - It's Not My Fault 1</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/crypto/rsa/picoctf---its-not-my-fault-1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/crypto/rsa/picoctf---its-not-my-fault-1/</guid><description>&lt;h1 id="picoctf---its-not-my-fault-1">
 PicoCTF - It&amp;rsquo;s Not My Fault 1
 &lt;a class="anchor" href="#picoctf---its-not-my-fault-1">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-crypto">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Crypto&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-crypto">#&lt;/a>
&lt;/h6>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler Source code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-python=" data-lang="python=">#!/usr/bin/python3 -u
import random
import string
import hashlib
import time

from Crypto.Util.number import inverse, getPrime, bytes_to_long, GCD
from sympy.ntheory.modular import solve_congruence

FLAG = open(&amp;#39;flag.txt&amp;#39;, &amp;#39;r&amp;#39;).read()

def CRT(a, m, b, n):
	val, mod = solve_congruence((a, m), (b, n))
	return val

def gen_key():
	while True:
		p = getPrime(512)
		q = getPrime(512)
		if GCD(p-1, q-1) == 2:
			return p, q

def get_clue(p, q, BITS):
	while True:
		d_p = random.randint(1, 1 &amp;lt;&amp;lt; BITS)
		d_q = random.randint(1, q - 1)
		if d_p % 2 == d_q % 2:
			d = CRT(d_p, p - 1, d_q, q - 1)
			e = inverse(d, (p - 1) * (q - 1))
			print(&amp;#34;Clue : &amp;#34;, e)
			return

def get_flag(p, q):
	start = time.time()
	ans = int(input())
	if (time.time() - start) &amp;gt; (15 * 60):
		print(&amp;#34;Too long!&amp;#34;)
		exit()
	else:
		if ans == p + q:
			print(FLAG)
		else:
			print(&amp;#34;oops...&amp;#34;)


#PoW

vals1 = &amp;#34;&amp;#34;.join([random.choice(string.digits) for _ in range(5)])
vals2 = &amp;#34;&amp;#34;.join([random.choice(string.hexdigits.lower()) for _ in range(6)])
user_input = input(&amp;#34;Enter a string that starts with \&amp;#34;{}\&amp;#34; (no quotes) which creates an md5 hash that ends in these six hex digits: {}\n&amp;#34;.format(vals1, vals2))
user_hash = hashlib.md5(user_input.encode()).hexdigest()

if user_input[:5] == vals1 and user_hash[-6:] == vals2:
	p, q = gen_key()
	n = p * q
	print(&amp;#34;Public Modulus : &amp;#34;, n)
	get_clue(p, q, 20)
	get_flag(p, q)
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>PicoCTF - john_pollard</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/crypto/rsa/picoctf---john_pollard/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/crypto/rsa/picoctf---john_pollard/</guid><description>&lt;h1 id="picoctf---john_pollard">
 PicoCTF - john_pollard
 &lt;a class="anchor" href="#picoctf---john_pollard">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-crypto">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Crypto&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-crypto">#&lt;/a>
&lt;/h6>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://www.mkssoftware.com/docs/man1/openssl_rsa.1.asp">openssl - rsa&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code>-----BEGIN CERTIFICATE-----
MIIB6zCB1AICMDkwDQYJKoZIhvcNAQECBQAwEjEQMA4GA1UEAxMHUGljb0NURjAe
Fw0xOTA3MDgwNzIxMThaFw0xOTA2MjYxNzM0MzhaMGcxEDAOBgNVBAsTB1BpY29D
VEYxEDAOBgNVBAoTB1BpY29DVEYxEDAOBgNVBAcTB1BpY29DVEYxEDAOBgNVBAgT
B1BpY29DVEYxCzAJBgNVBAYTAlVTMRAwDgYDVQQDEwdQaWNvQ1RGMCIwDQYJKoZI
hvcNAQEBBQADEQAwDgIHEaTUUhKxfwIDAQABMA0GCSqGSIb3DQEBAgUAA4IBAQAH
al1hMsGeBb3rd/Oq+7uDguueopOvDC864hrpdGubgtjv/hrIsph7FtxM2B4rkkyA
eIV708y31HIplCLruxFdspqvfGvLsCynkYfsY70i6I/dOA6l4Qq/NdmkPDx7edqO
T/zK4jhnRafebqJucXFH8Ak+G6ASNRWhKfFZJTWj5CoyTMIutLU9lDiTXng3rDU1
BhXg04ei1jvAf0UrtpeOA6jUyeCLaKDFRbrOm35xI79r28yO8ng1UAzTRclvkORt
b8LMxw7e+vdIntBGqf7T25PLn/MycGPPvNXyIsTzvvY/MXXJHnAqpI5DlqwzbRHz
q16/S1WLvzg4PsElmv1f
-----END CERTIFICATE-----
&lt;/code>&lt;/pre>&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>Hint 1: The flag is in the format picoCTF{p,q}&lt;/li>
&lt;li>Hint 2: Try swapping p and q if it does not work
這一題就只是把certificate解出來，發現n超小，所以就直接&lt;/li>
&lt;/ul>
&lt;h2 id="exploit---openssl">
 Exploit - openssl
 &lt;a class="anchor" href="#exploit---openssl">#&lt;/a>
&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ openssl openssl x509 -in cert -pubkey -noout &amp;gt; public.pem
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-----BEGIN PUBLIC KEY-----
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>MCIwDQYJKoZIhvcNAQEBBQADEQAwDgIHEaTUUhKxfwIDAQAB
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-----END PUBLIC KEY-----
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ openssl rsa -pubin -in public.pem -text
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>RSA Public-Key: &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">53&lt;/span> bit&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Modulus: &lt;span style="color:#ae81ff">4966306421059967&lt;/span> &lt;span style="color:#f92672">(&lt;/span>0x11a4d45212b17f&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Exponent: &lt;span style="color:#ae81ff">65537&lt;/span> &lt;span style="color:#f92672">(&lt;/span>0x10001&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>writing RSA key
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-----BEGIN PUBLIC KEY-----
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>MCIwDQYJKoZIhvcNAQEBBQADEQAwDgIHEaTUUhKxfwIDAQAB
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-----END PUBLIC KEY-----
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Use &lt;a href="https://www.alpertron.com/ECM.HTM">online tool&lt;/a> to factor
p = &lt;code>67867967&lt;/code>
q = &lt;code>73176001&lt;/code>&lt;/p></description></item><item><title>PicoCTF - Mind your Ps and Qs</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/crypto/rsa/picoctf---mind-your-ps-and-qs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/crypto/rsa/picoctf---mind-your-ps-and-qs/</guid><description>&lt;h1 id="picoctf---mind-your-ps-and-qs">
 PicoCTF - Mind your Ps and Qs
 &lt;a class="anchor" href="#picoctf---mind-your-ps-and-qs">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-crypto">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Crypto&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-crypto">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="https://play.picoctf.org/practice/challenge/162?category=2&amp;amp;page=1">Mind your Ps and Qs&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://ithelp.ithome.com.tw/articles/10250721">RSA (觀念篇) &lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-txt" data-lang="txt">&lt;span style="display:flex;">&lt;span>Decrypt my super sick RSA:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>c: 421345306292040663864066688931456845278496274597031632020995583473619804626233684
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>n: 631371953793368771804570727896887140714495090919073481680274581226742748040342637
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>e: 65537
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="exploit---find-p--q-by-online-tool">
 Exploit - Find P &amp;amp; Q By &lt;a href="https://www.alpertron.com/ECM.HTM">Online Tool&lt;/a>
 &lt;a class="anchor" href="#exploit---find-p--q-by-online-tool">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>Find P &amp;amp; Q
Use online tool to do prime factorize on &lt;code>n&lt;/code>
p $\to$ 1461849912200000206276283741896701133693
q $\to$ 431899300006243611356963607089521499045809&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Write exploit&lt;/p></description></item><item><title>PicoCTF - Mini RSA</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/crypto/rsa/picoctf---mini-rsa/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/crypto/rsa/picoctf---mini-rsa/</guid><description>&lt;h1 id="picoctf---mini-rsa">
 PicoCTF - Mini RSA
 &lt;a class="anchor" href="#picoctf---mini-rsa">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-crypto">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Crypto&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-crypto">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="https://play.picoctf.org/practice/challenge/188?category=2&amp;amp;page=1">Mini RSA&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>N: &lt;span style="color:#ae81ff">1615765684321463054078226051959887884233678317734892901740763321135213636796075462401950274602405095138589898087428337758445013281488966866073355710771864671726991918706558071231266976427184673800225254531695928541272546385146495736420261815693810544589811104967829354461491178200126099661909654163542661541699404839644035177445092988952614918424317082380174383819025585076206641993479326576180793544321194357018916215113009742654408597083724508169216182008449693917227497813165444372201517541788989925461711067825681947947471001390843774746442699739386923285801022685451221261010798837646928092277556198145662924691803032880040492762442561497760689933601781401617086600593482127465655390841361154025890679757514060456103104199255917164678161972735858939464790960448345988941481499050248673128656508055285037090026439683847266536283160142071643015434813473463469733112182328678706702116054036618277506997666534567846763938692335069955755244438415377933440029498378955355877502743215305768814857864433151287&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>e: &lt;span style="color:#ae81ff">3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ciphertext &lt;span style="color:#f92672">(&lt;/span>c&lt;span style="color:#f92672">)&lt;/span>: &lt;span style="color:#ae81ff">1220012318588871886132524757898884422174534558055593713309088304910273991073554732659977133980685370899257850121970812405700793710546674062154237544840177616746805668666317481140872605653768484867292138139949076102907399831998827567645230986345455915692863094364797526497302082734955903755050638155202890599808147130204332030239454609548193370732857240300019596815816006860639254992255194738107991811397196500685989396810773222940007523267032630601449381770324467476670441511297695830038371195786166055669921467988355155696963689199852044947912413082022187178952733134865103084455914904057821890898745653261258346107276390058792338949223415878232277034434046142510780902482500716765933896331360282637705554071922268580430157241598567522324772752885039646885713317810775113741411461898837845999905524246804112266440620557624165618470709586812253893125417659761396612984740891016230905299327084673080946823376058367658665796414168107502482827882764000030048859751949099453053128663379477059252309685864790106&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="exploit---small-e-attack">
 Exploit - Small &lt;code>e&lt;/code> attack
 &lt;a class="anchor" href="#exploit---small-e-attack">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-python=" data-lang="python=">import gmpy2
from Crypto.Util.number import long_to_bytes


N = 1615765684321463054078226051959887884233678317734892901740763321135213636796075462401950274602405095138589898087428337758445013281488966866073355710771864671726991918706558071231266976427184673800225254531695928541272546385146495736420261815693810544589811104967829354461491178200126099661909654163542661541699404839644035177445092988952614918424317082380174383819025585076206641993479326576180793544321194357018916215113009742654408597083724508169216182008449693917227497813165444372201517541788989925461711067825681947947471001390843774746442699739386923285801022685451221261010798837646928092277556198145662924691803032880040492762442561497760689933601781401617086600593482127465655390841361154025890679757514060456103104199255917164678161972735858939464790960448345988941481499050248673128656508055285037090026439683847266536283160142071643015434813473463469733112182328678706702116054036618277506997666534567846763938692335069955755244438415377933440029498378955355877502743215305768814857864433151287
e = 3
c = 1220012318588871886132524757898884422174534558055593713309088304910273991073554732659977133980685370899257850121970812405700793710546674062154237544840177616746805668666317481140872605653768484867292138139949076102907399831998827567645230986345455915692863094364797526497302082734955903755050638155202890599808147130204332030239454609548193370732857240300019596815816006860639254992255194738107991811397196500685989396810773222940007523267032630601449381770324467476670441511297695830038371195786166055669921467988355155696963689199852044947912413082022187178952733134865103084455914904057821890898745653261258346107276390058792338949223415878232277034434046142510780902482500716765933896331360282637705554071922268580430157241598567522324772752885039646885713317810775113741411461898837845999905524246804112266440620557624165618470709586812253893125417659761396612984740891016230905299327084673080946823376058367658665796414168107502482827882764000030048859751949099453053128663379477059252309685864790106

k = 1
while True:
 if gmpy2.iroot(c + N * k, 3)[1]==1:
 res=gmpy2.iroot(c + N * k, 3)[0] 
 print(k, res)
 print(long_to_bytes(res))
 break
 k += 1
&lt;/code>&lt;/pre>&lt;h2 id="reference">
 Reference
 &lt;a class="anchor" href="#reference">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/76228394">CTF_RSA解密学习指南(三) - e=3 小明文攻击&lt;/a>&lt;/p></description></item><item><title>PicoCTF - No Padding, No Problem</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/crypto/rsa/picoctf---no-padding-no-problem/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/crypto/rsa/picoctf---no-padding-no-problem/</guid><description>&lt;h1 id="picoctf---no-padding-no-problem">
 PicoCTF - No Padding, No Problem
 &lt;a class="anchor" href="#picoctf---no-padding-no-problem">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-crypto">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Crypto&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-crypto">#&lt;/a>
&lt;/h6>
&lt;h2 id="description">
 Description
 &lt;a class="anchor" href="#description">#&lt;/a>
&lt;/h2>
&lt;p>Oracles can be your best friend, they will decrypt anything, except the flag&amp;rsquo;s ciphertext. How will you break it? Connect with nc mercury.picoctf.net 10333.&lt;/p>
&lt;h2 id="hint">
 Hint
 &lt;a class="anchor" href="#hint">#&lt;/a>
&lt;/h2>
&lt;p>What can you do with a different pair of ciphertext and plaintext? What if it is not so different after all&amp;hellip;&lt;/p>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>We can try to decrypt ciphertext directly.&lt;/p></description></item><item><title>PicoCTF - NSA Backdoor</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/crypto/rsa/picoctf---nsa-backdoor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/crypto/rsa/picoctf---nsa-backdoor/</guid><description>&lt;h1 id="picoctf---nsa-backdoor">
 PicoCTF - NSA Backdoor
 &lt;a class="anchor" href="#picoctf---nsa-backdoor">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-crypto">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Crypto&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-crypto">#&lt;/a>
&lt;/h6>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://blog.csdn.net/ACdreamers/article/details/8579511">Baby Step Giant Step - BSGS&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>用来解决如下方程最小正整數解的
$A^x\equiv B(mod\ C)$，其中$0\le x\lt C$
如果$A\ge C, B\ge C$，那麼我們可以先取模，即$A% = C, B% = C$，所以在這裡我們只討論$0\le A, B\lt C$的情況。
普通的BSGS的步驟是這樣的：&lt;/p>
&lt;ol>
&lt;li>首先確定$x$的下限是$0$，上限是$C$，我們令$M=\lceil C\rceil$&lt;/li>
&lt;li>把$A^0~A^M\ mod\ C$的值存到一个Hash表裡面&lt;/li>
&lt;li>把$(A^M)^0~(A^M)^M\ mod\ C$的值一一枚舉出來，每枚舉一個就在Hash表裡面尋找是否有一個$val$值滿足$val \cdot (A^M)^i\ mod\ C=B$，如果有則找到答案，否則繼續&lt;/li>
&lt;li>最終答案就是$i\cdot M+val$的值對應的原來$A$的冪
上面是普通Baby Step Giant Step的步驟，比較簡單，只適用為素數的情況。如果為合數呢？&lt;/li>
&lt;/ol>&lt;/blockquote>
&lt;p>拓展的過程詳見全文&lt;/p>
&lt;hr>
&lt;p>&lt;a href="https://blog.csdn.net/oampamp1/article/details/104061969">離散對數問題 - pohlig-hellman算法講解&lt;/a>&lt;/p>
&lt;blockquote>
&lt;ol>
&lt;li>
&lt;p>需要注意的是，pohlig-hellman算法的覆雜度在一般情況下比BSGS高！
因此，使用pohlig-hellman的場合只能是較為特殊的情況，即:$p$是質數，且$p-1$包含的質因子較少&amp;amp;較小。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>和BSGS算法一樣，pohlig-hellman算法也是用於解決離散對數問題（也有很多文獻提到是解決橢圓曲線之類的）。即給定$a,b,p$,求 $a^x \equiv b(mod\ p)$。&lt;/p></description></item><item><title>PicoCTF - Scrambled: RSA</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/crypto/rsa/picoctf---scrambled_-rsa/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/crypto/rsa/picoctf---scrambled_-rsa/</guid><description>&lt;h1 id="picoctf---scrambled-rsa">
 PicoCTF - Scrambled: RSA
 &lt;a class="anchor" href="#picoctf---scrambled-rsa">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-crypto">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Crypto&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-crypto">#&lt;/a>
&lt;/h6>
&lt;h2 id="hint">
 Hint
 &lt;a class="anchor" href="#hint">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>Look at the ciphertext, anything fishy, maybe a little bit long?&lt;/li>
&lt;li>What happens if you encrypt the same input multiple times?&lt;/li>
&lt;li>Is RSA deterministic, why would outputs vary?&lt;/li>
&lt;/ul>
&lt;h2 id="recon---通靈">
 Recon - &lt;font color="FF0000">通靈&lt;/font>
 &lt;a class="anchor" href="#recon---%e9%80%9a%e9%9d%88">#&lt;/a>
&lt;/h2>
&lt;p>這一題也是頗有趣但要通靈，可以先亂Try&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ nc mercury.picoctf.net 61477
flag = ...
I will encrypt whatever you give me: b
Here you go: 26990049735578409030682378965549085676344091481060419655306695078226500400679435180914414853843456517959269938025436462371813167477339887511293320498195667717320879617653974074204687042294887795784122711621510485951142842770951325298677811102706200275406899117894241145575602912451443892687252208402011904237
I will encrypt whatever you give me: ba
Here you go: 2699004973557840903068237896554908567634409148106041965530669507822650040067943518091441485384345651795926993802543646237181316747733988751129332049819566771732087961765397407420468704229488779578412271162151048595114284277095132529867781110270620027540689911789424114557560291245144389268725220840201190423748281433709412944662646587136176334777506529508638551296181668932027523016538393747587852449462326357575277427356480410273494280971757044562513629423400967407332448126388859817313684399195291279961899276921240210270110225654310423792352532266414306766344869066386142998118001891330035563388790707576505068944
I will encrypt whatever you give me: bac
Here you go: 482814337094129446626465871361763347775065295086385512961816689320275230165383937475878524494623263575752774273564804102734942809717570445625136294234009674073324481263888598173136843991952912799618992769212402102701102256543104237923525322664143067663448690663861429981180018913300355633887907075765050689449619429085627210113794723864117161956939961066630142420889676674025917593454737310140819887001206562193281145515990410131903949359211712425034234736366286462137700473579439657314154736719868903719111785858132034797052503447042089004862886989401543635700329455353580959453911569277021402998961166474045310601826990049735578409030682378965549085676344091481060419655306695078226500400679435180914414853843456517959269938025436462371813167477339887511293320498195667717320879617653974074204687042294887795784122711621510485951142842770951325298677811102706200275406899117894241145575602912451443892687252208402011904237
...
&lt;/code>&lt;/pre>&lt;p>一開始加密的&lt;code>b&lt;/code>是&lt;code>269900...904237&lt;/code>，第二個加密的&lt;code>ba&lt;/code>是&lt;code>26990...5068944&lt;/code>，但如果仔細看其實第一個加密的密文其實也存在其中，他其實是&lt;code>269900...904237+482814...5068944&lt;/code>，可以加密第三個&lt;code>bac&lt;/code>試看看，也會發現是&lt;code>482814...5068944+961942...3106018+269900...904237&lt;/code>
所以我們可以再往這個方向測試一下，我們知道一開始的flag一定是&lt;code>picoCTF{&lt;/code>，我們加密&lt;code>p&lt;/code>會發現密文其實存在原始的flag密文當中，因此我們可以寫一個腳本，像上一題一樣暴力破解，如果加密的密文有存在原本的flag ciphertext中的話，就代表我們猜對了，反之就繼續找&lt;/p></description></item><item><title>PicoCTF - SRA</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/crypto/rsa/picoctf---sra/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/crypto/rsa/picoctf---sra/</guid><description>&lt;h1 id="picoctf---sra">
 PicoCTF - SRA
 &lt;a class="anchor" href="#picoctf---sra">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-crypto">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Crypto&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-crypto">#&lt;/a>
&lt;/h6>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler Source Code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-python=" data-lang="python=">from Crypto.Util.number import getPrime, inverse, bytes_to_long
from string import ascii_letters, digits
from random import choice

pride = &amp;#34;&amp;#34;.join(choice(ascii_letters + digits) for _ in range(16))
gluttony = getPrime(128)
greed = getPrime(128)
lust = gluttony * greed
sloth = 65537
envy = inverse(sloth, (gluttony - 1) * (greed - 1))

anger = pow(bytes_to_long(pride.encode()), sloth, lust)

print(f&amp;#34;{anger = }&amp;#34;)
print(f&amp;#34;{envy = }&amp;#34;)

print(&amp;#34;vainglory?&amp;#34;)
vainglory = input(&amp;#34;&amp;gt; &amp;#34;).strip()

if vainglory == pride:
 print(&amp;#34;Conquered!&amp;#34;)
 with open(&amp;#34;/challenge/flag.txt&amp;#34;) as f:
 print(f.read())
else:
 print(&amp;#34;Hubris!&amp;#34;)
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>PicoCTF - Very Smooth</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/crypto/rsa/picoctf---very-smooth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/crypto/rsa/picoctf---very-smooth/</guid><description>&lt;h1 id="picoctf---very-smooth">
 PicoCTF - Very Smooth
 &lt;a class="anchor" href="#picoctf---very-smooth">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-crypto">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Crypto&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-crypto">#&lt;/a>
&lt;/h6>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://ctf-wiki.org/crypto/asymmetric/rsa/rsa_module_attack/#p-1">$p-1$ Smooth&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler Source Code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-python=" data-lang="python=">#!/usr/bin/python

from binascii import hexlify
from gmpy2 import *
import math
import os
import sys

if sys.version_info &amp;lt; (3, 9):
 math.gcd = gcd
 math.lcm = lcm

_DEBUG = False

FLAG = open(&amp;#39;flag.txt&amp;#39;).read().strip()
FLAG = mpz(hexlify(FLAG.encode()), 16)
SEED = mpz(hexlify(os.urandom(32)).decode(), 16)
STATE = random_state(SEED)

def get_prime(state, bits):
 return next_prime(mpz_urandomb(state, bits) | (1 &amp;lt;&amp;lt; (bits - 1)))

def get_smooth_prime(state, bits, smoothness=16):
 p = mpz(2)
 p_factors = [p]
 while p.bit_length() &amp;lt; bits - 2 * smoothness:
 factor = get_prime(state, smoothness)
 p_factors.append(factor)
 p *= factor

 bitcnt = (bits - p.bit_length()) // 2

 while True:
 prime1 = get_prime(state, bitcnt)
 prime2 = get_prime(state, bitcnt)
 tmpp = p * prime1 * prime2
 if tmpp.bit_length() &amp;lt; bits:
 bitcnt += 1
 continue
 if tmpp.bit_length() &amp;gt; bits:
 bitcnt -= 1
 continue
 if is_prime(tmpp + 1):
 p_factors.append(prime1)
 p_factors.append(prime2)
 p = tmpp + 1
 break

 p_factors.sort()

 return (p, p_factors)

e = 0x10001

while True:
 p, p_factors = get_smooth_prime(STATE, 1024, 16)
 if len(p_factors) != len(set(p_factors)):
 continue
 # Smoothness should be different or some might encounter issues.
 q, q_factors = get_smooth_prime(STATE, 1024, 17)
 if len(q_factors) != len(set(q_factors)):
 continue
 factors = p_factors + q_factors
 if e not in factors:
 break

if _DEBUG:
 import sys
 sys.stderr.write(f&amp;#39;p = {p.digits(16)}\n\n&amp;#39;)
 sys.stderr.write(f&amp;#39;p_factors = [\n&amp;#39;)
 for factor in p_factors:
 sys.stderr.write(f&amp;#39; {factor.digits(16)},\n&amp;#39;)
 sys.stderr.write(f&amp;#39;]\n\n&amp;#39;)

 sys.stderr.write(f&amp;#39;q = {q.digits(16)}\n\n&amp;#39;)
 sys.stderr.write(f&amp;#39;q_factors = [\n&amp;#39;)
 for factor in q_factors:
 sys.stderr.write(f&amp;#39; {factor.digits(16)},\n&amp;#39;)
 sys.stderr.write(f&amp;#39;]\n\n&amp;#39;)

n = p * q

m = math.lcm(p - 1, q - 1)
d = pow(e, -1, m)

c = pow(FLAG, e, n)

print(f&amp;#39;n = {n.digits(10)}&amp;#39;)
print(f&amp;#39;c = {c.digits(10)}&amp;#39;)
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item></channel></rss>