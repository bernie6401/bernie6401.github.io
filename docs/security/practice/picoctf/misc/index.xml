<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>SBK Hugo Site</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/misc/</link><description>Recent content on SBK Hugo Site</description><generator>Hugo</generator><language>en-us</language><atom:link href="https://bernie6401.github.io/docs/security/practice/picoctf/misc/index.xml" rel="self" type="application/rss+xml"/><item><title>PicoCTF - `tunn3l v1s10n`</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/misc/image-stego/picoctf---tunn3l-v1s10n/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/misc/image-stego/picoctf---tunn3l-v1s10n/</guid><description>&lt;h1 id="picoctf---tunn3l-v1s10n">
 PicoCTF - &lt;code>tunn3l v1s10n&lt;/code>
 &lt;a class="anchor" href="#picoctf---tunn3l-v1s10n">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-misc">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Misc&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-misc">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="https://play.picoctf.org/practice/challenge/112?category=4&amp;amp;page=1">tunn3l v1s10n&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://www.jinnsblog.com/2009/08/bmp-format-graphic-illustration.html">[筆記] BMP點陣圖格式說明&lt;/a>&lt;/p>
&lt;h2 id="exploit---recover-file">
 Exploit - Recover file
 &lt;a class="anchor" href="#exploit---recover-file">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>Analyze
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ exiftool tunn3l_v1s10n
ExifTool Version Number : 11.88
File Name : tunn3l_v1s10n
Directory : .
File Size : 2.8 MB
File Modification Date/Time : 2023:02:17 04:11:33+08:00
File Access Date/Time : 2023:02:17 04:12:37+08:00
File Inode Change Date/Time : 2023:02:17 04:11:35+08:00
File Permissions : rw-r--r--
File Type : BMP
File Type Extension : bmp
MIME Type : image/bmp
BMP Version : Unknown (53434)
Image Width : 1134
Image Height : 306
Planes : 1
Bit Depth : 24
Compression : None
Image Length : 2893400
Pixels Per Meter X : 5669
Pixels Per Meter Y : 5669
Num Colors : Use BitDepth
Num Important Colors : All
Red Mask : 0x27171a23
Green Mask : 0x20291b1e
Blue Mask : 0x1e212a1d
Alpha Mask : 0x311a1d26
Color Space : Unknown (,5%()
Rendering Intent : Unknown (826103054)
Image Size : 1134x306
Megapixels : 0.347
&lt;/code>&lt;/pre>It seems a &lt;code>bmp&lt;/code> file and check the file signature of the 2 bytes is &lt;code>42 4D&lt;/code> :heavy_check_mark:&lt;/li>
&lt;li>Check file headers
According to &lt;a href="https://en.wikipedia.org/wiki/BMP_file_format">BMP_file_format&lt;/a> and &lt;a href="https://www.jinnsblog.com/2009/08/bmp-format-graphic-illustration.html">BMP點陣圖格式說明&lt;/a>
&lt;img src="https://i.imgur.com/YU6exro.png" alt="" />
&lt;ul>
&lt;li>:heavy_check_mark:size: &lt;code>8E 26 2C 00&lt;/code> $\to$ &lt;code>0x2C268E&lt;/code> $\to$ &lt;code>2893454 bytes&lt;/code>
&lt;img src="https://i.imgur.com/H6G44kT.png" alt="" />&lt;/li>
&lt;li>:heavy_check_mark:reserved1: &lt;code>00 00&lt;/code>&lt;/li>
&lt;li>:heavy_check_mark:reserved2: &lt;code>00 00&lt;/code>&lt;/li>
&lt;li>:negative_squared_cross_mark:offset: &lt;code>BA D0 00 00&lt;/code> $\to$ &lt;code>0xD0BA&lt;/code> $\to$ &lt;code>53434&lt;/code> means it&amp;rsquo;ll read the bitmap data from offset 53434 bytes. But actually, the data of bitmap is just connect with the header. So, we just need to shift 14 bytes for file header + 40 bytes for info header = 54 bytes $\to$ &lt;code>0x36&lt;/code>
&lt;img src="https://i.imgur.com/crETYOD.png" alt="" />&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;hr>
&lt;p>We can peek the data first&amp;hellip;
&lt;img src="https://i.imgur.com/DWesnDl.png" alt="" />
It said &lt;code>notaflag{sorry}&lt;/code>, means we need to recover other parts.&lt;/p></description></item><item><title>PicoCTF - `Wireshark doo dooo do doo...`</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/misc/flow/picoctf---wireshark-doo-dooo-do-doo.../</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/misc/flow/picoctf---wireshark-doo-dooo-do-doo.../</guid><description>&lt;h1 id="picoctf---wireshark-doo-dooo-do-doo">
 PicoCTF - &lt;code>Wireshark doo dooo do doo...&lt;/code>
 &lt;a class="anchor" href="#picoctf---wireshark-doo-dooo-do-doo">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-misc">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Misc&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-misc">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="https://play.picoctf.org/practice/challenge/115?category=4&amp;amp;page=1">https://play.picoctf.org/practice/challenge/115?category=4&amp;page=1&lt;/a>&lt;/p>
&lt;h2 id="exploit---strings--rot13">
 Exploit - strings + rot13
 &lt;a class="anchor" href="#exploit---strings--rot13">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ strings shark1.pcapng | grep &amp;#34;{&amp;#34;
...
Gur synt vf cvpbPGS{c33xno00_1_f33_h_qrnqorrs}
...
&lt;/code>&lt;/pre>&lt;p>Obviously a encrypted flag $\to$ use rot13
flag: &lt;code>picoCTF{p33kab00_1_s33_u_deadbeef}&lt;/code>&lt;/p></description></item><item><title>PicoCTF - advanced-potion-making</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/misc/image-stego/picoctf---advanced-potion-making/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/misc/image-stego/picoctf---advanced-potion-making/</guid><description>&lt;h1 id="picoctf---advanced-potion-making">
 PicoCTF - advanced-potion-making
 &lt;a class="anchor" href="#picoctf---advanced-potion-making">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-misc">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Misc&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-misc">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="https://play.picoctf.org/practice/challenge/205?bookmarked=0&amp;amp;category=4&amp;amp;page=1&amp;amp;search=&amp;amp;solved=0">advanced-potion-making&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://blog.mythsman.com/post/5d2d62b4a2005d74040ef7eb/">PNG文件格式详解&lt;/a>
&lt;a href="https://zhuanlan.zhihu.com/p/599657891">隐写分析(2) PNG图片隐写&lt;/a>&lt;/p>
&lt;h2 id="exploit---recover--stegsolve">
 Exploit - Recover + StegSolve
 &lt;a class="anchor" href="#exploit---recover--stegsolve">#&lt;/a>
&lt;/h2>
&lt;p>Modify the file signature and length to the right value.
&lt;code>89 50 42 11 0D 0A 1A 0A 00 12 13 14 49 48 44 52&lt;/code>
$\to$
&lt;code>89 50 4E 47 0D 0A 1A 0A 00 00 00 0D 49 48 44 52&lt;/code>&lt;/p>
&lt;ul>
&lt;li>&lt;img src="https://i.imgur.com/Pv1ojSN.png" alt="" />&lt;/li>
&lt;li>&lt;img src="https://i.imgur.com/vLgguSp.png" alt="" />&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://i.imgur.com/ZT4PsQ5.png" alt="" />&lt;/p></description></item><item><title>PicoCTF - c0rrupt</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/misc/image-stego/picoctf---c0rrupt/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/misc/image-stego/picoctf---c0rrupt/</guid><description>&lt;h1 id="picoctf---c0rrupt">
 PicoCTF - c0rrupt
 &lt;a class="anchor" href="#picoctf---c0rrupt">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-misc">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Misc&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-misc">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="https://play.picoctf.org/practice/challenge/53?category=4&amp;amp;page=3">c0rrupt&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://bernie6401.github.io/uwox6r5hQ6St_8G-4mv1_g">advanced-potion-making:two::+1:&lt;/a>&lt;/p>
&lt;h2 id="exploit---recover-png-file">
 Exploit - Recover PNG file
 &lt;a class="anchor" href="#exploit---recover-png-file">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>Analyze&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>
&lt;p>Header
&lt;code>89 65 4E 34 0D 0A B0 AA&lt;/code>
$\to$
&lt;code>89 50 4E 47 0D 0A 1A 0A&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>IHDR
&lt;code>43 22 44 52&lt;/code>
$\to$
&lt;code>49 48 44 52&lt;/code>
Then use &lt;code>pngcheck&lt;/code> to analyze the file. It said the header still have some error.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ pngcheck mystery
mystery CRC error in chunk pHYs (computed 38d82c82, expected 495224f0)
ERROR: mystery
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>Revise &lt;code>pHYs&lt;/code>
You can open an arbitrary png file and observe &lt;code>pHYs&lt;/code> part.&lt;/p></description></item><item><title>PicoCTF - Disk, disk, sleuth! II</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/misc/disk/picoctf---disk-disk-sleuth-ii/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/misc/disk/picoctf---disk-disk-sleuth-ii/</guid><description>&lt;h1 id="picoctf---disk-disk-sleuth-ii">
 PicoCTF - Disk, disk, sleuth! II
 &lt;a class="anchor" href="#picoctf---disk-disk-sleuth-ii">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-misc">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Misc&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-misc">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="https://play.picoctf.org/practice/challenge/137?category=4&amp;amp;page=2">Disk, disk, sleuth! II&lt;/a>&lt;/p>
&lt;h2 id="description--hint">
 Description &amp;amp; Hint
 &lt;a class="anchor" href="#description--hint">#&lt;/a>
&lt;/h2>
&lt;p>All we know is the file with the flag is named &lt;code>down-at-the-bottom.txt&lt;/code>&amp;hellip; Disk image: &lt;code>dds2-alpine.flag.img.gz&lt;/code>
Hint 1: The sleuthkit has some great tools for this challenge as well.
Hint 2: Sleuthkit docs here are so helpful: &lt;a href="http://wiki.sleuthkit.org/index.php?title=TSK_Tool_Overview">TSK Tool Overview&lt;/a>
Hint 3: This disk can also be booted with &lt;a href="https://idobest.pixnet.net/blog/post/22040213">qemu&lt;/a>!&lt;/p></description></item><item><title>PicoCTF - Eavesdrop</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/misc/flow/picoctf---eavesdrop/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/misc/flow/picoctf---eavesdrop/</guid><description>&lt;h1 id="picoctf---eavesdrop">
 PicoCTF - Eavesdrop
 &lt;a class="anchor" href="#picoctf---eavesdrop">#&lt;/a>
&lt;/h1>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>這一題是有關eavesdropping，代表有一個中間人監聽了所有conversation，先用一些基本的手段看一下整體的pcap packets(strings searching/IO Graphs/Statistic/Extract Default Protocol File&amp;hellip;)，但是如果跟一下tcp的packets，可以發現傳輸兩方的對話紀錄，包括傳輸資料的加密方式等等，所以我們就可以直接把傳輸資料解密得到flag&lt;/p>
&lt;h2 id="exploit---extract-file--decrypt">
 Exploit - Extract File &amp;amp; Decrypt
 &lt;a class="anchor" href="#exploit---extract-file--decrypt">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>Follow TCP Packets
&lt;pre tabindex="0">&lt;code>Hey, how do you decrypt this file again?
You&amp;#39;re serious?
Yeah, I&amp;#39;m serious
*sigh* openssl des3 -d -salt -in file.des3 -out file.txt -k supersecretpassword123
Ok, great, thanks.
Let&amp;#39;s use Discord next time, it&amp;#39;s more secure.
C&amp;#39;mon, no one knows we use this program like this!
Whatever.
Hey.
Yeah?
Could you transfer the file to me again?
Oh great. Ok, over 9002?
Yeah, listening.
Sent it
Got it.
You&amp;#39;re unbelievable
&lt;/code>&lt;/pre>從以上對話紀錄可以知道他們在9002 port有傳輸資料，並且解密的command是&lt;code>openssl des3 -d -salt -in file.des3 -out file.txt -k supersecretpassword123&lt;/code>&lt;/li>
&lt;li>Extract File
我們可以增加兩個column專門顯示source/destination port
&lt;img src="https://hackmd.io/_uploads/B1ZrNEdOh.png" alt="" />
然後找到port 9002的地方，可以發現No.57有附帶資料，把這筆資料另存起來
&lt;img src="https://hackmd.io/_uploads/r11KNV_O2.png" alt="" />
Note: 儲存資料到file.des3的時候，內容必須要是&lt;code>Salted__9BæÄ'÷b4Ó[ÐNXämn±'-ärGsðÏú :›çk¿«@Û=6&lt;/code>
Note2: 也可以用&lt;code>tcpflow&lt;/code>的方式把資料download下來
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ sudo tcpflow -r {pcap file}
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>Decrypt File
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ openssl des3 -d -salt -in file.des3 -out file.txt -k supersecretpassword123
*** WARNING : deprecated key derivation used.
Using -iter or -pbkdf2 would be better.
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ol>
&lt;p>Flag: &lt;code>picoCTF{nc_73115_411_dd54ab67}&lt;/code>&lt;/p></description></item><item><title>PicoCTF - File types</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/misc/general/picoctf---file-types/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/misc/general/picoctf---file-types/</guid><description>&lt;h1 id="picoctf---file-types">
 PicoCTF - File types
 &lt;a class="anchor" href="#picoctf---file-types">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-misc">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Misc&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-misc">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="">File types&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;h3 id="for-shell-script">
 For Shell Script
 &lt;a class="anchor" href="#for-shell-script">#&lt;/a>
&lt;/h3>
&lt;p>&lt;a href="https://blog.gtwang.org/linux/generate-verify-check-files-md5-sha1-checksum-linux/">Linux MD5&lt;/a>
&lt;a href="https://www.runoob.com/linux/linux-comm-egrep.html">Linux egrep命令&lt;/a>
&lt;a href="https://www.runoob.com/linux/linux-shell-test.html">Shell test 命令&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>-f 文件名: 如果文件存在且为普通文件则为真&lt;/p>&lt;/blockquote>
&lt;p>&lt;a href="https://phoenixnap.com/kb/linux-add-to-path">How to modify $PATH&lt;/a>
&lt;a href="https://blog.gtwang.org/linux/linux-touch-command-tutorial-examples/">touch - time stamp&lt;/a>
&lt;a href="https://unix.stackexchange.com/questions/291570/what-is-in-bash">What is $$ in bash?&lt;/a>&lt;/p>
&lt;h3 id="for-compress-command">
 For Compress Command
 &lt;a class="anchor" href="#for-compress-command">#&lt;/a>
&lt;/h3>
&lt;p>&lt;a href="https://officeguide.cc/linux-copy-files-to-and-from-archives-cpio-command-tutorial-examples/">Linux 備份檔案操作 cpio 指令教學與範例&lt;/a>
&lt;a href="https://www.geeksforgeeks.org/bzip2-command-in-linux-with-examples/">bzip2 command in Linux&lt;/a>
&lt;a href="https://linuxize.com/post/gzip-command-in-linux/">Gzip Command in Linux&lt;/a>
&lt;a href="https://www.nongnu.org/lzip/manual/lzip_manual.html">Lzip Manual&lt;/a>
&lt;a href="https://manpages.ubuntu.com/manpages/xenial/man1/lz4.1.html">lz4 manual&lt;/a>
&lt;a href="https://manpages.ubuntu.com/manpages/xenial/man1/lzmp.1.html">lzma manual&lt;/a>
&lt;a href="https://linux.die.net/man/1/lzop">lzop(1) - Linux man page&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler Flag.pdf&lt;/p></description></item><item><title>PicoCTF - information</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/misc/picoctf---information/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/misc/picoctf---information/</guid><description>&lt;h1 id="picoctf---information">
 PicoCTF - information
 &lt;a class="anchor" href="#picoctf---information">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-misc">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Misc&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-misc">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="https://play.picoctf.org/practice/challenge/186?category=4&amp;amp;page=1">https://play.picoctf.org/practice/challenge/186?category=4&amp;page=1&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://ubunlog.com/zh-TW/exiftool-manipula-metadatos-ubuntu/">ExifTool&lt;/a>&lt;/p>
&lt;h2 id="exploit">
 Exploit
 &lt;a class="anchor" href="#exploit">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ exiftool cat.jpg
ExifTool Version Number : 11.88
File Name : cat.jpg
Directory : .
File Size : 858 kB
File Modification Date/Time : 2023:02:16 02:15:29+08:00
File Access Date/Time : 2023:02:16 16:09:51+08:00
File Inode Change Date/Time : 2023:02:16 12:31:32+08:00
File Permissions : rwxrwxrwx
File Type : JPEG
File Type Extension : jpg
MIME Type : image/jpeg
JFIF Version : 1.02
Resolution Unit : None
X Resolution : 1
Y Resolution : 1
Current IPTC Digest : 7a78f3d9cfb1ce42ab5a3aa30573d617
Copyright Notice : PicoCTF
Application Record Version : 4
XMP Toolkit : Image::ExifTool 10.80
License : cGljb0NURnt0aGVfbTN0YWRhdGFfMXNfbW9kaWZpZWR9
Rights : PicoCTF
Image Width : 2560
Image Height : 1598
Encoding Process : Baseline DCT, Huffman coding
Bits Per Sample : 8
Color Components : 3
Y Cb Cr Sub Sampling : YCbCr4:2:0 (2 2)
Image Size : 2560x1598
Megapixels : 4.1
&lt;/code>&lt;/pre>&lt;p>In License row, it&amp;rsquo;s obviously a base64 encoding string
&lt;code>picoCTF{the_m3tadata_1s_modified}&lt;/code>&lt;/p></description></item><item><title>PicoCTF - Investigative Reversing 0</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/misc/general/picoctf---investigative-reversing-0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/misc/general/picoctf---investigative-reversing-0/</guid><description>&lt;h1 id="picoctf---investigative-reversing-0">
 PicoCTF - Investigative Reversing 0
 &lt;a class="anchor" href="#picoctf---investigative-reversing-0">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-misc">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Misc&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-misc">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="https://play.picoctf.org/practice/challenge/70?category=4&amp;amp;page=3">Investigative Reversing 0&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="http://tw.gitbook.net/c_standard_library/c_function_fputc.html">fputc() - C語言庫函數&lt;/a>
&lt;a href="https://shengyu7697.github.io/cpp-fread/">C/C++ fread 用法與範例&lt;/a>
&lt;a href="https://blog.51cto.com/u_6680689/3260951">C中fread()函数的返回值&lt;/a>
&lt;a href="https://blog.csdn.net/u010164190/article/details/124945191">C语言之1ULL/1UL/1L区别&lt;/a>&lt;/p>
&lt;h2 id="source-code---ida">
 Source code - IDA
 &lt;a class="anchor" href="#source-code---ida">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler source code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-cpp=" data-lang="cpp=">int __cdecl main(int argc, const char **argv, const char **envp)
{
 int i; // [rsp+4h] [rbp-4Ch]
 int j; // [rsp+8h] [rbp-48h]
 FILE *stream; // [rsp+10h] [rbp-40h]
 FILE *v8; // [rsp+18h] [rbp-38h]
 char ptr[40]; // [rsp+20h] [rbp-30h] BYREF
 unsigned __int64 v10; // [rsp+48h] [rbp-8h]

 v10 = __readfsqword(40u);
 stream = fopen(&amp;#34;flag.txt&amp;#34;, &amp;#34;r&amp;#34;);
 v8 = fopen(&amp;#34;mystery.png&amp;#34;, &amp;#34;a&amp;#34;);
 if ( !stream )
 puts(&amp;#34;No flag found, please make sure this is run on the server&amp;#34;);
 if ( !v8 )
 puts(&amp;#34;mystery.png is missing, please run this on the server&amp;#34;);
 if ( (int)fread(ptr, 26uLL, 1uLL, stream) &amp;lt;= 0 )
 exit(0);
 puts(&amp;#34;at insert&amp;#34;);
 fputc(ptr[0], v8);
 fputc(ptr[1], v8);
 fputc(ptr[2], v8);
 fputc(ptr[3], v8);
 fputc(ptr[4], v8);
 fputc(ptr[5], v8);
 for ( i = 6; i &amp;lt;= 14; ++i )
 fputc((char)(ptr[i] + 5), v8);
 fputc((char)(ptr[15] - 3), v8);
 for ( j = 16; j &amp;lt;= 25; ++j )
 fputc(ptr[j], v8);
 fclose(v8);
 fclose(stream);
 return __readfsqword(40u) ^ v10;
}
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>PicoCTF - like1000</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/misc/general/picoctf---like1000/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/misc/general/picoctf---like1000/</guid><description>&lt;h1 id="picoctf---like1000">
 PicoCTF - like1000
 &lt;a class="anchor" href="#picoctf---like1000">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-misc">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Misc&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-misc">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="">like1000&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://stackoverflow.com/questions/2778153/how-to-extract-nested-tar-gz-files-easily">How to extract nested tar.gz files easily?&lt;/a>
&lt;a href="https://ithelp.ithome.com.tw/articles/10132603">Shell Script - While&lt;/a>&lt;/p>
&lt;h2 id="exploit---untar-1000-times">
 Exploit - Untar 1000 times
 &lt;a class="anchor" href="#exploit---untar-1000-times">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>For untar folders
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">#! /bin/bash
PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin
export PATH
file_name=1000
for next in ${file_name}.tar
while [ $file_name &amp;gt; 1 ]
 do
 echo &amp;#34;Untaring - $file_name&amp;#34;
 tar -xvf ${file_name}.tar #-C ./
 file_name=$(($file_name-1))
 mkdir ./$file_name
 mv ${file_name}.tar ./$file_name
 cd ./${file_name}
 done
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>For getting flag
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">#! /bin/bash
PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin
export PATH
file_name=999
while [ &amp;#34;$file_name&amp;#34; &amp;gt; &amp;#34;0&amp;#34; ]
 do
 cd ./${file_name}
 file_name=$(($file_name-1))
 if [ &amp;#34;$file_name&amp;#34; == &amp;#34;0&amp;#34; ]
 then ls -al
 cat filler.txt
 mv flag.png ~/CTF/PicoCTF/Misc/like1000
 fi
 done
exit 0
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ul>
&lt;h2 id="reference">
 Reference
 &lt;a class="anchor" href="#reference">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://shengyu7697.github.io/shell-script-arithmetic/">Shell Script 變數相加&lt;/a>
&lt;a href="https://linuxhint.com/solve-gzip-stdin-not-gzip-format-error/">How to solve gzip: stdin: not in gzip format error&lt;/a>
&lt;a href="https://blog.csdn.net/cp_panda_5/article/details/79192688">解压缩报错tar: Error is not recoverable: exiting now&lt;/a>
&lt;a href="https://unix.stackexchange.com/questions/47584/in-a-bash-script-using-the-conditional-or-in-an-if-statement">In a bash script, using the conditional &amp;ldquo;or&amp;rdquo; in an &amp;ldquo;if&amp;rdquo; statement&lt;/a>&lt;/p></description></item><item><title>PicoCTF - m00nwalk</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/misc/image-stego/picoctf---m00nwalk/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/misc/image-stego/picoctf---m00nwalk/</guid><description>&lt;h1 id="picoctf---m00nwalk">
 PicoCTF - m00nwalk
 &lt;a class="anchor" href="#picoctf---m00nwalk">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-misc">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Misc&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-misc">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="https://play.picoctf.org/practice/challenge/26?category=4&amp;amp;page=3">m00nwalk&lt;/a>&lt;/p>
&lt;h2 id="description--hint">
 Description &amp;amp; Hint
 &lt;a class="anchor" href="#description--hint">#&lt;/a>
&lt;/h2>
&lt;p>Decode this &lt;a href="https://jupiter.challenges.picoctf.org/static/fc1edf07742e98a480c6aff7d2546107/message.wav">message&lt;/a> from the moon.
Hint:&lt;/p>
&lt;ul>
&lt;li>How did pictures from the moon landing get sent back to Earth?&lt;/li>
&lt;li>What is the CMU mascot?, that might help select a RX option&lt;/li>
&lt;/ul>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://zh.wikipedia.org/wiki/%E6%85%A2%E6%89%AB%E6%8F%8F%E7%94%B5%E8%A7%86#%E5%9C%A8%E8%88%AA%E5%A4%A9%E9%A2%86%E5%9F%9F%E7%9A%84%E6%97%A9%E6%9C%9F%E5%BA%94%E7%94%A8">慢掃描電視 - slow-scan television(sstv)&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;h2 id="exploit---qsstv-">
 Exploit - qsstv +
 &lt;a class="anchor" href="#exploit---qsstv-">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>First, I thought it might be a &lt;code>mp3stego&lt;/code> problem but found nothing. So, I tried to find the write up about this question.&lt;/li>
&lt;li>Use QSSTV
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ sudo apt-get install pavucontrol
$ sudo apt-get install qsstv
$ pactl load-module module-null-sink sink_name=virtual-cable
22
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>The Setting&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>
&lt;p>&lt;code>pavucontrol&lt;/code>&lt;/p></description></item><item><title>PicoCTF - m00nwalk2</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/misc/image-stego/picoctf---m00nwalk2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/misc/image-stego/picoctf---m00nwalk2/</guid><description>&lt;h1 id="picoctf---m00nwalk2">
 PicoCTF - m00nwalk2
 &lt;a class="anchor" href="#picoctf---m00nwalk2">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-misc">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Misc&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-misc">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="https://play.picoctf.org/practice?category=4&amp;amp;page=3">m00nwalk2&lt;/a>&lt;/p>
&lt;h2 id="description--hint">
 Description &amp;amp; Hint
 &lt;a class="anchor" href="#description--hint">#&lt;/a>
&lt;/h2>
&lt;p>Revisit the last transmission. We think this &lt;a href="https://jupiter.challenges.picoctf.org/static/a33c9e5dae30c560704e6f2ffaba35c7/message.wav">transmission&lt;/a> contains a hidden message. There are also some clues &lt;a href="https://jupiter.challenges.picoctf.org/static/a33c9e5dae30c560704e6f2ffaba35c7/clue1.wav">clue 1&lt;/a>, &lt;a href="https://jupiter.challenges.picoctf.org/static/a33c9e5dae30c560704e6f2ffaba35c7/clue2.wav">clue 2&lt;/a>, &lt;a href="https://jupiter.challenges.picoctf.org/static/a33c9e5dae30c560704e6f2ffaba35c7/clue3.wav">clue 3&lt;/a>.&lt;/p>
&lt;p>Hint:&lt;/p>
&lt;ul>
&lt;li>Use the clues to extract the another flag from the .wav file&lt;/li>
&lt;/ul>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://bernie6401.github.io/rrUS4fS8QxicWvvjqziIqg">m00nwalk&lt;/a>&lt;/p>
&lt;h2 id="exploit---qsstv">
 Exploit - QSSTV
 &lt;a class="anchor" href="#exploit---qsstv">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>Follow the write up of m00nwalk then you&amp;rsquo;ll get 3 images from 3 clues respectively.
&lt;img src="https://i.imgur.com/Vq8ciM2.png" alt="" />
&lt;img src="https://i.imgur.com/Y5nS8wS.png" alt="" />
&lt;img src="https://i.imgur.com/C0xk8YL.png" alt="" />&lt;/p></description></item><item><title>PicoCTF - MacroHard WeakEdge</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/misc/general/picoctf---macrohard-weakedge/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/misc/general/picoctf---macrohard-weakedge/</guid><description>&lt;h1 id="picoctf---macrohard-weakedge">
 PicoCTF - MacroHard WeakEdge
 &lt;a class="anchor" href="#picoctf---macrohard-weakedge">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-misc">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Misc&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-misc">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="https://play.picoctf.org/practice/challenge/130?bookmarked=0&amp;amp;category=4&amp;amp;page=1&amp;amp;search=&amp;amp;solved=0">MacroHard WeakEdge&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://fileinfo.com/extension/pptm">What is a PPTM file?&lt;/a>
&lt;font color="FF0000">It&amp;rsquo;s a zip format file&lt;/font>&lt;/p>
&lt;blockquote>
&lt;p>A PPTM file is a macro-enabled presentation created by Microsoft PowerPoint, an application used to create presentations and slide shows. It contains a collection of slides, which typically includes text, layout, images, and embedded macros. PPTM files are commonly used to store business, marketing, and academic presentations.&lt;/p></description></item><item><title>PicoCTF - Matryoshka doll</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/misc/general/picoctf---matryoshka-doll/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/misc/general/picoctf---matryoshka-doll/</guid><description>&lt;h1 id="picoctf---matryoshka-doll">
 PicoCTF - Matryoshka doll
 &lt;a class="anchor" href="#picoctf---matryoshka-doll">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-misc">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Misc&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-misc">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="https://play.picoctf.org/practice/challenge/129?category=4&amp;amp;page=1">&lt;/a>&lt;/p>
&lt;h2 id="exploit---rar-in-rar">
 Exploit - &lt;code>rar&lt;/code> in &lt;code>rar&lt;/code>
 &lt;a class="anchor" href="#exploit---rar-in-rar">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>Hint
The hint said:&lt;/p>
&lt;blockquote>
&lt;p>Wait, you can hide files inside files? But how do you find them?&lt;/p>&lt;/blockquote>
&lt;p>So&amp;hellip;I tried &lt;code>stegsolve&lt;/code>, &lt;code>HxD&lt;/code>, &lt;code>exiftool&lt;/code>, &lt;code>string dolls.jpg | grep &amp;quot;{&amp;quot;&lt;/code>, &lt;code>$ zsteg dolls.jpg&lt;/code> &amp;hellip; All these are in vain&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;font color="FF0000">通靈&lt;/font>: Changed the extension to &lt;code>.rar&lt;/code>
And it can be uncompressed
&lt;img src="https://i.imgur.com/sNfhE2J.png" alt="" />&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Repeat until find &lt;code>flag.txt&lt;/code>&amp;hellip;&lt;/p></description></item><item><title>PicoCTF - Operation Oni</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/misc/disk/picoctf---operation-oni/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/misc/disk/picoctf---operation-oni/</guid><description>&lt;h1 id="picoctf---operation-oni">
 PicoCTF - Operation Oni
 &lt;a class="anchor" href="#picoctf---operation-oni">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://www.techrepublic.com/article/how-to-view-your-ssh-keys-in-linux-macos-and-windows/">How to View Your SSH Keys in Linux, macOS and Windows&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://docs.pingcode.com/ask/16621.html">ISO和IMG有哪些區別&lt;/a>&lt;/p>
&lt;blockquote>
&lt;h3 id="iso和img的區別">
 ISO和IMG的區別
 &lt;a class="anchor" href="#iso%e5%92%8cimg%e7%9a%84%e5%8d%80%e5%88%a5">#&lt;/a>
&lt;/h3>
&lt;p>ISO和IMG都是操作系統鏡像文件的擴展名，它們的主要區別在以下幾個方面：&lt;/p>
&lt;ol>
&lt;li>來源不同
ISO文件通常來自光盤鏡像，例如Windows安裝光盤的ISO鏡像文件。而IMG文件可以來自多種渠道，例如從移動設備制造商下載的Android操作系統鏡像文件，或者是從虛擬機軟件中制作的虛擬機磁盤鏡像文件。&lt;/li>
&lt;li>文件格式不同
ISO文件使用ISO 9660標準格式，而IMG文件可以使用多種格式，例如RAW、VMDK、VDI等。&lt;/li>
&lt;li>兼容性不同
ISO文件在各種操作系統和軟件中都有良好的兼容性，而IMG文件在一些操作系統或軟件中可能存在兼容性問題。&lt;/li>
&lt;li>使用範圍不同
ISO文件主要用於制作光盤或者USB啟動盤，用於安裝操作系統或者救援系統等。而IMG文件主要用於移動設備或者虛擬機等環境下的操作系統安裝或備份。
總之，ISO和IMG都是操作系統鏡像文件的擴展名，雖然它們在一些方面有類似之處，但在來源、文件格式、兼容性和使用範圍等方面存在差異，應根據具體的需求來選擇使用哪種格式。&lt;/li>
&lt;/ol>&lt;/blockquote>
&lt;h2 id="description">
 Description
 &lt;a class="anchor" href="#description">#&lt;/a>
&lt;/h2>
&lt;p>Download this disk image, find the key and log into the remote machine. Note: if you are using the webshell, download and extract the disk image into /tmp not your home directory.&lt;/p></description></item><item><title>PicoCTF - Operation Orchid</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/misc/disk/picoctf---operation-orchid/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/misc/disk/picoctf---operation-orchid/</guid><description>&lt;h1 id="picoctf---operation-orchid">
 PicoCTF - Operation Orchid
 &lt;a class="anchor" href="#picoctf---operation-orchid">#&lt;/a>
&lt;/h1>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>這一題過於簡單&lt;/p>
&lt;h2 id="exploit---forensics--openssl">
 Exploit - Forensics / Openssl
 &lt;a class="anchor" href="#exploit---forensics--openssl">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>Find Encryption Flag File(Autopsy)
可以在/root中找到，然後.ash_history的command紀錄中知道加密的password phrase
&lt;img src="https://hackmd.io/_uploads/rJdlBhLgp.png" alt="" />&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>touch flag.txt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>nano flag.txt 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apk get nano
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apk --help
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>apk add nano
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>nano flag.txt 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>openssl
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>openssl aes256 -salt -in flag.txt -out flag.txt.enc -k unbreakablepassword1234567
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>shred -u flag.txt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ls -al
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>halt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Script&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ openssl aes-256-cbc -in flag.txt.enc -d
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>enter aes-256-cbc decryption password:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>*** WARNING : deprecated key derivation used.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Using -iter or -pbkdf2 would be better.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>bad decrypt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>140342062343488:error:06065064:digital envelope routines:EVP_DecryptFinal_ex:bad decrypt:crypto/evp/evp_enc.c:612:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>picoCTF&lt;span style="color:#f92672">{&lt;/span>h4un71ng_p457_5113beab&lt;span style="color:#f92672">}&lt;/span>%
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol></description></item><item><title>PicoCTF - Pitter, Patter, Platters</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/misc/disk/picoctf---pitter-patter-platters/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/misc/disk/picoctf---pitter-patter-platters/</guid><description>&lt;h1 id="picoctf---pitter-patter-platters">
 PicoCTF - Pitter, Patter, Platters
 &lt;a class="anchor" href="#picoctf---pitter-patter-platters">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-misc">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Misc&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-misc">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="https://play.picoctf.org/practice/challenge/87?category=4&amp;amp;page=2">Pitter, Patter, Platters&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://blog.gtwang.org/linux/linux-add-format-mount-harddisk/">sda&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;h2 id="exploit---use-ftk-imager">
 Exploit - Use FTK Imager
 &lt;a class="anchor" href="#exploit---use-ftk-imager">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>I use Autopsy but find nothing except a txt file
&lt;img src="https://i.imgur.com/7IXjuMn.png" alt="" />
So I follow &lt;a href="https://youtu.be/P0wvFs02oKY">write up video&lt;/a> to use &lt;code>FTK imager&lt;/code> and it can parse files completely.
&lt;img src="https://i.imgur.com/FdC9k3V.png" alt="" />&lt;/li>
&lt;/ul>
&lt;p>ORRRR&amp;hellip;&lt;/p>
&lt;ul>
&lt;li>Use &lt;code>HxD&lt;/code> as auxiliary tool to find flag
&lt;img src="https://i.imgur.com/RTIOn1G.png" alt="" />&lt;/li>
&lt;/ul>
&lt;p>ORRRR&amp;hellip;&lt;/p>
&lt;ul>
&lt;li>Just use string search
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ strings -e l Pitter,\ Patter,\ Platters.sda1 | rev
picoCTF{b3_5t111_mL|_&amp;lt;3_ba880921}
...
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ul>
&lt;h2 id="reference">
 Reference
 &lt;a class="anchor" href="#reference">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://github.com/Dvd848/CTFs/blob/master/2020_picoCTF_Mini/Pitter_Patter_Platters.md">Pitter, Patter, Platters write up&lt;/a>
&lt;a href="https://youtu.be/P0wvFs02oKY">pico 2020 mini pitter patter platters&lt;/a>&lt;/p></description></item><item><title>PicoCTF - scrambled-bytes</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/misc/flow/picoctf---scrambled-bytes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/misc/flow/picoctf---scrambled-bytes/</guid><description>&lt;h1 id="picoctf---scrambled-bytes">
 PicoCTF - scrambled-bytes
 &lt;a class="anchor" href="#picoctf---scrambled-bytes">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://www.readfog.com/a/1635090435931213824">盤點一款 Python 發包收包利器 - scapy&lt;/a>&lt;/p>
&lt;blockquote>
&lt;h3 id="只發不收">
 只發不收
 &lt;a class="anchor" href="#%e5%8f%aa%e7%99%bc%e4%b8%8d%e6%94%b6">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>send(pkt, inter&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>, loop&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>, count&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>, iface&lt;span style="color:#f92672">=&lt;/span>N) 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pkt:數據包
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>inter&lt;span style="color:#960050;background-color:#1e0010">：&lt;/span>發包間隔時間
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>count&lt;span style="color:#960050;background-color:#1e0010">：&lt;/span>發包數量
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>iface&lt;span style="color:#960050;background-color:#1e0010">：&lt;/span>網卡接口名稱
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>send()&lt;span style="color:#960050;background-color:#1e0010">，&lt;/span>在第三層發包&lt;span style="color:#960050;background-color:#1e0010">，&lt;/span>沒有接收功能&lt;span style="color:#960050;background-color:#1e0010">；&lt;/span>send(IP(dst&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;www.baidu.com&amp;#34;&lt;/span>,ttl&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>)&lt;span style="color:#f92672">/&lt;/span>ICMP())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sendp()&lt;span style="color:#960050;background-color:#1e0010">，&lt;/span>在第二層發包&lt;span style="color:#960050;background-color:#1e0010">，&lt;/span>沒有接收功能&lt;span style="color:#960050;background-color:#1e0010">。&lt;/span>sr(Ether()&lt;span style="color:#f92672">/&lt;/span>IP(dst&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;www.baidu.com&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote>
&lt;p>&lt;a href="https://docs.python.org/zh-tw/3/library/time.html#time.time">time-時間的訪問和轉換&lt;/a>
&lt;a href="https://zhuanlan.zhihu.com/p/602431298">python 的pyshark庫如何使用&lt;/a>
&lt;a href="https://segmentfault.com/a/1190000006064442">PyShark入門(2)：FileCapture和LiveCapture模塊&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler Source Code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-python=" data-lang="python=">#!/usr/bin/env python3

import argparse
from progress.bar import IncrementalBar

from scapy.all import *
import ipaddress

import random
from time import time

def check_ip(ip):
 try:
 return ipaddress.ip_address(ip)
 except:
 raise argparse.ArgumentTypeError(f&amp;#39;{ip} is an invalid address&amp;#39;)

def check_port(port):
 try:
 port = int(port)
 if port &amp;lt; 1 or port &amp;gt; 65535:
 raise ValueError
 return port
 except:
 raise argparse.ArgumentTypeError(f&amp;#39;{port} is an invalid port&amp;#39;)

def main(args):
 with open(args.input, &amp;#39;rb&amp;#39;) as f:
 payload = bytearray(f.read())
 random.seed(int(time()))
 random.shuffle(payload)
 with IncrementalBar(&amp;#39;Sending&amp;#39;, max=len(payload)) as bar:
 for b in payload:
 send(
 IP(dst=str(args.destination)) /
 UDP(sport=random.randrange(65536), dport=args.port) /
 Raw(load=bytes([b^random.randrange(256)])),
 verbose=False)
 bar.next()

if __name__==&amp;#39;__main__&amp;#39;:
 parser = argparse.ArgumentParser()
 parser.add_argument(&amp;#39;destination&amp;#39;, help=&amp;#39;destination IP address&amp;#39;, type=check_ip)
 parser.add_argument(&amp;#39;port&amp;#39;, help=&amp;#39;destination port number&amp;#39;, type=check_port)
 parser.add_argument(&amp;#39;input&amp;#39;, help=&amp;#39;input file&amp;#39;)
 main(parser.parse_args())
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>PicoCTF - shark on wire 1</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/misc/flow/picoctf---shark-on-wire-1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/misc/flow/picoctf---shark-on-wire-1/</guid><description>&lt;h1 id="picoctf---shark-on-wire-1">
 PicoCTF - shark on wire 1
 &lt;a class="anchor" href="#picoctf---shark-on-wire-1">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-misc">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Misc&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-misc">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="https://play.picoctf.org/practice/challenge/30?category=4&amp;amp;page=2">shark on wire 1&lt;/a>&lt;/p>
&lt;h2 id="exploit---analyze-udp-stream">
 Exploit - Analyze UDP stream
 &lt;a class="anchor" href="#exploit---analyze-udp-stream">#&lt;/a>
&lt;/h2>
&lt;p>It transfer the single character by UDP protocol.
&lt;img src="https://i.imgur.com/ff5CsGr.png" alt="" />
Follow the UDP stream and you&amp;rsquo;ll get the flag
&lt;img src="https://i.imgur.com/EfK83gj.png" alt="" />&lt;/p></description></item><item><title>PicoCTF - shark on wire 2</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/misc/flow/picoctf---shark-on-wire-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/misc/flow/picoctf---shark-on-wire-2/</guid><description>&lt;h1 id="picoctf---shark-on-wire-2">
 PicoCTF - shark on wire 2
 &lt;a class="anchor" href="#picoctf---shark-on-wire-2">#&lt;/a>
&lt;/h1>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>這一提出的很硬要，誰知道會把flag藏在這種地方，也沒有任何的提示，如果不是看&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>根本不知道這題要表達甚麼，也可能是我太蔡&lt;/p>
&lt;ol>
&lt;li>Simple Recon
首先做一些基本的recon，諸如dump files/string search/follow tcp or udp之類的，會發現UDP packets會有一些訊息出現，其中出現Start和一些a/b最後接著end
&lt;img src="https://hackmd.io/_uploads/rkASlUD02.png" alt="" />
&lt;img src="https://hackmd.io/_uploads/BkxFgLPRn.png" alt="" />&lt;/li>
&lt;li>Set filter as &lt;code>udp.port==22&lt;/code>
會發現其中所有的len都一樣，就只有source port不一樣，同樣都是5xxx開頭，而後三位數就是flag
&lt;img src="https://hackmd.io/_uploads/BJq71UvC2.png" alt="" />&lt;/li>
&lt;li>Extract Flag
所以只要把所有的port擷取出來拚在一起，就可以拿到flag了&lt;/li>
&lt;/ol>
&lt;h2 id="exploit">
 Exploit
 &lt;a class="anchor" href="#exploit">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-python!" data-lang="python!">import pyshark

capture = pyshark.FileCapture(&amp;#39;./PicoCTF/Misc/shark on wire 2/capture.pcap&amp;#39;, display_filter=&amp;#39;udp.port == 22&amp;#39;)

data = []
for pkt in capture:
 if pkt.udp.port != &amp;#39;5000&amp;#39;:
 data.append(chr(int(pkt.udp.port[1:])))
print(&amp;#34;&amp;#34;.join(data))
&lt;/code>&lt;/pre>&lt;p>Flag: &lt;code>picoCTF{p1LLf3r3d_data_v1a_st3g0}&lt;/code>&lt;/p>
&lt;h2 id="reference">
 Reference
 &lt;a class="anchor" href="#reference">#&lt;/a>
&lt;/h2>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>&lt;a href="https://zomry1.github.io/shark-on-wire-2/">PicoCTF 2019 - shark on wire 2:-1:&lt;/a>&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p></description></item><item><title>PicoCTF - SideChannel</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/misc/general/picoctf---sidechannel/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/misc/general/picoctf---sidechannel/</guid><description>&lt;h1 id="picoctf---sidechannel">
 PicoCTF - SideChannel
 &lt;a class="anchor" href="#picoctf---sidechannel">#&lt;/a>
&lt;/h1>
&lt;h2 id="description">
 Description
 &lt;a class="anchor" href="#description">#&lt;/a>
&lt;/h2>
&lt;blockquote>
&lt;p>There&amp;rsquo;s something fishy about this PIN-code checker, can you figure out the PIN and get the flag? Download the PIN checker program here pin_checker Once you&amp;rsquo;ve figured out the PIN (and gotten the checker program to accept it), connect to the master server using nc saturn.picoctf.net 50364 and provide it the PIN to get your flag.&lt;/p>
&lt;p>Hint 1: Read about &amp;ldquo;timing-based side-channel attacks.&amp;rdquo;
Hint 2: Attempting to reverse-engineer or exploit the binary won&amp;rsquo;t help you, you can figure out the PIN just by interacting with it and measuring certain properties about it.
Hint 3: Don&amp;rsquo;t run your attacks against the master server, it is secured against them. The PIN code you get from the pin_checker binary is the same as the one for the master server.&lt;/p></description></item><item><title>PicoCTF - Sleuthkit Intro</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/misc/disk/picoctf---sleuthkit-intro/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/misc/disk/picoctf---sleuthkit-intro/</guid><description>&lt;h1 id="picoctf---sleuthkit-intro">
 PicoCTF - Sleuthkit Intro
 &lt;a class="anchor" href="#picoctf---sleuthkit-intro">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-misc">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Misc&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-misc">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="https://play.picoctf.org/practice/challenge/301?category=4&amp;amp;page=2">Sleuthkit Intro&lt;/a>&lt;/p>
&lt;h2 id="description">
 Description
 &lt;a class="anchor" href="#description">#&lt;/a>
&lt;/h2>
&lt;blockquote>
&lt;p>Download the disk image and use &lt;font color="FF0000">mmls&lt;/font> on it to find the size of the Linux partition. Connect to the remote checker service to check your answer and get the flag. Note: if you are using the webshell, download and extract the disk image into /tmp not your home directory.&lt;/p>&lt;/blockquote>
&lt;pre>&lt;code>Download disk image
Access checker program: nc saturn.picoctf.net 52279
&lt;/code>&lt;/pre>
&lt;p>&lt;a href="https://blog.csdn.net/qq_40399982/article/details/114882879?spm=1001.2014.3001.5506">最新kali之mmls&lt;/a>&lt;/p></description></item><item><title>PicoCTF - Surfing the Waves</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/misc/audio/picoctf---surfing-the-waves/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/misc/audio/picoctf---surfing-the-waves/</guid><description>&lt;h1 id="picoctf---surfing-the-waves">
 PicoCTF - Surfing the Waves
 &lt;a class="anchor" href="#picoctf---surfing-the-waves">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-misc">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Misc&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-misc">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="https://play.picoctf.org/practice/challenge/117?category=4&amp;amp;page=3">Surfing the Waves&lt;/a>&lt;/p>
&lt;h2 id="description--hint">
 Description &amp;amp; Hint
 &lt;a class="anchor" href="#description--hint">#&lt;/a>
&lt;/h2>
&lt;p>While you&amp;rsquo;re going through the FBI&amp;rsquo;s servers, you stumble across their incredible taste in music. One &lt;a href="https://mercury.picoctf.net/static/cf917a179937f814d966e53bb1fd4b90/main.wav">main.wav&lt;/a> you found is particularly interesting, see if you can find the flag!
Hint:&lt;/p>
&lt;ul>
&lt;li>Music is cool, but what other kinds of waves are there?&lt;/li>
&lt;li>Look deep below the surface&lt;/li>
&lt;/ul>
&lt;h2 id="exploit---通靈">
 Exploit - &lt;font color="FF0000">通靈&lt;/font>
 &lt;a class="anchor" href="#exploit---%e9%80%9a%e9%9d%88">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>Audacity to Analyze
The sound seems quite normal but when you zoom in the audio track, it looks like something encode.
&lt;img src="https://i.imgur.com/D1H1jpU.png" alt="" />&lt;/li>
&lt;li>Read it - &lt;code>scipy.io&lt;/code>
Use &lt;code>scipy.io&lt;/code> library to read it and print the data out.
&lt;pre tabindex="0">&lt;code class="language-python!" data-lang="python!">&amp;gt;&amp;gt;&amp;gt; from scipy.io.wavfile import read
&amp;gt;&amp;gt;&amp;gt; rate, data = read(&amp;#34;./main.wav&amp;#34;)
&amp;gt;&amp;gt;&amp;gt; print(data)
[2007 2503 2005 ... 4503 4501 7501]
&amp;gt;&amp;gt;&amp;gt; import numpy as np
&amp;gt;&amp;gt;&amp;gt; print(np.unique(data))
[1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1500 1501 1502 1503
 1504 1505 1506 1507 1508 1509 2000 2001 2002 2003 2004 2005 2006 2007
 2008 2009 2500 2501 2502 2503 2504 2505 2506 2507 2508 2509 3000 3001
 3002 3003 3004 3005 3006 3007 3008 3009 3500 3501 3502 3503 3504 3505
 3506 3507 3508 3509 4000 4001 4002 4003 4004 4005 4006 4007 4008 4009
 4500 4501 4502 4503 4504 4505 4506 4507 4508 4509 5000 5001 5002 5003
 5004 5005 5006 5007 5008 5009 5500 5501 5502 5503 5504 5505 5506 5507
 5508 5509 6000 6001 6002 6003 6004 6005 6006 6007 6008 6009 6500 6501
 6502 6503 6504 6505 6506 6507 6508 6509 7000 7001 7002 7003 7004 7005
 7006 7007 7008 7009 7500 7501 7502 7503 7504 7505 7506 7507 7508 7509
 8000 8001 8002 8003 8004 8005 8006 8007 8008 8009 8500 8501 8502 8503
 8504 8505 8506 8507 8508 8509]
&lt;/code>&lt;/pre>Seems it has some rule $\to$
&lt;code>1000 ~ 1009&lt;/code>
&lt;code>1500 ~ 1509&lt;/code>
&lt;code>2000 ~ 2009&lt;/code>
&amp;hellip;
&lt;code>8500 ~ 8509&lt;/code>
It has exactly 16 intervals $\to$ hex value&lt;/li>
&lt;li>Let&amp;rsquo;s try to exploit it&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>Whole exploit
:::spoiler exploit
&lt;pre tabindex="0">&lt;code class="language-python!" data-lang="python!">from scipy.io.wavfile import read
from tqdm import trange

path = &amp;#39;.&amp;#39;
rate, data = read(path + &amp;#34;/main.wav&amp;#34;)

decode_dic = {
 10 : &amp;#34;0&amp;#34;,
 15 : &amp;#34;1&amp;#34;,
 20 : &amp;#34;2&amp;#34;,
 25 : &amp;#34;3&amp;#34;,
 30 : &amp;#34;4&amp;#34;,
 35 : &amp;#34;5&amp;#34;,
 40 : &amp;#34;6&amp;#34;,
 45 : &amp;#34;7&amp;#34;,
 50 : &amp;#34;8&amp;#34;,
 55 : &amp;#34;9&amp;#34;,
 60 : &amp;#34;A&amp;#34;,
 65 : &amp;#34;B&amp;#34;,
 70 : &amp;#34;C&amp;#34;,
 75 : &amp;#34;D&amp;#34;,
 80 : &amp;#34;E&amp;#34;,
 85 : &amp;#34;F&amp;#34;,
}

message = &amp;#39;&amp;#39;
for i in trange(len(data)):
 message += decode_dic[data[i] // 100]

print(bytes.fromhex(message).decode())
&lt;/code>&lt;/pre>:::
Then you can get the source code and flag&amp;hellip;&lt;/li>
&lt;/ul>
&lt;h2 id="reference">
 Reference
 &lt;a class="anchor" href="#reference">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://youtu.be/tDPetapjm74">picoCTF 2021 Surfing the Waves&lt;/a>&lt;/p></description></item><item><title>PicoCTF - Torrent Analyze</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/misc/flow/picoctf---torrent-analyze/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/misc/flow/picoctf---torrent-analyze/</guid><description>&lt;h1 id="picoctf---torrent-analyze">
 PicoCTF - Torrent Analyze
 &lt;a class="anchor" href="#picoctf---torrent-analyze">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://www.techworm.net/2017/03/seeds-peers-leechers-torrents-language.html">What are seeds, peers and leechers in Torrents’ language?&lt;/a>
&lt;a href="https://www.mobile01.com/topicdetail.php?f=507&amp;amp;t=1365797">慎選peer，是加速BT下載的王道！&lt;/a>&lt;/p>
&lt;blockquote>
&lt;ol>
&lt;li>seed個數：seed（即一般所說的「種子」）意指擁有完整檔案的BT參與者，是主要的檔案提供者。seed越多，可用的BT分享頻寬就越多，速度當然就快。&lt;/li>
&lt;li>seed與peer的比例：雖然peer（指尚未取得完整檔案的BT參與者）可同時自seed與其他peer下載檔案，但peer間會彼此競爭，以爭取有限的BT下載頻寬。因此，peer個數越多，分配後的BT分享頻寬就越少，速度自然就受影響。&lt;/li>
&lt;/ol>&lt;/blockquote>
&lt;p>&lt;a href="http://zfly9.blogspot.com/2014/10/hashmethod.html">教你該如何使用bt的info hash特徵碼，下載BT之torrent種子檔&lt;/a>&lt;/p>
&lt;h2 id="description--hint">
 Description &amp;amp; Hint
 &lt;a class="anchor" href="#description--hint">#&lt;/a>
&lt;/h2>
&lt;blockquote>
&lt;p>SOS, someone is torrenting on our network. One of your colleagues has been using torrent to download some files on the company’s network. Can you identify the file(s) that were downloaded? The file name will be the flag, like picoCTF{filename}.
Hint 1: Download and open the file with a packet analyzer like &lt;a href="https://www.wireshark.org/">Wireshark&lt;/a>.
Hint 2: You may want to enable BitTorrent protocol (BT-DHT, etc.) on Wireshark. Analyze -&amp;gt; Enabled Protocols
Hint 3: Try to understand peers, leechers and seeds. &lt;a href="https://www.techworm.net/2017/03/seeds-peers-leechers-torrents-language.html">Article&lt;/a>
Hint 4: The file name ends with &lt;code>.iso&lt;/code>&lt;/p></description></item><item><title>PicoCTF - Trivial Flag Transfer Protocol</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/misc/flow/picoctf---trivial-flag-transfer-protocol/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/misc/flow/picoctf---trivial-flag-transfer-protocol/</guid><description>&lt;h1 id="picoctf---trivial-flag-transfer-protocol">
 PicoCTF - Trivial Flag Transfer Protocol
 &lt;a class="anchor" href="#picoctf---trivial-flag-transfer-protocol">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-misc">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Misc&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-misc">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="https://play.picoctf.org/practice/challenge/103?bookmarked=0&amp;amp;category=4&amp;amp;page=1&amp;amp;search=&amp;amp;solved=0">Trivial Flag Transfer Protocol&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://tw511.com/a/01/2927.html">TFTP協定是什麼？&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.mobile01.com/topicdetail.php?f=110&amp;amp;t=921577">Wireless router中的UPnP是做什麼用的?&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>UPnP 是一種通訊協定，其主要功能是供家中的設備可以輕易的且自動的連結到網路並完成網路相關設定。
不需要您本人手動去設定就可以使用的意思。
所以你的 router 有支援並打開這項功能後，您家中的視訊設備（大部分都是支援UPnP）接上網路、打開電源。
接著你的 作業系統也支援的話，以winodws 為例，「我的電腦」中就會看到您新增的設備，如無線router、media server等等。&lt;/p>&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://ithelp.ithome.com.tw/questions/10002825">SSDP - 通訊協定 ?&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>SSDP的全寫是「Simple Service Discovery Protocol」，使用在Universal Plug and Play (UPnP)網絡環境中。SSDP使用UDP1900連接埠搜尋互聯網上的數據。當SSDP開啟時，其他設置會曝露自己到所有UPnP的用戶端中。&lt;/p>&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://ithelp.ithome.com.tw/articles/10278964">&lt;code>steghide&lt;/code> instruction&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="exploit---tftp--steghide">
 Exploit - TFTP + steghide
 &lt;a class="anchor" href="#exploit---tftp--steghide">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>Save files
According to the article: &lt;a href="https://tw511.com/a/01/2927.html">TFTP協定是什麼？&lt;/a>, we can aware that this protocol is aim to transfer the data without authentication. So, we can download the files using wireshark.
&lt;img src="https://i.imgur.com/rETlGmm.png" alt="" />&lt;/p></description></item><item><title>PicoCTF - WebNet0</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/misc/flow/picoctf---webnet0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/misc/flow/picoctf---webnet0/</guid><description>&lt;h1 id="picoctf---webnet0">
 PicoCTF - WebNet0
 &lt;a class="anchor" href="#picoctf---webnet0">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://blog.csdn.net/walleva96/article/details/106844033">解密TLS協議全記錄之利用wireshark解密&lt;/a>&lt;/p>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>這一題其實就只是利用wireshark把訊息解密就這樣，所以看了一些文章後就按圖施工就好，解密完後就直接string search就找到了&lt;/p>
&lt;h2 id="exploit---tls-decrypt">
 Exploit - TLS Decrypt
 &lt;a class="anchor" href="#exploit---tls-decrypt">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>在&lt;code>Edit/Preferences/RSA Keys/&lt;/code>中&lt;code>Add new keyfile&lt;/code>
&lt;img src="https://hackmd.io/_uploads/ByMdwwSe6.png" alt="" />&lt;/li>
&lt;li>加入題目給的private key file後記得要重新開啟該pcap file
&lt;img src="https://hackmd.io/_uploads/S1PMPDSx6.png" alt="" />&lt;/li>
&lt;/ol></description></item><item><title>PicoCTF - WhitePages</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/misc/general/picoctf---whitepages/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/misc/general/picoctf---whitepages/</guid><description>&lt;h1 id="picoctf---whitepages">
 PicoCTF - WhitePages
 &lt;a class="anchor" href="#picoctf---whitepages">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-misc">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Misc&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-misc">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="https://play.picoctf.org/practice/challenge/51?category=4&amp;amp;page=3">WhitePages&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler source text&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-text!" data-lang="text!">                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p>
&lt;h2 id="exploit---binary-encoding">
 Exploit - Binary Encoding
 &lt;a class="anchor" href="#exploit---binary-encoding">#&lt;/a>
&lt;/h2>
&lt;p>If you use sublime editor to observe the file, then you may see the result as below.
&lt;img src="https://i.imgur.com/ME4F3hm.png" alt="" />
In unicode, &lt;code>&amp;lt;0x2003&amp;gt;&lt;/code> is a kind of white space, then some gap between &lt;code>&amp;lt;0x2003&amp;gt;&lt;/code> is a normal white space. Obviously, this is a binary encoding(&lt;code>&amp;lt;0x2003&amp;gt;&lt;/code> is 0 and normal white space is 1)&lt;/p></description></item><item><title>PicoCTF - Wireshark twoo twooo two twoo...</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/misc/flow/picoctf---wireshark-twoo-twooo-two-twoo_/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/misc/flow/picoctf---wireshark-twoo-twooo-two-twoo_/</guid><description>&lt;h1 id="picoctf---wireshark-twoo-twooo-two-twoo">
 PicoCTF - Wireshark twoo twooo two twoo&amp;hellip;
 &lt;a class="anchor" href="#picoctf---wireshark-twoo-twooo-two-twoo">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-misc">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Misc&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-misc">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="https://play.picoctf.org/practice/challenge/110?category=4&amp;amp;page=1">Wireshark twoo twooo two twoo&amp;hellip;&lt;/a>&lt;/p>
&lt;h2 id="exploit---dns--sub-domain">
 Exploit - DNS + sub-domain
 &lt;a class="anchor" href="#exploit---dns--sub-domain">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>Statistic
Using statistic to analyze http requests and you&amp;rsquo;ll see that there is &lt;code>/flag&lt;/code> and &lt;code>/&lt;/code> in address &lt;code>18.217.1.57&lt;/code>. Maybe it&amp;rsquo;s a clue or key to find flag
&lt;img src="https://i.imgur.com/VjobDhE.png" alt="" />&lt;/p>
&lt;/li>
&lt;li>
&lt;p>String search technique&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ strings shark2.pcapng | grep &amp;#34;pico&amp;#34;
picoCTF{bfe48e8500c454d647c55a4471985e776a07b26cba64526713f43758599aa98b}
picoCTF{bda69bdf8f570a9aaab0e4108a0fa5f64cb26ba7d2269bb63f68af5d98b98245}
picoCTF{fe83bcb6cfd43d3b79392f6a4232685f6ed4e7a789c2ce559cf3c1ab6adbe34b}
picoCTF{711d3893d90f100c15e10ef4842abeed3a830f8237c1257cd47389646da97810}
picoCTF{3cf1e22d489fcfb6bb312a34f46c8699989ed043406134331452d11ce73cd59e}
picoCTF{b4cc138bb0f7f9da7e35085e349555aa6d00bdca3b021c1fe8663c0a422ce0d7}
picoCTF{41b8a1a796bd8d202016f75bc5b38889e9ea06007e6b22fc856d380fb7573133}
...
&lt;/code>&lt;/pre>&lt;p>You&amp;rsquo;ll find tons of fake flag. Obviously, it&amp;rsquo;s a trap to distract you.&lt;/p></description></item><item><title>PicoCTF - WPA-ing Out</title><link>https://bernie6401.github.io/docs/security/practice/picoctf/misc/flow/picoctf---wpa-ing-out/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/picoctf/misc/flow/picoctf---wpa-ing-out/</guid><description>&lt;h1 id="picoctf---wpa-ing-out">
 PicoCTF - WPA-ing Out
 &lt;a class="anchor" href="#picoctf---wpa-ing-out">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-picoctf-ctf-misc">
 tags: &lt;code>PicoCTF&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Misc&lt;/code>
 &lt;a class="anchor" href="#tags-picoctf-ctf-misc">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="https://play.picoctf.org/practice/challenge/206?category=4&amp;amp;page=2">WPA-ing Out&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://ithelp.ithome.com.tw/articles/10280033">Day 26 Wireless Attacks-無線攻擊(aircrack-ng)&lt;/a>&lt;/p>
&lt;h2 id="description--hint">
 Description &amp;amp; Hint
 &lt;a class="anchor" href="#description--hint">#&lt;/a>
&lt;/h2>
&lt;blockquote>
&lt;p>I thought that my password was super-secret, but it turns out that passwords passed over the AIR can be CRACKED, especially if I used the same wireless network password as one in the &lt;font color="FF0000">&lt;code>rockyou.txt&lt;/code>&lt;/font> credential dump. Use this &lt;a href="https://artifacts.picoctf.net/c/8/wpa-ing_out.pcap">&lt;code>pcap file&lt;/code>&lt;/a> and the &lt;code>rockyou&lt;/code> wordlist. The flag should be entered in the &lt;code>picoCTF{XXXXXX}&lt;/code> format.&lt;/p></description></item></channel></rss>