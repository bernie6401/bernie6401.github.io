<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>SBK Site</title><link>https://bernie6401.github.io/docs/security/practice/portswigger-web-security-academy/xss/</link><description>Recent content on SBK Site</description><generator>Hugo</generator><language>en-us</language><atom:link href="https://bernie6401.github.io/docs/security/practice/portswigger-web-security-academy/xss/index.xml" rel="self" type="application/rss+xml"/><item><title>Lab: DOM XSS in `document.write` sink using source `location.search` inside a select element</title><link>https://bernie6401.github.io/docs/security/practice/portswigger-web-security-academy/xss/lab_-dom-xss-in-document.write-sink-using-source-location.search-inside-a-select-element/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/portswigger-web-security-academy/xss/lab_-dom-xss-in-document.write-sink-using-source-location.search-inside-a-select-element/</guid><description>&lt;h1 id="lab-dom-xss-in-documentwrite-sink-using-source-locationsearch-inside-a-select-element">
 Lab: DOM XSS in &lt;code>document.write&lt;/code> sink using source &lt;code>location.search&lt;/code> inside a select element
 &lt;a class="anchor" href="#lab-dom-xss-in-documentwrite-sink-using-source-locationsearch-inside-a-select-element">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-portswigger-web-security-academy-web">
 tags: &lt;code>Portswigger Web Security Academy&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-portswigger-web-security-academy-web">#&lt;/a>
&lt;/h6>
&lt;ul>
&lt;li>Description: This lab contains a DOM-based cross-site scripting vulnerability in the stock checker functionality. It uses the JavaScript &lt;code>document.write&lt;/code> function, which writes data out to the page. The &lt;code>document.write&lt;/code> function is called with data from &lt;code>location.search&lt;/code> which you can control using the website URL. The data is enclosed within a select element.&lt;/li>
&lt;li>Goal: To solve this lab, perform a cross-site scripting attack that breaks out of the select element and calls the &lt;code>alert&lt;/code> function.&lt;/li>
&lt;/ul>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>Find the injection place
I used string search to find &lt;code>location.search&lt;/code> in each sub-page source.
Here is the interesting code:
:::spoiler Source Code
&lt;pre tabindex="0">&lt;code class="language-javascript!" data-lang="javascript!">...
&amp;lt;script&amp;gt;
 var stores = [&amp;#34;London&amp;#34;,&amp;#34;Paris&amp;#34;,&amp;#34;Milan&amp;#34;];
 var store = (new URLSearchParams(window.location.search)).get(&amp;#39;storeId&amp;#39;);
 document.write(&amp;#39;&amp;lt;select name=&amp;#34;storeId&amp;#34;&amp;gt;&amp;#39;);
 if(store) {
 document.write(&amp;#39;&amp;lt;option selected&amp;gt;&amp;#39;+store+&amp;#39;&amp;lt;/option&amp;gt;&amp;#39;);
 }
 for(var i=0;i&amp;lt;stores.length;i++) {
 if(stores[i] === store) {
 continue;
 }
 document.write(&amp;#39;&amp;lt;option&amp;gt;&amp;#39;+stores[i]+&amp;#39;&amp;lt;/option&amp;gt;&amp;#39;);
 }
 document.write(&amp;#39;&amp;lt;/select&amp;gt;&amp;#39;);
&amp;lt;/script&amp;gt;
...
&lt;/code>&lt;/pre>:::&lt;/li>
&lt;li>Try type something about &lt;code>storeID&lt;/code> as URL GET parameter
Payload: &lt;code>/product?productId=1&amp;amp;storeId=abc&lt;/code>
&lt;img src="https://i.imgur.com/KKbTF8f.png" alt="" />
You can see that this is a perfect injection place&lt;/li>
&lt;/ol>
&lt;h2 id="exp">
 Exp
 &lt;a class="anchor" href="#exp">#&lt;/a>
&lt;/h2>
&lt;p>Payload: &lt;code>/product?productId=1&amp;amp;storeId=&amp;lt;script&amp;gt;alert(123);&amp;lt;/script&amp;gt;&lt;/code>
:::spoiler Success Screenshot
&lt;img src="https://i.imgur.com/bjEoUzh.png" alt="" />
:::&lt;/p></description></item><item><title>Lab: Stored DOM XSS</title><link>https://bernie6401.github.io/docs/security/practice/portswigger-web-security-academy/xss/lab_-stored-dom-xss/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/portswigger-web-security-academy/xss/lab_-stored-dom-xss/</guid><description>&lt;h1 id="lab-stored-dom-xss">
 Lab: Stored DOM XSS
 &lt;a class="anchor" href="#lab-stored-dom-xss">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-portswigger-web-security-academy-web">
 tags: &lt;code>Portswigger Web Security Academy&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-portswigger-web-security-academy-web">#&lt;/a>
&lt;/h6>
&lt;ul>
&lt;li>Description: This lab demonstrates a stored DOM vulnerability in the blog comment functionality.&lt;/li>
&lt;li>Goal: To solve this lab, exploit this vulnerability to call the &lt;code>alert()&lt;/code> function.&lt;/li>
&lt;/ul>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>Find the injected place
According to the description, we know that the comment place of each post has some problems. So, we can try to inject something.&lt;/p></description></item><item><title>XSS - APPRENTICE</title><link>https://bernie6401.github.io/docs/security/practice/portswigger-web-security-academy/xss/xss---apprentice/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/portswigger-web-security-academy/xss/xss---apprentice/</guid><description>&lt;h1 id="xss---apprentice">
 XSS - APPRENTICE
 &lt;a class="anchor" href="#xss---apprentice">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-portswigger-web-security-academy-web">
 tags: &lt;code>Portswigger Web Security Academy&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-portswigger-web-security-academy-web">#&lt;/a>
&lt;/h6>
&lt;p>[TOC]&lt;/p>
&lt;h2 id="lab-reflected-xss-into-html-context-with-nothing-encodedzero">
 Lab: Reflected XSS into HTML context with nothing encoded:zero:
 &lt;a class="anchor" href="#lab-reflected-xss-into-html-context-with-nothing-encodedzero">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>Description: This lab contains a simple reflected cross-site scripting vulnerability in the search functionality.&lt;/li>
&lt;li>Goal: To solve the lab, perform a cross-site scripting attack that calls the alert function.&lt;/li>
&lt;/ul>
&lt;h3 id="exp">
 Exp
 &lt;a class="anchor" href="#exp">#&lt;/a>
&lt;/h3>
&lt;p>Payload: &lt;code>&amp;lt;script&amp;gt;alert(123)&amp;lt;/script&amp;gt;&lt;/code>
:::spoiler Success Screenshot
&lt;img src="https://i.imgur.com/tvfxD4P.png" alt="" />
:::&lt;/p>
&lt;hr>
&lt;h2 id="lab-stored-xss-into-html-context-with-nothing-encoded">
 Lab: Stored XSS into HTML context with nothing encoded
 &lt;a class="anchor" href="#lab-stored-xss-into-html-context-with-nothing-encoded">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>Description: This lab contains a stored cross-site scripting vulnerability in the comment functionality.&lt;/li>
&lt;li>Goal: To solve this lab, submit a comment that calls the alert function when the blog post is viewed.&lt;/li>
&lt;/ul>
&lt;h3 id="exp-1">
 Exp
 &lt;a class="anchor" href="#exp-1">#&lt;/a>
&lt;/h3>
&lt;p>You need to click into one post and comment something that contained script tag.
Payload: &lt;code>&amp;lt;script&amp;gt;alert(123)&amp;lt;/script&amp;gt;&lt;/code>
:::spoiler Success Screenshot
&lt;img src="https://i.imgur.com/aArBCbN.png" alt="" />
:::&lt;/p></description></item></channel></rss>