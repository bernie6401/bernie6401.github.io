<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>SBK Hugo Site</title><link>https://bernie6401.github.io/docs/security/practice/adworld/misc/</link><description>Recent content on SBK Hugo Site</description><generator>Hugo</generator><language>en-us</language><atom:link href="https://bernie6401.github.io/docs/security/practice/adworld/misc/index.xml" rel="self" type="application/rss+xml"/><item><title>Adworld - 3-1</title><link>https://bernie6401.github.io/docs/security/practice/adworld/misc/adworld---3-1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/adworld/misc/adworld---3-1/</guid><description>&lt;h1 id="adworld---3-1">
 Adworld - 3-1
 &lt;a class="anchor" href="#adworld---3-1">#&lt;/a>
&lt;/h1>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>這一題很簡單，和之前幾題有點像&lt;/p>
&lt;ol>
&lt;li>用file看一下給的檔案是一個&lt;code>.rar&lt;/code>壓縮檔，改個副檔名後解壓縮出現另外一個檔案&lt;/li>
&lt;li>再用file看一下是一個pcapng檔案，用wireshark分析&lt;/li>
&lt;li>用一些基本的技巧(Follow TCP Stream/Extract Object&amp;hellip;)看tcp stream，會發現一個bash的command紀錄，有一個python enc/dec flow，和一串base64的string，除此之外還可以用extract object把一些file dump下來，發現是另外一個加密的flag.rar檔案，我們的任務就是要從這個pcapng檔案中把加密的密碼找出來
&lt;img src="https://hackmd.io/_uploads/H1iy1vf5h.png" alt="" />&lt;/li>
&lt;li>用python腳本解密base64 string，會輸出&lt;code>b'passwd={No_One_Can_Decrypt_Me}\x00\x00'&lt;/code>&lt;/li>
&lt;li>解密壓縮檔flag就出來了&lt;/li>
&lt;/ol>
&lt;h2 id="exploit">
 Exploit
 &lt;a class="anchor" href="#exploit">#&lt;/a>
&lt;/h2>
&lt;p>Write Byte Data&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> base64 &lt;span style="color:#f92672">import&lt;/span> b64decode
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> zipfile
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>f &lt;span style="color:#f92672">=&lt;/span> open(&lt;span style="color:#e6db74">&amp;#39;./basezip.txt&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;r&amp;#39;&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>read()&lt;span style="color:#f92672">.&lt;/span>split(&lt;span style="color:#e6db74">&amp;#39;,&amp;#39;&lt;/span>)[&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>f1 &lt;span style="color:#f92672">=&lt;/span> open(&lt;span style="color:#e6db74">&amp;#39;./cipher.zip&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;wb&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>f1&lt;span style="color:#f92672">.&lt;/span>write(b64decode(f))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(bytes&lt;span style="color:#f92672">.&lt;/span>fromhex(b64decode(f)&lt;span style="color:#f92672">.&lt;/span>hex())&lt;span style="color:#f92672">.&lt;/span>decode(&lt;span style="color:#e6db74">&amp;#39;cp437&amp;#39;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>f1&lt;span style="color:#f92672">.&lt;/span>close()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Decrypt Part&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> Crypto.Cipher &lt;span style="color:#f92672">import&lt;/span> AES
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> base64
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>IV &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#39;QWERTYUIOPASDFGH&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>str1 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;19aaFYsQQKr+hVX6hl2smAUQ5a767TsULEUebWSajEo=&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">decrypt&lt;/span>(encrypted):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> aes &lt;span style="color:#f92672">=&lt;/span> AES&lt;span style="color:#f92672">.&lt;/span>new(IV, AES&lt;span style="color:#f92672">.&lt;/span>MODE_CBC, IV)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> aes&lt;span style="color:#f92672">.&lt;/span>decrypt(encrypted)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">encrypt&lt;/span>(message):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> length &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">16&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> count &lt;span style="color:#f92672">=&lt;/span> len(message)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> padding &lt;span style="color:#f92672">=&lt;/span> length &lt;span style="color:#f92672">-&lt;/span> (count &lt;span style="color:#f92672">%&lt;/span> length)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> message &lt;span style="color:#f92672">=&lt;/span> message &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#ae81ff">\0&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span> &lt;span style="color:#f92672">*&lt;/span> padding
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> aes &lt;span style="color:#f92672">=&lt;/span> AES&lt;span style="color:#f92672">.&lt;/span>new(IV, AES&lt;span style="color:#f92672">.&lt;/span>MODE_CBC, IV)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> aes&lt;span style="color:#f92672">.&lt;/span>encrypt(message)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>str &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;this is a test&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>example &lt;span style="color:#f92672">=&lt;/span> decrypt(base64&lt;span style="color:#f92672">.&lt;/span>b64decode(str1))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(example)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="reference">
 Reference
 &lt;a class="anchor" href="#reference">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://blog.csdn.net/yoyoko_chan/article/details/117660494">【攻防世界AD】Misc进阶区：3-1&lt;/a>&lt;/p></description></item><item><title>Adworld - miao~</title><link>https://bernie6401.github.io/docs/security/practice/adworld/misc/adworld---miao~/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/adworld/misc/adworld---miao~/</guid><description>&lt;h1 id="adworld---miao">
 Adworld - miao~
 &lt;a class="anchor" href="#adworld---miao">#&lt;/a>
&lt;/h1>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>這題也是看了別人的WP&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>和官解&lt;/p>
&lt;h2 id="exploit">
 Exploit
 &lt;a class="anchor" href="#exploit">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>用foremost搜索或救援檔案(神奇的解法，一開始完全想不到)&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ foremost -v miao\~.jpg
Foremost version 1.5.7 by Jesse Kornblum, Kris Kendall, and Nick Mikus
Audit File

Foremost started at Sat Jul 15 15:21:29 2023
Invocation: foremost -v miao~.jpg
Output directory: /home/sbk6401/CTF/Adworld/Misc/miao~/output
Configuration file: /etc/foremost.conf
Processing: miao~.jpg
|------------------------------------------------------------------
File: miao~.jpg
Start: Sat Jul 15 15:21:29 2023
Length: 1 MB (1242752 bytes)

Num Name (bs=512) Size File Offset Comment

0: 00000000.jpg 55 KB 0
1: 00000111.wav 1 MB 57212
*|
Finish: Sat Jul 15 15:21:29 2023

2 FILES EXTRACTED

jpg:= 1
rif:= 1
------------------------------------------------------------------

Foremost finished at Sat Jul 15 15:21:29 2023
&lt;/code>&lt;/pre>&lt;p>可以看到抓到其中有一個&lt;code>.wav&lt;/code>檔案&lt;/p></description></item><item><title>Adworld - Misc文件類型</title><link>https://bernie6401.github.io/docs/security/practice/adworld/misc/adworld---misc%E6%96%87%E4%BB%B6%E9%A1%9E%E5%9E%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/adworld/misc/adworld---misc%E6%96%87%E4%BB%B6%E9%A1%9E%E5%9E%8B/</guid><description>&lt;h1 id="adworld---misc文件類型">
 Adworld - Misc文件類型
 &lt;a class="anchor" href="#adworld---misc%e6%96%87%e4%bb%b6%e9%a1%9e%e5%9e%8b">#&lt;/a>
&lt;/h1>
&lt;h2 id="source-code">
 Source Code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code>3436455341425F554573444242514141
41414941416C64434658714F7737634B
4141414143594141414149414141415A
6D78685A7935306548524C79306C4D72
7A5A49536B303253457778546B6B304D
6A5130546A593353445531534573784E
544D3054374A494E552B7A7241554155
45734241685141464141414141674143
56304956656F374474776F414141414A
674141414167414A4141414141414141
414167414141414141414141475A7359
57637564486830436741674141414141
41414241426741477845666B39697132
41456245522B54324B725941514A462B
34725971746742554573464267414141
41414241414541576741414145344141
4141414141
&lt;/code>&lt;/pre>&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>這一題有一點通靈，沒有很喜歡&lt;/p>
&lt;ol>
&lt;li>首先給的cipher很明顯是ascii的hex&lt;/li>
&lt;li>轉換過後也很明顯是base64&lt;/li>
&lt;li>在轉換過後，只有底線後面的部分要轉換成hex&lt;/li>
&lt;li>如果把東西print出來的話會看到flag.txt的字樣，感覺上是一個file的byte code，到file signature去看會發現magic header是一個zip file，uncompress之後就會發現flag.txt
&lt;img src="https://hackmd.io/_uploads/H10OlHGch.png" alt="" />&lt;/li>
&lt;/ol>
&lt;h2 id="exploit">
 Exploit
 &lt;a class="anchor" href="#exploit">#&lt;/a>
&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> base64
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cipher &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;3436455341425F55457344424251414141414941416C64434658714F7737634B4141414143594141414149414141415A6D78685A7935306548524C79306C4D727A5A49536B303253457778546B6B304D6A5130546A593353445531534573784E544D3054374A494E552B7A72415541554573424168514146414141414167414356304956656F374474776F414141414A674141414167414A4141414141414141414167414141414141414141475A73595763756448683043674167414141414141414241426741477845666B3969713241456245522B54324B725941514A462B34725971746742554573464267414141414142414145415767414141453441414141414141&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cipher &lt;span style="color:#f92672">=&lt;/span> bytes&lt;span style="color:#f92672">.&lt;/span>fromhex(cipher)&lt;span style="color:#f92672">.&lt;/span>decode(&lt;span style="color:#e6db74">&amp;#39;utf-8&amp;#39;&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>split(&lt;span style="color:#e6db74">&amp;#34;_&amp;#34;&lt;/span>)[&lt;span style="color:#ae81ff">1&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cipher &lt;span style="color:#f92672">=&lt;/span> base64&lt;span style="color:#f92672">.&lt;/span>b64decode(cipher &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;==&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>f &lt;span style="color:#f92672">=&lt;/span> open(&lt;span style="color:#e6db74">&amp;#34;./cipher.zip&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;wb&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>f&lt;span style="color:#f92672">.&lt;/span>write(cipher)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>f&lt;span style="color:#f92672">.&lt;/span>close()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> zipfile
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">with&lt;/span> zipfile&lt;span style="color:#f92672">.&lt;/span>ZipFile(&lt;span style="color:#e6db74">&amp;#39;./cipher.zip&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;r&amp;#39;&lt;/span>) &lt;span style="color:#66d9ef">as&lt;/span> zip_ref:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> zip_ref&lt;span style="color:#f92672">.&lt;/span>extractall(&lt;span style="color:#e6db74">&amp;#39;./&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>f &lt;span style="color:#f92672">=&lt;/span> open(&lt;span style="color:#e6db74">&amp;#39;./flag.txt&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;r&amp;#39;&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>read()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(f)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ python exp.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>flag&lt;span style="color:#f92672">{&lt;/span>0bec0ad3da2113c70e50fd5617b8e7f9&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="reference">
 Reference
 &lt;a class="anchor" href="#reference">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://juejin.cn/post/7166166845395828772">XCTF-MISC-Misc文件類型&lt;/a>&lt;/p></description></item><item><title>Adworld - pure_color</title><link>https://bernie6401.github.io/docs/security/practice/adworld/misc/adworld---pure_color/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/adworld/misc/adworld---pure_color/</guid><description>&lt;h1 id="adworld---pure_color">
 Adworld - pure_color
 &lt;a class="anchor" href="#adworld---pure_color">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-adworld-ctf-misc">
 tags: &lt;code>Adworld&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Misc&lt;/code>
 &lt;a class="anchor" href="#tags-adworld-ctf-misc">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="https://adworld.xctf.org.cn/challenges/details?hash=f216ffab-e01d-46b8-9d4d-d91ab5229eed_2&amp;amp;task_category_id=1">https://adworld.xctf.org.cn/challenges/details?hash=f216ffab-e01d-46b8-9d4d-d91ab5229eed_2&amp;task_category_id=1&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://ithelp.ithome.com.tw/articles/10278407">【Day21】隱寫技術 Steganography&lt;/a>
&lt;a href="https://blog.csdn.net/dyw_666666/article/details/88650738">图片隐写查看神器stegsolve使用方法&lt;/a>
&lt;a href="https://github.com/zardus/ctf-tools/blob/master/stegsolve/install"> zardus/ctf-tools - stegsolve&lt;/a>&lt;/p>
&lt;h2 id="exploit---basic-steganography">
 Exploit - Basic Steganography
 &lt;a class="anchor" href="#exploit---basic-steganography">#&lt;/a>
&lt;/h2>
&lt;p>&lt;img src="https://i.imgur.com/YnqxcmS.png" alt="" />&lt;/p></description></item><item><title>Adworld - 心儀的公司</title><link>https://bernie6401.github.io/docs/security/practice/adworld/misc/adworld---%E5%BF%83%E5%84%80%E7%9A%84%E5%85%AC%E5%8F%B8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/adworld/misc/adworld---%E5%BF%83%E5%84%80%E7%9A%84%E5%85%AC%E5%8F%B8/</guid><description>&lt;h1 id="adworld---心儀的公司">
 Adworld - 心儀的公司
 &lt;a class="anchor" href="#adworld---%e5%bf%83%e5%84%80%e7%9a%84%e5%85%ac%e5%8f%b8">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-adworld-ctf-misc">
 tags: &lt;code>Adworld&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Misc&lt;/code>
 &lt;a class="anchor" href="#tags-adworld-ctf-misc">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="https://adworld.xctf.org.cn/challenges/details?hash=ed5d10bf-be47-4e61-b04e-3a9ccb73ff95_2&amp;amp;task_category_id=1">https://adworld.xctf.org.cn/challenges/details?hash=ed5d10bf-be47-4e61-b04e-3a9ccb73ff95_2&amp;task_category_id=1&lt;/a>&lt;/p>
&lt;h2 id="exploit">
 Exploit
 &lt;a class="anchor" href="#exploit">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ strings webshell.pcapng | grep &amp;#34;{&amp;#34;
...
fl4g:{ftop_Is_Waiting_4_y}
&lt;/code>&lt;/pre>&lt;h2 id="reference">
 Reference
 &lt;a class="anchor" href="#reference">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://www.cnblogs.com/Flat-White/p/13526539.html">心仪的公司writeup&lt;/a>
&lt;a href="https://www.bilibili.com/video/BV1r5411h7aw/?p=2&amp;amp;share_source=copy_web&amp;amp;vd_source=31529c2d248aba29c9cc1e3cbd720cb6&amp;amp;t=294">【CTF视频合辑】MISC-流量分析题大集合(第一辑)&lt;/a>&lt;/p></description></item><item><title>Adworld - 適合作為桌面</title><link>https://bernie6401.github.io/docs/security/practice/adworld/misc/adworld---%E9%81%A9%E5%90%88%E4%BD%9C%E7%82%BA%E6%A1%8C%E9%9D%A2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/adworld/misc/adworld---%E9%81%A9%E5%90%88%E4%BD%9C%E7%82%BA%E6%A1%8C%E9%9D%A2/</guid><description>&lt;h1 id="adworld---適合作為桌面">
 Adworld - 適合作為桌面
 &lt;a class="anchor" href="#adworld---%e9%81%a9%e5%90%88%e4%bd%9c%e7%82%ba%e6%a1%8c%e9%9d%a2">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-adworld-ctf-misc">
 tags: &lt;code>Adworld&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Misc&lt;/code>
 &lt;a class="anchor" href="#tags-adworld-ctf-misc">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="https://adworld.xctf.org.cn/challenges/details?hash=7a4e06c0-811c-4493-a628-886dc5bd59b4_2&amp;amp;task_category_id=1">適合作為桌面&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://ithelp.ithome.com.tw/articles/10185442">Day8 Python基礎-pyc是什麼&lt;/a>&lt;/p>
&lt;h2 id="exploit">
 Exploit
 &lt;a class="anchor" href="#exploit">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>Analyze Steganography
&lt;img src="https://i.imgur.com/AwAHrxC.png" alt="" />&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://products.aspose.app/barcode/recognize/qr#/recognized">QR Code Reader&lt;/a>&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-!" data-lang
&lt;/code>&lt;/pre>&lt;p>It seems a byte code of a file.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>HxD
&lt;img src="https://i.imgur.com/ntC6hJ3.png" alt="" />
It can be disassembled by pyc tools.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://tool.lu/pyc/">&lt;code>pyc&lt;/code> disassemble&lt;/a>
:::spoiler&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-python=" data-lang="python=">def flag():
 str = [
 102,
 108,
 97,
 103,
 123,
 51,
 56,
 97,
 53,
 55,
 48,
 51,
 50,
 48,
 56,
 53,
 52,
 52,
 49,
 101,
 55,
 125,
 ]
 flag = &amp;#34;&amp;#34;
 for i in str:
 flag += chr(i)
 print flag
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item></channel></rss>