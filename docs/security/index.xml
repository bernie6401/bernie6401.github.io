<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>SBK Hugo Site</title><link>https://bernie6401.github.io/docs/security/</link><description>Recent content on SBK Hugo Site</description><generator>Hugo</generator><language>en-us</language><atom:link href="https://bernie6401.github.io/docs/security/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://bernie6401.github.io/docs/security/practice/crewctf/reverse/crewctf---ohphp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/crewctf/reverse/crewctf---ohphp/</guid><description>&lt;h1 id="crewctf---ohphp">
 CrewCTF - OhPHP
 &lt;a class="anchor" href="#crewctf---ohphp">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://www.wibibi.com/info.php?tid=96">PHP - substr()&lt;/a>
:::spoiler
&lt;blockquote>
&lt;p>&lt;code>substr( $string , $start , $length )&lt;/code>
&lt;code>$strting&lt;/code> 是原始的字串，&lt;code>$start&lt;/code> 是要開始擷取的位置，&lt;code>$length&lt;/code> 則為要截取的字串長度，要注要的是 &lt;code>$start&lt;/code> 與 $length 都必須為數字才有作用，可以是正整數，也可以是負整數，以下提供幾個範例參考。
:::&lt;/p>&lt;/blockquote>
&lt;/li>
&lt;li>&lt;a href="https://www.runoob.com/php/func-string-strstr.html">PHP - strstr()&lt;/a>
:::spoiler
&lt;blockquote>
&lt;p>查找 &amp;ldquo;world&amp;rdquo; 在 &amp;ldquo;Hello world!&amp;rdquo; 中是否存在，如果是，返回該字符串及後面剩餘部分&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;?&lt;/span>&lt;span style="color:#a6e22e">php&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">echo&lt;/span> &lt;span style="color:#a6e22e">strstr&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Hello world!&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;world&amp;#34;&lt;/span>); &lt;span style="color:#75715e">// 輸出 world!
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">?&amp;gt;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote>
:::&lt;/li>
&lt;li>&lt;a href="https://www.runoob.com/php/func-string-strrev.html">PHP - strrev()&lt;/a>
:::spoiler
&lt;blockquote>
&lt;p>反轉字符串 &amp;ldquo;Hello World!&amp;quot;：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;?&lt;/span>&lt;span style="color:#a6e22e">php&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">echo&lt;/span> &lt;span style="color:#a6e22e">strrev&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Hello world!&amp;#34;&lt;/span>); &lt;span style="color:#75715e">// 輸出!dlroW olleH 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">?&amp;gt;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote>
:::&lt;/li>
&lt;li>&lt;a href="https://www.w3school.com.cn/php/func_string_strnatcmp.asp">PHP strnatcmp()&lt;/a>
:::spoiler
&lt;blockquote>
&lt;p>使用&amp;quot;自然&amp;quot;算法來比較兩個字符串（區分大小寫）：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;?&lt;/span>&lt;span style="color:#a6e22e">php&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">echo&lt;/span> &lt;span style="color:#a6e22e">strnatcmp&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;2Hello world!&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;10Hello world!&amp;#34;&lt;/span>); &lt;span style="color:#75715e">// 輸出-1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">echo&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;lt;br&amp;gt;&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">echo&lt;/span> &lt;span style="color:#a6e22e">strnatcmp&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;10Hello world!&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;2Hello world!&amp;#34;&lt;/span>); &lt;span style="color:#75715e">// 輸出+1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">?&amp;gt;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>strnatcmp() 函數使用一種&amp;quot;自然&amp;quot;算法來比較兩個字符串。
在自然算法中，數字 2 小於數字 10。在計算機排序中，10 小於 2，這是因為 10 中的第一個數字小於 2。
:::&lt;/p></description></item><item><title>Adworld - 3-1</title><link>https://bernie6401.github.io/docs/security/practice/adworld/misc/adworld---3-1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/adworld/misc/adworld---3-1/</guid><description>&lt;h1 id="adworld---3-1">
 Adworld - 3-1
 &lt;a class="anchor" href="#adworld---3-1">#&lt;/a>
&lt;/h1>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>這一題很簡單，和之前幾題有點像&lt;/p>
&lt;ol>
&lt;li>用file看一下給的檔案是一個&lt;code>.rar&lt;/code>壓縮檔，改個副檔名後解壓縮出現另外一個檔案&lt;/li>
&lt;li>再用file看一下是一個pcapng檔案，用wireshark分析&lt;/li>
&lt;li>用一些基本的技巧(Follow TCP Stream/Extract Object&amp;hellip;)看tcp stream，會發現一個bash的command紀錄，有一個python enc/dec flow，和一串base64的string，除此之外還可以用extract object把一些file dump下來，發現是另外一個加密的flag.rar檔案，我們的任務就是要從這個pcapng檔案中把加密的密碼找出來
&lt;img src="https://hackmd.io/_uploads/H1iy1vf5h.png" alt="" />&lt;/li>
&lt;li>用python腳本解密base64 string，會輸出&lt;code>b'passwd={No_One_Can_Decrypt_Me}\x00\x00'&lt;/code>&lt;/li>
&lt;li>解密壓縮檔flag就出來了&lt;/li>
&lt;/ol>
&lt;h2 id="exploit">
 Exploit
 &lt;a class="anchor" href="#exploit">#&lt;/a>
&lt;/h2>
&lt;p>Write Byte Data&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> base64 &lt;span style="color:#f92672">import&lt;/span> b64decode
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> zipfile
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>f &lt;span style="color:#f92672">=&lt;/span> open(&lt;span style="color:#e6db74">&amp;#39;./basezip.txt&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;r&amp;#39;&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>read()&lt;span style="color:#f92672">.&lt;/span>split(&lt;span style="color:#e6db74">&amp;#39;,&amp;#39;&lt;/span>)[&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>f1 &lt;span style="color:#f92672">=&lt;/span> open(&lt;span style="color:#e6db74">&amp;#39;./cipher.zip&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;wb&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>f1&lt;span style="color:#f92672">.&lt;/span>write(b64decode(f))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(bytes&lt;span style="color:#f92672">.&lt;/span>fromhex(b64decode(f)&lt;span style="color:#f92672">.&lt;/span>hex())&lt;span style="color:#f92672">.&lt;/span>decode(&lt;span style="color:#e6db74">&amp;#39;cp437&amp;#39;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>f1&lt;span style="color:#f92672">.&lt;/span>close()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Decrypt Part&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> Crypto.Cipher &lt;span style="color:#f92672">import&lt;/span> AES
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> base64
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>IV &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#39;QWERTYUIOPASDFGH&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>str1 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;19aaFYsQQKr+hVX6hl2smAUQ5a767TsULEUebWSajEo=&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">decrypt&lt;/span>(encrypted):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> aes &lt;span style="color:#f92672">=&lt;/span> AES&lt;span style="color:#f92672">.&lt;/span>new(IV, AES&lt;span style="color:#f92672">.&lt;/span>MODE_CBC, IV)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> aes&lt;span style="color:#f92672">.&lt;/span>decrypt(encrypted)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">encrypt&lt;/span>(message):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> length &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">16&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> count &lt;span style="color:#f92672">=&lt;/span> len(message)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> padding &lt;span style="color:#f92672">=&lt;/span> length &lt;span style="color:#f92672">-&lt;/span> (count &lt;span style="color:#f92672">%&lt;/span> length)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> message &lt;span style="color:#f92672">=&lt;/span> message &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#ae81ff">\0&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span> &lt;span style="color:#f92672">*&lt;/span> padding
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> aes &lt;span style="color:#f92672">=&lt;/span> AES&lt;span style="color:#f92672">.&lt;/span>new(IV, AES&lt;span style="color:#f92672">.&lt;/span>MODE_CBC, IV)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> aes&lt;span style="color:#f92672">.&lt;/span>encrypt(message)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>str &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;this is a test&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>example &lt;span style="color:#f92672">=&lt;/span> decrypt(base64&lt;span style="color:#f92672">.&lt;/span>b64decode(str1))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(example)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="reference">
 Reference
 &lt;a class="anchor" href="#reference">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://blog.csdn.net/yoyoko_chan/article/details/117660494">【攻防世界AD】Misc进阶区：3-1&lt;/a>&lt;/p></description></item><item><title>Adworld - miao~</title><link>https://bernie6401.github.io/docs/security/practice/adworld/misc/adworld---miao~/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/adworld/misc/adworld---miao~/</guid><description>&lt;h1 id="adworld---miao">
 Adworld - miao~
 &lt;a class="anchor" href="#adworld---miao">#&lt;/a>
&lt;/h1>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>這題也是看了別人的WP&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>和官解&lt;/p>
&lt;h2 id="exploit">
 Exploit
 &lt;a class="anchor" href="#exploit">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>用foremost搜索或救援檔案(神奇的解法，一開始完全想不到)&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ foremost -v miao\~.jpg
Foremost version 1.5.7 by Jesse Kornblum, Kris Kendall, and Nick Mikus
Audit File

Foremost started at Sat Jul 15 15:21:29 2023
Invocation: foremost -v miao~.jpg
Output directory: /home/sbk6401/CTF/Adworld/Misc/miao~/output
Configuration file: /etc/foremost.conf
Processing: miao~.jpg
|------------------------------------------------------------------
File: miao~.jpg
Start: Sat Jul 15 15:21:29 2023
Length: 1 MB (1242752 bytes)

Num Name (bs=512) Size File Offset Comment

0: 00000000.jpg 55 KB 0
1: 00000111.wav 1 MB 57212
*|
Finish: Sat Jul 15 15:21:29 2023

2 FILES EXTRACTED

jpg:= 1
rif:= 1
------------------------------------------------------------------

Foremost finished at Sat Jul 15 15:21:29 2023
&lt;/code>&lt;/pre>&lt;p>可以看到抓到其中有一個&lt;code>.wav&lt;/code>檔案&lt;/p></description></item><item><title>Adworld - Misc文件類型</title><link>https://bernie6401.github.io/docs/security/practice/adworld/misc/adworld---misc%E6%96%87%E4%BB%B6%E9%A1%9E%E5%9E%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/adworld/misc/adworld---misc%E6%96%87%E4%BB%B6%E9%A1%9E%E5%9E%8B/</guid><description>&lt;h1 id="adworld---misc文件類型">
 Adworld - Misc文件類型
 &lt;a class="anchor" href="#adworld---misc%e6%96%87%e4%bb%b6%e9%a1%9e%e5%9e%8b">#&lt;/a>
&lt;/h1>
&lt;h2 id="source-code">
 Source Code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code>3436455341425F554573444242514141
41414941416C64434658714F7737634B
4141414143594141414149414141415A
6D78685A7935306548524C79306C4D72
7A5A49536B303253457778546B6B304D
6A5130546A593353445531534573784E
544D3054374A494E552B7A7241554155
45734241685141464141414141674143
56304956656F374474776F414141414A
674141414167414A4141414141414141
414167414141414141414141475A7359
57637564486830436741674141414141
41414241426741477845666B39697132
41456245522B54324B725941514A462B
34725971746742554573464267414141
41414241414541576741414145344141
4141414141
&lt;/code>&lt;/pre>&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>這一題有一點通靈，沒有很喜歡&lt;/p>
&lt;ol>
&lt;li>首先給的cipher很明顯是ascii的hex&lt;/li>
&lt;li>轉換過後也很明顯是base64&lt;/li>
&lt;li>在轉換過後，只有底線後面的部分要轉換成hex&lt;/li>
&lt;li>如果把東西print出來的話會看到flag.txt的字樣，感覺上是一個file的byte code，到file signature去看會發現magic header是一個zip file，uncompress之後就會發現flag.txt
&lt;img src="https://hackmd.io/_uploads/H10OlHGch.png" alt="" />&lt;/li>
&lt;/ol>
&lt;h2 id="exploit">
 Exploit
 &lt;a class="anchor" href="#exploit">#&lt;/a>
&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> base64
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cipher &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&ampamp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cipher &lt;span style="color:#f92672">=&lt;/span> bytes&lt;span style="color:#f92672">.&lt;/span>fromhex(cipher)&lt;span style="color:#f92672">.&lt;/span>decode(&lt;span style="color:#e6db74">&amp;#39;utf-8&amp;#39;&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>split(&lt;span style="color:#e6db74">&amp;#34;_&amp;#34;&lt;/span>)[&lt;span style="color:#ae81ff">1&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cipher &lt;span style="color:#f92672">=&lt;/span> base64&lt;span style="color:#f92672">.&lt;/span>b64decode(cipher &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;==&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>f &lt;span style="color:#f92672">=&lt;/span> open(&lt;span style="color:#e6db74">&amp;#34;./cipher.zip&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;wb&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>f&lt;span style="color:#f92672">.&lt;/span>write(cipher)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>f&lt;span style="color:#f92672">.&lt;/span>close()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> zipfile
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">with&lt;/span> zipfile&lt;span style="color:#f92672">.&lt;/span>ZipFile(&lt;span style="color:#e6db74">&amp;#39;./cipher.zip&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;r&amp;#39;&lt;/span>) &lt;span style="color:#66d9ef">as&lt;/span> zip_ref:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> zip_ref&lt;span style="color:#f92672">.&lt;/span>extractall(&lt;span style="color:#e6db74">&amp;#39;./&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>f &lt;span style="color:#f92672">=&lt;/span> open(&lt;span style="color:#e6db74">&amp;#39;./flag.txt&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;r&amp;#39;&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>read()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(f)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ python exp.py
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>flag&lt;span style="color:#f92672">{&lt;/span>0bec0ad3da2113c70e50fd5617b8e7f9&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="reference">
 Reference
 &lt;a class="anchor" href="#reference">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://juejin.cn/post/7166166845395828772">XCTF-MISC-Misc文件類型&lt;/a>&lt;/p></description></item><item><title>Adworld - pure_color</title><link>https://bernie6401.github.io/docs/security/practice/adworld/misc/adworld---pure_color/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/adworld/misc/adworld---pure_color/</guid><description>&lt;h1 id="adworld---pure_color">
 Adworld - pure_color
 &lt;a class="anchor" href="#adworld---pure_color">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-adworld-ctf-misc">
 tags: &lt;code>Adworld&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Misc&lt;/code>
 &lt;a class="anchor" href="#tags-adworld-ctf-misc">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="https://adworld.xctf.org.cn/challenges/details?hash=f216ffab-e01d-46b8-9d4d-d91ab5229eed_2&amp;amp;task_category_id=1">https://adworld.xctf.org.cn/challenges/details?hash=f216ffab-e01d-46b8-9d4d-d91ab5229eed_2&amp;task_category_id=1&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://ithelp.ithome.com.tw/articles/10278407">【Day21】隱寫技術 Steganography&lt;/a>
&lt;a href="https://blog.csdn.net/dyw_666666/article/details/88650738">图片隐写查看神器stegsolve使用方法&lt;/a>
&lt;a href="https://github.com/zardus/ctf-tools/blob/master/stegsolve/install"> zardus/ctf-tools - stegsolve&lt;/a>&lt;/p>
&lt;h2 id="exploit---basic-steganography">
 Exploit - Basic Steganography
 &lt;a class="anchor" href="#exploit---basic-steganography">#&lt;/a>
&lt;/h2>
&lt;p>&lt;img src="https://i.imgur.com/YnqxcmS.png" alt="" />&lt;/p></description></item><item><title>Adworld - 心儀的公司</title><link>https://bernie6401.github.io/docs/security/practice/adworld/misc/adworld---%E5%BF%83%E5%84%80%E7%9A%84%E5%85%AC%E5%8F%B8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/adworld/misc/adworld---%E5%BF%83%E5%84%80%E7%9A%84%E5%85%AC%E5%8F%B8/</guid><description>&lt;h1 id="adworld---心儀的公司">
 Adworld - 心儀的公司
 &lt;a class="anchor" href="#adworld---%e5%bf%83%e5%84%80%e7%9a%84%e5%85%ac%e5%8f%b8">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-adworld-ctf-misc">
 tags: &lt;code>Adworld&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Misc&lt;/code>
 &lt;a class="anchor" href="#tags-adworld-ctf-misc">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="https://adworld.xctf.org.cn/challenges/details?hash=ed5d10bf-be47-4e61-b04e-3a9ccb73ff95_2&amp;amp;task_category_id=1">https://adworld.xctf.org.cn/challenges/details?hash=ed5d10bf-be47-4e61-b04e-3a9ccb73ff95_2&amp;task_category_id=1&lt;/a>&lt;/p>
&lt;h2 id="exploit">
 Exploit
 &lt;a class="anchor" href="#exploit">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ strings webshell.pcapng | grep &amp;#34;{&amp;#34;
...
fl4g:{ftop_Is_Waiting_4_y}
&lt;/code>&lt;/pre>&lt;h2 id="reference">
 Reference
 &lt;a class="anchor" href="#reference">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://www.cnblogs.com/Flat-White/p/13526539.html">心仪的公司writeup&lt;/a>
&lt;a href="https://www.bilibili.com/video/BV1r5411h7aw/?p=2&amp;amp;share_source=copy_web&amp;amp;vd_source=31529c2d248aba29c9cc1e3cbd720cb6&amp;amp;t=294">【CTF视频合辑】MISC-流量分析题大集合(第一辑)&lt;/a>&lt;/p></description></item><item><title>Adworld - 適合作為桌面</title><link>https://bernie6401.github.io/docs/security/practice/adworld/misc/adworld---%E9%81%A9%E5%90%88%E4%BD%9C%E7%82%BA%E6%A1%8C%E9%9D%A2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/adworld/misc/adworld---%E9%81%A9%E5%90%88%E4%BD%9C%E7%82%BA%E6%A1%8C%E9%9D%A2/</guid><description>&lt;h1 id="adworld---適合作為桌面">
 Adworld - 適合作為桌面
 &lt;a class="anchor" href="#adworld---%e9%81%a9%e5%90%88%e4%bd%9c%e7%82%ba%e6%a1%8c%e9%9d%a2">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-adworld-ctf-misc">
 tags: &lt;code>Adworld&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Misc&lt;/code>
 &lt;a class="anchor" href="#tags-adworld-ctf-misc">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="https://adworld.xctf.org.cn/challenges/details?hash=7a4e06c0-811c-4493-a628-886dc5bd59b4_2&amp;amp;task_category_id=1">適合作為桌面&lt;/a>&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://ithelp.ithome.com.tw/articles/10185442">Day8 Python基礎-pyc是什麼&lt;/a>&lt;/p>
&lt;h2 id="exploit">
 Exploit
 &lt;a class="anchor" href="#exploit">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>Analyze Steganography
&lt;img src="https://i.imgur.com/AwAHrxC.png" alt="" />&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://products.aspose.app/barcode/recognize/qr#/recognized">QR Code Reader&lt;/a>&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-!" data-lang
&lt;/code>&lt;/pre>&lt;p>It seems a byte code of a file.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>HxD
&lt;img src="https://i.imgur.com/ntC6hJ3.png" alt="" />
It can be disassembled by pyc tools.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://tool.lu/pyc/">&lt;code>pyc&lt;/code> disassemble&lt;/a>
:::spoiler&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-python=" data-lang="python=">def flag():
 str = [
 102,
 108,
 97,
 103,
 123,
 51,
 56,
 97,
 53,
 55,
 48,
 51,
 50,
 48,
 56,
 53,
 52,
 52,
 49,
 101,
 55,
 125,
 ]
 flag = &amp;#34;&amp;#34;
 for i in str:
 flag += chr(i)
 print flag
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>Background</title><link>https://bernie6401.github.io/docs/security/practice/nisra/misc/nisra---%E7%9C%8B%E4%B8%8D%E8%A6%8B%E7%9A%84%E5%9C%B0%E6%96%B9/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/nisra/misc/nisra---%E7%9C%8B%E4%B8%8D%E8%A6%8B%E7%9A%84%E5%9C%B0%E6%96%B9/</guid><description>&lt;h1 id="nisra---看不見的地方">
 NISRA - 看不見的地方
 &lt;a class="anchor" href="#nisra---%e7%9c%8b%e4%b8%8d%e8%a6%8b%e7%9a%84%e5%9c%b0%e6%96%b9">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://bernie6401.github.io/uwox6r5hQ6St_8G-4mv1_g">advanced-potion-making:two::+1:&lt;/a>&lt;/p>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>這題出的不錯，我用了所有方法都沒看到甚麼奇怪的東西，除了pngcheck&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ pngcheck flag.png
flag.png CRC error in chunk IHDR (computed 68ff0ded, expected 8c5880da)
ERROR: flag.png 
&lt;/code>&lt;/pre>&lt;p>代表檔案可能有一些問題
原圖：
&lt;img src="https://hackmd.io/_uploads/SkwQ2IPu3.png" alt="" />&lt;/p>
&lt;h2 id="exploit---recover-png-file">
 Exploit - Recover PNG File
 &lt;a class="anchor" href="#exploit---recover-png-file">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>參考&lt;a href="https://zhuanlan.zhihu.com/p/599657891">UP主的腳本&lt;/a>，可以直接寫出長寬&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-python!" data-lang="python!">import zlib
import struct
import sys

filename = sys.argv[1]
with open(filename, &amp;#39;rb&amp;#39;) as f:
 all_b = f.read()
 crc32key = int(all_b[29:33].hex(),16)
 data = bytearray(all_b[12:29])
 n = 4095
 for w in range(n): 
 width = bytearray(struct.pack(&amp;#39;&amp;gt;i&amp;#39;, w))
 for h in range(n):
 height = bytearray(struct.pack(&amp;#39;&amp;gt;i&amp;#39;, h))
 for x in range(4):
 data[x+4] = width[x]
 data[x+8] = height[x]
 crc32result = zlib.crc32(data)
 if crc32result == crc32key:
 print(&amp;#34;寬為：{}(hex), {}(int)&amp;#34;.format(width.hex(), int(width.hex(), 16)))
 print(&amp;#34;高為：{}(hex), {}(int)&amp;#34;.format(height.hex(), int(height.hex(), 16)))
 exit(0)
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ python exp.py flag.png
寬為：00000258(hex), 600(int)
高為：00000148(hex), 328(int)
&lt;/code>&lt;/pre>&lt;p>&lt;img src="https://hackmd.io/_uploads/rkLuiLwuh.png" alt="" />
可以看得出來高的數值不一樣&lt;/p></description></item><item><title>BTLO - Bruteforce</title><link>https://bernie6401.github.io/docs/security/practice/btlo/incident-response/btlo---bruteforce/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/btlo/incident-response/btlo---bruteforce/</guid><description>&lt;h1 id="btlo---bruteforce">
 BTLO - Bruteforce
 &lt;a class="anchor" href="#btlo---bruteforce">#&lt;/a>
&lt;/h1>
&lt;p>Challenge: &lt;a href="https://blueteamlabs.online/home/challenge/bruteforce-16629bf9a2">https://blueteamlabs.online/home/challenge/bruteforce-16629bf9a2&lt;/a>&lt;/p>
&lt;p>:::spoiler TOC
[TOC]
:::&lt;/p>
&lt;h2 id="scenario">
 Scenario
 &lt;a class="anchor" href="#scenario">#&lt;/a>
&lt;/h2>
&lt;blockquote>
&lt;p>Can you analyze logs from an attempted RDP bruteforce attack?&lt;/p>
&lt;p>One of our system administrators identified a large number of Audit Failure events in the Windows Security Event log.&lt;/p>
&lt;p>There are a number of different ways to approach the analysis of these logs! Consider the suggested tools, but there are many others out there!&lt;/p>&lt;/blockquote>
&lt;h2 id="q1">
 ==Q1==
 &lt;a class="anchor" href="#q1">#&lt;/a>
&lt;/h2>
&lt;blockquote>
&lt;p>How many Audit Failure events are there? (Format: Count of Events)&lt;/p></description></item><item><title>BTLO - Follina</title><link>https://bernie6401.github.io/docs/security/practice/btlo/incident-response/btlo---follina/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/btlo/incident-response/btlo---follina/</guid><description>&lt;h1 id="btlo---follina">
 BTLO - Follina
 &lt;a class="anchor" href="#btlo---follina">#&lt;/a>
&lt;/h1>
&lt;p>Challenge: &lt;a href="https://blueteamlabs.online/home/challenge/follina-f1a3452f34">https://blueteamlabs.online/home/challenge/follina-f1a3452f34&lt;/a>&lt;/p>
&lt;p>:::spoiler TOC
[TOC]
:::
:::danger
因為給予的題目是真實的樣本，所以盡量在乾淨的環境或是reliable的sandbox進行測試
:::&lt;/p>
&lt;h2 id="scenario">
 Scenario
 &lt;a class="anchor" href="#scenario">#&lt;/a>
&lt;/h2>
&lt;blockquote>
&lt;p>On a Friday evening when you were in a mood to celebrate your weekend, your team was alerted with a new RCE vulnerability actively being exploited in the wild. You have been tasked with analyzing and researching the sample to collect information for the weekend team.&lt;/p>&lt;/blockquote>
&lt;h2 id="tools">
 Tools
 &lt;a class="anchor" href="#tools">#&lt;/a>
&lt;/h2>
&lt;p>VirusTotal
Any.Run
OSINT&lt;/p>
&lt;h2 id="q1">
 ==Q1==
 &lt;a class="anchor" href="#q1">#&lt;/a>
&lt;/h2>
&lt;blockquote>
&lt;p>What is the SHA1 hash value of the sample? (Format: SHA1Hash)&lt;/p></description></item><item><title>BTLO - Log Analysis -Compromised WordPress</title><link>https://bernie6401.github.io/docs/security/practice/btlo/incident-response/btlo---log-analysis--compromised-wordpress/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/btlo/incident-response/btlo---log-analysis--compromised-wordpress/</guid><description>&lt;h1 id="btlo---log-analysis--compromised-wordpress">
 BTLO - Log Analysis -Compromised WordPress
 &lt;a class="anchor" href="#btlo---log-analysis--compromised-wordpress">#&lt;/a>
&lt;/h1>
&lt;p>Challenge: &lt;a href="https://blueteamlabs.online/home/challenge/log-analysis-compromised-wordpress-ce000f5b59">https://blueteamlabs.online/home/challenge/log-analysis-compromised-wordpress-ce000f5b59&lt;/a>&lt;/p>
&lt;p>:::spoiler TOC
[TOC]
:::&lt;/p>
&lt;h2 id="scenario">
 Scenario
 &lt;a class="anchor" href="#scenario">#&lt;/a>
&lt;/h2>
&lt;blockquote>
&lt;p>One of our WordPress sites has been compromised but we&amp;rsquo;re currently unsure how. The primary hypothesis is that an installed plugin was vulnerable to a remote code execution vulnerability which gave an attacker access to the underlying operating system of the server.&lt;/p>&lt;/blockquote>
&lt;h2 id="tools">
 Tools
 &lt;a class="anchor" href="#tools">#&lt;/a>
&lt;/h2>
&lt;p>Grep
Sort
Uniq
Apache Log Analyzer&lt;/p>
&lt;h2 id="q1">
 ==Q1==
 &lt;a class="anchor" href="#q1">#&lt;/a>
&lt;/h2>
&lt;blockquote>
&lt;p>Identify the URI of the admin login panel that the attacker gained access to (include the token)&lt;/p></description></item><item><title>BTLO - Meta</title><link>https://bernie6401.github.io/docs/security/practice/btlo/digital-forensic/btlo---meta/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/btlo/digital-forensic/btlo---meta/</guid><description>&lt;h1 id="btlo---meta">
 BTLO - Meta
 &lt;a class="anchor" href="#btlo---meta">#&lt;/a>
&lt;/h1>
&lt;p>Challenge: &lt;a href="https://blueteamlabs.online/home/challenge/meta-b976cec9e2">https://blueteamlabs.online/home/challenge/meta-b976cec9e2&lt;/a>&lt;/p>
&lt;p>:::spoiler TOC
[TOC]
:::&lt;/p>
&lt;h2 id="scenario">
 Scenario
 &lt;a class="anchor" href="#scenario">#&lt;/a>
&lt;/h2>
&lt;blockquote>
&lt;p>The attached images were posted by a criminal on the run, with the caption &amp;ldquo;I&amp;rsquo;m roaming free. You will never catch me&amp;rdquo;. We believe you can assist us in proving him wrong.&lt;/p>&lt;/blockquote>
&lt;h2 id="q1">
 ==Q1==
 &lt;a class="anchor" href="#q1">#&lt;/a>
&lt;/h2>
&lt;blockquote>
&lt;p>What is the camera model?&lt;/p>&lt;/blockquote>
&lt;h3 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h3>
&lt;p>問有關圖片相關的forensics直覺就是利用exiftool幫忙parse其中的內容，之後再慢慢extract出有用的資訊，&lt;del>或是直接丟到chatgpt幫忙extract問題的答案&lt;/del>&lt;/p>
&lt;h3 id="exploit">
 Exploit
 &lt;a class="anchor" href="#exploit">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ sudo apt install exiftool -y
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ exiftool uploaded_1.JPG &amp;gt; uploaded1_exiftool.txt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ exiftool uploaded_2.png &amp;gt; uploaded2_exiftool.txt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a href="https://chat.openai.com/share/6b38b409-1dec-4245-bb14-6a6fe98160af">chatgpt紀錄&lt;/a>&lt;/p></description></item><item><title>BTLO - Paranoid</title><link>https://bernie6401.github.io/docs/security/practice/btlo/incident-response/btlo---paranoid/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/btlo/incident-response/btlo---paranoid/</guid><description>&lt;h1 id="btlo---paranoid">
 BTLO - Paranoid
 &lt;a class="anchor" href="#btlo---paranoid">#&lt;/a>
&lt;/h1>
&lt;p>Challenge: &lt;a href="https://blueteamlabs.online/home/challenge/paranoid-e5e164befb">https://blueteamlabs.online/home/challenge/paranoid-e5e164befb&lt;/a>&lt;/p>
&lt;p>:::spoiler TOC
[TOC]
:::
:::info
此lab大部分是參考&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>的說明，因為本身第一次接觸aureport，所以不太清楚指令或者是注意的地方
:::&lt;/p>
&lt;h2 id="tool">
 Tool
 &lt;a class="anchor" href="#tool">#&lt;/a>
&lt;/h2>
&lt;p>AUReport: &lt;code>$ sudo apt install auditd&lt;/code>
Linux CLI&lt;/p>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>aureport --help
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>usage: aureport &lt;span style="color:#f92672">[&lt;/span>options&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -a,--avc Avc report
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -au,--auth Authentication report
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --comm Commands run report
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -c,--config Config change report
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -cr,--crypto Crypto report
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --debug Write malformed events that are skipped to stderr
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --eoe-timeout secs End of Event Timeout
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -e,--event Event report
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --escape option Escape output
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -f,--file File name report
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --failed only failed events in report
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -h,--host Remote Host name report
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --help help
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -i,--interpret Interpretive mode
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -if,--input &amp;lt;Input File name&amp;gt; use this file as input
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --input-logs Use the logs even &lt;span style="color:#66d9ef">if&lt;/span> stdin is a pipe
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --integrity Integrity event report
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -k,--key Key report
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -l,--login Login report
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -m,--mods Modification to accounts report
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -ma,--mac Mandatory Access Control &lt;span style="color:#f92672">(&lt;/span>MAC&lt;span style="color:#f92672">)&lt;/span> report
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -n,--anomaly aNomaly report
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -nc,--no-config Don&lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>t include config events
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --node &amp;lt;node name&amp;gt; Only events from a specific node
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -p,--pid Pid report
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -r,--response Response to anomaly report
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -s,--syscall Syscall report
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --success only success events in report
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --summary sorted totals &lt;span style="color:#66d9ef">for&lt;/span> main object in report
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -t,--log Log time range report
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -te,--end &lt;span style="color:#f92672">[&lt;/span>end date&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">[&lt;/span>end time&lt;span style="color:#f92672">]&lt;/span> ending date &amp;amp; time &lt;span style="color:#66d9ef">for&lt;/span> reports
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -tm,--terminal TerMinal name report
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -ts,--start &lt;span style="color:#f92672">[&lt;/span>start date&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">[&lt;/span>start time&lt;span style="color:#f92672">]&lt;/span> starting data &amp;amp; time &lt;span style="color:#66d9ef">for&lt;/span> reports
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --tty Report about tty keystrokes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -u,--user User name report
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -v,--version Version
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --virt Virtualization report
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -x,--executable eXecutable name report
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> If no report is given, the summary report will be displayed
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://hackmd.io/_uploads/B17xQgJOa.png" alt="圖片" />&lt;/p></description></item><item><title>BTLO - Phishing Analysis</title><link>https://bernie6401.github.io/docs/security/practice/btlo/security-operation/btlo---phishing-analysis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/btlo/security-operation/btlo---phishing-analysis/</guid><description>&lt;h1 id="btlo---phishing-analysis">
 BTLO - Phishing Analysis
 &lt;a class="anchor" href="#btlo---phishing-analysis">#&lt;/a>
&lt;/h1>
&lt;p>Challenge: &lt;a href="https://blueteamlabs.online/home/challenge/phishing-analysis-f92ef500ce">https://blueteamlabs.online/home/challenge/phishing-analysis-f92ef500ce&lt;/a>&lt;/p>
&lt;p>:::spoiler TOC
[TOC]
:::&lt;/p>
&lt;h2 id="scenario">
 Scenario
 &lt;a class="anchor" href="#scenario">#&lt;/a>
&lt;/h2>
&lt;blockquote>
&lt;p>A user has received a phishing email and forwarded it to the SOC. Can you investigate the email and attachment to collect useful artifacts?&lt;/p>&lt;/blockquote>
&lt;h2 id="tools">
 Tools
 &lt;a class="anchor" href="#tools">#&lt;/a>
&lt;/h2>
&lt;p>Text Editor
Mozilla Thunderbird
URL2PNG
WHOis&lt;/p>
&lt;h2 id="q1">
 ==Q1==
 &lt;a class="anchor" href="#q1">#&lt;/a>
&lt;/h2>
&lt;blockquote>
&lt;p>Who is the primary recipient of this email?&lt;/p>&lt;/blockquote>
&lt;h3 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h3>
&lt;p>這一題可以直接用&lt;a href="https://products.groupdocs.app/zh-hant/viewer/eml">線上工具 - EML Viewer&lt;/a>把eml file轉成pdf，不過風險就是有很多的資訊會流失掉，所以比較好的方式就是直接裝Mozilla Thunderbird查看
&lt;img src="https://hackmd.io/_uploads/Bk2fj8ldT.png" alt="圖片" />&lt;/p></description></item><item><title>BTLO - Secrets</title><link>https://bernie6401.github.io/docs/security/practice/btlo/incident-response/btlo---secrets/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/btlo/incident-response/btlo---secrets/</guid><description>&lt;h1 id="btlo---secrets">
 BTLO - Secrets
 &lt;a class="anchor" href="#btlo---secrets">#&lt;/a>
&lt;/h1>
&lt;p>Challenge: &lt;a href="https://blueteamlabs.online/home/challenge/secrets-85aa2bb3a9">https://blueteamlabs.online/home/challenge/secrets-85aa2bb3a9&lt;/a>&lt;/p>
&lt;p>:::spoiler TOC
[TOC]
:::&lt;/p>
&lt;h2 id="scenario">
 Scenario
 &lt;a class="anchor" href="#scenario">#&lt;/a>
&lt;/h2>
&lt;blockquote>
&lt;p>You’re a senior cyber security engineer and during your shift, we have intercepted/noticed a high privilege actions from unknown source that could be identified as malicious. We have got you the ticket that made these actions.
You are the one who created the secret for these tickets. Please fix this and submit the low privilege ticket so we can make sure that you deserve this position.
Here is the ticket:&lt;/p></description></item><item><title>BTLO - Shiba Insider</title><link>https://bernie6401.github.io/docs/security/practice/btlo/digital-forensic/btlo---shiba-insider/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/btlo/digital-forensic/btlo---shiba-insider/</guid><description>&lt;h1 id="btlo---shiba-insider">
 BTLO - Shiba Insider
 &lt;a class="anchor" href="#btlo---shiba-insider">#&lt;/a>
&lt;/h1>
&lt;p>Challenge: &lt;a href="https://blueteamlabs.online/home/challenge/shiba-insider-5b48123711">https://blueteamlabs.online/home/challenge/shiba-insider-5b48123711&lt;/a>&lt;/p>
&lt;p>:::spoiler TOC
[TOC]
:::&lt;/p>
&lt;h2 id="tools">
 Tools
 &lt;a class="anchor" href="#tools">#&lt;/a>
&lt;/h2>
&lt;p>Wireshark
CyberChef
Steghide
Command Line
Exiftool&lt;/p>
&lt;h2 id="q1">
 ==Q1==
 &lt;a class="anchor" href="#q1">#&lt;/a>
&lt;/h2>
&lt;blockquote>
&lt;p>What is the response message obtained from the PCAP file?&lt;/p>&lt;/blockquote>
&lt;h3 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h3>
&lt;p>這一題首先看到一個pcap file，以及zip file，不過zip file需要密碼才能unzip，所以先看pcap file有沒有相關訊息&lt;/p>
&lt;p>這個流量紀錄非常簡單，就是一個簡單的tcp connection，包含前面的三向交握以及get packet，交換完訊息之後當然就是要finish conversation，所以重點在中間他們交換的訊息
&lt;img src="https://hackmd.io/_uploads/S1rZCIpPT.png" alt="圖片" />&lt;/p>
&lt;p>傳回來的訊息說: &lt;code>use your own password&lt;/code>，其實也就是該題的答案&lt;/p>
&lt;p>:::spoiler Flag
Flag: &lt;code>use your own password&lt;/code>
:::&lt;/p>
&lt;h2 id="q2">
 ==Q2==
 &lt;a class="anchor" href="#q2">#&lt;/a>
&lt;/h2>
&lt;blockquote>
&lt;p>What is the password of the ZIP file?&lt;/p></description></item><item><title>CrewCTF - :-1: Questions</title><link>https://bernie6401.github.io/docs/security/practice/crewctf/bad/crewctf---_-1_-questions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/crewctf/bad/crewctf---_-1_-questions/</guid><description>&lt;h1 id="challenge-findme">
 Challenge: findme
 &lt;a class="anchor" href="#challenge-findme">#&lt;/a>
&lt;/h1>
&lt;h2 id="source">
 Source
 &lt;a class="anchor" href="#source">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler
&lt;img src="https://hackmd.io/_uploads/HkL1AbiKn.png" alt="" />
:::&lt;/p>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>這一題就只是找一張照片的經緯度，不二法門就是慢慢找，真TM累&lt;/p>
&lt;h2 id="exploit">
 Exploit
 &lt;a class="anchor" href="#exploit">#&lt;/a>
&lt;/h2>
&lt;p>Flag: &lt;code>crew{35.6682,138.5699}&lt;/code>&lt;/p></description></item><item><title>CrewCTF - Attaaaaack 1-13</title><link>https://bernie6401.github.io/docs/security/practice/crewctf/misc/crewctf---attaaaaack-1-13/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/crewctf/misc/crewctf---attaaaaack-1-13/</guid><description>&lt;h1 id="crewctf---attaaaaack-1-13">
 CrewCTF - Attaaaaack 1-13
 &lt;a class="anchor" href="#crewctf---attaaaaack-1-13">#&lt;/a>
&lt;/h1>
&lt;p>:::spoiler TOC
[TOC]
:::&lt;/p>
&lt;p>One of our employees at the company complained about suspicious behavior on the machine, our IR team took a memory dump from the machine and we need to investigate it.&lt;/p>
&lt;h2 id="attaaaaack-1">
 ==Attaaaaack 1==
 &lt;a class="anchor" href="#attaaaaack-1">#&lt;/a>
&lt;/h2>
&lt;blockquote>
&lt;p>Q1. What is the best profile for the the machine?&lt;/p>&lt;/blockquote>
&lt;h3 id="exploit">
 Exploit
 &lt;a class="anchor" href="#exploit">#&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ volatility_2.6_win64_standalone.exe -f memdump.raw imageinfo
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Volatility Foundation Volatility Framework 2.6
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>INFO : volatility.debug : Determining profile based on KDBG search...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Suggested Profile&lt;span style="color:#f92672">(&lt;/span>s&lt;span style="color:#f92672">)&lt;/span> : Win7SP1x86_23418, Win7SP0x86, Win7SP1x86
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> AS Layer1 : IA32PagedMemoryPae &lt;span style="color:#f92672">(&lt;/span>Kernel AS&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> AS Layer2 : FileAddressSpace &lt;span style="color:#f92672">(&lt;/span>D:&lt;span style="color:#ae81ff">\N&lt;/span>TU&lt;span style="color:#ae81ff">\C&lt;/span>TF&lt;span style="color:#ae81ff">\C&lt;/span>rewCTF&lt;span style="color:#ae81ff">\M&lt;/span>isc&lt;span style="color:#ae81ff">\A&lt;/span>ttaaaaack&lt;span style="color:#ae81ff">\m&lt;/span>emdump.raw&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> PAE type : PAE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> DTB : 0x185000L
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> KDBG : 0x82b7ab78L
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Number of Processors : &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Image Type &lt;span style="color:#f92672">(&lt;/span>Service Pack&lt;span style="color:#f92672">)&lt;/span> : &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> KPCR &lt;span style="color:#66d9ef">for&lt;/span> CPU &lt;span style="color:#ae81ff">0&lt;/span> : 0x80b96000L
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> KUSER_SHARED_DATA : 0xffdf0000L
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Image date and time : 2023-02-20 19:10:54 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Image local date and time : 2023-02-20 21:10:54 +0200
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Flag: &lt;code>crew{Win7SP1x86_23418}&lt;/code>&lt;/p></description></item><item><title>CrewCTF - Encrypt10n(Part 1)</title><link>https://bernie6401.github.io/docs/security/practice/crewctf/misc/crewctf---encrypt10npart-1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/crewctf/misc/crewctf---encrypt10npart-1/</guid><description>&lt;h1 id="crewctf---encrypt10npart-1">
 CrewCTF - Encrypt10n(Part 1)
 &lt;a class="anchor" href="#crewctf---encrypt10npart-1">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://github.com/volatilityfoundation/volatility3">Volatility 3&lt;/a>&lt;/p>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>Description: We made a memory dump on the criminal machine after entering the crime scene. Our investigator thought he was using encryption software to hide the secret. can you help me to detect it?&lt;/li>
&lt;li>Q1 : crew{password}
這種類型之前沒碰過，所以看了別人的WP學一下&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>
首先他有提到他有用加密的技術隱藏secret，所以我們的目的就是要找到password&lt;/li>
&lt;/ul>
&lt;h2 id="exploit---memory-forensics">
 Exploit - Memory Forensics
 &lt;a class="anchor" href="#exploit---memory-forensics">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>先找到運行的OS version或其他軟硬體資訊
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ python ../../Software/CTF/Misc/volatility/vol.py -f dump.raw imageinfo
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Volatility Foundation Volatility Framework 2.6.1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>INFO : volatility.debug : Determining profile based on KDBG search...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Suggested Profile&lt;span style="color:#f92672">(&lt;/span>s&lt;span style="color:#f92672">)&lt;/span> : Win7SP1x86_23418, Win7SP0x86, Win7SP1x86_24000, Win7SP1x86
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> AS Layer1 : IA32PagedMemoryPae &lt;span style="color:#f92672">(&lt;/span>Kernel AS&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> AS Layer2 : FileAddressSpace &lt;span style="color:#f92672">(&lt;/span>/mnt/d/Download/Trash/dump.raw&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> PAE type : PAE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> DTB : 0x185000L
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> KDBG : 0x82b3db78L
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Number of Processors : &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Image Type &lt;span style="color:#f92672">(&lt;/span>Service Pack&lt;span style="color:#f92672">)&lt;/span> : &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> KPCR &lt;span style="color:#66d9ef">for&lt;/span> CPU &lt;span style="color:#ae81ff">0&lt;/span> : 0x839a5000L
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> KUSER_SHARED_DATA : 0xffdf0000L
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Image date and time : 2023-02-16 12:03:16 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Image local date and time : 2023-02-16 14:03:16 +0200
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>重點: &lt;code>Suggested Profile(s) : Win7SP1x86_23418, Win7SP0x86, Win7SP1x86_24000, Win7SP1x86&lt;/code>&lt;/li>
&lt;li>列出當時系統正在運行的process
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ python ../../Software/CTF/Misc/volatility/vol.py -f dump.raw pslist --profile&lt;span style="color:#f92672">=&lt;/span>Win7SP0x86
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Volatility Foundation Volatility Framework 2.6.1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Offset&lt;span style="color:#f92672">(&lt;/span>V&lt;span style="color:#f92672">)&lt;/span> Name PID PPID Thds Hnds Sess Wow64 Start Exit
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>---------- -------------------- ------ ------ ------ -------- ------ ------ ------------------------------ ------------------------------
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x8413a938 System &lt;span style="color:#ae81ff">4&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">88&lt;/span> &lt;span style="color:#ae81ff">520&lt;/span> ------ &lt;span style="color:#ae81ff">0&lt;/span> 2023-02-16 12:00:48 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x84e481c8 smss.exe &lt;span style="color:#ae81ff">252&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#ae81ff">29&lt;/span> ------ &lt;span style="color:#ae81ff">0&lt;/span> 2023-02-16 12:00:49 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x84cae358 csrss.exe &lt;span style="color:#ae81ff">340&lt;/span> &lt;span style="color:#ae81ff">324&lt;/span> &lt;span style="color:#ae81ff">8&lt;/span> &lt;span style="color:#ae81ff">550&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 2023-02-16 12:00:53 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x844ea030 wininit.exe &lt;span style="color:#ae81ff">392&lt;/span> &lt;span style="color:#ae81ff">324&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#ae81ff">77&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 2023-02-16 12:00:54 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x84ef5030 csrss.exe &lt;span style="color:#ae81ff">400&lt;/span> &lt;span style="color:#ae81ff">384&lt;/span> &lt;span style="color:#ae81ff">9&lt;/span> &lt;span style="color:#ae81ff">223&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 2023-02-16 12:00:54 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x8573dd20 winlogon.exe &lt;span style="color:#ae81ff">456&lt;/span> &lt;span style="color:#ae81ff">384&lt;/span> &lt;span style="color:#ae81ff">6&lt;/span> &lt;span style="color:#ae81ff">114&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 2023-02-16 12:00:54 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x85749868 services.exe &lt;span style="color:#ae81ff">496&lt;/span> &lt;span style="color:#ae81ff">392&lt;/span> &lt;span style="color:#ae81ff">8&lt;/span> &lt;span style="color:#ae81ff">228&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 2023-02-16 12:00:54 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x85763030 lsass.exe &lt;span style="color:#ae81ff">508&lt;/span> &lt;span style="color:#ae81ff">392&lt;/span> &lt;span style="color:#ae81ff">7&lt;/span> &lt;span style="color:#ae81ff">578&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 2023-02-16 12:00:55 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x85764030 lsm.exe &lt;span style="color:#ae81ff">516&lt;/span> &lt;span style="color:#ae81ff">392&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span> &lt;span style="color:#ae81ff">149&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 2023-02-16 12:00:55 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x857bd510 svchost.exe &lt;span style="color:#ae81ff">624&lt;/span> &lt;span style="color:#ae81ff">496&lt;/span> &lt;span style="color:#ae81ff">11&lt;/span> &lt;span style="color:#ae81ff">362&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 2023-02-16 12:00:56 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x85809510 svchost.exe &lt;span style="color:#ae81ff">704&lt;/span> &lt;span style="color:#ae81ff">496&lt;/span> &lt;span style="color:#ae81ff">7&lt;/span> &lt;span style="color:#ae81ff">298&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 2023-02-16 12:00:56 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x85859920 svchost.exe &lt;span style="color:#ae81ff">784&lt;/span> &lt;span style="color:#ae81ff">496&lt;/span> &lt;span style="color:#ae81ff">23&lt;/span> &lt;span style="color:#ae81ff">510&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 2023-02-16 12:00:56 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x8586da80 svchost.exe &lt;span style="color:#ae81ff">832&lt;/span> &lt;span style="color:#ae81ff">496&lt;/span> &lt;span style="color:#ae81ff">15&lt;/span> &lt;span style="color:#ae81ff">265&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 2023-02-16 12:00:57 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x85872bb0 svchost.exe &lt;span style="color:#ae81ff">856&lt;/span> &lt;span style="color:#ae81ff">496&lt;/span> &lt;span style="color:#ae81ff">22&lt;/span> &lt;span style="color:#ae81ff">731&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 2023-02-16 12:00:57 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x85875460 svchost.exe &lt;span style="color:#ae81ff">880&lt;/span> &lt;span style="color:#ae81ff">496&lt;/span> &lt;span style="color:#ae81ff">47&lt;/span> &lt;span style="color:#ae81ff">1013&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 2023-02-16 12:00:57 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x8588f370 audiodg.exe &lt;span style="color:#ae81ff">960&lt;/span> &lt;span style="color:#ae81ff">784&lt;/span> &lt;span style="color:#ae81ff">6&lt;/span> &lt;span style="color:#ae81ff">132&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 2023-02-16 12:00:57 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x858c2420 svchost.exe &lt;span style="color:#ae81ff">1092&lt;/span> &lt;span style="color:#ae81ff">496&lt;/span> &lt;span style="color:#ae81ff">18&lt;/span> &lt;span style="color:#ae81ff">389&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 2023-02-16 12:00:58 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x857d6030 spoolsv.exe &lt;span style="color:#ae81ff">1288&lt;/span> &lt;span style="color:#ae81ff">496&lt;/span> &lt;span style="color:#ae81ff">15&lt;/span> &lt;span style="color:#ae81ff">270&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 2023-02-16 12:00:59 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x857d1030 dwm.exe &lt;span style="color:#ae81ff">1296&lt;/span> &lt;span style="color:#ae81ff">832&lt;/span> &lt;span style="color:#ae81ff">6&lt;/span> &lt;span style="color:#ae81ff">114&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 2023-02-16 12:00:59 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x857c7030 svchost.exe &lt;span style="color:#ae81ff">1324&lt;/span> &lt;span style="color:#ae81ff">496&lt;/span> &lt;span style="color:#ae81ff">21&lt;/span> &lt;span style="color:#ae81ff">310&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 2023-02-16 12:00:59 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x857a5d20 explorer.exe &lt;span style="color:#ae81ff">1384&lt;/span> &lt;span style="color:#ae81ff">1276&lt;/span> &lt;span style="color:#ae81ff">33&lt;/span> &lt;span style="color:#ae81ff">923&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 2023-02-16 12:00:59 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x857c4d20 taskhost.exe &lt;span style="color:#ae81ff">1400&lt;/span> &lt;span style="color:#ae81ff">496&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span> &lt;span style="color:#ae81ff">197&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 2023-02-16 12:00:59 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x85837898 svchost.exe &lt;span style="color:#ae81ff">1560&lt;/span> &lt;span style="color:#ae81ff">496&lt;/span> &lt;span style="color:#ae81ff">11&lt;/span> &lt;span style="color:#ae81ff">146&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 2023-02-16 12:01:00 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x841d1030 VGAuthService. &lt;span style="color:#ae81ff">1720&lt;/span> &lt;span style="color:#ae81ff">496&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span> &lt;span style="color:#ae81ff">85&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 2023-02-16 12:01:01 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x841d7118 vmtoolsd.exe &lt;span style="color:#ae81ff">1736&lt;/span> &lt;span style="color:#ae81ff">1384&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span> &lt;span style="color:#ae81ff">181&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 2023-02-16 12:01:02 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x85856030 vm3dservice.ex &lt;span style="color:#ae81ff">1836&lt;/span> &lt;span style="color:#ae81ff">496&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span> &lt;span style="color:#ae81ff">60&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 2023-02-16 12:01:03 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x85857d20 vmtoolsd.exe &lt;span style="color:#ae81ff">1856&lt;/span> &lt;span style="color:#ae81ff">496&lt;/span> &lt;span style="color:#ae81ff">14&lt;/span> &lt;span style="color:#ae81ff">291&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 2023-02-16 12:01:03 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x841e5678 vm3dservice.ex &lt;span style="color:#ae81ff">1880&lt;/span> &lt;span style="color:#ae81ff">1836&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#ae81ff">44&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 2023-02-16 12:01:03 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x85a26030 svchost.exe &lt;span style="color:#ae81ff">384&lt;/span> &lt;span style="color:#ae81ff">496&lt;/span> &lt;span style="color:#ae81ff">8&lt;/span> &lt;span style="color:#ae81ff">93&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 2023-02-16 12:01:05 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x85a6e5d0 dllhost.exe &lt;span style="color:#ae81ff">876&lt;/span> &lt;span style="color:#ae81ff">496&lt;/span> &lt;span style="color:#ae81ff">21&lt;/span> &lt;span style="color:#ae81ff">191&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 2023-02-16 12:01:05 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x85941c28 dllhost.exe &lt;span style="color:#ae81ff">1744&lt;/span> &lt;span style="color:#ae81ff">496&lt;/span> &lt;span style="color:#ae81ff">18&lt;/span> &lt;span style="color:#ae81ff">200&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 2023-02-16 12:01:05 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x85ab6260 msdtc.exe &lt;span style="color:#ae81ff">1128&lt;/span> &lt;span style="color:#ae81ff">496&lt;/span> &lt;span style="color:#ae81ff">15&lt;/span> &lt;span style="color:#ae81ff">154&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 2023-02-16 12:01:06 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x85ac8b00 WmiPrvSE.exe &lt;span style="color:#ae81ff">232&lt;/span> &lt;span style="color:#ae81ff">624&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span> &lt;span style="color:#ae81ff">193&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 2023-02-16 12:01:06 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x841f4470 SearchIndexer. &lt;span style="color:#ae81ff">2148&lt;/span> &lt;span style="color:#ae81ff">496&lt;/span> &lt;span style="color:#ae81ff">14&lt;/span> &lt;span style="color:#ae81ff">604&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 2023-02-16 12:01:08 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x85b2a030 VSSVC.exe &lt;span style="color:#ae81ff">2276&lt;/span> &lt;span style="color:#ae81ff">496&lt;/span> &lt;span style="color:#ae81ff">7&lt;/span> &lt;span style="color:#ae81ff">118&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 2023-02-16 12:01:11 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x85b80cb8 SearchProtocol &lt;span style="color:#ae81ff">2372&lt;/span> &lt;span style="color:#ae81ff">2148&lt;/span> &lt;span style="color:#ae81ff">9&lt;/span> &lt;span style="color:#ae81ff">284&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 2023-02-16 12:01:13 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x85b855f8 SearchFilterHo &lt;span style="color:#ae81ff">2392&lt;/span> &lt;span style="color:#ae81ff">2148&lt;/span> &lt;span style="color:#ae81ff">6&lt;/span> &lt;span style="color:#ae81ff">104&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 2023-02-16 12:01:13 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x85b97d20 svchost.exe &lt;span style="color:#ae81ff">2480&lt;/span> &lt;span style="color:#ae81ff">496&lt;/span> &lt;span style="color:#ae81ff">15&lt;/span> &lt;span style="color:#ae81ff">232&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 2023-02-16 12:01:15 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x85bc5398 wmpnetwk.exe &lt;span style="color:#ae81ff">2632&lt;/span> &lt;span style="color:#ae81ff">496&lt;/span> &lt;span style="color:#ae81ff">11&lt;/span> &lt;span style="color:#ae81ff">212&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 2023-02-16 12:01:16 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x85bba030 WmiPrvSE.exe &lt;span style="color:#ae81ff">2860&lt;/span> &lt;span style="color:#ae81ff">624&lt;/span> &lt;span style="color:#ae81ff">15&lt;/span> &lt;span style="color:#ae81ff">319&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 2023-02-16 12:01:25 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x85c53030 WmiApSrv.exe &lt;span style="color:#ae81ff">3004&lt;/span> &lt;span style="color:#ae81ff">496&lt;/span> &lt;span style="color:#ae81ff">6&lt;/span> &lt;span style="color:#ae81ff">112&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 2023-02-16 12:01:30 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x85c596c0 TrueCrypt.exe &lt;span style="color:#ae81ff">3196&lt;/span> &lt;span style="color:#ae81ff">1384&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#ae81ff">67&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 2023-02-16 12:02:07 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x84d54d20 sppsvc.exe &lt;span style="color:#ae81ff">3736&lt;/span> &lt;span style="color:#ae81ff">496&lt;/span> &lt;span style="color:#ae81ff">6&lt;/span> &lt;span style="color:#ae81ff">154&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 2023-02-16 12:03:05 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x84d567f0 svchost.exe &lt;span style="color:#ae81ff">3776&lt;/span> &lt;span style="color:#ae81ff">496&lt;/span> &lt;span style="color:#ae81ff">15&lt;/span> &lt;span style="color:#ae81ff">353&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 2023-02-16 12:03:05 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x844fcd20 DumpIt.exe &lt;span style="color:#ae81ff">4072&lt;/span> &lt;span style="color:#ae81ff">1384&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#ae81ff">38&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 2023-02-16 12:03:14 UTC+0000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x844ba6e0 conhost.exe &lt;span style="color:#ae81ff">4080&lt;/span> &lt;span style="color:#ae81ff">400&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#ae81ff">51&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> 2023-02-16 12:03:14 UTC+0000
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>重點：&lt;code>0x85c596c0 TrueCrypt.exe 3196 1384 2 67 1 0 2023-02-16 12:02:07 UTC+0000&lt;/code>
&lt;a href="https://zh.wikipedia.org/zh-tw/TrueCrypt">TrueCrypt - Wiki&lt;/a>
&lt;blockquote>
&lt;p>TrueCrypt是一款已停止開發的動態（On-the-fly）磁碟加密軟體，支援Windows、macOS和Linux作業系統。它可在單個檔案和磁碟分割區中建立加密區，也可以加密整個作業系統，解密後使用者即可像普通分割區一樣使用其中的檔案。TrueCrypt支援使用密碼、金鑰檔案作為解密憑據。&lt;/p></description></item><item><title>CrewCTF - Encrypt10n(Part 2)</title><link>https://bernie6401.github.io/docs/security/practice/crewctf/misc/crewctf---encrypt10npart-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/crewctf/misc/crewctf---encrypt10npart-2/</guid><description>&lt;h1 id="crewctf---encrypt10npart-2">
 CrewCTF - Encrypt10n(Part 2)
 &lt;a class="anchor" href="#crewctf---encrypt10npart-2">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://kenfavors.com/code/how-to-open-a-truecrypt-container-using-cryptsetup/">How To Open A TrueCrypt Container Using cryptsetup&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>&lt;code>$ sudo cryptsetup --type tcrypt open container-to-mount container-name&lt;/code>&lt;/p>&lt;/blockquote>
&lt;p>&lt;a href="https://blog.51cto.com/majesty/991565">什麽是塊設備，什麽是字符設備？有什麽區別？&lt;/a>&lt;/p>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>這一題應該是沿用part 1得到的密碼進行解密&lt;/p>
&lt;h2 id="exploit">
 Exploit
 &lt;a class="anchor" href="#exploit">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>用&lt;code>cryptsetup&lt;/code>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>先進行解密&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ sudo cryptsetup --type tcrypt open flag flag_decrypt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Enter passphrase &lt;span style="color:#66d9ef">for&lt;/span> flag:
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>則輸出的結果就是一個container儲存在&lt;code>/dev/mapper&lt;/code>，可以看到它是一個block device&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ ll /dev/mapper
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>total &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#ae81ff">2&lt;/span> root root &lt;span style="color:#ae81ff">80&lt;/span> Jul &lt;span style="color:#ae81ff">12&lt;/span> 21:44 .
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>drwxr-xr-x &lt;span style="color:#ae81ff">11&lt;/span> root root &lt;span style="color:#ae81ff">3140&lt;/span> Jul &lt;span style="color:#ae81ff">12&lt;/span> 21:44 ..
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>crw------- &lt;span style="color:#ae81ff">1&lt;/span> root root 10, &lt;span style="color:#ae81ff">236&lt;/span> Jul &lt;span style="color:#ae81ff">11&lt;/span> 23:06 control
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>brw-rw---- &lt;span style="color:#ae81ff">1&lt;/span> root disk 252, &lt;span style="color:#ae81ff">3&lt;/span> Jul &lt;span style="color:#ae81ff">12&lt;/span> 21:44 flag_dec
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>再來就要把這個container掛起來，要掛起來才能讀取裡面的資料&lt;/p></description></item><item><title>CrewCTF - ez rev</title><link>https://bernie6401.github.io/docs/security/practice/crewctf/reverse/crewctf---ez-rev/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/crewctf/reverse/crewctf---ez-rev/</guid><description>&lt;h1 id="crewctf---ez-rev">
 CrewCTF - ez rev
 &lt;a class="anchor" href="#crewctf---ez-rev">#&lt;/a>
&lt;/h1>
&lt;h2 id="source-code">
 Source Code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler IDA Fake Main Function&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#66d9ef">__fastcall&lt;/span> __noreturn &lt;span style="color:#a6e22e">main&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> a1, &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">**&lt;/span>a2, &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">**&lt;/span>a3)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> i; &lt;span style="color:#75715e">// [rsp+Ch] [rbp-4h]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> puts(&lt;span style="color:#e6db74">&amp;#34;[+] Another flag checker...&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fgets(byte_4200E0, &lt;span style="color:#ae81ff">256&lt;/span>, stdin);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( byte_4200E0[strlen(byte_4200E0) &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>] &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> byte_4200E0[strlen(byte_4200E0) &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> ( i &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; i &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">73&lt;/span>; &lt;span style="color:#f92672">++&lt;/span>i )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ( byte_4200E0[i] &lt;span style="color:#f92672">!=&lt;/span> (byte_420060[i] &lt;span style="color:#f92672">^&lt;/span> &lt;span style="color:#ae81ff">0x70&lt;/span>) )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sub_401220();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sub_401202();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>:::&lt;/p>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>首先這一題真的太難了，超出我的守備範圍，所以我先寫一些當作紀錄，之後可以更快銜接繼續解&lt;/p>
&lt;ol>
&lt;li>
&lt;p>首先可以執行一下，如果是在Ubuntu 20.04(預設Libc版本是2.31)的版本和其他版本會有不一樣的output&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ ldd --version
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ldd &lt;span style="color:#f92672">(&lt;/span>Ubuntu GLIBC 2.31-0ubuntu9.9&lt;span style="color:#f92672">)&lt;/span> 2.31
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Copyright &lt;span style="color:#f92672">(&lt;/span>C&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#ae81ff">2020&lt;/span> Free Software Foundation, Inc.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>This is free software; see the source &lt;span style="color:#66d9ef">for&lt;/span> copying conditions. There is NO
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>warranty; not even &lt;span style="color:#66d9ef">for&lt;/span> MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Written by Roland McGrath and Ulrich Drepper.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ ./a.out
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>+&lt;span style="color:#f92672">]&lt;/span> Another flag checker...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">123456&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>-&lt;span style="color:#f92672">]&lt;/span> No :&lt;span style="color:#f92672">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ ldd --version
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ldd &lt;span style="color:#f92672">(&lt;/span>Ubuntu GLIBC 2.35-0ubuntu3&lt;span style="color:#f92672">)&lt;/span> 2.35
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Copyright &lt;span style="color:#f92672">(&lt;/span>C&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#ae81ff">2022&lt;/span> Free Software Foundation, Inc.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>This is free software; see the source &lt;span style="color:#66d9ef">for&lt;/span> copying conditions. There is NO
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>warranty; not even &lt;span style="color:#66d9ef">for&lt;/span> MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Written by Roland McGrath and Ulrich Drepper.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>./a.out
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>+&lt;span style="color:#f92672">]&lt;/span> Another flag checker...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">123456&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>-&lt;span style="color:#f92672">]&lt;/span> Why you still here
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>這是因為他和這隻程式執行的過程有關係&lt;/p></description></item><item><title>CrewCTF - sequence_gallery</title><link>https://bernie6401.github.io/docs/security/practice/crewctf/web/crewctf---sequence_gallery/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/crewctf/web/crewctf---sequence_gallery/</guid><description>&lt;h1 id="crewctf---sequence_gallery">
 CrewCTF - sequence_gallery
 &lt;a class="anchor" href="#crewctf---sequence_gallery">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://lab.feifei.tw/practice/ci/l1.php">Command Injection&lt;/a>
&lt;a href="https://www.geeksforgeeks.org/dc-command-in-linux-with-examples/">dc command in Linux with examples&lt;/a>
&lt;a href="https://deepinout.com/linux-cmd/linux-numerical-computation-cmd/linux-cmd-dc.html">Linux dc命令&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>dc -h
Usage: dc [OPTION] [file &amp;hellip;]
-e, &amp;ndash;expression=EXPR evaluate expression
-f, &amp;ndash;file=FILE evaluate contents of file
-h, &amp;ndash;help display this help and exit
-V, &amp;ndash;version output version information and exit&lt;/p>
&lt;p>Email bug reports to: &lt;a href="mailto:bug-dc@gnu.org">bug-dc@gnu.org&lt;/a> .&lt;/p>&lt;/blockquote>
&lt;h2 id="source-code">
 Source Code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>:::spoiler Source Code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-python!" data-lang="python!">import os
import sqlite3
import subprocess

from flask import Flask, request, render_template

app = Flask(__name__)

@app.get(&amp;#39;/&amp;#39;)
def index():
	sequence = request.args.get(&amp;#39;sequence&amp;#39;, None)
	if sequence is None:
		return render_template(&amp;#39;index.html&amp;#39;)

	script_file = os.path.basename(sequence + &amp;#39;.dc&amp;#39;)
	if &amp;#39; &amp;#39; in script_file or &amp;#39;flag&amp;#39; in script_file:
		return &amp;#39;:(&amp;#39;

	proc = subprocess.run(
		[&amp;#39;dc&amp;#39;, script_file], 
		capture_output=True,
		text=True,
		timeout=1,
	)
	output = proc.stdout

	return render_template(&amp;#39;index.html&amp;#39;, output=output)

if __name__ == &amp;#39;__main__&amp;#39;:
	app.run(host=&amp;#39;0.0.0.0&amp;#39;, port=8080)
&lt;/code>&lt;/pre>&lt;p>:::&lt;/p></description></item><item><title>NISRA - different places</title><link>https://bernie6401.github.io/docs/security/practice/nisra/web/nisra---different-places/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/nisra/web/nisra---different-places/</guid><description>&lt;h1 id="nisra---different-places">
 NISRA - different places
 &lt;a class="anchor" href="#nisra---different-places">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-nisra-ctf-web">
 tags: &lt;code>NISRA&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-nisra-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="http://chall2.nisra.net:41025/">different places&lt;/a>&lt;/p>
&lt;h2 id="exploit---integrate-fragments-flags">
 Exploit - Integrate Fragments Flags
 &lt;a class="anchor" href="#exploit---integrate-fragments-flags">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>View Page Sources
&lt;img src="https://i.imgur.com/q3tSKo5.png" alt="" />
&lt;img src="https://i.imgur.com/yrKjnyr.png" alt="" />&lt;/p>
&lt;/li>
&lt;li>
&lt;p>base64 decode
&lt;code>dXNlcm5hbWU6YWRtaW5fcGFzc3dvcmQ6bmlzcmE=&lt;/code> $\to$ &lt;code>username:admin_password:nisra&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Observe the form
It uses get method to fetch the parameters. So we can peek &lt;code>login.php&lt;/code> first.
&lt;img src="https://i.imgur.com/oGFwOoA.png" alt="" />
Then we could use the username and password we got at previous step.
Payload: &lt;code>view-source:http://chall2.nisra.net:41025/login.php?username=admin&amp;amp;password=nisra&lt;/code>
Then we got the last fragment flag.&lt;/p></description></item><item><title>NISRA - Hidden?</title><link>https://bernie6401.github.io/docs/security/practice/nisra/misc/nisra---hidden_/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/nisra/misc/nisra---hidden_/</guid><description>&lt;h1 id="nisra---hidden">
 NISRA - Hidden?
 &lt;a class="anchor" href="#nisra---hidden">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://bernie6401.github.io/uwox6r5hQ6St_8G-4mv1_g">advanced-potion-making:two::+1:&lt;/a>&lt;/p>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>這一題也是蠻巧妙的，用pngcheck可以看到檔案有問題&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ pngcheck haha.png
haha.png additional data after IEND chunk
ERROR: haha.png
&lt;/code>&lt;/pre>&lt;h2 id="exploit---recover--unzip">
 Exploit - Recover + Unzip
 &lt;a class="anchor" href="#exploit---recover--unzip">#&lt;/a>
&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>Recover PNG File
先找文件尾（00 00 00 00 49 45 4E 44 AE 42 60 82）
&lt;img src="https://hackmd.io/_uploads/SySm_6DO3.png" alt="" />
發現後續還有其他bytes，用&lt;a href="https://en.wikipedia.org/wiki/List_of_file_signatures">list signature&lt;/a>追查後面是甚麼，&lt;img src="https://hackmd.io/_uploads/Hy-5OpPOh.png" alt="" />
發現應該是個zip file，所以獨立出來後解壓縮&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Unzip
解壓縮後有一些文件，從裡面撈了一下flag就在./word/document.xml中
Flag: &lt;code>NISRA{Oop5!_yoU_fOuNd_1t}&lt;/code>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://hackmd.io/_uploads/BkLoDTwO3.png" alt="" />&lt;/p></description></item><item><title>NISRA - MD5_1</title><link>https://bernie6401.github.io/docs/security/practice/nisra/web/nisra---md5_1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/nisra/web/nisra---md5_1/</guid><description>&lt;h1 id="nisra---md5_1">
 NISRA - MD5_1
 &lt;a class="anchor" href="#nisra---md5_1">#&lt;/a>
&lt;/h1>
&lt;h6 id="tags-nisra-ctf-web">
 tags: &lt;code>NISRA&lt;/code> &lt;code>CTF&lt;/code> &lt;code>Web&lt;/code>
 &lt;a class="anchor" href="#tags-nisra-ctf-web">#&lt;/a>
&lt;/h6>
&lt;p>Challenge: &lt;a href="http://chall2.nisra.net:41022/">MD5_1&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-php=" data-lang="php="> &amp;lt;?php
 highlight_file(__FILE__);
 $FROM_INCLUDE = true;
 include(&amp;#34;flag.php&amp;#34;);
 $msg = &amp;#34;&amp;#34;;
 if (isset($_GET[&amp;#39;user&amp;#39;]) &amp;amp;&amp;amp; isset($_GET[&amp;#39;password&amp;#39;])) {
 $user = $_GET[&amp;#39;user&amp;#39;];
 $password = $_GET[&amp;#39;password&amp;#39;];
 $check = &amp;#34;QNKCDZO&amp;#34;;
 // the md5 of &amp;#34;QNKCDZO&amp;#34; is 0e830400451993494058024219903391

 if ($user == &amp;#34;admin&amp;#34; &amp;amp;&amp;amp; $password != $check &amp;amp;&amp;amp; md5($password) == md5($check)) {
 $msg = &amp;#34;Flag: &amp;#34;.$flag;
 } else {
 $msg = &amp;#34;Keep trying!&amp;#34;;
 }
 }

 echo $msg;
?&amp;gt; 
&lt;/code>&lt;/pre>&lt;h2 id="exploit---md5-collision">
 Exploit - MD5 Collision
 &lt;a class="anchor" href="#exploit---md5-collision">#&lt;/a>
&lt;/h2>
&lt;p>Payload: &lt;code>http://chall2.nisra.net:41022/?user=admin&amp;amp;password=240610708&lt;/code>
:::spoiler flag
&lt;code>Flag: NISRA{PhP_is_th3_BeST_laNgUA9E}&lt;/code>
:::&lt;/p></description></item><item><title>NISRA - MD5_2</title><link>https://bernie6401.github.io/docs/security/practice/nisra/web/nisra---md5_2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/nisra/web/nisra---md5_2/</guid><description>&lt;h1 id="nisra---md5_2">
 NISRA - MD5_2
 &lt;a class="anchor" href="#nisra---md5_2">#&lt;/a>
&lt;/h1>
&lt;h2 id="exploit">
 Exploit
 &lt;a class="anchor" href="#exploit">#&lt;/a>
&lt;/h2>
&lt;p>Payload: &lt;code>curl http://chall2.nisra.net:41023/ -H &amp;quot;Content-Type: application/x-www-form-urlencoded&amp;quot; -X POST -d &amp;quot;user=240610708&amp;amp;password=QNKCDZO&amp;quot;&lt;/code>
Flag: &lt;code>NISRA{S3CuR17y_1ssuEs_Of_pHP_@ND_Md5}&lt;/code>&lt;/p>
&lt;h2 id="reference">
 Reference
 &lt;a class="anchor" href="#reference">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://news.ycombinator.com/item?id=9484757">md5(&amp;lsquo;240610708&amp;rsquo;) == md5(&amp;lsquo;QNKCDZO&amp;rsquo;)&lt;/a>&lt;/p></description></item><item><title>NISRA 2023 Enlightened - Jack的flag</title><link>https://bernie6401.github.io/docs/security/practice/nisra/misc/nisra-2023-enlightened---jack%E7%9A%84flag/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/nisra/misc/nisra-2023-enlightened---jack%E7%9A%84flag/</guid><description>&lt;h1 id="nisra-2023-enlightened---jack的flag">
 NISRA 2023 Enlightened - Jack的flag
 &lt;a class="anchor" href="#nisra-2023-enlightened---jack%e7%9a%84flag">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>Microsoft Word Forensics&lt;/p>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>這是第一次寫到有關word的隱寫，蠻特別的就紀錄一下，但看得出來應該是考古古古古古古題了ㄅ&lt;/p>
&lt;h2 id="exploit">
 Exploit
 &lt;a class="anchor" href="#exploit">#&lt;/a>
&lt;/h2>
&lt;p>有兩種方法&lt;/p>
&lt;ol>
&lt;li>強制解壓縮
直接把副檔名改成.zip，然後用解壓縮軟體解壓縮，接著就可以在&lt;code>Final-Jack\word\document.xml&lt;/code>中可以找到flag&lt;/li>
&lt;li>把隱藏設定打開
直接在word中的&lt;code>檔案/選項/顯示/隱藏文字&lt;/code>的方塊打勾，就可以直接在下面看到flag了&lt;/li>
&lt;/ol>
&lt;p>Flag: &lt;code>NISRA{Word'$_h1Dden_7eXT_reVEaLed}&lt;/code>&lt;/p></description></item><item><title>NISRA 2023 Enlightened - Magic Function</title><link>https://bernie6401.github.io/docs/security/practice/nisra/misc/nisra-2023-enlightened---magic-function/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/nisra/misc/nisra-2023-enlightened---magic-function/</guid><description>&lt;h1 id="nisra-2023-enlightened---magic-function">
 NISRA 2023 Enlightened - Magic Function
 &lt;a class="anchor" href="#nisra-2023-enlightened---magic-function">#&lt;/a>
&lt;/h1>
&lt;h2 id="background">
 Background
 &lt;a class="anchor" href="#background">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://hacktricks.boitatech.com.br/misc/basic-python/magic-methods">Magic Function of Python&lt;/a>&lt;/p>
&lt;h2 id="source-code">
 Source Code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;pre tabindex="0">&lt;code class="language-python=" data-lang="python=">class Test():
	def __init__(self, email=&amp;#39;test@nisra.net&amp;#39;):
		self.info = &amp;#39;test&amp;#39;
		self.email = email

class Secret():
	flag = open(&amp;#34;./NISRA-Enlightened-2023/flag.txt&amp;#34;, &amp;#34;r&amp;#34;).read().strip()


if __name__ == &amp;#39;__main__&amp;#39;:
	email = input(&amp;#39;Your email: &amp;#39;)

	if email:
		test = Test(email)
	else:
		test = Test()

	msg = (&amp;#39;this is for {test.info}, please contact &amp;#39; + email + &amp;#39;.&amp;#39;).format(test=test)

	print(msg)
&lt;/code>&lt;/pre>&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>這一題真的很有趣，但也是算通靈的奇淫怪招，仔細看了一下直覺應該是跟format string有關係，比賽的時候的確有想到，但我當時想的payload有點偏掉了，當時的payload是: &lt;code>{test.email}.format(test=Test(Secret().flag))&lt;/code>，也就是先傳入Secret().flag給Test這個class，然後再利用format傳入給&lt;/p></description></item><item><title>NISRA 2023 Enlightened - Pixel</title><link>https://bernie6401.github.io/docs/security/practice/nisra/misc/nisra-2023-enlightened---pixel/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/security/practice/nisra/misc/nisra-2023-enlightened---pixel/</guid><description>&lt;h1 id="nisra-2023-enlightened---pixel">
 NISRA 2023 Enlightened - Pixel
 &lt;a class="anchor" href="#nisra-2023-enlightened---pixel">#&lt;/a>
&lt;/h1>
&lt;h2 id="source-code">
 Source Code
 &lt;a class="anchor" href="#source-code">#&lt;/a>
&lt;/h2>
&lt;p>&lt;img src="https://hackmd.io/_uploads/HkF8f_702.png" alt="" />&lt;/p>
&lt;h2 id="recon">
 Recon
 &lt;a class="anchor" href="#recon">#&lt;/a>
&lt;/h2>
&lt;p>這一題真的很難，應該說有想過，不過很麻煩就是了，每一個色塊都有一組RGB的數值，然後只要把它轉換成ASCII，再把每一個字元串起來，就會是一組base64的code，轉換之後就拿到一組ciphertext，接著就丟到cyberchef看看一般的工具可不可以解，最後是用rot13解出來，除了最一開始的地方需要一點通靈之外，其他都很簡單，但&amp;hellip;寫script頗麻煩&lt;/p>
&lt;h2 id="exploit">
 Exploit
 &lt;a class="anchor" href="#exploit">#&lt;/a>
&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> PIL &lt;span style="color:#f92672">import&lt;/span> Image
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> base64 &lt;span style="color:#f92672">import&lt;/span> b64decode
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>img &lt;span style="color:#f92672">=&lt;/span> Image&lt;span style="color:#f92672">.&lt;/span>open(&lt;span style="color:#e6db74">&amp;#34;./NISRA-Enlightened-2023/Misc/Final-Pixel.png&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pixels &lt;span style="color:#f92672">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> row &lt;span style="color:#f92672">in&lt;/span> range(&lt;span style="color:#ae81ff">8&lt;/span>):	&lt;span style="color:#75715e"># 8 rows&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">for&lt;/span> col &lt;span style="color:#f92672">in&lt;/span> range(&lt;span style="color:#ae81ff">8&lt;/span>):	&lt;span style="color:#75715e"># 8 columns&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		r, g, b &lt;span style="color:#f92672">=&lt;/span> img&lt;span style="color:#f92672">.&lt;/span>getpixel((row &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#ae81ff">64&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>, col &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#ae81ff">64&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>))	&lt;span style="color:#75715e"># each grid: 64 x 64&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">if&lt;/span> r &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">255&lt;/span> &lt;span style="color:#f92672">and&lt;/span> g &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">255&lt;/span> &lt;span style="color:#f92672">and&lt;/span> b &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">255&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#66d9ef">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			pixels&lt;span style="color:#f92672">.&lt;/span>append((chr(r), chr(g), chr(b)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">if&lt;/span> r &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">255&lt;/span> &lt;span style="color:#f92672">and&lt;/span> g &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">255&lt;/span> &lt;span style="color:#f92672">and&lt;/span> b &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">255&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>flag &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(pixels)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> r, g, b &lt;span style="color:#f92672">in&lt;/span> pixels:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	flag &lt;span style="color:#f92672">+=&lt;/span> r &lt;span style="color:#f92672">+&lt;/span> g &lt;span style="color:#f92672">+&lt;/span> b
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(flag)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(b64decode(flag&lt;span style="color:#f92672">.&lt;/span>encode()))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code class="language-bash!" data-lang="bash!">$ python exp.py
[(&amp;#39;c&amp;#39;, &amp;#39;3&amp;#39;, &amp;#39;l&amp;#39;), (&amp;#39;u&amp;#39;, &amp;#39;d&amp;#39;, &amp;#39;D&amp;#39;), (&amp;#39;o&amp;#39;, &amp;#39;g&amp;#39;, &amp;#39;Q&amp;#39;), (&amp;#39;V&amp;#39;, &amp;#39;Z&amp;#39;, &amp;#39;G&amp;#39;), (&amp;#39;R&amp;#39;, &amp;#39;U&amp;#39;, &amp;#39;5&amp;#39;), (&amp;#39;7&amp;#39;, &amp;#39;T&amp;#39;, &amp;#39;l&amp;#39;), (&amp;#39;9&amp;#39;, &amp;#39;l&amp;#39;, &amp;#39;T&amp;#39;), (&amp;#39;m&amp;#39;, &amp;#39;Y&amp;#39;, &amp;#39;3&amp;#39;), (&amp;#39;U&amp;#39;, &amp;#39;k&amp;#39;, &amp;#39;V&amp;#39;), (&amp;#39;f&amp;#39;, &amp;#39;N&amp;#39;, &amp;#39;k&amp;#39;), (&amp;#39;U&amp;#39;, &amp;#39;0&amp;#39;, &amp;#39;Q&amp;#39;), (&amp;#39;1&amp;#39;, &amp;#39;U&amp;#39;, &amp;#39;x&amp;#39;), (&amp;#39;U&amp;#39;, &amp;#39;F&amp;#39;, &amp;#39;9&amp;#39;), (&amp;#39;l&amp;#39;, &amp;#39;U&amp;#39;, &amp;#39;m&amp;#39;), (&amp;#39;N&amp;#39;, &amp;#39;F&amp;#39;, &amp;#39;U&amp;#39;), (&amp;#39;m&amp;#39;, &amp;#39;Z&amp;#39;, &amp;#39;S&amp;#39;), (&amp;#39;Q&amp;#39;, &amp;#39;W&amp;#39;, &amp;#39;c&amp;#39;), (&amp;#39;k&amp;#39;, &amp;#39;X&amp;#39;, &amp;#39;0&amp;#39;), (&amp;#39;5&amp;#39;, &amp;#39;f&amp;#39;, &amp;#39;R&amp;#39;), (&amp;#39;2&amp;#39;, &amp;#39;o&amp;#39;, &amp;#39;w&amp;#39;), (&amp;#39;L&amp;#39;, &amp;#39;V&amp;#39;, &amp;#39;E&amp;#39;), (&amp;#39;x&amp;#39;, &amp;#39;W&amp;#39;, &amp;#39;j&amp;#39;), (&amp;#39;N&amp;#39;, &amp;#39;h&amp;#39;, &amp;#39;Z&amp;#39;), (&amp;#39;j&amp;#39;, &amp;#39;E&amp;#39;, &amp;#39;w&amp;#39;), (&amp;#39;Y&amp;#39;, &amp;#39;T&amp;#39;, &amp;#39;Q&amp;#39;), (&amp;#39;x&amp;#39;, &amp;#39;X&amp;#39;, &amp;#39;2&amp;#39;), (&amp;#39;N&amp;#39;, &amp;#39;2&amp;#39;, &amp;#39;c&amp;#39;), (&amp;#39;G&amp;#39;, &amp;#39;d&amp;#39;, &amp;#39;o&amp;#39;), (&amp;#39;R&amp;#39;, &amp;#39;X&amp;#39;, &amp;#39;J&amp;#39;), (&amp;#39;f&amp;#39;, &amp;#39;T&amp;#39;, &amp;#39;m&amp;#39;), (&amp;#39;Z&amp;#39;, &amp;#39;f&amp;#39;, &amp;#39;N&amp;#39;), (&amp;#39;F&amp;#39;, &amp;#39;9&amp;#39;, &amp;#39;l&amp;#39;), (&amp;#39;U&amp;#39;, &amp;#39;n&amp;#39;, &amp;#39;B&amp;#39;), (&amp;#39;H&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;m&amp;#39;), (&amp;#39;E&amp;#39;, &amp;#39;2&amp;#39;, &amp;#39;S&amp;#39;), (&amp;#39;D&amp;#39;, &amp;#39;F&amp;#39;, &amp;#39;O&amp;#39;), (&amp;#39;R&amp;#39;, &amp;#39;V&amp;#39;, &amp;#39;9&amp;#39;), (&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;j&amp;#39;), (&amp;#39;d&amp;#39;, &amp;#39;l&amp;#39;, &amp;#39;d&amp;#39;), (&amp;#39;m&amp;#39;, &amp;#39;t&amp;#39;, &amp;#39;f&amp;#39;), (&amp;#39;Y&amp;#39;, &amp;#39;m&amp;#39;, &amp;#39;V&amp;#39;), (&amp;#39;f&amp;#39;, &amp;#39;d&amp;#39;, &amp;#39;G&amp;#39;), (&amp;#39;V&amp;#39;, &amp;#39;W&amp;#39;, &amp;#39;c&amp;#39;), (&amp;#39;V&amp;#39;, &amp;#39;9&amp;#39;, &amp;#39;i&amp;#39;), (&amp;#39;U&amp;#39;, &amp;#39;1&amp;#39;, &amp;#39;9&amp;#39;), (&amp;#39;G&amp;#39;, &amp;#39;Z&amp;#39;, &amp;#39;E&amp;#39;), (&amp;#39;h&amp;#39;, &amp;#39;A&amp;#39;, &amp;#39;Z&amp;#39;), (&amp;#39;V&amp;#39;, &amp;#39;J&amp;#39;, &amp;#39;f&amp;#39;), (&amp;#39;Q&amp;#39;, &amp;#39;1&amp;#39;, &amp;#39;Z&amp;#39;), (&amp;#39;L&amp;#39;, &amp;#39;c&amp;#39;, &amp;#39;n&amp;#39;), (&amp;#39;l&amp;#39;, &amp;#39;m&amp;#39;, &amp;#39;f&amp;#39;), (&amp;#39;Q&amp;#39;, &amp;#39;=&amp;#39;, &amp;#39;=&amp;#39;)]
c3ludDogQVZGRU57Tl9lTmY3UkVfNkU0Q1UxUF9lUmNFUmZSQWckX05fR2owLVExWjNhZjEwYTQxX2N2cGdoRXJfTmZfNF9lUnBHbmE2SDFORV9abjdldmtfYmVfdGVWcV9iU19GZEhAZVJfQ1ZLcnlmfQ==
b&amp;#39;synt: AVFEN{N_eNf7RE_6E4CU1P_eRcERfRAg$_N_Gj0-Q1Z3af10a41_cvpghEr_Nf_4_eRpGna6H1NE_Zn7evk_be_teVq_bS_FdH@eR_CVKryf}&amp;#39;
&lt;/code>&lt;/pre>&lt;p>Flag: &lt;code>NISRA{A_rAs7ER_6R4PH1C_rEpREsENt$_A_Tw0-D1M3ns10n41_pictuRe_As_4_rEcTan6U1AR_Ma7rix_or_grId_oF_SqU@rE_PIXels}&lt;/code>&lt;/p></description></item></channel></rss>