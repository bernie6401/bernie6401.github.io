<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>SBK Hugo Site</title><link>https://bernie6401.github.io/docs/job/interview/</link><description>Recent content on SBK Hugo Site</description><generator>Hugo</generator><language>en-us</language><atom:link href="https://bernie6401.github.io/docs/job/interview/index.xml" rel="self" type="application/rss+xml"/><item><title>TeamT5筆試題目筆記</title><link>https://bernie6401.github.io/docs/job/interview/teamt5%E7%AD%86%E8%A9%A6%E9%A1%8C%E7%9B%AE%E7%AD%86%E8%A8%98/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/job/interview/teamt5%E7%AD%86%E8%A9%A6%E9%A1%8C%E7%9B%AE%E7%AD%86%E8%A8%98/</guid><description>&lt;h1 id="teamt5筆試題目筆記">
 TeamT5筆試題目筆記
 &lt;a class="anchor" href="#teamt5%e7%ad%86%e8%a9%a6%e9%a1%8c%e7%9b%ae%e7%ad%86%e8%a8%98">#&lt;/a>
&lt;/h1>
&lt;p>:::info
前言: 通常我自己拿到一隻樣本，起手式會先搜一下hash，VirusTotal如果有紀錄的話最好，再來會丟到AnyRun看一下動態sandbox的狀態為何，但不確定這樣的操作是否符合本次筆試的預期，所以我會先設法在本機VM內分析看看，如果有利用這幾個online tools而得知的資訊，會再行標註
:::
:::danger
經過二階面試後，用線上的工具例如VirusTotal和AnyRun都是被嚴格禁止的。
第一個樣本總花費時間: 2天/第二個樣本總花費時間: 4天
:::&lt;/p>
&lt;h1 id="樣本93f33e4e9a732de665510aa5fdc565fc00bcf5e28101c5cc55b5b16f94288b8a">
 樣本(93f33e4e9a732de665510aa5fdc565fc00bcf5e28101c5cc55b5b16f94288b8a)
 &lt;a class="anchor" href="#%e6%a8%a3%e6%9c%ac93f33e4e9a732de665510aa5fdc565fc00bcf5e28101c5cc55b5b16f94288b8a">#&lt;/a>
&lt;/h1>
&lt;h2 id="惡意程式">
 惡意程式
 &lt;a class="anchor" href="#%e6%83%a1%e6%84%8f%e7%a8%8b%e5%bc%8f">#&lt;/a>
&lt;/h2>
&lt;h3 id="檔案資訊">
 檔案資訊
 &lt;a class="anchor" href="#%e6%aa%94%e6%a1%88%e8%b3%87%e8%a8%8a">#&lt;/a>
&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>DIE(Detect It Easy)
&lt;img src="https://hackmd.io/_uploads/S1Lbp6T3p.png" alt="圖片" />
看起來是一個HTML的純文字檔案&lt;/p>
&lt;/li>
&lt;li>
&lt;p>File/Stat/Exiftool
從以下結果來看，是一個SMTP的郵件檔案，並且是純文字的形式，所以直覺上可能和Outlook或是Firefox Thunderbird有關係，以binwalk的結果來說，他應該有壓縮一些內容在其中，如果實際丟到Any.Run的話會發現的確有很多檔案被compressed
&lt;img src="https://hackmd.io/_uploads/rJfrgyR3a.png" alt="圖片" />&lt;/p>
&lt;p>或者是說，從檔案內容來看(HxD)，會發現data帶了一個base64的file，decode會發現是&lt;code>0x50 4B 03 04&lt;/code>
:::spoiler Command Result&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ file 93f33e4e9a732de665510aa5fdc565fc00bcf5e28101c5cc55b5b16f94288b8a
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>93f33e4e9a732de665510aa5fdc565fc00bcf5e28101c5cc55b5b16f94288b8a: SMTP mail, ASCII text, with CRLF line terminators
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ exiftool 93f33e4e9a732de665510aa5fdc565fc00bcf5e28101c5cc55b5b16f94288b8a
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ExifTool Version Number : 12.40
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>File Name : 93f33e4e9a732de665510aa5fdc565fc00bcf5e28101c5cc55b5b16f94288b8a
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Directory : .
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>File Size : &lt;span style="color:#ae81ff">180&lt;/span> KiB
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>File Modification Date/Time : 2023:08:14 11:54:39+08:00
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>File Access Date/Time : 2024:02:29 16:55:48+08:00
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>File Inode Change Date/Time : 2024:02:29 16:55:48+08:00
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>File Permissions : -rwxrwxrwx
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>File Type : TXT
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>File Type Extension : txt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>MIME Type : text/plain
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>MIME Encoding : us-ascii
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Newlines : Windows CRLF
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Line Count : &lt;span style="color:#ae81ff">2410&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Word Count : &lt;span style="color:#ae81ff">2741&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ stat 93f33e4e9a732de665510aa5fdc565fc00bcf5e28101c5cc55b5b16f94288b8a
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> File: 93f33e4e9a732de665510aa5fdc565fc00bcf5e28101c5cc55b5b16f94288b8a
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Size: &lt;span style="color:#ae81ff">184712&lt;/span> Blocks: &lt;span style="color:#ae81ff">368&lt;/span> IO Block: &lt;span style="color:#ae81ff">4096&lt;/span> regular file
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Device: 66h/102d Inode: &lt;span style="color:#ae81ff">1688849860790082&lt;/span> Links: &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Access: &lt;span style="color:#f92672">(&lt;/span>0777/-rwxrwxrwx&lt;span style="color:#f92672">)&lt;/span> Uid: &lt;span style="color:#f92672">(&lt;/span> 1000/ sbk6401&lt;span style="color:#f92672">)&lt;/span> Gid: &lt;span style="color:#f92672">(&lt;/span> 1000/ sbk6401&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Access: 2024-02-29 16:55:48.949690200 +0800
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Modify: 2023-08-14 11:54:39.000000000 +0800
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Change: 2024-02-29 16:55:48.949690200 +0800
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Birth: -
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ binwalk 93f33e4e9a732de665510aa5fdc565fc00bcf5e28101c5cc55b5b16f94288b8a
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>DECIMAL HEXADECIMAL DESCRIPTION
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>--------------------------------------------------------------------------------
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">4244&lt;/span> 0x1094 HTML document header
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">5554&lt;/span> 0x15B2 HTML document footer
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">73264&lt;/span> 0x11E30 StuffIt Deluxe Segment &lt;span style="color:#f92672">(&lt;/span>data&lt;span style="color:#f92672">)&lt;/span>: fWm1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">169908&lt;/span> 0x297B4 IMG0 &lt;span style="color:#f92672">(&lt;/span>VxWorks&lt;span style="color:#f92672">)&lt;/span> header, size: &lt;span style="color:#ae81ff">218780743&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>:::&lt;/p></description></item><item><title>Trapa Interview</title><link>https://bernie6401.github.io/docs/job/interview/trapa-interview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernie6401.github.io/docs/job/interview/trapa-interview/</guid><description>&lt;h1 id="trapa-interview">
 Trapa Interview
 &lt;a class="anchor" href="#trapa-interview">#&lt;/a>
&lt;/h1>
&lt;h2 id="面試流程">
 面試流程
 &lt;a class="anchor" href="#%e9%9d%a2%e8%a9%a6%e6%b5%81%e7%a8%8b">#&lt;/a>
&lt;/h2>
&lt;h3 id="一面">
 一面
 &lt;a class="anchor" href="#%e4%b8%80%e9%9d%a2">#&lt;/a>
&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>(1HR)一面主要是&lt;a href="https://twitter.com/0xddaa">ddaa&lt;/a>主面，人非常的好也很願意給我建議和修正的地方，一開始主要針對公司在開發的平台以及整體公司現況做簡單的說明，接著就直接進到自我介紹，完了之後開始針對自我介紹的內容做非&lt;del>常&lt;/del>詳細的詢問，諸如目前實習的地方主要是在幹麻、開發的東西是什麼、IPS和Firewall的品牌是什麼之類的(因為我主要是針對公司內部開發一個防火牆的整合系統所以會被問這個東西)，還有針對我寫的各種文章、藍隊的題目靶機(BTLO、Cyberdefenders)有沒有印象深刻的題目、以及針對比賽的經驗、有沒有什麼特別令人印象深刻的地方或是題目是很有成就感的(因為我跟他說參加過去年和今年的EOF，所以針對決賽的A&amp;amp;D以及KoH會比較多問題)等等，總之這一段我個人認為就是閒聊，主要了解我的個人經歷以及目前的經驗到哪裡，但是還是那句老話，自己的經驗有多少寫多少，不要不是自己做的也寫上去，不然被問爆就會露出馬腳&lt;/p>
&lt;/li>
&lt;li>
&lt;p>緊接著沒記錯的話就是問一些比較和資安專業的問題(這一個階段是在不上網Google的情況之下以自己本身的經驗和知識回答)，我記得的題目有&lt;/p>
&lt;ol>
&lt;li>什麼是Mitre ATT&amp;amp;CK&lt;/li>
&lt;li>SOC團隊主要是幹嘛的&lt;/li>
&lt;li>有沒有什麼特別印象深刻的APT攻擊&lt;/li>
&lt;li>什麼是IDS、IPS、EDR、MDR&lt;/li>
&lt;/ol>
&lt;p>最後一題答的非常不好，應該說我之前有接觸過但真的一時忘記的，所以就只能交給ddaa幫忙改正我的答案，這邊再寫一次好了，以免忘記&lt;/p>
&lt;ol>
&lt;li>IDS(Intrusion Detection System, 入侵偵測系統)
從名字就可以看的出來，他是針對流入流出的各種封包的偵測系統，也就是獨立於Firewall的旁之，如果他有檢測到封包內有什麼異常的Payload或是pattern，就會跳出告警，但就僅只於此，不會再做更多的操作&lt;/li>
&lt;li>IPS(Intrusion Prevention System, 入侵防禦系統)
IPS就是要改進上述的問題，他主打的就是偵測到快快的東西就會主動的防禦掉，但這樣還是有一個問題，現今的攻擊手法越來越多種，而且有時候是那種可以包裝成安全落地的形式，必須要在本地端監控才有辦法知道&lt;/li>
&lt;li>EDR(Endpoint Detection and Response, 端點偵測與應對)
EDR就是在做這樣的事情，可是有可能會有一個疑問，每個人的主機內不是都有安裝那種傳統的Windows Defenders或是小紅傘那種東西，為什麼還需要有EDR，其實現今的攻擊手法已經有很大的變化，有可能單純看個人的裝置會看不出個所以然，必須要聯合其他的裝置一起做關聯性的比對才會知道目前是不是正在遭受攻擊，所以EDR強大的地方在於他做到各個裝置endpoint端點的串聯，讓資安事件的偵測和防禦可以更嚴謹，這也是中小型企業最需要的資安產品&lt;/li>
&lt;li>MDR(Managed Detection and Response, 受管式偵測與應對)
這東西其實就是一個EDR+SOC的服務衍生的產品，但ddaa說這個東西要做出市場區隔可能還沒有到太創新&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>(1HR)緊接著就是人生第一次的白板題，題目敘述如下:
有一個遊戲，規則是有一個炸彈，炸彈上有好幾條線，每一條線都有三個特徵，我必須根據這三個特徵判斷文氏圖並且決定要不要剪斷這一條線，文氏圖如下，這是我從網路上找到最像題幹的圖片
&lt;img src="https://hackmd.io/_uploads/HkQnldw6p.png" alt="venndiagram" />
剛剛講到每一條線的三個特徵分別是: 線的一端連接的LED有沒有亮、該條線的顏色(是否為紅或藍或非藍也非紅或是同時是藍也是紅)、線的另外一端有無標示星號，依照上圖來說，A區域就是有無星號、B區域是LED有無亮、C區域是線是紅色、D區域是線是藍色，所以假設現在有一線的三個特徵是有LED、有星號且是紅色，則我們應該要圈A、B和C，最後的交集就是44和32，當然當時的題目不是這些數字，他是有代號的，共有五個C、D、S、P、B，分別代表:
C: 無條件剪斷線
D: 暫時先不要剪斷，根據搭配到的其他代號(S、P、B)進行後續驗證
S: 如果炸彈的序列號為偶數則剪斷線
P: 如果炸彈有Port號也要剪斷線
B: 如果炸彈的電池有兩個以上也要剪斷線&lt;/p>
&lt;p>總結一下上述的問題:
Input: 線的三個特徵(LED亮暗或閃爍、線的顏色、有無星號)以及炸彈的三個特徵(序列號、電池數量、Port號)
Output: 根據以上的狀態判段該條線要不要剪斷&lt;/p>
&lt;p>以下附上我的Source Code:
:::spoiler Source Code&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-python!" data-lang="python!">try:
 led_light = input(&amp;#34;LED Light Or Not Or Flashing (Y/N/F): &amp;#34;).upper()
 assert led_light == &amp;#34;Y&amp;#34; or led_light == &amp;#34;N&amp;#34; or led_light == &amp;#34;F&amp;#34;
 if led_light == &amp;#34;F&amp;#34;:
 led_light = &amp;#34;N&amp;#34;
 star_or_not = input(&amp;#34;Star Or Not (Y/N): &amp;#34;).upper()
 assert star_or_not == &amp;#34;Y&amp;#34; or star_or_not == &amp;#34;N&amp;#34;
 cable_color = input(&amp;#34;Cable Color (R/B): &amp;#34;).upper()
 assert cable_color == &amp;#34;R&amp;#34; or cable_color == &amp;#34;B&amp;#34;
 bomb_feature_serial = int(input(&amp;#34;Bomb Feature Serial (number): &amp;#34;))
 assert bomb_feature_serial &amp;gt;= 0
 bomb_feature_port = int(input(&amp;#34;Bomb Feature Port (number): &amp;#34;))
 assert bomb_feature_port &amp;gt;= 0
 bomb_feature_battery_num = int(input(&amp;#34;Bomb Feature Battery Number (number): &amp;#34;))
 assert bomb_feature_battery_num &amp;gt;= 0
except ValueError:
 print(&amp;#34;Please input the correct value&amp;#34;)
 exit()

def judge_venn_diagram(led_light, star_or_not, cable_color):

 if led_light == &amp;#34;Y&amp;#34;:
 if star_or_not == &amp;#34;Y&amp;#34;:
 if cable_color == &amp;#34;R&amp;#34;:
 return &amp;#34;D&amp;#34;, &amp;#34;B&amp;#34;
 elif cable_color == &amp;#34;B&amp;#34;:
 return &amp;#34;D&amp;#34;, &amp;#34;P&amp;#34;
 else:
 if cable_color == &amp;#34;R&amp;#34;:
 return &amp;#34;B&amp;#34;, &amp;#34;S&amp;#34;
 elif cable_color == &amp;#34;B&amp;#34;:
 return &amp;#34;P&amp;#34;, &amp;#34;S&amp;#34;
 elif led_light == &amp;#34;N&amp;#34;:
 if star_or_not == &amp;#34;Y&amp;#34;:
 if cable_color == &amp;#34;R&amp;#34;:
 return &amp;#34;C&amp;#34;, &amp;#34;P&amp;#34;
 elif cable_color == &amp;#34;B&amp;#34;:
 return &amp;#34;P&amp;#34;, &amp;#34;D&amp;#34;
 else:
 return &amp;#34;S&amp;#34;, &amp;#34;D&amp;#34;

def judge_digit(digit):
 if &amp;#34;D&amp;#34; in digit:
 if &amp;#34;S&amp;#34; in digit:
 return judge_bomb_feature_serial(bomb_feature_serial)
 elif &amp;#34;P&amp;#34; in digit:
 if bomb_feature_port:
 return True
 else:
 return False
 elif &amp;#34;B&amp;#34; in digit:
 return judge_bomb_feature_battery_num(bomb_feature_battery_num)

 elif &amp;#34;C&amp;#34; in digit:
 return True

def judge_bomb_feature_battery_num(bomb_feature_battery_num):
 if bomb_feature_battery_num &amp;gt;= 2:
 return True
 return False

def judge_bomb_feature_serial(bomb_feature_serial):
 if bomb_feature_serial % 2 == 0:
 return True
 return False

def main():
 print(&amp;#34;Start Game&amp;#34;)
 num1, num2 = judge_venn_diagram(led_light, star_or_not, cable_color)

 if judge_digit([num1, num2]):
 print(&amp;#34;Cut&amp;#34;)
 else:
 print(&amp;#34;Don&amp;#39;t Cut&amp;#34;) 


if __name__ == &amp;#34;__main__&amp;#34;:
 main()
&lt;/code>&lt;/pre>&lt;p>:::
當時是依照CodePilot和ChatGPT生出一些關鍵的語法再加上我自己的邏輯寫出來的，其實這一題算是簡單，我的留程是先借由線的三個特徵判斷文氏圖會圈出哪兩個字母(每一次一定都會圈出兩個字母，且C和D這兩個互斥的情況不會出現，一定是C或是D搭配SPB其中一個字母)
:::info
這邊要特別再說明一下，如果是閃爍就視為暗，如果LED沒有亮就代表我在圈文氏圖的時候要用排斥的角度看他，舉例來說如果LED沒亮、但是有星號且線為紅色，B圈到的部分就不能算，所以以上圖來說就會是420和432這兩個數字，如果是LED沒亮也沒有星號且線為紅色，則圈出來的部分就是1058和485這兩個數字，不知道這樣的說明夠不夠清楚
:::
總之，這個階段就需要不斷的和面試官來回詢問和溝通Spec的要求，我問了超多問題，例如: 閃爍的時候算不算一個新的狀態因為原本的Spec上沒有提到，結果ddaa說當成暗；剛開始的時候也對這個題目很矇，想說到底在衝三小，所以我直接問有沒有什麼是比較好的方式可以判斷文氏圖圈出哪些字母，ddaa說可以直接用if-else判斷就好，這也讓我有個底，如果只是利用到if-else，那題目應該不會很難，至少我是個會把問題複雜化的人，所以我在寫的時候就直接用最暴力的方式，就用巢狀if-else判斷所有狀態；我還問了上面特別提到的問題，如果特徵是否定的情況要怎麼處理，其實也就是要用排除的方式看待他等等問題，最後的結論是有寫出來，方向也大致上和ddaa預想的差不多，只是有一些小陷阱和可以改進的地方&lt;/p></description></item></channel></rss>